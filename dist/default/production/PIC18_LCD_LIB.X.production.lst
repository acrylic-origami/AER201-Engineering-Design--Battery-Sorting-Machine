

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 27 16:19:30 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    96                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    97                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    98  0000                     
    99                           ; Version 1.40
   100                           ; Generated 01/12/2016 GMT
   101                           ; 
   102                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   103                           ; All rights reserved.
   104                           ; 
   105                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   106                           ; 
   107                           ; Redistribution and use in source and binary forms, with or without modification, are
   108                           ; permitted provided that the following conditions are met:
   109                           ; 
   110                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   111                           ;        conditions and the following disclaimer.
   112                           ; 
   113                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   114                           ;        of conditions and the following disclaimer in the documentation and/or other
   115                           ;        materials provided with the distribution.
   116                           ; 
   117                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   118                           ;        software without specific prior written permission.
   119                           ; 
   120                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   121                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   122                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   123                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   124                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   125                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   126                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   127                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   128                           ; 
   129                           ; 
   130                           ; Code-generator required, PIC18F4620 Definitions
   131                           ; 
   132                           ; SFR Addresses
   133  0000                     
   134                           	psect	idataBANK1
   135  00575C                     __pidataBANK1:
   136                           	opt stack 0
   137                           
   138                           ;initializer for _V_LIM_9V
   139  00575C  77                 	db	119
   140  00575D  EE                 	db	238
   141  00575E  3F                 	db	63
   142                           
   143                           ;initializer for _V_LIM_AA
   144  00575F  C1                 	db	193
   145  005760  4A                 	db	74
   146  005761  3E                 	db	62
   147                           
   148                           ;initializer for _V_LIM_C
   149  005762  A7                 	db	167
   150  005763  A9                 	db	169
   151  005764  3F                 	db	63
   152                           
   153                           ;initializer for _angle
   154  005765  005A               	dw	90
   155                           
   156                           ;initializer for _padAngle_CLOSE
   157  005767  001E               	dw	30
   158                           
   159                           ;initializer for _padAngle_NEUTRAL
   160  005769  004C               	dw	76
   161                           
   162                           ;initializer for _padAngle_OPEN
   163  00576B  00B4               	dw	180
   164                           
   165                           ;initializer for _period
   166  00576D  797C               	dw	31100
   167                           
   168                           ;initializer for _redirectAngle_9V
   169  00576F  0076               	dw	118
   170                           
   171                           ;initializer for _redirectAngle_AA
   172  005771  008A               	dw	138
   173                           
   174                           ;initializer for _redirectAngle_C
   175  005773  00A6               	dw	166
   176                           
   177                           ;initializer for _redirectAngle_OTHER
   178  005775  0099               	dw	153
   179                           
   180                           ;initializer for _stoppingTime
   181  005777  0064               	dw	100
   182                           
   183                           ;initializer for _AA_float
   184  005779  0002               	dw	2
   185  00577B  0005               	dw	5
   186                           
   187                           ;initializer for _conveyorServo
   188  00577D  0002               	dw	2
   189  00577F  0002               	dw	2
   190                           
   191                           ;initializer for _cylinderDir
   192  005781  0003               	dw	3
   193  005783  0001               	dw	1
   194                           
   195                           ;initializer for _cylinderMotor
   196  005785  0002               	dw	2
   197  005787  0000               	dw	0
   198                           
   199                           ;initializer for _padPin1
   200  005789  0002               	dw	2
   201  00578B  0006               	dw	6
   202                           
   203                           ;initializer for _padPin2
   204  00578D  0002               	dw	2
   205  00578F  0007               	dw	7
   206                           
   207                           ;initializer for _padServo
   208  005791  0002               	dw	2
   209  005793  0001               	dw	1
   210                           
   211                           ;initializer for _redirectingServo
   212  005795  0003               	dw	3
   213  005797  0000               	dw	0
   214                           
   215                           	psect	mediumconst
   216  00FE28                     __pmediumconst:
   217                           	opt stack 0
   218  00FE28  00                 	db	0
   219  00FE29                     _dpowers:
   220                           	opt stack 0
   221  00FE29  0001               	dw	1
   222  00FE2B  0000               	dw	0
   223  00FE2D  000A               	dw	10
   224  00FE2F  0000               	dw	0
   225  00FE31  0064               	dw	100
   226  00FE33  0000               	dw	0
   227  00FE35  03E8               	dw	1000
   228  00FE37  0000               	dw	0
   229  00FE39  2710               	dw	10000
   230  00FE3B  0000               	dw	0
   231  00FE3D  86A0               	dw	34464
   232  00FE3F  0001               	dw	1
   233  00FE41  4240               	dw	16960
   234  00FE43  000F               	dw	15
   235  00FE45  9680               	dw	38528
   236  00FE47  0098               	dw	152
   237  00FE49  E100               	dw	57600
   238  00FE4B  05F5               	dw	1525
   239  00FE4D  CA00               	dw	51712
   240  00FE4F  3B9A               	dw	15258
   241  00FE51                     __end_of_dpowers:
   242                           	opt stack 0
   243  00FE51                     __npowers_:
   244                           	opt stack 0
   245  00FE51  00                 	db	0
   246  00FE52  80                 	db	128
   247  00FE53  3F                 	db	63
   248  00FE54  CD                 	db	205
   249  00FE55  CC                 	db	204
   250  00FE56  3D                 	db	61
   251  00FE57  D7                 	db	215
   252  00FE58  23                 	db	35
   253  00FE59  3C                 	db	60
   254  00FE5A  12                 	db	18
   255  00FE5B  83                 	db	131
   256  00FE5C  3A                 	db	58
   257  00FE5D  B7                 	db	183
   258  00FE5E  D1                 	db	209
   259  00FE5F  38                 	db	56
   260  00FE60  C6                 	db	198
   261  00FE61  27                 	db	39
   262  00FE62  37                 	db	55
   263  00FE63  38                 	db	56
   264  00FE64  86                 	db	134
   265  00FE65  35                 	db	53
   266  00FE66  C0                 	db	192
   267  00FE67  D6                 	db	214
   268  00FE68  33                 	db	51
   269  00FE69  CC                 	db	204
   270  00FE6A  2B                 	db	43
   271  00FE6B  32                 	db	50
   272  00FE6C  70                 	db	112
   273  00FE6D  89                 	db	137
   274  00FE6E  30                 	db	48
   275  00FE6F  E7                 	db	231
   276  00FE70  DB                 	db	219
   277  00FE71  2E                 	db	46
   278  00FE72  E5                 	db	229
   279  00FE73  3C                 	db	60
   280  00FE74  1E                 	db	30
   281  00FE75  42                 	db	66
   282  00FE76  A2                 	db	162
   283  00FE77  0D                 	db	13
   284  00FE78                     __end_of__npowers_:
   285                           	opt stack 0
   286  00FE78                     __powers_:
   287                           	opt stack 0
   288  00FE78  00                 	db	0
   289  00FE79  80                 	db	128
   290  00FE7A  3F                 	db	63
   291  00FE7B  00                 	db	0
   292  00FE7C  20                 	db	32
   293  00FE7D  41                 	db	65
   294  00FE7E  00                 	db	0
   295  00FE7F  C8                 	db	200
   296  00FE80  42                 	db	66
   297  00FE81  00                 	db	0
   298  00FE82  7A                 	db	122
   299  00FE83  44                 	db	68
   300  00FE84  40                 	db	64
   301  00FE85  1C                 	db	28
   302  00FE86  46                 	db	70
   303  00FE87  50                 	db	80
   304  00FE88  C3                 	db	195
   305  00FE89  47                 	db	71
   306  00FE8A  24                 	db	36
   307  00FE8B  74                 	db	116
   308  00FE8C  49                 	db	73
   309  00FE8D  97                 	db	151
   310  00FE8E  18                 	db	24
   311  00FE8F  4B                 	db	75
   312  00FE90  BC                 	db	188
   313  00FE91  BE                 	db	190
   314  00FE92  4C                 	db	76
   315  00FE93  6B                 	db	107
   316  00FE94  6E                 	db	110
   317  00FE95  4E                 	db	78
   318  00FE96  03                 	db	3
   319  00FE97  15                 	db	21
   320  00FE98  50                 	db	80
   321  00FE99  79                 	db	121
   322  00FE9A  AD                 	db	173
   323  00FE9B  60                 	db	96
   324  00FE9C  F3                 	db	243
   325  00FE9D  49                 	db	73
   326  00FE9E  71                 	db	113
   327  00FE9F                     __end_of__powers_:
   328                           	opt stack 0
   329  00FE9F                     _hexpowers:
   330                           	opt stack 0
   331  00FE9F  0001               	dw	1
   332  00FEA1  0000               	dw	0
   333  00FEA3  0010               	dw	16
   334  00FEA5  0000               	dw	0
   335  00FEA7  0100               	dw	256
   336  00FEA9  0000               	dw	0
   337  00FEAB  1000               	dw	4096
   338  00FEAD  0000               	dw	0
   339  00FEAF  0000               	dw	0
   340  00FEB1  0001               	dw	1
   341  00FEB3  0000               	dw	0
   342  00FEB5  0010               	dw	16
   343  00FEB7  0000               	dw	0
   344  00FEB9  0100               	dw	256
   345  00FEBB  0000               	dw	0
   346  00FEBD  1000               	dw	4096
   347  00FEBF                     __end_of_hexpowers:
   348                           	opt stack 0
   349  00FEBF                     _keys:
   350                           	opt stack 0
   351  00FEBF  31                 	db	49
   352  00FEC0  32                 	db	50
   353  00FEC1  33                 	db	51
   354  00FEC2  41                 	db	65
   355  00FEC3  34                 	db	52
   356  00FEC4  35                 	db	53
   357  00FEC5  36                 	db	54
   358  00FEC6  42                 	db	66
   359  00FEC7  37                 	db	55
   360  00FEC8  38                 	db	56
   361  00FEC9  39                 	db	57
   362  00FECA  43                 	db	67
   363  00FECB  2A                 	db	42
   364  00FECC  30                 	db	48
   365  00FECD  23                 	db	35
   366  00FECE  44                 	db	68
   367  00FECF  00                 	db	0
   368  00FED0                     __end_of_keys:
   369                           	opt stack 0
   370  00FED0                     _happynewyear:
   371                           	opt stack 0
   372  00FED0  00                 	db	0
   373  00FED1  59                 	db	89
   374  00FED2  03                 	db	3
   375  00FED3  01                 	db	1
   376  00FED4  13                 	db	19
   377  00FED5  04                 	db	4
   378  00FED6  17                 	db	23
   379  00FED7                     __end_of_happynewyear:
   380                           	opt stack 0
   381  0000                     _ADCON0	set	4034
   382  0000                     _ADCON1	set	4033
   383  0000                     _ADCON2	set	4032
   384  0000                     _ADRESH	set	4036
   385  0000                     _ADRESL	set	4035
   386  0000                     _EEADR	set	4009
   387  0000                     _EEADRH	set	4010
   388  0000                     _EECON1	set	4006
   389  0000                     _EECON2	set	4007
   390  0000                     _EEDATA	set	4008
   391  0000                     _INTCONbits	set	4082
   392  0000                     _LATA	set	3977
   393  0000                     _LATB	set	3978
   394  0000                     _LATC	set	3979
   395  0000                     _LATD	set	3980
   396  0000                     _LATDbits	set	3980
   397  0000                     _LATE	set	3981
   398  0000                     _PORTA	set	3968
   399  0000                     _PORTB	set	3969
   400  0000                     _PORTBbits	set	3969
   401  0000                     _PORTC	set	3970
   402  0000                     _PORTD	set	3971
   403  0000                     _SSPADD	set	4040
   404  0000                     _SSPBUF	set	4041
   405  0000                     _SSPCON1	set	4038
   406  0000                     _SSPCON2	set	4037
   407  0000                     _SSPSTAT	set	4039
   408  0000                     _T0CON	set	4053
   409  0000                     _T1CON	set	4045
   410  0000                     _T3CON	set	4017
   411  0000                     _TMR0H	set	4055
   412  0000                     _TMR0L	set	4054
   413  0000                     _TMR1H	set	4047
   414  0000                     _TMR1L	set	4046
   415  0000                     _TMR3H	set	4019
   416  0000                     _TMR3L	set	4018
   417  0000                     _TRISA	set	3986
   418  0000                     _TRISB	set	3987
   419  0000                     _TRISC	set	3988
   420  0000                     _TRISD	set	3989
   421  0000                     _TRISE	set	3990
   422  0000                     _ACKDT	set	32301
   423  0000                     _ACKEN	set	32300
   424  0000                     _EEIF	set	32012
   425  0000                     _INT0IE	set	32660
   426  0000                     _INT0IF	set	32657
   427  0000                     _INT1IE	set	32643
   428  0000                     _INT1IF	set	32640
   429  0000                     _PEIE	set	32662
   430  0000                     _PEN	set	32298
   431  0000                     _RCEN	set	32299
   432  0000                     _RSEN	set	32297
   433  0000                     _SEN	set	32296
   434  0000                     _TMR0IE	set	32661
   435  0000                     _TMR0IF	set	32658
   436  0000                     _TMR1IE	set	31976
   437  0000                     _TMR1IF	set	31984
   438  0000                     _TMR3IE	set	32001
   439  0000                     _TRISC3	set	31907
   440  0000                     _TRISC4	set	31908
   441  00FED7                     STR_13:
   442  00FED7  25                 	db	37
   443  00FED8  63                 	db	99	;'c'
   444  00FED9  29                 	db	41
   445  00FEDA  20                 	db	32
   446  00FEDB  74                 	db	116	;'t'
   447  00FEDC  69                 	db	105	;'i'
   448  00FEDD  6D                 	db	109	;'m'
   449  00FEDE  65                 	db	101	;'e'
   450  00FEDF  20                 	db	32
   451  00FEE0  20                 	db	32
   452  00FEE1  3C                 	db	60	;'<'
   453  00FEE2  41                 	db	65	;'A'
   454  00FEE3  20                 	db	32
   455  00FEE4  20                 	db	32
   456  00FEE5  20                 	db	32
   457  00FEE6  20                 	db	32
   458  00FEE7  20                 	db	32
   459  00FEE8  0A                 	db	10
   460  00FEE9  00                 	db	0
   461  00FEEA                     STR_9:
   462  00FEEA  73                 	db	115	;'s'
   463  00FEEB  74                 	db	116	;'t'
   464  00FEEC  61                 	db	97	;'a'
   465  00FEED  72                 	db	114	;'r'
   466  00FEEE  74                 	db	116	;'t'
   467  00FEEF  20                 	db	32
   468  00FEF0  20                 	db	32
   469  00FEF1  20                 	db	32
   470  00FEF2  3C                 	db	60	;'<'
   471  00FEF3  42                 	db	66	;'B'
   472  00FEF4  20                 	db	32
   473  00FEF5  20                 	db	32
   474  00FEF6  20                 	db	32
   475  00FEF7  20                 	db	32
   476  00FEF8  20                 	db	32
   477  00FEF9  20                 	db	32
   478  00FEFA  0A                 	db	10
   479  00FEFB  00                 	db	0
   480  00FEFC                     STR_7:
   481  00FEFC  20                 	db	32
   482  00FEFD  20                 	db	32
   483  00FEFE  68                 	db	104	;'h'
   484  00FEFF  68                 	db	104	;'h'
   485  00FF00  3A                 	db	58	;':'
   486  00FF01  6D                 	db	109	;'m'
   487  00FF02  6D                 	db	109	;'m'
   488  00FF03  3A                 	db	58	;':'
   489  00FF04  73                 	db	115	;'s'
   490  00FF05  73                 	db	115	;'s'
   491  00FF06  20                 	db	32
   492  00FF07  20                 	db	32
   493  00FF08  20                 	db	32
   494  00FF09  20                 	db	32
   495  00FF0A  20                 	db	32
   496  00FF0B  20                 	db	32
   497  00FF0C  0A                 	db	10
   498  00FF0D  00                 	db	0
   499  00FF0E                     STR_11:
   500  00FF0E  73                 	db	115	;'s'
   501  00FF0F  65                 	db	101	;'e'
   502  00FF10  6C                 	db	108	;'l'
   503  00FF11  65                 	db	101	;'e'
   504  00FF12  63                 	db	99	;'c'
   505  00FF13  74                 	db	116	;'t'
   506  00FF14  20                 	db	32
   507  00FF15  72                 	db	114	;'r'
   508  00FF16  75                 	db	117	;'u'
   509  00FF17  6E                 	db	110	;'n'
   510  00FF18  3A                 	db	58	;':'
   511  00FF19  20                 	db	32
   512  00FF1A  20                 	db	32
   513  00FF1B  20                 	db	32
   514  00FF1C  20                 	db	32
   515  00FF1D  20                 	db	32
   516  00FF1E  0A                 	db	10
   517  00FF1F  00                 	db	0
   518  00FF20                     STR_15:
   519  00FF20  74                 	db	116	;'t'
   520  00FF21  69                 	db	105	;'i'
   521  00FF22  6D                 	db	109	;'m'
   522  00FF23  65                 	db	101	;'e'
   523  00FF24  3A                 	db	58	;':'
   524  00FF25  20                 	db	32
   525  00FF26  6E                 	db	110	;'n'
   526  00FF27  6E                 	db	110	;'n'
   527  00FF28  6E                 	db	110	;'n'
   528  00FF29  20                 	db	32
   529  00FF2A  73                 	db	115	;'s'
   530  00FF2B  65                 	db	101	;'e'
   531  00FF2C  63                 	db	99	;'c'
   532  00FF2D  20                 	db	32
   533  00FF2E  20                 	db	32
   534  00FF2F  20                 	db	32
   535  00FF30  0A                 	db	10
   536  00FF31  00                 	db	0
   537  00FF32                     STR_17:
   538  00FF32  5B                 	db	91	;'['
   539  00FF33  41                 	db	65	;'A'
   540  00FF34  41                 	db	65	;'A'
   541  00FF35  2C                 	db	44
   542  00FF36  39                 	db	57	;'9'
   543  00FF37  56                 	db	86	;'V'
   544  00FF38  2C                 	db	44
   545  00FF39  43                 	db	67	;'C'
   546  00FF3A  2C                 	db	44
   547  00FF3B  6F                 	db	111	;'o'
   548  00FF3C  74                 	db	116	;'t'
   549  00FF3D  68                 	db	104	;'h'
   550  00FF3E  65                 	db	101	;'e'
   551  00FF3F  72                 	db	114	;'r'
   552  00FF40  5D                 	db	93	;']'
   553  00FF41  20                 	db	32
   554  00FF42  0A                 	db	10
   555  00FF43  00                 	db	0
   556  00FF44                     STR_19:
   557  00FF44  30                 	db	48	;'0'
   558  00FF45  31                 	db	49	;'1'
   559  00FF46  32                 	db	50	;'2'
   560  00FF47  33                 	db	51	;'3'
   561  00FF48  34                 	db	52	;'4'
   562  00FF49  35                 	db	53	;'5'
   563  00FF4A  36                 	db	54	;'6'
   564  00FF4B  37                 	db	55	;'7'
   565  00FF4C  38                 	db	56	;'8'
   566  00FF4D  39                 	db	57	;'9'
   567  00FF4E  61                 	db	97	;'a'
   568  00FF4F  62                 	db	98	;'b'
   569  00FF50  63                 	db	99	;'c'
   570  00FF51  64                 	db	100	;'d'
   571  00FF52  65                 	db	101	;'e'
   572  00FF53  66                 	db	102	;'f'
   573  00FF54  00                 	db	0
   574  00FF55                     STR_16:
   575  00FF55  20                 	db	32
   576  00FF56  20                 	db	32
   577  00FF57  20                 	db	32
   578  00FF58  20                 	db	32
   579  00FF59  20                 	db	32
   580  00FF5A  20                 	db	32
   581  00FF5B  20                 	db	32
   582  00FF5C  20                 	db	32
   583  00FF5D  20                 	db	32
   584  00FF5E  20                 	db	32
   585  00FF5F  20                 	db	32
   586  00FF60  20                 	db	32
   587  00FF61  20                 	db	32
   588  00FF62  20                 	db	32
   589  00FF63  2A                 	db	42
   590  00FF64  3E                 	db	62	;'>'
   591  00FF65  00                 	db	0
   592  00FF66                     STR_12:
   593  00FF66  5B                 	db	91	;'['
   594  00FF67  31                 	db	49	;'1'
   595  00FF68  2C                 	db	44
   596  00FF69  32                 	db	50	;'2'
   597  00FF6A  2C                 	db	44
   598  00FF6B  33                 	db	51	;'3'
   599  00FF6C  2C                 	db	44
   600  00FF6D  34                 	db	52	;'4'
   601  00FF6E  5D                 	db	93	;']'
   602  00FF6F  20                 	db	32
   603  00FF70  20                 	db	32
   604  00FF71  20                 	db	32
   605  00FF72  20                 	db	32
   606  00FF73  20                 	db	32
   607  00FF74  2A                 	db	42
   608  00FF75  3E                 	db	62	;'>'
   609  00FF76  00                 	db	0
   610  00FF77                     STR_10:
   611  00FF77  68                 	db	104	;'h'
   612  00FF78  69                 	db	105	;'i'
   613  00FF79  73                 	db	115	;'s'
   614  00FF7A  74                 	db	116	;'t'
   615  00FF7B  6F                 	db	111	;'o'
   616  00FF7C  72                 	db	114	;'r'
   617  00FF7D  79                 	db	121	;'y'
   618  00FF7E  20                 	db	32
   619  00FF7F  3C                 	db	60	;'<'
   620  00FF80  43                 	db	67	;'C'
   621  00FF81  20                 	db	32
   622  00FF82  20                 	db	32
   623  00FF83  20                 	db	32
   624  00FF84  20                 	db	32
   625  00FF85  2A                 	db	42
   626  00FF86  3E                 	db	62	;'>'
   627  00FF87  00                 	db	0
   628  00FF88                     STR_14:
   629  00FF88  20                 	db	32
   630  00FF89  20                 	db	32
   631  00FF8A  20                 	db	32
   632  00FF8B  73                 	db	115	;'s'
   633  00FF8C  74                 	db	116	;'t'
   634  00FF8D  61                 	db	97	;'a'
   635  00FF8E  74                 	db	116	;'t'
   636  00FF8F  73                 	db	115	;'s'
   637  00FF90  20                 	db	32
   638  00FF91  3C                 	db	60	;'<'
   639  00FF92  42                 	db	66	;'B'
   640  00FF93  20                 	db	32
   641  00FF94  20                 	db	32
   642  00FF95  20                 	db	32
   643  00FF96  2A                 	db	42
   644  00FF97  3E                 	db	62	;'>'
   645  00FF98  00                 	db	0
   646  00FF99                     STR_18:
   647  00FF99  5B                 	db	91	;'['
   648  00FF9A  6E                 	db	110	;'n'
   649  00FF9B  6E                 	db	110	;'n'
   650  00FF9C  2C                 	db	44
   651  00FF9D  6E                 	db	110	;'n'
   652  00FF9E  2C                 	db	44
   653  00FF9F  6E                 	db	110	;'n'
   654  00FFA0  2C                 	db	44
   655  00FFA1  6E                 	db	110	;'n'
   656  00FFA2  6E                 	db	110	;'n'
   657  00FFA3  5D                 	db	93	;']'
   658  00FFA4  20                 	db	32
   659  00FFA5  20                 	db	32
   660  00FFA6  20                 	db	32
   661  00FFA7  2A                 	db	42
   662  00FFA8  3E                 	db	62	;'>'
   663  00FFA9  00                 	db	0
   664  00FFAA                     STR_8:
   665  00FFAA  20                 	db	32
   666  00FFAB  20                 	db	32
   667  00FFAC  6D                 	db	109	;'m'
   668  00FFAD  6D                 	db	109	;'m'
   669  00FFAE  3A                 	db	58	;':'
   670  00FFAF  64                 	db	100	;'d'
   671  00FFB0  64                 	db	100	;'d'
   672  00FFB1  3A                 	db	58	;':'
   673  00FFB2  79                 	db	121	;'y'
   674  00FFB3  79                 	db	121	;'y'
   675  00FFB4  20                 	db	32
   676  00FFB5  20                 	db	32
   677  00FFB6  20                 	db	32
   678  00FFB7  20                 	db	32
   679  00FFB8  41                 	db	65	;'A'
   680  00FFB9  3E                 	db	62	;'>'
   681  00FFBA  00                 	db	0
   682  00FFBB                     STR_2:
   683  00FFBB  74                 	db	116	;'t'
   684  00FFBC  69                 	db	105	;'i'
   685  00FFBD  6D                 	db	109	;'m'
   686  00FFBE  65                 	db	101	;'e'
   687  00FFBF  20                 	db	32
   688  00FFC0  25                 	db	37
   689  00FFC1  30                 	db	48	;'0'
   690  00FFC2  32                 	db	50	;'2'
   691  00FFC3  6C                 	db	108	;'l'
   692  00FFC4  64                 	db	100	;'d'
   693  00FFC5  3A                 	db	58	;':'
   694  00FFC6  25                 	db	37
   695  00FFC7  30                 	db	48	;'0'
   696  00FFC8  32                 	db	50	;'2'
   697  00FFC9  6C                 	db	108	;'l'
   698  00FFCA  64                 	db	100	;'d'
   699  00FFCB  00                 	db	0
   700  00FFCC                     STR_4:
   701  00FFCC  4E                 	db	78	;'N'
   702  00FFCD  3A                 	db	58	;':'
   703  00FFCE  20                 	db	32
   704  00FFCF  25                 	db	37
   705  00FFD0  64                 	db	100	;'d'
   706  00FFD1  2C                 	db	44
   707  00FFD2  0A                 	db	10
   708  00FFD3  56                 	db	86	;'V'
   709  00FFD4  3A                 	db	58	;':'
   710  00FFD5  20                 	db	32
   711  00FFD6  25                 	db	37
   712  00FFD7  2E                 	db	46
   713  00FFD8  33                 	db	51	;'3'
   714  00FFD9  66                 	db	102	;'f'
   715  00FFDA  00                 	db	0
   716  00FFDB                     STR_5:
   717  00FFDB  70                 	db	112	;'p'
   718  00FFDC  65                 	db	101	;'e'
   719  00FFDD  72                 	db	114	;'r'
   720  00FFDE  69                 	db	105	;'i'
   721  00FFDF  6F                 	db	111	;'o'
   722  00FFE0  64                 	db	100	;'d'
   723  00FFE1  20                 	db	32
   724  00FFE2  25                 	db	37
   725  00FFE3  6C                 	db	108	;'l'
   726  00FFE4  64                 	db	100	;'d'
   727  00FFE5  00                 	db	0
   728  00FFE6                     STR_3:
   729  00FFE6  66                 	db	102	;'f'
   730  00FFE7  69                 	db	105	;'i'
   731  00FFE8  6E                 	db	110	;'n'
   732  00FFE9  69                 	db	105	;'i'
   733  00FFEA  73                 	db	115	;'s'
   734  00FFEB  68                 	db	104	;'h'
   735  00FFEC  65                 	db	101	;'e'
   736  00FFED  64                 	db	100	;'d'
   737  00FFEE  00                 	db	0
   738  00FFEF  74                 	db	116	;'t'
   739  00FFF0  31                 	db	49	;'1'
   740  00FFF1  3A                 	db	58	;':'
   741  00FFF2  20                 	db	32
   742  00FFF3  25                 	db	37
   743  00FFF4  78                 	db	120	;'x'
   744  00FFF5  20                 	db	32
   745  00FFF6  00                 	db	0
   746  00FFF7                     STR_1:
   747  00FFF7  72                 	db	114	;'r'
   748  00FFF8  75                 	db	117	;'u'
   749  00FFF9  6E                 	db	110	;'n'
   750  00FFFA  6E                 	db	110	;'n'
   751  00FFFB  69                 	db	105	;'i'
   752  00FFFC  6E                 	db	110	;'n'
   753  00FFFD  67                 	db	103	;'g'
   754  00FFFE  00                 	db	0
   755                           
   756                           ; #config settings
   757  00FFFF  00                 	db	0	; dummy byte at the end
   758  0000                     
   759                           	psect	cinit
   760  005612                     __pcinit:
   761                           	opt stack 0
   762  005612                     start_initialization:
   763                           	opt stack 0
   764  005612                     __initialization:
   765                           	opt stack 0
   766                           
   767                           ; Initialize objects allocated to BANK1 (61 bytes)
   768                           ; load TBLPTR registers with __pidataBANK1
   769  005612  0E5C               	movlw	low __pidataBANK1
   770  005614  6EF6               	movwf	tblptrl,c
   771  005616  0E57               	movlw	high __pidataBANK1
   772  005618  6EF7               	movwf	tblptrh,c
   773  00561A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   774  00561C  6EF8               	movwf	tblptru,c
   775  00561E  EE01  F055         	lfsr	0,__pdataBANK1
   776  005622  EE10 F03D          	lfsr	1,61
   777  005626                     copy_data0:
   778  005626  0009               	tblrd		*+
   779  005628  CFF5 FFEE          	movff	tablat,postinc0
   780  00562C  50E5               	movf	postdec1,w,c
   781  00562E  50E1               	movf	fsr1l,w,c
   782  005630  E1FA               	bnz	copy_data0
   783                           
   784                           ; Clear objects allocated to BANK1 (40 bytes)
   785  005632  EE01  F092         	lfsr	0,__pbssBANK1
   786  005636  0E28               	movlw	40
   787  005638                     clear_0:
   788  005638  6AEE               	clrf	postinc0,c
   789  00563A  06E8               	decf	wreg,f,c
   790  00563C  E1FD               	bnz	clear_0
   791                           
   792                           ; Clear objects allocated to BANK0 (2 bytes)
   793  00563E  0100               	movlb	0
   794  005640  6BFF               	clrf	(__pbssBANK0+1)& (0+255),b
   795  005642  6BFE               	clrf	__pbssBANK0& (0+255),b
   796                           
   797                           ; Clear objects allocated to COMRAM (3 bytes)
   798  005644  6A7D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   799  005646  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   800  005648  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   801  00564A                     end_of_initialization:
   802                           	opt stack 0
   803  00564A                     __end_of__initialization:
   804                           	opt stack 0
   805  00564A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   806  00564C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   807  00564E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   808  005650  6EF8               	movwf	tblptru,c
   809  005652  0100               	movlb	0
   810  005654  EFD0  F013         	goto	_main	;jump to C main() function
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           postdec1	equ	0xFE5
   818                           fsr1l	equ	0xFE1
   819                           
   820                           	psect	bssCOMRAM
   821  00007B                     __pbssCOMRAM:
   822                           	opt stack 0
   823  00007B                     _curr:
   824                           	opt stack 0
   825  00007B                     	ds	2
   826  00007D                     _lastKey:
   827                           	opt stack 0
   828  00007D                     	ds	1
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           tblptrl	equ	0xFF6
   832                           tablat	equ	0xFF5
   833                           postinc0	equ	0xFEE
   834                           wreg	equ	0xFE8
   835                           postdec1	equ	0xFE5
   836                           fsr1l	equ	0xFE1
   837                           
   838                           	psect	bssBANK0
   839  0000FE                     __pbssBANK0:
   840                           	opt stack 0
   841  0000FE                     _n:
   842                           	opt stack 0
   843  0000FE                     	ds	2
   844                           tblptru	equ	0xFF8
   845                           tblptrh	equ	0xFF7
   846                           tblptrl	equ	0xFF6
   847                           tablat	equ	0xFF5
   848                           postinc0	equ	0xFEE
   849                           wreg	equ	0xFE8
   850                           postdec1	equ	0xFE5
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	bssBANK1
   854  000192                     __pbssBANK1:
   855                           	opt stack 0
   856  000192                     _pulse:
   857                           	opt stack 0
   858  000192                     	ds	8
   859  00019A                     _servos:
   860                           	opt stack 0
   861  00019A                     	ds	8
   862  0001A2                     _padPin3:
   863                           	opt stack 0
   864  0001A2                     	ds	4
   865  0001A6                     _time:
   866                           	opt stack 0
   867  0001A6                     	ds	4
   868  0001AA                     _batteryDetected:
   869                           	opt stack 0
   870  0001AA                     	ds	2
   871  0001AC                     _count:
   872                           	opt stack 0
   873  0001AC                     	ds	2
   874  0001AE                     _n_9V:
   875                           	opt stack 0
   876  0001AE                     	ds	2
   877  0001B0                     _n_AA:
   878                           	opt stack 0
   879  0001B0                     	ds	2
   880  0001B2                     _n_C:
   881                           	opt stack 0
   882  0001B2                     	ds	2
   883  0001B4                     _n_OTHER:
   884                           	opt stack 0
   885  0001B4                     	ds	2
   886  0001B6                     _prevTime:
   887                           	opt stack 0
   888  0001B6                     	ds	2
   889  0001B8                     _terminate:
   890                           	opt stack 0
   891  0001B8                     	ds	2
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           postdec1	equ	0xFE5
   899                           fsr1l	equ	0xFE1
   900                           
   901                           	psect	dataBANK1
   902  000155                     __pdataBANK1:
   903                           	opt stack 0
   904  000155                     _V_LIM_9V:
   905                           	opt stack 0
   906  000155                     	ds	3
   907  000158                     _V_LIM_AA:
   908                           	opt stack 0
   909  000158                     	ds	3
   910  00015B                     _V_LIM_C:
   911                           	opt stack 0
   912  00015B                     	ds	3
   913  00015E                     _angle:
   914                           	opt stack 0
   915  00015E                     	ds	2
   916  000160                     _padAngle_CLOSE:
   917                           	opt stack 0
   918  000160                     	ds	2
   919  000162                     _padAngle_NEUTRAL:
   920                           	opt stack 0
   921  000162                     	ds	2
   922  000164                     _padAngle_OPEN:
   923                           	opt stack 0
   924  000164                     	ds	2
   925  000166                     _period:
   926                           	opt stack 0
   927  000166                     	ds	2
   928  000168                     _redirectAngle_9V:
   929                           	opt stack 0
   930  000168                     	ds	2
   931  00016A                     _redirectAngle_AA:
   932                           	opt stack 0
   933  00016A                     	ds	2
   934  00016C                     _redirectAngle_C:
   935                           	opt stack 0
   936  00016C                     	ds	2
   937  00016E                     _redirectAngle_OTHER:
   938                           	opt stack 0
   939  00016E                     	ds	2
   940  000170                     _stoppingTime:
   941                           	opt stack 0
   942  000170                     	ds	2
   943  000172                     _AA_float:
   944                           	opt stack 0
   945  000172                     	ds	4
   946  000176                     _conveyorServo:
   947                           	opt stack 0
   948  000176                     	ds	4
   949  00017A                     _cylinderDir:
   950                           	opt stack 0
   951  00017A                     	ds	4
   952  00017E                     _cylinderMotor:
   953                           	opt stack 0
   954  00017E                     	ds	4
   955  000182                     _padPin1:
   956                           	opt stack 0
   957  000182                     	ds	4
   958  000186                     _padPin2:
   959                           	opt stack 0
   960  000186                     	ds	4
   961  00018A                     _padServo:
   962                           	opt stack 0
   963  00018A                     	ds	4
   964  00018E                     _redirectingServo:
   965                           	opt stack 0
   966  00018E                     	ds	4
   967                           tblptru	equ	0xFF8
   968                           tblptrh	equ	0xFF7
   969                           tblptrl	equ	0xFF6
   970                           tablat	equ	0xFF5
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           postdec1	equ	0xFE5
   974                           fsr1l	equ	0xFE1
   975                           
   976                           	psect	cstackBANK1
   977  000100                     __pcstackBANK1:
   978                           	opt stack 0
   979  000100                     _printf$1354:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0x0
   983  000100                     	ds	3
   984  000103                     printf@cp:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x3
   988  000103                     	ds	2
   989  000105                     printf@idx:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x5
   993  000105                     	ds	1
   994  000106                     printf@len:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x6
   998  000106                     	ds	2
   999  000108                     printf@ap:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x8
  1003  000108                     	ds	2
  1004  00010A                     printf@tmpval:
  1005                           	opt stack 0
  1006                           
  1007                           ; 4 bytes @ 0xA
  1008  00010A                     	ds	4
  1009  00010E                     printf@exp:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0xE
  1013  00010E                     	ds	2
  1014  000110                     printf@val:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x10
  1018  000110                     	ds	4
  1019  000114                     printf@fval:
  1020                           	opt stack 0
  1021                           
  1022                           ; 3 bytes @ 0x14
  1023  000114                     	ds	3
  1024  000117                     printf@width:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x17
  1028  000117                     	ds	2
  1029  000119                     printf@flag:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x19
  1033  000119                     	ds	2
  1034  00011B                     printf@prec:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x1B
  1038  00011B                     	ds	2
  1039  00011D                     printf@c:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x1D
  1043  00011D                     	ds	1
  1044  00011E                     sortBattery@pos_v_counter:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x1E
  1048  00011E                     	ds	2
  1049  000120                     _sortBattery$1349:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x20
  1053  000120                     	ds	2
  1054  000122                     sortBattery@V_float:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x22
  1058  000122                     	ds	3
  1059  000125                     sortBattery@signal:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x25
  1063  000125                     	ds	2
  1064  000127                     sortBattery@Vcc:
  1065                           	opt stack 0
  1066                           
  1067                           ; 3 bytes @ 0x27
  1068  000127                     	ds	3
  1069  00012A                     sortBattery@resolution:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x2A
  1073  00012A                     	ds	3
  1074  00012D                     sortBattery@V:
  1075                           	opt stack 0
  1076                           
  1077                           ; 3 bytes @ 0x2D
  1078  00012D                     	ds	3
  1079  000130                     sortBattery@V_max:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x30
  1083  000130                     	ds	3
  1084  000133                     sortBattery@targetAngle:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x33
  1088  000133                     	ds	2
  1089  000135                     sortBattery@i_225:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x35
  1093  000135                     	ds	2
  1094  000137                     sortBattery@i:
  1095                           	opt stack 0
  1096                           
  1097                           ; 3 bytes @ 0x37
  1098  000137                     	ds	3
  1099  00013A                     sortBattery@V_223:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x3A
  1103  00013A                     	ds	2
  1104  00013C                     ??_main:
  1105                           
  1106                           ; 1 bytes @ 0x3C
  1107  00013C                     	ds	13
  1108  000149                     main@cylinderForward:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x49
  1112  000149                     	ds	2
  1113  00014B                     main@cylinderBackward:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x4B
  1117  00014B                     	ds	2
  1118  00014D                     main@lastBatteryTime:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x4D
  1122  00014D                     	ds	2
  1123  00014F                     main@cylinderStart:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x4F
  1127  00014F                     	ds	2
  1128  000151                     main@cylinderDur:
  1129                           	opt stack 0
  1130                           
  1131                           ; 2 bytes @ 0x51
  1132  000151                     	ds	2
  1133  000153                     main@prev:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x53
  1137  000153                     	ds	2
  1138                           tblptru	equ	0xFF8
  1139                           tblptrh	equ	0xFF7
  1140                           tblptrl	equ	0xFF6
  1141                           tablat	equ	0xFF5
  1142                           postinc0	equ	0xFEE
  1143                           wreg	equ	0xFE8
  1144                           postdec1	equ	0xFE5
  1145                           fsr1l	equ	0xFE1
  1146                           
  1147                           	psect	cstackBANK0
  1148  000080                     __pcstackBANK0:
  1149                           	opt stack 0
  1150  000080                     ??_isdigit:
  1151  000080                     ?_digitalRead:
  1152                           	opt stack 0
  1153  000080                     ?___awmod:
  1154                           	opt stack 0
  1155  000080                     ?___ftpack:
  1156                           	opt stack 0
  1157  000080                     ?___ftneg:
  1158                           	opt stack 0
  1159  000080                     ?_analogRead:
  1160                           	opt stack 0
  1161  000080                     ?__tdiv_to_l_:
  1162                           	opt stack 0
  1163  000080                     ?__div_to_l_:
  1164                           	opt stack 0
  1165  000080                     ?___aldiv:
  1166                           	opt stack 0
  1167  000080                     ?___lldiv:
  1168                           	opt stack 0
  1169  000080                     lcdNibble@temp:
  1170                           	opt stack 0
  1171  000080                     readKeypad@key:
  1172                           	opt stack 0
  1173  000080                     digitalRead@pin:
  1174                           	opt stack 0
  1175  000080                     digitalWrite@pin:
  1176                           	opt stack 0
  1177  000080                     analogRead@channel:
  1178                           	opt stack 0
  1179  000080                     initTimer@timer:
  1180                           	opt stack 0
  1181  000080                     startTimer@timer:
  1182                           	opt stack 0
  1183  000080                     ___awmod@dividend:
  1184                           	opt stack 0
  1185  000080                     __div_to_l_@f1:
  1186                           	opt stack 0
  1187  000080                     ___ftpack@arg:
  1188                           	opt stack 0
  1189  000080                     __tdiv_to_l_@f1:
  1190                           	opt stack 0
  1191  000080                     ___ftneg@f1:
  1192                           	opt stack 0
  1193  000080                     ___aldiv@dividend:
  1194                           	opt stack 0
  1195  000080                     ___lldiv@dividend:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x0
  1199  000080                     	ds	1
  1200  000081                     lcdNibble@data:
  1201                           	opt stack 0
  1202  000081                     _isdigit$982:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x1
  1206  000081                     	ds	1
  1207  000082                     ??_initTimer:
  1208  000082                     ??_digitalRead:
  1209  000082                     ??_lcdInst:
  1210  000082                     isdigit@c:
  1211                           	opt stack 0
  1212  000082                     digitalWrite@val:
  1213                           	opt stack 0
  1214  000082                     ___awmod@divisor:
  1215                           	opt stack 0
  1216  000082                     startTimer@val:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x2
  1220  000082                     	ds	1
  1221  000083                     lcdInst@data:
  1222                           	opt stack 0
  1223  000083                     ___ftpack@exp:
  1224                           	opt stack 0
  1225  000083                     __div_to_l_@f2:
  1226                           	opt stack 0
  1227  000083                     __tdiv_to_l_@f2:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x3
  1231  000083                     	ds	1
  1232  000084                     ??_initLCD:
  1233  000084                     ??_digitalWrite:
  1234  000084                     ??_analogRead:
  1235  000084                     putch@data:
  1236                           	opt stack 0
  1237  000084                     ___awmod@counter:
  1238                           	opt stack 0
  1239  000084                     ___ftpack@sign:
  1240                           	opt stack 0
  1241  000084                     ___aldiv@divisor:
  1242                           	opt stack 0
  1243  000084                     ___lldiv@divisor:
  1244                           	opt stack 0
  1245                           
  1246                           ; 4 bytes @ 0x4
  1247  000084                     	ds	1
  1248  000085                     ??___ftpack:
  1249  000085                     ___awmod@sign:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x5
  1253  000085                     	ds	1
  1254  000086                     ??_startTimer:
  1255  000086                     ??__tdiv_to_l_:
  1256  000086                     ?___awdiv:
  1257                           	opt stack 0
  1258  000086                     ___awdiv@dividend:
  1259                           	opt stack 0
  1260  000086                     __div_to_l_@quot:
  1261                           	opt stack 0
  1262                           
  1263                           ; 4 bytes @ 0x6
  1264  000086                     	ds	1
  1265  000087                     digitalWrite@p:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x7
  1269  000087                     	ds	1
  1270  000088                     ?___altoft:
  1271                           	opt stack 0
  1272  000088                     ?___awtoft:
  1273                           	opt stack 0
  1274  000088                     ?___lltoft:
  1275                           	opt stack 0
  1276  000088                     ___aldiv@counter:
  1277                           	opt stack 0
  1278  000088                     ___awdiv@divisor:
  1279                           	opt stack 0
  1280  000088                     ___awtoft@c:
  1281                           	opt stack 0
  1282  000088                     ___altoft@c:
  1283                           	opt stack 0
  1284  000088                     ___lldiv@quotient:
  1285                           	opt stack 0
  1286  000088                     ___lltoft@c:
  1287                           	opt stack 0
  1288                           
  1289                           ; 4 bytes @ 0x8
  1290  000088                     	ds	1
  1291  000089                     ___aldiv@sign:
  1292                           	opt stack 0
  1293  000089                     __tdiv_to_l_@quot:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0x9
  1297  000089                     	ds	1
  1298  00008A                     ___awdiv@counter:
  1299                           	opt stack 0
  1300  00008A                     __div_to_l_@cntr:
  1301                           	opt stack 0
  1302  00008A                     ___aldiv@quotient:
  1303                           	opt stack 0
  1304                           
  1305                           ; 4 bytes @ 0xA
  1306  00008A                     	ds	1
  1307  00008B                     ___awdiv@sign:
  1308                           	opt stack 0
  1309  00008B                     ___awtoft@sign:
  1310                           	opt stack 0
  1311  00008B                     __div_to_l_@exp1:
  1312                           	opt stack 0
  1313                           
  1314                           ; 1 bytes @ 0xB
  1315  00008B                     	ds	1
  1316  00008C                     ??___altoft:
  1317  00008C                     ??___lltoft:
  1318  00008C                     ___lldiv@counter:
  1319                           	opt stack 0
  1320  00008C                     ___awdiv@quotient:
  1321                           	opt stack 0
  1322  00008C                     ___ftge@ff1:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0xC
  1326  00008C                     	ds	1
  1327  00008D                     ?___llmod:
  1328                           	opt stack 0
  1329  00008D                     __tdiv_to_l_@cntr:
  1330                           	opt stack 0
  1331  00008D                     ___llmod@dividend:
  1332                           	opt stack 0
  1333                           
  1334                           ; 4 bytes @ 0xD
  1335  00008D                     	ds	1
  1336  00008E                     ?___wmul:
  1337                           	opt stack 0
  1338  00008E                     ?___almod:
  1339                           	opt stack 0
  1340  00008E                     __tdiv_to_l_@exp1:
  1341                           	opt stack 0
  1342  00008E                     ___wmul@multiplier:
  1343                           	opt stack 0
  1344  00008E                     ___almod@dividend:
  1345                           	opt stack 0
  1346                           
  1347                           ; 4 bytes @ 0xE
  1348  00008E                     	ds	1
  1349  00008F                     ___ftge@ff2:
  1350                           	opt stack 0
  1351                           
  1352                           ; 3 bytes @ 0xF
  1353  00008F                     	ds	1
  1354  000090                     ___altoft@exp:
  1355                           	opt stack 0
  1356  000090                     ___lltoft@exp:
  1357                           	opt stack 0
  1358  000090                     ___wmul@multiplicand:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x10
  1362  000090                     	ds	1
  1363  000091                     ___altoft@sign:
  1364                           	opt stack 0
  1365  000091                     ___llmod@divisor:
  1366                           	opt stack 0
  1367                           
  1368                           ; 4 bytes @ 0x11
  1369  000091                     	ds	1
  1370  000092                     ??___ftge:
  1371  000092                     ?___ftdiv:
  1372                           	opt stack 0
  1373  000092                     ___wmul@product:
  1374                           	opt stack 0
  1375  000092                     ___ftdiv@f1:
  1376                           	opt stack 0
  1377  000092                     ___almod@divisor:
  1378                           	opt stack 0
  1379                           
  1380                           ; 4 bytes @ 0x12
  1381  000092                     	ds	3
  1382  000095                     ___llmod@counter:
  1383                           	opt stack 0
  1384  000095                     ___ftdiv@f2:
  1385                           	opt stack 0
  1386                           
  1387                           ; 3 bytes @ 0x15
  1388  000095                     	ds	1
  1389  000096                     ___almod@counter:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x16
  1393  000096                     	ds	1
  1394  000097                     ___almod@sign:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x17
  1398  000097                     	ds	1
  1399  000098                     ??___ftdiv:
  1400                           
  1401                           ; 1 bytes @ 0x18
  1402  000098                     	ds	3
  1403  00009B                     ___ftdiv@cntr:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x1B
  1407  00009B                     	ds	1
  1408  00009C                     ___ftdiv@f3:
  1409                           	opt stack 0
  1410                           
  1411                           ; 3 bytes @ 0x1C
  1412  00009C                     	ds	3
  1413  00009F                     ___ftdiv@exp:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x1F
  1417  00009F                     	ds	1
  1418  0000A0                     ___ftdiv@sign:
  1419                           	opt stack 0
  1420                           
  1421                           ; 1 bytes @ 0x20
  1422  0000A0                     	ds	1
  1423  0000A1                     ?___ftmul:
  1424                           	opt stack 0
  1425  0000A1                     ___ftmul@f1:
  1426                           	opt stack 0
  1427                           
  1428                           ; 3 bytes @ 0x21
  1429  0000A1                     	ds	3
  1430  0000A4                     ___ftmul@f2:
  1431                           	opt stack 0
  1432                           
  1433                           ; 3 bytes @ 0x24
  1434  0000A4                     	ds	3
  1435  0000A7                     ??___ftmul:
  1436                           
  1437                           ; 1 bytes @ 0x27
  1438  0000A7                     	ds	3
  1439  0000AA                     ___ftmul@exp:
  1440                           	opt stack 0
  1441                           
  1442                           ; 1 bytes @ 0x2A
  1443  0000AA                     	ds	1
  1444  0000AB                     ___ftmul@f3_as_product:
  1445                           	opt stack 0
  1446                           
  1447                           ; 3 bytes @ 0x2B
  1448  0000AB                     	ds	3
  1449  0000AE                     ___ftmul@cntr:
  1450                           	opt stack 0
  1451                           
  1452                           ; 1 bytes @ 0x2E
  1453  0000AE                     	ds	1
  1454  0000AF                     ___ftmul@sign:
  1455                           	opt stack 0
  1456                           
  1457                           ; 1 bytes @ 0x2F
  1458  0000AF                     	ds	1
  1459  0000B0                     ?_fround:
  1460                           	opt stack 0
  1461  0000B0                     ?_scale:
  1462                           	opt stack 0
  1463                           
  1464                           ; 3 bytes @ 0x30
  1465  0000B0                     	ds	3
  1466  0000B3                     _fround$1352:
  1467                           	opt stack 0
  1468  0000B3                     _scale$1353:
  1469                           	opt stack 0
  1470                           
  1471                           ; 3 bytes @ 0x33
  1472  0000B3                     	ds	3
  1473  0000B6                     scale@scl:
  1474                           	opt stack 0
  1475  0000B6                     _fround$1351:
  1476                           	opt stack 0
  1477                           
  1478                           ; 3 bytes @ 0x36
  1479  0000B6                     	ds	3
  1480  0000B9                     fround@prec:
  1481                           	opt stack 0
  1482                           
  1483                           ; 1 bytes @ 0x39
  1484  0000B9                     	ds	1
  1485  0000BA                     ?___ftadd:
  1486                           	opt stack 0
  1487  0000BA                     ___ftadd@f1:
  1488                           	opt stack 0
  1489                           
  1490                           ; 3 bytes @ 0x3A
  1491  0000BA                     	ds	3
  1492  0000BD                     ___ftadd@f2:
  1493                           	opt stack 0
  1494                           
  1495                           ; 3 bytes @ 0x3D
  1496  0000BD                     	ds	3
  1497  0000C0                     ??___ftadd:
  1498                           
  1499                           ; 1 bytes @ 0x40
  1500  0000C0                     	ds	3
  1501  0000C3                     ___ftadd@sign:
  1502                           	opt stack 0
  1503                           
  1504                           ; 1 bytes @ 0x43
  1505  0000C3                     	ds	1
  1506  0000C4                     ___ftadd@exp2:
  1507                           	opt stack 0
  1508                           
  1509                           ; 1 bytes @ 0x44
  1510  0000C4                     	ds	1
  1511  0000C5                     ___ftadd@exp1:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0x45
  1515  0000C5                     	ds	1
  1516  0000C6                     ?___ftsub:
  1517                           	opt stack 0
  1518  0000C6                     ?___fttol:
  1519                           	opt stack 0
  1520  0000C6                     ___ftsub@f1:
  1521                           	opt stack 0
  1522  0000C6                     ___fttol@f1:
  1523                           	opt stack 0
  1524                           
  1525                           ; 3 bytes @ 0x46
  1526  0000C6                     	ds	3
  1527  0000C9                     ___ftsub@f2:
  1528                           	opt stack 0
  1529                           
  1530                           ; 3 bytes @ 0x49
  1531  0000C9                     	ds	1
  1532  0000CA                     ??___fttol:
  1533                           
  1534                           ; 1 bytes @ 0x4A
  1535  0000CA                     	ds	2
  1536  0000CC                     
  1537                           ; 1 bytes @ 0x4C
  1538  0000CC                     	ds	3
  1539  0000CF                     ___fttol@sign1:
  1540                           	opt stack 0
  1541                           
  1542                           ; 1 bytes @ 0x4F
  1543  0000CF                     	ds	1
  1544  0000D0                     ___fttol@lval:
  1545                           	opt stack 0
  1546                           
  1547                           ; 4 bytes @ 0x50
  1548  0000D0                     	ds	4
  1549  0000D4                     ___fttol@exp1:
  1550                           	opt stack 0
  1551                           
  1552                           ; 1 bytes @ 0x54
  1553  0000D4                     	ds	1
  1554  0000D5                     ?_printf:
  1555                           	opt stack 0
  1556  0000D5                     ?_angleToPulse:
  1557                           	opt stack 0
  1558  0000D5                     angleToPulse@angle:
  1559                           	opt stack 0
  1560  0000D5                     printf@f:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x55
  1564  0000D5                     	ds	4
  1565  0000D9                     ??_angleToPulse:
  1566                           
  1567                           ; 1 bytes @ 0x59
  1568  0000D9                     	ds	4
  1569  0000DD                     angleToPulse@offset:
  1570                           	opt stack 0
  1571                           
  1572                           ; 4 bytes @ 0x5D
  1573  0000DD                     	ds	2
  1574  0000DF                     ??_printf:
  1575                           
  1576                           ; 1 bytes @ 0x5F
  1577  0000DF                     	ds	2
  1578  0000E1                     angleToPulse@a180:
  1579                           	opt stack 0
  1580                           
  1581                           ; 4 bytes @ 0x61
  1582  0000E1                     	ds	4
  1583  0000E5                     runMenu@key:
  1584                           	opt stack 0
  1585  0000E5                     pause@message:
  1586                           	opt stack 0
  1587  0000E5                     _angleToPulse$1350:
  1588                           	opt stack 0
  1589                           
  1590                           ; 3 bytes @ 0x65
  1591  0000E5                     	ds	1
  1592  0000E6                     showInterface@key:
  1593                           	opt stack 0
  1594                           
  1595                           ; 1 bytes @ 0x66
  1596  0000E6                     	ds	1
  1597  0000E7                     
  1598                           ; 1 bytes @ 0x67
  1599  0000E7                     	ds	1
  1600  0000E8                     angleToPulse@a000:
  1601                           	opt stack 0
  1602                           
  1603                           ; 4 bytes @ 0x68
  1604  0000E8                     	ds	4
  1605  0000EC                     setAngle@motor:
  1606                           	opt stack 0
  1607                           
  1608                           ; 2 bytes @ 0x6C
  1609  0000EC                     	ds	2
  1610  0000EE                     setAngle@angle:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x6E
  1614  0000EE                     	ds	2
  1615  0000F0                     ??_setAngle:
  1616                           
  1617                           ; 1 bytes @ 0x70
  1618  0000F0                     	ds	2
  1619  0000F2                     setAngle@period:
  1620                           	opt stack 0
  1621                           
  1622                           ; 2 bytes @ 0x72
  1623  0000F2                     	ds	2
  1624  0000F4                     setAngle@i:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x74
  1628  0000F4                     	ds	2
  1629  0000F6                     ??_sortBattery:
  1630  0000F6                     initServo@motor:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x76
  1634  0000F6                     	ds	2
  1635  0000F8                     initServo@angle:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x78
  1639  0000F8                     	ds	2
  1640  0000FA                     ??_initServo:
  1641                           
  1642                           ; 1 bytes @ 0x7A
  1643  0000FA                     	ds	4
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           postdec1	equ	0xFE5
  1651                           fsr1l	equ	0xFE1
  1652                           
  1653                           	psect	cstackCOMRAM
  1654  000001                     __pcstackCOMRAM:
  1655                           	opt stack 0
  1656  000001                     ??i2_isdigit:
  1657  000001                     ?i2___awmod:
  1658                           	opt stack 0
  1659  000001                     ?i2___ftpack:
  1660                           	opt stack 0
  1661  000001                     ?i2___ftneg:
  1662                           	opt stack 0
  1663  000001                     ?i2__div_to_l_:
  1664                           	opt stack 0
  1665  000001                     ?i2__tdiv_to_l_:
  1666                           	opt stack 0
  1667  000001                     ?i2___lldiv:
  1668                           	opt stack 0
  1669  000001                     i2lcdNibble@temp:
  1670                           	opt stack 0
  1671  000001                     i2___awmod@dividend:
  1672                           	opt stack 0
  1673  000001                     i2__div_to_l_@f1:
  1674                           	opt stack 0
  1675  000001                     i2___ftpack@arg:
  1676                           	opt stack 0
  1677  000001                     i2__tdiv_to_l_@f1:
  1678                           	opt stack 0
  1679  000001                     i2___ftge@ff1:
  1680                           	opt stack 0
  1681  000001                     i2___ftneg@f1:
  1682                           	opt stack 0
  1683  000001                     i2___lldiv@dividend:
  1684                           	opt stack 0
  1685                           
  1686                           ; 4 bytes @ 0x0
  1687  000001                     	ds	1
  1688  000002                     i2lcdNibble@data:
  1689                           	opt stack 0
  1690  000002                     i2_isdigit$982:
  1691                           	opt stack 0
  1692                           
  1693                           ; 1 bytes @ 0x1
  1694  000002                     	ds	1
  1695  000003                     ??i2_lcdInst:
  1696  000003                     i2isdigit@c:
  1697                           	opt stack 0
  1698  000003                     i2___awmod@divisor:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x2
  1702  000003                     	ds	1
  1703  000004                     i2lcdInst@data:
  1704                           	opt stack 0
  1705  000004                     i2___ftpack@exp:
  1706                           	opt stack 0
  1707  000004                     i2__div_to_l_@f2:
  1708                           	opt stack 0
  1709  000004                     i2__tdiv_to_l_@f2:
  1710                           	opt stack 0
  1711  000004                     i2___ftge@ff2:
  1712                           	opt stack 0
  1713                           
  1714                           ; 3 bytes @ 0x3
  1715  000004                     	ds	1
  1716  000005                     i2putch@data:
  1717                           	opt stack 0
  1718  000005                     i2___awmod@counter:
  1719                           	opt stack 0
  1720  000005                     i2___ftpack@sign:
  1721                           	opt stack 0
  1722  000005                     i2___lldiv@divisor:
  1723                           	opt stack 0
  1724                           
  1725                           ; 4 bytes @ 0x4
  1726  000005                     	ds	1
  1727  000006                     ??i2___ftpack:
  1728  000006                     i2___awmod@sign:
  1729                           	opt stack 0
  1730                           
  1731                           ; 1 bytes @ 0x5
  1732  000006                     	ds	1
  1733  000007                     ??i2__tdiv_to_l_:
  1734  000007                     ??i2___ftge:
  1735  000007                     ?i2___awdiv:
  1736                           	opt stack 0
  1737  000007                     i2digitalWrite@pin:
  1738                           	opt stack 0
  1739  000007                     i2startTimer@timer:
  1740                           	opt stack 0
  1741  000007                     i2___awdiv@dividend:
  1742                           	opt stack 0
  1743  000007                     i2__div_to_l_@quot:
  1744                           	opt stack 0
  1745                           
  1746                           ; 4 bytes @ 0x6
  1747  000007                     	ds	2
  1748  000009                     ?i2___lltoft:
  1749                           	opt stack 0
  1750  000009                     i2digitalWrite@val:
  1751                           	opt stack 0
  1752  000009                     i2___awdiv@divisor:
  1753                           	opt stack 0
  1754  000009                     i2startTimer@val:
  1755                           	opt stack 0
  1756  000009                     i2___lldiv@quotient:
  1757                           	opt stack 0
  1758  000009                     i2___lltoft@c:
  1759                           	opt stack 0
  1760                           
  1761                           ; 4 bytes @ 0x8
  1762  000009                     	ds	1
  1763  00000A                     i2__tdiv_to_l_@quot:
  1764                           	opt stack 0
  1765                           
  1766                           ; 4 bytes @ 0x9
  1767  00000A                     	ds	1
  1768  00000B                     ??i2_digitalWrite:
  1769  00000B                     i2___awdiv@counter:
  1770                           	opt stack 0
  1771  00000B                     i2__div_to_l_@cntr:
  1772                           	opt stack 0
  1773                           
  1774                           ; 1 bytes @ 0xA
  1775  00000B                     	ds	1
  1776  00000C                     i2___awdiv@sign:
  1777                           	opt stack 0
  1778  00000C                     i2__div_to_l_@exp1:
  1779                           	opt stack 0
  1780                           
  1781                           ; 1 bytes @ 0xB
  1782  00000C                     	ds	1
  1783  00000D                     ??i2_startTimer:
  1784  00000D                     ??i2___lltoft:
  1785  00000D                     i2___lldiv@counter:
  1786                           	opt stack 0
  1787  00000D                     i2___awdiv@quotient:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0xC
  1791  00000D                     	ds	1
  1792  00000E                     ?i2___llmod:
  1793                           	opt stack 0
  1794  00000E                     i2__tdiv_to_l_@cntr:
  1795                           	opt stack 0
  1796  00000E                     i2digitalWrite@p:
  1797                           	opt stack 0
  1798  00000E                     i2___llmod@dividend:
  1799                           	opt stack 0
  1800                           
  1801                           ; 4 bytes @ 0xD
  1802  00000E                     	ds	1
  1803  00000F                     ?i2___wmul:
  1804                           	opt stack 0
  1805  00000F                     i2__tdiv_to_l_@exp1:
  1806                           	opt stack 0
  1807  00000F                     i2___wmul@multiplier:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0xE
  1811  00000F                     	ds	1
  1812  000010                     ??_servoInterruptService:
  1813                           
  1814                           ; 1 bytes @ 0xF
  1815  000010                     	ds	1
  1816  000011                     i2___lltoft@exp:
  1817                           	opt stack 0
  1818  000011                     i2___wmul@multiplicand:
  1819                           	opt stack 0
  1820                           
  1821                           ; 2 bytes @ 0x10
  1822  000011                     	ds	1
  1823  000012                     i2___llmod@divisor:
  1824                           	opt stack 0
  1825                           
  1826                           ; 4 bytes @ 0x11
  1827  000012                     	ds	1
  1828  000013                     i2___wmul@product:
  1829                           	opt stack 0
  1830                           
  1831                           ; 2 bytes @ 0x12
  1832  000013                     	ds	2
  1833  000015                     ?i2___ftmul:
  1834                           	opt stack 0
  1835  000015                     i2___ftmul@f1:
  1836                           	opt stack 0
  1837                           
  1838                           ; 3 bytes @ 0x14
  1839  000015                     	ds	1
  1840  000016                     i2___llmod@counter:
  1841                           	opt stack 0
  1842                           
  1843                           ; 1 bytes @ 0x15
  1844  000016                     	ds	2
  1845  000018                     i2___ftmul@f2:
  1846                           	opt stack 0
  1847                           
  1848                           ; 3 bytes @ 0x17
  1849  000018                     	ds	3
  1850  00001B                     ??i2___ftmul:
  1851                           
  1852                           ; 1 bytes @ 0x1A
  1853  00001B                     	ds	3
  1854  00001E                     i2___ftmul@exp:
  1855                           	opt stack 0
  1856                           
  1857                           ; 1 bytes @ 0x1D
  1858  00001E                     	ds	1
  1859  00001F                     i2___ftmul@f3_as_product:
  1860                           	opt stack 0
  1861                           
  1862                           ; 3 bytes @ 0x1E
  1863  00001F                     	ds	3
  1864  000022                     i2___ftmul@cntr:
  1865                           	opt stack 0
  1866                           
  1867                           ; 1 bytes @ 0x21
  1868  000022                     	ds	1
  1869  000023                     i2___ftmul@sign:
  1870                           	opt stack 0
  1871                           
  1872                           ; 1 bytes @ 0x22
  1873  000023                     	ds	1
  1874  000024                     ?i2_fround:
  1875                           	opt stack 0
  1876  000024                     ?i2_scale:
  1877                           	opt stack 0
  1878                           
  1879                           ; 3 bytes @ 0x23
  1880  000024                     	ds	3
  1881  000027                     i2_fround$1547:
  1882                           	opt stack 0
  1883  000027                     i2_scale$1548:
  1884                           	opt stack 0
  1885                           
  1886                           ; 3 bytes @ 0x26
  1887  000027                     	ds	3
  1888  00002A                     i2scale@scl:
  1889                           	opt stack 0
  1890  00002A                     i2_fround$1546:
  1891                           	opt stack 0
  1892                           
  1893                           ; 3 bytes @ 0x29
  1894  00002A                     	ds	1
  1895  00002B                     ?i2___fttol:
  1896                           	opt stack 0
  1897  00002B                     i2___fttol@f1:
  1898                           	opt stack 0
  1899                           
  1900                           ; 3 bytes @ 0x2A
  1901  00002B                     	ds	2
  1902  00002D                     i2fround@prec:
  1903                           	opt stack 0
  1904                           
  1905                           ; 1 bytes @ 0x2C
  1906  00002D                     	ds	1
  1907  00002E                     ?i2___ftadd:
  1908                           	opt stack 0
  1909  00002E                     i2___ftadd@f1:
  1910                           	opt stack 0
  1911                           
  1912                           ; 3 bytes @ 0x2D
  1913  00002E                     	ds	1
  1914  00002F                     ??i2___fttol:
  1915                           
  1916                           ; 1 bytes @ 0x2E
  1917  00002F                     	ds	2
  1918  000031                     i2___ftadd@f2:
  1919                           	opt stack 0
  1920                           
  1921                           ; 3 bytes @ 0x30
  1922  000031                     	ds	3
  1923  000034                     ??i2___ftadd:
  1924  000034                     i2___fttol@sign1:
  1925                           	opt stack 0
  1926                           
  1927                           ; 1 bytes @ 0x33
  1928  000034                     	ds	1
  1929  000035                     i2___fttol@lval:
  1930                           	opt stack 0
  1931                           
  1932                           ; 4 bytes @ 0x34
  1933  000035                     	ds	2
  1934  000037                     i2___ftadd@sign:
  1935                           	opt stack 0
  1936                           
  1937                           ; 1 bytes @ 0x36
  1938  000037                     	ds	1
  1939  000038                     i2___ftadd@exp2:
  1940                           	opt stack 0
  1941                           
  1942                           ; 1 bytes @ 0x37
  1943  000038                     	ds	1
  1944  000039                     i2___ftadd@exp1:
  1945                           	opt stack 0
  1946  000039                     i2___fttol@exp1:
  1947                           	opt stack 0
  1948                           
  1949                           ; 1 bytes @ 0x38
  1950  000039                     	ds	1
  1951  00003A                     ?i2___ftsub:
  1952                           	opt stack 0
  1953  00003A                     i2___ftsub@f1:
  1954                           	opt stack 0
  1955                           
  1956                           ; 3 bytes @ 0x39
  1957  00003A                     	ds	3
  1958  00003D                     i2___ftsub@f2:
  1959                           	opt stack 0
  1960                           
  1961                           ; 3 bytes @ 0x3C
  1962  00003D                     	ds	3
  1963  000040                     ?i2_printf:
  1964                           	opt stack 0
  1965  000040                     i2printf@f:
  1966                           	opt stack 0
  1967                           
  1968                           ; 2 bytes @ 0x3F
  1969  000040                     	ds	4
  1970  000044                     ??i2_printf:
  1971                           
  1972                           ; 1 bytes @ 0x43
  1973  000044                     	ds	6
  1974  00004A                     i2_printf$1549:
  1975                           	opt stack 0
  1976                           
  1977                           ; 3 bytes @ 0x49
  1978  00004A                     	ds	3
  1979  00004D                     i2printf@idx:
  1980                           	opt stack 0
  1981                           
  1982                           ; 1 bytes @ 0x4C
  1983  00004D                     	ds	1
  1984  00004E                     i2printf@cp:
  1985                           	opt stack 0
  1986                           
  1987                           ; 2 bytes @ 0x4D
  1988  00004E                     	ds	2
  1989  000050                     i2printf@len:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x4F
  1993  000050                     	ds	2
  1994  000052                     i2printf@ap:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x51
  1998  000052                     	ds	2
  1999  000054                     i2printf@tmpval:
  2000                           	opt stack 0
  2001                           
  2002                           ; 4 bytes @ 0x53
  2003  000054                     	ds	4
  2004  000058                     i2printf@exp:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x57
  2008  000058                     	ds	2
  2009  00005A                     i2printf@fval:
  2010                           	opt stack 0
  2011                           
  2012                           ; 3 bytes @ 0x59
  2013  00005A                     	ds	3
  2014  00005D                     i2printf@val:
  2015                           	opt stack 0
  2016                           
  2017                           ; 4 bytes @ 0x5C
  2018  00005D                     	ds	4
  2019  000061                     i2printf@width:
  2020                           	opt stack 0
  2021                           
  2022                           ; 2 bytes @ 0x60
  2023  000061                     	ds	2
  2024  000063                     i2printf@flag:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x62
  2028  000063                     	ds	2
  2029  000065                     i2printf@prec:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x64
  2033  000065                     	ds	2
  2034  000067                     i2printf@c:
  2035                           	opt stack 0
  2036                           
  2037                           ; 1 bytes @ 0x66
  2038  000067                     	ds	1
  2039  000068                     ??_service:
  2040                           
  2041                           ; 1 bytes @ 0x67
  2042  000068                     	ds	18
  2043  00007A                     service@key:
  2044                           	opt stack 0
  2045                           
  2046                           ; 1 bytes @ 0x79
  2047  00007A                     	ds	1
  2048                           tblptru	equ	0xFF8
  2049                           tblptrh	equ	0xFF7
  2050                           tblptrl	equ	0xFF6
  2051                           tablat	equ	0xFF5
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           postdec1	equ	0xFE5
  2055                           fsr1l	equ	0xFE1
  2056                           
  2057 ;;
  2058 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  2059 ;;
  2060 ;; *************** function _main *****************
  2061 ;; Defined at:
  2062 ;;		line 101 in file "main.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;		None
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  prev            2   83[BANK1 ] int 
  2067 ;;  cylinderDur     2   81[BANK1 ] int 
  2068 ;;  cylinderStar    2   79[BANK1 ] int 
  2069 ;;  lastBatteryT    2   77[BANK1 ] int 
  2070 ;;  cylinderBack    2   75[BANK1 ] int 
  2071 ;;  cylinderForw    2   73[BANK1 ] int 
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;Total ram usage:       25 bytes
  2086 ;; Hardware stack levels required when called:   13
  2087 ;; This function calls:
  2088 ;;		___aldiv
  2089 ;;		___almod
  2090 ;;		_digitalRead
  2091 ;;		_digitalWrite
  2092 ;;		_initLCD
  2093 ;;		_initServo
  2094 ;;		_initTimer
  2095 ;;		_lcdClear
  2096 ;;		_lcdHome
  2097 ;;		_pause
  2098 ;;		_pinSetup
  2099 ;;		_printf
  2100 ;;		_showInterface
  2101 ;;		_sortBattery
  2102 ;;		_startTimer
  2103 ;; This function is called by:
  2104 ;;		Startup code after reset
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	text0
  2109  0027A0                     __ptext0:
  2110                           	opt stack 0
  2111  0027A0                     _main:
  2112                           	opt stack 18
  2113                           
  2114                           ;main.c: 102: pinSetup();
  2115                           
  2116                           ;incstack = 0
  2117  0027A0  EC8F  F02B         	call	_pinSetup	;wreg free
  2118                           
  2119                           ;main.c: 103: initLCD();
  2120  0027A4  ECE4  F02A         	call	_initLCD	;wreg free
  2121  0027A8                     l7102:
  2122                           
  2123                           ;main.c: 106: showInterface();
  2124  0027A8  ECCF  F022         	call	_showInterface	;wreg free
  2125                           
  2126                           ;main.c: 111: time = 0;
  2127  0027AC  0E00               	movlw	0
  2128  0027AE  0101               	movlb	1	; () banked
  2129  0027B0  6FA6               	movwf	_time& (0+255),b
  2130  0027B2  0E00               	movlw	0
  2131  0027B4  6FA7               	movwf	(_time+1)& (0+255),b
  2132  0027B6  0E00               	movlw	0
  2133  0027B8  6FA8               	movwf	(_time+2)& (0+255),b
  2134  0027BA  0E00               	movlw	0
  2135  0027BC  6FA9               	movwf	(_time+3)& (0+255),b
  2136                           
  2137                           ; BSR set to: 1
  2138                           ;main.c: 112: initTimer(1);
  2139  0027BE  0E00               	movlw	0
  2140  0027C0  0100               	movlb	0	; () banked
  2141  0027C2  6F81               	movwf	(initTimer@timer+1)& (0+255),b
  2142  0027C4  0E01               	movlw	1
  2143  0027C6  6F80               	movwf	initTimer@timer& (0+255),b
  2144  0027C8  EC71  F02A         	call	_initTimer	;wreg free
  2145                           
  2146                           ;main.c: 113: startTimer(1,0);
  2147  0027CC  0E00               	movlw	0
  2148  0027CE  0100               	movlb	0	; () banked
  2149  0027D0  6F81               	movwf	(startTimer@timer+1)& (0+255),b
  2150  0027D2  0E01               	movlw	1
  2151  0027D4  6F80               	movwf	startTimer@timer& (0+255),b
  2152  0027D6  0E00               	movlw	0
  2153  0027D8  0100               	movlb	0	; () banked
  2154  0027DA  6F82               	movwf	startTimer@val& (0+255),b
  2155  0027DC  0E00               	movlw	0
  2156  0027DE  6F83               	movwf	(startTimer@val+1)& (0+255),b
  2157  0027E0  0E00               	movlw	0
  2158  0027E2  6F84               	movwf	(startTimer@val+2)& (0+255),b
  2159  0027E4  0E00               	movlw	0
  2160  0027E6  6F85               	movwf	(startTimer@val+3)& (0+255),b
  2161  0027E8  EC49  F02A         	call	_startTimer	;wreg free
  2162                           
  2163                           ;main.c: 116: digitalWrite(cylinderMotor, 1);
  2164  0027EC  0E7E               	movlw	low _cylinderMotor
  2165  0027EE  0100               	movlb	0	; () banked
  2166  0027F0  6F80               	movwf	digitalWrite@pin& (0+255),b
  2167  0027F2  0E01               	movlw	high _cylinderMotor
  2168  0027F4  0100               	movlb	0	; () banked
  2169  0027F6  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2170  0027F8  0E00               	movlw	0
  2171  0027FA  0100               	movlb	0	; () banked
  2172  0027FC  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2173  0027FE  0E01               	movlw	1
  2174  002800  6F82               	movwf	digitalWrite@val& (0+255),b
  2175  002802  EC4D  F022         	call	_digitalWrite	;wreg free
  2176                           
  2177                           ;main.c: 117: initServo(conveyorServo, 130);
  2178  002806  0E76               	movlw	low _conveyorServo
  2179  002808  0100               	movlb	0	; () banked
  2180  00280A  6FF6               	movwf	initServo@motor& (0+255),b
  2181  00280C  0E01               	movlw	high _conveyorServo
  2182  00280E  0100               	movlb	0	; () banked
  2183  002810  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2184  002812  0E00               	movlw	0
  2185  002814  0100               	movlb	0	; () banked
  2186  002816  6FF9               	movwf	(initServo@angle+1)& (0+255),b
  2187  002818  0E82               	movlw	130
  2188  00281A  6FF8               	movwf	initServo@angle& (0+255),b
  2189  00281C  EC39  F028         	call	_initServo	;wreg free
  2190                           
  2191                           ;main.c: 118: initServo(padServo, padAngle_NEUTRAL);
  2192  002820  0E8A               	movlw	low _padServo
  2193  002822  0100               	movlb	0	; () banked
  2194  002824  6FF6               	movwf	initServo@motor& (0+255),b
  2195  002826  0E01               	movlw	high _padServo
  2196  002828  0100               	movlb	0	; () banked
  2197  00282A  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2198  00282C  C162  F0F8         	movff	_padAngle_NEUTRAL,initServo@angle
  2199  002830  C163  F0F9         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2200  002834  EC39  F028         	call	_initServo	;wreg free
  2201                           
  2202                           ;main.c: 119: initServo(redirectingServo, redirectAngle_AA);
  2203  002838  0E8E               	movlw	low _redirectingServo
  2204  00283A  0100               	movlb	0	; () banked
  2205  00283C  6FF6               	movwf	initServo@motor& (0+255),b
  2206  00283E  0E01               	movlw	high _redirectingServo
  2207  002840  0100               	movlb	0	; () banked
  2208  002842  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2209  002844  C16A  F0F8         	movff	_redirectAngle_AA,initServo@angle
  2210  002848  C16B  F0F9         	movff	_redirectAngle_AA+1,initServo@angle+1
  2211  00284C  EC39  F028         	call	_initServo	;wreg free
  2212  002850                     l7118:
  2213                           
  2214                           ;main.c: 123: lcdClear();
  2215  002850  EC30  F02D         	call	_lcdClear	;wreg free
  2216                           
  2217                           ;main.c: 124: printf("running");
  2218  002854  0EF7               	movlw	low STR_1
  2219  002856  0100               	movlb	0	; () banked
  2220  002858  6FD5               	movwf	printf@f& (0+255),b
  2221  00285A  0EFF               	movlw	high STR_1
  2222  00285C  0100               	movlb	0	; () banked
  2223  00285E  6FD6               	movwf	(printf@f+1)& (0+255),b
  2224  002860  EC09  F000         	call	_printf	;wreg free
  2225                           
  2226                           ;main.c: 126: int lastBatteryTime = time;
  2227  002864  C1A6  F14D         	movff	_time,main@lastBatteryTime
  2228  002868  C1A7  F14E         	movff	_time+1,main@lastBatteryTime+1
  2229                           
  2230                           ;main.c: 128: int cylinderStart = time;
  2231  00286C  C1A6  F14F         	movff	_time,main@cylinderStart
  2232  002870  C1A7  F150         	movff	_time+1,main@cylinderStart+1
  2233                           
  2234                           ;main.c: 129: int cylinderDur = 0;
  2235  002874  0E00               	movlw	0
  2236  002876  0101               	movlb	1	; () banked
  2237  002878  6F52               	movwf	(main@cylinderDur+1)& (0+255),b
  2238  00287A  0E00               	movlw	0
  2239  00287C  6F51               	movwf	main@cylinderDur& (0+255),b
  2240                           
  2241                           ;main.c: 130: int cylinderForward = 10;
  2242  00287E  0E00               	movlw	0
  2243  002880  0101               	movlb	1	; () banked
  2244  002882  6F4A               	movwf	(main@cylinderForward+1)& (0+255),b
  2245  002884  0E0A               	movlw	10
  2246  002886  6F49               	movwf	main@cylinderForward& (0+255),b
  2247                           
  2248                           ;main.c: 131: int cylinderBackward = 10;
  2249  002888  0E00               	movlw	0
  2250  00288A  0101               	movlb	1	; () banked
  2251  00288C  6F4C               	movwf	(main@cylinderBackward+1)& (0+255),b
  2252  00288E  0E0A               	movlw	10
  2253  002890  6F4B               	movwf	main@cylinderBackward& (0+255),b
  2254                           
  2255                           ;main.c: 133: while(!batteryDetected){
  2256  002892  D129               	goto	l7144
  2257  002894                     l7126:
  2258                           
  2259                           ; BSR set to: 1
  2260                           ;main.c: 135: lcdHome();
  2261  002894  EC34  F02D         	call	_lcdHome	;wreg free
  2262                           
  2263                           ;main.c: 136: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2264  002898  0EBB               	movlw	low STR_2
  2265  00289A  0100               	movlb	0	; () banked
  2266  00289C  6FD5               	movwf	printf@f& (0+255),b
  2267  00289E  0EFF               	movlw	high STR_2
  2268  0028A0  0100               	movlb	0	; () banked
  2269  0028A2  6FD6               	movwf	(printf@f+1)& (0+255),b
  2270  0028A4  C1A6  F080         	movff	_time,___aldiv@dividend
  2271  0028A8  C1A7  F081         	movff	_time+1,___aldiv@dividend+1
  2272  0028AC  C1A8  F082         	movff	_time+2,___aldiv@dividend+2
  2273  0028B0  C1A9  F083         	movff	_time+3,___aldiv@dividend+3
  2274  0028B4  0E58               	movlw	88
  2275  0028B6  0100               	movlb	0	; () banked
  2276  0028B8  6F84               	movwf	___aldiv@divisor& (0+255),b
  2277  0028BA  0E02               	movlw	2
  2278  0028BC  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2279  0028BE  0E00               	movlw	0
  2280  0028C0  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2281  0028C2  0E00               	movlw	0
  2282  0028C4  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2283  0028C6  ECB7  F020         	call	___aldiv	;wreg free
  2284  0028CA  C080  F0D7         	movff	?___aldiv,?_printf+2
  2285  0028CE  C081  F0D8         	movff	?___aldiv+1,?_printf+3
  2286  0028D2  C082  F0D9         	movff	?___aldiv+2,?_printf+4
  2287  0028D6  C083  F0DA         	movff	?___aldiv+3,?_printf+5
  2288  0028DA  0E0A               	movlw	10
  2289  0028DC  0100               	movlb	0	; () banked
  2290  0028DE  6F84               	movwf	___aldiv@divisor& (0+255),b
  2291  0028E0  0E00               	movlw	0
  2292  0028E2  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2293  0028E4  0E00               	movlw	0
  2294  0028E6  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2295  0028E8  0E00               	movlw	0
  2296  0028EA  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2297  0028EC  C1A6  F080         	movff	_time,___aldiv@dividend
  2298  0028F0  C1A7  F081         	movff	_time+1,___aldiv@dividend+1
  2299  0028F4  C1A8  F082         	movff	_time+2,___aldiv@dividend+2
  2300  0028F8  C1A9  F083         	movff	_time+3,___aldiv@dividend+3
  2301  0028FC  ECB7  F020         	call	___aldiv	;wreg free
  2302  002900  C080  F08E         	movff	?___aldiv,___almod@dividend
  2303  002904  C081  F08F         	movff	?___aldiv+1,___almod@dividend+1
  2304  002908  C082  F090         	movff	?___aldiv+2,___almod@dividend+2
  2305  00290C  C083  F091         	movff	?___aldiv+3,___almod@dividend+3
  2306  002910  0E3C               	movlw	60
  2307  002912  0100               	movlb	0	; () banked
  2308  002914  6F92               	movwf	___almod@divisor& (0+255),b
  2309  002916  0E00               	movlw	0
  2310  002918  6F93               	movwf	(___almod@divisor+1)& (0+255),b
  2311  00291A  0E00               	movlw	0
  2312  00291C  6F94               	movwf	(___almod@divisor+2)& (0+255),b
  2313  00291E  0E00               	movlw	0
  2314  002920  6F95               	movwf	(___almod@divisor+3)& (0+255),b
  2315  002922  EC45  F024         	call	___almod	;wreg free
  2316  002926  C08E  F0DB         	movff	?___almod,?_printf+6
  2317  00292A  C08F  F0DC         	movff	?___almod+1,?_printf+7
  2318  00292E  C090  F0DD         	movff	?___almod+2,?_printf+8
  2319  002932  C091  F0DE         	movff	?___almod+3,?_printf+9
  2320  002936  EC09  F000         	call	_printf	;wreg free
  2321                           
  2322                           ;main.c: 137: _delay((unsigned long)((77)*(10000000/4000.0)));
  2323  00293A  0EFA               	movlw	250
  2324  00293C  0101               	movlb	1	; () banked
  2325  00293E  6F3C               	movwf	??_main& (0+255),b
  2326  002940  0EFF               	movlw	255
  2327  002942                     u8407:
  2328  002942  2EE8               	decfsz	wreg,f,c
  2329  002944  D7FE               	bra	u8407
  2330  002946  2F3C               	decfsz	??_main& (0+255),f,b
  2331  002948  D7FC               	bra	u8407
  2332                           
  2333                           ;main.c: 140: if(time - cylinderStart >= cylinderDur)
  2334  00294A  C151  F13C         	movff	main@cylinderDur,??_main
  2335  00294E  C152  F13D         	movff	main@cylinderDur+1,??_main+1
  2336  002952  0E00               	movlw	0
  2337  002954  0101               	movlb	1	; () banked
  2338  002956  BF3D               	btfsc	(??_main+1)& (0+255),7,b
  2339  002958  0EFF               	movlw	255
  2340  00295A  6F3E               	movwf	(??_main+2)& (0+255),b
  2341  00295C  6F3F               	movwf	(??_main+3)& (0+255),b
  2342  00295E  C14F  F140         	movff	main@cylinderStart,??_main+4
  2343  002962  C150  F141         	movff	main@cylinderStart+1,??_main+5
  2344  002966  0E00               	movlw	0
  2345  002968  0101               	movlb	1	; () banked
  2346  00296A  BF41               	btfsc	(??_main+5)& (0+255),7,b
  2347  00296C  0EFF               	movlw	255
  2348  00296E  6F42               	movwf	(??_main+6)& (0+255),b
  2349  002970  6F43               	movwf	(??_main+7)& (0+255),b
  2350  002972  0101               	movlb	1	; () banked
  2351  002974  1F40               	comf	(??_main+4)& (0+255),f,b
  2352  002976  1F41               	comf	(??_main+5)& (0+255),f,b
  2353  002978  1F42               	comf	(??_main+6)& (0+255),f,b
  2354  00297A  1F43               	comf	(??_main+7)& (0+255),f,b
  2355  00297C  2B40               	incf	(??_main+4)& (0+255),f,b
  2356  00297E  0E00               	movlw	0
  2357  002980  2341               	addwfc	(??_main+5)& (0+255),f,b
  2358  002982  2342               	addwfc	(??_main+6)& (0+255),f,b
  2359  002984  2343               	addwfc	(??_main+7)& (0+255),f,b
  2360  002986  0101               	movlb	1	; () banked
  2361  002988  51A6               	movf	_time& (0+255),w,b
  2362  00298A  0101               	movlb	1	; () banked
  2363  00298C  2540               	addwf	(??_main+4)& (0+255),w,b
  2364  00298E  0101               	movlb	1	; () banked
  2365  002990  6F44               	movwf	(??_main+8)& (0+255),b
  2366  002992  0101               	movlb	1	; () banked
  2367  002994  51A7               	movf	(_time+1)& (0+255),w,b
  2368  002996  0101               	movlb	1	; () banked
  2369  002998  2141               	addwfc	(??_main+5)& (0+255),w,b
  2370  00299A  0101               	movlb	1	; () banked
  2371  00299C  6F45               	movwf	(??_main+9)& (0+255),b
  2372  00299E  0101               	movlb	1	; () banked
  2373  0029A0  51A8               	movf	(_time+2)& (0+255),w,b
  2374  0029A2  0101               	movlb	1	; () banked
  2375  0029A4  2142               	addwfc	(??_main+6)& (0+255),w,b
  2376  0029A6  0101               	movlb	1	; () banked
  2377  0029A8  6F46               	movwf	(??_main+10)& (0+255),b
  2378  0029AA  0101               	movlb	1	; () banked
  2379  0029AC  51A9               	movf	(_time+3)& (0+255),w,b
  2380  0029AE  0101               	movlb	1	; () banked
  2381  0029B0  2143               	addwfc	(??_main+7)& (0+255),w,b
  2382  0029B2  0101               	movlb	1	; () banked
  2383  0029B4  6F47               	movwf	(??_main+11)& (0+255),b
  2384  0029B6  0101               	movlb	1	; () banked
  2385  0029B8  513C               	movf	??_main& (0+255),w,b
  2386  0029BA  0101               	movlb	1	; () banked
  2387  0029BC  5D44               	subwf	(??_main+8)& (0+255),w,b
  2388  0029BE  0101               	movlb	1	; () banked
  2389  0029C0  513D               	movf	(??_main+1)& (0+255),w,b
  2390  0029C2  0101               	movlb	1	; () banked
  2391  0029C4  5945               	subwfb	(??_main+9)& (0+255),w,b
  2392  0029C6  0101               	movlb	1	; () banked
  2393  0029C8  513E               	movf	(??_main+2)& (0+255),w,b
  2394  0029CA  0101               	movlb	1	; () banked
  2395  0029CC  5946               	subwfb	(??_main+10)& (0+255),w,b
  2396  0029CE  0101               	movlb	1	; () banked
  2397  0029D0  5147               	movf	(??_main+11)& (0+255),w,b
  2398  0029D2  0A80               	xorlw	128
  2399  0029D4  0101               	movlb	1	; () banked
  2400  0029D6  6F48               	movwf	(??_main+12)& (0+255),b
  2401  0029D8  0101               	movlb	1	; () banked
  2402  0029DA  513F               	movf	(??_main+3)& (0+255),w,b
  2403  0029DC  0A80               	xorlw	128
  2404  0029DE  0101               	movlb	1	; () banked
  2405  0029E0  5948               	subwfb	(??_main+12)& (0+255),w,b
  2406  0029E2  A0D8               	btfss	status,0,c
  2407  0029E4  D033               	goto	l7140
  2408                           
  2409                           ; BSR set to: 1
  2410                           ;main.c: 141: {
  2411                           ;main.c: 142: int prev = digitalRead(cylinderDir);
  2412  0029E6  0E7A               	movlw	low _cylinderDir
  2413  0029E8  0100               	movlb	0	; () banked
  2414  0029EA  6F80               	movwf	digitalRead@pin& (0+255),b
  2415  0029EC  0E01               	movlw	high _cylinderDir
  2416  0029EE  0100               	movlb	0	; () banked
  2417  0029F0  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2418  0029F2  EC8B  F01F         	call	_digitalRead	;wreg free
  2419  0029F6  C080  F153         	movff	?_digitalRead,main@prev
  2420  0029FA  C081  F154         	movff	?_digitalRead+1,main@prev+1
  2421                           
  2422                           ;main.c: 143: digitalWrite(cylinderDir, !prev);
  2423  0029FE  0E7A               	movlw	low _cylinderDir
  2424  002A00  0100               	movlb	0	; () banked
  2425  002A02  6F80               	movwf	digitalWrite@pin& (0+255),b
  2426  002A04  0E01               	movlw	high _cylinderDir
  2427  002A06  0100               	movlb	0	; () banked
  2428  002A08  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2429  002A0A  0101               	movlb	1	; () banked
  2430  002A0C  5153               	movf	main@prev& (0+255),w,b
  2431  002A0E  0101               	movlb	1	; () banked
  2432  002A10  1154               	iorwf	(main@prev+1)& (0+255),w,b
  2433  002A12  A4D8               	btfss	status,2,c
  2434  002A14  D002               	goto	u8250
  2435  002A16  0E01               	movlw	1
  2436  002A18  D001               	goto	u8260
  2437  002A1A                     u8250:
  2438  002A1A  0E00               	movlw	0
  2439  002A1C                     u8260:
  2440  002A1C  0100               	movlb	0	; () banked
  2441  002A1E  6F82               	movwf	digitalWrite@val& (0+255),b
  2442  002A20  6B83               	clrf	(digitalWrite@val+1)& (0+255),b
  2443  002A22  EC4D  F022         	call	_digitalWrite	;wreg free
  2444                           
  2445                           ;main.c: 144: if(prev)cylinderDur = cylinderBackward;
  2446  002A26  0101               	movlb	1	; () banked
  2447  002A28  5153               	movf	main@prev& (0+255),w,b
  2448  002A2A  0101               	movlb	1	; () banked
  2449  002A2C  1154               	iorwf	(main@prev+1)& (0+255),w,b
  2450  002A2E  B4D8               	btfsc	status,2,c
  2451  002A30  D005               	goto	l138
  2452                           
  2453                           ; BSR set to: 1
  2454  002A32  C14B  F151         	movff	main@cylinderBackward,main@cylinderDur
  2455  002A36  C14C  F152         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2456  002A3A  D004               	goto	l139
  2457  002A3C                     l138:
  2458                           
  2459                           ; BSR set to: 1
  2460                           ;main.c: 145: else cylinderDur = cylinderForward;
  2461  002A3C  C149  F151         	movff	main@cylinderForward,main@cylinderDur
  2462  002A40  C14A  F152         	movff	main@cylinderForward+1,main@cylinderDur+1
  2463  002A44                     l139:
  2464                           
  2465                           ; BSR set to: 1
  2466                           ;main.c: 146: cylinderStart = time;
  2467  002A44  C1A6  F14F         	movff	_time,main@cylinderStart
  2468  002A48  C1A7  F150         	movff	_time+1,main@cylinderStart+1
  2469  002A4C                     l7140:
  2470                           
  2471                           ; BSR set to: 1
  2472                           ;main.c: 147: }
  2473                           ;main.c: 149: if(time - lastBatteryTime > stoppingTime)
  2474  002A4C  C14D  F13C         	movff	main@lastBatteryTime,??_main
  2475  002A50  C14E  F13D         	movff	main@lastBatteryTime+1,??_main+1
  2476  002A54  0E00               	movlw	0
  2477  002A56  0101               	movlb	1	; () banked
  2478  002A58  BF3D               	btfsc	(??_main+1)& (0+255),7,b
  2479  002A5A  0EFF               	movlw	255
  2480  002A5C  6F3E               	movwf	(??_main+2)& (0+255),b
  2481  002A5E  6F3F               	movwf	(??_main+3)& (0+255),b
  2482  002A60  0101               	movlb	1	; () banked
  2483  002A62  1F3C               	comf	??_main& (0+255),f,b
  2484  002A64  1F3D               	comf	(??_main+1)& (0+255),f,b
  2485  002A66  1F3E               	comf	(??_main+2)& (0+255),f,b
  2486  002A68  1F3F               	comf	(??_main+3)& (0+255),f,b
  2487  002A6A  2B3C               	incf	??_main& (0+255),f,b
  2488  002A6C  0E00               	movlw	0
  2489  002A6E  233D               	addwfc	(??_main+1)& (0+255),f,b
  2490  002A70  233E               	addwfc	(??_main+2)& (0+255),f,b
  2491  002A72  233F               	addwfc	(??_main+3)& (0+255),f,b
  2492  002A74  0101               	movlb	1	; () banked
  2493  002A76  51A6               	movf	_time& (0+255),w,b
  2494  002A78  0101               	movlb	1	; () banked
  2495  002A7A  253C               	addwf	??_main& (0+255),w,b
  2496  002A7C  0101               	movlb	1	; () banked
  2497  002A7E  6F40               	movwf	(??_main+4)& (0+255),b
  2498  002A80  0101               	movlb	1	; () banked
  2499  002A82  51A7               	movf	(_time+1)& (0+255),w,b
  2500  002A84  0101               	movlb	1	; () banked
  2501  002A86  213D               	addwfc	(??_main+1)& (0+255),w,b
  2502  002A88  0101               	movlb	1	; () banked
  2503  002A8A  6F41               	movwf	(??_main+5)& (0+255),b
  2504  002A8C  0101               	movlb	1	; () banked
  2505  002A8E  51A8               	movf	(_time+2)& (0+255),w,b
  2506  002A90  0101               	movlb	1	; () banked
  2507  002A92  213E               	addwfc	(??_main+2)& (0+255),w,b
  2508  002A94  0101               	movlb	1	; () banked
  2509  002A96  6F42               	movwf	(??_main+6)& (0+255),b
  2510  002A98  0101               	movlb	1	; () banked
  2511  002A9A  51A9               	movf	(_time+3)& (0+255),w,b
  2512  002A9C  0101               	movlb	1	; () banked
  2513  002A9E  213F               	addwfc	(??_main+3)& (0+255),w,b
  2514  002AA0  0101               	movlb	1	; () banked
  2515  002AA2  6F43               	movwf	(??_main+7)& (0+255),b
  2516  002AA4  0E00               	movlw	0
  2517  002AA6  0101               	movlb	1	; () banked
  2518  002AA8  BF71               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2519  002AAA  0EFF               	movlw	255
  2520  002AAC  0101               	movlb	1	; () banked
  2521  002AAE  6F45               	movwf	(??_main+9)& (0+255),b
  2522  002AB0  0A80               	xorlw	128
  2523  002AB2  6F44               	movwf	(??_main+8)& (0+255),b
  2524  002AB4  0101               	movlb	1	; () banked
  2525  002AB6  5140               	movf	(??_main+4)& (0+255),w,b
  2526  002AB8  0101               	movlb	1	; () banked
  2527  002ABA  5D70               	subwf	_stoppingTime& (0+255),w,b
  2528  002ABC  0101               	movlb	1	; () banked
  2529  002ABE  5141               	movf	(??_main+5)& (0+255),w,b
  2530  002AC0  0101               	movlb	1	; () banked
  2531  002AC2  5971               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2532  002AC4  0101               	movlb	1	; () banked
  2533  002AC6  5142               	movf	(??_main+6)& (0+255),w,b
  2534  002AC8  0101               	movlb	1	; () banked
  2535  002ACA  5945               	subwfb	(??_main+9)& (0+255),w,b
  2536  002ACC  0101               	movlb	1	; () banked
  2537  002ACE  5143               	movf	(??_main+7)& (0+255),w,b
  2538  002AD0  0A80               	xorlw	128
  2539  002AD2  0101               	movlb	1	; () banked
  2540  002AD4  5944               	subwfb	(??_main+8)& (0+255),w,b
  2541  002AD6  B0D8               	btfsc	status,0,c
  2542  002AD8  D006               	goto	l7144
  2543                           
  2544                           ; BSR set to: 1
  2545                           ;main.c: 150: {
  2546                           ;main.c: 151: terminate = 1;
  2547  002ADA  0E00               	movlw	0
  2548  002ADC  0101               	movlb	1	; () banked
  2549  002ADE  6FB9               	movwf	(_terminate+1)& (0+255),b
  2550  002AE0  0E01               	movlw	1
  2551  002AE2  6FB8               	movwf	_terminate& (0+255),b
  2552                           
  2553                           ;main.c: 152: break;
  2554  002AE4  D006               	goto	l7146
  2555  002AE6                     l7144:
  2556                           
  2557                           ; BSR set to: 1
  2558  002AE6  0101               	movlb	1	; () banked
  2559  002AE8  51AA               	movf	_batteryDetected& (0+255),w,b
  2560  002AEA  0101               	movlb	1	; () banked
  2561  002AEC  11AB               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2562  002AEE  B4D8               	btfsc	status,2,c
  2563  002AF0  D6D1               	goto	l7126
  2564  002AF2                     l7146:
  2565                           
  2566                           ; BSR set to: 1
  2567                           ;main.c: 153: }
  2568                           ;main.c: 154: }
  2569                           ;main.c: 156: if(terminate)break;
  2570  002AF2  0101               	movlb	1	; () banked
  2571  002AF4  51B8               	movf	_terminate& (0+255),w,b
  2572  002AF6  0101               	movlb	1	; () banked
  2573  002AF8  11B9               	iorwf	(_terminate+1)& (0+255),w,b
  2574  002AFA  A4D8               	btfss	status,2,c
  2575  002AFC  D00C               	goto	l7156
  2576                           
  2577                           ; BSR set to: 1
  2578                           ;main.c: 158: sortBattery();
  2579                           
  2580                           ; BSR set to: 1
  2581                           
  2582                           ; BSR set to: 1
  2583  002AFE  ECE8  F00C         	call	_sortBattery	;wreg free
  2584                           
  2585                           ;main.c: 161: lastBatteryTime = time;
  2586  002B02  C1A6  F14D         	movff	_time,main@lastBatteryTime
  2587  002B06  C1A7  F14E         	movff	_time+1,main@lastBatteryTime+1
  2588                           
  2589                           ;main.c: 162: batteryDetected = 0;
  2590  002B0A  0E00               	movlw	0
  2591  002B0C  0101               	movlb	1	; () banked
  2592  002B0E  6FAB               	movwf	(_batteryDetected+1)& (0+255),b
  2593  002B10  0E00               	movlw	0
  2594  002B12  6FAA               	movwf	_batteryDetected& (0+255),b
  2595                           
  2596                           ; BSR set to: 1
  2597  002B14  D69D               	goto	l7118
  2598  002B16                     l7156:
  2599                           
  2600                           ; BSR set to: 1
  2601                           ;main.c: 163: }
  2602                           ;main.c: 166: pause("finished");
  2603  002B16  0EE6               	movlw	low STR_3
  2604  002B18  0100               	movlb	0	; () banked
  2605  002B1A  6FE5               	movwf	pause@message& (0+255),b
  2606  002B1C  0EFF               	movlw	high STR_3
  2607  002B1E  0100               	movlb	0	; () banked
  2608  002B20  6FE6               	movwf	(pause@message+1)& (0+255),b
  2609  002B22  EC21  F02D         	call	_pause	;wreg free
  2610  002B26  D640               	goto	l7102
  2611  002B28                     l147:
  2612  002B28  D7FF               	goto	l147
  2613  002B2A                     __end_of_main:
  2614                           	opt stack 0
  2615                           tblptru	equ	0xFF8
  2616                           tblptrh	equ	0xFF7
  2617                           tblptrl	equ	0xFF6
  2618                           tablat	equ	0xFF5
  2619                           postinc0	equ	0xFEE
  2620                           wreg	equ	0xFE8
  2621                           postdec1	equ	0xFE5
  2622                           fsr1l	equ	0xFE1
  2623                           status	equ	0xFD8
  2624                           
  2625 ;; *************** function _sortBattery *****************
  2626 ;; Defined at:
  2627 ;;		line 174 in file "main.c"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;		None
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;  V               3   45[BANK1 ] float 
  2632 ;;  i               2   53[BANK1 ] int 
  2633 ;;  i               3   55[BANK1 ] float 
  2634 ;;  V_max           3   48[BANK1 ] float 
  2635 ;;  resolution      3   42[BANK1 ] float 
  2636 ;;  Vcc             3   39[BANK1 ] float 
  2637 ;;  V_float         3   34[BANK1 ] float 
  2638 ;;  V               2   58[BANK1 ] int 
  2639 ;;  targetAngle     2   51[BANK1 ] int 
  2640 ;;  signal          2   37[BANK1 ] int 
  2641 ;;  pos_v_counte    2   30[BANK1 ] int 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Totals:         0       2      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;Total ram usage:       32 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:   11
  2658 ;; This function calls:
  2659 ;;		___altoft
  2660 ;;		___awtoft
  2661 ;;		___ftdiv
  2662 ;;		___ftge
  2663 ;;		___ftmul
  2664 ;;		___ftsub
  2665 ;;		___fttol
  2666 ;;		_analogRead
  2667 ;;		_digitalRead
  2668 ;;		_digitalWrite
  2669 ;;		_printf
  2670 ;;		_readKeypad
  2671 ;;		_setAngle
  2672 ;; This function is called by:
  2673 ;;		_main
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text1
  2678  0019D0                     __ptext1:
  2679                           	opt stack 0
  2680  0019D0                     _sortBattery:
  2681                           	opt stack 19
  2682                           
  2683                           ;main.c: 177: setAngle(conveyorServo, 90);
  2684                           
  2685                           ;incstack = 0
  2686  0019D0  0E76               	movlw	low _conveyorServo
  2687  0019D2  0100               	movlb	0	; () banked
  2688  0019D4  6FEC               	movwf	setAngle@motor& (0+255),b
  2689  0019D6  0E01               	movlw	high _conveyorServo
  2690  0019D8  0100               	movlb	0	; () banked
  2691  0019DA  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2692  0019DC  0E00               	movlw	0
  2693  0019DE  0100               	movlb	0	; () banked
  2694  0019E0  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  2695  0019E2  0E5A               	movlw	90
  2696  0019E4  6FEE               	movwf	setAngle@angle& (0+255),b
  2697  0019E6  ECBE  F024         	call	_setAngle	;wreg free
  2698                           
  2699                           ;main.c: 178: digitalWrite(cylinderMotor, 0);
  2700  0019EA  0E7E               	movlw	low _cylinderMotor
  2701  0019EC  0100               	movlb	0	; () banked
  2702  0019EE  6F80               	movwf	digitalWrite@pin& (0+255),b
  2703  0019F0  0E01               	movlw	high _cylinderMotor
  2704  0019F2  0100               	movlb	0	; () banked
  2705  0019F4  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2706  0019F6  0E00               	movlw	0
  2707  0019F8  0100               	movlb	0	; () banked
  2708  0019FA  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2709  0019FC  0E00               	movlw	0
  2710  0019FE  6F82               	movwf	digitalWrite@val& (0+255),b
  2711  001A00  EC4D  F022         	call	_digitalWrite	;wreg free
  2712                           
  2713                           ;main.c: 181: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2714  001A04  0E0D               	movlw	13
  2715  001A06  0100               	movlb	0	; () banked
  2716  001A08  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  2717  001A0A  0EAF               	movlw	175
  2718  001A0C  0100               	movlb	0	; () banked
  2719  001A0E  6FF6               	movwf	??_sortBattery& (0+255),b
  2720  001A10  0EB6               	movlw	182
  2721  001A12                     u8417:
  2722  001A12  2EE8               	decfsz	wreg,f,c
  2723  001A14  D7FE               	bra	u8417
  2724  001A16  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2725  001A18  D7FC               	bra	u8417
  2726  001A1A  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2727  001A1C  D7FA               	bra	u8417
  2728  001A1E  F000               	nop	
  2729                           
  2730                           ;main.c: 183: float Vcc = 5.00;
  2731  001A20  0E00               	movlw	0
  2732  001A22  0101               	movlb	1	; () banked
  2733  001A24  6F27               	movwf	sortBattery@Vcc& (0+255),b
  2734  001A26  0EA0               	movlw	160
  2735  001A28  0101               	movlb	1	; () banked
  2736  001A2A  6F28               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2737  001A2C  0E40               	movlw	64
  2738  001A2E  0101               	movlb	1	; () banked
  2739  001A30  6F29               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2740                           
  2741                           ; BSR set to: 1
  2742                           ;main.c: 184: float resolution = (1<<10) - 1;
  2743  001A32  0EC0               	movlw	192
  2744  001A34  0101               	movlb	1	; () banked
  2745  001A36  6F2A               	movwf	sortBattery@resolution& (0+255),b
  2746  001A38  0E7F               	movlw	127
  2747  001A3A  0101               	movlb	1	; () banked
  2748  001A3C  6F2B               	movwf	(sortBattery@resolution+1)& (0+255),b
  2749  001A3E  0E44               	movlw	68
  2750  001A40  0101               	movlb	1	; () banked
  2751  001A42  6F2C               	movwf	(sortBattery@resolution+2)& (0+255),b
  2752                           
  2753                           ; BSR set to: 1
  2754                           ;main.c: 185: float V_max = 0;
  2755  001A44  0E00               	movlw	0
  2756  001A46  0101               	movlb	1	; () banked
  2757  001A48  6F30               	movwf	sortBattery@V_max& (0+255),b
  2758  001A4A  0E00               	movlw	0
  2759  001A4C  0101               	movlb	1	; () banked
  2760  001A4E  6F31               	movwf	(sortBattery@V_max+1)& (0+255),b
  2761  001A50  0E00               	movlw	0
  2762  001A52  0101               	movlb	1	; () banked
  2763  001A54  6F32               	movwf	(sortBattery@V_max+2)& (0+255),b
  2764                           
  2765                           ; BSR set to: 1
  2766                           ;main.c: 186: float V_float = 0;
  2767  001A56  0E00               	movlw	0
  2768  001A58  0101               	movlb	1	; () banked
  2769  001A5A  6F22               	movwf	sortBattery@V_float& (0+255),b
  2770  001A5C  0E00               	movlw	0
  2771  001A5E  0101               	movlb	1	; () banked
  2772  001A60  6F23               	movwf	(sortBattery@V_float+1)& (0+255),b
  2773  001A62  0E00               	movlw	0
  2774  001A64  0101               	movlb	1	; () banked
  2775  001A66  6F24               	movwf	(sortBattery@V_float+2)& (0+255),b
  2776                           
  2777                           ; BSR set to: 1
  2778                           ;main.c: 187: int pos_v_counter = 1;
  2779  001A68  0E00               	movlw	0
  2780  001A6A  0101               	movlb	1	; () banked
  2781  001A6C  6F1F               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2782  001A6E  0E01               	movlw	1
  2783  001A70  6F1E               	movwf	sortBattery@pos_v_counter& (0+255),b
  2784                           
  2785                           ; BSR set to: 1
  2786                           ;main.c: 188: int signal = 0;
  2787  001A72  0E00               	movlw	0
  2788  001A74  0101               	movlb	1	; () banked
  2789  001A76  6F26               	movwf	(sortBattery@signal+1)& (0+255),b
  2790  001A78  0E00               	movlw	0
  2791  001A7A  6F25               	movwf	sortBattery@signal& (0+255),b
  2792                           
  2793                           ; BSR set to: 1
  2794                           ;main.c: 192: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2795  001A7C  C162  F088         	movff	_padAngle_NEUTRAL,___awtoft@c
  2796  001A80  C163  F089         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2797  001A84  EC2C  F02B         	call	___awtoft	;wreg free
  2798  001A88  C088  F137         	movff	?___awtoft,sortBattery@i
  2799  001A8C  C089  F138         	movff	?___awtoft+1,sortBattery@i+1
  2800  001A90  C08A  F139         	movff	?___awtoft+2,sortBattery@i+2
  2801  001A94  D0F7               	goto	l6562
  2802  001A96                     l6540:
  2803                           
  2804                           ;main.c: 193: setAngle(padServo, i);
  2805  001A96  C137  F0C6         	movff	sortBattery@i,___fttol@f1
  2806  001A9A  C138  F0C7         	movff	sortBattery@i+1,___fttol@f1+1
  2807  001A9E  C139  F0C8         	movff	sortBattery@i+2,___fttol@f1+2
  2808  001AA2  ECB3  F01D         	call	___fttol	;wreg free
  2809  001AA6  C0C6  F120         	movff	?___fttol,_sortBattery$1349
  2810  001AAA  C0C7  F121         	movff	?___fttol+1,_sortBattery$1349+1
  2811                           
  2812                           ;main.c: 193: setAngle(padServo, i);
  2813  001AAE  0E8A               	movlw	low _padServo
  2814  001AB0  0100               	movlb	0	; () banked
  2815  001AB2  6FEC               	movwf	setAngle@motor& (0+255),b
  2816  001AB4  0E01               	movlw	high _padServo
  2817  001AB6  0100               	movlb	0	; () banked
  2818  001AB8  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2819  001ABA  C120  F0EE         	movff	_sortBattery$1349,setAngle@angle
  2820  001ABE  C121  F0EF         	movff	_sortBattery$1349+1,setAngle@angle+1
  2821  001AC2  ECBE  F024         	call	_setAngle	;wreg free
  2822                           
  2823                           ;main.c: 194: _delay((unsigned long)((1)*(10000000/4000.0)));
  2824  001AC6  0E04               	movlw	4
  2825  001AC8  0100               	movlb	0	; () banked
  2826  001ACA  6FF6               	movwf	??_sortBattery& (0+255),b
  2827  001ACC  0E3D               	movlw	61
  2828  001ACE                     u8427:
  2829  001ACE  2EE8               	decfsz	wreg,f,c
  2830  001AD0  D7FE               	bra	u8427
  2831  001AD2  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2832  001AD4  D7FC               	bra	u8427
  2833  001AD6  D000               	nop2	
  2834                           
  2835                           ;main.c: 195: digitalWrite(AA_float, 1);
  2836  001AD8  0E72               	movlw	low _AA_float
  2837  001ADA  0100               	movlb	0	; () banked
  2838  001ADC  6F80               	movwf	digitalWrite@pin& (0+255),b
  2839  001ADE  0E01               	movlw	high _AA_float
  2840  001AE0  0100               	movlb	0	; () banked
  2841  001AE2  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2842  001AE4  0E00               	movlw	0
  2843  001AE6  0100               	movlb	0	; () banked
  2844  001AE8  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2845  001AEA  0E01               	movlw	1
  2846  001AEC  6F82               	movwf	digitalWrite@val& (0+255),b
  2847  001AEE  EC4D  F022         	call	_digitalWrite	;wreg free
  2848                           
  2849                           ;main.c: 196: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2850  001AF2  C12A  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2851  001AF6  C12B  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2852  001AFA  C12C  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2853  001AFE  C1A4  F080         	movff	_padPin3+2,analogRead@channel
  2854  001B02  C1A5  F081         	movff	_padPin3+3,analogRead@channel+1
  2855  001B06  EC4E  F02B         	call	_analogRead	;wreg free
  2856  001B0A  C080  F088         	movff	?_analogRead,___altoft@c
  2857  001B0E  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2858  001B12  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2859  001B16  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2860  001B1A  EC55  F027         	call	___altoft	;wreg free
  2861  001B1E  C088  F092         	movff	?___altoft,___ftdiv@f1
  2862  001B22  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2863  001B26  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2864  001B2A  EC0D  F01D         	call	___ftdiv	;wreg free
  2865  001B2E  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2866  001B32  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2867  001B36  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2868  001B3A  C127  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2869  001B3E  C128  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2870  001B42  C129  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2871  001B46  EC5E  F01C         	call	___ftmul	;wreg free
  2872  001B4A  C0A1  F12D         	movff	?___ftmul,sortBattery@V
  2873  001B4E  C0A2  F12E         	movff	?___ftmul+1,sortBattery@V+1
  2874  001B52  C0A3  F12F         	movff	?___ftmul+2,sortBattery@V+2
  2875                           
  2876                           ;main.c: 198: if(V > V_max) {
  2877  001B56  C130  F08C         	movff	sortBattery@V_max,___ftge@ff1
  2878  001B5A  C131  F08D         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2879  001B5E  C132  F08E         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2880  001B62  C12D  F08F         	movff	sortBattery@V,___ftge@ff2
  2881  001B66  C12E  F090         	movff	sortBattery@V+1,___ftge@ff2+1
  2882  001B6A  C12F  F091         	movff	sortBattery@V+2,___ftge@ff2+2
  2883  001B6E  EC28  F025         	call	___ftge	;wreg free
  2884  001B72  0100               	movlb	0	; () banked
  2885  001B74  B0D8               	btfsc	status,0,c
  2886  001B76  D06F               	goto	l6560
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;main.c: 199: signal = digitalRead(padPin1)<<1;
  2890  001B78  0E82               	movlw	low _padPin1
  2891  001B7A  0100               	movlb	0	; () banked
  2892  001B7C  6F80               	movwf	digitalRead@pin& (0+255),b
  2893  001B7E  0E01               	movlw	high _padPin1
  2894  001B80  0100               	movlb	0	; () banked
  2895  001B82  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2896  001B84  EC8B  F01F         	call	_digitalRead	;wreg free
  2897  001B88  90D8               	bcf	status,0,c
  2898  001B8A  0100               	movlb	0	; () banked
  2899  001B8C  3580               	rlcf	?_digitalRead& (0+255),w,b
  2900  001B8E  0101               	movlb	1	; () banked
  2901  001B90  6F25               	movwf	sortBattery@signal& (0+255),b
  2902  001B92  0100               	movlb	0	; () banked
  2903  001B94  3581               	rlcf	(?_digitalRead+1)& (0+255),w,b
  2904  001B96  0101               	movlb	1	; () banked
  2905  001B98  6F26               	movwf	(sortBattery@signal+1)& (0+255),b
  2906                           
  2907                           ;main.c: 200: signal |= digitalRead(padPin2)<<0;
  2908  001B9A  0E86               	movlw	low _padPin2
  2909  001B9C  0100               	movlb	0	; () banked
  2910  001B9E  6F80               	movwf	digitalRead@pin& (0+255),b
  2911  001BA0  0E01               	movlw	high _padPin2
  2912  001BA2  0100               	movlb	0	; () banked
  2913  001BA4  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2914  001BA6  EC8B  F01F         	call	_digitalRead	;wreg free
  2915  001BAA  0100               	movlb	0	; () banked
  2916  001BAC  5180               	movf	?_digitalRead& (0+255),w,b
  2917  001BAE  0101               	movlb	1	; () banked
  2918  001BB0  1325               	iorwf	sortBattery@signal& (0+255),f,b
  2919  001BB2  0100               	movlb	0	; () banked
  2920  001BB4  5181               	movf	(?_digitalRead+1)& (0+255),w,b
  2921  001BB6  0101               	movlb	1	; () banked
  2922  001BB8  1326               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2923                           
  2924                           ; BSR set to: 1
  2925                           ;main.c: 202: V_max = V;
  2926  001BBA  C12D  F130         	movff	sortBattery@V,sortBattery@V_max
  2927  001BBE  C12E  F131         	movff	sortBattery@V+1,sortBattery@V_max+1
  2928  001BC2  C12F  F132         	movff	sortBattery@V+2,sortBattery@V_max+2
  2929                           
  2930                           ;main.c: 205: digitalWrite(AA_float, 0);
  2931  001BC6  0E72               	movlw	low _AA_float
  2932  001BC8  0100               	movlb	0	; () banked
  2933  001BCA  6F80               	movwf	digitalWrite@pin& (0+255),b
  2934  001BCC  0E01               	movlw	high _AA_float
  2935  001BCE  0100               	movlb	0	; () banked
  2936  001BD0  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2937  001BD2  0E00               	movlw	0
  2938  001BD4  0100               	movlb	0	; () banked
  2939  001BD6  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2940  001BD8  0E00               	movlw	0
  2941  001BDA  6F82               	movwf	digitalWrite@val& (0+255),b
  2942  001BDC  EC4D  F022         	call	_digitalWrite	;wreg free
  2943                           
  2944                           ;main.c: 206: _delay((unsigned long)((1)*(10000000/4000.0)));
  2945  001BE0  0E04               	movlw	4
  2946  001BE2  0100               	movlb	0	; () banked
  2947  001BE4  6FF6               	movwf	??_sortBattery& (0+255),b
  2948  001BE6  0E3D               	movlw	61
  2949  001BE8                     u8437:
  2950  001BE8  2EE8               	decfsz	wreg,f,c
  2951  001BEA  D7FE               	bra	u8437
  2952  001BEC  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2953  001BEE  D7FC               	bra	u8437
  2954  001BF0  D000               	nop2	
  2955                           
  2956                           ;main.c: 207: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2957  001BF2  C12A  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2958  001BF6  C12B  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2959  001BFA  C12C  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2960  001BFE  C1A4  F080         	movff	_padPin3+2,analogRead@channel
  2961  001C02  C1A5  F081         	movff	_padPin3+3,analogRead@channel+1
  2962  001C06  EC4E  F02B         	call	_analogRead	;wreg free
  2963  001C0A  C080  F088         	movff	?_analogRead,___altoft@c
  2964  001C0E  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2965  001C12  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2966  001C16  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2967  001C1A  EC55  F027         	call	___altoft	;wreg free
  2968  001C1E  C088  F092         	movff	?___altoft,___ftdiv@f1
  2969  001C22  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2970  001C26  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2971  001C2A  EC0D  F01D         	call	___ftdiv	;wreg free
  2972  001C2E  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2973  001C32  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2974  001C36  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2975  001C3A  C127  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2976  001C3E  C128  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2977  001C42  C129  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2978  001C46  EC5E  F01C         	call	___ftmul	;wreg free
  2979  001C4A  C0A1  F122         	movff	?___ftmul,sortBattery@V_float
  2980  001C4E  C0A2  F123         	movff	?___ftmul+1,sortBattery@V_float+1
  2981  001C52  C0A3  F124         	movff	?___ftmul+2,sortBattery@V_float+2
  2982  001C56                     l6560:
  2983  001C56  C137  F0C6         	movff	sortBattery@i,___ftsub@f1
  2984  001C5A  C138  F0C7         	movff	sortBattery@i+1,___ftsub@f1+1
  2985  001C5E  C139  F0C8         	movff	sortBattery@i+2,___ftsub@f1+2
  2986  001C62  0ECD               	movlw	205
  2987  001C64  0100               	movlb	0	; () banked
  2988  001C66  6FC9               	movwf	___ftsub@f2& (0+255),b
  2989  001C68  0ECC               	movlw	204
  2990  001C6A  0100               	movlb	0	; () banked
  2991  001C6C  6FCA               	movwf	(___ftsub@f2+1)& (0+255),b
  2992  001C6E  0E3D               	movlw	61
  2993  001C70  0100               	movlb	0	; () banked
  2994  001C72  6FCB               	movwf	(___ftsub@f2+2)& (0+255),b
  2995  001C74  EC98  F02A         	call	___ftsub	;wreg free
  2996  001C78  C0C6  F137         	movff	?___ftsub,sortBattery@i
  2997  001C7C  C0C7  F138         	movff	?___ftsub+1,sortBattery@i+1
  2998  001C80  C0C8  F139         	movff	?___ftsub+2,sortBattery@i+2
  2999  001C84                     l6562:
  3000  001C84  C160  F088         	movff	_padAngle_CLOSE,___awtoft@c
  3001  001C88  C161  F089         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  3002  001C8C  EC2C  F02B         	call	___awtoft	;wreg free
  3003  001C90  C088  F08C         	movff	?___awtoft,___ftge@ff1
  3004  001C94  C089  F08D         	movff	?___awtoft+1,___ftge@ff1+1
  3005  001C98  C08A  F08E         	movff	?___awtoft+2,___ftge@ff1+2
  3006  001C9C  C137  F08F         	movff	sortBattery@i,___ftge@ff2
  3007  001CA0  C138  F090         	movff	sortBattery@i+1,___ftge@ff2+1
  3008  001CA4  C139  F091         	movff	sortBattery@i+2,___ftge@ff2+2
  3009  001CA8  EC28  F025         	call	___ftge	;wreg free
  3010  001CAC  0100               	movlb	0	; () banked
  3011  001CAE  A0D8               	btfss	status,0,c
  3012  001CB0  D6F2               	goto	l6540
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;main.c: 209: }
  3016                           ;main.c: 210: }
  3017                           ;main.c: 212: int targetAngle;
  3018                           ;main.c: 213: int V = V_max;
  3019                           
  3020                           ; BSR set to: 0
  3021  001CB2  C130  F0C6         	movff	sortBattery@V_max,___fttol@f1
  3022  001CB6  C131  F0C7         	movff	sortBattery@V_max+1,___fttol@f1+1
  3023  001CBA  C132  F0C8         	movff	sortBattery@V_max+2,___fttol@f1+2
  3024  001CBE  ECB3  F01D         	call	___fttol	;wreg free
  3025  001CC2  C0C6  F13A         	movff	?___fttol,sortBattery@V_223
  3026  001CC6  C0C7  F13B         	movff	?___fttol+1,sortBattery@V_223+1
  3027                           
  3028                           ;main.c: 215: printf("N: %d,\nV: %.3f",pos_v_counter, V);
  3029  001CCA  0ECC               	movlw	low STR_4
  3030  001CCC  0100               	movlb	0	; () banked
  3031  001CCE  6FD5               	movwf	printf@f& (0+255),b
  3032  001CD0  0EFF               	movlw	high STR_4
  3033  001CD2  0100               	movlb	0	; () banked
  3034  001CD4  6FD6               	movwf	(printf@f+1)& (0+255),b
  3035  001CD6  C11E  F0D7         	movff	sortBattery@pos_v_counter,?_printf+2
  3036  001CDA  C11F  F0D8         	movff	sortBattery@pos_v_counter+1,?_printf+3
  3037  001CDE  C13A  F0D9         	movff	sortBattery@V_223,?_printf+4
  3038  001CE2  C13B  F0DA         	movff	sortBattery@V_223+1,?_printf+5
  3039  001CE6  EC09  F000         	call	_printf	;wreg free
  3040                           
  3041                           ;main.c: 217: readKeypad();
  3042  001CEA  EC19  F02C         	call	_readKeypad	;wreg free
  3043                           
  3044                           ;main.c: 221: switch(signal){
  3045  001CEE  D079               	goto	l6598
  3046  001CF0                     l6570:
  3047                           
  3048                           ;main.c: 223: if(V_float < 0.1){
  3049  001CF0  C122  F08C         	movff	sortBattery@V_float,___ftge@ff1
  3050  001CF4  C123  F08D         	movff	sortBattery@V_float+1,___ftge@ff1+1
  3051  001CF8  C124  F08E         	movff	sortBattery@V_float+2,___ftge@ff1+2
  3052  001CFC  0ECD               	movlw	205
  3053  001CFE  0100               	movlb	0	; () banked
  3054  001D00  6F8F               	movwf	___ftge@ff2& (0+255),b
  3055  001D02  0ECC               	movlw	204
  3056  001D04  0100               	movlb	0	; () banked
  3057  001D06  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  3058  001D08  0E3D               	movlw	61
  3059  001D0A  0100               	movlb	0	; () banked
  3060  001D0C  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  3061  001D0E  EC28  F025         	call	___ftge	;wreg free
  3062  001D12  0100               	movlb	0	; () banked
  3063  001D14  B0D8               	btfsc	status,0,c
  3064  001D16  D01F               	goto	l6580
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;main.c: 224: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  3068  001D18  C158  F08C         	movff	_V_LIM_AA,___ftge@ff1
  3069  001D1C  C159  F08D         	movff	_V_LIM_AA+1,___ftge@ff1+1
  3070  001D20  C15A  F08E         	movff	_V_LIM_AA+2,___ftge@ff1+2
  3071  001D24  C13A  F088         	movff	sortBattery@V_223,___awtoft@c
  3072  001D28  C13B  F089         	movff	sortBattery@V_223+1,___awtoft@c+1
  3073  001D2C  EC2C  F02B         	call	___awtoft	;wreg free
  3074  001D30  C088  F08F         	movff	?___awtoft,___ftge@ff2
  3075  001D34  C089  F090         	movff	?___awtoft+1,___ftge@ff2+1
  3076  001D38  C08A  F091         	movff	?___awtoft+2,___ftge@ff2+2
  3077  001D3C  EC28  F025         	call	___ftge	;wreg free
  3078  001D40  0100               	movlb	0	; () banked
  3079  001D42  B0D8               	btfsc	status,0,c
  3080  001D44  D046               	goto	l167
  3081                           
  3082                           ; BSR set to: 0
  3083  001D46  C16A  F133         	movff	_redirectAngle_AA,sortBattery@targetAngle
  3084  001D4A  C16B  F134         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  3085                           
  3086                           ; BSR set to: 0
  3087  001D4E  0101               	movlb	1	; () banked
  3088  001D50  4BB0               	infsnz	_n_AA& (0+255),f,b
  3089  001D52  2BB1               	incf	(_n_AA+1)& (0+255),f,b
  3090  001D54  D05A               	goto	l6600
  3091  001D56                     l6580:
  3092                           
  3093                           ;main.c: 230: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  3094  001D56  C155  F08C         	movff	_V_LIM_9V,___ftge@ff1
  3095  001D5A  C156  F08D         	movff	_V_LIM_9V+1,___ftge@ff1+1
  3096  001D5E  C157  F08E         	movff	_V_LIM_9V+2,___ftge@ff1+2
  3097  001D62  C13A  F088         	movff	sortBattery@V_223,___awtoft@c
  3098  001D66  C13B  F089         	movff	sortBattery@V_223+1,___awtoft@c+1
  3099  001D6A  EC2C  F02B         	call	___awtoft	;wreg free
  3100  001D6E  C088  F08F         	movff	?___awtoft,___ftge@ff2
  3101  001D72  C089  F090         	movff	?___awtoft+1,___ftge@ff2+1
  3102  001D76  C08A  F091         	movff	?___awtoft+2,___ftge@ff2+2
  3103  001D7A  EC28  F025         	call	___ftge	;wreg free
  3104  001D7E  0100               	movlb	0	; () banked
  3105  001D80  B0D8               	btfsc	status,0,c
  3106  001D82  D027               	goto	l167
  3107                           
  3108                           ; BSR set to: 0
  3109  001D84  C168  F133         	movff	_redirectAngle_9V,sortBattery@targetAngle
  3110  001D88  C169  F134         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  3111                           
  3112                           ; BSR set to: 0
  3113  001D8C  0101               	movlb	1	; () banked
  3114  001D8E  4BAE               	infsnz	_n_9V& (0+255),f,b
  3115  001D90  2BAF               	incf	(_n_9V+1)& (0+255),f,b
  3116  001D92  D03B               	goto	l6600
  3117  001D94                     l6588:
  3118                           
  3119                           ;main.c: 234: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  3120  001D94  C15B  F08C         	movff	_V_LIM_C,___ftge@ff1
  3121  001D98  C15C  F08D         	movff	_V_LIM_C+1,___ftge@ff1+1
  3122  001D9C  C15D  F08E         	movff	_V_LIM_C+2,___ftge@ff1+2
  3123  001DA0  C13A  F088         	movff	sortBattery@V_223,___awtoft@c
  3124  001DA4  C13B  F089         	movff	sortBattery@V_223+1,___awtoft@c+1
  3125  001DA8  EC2C  F02B         	call	___awtoft	;wreg free
  3126  001DAC  C088  F08F         	movff	?___awtoft,___ftge@ff2
  3127  001DB0  C089  F090         	movff	?___awtoft+1,___ftge@ff2+1
  3128  001DB4  C08A  F091         	movff	?___awtoft+2,___ftge@ff2+2
  3129  001DB8  EC28  F025         	call	___ftge	;wreg free
  3130  001DBC  0100               	movlb	0	; () banked
  3131  001DBE  B0D8               	btfsc	status,0,c
  3132  001DC0  D008               	goto	l167
  3133                           
  3134                           ; BSR set to: 0
  3135  001DC2  C16C  F133         	movff	_redirectAngle_C,sortBattery@targetAngle
  3136  001DC6  C16D  F134         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  3137                           
  3138                           ; BSR set to: 0
  3139  001DCA  0101               	movlb	1	; () banked
  3140  001DCC  4BB2               	infsnz	_n_C& (0+255),f,b
  3141  001DCE  2BB3               	incf	(_n_C+1)& (0+255),f,b
  3142  001DD0  D01C               	goto	l6600
  3143  001DD2                     l167:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;main.c: 235: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3147  001DD2  C16E  F133         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3148  001DD6  C16F  F134         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3149                           
  3150                           ; BSR set to: 0
  3151  001DDA  0101               	movlb	1	; () banked
  3152  001DDC  4BB4               	infsnz	_n_OTHER& (0+255),f,b
  3153  001DDE  2BB5               	incf	(_n_OTHER+1)& (0+255),f,b
  3154                           
  3155                           ; BSR set to: 1
  3156                           ;main.c: 237: }
  3157                           
  3158                           ; BSR set to: 1
  3159                           ;main.c: 236: break;
  3160  001DE0  D014               	goto	l6600
  3161  001DE2                     l6598:
  3162  001DE2  C125  F0F6         	movff	sortBattery@signal,??_sortBattery
  3163  001DE6  C126  F0F7         	movff	sortBattery@signal+1,??_sortBattery+1
  3164                           
  3165                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3166                           ; Switch size 1, requested type "space"
  3167                           ; Number of cases is 1, Range of values is 0 to 0
  3168                           ; switch strategies available:
  3169                           ; Name         Instructions Cycles
  3170                           ; simple_byte            4     3 (average)
  3171                           ;	Chosen strategy is simple_byte
  3172  001DEA  0100               	movlb	0	; () banked
  3173  001DEC  51F7               	movf	(??_sortBattery+1)& (0+255),w,b
  3174  001DEE  0A00               	xorlw	0	; case 0
  3175  001DF0  A4D8               	btfss	status,2,c
  3176  001DF2  D00B               	goto	l6600
  3177                           
  3178                           ; BSR set to: 0
  3179                           ; Switch size 1, requested type "space"
  3180                           ; Number of cases is 3, Range of values is 0 to 2
  3181                           ; switch strategies available:
  3182                           ; Name         Instructions Cycles
  3183                           ; simple_byte           10     6 (average)
  3184                           ;	Chosen strategy is simple_byte
  3185  001DF4  0100               	movlb	0	; () banked
  3186  001DF6  51F6               	movf	??_sortBattery& (0+255),w,b
  3187  001DF8  0A00               	xorlw	0	; case 0
  3188  001DFA  B4D8               	btfsc	status,2,c
  3189  001DFC  D779               	goto	l6570
  3190  001DFE  0A01               	xorlw	1	; case 1
  3191  001E00  B4D8               	btfsc	status,2,c
  3192  001E02  D7C8               	goto	l6588
  3193  001E04  0A03               	xorlw	3	; case 2
  3194  001E06  B4D8               	btfsc	status,2,c
  3195  001E08  D7A6               	goto	l6580
  3196  001E0A                     l6600:
  3197                           
  3198                           ;main.c: 239: setAngle(redirectingServo, targetAngle);
  3199  001E0A  0E8E               	movlw	low _redirectingServo
  3200  001E0C  0100               	movlb	0	; () banked
  3201  001E0E  6FEC               	movwf	setAngle@motor& (0+255),b
  3202  001E10  0E01               	movlw	high _redirectingServo
  3203  001E12  0100               	movlb	0	; () banked
  3204  001E14  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  3205  001E16  C133  F0EE         	movff	sortBattery@targetAngle,setAngle@angle
  3206  001E1A  C134  F0EF         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  3207  001E1E  ECBE  F024         	call	_setAngle	;wreg free
  3208                           
  3209                           ;main.c: 240: _delay((unsigned long)((500)*(10000000/4000.0)));
  3210  001E22  0E07               	movlw	7
  3211  001E24  0100               	movlb	0	; () banked
  3212  001E26  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  3213  001E28  0E58               	movlw	88
  3214  001E2A  0100               	movlb	0	; () banked
  3215  001E2C  6FF6               	movwf	??_sortBattery& (0+255),b
  3216  001E2E  0E59               	movlw	89
  3217  001E30                     u8447:
  3218  001E30  2EE8               	decfsz	wreg,f,c
  3219  001E32  D7FE               	bra	u8447
  3220  001E34  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  3221  001E36  D7FC               	bra	u8447
  3222  001E38  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3223  001E3A  D7FA               	bra	u8447
  3224  001E3C  D000               	nop2	
  3225                           
  3226                           ;main.c: 244: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  3227  001E3E  C160  F135         	movff	_padAngle_CLOSE,sortBattery@i_225
  3228  001E42  C161  F136         	movff	_padAngle_CLOSE+1,sortBattery@i_225+1
  3229  001E46  D018               	goto	l6612
  3230  001E48                     l6606:
  3231                           
  3232                           ;main.c: 245: setAngle(padServo, i);
  3233  001E48  0E8A               	movlw	low _padServo
  3234  001E4A  0100               	movlb	0	; () banked
  3235  001E4C  6FEC               	movwf	setAngle@motor& (0+255),b
  3236  001E4E  0E01               	movlw	high _padServo
  3237  001E50  0100               	movlb	0	; () banked
  3238  001E52  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  3239  001E54  C135  F0EE         	movff	sortBattery@i_225,setAngle@angle
  3240  001E58  C136  F0EF         	movff	sortBattery@i_225+1,setAngle@angle+1
  3241  001E5C  ECBE  F024         	call	_setAngle	;wreg free
  3242                           
  3243                           ;main.c: 246: _delay((unsigned long)((3)*(10000000/4000.0)));
  3244  001E60  0E0A               	movlw	10
  3245  001E62  0100               	movlb	0	; () banked
  3246  001E64  6FF6               	movwf	??_sortBattery& (0+255),b
  3247  001E66  0EBC               	movlw	188
  3248  001E68                     u8457:
  3249  001E68  2EE8               	decfsz	wreg,f,c
  3250  001E6A  D7FE               	bra	u8457
  3251  001E6C  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  3252  001E6E  D7FC               	bra	u8457
  3253  001E70  F000               	nop	
  3254  001E72  0101               	movlb	1	; () banked
  3255  001E74  4B35               	infsnz	sortBattery@i_225& (0+255),f,b
  3256  001E76  2B36               	incf	(sortBattery@i_225+1)& (0+255),f,b
  3257  001E78                     l6612:
  3258  001E78  0101               	movlb	1	; () banked
  3259  001E7A  5164               	movf	_padAngle_OPEN& (0+255),w,b
  3260  001E7C  0101               	movlb	1	; () banked
  3261  001E7E  5D35               	subwf	sortBattery@i_225& (0+255),w,b
  3262  001E80  0101               	movlb	1	; () banked
  3263  001E82  5136               	movf	(sortBattery@i_225+1)& (0+255),w,b
  3264  001E84  0A80               	xorlw	128
  3265  001E86  0100               	movlb	0	; () banked
  3266  001E88  6FF6               	movwf	??_sortBattery& (0+255),b
  3267  001E8A  0101               	movlb	1	; () banked
  3268  001E8C  5165               	movf	(_padAngle_OPEN+1)& (0+255),w,b
  3269  001E8E  0A80               	xorlw	128
  3270  001E90  0100               	movlb	0	; () banked
  3271  001E92  59F6               	subwfb	??_sortBattery& (0+255),w,b
  3272  001E94  A0D8               	btfss	status,0,c
  3273  001E96  D7D8               	goto	l6606
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;main.c: 247: }
  3277                           ;main.c: 249: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3278                           
  3279                           ; BSR set to: 0
  3280  001E98  0E0D               	movlw	13
  3281  001E9A  0100               	movlb	0	; () banked
  3282  001E9C  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  3283  001E9E  0EAF               	movlw	175
  3284  001EA0  0100               	movlb	0	; () banked
  3285  001EA2  6FF6               	movwf	??_sortBattery& (0+255),b
  3286  001EA4  0EB6               	movlw	182
  3287  001EA6                     u8467:
  3288  001EA6  2EE8               	decfsz	wreg,f,c
  3289  001EA8  D7FE               	bra	u8467
  3290  001EAA  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  3291  001EAC  D7FC               	bra	u8467
  3292  001EAE  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3293  001EB0  D7FA               	bra	u8467
  3294  001EB2  F000               	nop	
  3295                           
  3296                           ;main.c: 253: setAngle(padServo, padAngle_NEUTRAL);
  3297  001EB4  0E8A               	movlw	low _padServo
  3298  001EB6  0100               	movlb	0	; () banked
  3299  001EB8  6FEC               	movwf	setAngle@motor& (0+255),b
  3300  001EBA  0E01               	movlw	high _padServo
  3301  001EBC  0100               	movlb	0	; () banked
  3302  001EBE  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  3303  001EC0  C162  F0EE         	movff	_padAngle_NEUTRAL,setAngle@angle
  3304  001EC4  C163  F0EF         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3305  001EC8  ECBE  F024         	call	_setAngle	;wreg free
  3306                           
  3307                           ;main.c: 257: setAngle(conveyorServo, 130);
  3308  001ECC  0E76               	movlw	low _conveyorServo
  3309  001ECE  0100               	movlb	0	; () banked
  3310  001ED0  6FEC               	movwf	setAngle@motor& (0+255),b
  3311  001ED2  0E01               	movlw	high _conveyorServo
  3312  001ED4  0100               	movlb	0	; () banked
  3313  001ED6  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  3314  001ED8  0E00               	movlw	0
  3315  001EDA  0100               	movlb	0	; () banked
  3316  001EDC  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  3317  001EDE  0E82               	movlw	130
  3318  001EE0  6FEE               	movwf	setAngle@angle& (0+255),b
  3319  001EE2  ECBE  F024         	call	_setAngle	;wreg free
  3320                           
  3321                           ;main.c: 258: digitalWrite(cylinderMotor, 1);
  3322  001EE6  0E7E               	movlw	low _cylinderMotor
  3323  001EE8  0100               	movlb	0	; () banked
  3324  001EEA  6F80               	movwf	digitalWrite@pin& (0+255),b
  3325  001EEC  0E01               	movlw	high _cylinderMotor
  3326  001EEE  0100               	movlb	0	; () banked
  3327  001EF0  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  3328  001EF2  0E00               	movlw	0
  3329  001EF4  0100               	movlb	0	; () banked
  3330  001EF6  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  3331  001EF8  0E01               	movlw	1
  3332  001EFA  6F82               	movwf	digitalWrite@val& (0+255),b
  3333  001EFC  EC4D  F022         	call	_digitalWrite	;wreg free
  3334  001F00  0012               	return		;funcret
  3335  001F02                     __end_of_sortBattery:
  3336                           	opt stack 0
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           postinc0	equ	0xFEE
  3342                           wreg	equ	0xFE8
  3343                           postdec1	equ	0xFE5
  3344                           fsr1l	equ	0xFE1
  3345                           status	equ	0xFD8
  3346                           
  3347 ;; *************** function _digitalWrite *****************
  3348 ;; Defined at:
  3349 ;;		line 53 in file "iopin.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;  pin             2    0[BANK0 ] PTR int 
  3352 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
  3353 ;;		 -> conveyorServo(4), cylinderMotor(4), 
  3354 ;;  val             2    2[BANK0 ] int 
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;  p               2    7[BANK0 ] int 
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3366 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;Total ram usage:        9 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    6
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_main
  3377 ;;		_sortBattery
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text2
  3382  00449A                     __ptext2:
  3383                           	opt stack 0
  3384  00449A                     _digitalWrite:
  3385                           	opt stack 23
  3386                           
  3387                           ;iopin.c: 54: if(pin){
  3388                           
  3389                           ;incstack = 0
  3390  00449A  0100               	movlb	0	; () banked
  3391  00449C  5180               	movf	digitalWrite@pin& (0+255),w,b
  3392  00449E  0100               	movlb	0	; () banked
  3393  0044A0  1181               	iorwf	(digitalWrite@pin+1)& (0+255),w,b
  3394  0044A2  B4D8               	btfsc	status,2,c
  3395  0044A4  0012               	return	
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;iopin.c: 55: int p = 1 << pin[1];
  3399  0044A6  0100               	movlb	0	; () banked
  3400  0044A8  EE20 F002          	lfsr	2,2
  3401  0044AC  5180               	movf	digitalWrite@pin& (0+255),w,b
  3402  0044AE  26D9               	addwf	fsr2l,f,c
  3403  0044B0  5181               	movf	(digitalWrite@pin+1)& (0+255),w,b
  3404  0044B2  22DA               	addwfc	fsr2h,f,c
  3405  0044B4  50DF               	movf	indf2,w,c
  3406  0044B6  0100               	movlb	0	; () banked
  3407  0044B8  6F84               	movwf	??_digitalWrite& (0+255),b
  3408  0044BA  0E01               	movlw	1
  3409  0044BC  0100               	movlb	0	; () banked
  3410  0044BE  6F85               	movwf	(??_digitalWrite+1)& (0+255),b
  3411  0044C0  0E00               	movlw	0
  3412  0044C2  0100               	movlb	0	; () banked
  3413  0044C4  6F86               	movwf	(??_digitalWrite+2)& (0+255),b
  3414  0044C6  0100               	movlb	0	; () banked
  3415  0044C8  2B84               	incf	??_digitalWrite& (0+255),f,b
  3416  0044CA  D004               	goto	u6474
  3417  0044CC                     u6475:
  3418  0044CC  90D8               	bcf	status,0,c
  3419  0044CE  0100               	movlb	0	; () banked
  3420  0044D0  3785               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  3421  0044D2  3786               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  3422  0044D4                     u6474:
  3423  0044D4  0100               	movlb	0	; () banked
  3424  0044D6  2F84               	decfsz	??_digitalWrite& (0+255),f,b
  3425  0044D8  D7F9               	goto	u6475
  3426  0044DA  C085  F087         	movff	??_digitalWrite+1,digitalWrite@p
  3427  0044DE  C086  F088         	movff	??_digitalWrite+2,digitalWrite@p+1
  3428                           
  3429                           ;iopin.c: 56: if(val == 0){
  3430  0044E2  0100               	movlb	0	; () banked
  3431  0044E4  5182               	movf	digitalWrite@val& (0+255),w,b
  3432  0044E6  0100               	movlb	0	; () banked
  3433  0044E8  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3434  0044EA  A4D8               	btfss	status,2,c
  3435  0044EC  D03C               	goto	l5940
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;iopin.c: 57: p ^= 0xff;
  3439  0044EE  0EFF               	movlw	255
  3440  0044F0  0100               	movlb	0	; () banked
  3441  0044F2  1B87               	xorwf	digitalWrite@p& (0+255),f,b
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;iopin.c: 58: }
  3445                           ;iopin.c: 60: switch(pin[0]){
  3446  0044F4  D038               	goto	l5940
  3447  0044F6                     l5916:
  3448                           
  3449                           ; BSR set to: 0
  3450  0044F6  0100               	movlb	0	; () banked
  3451  0044F8  0582               	decf	digitalWrite@val& (0+255),w,b
  3452  0044FA  0100               	movlb	0	; () banked
  3453  0044FC  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3454  0044FE  A4D8               	btfss	status,2,c
  3455  004500  D004               	goto	l5920
  3456                           
  3457                           ; BSR set to: 0
  3458  004502  0100               	movlb	0	; () banked
  3459  004504  5187               	movf	digitalWrite@p& (0+255),w,b
  3460  004506  1289               	iorwf	3977,f,c	;volatile
  3461  004508  0012               	return	
  3462  00450A                     l5920:
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;iopin.c: 62: else LATA &= p;
  3466  00450A  0100               	movlb	0	; () banked
  3467  00450C  5187               	movf	digitalWrite@p& (0+255),w,b
  3468  00450E  1689               	andwf	3977,f,c	;volatile
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;iopin.c: 63: break;
  3472  004510  0012               	return	
  3473  004512                     l5922:
  3474                           
  3475                           ; BSR set to: 0
  3476  004512  0100               	movlb	0	; () banked
  3477  004514  0582               	decf	digitalWrite@val& (0+255),w,b
  3478  004516  0100               	movlb	0	; () banked
  3479  004518  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3480  00451A  A4D8               	btfss	status,2,c
  3481  00451C  D004               	goto	l5926
  3482                           
  3483                           ; BSR set to: 0
  3484  00451E  0100               	movlb	0	; () banked
  3485  004520  5187               	movf	digitalWrite@p& (0+255),w,b
  3486  004522  128A               	iorwf	3978,f,c	;volatile
  3487  004524  0012               	return	
  3488  004526                     l5926:
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;iopin.c: 65: else LATB &= p;
  3492  004526  0100               	movlb	0	; () banked
  3493  004528  5187               	movf	digitalWrite@p& (0+255),w,b
  3494  00452A  168A               	andwf	3978,f,c	;volatile
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;iopin.c: 66: break;
  3498  00452C  0012               	return	
  3499  00452E                     l5928:
  3500                           
  3501                           ; BSR set to: 0
  3502  00452E  0100               	movlb	0	; () banked
  3503  004530  0582               	decf	digitalWrite@val& (0+255),w,b
  3504  004532  0100               	movlb	0	; () banked
  3505  004534  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3506  004536  A4D8               	btfss	status,2,c
  3507  004538  D004               	goto	l5932
  3508                           
  3509                           ; BSR set to: 0
  3510  00453A  0100               	movlb	0	; () banked
  3511  00453C  5187               	movf	digitalWrite@p& (0+255),w,b
  3512  00453E  128B               	iorwf	3979,f,c	;volatile
  3513  004540  0012               	return	
  3514  004542                     l5932:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;iopin.c: 68: else LATC &= p;
  3518  004542  0100               	movlb	0	; () banked
  3519  004544  5187               	movf	digitalWrite@p& (0+255),w,b
  3520  004546  168B               	andwf	3979,f,c	;volatile
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;iopin.c: 69: break;
  3524  004548  0012               	return	
  3525  00454A                     l5934:
  3526                           
  3527                           ; BSR set to: 0
  3528  00454A  0100               	movlb	0	; () banked
  3529  00454C  0582               	decf	digitalWrite@val& (0+255),w,b
  3530  00454E  0100               	movlb	0	; () banked
  3531  004550  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3532  004552  A4D8               	btfss	status,2,c
  3533  004554  D004               	goto	l5938
  3534                           
  3535                           ; BSR set to: 0
  3536  004556  0100               	movlb	0	; () banked
  3537  004558  5187               	movf	digitalWrite@p& (0+255),w,b
  3538  00455A  128C               	iorwf	3980,f,c	;volatile
  3539  00455C  0012               	return	
  3540  00455E                     l5938:
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;iopin.c: 71: else LATD &= p;
  3544  00455E  0100               	movlb	0	; () banked
  3545  004560  5187               	movf	digitalWrite@p& (0+255),w,b
  3546  004562  168C               	andwf	3980,f,c	;volatile
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;iopin.c: 72: }
  3550  004564  0012               	return	
  3551  004566                     l5940:
  3552                           
  3553                           ; BSR set to: 0
  3554  004566  C080  FFD9         	movff	digitalWrite@pin,fsr2l
  3555  00456A  C081  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3556  00456E  CFDE F084          	movff	postinc2,??_digitalWrite
  3557  004572  CFDD F085          	movff	postdec2,??_digitalWrite+1
  3558                           
  3559                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3560                           ; Switch size 1, requested type "space"
  3561                           ; Number of cases is 1, Range of values is 0 to 0
  3562                           ; switch strategies available:
  3563                           ; Name         Instructions Cycles
  3564                           ; simple_byte            4     3 (average)
  3565                           ;	Chosen strategy is simple_byte
  3566  004576  0100               	movlb	0	; () banked
  3567  004578  5185               	movf	(??_digitalWrite+1)& (0+255),w,b
  3568  00457A  0A00               	xorlw	0	; case 0
  3569  00457C  A4D8               	btfss	status,2,c
  3570  00457E  0012               	return	
  3571                           
  3572                           ; BSR set to: 0
  3573                           ; Switch size 1, requested type "space"
  3574                           ; Number of cases is 4, Range of values is 0 to 3
  3575                           ; switch strategies available:
  3576                           ; Name         Instructions Cycles
  3577                           ; simple_byte           13     7 (average)
  3578                           ;	Chosen strategy is simple_byte
  3579  004580  0100               	movlb	0	; () banked
  3580  004582  5184               	movf	??_digitalWrite& (0+255),w,b
  3581  004584  0A00               	xorlw	0	; case 0
  3582  004586  B4D8               	btfsc	status,2,c
  3583  004588  D7B6               	goto	l5916
  3584  00458A  0A01               	xorlw	1	; case 1
  3585  00458C  B4D8               	btfsc	status,2,c
  3586  00458E  D7C1               	goto	l5922
  3587  004590  0A03               	xorlw	3	; case 2
  3588  004592  B4D8               	btfsc	status,2,c
  3589  004594  D7CC               	goto	l5928
  3590  004596  0A01               	xorlw	1	; case 3
  3591  004598  A4D8               	btfss	status,2,c
  3592                           
  3593                           ; BSR set to: 0
  3594  00459A  0012               	return	
  3595  00459C  D7D6               	goto	l5934
  3596  00459E                     __end_of_digitalWrite:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           postinc0	equ	0xFEE
  3603                           wreg	equ	0xFE8
  3604                           postdec1	equ	0xFE5
  3605                           fsr1l	equ	0xFE1
  3606                           indf2	equ	0xFDF
  3607                           postinc2	equ	0xFDE
  3608                           postdec2	equ	0xFDD
  3609                           fsr2h	equ	0xFDA
  3610                           fsr2l	equ	0xFD9
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function _digitalRead *****************
  3614 ;; Defined at:
  3615 ;;		line 43 in file "iopin.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  pin             2    0[BANK0 ] PTR int 
  3618 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;		None
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  2    0[BANK0 ] int 
  3623 ;; Registers used:
  3624 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3630 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;Total ram usage:        4 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    6
  3637 ;; This function calls:
  3638 ;;		Nothing
  3639 ;; This function is called by:
  3640 ;;		_main
  3641 ;;		_sortBattery
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text3
  3646  003F16                     __ptext3:
  3647                           	opt stack 0
  3648  003F16                     _digitalRead:
  3649                           	opt stack 23
  3650                           
  3651                           ;iopin.c: 44: switch(pin[0]){
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;incstack = 0
  3655  003F16  D078               	goto	l5966
  3656  003F18                     l5948:
  3657  003F18  0100               	movlb	0	; () banked
  3658  003F1A  EE20 F002          	lfsr	2,2
  3659  003F1E  5180               	movf	digitalRead@pin& (0+255),w,b
  3660  003F20  26D9               	addwf	fsr2l,f,c
  3661  003F22  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  3662  003F24  22DA               	addwfc	fsr2h,f,c
  3663  003F26  50DF               	movf	indf2,w,c
  3664  003F28  0100               	movlb	0	; () banked
  3665  003F2A  6F82               	movwf	??_digitalRead& (0+255),b
  3666  003F2C  CF80 F083          	movff	3968,??_digitalRead+1	;volatile
  3667  003F30  0100               	movlb	0	; () banked
  3668  003F32  2B82               	incf	??_digitalRead& (0+255),f,b
  3669  003F34  D003               	goto	u6534
  3670  003F36                     u6535:
  3671  003F36  0100               	movlb	0	; () banked
  3672  003F38  90D8               	bcf	status,0,c
  3673  003F3A  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  3674  003F3C                     u6534:
  3675  003F3C  0100               	movlb	0	; () banked
  3676  003F3E  2F82               	decfsz	??_digitalRead& (0+255),f,b
  3677  003F40  D7FA               	goto	u6535
  3678  003F42  0E01               	movlw	1
  3679  003F44  0100               	movlb	0	; () banked
  3680  003F46  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  3681  003F48  0100               	movlb	0	; () banked
  3682  003F4A  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  3683  003F4C  0100               	movlb	0	; () banked
  3684  003F4E  6F80               	movwf	?_digitalRead& (0+255),b
  3685  003F50  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  3686                           
  3687                           ; BSR set to: 0
  3688  003F52  0012               	return	
  3689  003F54                     l5952:
  3690                           
  3691                           ; BSR set to: 0
  3692  003F54  0100               	movlb	0	; () banked
  3693  003F56  EE20 F002          	lfsr	2,2
  3694  003F5A  5180               	movf	digitalRead@pin& (0+255),w,b
  3695  003F5C  26D9               	addwf	fsr2l,f,c
  3696  003F5E  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  3697  003F60  22DA               	addwfc	fsr2h,f,c
  3698  003F62  50DF               	movf	indf2,w,c
  3699  003F64  0100               	movlb	0	; () banked
  3700  003F66  6F82               	movwf	??_digitalRead& (0+255),b
  3701  003F68  CF81 F083          	movff	3969,??_digitalRead+1	;volatile
  3702  003F6C  0100               	movlb	0	; () banked
  3703  003F6E  2B82               	incf	??_digitalRead& (0+255),f,b
  3704  003F70  D003               	goto	u6544
  3705  003F72                     u6545:
  3706  003F72  0100               	movlb	0	; () banked
  3707  003F74  90D8               	bcf	status,0,c
  3708  003F76  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  3709  003F78                     u6544:
  3710  003F78  0100               	movlb	0	; () banked
  3711  003F7A  2F82               	decfsz	??_digitalRead& (0+255),f,b
  3712  003F7C  D7FA               	goto	u6545
  3713  003F7E  0E01               	movlw	1
  3714  003F80  0100               	movlb	0	; () banked
  3715  003F82  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  3716  003F84  0100               	movlb	0	; () banked
  3717  003F86  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  3718  003F88  0100               	movlb	0	; () banked
  3719  003F8A  6F80               	movwf	?_digitalRead& (0+255),b
  3720  003F8C  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  3721                           
  3722                           ; BSR set to: 0
  3723  003F8E  0012               	return	
  3724  003F90                     l5956:
  3725                           
  3726                           ; BSR set to: 0
  3727  003F90  0100               	movlb	0	; () banked
  3728  003F92  EE20 F002          	lfsr	2,2
  3729  003F96  5180               	movf	digitalRead@pin& (0+255),w,b
  3730  003F98  26D9               	addwf	fsr2l,f,c
  3731  003F9A  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  3732  003F9C  22DA               	addwfc	fsr2h,f,c
  3733  003F9E  50DF               	movf	indf2,w,c
  3734  003FA0  0100               	movlb	0	; () banked
  3735  003FA2  6F82               	movwf	??_digitalRead& (0+255),b
  3736  003FA4  CF82 F083          	movff	3970,??_digitalRead+1	;volatile
  3737  003FA8  0100               	movlb	0	; () banked
  3738  003FAA  2B82               	incf	??_digitalRead& (0+255),f,b
  3739  003FAC  D003               	goto	u6554
  3740  003FAE                     u6555:
  3741  003FAE  0100               	movlb	0	; () banked
  3742  003FB0  90D8               	bcf	status,0,c
  3743  003FB2  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  3744  003FB4                     u6554:
  3745  003FB4  0100               	movlb	0	; () banked
  3746  003FB6  2F82               	decfsz	??_digitalRead& (0+255),f,b
  3747  003FB8  D7FA               	goto	u6555
  3748  003FBA  0E01               	movlw	1
  3749  003FBC  0100               	movlb	0	; () banked
  3750  003FBE  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  3751  003FC0  0100               	movlb	0	; () banked
  3752  003FC2  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  3753  003FC4  0100               	movlb	0	; () banked
  3754  003FC6  6F80               	movwf	?_digitalRead& (0+255),b
  3755  003FC8  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  3756                           
  3757                           ; BSR set to: 0
  3758  003FCA  0012               	return	
  3759  003FCC                     l5960:
  3760                           
  3761                           ; BSR set to: 0
  3762  003FCC  0100               	movlb	0	; () banked
  3763  003FCE  EE20 F002          	lfsr	2,2
  3764  003FD2  5180               	movf	digitalRead@pin& (0+255),w,b
  3765  003FD4  26D9               	addwf	fsr2l,f,c
  3766  003FD6  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  3767  003FD8  22DA               	addwfc	fsr2h,f,c
  3768  003FDA  50DF               	movf	indf2,w,c
  3769  003FDC  0100               	movlb	0	; () banked
  3770  003FDE  6F82               	movwf	??_digitalRead& (0+255),b
  3771  003FE0  CF83 F083          	movff	3971,??_digitalRead+1	;volatile
  3772  003FE4  0100               	movlb	0	; () banked
  3773  003FE6  2B82               	incf	??_digitalRead& (0+255),f,b
  3774  003FE8  D003               	goto	u6564
  3775  003FEA                     u6565:
  3776  003FEA  0100               	movlb	0	; () banked
  3777  003FEC  90D8               	bcf	status,0,c
  3778  003FEE  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  3779  003FF0                     u6564:
  3780  003FF0  0100               	movlb	0	; () banked
  3781  003FF2  2F82               	decfsz	??_digitalRead& (0+255),f,b
  3782  003FF4  D7FA               	goto	u6565
  3783  003FF6  0E01               	movlw	1
  3784  003FF8  0100               	movlb	0	; () banked
  3785  003FFA  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  3786  003FFC  0100               	movlb	0	; () banked
  3787  003FFE  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  3788  004000  0100               	movlb	0	; () banked
  3789  004002  6F80               	movwf	?_digitalRead& (0+255),b
  3790  004004  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  3791                           
  3792                           ; BSR set to: 0
  3793  004006  0012               	return	
  3794  004008                     l5966:
  3795  004008  C080  FFD9         	movff	digitalRead@pin,fsr2l
  3796  00400C  C081  FFDA         	movff	digitalRead@pin+1,fsr2h
  3797  004010  CFDE F082          	movff	postinc2,??_digitalRead
  3798  004014  CFDD F083          	movff	postdec2,??_digitalRead+1
  3799                           
  3800                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3801                           ; Switch size 1, requested type "space"
  3802                           ; Number of cases is 1, Range of values is 0 to 0
  3803                           ; switch strategies available:
  3804                           ; Name         Instructions Cycles
  3805                           ; simple_byte            4     3 (average)
  3806                           ;	Chosen strategy is simple_byte
  3807  004018  0100               	movlb	0	; () banked
  3808  00401A  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  3809  00401C  0A00               	xorlw	0	; case 0
  3810  00401E  A4D8               	btfss	status,2,c
  3811  004020  D00E               	goto	l323
  3812                           
  3813                           ; BSR set to: 0
  3814                           ; Switch size 1, requested type "space"
  3815                           ; Number of cases is 4, Range of values is 0 to 3
  3816                           ; switch strategies available:
  3817                           ; Name         Instructions Cycles
  3818                           ; simple_byte           13     7 (average)
  3819                           ;	Chosen strategy is simple_byte
  3820  004022  0100               	movlb	0	; () banked
  3821  004024  5182               	movf	??_digitalRead& (0+255),w,b
  3822  004026  0A00               	xorlw	0	; case 0
  3823  004028  B4D8               	btfsc	status,2,c
  3824  00402A  D776               	goto	l5948
  3825  00402C  0A01               	xorlw	1	; case 1
  3826  00402E  B4D8               	btfsc	status,2,c
  3827  004030  D791               	goto	l5952
  3828  004032  0A03               	xorlw	3	; case 2
  3829  004034  B4D8               	btfsc	status,2,c
  3830  004036  D7AC               	goto	l5956
  3831  004038  0A01               	xorlw	1	; case 3
  3832  00403A  B4D8               	btfsc	status,2,c
  3833  00403C  D7C7               	goto	l5960
  3834  00403E                     l323:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;iopin.c: 50: return -1;
  3838  00403E  0100               	movlb	0	; () banked
  3839  004040  6980               	setf	?_digitalRead& (0+255),b
  3840  004042  6981               	setf	(?_digitalRead+1)& (0+255),b
  3841                           
  3842                           ; BSR set to: 0
  3843  004044  0012               	return		;funcret
  3844  004046                     __end_of_digitalRead:
  3845                           	opt stack 0
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           postinc0	equ	0xFEE
  3851                           wreg	equ	0xFE8
  3852                           postdec1	equ	0xFE5
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function _analogRead *****************
  3862 ;; Defined at:
  3863 ;;		line 90 in file "iopin.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  channel         2    0[BANK0 ] int 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;		None
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  4    0[BANK0 ] long 
  3870 ;; Registers used:
  3871 ;;		wreg, status,2, status,0
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3877 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;Total ram usage:        6 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    6
  3884 ;; This function calls:
  3885 ;;		Nothing
  3886 ;; This function is called by:
  3887 ;;		_sortBattery
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text4
  3892  00569C                     __ptext4:
  3893                           	opt stack 0
  3894  00569C                     _analogRead:
  3895                           	opt stack 23
  3896                           
  3897                           ;iopin.c: 91: ADCON0 = channel<<2;
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;incstack = 0
  3901  00569C  0100               	movlb	0	; () banked
  3902  00569E  4580               	rlncf	analogRead@channel& (0+255),w,b
  3903  0056A0  46E8               	rlncf	wreg,f,c
  3904  0056A2  0BFC               	andlw	252
  3905  0056A4  6EC2               	movwf	4034,c	;volatile
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3909  0056A6  80C2               	bsf	4034,0,c	;volatile
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3913  0056A8  82C2               	bsf	4034,1,c	;volatile
  3914  0056AA                     l348:
  3915  0056AA  B2C2               	btfsc	4034,1,c	;volatile
  3916  0056AC  D7FE               	goto	l348
  3917                           
  3918                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3919  0056AE  50C3               	movf	4035,w,c	;volatile
  3920  0056B0  CFC4 F084          	movff	4036,??_analogRead	;volatile
  3921  0056B4  0100               	movlb	0	; () banked
  3922  0056B6  6B85               	clrf	(??_analogRead+1)& (0+255),b
  3923  0056B8  C084  F085         	movff	??_analogRead,??_analogRead+1
  3924  0056BC  0100               	movlb	0	; () banked
  3925  0056BE  6B84               	clrf	??_analogRead& (0+255),b
  3926  0056C0  0100               	movlb	0	; () banked
  3927  0056C2  2784               	addwf	??_analogRead& (0+255),f,b
  3928  0056C4  0E00               	movlw	0
  3929  0056C6  2385               	addwfc	(??_analogRead+1)& (0+255),f,b
  3930  0056C8  C084  F080         	movff	??_analogRead,?_analogRead
  3931  0056CC  C085  F081         	movff	??_analogRead+1,?_analogRead+1
  3932  0056D0  0100               	movlb	0	; () banked
  3933  0056D2  0E00               	movlw	0
  3934  0056D4  BF81               	btfsc	(?_analogRead+1)& (0+255),7,b
  3935  0056D6  0EFF               	movlw	-1
  3936  0056D8  6F82               	movwf	(?_analogRead+2)& (0+255),b
  3937  0056DA  6F83               	movwf	(?_analogRead+3)& (0+255),b
  3938  0056DC  0012               	return	
  3939  0056DE                     __end_of_analogRead:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           postdec1	equ	0xFE5
  3948                           fsr1l	equ	0xFE1
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function _showInterface *****************
  3957 ;; Defined at:
  3958 ;;		line 16 in file "interface.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;		None
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;  key             1  102[BANK0 ] unsigned char 
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  1    wreg      void 
  3965 ;; Registers used:
  3966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;Total ram usage:        1 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:   12
  3979 ;; This function calls:
  3980 ;;		_dateTime
  3981 ;;		_mainMenu
  3982 ;;		_readKeypad
  3983 ;;		_runMenu
  3984 ;;		_runSelect
  3985 ;;		_runStats
  3986 ;;		_runTime
  3987 ;; This function is called by:
  3988 ;;		_main
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           	psect	text5
  3993  00459E                     __ptext5:
  3994                           	opt stack 0
  3995  00459E                     _showInterface:
  3996                           	opt stack 18
  3997  00459E                     
  3998                           ;interface.c: 23: dateTime();
  3999  00459E  ECB8  F02C         	call	_dateTime	;wreg free
  4000  0045A2                     l6444:
  4001  0045A2  EC19  F02C         	call	_readKeypad	;wreg free
  4002  0045A6  0A41               	xorlw	65
  4003  0045A8  A4D8               	btfss	status,2,c
  4004  0045AA  D7FB               	goto	l6444
  4005  0045AC                     l6446:
  4006                           
  4007                           ;interface.c: 28: mainMenu();
  4008  0045AC  ECA5  F02C         	call	_mainMenu	;wreg free
  4009  0045B0                     l6448:
  4010  0045B0  EC19  F02C         	call	_readKeypad	;wreg free
  4011  0045B4  0100               	movlb	0	; () banked
  4012  0045B6  6FE6               	movwf	showInterface@key& (0+255),b
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;interface.c: 32: while(key != 'B' && key != 'C' && key != '*');
  4016  0045B8  0E42               	movlw	66
  4017  0045BA  0100               	movlb	0	; () banked
  4018  0045BC  19E6               	xorwf	showInterface@key& (0+255),w,b
  4019  0045BE  B4D8               	btfsc	status,2,c
  4020  0045C0  D00A               	goto	l6456
  4021                           
  4022                           ; BSR set to: 0
  4023  0045C2  0E43               	movlw	67
  4024  0045C4  0100               	movlb	0	; () banked
  4025  0045C6  19E6               	xorwf	showInterface@key& (0+255),w,b
  4026  0045C8  B4D8               	btfsc	status,2,c
  4027  0045CA  D005               	goto	l6456
  4028                           
  4029                           ; BSR set to: 0
  4030  0045CC  0E2A               	movlw	42
  4031  0045CE  0100               	movlb	0	; () banked
  4032  0045D0  19E6               	xorwf	showInterface@key& (0+255),w,b
  4033  0045D2  A4D8               	btfss	status,2,c
  4034  0045D4  D7ED               	goto	l6448
  4035  0045D6                     l6456:
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;interface.c: 34: if(key == 'C'){
  4039  0045D6  0E43               	movlw	67
  4040  0045D8  0100               	movlb	0	; () banked
  4041  0045DA  19E6               	xorwf	showInterface@key& (0+255),w,b
  4042  0045DC  A4D8               	btfss	status,2,c
  4043  0045DE  D056               	goto	l6500
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;interface.c: 36: runSelect();
  4047  0045E0  EC92  F02C         	call	_runSelect	;wreg free
  4048  0045E4                     l6460:
  4049  0045E4  EC19  F02C         	call	_readKeypad	;wreg free
  4050  0045E8  0100               	movlb	0	; () banked
  4051  0045EA  6FE6               	movwf	showInterface@key& (0+255),b
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;interface.c: 42: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '
      +                          *');
  4055  0045EC  0E31               	movlw	49
  4056  0045EE  0100               	movlb	0	; () banked
  4057  0045F0  19E6               	xorwf	showInterface@key& (0+255),w,b
  4058  0045F2  B4D8               	btfsc	status,2,c
  4059  0045F4  D014               	goto	l6472
  4060                           
  4061                           ; BSR set to: 0
  4062  0045F6  0E32               	movlw	50
  4063  0045F8  0100               	movlb	0	; () banked
  4064  0045FA  19E6               	xorwf	showInterface@key& (0+255),w,b
  4065  0045FC  B4D8               	btfsc	status,2,c
  4066  0045FE  D00F               	goto	l6472
  4067                           
  4068                           ; BSR set to: 0
  4069  004600  0E33               	movlw	51
  4070  004602  0100               	movlb	0	; () banked
  4071  004604  19E6               	xorwf	showInterface@key& (0+255),w,b
  4072  004606  B4D8               	btfsc	status,2,c
  4073  004608  D00A               	goto	l6472
  4074                           
  4075                           ; BSR set to: 0
  4076  00460A  0E34               	movlw	52
  4077  00460C  0100               	movlb	0	; () banked
  4078  00460E  19E6               	xorwf	showInterface@key& (0+255),w,b
  4079  004610  B4D8               	btfsc	status,2,c
  4080  004612  D005               	goto	l6472
  4081                           
  4082                           ; BSR set to: 0
  4083  004614  0E2A               	movlw	42
  4084  004616  0100               	movlb	0	; () banked
  4085  004618  19E6               	xorwf	showInterface@key& (0+255),w,b
  4086  00461A  A4D8               	btfss	status,2,c
  4087  00461C  D7E3               	goto	l6460
  4088  00461E                     l6472:
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;interface.c: 44: if(key == '*')continue;
  4092  00461E  0E2A               	movlw	42
  4093  004620  0100               	movlb	0	; () banked
  4094  004622  19E6               	xorwf	showInterface@key& (0+255),w,b
  4095  004624  B4D8               	btfsc	status,2,c
  4096  004626  D7C2               	goto	l6446
  4097  004628                     l6476:
  4098                           
  4099                           ;interface.c: 50: runMenu(key);
  4100  004628  0100               	movlb	0	; () banked
  4101  00462A  51E6               	movf	showInterface@key& (0+255),w,b
  4102  00462C  ECE8  F02B         	call	_runMenu
  4103  004630                     l6478:
  4104  004630  EC19  F02C         	call	_readKeypad	;wreg free
  4105  004634  0100               	movlb	0	; () banked
  4106  004636  6FE6               	movwf	showInterface@key& (0+255),b
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;interface.c: 54: while(key != 'A' && key != 'B' && key != '*');
  4110  004638  0E41               	movlw	65
  4111  00463A  0100               	movlb	0	; () banked
  4112  00463C  19E6               	xorwf	showInterface@key& (0+255),w,b
  4113  00463E  B4D8               	btfsc	status,2,c
  4114  004640  D00A               	goto	l6486
  4115                           
  4116                           ; BSR set to: 0
  4117  004642  0E42               	movlw	66
  4118  004644  0100               	movlb	0	; () banked
  4119  004646  19E6               	xorwf	showInterface@key& (0+255),w,b
  4120  004648  B4D8               	btfsc	status,2,c
  4121  00464A  D005               	goto	l6486
  4122                           
  4123                           ; BSR set to: 0
  4124  00464C  0E2A               	movlw	42
  4125  00464E  0100               	movlb	0	; () banked
  4126  004650  19E6               	xorwf	showInterface@key& (0+255),w,b
  4127  004652  A4D8               	btfss	status,2,c
  4128  004654  D7ED               	goto	l6478
  4129  004656                     l6486:
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;interface.c: 56: if(key == 'A'){
  4133  004656  0E41               	movlw	65
  4134  004658  0100               	movlb	0	; () banked
  4135  00465A  19E6               	xorwf	showInterface@key& (0+255),w,b
  4136  00465C  A4D8               	btfss	status,2,c
  4137  00465E  D003               	goto	l6490
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;interface.c: 58: runTime();
  4141  004660  EC6C  F02C         	call	_runTime	;wreg free
  4142                           
  4143                           ;interface.c: 60: }
  4144  004664  D00D               	goto	l6498
  4145  004666                     l6490:
  4146                           
  4147                           ;interface.c: 61: else if(key == 'B'){
  4148  004666  0E42               	movlw	66
  4149  004668  0100               	movlb	0	; () banked
  4150  00466A  19E6               	xorwf	showInterface@key& (0+255),w,b
  4151  00466C  A4D8               	btfss	status,2,c
  4152  00466E  D003               	goto	l6494
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;interface.c: 63: runStats();
  4156  004670  EC7F  F02C         	call	_runStats	;wreg free
  4157                           
  4158                           ;interface.c: 65: }
  4159  004674  D005               	goto	l6498
  4160  004676                     l6494:
  4161                           
  4162                           ;interface.c: 66: else if(key == '*')break;
  4163  004676  0E2A               	movlw	42
  4164  004678  0100               	movlb	0	; () banked
  4165  00467A  19E6               	xorwf	showInterface@key& (0+255),w,b
  4166  00467C  B4D8               	btfsc	status,2,c
  4167  00467E  D796               	goto	l6446
  4168  004680                     l6498:
  4169  004680  EC19  F02C         	call	_readKeypad	;wreg free
  4170  004684  0A2A               	xorlw	42
  4171  004686  B4D8               	btfsc	status,2,c
  4172  004688  D7CF               	goto	l6476
  4173  00468A  D7FA               	goto	l6498
  4174  00468C                     l6500:
  4175                           
  4176                           ;interface.c: 72: else if(key == 'B'){
  4177  00468C  0E42               	movlw	66
  4178  00468E  0100               	movlb	0	; () banked
  4179  004690  19E6               	xorwf	showInterface@key& (0+255),w,b
  4180  004692  B4D8               	btfsc	status,2,c
  4181  004694  0012               	return	
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;interface.c: 75: else if(key == '*')
  4185                           
  4186                           ; BSR set to: 0
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;interface.c: 74: }
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;interface.c: 73: return;
  4193  004696  0E2A               	movlw	42
  4194  004698  0100               	movlb	0	; () banked
  4195  00469A  19E6               	xorwf	showInterface@key& (0+255),w,b
  4196  00469C  B4D8               	btfsc	status,2,c
  4197  00469E  D77F               	goto	l6442
  4198  0046A0  D785               	goto	l6446
  4199  0046A2                     __end_of_showInterface:
  4200                           	opt stack 0
  4201                           tblptru	equ	0xFF8
  4202                           tblptrh	equ	0xFF7
  4203                           tblptrl	equ	0xFF6
  4204                           tablat	equ	0xFF5
  4205                           postinc0	equ	0xFEE
  4206                           wreg	equ	0xFE8
  4207                           postdec1	equ	0xFE5
  4208                           fsr1l	equ	0xFE1
  4209                           indf2	equ	0xFDF
  4210                           postinc2	equ	0xFDE
  4211                           postdec2	equ	0xFDD
  4212                           fsr2h	equ	0xFDA
  4213                           fsr2l	equ	0xFD9
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _runTime *****************
  4217 ;; Defined at:
  4218 ;;		line 117 in file "interface.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;		None
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;		None
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  1    wreg      void 
  4225 ;; Registers used:
  4226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;Total ram usage:        0 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:   11
  4239 ;; This function calls:
  4240 ;;		_lcdClear
  4241 ;;		_printf
  4242 ;; This function is called by:
  4243 ;;		_showInterface
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text6
  4248  0058D8                     __ptext6:
  4249                           	opt stack 0
  4250  0058D8                     _runTime:
  4251                           	opt stack 18
  4252                           
  4253                           ;interface.c: 118: lcdClear();
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;incstack = 0
  4257  0058D8  EC30  F02D         	call	_lcdClear	;wreg free
  4258                           
  4259                           ;interface.c: 119: printf("time: nnn sec   \n");
  4260  0058DC  0E20               	movlw	low STR_15
  4261  0058DE  0100               	movlb	0	; () banked
  4262  0058E0  6FD5               	movwf	printf@f& (0+255),b
  4263  0058E2  0EFF               	movlw	high STR_15
  4264  0058E4  0100               	movlb	0	; () banked
  4265  0058E6  6FD6               	movwf	(printf@f+1)& (0+255),b
  4266  0058E8  EC09  F000         	call	_printf	;wreg free
  4267                           
  4268                           ;interface.c: 120: printf("              *>");
  4269  0058EC  0E55               	movlw	low STR_16
  4270  0058EE  0100               	movlb	0	; () banked
  4271  0058F0  6FD5               	movwf	printf@f& (0+255),b
  4272  0058F2  0EFF               	movlw	high STR_16
  4273  0058F4  0100               	movlb	0	; () banked
  4274  0058F6  6FD6               	movwf	(printf@f+1)& (0+255),b
  4275  0058F8  EC09  F000         	call	_printf	;wreg free
  4276  0058FC  0012               	return		;funcret
  4277  0058FE                     __end_of_runTime:
  4278                           	opt stack 0
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           postinc0	equ	0xFEE
  4284                           wreg	equ	0xFE8
  4285                           postdec1	equ	0xFE5
  4286                           fsr1l	equ	0xFE1
  4287                           indf2	equ	0xFDF
  4288                           postinc2	equ	0xFDE
  4289                           postdec2	equ	0xFDD
  4290                           fsr2h	equ	0xFDA
  4291                           fsr2l	equ	0xFD9
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function _runStats *****************
  4295 ;; Defined at:
  4296 ;;		line 123 in file "interface.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;		None
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;		None
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1    wreg      void 
  4303 ;; Registers used:
  4304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;Total ram usage:        0 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:   11
  4317 ;; This function calls:
  4318 ;;		_lcdClear
  4319 ;;		_printf
  4320 ;; This function is called by:
  4321 ;;		_showInterface
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text7
  4326  0058FE                     __ptext7:
  4327                           	opt stack 0
  4328  0058FE                     _runStats:
  4329                           	opt stack 18
  4330                           
  4331                           ;interface.c: 124: lcdClear();
  4332                           
  4333                           ;incstack = 0
  4334  0058FE  EC30  F02D         	call	_lcdClear	;wreg free
  4335                           
  4336                           ;interface.c: 125: printf("[AA,9V,C,other] \n");
  4337  005902  0E32               	movlw	low STR_17
  4338  005904  0100               	movlb	0	; () banked
  4339  005906  6FD5               	movwf	printf@f& (0+255),b
  4340  005908  0EFF               	movlw	high STR_17
  4341  00590A  0100               	movlb	0	; () banked
  4342  00590C  6FD6               	movwf	(printf@f+1)& (0+255),b
  4343  00590E  EC09  F000         	call	_printf	;wreg free
  4344                           
  4345                           ;interface.c: 126: printf("[nn,n,n,nn]   *>");
  4346  005912  0E99               	movlw	low STR_18
  4347  005914  0100               	movlb	0	; () banked
  4348  005916  6FD5               	movwf	printf@f& (0+255),b
  4349  005918  0EFF               	movlw	high STR_18
  4350  00591A  0100               	movlb	0	; () banked
  4351  00591C  6FD6               	movwf	(printf@f+1)& (0+255),b
  4352  00591E  EC09  F000         	call	_printf	;wreg free
  4353  005922  0012               	return		;funcret
  4354  005924                     __end_of_runStats:
  4355                           	opt stack 0
  4356                           tblptru	equ	0xFF8
  4357                           tblptrh	equ	0xFF7
  4358                           tblptrl	equ	0xFF6
  4359                           tablat	equ	0xFF5
  4360                           postinc0	equ	0xFEE
  4361                           wreg	equ	0xFE8
  4362                           postdec1	equ	0xFE5
  4363                           fsr1l	equ	0xFE1
  4364                           indf2	equ	0xFDF
  4365                           postinc2	equ	0xFDE
  4366                           postdec2	equ	0xFDD
  4367                           fsr2h	equ	0xFDA
  4368                           fsr2l	equ	0xFD9
  4369                           status	equ	0xFD8
  4370                           
  4371 ;; *************** function _runSelect *****************
  4372 ;; Defined at:
  4373 ;;		line 105 in file "interface.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;		None
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;		None
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  1    wreg      void 
  4380 ;; Registers used:
  4381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;Total ram usage:        0 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:   11
  4394 ;; This function calls:
  4395 ;;		_lcdClear
  4396 ;;		_printf
  4397 ;; This function is called by:
  4398 ;;		_showInterface
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text8
  4403  005924                     __ptext8:
  4404                           	opt stack 0
  4405  005924                     _runSelect:
  4406                           	opt stack 18
  4407                           
  4408                           ;interface.c: 106: lcdClear();
  4409                           
  4410                           ;incstack = 0
  4411  005924  EC30  F02D         	call	_lcdClear	;wreg free
  4412                           
  4413                           ;interface.c: 107: printf("select run:     \n");
  4414  005928  0E0E               	movlw	low STR_11
  4415  00592A  0100               	movlb	0	; () banked
  4416  00592C  6FD5               	movwf	printf@f& (0+255),b
  4417  00592E  0EFF               	movlw	high STR_11
  4418  005930  0100               	movlb	0	; () banked
  4419  005932  6FD6               	movwf	(printf@f+1)& (0+255),b
  4420  005934  EC09  F000         	call	_printf	;wreg free
  4421                           
  4422                           ;interface.c: 108: printf("[1,2,3,4]     *>");
  4423  005938  0E66               	movlw	low STR_12
  4424  00593A  0100               	movlb	0	; () banked
  4425  00593C  6FD5               	movwf	printf@f& (0+255),b
  4426  00593E  0EFF               	movlw	high STR_12
  4427  005940  0100               	movlb	0	; () banked
  4428  005942  6FD6               	movwf	(printf@f+1)& (0+255),b
  4429  005944  EC09  F000         	call	_printf	;wreg free
  4430  005948  0012               	return		;funcret
  4431  00594A                     __end_of_runSelect:
  4432                           	opt stack 0
  4433                           tblptru	equ	0xFF8
  4434                           tblptrh	equ	0xFF7
  4435                           tblptrl	equ	0xFF6
  4436                           tablat	equ	0xFF5
  4437                           postinc0	equ	0xFEE
  4438                           wreg	equ	0xFE8
  4439                           postdec1	equ	0xFE5
  4440                           fsr1l	equ	0xFE1
  4441                           indf2	equ	0xFDF
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           fsr2h	equ	0xFDA
  4445                           fsr2l	equ	0xFD9
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function _runMenu *****************
  4449 ;; Defined at:
  4450 ;;		line 111 in file "interface.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  key             1    wreg     unsigned char 
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  key             1  101[BANK0 ] unsigned char 
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      void 
  4457 ;; Registers used:
  4458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;Total ram usage:        1 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:   11
  4471 ;; This function calls:
  4472 ;;		_lcdClear
  4473 ;;		_printf
  4474 ;; This function is called by:
  4475 ;;		_showInterface
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text9
  4480  0057D0                     __ptext9:
  4481                           	opt stack 0
  4482  0057D0                     _runMenu:
  4483                           	opt stack 18
  4484                           
  4485                           ;incstack = 0
  4486                           ;runMenu@key stored from wreg
  4487  0057D0  0100               	movlb	0	; () banked
  4488  0057D2  6FE5               	movwf	runMenu@key& (0+255),b
  4489                           
  4490                           ;interface.c: 112: lcdClear();
  4491  0057D4  EC30  F02D         	call	_lcdClear	;wreg free
  4492                           
  4493                           ;interface.c: 113: printf("%c) time  <A     \n",key);
  4494  0057D8  0ED7               	movlw	low STR_13
  4495  0057DA  0100               	movlb	0	; () banked
  4496  0057DC  6FD5               	movwf	printf@f& (0+255),b
  4497  0057DE  0EFE               	movlw	high STR_13
  4498  0057E0  0100               	movlb	0	; () banked
  4499  0057E2  6FD6               	movwf	(printf@f+1)& (0+255),b
  4500  0057E4  C0E5  F0D7         	movff	runMenu@key,?_printf+2
  4501  0057E8  0100               	movlb	0	; () banked
  4502  0057EA  6BD8               	clrf	(?_printf+3)& (0+255),b
  4503  0057EC  EC09  F000         	call	_printf	;wreg free
  4504                           
  4505                           ;interface.c: 114: printf( "   stats <B   *>");
  4506  0057F0  0E88               	movlw	low STR_14
  4507  0057F2  0100               	movlb	0	; () banked
  4508  0057F4  6FD5               	movwf	printf@f& (0+255),b
  4509  0057F6  0EFF               	movlw	high STR_14
  4510  0057F8  0100               	movlb	0	; () banked
  4511  0057FA  6FD6               	movwf	(printf@f+1)& (0+255),b
  4512  0057FC  EC09  F000         	call	_printf	;wreg free
  4513  005800  0012               	return		;funcret
  4514  005802                     __end_of_runMenu:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           postdec1	equ	0xFE5
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function _mainMenu *****************
  4532 ;; Defined at:
  4533 ;;		line 99 in file "interface.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;		None
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      void 
  4540 ;; Registers used:
  4541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;Total ram usage:        0 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:   11
  4554 ;; This function calls:
  4555 ;;		_lcdClear
  4556 ;;		_printf
  4557 ;; This function is called by:
  4558 ;;		_showInterface
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text10
  4563  00594A                     __ptext10:
  4564                           	opt stack 0
  4565  00594A                     _mainMenu:
  4566                           	opt stack 18
  4567                           
  4568                           ;interface.c: 100: lcdClear();
  4569                           
  4570                           ;incstack = 0
  4571  00594A  EC30  F02D         	call	_lcdClear	;wreg free
  4572                           
  4573                           ;interface.c: 101: printf("start   <B      \n");
  4574  00594E  0EEA               	movlw	low STR_9
  4575  005950  0100               	movlb	0	; () banked
  4576  005952  6FD5               	movwf	printf@f& (0+255),b
  4577  005954  0EFE               	movlw	high STR_9
  4578  005956  0100               	movlb	0	; () banked
  4579  005958  6FD6               	movwf	(printf@f+1)& (0+255),b
  4580  00595A  EC09  F000         	call	_printf	;wreg free
  4581                           
  4582                           ;interface.c: 102: printf("history <C    *>");
  4583  00595E  0E77               	movlw	low STR_10
  4584  005960  0100               	movlb	0	; () banked
  4585  005962  6FD5               	movwf	printf@f& (0+255),b
  4586  005964  0EFF               	movlw	high STR_10
  4587  005966  0100               	movlb	0	; () banked
  4588  005968  6FD6               	movwf	(printf@f+1)& (0+255),b
  4589  00596A  EC09  F000         	call	_printf	;wreg free
  4590  00596E  0012               	return		;funcret
  4591  005970                     __end_of_mainMenu:
  4592                           	opt stack 0
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           postinc0	equ	0xFEE
  4598                           wreg	equ	0xFE8
  4599                           postdec1	equ	0xFE5
  4600                           fsr1l	equ	0xFE1
  4601                           indf2	equ	0xFDF
  4602                           postinc2	equ	0xFDE
  4603                           postdec2	equ	0xFDD
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function _dateTime *****************
  4609 ;; Defined at:
  4610 ;;		line 84 in file "interface.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;Total ram usage:        0 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:   11
  4631 ;; This function calls:
  4632 ;;		_lcdClear
  4633 ;;		_printf
  4634 ;; This function is called by:
  4635 ;;		_showInterface
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text11
  4640  005970                     __ptext11:
  4641                           	opt stack 0
  4642  005970                     _dateTime:
  4643                           	opt stack 18
  4644                           
  4645                           ;interface.c: 94: lcdClear();
  4646                           
  4647                           ;incstack = 0
  4648  005970  EC30  F02D         	call	_lcdClear	;wreg free
  4649                           
  4650                           ;interface.c: 95: printf("  hh:mm:ss      \n");
  4651  005974  0EFC               	movlw	low STR_7
  4652  005976  0100               	movlb	0	; () banked
  4653  005978  6FD5               	movwf	printf@f& (0+255),b
  4654  00597A  0EFE               	movlw	high STR_7
  4655  00597C  0100               	movlb	0	; () banked
  4656  00597E  6FD6               	movwf	(printf@f+1)& (0+255),b
  4657  005980  EC09  F000         	call	_printf	;wreg free
  4658                           
  4659                           ;interface.c: 96: printf("  mm:dd:yy    A>");
  4660  005984  0EAA               	movlw	low STR_8
  4661  005986  0100               	movlb	0	; () banked
  4662  005988  6FD5               	movwf	printf@f& (0+255),b
  4663  00598A  0EFF               	movlw	high STR_8
  4664  00598C  0100               	movlb	0	; () banked
  4665  00598E  6FD6               	movwf	(printf@f+1)& (0+255),b
  4666  005990  EC09  F000         	call	_printf	;wreg free
  4667  005994  0012               	return		;funcret
  4668  005996                     __end_of_dateTime:
  4669                           	opt stack 0
  4670                           tblptru	equ	0xFF8
  4671                           tblptrh	equ	0xFF7
  4672                           tblptrl	equ	0xFF6
  4673                           tablat	equ	0xFF5
  4674                           postinc0	equ	0xFEE
  4675                           wreg	equ	0xFE8
  4676                           postdec1	equ	0xFE5
  4677                           fsr1l	equ	0xFE1
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function _pinSetup *****************
  4686 ;; Defined at:
  4687 ;;		line 261 in file "main.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;		None
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;		None
  4692 ;; Return value:  Size  Location     Type
  4693 ;;                  1    wreg      void 
  4694 ;; Registers used:
  4695 ;;		wreg, status,2, status,0
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;Total ram usage:        0 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    6
  4708 ;; This function calls:
  4709 ;;		Nothing
  4710 ;; This function is called by:
  4711 ;;		_main
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text12
  4716  00571E                     __ptext12:
  4717                           	opt stack 0
  4718  00571E                     _pinSetup:
  4719                           	opt stack 24
  4720                           
  4721                           ;main.c: 267: TRISA = 0xFF;
  4722                           
  4723                           ;incstack = 0
  4724  00571E  6892               	setf	3986,c	;volatile
  4725                           
  4726                           ;main.c: 268: TRISB = 0xFF;
  4727  005720  6893               	setf	3987,c	;volatile
  4728                           
  4729                           ;main.c: 269: TRISC = 0b11000000;
  4730  005722  0EC0               	movlw	192
  4731  005724  6E94               	movwf	3988,c	;volatile
  4732                           
  4733                           ;main.c: 270: TRISD = 0x00;
  4734  005726  0E00               	movlw	0
  4735  005728  6E95               	movwf	3989,c	;volatile
  4736                           
  4737                           ;main.c: 271: TRISE = 0x00;
  4738  00572A  0E00               	movlw	0
  4739  00572C  6E96               	movwf	3990,c	;volatile
  4740                           
  4741                           ;main.c: 273: LATA = 0x00;
  4742  00572E  0E00               	movlw	0
  4743  005730  6E89               	movwf	3977,c	;volatile
  4744                           
  4745                           ;main.c: 274: LATB = 0x00;
  4746  005732  0E00               	movlw	0
  4747  005734  6E8A               	movwf	3978,c	;volatile
  4748                           
  4749                           ;main.c: 275: LATC = 0x00;
  4750  005736  0E00               	movlw	0
  4751  005738  6E8B               	movwf	3979,c	;volatile
  4752                           
  4753                           ;main.c: 276: LATD = 0x00;
  4754  00573A  0E00               	movlw	0
  4755  00573C  6E8C               	movwf	3980,c	;volatile
  4756                           
  4757                           ;main.c: 277: LATE = 0x00;
  4758  00573E  0E00               	movlw	0
  4759  005740  6E8D               	movwf	3981,c	;volatile
  4760                           
  4761                           ;main.c: 279: ADCON0 = 0x00;
  4762  005742  0E00               	movlw	0
  4763  005744  6EC2               	movwf	4034,c	;volatile
  4764                           
  4765                           ;main.c: 281: ADCON1 |= 0x0B;
  4766  005746  0E0B               	movlw	11
  4767  005748  12C1               	iorwf	4033,f,c	;volatile
  4768                           
  4769                           ;main.c: 286: ADCON2 = 0;
  4770  00574A  0E00               	movlw	0
  4771  00574C  6EC0               	movwf	4032,c	;volatile
  4772                           
  4773                           ;main.c: 287: ADCON2 |= 0b010;
  4774  00574E  82C0               	bsf	4032,1,c	;volatile
  4775                           
  4776                           ;main.c: 288: ADCON2 |= 0b110<<3;
  4777  005750  0E30               	movlw	48
  4778  005752  12C0               	iorwf	4032,f,c	;volatile
  4779                           
  4780                           ;main.c: 289: ADCON2 |= 1<<7;
  4781  005754  8EC0               	bsf	4032,7,c	;volatile
  4782                           
  4783                           ;main.c: 293: INT0IE = 1;
  4784  005756  88F2               	bsf	intcon,4,c	;volatile
  4785                           
  4786                           ;main.c: 294: (INTCONbits.GIE = 1);
  4787  005758  8EF2               	bsf	intcon,7,c	;volatile
  4788  00575A  0012               	return		;funcret
  4789  00575C                     __end_of_pinSetup:
  4790                           	opt stack 0
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           intcon	equ	0xFF2
  4796                           postinc0	equ	0xFEE
  4797                           wreg	equ	0xFE8
  4798                           postdec1	equ	0xFE5
  4799                           fsr1l	equ	0xFE1
  4800                           indf2	equ	0xFDF
  4801                           postinc2	equ	0xFDE
  4802                           postdec2	equ	0xFDD
  4803                           fsr2h	equ	0xFDA
  4804                           fsr2l	equ	0xFD9
  4805                           status	equ	0xFD8
  4806                           
  4807 ;; *************** function _pause *****************
  4808 ;; Defined at:
  4809 ;;		line 329 in file "main.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;  message         2  101[BANK0 ] PTR unsigned char 
  4812 ;;		 -> STR_3(9), 
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;                  1    wreg      void 
  4817 ;; Registers used:
  4818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4824 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;Total ram usage:        2 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:   11
  4831 ;; This function calls:
  4832 ;;		_lcdClear
  4833 ;;		_printf
  4834 ;;		_readKeypad
  4835 ;; This function is called by:
  4836 ;;		_main
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text13
  4841  005A42                     __ptext13:
  4842                           	opt stack 0
  4843  005A42                     _pause:
  4844                           	opt stack 19
  4845                           
  4846                           ;main.c: 330: lcdClear();
  4847                           
  4848                           ;incstack = 0
  4849  005A42  EC30  F02D         	call	_lcdClear	;wreg free
  4850                           
  4851                           ;main.c: 331: printf(message);
  4852  005A46  C0E5  F0D5         	movff	pause@message,printf@f
  4853  005A4A  C0E6  F0D6         	movff	pause@message+1,printf@f+1
  4854  005A4E  EC09  F000         	call	_printf	;wreg free
  4855                           
  4856                           ;main.c: 332: readKeypad();
  4857  005A52  EC19  F02C         	call	_readKeypad	;wreg free
  4858  005A56  0012               	return		;funcret
  4859  005A58                     __end_of_pause:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           intcon	equ	0xFF2
  4866                           postinc0	equ	0xFEE
  4867                           wreg	equ	0xFE8
  4868                           postdec1	equ	0xFE5
  4869                           fsr1l	equ	0xFE1
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           fsr2h	equ	0xFDA
  4874                           fsr2l	equ	0xFD9
  4875                           status	equ	0xFD8
  4876                           
  4877 ;; *************** function _readKeypad *****************
  4878 ;; Defined at:
  4879 ;;		line 36 in file "keypad.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;		None
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  key             1    0[BANK0 ] unsigned char 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  1    wreg      unsigned char 
  4886 ;; Registers used:
  4887 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;Total ram usage:        1 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:    6
  4900 ;; This function calls:
  4901 ;;		Nothing
  4902 ;; This function is called by:
  4903 ;;		_sortBattery
  4904 ;;		_pause
  4905 ;;		_showInterface
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           	psect	text14
  4910  005832                     __ptext14:
  4911                           	opt stack 0
  4912  005832                     _readKeypad:
  4913                           	opt stack 23
  4914  005832                     l250:
  4915  005832  A281               	btfss	3969,1,c	;volatile
  4916  005834  D7FE               	goto	l250
  4917                           
  4918                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4919  005836  3881               	swapf	3969,w,c	;volatile
  4920  005838  0B0F               	andlw	15
  4921  00583A  0B0F               	andlw	15
  4922  00583C  0100               	movlb	0	; () banked
  4923  00583E  6F80               	movwf	readKeypad@key& (0+255),b
  4924  005840                     l253:
  4925  005840  B281               	btfsc	3969,1,c	;volatile
  4926  005842  D7FE               	goto	l253
  4927                           
  4928                           ;keypad.c: 40: return keys[key];
  4929  005844  0100               	movlb	0	; () banked
  4930  005846  5180               	movf	readKeypad@key& (0+255),w,b
  4931  005848  0D01               	mullw	1
  4932  00584A  0EBF               	movlw	low _keys
  4933  00584C  24F3               	addwf	prodl,w,c
  4934  00584E  6EF6               	movwf	tblptrl,c
  4935  005850  0EFE               	movlw	high _keys
  4936  005852  20F4               	addwfc	prodh,w,c
  4937  005854  6EF7               	movwf	tblptrh,c
  4938  005856                     	if	0	;There are less than 3 active tblptr bytes
  4939  005856                     	endif
  4940  005856  0008               	tblrd		*
  4941  005858  50F5               	movf	tablat,w,c
  4942  00585A  0012               	return	
  4943  00585C                     __end_of_readKeypad:
  4944                           	opt stack 0
  4945                           tblptru	equ	0xFF8
  4946                           tblptrh	equ	0xFF7
  4947                           tblptrl	equ	0xFF6
  4948                           tablat	equ	0xFF5
  4949                           prodh	equ	0xFF4
  4950                           prodl	equ	0xFF3
  4951                           intcon	equ	0xFF2
  4952                           postinc0	equ	0xFEE
  4953                           wreg	equ	0xFE8
  4954                           postdec1	equ	0xFE5
  4955                           fsr1l	equ	0xFE1
  4956                           indf2	equ	0xFDF
  4957                           postinc2	equ	0xFDE
  4958                           postdec2	equ	0xFDD
  4959                           fsr2h	equ	0xFDA
  4960                           fsr2l	equ	0xFD9
  4961                           status	equ	0xFD8
  4962                           
  4963 ;; *************** function _printf *****************
  4964 ;; Defined at:
  4965 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;  f               2   85[BANK0 ] PTR const unsigned char 
  4968 ;;		 -> STR_18(17), STR_17(18), STR_16(17), STR_15(18), 
  4969 ;;		 -> STR_14(17), STR_13(19), STR_12(17), STR_11(18), 
  4970 ;;		 -> STR_10(17), STR_9(18), STR_8(17), STR_7(18), 
  4971 ;;		 -> STR_6(8), STR_5(11), STR_4(15), STR_3(9), 
  4972 ;;		 -> STR_2(17), STR_1(8), 
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  idx             1    5[BANK1 ] unsigned char 
  4975 ;;  val             4   16[BANK1 ] unsigned long 
  4976 ;;  tmpval          4   10[BANK1 ] struct .
  4977 ;;  fval            3   20[BANK1 ] struct .
  4978 ;;  prec            2   27[BANK1 ] int 
  4979 ;;  flag            2   25[BANK1 ] unsigned short 
  4980 ;;  width           2   23[BANK1 ] int 
  4981 ;;  exp             2   14[BANK1 ] int 
  4982 ;;  ap              2    8[BANK1 ] PTR void [1]
  4983 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4984 ;;  len             2    6[BANK1 ] unsigned int 
  4985 ;;  cp              2    3[BANK1 ] PTR const unsigned char 
  4986 ;;		 -> printf@c(1), 
  4987 ;;  c               1   29[BANK1 ] char 
  4988 ;;  d               1    0        unsigned char 
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  2   85[BANK0 ] int 
  4991 ;; Registers used:
  4992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4998 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5000 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Totals:         0      16      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;Total ram usage:       46 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:   10
  5005 ;; This function calls:
  5006 ;;		___awdiv
  5007 ;;		___ftadd
  5008 ;;		___ftge
  5009 ;;		___ftmul
  5010 ;;		___ftneg
  5011 ;;		___ftsub
  5012 ;;		___fttol
  5013 ;;		___lldiv
  5014 ;;		___llmod
  5015 ;;		___lltoft
  5016 ;;		___wmul
  5017 ;;		__div_to_l_
  5018 ;;		__tdiv_to_l_
  5019 ;;		_fround
  5020 ;;		_isdigit
  5021 ;;		_putch
  5022 ;;		_scale
  5023 ;; This function is called by:
  5024 ;;		_main
  5025 ;;		_sortBattery
  5026 ;;		_pause
  5027 ;;		_dateTime
  5028 ;;		_mainMenu
  5029 ;;		_runSelect
  5030 ;;		_runMenu
  5031 ;;		_runTime
  5032 ;;		_runStats
  5033 ;;		_testFrequency
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           	psect	text15
  5038  000012                     __ptext15:
  5039                           	opt stack 0
  5040  000012                     _printf:
  5041                           	opt stack 19
  5042                           
  5043                           ;doprnt.c: 466: va_list ap;
  5044                           ;doprnt.c: 499: signed char c;
  5045                           ;doprnt.c: 501: int width;
  5046                           ;doprnt.c: 504: int prec;
  5047                           ;doprnt.c: 508: unsigned short flag;
  5048                           ;doprnt.c: 515: char d;
  5049                           ;doprnt.c: 516: double fval;
  5050                           ;doprnt.c: 517: int exp;
  5051                           ;doprnt.c: 523: union {
  5052                           ;doprnt.c: 524: unsigned long vd;
  5053                           ;doprnt.c: 525: double integ;
  5054                           ;doprnt.c: 526: } tmpval;
  5055                           ;doprnt.c: 528: unsigned long val;
  5056                           ;doprnt.c: 529: unsigned len;
  5057                           ;doprnt.c: 530: const char * cp;
  5058                           ;doprnt.c: 533: *ap = __va_start();
  5059                           
  5060                           ; BSR set to: 0
  5061                           ;incstack = 0
  5062  000012  0ED7               	movlw	low (?_printf+2)
  5063  000014  0101               	movlb	1	; () banked
  5064  000016  6F08               	movwf	printf@ap& (0+255),b
  5065  000018  0E00               	movlw	high (?_printf+2)
  5066  00001A  0101               	movlb	1	; () banked
  5067  00001C  6F09               	movwf	(printf@ap+1)& (0+255),b
  5068                           
  5069                           ;doprnt.c: 536: while(c = *f++) {
  5070  00001E  EF0E  F007         	goto	l5650
  5071  000022                     l5284:
  5072                           
  5073                           ; BSR set to: 1
  5074                           ;doprnt.c: 538: if(c != '%')
  5075  000022  0E25               	movlw	37
  5076  000024  0101               	movlb	1	; () banked
  5077  000026  191D               	xorwf	printf@c& (0+255),w,b
  5078  000028  B4D8               	btfsc	status,2,c
  5079  00002A  D006               	goto	l5288
  5080                           
  5081                           ; BSR set to: 1
  5082                           ;doprnt.c: 540: {
  5083                           ;doprnt.c: 541: (putch(c) );
  5084  00002C  0101               	movlb	1	; () banked
  5085  00002E  511D               	movf	printf@c& (0+255),w,b
  5086  000030  EC58  F02C         	call	_putch
  5087                           
  5088                           ;doprnt.c: 542: continue;
  5089  000034  EF0E  F007         	goto	l5650
  5090  000038                     l5288:
  5091                           
  5092                           ;doprnt.c: 543: }
  5093                           ;doprnt.c: 546: width = 0;
  5094  000038  0E00               	movlw	0
  5095  00003A  0101               	movlb	1	; () banked
  5096  00003C  6F18               	movwf	(printf@width+1)& (0+255),b
  5097  00003E  0E00               	movlw	0
  5098  000040  6F17               	movwf	printf@width& (0+255),b
  5099                           
  5100                           ;doprnt.c: 548: flag = 0;
  5101  000042  0E00               	movlw	0
  5102  000044  0101               	movlb	1	; () banked
  5103  000046  6F1A               	movwf	(printf@flag+1)& (0+255),b
  5104  000048  0E00               	movlw	0
  5105  00004A  6F19               	movwf	printf@flag& (0+255),b
  5106                           
  5107                           ; BSR set to: 1
  5108                           ;doprnt.c: 551: switch(*f) {
  5109                           
  5110                           ;doprnt.c: 550: for(;;) {
  5111  00004C  D005               	goto	l5294
  5112  00004E                     l5290:
  5113                           
  5114                           ;doprnt.c: 580: flag |= 0x04;
  5115  00004E  0101               	movlb	1	; () banked
  5116  000050  8519               	bsf	printf@flag& (0+255),2,b
  5117                           
  5118                           ;doprnt.c: 581: f++;
  5119  000052  0100               	movlb	0	; () banked
  5120  000054  4BD5               	infsnz	printf@f& (0+255),f,b
  5121  000056  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5122  000058                     l5294:
  5123  000058  C0D5  FFF6         	movff	printf@f,tblptrl
  5124  00005C  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5125  000060                     	if	0	;tblptru may be non-zero
  5126  000060                     	endif
  5127  000060                     	if	0	;tblptru may be non-zero
  5128  000060                     	endif
  5129  000060  0008               	tblrd		*
  5130  000062  50F5               	movf	tablat,w,c
  5131                           
  5132                           ; Switch size 1, requested type "space"
  5133                           ; Number of cases is 1, Range of values is 48 to 48
  5134                           ; switch strategies available:
  5135                           ; Name         Instructions Cycles
  5136                           ; simple_byte            4     3 (average)
  5137                           ;	Chosen strategy is simple_byte
  5138  000064  0A30               	xorlw	48	; case 48
  5139  000066  B4D8               	btfsc	status,2,c
  5140  000068  D7F2               	goto	l5290
  5141                           
  5142                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5143                           
  5144                           ;doprnt.c: 586: }
  5145                           
  5146                           ;doprnt.c: 585: break;
  5147  00006A  C0D5  FFF6         	movff	printf@f,tblptrl
  5148  00006E  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5149  000072                     	if	0	;tblptru may be non-zero
  5150  000072                     	endif
  5151  000072                     	if	0	;tblptru may be non-zero
  5152  000072                     	endif
  5153  000072  0008               	tblrd		*
  5154  000074  50F5               	movf	tablat,w,c
  5155  000076  EC2E  F02C         	call	_isdigit
  5156  00007A  A0D8               	btfss	status,0,c
  5157  00007C  D040               	goto	l5308
  5158                           
  5159                           ;doprnt.c: 598: width = 0;
  5160  00007E  0E00               	movlw	0
  5161  000080  0101               	movlb	1	; () banked
  5162  000082  6F18               	movwf	(printf@width+1)& (0+255),b
  5163  000084  0E00               	movlw	0
  5164  000086  6F17               	movwf	printf@width& (0+255),b
  5165  000088                     l5300:
  5166                           
  5167                           ;doprnt.c: 600: width *= 10;
  5168  000088  C117  F08E         	movff	printf@width,___wmul@multiplier
  5169  00008C  C118  F08F         	movff	printf@width+1,___wmul@multiplier+1
  5170  000090  0E00               	movlw	0
  5171  000092  0100               	movlb	0	; () banked
  5172  000094  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5173  000096  0E0A               	movlw	10
  5174  000098  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5175  00009A  ECCD  F02B         	call	___wmul	;wreg free
  5176  00009E  C08E  F117         	movff	?___wmul,printf@width
  5177  0000A2  C08F  F118         	movff	?___wmul+1,printf@width+1
  5178                           
  5179                           ;doprnt.c: 601: width += *f++ - '0';
  5180  0000A6  0ED0               	movlw	208
  5181  0000A8  0100               	movlb	0	; () banked
  5182  0000AA  6FDF               	movwf	??_printf& (0+255),b
  5183  0000AC  0EFF               	movlw	255
  5184  0000AE  0100               	movlb	0	; () banked
  5185  0000B0  6FE0               	movwf	(??_printf+1)& (0+255),b
  5186  0000B2  C0D5  FFF6         	movff	printf@f,tblptrl
  5187  0000B6  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5188  0000BA                     	if	0	;tblptru may be non-zero
  5189  0000BA                     	endif
  5190  0000BA                     	if	0	;tblptru may be non-zero
  5191  0000BA                     	endif
  5192  0000BA  0008               	tblrd		*
  5193  0000BC  50F5               	movf	tablat,w,c
  5194  0000BE  0100               	movlb	0	; () banked
  5195  0000C0  6FE1               	movwf	(??_printf+2)& (0+255),b
  5196  0000C2  6BE2               	clrf	(??_printf+3)& (0+255),b
  5197  0000C4  0100               	movlb	0	; () banked
  5198  0000C6  51DF               	movf	??_printf& (0+255),w,b
  5199  0000C8  0100               	movlb	0	; () banked
  5200  0000CA  27E1               	addwf	(??_printf+2)& (0+255),f,b
  5201  0000CC  0100               	movlb	0	; () banked
  5202  0000CE  51E0               	movf	(??_printf+1)& (0+255),w,b
  5203  0000D0  0100               	movlb	0	; () banked
  5204  0000D2  23E2               	addwfc	(??_printf+3)& (0+255),f,b
  5205  0000D4  0100               	movlb	0	; () banked
  5206  0000D6  51E1               	movf	(??_printf+2)& (0+255),w,b
  5207  0000D8  0101               	movlb	1	; () banked
  5208  0000DA  2717               	addwf	printf@width& (0+255),f,b
  5209  0000DC  0100               	movlb	0	; () banked
  5210  0000DE  51E2               	movf	(??_printf+3)& (0+255),w,b
  5211  0000E0  0101               	movlb	1	; () banked
  5212  0000E2  2318               	addwfc	(printf@width+1)& (0+255),f,b
  5213                           
  5214                           ; BSR set to: 1
  5215  0000E4  0100               	movlb	0	; () banked
  5216  0000E6  4BD5               	infsnz	printf@f& (0+255),f,b
  5217  0000E8  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5221  0000EA  C0D5  FFF6         	movff	printf@f,tblptrl
  5222  0000EE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5223  0000F2                     	if	0	;tblptru may be non-zero
  5224  0000F2                     	endif
  5225  0000F2                     	if	0	;tblptru may be non-zero
  5226  0000F2                     	endif
  5227  0000F2  0008               	tblrd		*
  5228  0000F4  50F5               	movf	tablat,w,c
  5229  0000F6  EC2E  F02C         	call	_isdigit
  5230  0000FA  B0D8               	btfsc	status,0,c
  5231  0000FC  D7C5               	goto	l5300
  5232  0000FE                     l5308:
  5233                           
  5234                           ;doprnt.c: 608: }
  5235                           ;doprnt.c: 611: if(*f == '.') {
  5236  0000FE  C0D5  FFF6         	movff	printf@f,tblptrl
  5237  000102  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5238  000106                     	if	0	;tblptru may be non-zero
  5239  000106                     	endif
  5240  000106                     	if	0	;tblptru may be non-zero
  5241  000106                     	endif
  5242  000106  0008               	tblrd		*
  5243  000108  50F5               	movf	tablat,w,c
  5244  00010A  0A2E               	xorlw	46
  5245  00010C  A4D8               	btfss	status,2,c
  5246  00010E  D039               	goto	l5320
  5247                           
  5248                           ;doprnt.c: 612: flag |= 0x4000;
  5249  000110  0101               	movlb	1	; () banked
  5250  000112  8D1A               	bsf	(printf@flag+1)& (0+255),6,b
  5251                           
  5252                           ;doprnt.c: 613: f++;
  5253  000114  0100               	movlb	0	; () banked
  5254  000116  4BD5               	infsnz	printf@f& (0+255),f,b
  5255  000118  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;doprnt.c: 620: {
  5259                           ;doprnt.c: 621: prec = 0;
  5260  00011A  0E00               	movlw	0
  5261  00011C  0101               	movlb	1	; () banked
  5262  00011E  6F1C               	movwf	(printf@prec+1)& (0+255),b
  5263  000120  0E00               	movlw	0
  5264  000122  6F1B               	movwf	printf@prec& (0+255),b
  5265                           
  5266                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5267  000124  D023               	goto	l5318
  5268  000126                     l5314:
  5269                           
  5270                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5271  000126  C11B  F08E         	movff	printf@prec,___wmul@multiplier
  5272  00012A  C11C  F08F         	movff	printf@prec+1,___wmul@multiplier+1
  5273  00012E  0E00               	movlw	0
  5274  000130  0100               	movlb	0	; () banked
  5275  000132  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5276  000134  0E0A               	movlw	10
  5277  000136  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5278  000138  ECCD  F02B         	call	___wmul	;wreg free
  5279  00013C  C0D5  FFF6         	movff	printf@f,tblptrl
  5280  000140  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5281  000144                     	if	0	;tblptru may be non-zero
  5282  000144                     	endif
  5283  000144                     	if	0	;tblptru may be non-zero
  5284  000144                     	endif
  5285  000144  0008               	tblrd		*
  5286  000146  50F5               	movf	tablat,w,c
  5287  000148  0100               	movlb	0	; () banked
  5288  00014A  278E               	addwf	?___wmul& (0+255),f,b
  5289  00014C  0E00               	movlw	0
  5290  00014E  0100               	movlb	0	; () banked
  5291  000150  238F               	addwfc	(?___wmul+1)& (0+255),f,b
  5292  000152  0ED0               	movlw	208
  5293  000154  0100               	movlb	0	; () banked
  5294  000156  258E               	addwf	?___wmul& (0+255),w,b
  5295  000158  0101               	movlb	1	; () banked
  5296  00015A  6F1B               	movwf	printf@prec& (0+255),b
  5297  00015C  0EFF               	movlw	255
  5298  00015E  0100               	movlb	0	; () banked
  5299  000160  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5300  000162  0101               	movlb	1	; () banked
  5301  000164  6F1C               	movwf	(printf@prec+1)& (0+255),b
  5302                           
  5303                           ; BSR set to: 1
  5304  000166  0100               	movlb	0	; () banked
  5305  000168  4BD5               	infsnz	printf@f& (0+255),f,b
  5306  00016A  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5307  00016C                     l5318:
  5308  00016C  C0D5  FFF6         	movff	printf@f,tblptrl
  5309  000170  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5310  000174                     	if	0	;tblptru may be non-zero
  5311  000174                     	endif
  5312  000174                     	if	0	;tblptru may be non-zero
  5313  000174                     	endif
  5314  000174  0008               	tblrd		*
  5315  000176  50F5               	movf	tablat,w,c
  5316  000178  EC2E  F02C         	call	_isdigit
  5317  00017C  A0D8               	btfss	status,0,c
  5318  00017E  D07D               	goto	l5362
  5319  000180  D7D2               	goto	l5314
  5320  000182                     l5320:
  5321                           
  5322                           ;doprnt.c: 626: prec = 0;
  5323  000182  0E00               	movlw	0
  5324  000184  0101               	movlb	1	; () banked
  5325  000186  6F1C               	movwf	(printf@prec+1)& (0+255),b
  5326  000188  0E00               	movlw	0
  5327  00018A  6F1B               	movwf	printf@prec& (0+255),b
  5328                           
  5329                           ; BSR set to: 1
  5330                           ;doprnt.c: 628: flag |= 0x1000;
  5331  00018C  0101               	movlb	1	; () banked
  5332  00018E  891A               	bsf	(printf@flag+1)& (0+255),4,b
  5333                           
  5334                           ; BSR set to: 1
  5335                           ;doprnt.c: 635: switch(c = *f++) {
  5336                           
  5337                           ;doprnt.c: 630: }
  5338                           ;doprnt.c: 633: loop:
  5339                           
  5340                           ; BSR set to: 1
  5341  000190  D074               	goto	l5362
  5342  000192                     l5324:
  5343                           
  5344                           ; BSR set to: 1
  5345                           ;doprnt.c: 643: flag |= 0x10;
  5346  000192  0101               	movlb	1	; () banked
  5347  000194  8919               	bsf	printf@flag& (0+255),4,b
  5348                           
  5349                           ;doprnt.c: 644: goto loop;
  5350  000196  D071               	goto	l5362
  5351  000198                     l5326:
  5352                           
  5353                           ; BSR set to: 1
  5354                           ;doprnt.c: 663: flag |= 0x400;
  5355  000198  0101               	movlb	1	; () banked
  5356  00019A  851A               	bsf	(printf@flag+1)& (0+255),2,b
  5357                           
  5358                           ; BSR set to: 1
  5359                           ;doprnt.c: 698: case 'i':
  5360                           ;doprnt.c: 699: break;
  5361                           
  5362                           ; BSR set to: 1
  5363                           
  5364                           ;doprnt.c: 697: case 'd':
  5365                           
  5366                           ;doprnt.c: 664: break;
  5367  00019C  D090               	goto	l5364
  5368  00019E                     l5328:
  5369                           
  5370                           ; BSR set to: 1
  5371                           ;doprnt.c: 721: flag |= 0x80;
  5372  00019E  0101               	movlb	1	; () banked
  5373  0001A0  8F19               	bsf	printf@flag& (0+255),7,b
  5374                           
  5375                           ;doprnt.c: 723: break;
  5376  0001A2  D08D               	goto	l5364
  5377  0001A4                     l5330:
  5378                           
  5379                           ; BSR set to: 1
  5380                           ;doprnt.c: 753: if(prec && prec < len)
  5381  0001A4  0101               	movlb	1	; () banked
  5382  0001A6  511B               	movf	printf@prec& (0+255),w,b
  5383  0001A8  0101               	movlb	1	; () banked
  5384  0001AA  111C               	iorwf	(printf@prec+1)& (0+255),w,b
  5385  0001AC  B4D8               	btfsc	status,2,c
  5386  0001AE  D00E               	goto	l5336
  5387                           
  5388                           ; BSR set to: 1
  5389  0001B0  0101               	movlb	1	; () banked
  5390  0001B2  5106               	movf	printf@len& (0+255),w,b
  5391  0001B4  0101               	movlb	1	; () banked
  5392  0001B6  5D1B               	subwf	printf@prec& (0+255),w,b
  5393  0001B8  0101               	movlb	1	; () banked
  5394  0001BA  5107               	movf	(printf@len+1)& (0+255),w,b
  5395  0001BC  0101               	movlb	1	; () banked
  5396  0001BE  591C               	subwfb	(printf@prec+1)& (0+255),w,b
  5397  0001C0  B0D8               	btfsc	status,0,c
  5398  0001C2  D004               	goto	l5336
  5399                           
  5400                           ; BSR set to: 1
  5401                           ;doprnt.c: 754: len = prec;
  5402  0001C4  C11B  F106         	movff	printf@prec,printf@len
  5403  0001C8  C11C  F107         	movff	printf@prec+1,printf@len+1
  5404  0001CC                     l5336:
  5405                           
  5406                           ; BSR set to: 1
  5407                           ;doprnt.c: 757: if(width > len)
  5408  0001CC  0101               	movlb	1	; () banked
  5409  0001CE  5117               	movf	printf@width& (0+255),w,b
  5410  0001D0  0101               	movlb	1	; () banked
  5411  0001D2  5D06               	subwf	printf@len& (0+255),w,b
  5412  0001D4  0101               	movlb	1	; () banked
  5413  0001D6  5118               	movf	(printf@width+1)& (0+255),w,b
  5414  0001D8  0101               	movlb	1	; () banked
  5415  0001DA  5907               	subwfb	(printf@len+1)& (0+255),w,b
  5416  0001DC  B0D8               	btfsc	status,0,c
  5417  0001DE  D009               	goto	l5340
  5418                           
  5419                           ; BSR set to: 1
  5420                           ;doprnt.c: 758: width -= len;
  5421  0001E0  0101               	movlb	1	; () banked
  5422  0001E2  5106               	movf	printf@len& (0+255),w,b
  5423  0001E4  0101               	movlb	1	; () banked
  5424  0001E6  5F17               	subwf	printf@width& (0+255),f,b
  5425  0001E8  0101               	movlb	1	; () banked
  5426  0001EA  5107               	movf	(printf@len+1)& (0+255),w,b
  5427  0001EC  0101               	movlb	1	; () banked
  5428  0001EE  5B18               	subwfb	(printf@width+1)& (0+255),f,b
  5429  0001F0  D009               	goto	l5344
  5430  0001F2                     l5340:
  5431                           
  5432                           ; BSR set to: 1
  5433                           ;doprnt.c: 759: else
  5434                           ;doprnt.c: 760: width = 0;
  5435  0001F2  0E00               	movlw	0
  5436  0001F4  0101               	movlb	1	; () banked
  5437  0001F6  6F18               	movwf	(printf@width+1)& (0+255),b
  5438  0001F8  0E00               	movlw	0
  5439  0001FA  6F17               	movwf	printf@width& (0+255),b
  5440                           
  5441                           ; BSR set to: 1
  5442                           ;doprnt.c: 764: while(width--)
  5443  0001FC  D003               	goto	l5344
  5444  0001FE                     l5342:
  5445                           
  5446                           ; BSR set to: 1
  5447                           ;doprnt.c: 765: (putch(' ') );
  5448  0001FE  0E20               	movlw	32
  5449  000200  EC58  F02C         	call	_putch
  5450  000204                     l5344:
  5451  000204  0101               	movlb	1	; () banked
  5452  000206  0717               	decf	printf@width& (0+255),f,b
  5453  000208  A0D8               	btfss	status,0,c
  5454  00020A  0718               	decf	(printf@width+1)& (0+255),f,b
  5455  00020C  0101               	movlb	1	; () banked
  5456  00020E  2917               	incf	printf@width& (0+255),w,b
  5457  000210  E1F6               	bnz	l5342
  5458  000212  0101               	movlb	1	; () banked
  5459  000214  2918               	incf	(printf@width+1)& (0+255),w,b
  5460  000216  B4D8               	btfsc	status,2,c
  5461  000218  D00B               	goto	l5350
  5462  00021A  D7F1               	goto	l5342
  5463  00021C                     l5346:
  5464                           
  5465                           ; BSR set to: 1
  5466                           ;doprnt.c: 768: (putch(*cp++) );
  5467  00021C  C103  FFD9         	movff	printf@cp,fsr2l
  5468  000220  C104  FFDA         	movff	printf@cp+1,fsr2h
  5469  000224  50DF               	movf	indf2,w,c
  5470  000226  EC58  F02C         	call	_putch
  5471  00022A  0101               	movlb	1	; () banked
  5472  00022C  4B03               	infsnz	printf@cp& (0+255),f,b
  5473  00022E  2B04               	incf	(printf@cp+1)& (0+255),f,b
  5474  000230                     l5350:
  5475                           
  5476                           ; BSR set to: 1
  5477  000230  0101               	movlb	1	; () banked
  5478  000232  0706               	decf	printf@len& (0+255),f,b
  5479  000234  A0D8               	btfss	status,0,c
  5480  000236  0707               	decf	(printf@len+1)& (0+255),f,b
  5481  000238  0101               	movlb	1	; () banked
  5482  00023A  2906               	incf	printf@len& (0+255),w,b
  5483  00023C  E1EF               	bnz	l5346
  5484  00023E  0101               	movlb	1	; () banked
  5485  000240  2907               	incf	(printf@len+1)& (0+255),w,b
  5486  000242  B4D8               	btfsc	status,2,c
  5487  000244  EF0E  F007         	goto	l5650
  5488  000248  D7E9               	goto	l5346
  5489  00024A                     l5352:
  5490                           
  5491                           ; BSR set to: 1
  5492                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5493  00024A  C108  FFD9         	movff	printf@ap,fsr2l
  5494  00024E  C109  FFDA         	movff	printf@ap+1,fsr2h
  5495  000252  50DF               	movf	indf2,w,c
  5496  000254  0101               	movlb	1	; () banked
  5497  000256  6F1D               	movwf	printf@c& (0+255),b
  5498                           
  5499                           ; BSR set to: 1
  5500  000258  0E02               	movlw	2
  5501  00025A  0101               	movlb	1	; () banked
  5502  00025C  2708               	addwf	printf@ap& (0+255),f,b
  5503  00025E  0E00               	movlw	0
  5504  000260  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  5505  000262                     l5356:
  5506                           
  5507                           ; BSR set to: 1
  5508                           ;doprnt.c: 805: cp = (char *)&c;
  5509  000262  0E1D               	movlw	low printf@c
  5510  000264  0101               	movlb	1	; () banked
  5511  000266  6F03               	movwf	printf@cp& (0+255),b
  5512  000268  0E01               	movlw	high printf@c
  5513  00026A  0101               	movlb	1	; () banked
  5514  00026C  6F04               	movwf	(printf@cp+1)& (0+255),b
  5515                           
  5516                           ; BSR set to: 1
  5517                           ;doprnt.c: 806: len = 1;
  5518  00026E  0E00               	movlw	0
  5519  000270  0101               	movlb	1	; () banked
  5520  000272  6F07               	movwf	(printf@len+1)& (0+255),b
  5521  000274  0E01               	movlw	1
  5522  000276  6F06               	movwf	printf@len& (0+255),b
  5523                           
  5524                           ;doprnt.c: 807: goto dostring;
  5525  000278  D795               	goto	l5330
  5526  00027A                     l5362:
  5527  00027A  C0D5  FFF6         	movff	printf@f,tblptrl
  5528  00027E  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5529  000282  0100               	movlb	0	; () banked
  5530  000284  4BD5               	infsnz	printf@f& (0+255),f,b
  5531  000286  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5532  000288                     	if	0	;tblptru may be non-zero
  5533  000288                     	endif
  5534  000288                     	if	0	;tblptru may be non-zero
  5535  000288                     	endif
  5536  000288  0008               	tblrd		*
  5537  00028A  CFF5 F11D          	movff	tablat,printf@c
  5538  00028E  0101               	movlb	1	; () banked
  5539  000290  511D               	movf	printf@c& (0+255),w,b
  5540                           
  5541                           ; Switch size 1, requested type "space"
  5542                           ; Number of cases is 7, Range of values is 0 to 120
  5543                           ; switch strategies available:
  5544                           ; Name         Instructions Cycles
  5545                           ; simple_byte           22    12 (average)
  5546                           ;	Chosen strategy is simple_byte
  5547  000292  0A00               	xorlw	0	; case 0
  5548  000294  B4D8               	btfsc	status,2,c
  5549  000296  0012               	return	
  5550  000298  0A63               	xorlw	99	; case 99
  5551  00029A  B4D8               	btfsc	status,2,c
  5552  00029C  D7D6               	goto	l5352
  5553  00029E  0A07               	xorlw	7	; case 100
  5554  0002A0  B4D8               	btfsc	status,2,c
  5555  0002A2  D00D               	goto	l5364
  5556  0002A4  0A02               	xorlw	2	; case 102
  5557  0002A6  B4D8               	btfsc	status,2,c
  5558  0002A8  D777               	goto	l5326
  5559  0002AA  0A0F               	xorlw	15	; case 105
  5560  0002AC  B4D8               	btfsc	status,2,c
  5561  0002AE  D007               	goto	l5364
  5562  0002B0  0A05               	xorlw	5	; case 108
  5563  0002B2  B4D8               	btfsc	status,2,c
  5564  0002B4  D76E               	goto	l5324
  5565  0002B6  0A14               	xorlw	20	; case 120
  5566  0002B8  B4D8               	btfsc	status,2,c
  5567  0002BA  D771               	goto	l5328
  5568  0002BC  D7D2               	goto	l5356
  5569  0002BE                     l5364:
  5570                           
  5571                           ; BSR set to: 1
  5572                           ;doprnt.c: 825: if(flag & (0x700)) {
  5573  0002BE  0E07               	movlw	7
  5574  0002C0  0101               	movlb	1	; () banked
  5575  0002C2  151A               	andwf	(printf@flag+1)& (0+255),w,b
  5576  0002C4  B4D8               	btfsc	status,2,c
  5577  0002C6  D37D               	goto	l729
  5578                           
  5579                           ; BSR set to: 1
  5580                           ;doprnt.c: 827: if(flag & 0x1000)
  5581  0002C8  0101               	movlb	1	; () banked
  5582  0002CA  A91A               	btfss	(printf@flag+1)& (0+255),4,b
  5583  0002CC  D005               	goto	l5370
  5584                           
  5585                           ; BSR set to: 1
  5586                           ;doprnt.c: 829: prec = 6;
  5587  0002CE  0E00               	movlw	0
  5588  0002D0  0101               	movlb	1	; () banked
  5589  0002D2  6F1C               	movwf	(printf@prec+1)& (0+255),b
  5590  0002D4  0E06               	movlw	6
  5591  0002D6  6F1B               	movwf	printf@prec& (0+255),b
  5592  0002D8                     l5370:
  5593                           
  5594                           ; BSR set to: 1
  5595                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5596  0002D8  C108  FFD9         	movff	printf@ap,fsr2l
  5597  0002DC  C109  FFDA         	movff	printf@ap+1,fsr2h
  5598  0002E0  CFDE F114          	movff	postinc2,printf@fval
  5599  0002E4  CFDE F115          	movff	postinc2,printf@fval+1
  5600  0002E8  CFDD F116          	movff	postdec2,printf@fval+2
  5601                           
  5602                           ; BSR set to: 1
  5603  0002EC  0E03               	movlw	3
  5604  0002EE  0101               	movlb	1	; () banked
  5605  0002F0  2708               	addwf	printf@ap& (0+255),f,b
  5606  0002F2  0E00               	movlw	0
  5607  0002F4  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  5608                           
  5609                           ; BSR set to: 1
  5610                           ;doprnt.c: 831: if(fval < 0.0) {
  5611  0002F6  0101               	movlb	1	; () banked
  5612  0002F8  AF16               	btfss	(printf@fval+2)& (0+255),7,b
  5613  0002FA  D011               	goto	l5380
  5614                           
  5615                           ; BSR set to: 1
  5616                           ;doprnt.c: 832: fval = -fval;
  5617  0002FC  C114  F080         	movff	printf@fval,___ftneg@f1
  5618  000300  C115  F081         	movff	printf@fval+1,___ftneg@f1+1
  5619  000304  C116  F082         	movff	printf@fval+2,___ftneg@f1+2
  5620  000308  EC01  F02C         	call	___ftneg	;wreg free
  5621  00030C  C080  F114         	movff	?___ftneg,printf@fval
  5622  000310  C081  F115         	movff	?___ftneg+1,printf@fval+1
  5623  000314  C082  F116         	movff	?___ftneg+2,printf@fval+2
  5624                           
  5625                           ;doprnt.c: 833: flag |= 0x03;
  5626  000318  0E03               	movlw	3
  5627  00031A  0101               	movlb	1	; () banked
  5628  00031C  1319               	iorwf	printf@flag& (0+255),f,b
  5629  00031E                     l5380:
  5630                           
  5631                           ; BSR set to: 1
  5632                           ;doprnt.c: 834: }
  5633                           ;doprnt.c: 835: exp = 0;
  5634  00031E  0E00               	movlw	0
  5635  000320  0101               	movlb	1	; () banked
  5636  000322  6F0F               	movwf	(printf@exp+1)& (0+255),b
  5637  000324  0E00               	movlw	0
  5638  000326  6F0E               	movwf	printf@exp& (0+255),b
  5639                           
  5640                           ; BSR set to: 1
  5641                           ;doprnt.c: 836: if( fval!=0) {
  5642  000328  0101               	movlb	1	; () banked
  5643  00032A  5114               	movf	printf@fval& (0+255),w,b
  5644  00032C  0101               	movlb	1	; () banked
  5645  00032E  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  5646  000330  0101               	movlb	1	; () banked
  5647  000332  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  5648  000334  B4D8               	btfsc	status,2,c
  5649  000336  D09B               	goto	l5408
  5650                           
  5651                           ; BSR set to: 1
  5652                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5653  000338  0E82               	movlw	130
  5654  00033A  0100               	movlb	0	; () banked
  5655  00033C  6FDF               	movwf	??_printf& (0+255),b
  5656  00033E  0EFF               	movlw	255
  5657  000340  0100               	movlb	0	; () banked
  5658  000342  6FE0               	movwf	(??_printf+1)& (0+255),b
  5659  000344  C114  F0E1         	movff	printf@fval,??_printf+2
  5660  000348  C115  F0E2         	movff	printf@fval+1,??_printf+3
  5661  00034C  C116  F0E3         	movff	printf@fval+2,??_printf+4
  5662  000350  C117  F0E4         	movff	printf@fval+3,??_printf+5
  5663  000354  0E10               	movlw	16
  5664  000356  D006               	goto	u5530
  5665  000358                     u5535:
  5666  000358  0100               	movlb	0	; () banked
  5667  00035A  90D8               	bcf	status,0,c
  5668  00035C  33E4               	rrcf	(??_printf+5)& (0+255),f,b
  5669  00035E  33E3               	rrcf	(??_printf+4)& (0+255),f,b
  5670  000360  33E2               	rrcf	(??_printf+3)& (0+255),f,b
  5671  000362  33E1               	rrcf	(??_printf+2)& (0+255),f,b
  5672  000364                     u5530:
  5673  000364  2EE8               	decfsz	wreg,f,c
  5674  000366  D7F8               	goto	u5535
  5675  000368  0100               	movlb	0	; () banked
  5676  00036A  51E1               	movf	(??_printf+2)& (0+255),w,b
  5677  00036C  0100               	movlb	0	; () banked
  5678  00036E  25DF               	addwf	??_printf& (0+255),w,b
  5679  000370  0101               	movlb	1	; () banked
  5680  000372  6F0E               	movwf	printf@exp& (0+255),b
  5681  000374  0E00               	movlw	0
  5682  000376  0100               	movlb	0	; () banked
  5683  000378  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  5684  00037A  0101               	movlb	1	; () banked
  5685  00037C  6F0F               	movwf	(printf@exp+1)& (0+255),b
  5686                           
  5687                           ; BSR set to: 1
  5688                           ;doprnt.c: 838: exp--;
  5689  00037E  0101               	movlb	1	; () banked
  5690  000380  070E               	decf	printf@exp& (0+255),f,b
  5691  000382  A0D8               	btfss	status,0,c
  5692  000384  070F               	decf	(printf@exp+1)& (0+255),f,b
  5693                           
  5694                           ; BSR set to: 1
  5695                           ;doprnt.c: 839: exp *= 3;
  5696  000386  C10E  F08E         	movff	printf@exp,___wmul@multiplier
  5697  00038A  C10F  F08F         	movff	printf@exp+1,___wmul@multiplier+1
  5698  00038E  0E00               	movlw	0
  5699  000390  0100               	movlb	0	; () banked
  5700  000392  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5701  000394  0E03               	movlw	3
  5702  000396  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5703  000398  ECCD  F02B         	call	___wmul	;wreg free
  5704  00039C  C08E  F10E         	movff	?___wmul,printf@exp
  5705  0003A0  C08F  F10F         	movff	?___wmul+1,printf@exp+1
  5706                           
  5707                           ;doprnt.c: 840: exp /= 10;
  5708  0003A4  C10E  F086         	movff	printf@exp,___awdiv@dividend
  5709  0003A8  C10F  F087         	movff	printf@exp+1,___awdiv@dividend+1
  5710  0003AC  0E00               	movlw	0
  5711  0003AE  0100               	movlb	0	; () banked
  5712  0003B0  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5713  0003B2  0E0A               	movlw	10
  5714  0003B4  6F88               	movwf	___awdiv@divisor& (0+255),b
  5715  0003B6  ECF0  F025         	call	___awdiv	;wreg free
  5716  0003BA  C086  F10E         	movff	?___awdiv,printf@exp
  5717  0003BE  C087  F10F         	movff	?___awdiv+1,printf@exp+1
  5718                           
  5719                           ;doprnt.c: 841: if(exp < 0)
  5720  0003C2  0101               	movlb	1	; () banked
  5721  0003C4  AF0F               	btfss	(printf@exp+1)& (0+255),7,b
  5722  0003C6  D004               	goto	l5396
  5723                           
  5724                           ; BSR set to: 1
  5725                           ;doprnt.c: 842: exp--;
  5726  0003C8  0101               	movlb	1	; () banked
  5727  0003CA  070E               	decf	printf@exp& (0+255),f,b
  5728  0003CC  A0D8               	btfss	status,0,c
  5729  0003CE  070F               	decf	(printf@exp+1)& (0+255),f,b
  5730  0003D0                     l5396:
  5731                           
  5732                           ; BSR set to: 1
  5733                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5734  0003D0  0101               	movlb	1	; () banked
  5735  0003D2  510E               	movf	printf@exp& (0+255),w,b
  5736  0003D4  0800               	sublw	0
  5737  0003D6  EC81  F00F         	call	_scale
  5738  0003DA  C0B0  F10A         	movff	?_scale,printf@tmpval
  5739  0003DE  C0B1  F10B         	movff	?_scale+1,printf@tmpval+1
  5740  0003E2  C0B2  F10C         	movff	?_scale+2,printf@tmpval+2
  5741                           
  5742                           ;doprnt.c: 847: tmpval.integ *= fval;
  5743  0003E6  C10A  F0A1         	movff	printf@tmpval,___ftmul@f1
  5744  0003EA  C10B  F0A2         	movff	printf@tmpval+1,___ftmul@f1+1
  5745  0003EE  C10C  F0A3         	movff	printf@tmpval+2,___ftmul@f1+2
  5746  0003F2  C114  F0A4         	movff	printf@fval,___ftmul@f2
  5747  0003F6  C115  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  5748  0003FA  C116  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  5749  0003FE  EC5E  F01C         	call	___ftmul	;wreg free
  5750  000402  C0A1  F10A         	movff	?___ftmul,printf@tmpval
  5751  000406  C0A2  F10B         	movff	?___ftmul+1,printf@tmpval+1
  5752  00040A  C0A3  F10C         	movff	?___ftmul+2,printf@tmpval+2
  5753                           
  5754                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5755  00040E  C10A  F08C         	movff	printf@tmpval,___ftge@ff1
  5756  000412  C10B  F08D         	movff	printf@tmpval+1,___ftge@ff1+1
  5757  000416  C10C  F08E         	movff	printf@tmpval+2,___ftge@ff1+2
  5758  00041A  0E00               	movlw	0
  5759  00041C  0100               	movlb	0	; () banked
  5760  00041E  6F8F               	movwf	___ftge@ff2& (0+255),b
  5761  000420  0E80               	movlw	128
  5762  000422  0100               	movlb	0	; () banked
  5763  000424  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  5764  000426  0E3F               	movlw	63
  5765  000428  0100               	movlb	0	; () banked
  5766  00042A  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  5767  00042C  EC28  F025         	call	___ftge	;wreg free
  5768  000430  0100               	movlb	0	; () banked
  5769  000432  B0D8               	btfsc	status,0,c
  5770  000434  D005               	goto	l5404
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;doprnt.c: 849: exp--;
  5774  000436  0101               	movlb	1	; () banked
  5775  000438  070E               	decf	printf@exp& (0+255),f,b
  5776  00043A  A0D8               	btfss	status,0,c
  5777  00043C  070F               	decf	(printf@exp+1)& (0+255),f,b
  5778  00043E  D017               	goto	l5408
  5779  000440                     l5404:
  5780                           
  5781                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5782  000440  C10A  F08C         	movff	printf@tmpval,___ftge@ff1
  5783  000444  C10B  F08D         	movff	printf@tmpval+1,___ftge@ff1+1
  5784  000448  C10C  F08E         	movff	printf@tmpval+2,___ftge@ff1+2
  5785  00044C  0E00               	movlw	0
  5786  00044E  0100               	movlb	0	; () banked
  5787  000450  6F8F               	movwf	___ftge@ff2& (0+255),b
  5788  000452  0E20               	movlw	32
  5789  000454  0100               	movlb	0	; () banked
  5790  000456  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  5791  000458  0E41               	movlw	65
  5792  00045A  0100               	movlb	0	; () banked
  5793  00045C  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  5794  00045E  EC28  F025         	call	___ftge	;wreg free
  5795  000462  0100               	movlb	0	; () banked
  5796  000464  A0D8               	btfss	status,0,c
  5797  000466  D003               	goto	l5408
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;doprnt.c: 851: exp++;
  5801  000468  0101               	movlb	1	; () banked
  5802  00046A  4B0E               	infsnz	printf@exp& (0+255),f,b
  5803  00046C  2B0F               	incf	(printf@exp+1)& (0+255),f,b
  5804  00046E                     l5408:
  5805                           
  5806                           ;doprnt.c: 852: }
  5807                           ;doprnt.c: 1112: if(prec <= 12)
  5808  00046E  0101               	movlb	1	; () banked
  5809  000470  BF1C               	btfsc	(printf@prec+1)& (0+255),7,b
  5810  000472  D008               	goto	l5410
  5811  000474  0101               	movlb	1	; () banked
  5812  000476  511C               	movf	(printf@prec+1)& (0+255),w,b
  5813  000478  E11D               	bnz	l5412
  5814  00047A  0E0D               	movlw	13
  5815  00047C  0101               	movlb	1	; () banked
  5816  00047E  5D1B               	subwf	printf@prec& (0+255),w,b
  5817  000480  B0D8               	btfsc	status,0,c
  5818  000482  D018               	goto	l5412
  5819  000484                     l5410:
  5820                           
  5821                           ; BSR set to: 1
  5822                           ;doprnt.c: 1113: fval += fround(prec);
  5823  000484  C114  F0BA         	movff	printf@fval,___ftadd@f1
  5824  000488  C115  F0BB         	movff	printf@fval+1,___ftadd@f1+1
  5825  00048C  C116  F0BC         	movff	printf@fval+2,___ftadd@f1+2
  5826  000490  0101               	movlb	1	; () banked
  5827  000492  511B               	movf	printf@prec& (0+255),w,b
  5828  000494  EC95  F015         	call	_fround
  5829  000498  C0B0  F0BD         	movff	?_fround,___ftadd@f2
  5830  00049C  C0B1  F0BE         	movff	?_fround+1,___ftadd@f2+1
  5831  0004A0  C0B2  F0BF         	movff	?_fround+2,___ftadd@f2+2
  5832  0004A4  ECEB  F016         	call	___ftadd	;wreg free
  5833  0004A8  C0BA  F114         	movff	?___ftadd,printf@fval
  5834  0004AC  C0BB  F115         	movff	?___ftadd+1,printf@fval+1
  5835  0004B0  C0BC  F116         	movff	?___ftadd+2,printf@fval+2
  5836  0004B4                     l5412:
  5837                           
  5838                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5839  0004B4  0101               	movlb	1	; () banked
  5840  0004B6  BF0F               	btfsc	(printf@exp+1)& (0+255),7,b
  5841  0004B8  D008               	goto	l5414
  5842  0004BA  0101               	movlb	1	; () banked
  5843  0004BC  510F               	movf	(printf@exp+1)& (0+255),w,b
  5844  0004BE  E12A               	bnz	l5420
  5845  0004C0  0E0A               	movlw	10
  5846  0004C2  0101               	movlb	1	; () banked
  5847  0004C4  5D0E               	subwf	printf@exp& (0+255),w,b
  5848  0004C6  B0D8               	btfsc	status,0,c
  5849  0004C8  D025               	goto	l5420
  5850  0004CA                     l5414:
  5851                           
  5852                           ; BSR set to: 1
  5853  0004CA  0101               	movlb	1	; () banked
  5854  0004CC  5114               	movf	printf@fval& (0+255),w,b
  5855  0004CE  0101               	movlb	1	; () banked
  5856  0004D0  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  5857  0004D2  0101               	movlb	1	; () banked
  5858  0004D4  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  5859  0004D6  B4D8               	btfsc	status,2,c
  5860  0004D8  D063               	goto	l5434
  5861                           
  5862                           ; BSR set to: 1
  5863  0004DA  C114  F0C6         	movff	printf@fval,___fttol@f1
  5864  0004DE  C115  F0C7         	movff	printf@fval+1,___fttol@f1+1
  5865  0004E2  C116  F0C8         	movff	printf@fval+2,___fttol@f1+2
  5866  0004E6  ECB3  F01D         	call	___fttol	;wreg free
  5867  0004EA  0100               	movlb	0	; () banked
  5868  0004EC  51C6               	movf	?___fttol& (0+255),w,b
  5869  0004EE  0100               	movlb	0	; () banked
  5870  0004F0  11C7               	iorwf	(?___fttol+1)& (0+255),w,b
  5871  0004F2  0100               	movlb	0	; () banked
  5872  0004F4  11C8               	iorwf	(?___fttol+2)& (0+255),w,b
  5873  0004F6  0100               	movlb	0	; () banked
  5874  0004F8  11C9               	iorwf	(?___fttol+3)& (0+255),w,b
  5875  0004FA  A4D8               	btfss	status,2,c
  5876  0004FC  D051               	goto	l5434
  5877                           
  5878                           ; BSR set to: 0
  5879  0004FE  0101               	movlb	1	; () banked
  5880  000500  BF0F               	btfsc	(printf@exp+1)& (0+255),7,b
  5881  000502  D04E               	goto	l5434
  5882  000504  0101               	movlb	1	; () banked
  5883  000506  510F               	movf	(printf@exp+1)& (0+255),w,b
  5884  000508  E105               	bnz	l5420
  5885  00050A  0E02               	movlw	2
  5886  00050C  0101               	movlb	1	; () banked
  5887  00050E  5D0E               	subwf	printf@exp& (0+255),w,b
  5888  000510  A0D8               	btfss	status,0,c
  5889  000512  D046               	goto	l5434
  5890  000514                     l5420:
  5891                           
  5892                           ; BSR set to: 1
  5893                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5894  000514  C10A  F08C         	movff	printf@tmpval,___ftge@ff1
  5895  000518  C10B  F08D         	movff	printf@tmpval+1,___ftge@ff1+1
  5896  00051C  C10C  F08E         	movff	printf@tmpval+2,___ftge@ff1+2
  5897  000520  0E70               	movlw	112
  5898  000522  0100               	movlb	0	; () banked
  5899  000524  6F8F               	movwf	___ftge@ff2& (0+255),b
  5900  000526  0E89               	movlw	137
  5901  000528  0100               	movlb	0	; () banked
  5902  00052A  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  5903  00052C  0E40               	movlw	64
  5904  00052E  0100               	movlb	0	; () banked
  5905  000530  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  5906  000532  EC28  F025         	call	___ftge	;wreg free
  5907  000536  0100               	movlb	0	; () banked
  5908  000538  B0D8               	btfsc	status,0,c
  5909  00053A  D003               	goto	l5424
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5913  00053C  0101               	movlb	1	; () banked
  5914  00053E  0EF7               	movlw	247
  5915  000540  D002               	goto	L1
  5916  000542                     l5424:
  5917                           
  5918                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5919  000542  0101               	movlb	1	; () banked
  5920  000544  0EF8               	movlw	248
  5921  000546                     L1:
  5922  000546  270E               	addwf	printf@exp& (0+255),f,b
  5923  000548  0EFF               	movlw	255
  5924  00054A  230F               	addwfc	(printf@exp+1)& (0+255),f,b
  5925                           
  5926                           ; BSR set to: 1
  5927                           ;doprnt.c: 1124: }
  5928                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5929                           
  5930                           ; BSR set to: 1
  5931  00054C  0101               	movlb	1	; () banked
  5932  00054E  510E               	movf	printf@exp& (0+255),w,b
  5933  000550  EC81  F00F         	call	_scale
  5934  000554  C0B0  F10A         	movff	?_scale,printf@tmpval
  5935  000558  C0B1  F10B         	movff	?_scale+1,printf@tmpval+1
  5936  00055C  C0B2  F10C         	movff	?_scale+2,printf@tmpval+2
  5937                           
  5938                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5939  000560  C114  F080         	movff	printf@fval,__tdiv_to_l_@f1
  5940  000564  C115  F081         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5941  000568  C116  F082         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5942  00056C  C10A  F083         	movff	printf@tmpval,__tdiv_to_l_@f2
  5943  000570  C10B  F084         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5944  000574  C10C  F085         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5945  000578  EC18  F01A         	call	__tdiv_to_l_	;wreg free
  5946  00057C  C080  F110         	movff	?__tdiv_to_l_,printf@val
  5947  000580  C081  F111         	movff	?__tdiv_to_l_+1,printf@val+1
  5948  000584  C082  F112         	movff	?__tdiv_to_l_+2,printf@val+2
  5949  000588  C083  F113         	movff	?__tdiv_to_l_+3,printf@val+3
  5950                           
  5951                           ;doprnt.c: 1129: fval = 0.0;
  5952  00058C  0E00               	movlw	0
  5953  00058E  0101               	movlb	1	; () banked
  5954  000590  6F14               	movwf	printf@fval& (0+255),b
  5955  000592  0E00               	movlw	0
  5956  000594  0101               	movlb	1	; () banked
  5957  000596  6F15               	movwf	(printf@fval+1)& (0+255),b
  5958  000598  0E00               	movlw	0
  5959  00059A  0101               	movlb	1	; () banked
  5960  00059C  6F16               	movwf	(printf@fval+2)& (0+255),b
  5961                           
  5962                           ;doprnt.c: 1130: } else {
  5963  00059E  D033               	goto	l5438
  5964  0005A0                     l5434:
  5965                           
  5966                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5967  0005A0  C114  F0C6         	movff	printf@fval,___fttol@f1
  5968  0005A4  C115  F0C7         	movff	printf@fval+1,___fttol@f1+1
  5969  0005A8  C116  F0C8         	movff	printf@fval+2,___fttol@f1+2
  5970  0005AC  ECB3  F01D         	call	___fttol	;wreg free
  5971  0005B0  C0C6  F110         	movff	?___fttol,printf@val
  5972  0005B4  C0C7  F111         	movff	?___fttol+1,printf@val+1
  5973  0005B8  C0C8  F112         	movff	?___fttol+2,printf@val+2
  5974  0005BC  C0C9  F113         	movff	?___fttol+3,printf@val+3
  5975                           
  5976                           ;doprnt.c: 1132: fval -= (double)val;
  5977  0005C0  C114  F0C6         	movff	printf@fval,___ftsub@f1
  5978  0005C4  C115  F0C7         	movff	printf@fval+1,___ftsub@f1+1
  5979  0005C8  C116  F0C8         	movff	printf@fval+2,___ftsub@f1+2
  5980  0005CC  C110  F088         	movff	printf@val,___lltoft@c
  5981  0005D0  C111  F089         	movff	printf@val+1,___lltoft@c+1
  5982  0005D4  C112  F08A         	movff	printf@val+2,___lltoft@c+2
  5983  0005D8  C113  F08B         	movff	printf@val+3,___lltoft@c+3
  5984  0005DC  EC03  F029         	call	___lltoft	;wreg free
  5985  0005E0  C088  F0C9         	movff	?___lltoft,___ftsub@f2
  5986  0005E4  C089  F0CA         	movff	?___lltoft+1,___ftsub@f2+1
  5987  0005E8  C08A  F0CB         	movff	?___lltoft+2,___ftsub@f2+2
  5988  0005EC  EC98  F02A         	call	___ftsub	;wreg free
  5989  0005F0  C0C6  F114         	movff	?___ftsub,printf@fval
  5990  0005F4  C0C7  F115         	movff	?___ftsub+1,printf@fval+1
  5991  0005F8  C0C8  F116         	movff	?___ftsub+2,printf@fval+2
  5992                           
  5993                           ;doprnt.c: 1133: exp = 0;
  5994  0005FC  0E00               	movlw	0
  5995  0005FE  0101               	movlb	1	; () banked
  5996  000600  6F0F               	movwf	(printf@exp+1)& (0+255),b
  5997  000602  0E00               	movlw	0
  5998  000604  6F0E               	movwf	printf@exp& (0+255),b
  5999  000606                     l5438:
  6000                           
  6001                           ; BSR set to: 1
  6002                           ;doprnt.c: 1134: }
  6003                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6004  000606  0E01               	movlw	1
  6005  000608  0101               	movlb	1	; () banked
  6006  00060A  6F1D               	movwf	printf@c& (0+255),b
  6007  00060C                     l5440:
  6008                           
  6009                           ; BSR set to: 1
  6010  00060C  0E0A               	movlw	10
  6011  00060E  0101               	movlb	1	; () banked
  6012  000610  191D               	xorwf	printf@c& (0+255),w,b
  6013  000612  B4D8               	btfsc	status,2,c
  6014  000614  D01E               	goto	l5452
  6015                           
  6016                           ; BSR set to: 1
  6017                           ;doprnt.c: 1137: if(val < dpowers[c])
  6018                           
  6019                           ; BSR set to: 1
  6020                           
  6021                           ; BSR set to: 1
  6022  000616  0101               	movlb	1	; () banked
  6023  000618  511D               	movf	printf@c& (0+255),w,b
  6024  00061A  0D04               	mullw	4
  6025  00061C  0E29               	movlw	low _dpowers
  6026  00061E  24F3               	addwf	prodl,w,c
  6027  000620  6EF6               	movwf	tblptrl,c
  6028  000622  0EFE               	movlw	high _dpowers
  6029  000624  20F4               	addwfc	prodh,w,c
  6030  000626  6EF7               	movwf	tblptrh,c
  6031  000628                     	if	0	;There are less than 3 active tblptr bytes
  6032  000628                     	endif
  6033  000628  0009               	tblrd		*+
  6034  00062A  50F5               	movf	tablat,w,c
  6035  00062C  0101               	movlb	1	; () banked
  6036  00062E  5D10               	subwf	printf@val& (0+255),w,b
  6037  000630  0009               	tblrd		*+
  6038  000632  50F5               	movf	tablat,w,c
  6039  000634  0101               	movlb	1	; () banked
  6040  000636  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6041  000638  0009               	tblrd		*+
  6042  00063A  50F5               	movf	tablat,w,c
  6043  00063C  0101               	movlb	1	; () banked
  6044  00063E  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6045  000640  0009               	tblrd		*+
  6046  000642  50F5               	movf	tablat,w,c
  6047  000644  0101               	movlb	1	; () banked
  6048  000646  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6049  000648  A0D8               	btfss	status,0,c
  6050  00064A  D003               	goto	l5452
  6051                           
  6052                           ; BSR set to: 1
  6053                           
  6054                           ; BSR set to: 1
  6055                           
  6056                           ; BSR set to: 1
  6057                           ;doprnt.c: 1138: break;
  6058  00064C  0101               	movlb	1	; () banked
  6059  00064E  2B1D               	incf	printf@c& (0+255),f,b
  6060  000650  D7DD               	goto	l5440
  6061  000652                     l5452:
  6062                           
  6063                           ; BSR set to: 1
  6064                           ;doprnt.c: 1142: width -= prec + c + exp;
  6065  000652  C11D  F0DF         	movff	printf@c,??_printf
  6066  000656  0100               	movlb	0	; () banked
  6067  000658  6BE0               	clrf	(??_printf+1)& (0+255),b
  6068  00065A  BFDF               	btfsc	??_printf& (0+255),7,b
  6069  00065C  07E0               	decf	(??_printf+1)& (0+255),f,b
  6070  00065E  0101               	movlb	1	; () banked
  6071  000660  511B               	movf	printf@prec& (0+255),w,b
  6072  000662  0100               	movlb	0	; () banked
  6073  000664  27DF               	addwf	??_printf& (0+255),f,b
  6074  000666  0101               	movlb	1	; () banked
  6075  000668  511C               	movf	(printf@prec+1)& (0+255),w,b
  6076  00066A  0100               	movlb	0	; () banked
  6077  00066C  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  6078  00066E  0101               	movlb	1	; () banked
  6079  000670  510E               	movf	printf@exp& (0+255),w,b
  6080  000672  0100               	movlb	0	; () banked
  6081  000674  27DF               	addwf	??_printf& (0+255),f,b
  6082  000676  0101               	movlb	1	; () banked
  6083  000678  510F               	movf	(printf@exp+1)& (0+255),w,b
  6084  00067A  0100               	movlb	0	; () banked
  6085  00067C  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  6086  00067E  0100               	movlb	0	; () banked
  6087  000680  51DF               	movf	??_printf& (0+255),w,b
  6088  000682  0101               	movlb	1	; () banked
  6089  000684  5F17               	subwf	printf@width& (0+255),f,b
  6090  000686  0100               	movlb	0	; () banked
  6091  000688  51E0               	movf	(??_printf+1)& (0+255),w,b
  6092  00068A  0101               	movlb	1	; () banked
  6093  00068C  5B18               	subwfb	(printf@width+1)& (0+255),f,b
  6094                           
  6095                           ;doprnt.c: 1143: if(
  6096                           ;doprnt.c: 1147: prec)
  6097  00068E  0101               	movlb	1	; () banked
  6098  000690  511B               	movf	printf@prec& (0+255),w,b
  6099  000692  0101               	movlb	1	; () banked
  6100  000694  111C               	iorwf	(printf@prec+1)& (0+255),w,b
  6101  000696  B4D8               	btfsc	status,2,c
  6102  000698  D004               	goto	l5456
  6103                           
  6104                           ; BSR set to: 1
  6105                           ;doprnt.c: 1148: width--;
  6106  00069A  0101               	movlb	1	; () banked
  6107  00069C  0717               	decf	printf@width& (0+255),f,b
  6108  00069E  A0D8               	btfss	status,0,c
  6109  0006A0  0718               	decf	(printf@width+1)& (0+255),f,b
  6110  0006A2                     l5456:
  6111                           
  6112                           ; BSR set to: 1
  6113                           ;doprnt.c: 1149: if(flag & 0x03)
  6114  0006A2  0E03               	movlw	3
  6115  0006A4  0101               	movlb	1	; () banked
  6116  0006A6  1519               	andwf	printf@flag& (0+255),w,b
  6117  0006A8  0100               	movlb	0	; () banked
  6118  0006AA  6FDF               	movwf	??_printf& (0+255),b
  6119  0006AC  0E00               	movlw	0
  6120  0006AE  0101               	movlb	1	; () banked
  6121  0006B0  151A               	andwf	(printf@flag+1)& (0+255),w,b
  6122  0006B2  0100               	movlb	0	; () banked
  6123  0006B4  6FE0               	movwf	(??_printf+1)& (0+255),b
  6124  0006B6  0100               	movlb	0	; () banked
  6125  0006B8  51DF               	movf	??_printf& (0+255),w,b
  6126  0006BA  0100               	movlb	0	; () banked
  6127  0006BC  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  6128  0006BE  B4D8               	btfsc	status,2,c
  6129  0006C0  D004               	goto	l5460
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;doprnt.c: 1150: width--;
  6133  0006C2  0101               	movlb	1	; () banked
  6134  0006C4  0717               	decf	printf@width& (0+255),f,b
  6135  0006C6  A0D8               	btfss	status,0,c
  6136  0006C8  0718               	decf	(printf@width+1)& (0+255),f,b
  6137  0006CA                     l5460:
  6138                           
  6139                           ;doprnt.c: 1153: if(flag & 0x04) {
  6140  0006CA  0101               	movlb	1	; () banked
  6141  0006CC  A519               	btfss	printf@flag& (0+255),2,b
  6142  0006CE  D02D               	goto	l5476
  6143                           
  6144                           ; BSR set to: 1
  6145                           ;doprnt.c: 1157: if(flag & 0x03)
  6146  0006D0  0E03               	movlw	3
  6147  0006D2  0101               	movlb	1	; () banked
  6148  0006D4  1519               	andwf	printf@flag& (0+255),w,b
  6149  0006D6  0100               	movlb	0	; () banked
  6150  0006D8  6FDF               	movwf	??_printf& (0+255),b
  6151  0006DA  0E00               	movlw	0
  6152  0006DC  0101               	movlb	1	; () banked
  6153  0006DE  151A               	andwf	(printf@flag+1)& (0+255),w,b
  6154  0006E0  0100               	movlb	0	; () banked
  6155  0006E2  6FE0               	movwf	(??_printf+1)& (0+255),b
  6156  0006E4  0100               	movlb	0	; () banked
  6157  0006E6  51DF               	movf	??_printf& (0+255),w,b
  6158  0006E8  0100               	movlb	0	; () banked
  6159  0006EA  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  6160  0006EC  B4D8               	btfsc	status,2,c
  6161  0006EE  D00B               	goto	l5470
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;doprnt.c: 1159: (putch('-') );
  6165  0006F0  0E2D               	movlw	45
  6166  0006F2  EC58  F02C         	call	_putch
  6167                           
  6168                           ;doprnt.c: 1168: while(width > 0) {
  6169  0006F6  D007               	goto	l5470
  6170  0006F8                     l5466:
  6171                           
  6172                           ;doprnt.c: 1169: (putch('0') );
  6173  0006F8  0E30               	movlw	48
  6174  0006FA  EC58  F02C         	call	_putch
  6175                           
  6176                           ;doprnt.c: 1170: width--;
  6177  0006FE  0101               	movlb	1	; () banked
  6178  000700  0717               	decf	printf@width& (0+255),f,b
  6179  000702  A0D8               	btfss	status,0,c
  6180  000704  0718               	decf	(printf@width+1)& (0+255),f,b
  6181  000706                     l5470:
  6182  000706  0101               	movlb	1	; () banked
  6183  000708  BF18               	btfsc	(printf@width+1)& (0+255),7,b
  6184  00070A  D074               	goto	l5488
  6185  00070C  0101               	movlb	1	; () banked
  6186  00070E  5118               	movf	(printf@width+1)& (0+255),w,b
  6187  000710  E1F3               	bnz	l5466
  6188  000712  0101               	movlb	1	; () banked
  6189  000714  0517               	decf	printf@width& (0+255),w,b
  6190  000716  A0D8               	btfss	status,0,c
  6191  000718  D06D               	goto	l5488
  6192  00071A  D7EE               	goto	l5466
  6193  00071C                     l5472:
  6194                           
  6195                           ; BSR set to: 1
  6196                           ;doprnt.c: 1181: (putch(' ') );
  6197  00071C  0E20               	movlw	32
  6198  00071E  EC58  F02C         	call	_putch
  6199                           
  6200                           ;doprnt.c: 1182: width--;
  6201  000722  0101               	movlb	1	; () banked
  6202  000724  0717               	decf	printf@width& (0+255),f,b
  6203  000726  A0D8               	btfss	status,0,c
  6204  000728  0718               	decf	(printf@width+1)& (0+255),f,b
  6205  00072A                     l5476:
  6206                           
  6207                           ; BSR set to: 1
  6208  00072A  0101               	movlb	1	; () banked
  6209  00072C  BF18               	btfsc	(printf@width+1)& (0+255),7,b
  6210  00072E  D007               	goto	l5478
  6211  000730  0101               	movlb	1	; () banked
  6212  000732  5118               	movf	(printf@width+1)& (0+255),w,b
  6213  000734  E1F3               	bnz	l5472
  6214  000736  0101               	movlb	1	; () banked
  6215  000738  0517               	decf	printf@width& (0+255),w,b
  6216  00073A  B0D8               	btfsc	status,0,c
  6217  00073C  D7EF               	goto	l5472
  6218  00073E                     l5478:
  6219                           
  6220                           ; BSR set to: 1
  6221                           ;doprnt.c: 1183: }
  6222                           ;doprnt.c: 1188: if(flag & 0x03)
  6223  00073E  0E03               	movlw	3
  6224  000740  0101               	movlb	1	; () banked
  6225  000742  1519               	andwf	printf@flag& (0+255),w,b
  6226  000744  0100               	movlb	0	; () banked
  6227  000746  6FDF               	movwf	??_printf& (0+255),b
  6228  000748  0E00               	movlw	0
  6229  00074A  0101               	movlb	1	; () banked
  6230  00074C  151A               	andwf	(printf@flag+1)& (0+255),w,b
  6231  00074E  0100               	movlb	0	; () banked
  6232  000750  6FE0               	movwf	(??_printf+1)& (0+255),b
  6233  000752  0100               	movlb	0	; () banked
  6234  000754  51DF               	movf	??_printf& (0+255),w,b
  6235  000756  0100               	movlb	0	; () banked
  6236  000758  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  6237  00075A  B4D8               	btfsc	status,2,c
  6238  00075C  D04B               	goto	l5488
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;doprnt.c: 1190: (putch('-') );
  6242  00075E  0E2D               	movlw	45
  6243  000760  EC58  F02C         	call	_putch
  6244                           
  6245                           ;doprnt.c: 1195: }
  6246                           ;doprnt.c: 1196: while(c--) {
  6247  000764  D047               	goto	l5488
  6248  000766                     l5482:
  6249                           
  6250                           ;doprnt.c: 1200: {
  6251                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6252  000766  C110  F080         	movff	printf@val,___lldiv@dividend
  6253  00076A  C111  F081         	movff	printf@val+1,___lldiv@dividend+1
  6254  00076E  C112  F082         	movff	printf@val+2,___lldiv@dividend+2
  6255  000772  C113  F083         	movff	printf@val+3,___lldiv@dividend+3
  6256  000776  0101               	movlb	1	; () banked
  6257  000778  511D               	movf	printf@c& (0+255),w,b
  6258  00077A  0D04               	mullw	4
  6259  00077C  0E29               	movlw	low _dpowers
  6260  00077E  24F3               	addwf	prodl,w,c
  6261  000780  6EF6               	movwf	tblptrl,c
  6262  000782  0EFE               	movlw	high _dpowers
  6263  000784  20F4               	addwfc	prodh,w,c
  6264  000786  6EF7               	movwf	tblptrh,c
  6265  000788                     	if	0	;There are less than 3 active tblptr bytes
  6266  000788                     	endif
  6267  000788  0009               	tblrd		*+
  6268  00078A  CFF5 F084          	movff	tablat,___lldiv@divisor
  6269  00078E  0009               	tblrd		*+
  6270  000790  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  6271  000794  0009               	tblrd		*+
  6272  000796  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  6273  00079A  000A               	tblrd		*-
  6274  00079C  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  6275  0007A0  EC4F  F026         	call	___lldiv	;wreg free
  6276  0007A4  C080  F10A         	movff	?___lldiv,printf@tmpval
  6277  0007A8  C081  F10B         	movff	?___lldiv+1,printf@tmpval+1
  6278  0007AC  C082  F10C         	movff	?___lldiv+2,printf@tmpval+2
  6279  0007B0  C083  F10D         	movff	?___lldiv+3,printf@tmpval+3
  6280                           
  6281                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6282  0007B4  C10A  F08D         	movff	printf@tmpval,___llmod@dividend
  6283  0007B8  C10B  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  6284  0007BC  C10C  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  6285  0007C0  C10D  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  6286  0007C4  0E0A               	movlw	10
  6287  0007C6  0100               	movlb	0	; () banked
  6288  0007C8  6F91               	movwf	___llmod@divisor& (0+255),b
  6289  0007CA  0E00               	movlw	0
  6290  0007CC  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  6291  0007CE  0E00               	movlw	0
  6292  0007D0  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  6293  0007D2  0E00               	movlw	0
  6294  0007D4  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  6295  0007D6  ECA4  F027         	call	___llmod	;wreg free
  6296  0007DA  C08D  F10A         	movff	?___llmod,printf@tmpval
  6297  0007DE  C08E  F10B         	movff	?___llmod+1,printf@tmpval+1
  6298  0007E2  C08F  F10C         	movff	?___llmod+2,printf@tmpval+2
  6299  0007E6  C090  F10D         	movff	?___llmod+3,printf@tmpval+3
  6300                           
  6301                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6302  0007EA  0101               	movlb	1	; () banked
  6303  0007EC  510A               	movf	printf@tmpval& (0+255),w,b
  6304  0007EE  0F30               	addlw	48
  6305  0007F0  EC58  F02C         	call	_putch
  6306  0007F4                     l5488:
  6307  0007F4  0101               	movlb	1	; () banked
  6308  0007F6  071D               	decf	printf@c& (0+255),f,b
  6309  0007F8  0101               	movlb	1	; () banked
  6310  0007FA  291D               	incf	printf@c& (0+255),w,b
  6311  0007FC  B4D8               	btfsc	status,2,c
  6312  0007FE  D008               	goto	l5494
  6313  000800  D7B2               	goto	l5482
  6314  000802                     l5490:
  6315                           
  6316                           ; BSR set to: 1
  6317                           ;doprnt.c: 1208: (putch('0') );
  6318  000802  0E30               	movlw	48
  6319  000804  EC58  F02C         	call	_putch
  6320                           
  6321                           ;doprnt.c: 1209: exp--;
  6322  000808  0101               	movlb	1	; () banked
  6323  00080A  070E               	decf	printf@exp& (0+255),f,b
  6324  00080C  A0D8               	btfss	status,0,c
  6325  00080E  070F               	decf	(printf@exp+1)& (0+255),f,b
  6326  000810                     l5494:
  6327                           
  6328                           ; BSR set to: 1
  6329  000810  0101               	movlb	1	; () banked
  6330  000812  BF0F               	btfsc	(printf@exp+1)& (0+255),7,b
  6331  000814  D007               	goto	l5496
  6332  000816  0101               	movlb	1	; () banked
  6333  000818  510F               	movf	(printf@exp+1)& (0+255),w,b
  6334  00081A  E1F3               	bnz	l5490
  6335  00081C  0101               	movlb	1	; () banked
  6336  00081E  050E               	decf	printf@exp& (0+255),w,b
  6337  000820  B0D8               	btfsc	status,0,c
  6338  000822  D7EF               	goto	l5490
  6339  000824                     l5496:
  6340                           
  6341                           ; BSR set to: 1
  6342                           ;doprnt.c: 1210: }
  6343                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6344  000824  0101               	movlb	1	; () banked
  6345  000826  BF1C               	btfsc	(printf@prec+1)& (0+255),7,b
  6346  000828  D00C               	goto	l769
  6347  00082A  0101               	movlb	1	; () banked
  6348  00082C  511C               	movf	(printf@prec+1)& (0+255),w,b
  6349  00082E  E105               	bnz	u5750
  6350  000830  0E09               	movlw	9
  6351  000832  0101               	movlb	1	; () banked
  6352  000834  5D1B               	subwf	printf@prec& (0+255),w,b
  6353  000836  A0D8               	btfss	status,0,c
  6354  000838  D004               	goto	l769
  6355  00083A                     u5750:
  6356                           
  6357                           ; BSR set to: 1
  6358                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6359  00083A  0E08               	movlw	8
  6360  00083C  0101               	movlb	1	; () banked
  6361  00083E  6F1D               	movwf	printf@c& (0+255),b
  6362  000840  D002               	goto	l5500
  6363  000842                     l769:
  6364                           
  6365                           ; BSR set to: 1
  6366                           ;doprnt.c: 1213: else
  6367                           ;doprnt.c: 1214: c = prec;
  6368  000842  C11B  F11D         	movff	printf@prec,printf@c
  6369  000846                     l5500:
  6370                           
  6371                           ; BSR set to: 1
  6372                           ;doprnt.c: 1215: prec -= c;
  6373  000846  0101               	movlb	1	; () banked
  6374  000848  511D               	movf	printf@c& (0+255),w,b
  6375  00084A  0101               	movlb	1	; () banked
  6376  00084C  5F1B               	subwf	printf@prec& (0+255),f,b
  6377  00084E  0E00               	movlw	0
  6378  000850  0101               	movlb	1	; () banked
  6379  000852  BF1D               	btfsc	printf@c& (0+255),7,b
  6380  000854  0EFF               	movlw	255
  6381  000856  0101               	movlb	1	; () banked
  6382  000858  5B1C               	subwfb	(printf@prec+1)& (0+255),f,b
  6383                           
  6384                           ; BSR set to: 1
  6385                           ;doprnt.c: 1219: if(c)
  6386  00085A  0101               	movlb	1	; () banked
  6387  00085C  511D               	movf	printf@c& (0+255),w,b
  6388  00085E  0101               	movlb	1	; () banked
  6389  000860  B4D8               	btfsc	status,2,c
  6390  000862  D003               	goto	l5506
  6391                           
  6392                           ; BSR set to: 1
  6393                           ;doprnt.c: 1221: (putch('.') );
  6394  000864  0E2E               	movlw	46
  6395  000866  EC58  F02C         	call	_putch
  6396  00086A                     l5506:
  6397                           
  6398                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6399  00086A  0101               	movlb	1	; () banked
  6400  00086C  511D               	movf	printf@c& (0+255),w,b
  6401  00086E  EC81  F00F         	call	_scale
  6402  000872  C0B0  F100         	movff	?_scale,_printf$1354
  6403  000876  C0B1  F101         	movff	?_scale+1,_printf$1354+1
  6404  00087A  C0B2  F102         	movff	?_scale+2,_printf$1354+2
  6405                           
  6406                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6407  00087E  C114  F0A4         	movff	printf@fval,___ftmul@f2
  6408  000882  C115  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  6409  000886  C116  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  6410  00088A  C100  F0A1         	movff	_printf$1354,___ftmul@f1
  6411  00088E  C101  F0A2         	movff	_printf$1354+1,___ftmul@f1+1
  6412  000892  C102  F0A3         	movff	_printf$1354+2,___ftmul@f1+2
  6413  000896  EC5E  F01C         	call	___ftmul	;wreg free
  6414  00089A  C0A1  F0C6         	movff	?___ftmul,___fttol@f1
  6415  00089E  C0A2  F0C7         	movff	?___ftmul+1,___fttol@f1+1
  6416  0008A2  C0A3  F0C8         	movff	?___ftmul+2,___fttol@f1+2
  6417  0008A6  ECB3  F01D         	call	___fttol	;wreg free
  6418  0008AA  C0C6  F110         	movff	?___fttol,printf@val
  6419  0008AE  C0C7  F111         	movff	?___fttol+1,printf@val+1
  6420  0008B2  C0C8  F112         	movff	?___fttol+2,printf@val+2
  6421  0008B6  C0C9  F113         	movff	?___fttol+3,printf@val+3
  6422                           
  6423                           ;doprnt.c: 1228: while(c--) {
  6424  0008BA  D06E               	goto	l5516
  6425  0008BC                     l5510:
  6426                           
  6427                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6428  0008BC  C110  F080         	movff	printf@val,___lldiv@dividend
  6429  0008C0  C111  F081         	movff	printf@val+1,___lldiv@dividend+1
  6430  0008C4  C112  F082         	movff	printf@val+2,___lldiv@dividend+2
  6431  0008C8  C113  F083         	movff	printf@val+3,___lldiv@dividend+3
  6432  0008CC  0101               	movlb	1	; () banked
  6433  0008CE  511D               	movf	printf@c& (0+255),w,b
  6434  0008D0  0D04               	mullw	4
  6435  0008D2  0E29               	movlw	low _dpowers
  6436  0008D4  24F3               	addwf	prodl,w,c
  6437  0008D6  6EF6               	movwf	tblptrl,c
  6438  0008D8  0EFE               	movlw	high _dpowers
  6439  0008DA  20F4               	addwfc	prodh,w,c
  6440  0008DC  6EF7               	movwf	tblptrh,c
  6441  0008DE                     	if	0	;There are less than 3 active tblptr bytes
  6442  0008DE                     	endif
  6443  0008DE  0009               	tblrd		*+
  6444  0008E0  CFF5 F084          	movff	tablat,___lldiv@divisor
  6445  0008E4  0009               	tblrd		*+
  6446  0008E6  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  6447  0008EA  0009               	tblrd		*+
  6448  0008EC  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  6449  0008F0  000A               	tblrd		*-
  6450  0008F2  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  6451  0008F6  EC4F  F026         	call	___lldiv	;wreg free
  6452  0008FA  C080  F10A         	movff	?___lldiv,printf@tmpval
  6453  0008FE  C081  F10B         	movff	?___lldiv+1,printf@tmpval+1
  6454  000902  C082  F10C         	movff	?___lldiv+2,printf@tmpval+2
  6455  000906  C083  F10D         	movff	?___lldiv+3,printf@tmpval+3
  6456                           
  6457                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6458  00090A  C10A  F08D         	movff	printf@tmpval,___llmod@dividend
  6459  00090E  C10B  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  6460  000912  C10C  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  6461  000916  C10D  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  6462  00091A  0E0A               	movlw	10
  6463  00091C  0100               	movlb	0	; () banked
  6464  00091E  6F91               	movwf	___llmod@divisor& (0+255),b
  6465  000920  0E00               	movlw	0
  6466  000922  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  6467  000924  0E00               	movlw	0
  6468  000926  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  6469  000928  0E00               	movlw	0
  6470  00092A  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  6471  00092C  ECA4  F027         	call	___llmod	;wreg free
  6472  000930  C08D  F10A         	movff	?___llmod,printf@tmpval
  6473  000934  C08E  F10B         	movff	?___llmod+1,printf@tmpval+1
  6474  000938  C08F  F10C         	movff	?___llmod+2,printf@tmpval+2
  6475  00093C  C090  F10D         	movff	?___llmod+3,printf@tmpval+3
  6476                           
  6477                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6478  000940  0101               	movlb	1	; () banked
  6479  000942  510A               	movf	printf@tmpval& (0+255),w,b
  6480  000944  0F30               	addlw	48
  6481  000946  EC58  F02C         	call	_putch
  6482                           
  6483                           ;doprnt.c: 1232: val %= dpowers[c];
  6484  00094A  C110  F08D         	movff	printf@val,___llmod@dividend
  6485  00094E  C111  F08E         	movff	printf@val+1,___llmod@dividend+1
  6486  000952  C112  F08F         	movff	printf@val+2,___llmod@dividend+2
  6487  000956  C113  F090         	movff	printf@val+3,___llmod@dividend+3
  6488  00095A  0101               	movlb	1	; () banked
  6489  00095C  511D               	movf	printf@c& (0+255),w,b
  6490  00095E  0D04               	mullw	4
  6491  000960  0E29               	movlw	low _dpowers
  6492  000962  24F3               	addwf	prodl,w,c
  6493  000964  6EF6               	movwf	tblptrl,c
  6494  000966  0EFE               	movlw	high _dpowers
  6495  000968  20F4               	addwfc	prodh,w,c
  6496  00096A  6EF7               	movwf	tblptrh,c
  6497  00096C                     	if	0	;There are less than 3 active tblptr bytes
  6498  00096C                     	endif
  6499  00096C  0009               	tblrd		*+
  6500  00096E  CFF5 F091          	movff	tablat,___llmod@divisor
  6501  000972  0009               	tblrd		*+
  6502  000974  CFF5 F092          	movff	tablat,___llmod@divisor+1
  6503  000978  0009               	tblrd		*+
  6504  00097A  CFF5 F093          	movff	tablat,___llmod@divisor+2
  6505  00097E  000A               	tblrd		*-
  6506  000980  CFF5 F094          	movff	tablat,___llmod@divisor+3
  6507  000984  ECA4  F027         	call	___llmod	;wreg free
  6508  000988  C08D  F110         	movff	?___llmod,printf@val
  6509  00098C  C08E  F111         	movff	?___llmod+1,printf@val+1
  6510  000990  C08F  F112         	movff	?___llmod+2,printf@val+2
  6511  000994  C090  F113         	movff	?___llmod+3,printf@val+3
  6512  000998                     l5516:
  6513  000998  0101               	movlb	1	; () banked
  6514  00099A  071D               	decf	printf@c& (0+255),f,b
  6515  00099C  0101               	movlb	1	; () banked
  6516  00099E  291D               	incf	printf@c& (0+255),w,b
  6517  0009A0  B4D8               	btfsc	status,2,c
  6518  0009A2  D008               	goto	l5522
  6519  0009A4  D78B               	goto	l5510
  6520  0009A6                     l5518:
  6521                           
  6522                           ; BSR set to: 1
  6523                           ;doprnt.c: 1236: (putch('0') );
  6524  0009A6  0E30               	movlw	48
  6525  0009A8  EC58  F02C         	call	_putch
  6526                           
  6527                           ;doprnt.c: 1237: prec--;
  6528  0009AC  0101               	movlb	1	; () banked
  6529  0009AE  071B               	decf	printf@prec& (0+255),f,b
  6530  0009B0  A0D8               	btfss	status,0,c
  6531  0009B2  071C               	decf	(printf@prec+1)& (0+255),f,b
  6532  0009B4                     l5522:
  6533                           
  6534                           ; BSR set to: 1
  6535  0009B4  0101               	movlb	1	; () banked
  6536  0009B6  511B               	movf	printf@prec& (0+255),w,b
  6537  0009B8  0101               	movlb	1	; () banked
  6538  0009BA  111C               	iorwf	(printf@prec+1)& (0+255),w,b
  6539  0009BC  B4D8               	btfsc	status,2,c
  6540  0009BE  D22E               	goto	l5650
  6541  0009C0  D7F2               	goto	l5518
  6542  0009C2                     l729:
  6543                           
  6544                           ; BSR set to: 1
  6545                           ;doprnt.c: 1246: }
  6546                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6547  0009C2  0101               	movlb	1	; () banked
  6548  0009C4  BF19               	btfsc	printf@flag& (0+255),7,b
  6549  0009C6  D034               	goto	l778
  6550                           
  6551                           ; BSR set to: 1
  6552                           ;doprnt.c: 1253: {
  6553                           ;doprnt.c: 1255: if(flag & 0x10)
  6554  0009C8  0101               	movlb	1	; () banked
  6555  0009CA  A919               	btfss	printf@flag& (0+255),4,b
  6556  0009CC  D00E               	goto	l5530
  6557                           
  6558                           ; BSR set to: 1
  6559                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  6560  0009CE  C108  FFD9         	movff	printf@ap,fsr2l
  6561  0009D2  C109  FFDA         	movff	printf@ap+1,fsr2h
  6562  0009D6  CFDE F110          	movff	postinc2,printf@val
  6563  0009DA  CFDE F111          	movff	postinc2,printf@val+1
  6564  0009DE  CFDE F112          	movff	postinc2,printf@val+2
  6565  0009E2  CFDE F113          	movff	postinc2,printf@val+3
  6566                           
  6567                           ; BSR set to: 1
  6568  0009E6  0E04               	movlw	4
  6569  0009E8  D00F               	goto	L2
  6570  0009EA                     l5530:
  6571                           
  6572                           ; BSR set to: 1
  6573                           ;doprnt.c: 1257: else
  6574                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6575  0009EA  C108  FFD9         	movff	printf@ap,fsr2l
  6576  0009EE  C109  FFDA         	movff	printf@ap+1,fsr2h
  6577  0009F2  CFDE F110          	movff	postinc2,printf@val
  6578  0009F6  CFDD F111          	movff	postdec2,printf@val+1
  6579  0009FA  0101               	movlb	1	; () banked
  6580  0009FC  0E00               	movlw	0
  6581  0009FE  BF11               	btfsc	(printf@val+1)& (0+255),7,b
  6582  000A00  0EFF               	movlw	-1
  6583  000A02  6F12               	movwf	(printf@val+2)& (0+255),b
  6584  000A04  6F13               	movwf	(printf@val+3)& (0+255),b
  6585                           
  6586                           ; BSR set to: 1
  6587  000A06  0E02               	movlw	2
  6588  000A08                     L2:
  6589  000A08  0101               	movlb	1	; () banked
  6590  000A0A  2708               	addwf	printf@ap& (0+255),f,b
  6591  000A0C  0E00               	movlw	0
  6592  000A0E  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  6593                           
  6594                           ; BSR set to: 1
  6595                           ;doprnt.c: 1261: if((long)val < 0) {
  6596                           
  6597                           ; BSR set to: 1
  6598  000A10  0101               	movlb	1	; () banked
  6599  000A12  AF13               	btfss	(printf@val+3)& (0+255),7,b
  6600  000A14  D032               	goto	l5548
  6601                           
  6602                           ; BSR set to: 1
  6603                           ;doprnt.c: 1262: flag |= 0x03;
  6604  000A16  0E03               	movlw	3
  6605  000A18  0101               	movlb	1	; () banked
  6606  000A1A  1319               	iorwf	printf@flag& (0+255),f,b
  6607                           
  6608                           ; BSR set to: 1
  6609                           ;doprnt.c: 1263: val = -val;
  6610  000A1C  0101               	movlb	1	; () banked
  6611  000A1E  1F13               	comf	(printf@val+3)& (0+255),f,b
  6612  000A20  1F12               	comf	(printf@val+2)& (0+255),f,b
  6613  000A22  1F11               	comf	(printf@val+1)& (0+255),f,b
  6614  000A24  6D10               	negf	printf@val& (0+255),b
  6615  000A26  0E00               	movlw	0
  6616  000A28  2311               	addwfc	(printf@val+1)& (0+255),f,b
  6617  000A2A  2312               	addwfc	(printf@val+2)& (0+255),f,b
  6618  000A2C  2313               	addwfc	(printf@val+3)& (0+255),f,b
  6619                           
  6620                           ; BSR set to: 1
  6621                           ;doprnt.c: 1264: }
  6622                           ;doprnt.c: 1266: }
  6623  000A2E  D025               	goto	l5548
  6624  000A30                     l778:
  6625                           
  6626                           ; BSR set to: 1
  6627                           ;doprnt.c: 1268: else
  6628                           ;doprnt.c: 1273: {
  6629                           ;doprnt.c: 1281: if(flag & 0x10)
  6630  000A30  0101               	movlb	1	; () banked
  6631  000A32  A919               	btfss	printf@flag& (0+255),4,b
  6632  000A34  D00E               	goto	l5544
  6633                           
  6634                           ; BSR set to: 1
  6635                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6636  000A36  C108  FFD9         	movff	printf@ap,fsr2l
  6637  000A3A  C109  FFDA         	movff	printf@ap+1,fsr2h
  6638  000A3E  CFDE F110          	movff	postinc2,printf@val
  6639  000A42  CFDE F111          	movff	postinc2,printf@val+1
  6640  000A46  CFDE F112          	movff	postinc2,printf@val+2
  6641  000A4A  CFDE F113          	movff	postinc2,printf@val+3
  6642                           
  6643                           ; BSR set to: 1
  6644  000A4E  0E04               	movlw	4
  6645  000A50  D010               	goto	L3
  6646  000A52                     l5544:
  6647                           
  6648                           ; BSR set to: 1
  6649                           ;doprnt.c: 1283: else
  6650                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6651  000A52  C108  FFD9         	movff	printf@ap,fsr2l
  6652  000A56  C109  FFDA         	movff	printf@ap+1,fsr2h
  6653  000A5A  CFDE F0DF          	movff	postinc2,??_printf
  6654  000A5E  CFDD F0E0          	movff	postdec2,??_printf+1
  6655  000A62  C0DF  F110         	movff	??_printf,printf@val
  6656  000A66  C0E0  F111         	movff	??_printf+1,printf@val+1
  6657  000A6A  0101               	movlb	1	; () banked
  6658  000A6C  6B12               	clrf	(printf@val+2)& (0+255),b
  6659  000A6E  6B13               	clrf	(printf@val+3)& (0+255),b
  6660                           
  6661                           ; BSR set to: 1
  6662  000A70  0E02               	movlw	2
  6663  000A72                     L3:
  6664  000A72  0101               	movlb	1	; () banked
  6665  000A74  2708               	addwf	printf@ap& (0+255),f,b
  6666  000A76  0E00               	movlw	0
  6667  000A78  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  6668  000A7A                     l5548:
  6669                           
  6670                           ; BSR set to: 1
  6671                           ;doprnt.c: 1287: }
  6672                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6673  000A7A  0101               	movlb	1	; () banked
  6674  000A7C  511B               	movf	printf@prec& (0+255),w,b
  6675  000A7E  0101               	movlb	1	; () banked
  6676  000A80  111C               	iorwf	(printf@prec+1)& (0+255),w,b
  6677  000A82  A4D8               	btfss	status,2,c
  6678  000A84  D05A               	goto	l5584
  6679                           
  6680                           ; BSR set to: 1
  6681  000A86  0101               	movlb	1	; () banked
  6682  000A88  5110               	movf	printf@val& (0+255),w,b
  6683  000A8A  0101               	movlb	1	; () banked
  6684  000A8C  1111               	iorwf	(printf@val+1)& (0+255),w,b
  6685  000A8E  0101               	movlb	1	; () banked
  6686  000A90  1112               	iorwf	(printf@val+2)& (0+255),w,b
  6687  000A92  0101               	movlb	1	; () banked
  6688  000A94  1113               	iorwf	(printf@val+3)& (0+255),w,b
  6689  000A96  A4D8               	btfss	status,2,c
  6690  000A98  D050               	goto	l5584
  6691                           
  6692                           ; BSR set to: 1
  6693                           ;doprnt.c: 1291: prec++;
  6694  000A9A  0101               	movlb	1	; () banked
  6695  000A9C  4B1B               	infsnz	printf@prec& (0+255),f,b
  6696  000A9E  2B1C               	incf	(printf@prec+1)& (0+255),f,b
  6697                           
  6698                           ; BSR set to: 1
  6699                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6700  000AA0  D04C               	goto	l5584
  6701  000AA2                     l5554:
  6702                           
  6703                           ; BSR set to: 1
  6704                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6705  000AA2  0E01               	movlw	1
  6706  000AA4  0101               	movlb	1	; () banked
  6707  000AA6  6F1D               	movwf	printf@c& (0+255),b
  6708  000AA8                     l5556:
  6709                           
  6710                           ; BSR set to: 1
  6711  000AA8  0E0A               	movlw	10
  6712  000AAA  0101               	movlb	1	; () banked
  6713  000AAC  191D               	xorwf	printf@c& (0+255),w,b
  6714  000AAE  B4D8               	btfsc	status,2,c
  6715  000AB0  D04D               	goto	l5586
  6716                           
  6717                           ; BSR set to: 1
  6718                           ;doprnt.c: 1306: if(val < dpowers[c])
  6719                           
  6720                           ; BSR set to: 1
  6721                           
  6722                           ; BSR set to: 1
  6723  000AB2  0101               	movlb	1	; () banked
  6724  000AB4  511D               	movf	printf@c& (0+255),w,b
  6725  000AB6  0D04               	mullw	4
  6726  000AB8  0E29               	movlw	low _dpowers
  6727  000ABA  24F3               	addwf	prodl,w,c
  6728  000ABC  6EF6               	movwf	tblptrl,c
  6729  000ABE  0EFE               	movlw	high _dpowers
  6730  000AC0  20F4               	addwfc	prodh,w,c
  6731  000AC2  6EF7               	movwf	tblptrh,c
  6732  000AC4                     	if	0	;There are less than 3 active tblptr bytes
  6733  000AC4                     	endif
  6734  000AC4  0009               	tblrd		*+
  6735  000AC6  50F5               	movf	tablat,w,c
  6736  000AC8  0101               	movlb	1	; () banked
  6737  000ACA  5D10               	subwf	printf@val& (0+255),w,b
  6738  000ACC  0009               	tblrd		*+
  6739  000ACE  50F5               	movf	tablat,w,c
  6740  000AD0  0101               	movlb	1	; () banked
  6741  000AD2  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6742  000AD4  0009               	tblrd		*+
  6743  000AD6  50F5               	movf	tablat,w,c
  6744  000AD8  0101               	movlb	1	; () banked
  6745  000ADA  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6746  000ADC  0009               	tblrd		*+
  6747  000ADE  50F5               	movf	tablat,w,c
  6748  000AE0  0101               	movlb	1	; () banked
  6749  000AE2  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6750  000AE4  A0D8               	btfss	status,0,c
  6751  000AE6  D032               	goto	l5586
  6752                           
  6753                           ; BSR set to: 1
  6754                           
  6755                           ; BSR set to: 1
  6756                           
  6757                           ; BSR set to: 1
  6758                           ;doprnt.c: 1307: break;
  6759  000AE8  0101               	movlb	1	; () banked
  6760  000AEA  2B1D               	incf	printf@c& (0+255),f,b
  6761  000AEC  D7DD               	goto	l5556
  6762  000AEE                     l5568:
  6763                           
  6764                           ; BSR set to: 1
  6765                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6766  000AEE  0E01               	movlw	1
  6767  000AF0  0101               	movlb	1	; () banked
  6768  000AF2  6F1D               	movwf	printf@c& (0+255),b
  6769  000AF4                     l5570:
  6770                           
  6771                           ; BSR set to: 1
  6772  000AF4  0E08               	movlw	8
  6773  000AF6  0101               	movlb	1	; () banked
  6774  000AF8  191D               	xorwf	printf@c& (0+255),w,b
  6775  000AFA  B4D8               	btfsc	status,2,c
  6776  000AFC  D027               	goto	l5586
  6777                           
  6778                           ; BSR set to: 1
  6779                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6780                           
  6781                           ; BSR set to: 1
  6782                           
  6783                           ; BSR set to: 1
  6784  000AFE  0101               	movlb	1	; () banked
  6785  000B00  511D               	movf	printf@c& (0+255),w,b
  6786  000B02  0D04               	mullw	4
  6787  000B04  0E9F               	movlw	low _hexpowers
  6788  000B06  24F3               	addwf	prodl,w,c
  6789  000B08  6EF6               	movwf	tblptrl,c
  6790  000B0A  0EFE               	movlw	high _hexpowers
  6791  000B0C  20F4               	addwfc	prodh,w,c
  6792  000B0E  6EF7               	movwf	tblptrh,c
  6793  000B10                     	if	0	;There are less than 3 active tblptr bytes
  6794  000B10                     	endif
  6795  000B10  0009               	tblrd		*+
  6796  000B12  50F5               	movf	tablat,w,c
  6797  000B14  0101               	movlb	1	; () banked
  6798  000B16  5D10               	subwf	printf@val& (0+255),w,b
  6799  000B18  0009               	tblrd		*+
  6800  000B1A  50F5               	movf	tablat,w,c
  6801  000B1C  0101               	movlb	1	; () banked
  6802  000B1E  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6803  000B20  0009               	tblrd		*+
  6804  000B22  50F5               	movf	tablat,w,c
  6805  000B24  0101               	movlb	1	; () banked
  6806  000B26  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6807  000B28  0009               	tblrd		*+
  6808  000B2A  50F5               	movf	tablat,w,c
  6809  000B2C  0101               	movlb	1	; () banked
  6810  000B2E  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6811  000B30  A0D8               	btfss	status,0,c
  6812  000B32  D00C               	goto	l5586
  6813                           
  6814                           ; BSR set to: 1
  6815                           
  6816                           ; BSR set to: 1
  6817                           
  6818                           ; BSR set to: 1
  6819                           ;doprnt.c: 1318: break;
  6820  000B34  0101               	movlb	1	; () banked
  6821  000B36  2B1D               	incf	printf@c& (0+255),f,b
  6822  000B38  D7DD               	goto	l5570
  6823  000B3A                     l5584:
  6824                           
  6825                           ; BSR set to: 1
  6826  000B3A  0101               	movlb	1	; () banked
  6827  000B3C  5119               	movf	printf@flag& (0+255),w,b
  6828  000B3E  0B80               	andlw	128
  6829                           
  6830                           ; Switch size 1, requested type "space"
  6831                           ; Number of cases is 2, Range of values is 0 to 128
  6832                           ; switch strategies available:
  6833                           ; Name         Instructions Cycles
  6834                           ; simple_byte            7     4 (average)
  6835                           ;	Chosen strategy is simple_byte
  6836  000B40  0A00               	xorlw	0	; case 0
  6837  000B42  B4D8               	btfsc	status,2,c
  6838  000B44  D7AE               	goto	l5554
  6839  000B46  0A80               	xorlw	128	; case 128
  6840  000B48  B4D8               	btfsc	status,2,c
  6841  000B4A  D7D1               	goto	l5568
  6842  000B4C                     l5586:
  6843                           
  6844                           ; BSR set to: 1
  6845                           ;doprnt.c: 1339: if(c < prec)
  6846  000B4C  0E80               	movlw	128
  6847  000B4E  0101               	movlb	1	; () banked
  6848  000B50  BF1D               	btfsc	printf@c& (0+255),7,b
  6849  000B52  0E7F               	movlw	127
  6850  000B54  0100               	movlb	0	; () banked
  6851  000B56  6FDF               	movwf	??_printf& (0+255),b
  6852  000B58  0101               	movlb	1	; () banked
  6853  000B5A  511B               	movf	printf@prec& (0+255),w,b
  6854  000B5C  0101               	movlb	1	; () banked
  6855  000B5E  5D1D               	subwf	printf@c& (0+255),w,b
  6856  000B60  0101               	movlb	1	; () banked
  6857  000B62  511C               	movf	(printf@prec+1)& (0+255),w,b
  6858  000B64  0A80               	xorlw	128
  6859  000B66  0100               	movlb	0	; () banked
  6860  000B68  59DF               	subwfb	??_printf& (0+255),w,b
  6861  000B6A  B0D8               	btfsc	status,0,c
  6862  000B6C  D003               	goto	l5590
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;doprnt.c: 1340: c = prec;
  6866  000B6E  C11B  F11D         	movff	printf@prec,printf@c
  6867  000B72  D018               	goto	l5594
  6868  000B74                     l5590:
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;doprnt.c: 1341: else if(prec < c)
  6872  000B74  0101               	movlb	1	; () banked
  6873  000B76  511C               	movf	(printf@prec+1)& (0+255),w,b
  6874  000B78  0A80               	xorlw	128
  6875  000B7A  0100               	movlb	0	; () banked
  6876  000B7C  6FDF               	movwf	??_printf& (0+255),b
  6877  000B7E  0101               	movlb	1	; () banked
  6878  000B80  511D               	movf	printf@c& (0+255),w,b
  6879  000B82  0101               	movlb	1	; () banked
  6880  000B84  5D1B               	subwf	printf@prec& (0+255),w,b
  6881  000B86  0E80               	movlw	128
  6882  000B88  0101               	movlb	1	; () banked
  6883  000B8A  BF1D               	btfsc	printf@c& (0+255),7,b
  6884  000B8C  0E7F               	movlw	127
  6885  000B8E  0100               	movlb	0	; () banked
  6886  000B90  59DF               	subwfb	??_printf& (0+255),w,b
  6887  000B92  B0D8               	btfsc	status,0,c
  6888  000B94  D007               	goto	l5594
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;doprnt.c: 1342: prec = c;
  6892  000B96  0101               	movlb	1	; () banked
  6893  000B98  511D               	movf	printf@c& (0+255),w,b
  6894  000B9A  0101               	movlb	1	; () banked
  6895  000B9C  6F1B               	movwf	printf@prec& (0+255),b
  6896  000B9E  6B1C               	clrf	(printf@prec+1)& (0+255),b
  6897  000BA0  BF1B               	btfsc	printf@prec& (0+255),7,b
  6898  000BA2  071C               	decf	(printf@prec+1)& (0+255),f,b
  6899  000BA4                     l5594:
  6900                           
  6901                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6902  000BA4  0101               	movlb	1	; () banked
  6903  000BA6  5117               	movf	printf@width& (0+255),w,b
  6904  000BA8  0101               	movlb	1	; () banked
  6905  000BAA  1118               	iorwf	(printf@width+1)& (0+255),w,b
  6906  000BAC  B4D8               	btfsc	status,2,c
  6907  000BAE  D014               	goto	l5600
  6908                           
  6909                           ; BSR set to: 1
  6910  000BB0  0E03               	movlw	3
  6911  000BB2  0101               	movlb	1	; () banked
  6912  000BB4  1519               	andwf	printf@flag& (0+255),w,b
  6913  000BB6  0100               	movlb	0	; () banked
  6914  000BB8  6FDF               	movwf	??_printf& (0+255),b
  6915  000BBA  0E00               	movlw	0
  6916  000BBC  0101               	movlb	1	; () banked
  6917  000BBE  151A               	andwf	(printf@flag+1)& (0+255),w,b
  6918  000BC0  0100               	movlb	0	; () banked
  6919  000BC2  6FE0               	movwf	(??_printf+1)& (0+255),b
  6920  000BC4  0100               	movlb	0	; () banked
  6921  000BC6  51DF               	movf	??_printf& (0+255),w,b
  6922  000BC8  0100               	movlb	0	; () banked
  6923  000BCA  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  6924  000BCC  B4D8               	btfsc	status,2,c
  6925  000BCE  D004               	goto	l5600
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;doprnt.c: 1346: width--;
  6929  000BD0  0101               	movlb	1	; () banked
  6930  000BD2  0717               	decf	printf@width& (0+255),f,b
  6931  000BD4  A0D8               	btfss	status,0,c
  6932  000BD6  0718               	decf	(printf@width+1)& (0+255),f,b
  6933  000BD8                     l5600:
  6934                           
  6935                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6936  000BD8  0101               	movlb	1	; () banked
  6937  000BDA  AD1A               	btfss	(printf@flag+1)& (0+255),6,b
  6938  000BDC  D01E               	goto	l5608
  6939                           
  6940                           ; BSR set to: 1
  6941                           ;doprnt.c: 1349: if(width > prec)
  6942  000BDE  0101               	movlb	1	; () banked
  6943  000BE0  5117               	movf	printf@width& (0+255),w,b
  6944  000BE2  0101               	movlb	1	; () banked
  6945  000BE4  5D1B               	subwf	printf@prec& (0+255),w,b
  6946  000BE6  0101               	movlb	1	; () banked
  6947  000BE8  511C               	movf	(printf@prec+1)& (0+255),w,b
  6948  000BEA  0A80               	xorlw	128
  6949  000BEC  0100               	movlb	0	; () banked
  6950  000BEE  6FDF               	movwf	??_printf& (0+255),b
  6951  000BF0  0101               	movlb	1	; () banked
  6952  000BF2  5118               	movf	(printf@width+1)& (0+255),w,b
  6953  000BF4  0A80               	xorlw	128
  6954  000BF6  0100               	movlb	0	; () banked
  6955  000BF8  59DF               	subwfb	??_printf& (0+255),w,b
  6956  000BFA  B0D8               	btfsc	status,0,c
  6957  000BFC  D009               	goto	l5606
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;doprnt.c: 1350: width -= prec;
  6961  000BFE  0101               	movlb	1	; () banked
  6962  000C00  511B               	movf	printf@prec& (0+255),w,b
  6963  000C02  0101               	movlb	1	; () banked
  6964  000C04  5F17               	subwf	printf@width& (0+255),f,b
  6965  000C06  0101               	movlb	1	; () banked
  6966  000C08  511C               	movf	(printf@prec+1)& (0+255),w,b
  6967  000C0A  0101               	movlb	1	; () banked
  6968  000C0C  5B18               	subwfb	(printf@width+1)& (0+255),f,b
  6969  000C0E  D005               	goto	l5608
  6970  000C10                     l5606:
  6971                           
  6972                           ;doprnt.c: 1351: else
  6973                           ;doprnt.c: 1352: width = 0;
  6974  000C10  0E00               	movlw	0
  6975  000C12  0101               	movlb	1	; () banked
  6976  000C14  6F18               	movwf	(printf@width+1)& (0+255),b
  6977  000C16  0E00               	movlw	0
  6978  000C18  6F17               	movwf	printf@width& (0+255),b
  6979  000C1A                     l5608:
  6980                           
  6981                           ; BSR set to: 1
  6982                           ;doprnt.c: 1353: }
  6983                           ;doprnt.c: 1381: if(width > c)
  6984  000C1A  0E80               	movlw	128
  6985  000C1C  0101               	movlb	1	; () banked
  6986  000C1E  BF1D               	btfsc	printf@c& (0+255),7,b
  6987  000C20  0E7F               	movlw	127
  6988  000C22  0100               	movlb	0	; () banked
  6989  000C24  6FDF               	movwf	??_printf& (0+255),b
  6990  000C26  0101               	movlb	1	; () banked
  6991  000C28  5117               	movf	printf@width& (0+255),w,b
  6992  000C2A  0101               	movlb	1	; () banked
  6993  000C2C  5D1D               	subwf	printf@c& (0+255),w,b
  6994  000C2E  0101               	movlb	1	; () banked
  6995  000C30  5118               	movf	(printf@width+1)& (0+255),w,b
  6996  000C32  0A80               	xorlw	128
  6997  000C34  0100               	movlb	0	; () banked
  6998  000C36  59DF               	subwfb	??_printf& (0+255),w,b
  6999  000C38  B0D8               	btfsc	status,0,c
  7000  000C3A  D00B               	goto	l5612
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;doprnt.c: 1382: width -= c;
  7004  000C3C  0101               	movlb	1	; () banked
  7005  000C3E  511D               	movf	printf@c& (0+255),w,b
  7006  000C40  0101               	movlb	1	; () banked
  7007  000C42  5F17               	subwf	printf@width& (0+255),f,b
  7008  000C44  0E00               	movlw	0
  7009  000C46  0101               	movlb	1	; () banked
  7010  000C48  BF1D               	btfsc	printf@c& (0+255),7,b
  7011  000C4A  0EFF               	movlw	255
  7012  000C4C  0101               	movlb	1	; () banked
  7013  000C4E  5B18               	subwfb	(printf@width+1)& (0+255),f,b
  7014  000C50  D005               	goto	l5614
  7015  000C52                     l5612:
  7016                           
  7017                           ;doprnt.c: 1383: else
  7018                           ;doprnt.c: 1384: width = 0;
  7019  000C52  0E00               	movlw	0
  7020  000C54  0101               	movlb	1	; () banked
  7021  000C56  6F18               	movwf	(printf@width+1)& (0+255),b
  7022  000C58  0E00               	movlw	0
  7023  000C5A  6F17               	movwf	printf@width& (0+255),b
  7024  000C5C                     l5614:
  7025                           
  7026                           ; BSR set to: 1
  7027                           ;doprnt.c: 1387: if(flag & 0x04) {
  7028  000C5C  0101               	movlb	1	; () banked
  7029  000C5E  A519               	btfss	printf@flag& (0+255),2,b
  7030  000C60  D021               	goto	l5626
  7031                           
  7032                           ; BSR set to: 1
  7033                           ;doprnt.c: 1392: if(flag & 0x03)
  7034  000C62  0E03               	movlw	3
  7035  000C64  0101               	movlb	1	; () banked
  7036  000C66  1519               	andwf	printf@flag& (0+255),w,b
  7037  000C68  0100               	movlb	0	; () banked
  7038  000C6A  6FDF               	movwf	??_printf& (0+255),b
  7039  000C6C  0E00               	movlw	0
  7040  000C6E  0101               	movlb	1	; () banked
  7041  000C70  151A               	andwf	(printf@flag+1)& (0+255),w,b
  7042  000C72  0100               	movlb	0	; () banked
  7043  000C74  6FE0               	movwf	(??_printf+1)& (0+255),b
  7044  000C76  0100               	movlb	0	; () banked
  7045  000C78  51DF               	movf	??_printf& (0+255),w,b
  7046  000C7A  0100               	movlb	0	; () banked
  7047  000C7C  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  7048  000C7E  B4D8               	btfsc	status,2,c
  7049  000C80  D003               	goto	l5620
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;doprnt.c: 1393: (putch('-') );
  7053  000C82  0E2D               	movlw	45
  7054  000C84  EC58  F02C         	call	_putch
  7055  000C88                     l5620:
  7056                           
  7057                           ;doprnt.c: 1415: if(width)
  7058  000C88  0101               	movlb	1	; () banked
  7059  000C8A  5117               	movf	printf@width& (0+255),w,b
  7060  000C8C  0101               	movlb	1	; () banked
  7061  000C8E  1118               	iorwf	(printf@width+1)& (0+255),w,b
  7062  000C90  B4D8               	btfsc	status,2,c
  7063  000C92  D0B9               	goto	l5648
  7064                           
  7065                           ; BSR set to: 1
  7066                           ;doprnt.c: 1417: (putch('0') );
  7067                           
  7068                           ; BSR set to: 1
  7069                           
  7070                           ;doprnt.c: 1416: do
  7071  000C94  0E30               	movlw	48
  7072  000C96  EC58  F02C         	call	_putch
  7073                           
  7074                           ;doprnt.c: 1418: while(--width);
  7075  000C9A  0101               	movlb	1	; () banked
  7076  000C9C  0717               	decf	printf@width& (0+255),f,b
  7077  000C9E  A0D8               	btfss	status,0,c
  7078  000CA0  0718               	decf	(printf@width+1)& (0+255),f,b
  7079  000CA2  D7F2               	goto	l5620
  7080  000CA4                     l5626:
  7081                           
  7082                           ; BSR set to: 1
  7083                           ;doprnt.c: 1422: {
  7084                           ;doprnt.c: 1424: if(width
  7085                           ;doprnt.c: 1428: )
  7086  000CA4  0101               	movlb	1	; () banked
  7087  000CA6  5117               	movf	printf@width& (0+255),w,b
  7088  000CA8  0101               	movlb	1	; () banked
  7089  000CAA  1118               	iorwf	(printf@width+1)& (0+255),w,b
  7090  000CAC  B4D8               	btfsc	status,2,c
  7091  000CAE  D00D               	goto	l5632
  7092  000CB0                     l5628:
  7093                           
  7094                           ; BSR set to: 1
  7095                           ;doprnt.c: 1430: (putch(' ') );
  7096  000CB0  0E20               	movlw	32
  7097  000CB2  EC58  F02C         	call	_putch
  7098                           
  7099                           ;doprnt.c: 1431: while(--width);
  7100  000CB6  0101               	movlb	1	; () banked
  7101  000CB8  0717               	decf	printf@width& (0+255),f,b
  7102  000CBA  A0D8               	btfss	status,0,c
  7103  000CBC  0718               	decf	(printf@width+1)& (0+255),f,b
  7104  000CBE  0101               	movlb	1	; () banked
  7105  000CC0  5117               	movf	printf@width& (0+255),w,b
  7106  000CC2  0101               	movlb	1	; () banked
  7107  000CC4  1118               	iorwf	(printf@width+1)& (0+255),w,b
  7108  000CC6  A4D8               	btfss	status,2,c
  7109  000CC8  D7F3               	goto	l5628
  7110  000CCA                     l5632:
  7111                           
  7112                           ; BSR set to: 1
  7113                           ;doprnt.c: 1438: if(flag & 0x03)
  7114  000CCA  0E03               	movlw	3
  7115  000CCC  0101               	movlb	1	; () banked
  7116  000CCE  1519               	andwf	printf@flag& (0+255),w,b
  7117  000CD0  0100               	movlb	0	; () banked
  7118  000CD2  6FDF               	movwf	??_printf& (0+255),b
  7119  000CD4  0E00               	movlw	0
  7120  000CD6  0101               	movlb	1	; () banked
  7121  000CD8  151A               	andwf	(printf@flag+1)& (0+255),w,b
  7122  000CDA  0100               	movlb	0	; () banked
  7123  000CDC  6FE0               	movwf	(??_printf+1)& (0+255),b
  7124  000CDE  0100               	movlb	0	; () banked
  7125  000CE0  51DF               	movf	??_printf& (0+255),w,b
  7126  000CE2  0100               	movlb	0	; () banked
  7127  000CE4  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  7128  000CE6  B4D8               	btfsc	status,2,c
  7129  000CE8  D08E               	goto	l5648
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;doprnt.c: 1439: (putch('-') );
  7133  000CEA  0E2D               	movlw	45
  7134  000CEC  EC58  F02C         	call	_putch
  7135                           
  7136                           ;doprnt.c: 1469: }
  7137                           ;doprnt.c: 1474: while(prec--) {
  7138  000CF0  D08A               	goto	l5648
  7139  000CF2                     l5636:
  7140                           
  7141                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7142  000CF2  C11B  F0DF         	movff	printf@prec,??_printf
  7143  000CF6  C11C  F0E0         	movff	printf@prec+1,??_printf+1
  7144  000CFA  0100               	movlb	0	; () banked
  7145  000CFC  90D8               	bcf	status,0,c
  7146  000CFE  37DF               	rlcf	??_printf& (0+255),f,b
  7147  000D00  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  7148  000D02  0100               	movlb	0	; () banked
  7149  000D04  90D8               	bcf	status,0,c
  7150  000D06  37DF               	rlcf	??_printf& (0+255),f,b
  7151  000D08  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  7152  000D0A  0E29               	movlw	low _dpowers
  7153  000D0C  0100               	movlb	0	; () banked
  7154  000D0E  25DF               	addwf	??_printf& (0+255),w,b
  7155  000D10  6EF6               	movwf	tblptrl,c
  7156  000D12  0EFE               	movlw	high _dpowers
  7157  000D14  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  7158  000D16  6EF7               	movwf	tblptrh,c
  7159  000D18                     	if	0	;There are less than 3 active tblptr bytes
  7160  000D18                     	endif
  7161  000D18  0009               	tblrd		*+
  7162  000D1A  CFF5 F084          	movff	tablat,___lldiv@divisor
  7163  000D1E  0009               	tblrd		*+
  7164  000D20  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  7165  000D24  0009               	tblrd		*+
  7166  000D26  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  7167  000D2A  000A               	tblrd		*-
  7168  000D2C  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  7169  000D30  C110  F080         	movff	printf@val,___lldiv@dividend
  7170  000D34  C111  F081         	movff	printf@val+1,___lldiv@dividend+1
  7171  000D38  C112  F082         	movff	printf@val+2,___lldiv@dividend+2
  7172  000D3C  C113  F083         	movff	printf@val+3,___lldiv@dividend+3
  7173  000D40  EC4F  F026         	call	___lldiv	;wreg free
  7174  000D44  C080  F08D         	movff	?___lldiv,___llmod@dividend
  7175  000D48  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  7176  000D4C  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  7177  000D50  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  7178  000D54  0E0A               	movlw	10
  7179  000D56  0100               	movlb	0	; () banked
  7180  000D58  6F91               	movwf	___llmod@divisor& (0+255),b
  7181  000D5A  0E00               	movlw	0
  7182  000D5C  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  7183  000D5E  0E00               	movlw	0
  7184  000D60  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  7185  000D62  0E00               	movlw	0
  7186  000D64  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  7187  000D66  ECA4  F027         	call	___llmod	;wreg free
  7188  000D6A  0100               	movlb	0	; () banked
  7189  000D6C  518D               	movf	?___llmod& (0+255),w,b
  7190  000D6E  0F30               	addlw	48
  7191  000D70  0101               	movlb	1	; () banked
  7192  000D72  6F1D               	movwf	printf@c& (0+255),b
  7193                           
  7194                           ;doprnt.c: 1491: break;
  7195  000D74  D044               	goto	l5646
  7196  000D76                     l5638:
  7197                           
  7198                           ; BSR set to: 1
  7199                           ;doprnt.c: 1499: {
  7200                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7201  000D76  C110  F080         	movff	printf@val,___lldiv@dividend
  7202  000D7A  C111  F081         	movff	printf@val+1,___lldiv@dividend+1
  7203  000D7E  C112  F082         	movff	printf@val+2,___lldiv@dividend+2
  7204  000D82  C113  F083         	movff	printf@val+3,___lldiv@dividend+3
  7205  000D86  C11B  F0DF         	movff	printf@prec,??_printf
  7206  000D8A  C11C  F0E0         	movff	printf@prec+1,??_printf+1
  7207  000D8E  0100               	movlb	0	; () banked
  7208  000D90  90D8               	bcf	status,0,c
  7209  000D92  37DF               	rlcf	??_printf& (0+255),f,b
  7210  000D94  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  7211  000D96  0100               	movlb	0	; () banked
  7212  000D98  90D8               	bcf	status,0,c
  7213  000D9A  37DF               	rlcf	??_printf& (0+255),f,b
  7214  000D9C  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  7215  000D9E  0E9F               	movlw	low _hexpowers
  7216  000DA0  0100               	movlb	0	; () banked
  7217  000DA2  25DF               	addwf	??_printf& (0+255),w,b
  7218  000DA4  6EF6               	movwf	tblptrl,c
  7219  000DA6  0EFE               	movlw	high _hexpowers
  7220  000DA8  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  7221  000DAA  6EF7               	movwf	tblptrh,c
  7222  000DAC                     	if	0	;There are less than 3 active tblptr bytes
  7223  000DAC                     	endif
  7224  000DAC  0009               	tblrd		*+
  7225  000DAE  CFF5 F084          	movff	tablat,___lldiv@divisor
  7226  000DB2  0009               	tblrd		*+
  7227  000DB4  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  7228  000DB8  0009               	tblrd		*+
  7229  000DBA  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  7230  000DBE  000A               	tblrd		*-
  7231  000DC0  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  7232  000DC4  EC4F  F026         	call	___lldiv	;wreg free
  7233  000DC8  0100               	movlb	0	; () banked
  7234  000DCA  5180               	movf	?___lldiv& (0+255),w,b
  7235  000DCC  0B0F               	andlw	15
  7236  000DCE  0101               	movlb	1	; () banked
  7237  000DD0  6F05               	movwf	printf@idx& (0+255),b
  7238                           
  7239                           ; BSR set to: 1
  7240                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7241  000DD2  0101               	movlb	1	; () banked
  7242  000DD4  5105               	movf	printf@idx& (0+255),w,b
  7243  000DD6  0D01               	mullw	1
  7244  000DD8  0E44               	movlw	low STR_19
  7245  000DDA  24F3               	addwf	prodl,w,c
  7246  000DDC  6EF6               	movwf	tblptrl,c
  7247  000DDE  0EFF               	movlw	high STR_19
  7248  000DE0  20F4               	addwfc	prodh,w,c
  7249  000DE2  6EF7               	movwf	tblptrh,c
  7250  000DE4                     	if	0	;There are less than 3 active tblptr bytes
  7251  000DE4                     	endif
  7252  000DE4  0008               	tblrd		*
  7253  000DE6  CFF5 F11D          	movff	tablat,printf@c
  7254                           
  7255                           ; BSR set to: 1
  7256                           ;doprnt.c: 1523: }
  7257                           
  7258                           ;doprnt.c: 1508: }
  7259                           ;doprnt.c: 1510: break;
  7260  000DEA  D009               	goto	l5646
  7261  000DEC                     l5644:
  7262  000DEC  0101               	movlb	1	; () banked
  7263  000DEE  5119               	movf	printf@flag& (0+255),w,b
  7264  000DF0  0B80               	andlw	128
  7265                           
  7266                           ; Switch size 1, requested type "space"
  7267                           ; Number of cases is 2, Range of values is 0 to 128
  7268                           ; switch strategies available:
  7269                           ; Name         Instructions Cycles
  7270                           ; simple_byte            7     4 (average)
  7271                           ;	Chosen strategy is simple_byte
  7272  000DF2  0A00               	xorlw	0	; case 0
  7273  000DF4  B4D8               	btfsc	status,2,c
  7274  000DF6  D77D               	goto	l5636
  7275  000DF8  0A80               	xorlw	128	; case 128
  7276  000DFA  B4D8               	btfsc	status,2,c
  7277  000DFC  D7BC               	goto	l5638
  7278  000DFE                     l5646:
  7279                           
  7280                           ; BSR set to: 1
  7281                           ;doprnt.c: 1524: (putch(c) );
  7282  000DFE  0101               	movlb	1	; () banked
  7283  000E00  511D               	movf	printf@c& (0+255),w,b
  7284  000E02  EC58  F02C         	call	_putch
  7285  000E06                     l5648:
  7286  000E06  0101               	movlb	1	; () banked
  7287  000E08  071B               	decf	printf@prec& (0+255),f,b
  7288  000E0A  A0D8               	btfss	status,0,c
  7289  000E0C  071C               	decf	(printf@prec+1)& (0+255),f,b
  7290  000E0E  0101               	movlb	1	; () banked
  7291  000E10  291B               	incf	printf@prec& (0+255),w,b
  7292  000E12  E1EC               	bnz	l5644
  7293  000E14  0101               	movlb	1	; () banked
  7294  000E16  291C               	incf	(printf@prec+1)& (0+255),w,b
  7295  000E18  A4D8               	btfss	status,2,c
  7296  000E1A  D7E8               	goto	l5644
  7297  000E1C                     l5650:
  7298  000E1C  C0D5  FFF6         	movff	printf@f,tblptrl
  7299  000E20  C0D6  FFF7         	movff	printf@f+1,tblptrh
  7300  000E24  0100               	movlb	0	; () banked
  7301  000E26  4BD5               	infsnz	printf@f& (0+255),f,b
  7302  000E28  2BD6               	incf	(printf@f+1)& (0+255),f,b
  7303  000E2A                     	if	0	;tblptru may be non-zero
  7304  000E2A                     	endif
  7305  000E2A                     	if	0	;tblptru may be non-zero
  7306  000E2A                     	endif
  7307  000E2A  0008               	tblrd		*
  7308  000E2C  CFF5 F11D          	movff	tablat,printf@c
  7309  000E30  0101               	movlb	1	; () banked
  7310  000E32  511D               	movf	printf@c& (0+255),w,b
  7311  000E34  B4D8               	btfsc	status,2,c
  7312  000E36  0012               	return	
  7313  000E38  EF11  F000         	goto	l5284
  7314  000E3C                     __end_of_printf:
  7315                           	opt stack 0
  7316                           tblptru	equ	0xFF8
  7317                           tblptrh	equ	0xFF7
  7318                           tblptrl	equ	0xFF6
  7319                           tablat	equ	0xFF5
  7320                           prodh	equ	0xFF4
  7321                           prodl	equ	0xFF3
  7322                           intcon	equ	0xFF2
  7323                           postinc0	equ	0xFEE
  7324                           wreg	equ	0xFE8
  7325                           postdec1	equ	0xFE5
  7326                           fsr1l	equ	0xFE1
  7327                           indf2	equ	0xFDF
  7328                           postinc2	equ	0xFDE
  7329                           postdec2	equ	0xFDD
  7330                           fsr2h	equ	0xFDA
  7331                           fsr2l	equ	0xFD9
  7332                           status	equ	0xFD8
  7333                           
  7334 ;; *************** function _scale *****************
  7335 ;; Defined at:
  7336 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7337 ;; Parameters:    Size  Location     Type
  7338 ;;  scl             1    wreg     char 
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  scl             1   54[BANK0 ] char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  3   48[BANK0 ] char 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7350 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;Total ram usage:        7 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    8
  7357 ;; This function calls:
  7358 ;;		___awdiv
  7359 ;;		___awmod
  7360 ;;		___ftmul
  7361 ;;		___wmul
  7362 ;; This function is called by:
  7363 ;;		_printf
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text16
  7368  001F02                     __ptext16:
  7369                           	opt stack 0
  7370  001F02                     _scale:
  7371                           	opt stack 20
  7372                           
  7373                           ; BSR set to: 1
  7374                           ;incstack = 0
  7375                           ;scale@scl stored from wreg
  7376  001F02  0100               	movlb	0	; () banked
  7377  001F04  6FB6               	movwf	scale@scl& (0+255),b
  7378                           
  7379                           ;doprnt.c: 428: if(scl < 0) {
  7380  001F06  0100               	movlb	0	; () banked
  7381  001F08  AFB6               	btfss	scale@scl& (0+255),7,b
  7382  001F0A  D12A               	goto	l4892
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;doprnt.c: 429: scl = -scl;
  7386  001F0C  0100               	movlb	0	; () banked
  7387  001F0E  6DB6               	negf	scale@scl& (0+255),b
  7388                           
  7389                           ;doprnt.c: 430: if(scl>=110)
  7390  001F10  0100               	movlb	0	; () banked
  7391  001F12  51B6               	movf	scale@scl& (0+255),w,b
  7392  001F14  0A80               	xorlw	128
  7393  001F16  0F12               	addlw	-238
  7394  001F18  A0D8               	btfss	status,0,c
  7395  001F1A  D0AC               	goto	l4882
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7399  001F1C  0E00               	movlw	0
  7400  001F1E  0100               	movlb	0	; () banked
  7401  001F20  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7402  001F22  0E03               	movlw	3
  7403  001F24  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7404  001F26  0E00               	movlw	0
  7405  001F28  0100               	movlb	0	; () banked
  7406  001F2A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7407  001F2C  0E0A               	movlw	10
  7408  001F2E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7409  001F30  0E00               	movlw	0
  7410  001F32  0100               	movlb	0	; () banked
  7411  001F34  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7412  001F36  0E64               	movlw	100
  7413  001F38  6F82               	movwf	___awmod@divisor& (0+255),b
  7414  001F3A  0100               	movlb	0	; () banked
  7415  001F3C  51B6               	movf	scale@scl& (0+255),w,b
  7416  001F3E  0100               	movlb	0	; () banked
  7417  001F40  6F80               	movwf	___awmod@dividend& (0+255),b
  7418  001F42  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7419  001F44  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7420  001F46  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7421  001F48  EC04  F027         	call	___awmod	;wreg free
  7422  001F4C  C080  F086         	movff	?___awmod,___awdiv@dividend
  7423  001F50  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7424  001F54  ECF0  F025         	call	___awdiv	;wreg free
  7425  001F58  0E09               	movlw	9
  7426  001F5A  0100               	movlb	0	; () banked
  7427  001F5C  2586               	addwf	?___awdiv& (0+255),w,b
  7428  001F5E  0100               	movlb	0	; () banked
  7429  001F60  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7430  001F62  0E00               	movlw	0
  7431  001F64  0100               	movlb	0	; () banked
  7432  001F66  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7433  001F68  0100               	movlb	0	; () banked
  7434  001F6A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7435  001F6C  ECCD  F02B         	call	___wmul	;wreg free
  7436  001F70  0E51               	movlw	low __npowers_
  7437  001F72  0100               	movlb	0	; () banked
  7438  001F74  258E               	addwf	?___wmul& (0+255),w,b
  7439  001F76  6EF6               	movwf	tblptrl,c
  7440  001F78  0EFE               	movlw	high __npowers_
  7441  001F7A  0100               	movlb	0	; () banked
  7442  001F7C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7443  001F7E  6EF7               	movwf	tblptrh,c
  7444  001F80                     	if	0	;There are less than 3 active tblptr bytes
  7445  001F80                     	endif
  7446  001F80  0009               	tblrd		*+
  7447  001F82  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7448  001F86  0009               	tblrd		*+
  7449  001F88  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7450  001F8C  000A               	tblrd		*-
  7451  001F8E  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7452  001F92  0E00               	movlw	0
  7453  001F94  0100               	movlb	0	; () banked
  7454  001F96  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7455  001F98  0E64               	movlw	100
  7456  001F9A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7457  001F9C  0100               	movlb	0	; () banked
  7458  001F9E  51B6               	movf	scale@scl& (0+255),w,b
  7459  001FA0  0100               	movlb	0	; () banked
  7460  001FA2  6F86               	movwf	___awdiv@dividend& (0+255),b
  7461  001FA4  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7462  001FA6  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7463  001FA8  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7464  001FAA  ECF0  F025         	call	___awdiv	;wreg free
  7465  001FAE  0E12               	movlw	18
  7466  001FB0  0100               	movlb	0	; () banked
  7467  001FB2  2586               	addwf	?___awdiv& (0+255),w,b
  7468  001FB4  0100               	movlb	0	; () banked
  7469  001FB6  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7470  001FB8  0E00               	movlw	0
  7471  001FBA  0100               	movlb	0	; () banked
  7472  001FBC  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7473  001FBE  0100               	movlb	0	; () banked
  7474  001FC0  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7475  001FC2  0E00               	movlw	0
  7476  001FC4  0100               	movlb	0	; () banked
  7477  001FC6  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7478  001FC8  0E03               	movlw	3
  7479  001FCA  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7480  001FCC  ECCD  F02B         	call	___wmul	;wreg free
  7481  001FD0  0E51               	movlw	low __npowers_
  7482  001FD2  0100               	movlb	0	; () banked
  7483  001FD4  258E               	addwf	?___wmul& (0+255),w,b
  7484  001FD6  6EF6               	movwf	tblptrl,c
  7485  001FD8  0EFE               	movlw	high __npowers_
  7486  001FDA  0100               	movlb	0	; () banked
  7487  001FDC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7488  001FDE  6EF7               	movwf	tblptrh,c
  7489  001FE0                     	if	0	;There are less than 3 active tblptr bytes
  7490  001FE0                     	endif
  7491  001FE0  0009               	tblrd		*+
  7492  001FE2  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7493  001FE6  0009               	tblrd		*+
  7494  001FE8  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7495  001FEC  000A               	tblrd		*-
  7496  001FEE  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7497  001FF2  EC5E  F01C         	call	___ftmul	;wreg free
  7498  001FF6  C0A1  F0B3         	movff	?___ftmul,_scale$1353
  7499  001FFA  C0A2  F0B4         	movff	?___ftmul+1,_scale$1353+1
  7500  001FFE  C0A3  F0B5         	movff	?___ftmul+2,_scale$1353+2
  7501                           
  7502                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7503  002002  C0B3  F0A1         	movff	_scale$1353,___ftmul@f1
  7504  002006  C0B4  F0A2         	movff	_scale$1353+1,___ftmul@f1+1
  7505  00200A  C0B5  F0A3         	movff	_scale$1353+2,___ftmul@f1+2
  7506  00200E  0E00               	movlw	0
  7507  002010  0100               	movlb	0	; () banked
  7508  002012  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7509  002014  0E03               	movlw	3
  7510  002016  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7511  002018  0E00               	movlw	0
  7512  00201A  0100               	movlb	0	; () banked
  7513  00201C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7514  00201E  0E0A               	movlw	10
  7515  002020  6F82               	movwf	___awmod@divisor& (0+255),b
  7516  002022  0100               	movlb	0	; () banked
  7517  002024  51B6               	movf	scale@scl& (0+255),w,b
  7518  002026  0100               	movlb	0	; () banked
  7519  002028  6F80               	movwf	___awmod@dividend& (0+255),b
  7520  00202A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7521  00202C  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7522  00202E  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7523  002030  EC04  F027         	call	___awmod	;wreg free
  7524  002034  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7525  002038  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7526  00203C  ECCD  F02B         	call	___wmul	;wreg free
  7527  002040  0E51               	movlw	low __npowers_
  7528  002042  0100               	movlb	0	; () banked
  7529  002044  258E               	addwf	?___wmul& (0+255),w,b
  7530  002046  6EF6               	movwf	tblptrl,c
  7531  002048  0EFE               	movlw	high __npowers_
  7532  00204A  0100               	movlb	0	; () banked
  7533  00204C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7534  00204E  6EF7               	movwf	tblptrh,c
  7535  002050                     	if	0	;There are less than 3 active tblptr bytes
  7536  002050                     	endif
  7537  002050  0009               	tblrd		*+
  7538  002052  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7539  002056  0009               	tblrd		*+
  7540  002058  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7541  00205C  000A               	tblrd		*-
  7542  00205E  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7543  002062  EC5E  F01C         	call	___ftmul	;wreg free
  7544  002066  C0A1  F0B0         	movff	?___ftmul,?_scale
  7545  00206A  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  7546  00206E  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  7547  002072  0012               	return	
  7548  002074                     l4882:
  7549                           
  7550                           ;doprnt.c: 432: else if(scl > 10)
  7551  002074  0100               	movlb	0	; () banked
  7552  002076  51B6               	movf	scale@scl& (0+255),w,b
  7553  002078  0A80               	xorlw	128
  7554  00207A  0F75               	addlw	-139
  7555  00207C  A0D8               	btfss	status,0,c
  7556  00207E  D05D               	goto	l4888
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7560  002080  0E00               	movlw	0
  7561  002082  0100               	movlb	0	; () banked
  7562  002084  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7563  002086  0E0A               	movlw	10
  7564  002088  6F88               	movwf	___awdiv@divisor& (0+255),b
  7565  00208A  0100               	movlb	0	; () banked
  7566  00208C  51B6               	movf	scale@scl& (0+255),w,b
  7567  00208E  0100               	movlb	0	; () banked
  7568  002090  6F86               	movwf	___awdiv@dividend& (0+255),b
  7569  002092  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7570  002094  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7571  002096  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7572  002098  ECF0  F025         	call	___awdiv	;wreg free
  7573  00209C  0E09               	movlw	9
  7574  00209E  0100               	movlb	0	; () banked
  7575  0020A0  2586               	addwf	?___awdiv& (0+255),w,b
  7576  0020A2  0100               	movlb	0	; () banked
  7577  0020A4  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7578  0020A6  0E00               	movlw	0
  7579  0020A8  0100               	movlb	0	; () banked
  7580  0020AA  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7581  0020AC  0100               	movlb	0	; () banked
  7582  0020AE  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7583  0020B0  0E00               	movlw	0
  7584  0020B2  0100               	movlb	0	; () banked
  7585  0020B4  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7586  0020B6  0E03               	movlw	3
  7587  0020B8  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7588  0020BA  ECCD  F02B         	call	___wmul	;wreg free
  7589  0020BE  0E51               	movlw	low __npowers_
  7590  0020C0  0100               	movlb	0	; () banked
  7591  0020C2  258E               	addwf	?___wmul& (0+255),w,b
  7592  0020C4  6EF6               	movwf	tblptrl,c
  7593  0020C6  0EFE               	movlw	high __npowers_
  7594  0020C8  0100               	movlb	0	; () banked
  7595  0020CA  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7596  0020CC  6EF7               	movwf	tblptrh,c
  7597  0020CE                     	if	0	;There are less than 3 active tblptr bytes
  7598  0020CE                     	endif
  7599  0020CE  0009               	tblrd		*+
  7600  0020D0  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7601  0020D4  0009               	tblrd		*+
  7602  0020D6  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7603  0020DA  000A               	tblrd		*-
  7604  0020DC  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7605  0020E0  0E00               	movlw	0
  7606  0020E2  0100               	movlb	0	; () banked
  7607  0020E4  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7608  0020E6  0E03               	movlw	3
  7609  0020E8  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7610  0020EA  0E00               	movlw	0
  7611  0020EC  0100               	movlb	0	; () banked
  7612  0020EE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7613  0020F0  0E0A               	movlw	10
  7614  0020F2  6F82               	movwf	___awmod@divisor& (0+255),b
  7615  0020F4  0100               	movlb	0	; () banked
  7616  0020F6  51B6               	movf	scale@scl& (0+255),w,b
  7617  0020F8  0100               	movlb	0	; () banked
  7618  0020FA  6F80               	movwf	___awmod@dividend& (0+255),b
  7619  0020FC  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7620  0020FE  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7621  002100  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7622  002102  EC04  F027         	call	___awmod	;wreg free
  7623  002106  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7624  00210A  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7625  00210E  ECCD  F02B         	call	___wmul	;wreg free
  7626  002112  0E51               	movlw	low __npowers_
  7627  002114  0100               	movlb	0	; () banked
  7628  002116  258E               	addwf	?___wmul& (0+255),w,b
  7629  002118  6EF6               	movwf	tblptrl,c
  7630  00211A  0EFE               	movlw	high __npowers_
  7631  00211C  0100               	movlb	0	; () banked
  7632  00211E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7633  002120  6EF7               	movwf	tblptrh,c
  7634  002122                     	if	0	;There are less than 3 active tblptr bytes
  7635  002122                     	endif
  7636  002122  0009               	tblrd		*+
  7637  002124  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7638  002128  0009               	tblrd		*+
  7639  00212A  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7640  00212E  000A               	tblrd		*-
  7641  002130  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7642  002134  EC5E  F01C         	call	___ftmul	;wreg free
  7643  002138  D796               	goto	L4
  7644  00213A                     l4888:
  7645                           
  7646                           ;doprnt.c: 434: return _npowers_[scl];
  7647  00213A  0100               	movlb	0	; () banked
  7648  00213C  51B6               	movf	scale@scl& (0+255),w,b
  7649  00213E  0D03               	mullw	3
  7650  002140  0E51               	movlw	low __npowers_
  7651  002142  24F3               	addwf	prodl,w,c
  7652  002144  6EF6               	movwf	tblptrl,c
  7653  002146  0EFE               	movlw	high __npowers_
  7654  002148  20F4               	addwfc	prodh,w,c
  7655  00214A  6EF7               	movwf	tblptrh,c
  7656  00214C                     	if	0	;There are less than 3 active tblptr bytes
  7657  00214C                     	endif
  7658  00214C  0009               	tblrd		*+
  7659  00214E  CFF5 F0B0          	movff	tablat,?_scale
  7660  002152  0009               	tblrd		*+
  7661  002154  CFF5 F0B1          	movff	tablat,?_scale+1
  7662  002158  000A               	tblrd		*-
  7663  00215A  CFF5 F0B2          	movff	tablat,?_scale+2
  7664                           
  7665                           ; BSR set to: 0
  7666  00215E  0012               	return	
  7667  002160                     l4892:
  7668                           
  7669                           ; BSR set to: 0
  7670                           ;doprnt.c: 435: }
  7671                           ;doprnt.c: 436: if(scl>=110)
  7672  002160  0100               	movlb	0	; () banked
  7673  002162  51B6               	movf	scale@scl& (0+255),w,b
  7674  002164  0A80               	xorlw	128
  7675  002166  0F12               	addlw	-238
  7676  002168  A0D8               	btfss	status,0,c
  7677  00216A  D0AC               	goto	l4900
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7681  00216C  0E00               	movlw	0
  7682  00216E  0100               	movlb	0	; () banked
  7683  002170  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7684  002172  0E03               	movlw	3
  7685  002174  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7686  002176  0E00               	movlw	0
  7687  002178  0100               	movlb	0	; () banked
  7688  00217A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7689  00217C  0E0A               	movlw	10
  7690  00217E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7691  002180  0E00               	movlw	0
  7692  002182  0100               	movlb	0	; () banked
  7693  002184  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7694  002186  0E64               	movlw	100
  7695  002188  6F82               	movwf	___awmod@divisor& (0+255),b
  7696  00218A  0100               	movlb	0	; () banked
  7697  00218C  51B6               	movf	scale@scl& (0+255),w,b
  7698  00218E  0100               	movlb	0	; () banked
  7699  002190  6F80               	movwf	___awmod@dividend& (0+255),b
  7700  002192  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7701  002194  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7702  002196  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7703  002198  EC04  F027         	call	___awmod	;wreg free
  7704  00219C  C080  F086         	movff	?___awmod,___awdiv@dividend
  7705  0021A0  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7706  0021A4  ECF0  F025         	call	___awdiv	;wreg free
  7707  0021A8  0E09               	movlw	9
  7708  0021AA  0100               	movlb	0	; () banked
  7709  0021AC  2586               	addwf	?___awdiv& (0+255),w,b
  7710  0021AE  0100               	movlb	0	; () banked
  7711  0021B0  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7712  0021B2  0E00               	movlw	0
  7713  0021B4  0100               	movlb	0	; () banked
  7714  0021B6  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7715  0021B8  0100               	movlb	0	; () banked
  7716  0021BA  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7717  0021BC  ECCD  F02B         	call	___wmul	;wreg free
  7718  0021C0  0E78               	movlw	low __powers_
  7719  0021C2  0100               	movlb	0	; () banked
  7720  0021C4  258E               	addwf	?___wmul& (0+255),w,b
  7721  0021C6  6EF6               	movwf	tblptrl,c
  7722  0021C8  0EFE               	movlw	high __powers_
  7723  0021CA  0100               	movlb	0	; () banked
  7724  0021CC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7725  0021CE  6EF7               	movwf	tblptrh,c
  7726  0021D0                     	if	0	;There are less than 3 active tblptr bytes
  7727  0021D0                     	endif
  7728  0021D0  0009               	tblrd		*+
  7729  0021D2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7730  0021D6  0009               	tblrd		*+
  7731  0021D8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7732  0021DC  000A               	tblrd		*-
  7733  0021DE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7734  0021E2  0E00               	movlw	0
  7735  0021E4  0100               	movlb	0	; () banked
  7736  0021E6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7737  0021E8  0E64               	movlw	100
  7738  0021EA  6F88               	movwf	___awdiv@divisor& (0+255),b
  7739  0021EC  0100               	movlb	0	; () banked
  7740  0021EE  51B6               	movf	scale@scl& (0+255),w,b
  7741  0021F0  0100               	movlb	0	; () banked
  7742  0021F2  6F86               	movwf	___awdiv@dividend& (0+255),b
  7743  0021F4  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7744  0021F6  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7745  0021F8  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7746  0021FA  ECF0  F025         	call	___awdiv	;wreg free
  7747  0021FE  0E12               	movlw	18
  7748  002200  0100               	movlb	0	; () banked
  7749  002202  2586               	addwf	?___awdiv& (0+255),w,b
  7750  002204  0100               	movlb	0	; () banked
  7751  002206  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7752  002208  0E00               	movlw	0
  7753  00220A  0100               	movlb	0	; () banked
  7754  00220C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7755  00220E  0100               	movlb	0	; () banked
  7756  002210  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7757  002212  0E00               	movlw	0
  7758  002214  0100               	movlb	0	; () banked
  7759  002216  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7760  002218  0E03               	movlw	3
  7761  00221A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7762  00221C  ECCD  F02B         	call	___wmul	;wreg free
  7763  002220  0E78               	movlw	low __powers_
  7764  002222  0100               	movlb	0	; () banked
  7765  002224  258E               	addwf	?___wmul& (0+255),w,b
  7766  002226  6EF6               	movwf	tblptrl,c
  7767  002228  0EFE               	movlw	high __powers_
  7768  00222A  0100               	movlb	0	; () banked
  7769  00222C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7770  00222E  6EF7               	movwf	tblptrh,c
  7771  002230                     	if	0	;There are less than 3 active tblptr bytes
  7772  002230                     	endif
  7773  002230  0009               	tblrd		*+
  7774  002232  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7775  002236  0009               	tblrd		*+
  7776  002238  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7777  00223C  000A               	tblrd		*-
  7778  00223E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7779  002242  EC5E  F01C         	call	___ftmul	;wreg free
  7780  002246  C0A1  F0B3         	movff	?___ftmul,_scale$1353
  7781  00224A  C0A2  F0B4         	movff	?___ftmul+1,_scale$1353+1
  7782  00224E  C0A3  F0B5         	movff	?___ftmul+2,_scale$1353+2
  7783                           
  7784                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7785  002252  C0B3  F0A1         	movff	_scale$1353,___ftmul@f1
  7786  002256  C0B4  F0A2         	movff	_scale$1353+1,___ftmul@f1+1
  7787  00225A  C0B5  F0A3         	movff	_scale$1353+2,___ftmul@f1+2
  7788  00225E  0E00               	movlw	0
  7789  002260  0100               	movlb	0	; () banked
  7790  002262  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7791  002264  0E03               	movlw	3
  7792  002266  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7793  002268  0E00               	movlw	0
  7794  00226A  0100               	movlb	0	; () banked
  7795  00226C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7796  00226E  0E0A               	movlw	10
  7797  002270  6F82               	movwf	___awmod@divisor& (0+255),b
  7798  002272  0100               	movlb	0	; () banked
  7799  002274  51B6               	movf	scale@scl& (0+255),w,b
  7800  002276  0100               	movlb	0	; () banked
  7801  002278  6F80               	movwf	___awmod@dividend& (0+255),b
  7802  00227A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7803  00227C  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7804  00227E  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7805  002280  EC04  F027         	call	___awmod	;wreg free
  7806  002284  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7807  002288  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7808  00228C  ECCD  F02B         	call	___wmul	;wreg free
  7809  002290  0E78               	movlw	low __powers_
  7810  002292  0100               	movlb	0	; () banked
  7811  002294  258E               	addwf	?___wmul& (0+255),w,b
  7812  002296  6EF6               	movwf	tblptrl,c
  7813  002298  0EFE               	movlw	high __powers_
  7814  00229A  0100               	movlb	0	; () banked
  7815  00229C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7816  00229E  6EF7               	movwf	tblptrh,c
  7817  0022A0                     	if	0	;There are less than 3 active tblptr bytes
  7818  0022A0                     	endif
  7819  0022A0  0009               	tblrd		*+
  7820  0022A2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7821  0022A6  0009               	tblrd		*+
  7822  0022A8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7823  0022AC  000A               	tblrd		*-
  7824  0022AE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7825  0022B2  EC5E  F01C         	call	___ftmul	;wreg free
  7826  0022B6  C0A1  F0B0         	movff	?___ftmul,?_scale
  7827  0022BA  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  7828  0022BE  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  7829  0022C2  0012               	return	
  7830  0022C4                     l4900:
  7831                           
  7832                           ;doprnt.c: 438: else if(scl > 10)
  7833  0022C4  0100               	movlb	0	; () banked
  7834  0022C6  51B6               	movf	scale@scl& (0+255),w,b
  7835  0022C8  0A80               	xorlw	128
  7836  0022CA  0F75               	addlw	-139
  7837  0022CC  A0D8               	btfss	status,0,c
  7838  0022CE  D05D               	goto	l4906
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7842  0022D0  0E00               	movlw	0
  7843  0022D2  0100               	movlb	0	; () banked
  7844  0022D4  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7845  0022D6  0E0A               	movlw	10
  7846  0022D8  6F88               	movwf	___awdiv@divisor& (0+255),b
  7847  0022DA  0100               	movlb	0	; () banked
  7848  0022DC  51B6               	movf	scale@scl& (0+255),w,b
  7849  0022DE  0100               	movlb	0	; () banked
  7850  0022E0  6F86               	movwf	___awdiv@dividend& (0+255),b
  7851  0022E2  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7852  0022E4  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7853  0022E6  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7854  0022E8  ECF0  F025         	call	___awdiv	;wreg free
  7855  0022EC  0E09               	movlw	9
  7856  0022EE  0100               	movlb	0	; () banked
  7857  0022F0  2586               	addwf	?___awdiv& (0+255),w,b
  7858  0022F2  0100               	movlb	0	; () banked
  7859  0022F4  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7860  0022F6  0E00               	movlw	0
  7861  0022F8  0100               	movlb	0	; () banked
  7862  0022FA  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7863  0022FC  0100               	movlb	0	; () banked
  7864  0022FE  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7865  002300  0E00               	movlw	0
  7866  002302  0100               	movlb	0	; () banked
  7867  002304  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7868  002306  0E03               	movlw	3
  7869  002308  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7870  00230A  ECCD  F02B         	call	___wmul	;wreg free
  7871  00230E  0E78               	movlw	low __powers_
  7872  002310  0100               	movlb	0	; () banked
  7873  002312  258E               	addwf	?___wmul& (0+255),w,b
  7874  002314  6EF6               	movwf	tblptrl,c
  7875  002316  0EFE               	movlw	high __powers_
  7876  002318  0100               	movlb	0	; () banked
  7877  00231A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7878  00231C  6EF7               	movwf	tblptrh,c
  7879  00231E                     	if	0	;There are less than 3 active tblptr bytes
  7880  00231E                     	endif
  7881  00231E  0009               	tblrd		*+
  7882  002320  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7883  002324  0009               	tblrd		*+
  7884  002326  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7885  00232A  000A               	tblrd		*-
  7886  00232C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7887  002330  0E00               	movlw	0
  7888  002332  0100               	movlb	0	; () banked
  7889  002334  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7890  002336  0E03               	movlw	3
  7891  002338  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7892  00233A  0E00               	movlw	0
  7893  00233C  0100               	movlb	0	; () banked
  7894  00233E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7895  002340  0E0A               	movlw	10
  7896  002342  6F82               	movwf	___awmod@divisor& (0+255),b
  7897  002344  0100               	movlb	0	; () banked
  7898  002346  51B6               	movf	scale@scl& (0+255),w,b
  7899  002348  0100               	movlb	0	; () banked
  7900  00234A  6F80               	movwf	___awmod@dividend& (0+255),b
  7901  00234C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7902  00234E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7903  002350  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7904  002352  EC04  F027         	call	___awmod	;wreg free
  7905  002356  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7906  00235A  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7907  00235E  ECCD  F02B         	call	___wmul	;wreg free
  7908  002362  0E78               	movlw	low __powers_
  7909  002364  0100               	movlb	0	; () banked
  7910  002366  258E               	addwf	?___wmul& (0+255),w,b
  7911  002368  6EF6               	movwf	tblptrl,c
  7912  00236A  0EFE               	movlw	high __powers_
  7913  00236C  0100               	movlb	0	; () banked
  7914  00236E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7915  002370  6EF7               	movwf	tblptrh,c
  7916  002372                     	if	0	;There are less than 3 active tblptr bytes
  7917  002372                     	endif
  7918  002372  0009               	tblrd		*+
  7919  002374  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7920  002378  0009               	tblrd		*+
  7921  00237A  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7922  00237E  000A               	tblrd		*-
  7923  002380  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7924  002384  EC5E  F01C         	call	___ftmul	;wreg free
  7925  002388  D796               	goto	L5
  7926  00238A                     l4906:
  7927                           
  7928                           ;doprnt.c: 440: return _powers_[scl];
  7929  00238A  0100               	movlb	0	; () banked
  7930  00238C  51B6               	movf	scale@scl& (0+255),w,b
  7931  00238E  0D03               	mullw	3
  7932  002390  0E78               	movlw	low __powers_
  7933  002392  24F3               	addwf	prodl,w,c
  7934  002394  6EF6               	movwf	tblptrl,c
  7935  002396  0EFE               	movlw	high __powers_
  7936  002398  20F4               	addwfc	prodh,w,c
  7937  00239A  6EF7               	movwf	tblptrh,c
  7938  00239C                     	if	0	;There are less than 3 active tblptr bytes
  7939  00239C                     	endif
  7940  00239C  0009               	tblrd		*+
  7941  00239E  CFF5 F0B0          	movff	tablat,?_scale
  7942  0023A2  0009               	tblrd		*+
  7943  0023A4  CFF5 F0B1          	movff	tablat,?_scale+1
  7944  0023A8  000A               	tblrd		*-
  7945  0023AA  CFF5 F0B2          	movff	tablat,?_scale+2
  7946  0023AE  0012               	return	
  7947  0023B0                     __end_of_scale:
  7948                           	opt stack 0
  7949                           tblptru	equ	0xFF8
  7950                           tblptrh	equ	0xFF7
  7951                           tblptrl	equ	0xFF6
  7952                           tablat	equ	0xFF5
  7953                           prodh	equ	0xFF4
  7954                           prodl	equ	0xFF3
  7955                           intcon	equ	0xFF2
  7956                           postinc0	equ	0xFEE
  7957                           wreg	equ	0xFE8
  7958                           postdec1	equ	0xFE5
  7959                           fsr1l	equ	0xFE1
  7960                           indf2	equ	0xFDF
  7961                           postinc2	equ	0xFDE
  7962                           postdec2	equ	0xFDD
  7963                           fsr2h	equ	0xFDA
  7964                           fsr2l	equ	0xFD9
  7965                           status	equ	0xFD8
  7966                           
  7967 ;; *************** function _putch *****************
  7968 ;; Defined at:
  7969 ;;		line 35 in file "lcd.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  data            1    wreg     unsigned char 
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;  data            1    4[BANK0 ] unsigned char 
  7974 ;; Return value:  Size  Location     Type
  7975 ;;                  1    wreg      void 
  7976 ;; Registers used:
  7977 ;;		wreg, status,2, status,0, cstack
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7986 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7987 ;;Total ram usage:        1 bytes
  7988 ;; Hardware stack levels used:    1
  7989 ;; Hardware stack levels required when called:    9
  7990 ;; This function calls:
  7991 ;;		_lcdNewline
  7992 ;;		_lcdNibble
  7993 ;; This function is called by:
  7994 ;;		_printf
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           	psect	text17
  7999  0058B0                     __ptext17:
  8000                           	opt stack 0
  8001  0058B0                     _putch:
  8002                           	opt stack 19
  8003                           
  8004                           ;incstack = 0
  8005                           ;putch@data stored from wreg
  8006  0058B0  0100               	movlb	0	; () banked
  8007  0058B2  6F84               	movwf	putch@data& (0+255),b
  8008                           
  8009                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  8010  0058B4  0E0A               	movlw	10
  8011  0058B6  0100               	movlb	0	; () banked
  8012  0058B8  1984               	xorwf	putch@data& (0+255),w,b
  8013  0058BA  A4D8               	btfss	status,2,c
  8014  0058BC  D003               	goto	l214
  8015                           
  8016                           ; BSR set to: 0
  8017  0058BE  EC2C  F02D         	call	_lcdNewline	;wreg free
  8018  0058C2  0012               	return	
  8019  0058C4                     l214:
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;lcd.c: 37: else
  8023                           ;lcd.c: 38: {
  8024                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  8025  0058C4  848C               	bsf	3980,2,c	;volatile
  8026                           
  8027                           ; BSR set to: 0
  8028                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  8029  0058C6  0E74               	movlw	116
  8030  0058C8                     u8477:
  8031  0058C8  2EE8               	decfsz	wreg,f,c
  8032  0058CA  D7FE               	bra	u8477
  8033  0058CC  D000               	nop2	
  8034                           
  8035                           ;lcd.c: 41: lcdNibble(data);
  8036  0058CE  0100               	movlb	0	; () banked
  8037  0058D0  5184               	movf	putch@data& (0+255),w,b
  8038  0058D2  EC41  F029         	call	_lcdNibble
  8039  0058D6  0012               	return	
  8040  0058D8                     __end_of_putch:
  8041                           	opt stack 0
  8042                           tblptru	equ	0xFF8
  8043                           tblptrh	equ	0xFF7
  8044                           tblptrl	equ	0xFF6
  8045                           tablat	equ	0xFF5
  8046                           prodh	equ	0xFF4
  8047                           prodl	equ	0xFF3
  8048                           intcon	equ	0xFF2
  8049                           postinc0	equ	0xFEE
  8050                           wreg	equ	0xFE8
  8051                           postdec1	equ	0xFE5
  8052                           fsr1l	equ	0xFE1
  8053                           indf2	equ	0xFDF
  8054                           postinc2	equ	0xFDE
  8055                           postdec2	equ	0xFDD
  8056                           fsr2h	equ	0xFDA
  8057                           fsr2l	equ	0xFD9
  8058                           status	equ	0xFD8
  8059                           
  8060 ;; *************** function _lcdNewline *****************
  8061 ;; Defined at:
  8062 ;;		line 78 in file "lcd.c"
  8063 ;; Parameters:    Size  Location     Type
  8064 ;;		None
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;		None
  8067 ;; Return value:  Size  Location     Type
  8068 ;;                  1    wreg      void 
  8069 ;; Registers used:
  8070 ;;		wreg, status,2, status,0, cstack
  8071 ;; Tracked objects:
  8072 ;;		On entry : 0/0
  8073 ;;		On exit  : 0/0
  8074 ;;		Unchanged: 0/0
  8075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8080 ;;Total ram usage:        0 bytes
  8081 ;; Hardware stack levels used:    1
  8082 ;; Hardware stack levels required when called:    8
  8083 ;; This function calls:
  8084 ;;		_lcdInst
  8085 ;; This function is called by:
  8086 ;;		_putch
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           	psect	text18
  8091  005A58                     __ptext18:
  8092                           	opt stack 0
  8093  005A58                     _lcdNewline:
  8094                           	opt stack 19
  8095                           
  8096                           ;lcd.c: 79: lcdInst(0b11000000);
  8097                           
  8098                           ;incstack = 0
  8099  005A58  0EC0               	movlw	192
  8100  005A5A  EC43  F02C         	call	_lcdInst
  8101  005A5E  0012               	return		;funcret
  8102  005A60                     __end_of_lcdNewline:
  8103                           	opt stack 0
  8104                           tblptru	equ	0xFF8
  8105                           tblptrh	equ	0xFF7
  8106                           tblptrl	equ	0xFF6
  8107                           tablat	equ	0xFF5
  8108                           prodh	equ	0xFF4
  8109                           prodl	equ	0xFF3
  8110                           intcon	equ	0xFF2
  8111                           postinc0	equ	0xFEE
  8112                           wreg	equ	0xFE8
  8113                           postdec1	equ	0xFE5
  8114                           fsr1l	equ	0xFE1
  8115                           indf2	equ	0xFDF
  8116                           postinc2	equ	0xFDE
  8117                           postdec2	equ	0xFDD
  8118                           fsr2h	equ	0xFDA
  8119                           fsr2l	equ	0xFD9
  8120                           status	equ	0xFD8
  8121                           
  8122 ;; *************** function _isdigit *****************
  8123 ;; Defined at:
  8124 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;  c               1    wreg     unsigned char 
  8127 ;; Auto vars:     Size  Location     Type
  8128 ;;  c               1    2[BANK0 ] unsigned char 
  8129 ;; Return value:  Size  Location     Type
  8130 ;;		None               void
  8131 ;; Registers used:
  8132 ;;		wreg, status,2, status,0
  8133 ;; Tracked objects:
  8134 ;;		On entry : 0/0
  8135 ;;		On exit  : 0/0
  8136 ;;		Unchanged: 0/0
  8137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;Total ram usage:        3 bytes
  8143 ;; Hardware stack levels used:    1
  8144 ;; Hardware stack levels required when called:    6
  8145 ;; This function calls:
  8146 ;;		Nothing
  8147 ;; This function is called by:
  8148 ;;		_printf
  8149 ;; This function uses a non-reentrant model
  8150 ;;
  8151                           
  8152                           	psect	text19
  8153  00585C                     __ptext19:
  8154                           	opt stack 0
  8155  00585C                     _isdigit:
  8156                           	opt stack 22
  8157                           
  8158                           ;incstack = 0
  8159                           ;isdigit@c stored from wreg
  8160  00585C  0100               	movlb	0	; () banked
  8161  00585E  6F82               	movwf	isdigit@c& (0+255),b
  8162  005860  0E00               	movlw	0
  8163  005862  0100               	movlb	0	; () banked
  8164  005864  6F81               	movwf	_isdigit$982& (0+255),b
  8165                           
  8166                           ; BSR set to: 0
  8167  005866  0E3A               	movlw	58
  8168  005868  0100               	movlb	0	; () banked
  8169  00586A  6182               	cpfslt	isdigit@c& (0+255),b
  8170  00586C  D007               	goto	l4918
  8171                           
  8172                           ; BSR set to: 0
  8173  00586E  0E2F               	movlw	47
  8174  005870  0100               	movlb	0	; () banked
  8175  005872  6582               	cpfsgt	isdigit@c& (0+255),b
  8176  005874  D003               	goto	l4918
  8177                           
  8178                           ; BSR set to: 0
  8179  005876  0E01               	movlw	1
  8180  005878  0100               	movlb	0	; () banked
  8181  00587A  6F81               	movwf	_isdigit$982& (0+255),b
  8182  00587C                     l4918:
  8183                           
  8184                           ; BSR set to: 0
  8185  00587C  C081  F080         	movff	_isdigit$982,??_isdigit
  8186  005880  0100               	movlb	0	; () banked
  8187  005882  3180               	rrcf	??_isdigit& (0+255),w,b
  8188  005884  0012               	return	
  8189  005886                     __end_of_isdigit:
  8190                           	opt stack 0
  8191                           tblptru	equ	0xFF8
  8192                           tblptrh	equ	0xFF7
  8193                           tblptrl	equ	0xFF6
  8194                           tablat	equ	0xFF5
  8195                           prodh	equ	0xFF4
  8196                           prodl	equ	0xFF3
  8197                           intcon	equ	0xFF2
  8198                           postinc0	equ	0xFEE
  8199                           wreg	equ	0xFE8
  8200                           postdec1	equ	0xFE5
  8201                           fsr1l	equ	0xFE1
  8202                           indf2	equ	0xFDF
  8203                           postinc2	equ	0xFDE
  8204                           postdec2	equ	0xFDD
  8205                           fsr2h	equ	0xFDA
  8206                           fsr2l	equ	0xFD9
  8207                           status	equ	0xFD8
  8208                           
  8209 ;; *************** function _fround *****************
  8210 ;; Defined at:
  8211 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;  prec            1    wreg     unsigned char 
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  prec            1   57[BANK0 ] unsigned char 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  3   48[BANK0 ] unsigned char 
  8218 ;; Registers used:
  8219 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8225 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;Total ram usage:       10 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    8
  8232 ;; This function calls:
  8233 ;;		___awdiv
  8234 ;;		___awmod
  8235 ;;		___ftmul
  8236 ;;		___wmul
  8237 ;; This function is called by:
  8238 ;;		_printf
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           	psect	text20
  8243  002B2A                     __ptext20:
  8244                           	opt stack 0
  8245  002B2A                     _fround:
  8246                           	opt stack 20
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;incstack = 0
  8250                           ;fround@prec stored from wreg
  8251  002B2A  0100               	movlb	0	; () banked
  8252  002B2C  6FB9               	movwf	fround@prec& (0+255),b
  8253                           
  8254                           ;doprnt.c: 413: if(prec>=110)
  8255  002B2E  0E6D               	movlw	109
  8256  002B30  0100               	movlb	0	; () banked
  8257  002B32  65B9               	cpfsgt	fround@prec& (0+255),b
  8258  002B34  D0BA               	goto	l4860
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8262  002B36  0E00               	movlw	0
  8263  002B38  0100               	movlb	0	; () banked
  8264  002B3A  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8265  002B3C  0E03               	movlw	3
  8266  002B3E  6F90               	movwf	___wmul@multiplicand& (0+255),b
  8267  002B40  0E00               	movlw	0
  8268  002B42  0100               	movlb	0	; () banked
  8269  002B44  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8270  002B46  0E0A               	movlw	10
  8271  002B48  6F88               	movwf	___awdiv@divisor& (0+255),b
  8272  002B4A  0E00               	movlw	0
  8273  002B4C  0100               	movlb	0	; () banked
  8274  002B4E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8275  002B50  0E64               	movlw	100
  8276  002B52  6F82               	movwf	___awmod@divisor& (0+255),b
  8277  002B54  C0B9  F080         	movff	fround@prec,___awmod@dividend
  8278  002B58  0100               	movlb	0	; () banked
  8279  002B5A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  8280  002B5C  EC04  F027         	call	___awmod	;wreg free
  8281  002B60  C080  F086         	movff	?___awmod,___awdiv@dividend
  8282  002B64  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8283  002B68  ECF0  F025         	call	___awdiv	;wreg free
  8284  002B6C  0E09               	movlw	9
  8285  002B6E  0100               	movlb	0	; () banked
  8286  002B70  2586               	addwf	?___awdiv& (0+255),w,b
  8287  002B72  0100               	movlb	0	; () banked
  8288  002B74  6F8E               	movwf	___wmul@multiplier& (0+255),b
  8289  002B76  0E00               	movlw	0
  8290  002B78  0100               	movlb	0	; () banked
  8291  002B7A  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  8292  002B7C  0100               	movlb	0	; () banked
  8293  002B7E  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8294  002B80  ECCD  F02B         	call	___wmul	;wreg free
  8295  002B84  0E51               	movlw	low __npowers_
  8296  002B86  0100               	movlb	0	; () banked
  8297  002B88  258E               	addwf	?___wmul& (0+255),w,b
  8298  002B8A  6EF6               	movwf	tblptrl,c
  8299  002B8C  0EFE               	movlw	high __npowers_
  8300  002B8E  0100               	movlb	0	; () banked
  8301  002B90  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  8302  002B92  6EF7               	movwf	tblptrh,c
  8303  002B94                     	if	0	;There are less than 3 active tblptr bytes
  8304  002B94                     	endif
  8305  002B94  0009               	tblrd		*+
  8306  002B96  CFF5 F0A4          	movff	tablat,___ftmul@f2
  8307  002B9A  0009               	tblrd		*+
  8308  002B9C  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  8309  002BA0  000A               	tblrd		*-
  8310  002BA2  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  8311  002BA6  0E00               	movlw	0
  8312  002BA8  0100               	movlb	0	; () banked
  8313  002BAA  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8314  002BAC  0E64               	movlw	100
  8315  002BAE  6F88               	movwf	___awdiv@divisor& (0+255),b
  8316  002BB0  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  8317  002BB4  0100               	movlb	0	; () banked
  8318  002BB6  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  8319  002BB8  ECF0  F025         	call	___awdiv	;wreg free
  8320  002BBC  0E12               	movlw	18
  8321  002BBE  0100               	movlb	0	; () banked
  8322  002BC0  2586               	addwf	?___awdiv& (0+255),w,b
  8323  002BC2  0100               	movlb	0	; () banked
  8324  002BC4  6F8E               	movwf	___wmul@multiplier& (0+255),b
  8325  002BC6  0E00               	movlw	0
  8326  002BC8  0100               	movlb	0	; () banked
  8327  002BCA  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  8328  002BCC  0100               	movlb	0	; () banked
  8329  002BCE  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8330  002BD0  0E00               	movlw	0
  8331  002BD2  0100               	movlb	0	; () banked
  8332  002BD4  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8333  002BD6  0E03               	movlw	3
  8334  002BD8  6F90               	movwf	___wmul@multiplicand& (0+255),b
  8335  002BDA  ECCD  F02B         	call	___wmul	;wreg free
  8336  002BDE  0E51               	movlw	low __npowers_
  8337  002BE0  0100               	movlb	0	; () banked
  8338  002BE2  258E               	addwf	?___wmul& (0+255),w,b
  8339  002BE4  6EF6               	movwf	tblptrl,c
  8340  002BE6  0EFE               	movlw	high __npowers_
  8341  002BE8  0100               	movlb	0	; () banked
  8342  002BEA  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  8343  002BEC  6EF7               	movwf	tblptrh,c
  8344  002BEE                     	if	0	;There are less than 3 active tblptr bytes
  8345  002BEE                     	endif
  8346  002BEE  0009               	tblrd		*+
  8347  002BF0  CFF5 F0A1          	movff	tablat,___ftmul@f1
  8348  002BF4  0009               	tblrd		*+
  8349  002BF6  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  8350  002BFA  000A               	tblrd		*-
  8351  002BFC  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  8352  002C00  EC5E  F01C         	call	___ftmul	;wreg free
  8353  002C04  C0A1  F0B6         	movff	?___ftmul,_fround$1351
  8354  002C08  C0A2  F0B7         	movff	?___ftmul+1,_fround$1351+1
  8355  002C0C  C0A3  F0B8         	movff	?___ftmul+2,_fround$1351+2
  8356                           
  8357                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8358  002C10  0E00               	movlw	0
  8359  002C12  0100               	movlb	0	; () banked
  8360  002C14  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8361  002C16  0E03               	movlw	3
  8362  002C18  6F90               	movwf	___wmul@multiplicand& (0+255),b
  8363  002C1A  0E00               	movlw	0
  8364  002C1C  0100               	movlb	0	; () banked
  8365  002C1E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8366  002C20  0E0A               	movlw	10
  8367  002C22  6F82               	movwf	___awmod@divisor& (0+255),b
  8368  002C24  C0B9  F080         	movff	fround@prec,___awmod@dividend
  8369  002C28  0100               	movlb	0	; () banked
  8370  002C2A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  8371  002C2C  EC04  F027         	call	___awmod	;wreg free
  8372  002C30  C080  F08E         	movff	?___awmod,___wmul@multiplier
  8373  002C34  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  8374  002C38  ECCD  F02B         	call	___wmul	;wreg free
  8375  002C3C  0E51               	movlw	low __npowers_
  8376  002C3E  0100               	movlb	0	; () banked
  8377  002C40  258E               	addwf	?___wmul& (0+255),w,b
  8378  002C42  6EF6               	movwf	tblptrl,c
  8379  002C44  0EFE               	movlw	high __npowers_
  8380  002C46  0100               	movlb	0	; () banked
  8381  002C48  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  8382  002C4A  6EF7               	movwf	tblptrh,c
  8383  002C4C                     	if	0	;There are less than 3 active tblptr bytes
  8384  002C4C                     	endif
  8385  002C4C  0009               	tblrd		*+
  8386  002C4E  CFF5 F0A4          	movff	tablat,___ftmul@f2
  8387  002C52  0009               	tblrd		*+
  8388  002C54  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  8389  002C58  000A               	tblrd		*-
  8390  002C5A  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  8391  002C5E  C0B6  F0A1         	movff	_fround$1351,___ftmul@f1
  8392  002C62  C0B7  F0A2         	movff	_fround$1351+1,___ftmul@f1+1
  8393  002C66  C0B8  F0A3         	movff	_fround$1351+2,___ftmul@f1+2
  8394  002C6A  EC5E  F01C         	call	___ftmul	;wreg free
  8395  002C6E  C0A1  F0B3         	movff	?___ftmul,_fround$1352
  8396  002C72  C0A2  F0B4         	movff	?___ftmul+1,_fround$1352+1
  8397  002C76  C0A3  F0B5         	movff	?___ftmul+2,_fround$1352+2
  8398                           
  8399                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8400  002C7A  C0B3  F0A1         	movff	_fround$1352,___ftmul@f1
  8401  002C7E  C0B4  F0A2         	movff	_fround$1352+1,___ftmul@f1+1
  8402  002C82  C0B5  F0A3         	movff	_fround$1352+2,___ftmul@f1+2
  8403  002C86  0E00               	movlw	0
  8404  002C88  0100               	movlb	0	; () banked
  8405  002C8A  6FA4               	movwf	___ftmul@f2& (0+255),b
  8406  002C8C  0E00               	movlw	0
  8407  002C8E  0100               	movlb	0	; () banked
  8408  002C90  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  8409  002C92  0E3F               	movlw	63
  8410  002C94  0100               	movlb	0	; () banked
  8411  002C96  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  8412  002C98  EC5E  F01C         	call	___ftmul	;wreg free
  8413  002C9C  C0A1  F0B0         	movff	?___ftmul,?_fround
  8414  002CA0  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  8415  002CA4  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  8416  002CA8  0012               	return	
  8417  002CAA                     l4860:
  8418                           
  8419                           ;doprnt.c: 415: else if(prec > 10)
  8420  002CAA  0E0A               	movlw	10
  8421  002CAC  0100               	movlb	0	; () banked
  8422  002CAE  65B9               	cpfsgt	fround@prec& (0+255),b
  8423  002CB0  D06E               	goto	l4868
  8424                           
  8425                           ; BSR set to: 0
  8426                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8427  002CB2  0E00               	movlw	0
  8428  002CB4  0100               	movlb	0	; () banked
  8429  002CB6  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8430  002CB8  0E03               	movlw	3
  8431  002CBA  6F90               	movwf	___wmul@multiplicand& (0+255),b
  8432  002CBC  0E00               	movlw	0
  8433  002CBE  0100               	movlb	0	; () banked
  8434  002CC0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8435  002CC2  0E0A               	movlw	10
  8436  002CC4  6F82               	movwf	___awmod@divisor& (0+255),b
  8437  002CC6  C0B9  F080         	movff	fround@prec,___awmod@dividend
  8438  002CCA  0100               	movlb	0	; () banked
  8439  002CCC  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  8440  002CCE  EC04  F027         	call	___awmod	;wreg free
  8441  002CD2  C080  F08E         	movff	?___awmod,___wmul@multiplier
  8442  002CD6  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  8443  002CDA  ECCD  F02B         	call	___wmul	;wreg free
  8444  002CDE  0E51               	movlw	low __npowers_
  8445  002CE0  0100               	movlb	0	; () banked
  8446  002CE2  258E               	addwf	?___wmul& (0+255),w,b
  8447  002CE4  6EF6               	movwf	tblptrl,c
  8448  002CE6  0EFE               	movlw	high __npowers_
  8449  002CE8  0100               	movlb	0	; () banked
  8450  002CEA  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  8451  002CEC  6EF7               	movwf	tblptrh,c
  8452  002CEE                     	if	0	;There are less than 3 active tblptr bytes
  8453  002CEE                     	endif
  8454  002CEE  0009               	tblrd		*+
  8455  002CF0  CFF5 F0A4          	movff	tablat,___ftmul@f2
  8456  002CF4  0009               	tblrd		*+
  8457  002CF6  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  8458  002CFA  000A               	tblrd		*-
  8459  002CFC  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  8460  002D00  0E00               	movlw	0
  8461  002D02  0100               	movlb	0	; () banked
  8462  002D04  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8463  002D06  0E0A               	movlw	10
  8464  002D08  6F88               	movwf	___awdiv@divisor& (0+255),b
  8465  002D0A  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  8466  002D0E  0100               	movlb	0	; () banked
  8467  002D10  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  8468  002D12  ECF0  F025         	call	___awdiv	;wreg free
  8469  002D16  0E09               	movlw	9
  8470  002D18  0100               	movlb	0	; () banked
  8471  002D1A  2586               	addwf	?___awdiv& (0+255),w,b
  8472  002D1C  0100               	movlb	0	; () banked
  8473  002D1E  6F8E               	movwf	___wmul@multiplier& (0+255),b
  8474  002D20  0E00               	movlw	0
  8475  002D22  0100               	movlb	0	; () banked
  8476  002D24  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  8477  002D26  0100               	movlb	0	; () banked
  8478  002D28  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8479  002D2A  0E00               	movlw	0
  8480  002D2C  0100               	movlb	0	; () banked
  8481  002D2E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8482  002D30  0E03               	movlw	3
  8483  002D32  6F90               	movwf	___wmul@multiplicand& (0+255),b
  8484  002D34  ECCD  F02B         	call	___wmul	;wreg free
  8485  002D38  0E51               	movlw	low __npowers_
  8486  002D3A  0100               	movlb	0	; () banked
  8487  002D3C  258E               	addwf	?___wmul& (0+255),w,b
  8488  002D3E  6EF6               	movwf	tblptrl,c
  8489  002D40  0EFE               	movlw	high __npowers_
  8490  002D42  0100               	movlb	0	; () banked
  8491  002D44  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  8492  002D46  6EF7               	movwf	tblptrh,c
  8493  002D48                     	if	0	;There are less than 3 active tblptr bytes
  8494  002D48                     	endif
  8495  002D48  0009               	tblrd		*+
  8496  002D4A  CFF5 F0A1          	movff	tablat,___ftmul@f1
  8497  002D4E  0009               	tblrd		*+
  8498  002D50  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  8499  002D54  000A               	tblrd		*-
  8500  002D56  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  8501  002D5A  EC5E  F01C         	call	___ftmul	;wreg free
  8502  002D5E  C0A1  F0B6         	movff	?___ftmul,_fround$1351
  8503  002D62  C0A2  F0B7         	movff	?___ftmul+1,_fround$1351+1
  8504  002D66  C0A3  F0B8         	movff	?___ftmul+2,_fround$1351+2
  8505                           
  8506                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8507  002D6A  C0B6  F0A1         	movff	_fround$1351,___ftmul@f1
  8508  002D6E  C0B7  F0A2         	movff	_fround$1351+1,___ftmul@f1+1
  8509  002D72  C0B8  F0A3         	movff	_fround$1351+2,___ftmul@f1+2
  8510  002D76  0E00               	movlw	0
  8511  002D78  0100               	movlb	0	; () banked
  8512  002D7A  6FA4               	movwf	___ftmul@f2& (0+255),b
  8513  002D7C  0E00               	movlw	0
  8514  002D7E  0100               	movlb	0	; () banked
  8515  002D80  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  8516  002D82  0E3F               	movlw	63
  8517  002D84  0100               	movlb	0	; () banked
  8518  002D86  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  8519  002D88  EC5E  F01C         	call	___ftmul	;wreg free
  8520  002D8C  D787               	goto	L6
  8521  002D8E                     l4868:
  8522                           
  8523                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8524  002D8E  0100               	movlb	0	; () banked
  8525  002D90  51B9               	movf	fround@prec& (0+255),w,b
  8526  002D92  0D03               	mullw	3
  8527  002D94  0E51               	movlw	low __npowers_
  8528  002D96  24F3               	addwf	prodl,w,c
  8529  002D98  6EF6               	movwf	tblptrl,c
  8530  002D9A  0EFE               	movlw	high __npowers_
  8531  002D9C  20F4               	addwfc	prodh,w,c
  8532  002D9E  6EF7               	movwf	tblptrh,c
  8533  002DA0                     	if	0	;There are less than 3 active tblptr bytes
  8534  002DA0                     	endif
  8535  002DA0  0009               	tblrd		*+
  8536  002DA2  CFF5 F0A1          	movff	tablat,___ftmul@f1
  8537  002DA6  0009               	tblrd		*+
  8538  002DA8  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  8539  002DAC  000A               	tblrd		*-
  8540  002DAE  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  8541  002DB2  0E00               	movlw	0
  8542  002DB4  0100               	movlb	0	; () banked
  8543  002DB6  6FA4               	movwf	___ftmul@f2& (0+255),b
  8544  002DB8  0E00               	movlw	0
  8545  002DBA  0100               	movlb	0	; () banked
  8546  002DBC  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  8547  002DBE  0E3F               	movlw	63
  8548  002DC0  0100               	movlb	0	; () banked
  8549  002DC2  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  8550  002DC4  EC5E  F01C         	call	___ftmul	;wreg free
  8551  002DC8  C0A1  F0B0         	movff	?___ftmul,?_fround
  8552  002DCC  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  8553  002DD0  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  8554  002DD4  0012               	return	
  8555  002DD6                     __end_of_fround:
  8556                           	opt stack 0
  8557                           tblptru	equ	0xFF8
  8558                           tblptrh	equ	0xFF7
  8559                           tblptrl	equ	0xFF6
  8560                           tablat	equ	0xFF5
  8561                           prodh	equ	0xFF4
  8562                           prodl	equ	0xFF3
  8563                           intcon	equ	0xFF2
  8564                           postinc0	equ	0xFEE
  8565                           wreg	equ	0xFE8
  8566                           postdec1	equ	0xFE5
  8567                           fsr1l	equ	0xFE1
  8568                           indf2	equ	0xFDF
  8569                           postinc2	equ	0xFDE
  8570                           postdec2	equ	0xFDD
  8571                           fsr2h	equ	0xFDA
  8572                           fsr2l	equ	0xFD9
  8573                           status	equ	0xFD8
  8574                           
  8575 ;; *************** function ___wmul *****************
  8576 ;; Defined at:
  8577 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;  multiplier      2   14[BANK0 ] unsigned int 
  8580 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  product         2   18[BANK0 ] unsigned int 
  8583 ;; Return value:  Size  Location     Type
  8584 ;;                  2   14[BANK0 ] unsigned int 
  8585 ;; Registers used:
  8586 ;;		wreg, status,2, status,0, prodl, prodh
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8592 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8593 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;Total ram usage:        6 bytes
  8597 ;; Hardware stack levels used:    1
  8598 ;; Hardware stack levels required when called:    6
  8599 ;; This function calls:
  8600 ;;		Nothing
  8601 ;; This function is called by:
  8602 ;;		_fround
  8603 ;;		_scale
  8604 ;;		_printf
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           	psect	text21
  8609  00579A                     __ptext21:
  8610                           	opt stack 0
  8611  00579A                     ___wmul:
  8612                           	opt stack 21
  8613                           
  8614                           ;incstack = 0
  8615  00579A  0100               	movlb	0	; () banked
  8616  00579C  518E               	movf	___wmul@multiplier& (0+255),w,b
  8617  00579E  0100               	movlb	0	; () banked
  8618  0057A0  0390               	mulwf	___wmul@multiplicand& (0+255),b
  8619  0057A2  CFF3 F092          	movff	prodl,___wmul@product
  8620  0057A6  CFF4 F093          	movff	prodh,___wmul@product+1
  8621  0057AA  0100               	movlb	0	; () banked
  8622  0057AC  518E               	movf	___wmul@multiplier& (0+255),w,b
  8623  0057AE  0100               	movlb	0	; () banked
  8624  0057B0  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8625  0057B2  50F3               	movf	prodl,w,c
  8626  0057B4  0100               	movlb	0	; () banked
  8627  0057B6  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  8628  0057B8  0100               	movlb	0	; () banked
  8629  0057BA  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8630  0057BC  0100               	movlb	0	; () banked
  8631  0057BE  0390               	mulwf	___wmul@multiplicand& (0+255),b
  8632  0057C0  50F3               	movf	prodl,w,c
  8633  0057C2  0100               	movlb	0	; () banked
  8634  0057C4  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  8635                           
  8636                           ; BSR set to: 0
  8637  0057C6  C092  F08E         	movff	___wmul@product,?___wmul
  8638  0057CA  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  8639  0057CE  0012               	return	
  8640  0057D0                     __end_of___wmul:
  8641                           	opt stack 0
  8642                           tblptru	equ	0xFF8
  8643                           tblptrh	equ	0xFF7
  8644                           tblptrl	equ	0xFF6
  8645                           tablat	equ	0xFF5
  8646                           prodh	equ	0xFF4
  8647                           prodl	equ	0xFF3
  8648                           intcon	equ	0xFF2
  8649                           postinc0	equ	0xFEE
  8650                           wreg	equ	0xFE8
  8651                           postdec1	equ	0xFE5
  8652                           fsr1l	equ	0xFE1
  8653                           indf2	equ	0xFDF
  8654                           postinc2	equ	0xFDE
  8655                           postdec2	equ	0xFDD
  8656                           fsr2h	equ	0xFDA
  8657                           fsr2l	equ	0xFD9
  8658                           status	equ	0xFD8
  8659                           
  8660 ;; *************** function ___awmod *****************
  8661 ;; Defined at:
  8662 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;  dividend        2    0[BANK0 ] int 
  8665 ;;  divisor         2    2[BANK0 ] int 
  8666 ;; Auto vars:     Size  Location     Type
  8667 ;;  sign            1    5[BANK0 ] unsigned char 
  8668 ;;  counter         1    4[BANK0 ] unsigned char 
  8669 ;; Return value:  Size  Location     Type
  8670 ;;                  2    0[BANK0 ] int 
  8671 ;; Registers used:
  8672 ;;		wreg, status,2, status,0
  8673 ;; Tracked objects:
  8674 ;;		On entry : 0/0
  8675 ;;		On exit  : 0/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8678 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8679 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;Total ram usage:        6 bytes
  8683 ;; Hardware stack levels used:    1
  8684 ;; Hardware stack levels required when called:    6
  8685 ;; This function calls:
  8686 ;;		Nothing
  8687 ;; This function is called by:
  8688 ;;		_fround
  8689 ;;		_scale
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           	psect	text22
  8694  004E08                     __ptext22:
  8695                           	opt stack 0
  8696  004E08                     ___awmod:
  8697                           	opt stack 21
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;incstack = 0
  8701  004E08  0E00               	movlw	0
  8702  004E0A  0100               	movlb	0	; () banked
  8703  004E0C  6F85               	movwf	___awmod@sign& (0+255),b
  8704                           
  8705                           ; BSR set to: 0
  8706  004E0E  0100               	movlb	0	; () banked
  8707  004E10  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8708  004E12  D008               	goto	l4796
  8709                           
  8710                           ; BSR set to: 0
  8711  004E14  0100               	movlb	0	; () banked
  8712  004E16  6D80               	negf	___awmod@dividend& (0+255),b
  8713  004E18  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8714  004E1A  B0D8               	btfsc	status,0,c
  8715  004E1C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8716                           
  8717                           ; BSR set to: 0
  8718  004E1E  0E01               	movlw	1
  8719  004E20  0100               	movlb	0	; () banked
  8720  004E22  6F85               	movwf	___awmod@sign& (0+255),b
  8721  004E24                     l4796:
  8722                           
  8723                           ; BSR set to: 0
  8724  004E24  0100               	movlb	0	; () banked
  8725  004E26  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8726  004E28  D005               	goto	l4800
  8727                           
  8728                           ; BSR set to: 0
  8729  004E2A  0100               	movlb	0	; () banked
  8730  004E2C  6D82               	negf	___awmod@divisor& (0+255),b
  8731  004E2E  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8732  004E30  B0D8               	btfsc	status,0,c
  8733  004E32  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8734  004E34                     l4800:
  8735                           
  8736                           ; BSR set to: 0
  8737  004E34  0100               	movlb	0	; () banked
  8738  004E36  5182               	movf	___awmod@divisor& (0+255),w,b
  8739  004E38  0100               	movlb	0	; () banked
  8740  004E3A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8741  004E3C  B4D8               	btfsc	status,2,c
  8742  004E3E  D026               	goto	l4816
  8743                           
  8744                           ; BSR set to: 0
  8745  004E40  0E01               	movlw	1
  8746  004E42  0100               	movlb	0	; () banked
  8747  004E44  6F84               	movwf	___awmod@counter& (0+255),b
  8748  004E46  D006               	goto	l4806
  8749  004E48                     l4804:
  8750                           
  8751                           ; BSR set to: 0
  8752  004E48  0100               	movlb	0	; () banked
  8753  004E4A  90D8               	bcf	status,0,c
  8754  004E4C  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8755  004E4E  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8756  004E50  0100               	movlb	0	; () banked
  8757  004E52  2B84               	incf	___awmod@counter& (0+255),f,b
  8758  004E54                     l4806:
  8759                           
  8760                           ; BSR set to: 0
  8761  004E54  0100               	movlb	0	; () banked
  8762  004E56  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8763  004E58  D7F7               	goto	l4804
  8764  004E5A                     l4808:
  8765                           
  8766                           ; BSR set to: 0
  8767  004E5A  0100               	movlb	0	; () banked
  8768  004E5C  5182               	movf	___awmod@divisor& (0+255),w,b
  8769  004E5E  0100               	movlb	0	; () banked
  8770  004E60  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8771  004E62  0100               	movlb	0	; () banked
  8772  004E64  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8773  004E66  0100               	movlb	0	; () banked
  8774  004E68  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8775  004E6A  A0D8               	btfss	status,0,c
  8776  004E6C  D008               	goto	l4812
  8777                           
  8778                           ; BSR set to: 0
  8779  004E6E  0100               	movlb	0	; () banked
  8780  004E70  5182               	movf	___awmod@divisor& (0+255),w,b
  8781  004E72  0100               	movlb	0	; () banked
  8782  004E74  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8783  004E76  0100               	movlb	0	; () banked
  8784  004E78  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8785  004E7A  0100               	movlb	0	; () banked
  8786  004E7C  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8787  004E7E                     l4812:
  8788                           
  8789                           ; BSR set to: 0
  8790  004E7E  0100               	movlb	0	; () banked
  8791  004E80  90D8               	bcf	status,0,c
  8792  004E82  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8793  004E84  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8794                           
  8795                           ; BSR set to: 0
  8796  004E86  0100               	movlb	0	; () banked
  8797  004E88  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8798  004E8A  D7E7               	goto	l4808
  8799  004E8C                     l4816:
  8800                           
  8801                           ; BSR set to: 0
  8802  004E8C  0100               	movlb	0	; () banked
  8803  004E8E  5185               	movf	___awmod@sign& (0+255),w,b
  8804  004E90  0100               	movlb	0	; () banked
  8805  004E92  B4D8               	btfsc	status,2,c
  8806  004E94  D005               	goto	l4820
  8807                           
  8808                           ; BSR set to: 0
  8809  004E96  0100               	movlb	0	; () banked
  8810  004E98  6D80               	negf	___awmod@dividend& (0+255),b
  8811  004E9A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8812  004E9C  B0D8               	btfsc	status,0,c
  8813  004E9E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8814  004EA0                     l4820:
  8815                           
  8816                           ; BSR set to: 0
  8817  004EA0  C080  F080         	movff	___awmod@dividend,?___awmod
  8818  004EA4  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8819  004EA8  0012               	return	
  8820  004EAA                     __end_of___awmod:
  8821                           	opt stack 0
  8822                           tblptru	equ	0xFF8
  8823                           tblptrh	equ	0xFF7
  8824                           tblptrl	equ	0xFF6
  8825                           tablat	equ	0xFF5
  8826                           prodh	equ	0xFF4
  8827                           prodl	equ	0xFF3
  8828                           intcon	equ	0xFF2
  8829                           postinc0	equ	0xFEE
  8830                           wreg	equ	0xFE8
  8831                           postdec1	equ	0xFE5
  8832                           fsr1l	equ	0xFE1
  8833                           indf2	equ	0xFDF
  8834                           postinc2	equ	0xFDE
  8835                           postdec2	equ	0xFDD
  8836                           fsr2h	equ	0xFDA
  8837                           fsr2l	equ	0xFD9
  8838                           status	equ	0xFD8
  8839                           
  8840 ;; *************** function ___awdiv *****************
  8841 ;; Defined at:
  8842 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;  dividend        2    6[BANK0 ] int 
  8845 ;;  divisor         2    8[BANK0 ] int 
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;  quotient        2   12[BANK0 ] int 
  8848 ;;  sign            1   11[BANK0 ] unsigned char 
  8849 ;;  counter         1   10[BANK0 ] unsigned char 
  8850 ;; Return value:  Size  Location     Type
  8851 ;;                  2    6[BANK0 ] int 
  8852 ;; Registers used:
  8853 ;;		wreg, status,2, status,0
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8859 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8860 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;Total ram usage:        8 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    6
  8866 ;; This function calls:
  8867 ;;		Nothing
  8868 ;; This function is called by:
  8869 ;;		_fround
  8870 ;;		_scale
  8871 ;;		_printf
  8872 ;; This function uses a non-reentrant model
  8873 ;;
  8874                           
  8875                           	psect	text23
  8876  004BE0                     __ptext23:
  8877                           	opt stack 0
  8878  004BE0                     ___awdiv:
  8879                           	opt stack 21
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;incstack = 0
  8883  004BE0  0E00               	movlw	0
  8884  004BE2  0100               	movlb	0	; () banked
  8885  004BE4  6F8B               	movwf	___awdiv@sign& (0+255),b
  8886                           
  8887                           ; BSR set to: 0
  8888  004BE6  0100               	movlb	0	; () banked
  8889  004BE8  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8890  004BEA  D008               	goto	l4752
  8891                           
  8892                           ; BSR set to: 0
  8893  004BEC  0100               	movlb	0	; () banked
  8894  004BEE  6D88               	negf	___awdiv@divisor& (0+255),b
  8895  004BF0  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8896  004BF2  B0D8               	btfsc	status,0,c
  8897  004BF4  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8898                           
  8899                           ; BSR set to: 0
  8900  004BF6  0E01               	movlw	1
  8901  004BF8  0100               	movlb	0	; () banked
  8902  004BFA  6F8B               	movwf	___awdiv@sign& (0+255),b
  8903  004BFC                     l4752:
  8904                           
  8905                           ; BSR set to: 0
  8906  004BFC  0100               	movlb	0	; () banked
  8907  004BFE  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8908  004C00  D008               	goto	l4758
  8909                           
  8910                           ; BSR set to: 0
  8911  004C02  0100               	movlb	0	; () banked
  8912  004C04  6D86               	negf	___awdiv@dividend& (0+255),b
  8913  004C06  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8914  004C08  B0D8               	btfsc	status,0,c
  8915  004C0A  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8916                           
  8917                           ; BSR set to: 0
  8918  004C0C  0E01               	movlw	1
  8919  004C0E  0100               	movlb	0	; () banked
  8920  004C10  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8921  004C12                     l4758:
  8922                           
  8923                           ; BSR set to: 0
  8924  004C12  0E00               	movlw	0
  8925  004C14  0100               	movlb	0	; () banked
  8926  004C16  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8927  004C18  0E00               	movlw	0
  8928  004C1A  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8929                           
  8930                           ; BSR set to: 0
  8931  004C1C  0100               	movlb	0	; () banked
  8932  004C1E  5188               	movf	___awdiv@divisor& (0+255),w,b
  8933  004C20  0100               	movlb	0	; () banked
  8934  004C22  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8935  004C24  B4D8               	btfsc	status,2,c
  8936  004C26  D02C               	goto	l4780
  8937                           
  8938                           ; BSR set to: 0
  8939  004C28  0E01               	movlw	1
  8940  004C2A  0100               	movlb	0	; () banked
  8941  004C2C  6F8A               	movwf	___awdiv@counter& (0+255),b
  8942  004C2E  D006               	goto	l4766
  8943  004C30                     l4764:
  8944                           
  8945                           ; BSR set to: 0
  8946  004C30  0100               	movlb	0	; () banked
  8947  004C32  90D8               	bcf	status,0,c
  8948  004C34  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8949  004C36  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8950  004C38  0100               	movlb	0	; () banked
  8951  004C3A  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8952  004C3C                     l4766:
  8953                           
  8954                           ; BSR set to: 0
  8955  004C3C  0100               	movlb	0	; () banked
  8956  004C3E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8957  004C40  D7F7               	goto	l4764
  8958  004C42                     l4768:
  8959                           
  8960                           ; BSR set to: 0
  8961  004C42  0100               	movlb	0	; () banked
  8962  004C44  90D8               	bcf	status,0,c
  8963  004C46  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8964  004C48  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8965                           
  8966                           ; BSR set to: 0
  8967  004C4A  0100               	movlb	0	; () banked
  8968  004C4C  5188               	movf	___awdiv@divisor& (0+255),w,b
  8969  004C4E  0100               	movlb	0	; () banked
  8970  004C50  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8971  004C52  0100               	movlb	0	; () banked
  8972  004C54  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8973  004C56  0100               	movlb	0	; () banked
  8974  004C58  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8975  004C5A  A0D8               	btfss	status,0,c
  8976  004C5C  D00A               	goto	l4776
  8977                           
  8978                           ; BSR set to: 0
  8979  004C5E  0100               	movlb	0	; () banked
  8980  004C60  5188               	movf	___awdiv@divisor& (0+255),w,b
  8981  004C62  0100               	movlb	0	; () banked
  8982  004C64  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8983  004C66  0100               	movlb	0	; () banked
  8984  004C68  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8985  004C6A  0100               	movlb	0	; () banked
  8986  004C6C  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8987                           
  8988                           ; BSR set to: 0
  8989  004C6E  0100               	movlb	0	; () banked
  8990  004C70  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8991  004C72                     l4776:
  8992                           
  8993                           ; BSR set to: 0
  8994  004C72  0100               	movlb	0	; () banked
  8995  004C74  90D8               	bcf	status,0,c
  8996  004C76  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8997  004C78  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8998                           
  8999                           ; BSR set to: 0
  9000  004C7A  0100               	movlb	0	; () banked
  9001  004C7C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9002  004C7E  D7E1               	goto	l4768
  9003  004C80                     l4780:
  9004                           
  9005                           ; BSR set to: 0
  9006  004C80  0100               	movlb	0	; () banked
  9007  004C82  518B               	movf	___awdiv@sign& (0+255),w,b
  9008  004C84  0100               	movlb	0	; () banked
  9009  004C86  B4D8               	btfsc	status,2,c
  9010  004C88  D005               	goto	l4784
  9011                           
  9012                           ; BSR set to: 0
  9013  004C8A  0100               	movlb	0	; () banked
  9014  004C8C  6D8C               	negf	___awdiv@quotient& (0+255),b
  9015  004C8E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9016  004C90  B0D8               	btfsc	status,0,c
  9017  004C92  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9018  004C94                     l4784:
  9019                           
  9020                           ; BSR set to: 0
  9021  004C94  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9022  004C98  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9023  004C9C  0012               	return	
  9024  004C9E                     __end_of___awdiv:
  9025                           	opt stack 0
  9026                           tblptru	equ	0xFF8
  9027                           tblptrh	equ	0xFF7
  9028                           tblptrl	equ	0xFF6
  9029                           tablat	equ	0xFF5
  9030                           prodh	equ	0xFF4
  9031                           prodl	equ	0xFF3
  9032                           intcon	equ	0xFF2
  9033                           postinc0	equ	0xFEE
  9034                           wreg	equ	0xFE8
  9035                           postdec1	equ	0xFE5
  9036                           fsr1l	equ	0xFE1
  9037                           indf2	equ	0xFDF
  9038                           postinc2	equ	0xFDE
  9039                           postdec2	equ	0xFDD
  9040                           fsr2h	equ	0xFDA
  9041                           fsr2l	equ	0xFD9
  9042                           status	equ	0xFD8
  9043                           
  9044 ;; *************** function __tdiv_to_l_ *****************
  9045 ;; Defined at:
  9046 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;  f1              3    0[BANK0 ] float 
  9049 ;;  f2              3    3[BANK0 ] float 
  9050 ;; Auto vars:     Size  Location     Type
  9051 ;;  quot            4    9[BANK0 ] unsigned long 
  9052 ;;  exp1            1   14[BANK0 ] unsigned char 
  9053 ;;  cntr            1   13[BANK0 ] unsigned char 
  9054 ;; Return value:  Size  Location     Type
  9055 ;;                  4    0[BANK0 ] unsigned long 
  9056 ;; Registers used:
  9057 ;;		wreg, status,2, status,0
  9058 ;; Tracked objects:
  9059 ;;		On entry : 0/0
  9060 ;;		On exit  : 0/0
  9061 ;;		Unchanged: 0/0
  9062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9063 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9064 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;Total ram usage:       15 bytes
  9068 ;; Hardware stack levels used:    1
  9069 ;; Hardware stack levels required when called:    6
  9070 ;; This function calls:
  9071 ;;		Nothing
  9072 ;; This function is called by:
  9073 ;;		_printf
  9074 ;; This function uses a non-reentrant model
  9075 ;;
  9076                           
  9077                           	psect	text24
  9078  003430                     __ptext24:
  9079                           	opt stack 0
  9080  003430                     __tdiv_to_l_:
  9081                           	opt stack 22
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;incstack = 0
  9085  003430  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9086  003434  0100               	movlb	0	; () banked
  9087  003436  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  9088  003438  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  9089  00343A  0100               	movlb	0	; () banked
  9090  00343C  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  9091  00343E  0100               	movlb	0	; () banked
  9092  003440  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  9093  003442  E301               	bnc	u4871
  9094  003444  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  9095  003446                     u4871:
  9096  003446  0100               	movlb	0	; () banked
  9097  003448  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  9098  00344A  0100               	movlb	0	; () banked
  9099  00344C  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  9100  00344E  0100               	movlb	0	; () banked
  9101  003450  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  9102  003452  A4D8               	btfss	status,2,c
  9103  003454  D00A               	goto	l4928
  9104                           
  9105                           ; BSR set to: 0
  9106  003456  0E00               	movlw	0
  9107  003458  0100               	movlb	0	; () banked
  9108  00345A  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  9109  00345C  0E00               	movlw	0
  9110  00345E  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9111  003460  0E00               	movlw	0
  9112  003462  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9113  003464  0E00               	movlw	0
  9114  003466  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9115                           
  9116                           ; BSR set to: 0
  9117  003468  0012               	return	
  9118  00346A                     l4928:
  9119                           
  9120                           ; BSR set to: 0
  9121  00346A  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9122  00346E  0100               	movlb	0	; () banked
  9123  003470  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  9124  003472  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  9125  003474  0100               	movlb	0	; () banked
  9126  003476  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  9127  003478  0100               	movlb	0	; () banked
  9128  00347A  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  9129  00347C  E301               	bnc	u4891
  9130  00347E  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  9131  003480                     u4891:
  9132  003480  0100               	movlb	0	; () banked
  9133  003482  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  9134  003484  0100               	movlb	0	; () banked
  9135  003486  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  9136  003488  0100               	movlb	0	; () banked
  9137  00348A  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  9138  00348C  A4D8               	btfss	status,2,c
  9139  00348E  D00A               	goto	l4934
  9140                           
  9141                           ; BSR set to: 0
  9142  003490  0E00               	movlw	0
  9143  003492  0100               	movlb	0	; () banked
  9144  003494  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  9145  003496  0E00               	movlw	0
  9146  003498  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9147  00349A  0E00               	movlw	0
  9148  00349C  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9149  00349E  0E00               	movlw	0
  9150  0034A0  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9151                           
  9152                           ; BSR set to: 0
  9153  0034A2  0012               	return	
  9154  0034A4                     l4934:
  9155                           
  9156                           ; BSR set to: 0
  9157  0034A4  0100               	movlb	0	; () banked
  9158  0034A6  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  9159                           
  9160                           ; BSR set to: 0
  9161  0034A8  0EFF               	movlw	255
  9162  0034AA  0100               	movlb	0	; () banked
  9163  0034AC  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  9164  0034AE  0EFF               	movlw	255
  9165  0034B0  0100               	movlb	0	; () banked
  9166  0034B2  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  9167  0034B4  0E00               	movlw	0
  9168  0034B6  0100               	movlb	0	; () banked
  9169  0034B8  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  9170  0034BA  0100               	movlb	0	; () banked
  9171  0034BC  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  9172                           
  9173                           ; BSR set to: 0
  9174  0034BE  0EFF               	movlw	255
  9175  0034C0  0100               	movlb	0	; () banked
  9176  0034C2  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  9177  0034C4  0EFF               	movlw	255
  9178  0034C6  0100               	movlb	0	; () banked
  9179  0034C8  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  9180  0034CA  0E00               	movlw	0
  9181  0034CC  0100               	movlb	0	; () banked
  9182  0034CE  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  9183                           
  9184                           ; BSR set to: 0
  9185  0034D0  0E00               	movlw	0
  9186  0034D2  0100               	movlb	0	; () banked
  9187  0034D4  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  9188  0034D6  0E00               	movlw	0
  9189  0034D8  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  9190  0034DA  0E00               	movlw	0
  9191  0034DC  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  9192  0034DE  0E00               	movlw	0
  9193  0034E0  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  9194                           
  9195                           ; BSR set to: 0
  9196  0034E2  0E7F               	movlw	127
  9197  0034E4  0100               	movlb	0	; () banked
  9198  0034E6  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  9199                           
  9200                           ; BSR set to: 0
  9201  0034E8  0100               	movlb	0	; () banked
  9202  0034EA  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  9203  0034EC  0F98               	addlw	152
  9204  0034EE  0100               	movlb	0	; () banked
  9205  0034F0  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  9206                           
  9207                           ; BSR set to: 0
  9208  0034F2  0E18               	movlw	24
  9209  0034F4  0100               	movlb	0	; () banked
  9210  0034F6  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  9211  0034F8                     l1130:
  9212                           
  9213                           ; BSR set to: 0
  9214  0034F8  0100               	movlb	0	; () banked
  9215  0034FA  90D8               	bcf	status,0,c
  9216  0034FC  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  9217  0034FE  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  9218  003500  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  9219  003502  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  9220                           
  9221                           ; BSR set to: 0
  9222  003504  0100               	movlb	0	; () banked
  9223  003506  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  9224  003508  0100               	movlb	0	; () banked
  9225  00350A  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  9226  00350C  0100               	movlb	0	; () banked
  9227  00350E  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  9228  003510  0100               	movlb	0	; () banked
  9229  003512  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  9230  003514  0100               	movlb	0	; () banked
  9231  003516  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  9232  003518  0100               	movlb	0	; () banked
  9233  00351A  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  9234  00351C  A0D8               	btfss	status,0,c
  9235  00351E  D00E               	goto	l1131
  9236                           
  9237                           ; BSR set to: 0
  9238  003520  0100               	movlb	0	; () banked
  9239  003522  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  9240  003524  0100               	movlb	0	; () banked
  9241  003526  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  9242  003528  0100               	movlb	0	; () banked
  9243  00352A  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  9244  00352C  0100               	movlb	0	; () banked
  9245  00352E  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  9246  003530  0100               	movlb	0	; () banked
  9247  003532  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  9248  003534  0100               	movlb	0	; () banked
  9249  003536  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  9250                           
  9251                           ; BSR set to: 0
  9252  003538  0100               	movlb	0	; () banked
  9253  00353A  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  9254  00353C                     l1131:
  9255                           
  9256                           ; BSR set to: 0
  9257  00353C  0100               	movlb	0	; () banked
  9258  00353E  90D8               	bcf	status,0,c
  9259  003540  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  9260  003542  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  9261  003544  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  9262                           
  9263                           ; BSR set to: 0
  9264  003546  0100               	movlb	0	; () banked
  9265  003548  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  9266  00354A  D7D6               	goto	l1130
  9267                           
  9268                           ; BSR set to: 0
  9269                           
  9270                           ; BSR set to: 0
  9271  00354C  0100               	movlb	0	; () banked
  9272  00354E  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  9273  003550  D01A               	goto	l4968
  9274                           
  9275                           ; BSR set to: 0
  9276  003552  0100               	movlb	0	; () banked
  9277  003554  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  9278  003556  0A80               	xorlw	128
  9279  003558  0F97               	addlw	151
  9280  00355A  B0D8               	btfsc	status,0,c
  9281  00355C  D00A               	goto	l4964
  9282                           
  9283                           ; BSR set to: 0
  9284  00355E  0E00               	movlw	0
  9285  003560  0100               	movlb	0	; () banked
  9286  003562  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  9287  003564  0E00               	movlw	0
  9288  003566  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9289  003568  0E00               	movlw	0
  9290  00356A  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9291  00356C  0E00               	movlw	0
  9292  00356E  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9293                           
  9294                           ; BSR set to: 0
  9295  003570  0012               	return	
  9296  003572                     l4964:
  9297                           
  9298                           ; BSR set to: 0
  9299  003572  0100               	movlb	0	; () banked
  9300  003574  90D8               	bcf	status,0,c
  9301  003576  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  9302  003578  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  9303  00357A  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  9304  00357C  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  9305                           
  9306                           ; BSR set to: 0
  9307  00357E  0100               	movlb	0	; () banked
  9308  003580  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  9309  003582  D7F7               	goto	l4964
  9310                           
  9311                           ; BSR set to: 0
  9312  003584  D01B               	goto	l1137
  9313  003586                     l4968:
  9314                           
  9315                           ; BSR set to: 0
  9316  003586  0E17               	movlw	23
  9317  003588  0100               	movlb	0	; () banked
  9318  00358A  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  9319  00358C  D012               	goto	l4976
  9320                           
  9321                           ; BSR set to: 0
  9322  00358E  0E00               	movlw	0
  9323  003590  0100               	movlb	0	; () banked
  9324  003592  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  9325  003594  0E00               	movlw	0
  9326  003596  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9327  003598  0E00               	movlw	0
  9328  00359A  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9329  00359C  0E00               	movlw	0
  9330  00359E  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9331                           
  9332                           ; BSR set to: 0
  9333  0035A0  0012               	return	
  9334  0035A2                     l4974:
  9335                           
  9336                           ; BSR set to: 0
  9337  0035A2  0100               	movlb	0	; () banked
  9338  0035A4  90D8               	bcf	status,0,c
  9339  0035A6  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  9340  0035A8  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  9341  0035AA  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  9342  0035AC  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  9343  0035AE  0100               	movlb	0	; () banked
  9344  0035B0  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  9345  0035B2                     l4976:
  9346                           
  9347                           ; BSR set to: 0
  9348  0035B2  0100               	movlb	0	; () banked
  9349  0035B4  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  9350  0035B6  0100               	movlb	0	; () banked
  9351  0035B8  A4D8               	btfss	status,2,c
  9352  0035BA  D7F3               	goto	l4974
  9353  0035BC                     l1137:
  9354                           
  9355                           ; BSR set to: 0
  9356  0035BC  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9357  0035C0  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9358  0035C4  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9359  0035C8  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9360                           
  9361                           ; BSR set to: 0
  9362  0035CC  0012               	return		;funcret
  9363  0035CE                     __end_of__tdiv_to_l_:
  9364                           	opt stack 0
  9365                           tblptru	equ	0xFF8
  9366                           tblptrh	equ	0xFF7
  9367                           tblptrl	equ	0xFF6
  9368                           tablat	equ	0xFF5
  9369                           prodh	equ	0xFF4
  9370                           prodl	equ	0xFF3
  9371                           intcon	equ	0xFF2
  9372                           postinc0	equ	0xFEE
  9373                           wreg	equ	0xFE8
  9374                           postdec1	equ	0xFE5
  9375                           fsr1l	equ	0xFE1
  9376                           indf2	equ	0xFDF
  9377                           postinc2	equ	0xFDE
  9378                           postdec2	equ	0xFDD
  9379                           fsr2h	equ	0xFDA
  9380                           fsr2l	equ	0xFD9
  9381                           status	equ	0xFD8
  9382                           
  9383 ;; *************** function __div_to_l_ *****************
  9384 ;; Defined at:
  9385 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;  f1              3    0[BANK0 ] unsigned long 
  9388 ;;  f2              3    3[BANK0 ] unsigned long 
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;  quot            4    6[BANK0 ] unsigned long 
  9391 ;;  exp1            1   11[BANK0 ] unsigned char 
  9392 ;;  cntr            1   10[BANK0 ] unsigned char 
  9393 ;; Return value:  Size  Location     Type
  9394 ;;                  4    0[BANK0 ] unsigned long 
  9395 ;; Registers used:
  9396 ;;		wreg, status,2, status,0
  9397 ;; Tracked objects:
  9398 ;;		On entry : 0/0
  9399 ;;		On exit  : 0/0
  9400 ;;		Unchanged: 0/0
  9401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9402 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9406 ;;Total ram usage:       12 bytes
  9407 ;; Hardware stack levels used:    1
  9408 ;; Hardware stack levels required when called:    6
  9409 ;; This function calls:
  9410 ;;		Nothing
  9411 ;; This function is called by:
  9412 ;;		_printf
  9413 ;; This function uses a non-reentrant model
  9414 ;;
  9415                           
  9416                           	psect	text25
  9417  0035CE                     __ptext25:
  9418                           	opt stack 0
  9419  0035CE                     __div_to_l_:
  9420                           	opt stack 22
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;incstack = 0
  9424  0035CE  0100               	movlb	0	; () banked
  9425  0035D0  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  9426  0035D2  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  9427  0035D4  0100               	movlb	0	; () banked
  9428  0035D6  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  9429  0035D8  0100               	movlb	0	; () banked
  9430  0035DA  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  9431  0035DC  A4D8               	btfss	status,2,c
  9432  0035DE  D00A               	goto	l4984
  9433                           
  9434                           ; BSR set to: 0
  9435  0035E0  0E00               	movlw	0
  9436  0035E2  0100               	movlb	0	; () banked
  9437  0035E4  6F80               	movwf	?__div_to_l_& (0+255),b
  9438  0035E6  0E00               	movlw	0
  9439  0035E8  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  9440  0035EA  0E00               	movlw	0
  9441  0035EC  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  9442  0035EE  0E00               	movlw	0
  9443  0035F0  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  9444                           
  9445                           ; BSR set to: 0
  9446  0035F2  0012               	return	
  9447  0035F4                     l4984:
  9448                           
  9449                           ; BSR set to: 0
  9450  0035F4  0100               	movlb	0	; () banked
  9451  0035F6  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  9452  0035F8  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  9453  0035FA  0100               	movlb	0	; () banked
  9454  0035FC  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  9455  0035FE  0100               	movlb	0	; () banked
  9456  003600  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  9457  003602  A4D8               	btfss	status,2,c
  9458  003604  D00A               	goto	l4990
  9459                           
  9460                           ; BSR set to: 0
  9461  003606  0E00               	movlw	0
  9462  003608  0100               	movlb	0	; () banked
  9463  00360A  6F80               	movwf	?__div_to_l_& (0+255),b
  9464  00360C  0E00               	movlw	0
  9465  00360E  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  9466  003610  0E00               	movlw	0
  9467  003612  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  9468  003614  0E00               	movlw	0
  9469  003616  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  9470                           
  9471                           ; BSR set to: 0
  9472  003618  0012               	return	
  9473  00361A                     l4990:
  9474                           
  9475                           ; BSR set to: 0
  9476  00361A  0100               	movlb	0	; () banked
  9477  00361C  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  9478                           
  9479                           ; BSR set to: 0
  9480  00361E  0EFF               	movlw	255
  9481  003620  0100               	movlb	0	; () banked
  9482  003622  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  9483  003624  0EFF               	movlw	255
  9484  003626  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  9485  003628  0EFF               	movlw	255
  9486  00362A  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  9487  00362C  0E00               	movlw	0
  9488  00362E  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  9489                           
  9490                           ; BSR set to: 0
  9491  003630  0100               	movlb	0	; () banked
  9492  003632  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  9493  003634  0EFF               	movlw	255
  9494  003636  0100               	movlb	0	; () banked
  9495  003638  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  9496  00363A  0EFF               	movlw	255
  9497  00363C  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  9498  00363E  0EFF               	movlw	255
  9499  003640  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  9500  003642  0E00               	movlw	0
  9501  003644  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  9502                           
  9503                           ; BSR set to: 0
  9504  003646  0E00               	movlw	0
  9505  003648  0100               	movlb	0	; () banked
  9506  00364A  6F86               	movwf	__div_to_l_@quot& (0+255),b
  9507  00364C  0E00               	movlw	0
  9508  00364E  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  9509  003650  0E00               	movlw	0
  9510  003652  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  9511  003654  0E00               	movlw	0
  9512  003656  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  9513                           
  9514                           ; BSR set to: 0
  9515  003658  0E7F               	movlw	127
  9516  00365A  0100               	movlb	0	; () banked
  9517  00365C  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  9518                           
  9519                           ; BSR set to: 0
  9520  00365E  0100               	movlb	0	; () banked
  9521  003660  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  9522  003662  0FA0               	addlw	160
  9523  003664  0100               	movlb	0	; () banked
  9524  003666  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  9525                           
  9526                           ; BSR set to: 0
  9527  003668  0E20               	movlw	32
  9528  00366A  0100               	movlb	0	; () banked
  9529  00366C  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  9530  00366E                     l5004:
  9531                           
  9532                           ; BSR set to: 0
  9533  00366E  0100               	movlb	0	; () banked
  9534  003670  90D8               	bcf	status,0,c
  9535  003672  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  9536  003674  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9537  003676  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9538  003678  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9539                           
  9540                           ; BSR set to: 0
  9541  00367A  0100               	movlb	0	; () banked
  9542  00367C  5183               	movf	__div_to_l_@f2& (0+255),w,b
  9543  00367E  0100               	movlb	0	; () banked
  9544  003680  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  9545  003682  0100               	movlb	0	; () banked
  9546  003684  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9547  003686  0100               	movlb	0	; () banked
  9548  003688  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  9549  00368A  0100               	movlb	0	; () banked
  9550  00368C  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9551  00368E  0100               	movlb	0	; () banked
  9552  003690  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  9553  003692  0100               	movlb	0	; () banked
  9554  003694  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9555  003696  0100               	movlb	0	; () banked
  9556  003698  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  9557  00369A  A0D8               	btfss	status,0,c
  9558  00369C  D012               	goto	l5012
  9559                           
  9560                           ; BSR set to: 0
  9561  00369E  0100               	movlb	0	; () banked
  9562  0036A0  5183               	movf	__div_to_l_@f2& (0+255),w,b
  9563  0036A2  0100               	movlb	0	; () banked
  9564  0036A4  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  9565  0036A6  0100               	movlb	0	; () banked
  9566  0036A8  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9567  0036AA  0100               	movlb	0	; () banked
  9568  0036AC  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  9569  0036AE  0100               	movlb	0	; () banked
  9570  0036B0  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9571  0036B2  0100               	movlb	0	; () banked
  9572  0036B4  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  9573  0036B6  0100               	movlb	0	; () banked
  9574  0036B8  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9575  0036BA  0100               	movlb	0	; () banked
  9576  0036BC  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  9577                           
  9578                           ; BSR set to: 0
  9579  0036BE  0100               	movlb	0	; () banked
  9580  0036C0  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  9581  0036C2                     l5012:
  9582                           
  9583                           ; BSR set to: 0
  9584  0036C2  0100               	movlb	0	; () banked
  9585  0036C4  90D8               	bcf	status,0,c
  9586  0036C6  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  9587  0036C8  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  9588  0036CA  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  9589  0036CC  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  9590                           
  9591                           ; BSR set to: 0
  9592  0036CE  0100               	movlb	0	; () banked
  9593  0036D0  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  9594  0036D2  D7CD               	goto	l5004
  9595                           
  9596                           ; BSR set to: 0
  9597                           
  9598                           ; BSR set to: 0
  9599  0036D4  0100               	movlb	0	; () banked
  9600  0036D6  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  9601  0036D8  D01A               	goto	l5028
  9602                           
  9603                           ; BSR set to: 0
  9604  0036DA  0100               	movlb	0	; () banked
  9605  0036DC  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  9606  0036DE  0A80               	xorlw	128
  9607  0036E0  0F9F               	addlw	159
  9608  0036E2  B0D8               	btfsc	status,0,c
  9609  0036E4  D00A               	goto	l5024
  9610                           
  9611                           ; BSR set to: 0
  9612  0036E6  0E00               	movlw	0
  9613  0036E8  0100               	movlb	0	; () banked
  9614  0036EA  6F80               	movwf	?__div_to_l_& (0+255),b
  9615  0036EC  0E00               	movlw	0
  9616  0036EE  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  9617  0036F0  0E00               	movlw	0
  9618  0036F2  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  9619  0036F4  0E00               	movlw	0
  9620  0036F6  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  9621                           
  9622                           ; BSR set to: 0
  9623  0036F8  0012               	return	
  9624  0036FA                     l5024:
  9625                           
  9626                           ; BSR set to: 0
  9627  0036FA  0100               	movlb	0	; () banked
  9628  0036FC  90D8               	bcf	status,0,c
  9629  0036FE  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  9630  003700  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  9631  003702  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  9632  003704  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  9633                           
  9634                           ; BSR set to: 0
  9635  003706  0100               	movlb	0	; () banked
  9636  003708  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  9637  00370A  D7F7               	goto	l5024
  9638                           
  9639                           ; BSR set to: 0
  9640  00370C  D01B               	goto	l1033
  9641  00370E                     l5028:
  9642                           
  9643                           ; BSR set to: 0
  9644  00370E  0E1F               	movlw	31
  9645  003710  0100               	movlb	0	; () banked
  9646  003712  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  9647  003714  D012               	goto	l5036
  9648                           
  9649                           ; BSR set to: 0
  9650  003716  0E00               	movlw	0
  9651  003718  0100               	movlb	0	; () banked
  9652  00371A  6F80               	movwf	?__div_to_l_& (0+255),b
  9653  00371C  0E00               	movlw	0
  9654  00371E  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  9655  003720  0E00               	movlw	0
  9656  003722  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  9657  003724  0E00               	movlw	0
  9658  003726  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  9659                           
  9660                           ; BSR set to: 0
  9661  003728  0012               	return	
  9662  00372A                     l5034:
  9663                           
  9664                           ; BSR set to: 0
  9665  00372A  0100               	movlb	0	; () banked
  9666  00372C  90D8               	bcf	status,0,c
  9667  00372E  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  9668  003730  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9669  003732  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9670  003734  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9671  003736  0100               	movlb	0	; () banked
  9672  003738  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  9673  00373A                     l5036:
  9674                           
  9675                           ; BSR set to: 0
  9676  00373A  0100               	movlb	0	; () banked
  9677  00373C  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  9678  00373E  0100               	movlb	0	; () banked
  9679  003740  A4D8               	btfss	status,2,c
  9680  003742  D7F3               	goto	l5034
  9681  003744                     l1033:
  9682                           
  9683                           ; BSR set to: 0
  9684  003744  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  9685  003748  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9686  00374C  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9687  003750  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9688                           
  9689                           ; BSR set to: 0
  9690  003754  0012               	return		;funcret
  9691  003756                     __end_of__div_to_l_:
  9692                           	opt stack 0
  9693                           tblptru	equ	0xFF8
  9694                           tblptrh	equ	0xFF7
  9695                           tblptrl	equ	0xFF6
  9696                           tablat	equ	0xFF5
  9697                           prodh	equ	0xFF4
  9698                           prodl	equ	0xFF3
  9699                           intcon	equ	0xFF2
  9700                           postinc0	equ	0xFEE
  9701                           wreg	equ	0xFE8
  9702                           postdec1	equ	0xFE5
  9703                           fsr1l	equ	0xFE1
  9704                           indf2	equ	0xFDF
  9705                           postinc2	equ	0xFDE
  9706                           postdec2	equ	0xFDD
  9707                           fsr2h	equ	0xFDA
  9708                           fsr2l	equ	0xFD9
  9709                           status	equ	0xFD8
  9710                           
  9711 ;; *************** function ___lltoft *****************
  9712 ;; Defined at:
  9713 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;  c               4    8[BANK0 ] unsigned long 
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;  exp             1   16[BANK0 ] unsigned char 
  9718 ;; Return value:  Size  Location     Type
  9719 ;;                  3    8[BANK0 ] float 
  9720 ;; Registers used:
  9721 ;;		wreg, status,2, status,0, cstack
  9722 ;; Tracked objects:
  9723 ;;		On entry : 0/0
  9724 ;;		On exit  : 0/0
  9725 ;;		Unchanged: 0/0
  9726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9727 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;Total ram usage:        9 bytes
  9732 ;; Hardware stack levels used:    1
  9733 ;; Hardware stack levels required when called:    7
  9734 ;; This function calls:
  9735 ;;		___ftpack
  9736 ;; This function is called by:
  9737 ;;		_printf
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           	psect	text26
  9742  005206                     __ptext26:
  9743                           	opt stack 0
  9744  005206                     ___lltoft:
  9745                           	opt stack 21
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;incstack = 0
  9749  005206  0E8E               	movlw	142
  9750  005208  0100               	movlb	0	; () banked
  9751  00520A  6F90               	movwf	___lltoft@exp& (0+255),b
  9752  00520C  D008               	goto	l5230
  9753  00520E                     l5228:
  9754                           
  9755                           ; BSR set to: 0
  9756  00520E  0100               	movlb	0	; () banked
  9757  005210  90D8               	bcf	status,0,c
  9758  005212  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  9759  005214  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  9760  005216  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
  9761  005218  3388               	rrcf	___lltoft@c& (0+255),f,b
  9762  00521A  0100               	movlb	0	; () banked
  9763  00521C  2B90               	incf	___lltoft@exp& (0+255),f,b
  9764  00521E                     l5230:
  9765                           
  9766                           ; BSR set to: 0
  9767  00521E  0E00               	movlw	0
  9768  005220  0100               	movlb	0	; () banked
  9769  005222  1588               	andwf	___lltoft@c& (0+255),w,b
  9770  005224  0100               	movlb	0	; () banked
  9771  005226  6F8C               	movwf	??___lltoft& (0+255),b
  9772  005228  0E00               	movlw	0
  9773  00522A  0100               	movlb	0	; () banked
  9774  00522C  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
  9775  00522E  0100               	movlb	0	; () banked
  9776  005230  6F8D               	movwf	(??___lltoft+1)& (0+255),b
  9777  005232  0E00               	movlw	0
  9778  005234  0100               	movlb	0	; () banked
  9779  005236  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
  9780  005238  0100               	movlb	0	; () banked
  9781  00523A  6F8E               	movwf	(??___lltoft+2)& (0+255),b
  9782  00523C  0EFF               	movlw	255
  9783  00523E  0100               	movlb	0	; () banked
  9784  005240  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
  9785  005242  0100               	movlb	0	; () banked
  9786  005244  6F8F               	movwf	(??___lltoft+3)& (0+255),b
  9787  005246  0100               	movlb	0	; () banked
  9788  005248  518C               	movf	??___lltoft& (0+255),w,b
  9789  00524A  0100               	movlb	0	; () banked
  9790  00524C  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
  9791  00524E  0100               	movlb	0	; () banked
  9792  005250  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
  9793  005252  0100               	movlb	0	; () banked
  9794  005254  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
  9795  005256  A4D8               	btfss	status,2,c
  9796  005258  D7DA               	goto	l5228
  9797                           
  9798                           ; BSR set to: 0
  9799                           
  9800                           ; BSR set to: 0
  9801  00525A  C088  F080         	movff	___lltoft@c,___ftpack@arg
  9802  00525E  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
  9803  005262  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
  9804  005266  C090  F083         	movff	___lltoft@exp,___ftpack@exp
  9805  00526A  0E00               	movlw	0
  9806  00526C  0100               	movlb	0	; () banked
  9807  00526E  6F84               	movwf	___ftpack@sign& (0+255),b
  9808  005270  EC44  F021         	call	___ftpack	;wreg free
  9809  005274  C080  F088         	movff	?___ftpack,?___lltoft
  9810  005278  C081  F089         	movff	?___ftpack+1,?___lltoft+1
  9811  00527C  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
  9812  005280  0012               	return	
  9813  005282                     __end_of___lltoft:
  9814                           	opt stack 0
  9815                           tblptru	equ	0xFF8
  9816                           tblptrh	equ	0xFF7
  9817                           tblptrl	equ	0xFF6
  9818                           tablat	equ	0xFF5
  9819                           prodh	equ	0xFF4
  9820                           prodl	equ	0xFF3
  9821                           intcon	equ	0xFF2
  9822                           postinc0	equ	0xFEE
  9823                           wreg	equ	0xFE8
  9824                           postdec1	equ	0xFE5
  9825                           fsr1l	equ	0xFE1
  9826                           indf2	equ	0xFDF
  9827                           postinc2	equ	0xFDE
  9828                           postdec2	equ	0xFDD
  9829                           fsr2h	equ	0xFDA
  9830                           fsr2l	equ	0xFD9
  9831                           status	equ	0xFD8
  9832                           
  9833 ;; *************** function ___llmod *****************
  9834 ;; Defined at:
  9835 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9836 ;; Parameters:    Size  Location     Type
  9837 ;;  dividend        4   13[BANK0 ] unsigned long 
  9838 ;;  divisor         4   17[BANK0 ] unsigned long 
  9839 ;; Auto vars:     Size  Location     Type
  9840 ;;  counter         1   21[BANK0 ] unsigned char 
  9841 ;; Return value:  Size  Location     Type
  9842 ;;                  4   13[BANK0 ] unsigned long 
  9843 ;; Registers used:
  9844 ;;		wreg, status,2, status,0
  9845 ;; Tracked objects:
  9846 ;;		On entry : 0/0
  9847 ;;		On exit  : 0/0
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9850 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9853 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;Total ram usage:        9 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:    6
  9857 ;; This function calls:
  9858 ;;		Nothing
  9859 ;; This function is called by:
  9860 ;;		_printf
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           	psect	text27
  9865  004F48                     __ptext27:
  9866                           	opt stack 0
  9867  004F48                     ___llmod:
  9868                           	opt stack 22
  9869                           
  9870                           ;incstack = 0
  9871  004F48  0100               	movlb	0	; () banked
  9872  004F4A  5191               	movf	___llmod@divisor& (0+255),w,b
  9873  004F4C  0100               	movlb	0	; () banked
  9874  004F4E  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9875  004F50  0100               	movlb	0	; () banked
  9876  004F52  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9877  004F54  0100               	movlb	0	; () banked
  9878  004F56  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  9879  004F58  B4D8               	btfsc	status,2,c
  9880  004F5A  D03A               	goto	l1222
  9881                           
  9882                           ; BSR set to: 0
  9883  004F5C  0E01               	movlw	1
  9884  004F5E  0100               	movlb	0	; () banked
  9885  004F60  6F95               	movwf	___llmod@counter& (0+255),b
  9886  004F62  D008               	goto	l5216
  9887  004F64                     l5214:
  9888                           
  9889                           ; BSR set to: 0
  9890  004F64  0100               	movlb	0	; () banked
  9891  004F66  90D8               	bcf	status,0,c
  9892  004F68  3791               	rlcf	___llmod@divisor& (0+255),f,b
  9893  004F6A  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9894  004F6C  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9895  004F6E  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9896  004F70  0100               	movlb	0	; () banked
  9897  004F72  2B95               	incf	___llmod@counter& (0+255),f,b
  9898  004F74                     l5216:
  9899                           
  9900                           ; BSR set to: 0
  9901  004F74  0100               	movlb	0	; () banked
  9902  004F76  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9903  004F78  D7F5               	goto	l5214
  9904  004F7A                     l5218:
  9905                           
  9906                           ; BSR set to: 0
  9907  004F7A  0100               	movlb	0	; () banked
  9908  004F7C  5191               	movf	___llmod@divisor& (0+255),w,b
  9909  004F7E  0100               	movlb	0	; () banked
  9910  004F80  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  9911  004F82  0100               	movlb	0	; () banked
  9912  004F84  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  9913  004F86  0100               	movlb	0	; () banked
  9914  004F88  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9915  004F8A  0100               	movlb	0	; () banked
  9916  004F8C  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  9917  004F8E  0100               	movlb	0	; () banked
  9918  004F90  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9919  004F92  0100               	movlb	0	; () banked
  9920  004F94  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  9921  004F96  0100               	movlb	0	; () banked
  9922  004F98  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9923  004F9A  A0D8               	btfss	status,0,c
  9924  004F9C  D010               	goto	l5222
  9925                           
  9926                           ; BSR set to: 0
  9927  004F9E  0100               	movlb	0	; () banked
  9928  004FA0  5191               	movf	___llmod@divisor& (0+255),w,b
  9929  004FA2  0100               	movlb	0	; () banked
  9930  004FA4  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  9931  004FA6  0100               	movlb	0	; () banked
  9932  004FA8  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  9933  004FAA  0100               	movlb	0	; () banked
  9934  004FAC  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9935  004FAE  0100               	movlb	0	; () banked
  9936  004FB0  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  9937  004FB2  0100               	movlb	0	; () banked
  9938  004FB4  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9939  004FB6  0100               	movlb	0	; () banked
  9940  004FB8  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  9941  004FBA  0100               	movlb	0	; () banked
  9942  004FBC  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9943  004FBE                     l5222:
  9944                           
  9945                           ; BSR set to: 0
  9946  004FBE  0100               	movlb	0	; () banked
  9947  004FC0  90D8               	bcf	status,0,c
  9948  004FC2  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9949  004FC4  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9950  004FC6  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9951  004FC8  3391               	rrcf	___llmod@divisor& (0+255),f,b
  9952                           
  9953                           ; BSR set to: 0
  9954  004FCA  0100               	movlb	0	; () banked
  9955  004FCC  2F95               	decfsz	___llmod@counter& (0+255),f,b
  9956  004FCE  D7D5               	goto	l5218
  9957  004FD0                     l1222:
  9958                           
  9959                           ; BSR set to: 0
  9960  004FD0  C08D  F08D         	movff	___llmod@dividend,?___llmod
  9961  004FD4  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  9962  004FD8  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  9963  004FDC  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  9964                           
  9965                           ; BSR set to: 0
  9966  004FE0  0012               	return		;funcret
  9967  004FE2                     __end_of___llmod:
  9968                           	opt stack 0
  9969                           tblptru	equ	0xFF8
  9970                           tblptrh	equ	0xFF7
  9971                           tblptrl	equ	0xFF6
  9972                           tablat	equ	0xFF5
  9973                           prodh	equ	0xFF4
  9974                           prodl	equ	0xFF3
  9975                           intcon	equ	0xFF2
  9976                           postinc0	equ	0xFEE
  9977                           wreg	equ	0xFE8
  9978                           postdec1	equ	0xFE5
  9979                           fsr1l	equ	0xFE1
  9980                           indf2	equ	0xFDF
  9981                           postinc2	equ	0xFDE
  9982                           postdec2	equ	0xFDD
  9983                           fsr2h	equ	0xFDA
  9984                           fsr2l	equ	0xFD9
  9985                           status	equ	0xFD8
  9986                           
  9987 ;; *************** function ___lldiv *****************
  9988 ;; Defined at:
  9989 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9990 ;; Parameters:    Size  Location     Type
  9991 ;;  dividend        4    0[BANK0 ] unsigned long 
  9992 ;;  divisor         4    4[BANK0 ] unsigned long 
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;  quotient        4    8[BANK0 ] unsigned long 
  9995 ;;  counter         1   12[BANK0 ] unsigned char 
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  4    0[BANK0 ] unsigned long 
  9998 ;; Registers used:
  9999 ;;		wreg, status,2, status,0
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10005 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;Total ram usage:       13 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; Hardware stack levels required when called:    6
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_printf
 10016 ;;		_I2C_Master_Init
 10017 ;; This function uses a non-reentrant model
 10018 ;;
 10019                           
 10020                           	psect	text28
 10021  004C9E                     __ptext28:
 10022                           	opt stack 0
 10023  004C9E                     ___lldiv:
 10024                           	opt stack 22
 10025                           
 10026                           ; BSR set to: 0
 10027                           ;incstack = 0
 10028  004C9E  0E00               	movlw	0
 10029  004CA0  0100               	movlb	0	; () banked
 10030  004CA2  6F88               	movwf	___lldiv@quotient& (0+255),b
 10031  004CA4  0E00               	movlw	0
 10032  004CA6  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 10033  004CA8  0E00               	movlw	0
 10034  004CAA  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 10035  004CAC  0E00               	movlw	0
 10036  004CAE  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 10037                           
 10038                           ; BSR set to: 0
 10039  004CB0  0100               	movlb	0	; () banked
 10040  004CB2  5184               	movf	___lldiv@divisor& (0+255),w,b
 10041  004CB4  0100               	movlb	0	; () banked
 10042  004CB6  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10043  004CB8  0100               	movlb	0	; () banked
 10044  004CBA  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10045  004CBC  0100               	movlb	0	; () banked
 10046  004CBE  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10047  004CC0  B4D8               	btfsc	status,2,c
 10048  004CC2  D042               	goto	l1212
 10049                           
 10050                           ; BSR set to: 0
 10051  004CC4  0E01               	movlw	1
 10052  004CC6  0100               	movlb	0	; () banked
 10053  004CC8  6F8C               	movwf	___lldiv@counter& (0+255),b
 10054  004CCA  D008               	goto	l5196
 10055  004CCC                     l5194:
 10056                           
 10057                           ; BSR set to: 0
 10058  004CCC  0100               	movlb	0	; () banked
 10059  004CCE  90D8               	bcf	status,0,c
 10060  004CD0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 10061  004CD2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10062  004CD4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10063  004CD6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10064  004CD8  0100               	movlb	0	; () banked
 10065  004CDA  2B8C               	incf	___lldiv@counter& (0+255),f,b
 10066  004CDC                     l5196:
 10067                           
 10068                           ; BSR set to: 0
 10069  004CDC  0100               	movlb	0	; () banked
 10070  004CDE  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10071  004CE0  D7F5               	goto	l5194
 10072  004CE2                     l5198:
 10073                           
 10074                           ; BSR set to: 0
 10075  004CE2  0100               	movlb	0	; () banked
 10076  004CE4  90D8               	bcf	status,0,c
 10077  004CE6  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 10078  004CE8  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10079  004CEA  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10080  004CEC  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10081                           
 10082                           ; BSR set to: 0
 10083  004CEE  0100               	movlb	0	; () banked
 10084  004CF0  5184               	movf	___lldiv@divisor& (0+255),w,b
 10085  004CF2  0100               	movlb	0	; () banked
 10086  004CF4  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 10087  004CF6  0100               	movlb	0	; () banked
 10088  004CF8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10089  004CFA  0100               	movlb	0	; () banked
 10090  004CFC  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10091  004CFE  0100               	movlb	0	; () banked
 10092  004D00  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10093  004D02  0100               	movlb	0	; () banked
 10094  004D04  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10095  004D06  0100               	movlb	0	; () banked
 10096  004D08  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10097  004D0A  0100               	movlb	0	; () banked
 10098  004D0C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10099  004D0E  A0D8               	btfss	status,0,c
 10100  004D10  D012               	goto	l5206
 10101                           
 10102                           ; BSR set to: 0
 10103  004D12  0100               	movlb	0	; () banked
 10104  004D14  5184               	movf	___lldiv@divisor& (0+255),w,b
 10105  004D16  0100               	movlb	0	; () banked
 10106  004D18  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 10107  004D1A  0100               	movlb	0	; () banked
 10108  004D1C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10109  004D1E  0100               	movlb	0	; () banked
 10110  004D20  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10111  004D22  0100               	movlb	0	; () banked
 10112  004D24  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10113  004D26  0100               	movlb	0	; () banked
 10114  004D28  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10115  004D2A  0100               	movlb	0	; () banked
 10116  004D2C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10117  004D2E  0100               	movlb	0	; () banked
 10118  004D30  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10119                           
 10120                           ; BSR set to: 0
 10121  004D32  0100               	movlb	0	; () banked
 10122  004D34  8188               	bsf	___lldiv@quotient& (0+255),0,b
 10123  004D36                     l5206:
 10124                           
 10125                           ; BSR set to: 0
 10126  004D36  0100               	movlb	0	; () banked
 10127  004D38  90D8               	bcf	status,0,c
 10128  004D3A  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10129  004D3C  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10130  004D3E  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10131  004D40  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 10132                           
 10133                           ; BSR set to: 0
 10134  004D42  0100               	movlb	0	; () banked
 10135  004D44  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 10136  004D46  D7CD               	goto	l5198
 10137  004D48                     l1212:
 10138                           
 10139                           ; BSR set to: 0
 10140  004D48  C088  F080         	movff	___lldiv@quotient,?___lldiv
 10141  004D4C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 10142  004D50  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 10143  004D54  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 10144                           
 10145                           ; BSR set to: 0
 10146  004D58  0012               	return		;funcret
 10147  004D5A                     __end_of___lldiv:
 10148                           	opt stack 0
 10149                           tblptru	equ	0xFF8
 10150                           tblptrh	equ	0xFF7
 10151                           tblptrl	equ	0xFF6
 10152                           tablat	equ	0xFF5
 10153                           prodh	equ	0xFF4
 10154                           prodl	equ	0xFF3
 10155                           intcon	equ	0xFF2
 10156                           postinc0	equ	0xFEE
 10157                           wreg	equ	0xFE8
 10158                           postdec1	equ	0xFE5
 10159                           fsr1l	equ	0xFE1
 10160                           indf2	equ	0xFDF
 10161                           postinc2	equ	0xFDE
 10162                           postdec2	equ	0xFDD
 10163                           fsr2h	equ	0xFDA
 10164                           fsr2l	equ	0xFD9
 10165                           status	equ	0xFD8
 10166                           
 10167 ;; *************** function ___ftsub *****************
 10168 ;; Defined at:
 10169 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 10170 ;; Parameters:    Size  Location     Type
 10171 ;;  f1              3   70[BANK0 ] float 
 10172 ;;  f2              3   73[BANK0 ] float 
 10173 ;; Auto vars:     Size  Location     Type
 10174 ;;		None
 10175 ;; Return value:  Size  Location     Type
 10176 ;;                  3   70[BANK0 ] float 
 10177 ;; Registers used:
 10178 ;;		wreg, status,2, status,0, cstack
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10184 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10187 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10188 ;;Total ram usage:        6 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; Hardware stack levels required when called:    8
 10191 ;; This function calls:
 10192 ;;		___ftadd
 10193 ;; This function is called by:
 10194 ;;		_sortBattery
 10195 ;;		_printf
 10196 ;; This function uses a non-reentrant model
 10197 ;;
 10198                           
 10199                           	psect	text29
 10200  005530                     __ptext29:
 10201                           	opt stack 0
 10202  005530                     ___ftsub:
 10203                           	opt stack 20
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;incstack = 0
 10207  005530  0100               	movlb	0	; () banked
 10208  005532  51C9               	movf	___ftsub@f2& (0+255),w,b
 10209  005534  0100               	movlb	0	; () banked
 10210  005536  11CA               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10211  005538  0100               	movlb	0	; () banked
 10212  00553A  11CB               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10213  00553C  B4D8               	btfsc	status,2,c
 10214  00553E  D009               	goto	l5104
 10215                           
 10216                           ; BSR set to: 0
 10217  005540  0E00               	movlw	0
 10218  005542  0100               	movlb	0	; () banked
 10219  005544  1BC9               	xorwf	___ftsub@f2& (0+255),f,b
 10220  005546  0E00               	movlw	0
 10221  005548  0100               	movlb	0	; () banked
 10222  00554A  1BCA               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10223  00554C  0E80               	movlw	128
 10224  00554E  0100               	movlb	0	; () banked
 10225  005550  1BCB               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10226  005552                     l5104:
 10227                           
 10228                           ; BSR set to: 0
 10229  005552  C0C6  F0BA         	movff	___ftsub@f1,___ftadd@f1
 10230  005556  C0C7  F0BB         	movff	___ftsub@f1+1,___ftadd@f1+1
 10231  00555A  C0C8  F0BC         	movff	___ftsub@f1+2,___ftadd@f1+2
 10232  00555E  C0C9  F0BD         	movff	___ftsub@f2,___ftadd@f2
 10233  005562  C0CA  F0BE         	movff	___ftsub@f2+1,___ftadd@f2+1
 10234  005566  C0CB  F0BF         	movff	___ftsub@f2+2,___ftadd@f2+2
 10235  00556A  ECEB  F016         	call	___ftadd	;wreg free
 10236  00556E  C0BA  F0C6         	movff	?___ftadd,?___ftsub
 10237  005572  C0BB  F0C7         	movff	?___ftadd+1,?___ftsub+1
 10238  005576  C0BC  F0C8         	movff	?___ftadd+2,?___ftsub+2
 10239  00557A  0012               	return	
 10240  00557C                     __end_of___ftsub:
 10241                           	opt stack 0
 10242                           tblptru	equ	0xFF8
 10243                           tblptrh	equ	0xFF7
 10244                           tblptrl	equ	0xFF6
 10245                           tablat	equ	0xFF5
 10246                           prodh	equ	0xFF4
 10247                           prodl	equ	0xFF3
 10248                           intcon	equ	0xFF2
 10249                           postinc0	equ	0xFEE
 10250                           wreg	equ	0xFE8
 10251                           postdec1	equ	0xFE5
 10252                           fsr1l	equ	0xFE1
 10253                           indf2	equ	0xFDF
 10254                           postinc2	equ	0xFDE
 10255                           postdec2	equ	0xFDD
 10256                           fsr2h	equ	0xFDA
 10257                           fsr2l	equ	0xFD9
 10258                           status	equ	0xFD8
 10259                           
 10260 ;; *************** function ___ftneg *****************
 10261 ;; Defined at:
 10262 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10263 ;; Parameters:    Size  Location     Type
 10264 ;;  f1              3    0[BANK0 ] float 
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;		None
 10267 ;; Return value:  Size  Location     Type
 10268 ;;                  3    0[BANK0 ] float 
 10269 ;; Registers used:
 10270 ;;		wreg, status,2, status,0
 10271 ;; Tracked objects:
 10272 ;;		On entry : 0/0
 10273 ;;		On exit  : 0/0
 10274 ;;		Unchanged: 0/0
 10275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10276 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10279 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10280 ;;Total ram usage:        3 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; Hardware stack levels required when called:    6
 10283 ;; This function calls:
 10284 ;;		Nothing
 10285 ;; This function is called by:
 10286 ;;		_printf
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           	psect	text30
 10291  005802                     __ptext30:
 10292                           	opt stack 0
 10293  005802                     ___ftneg:
 10294                           	opt stack 22
 10295                           
 10296                           ;incstack = 0
 10297  005802  0100               	movlb	0	; () banked
 10298  005804  5180               	movf	___ftneg@f1& (0+255),w,b
 10299  005806  0100               	movlb	0	; () banked
 10300  005808  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 10301  00580A  0100               	movlb	0	; () banked
 10302  00580C  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 10303  00580E  B4D8               	btfsc	status,2,c
 10304  005810  D009               	goto	l1162
 10305                           
 10306                           ; BSR set to: 0
 10307  005812  0E00               	movlw	0
 10308  005814  0100               	movlb	0	; () banked
 10309  005816  1B80               	xorwf	___ftneg@f1& (0+255),f,b
 10310  005818  0E00               	movlw	0
 10311  00581A  0100               	movlb	0	; () banked
 10312  00581C  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 10313  00581E  0E80               	movlw	128
 10314  005820  0100               	movlb	0	; () banked
 10315  005822  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 10316  005824                     l1162:
 10317                           
 10318                           ; BSR set to: 0
 10319  005824  C080  F080         	movff	___ftneg@f1,?___ftneg
 10320  005828  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
 10321  00582C  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
 10322                           
 10323                           ; BSR set to: 0
 10324  005830  0012               	return		;funcret
 10325  005832                     __end_of___ftneg:
 10326                           	opt stack 0
 10327                           tblptru	equ	0xFF8
 10328                           tblptrh	equ	0xFF7
 10329                           tblptrl	equ	0xFF6
 10330                           tablat	equ	0xFF5
 10331                           prodh	equ	0xFF4
 10332                           prodl	equ	0xFF3
 10333                           intcon	equ	0xFF2
 10334                           postinc0	equ	0xFEE
 10335                           wreg	equ	0xFE8
 10336                           postdec1	equ	0xFE5
 10337                           fsr1l	equ	0xFE1
 10338                           indf2	equ	0xFDF
 10339                           postinc2	equ	0xFDE
 10340                           postdec2	equ	0xFDD
 10341                           fsr2h	equ	0xFDA
 10342                           fsr2l	equ	0xFD9
 10343                           status	equ	0xFD8
 10344                           
 10345 ;; *************** function ___ftge *****************
 10346 ;; Defined at:
 10347 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;  ff1             3   12[BANK0 ] float 
 10350 ;;  ff2             3   15[BANK0 ] float 
 10351 ;; Auto vars:     Size  Location     Type
 10352 ;;		None
 10353 ;; Return value:  Size  Location     Type
 10354 ;;		None               void
 10355 ;; Registers used:
 10356 ;;		wreg, status,2, status,0
 10357 ;; Tracked objects:
 10358 ;;		On entry : 0/0
 10359 ;;		On exit  : 0/0
 10360 ;;		Unchanged: 0/0
 10361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10362 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10364 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10365 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10366 ;;Total ram usage:        9 bytes
 10367 ;; Hardware stack levels used:    1
 10368 ;; Hardware stack levels required when called:    6
 10369 ;; This function calls:
 10370 ;;		Nothing
 10371 ;; This function is called by:
 10372 ;;		_sortBattery
 10373 ;;		_printf
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           	psect	text31
 10378  004A50                     __ptext31:
 10379                           	opt stack 0
 10380  004A50                     ___ftge:
 10381                           	opt stack 22
 10382                           
 10383                           ; BSR set to: 0
 10384                           ;incstack = 0
 10385  004A50  0100               	movlb	0	; () banked
 10386  004A52  AF8E               	btfss	(___ftge@ff1+2)& (0+255),7,b
 10387  004A54  D01D               	goto	l5124
 10388                           
 10389                           ; BSR set to: 0
 10390  004A56  C08C  F092         	movff	___ftge@ff1,??___ftge
 10391  004A5A  C08D  F093         	movff	___ftge@ff1+1,??___ftge+1
 10392  004A5E  C08E  F094         	movff	___ftge@ff1+2,??___ftge+2
 10393  004A62  0100               	movlb	0	; () banked
 10394  004A64  1F92               	comf	??___ftge& (0+255),f,b
 10395  004A66  1F93               	comf	(??___ftge+1)& (0+255),f,b
 10396  004A68  1F94               	comf	(??___ftge+2)& (0+255),f,b
 10397  004A6A  2B92               	incf	??___ftge& (0+255),f,b
 10398  004A6C  0E00               	movlw	0
 10399  004A6E  2393               	addwfc	(??___ftge+1)& (0+255),f,b
 10400  004A70  2394               	addwfc	(??___ftge+2)& (0+255),f,b
 10401  004A72  0E00               	movlw	0
 10402  004A74  0100               	movlb	0	; () banked
 10403  004A76  2592               	addwf	??___ftge& (0+255),w,b
 10404  004A78  0100               	movlb	0	; () banked
 10405  004A7A  6F8C               	movwf	___ftge@ff1& (0+255),b
 10406  004A7C  0E00               	movlw	0
 10407  004A7E  0100               	movlb	0	; () banked
 10408  004A80  2193               	addwfc	(??___ftge+1)& (0+255),w,b
 10409  004A82  0100               	movlb	0	; () banked
 10410  004A84  6F8D               	movwf	(___ftge@ff1+1)& (0+255),b
 10411  004A86  0E80               	movlw	128
 10412  004A88  0100               	movlb	0	; () banked
 10413  004A8A  2194               	addwfc	(??___ftge+2)& (0+255),w,b
 10414  004A8C  0100               	movlb	0	; () banked
 10415  004A8E  6F8E               	movwf	(___ftge@ff1+2)& (0+255),b
 10416  004A90                     l5124:
 10417                           
 10418                           ; BSR set to: 0
 10419  004A90  0100               	movlb	0	; () banked
 10420  004A92  AF91               	btfss	(___ftge@ff2+2)& (0+255),7,b
 10421  004A94  D01D               	goto	l5128
 10422                           
 10423                           ; BSR set to: 0
 10424  004A96  C08F  F092         	movff	___ftge@ff2,??___ftge
 10425  004A9A  C090  F093         	movff	___ftge@ff2+1,??___ftge+1
 10426  004A9E  C091  F094         	movff	___ftge@ff2+2,??___ftge+2
 10427  004AA2  0100               	movlb	0	; () banked
 10428  004AA4  1F92               	comf	??___ftge& (0+255),f,b
 10429  004AA6  1F93               	comf	(??___ftge+1)& (0+255),f,b
 10430  004AA8  1F94               	comf	(??___ftge+2)& (0+255),f,b
 10431  004AAA  2B92               	incf	??___ftge& (0+255),f,b
 10432  004AAC  0E00               	movlw	0
 10433  004AAE  2393               	addwfc	(??___ftge+1)& (0+255),f,b
 10434  004AB0  2394               	addwfc	(??___ftge+2)& (0+255),f,b
 10435  004AB2  0E00               	movlw	0
 10436  004AB4  0100               	movlb	0	; () banked
 10437  004AB6  2592               	addwf	??___ftge& (0+255),w,b
 10438  004AB8  0100               	movlb	0	; () banked
 10439  004ABA  6F8F               	movwf	___ftge@ff2& (0+255),b
 10440  004ABC  0E00               	movlw	0
 10441  004ABE  0100               	movlb	0	; () banked
 10442  004AC0  2193               	addwfc	(??___ftge+1)& (0+255),w,b
 10443  004AC2  0100               	movlb	0	; () banked
 10444  004AC4  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
 10445  004AC6  0E80               	movlw	128
 10446  004AC8  0100               	movlb	0	; () banked
 10447  004ACA  2194               	addwfc	(??___ftge+2)& (0+255),w,b
 10448  004ACC  0100               	movlb	0	; () banked
 10449  004ACE  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
 10450  004AD0                     l5128:
 10451                           
 10452                           ; BSR set to: 0
 10453  004AD0  0E00               	movlw	0
 10454  004AD2  0100               	movlb	0	; () banked
 10455  004AD4  1B8C               	xorwf	___ftge@ff1& (0+255),f,b
 10456  004AD6  0E00               	movlw	0
 10457  004AD8  0100               	movlb	0	; () banked
 10458  004ADA  1B8D               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 10459  004ADC  0E80               	movlw	128
 10460  004ADE  0100               	movlb	0	; () banked
 10461  004AE0  1B8E               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 10462                           
 10463                           ; BSR set to: 0
 10464  004AE2  0E00               	movlw	0
 10465  004AE4  0100               	movlb	0	; () banked
 10466  004AE6  1B8F               	xorwf	___ftge@ff2& (0+255),f,b
 10467  004AE8  0E00               	movlw	0
 10468  004AEA  0100               	movlb	0	; () banked
 10469  004AEC  1B90               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 10470  004AEE  0E80               	movlw	128
 10471  004AF0  0100               	movlb	0	; () banked
 10472  004AF2  1B91               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 10473  004AF4  0100               	movlb	0	; () banked
 10474  004AF6  518F               	movf	___ftge@ff2& (0+255),w,b
 10475  004AF8  0100               	movlb	0	; () banked
 10476  004AFA  5D8C               	subwf	___ftge@ff1& (0+255),w,b
 10477  004AFC  0100               	movlb	0	; () banked
 10478  004AFE  5190               	movf	(___ftge@ff2+1)& (0+255),w,b
 10479  004B00  0100               	movlb	0	; () banked
 10480  004B02  598D               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 10481  004B04  0100               	movlb	0	; () banked
 10482  004B06  5191               	movf	(___ftge@ff2+2)& (0+255),w,b
 10483  004B08  0100               	movlb	0	; () banked
 10484  004B0A  598E               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 10485  004B0C  B0D8               	btfsc	status,0,c
 10486  004B0E  D002               	goto	l5134
 10487                           
 10488                           ; BSR set to: 0
 10489  004B10  90D8               	bcf	status,0,c
 10490  004B12  0012               	return	
 10491  004B14                     l5134:
 10492                           
 10493                           ; BSR set to: 0
 10494  004B14  80D8               	bsf	status,0,c
 10495                           
 10496                           ; BSR set to: 0
 10497  004B16  0012               	return	
 10498  004B18                     __end_of___ftge:
 10499                           	opt stack 0
 10500                           tblptru	equ	0xFF8
 10501                           tblptrh	equ	0xFF7
 10502                           tblptrl	equ	0xFF6
 10503                           tablat	equ	0xFF5
 10504                           prodh	equ	0xFF4
 10505                           prodl	equ	0xFF3
 10506                           intcon	equ	0xFF2
 10507                           postinc0	equ	0xFEE
 10508                           wreg	equ	0xFE8
 10509                           postdec1	equ	0xFE5
 10510                           fsr1l	equ	0xFE1
 10511                           indf2	equ	0xFDF
 10512                           postinc2	equ	0xFDE
 10513                           postdec2	equ	0xFDD
 10514                           fsr2h	equ	0xFDA
 10515                           fsr2l	equ	0xFD9
 10516                           status	equ	0xFD8
 10517                           
 10518 ;; *************** function _lcdClear *****************
 10519 ;; Defined at:
 10520 ;;		line 74 in file "lcd.c"
 10521 ;; Parameters:    Size  Location     Type
 10522 ;;		None
 10523 ;; Auto vars:     Size  Location     Type
 10524 ;;		None
 10525 ;; Return value:  Size  Location     Type
 10526 ;;                  1    wreg      void 
 10527 ;; Registers used:
 10528 ;;		wreg, status,2, status,0, cstack
 10529 ;; Tracked objects:
 10530 ;;		On entry : 0/0
 10531 ;;		On exit  : 0/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;Total ram usage:        0 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:    8
 10541 ;; This function calls:
 10542 ;;		_lcdInst
 10543 ;; This function is called by:
 10544 ;;		_main
 10545 ;;		_pause
 10546 ;;		_dateTime
 10547 ;;		_mainMenu
 10548 ;;		_runSelect
 10549 ;;		_runMenu
 10550 ;;		_runTime
 10551 ;;		_runStats
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           	psect	text32
 10556  005A60                     __ptext32:
 10557                           	opt stack 0
 10558  005A60                     _lcdClear:
 10559                           	opt stack 20
 10560                           
 10561                           ;lcd.c: 75: lcdInst(0b00000001);
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;incstack = 0
 10565  005A60  0E01               	movlw	1
 10566  005A62  EC43  F02C         	call	_lcdInst
 10567  005A66  0012               	return		;funcret
 10568  005A68                     __end_of_lcdClear:
 10569                           	opt stack 0
 10570                           tblptru	equ	0xFF8
 10571                           tblptrh	equ	0xFF7
 10572                           tblptrl	equ	0xFF6
 10573                           tablat	equ	0xFF5
 10574                           prodh	equ	0xFF4
 10575                           prodl	equ	0xFF3
 10576                           intcon	equ	0xFF2
 10577                           postinc0	equ	0xFEE
 10578                           wreg	equ	0xFE8
 10579                           postdec1	equ	0xFE5
 10580                           fsr1l	equ	0xFE1
 10581                           indf2	equ	0xFDF
 10582                           postinc2	equ	0xFDE
 10583                           postdec2	equ	0xFDD
 10584                           fsr2h	equ	0xFDA
 10585                           fsr2l	equ	0xFD9
 10586                           status	equ	0xFD8
 10587                           
 10588 ;; *************** function _lcdHome *****************
 10589 ;; Defined at:
 10590 ;;		line 70 in file "lcd.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;		None
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;		None
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  2   20[None  ] int 
 10597 ;; Registers used:
 10598 ;;		wreg, status,2, status,0, cstack
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;Total ram usage:        0 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    8
 10611 ;; This function calls:
 10612 ;;		_lcdInst
 10613 ;; This function is called by:
 10614 ;;		_main
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text33
 10619  005A68                     __ptext33:
 10620                           	opt stack 0
 10621  005A68                     _lcdHome:
 10622                           	opt stack 22
 10623                           
 10624                           ;lcd.c: 71: lcdInst(0b11000000);
 10625                           
 10626                           ;incstack = 0
 10627  005A68  0EC0               	movlw	192
 10628  005A6A  EC43  F02C         	call	_lcdInst
 10629  005A6E  0012               	return		;funcret
 10630  005A70                     __end_of_lcdHome:
 10631                           	opt stack 0
 10632                           tblptru	equ	0xFF8
 10633                           tblptrh	equ	0xFF7
 10634                           tblptrl	equ	0xFF6
 10635                           tablat	equ	0xFF5
 10636                           prodh	equ	0xFF4
 10637                           prodl	equ	0xFF3
 10638                           intcon	equ	0xFF2
 10639                           postinc0	equ	0xFEE
 10640                           wreg	equ	0xFE8
 10641                           postdec1	equ	0xFE5
 10642                           fsr1l	equ	0xFE1
 10643                           indf2	equ	0xFDF
 10644                           postinc2	equ	0xFDE
 10645                           postdec2	equ	0xFDD
 10646                           fsr2h	equ	0xFDA
 10647                           fsr2l	equ	0xFD9
 10648                           status	equ	0xFD8
 10649                           
 10650 ;; *************** function _initServo *****************
 10651 ;; Defined at:
 10652 ;;		line 21 in file "servo.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;  motor           2  118[BANK0 ] PTR int 
 10655 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 10656 ;;  angle           2  120[BANK0 ] int 
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;		None
 10659 ;; Return value:  Size  Location     Type
 10660 ;;                  1    wreg      void 
 10661 ;; Registers used:
 10662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10663 ;; Tracked objects:
 10664 ;;		On entry : 0/0
 10665 ;;		On exit  : 0/0
 10666 ;;		Unchanged: 0/0
 10667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10668 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10672 ;;Total ram usage:        8 bytes
 10673 ;; Hardware stack levels used:    1
 10674 ;; Hardware stack levels required when called:   10
 10675 ;; This function calls:
 10676 ;;		_initTimer
 10677 ;;		_setAngle
 10678 ;;		_startTimer
 10679 ;; This function is called by:
 10680 ;;		_main
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           	psect	text34
 10685  005072                     __ptext34:
 10686                           	opt stack 0
 10687  005072                     _initServo:
 10688                           	opt stack 20
 10689                           
 10690                           ;servo.c: 22: n++;
 10691                           
 10692                           ;incstack = 0
 10693  005072  0100               	movlb	0	; () banked
 10694  005074  4BFE               	infsnz	_n& (0+255),f,b
 10695  005076  2BFF               	incf	(_n+1)& (0+255),f,b
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;servo.c: 23: servos[n-1] = motor;
 10699  005078  0EFE               	movlw	254
 10700  00507A  0100               	movlb	0	; () banked
 10701  00507C  6FFA               	movwf	??_initServo& (0+255),b
 10702  00507E  0EFF               	movlw	255
 10703  005080  0100               	movlb	0	; () banked
 10704  005082  6FFB               	movwf	(??_initServo+1)& (0+255),b
 10705  005084  C0FE  F0FC         	movff	_n,??_initServo+2
 10706  005088  C0FF  F0FD         	movff	_n+1,??_initServo+3
 10707  00508C  90D8               	bcf	status,0,c
 10708  00508E  0100               	movlb	0	; () banked
 10709  005090  37FC               	rlcf	(??_initServo+2)& (0+255),f,b
 10710  005092  37FD               	rlcf	(??_initServo+3)& (0+255),f,b
 10711  005094  0100               	movlb	0	; () banked
 10712  005096  51FA               	movf	??_initServo& (0+255),w,b
 10713  005098  0100               	movlb	0	; () banked
 10714  00509A  27FC               	addwf	(??_initServo+2)& (0+255),f,b
 10715  00509C  0100               	movlb	0	; () banked
 10716  00509E  51FB               	movf	(??_initServo+1)& (0+255),w,b
 10717  0050A0  0100               	movlb	0	; () banked
 10718  0050A2  23FD               	addwfc	(??_initServo+3)& (0+255),f,b
 10719  0050A4  0E9A               	movlw	low _servos
 10720  0050A6  0100               	movlb	0	; () banked
 10721  0050A8  25FC               	addwf	(??_initServo+2)& (0+255),w,b
 10722  0050AA  6ED9               	movwf	fsr2l,c
 10723  0050AC  0E01               	movlw	high _servos
 10724  0050AE  0100               	movlb	0	; () banked
 10725  0050B0  21FD               	addwfc	(??_initServo+3)& (0+255),w,b
 10726  0050B2  6EDA               	movwf	fsr2h,c
 10727  0050B4  C0F6  FFDE         	movff	initServo@motor,postinc2
 10728  0050B8  C0F7  FFDD         	movff	initServo@motor+1,postdec2
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;servo.c: 24: setAngle(motor, angle);
 10732  0050BC  C0F6  F0EC         	movff	initServo@motor,setAngle@motor
 10733  0050C0  C0F7  F0ED         	movff	initServo@motor+1,setAngle@motor+1
 10734  0050C4  C0F8  F0EE         	movff	initServo@angle,setAngle@angle
 10735  0050C8  C0F9  F0EF         	movff	initServo@angle+1,setAngle@angle+1
 10736  0050CC  ECBE  F024         	call	_setAngle	;wreg free
 10737                           
 10738                           ;servo.c: 26: initTimer(0);
 10739  0050D0  0E00               	movlw	0
 10740  0050D2  0100               	movlb	0	; () banked
 10741  0050D4  6F81               	movwf	(initTimer@timer+1)& (0+255),b
 10742  0050D6  0E00               	movlw	0
 10743  0050D8  6F80               	movwf	initTimer@timer& (0+255),b
 10744  0050DA  EC71  F02A         	call	_initTimer	;wreg free
 10745                           
 10746                           ;servo.c: 27: startTimer(0,0);
 10747  0050DE  0E00               	movlw	0
 10748  0050E0  0100               	movlb	0	; () banked
 10749  0050E2  6F81               	movwf	(startTimer@timer+1)& (0+255),b
 10750  0050E4  0E00               	movlw	0
 10751  0050E6  6F80               	movwf	startTimer@timer& (0+255),b
 10752  0050E8  0E00               	movlw	0
 10753  0050EA  0100               	movlb	0	; () banked
 10754  0050EC  6F82               	movwf	startTimer@val& (0+255),b
 10755  0050EE  0E00               	movlw	0
 10756  0050F0  6F83               	movwf	(startTimer@val+1)& (0+255),b
 10757  0050F2  0E00               	movlw	0
 10758  0050F4  6F84               	movwf	(startTimer@val+2)& (0+255),b
 10759  0050F6  0E00               	movlw	0
 10760  0050F8  6F85               	movwf	(startTimer@val+3)& (0+255),b
 10761  0050FA  EC49  F02A         	call	_startTimer	;wreg free
 10762  0050FE  0012               	return		;funcret
 10763  005100                     __end_of_initServo:
 10764                           	opt stack 0
 10765                           tblptru	equ	0xFF8
 10766                           tblptrh	equ	0xFF7
 10767                           tblptrl	equ	0xFF6
 10768                           tablat	equ	0xFF5
 10769                           prodh	equ	0xFF4
 10770                           prodl	equ	0xFF3
 10771                           intcon	equ	0xFF2
 10772                           postinc0	equ	0xFEE
 10773                           wreg	equ	0xFE8
 10774                           postdec1	equ	0xFE5
 10775                           fsr1l	equ	0xFE1
 10776                           indf2	equ	0xFDF
 10777                           postinc2	equ	0xFDE
 10778                           postdec2	equ	0xFDD
 10779                           fsr2h	equ	0xFDA
 10780                           fsr2l	equ	0xFD9
 10781                           status	equ	0xFD8
 10782                           
 10783 ;; *************** function _startTimer *****************
 10784 ;; Defined at:
 10785 ;;		line 76 in file "timer.c"
 10786 ;; Parameters:    Size  Location     Type
 10787 ;;  timer           2    0[BANK0 ] int 
 10788 ;;  val             4    2[BANK0 ] long 
 10789 ;; Auto vars:     Size  Location     Type
 10790 ;;		None
 10791 ;; Return value:  Size  Location     Type
 10792 ;;                  1    wreg      void 
 10793 ;; Registers used:
 10794 ;;		wreg, status,2, status,0
 10795 ;; Tracked objects:
 10796 ;;		On entry : 0/0
 10797 ;;		On exit  : 0/0
 10798 ;;		Unchanged: 0/0
 10799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10800 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10803 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10804 ;;Total ram usage:        8 bytes
 10805 ;; Hardware stack levels used:    1
 10806 ;; Hardware stack levels required when called:    6
 10807 ;; This function calls:
 10808 ;;		Nothing
 10809 ;; This function is called by:
 10810 ;;		_main
 10811 ;;		_initServo
 10812 ;;		_testFrequency
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           	psect	text35
 10817  005492                     __ptext35:
 10818                           	opt stack 0
 10819  005492                     _startTimer:
 10820                           	opt stack 24
 10821                           
 10822                           ;timer.c: 77: switch(timer){
 10823                           
 10824                           ;incstack = 0
 10825  005492  D012               	goto	l5900
 10826  005494                     l429:
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;timer.c: 79: TMR0H = val>>8;
 10830  005494  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
 10831                           
 10832                           ;timer.c: 80: TMR0L = val;
 10833  005498  C082  FFD6         	movff	startTimer@val,4054	;volatile
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;timer.c: 81: T0CON |= 1<<7;
 10837  00549C  8ED5               	bsf	4053,7,c	;volatile
 10838                           
 10839                           ;timer.c: 82: break;
 10840  00549E  0012               	return	
 10841  0054A0                     l431:
 10842                           
 10843                           ; BSR set to: 0
 10844                           ;timer.c: 84: TMR1H = val>>8;
 10845  0054A0  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
 10846                           
 10847                           ;timer.c: 85: TMR1L = val;
 10848  0054A4  C082  FFCE         	movff	startTimer@val,4046	;volatile
 10849                           
 10850                           ; BSR set to: 0
 10851                           ;timer.c: 86: T1CON |= 1<<0;
 10852  0054A8  80CD               	bsf	4045,0,c	;volatile
 10853                           
 10854                           ;timer.c: 87: break;
 10855  0054AA  0012               	return	
 10856  0054AC                     l432:
 10857                           
 10858                           ; BSR set to: 0
 10859                           ;timer.c: 89: TMR3H = val>>8;
 10860  0054AC  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
 10861                           
 10862                           ;timer.c: 90: TMR3L = val;
 10863  0054B0  C082  FFB2         	movff	startTimer@val,4018	;volatile
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;timer.c: 91: T3CON |= 1<<0;
 10867  0054B4  80B1               	bsf	4017,0,c	;volatile
 10868                           
 10869                           ;timer.c: 92: }
 10870  0054B6  0012               	return	
 10871  0054B8                     l5900:
 10872  0054B8  C080  F086         	movff	startTimer@timer,??_startTimer
 10873  0054BC  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
 10874                           
 10875                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10876                           ; Switch size 1, requested type "space"
 10877                           ; Number of cases is 1, Range of values is 0 to 0
 10878                           ; switch strategies available:
 10879                           ; Name         Instructions Cycles
 10880                           ; simple_byte            4     3 (average)
 10881                           ;	Chosen strategy is simple_byte
 10882  0054C0  0100               	movlb	0	; () banked
 10883  0054C2  5187               	movf	(??_startTimer+1)& (0+255),w,b
 10884  0054C4  0A00               	xorlw	0	; case 0
 10885  0054C6  A4D8               	btfss	status,2,c
 10886  0054C8  0012               	return	
 10887                           
 10888                           ; BSR set to: 0
 10889                           ; Switch size 1, requested type "space"
 10890                           ; Number of cases is 3, Range of values is 0 to 3
 10891                           ; switch strategies available:
 10892                           ; Name         Instructions Cycles
 10893                           ; simple_byte           10     6 (average)
 10894                           ;	Chosen strategy is simple_byte
 10895  0054CA  0100               	movlb	0	; () banked
 10896  0054CC  5186               	movf	??_startTimer& (0+255),w,b
 10897  0054CE  0A00               	xorlw	0	; case 0
 10898  0054D0  B4D8               	btfsc	status,2,c
 10899  0054D2  D7E0               	goto	l429
 10900  0054D4  0A01               	xorlw	1	; case 1
 10901  0054D6  B4D8               	btfsc	status,2,c
 10902  0054D8  D7E3               	goto	l431
 10903  0054DA  0A02               	xorlw	2	; case 3
 10904  0054DC  A4D8               	btfss	status,2,c
 10905  0054DE  0012               	return	
 10906  0054E0  D7E5               	goto	l432
 10907  0054E2                     __end_of_startTimer:
 10908                           	opt stack 0
 10909                           tblptru	equ	0xFF8
 10910                           tblptrh	equ	0xFF7
 10911                           tblptrl	equ	0xFF6
 10912                           tablat	equ	0xFF5
 10913                           prodh	equ	0xFF4
 10914                           prodl	equ	0xFF3
 10915                           intcon	equ	0xFF2
 10916                           postinc0	equ	0xFEE
 10917                           wreg	equ	0xFE8
 10918                           postdec1	equ	0xFE5
 10919                           fsr1l	equ	0xFE1
 10920                           indf2	equ	0xFDF
 10921                           postinc2	equ	0xFDE
 10922                           postdec2	equ	0xFDD
 10923                           fsr2h	equ	0xFDA
 10924                           fsr2l	equ	0xFD9
 10925                           status	equ	0xFD8
 10926                           
 10927 ;; *************** function _setAngle *****************
 10928 ;; Defined at:
 10929 ;;		line 41 in file "servo.c"
 10930 ;; Parameters:    Size  Location     Type
 10931 ;;  motor           2  108[BANK0 ] PTR int 
 10932 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 10933 ;;  angle           2  110[BANK0 ] int 
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;  i               2  116[BANK0 ] int 
 10936 ;;  period          2  114[BANK0 ] unsigned int 
 10937 ;; Return value:  Size  Location     Type
 10938 ;;                  1    wreg      void 
 10939 ;; Registers used:
 10940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10946 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10947 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10948 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10949 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10950 ;;Total ram usage:       10 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; Hardware stack levels required when called:    9
 10953 ;; This function calls:
 10954 ;;		_angleToPulse
 10955 ;; This function is called by:
 10956 ;;		_sortBattery
 10957 ;;		_initServo
 10958 ;; This function uses a non-reentrant model
 10959 ;;
 10960                           
 10961                           	psect	text36
 10962  00497C                     __ptext36:
 10963                           	opt stack 0
 10964  00497C                     _setAngle:
 10965                           	opt stack 20
 10966                           
 10967                           ;servo.c: 42: unsigned int period = 50000;
 10968                           
 10969                           ; BSR set to: 0
 10970                           ;incstack = 0
 10971  00497C  0EC3               	movlw	195
 10972  00497E  0100               	movlb	0	; () banked
 10973  004980  6FF3               	movwf	(setAngle@period+1)& (0+255),b
 10974  004982  0E50               	movlw	80
 10975  004984  6FF2               	movwf	setAngle@period& (0+255),b
 10976                           
 10977                           ;servo.c: 43: for(int i = 0; i < n; i++){
 10978  004986  0E00               	movlw	0
 10979  004988  0100               	movlb	0	; () banked
 10980  00498A  6FF5               	movwf	(setAngle@i+1)& (0+255),b
 10981  00498C  0E00               	movlw	0
 10982  00498E  6FF4               	movwf	setAngle@i& (0+255),b
 10983  004990  D03F               	goto	l5982
 10984  004992                     l5974:
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;servo.c: 44: if(servos[i] == motor){
 10988  004992  90D8               	bcf	status,0,c
 10989  004994  0100               	movlb	0	; () banked
 10990  004996  35F4               	rlcf	setAngle@i& (0+255),w,b
 10991  004998  6ED9               	movwf	fsr2l,c
 10992  00499A  0100               	movlb	0	; () banked
 10993  00499C  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
 10994  00499E  6EDA               	movwf	fsr2h,c
 10995  0049A0  0E9A               	movlw	low _servos
 10996  0049A2  26D9               	addwf	fsr2l,f,c
 10997  0049A4  0E01               	movlw	high _servos
 10998  0049A6  22DA               	addwfc	fsr2h,f,c
 10999  0049A8  0100               	movlb	0	; () banked
 11000  0049AA  51EC               	movf	setAngle@motor& (0+255),w,b
 11001  0049AC  18DE               	xorwf	postinc2,w,c
 11002  0049AE  E11C               	bnz	l5978
 11003  0049B0  0100               	movlb	0	; () banked
 11004  0049B2  51ED               	movf	(setAngle@motor+1)& (0+255),w,b
 11005  0049B4  18DE               	xorwf	postinc2,w,c
 11006  0049B6  A4D8               	btfss	status,2,c
 11007  0049B8  D017               	goto	l5978
 11008                           
 11009                           ; BSR set to: 0
 11010                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
 11011  0049BA  C0EE  F0D5         	movff	setAngle@angle,angleToPulse@angle
 11012  0049BE  C0EF  F0D6         	movff	setAngle@angle+1,angleToPulse@angle+1
 11013  0049C2  ECAB  F01B         	call	_angleToPulse	;wreg free
 11014  0049C6  90D8               	bcf	status,0,c
 11015  0049C8  0100               	movlb	0	; () banked
 11016  0049CA  35F4               	rlcf	setAngle@i& (0+255),w,b
 11017  0049CC  6ED9               	movwf	fsr2l,c
 11018  0049CE  0100               	movlb	0	; () banked
 11019  0049D0  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
 11020  0049D2  6EDA               	movwf	fsr2h,c
 11021  0049D4  0E92               	movlw	low _pulse
 11022  0049D6  26D9               	addwf	fsr2l,f,c
 11023  0049D8  0E01               	movlw	high _pulse
 11024  0049DA  22DA               	addwfc	fsr2h,f,c
 11025  0049DC  0100               	movlb	0	; () banked
 11026  0049DE  C0D5  FFDE         	movff	?_angleToPulse,postinc2
 11027  0049E2  0100               	movlb	0	; () banked
 11028  0049E4  C0D6  FFDD         	movff	?_angleToPulse+1,postdec2
 11029  0049E8                     l5978:
 11030                           
 11031                           ; BSR set to: 0
 11032                           ;servo.c: 46: }
 11033                           ;servo.c: 47: period-=pulse[i];
 11034  0049E8  90D8               	bcf	status,0,c
 11035  0049EA  0100               	movlb	0	; () banked
 11036  0049EC  35F4               	rlcf	setAngle@i& (0+255),w,b
 11037  0049EE  6ED9               	movwf	fsr2l,c
 11038  0049F0  0100               	movlb	0	; () banked
 11039  0049F2  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
 11040  0049F4  6EDA               	movwf	fsr2h,c
 11041  0049F6  0E92               	movlw	low _pulse
 11042  0049F8  26D9               	addwf	fsr2l,f,c
 11043  0049FA  0E01               	movlw	high _pulse
 11044  0049FC  22DA               	addwfc	fsr2h,f,c
 11045  0049FE  50DE               	movf	postinc2,w,c
 11046  004A00  0100               	movlb	0	; () banked
 11047  004A02  5FF2               	subwf	setAngle@period& (0+255),f,b
 11048  004A04  50DD               	movf	postdec2,w,c
 11049  004A06  0100               	movlb	0	; () banked
 11050  004A08  5BF3               	subwfb	(setAngle@period+1)& (0+255),f,b
 11051                           
 11052                           ; BSR set to: 0
 11053  004A0A  0100               	movlb	0	; () banked
 11054  004A0C  4BF4               	infsnz	setAngle@i& (0+255),f,b
 11055  004A0E  2BF5               	incf	(setAngle@i+1)& (0+255),f,b
 11056  004A10                     l5982:
 11057                           
 11058                           ; BSR set to: 0
 11059  004A10  0100               	movlb	0	; () banked
 11060  004A12  51FE               	movf	_n& (0+255),w,b
 11061  004A14  0100               	movlb	0	; () banked
 11062  004A16  5DF4               	subwf	setAngle@i& (0+255),w,b
 11063  004A18  0100               	movlb	0	; () banked
 11064  004A1A  51F5               	movf	(setAngle@i+1)& (0+255),w,b
 11065  004A1C  0A80               	xorlw	128
 11066  004A1E  0100               	movlb	0	; () banked
 11067  004A20  6FF0               	movwf	??_setAngle& (0+255),b
 11068  004A22  0100               	movlb	0	; () banked
 11069  004A24  51FF               	movf	(_n+1)& (0+255),w,b
 11070  004A26  0A80               	xorlw	128
 11071  004A28  0100               	movlb	0	; () banked
 11072  004A2A  59F0               	subwfb	??_setAngle& (0+255),w,b
 11073  004A2C  A0D8               	btfss	status,0,c
 11074  004A2E  D7B1               	goto	l5974
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;servo.c: 48: }
 11078                           ;servo.c: 49: pulse[n] = period;
 11079                           
 11080                           ; BSR set to: 0
 11081  004A30  90D8               	bcf	status,0,c
 11082  004A32  0100               	movlb	0	; () banked
 11083  004A34  35FE               	rlcf	_n& (0+255),w,b
 11084  004A36  6ED9               	movwf	fsr2l,c
 11085  004A38  0100               	movlb	0	; () banked
 11086  004A3A  35FF               	rlcf	(_n+1)& (0+255),w,b
 11087  004A3C  6EDA               	movwf	fsr2h,c
 11088  004A3E  0E92               	movlw	low _pulse
 11089  004A40  26D9               	addwf	fsr2l,f,c
 11090  004A42  0E01               	movlw	high _pulse
 11091  004A44  22DA               	addwfc	fsr2h,f,c
 11092  004A46  C0F2  FFDE         	movff	setAngle@period,postinc2
 11093  004A4A  C0F3  FFDD         	movff	setAngle@period+1,postdec2
 11094                           
 11095                           ; BSR set to: 0
 11096  004A4E  0012               	return		;funcret
 11097  004A50                     __end_of_setAngle:
 11098                           	opt stack 0
 11099                           tblptru	equ	0xFF8
 11100                           tblptrh	equ	0xFF7
 11101                           tblptrl	equ	0xFF6
 11102                           tablat	equ	0xFF5
 11103                           prodh	equ	0xFF4
 11104                           prodl	equ	0xFF3
 11105                           intcon	equ	0xFF2
 11106                           postinc0	equ	0xFEE
 11107                           wreg	equ	0xFE8
 11108                           postdec1	equ	0xFE5
 11109                           fsr1l	equ	0xFE1
 11110                           indf2	equ	0xFDF
 11111                           postinc2	equ	0xFDE
 11112                           postdec2	equ	0xFDD
 11113                           fsr2h	equ	0xFDA
 11114                           fsr2l	equ	0xFD9
 11115                           status	equ	0xFD8
 11116                           
 11117 ;; *************** function _angleToPulse *****************
 11118 ;; Defined at:
 11119 ;;		line 33 in file "servo.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;  angle           2   85[BANK0 ] int 
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;  a000            4  104[BANK0 ] long 
 11124 ;;  a180            4   97[BANK0 ] long 
 11125 ;;  offset          4   93[BANK0 ] long 
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  4   85[BANK0 ] long 
 11128 ;; Registers used:
 11129 ;;		wreg, status,2, status,0, cstack
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11135 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11139 ;;Total ram usage:       23 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    8
 11142 ;; This function calls:
 11143 ;;		___altoft
 11144 ;;		___awtoft
 11145 ;;		___ftadd
 11146 ;;		___ftdiv
 11147 ;;		___ftmul
 11148 ;;		___fttol
 11149 ;; This function is called by:
 11150 ;;		_setAngle
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           	psect	text37
 11155  003756                     __ptext37:
 11156                           	opt stack 0
 11157  003756                     _angleToPulse:
 11158                           	opt stack 20
 11159                           
 11160                           ;servo.c: 34: long offset = -600;
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;incstack = 0
 11164  003756  0EA8               	movlw	168
 11165  003758  0100               	movlb	0	; () banked
 11166  00375A  6FDD               	movwf	angleToPulse@offset& (0+255),b
 11167  00375C  0EFD               	movlw	253
 11168  00375E  6FDE               	movwf	(angleToPulse@offset+1)& (0+255),b
 11169  003760  0EFF               	movlw	255
 11170  003762  6FDF               	movwf	(angleToPulse@offset+2)& (0+255),b
 11171  003764  0EFF               	movlw	255
 11172  003766  6FE0               	movwf	(angleToPulse@offset+3)& (0+255),b
 11173                           
 11174                           ;servo.c: 35: long a000 = 1250;
 11175  003768  0EE2               	movlw	226
 11176  00376A  0100               	movlb	0	; () banked
 11177  00376C  6FE8               	movwf	angleToPulse@a000& (0+255),b
 11178  00376E  0E04               	movlw	4
 11179  003770  6FE9               	movwf	(angleToPulse@a000+1)& (0+255),b
 11180  003772  0E00               	movlw	0
 11181  003774  6FEA               	movwf	(angleToPulse@a000+2)& (0+255),b
 11182  003776  0E00               	movlw	0
 11183  003778  6FEB               	movwf	(angleToPulse@a000+3)& (0+255),b
 11184                           
 11185                           ;servo.c: 36: long a180 = 6250;
 11186  00377A  0E6A               	movlw	106
 11187  00377C  0100               	movlb	0	; () banked
 11188  00377E  6FE1               	movwf	angleToPulse@a180& (0+255),b
 11189  003780  0E18               	movlw	24
 11190  003782  6FE2               	movwf	(angleToPulse@a180+1)& (0+255),b
 11191  003784  0E00               	movlw	0
 11192  003786  6FE3               	movwf	(angleToPulse@a180+2)& (0+255),b
 11193  003788  0E00               	movlw	0
 11194  00378A  6FE4               	movwf	(angleToPulse@a180+3)& (0+255),b
 11195                           
 11196                           ; BSR set to: 0
 11197                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 11198  00378C  C0E8  F0D9         	movff	angleToPulse@a000,??_angleToPulse
 11199  003790  C0E9  F0DA         	movff	angleToPulse@a000+1,??_angleToPulse+1
 11200  003794  C0EA  F0DB         	movff	angleToPulse@a000+2,??_angleToPulse+2
 11201  003798  C0EB  F0DC         	movff	angleToPulse@a000+3,??_angleToPulse+3
 11202  00379C  0100               	movlb	0	; () banked
 11203  00379E  1FD9               	comf	??_angleToPulse& (0+255),f,b
 11204  0037A0  1FDA               	comf	(??_angleToPulse+1)& (0+255),f,b
 11205  0037A2  1FDB               	comf	(??_angleToPulse+2)& (0+255),f,b
 11206  0037A4  1FDC               	comf	(??_angleToPulse+3)& (0+255),f,b
 11207  0037A6  2BD9               	incf	??_angleToPulse& (0+255),f,b
 11208  0037A8  0E00               	movlw	0
 11209  0037AA  23DA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 11210  0037AC  23DB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 11211  0037AE  23DC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 11212  0037B0  0100               	movlb	0	; () banked
 11213  0037B2  51E1               	movf	angleToPulse@a180& (0+255),w,b
 11214  0037B4  0100               	movlb	0	; () banked
 11215  0037B6  25D9               	addwf	??_angleToPulse& (0+255),w,b
 11216  0037B8  0100               	movlb	0	; () banked
 11217  0037BA  6F88               	movwf	___altoft@c& (0+255),b
 11218  0037BC  0100               	movlb	0	; () banked
 11219  0037BE  51E2               	movf	(angleToPulse@a180+1)& (0+255),w,b
 11220  0037C0  0100               	movlb	0	; () banked
 11221  0037C2  21DA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 11222  0037C4  0100               	movlb	0	; () banked
 11223  0037C6  6F89               	movwf	(___altoft@c+1)& (0+255),b
 11224  0037C8  0100               	movlb	0	; () banked
 11225  0037CA  51E3               	movf	(angleToPulse@a180+2)& (0+255),w,b
 11226  0037CC  0100               	movlb	0	; () banked
 11227  0037CE  21DB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 11228  0037D0  0100               	movlb	0	; () banked
 11229  0037D2  6F8A               	movwf	(___altoft@c+2)& (0+255),b
 11230  0037D4  0100               	movlb	0	; () banked
 11231  0037D6  51E4               	movf	(angleToPulse@a180+3)& (0+255),w,b
 11232  0037D8  0100               	movlb	0	; () banked
 11233  0037DA  21DC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 11234  0037DC  0100               	movlb	0	; () banked
 11235  0037DE  6F8B               	movwf	(___altoft@c+3)& (0+255),b
 11236  0037E0  EC55  F027         	call	___altoft	;wreg free
 11237  0037E4  C088  F0A4         	movff	?___altoft,___ftmul@f2
 11238  0037E8  C089  F0A5         	movff	?___altoft+1,___ftmul@f2+1
 11239  0037EC  C08A  F0A6         	movff	?___altoft+2,___ftmul@f2+2
 11240  0037F0  0E00               	movlw	0
 11241  0037F2  0100               	movlb	0	; () banked
 11242  0037F4  6F95               	movwf	___ftdiv@f2& (0+255),b
 11243  0037F6  0E34               	movlw	52
 11244  0037F8  0100               	movlb	0	; () banked
 11245  0037FA  6F96               	movwf	(___ftdiv@f2+1)& (0+255),b
 11246  0037FC  0E43               	movlw	67
 11247  0037FE  0100               	movlb	0	; () banked
 11248  003800  6F97               	movwf	(___ftdiv@f2+2)& (0+255),b
 11249  003802  C0D5  F088         	movff	angleToPulse@angle,___awtoft@c
 11250  003806  C0D6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
 11251  00380A  EC2C  F02B         	call	___awtoft	;wreg free
 11252  00380E  C088  F092         	movff	?___awtoft,___ftdiv@f1
 11253  003812  C089  F093         	movff	?___awtoft+1,___ftdiv@f1+1
 11254  003816  C08A  F094         	movff	?___awtoft+2,___ftdiv@f1+2
 11255  00381A  EC0D  F01D         	call	___ftdiv	;wreg free
 11256  00381E  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
 11257  003822  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
 11258  003826  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
 11259  00382A  EC5E  F01C         	call	___ftmul	;wreg free
 11260  00382E  C0A1  F0BD         	movff	?___ftmul,___ftadd@f2
 11261  003832  C0A2  F0BE         	movff	?___ftmul+1,___ftadd@f2+1
 11262  003836  C0A3  F0BF         	movff	?___ftmul+2,___ftadd@f2+2
 11263  00383A  C0E8  F088         	movff	angleToPulse@a000,___altoft@c
 11264  00383E  C0E9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
 11265  003842  C0EA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
 11266  003846  C0EB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
 11267  00384A  EC55  F027         	call	___altoft	;wreg free
 11268  00384E  C088  F0BA         	movff	?___altoft,___ftadd@f1
 11269  003852  C089  F0BB         	movff	?___altoft+1,___ftadd@f1+1
 11270  003856  C08A  F0BC         	movff	?___altoft+2,___ftadd@f1+2
 11271  00385A  ECEB  F016         	call	___ftadd	;wreg free
 11272  00385E  C0BA  F0E5         	movff	?___ftadd,_angleToPulse$1350
 11273  003862  C0BB  F0E6         	movff	?___ftadd+1,_angleToPulse$1350+1
 11274  003866  C0BC  F0E7         	movff	?___ftadd+2,_angleToPulse$1350+2
 11275                           
 11276                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 11277  00386A  C0DD  F088         	movff	angleToPulse@offset,___altoft@c
 11278  00386E  C0DE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
 11279  003872  C0DF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
 11280  003876  C0E0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
 11281  00387A  EC55  F027         	call	___altoft	;wreg free
 11282  00387E  C088  F0BD         	movff	?___altoft,___ftadd@f2
 11283  003882  C089  F0BE         	movff	?___altoft+1,___ftadd@f2+1
 11284  003886  C08A  F0BF         	movff	?___altoft+2,___ftadd@f2+2
 11285  00388A  C0E5  F0BA         	movff	_angleToPulse$1350,___ftadd@f1
 11286  00388E  C0E6  F0BB         	movff	_angleToPulse$1350+1,___ftadd@f1+1
 11287  003892  C0E7  F0BC         	movff	_angleToPulse$1350+2,___ftadd@f1+2
 11288  003896  ECEB  F016         	call	___ftadd	;wreg free
 11289  00389A  C0BA  F0C6         	movff	?___ftadd,___fttol@f1
 11290  00389E  C0BB  F0C7         	movff	?___ftadd+1,___fttol@f1+1
 11291  0038A2  C0BC  F0C8         	movff	?___ftadd+2,___fttol@f1+2
 11292  0038A6  ECB3  F01D         	call	___fttol	;wreg free
 11293  0038AA  C0C6  F0D5         	movff	?___fttol,?_angleToPulse
 11294  0038AE  C0C7  F0D6         	movff	?___fttol+1,?_angleToPulse+1
 11295  0038B2  C0C8  F0D7         	movff	?___fttol+2,?_angleToPulse+2
 11296  0038B6  C0C9  F0D8         	movff	?___fttol+3,?_angleToPulse+3
 11297  0038BA  0012               	return	
 11298  0038BC                     __end_of_angleToPulse:
 11299                           	opt stack 0
 11300                           tblptru	equ	0xFF8
 11301                           tblptrh	equ	0xFF7
 11302                           tblptrl	equ	0xFF6
 11303                           tablat	equ	0xFF5
 11304                           prodh	equ	0xFF4
 11305                           prodl	equ	0xFF3
 11306                           intcon	equ	0xFF2
 11307                           postinc0	equ	0xFEE
 11308                           wreg	equ	0xFE8
 11309                           postdec1	equ	0xFE5
 11310                           fsr1l	equ	0xFE1
 11311                           indf2	equ	0xFDF
 11312                           postinc2	equ	0xFDE
 11313                           postdec2	equ	0xFDD
 11314                           fsr2h	equ	0xFDA
 11315                           fsr2l	equ	0xFD9
 11316                           status	equ	0xFD8
 11317                           
 11318 ;; *************** function ___fttol *****************
 11319 ;; Defined at:
 11320 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11321 ;; Parameters:    Size  Location     Type
 11322 ;;  f1              3   70[BANK0 ] float 
 11323 ;; Auto vars:     Size  Location     Type
 11324 ;;  lval            4   80[BANK0 ] unsigned long 
 11325 ;;  exp1            1   84[BANK0 ] unsigned char 
 11326 ;;  sign1           1   79[BANK0 ] unsigned char 
 11327 ;; Return value:  Size  Location     Type
 11328 ;;                  4   70[BANK0 ] long 
 11329 ;; Registers used:
 11330 ;;		wreg, status,2, status,0
 11331 ;; Tracked objects:
 11332 ;;		On entry : 0/0
 11333 ;;		On exit  : 0/0
 11334 ;;		Unchanged: 0/0
 11335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11336 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11337 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11338 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11340 ;;Total ram usage:       15 bytes
 11341 ;; Hardware stack levels used:    1
 11342 ;; Hardware stack levels required when called:    6
 11343 ;; This function calls:
 11344 ;;		Nothing
 11345 ;; This function is called by:
 11346 ;;		_sortBattery
 11347 ;;		_angleToPulse
 11348 ;;		_printf
 11349 ;; This function uses a non-reentrant model
 11350 ;;
 11351                           
 11352                           	psect	text38
 11353  003B66                     __ptext38:
 11354                           	opt stack 0
 11355  003B66                     ___fttol:
 11356                           	opt stack 21
 11357                           
 11358                           ;incstack = 0
 11359  003B66  C0C8  F0CA         	movff	___fttol@f1+2,??___fttol
 11360  003B6A  0100               	movlb	0	; () banked
 11361  003B6C  6BCB               	clrf	(??___fttol+1)& (0+255),b
 11362  003B6E  6BCC               	clrf	(??___fttol+2)& (0+255),b
 11363  003B70  0100               	movlb	0	; () banked
 11364  003B72  35C7               	rlcf	(___fttol@f1+1)& (0+255),w,b
 11365  003B74  0100               	movlb	0	; () banked
 11366  003B76  37CA               	rlcf	??___fttol& (0+255),f,b
 11367  003B78  E301               	bnc	u5161
 11368  003B7A  81CB               	bsf	(??___fttol+1)& (0+255),0,b
 11369  003B7C                     u5161:
 11370  003B7C  0100               	movlb	0	; () banked
 11371  003B7E  51CA               	movf	??___fttol& (0+255),w,b
 11372  003B80  0100               	movlb	0	; () banked
 11373  003B82  6FD4               	movwf	___fttol@exp1& (0+255),b
 11374  003B84  0100               	movlb	0	; () banked
 11375  003B86  51D4               	movf	___fttol@exp1& (0+255),w,b
 11376  003B88  A4D8               	btfss	status,2,c
 11377  003B8A  D00A               	goto	l5148
 11378                           
 11379                           ; BSR set to: 0
 11380  003B8C  0E00               	movlw	0
 11381  003B8E  0100               	movlb	0	; () banked
 11382  003B90  6FC6               	movwf	?___fttol& (0+255),b
 11383  003B92  0E00               	movlw	0
 11384  003B94  6FC7               	movwf	(?___fttol+1)& (0+255),b
 11385  003B96  0E00               	movlw	0
 11386  003B98  6FC8               	movwf	(?___fttol+2)& (0+255),b
 11387  003B9A  0E00               	movlw	0
 11388  003B9C  6FC9               	movwf	(?___fttol+3)& (0+255),b
 11389                           
 11390                           ; BSR set to: 0
 11391  003B9E  0012               	return	
 11392  003BA0                     l5148:
 11393                           
 11394                           ; BSR set to: 0
 11395  003BA0  0E17               	movlw	23
 11396  003BA2  0100               	movlb	0	; () banked
 11397  003BA4  6FCA               	movwf	??___fttol& (0+255),b
 11398  003BA6  C0C6  F0CB         	movff	___fttol@f1,??___fttol+1
 11399  003BAA  C0C7  F0CC         	movff	___fttol@f1+1,??___fttol+2
 11400  003BAE  C0C8  F0CD         	movff	___fttol@f1+2,??___fttol+3
 11401  003BB2  0100               	movlb	0	; () banked
 11402  003BB4  29CA               	incf	??___fttol& (0+255),w,b
 11403  003BB6  0100               	movlb	0	; () banked
 11404  003BB8  6FCE               	movwf	(??___fttol+4)& (0+255),b
 11405  003BBA  D005               	goto	u5180
 11406  003BBC                     u5185:
 11407  003BBC  0100               	movlb	0	; () banked
 11408  003BBE  90D8               	bcf	status,0,c
 11409  003BC0  33CD               	rrcf	(??___fttol+3)& (0+255),f,b
 11410  003BC2  33CC               	rrcf	(??___fttol+2)& (0+255),f,b
 11411  003BC4  33CB               	rrcf	(??___fttol+1)& (0+255),f,b
 11412  003BC6                     u5180:
 11413  003BC6  0100               	movlb	0	; () banked
 11414  003BC8  2FCE               	decfsz	(??___fttol+4)& (0+255),f,b
 11415  003BCA  D7F8               	goto	u5185
 11416  003BCC  0100               	movlb	0	; () banked
 11417  003BCE  51CB               	movf	(??___fttol+1)& (0+255),w,b
 11418  003BD0  0100               	movlb	0	; () banked
 11419  003BD2  6FCF               	movwf	___fttol@sign1& (0+255),b
 11420                           
 11421                           ; BSR set to: 0
 11422  003BD4  0100               	movlb	0	; () banked
 11423  003BD6  8FC7               	bsf	(___fttol@f1+1)& (0+255),7,b
 11424                           
 11425                           ; BSR set to: 0
 11426  003BD8  0EFF               	movlw	255
 11427  003BDA  0100               	movlb	0	; () banked
 11428  003BDC  17C6               	andwf	___fttol@f1& (0+255),f,b
 11429  003BDE  0EFF               	movlw	255
 11430  003BE0  0100               	movlb	0	; () banked
 11431  003BE2  17C7               	andwf	(___fttol@f1+1)& (0+255),f,b
 11432  003BE4  0E00               	movlw	0
 11433  003BE6  0100               	movlb	0	; () banked
 11434  003BE8  17C8               	andwf	(___fttol@f1+2)& (0+255),f,b
 11435                           
 11436                           ; BSR set to: 0
 11437  003BEA  0100               	movlb	0	; () banked
 11438  003BEC  51C6               	movf	___fttol@f1& (0+255),w,b
 11439  003BEE  0100               	movlb	0	; () banked
 11440  003BF0  6FD0               	movwf	___fttol@lval& (0+255),b
 11441  003BF2  0100               	movlb	0	; () banked
 11442  003BF4  51C7               	movf	(___fttol@f1+1)& (0+255),w,b
 11443  003BF6  0100               	movlb	0	; () banked
 11444  003BF8  6FD1               	movwf	(___fttol@lval+1)& (0+255),b
 11445  003BFA  0100               	movlb	0	; () banked
 11446  003BFC  51C8               	movf	(___fttol@f1+2)& (0+255),w,b
 11447  003BFE  0100               	movlb	0	; () banked
 11448  003C00  6FD2               	movwf	(___fttol@lval+2)& (0+255),b
 11449  003C02  0100               	movlb	0	; () banked
 11450  003C04  6BD3               	clrf	(___fttol@lval+3)& (0+255),b
 11451                           
 11452                           ; BSR set to: 0
 11453  003C06  0E8E               	movlw	142
 11454  003C08  0100               	movlb	0	; () banked
 11455  003C0A  5FD4               	subwf	___fttol@exp1& (0+255),f,b
 11456                           
 11457                           ; BSR set to: 0
 11458  003C0C  0100               	movlb	0	; () banked
 11459  003C0E  AFD4               	btfss	___fttol@exp1& (0+255),7,b
 11460  003C10  D01A               	goto	l5170
 11461                           
 11462                           ; BSR set to: 0
 11463  003C12  0100               	movlb	0	; () banked
 11464  003C14  51D4               	movf	___fttol@exp1& (0+255),w,b
 11465  003C16  0A80               	xorlw	128
 11466  003C18  0F8F               	addlw	143
 11467  003C1A  B0D8               	btfsc	status,0,c
 11468  003C1C  D00A               	goto	l5166
 11469                           
 11470                           ; BSR set to: 0
 11471  003C1E  0E00               	movlw	0
 11472  003C20  0100               	movlb	0	; () banked
 11473  003C22  6FC6               	movwf	?___fttol& (0+255),b
 11474  003C24  0E00               	movlw	0
 11475  003C26  6FC7               	movwf	(?___fttol+1)& (0+255),b
 11476  003C28  0E00               	movlw	0
 11477  003C2A  6FC8               	movwf	(?___fttol+2)& (0+255),b
 11478  003C2C  0E00               	movlw	0
 11479  003C2E  6FC9               	movwf	(?___fttol+3)& (0+255),b
 11480                           
 11481                           ; BSR set to: 0
 11482  003C30  0012               	return	
 11483  003C32                     l5166:
 11484                           
 11485                           ; BSR set to: 0
 11486  003C32  0100               	movlb	0	; () banked
 11487  003C34  90D8               	bcf	status,0,c
 11488  003C36  33D3               	rrcf	(___fttol@lval+3)& (0+255),f,b
 11489  003C38  33D2               	rrcf	(___fttol@lval+2)& (0+255),f,b
 11490  003C3A  33D1               	rrcf	(___fttol@lval+1)& (0+255),f,b
 11491  003C3C  33D0               	rrcf	___fttol@lval& (0+255),f,b
 11492                           
 11493                           ; BSR set to: 0
 11494  003C3E  0100               	movlb	0	; () banked
 11495  003C40  3FD4               	incfsz	___fttol@exp1& (0+255),f,b
 11496  003C42  D7F7               	goto	l5166
 11497                           
 11498                           ; BSR set to: 0
 11499  003C44  D01B               	goto	l5180
 11500  003C46                     l5170:
 11501                           
 11502                           ; BSR set to: 0
 11503  003C46  0E17               	movlw	23
 11504  003C48  0100               	movlb	0	; () banked
 11505  003C4A  65D4               	cpfsgt	___fttol@exp1& (0+255),b
 11506  003C4C  D012               	goto	l5178
 11507                           
 11508                           ; BSR set to: 0
 11509  003C4E  0E00               	movlw	0
 11510  003C50  0100               	movlb	0	; () banked
 11511  003C52  6FC6               	movwf	?___fttol& (0+255),b
 11512  003C54  0E00               	movlw	0
 11513  003C56  6FC7               	movwf	(?___fttol+1)& (0+255),b
 11514  003C58  0E00               	movlw	0
 11515  003C5A  6FC8               	movwf	(?___fttol+2)& (0+255),b
 11516  003C5C  0E00               	movlw	0
 11517  003C5E  6FC9               	movwf	(?___fttol+3)& (0+255),b
 11518                           
 11519                           ; BSR set to: 0
 11520  003C60  0012               	return	
 11521  003C62                     l5176:
 11522                           
 11523                           ; BSR set to: 0
 11524  003C62  0100               	movlb	0	; () banked
 11525  003C64  90D8               	bcf	status,0,c
 11526  003C66  37D0               	rlcf	___fttol@lval& (0+255),f,b
 11527  003C68  37D1               	rlcf	(___fttol@lval+1)& (0+255),f,b
 11528  003C6A  37D2               	rlcf	(___fttol@lval+2)& (0+255),f,b
 11529  003C6C  37D3               	rlcf	(___fttol@lval+3)& (0+255),f,b
 11530  003C6E  0100               	movlb	0	; () banked
 11531  003C70  07D4               	decf	___fttol@exp1& (0+255),f,b
 11532  003C72                     l5178:
 11533                           
 11534                           ; BSR set to: 0
 11535  003C72  0100               	movlb	0	; () banked
 11536  003C74  51D4               	movf	___fttol@exp1& (0+255),w,b
 11537  003C76  0100               	movlb	0	; () banked
 11538  003C78  A4D8               	btfss	status,2,c
 11539  003C7A  D7F3               	goto	l5176
 11540  003C7C                     l5180:
 11541                           
 11542                           ; BSR set to: 0
 11543  003C7C  0100               	movlb	0	; () banked
 11544  003C7E  51CF               	movf	___fttol@sign1& (0+255),w,b
 11545  003C80  0100               	movlb	0	; () banked
 11546  003C82  B4D8               	btfsc	status,2,c
 11547  003C84  D009               	goto	l5184
 11548                           
 11549                           ; BSR set to: 0
 11550  003C86  0100               	movlb	0	; () banked
 11551  003C88  1FD3               	comf	(___fttol@lval+3)& (0+255),f,b
 11552  003C8A  1FD2               	comf	(___fttol@lval+2)& (0+255),f,b
 11553  003C8C  1FD1               	comf	(___fttol@lval+1)& (0+255),f,b
 11554  003C8E  6DD0               	negf	___fttol@lval& (0+255),b
 11555  003C90  0E00               	movlw	0
 11556  003C92  23D1               	addwfc	(___fttol@lval+1)& (0+255),f,b
 11557  003C94  23D2               	addwfc	(___fttol@lval+2)& (0+255),f,b
 11558  003C96  23D3               	addwfc	(___fttol@lval+3)& (0+255),f,b
 11559  003C98                     l5184:
 11560                           
 11561                           ; BSR set to: 0
 11562  003C98  C0D0  F0C6         	movff	___fttol@lval,?___fttol
 11563  003C9C  C0D1  F0C7         	movff	___fttol@lval+1,?___fttol+1
 11564  003CA0  C0D2  F0C8         	movff	___fttol@lval+2,?___fttol+2
 11565  003CA4  C0D3  F0C9         	movff	___fttol@lval+3,?___fttol+3
 11566  003CA8  0012               	return	
 11567  003CAA                     __end_of___fttol:
 11568                           	opt stack 0
 11569                           tblptru	equ	0xFF8
 11570                           tblptrh	equ	0xFF7
 11571                           tblptrl	equ	0xFF6
 11572                           tablat	equ	0xFF5
 11573                           prodh	equ	0xFF4
 11574                           prodl	equ	0xFF3
 11575                           intcon	equ	0xFF2
 11576                           postinc0	equ	0xFEE
 11577                           wreg	equ	0xFE8
 11578                           postdec1	equ	0xFE5
 11579                           fsr1l	equ	0xFE1
 11580                           indf2	equ	0xFDF
 11581                           postinc2	equ	0xFDE
 11582                           postdec2	equ	0xFDD
 11583                           fsr2h	equ	0xFDA
 11584                           fsr2l	equ	0xFD9
 11585                           status	equ	0xFD8
 11586                           
 11587 ;; *************** function ___ftmul *****************
 11588 ;; Defined at:
 11589 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11590 ;; Parameters:    Size  Location     Type
 11591 ;;  f1              3   33[BANK0 ] float 
 11592 ;;  f2              3   36[BANK0 ] float 
 11593 ;; Auto vars:     Size  Location     Type
 11594 ;;  f3_as_produc    3   43[BANK0 ] unsigned um
 11595 ;;  sign            1   47[BANK0 ] unsigned char 
 11596 ;;  cntr            1   46[BANK0 ] unsigned char 
 11597 ;;  exp             1   42[BANK0 ] unsigned char 
 11598 ;; Return value:  Size  Location     Type
 11599 ;;                  3   33[BANK0 ] float 
 11600 ;; Registers used:
 11601 ;;		wreg, status,2, status,0, cstack
 11602 ;; Tracked objects:
 11603 ;;		On entry : 0/0
 11604 ;;		On exit  : 0/0
 11605 ;;		Unchanged: 0/0
 11606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11607 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;Total ram usage:       15 bytes
 11612 ;; Hardware stack levels used:    1
 11613 ;; Hardware stack levels required when called:    7
 11614 ;; This function calls:
 11615 ;;		___ftpack
 11616 ;; This function is called by:
 11617 ;;		_sortBattery
 11618 ;;		_angleToPulse
 11619 ;;		_fround
 11620 ;;		_scale
 11621 ;;		_printf
 11622 ;; This function uses a non-reentrant model
 11623 ;;
 11624                           
 11625                           	psect	text39
 11626  0038BC                     __ptext39:
 11627                           	opt stack 0
 11628  0038BC                     ___ftmul:
 11629                           	opt stack 20
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;incstack = 0
 11633  0038BC  C0A3  F0A7         	movff	___ftmul@f1+2,??___ftmul
 11634  0038C0  0100               	movlb	0	; () banked
 11635  0038C2  6BA8               	clrf	(??___ftmul+1)& (0+255),b
 11636  0038C4  6BA9               	clrf	(??___ftmul+2)& (0+255),b
 11637  0038C6  0100               	movlb	0	; () banked
 11638  0038C8  35A2               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 11639  0038CA  0100               	movlb	0	; () banked
 11640  0038CC  37A7               	rlcf	??___ftmul& (0+255),f,b
 11641  0038CE  E301               	bnc	u4591
 11642  0038D0  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 11643  0038D2                     u4591:
 11644  0038D2  0100               	movlb	0	; () banked
 11645  0038D4  51A7               	movf	??___ftmul& (0+255),w,b
 11646  0038D6  0100               	movlb	0	; () banked
 11647  0038D8  6FAA               	movwf	___ftmul@exp& (0+255),b
 11648  0038DA  0100               	movlb	0	; () banked
 11649  0038DC  51AA               	movf	___ftmul@exp& (0+255),w,b
 11650  0038DE  A4D8               	btfss	status,2,c
 11651  0038E0  D00A               	goto	l4702
 11652                           
 11653                           ; BSR set to: 0
 11654  0038E2  0E00               	movlw	0
 11655  0038E4  0100               	movlb	0	; () banked
 11656  0038E6  6FA1               	movwf	?___ftmul& (0+255),b
 11657  0038E8  0E00               	movlw	0
 11658  0038EA  0100               	movlb	0	; () banked
 11659  0038EC  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 11660  0038EE  0E00               	movlw	0
 11661  0038F0  0100               	movlb	0	; () banked
 11662  0038F2  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 11663                           
 11664                           ; BSR set to: 0
 11665  0038F4  0012               	return	
 11666  0038F6                     l4702:
 11667                           
 11668                           ; BSR set to: 0
 11669  0038F6  C0A6  F0A7         	movff	___ftmul@f2+2,??___ftmul
 11670  0038FA  0100               	movlb	0	; () banked
 11671  0038FC  6BA8               	clrf	(??___ftmul+1)& (0+255),b
 11672  0038FE  6BA9               	clrf	(??___ftmul+2)& (0+255),b
 11673  003900  0100               	movlb	0	; () banked
 11674  003902  35A5               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 11675  003904  0100               	movlb	0	; () banked
 11676  003906  37A7               	rlcf	??___ftmul& (0+255),f,b
 11677  003908  E301               	bnc	u4611
 11678  00390A  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 11679  00390C                     u4611:
 11680  00390C  0100               	movlb	0	; () banked
 11681  00390E  51A7               	movf	??___ftmul& (0+255),w,b
 11682  003910  0100               	movlb	0	; () banked
 11683  003912  6FAF               	movwf	___ftmul@sign& (0+255),b
 11684  003914  0100               	movlb	0	; () banked
 11685  003916  51AF               	movf	___ftmul@sign& (0+255),w,b
 11686  003918  A4D8               	btfss	status,2,c
 11687  00391A  D00A               	goto	l4708
 11688                           
 11689                           ; BSR set to: 0
 11690  00391C  0E00               	movlw	0
 11691  00391E  0100               	movlb	0	; () banked
 11692  003920  6FA1               	movwf	?___ftmul& (0+255),b
 11693  003922  0E00               	movlw	0
 11694  003924  0100               	movlb	0	; () banked
 11695  003926  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 11696  003928  0E00               	movlw	0
 11697  00392A  0100               	movlb	0	; () banked
 11698  00392C  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 11699                           
 11700                           ; BSR set to: 0
 11701  00392E  0012               	return	
 11702  003930                     l4708:
 11703                           
 11704                           ; BSR set to: 0
 11705  003930  0100               	movlb	0	; () banked
 11706  003932  51AF               	movf	___ftmul@sign& (0+255),w,b
 11707  003934  0F7B               	addlw	123
 11708  003936  0100               	movlb	0	; () banked
 11709  003938  27AA               	addwf	___ftmul@exp& (0+255),f,b
 11710                           
 11711                           ; BSR set to: 0
 11712  00393A  C0A3  F0AF         	movff	___ftmul@f1+2,___ftmul@sign
 11713  00393E  0100               	movlb	0	; () banked
 11714  003940  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 11715  003942  0100               	movlb	0	; () banked
 11716  003944  1BAF               	xorwf	___ftmul@sign& (0+255),f,b
 11717  003946  0E80               	movlw	128
 11718  003948  0100               	movlb	0	; () banked
 11719  00394A  17AF               	andwf	___ftmul@sign& (0+255),f,b
 11720                           
 11721                           ; BSR set to: 0
 11722  00394C  0100               	movlb	0	; () banked
 11723  00394E  8FA2               	bsf	(___ftmul@f1+1)& (0+255),7,b
 11724                           
 11725                           ; BSR set to: 0
 11726  003950  0100               	movlb	0	; () banked
 11727  003952  8FA5               	bsf	(___ftmul@f2+1)& (0+255),7,b
 11728                           
 11729                           ; BSR set to: 0
 11730  003954  0EFF               	movlw	255
 11731  003956  0100               	movlb	0	; () banked
 11732  003958  17A4               	andwf	___ftmul@f2& (0+255),f,b
 11733  00395A  0EFF               	movlw	255
 11734  00395C  0100               	movlb	0	; () banked
 11735  00395E  17A5               	andwf	(___ftmul@f2+1)& (0+255),f,b
 11736  003960  0E00               	movlw	0
 11737  003962  0100               	movlb	0	; () banked
 11738  003964  17A6               	andwf	(___ftmul@f2+2)& (0+255),f,b
 11739                           
 11740                           ; BSR set to: 0
 11741  003966  0E00               	movlw	0
 11742  003968  0100               	movlb	0	; () banked
 11743  00396A  6FAB               	movwf	___ftmul@f3_as_product& (0+255),b
 11744  00396C  0E00               	movlw	0
 11745  00396E  0100               	movlb	0	; () banked
 11746  003970  6FAC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 11747  003972  0E00               	movlw	0
 11748  003974  0100               	movlb	0	; () banked
 11749  003976  6FAD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 11750                           
 11751                           ; BSR set to: 0
 11752  003978  0E07               	movlw	7
 11753  00397A  0100               	movlb	0	; () banked
 11754  00397C  6FAE               	movwf	___ftmul@cntr& (0+255),b
 11755  00397E                     l4722:
 11756                           
 11757                           ; BSR set to: 0
 11758  00397E  0100               	movlb	0	; () banked
 11759  003980  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 11760  003982  D00C               	goto	l4726
 11761                           
 11762                           ; BSR set to: 0
 11763  003984  0100               	movlb	0	; () banked
 11764  003986  51A4               	movf	___ftmul@f2& (0+255),w,b
 11765  003988  0100               	movlb	0	; () banked
 11766  00398A  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11767  00398C  0100               	movlb	0	; () banked
 11768  00398E  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 11769  003990  0100               	movlb	0	; () banked
 11770  003992  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11771  003994  0100               	movlb	0	; () banked
 11772  003996  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 11773  003998  0100               	movlb	0	; () banked
 11774  00399A  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11775  00399C                     l4726:
 11776                           
 11777                           ; BSR set to: 0
 11778  00399C  0100               	movlb	0	; () banked
 11779  00399E  90D8               	bcf	status,0,c
 11780  0039A0  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11781  0039A2  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11782  0039A4  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 11783  0039A6  0100               	movlb	0	; () banked
 11784  0039A8  90D8               	bcf	status,0,c
 11785  0039AA  37A4               	rlcf	___ftmul@f2& (0+255),f,b
 11786  0039AC  37A5               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 11787  0039AE  37A6               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 11788                           
 11789                           ; BSR set to: 0
 11790  0039B0  0100               	movlb	0	; () banked
 11791  0039B2  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 11792  0039B4  D7E4               	goto	l4722
 11793                           
 11794                           ; BSR set to: 0
 11795                           
 11796                           ; BSR set to: 0
 11797  0039B6  0E09               	movlw	9
 11798  0039B8  0100               	movlb	0	; () banked
 11799  0039BA  6FAE               	movwf	___ftmul@cntr& (0+255),b
 11800  0039BC                     l4732:
 11801                           
 11802                           ; BSR set to: 0
 11803  0039BC  0100               	movlb	0	; () banked
 11804  0039BE  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 11805  0039C0  D00C               	goto	l4736
 11806                           
 11807                           ; BSR set to: 0
 11808  0039C2  0100               	movlb	0	; () banked
 11809  0039C4  51A4               	movf	___ftmul@f2& (0+255),w,b
 11810  0039C6  0100               	movlb	0	; () banked
 11811  0039C8  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11812  0039CA  0100               	movlb	0	; () banked
 11813  0039CC  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 11814  0039CE  0100               	movlb	0	; () banked
 11815  0039D0  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11816  0039D2  0100               	movlb	0	; () banked
 11817  0039D4  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 11818  0039D6  0100               	movlb	0	; () banked
 11819  0039D8  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11820  0039DA                     l4736:
 11821                           
 11822                           ; BSR set to: 0
 11823  0039DA  0100               	movlb	0	; () banked
 11824  0039DC  90D8               	bcf	status,0,c
 11825  0039DE  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11826  0039E0  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11827  0039E2  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 11828  0039E4  0100               	movlb	0	; () banked
 11829  0039E6  90D8               	bcf	status,0,c
 11830  0039E8  33AD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 11831  0039EA  33AC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 11832  0039EC  33AB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 11833                           
 11834                           ; BSR set to: 0
 11835  0039EE  0100               	movlb	0	; () banked
 11836  0039F0  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 11837  0039F2  D7E4               	goto	l4732
 11838                           
 11839                           ; BSR set to: 0
 11840                           
 11841                           ; BSR set to: 0
 11842  0039F4  C0AB  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
 11843  0039F8  C0AC  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11844  0039FC  C0AD  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11845  003A00  C0AA  F083         	movff	___ftmul@exp,___ftpack@exp
 11846  003A04  C0AF  F084         	movff	___ftmul@sign,___ftpack@sign
 11847  003A08  EC44  F021         	call	___ftpack	;wreg free
 11848  003A0C  C080  F0A1         	movff	?___ftpack,?___ftmul
 11849  003A10  C081  F0A2         	movff	?___ftpack+1,?___ftmul+1
 11850  003A14  C082  F0A3         	movff	?___ftpack+2,?___ftmul+2
 11851  003A18  0012               	return	
 11852  003A1A                     __end_of___ftmul:
 11853                           	opt stack 0
 11854                           tblptru	equ	0xFF8
 11855                           tblptrh	equ	0xFF7
 11856                           tblptrl	equ	0xFF6
 11857                           tablat	equ	0xFF5
 11858                           prodh	equ	0xFF4
 11859                           prodl	equ	0xFF3
 11860                           intcon	equ	0xFF2
 11861                           postinc0	equ	0xFEE
 11862                           wreg	equ	0xFE8
 11863                           postdec1	equ	0xFE5
 11864                           fsr1l	equ	0xFE1
 11865                           indf2	equ	0xFDF
 11866                           postinc2	equ	0xFDE
 11867                           postdec2	equ	0xFDD
 11868                           fsr2h	equ	0xFDA
 11869                           fsr2l	equ	0xFD9
 11870                           status	equ	0xFD8
 11871                           
 11872 ;; *************** function ___ftdiv *****************
 11873 ;; Defined at:
 11874 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11875 ;; Parameters:    Size  Location     Type
 11876 ;;  f1              3   18[BANK0 ] float 
 11877 ;;  f2              3   21[BANK0 ] float 
 11878 ;; Auto vars:     Size  Location     Type
 11879 ;;  f3              3   28[BANK0 ] float 
 11880 ;;  sign            1   32[BANK0 ] unsigned char 
 11881 ;;  exp             1   31[BANK0 ] unsigned char 
 11882 ;;  cntr            1   27[BANK0 ] unsigned char 
 11883 ;; Return value:  Size  Location     Type
 11884 ;;                  3   18[BANK0 ] float 
 11885 ;; Registers used:
 11886 ;;		wreg, status,2, status,0, cstack
 11887 ;; Tracked objects:
 11888 ;;		On entry : 0/0
 11889 ;;		On exit  : 0/0
 11890 ;;		Unchanged: 0/0
 11891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11892 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11893 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11894 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;Total ram usage:       15 bytes
 11897 ;; Hardware stack levels used:    1
 11898 ;; Hardware stack levels required when called:    7
 11899 ;; This function calls:
 11900 ;;		___ftpack
 11901 ;; This function is called by:
 11902 ;;		_sortBattery
 11903 ;;		_angleToPulse
 11904 ;; This function uses a non-reentrant model
 11905 ;;
 11906                           
 11907                           	psect	text40
 11908  003A1A                     __ptext40:
 11909                           	opt stack 0
 11910  003A1A                     ___ftdiv:
 11911                           	opt stack 20
 11912                           
 11913                           ;incstack = 0
 11914  003A1A  C094  F098         	movff	___ftdiv@f1+2,??___ftdiv
 11915  003A1E  0100               	movlb	0	; () banked
 11916  003A20  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 11917  003A22  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 11918  003A24  0100               	movlb	0	; () banked
 11919  003A26  3593               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 11920  003A28  0100               	movlb	0	; () banked
 11921  003A2A  3798               	rlcf	??___ftdiv& (0+255),f,b
 11922  003A2C  E301               	bnc	u5051
 11923  003A2E  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 11924  003A30                     u5051:
 11925  003A30  0100               	movlb	0	; () banked
 11926  003A32  5198               	movf	??___ftdiv& (0+255),w,b
 11927  003A34  0100               	movlb	0	; () banked
 11928  003A36  6F9F               	movwf	___ftdiv@exp& (0+255),b
 11929  003A38  0100               	movlb	0	; () banked
 11930  003A3A  519F               	movf	___ftdiv@exp& (0+255),w,b
 11931  003A3C  A4D8               	btfss	status,2,c
 11932  003A3E  D00A               	goto	l5060
 11933                           
 11934                           ; BSR set to: 0
 11935  003A40  0E00               	movlw	0
 11936  003A42  0100               	movlb	0	; () banked
 11937  003A44  6F92               	movwf	?___ftdiv& (0+255),b
 11938  003A46  0E00               	movlw	0
 11939  003A48  0100               	movlb	0	; () banked
 11940  003A4A  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 11941  003A4C  0E00               	movlw	0
 11942  003A4E  0100               	movlb	0	; () banked
 11943  003A50  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 11944                           
 11945                           ; BSR set to: 0
 11946  003A52  0012               	return	
 11947  003A54                     l5060:
 11948                           
 11949                           ; BSR set to: 0
 11950  003A54  C097  F098         	movff	___ftdiv@f2+2,??___ftdiv
 11951  003A58  0100               	movlb	0	; () banked
 11952  003A5A  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 11953  003A5C  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 11954  003A5E  0100               	movlb	0	; () banked
 11955  003A60  3596               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 11956  003A62  0100               	movlb	0	; () banked
 11957  003A64  3798               	rlcf	??___ftdiv& (0+255),f,b
 11958  003A66  E301               	bnc	u5071
 11959  003A68  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 11960  003A6A                     u5071:
 11961  003A6A  0100               	movlb	0	; () banked
 11962  003A6C  5198               	movf	??___ftdiv& (0+255),w,b
 11963  003A6E  0100               	movlb	0	; () banked
 11964  003A70  6FA0               	movwf	___ftdiv@sign& (0+255),b
 11965  003A72  0100               	movlb	0	; () banked
 11966  003A74  51A0               	movf	___ftdiv@sign& (0+255),w,b
 11967  003A76  A4D8               	btfss	status,2,c
 11968  003A78  D00A               	goto	l5066
 11969                           
 11970                           ; BSR set to: 0
 11971  003A7A  0E00               	movlw	0
 11972  003A7C  0100               	movlb	0	; () banked
 11973  003A7E  6F92               	movwf	?___ftdiv& (0+255),b
 11974  003A80  0E00               	movlw	0
 11975  003A82  0100               	movlb	0	; () banked
 11976  003A84  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 11977  003A86  0E00               	movlw	0
 11978  003A88  0100               	movlb	0	; () banked
 11979  003A8A  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 11980                           
 11981                           ; BSR set to: 0
 11982  003A8C  0012               	return	
 11983  003A8E                     l5066:
 11984                           
 11985                           ; BSR set to: 0
 11986  003A8E  0E00               	movlw	0
 11987  003A90  0100               	movlb	0	; () banked
 11988  003A92  6F9C               	movwf	___ftdiv@f3& (0+255),b
 11989  003A94  0E00               	movlw	0
 11990  003A96  0100               	movlb	0	; () banked
 11991  003A98  6F9D               	movwf	(___ftdiv@f3+1)& (0+255),b
 11992  003A9A  0E00               	movlw	0
 11993  003A9C  0100               	movlb	0	; () banked
 11994  003A9E  6F9E               	movwf	(___ftdiv@f3+2)& (0+255),b
 11995                           
 11996                           ; BSR set to: 0
 11997  003AA0  0100               	movlb	0	; () banked
 11998  003AA2  51A0               	movf	___ftdiv@sign& (0+255),w,b
 11999  003AA4  0F89               	addlw	137
 12000  003AA6  0100               	movlb	0	; () banked
 12001  003AA8  5F9F               	subwf	___ftdiv@exp& (0+255),f,b
 12002                           
 12003                           ; BSR set to: 0
 12004  003AAA  C094  F0A0         	movff	___ftdiv@f1+2,___ftdiv@sign
 12005                           
 12006                           ; BSR set to: 0
 12007  003AAE  0100               	movlb	0	; () banked
 12008  003AB0  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 12009  003AB2  0100               	movlb	0	; () banked
 12010  003AB4  1BA0               	xorwf	___ftdiv@sign& (0+255),f,b
 12011                           
 12012                           ; BSR set to: 0
 12013  003AB6  0E80               	movlw	128
 12014  003AB8  0100               	movlb	0	; () banked
 12015  003ABA  17A0               	andwf	___ftdiv@sign& (0+255),f,b
 12016                           
 12017                           ; BSR set to: 0
 12018  003ABC  0100               	movlb	0	; () banked
 12019  003ABE  8F93               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 12020                           
 12021                           ; BSR set to: 0
 12022  003AC0  0EFF               	movlw	255
 12023  003AC2  0100               	movlb	0	; () banked
 12024  003AC4  1792               	andwf	___ftdiv@f1& (0+255),f,b
 12025  003AC6  0EFF               	movlw	255
 12026  003AC8  0100               	movlb	0	; () banked
 12027  003ACA  1793               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 12028  003ACC  0E00               	movlw	0
 12029  003ACE  0100               	movlb	0	; () banked
 12030  003AD0  1794               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 12031                           
 12032                           ; BSR set to: 0
 12033  003AD2  0100               	movlb	0	; () banked
 12034  003AD4  8F96               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 12035                           
 12036                           ; BSR set to: 0
 12037  003AD6  0EFF               	movlw	255
 12038  003AD8  0100               	movlb	0	; () banked
 12039  003ADA  1795               	andwf	___ftdiv@f2& (0+255),f,b
 12040  003ADC  0EFF               	movlw	255
 12041  003ADE  0100               	movlb	0	; () banked
 12042  003AE0  1796               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 12043  003AE2  0E00               	movlw	0
 12044  003AE4  0100               	movlb	0	; () banked
 12045  003AE6  1797               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 12046                           
 12047                           ; BSR set to: 0
 12048  003AE8  0E18               	movlw	24
 12049  003AEA  0100               	movlb	0	; () banked
 12050  003AEC  6F9B               	movwf	___ftdiv@cntr& (0+255),b
 12051  003AEE                     l5086:
 12052                           
 12053                           ; BSR set to: 0
 12054  003AEE  0100               	movlb	0	; () banked
 12055  003AF0  90D8               	bcf	status,0,c
 12056  003AF2  379C               	rlcf	___ftdiv@f3& (0+255),f,b
 12057  003AF4  379D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 12058  003AF6  379E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 12059                           
 12060                           ; BSR set to: 0
 12061  003AF8  0100               	movlb	0	; () banked
 12062  003AFA  5195               	movf	___ftdiv@f2& (0+255),w,b
 12063  003AFC  0100               	movlb	0	; () banked
 12064  003AFE  5D92               	subwf	___ftdiv@f1& (0+255),w,b
 12065  003B00  0100               	movlb	0	; () banked
 12066  003B02  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 12067  003B04  0100               	movlb	0	; () banked
 12068  003B06  5993               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 12069  003B08  0100               	movlb	0	; () banked
 12070  003B0A  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 12071  003B0C  0100               	movlb	0	; () banked
 12072  003B0E  5994               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 12073  003B10  A0D8               	btfss	status,0,c
 12074  003B12  D00E               	goto	l1123
 12075                           
 12076                           ; BSR set to: 0
 12077  003B14  0100               	movlb	0	; () banked
 12078  003B16  5195               	movf	___ftdiv@f2& (0+255),w,b
 12079  003B18  0100               	movlb	0	; () banked
 12080  003B1A  5F92               	subwf	___ftdiv@f1& (0+255),f,b
 12081  003B1C  0100               	movlb	0	; () banked
 12082  003B1E  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 12083  003B20  0100               	movlb	0	; () banked
 12084  003B22  5B93               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 12085  003B24  0100               	movlb	0	; () banked
 12086  003B26  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 12087  003B28  0100               	movlb	0	; () banked
 12088  003B2A  5B94               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 12089                           
 12090                           ; BSR set to: 0
 12091  003B2C  0100               	movlb	0	; () banked
 12092  003B2E  819C               	bsf	___ftdiv@f3& (0+255),0,b
 12093  003B30                     l1123:
 12094                           
 12095                           ; BSR set to: 0
 12096  003B30  0100               	movlb	0	; () banked
 12097  003B32  90D8               	bcf	status,0,c
 12098  003B34  3792               	rlcf	___ftdiv@f1& (0+255),f,b
 12099  003B36  3793               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 12100  003B38  3794               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 12101                           
 12102                           ; BSR set to: 0
 12103  003B3A  0100               	movlb	0	; () banked
 12104  003B3C  2F9B               	decfsz	___ftdiv@cntr& (0+255),f,b
 12105  003B3E  D7D7               	goto	l5086
 12106                           
 12107                           ; BSR set to: 0
 12108                           
 12109                           ; BSR set to: 0
 12110  003B40  C09C  F080         	movff	___ftdiv@f3,___ftpack@arg
 12111  003B44  C09D  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12112  003B48  C09E  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12113  003B4C  C09F  F083         	movff	___ftdiv@exp,___ftpack@exp
 12114  003B50  C0A0  F084         	movff	___ftdiv@sign,___ftpack@sign
 12115  003B54  EC44  F021         	call	___ftpack	;wreg free
 12116  003B58  C080  F092         	movff	?___ftpack,?___ftdiv
 12117  003B5C  C081  F093         	movff	?___ftpack+1,?___ftdiv+1
 12118  003B60  C082  F094         	movff	?___ftpack+2,?___ftdiv+2
 12119  003B64  0012               	return	
 12120  003B66                     __end_of___ftdiv:
 12121                           	opt stack 0
 12122                           tblptru	equ	0xFF8
 12123                           tblptrh	equ	0xFF7
 12124                           tblptrl	equ	0xFF6
 12125                           tablat	equ	0xFF5
 12126                           prodh	equ	0xFF4
 12127                           prodl	equ	0xFF3
 12128                           intcon	equ	0xFF2
 12129                           postinc0	equ	0xFEE
 12130                           wreg	equ	0xFE8
 12131                           postdec1	equ	0xFE5
 12132                           fsr1l	equ	0xFE1
 12133                           indf2	equ	0xFDF
 12134                           postinc2	equ	0xFDE
 12135                           postdec2	equ	0xFDD
 12136                           fsr2h	equ	0xFDA
 12137                           fsr2l	equ	0xFD9
 12138                           status	equ	0xFD8
 12139                           
 12140 ;; *************** function ___ftadd *****************
 12141 ;; Defined at:
 12142 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12143 ;; Parameters:    Size  Location     Type
 12144 ;;  f1              3   58[BANK0 ] float 
 12145 ;;  f2              3   61[BANK0 ] float 
 12146 ;; Auto vars:     Size  Location     Type
 12147 ;;  exp1            1   69[BANK0 ] unsigned char 
 12148 ;;  exp2            1   68[BANK0 ] unsigned char 
 12149 ;;  sign            1   67[BANK0 ] unsigned char 
 12150 ;; Return value:  Size  Location     Type
 12151 ;;                  3   58[BANK0 ] float 
 12152 ;; Registers used:
 12153 ;;		wreg, status,2, status,0, cstack
 12154 ;; Tracked objects:
 12155 ;;		On entry : 0/0
 12156 ;;		On exit  : 0/0
 12157 ;;		Unchanged: 0/0
 12158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12159 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12160 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12161 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12162 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12163 ;;Total ram usage:       12 bytes
 12164 ;; Hardware stack levels used:    1
 12165 ;; Hardware stack levels required when called:    7
 12166 ;; This function calls:
 12167 ;;		___ftpack
 12168 ;; This function is called by:
 12169 ;;		_angleToPulse
 12170 ;;		_printf
 12171 ;;		___ftsub
 12172 ;; This function uses a non-reentrant model
 12173 ;;
 12174                           
 12175                           	psect	text41
 12176  002DD6                     __ptext41:
 12177                           	opt stack 0
 12178  002DD6                     ___ftadd:
 12179                           	opt stack 20
 12180                           
 12181                           ;incstack = 0
 12182  002DD6  C0BC  F0C0         	movff	___ftadd@f1+2,??___ftadd
 12183  002DDA  0100               	movlb	0	; () banked
 12184  002DDC  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 12185  002DDE  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 12186  002DE0  0100               	movlb	0	; () banked
 12187  002DE2  35BB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 12188  002DE4  0100               	movlb	0	; () banked
 12189  002DE6  37C0               	rlcf	??___ftadd& (0+255),f,b
 12190  002DE8  E301               	bnc	u4381
 12191  002DEA  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 12192  002DEC                     u4381:
 12193  002DEC  0100               	movlb	0	; () banked
 12194  002DEE  51C0               	movf	??___ftadd& (0+255),w,b
 12195  002DF0  0100               	movlb	0	; () banked
 12196  002DF2  6FC5               	movwf	___ftadd@exp1& (0+255),b
 12197  002DF4  C0BF  F0C0         	movff	___ftadd@f2+2,??___ftadd
 12198  002DF8  0100               	movlb	0	; () banked
 12199  002DFA  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 12200  002DFC  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 12201  002DFE  0100               	movlb	0	; () banked
 12202  002E00  35BE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 12203  002E02  0100               	movlb	0	; () banked
 12204  002E04  37C0               	rlcf	??___ftadd& (0+255),f,b
 12205  002E06  E301               	bnc	u4391
 12206  002E08  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 12207  002E0A                     u4391:
 12208  002E0A  0100               	movlb	0	; () banked
 12209  002E0C  51C0               	movf	??___ftadd& (0+255),w,b
 12210  002E0E  0100               	movlb	0	; () banked
 12211  002E10  6FC4               	movwf	___ftadd@exp2& (0+255),b
 12212                           
 12213                           ; BSR set to: 0
 12214  002E12  0100               	movlb	0	; () banked
 12215  002E14  51C5               	movf	___ftadd@exp1& (0+255),w,b
 12216  002E16  0100               	movlb	0	; () banked
 12217  002E18  B4D8               	btfsc	status,2,c
 12218  002E1A  D011               	goto	l1088
 12219                           
 12220                           ; BSR set to: 0
 12221  002E1C  0100               	movlb	0	; () banked
 12222  002E1E  51C4               	movf	___ftadd@exp2& (0+255),w,b
 12223  002E20  0100               	movlb	0	; () banked
 12224  002E22  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 12225  002E24  B0D8               	btfsc	status,0,c
 12226  002E26  D012               	goto	l4634
 12227                           
 12228                           ; BSR set to: 0
 12229  002E28  0100               	movlb	0	; () banked
 12230  002E2A  51C5               	movf	___ftadd@exp1& (0+255),w,b
 12231  002E2C  0800               	sublw	0
 12232  002E2E  0100               	movlb	0	; () banked
 12233  002E30  25C4               	addwf	___ftadd@exp2& (0+255),w,b
 12234  002E32  0100               	movlb	0	; () banked
 12235  002E34  6FC0               	movwf	??___ftadd& (0+255),b
 12236  002E36  0E18               	movlw	24
 12237  002E38  0100               	movlb	0	; () banked
 12238  002E3A  65C0               	cpfsgt	??___ftadd& (0+255),b
 12239  002E3C  D007               	goto	l4634
 12240  002E3E                     l1088:
 12241                           
 12242                           ; BSR set to: 0
 12243  002E3E  C0BD  F0BA         	movff	___ftadd@f2,?___ftadd
 12244  002E42  C0BE  F0BB         	movff	___ftadd@f2+1,?___ftadd+1
 12245  002E46  C0BF  F0BC         	movff	___ftadd@f2+2,?___ftadd+2
 12246  002E4A  0012               	return	
 12247  002E4C                     l4634:
 12248                           
 12249                           ; BSR set to: 0
 12250  002E4C  0100               	movlb	0	; () banked
 12251  002E4E  51C4               	movf	___ftadd@exp2& (0+255),w,b
 12252  002E50  0100               	movlb	0	; () banked
 12253  002E52  B4D8               	btfsc	status,2,c
 12254  002E54  D011               	goto	l1092
 12255                           
 12256                           ; BSR set to: 0
 12257  002E56  0100               	movlb	0	; () banked
 12258  002E58  51C5               	movf	___ftadd@exp1& (0+255),w,b
 12259  002E5A  0100               	movlb	0	; () banked
 12260  002E5C  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 12261  002E5E  B0D8               	btfsc	status,0,c
 12262  002E60  D012               	goto	l4640
 12263                           
 12264                           ; BSR set to: 0
 12265  002E62  0100               	movlb	0	; () banked
 12266  002E64  51C4               	movf	___ftadd@exp2& (0+255),w,b
 12267  002E66  0800               	sublw	0
 12268  002E68  0100               	movlb	0	; () banked
 12269  002E6A  25C5               	addwf	___ftadd@exp1& (0+255),w,b
 12270  002E6C  0100               	movlb	0	; () banked
 12271  002E6E  6FC0               	movwf	??___ftadd& (0+255),b
 12272  002E70  0E18               	movlw	24
 12273  002E72  0100               	movlb	0	; () banked
 12274  002E74  65C0               	cpfsgt	??___ftadd& (0+255),b
 12275  002E76  D007               	goto	l4640
 12276  002E78                     l1092:
 12277                           
 12278                           ; BSR set to: 0
 12279  002E78  C0BA  F0BA         	movff	___ftadd@f1,?___ftadd
 12280  002E7C  C0BB  F0BB         	movff	___ftadd@f1+1,?___ftadd+1
 12281  002E80  C0BC  F0BC         	movff	___ftadd@f1+2,?___ftadd+2
 12282  002E84  0012               	return	
 12283  002E86                     l4640:
 12284                           
 12285                           ; BSR set to: 0
 12286  002E86  0E06               	movlw	6
 12287  002E88  0100               	movlb	0	; () banked
 12288  002E8A  6FC3               	movwf	___ftadd@sign& (0+255),b
 12289                           
 12290                           ; BSR set to: 0
 12291  002E8C  0100               	movlb	0	; () banked
 12292  002E8E  AFBC               	btfss	(___ftadd@f1+2)& (0+255),7,b
 12293  002E90  D002               	goto	l4646
 12294                           
 12295                           ; BSR set to: 0
 12296  002E92  0100               	movlb	0	; () banked
 12297  002E94  8FC3               	bsf	___ftadd@sign& (0+255),7,b
 12298  002E96                     l4646:
 12299                           
 12300                           ; BSR set to: 0
 12301  002E96  0100               	movlb	0	; () banked
 12302  002E98  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12303  002E9A  D002               	goto	l1094
 12304                           
 12305                           ; BSR set to: 0
 12306  002E9C  0100               	movlb	0	; () banked
 12307  002E9E  8DC3               	bsf	___ftadd@sign& (0+255),6,b
 12308  002EA0                     l1094:
 12309                           
 12310                           ; BSR set to: 0
 12311  002EA0  0100               	movlb	0	; () banked
 12312  002EA2  8FBB               	bsf	(___ftadd@f1+1)& (0+255),7,b
 12313                           
 12314                           ; BSR set to: 0
 12315  002EA4  0EFF               	movlw	255
 12316  002EA6  0100               	movlb	0	; () banked
 12317  002EA8  17BA               	andwf	___ftadd@f1& (0+255),f,b
 12318  002EAA  0EFF               	movlw	255
 12319  002EAC  0100               	movlb	0	; () banked
 12320  002EAE  17BB               	andwf	(___ftadd@f1+1)& (0+255),f,b
 12321  002EB0  0E00               	movlw	0
 12322  002EB2  0100               	movlb	0	; () banked
 12323  002EB4  17BC               	andwf	(___ftadd@f1+2)& (0+255),f,b
 12324  002EB6  0100               	movlb	0	; () banked
 12325  002EB8  8FBE               	bsf	(___ftadd@f2+1)& (0+255),7,b
 12326                           
 12327                           ; BSR set to: 0
 12328  002EBA  0EFF               	movlw	255
 12329  002EBC  0100               	movlb	0	; () banked
 12330  002EBE  17BD               	andwf	___ftadd@f2& (0+255),f,b
 12331  002EC0  0EFF               	movlw	255
 12332  002EC2  0100               	movlb	0	; () banked
 12333  002EC4  17BE               	andwf	(___ftadd@f2+1)& (0+255),f,b
 12334  002EC6  0E00               	movlw	0
 12335  002EC8  0100               	movlb	0	; () banked
 12336  002ECA  17BF               	andwf	(___ftadd@f2+2)& (0+255),f,b
 12337                           
 12338                           ; BSR set to: 0
 12339  002ECC  0100               	movlb	0	; () banked
 12340  002ECE  51C4               	movf	___ftadd@exp2& (0+255),w,b
 12341  002ED0  0100               	movlb	0	; () banked
 12342  002ED2  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 12343  002ED4  B0D8               	btfsc	status,0,c
 12344  002ED6  D025               	goto	l4666
 12345  002ED8                     l4656:
 12346                           
 12347                           ; BSR set to: 0
 12348  002ED8  0100               	movlb	0	; () banked
 12349  002EDA  90D8               	bcf	status,0,c
 12350  002EDC  37BD               	rlcf	___ftadd@f2& (0+255),f,b
 12351  002EDE  37BE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 12352  002EE0  37BF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 12353  002EE2  0100               	movlb	0	; () banked
 12354  002EE4  07C4               	decf	___ftadd@exp2& (0+255),f,b
 12355                           
 12356                           ; BSR set to: 0
 12357  002EE6  0100               	movlb	0	; () banked
 12358  002EE8  51C5               	movf	___ftadd@exp1& (0+255),w,b
 12359  002EEA  0100               	movlb	0	; () banked
 12360  002EEC  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 12361  002EEE  B4D8               	btfsc	status,2,c
 12362  002EF0  D011               	goto	l4664
 12363                           
 12364                           ; BSR set to: 0
 12365  002EF2  0100               	movlb	0	; () banked
 12366  002EF4  07C3               	decf	___ftadd@sign& (0+255),f,b
 12367  002EF6  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 12368  002EFA  0E07               	movlw	7
 12369  002EFC  0100               	movlb	0	; () banked
 12370  002EFE  17C0               	andwf	??___ftadd& (0+255),f,b
 12371  002F00  B4D8               	btfsc	status,2,c
 12372  002F02  D008               	goto	l4664
 12373  002F04  D7E9               	goto	l4656
 12374  002F06                     l4662:
 12375                           
 12376                           ; BSR set to: 0
 12377  002F06  0100               	movlb	0	; () banked
 12378  002F08  90D8               	bcf	status,0,c
 12379  002F0A  33BC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 12380  002F0C  33BB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 12381  002F0E  33BA               	rrcf	___ftadd@f1& (0+255),f,b
 12382  002F10  0100               	movlb	0	; () banked
 12383  002F12  2BC5               	incf	___ftadd@exp1& (0+255),f,b
 12384  002F14                     l4664:
 12385                           
 12386                           ; BSR set to: 0
 12387  002F14  0100               	movlb	0	; () banked
 12388  002F16  51C4               	movf	___ftadd@exp2& (0+255),w,b
 12389  002F18  0100               	movlb	0	; () banked
 12390  002F1A  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 12391  002F1C  B4D8               	btfsc	status,2,c
 12392  002F1E  D02B               	goto	l1103
 12393  002F20  D7F2               	goto	l4662
 12394  002F22                     l4666:
 12395                           
 12396                           ; BSR set to: 0
 12397  002F22  0100               	movlb	0	; () banked
 12398  002F24  51C5               	movf	___ftadd@exp1& (0+255),w,b
 12399  002F26  0100               	movlb	0	; () banked
 12400  002F28  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 12401  002F2A  B0D8               	btfsc	status,0,c
 12402  002F2C  D024               	goto	l1103
 12403  002F2E                     l4668:
 12404                           
 12405                           ; BSR set to: 0
 12406  002F2E  0100               	movlb	0	; () banked
 12407  002F30  90D8               	bcf	status,0,c
 12408  002F32  37BA               	rlcf	___ftadd@f1& (0+255),f,b
 12409  002F34  37BB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 12410  002F36  37BC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 12411  002F38  0100               	movlb	0	; () banked
 12412  002F3A  07C5               	decf	___ftadd@exp1& (0+255),f,b
 12413                           
 12414                           ; BSR set to: 0
 12415  002F3C  0100               	movlb	0	; () banked
 12416  002F3E  51C5               	movf	___ftadd@exp1& (0+255),w,b
 12417  002F40  0100               	movlb	0	; () banked
 12418  002F42  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 12419  002F44  B4D8               	btfsc	status,2,c
 12420  002F46  D011               	goto	l4676
 12421                           
 12422                           ; BSR set to: 0
 12423  002F48  0100               	movlb	0	; () banked
 12424  002F4A  07C3               	decf	___ftadd@sign& (0+255),f,b
 12425  002F4C  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 12426  002F50  0E07               	movlw	7
 12427  002F52  0100               	movlb	0	; () banked
 12428  002F54  17C0               	andwf	??___ftadd& (0+255),f,b
 12429  002F56  B4D8               	btfsc	status,2,c
 12430  002F58  D008               	goto	l4676
 12431  002F5A  D7E9               	goto	l4668
 12432  002F5C                     l4674:
 12433                           
 12434                           ; BSR set to: 0
 12435  002F5C  0100               	movlb	0	; () banked
 12436  002F5E  90D8               	bcf	status,0,c
 12437  002F60  33BF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 12438  002F62  33BE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 12439  002F64  33BD               	rrcf	___ftadd@f2& (0+255),f,b
 12440  002F66  0100               	movlb	0	; () banked
 12441  002F68  2BC4               	incf	___ftadd@exp2& (0+255),f,b
 12442  002F6A                     l4676:
 12443                           
 12444                           ; BSR set to: 0
 12445  002F6A  0100               	movlb	0	; () banked
 12446  002F6C  51C4               	movf	___ftadd@exp2& (0+255),w,b
 12447  002F6E  0100               	movlb	0	; () banked
 12448  002F70  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 12449  002F72  A4D8               	btfss	status,2,c
 12450  002F74  D7F3               	goto	l4674
 12451  002F76                     l1103:
 12452                           
 12453                           ; BSR set to: 0
 12454  002F76  0100               	movlb	0	; () banked
 12455  002F78  AFC3               	btfss	___ftadd@sign& (0+255),7,b
 12456  002F7A  D012               	goto	l1112
 12457                           
 12458                           ; BSR set to: 0
 12459  002F7C  0EFF               	movlw	255
 12460  002F7E  0100               	movlb	0	; () banked
 12461  002F80  1BBA               	xorwf	___ftadd@f1& (0+255),f,b
 12462  002F82  0EFF               	movlw	255
 12463  002F84  0100               	movlb	0	; () banked
 12464  002F86  1BBB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 12465  002F88  0EFF               	movlw	255
 12466  002F8A  0100               	movlb	0	; () banked
 12467  002F8C  1BBC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 12468  002F8E  0E01               	movlw	1
 12469  002F90  0100               	movlb	0	; () banked
 12470  002F92  27BA               	addwf	___ftadd@f1& (0+255),f,b
 12471  002F94  0E00               	movlw	0
 12472  002F96  0100               	movlb	0	; () banked
 12473  002F98  23BB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 12474  002F9A  0E00               	movlw	0
 12475  002F9C  0100               	movlb	0	; () banked
 12476  002F9E  23BC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 12477  002FA0                     l1112:
 12478                           
 12479                           ; BSR set to: 0
 12480  002FA0  0100               	movlb	0	; () banked
 12481  002FA2  ADC3               	btfss	___ftadd@sign& (0+255),6,b
 12482  002FA4  D012               	goto	l4682
 12483                           
 12484                           ; BSR set to: 0
 12485  002FA6  0EFF               	movlw	255
 12486  002FA8  0100               	movlb	0	; () banked
 12487  002FAA  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 12488  002FAC  0EFF               	movlw	255
 12489  002FAE  0100               	movlb	0	; () banked
 12490  002FB0  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12491  002FB2  0EFF               	movlw	255
 12492  002FB4  0100               	movlb	0	; () banked
 12493  002FB6  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12494  002FB8  0E01               	movlw	1
 12495  002FBA  0100               	movlb	0	; () banked
 12496  002FBC  27BD               	addwf	___ftadd@f2& (0+255),f,b
 12497  002FBE  0E00               	movlw	0
 12498  002FC0  0100               	movlb	0	; () banked
 12499  002FC2  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12500  002FC4  0E00               	movlw	0
 12501  002FC6  0100               	movlb	0	; () banked
 12502  002FC8  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12503  002FCA                     l4682:
 12504                           
 12505                           ; BSR set to: 0
 12506  002FCA  0E00               	movlw	0
 12507  002FCC  0100               	movlb	0	; () banked
 12508  002FCE  6FC3               	movwf	___ftadd@sign& (0+255),b
 12509                           
 12510                           ; BSR set to: 0
 12511  002FD0  0100               	movlb	0	; () banked
 12512  002FD2  51BA               	movf	___ftadd@f1& (0+255),w,b
 12513  002FD4  0100               	movlb	0	; () banked
 12514  002FD6  27BD               	addwf	___ftadd@f2& (0+255),f,b
 12515  002FD8  0100               	movlb	0	; () banked
 12516  002FDA  51BB               	movf	(___ftadd@f1+1)& (0+255),w,b
 12517  002FDC  0100               	movlb	0	; () banked
 12518  002FDE  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12519  002FE0  0100               	movlb	0	; () banked
 12520  002FE2  51BC               	movf	(___ftadd@f1+2)& (0+255),w,b
 12521  002FE4  0100               	movlb	0	; () banked
 12522  002FE6  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12523                           
 12524                           ; BSR set to: 0
 12525  002FE8  0100               	movlb	0	; () banked
 12526  002FEA  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12527  002FEC  D015               	goto	l4692
 12528                           
 12529                           ; BSR set to: 0
 12530  002FEE  0EFF               	movlw	255
 12531  002FF0  0100               	movlb	0	; () banked
 12532  002FF2  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 12533  002FF4  0EFF               	movlw	255
 12534  002FF6  0100               	movlb	0	; () banked
 12535  002FF8  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12536  002FFA  0EFF               	movlw	255
 12537  002FFC  0100               	movlb	0	; () banked
 12538  002FFE  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12539  003000  0E01               	movlw	1
 12540  003002  0100               	movlb	0	; () banked
 12541  003004  27BD               	addwf	___ftadd@f2& (0+255),f,b
 12542  003006  0E00               	movlw	0
 12543  003008  0100               	movlb	0	; () banked
 12544  00300A  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12545  00300C  0E00               	movlw	0
 12546  00300E  0100               	movlb	0	; () banked
 12547  003010  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12548                           
 12549                           ; BSR set to: 0
 12550  003012  0E01               	movlw	1
 12551  003014  0100               	movlb	0	; () banked
 12552  003016  6FC3               	movwf	___ftadd@sign& (0+255),b
 12553  003018                     l4692:
 12554                           
 12555                           ; BSR set to: 0
 12556  003018  C0BD  F080         	movff	___ftadd@f2,___ftpack@arg
 12557  00301C  C0BE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 12558  003020  C0BF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 12559  003024  C0C5  F083         	movff	___ftadd@exp1,___ftpack@exp
 12560  003028  C0C3  F084         	movff	___ftadd@sign,___ftpack@sign
 12561  00302C  EC44  F021         	call	___ftpack	;wreg free
 12562  003030  C080  F0BA         	movff	?___ftpack,?___ftadd
 12563  003034  C081  F0BB         	movff	?___ftpack+1,?___ftadd+1
 12564  003038  C082  F0BC         	movff	?___ftpack+2,?___ftadd+2
 12565  00303C  0012               	return	
 12566  00303E                     __end_of___ftadd:
 12567                           	opt stack 0
 12568                           tblptru	equ	0xFF8
 12569                           tblptrh	equ	0xFF7
 12570                           tblptrl	equ	0xFF6
 12571                           tablat	equ	0xFF5
 12572                           prodh	equ	0xFF4
 12573                           prodl	equ	0xFF3
 12574                           intcon	equ	0xFF2
 12575                           postinc0	equ	0xFEE
 12576                           wreg	equ	0xFE8
 12577                           postdec1	equ	0xFE5
 12578                           fsr1l	equ	0xFE1
 12579                           indf2	equ	0xFDF
 12580                           postinc2	equ	0xFDE
 12581                           postdec2	equ	0xFDD
 12582                           fsr2h	equ	0xFDA
 12583                           fsr2l	equ	0xFD9
 12584                           status	equ	0xFD8
 12585                           
 12586 ;; *************** function ___awtoft *****************
 12587 ;; Defined at:
 12588 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12589 ;; Parameters:    Size  Location     Type
 12590 ;;  c               2    8[BANK0 ] int 
 12591 ;; Auto vars:     Size  Location     Type
 12592 ;;  sign            1   11[BANK0 ] unsigned char 
 12593 ;; Return value:  Size  Location     Type
 12594 ;;                  3    8[BANK0 ] float 
 12595 ;; Registers used:
 12596 ;;		wreg, status,2, status,0, cstack
 12597 ;; Tracked objects:
 12598 ;;		On entry : 0/0
 12599 ;;		On exit  : 0/0
 12600 ;;		Unchanged: 0/0
 12601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12602 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12605 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12606 ;;Total ram usage:        4 bytes
 12607 ;; Hardware stack levels used:    1
 12608 ;; Hardware stack levels required when called:    7
 12609 ;; This function calls:
 12610 ;;		___ftpack
 12611 ;; This function is called by:
 12612 ;;		_sortBattery
 12613 ;;		_angleToPulse
 12614 ;;		_testFrequency
 12615 ;; This function uses a non-reentrant model
 12616 ;;
 12617                           
 12618                           	psect	text42
 12619  005658                     __ptext42:
 12620                           	opt stack 0
 12621  005658                     ___awtoft:
 12622                           	opt stack 20
 12623                           
 12624                           ;incstack = 0
 12625  005658  0E00               	movlw	0
 12626  00565A  0100               	movlb	0	; () banked
 12627  00565C  6F8B               	movwf	___awtoft@sign& (0+255),b
 12628                           
 12629                           ; BSR set to: 0
 12630  00565E  0100               	movlb	0	; () banked
 12631  005660  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
 12632  005662  D008               	goto	l5116
 12633                           
 12634                           ; BSR set to: 0
 12635  005664  0100               	movlb	0	; () banked
 12636  005666  6D88               	negf	___awtoft@c& (0+255),b
 12637  005668  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
 12638  00566A  B0D8               	btfsc	status,0,c
 12639  00566C  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
 12640                           
 12641                           ; BSR set to: 0
 12642  00566E  0E01               	movlw	1
 12643  005670  0100               	movlb	0	; () banked
 12644  005672  6F8B               	movwf	___awtoft@sign& (0+255),b
 12645  005674                     l5116:
 12646                           
 12647                           ; BSR set to: 0
 12648  005674  C088  F080         	movff	___awtoft@c,___ftpack@arg
 12649  005678  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
 12650  00567C  0100               	movlb	0	; () banked
 12651  00567E  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
 12652  005680  0E8E               	movlw	142
 12653  005682  0100               	movlb	0	; () banked
 12654  005684  6F83               	movwf	___ftpack@exp& (0+255),b
 12655  005686  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
 12656  00568A  EC44  F021         	call	___ftpack	;wreg free
 12657  00568E  C080  F088         	movff	?___ftpack,?___awtoft
 12658  005692  C081  F089         	movff	?___ftpack+1,?___awtoft+1
 12659  005696  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
 12660  00569A  0012               	return	
 12661  00569C                     __end_of___awtoft:
 12662                           	opt stack 0
 12663                           tblptru	equ	0xFF8
 12664                           tblptrh	equ	0xFF7
 12665                           tblptrl	equ	0xFF6
 12666                           tablat	equ	0xFF5
 12667                           prodh	equ	0xFF4
 12668                           prodl	equ	0xFF3
 12669                           intcon	equ	0xFF2
 12670                           postinc0	equ	0xFEE
 12671                           wreg	equ	0xFE8
 12672                           postdec1	equ	0xFE5
 12673                           fsr1l	equ	0xFE1
 12674                           indf2	equ	0xFDF
 12675                           postinc2	equ	0xFDE
 12676                           postdec2	equ	0xFDD
 12677                           fsr2h	equ	0xFDA
 12678                           fsr2l	equ	0xFD9
 12679                           status	equ	0xFD8
 12680                           
 12681 ;; *************** function ___altoft *****************
 12682 ;; Defined at:
 12683 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 12684 ;; Parameters:    Size  Location     Type
 12685 ;;  c               4    8[BANK0 ] long 
 12686 ;; Auto vars:     Size  Location     Type
 12687 ;;  sign            1   17[BANK0 ] unsigned char 
 12688 ;;  exp             1   16[BANK0 ] unsigned char 
 12689 ;; Return value:  Size  Location     Type
 12690 ;;                  3    8[BANK0 ] float 
 12691 ;; Registers used:
 12692 ;;		wreg, status,2, status,0, cstack
 12693 ;; Tracked objects:
 12694 ;;		On entry : 0/0
 12695 ;;		On exit  : 0/0
 12696 ;;		Unchanged: 0/0
 12697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12698 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12699 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12700 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12701 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12702 ;;Total ram usage:       10 bytes
 12703 ;; Hardware stack levels used:    1
 12704 ;; Hardware stack levels required when called:    7
 12705 ;; This function calls:
 12706 ;;		___ftpack
 12707 ;; This function is called by:
 12708 ;;		_sortBattery
 12709 ;;		_angleToPulse
 12710 ;; This function uses a non-reentrant model
 12711 ;;
 12712                           
 12713                           	psect	text43
 12714  004EAA                     __ptext43:
 12715                           	opt stack 0
 12716  004EAA                     ___altoft:
 12717                           	opt stack 20
 12718                           
 12719                           ;incstack = 0
 12720  004EAA  0E00               	movlw	0
 12721  004EAC  0100               	movlb	0	; () banked
 12722  004EAE  6F91               	movwf	___altoft@sign& (0+255),b
 12723  004EB0  0E8E               	movlw	142
 12724  004EB2  0100               	movlb	0	; () banked
 12725  004EB4  6F90               	movwf	___altoft@exp& (0+255),b
 12726                           
 12727                           ; BSR set to: 0
 12728  004EB6  0100               	movlb	0	; () banked
 12729  004EB8  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
 12730  004EBA  D015               	goto	l5048
 12731                           
 12732                           ; BSR set to: 0
 12733  004EBC  0100               	movlb	0	; () banked
 12734  004EBE  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
 12735  004EC0  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
 12736  004EC2  1F89               	comf	(___altoft@c+1)& (0+255),f,b
 12737  004EC4  6D88               	negf	___altoft@c& (0+255),b
 12738  004EC6  0E00               	movlw	0
 12739  004EC8  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
 12740  004ECA  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
 12741  004ECC  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
 12742                           
 12743                           ; BSR set to: 0
 12744  004ECE  0E01               	movlw	1
 12745  004ED0  0100               	movlb	0	; () banked
 12746  004ED2  6F91               	movwf	___altoft@sign& (0+255),b
 12747                           
 12748                           ; BSR set to: 0
 12749  004ED4  D008               	goto	l5048
 12750  004ED6                     l5046:
 12751                           
 12752                           ; BSR set to: 0
 12753  004ED6  0100               	movlb	0	; () banked
 12754  004ED8  90D8               	bcf	status,0,c
 12755  004EDA  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
 12756  004EDC  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
 12757  004EDE  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
 12758  004EE0  3388               	rrcf	___altoft@c& (0+255),f,b
 12759  004EE2  0100               	movlb	0	; () banked
 12760  004EE4  2B90               	incf	___altoft@exp& (0+255),f,b
 12761  004EE6                     l5048:
 12762                           
 12763                           ; BSR set to: 0
 12764  004EE6  0E00               	movlw	0
 12765  004EE8  0100               	movlb	0	; () banked
 12766  004EEA  1588               	andwf	___altoft@c& (0+255),w,b
 12767  004EEC  0100               	movlb	0	; () banked
 12768  004EEE  6F8C               	movwf	??___altoft& (0+255),b
 12769  004EF0  0E00               	movlw	0
 12770  004EF2  0100               	movlb	0	; () banked
 12771  004EF4  1589               	andwf	(___altoft@c+1)& (0+255),w,b
 12772  004EF6  0100               	movlb	0	; () banked
 12773  004EF8  6F8D               	movwf	(??___altoft+1)& (0+255),b
 12774  004EFA  0E00               	movlw	0
 12775  004EFC  0100               	movlb	0	; () banked
 12776  004EFE  158A               	andwf	(___altoft@c+2)& (0+255),w,b
 12777  004F00  0100               	movlb	0	; () banked
 12778  004F02  6F8E               	movwf	(??___altoft+2)& (0+255),b
 12779  004F04  0EFF               	movlw	255
 12780  004F06  0100               	movlb	0	; () banked
 12781  004F08  158B               	andwf	(___altoft@c+3)& (0+255),w,b
 12782  004F0A  0100               	movlb	0	; () banked
 12783  004F0C  6F8F               	movwf	(??___altoft+3)& (0+255),b
 12784  004F0E  0100               	movlb	0	; () banked
 12785  004F10  518C               	movf	??___altoft& (0+255),w,b
 12786  004F12  0100               	movlb	0	; () banked
 12787  004F14  118D               	iorwf	(??___altoft+1)& (0+255),w,b
 12788  004F16  0100               	movlb	0	; () banked
 12789  004F18  118E               	iorwf	(??___altoft+2)& (0+255),w,b
 12790  004F1A  0100               	movlb	0	; () banked
 12791  004F1C  118F               	iorwf	(??___altoft+3)& (0+255),w,b
 12792  004F1E  A4D8               	btfss	status,2,c
 12793  004F20  D7DA               	goto	l5046
 12794                           
 12795                           ; BSR set to: 0
 12796                           
 12797                           ; BSR set to: 0
 12798  004F22  C088  F080         	movff	___altoft@c,___ftpack@arg
 12799  004F26  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
 12800  004F2A  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
 12801  004F2E  C090  F083         	movff	___altoft@exp,___ftpack@exp
 12802  004F32  C091  F084         	movff	___altoft@sign,___ftpack@sign
 12803  004F36  EC44  F021         	call	___ftpack	;wreg free
 12804  004F3A  C080  F088         	movff	?___ftpack,?___altoft
 12805  004F3E  C081  F089         	movff	?___ftpack+1,?___altoft+1
 12806  004F42  C082  F08A         	movff	?___ftpack+2,?___altoft+2
 12807  004F46  0012               	return	
 12808  004F48                     __end_of___altoft:
 12809                           	opt stack 0
 12810                           tblptru	equ	0xFF8
 12811                           tblptrh	equ	0xFF7
 12812                           tblptrl	equ	0xFF6
 12813                           tablat	equ	0xFF5
 12814                           prodh	equ	0xFF4
 12815                           prodl	equ	0xFF3
 12816                           intcon	equ	0xFF2
 12817                           postinc0	equ	0xFEE
 12818                           wreg	equ	0xFE8
 12819                           postdec1	equ	0xFE5
 12820                           fsr1l	equ	0xFE1
 12821                           indf2	equ	0xFDF
 12822                           postinc2	equ	0xFDE
 12823                           postdec2	equ	0xFDD
 12824                           fsr2h	equ	0xFDA
 12825                           fsr2l	equ	0xFD9
 12826                           status	equ	0xFD8
 12827                           
 12828 ;; *************** function ___ftpack *****************
 12829 ;; Defined at:
 12830 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12831 ;; Parameters:    Size  Location     Type
 12832 ;;  arg             3    0[BANK0 ] unsigned um
 12833 ;;  exp             1    3[BANK0 ] unsigned char 
 12834 ;;  sign            1    4[BANK0 ] unsigned char 
 12835 ;; Auto vars:     Size  Location     Type
 12836 ;;		None
 12837 ;; Return value:  Size  Location     Type
 12838 ;;                  3    0[BANK0 ] float 
 12839 ;; Registers used:
 12840 ;;		wreg, status,2, status,0
 12841 ;; Tracked objects:
 12842 ;;		On entry : 0/0
 12843 ;;		On exit  : 0/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12846 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12848 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12849 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12850 ;;Total ram usage:        8 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; Hardware stack levels required when called:    6
 12853 ;; This function calls:
 12854 ;;		Nothing
 12855 ;; This function is called by:
 12856 ;;		___altoft
 12857 ;;		___awtoft
 12858 ;;		___ftadd
 12859 ;;		___ftdiv
 12860 ;;		___ftmul
 12861 ;;		___lltoft
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           	psect	text44
 12866  004288                     __ptext44:
 12867                           	opt stack 0
 12868  004288                     ___ftpack:
 12869                           	opt stack 20
 12870                           
 12871                           ;incstack = 0
 12872  004288  0100               	movlb	0	; () banked
 12873  00428A  5183               	movf	___ftpack@exp& (0+255),w,b
 12874  00428C  0100               	movlb	0	; () banked
 12875  00428E  B4D8               	btfsc	status,2,c
 12876  004290  D008               	goto	l4586
 12877                           
 12878                           ; BSR set to: 0
 12879  004292  0100               	movlb	0	; () banked
 12880  004294  5180               	movf	___ftpack@arg& (0+255),w,b
 12881  004296  0100               	movlb	0	; () banked
 12882  004298  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 12883  00429A  0100               	movlb	0	; () banked
 12884  00429C  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 12885  00429E  A4D8               	btfss	status,2,c
 12886  0042A0  D011               	goto	l4592
 12887  0042A2                     l4586:
 12888                           
 12889                           ; BSR set to: 0
 12890  0042A2  0E00               	movlw	0
 12891  0042A4  0100               	movlb	0	; () banked
 12892  0042A6  6F80               	movwf	?___ftpack& (0+255),b
 12893  0042A8  0E00               	movlw	0
 12894  0042AA  0100               	movlb	0	; () banked
 12895  0042AC  6F81               	movwf	(?___ftpack+1)& (0+255),b
 12896  0042AE  0E00               	movlw	0
 12897  0042B0  0100               	movlb	0	; () banked
 12898  0042B2  6F82               	movwf	(?___ftpack+2)& (0+255),b
 12899                           
 12900                           ; BSR set to: 0
 12901  0042B4  0012               	return	
 12902  0042B6                     l4590:
 12903                           
 12904                           ; BSR set to: 0
 12905  0042B6  0100               	movlb	0	; () banked
 12906  0042B8  2B83               	incf	___ftpack@exp& (0+255),f,b
 12907  0042BA  0100               	movlb	0	; () banked
 12908  0042BC  90D8               	bcf	status,0,c
 12909  0042BE  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 12910  0042C0  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 12911  0042C2  3380               	rrcf	___ftpack@arg& (0+255),f,b
 12912  0042C4                     l4592:
 12913                           
 12914                           ; BSR set to: 0
 12915  0042C4  0E00               	movlw	0
 12916  0042C6  0100               	movlb	0	; () banked
 12917  0042C8  1580               	andwf	___ftpack@arg& (0+255),w,b
 12918  0042CA  0100               	movlb	0	; () banked
 12919  0042CC  6F85               	movwf	??___ftpack& (0+255),b
 12920  0042CE  0E00               	movlw	0
 12921  0042D0  0100               	movlb	0	; () banked
 12922  0042D2  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 12923  0042D4  0100               	movlb	0	; () banked
 12924  0042D6  6F86               	movwf	(??___ftpack+1)& (0+255),b
 12925  0042D8  0EFE               	movlw	254
 12926  0042DA  0100               	movlb	0	; () banked
 12927  0042DC  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 12928  0042DE  0100               	movlb	0	; () banked
 12929  0042E0  6F87               	movwf	(??___ftpack+2)& (0+255),b
 12930  0042E2  0100               	movlb	0	; () banked
 12931  0042E4  5185               	movf	??___ftpack& (0+255),w,b
 12932  0042E6  0100               	movlb	0	; () banked
 12933  0042E8  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 12934  0042EA  0100               	movlb	0	; () banked
 12935  0042EC  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 12936  0042EE  B4D8               	btfsc	status,2,c
 12937  0042F0  D011               	goto	l4598
 12938  0042F2  D7E1               	goto	l4590
 12939  0042F4                     l4594:
 12940                           
 12941                           ; BSR set to: 0
 12942  0042F4  0100               	movlb	0	; () banked
 12943  0042F6  2B83               	incf	___ftpack@exp& (0+255),f,b
 12944                           
 12945                           ; BSR set to: 0
 12946  0042F8  0E01               	movlw	1
 12947  0042FA  0100               	movlb	0	; () banked
 12948  0042FC  2780               	addwf	___ftpack@arg& (0+255),f,b
 12949  0042FE  0E00               	movlw	0
 12950  004300  0100               	movlb	0	; () banked
 12951  004302  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 12952  004304  0E00               	movlw	0
 12953  004306  0100               	movlb	0	; () banked
 12954  004308  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 12955  00430A  0100               	movlb	0	; () banked
 12956  00430C  90D8               	bcf	status,0,c
 12957  00430E  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 12958  004310  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 12959  004312  3380               	rrcf	___ftpack@arg& (0+255),f,b
 12960  004314                     l4598:
 12961                           
 12962                           ; BSR set to: 0
 12963  004314  0E00               	movlw	0
 12964  004316  0100               	movlb	0	; () banked
 12965  004318  1580               	andwf	___ftpack@arg& (0+255),w,b
 12966  00431A  0100               	movlb	0	; () banked
 12967  00431C  6F85               	movwf	??___ftpack& (0+255),b
 12968  00431E  0E00               	movlw	0
 12969  004320  0100               	movlb	0	; () banked
 12970  004322  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 12971  004324  0100               	movlb	0	; () banked
 12972  004326  6F86               	movwf	(??___ftpack+1)& (0+255),b
 12973  004328  0EFF               	movlw	255
 12974  00432A  0100               	movlb	0	; () banked
 12975  00432C  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 12976  00432E  0100               	movlb	0	; () banked
 12977  004330  6F87               	movwf	(??___ftpack+2)& (0+255),b
 12978  004332  0100               	movlb	0	; () banked
 12979  004334  5185               	movf	??___ftpack& (0+255),w,b
 12980  004336  0100               	movlb	0	; () banked
 12981  004338  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 12982  00433A  0100               	movlb	0	; () banked
 12983  00433C  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 12984  00433E  B4D8               	btfsc	status,2,c
 12985  004340  D008               	goto	l4602
 12986  004342  D7D8               	goto	l4594
 12987  004344                     l4600:
 12988                           
 12989                           ; BSR set to: 0
 12990  004344  0100               	movlb	0	; () banked
 12991  004346  0783               	decf	___ftpack@exp& (0+255),f,b
 12992  004348  0100               	movlb	0	; () banked
 12993  00434A  90D8               	bcf	status,0,c
 12994  00434C  3780               	rlcf	___ftpack@arg& (0+255),f,b
 12995  00434E  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 12996  004350  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 12997  004352                     l4602:
 12998                           
 12999                           ; BSR set to: 0
 13000  004352  0100               	movlb	0	; () banked
 13001  004354  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 13002  004356  D004               	goto	l1065
 13003                           
 13004                           ; BSR set to: 0
 13005  004358  0E02               	movlw	2
 13006  00435A  0100               	movlb	0	; () banked
 13007  00435C  6183               	cpfslt	___ftpack@exp& (0+255),b
 13008  00435E  D7F2               	goto	l4600
 13009  004360                     l1065:
 13010                           
 13011                           ; BSR set to: 0
 13012  004360  0100               	movlb	0	; () banked
 13013  004362  B183               	btfsc	___ftpack@exp& (0+255),0,b
 13014  004364  D002               	goto	l4608
 13015                           
 13016                           ; BSR set to: 0
 13017  004366  0100               	movlb	0	; () banked
 13018  004368  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 13019  00436A                     l4608:
 13020                           
 13021                           ; BSR set to: 0
 13022  00436A  0100               	movlb	0	; () banked
 13023  00436C  90D8               	bcf	status,0,c
 13024  00436E  3383               	rrcf	___ftpack@exp& (0+255),f,b
 13025  004370  0100               	movlb	0	; () banked
 13026  004372  5183               	movf	___ftpack@exp& (0+255),w,b
 13027  004374  0100               	movlb	0	; () banked
 13028  004376  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 13029                           
 13030                           ; BSR set to: 0
 13031  004378  0100               	movlb	0	; () banked
 13032  00437A  5184               	movf	___ftpack@sign& (0+255),w,b
 13033  00437C  0100               	movlb	0	; () banked
 13034  00437E  B4D8               	btfsc	status,2,c
 13035  004380  D002               	goto	l4614
 13036                           
 13037                           ; BSR set to: 0
 13038  004382  0100               	movlb	0	; () banked
 13039  004384  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 13040  004386                     l4614:
 13041                           
 13042                           ; BSR set to: 0
 13043  004386  C080  F080         	movff	___ftpack@arg,?___ftpack
 13044  00438A  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 13045  00438E  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 13046  004392  0012               	return	
 13047  004394                     __end_of___ftpack:
 13048                           	opt stack 0
 13049                           tblptru	equ	0xFF8
 13050                           tblptrh	equ	0xFF7
 13051                           tblptrl	equ	0xFF6
 13052                           tablat	equ	0xFF5
 13053                           prodh	equ	0xFF4
 13054                           prodl	equ	0xFF3
 13055                           intcon	equ	0xFF2
 13056                           postinc0	equ	0xFEE
 13057                           wreg	equ	0xFE8
 13058                           postdec1	equ	0xFE5
 13059                           fsr1l	equ	0xFE1
 13060                           indf2	equ	0xFDF
 13061                           postinc2	equ	0xFDE
 13062                           postdec2	equ	0xFDD
 13063                           fsr2h	equ	0xFDA
 13064                           fsr2l	equ	0xFD9
 13065                           status	equ	0xFD8
 13066                           
 13067 ;; *************** function _initTimer *****************
 13068 ;; Defined at:
 13069 ;;		line 52 in file "timer.c"
 13070 ;; Parameters:    Size  Location     Type
 13071 ;;  timer           2    0[BANK0 ] int 
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;		None
 13074 ;; Return value:  Size  Location     Type
 13075 ;;                  1    wreg      void 
 13076 ;; Registers used:
 13077 ;;		wreg, status,2, status,0
 13078 ;; Tracked objects:
 13079 ;;		On entry : 0/0
 13080 ;;		On exit  : 0/0
 13081 ;;		Unchanged: 0/0
 13082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13083 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13085 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13086 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13087 ;;Total ram usage:        4 bytes
 13088 ;; Hardware stack levels used:    1
 13089 ;; Hardware stack levels required when called:    6
 13090 ;; This function calls:
 13091 ;;		Nothing
 13092 ;; This function is called by:
 13093 ;;		_main
 13094 ;;		_initServo
 13095 ;;		_testFrequency
 13096 ;; This function uses a non-reentrant model
 13097 ;;
 13098                           
 13099                           	psect	text45
 13100  0054E2                     __ptext45:
 13101                           	opt stack 0
 13102  0054E2                     _initTimer:
 13103                           	opt stack 24
 13104                           
 13105                           ;timer.c: 53: switch(timer){
 13106                           
 13107                           ; BSR set to: 0
 13108                           ;incstack = 0
 13109  0054E2  D00F               	goto	l5886
 13110  0054E4                     l5868:
 13111                           
 13112                           ;timer.c: 55: T0CON = 0;
 13113  0054E4  0E00               	movlw	0
 13114  0054E6  6ED5               	movwf	4053,c	;volatile
 13115                           
 13116                           ;timer.c: 56: T0CON |= 1<<3;
 13117  0054E8  86D5               	bsf	4053,3,c	;volatile
 13118                           
 13119                           ;timer.c: 58: TMR0IE = 1;
 13120  0054EA  8AF2               	bsf	intcon,5,c	;volatile
 13121                           
 13122                           ;timer.c: 59: break;
 13123  0054EC  D01E               	goto	l422
 13124  0054EE                     l5874:
 13125                           
 13126                           ;timer.c: 61: T1CON = 0;
 13127  0054EE  0E00               	movlw	0
 13128  0054F0  6ECD               	movwf	4045,c	;volatile
 13129                           
 13130                           ;timer.c: 63: T1CON |= 0b11<<4;
 13131  0054F2  0E30               	movlw	48
 13132  0054F4  12CD               	iorwf	4045,f,c	;volatile
 13133                           
 13134                           ;timer.c: 64: TMR1IE = 1;
 13135  0054F6  809D               	bsf	3997,0,c	;volatile
 13136                           
 13137                           ;timer.c: 65: break;
 13138  0054F8  D018               	goto	l422
 13139  0054FA                     l5880:
 13140                           
 13141                           ;timer.c: 67: T3CON = 0;
 13142  0054FA  0E00               	movlw	0
 13143  0054FC  6EB1               	movwf	4017,c	;volatile
 13144                           
 13145                           ;timer.c: 68: TMR3IE = 1;
 13146  0054FE  82A0               	bsf	4000,1,c	;volatile
 13147                           
 13148                           ;timer.c: 70: }
 13149                           
 13150                           ;timer.c: 69: break;
 13151  005500  D014               	goto	l422
 13152  005502                     l5886:
 13153  005502  C080  F082         	movff	initTimer@timer,??_initTimer
 13154  005506  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
 13155                           
 13156                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13157                           ; Switch size 1, requested type "space"
 13158                           ; Number of cases is 1, Range of values is 0 to 0
 13159                           ; switch strategies available:
 13160                           ; Name         Instructions Cycles
 13161                           ; simple_byte            4     3 (average)
 13162                           ;	Chosen strategy is simple_byte
 13163  00550A  0100               	movlb	0	; () banked
 13164  00550C  5183               	movf	(??_initTimer+1)& (0+255),w,b
 13165  00550E  0A00               	xorlw	0	; case 0
 13166  005510  A4D8               	btfss	status,2,c
 13167  005512  D00B               	goto	l422
 13168                           
 13169                           ; BSR set to: 0
 13170                           ; Switch size 1, requested type "space"
 13171                           ; Number of cases is 3, Range of values is 0 to 3
 13172                           ; switch strategies available:
 13173                           ; Name         Instructions Cycles
 13174                           ; simple_byte           10     6 (average)
 13175                           ;	Chosen strategy is simple_byte
 13176  005514  0100               	movlb	0	; () banked
 13177  005516  5182               	movf	??_initTimer& (0+255),w,b
 13178  005518  0A00               	xorlw	0	; case 0
 13179  00551A  B4D8               	btfsc	status,2,c
 13180  00551C  D7E3               	goto	l5868
 13181  00551E  0A01               	xorlw	1	; case 1
 13182  005520  B4D8               	btfsc	status,2,c
 13183  005522  D7E5               	goto	l5874
 13184  005524  0A02               	xorlw	2	; case 3
 13185  005526  B4D8               	btfsc	status,2,c
 13186  005528  D7E8               	goto	l5880
 13187  00552A                     l422:
 13188                           
 13189                           ;timer.c: 71: PEIE = 1;
 13190  00552A  8CF2               	bsf	intcon,6,c	;volatile
 13191                           
 13192                           ;timer.c: 72: (INTCONbits.GIE = 1);
 13193  00552C  8EF2               	bsf	intcon,7,c	;volatile
 13194  00552E  0012               	return		;funcret
 13195  005530                     __end_of_initTimer:
 13196                           	opt stack 0
 13197                           tblptru	equ	0xFF8
 13198                           tblptrh	equ	0xFF7
 13199                           tblptrl	equ	0xFF6
 13200                           tablat	equ	0xFF5
 13201                           prodh	equ	0xFF4
 13202                           prodl	equ	0xFF3
 13203                           intcon	equ	0xFF2
 13204                           postinc0	equ	0xFEE
 13205                           wreg	equ	0xFE8
 13206                           postdec1	equ	0xFE5
 13207                           fsr1l	equ	0xFE1
 13208                           indf2	equ	0xFDF
 13209                           postinc2	equ	0xFDE
 13210                           postdec2	equ	0xFDD
 13211                           fsr2h	equ	0xFDA
 13212                           fsr2l	equ	0xFD9
 13213                           status	equ	0xFD8
 13214                           
 13215 ;; *************** function _initLCD *****************
 13216 ;; Defined at:
 13217 ;;		line 15 in file "lcd.c"
 13218 ;; Parameters:    Size  Location     Type
 13219 ;;		None
 13220 ;; Auto vars:     Size  Location     Type
 13221 ;;		None
 13222 ;; Return value:  Size  Location     Type
 13223 ;;                  1    wreg      void 
 13224 ;; Registers used:
 13225 ;;		wreg, status,2, status,0, cstack
 13226 ;; Tracked objects:
 13227 ;;		On entry : 0/0
 13228 ;;		On exit  : 0/0
 13229 ;;		Unchanged: 0/0
 13230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13233 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13234 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13235 ;;Total ram usage:        1 bytes
 13236 ;; Hardware stack levels used:    1
 13237 ;; Hardware stack levels required when called:    8
 13238 ;; This function calls:
 13239 ;;		_lcdInst
 13240 ;; This function is called by:
 13241 ;;		_main
 13242 ;; This function uses a non-reentrant model
 13243 ;;
 13244                           
 13245                           	psect	text46
 13246  0055C8                     __ptext46:
 13247                           	opt stack 0
 13248  0055C8                     _initLCD:
 13249                           	opt stack 22
 13250                           
 13251                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 13252                           
 13253                           ;incstack = 0
 13254  0055C8  0E31               	movlw	49
 13255  0055CA  0100               	movlb	0	; () banked
 13256  0055CC  6F84               	movwf	??_initLCD& (0+255),b
 13257  0055CE  0EB2               	movlw	178
 13258  0055D0                     u8487:
 13259  0055D0  2EE8               	decfsz	wreg,f,c
 13260  0055D2  D7FE               	bra	u8487
 13261  0055D4  2F84               	decfsz	??_initLCD& (0+255),f,b
 13262  0055D6  D7FC               	bra	u8487
 13263  0055D8  F000               	nop	
 13264                           
 13265                           ;lcd.c: 18: lcdInst(0b00110011);
 13266  0055DA  0E33               	movlw	51
 13267  0055DC  EC43  F02C         	call	_lcdInst
 13268                           
 13269                           ;lcd.c: 19: lcdInst(0b00110010);
 13270  0055E0  0E32               	movlw	50
 13271  0055E2  EC43  F02C         	call	_lcdInst
 13272                           
 13273                           ;lcd.c: 20: lcdInst(0b00101000);
 13274  0055E6  0E28               	movlw	40
 13275  0055E8  EC43  F02C         	call	_lcdInst
 13276                           
 13277                           ;lcd.c: 21: lcdInst(0b00001111);
 13278  0055EC  0E0F               	movlw	15
 13279  0055EE  EC43  F02C         	call	_lcdInst
 13280                           
 13281                           ;lcd.c: 22: lcdInst(0b00000110);
 13282  0055F2  0E06               	movlw	6
 13283  0055F4  EC43  F02C         	call	_lcdInst
 13284                           
 13285                           ;lcd.c: 23: lcdInst(0b00000001);
 13286  0055F8  0E01               	movlw	1
 13287  0055FA  EC43  F02C         	call	_lcdInst
 13288                           
 13289                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 13290  0055FE  0E31               	movlw	49
 13291  005600  0100               	movlb	0	; () banked
 13292  005602  6F84               	movwf	??_initLCD& (0+255),b
 13293  005604  0EB2               	movlw	178
 13294  005606                     u8497:
 13295  005606  2EE8               	decfsz	wreg,f,c
 13296  005608  D7FE               	bra	u8497
 13297  00560A  2F84               	decfsz	??_initLCD& (0+255),f,b
 13298  00560C  D7FC               	bra	u8497
 13299  00560E  F000               	nop	
 13300  005610  0012               	return		;funcret
 13301  005612                     __end_of_initLCD:
 13302                           	opt stack 0
 13303                           tblptru	equ	0xFF8
 13304                           tblptrh	equ	0xFF7
 13305                           tblptrl	equ	0xFF6
 13306                           tablat	equ	0xFF5
 13307                           prodh	equ	0xFF4
 13308                           prodl	equ	0xFF3
 13309                           intcon	equ	0xFF2
 13310                           postinc0	equ	0xFEE
 13311                           wreg	equ	0xFE8
 13312                           postdec1	equ	0xFE5
 13313                           fsr1l	equ	0xFE1
 13314                           indf2	equ	0xFDF
 13315                           postinc2	equ	0xFDE
 13316                           postdec2	equ	0xFDD
 13317                           fsr2h	equ	0xFDA
 13318                           fsr2l	equ	0xFD9
 13319                           status	equ	0xFD8
 13320                           
 13321 ;; *************** function _lcdInst *****************
 13322 ;; Defined at:
 13323 ;;		line 27 in file "lcd.c"
 13324 ;; Parameters:    Size  Location     Type
 13325 ;;  data            1    wreg     unsigned char 
 13326 ;; Auto vars:     Size  Location     Type
 13327 ;;  data            1    3[BANK0 ] unsigned char 
 13328 ;; Return value:  Size  Location     Type
 13329 ;;                  1    wreg      void 
 13330 ;; Registers used:
 13331 ;;		wreg, status,2, status,0, cstack
 13332 ;; Tracked objects:
 13333 ;;		On entry : 0/0
 13334 ;;		On exit  : 0/0
 13335 ;;		Unchanged: 0/0
 13336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13341 ;;Total ram usage:        2 bytes
 13342 ;; Hardware stack levels used:    1
 13343 ;; Hardware stack levels required when called:    7
 13344 ;; This function calls:
 13345 ;;		_lcdNibble
 13346 ;; This function is called by:
 13347 ;;		_initLCD
 13348 ;;		_lcdHome
 13349 ;;		_lcdClear
 13350 ;;		_lcdNewline
 13351 ;; This function uses a non-reentrant model
 13352 ;;
 13353                           
 13354                           	psect	text47
 13355  005886                     __ptext47:
 13356                           	opt stack 0
 13357  005886                     _lcdInst:
 13358                           	opt stack 19
 13359                           
 13360                           ;incstack = 0
 13361                           ;lcdInst@data stored from wreg
 13362  005886  0100               	movlb	0	; () banked
 13363  005888  6F83               	movwf	lcdInst@data& (0+255),b
 13364                           
 13365                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 13366  00588A  948C               	bcf	3980,2,c	;volatile
 13367                           
 13368                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 13369  00588C  0E74               	movlw	116
 13370  00588E                     u8507:
 13371  00588E  2EE8               	decfsz	wreg,f,c
 13372  005890  D7FE               	bra	u8507
 13373  005892  D000               	nop2	
 13374                           
 13375                           ;lcd.c: 30: lcdNibble(data);
 13376  005894  0100               	movlb	0	; () banked
 13377  005896  5183               	movf	lcdInst@data& (0+255),w,b
 13378  005898  EC41  F029         	call	_lcdNibble
 13379                           
 13380                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 13381  00589C  0E04               	movlw	4
 13382  00589E  0100               	movlb	0	; () banked
 13383  0058A0  6F82               	movwf	??_lcdInst& (0+255),b
 13384  0058A2  0E3D               	movlw	61
 13385  0058A4                     u8517:
 13386  0058A4  2EE8               	decfsz	wreg,f,c
 13387  0058A6  D7FE               	bra	u8517
 13388  0058A8  2F82               	decfsz	??_lcdInst& (0+255),f,b
 13389  0058AA  D7FC               	bra	u8517
 13390  0058AC  D000               	nop2	
 13391  0058AE  0012               	return		;funcret
 13392  0058B0                     __end_of_lcdInst:
 13393                           	opt stack 0
 13394                           tblptru	equ	0xFF8
 13395                           tblptrh	equ	0xFF7
 13396                           tblptrl	equ	0xFF6
 13397                           tablat	equ	0xFF5
 13398                           prodh	equ	0xFF4
 13399                           prodl	equ	0xFF3
 13400                           intcon	equ	0xFF2
 13401                           postinc0	equ	0xFEE
 13402                           wreg	equ	0xFE8
 13403                           postdec1	equ	0xFE5
 13404                           fsr1l	equ	0xFE1
 13405                           indf2	equ	0xFDF
 13406                           postinc2	equ	0xFDE
 13407                           postdec2	equ	0xFDD
 13408                           fsr2h	equ	0xFDA
 13409                           fsr2l	equ	0xFD9
 13410                           status	equ	0xFD8
 13411                           
 13412 ;; *************** function _lcdNibble *****************
 13413 ;; Defined at:
 13414 ;;		line 46 in file "lcd.c"
 13415 ;; Parameters:    Size  Location     Type
 13416 ;;  data            1    wreg     unsigned char 
 13417 ;; Auto vars:     Size  Location     Type
 13418 ;;  data            1    1[BANK0 ] unsigned char 
 13419 ;;  temp            1    0[BANK0 ] unsigned char 
 13420 ;; Return value:  Size  Location     Type
 13421 ;;                  1    wreg      void 
 13422 ;; Registers used:
 13423 ;;		wreg, status,2, status,0
 13424 ;; Tracked objects:
 13425 ;;		On entry : 0/0
 13426 ;;		On exit  : 0/0
 13427 ;;		Unchanged: 0/0
 13428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13430 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13432 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13433 ;;Total ram usage:        2 bytes
 13434 ;; Hardware stack levels used:    1
 13435 ;; Hardware stack levels required when called:    6
 13436 ;; This function calls:
 13437 ;;		Nothing
 13438 ;; This function is called by:
 13439 ;;		_lcdInst
 13440 ;;		_putch
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           	psect	text48
 13445  005282                     __ptext48:
 13446                           	opt stack 0
 13447  005282                     _lcdNibble:
 13448                           	opt stack 21
 13449                           
 13450                           ;incstack = 0
 13451                           ;lcdNibble@data stored from wreg
 13452  005282  0100               	movlb	0	; () banked
 13453  005284  6F81               	movwf	lcdNibble@data& (0+255),b
 13454                           
 13455                           ;lcd.c: 48: char temp = data & 0xF0;
 13456  005286  0100               	movlb	0	; () banked
 13457  005288  5181               	movf	lcdNibble@data& (0+255),w,b
 13458  00528A  0BF0               	andlw	240
 13459  00528C  0100               	movlb	0	; () banked
 13460  00528E  6F80               	movwf	lcdNibble@temp& (0+255),b
 13461                           
 13462                           ;lcd.c: 49: LATD = LATD & 0x0F;
 13463  005290  508C               	movf	3980,w,c	;volatile
 13464  005292  0B0F               	andlw	15
 13465  005294  6E8C               	movwf	3980,c	;volatile
 13466                           
 13467                           ;lcd.c: 50: LATD = temp | LATD;
 13468  005296  0100               	movlb	0	; () banked
 13469  005298  5180               	movf	lcdNibble@temp& (0+255),w,b
 13470  00529A  108C               	iorwf	3980,w,c	;volatile
 13471  00529C  6E8C               	movwf	3980,c	;volatile
 13472                           
 13473                           ; BSR set to: 0
 13474                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 13475  00529E  968C               	bcf	3980,3,c	;volatile
 13476                           
 13477                           ; BSR set to: 0
 13478                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13479  0052A0  0ED6               	movlw	214
 13480  0052A2                     u8527:
 13481  0052A2  D000               	nop2	
 13482  0052A4  D000               	nop2	
 13483  0052A6  2EE8               	decfsz	wreg,f,c
 13484  0052A8  D7FC               	bra	u8527
 13485  0052AA  D000               	nop2	
 13486                           
 13487                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 13488  0052AC  868C               	bsf	3980,3,c	;volatile
 13489                           
 13490                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13491  0052AE  0ED6               	movlw	214
 13492  0052B0                     u8537:
 13493  0052B0  D000               	nop2	
 13494  0052B2  D000               	nop2	
 13495  0052B4  2EE8               	decfsz	wreg,f,c
 13496  0052B6  D7FC               	bra	u8537
 13497  0052B8  D000               	nop2	
 13498                           
 13499                           ;lcd.c: 58: data = data << 4;
 13500  0052BA  0100               	movlb	0	; () banked
 13501  0052BC  3981               	swapf	lcdNibble@data& (0+255),w,b
 13502  0052BE  0BF0               	andlw	240
 13503  0052C0  0100               	movlb	0	; () banked
 13504  0052C2  6F81               	movwf	lcdNibble@data& (0+255),b
 13505                           
 13506                           ;lcd.c: 60: temp = data & 0xF0;
 13507  0052C4  0100               	movlb	0	; () banked
 13508  0052C6  5181               	movf	lcdNibble@data& (0+255),w,b
 13509  0052C8  0BF0               	andlw	240
 13510  0052CA  0100               	movlb	0	; () banked
 13511  0052CC  6F80               	movwf	lcdNibble@temp& (0+255),b
 13512                           
 13513                           ;lcd.c: 61: LATD = LATD & 0x0F;
 13514  0052CE  508C               	movf	3980,w,c	;volatile
 13515  0052D0  0B0F               	andlw	15
 13516  0052D2  6E8C               	movwf	3980,c	;volatile
 13517                           
 13518                           ;lcd.c: 62: LATD = temp | LATD;
 13519  0052D4  0100               	movlb	0	; () banked
 13520  0052D6  5180               	movf	lcdNibble@temp& (0+255),w,b
 13521  0052D8  108C               	iorwf	3980,w,c	;volatile
 13522  0052DA  6E8C               	movwf	3980,c	;volatile
 13523                           
 13524                           ; BSR set to: 0
 13525                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 13526  0052DC  968C               	bcf	3980,3,c	;volatile
 13527                           
 13528                           ; BSR set to: 0
 13529                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13530  0052DE  0ED6               	movlw	214
 13531  0052E0                     u8547:
 13532  0052E0  D000               	nop2	
 13533  0052E2  D000               	nop2	
 13534  0052E4  2EE8               	decfsz	wreg,f,c
 13535  0052E6  D7FC               	bra	u8547
 13536  0052E8  D000               	nop2	
 13537                           
 13538                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 13539  0052EA  868C               	bsf	3980,3,c	;volatile
 13540                           
 13541                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13542  0052EC  0ED6               	movlw	214
 13543  0052EE                     u8557:
 13544  0052EE  D000               	nop2	
 13545  0052F0  D000               	nop2	
 13546  0052F2  2EE8               	decfsz	wreg,f,c
 13547  0052F4  D7FC               	bra	u8557
 13548  0052F6  D000               	nop2	
 13549  0052F8  0012               	return		;funcret
 13550  0052FA                     __end_of_lcdNibble:
 13551                           	opt stack 0
 13552                           tblptru	equ	0xFF8
 13553                           tblptrh	equ	0xFF7
 13554                           tblptrl	equ	0xFF6
 13555                           tablat	equ	0xFF5
 13556                           prodh	equ	0xFF4
 13557                           prodl	equ	0xFF3
 13558                           intcon	equ	0xFF2
 13559                           postinc0	equ	0xFEE
 13560                           wreg	equ	0xFE8
 13561                           postdec1	equ	0xFE5
 13562                           fsr1l	equ	0xFE1
 13563                           indf2	equ	0xFDF
 13564                           postinc2	equ	0xFDE
 13565                           postdec2	equ	0xFDD
 13566                           fsr2h	equ	0xFDA
 13567                           fsr2l	equ	0xFD9
 13568                           status	equ	0xFD8
 13569                           
 13570 ;; *************** function ___almod *****************
 13571 ;; Defined at:
 13572 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 13573 ;; Parameters:    Size  Location     Type
 13574 ;;  dividend        4   14[BANK0 ] long 
 13575 ;;  divisor         4   18[BANK0 ] long 
 13576 ;; Auto vars:     Size  Location     Type
 13577 ;;  sign            1   23[BANK0 ] unsigned char 
 13578 ;;  counter         1   22[BANK0 ] unsigned char 
 13579 ;; Return value:  Size  Location     Type
 13580 ;;                  4   14[BANK0 ] long 
 13581 ;; Registers used:
 13582 ;;		wreg, status,2, status,0
 13583 ;; Tracked objects:
 13584 ;;		On entry : 0/0
 13585 ;;		On exit  : 0/0
 13586 ;;		Unchanged: 0/0
 13587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13588 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13589 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13591 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13592 ;;Total ram usage:       10 bytes
 13593 ;; Hardware stack levels used:    1
 13594 ;; Hardware stack levels required when called:    6
 13595 ;; This function calls:
 13596 ;;		Nothing
 13597 ;; This function is called by:
 13598 ;;		_main
 13599 ;; This function uses a non-reentrant model
 13600 ;;
 13601                           
 13602                           	psect	text49
 13603  00488A                     __ptext49:
 13604                           	opt stack 0
 13605  00488A                     ___almod:
 13606                           	opt stack 24
 13607                           
 13608                           ;incstack = 0
 13609  00488A  0E00               	movlw	0
 13610  00488C  0100               	movlb	0	; () banked
 13611  00488E  6F97               	movwf	___almod@sign& (0+255),b
 13612                           
 13613                           ; BSR set to: 0
 13614  004890  0100               	movlb	0	; () banked
 13615  004892  AF91               	btfss	(___almod@dividend+3)& (0+255),7,b
 13616  004894  D00C               	goto	l6700
 13617                           
 13618                           ; BSR set to: 0
 13619  004896  0100               	movlb	0	; () banked
 13620  004898  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 13621  00489A  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 13622  00489C  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 13623  00489E  6D8E               	negf	___almod@dividend& (0+255),b
 13624  0048A0  0E00               	movlw	0
 13625  0048A2  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 13626  0048A4  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 13627  0048A6  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 13628                           
 13629                           ; BSR set to: 0
 13630  0048A8  0E01               	movlw	1
 13631  0048AA  0100               	movlb	0	; () banked
 13632  0048AC  6F97               	movwf	___almod@sign& (0+255),b
 13633  0048AE                     l6700:
 13634                           
 13635                           ; BSR set to: 0
 13636  0048AE  0100               	movlb	0	; () banked
 13637  0048B0  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 13638  0048B2  D009               	goto	l6704
 13639                           
 13640                           ; BSR set to: 0
 13641  0048B4  0100               	movlb	0	; () banked
 13642  0048B6  1F95               	comf	(___almod@divisor+3)& (0+255),f,b
 13643  0048B8  1F94               	comf	(___almod@divisor+2)& (0+255),f,b
 13644  0048BA  1F93               	comf	(___almod@divisor+1)& (0+255),f,b
 13645  0048BC  6D92               	negf	___almod@divisor& (0+255),b
 13646  0048BE  0E00               	movlw	0
 13647  0048C0  2393               	addwfc	(___almod@divisor+1)& (0+255),f,b
 13648  0048C2  2394               	addwfc	(___almod@divisor+2)& (0+255),f,b
 13649  0048C4  2395               	addwfc	(___almod@divisor+3)& (0+255),f,b
 13650  0048C6                     l6704:
 13651                           
 13652                           ; BSR set to: 0
 13653  0048C6  0100               	movlb	0	; () banked
 13654  0048C8  5192               	movf	___almod@divisor& (0+255),w,b
 13655  0048CA  0100               	movlb	0	; () banked
 13656  0048CC  1193               	iorwf	(___almod@divisor+1)& (0+255),w,b
 13657  0048CE  0100               	movlb	0	; () banked
 13658  0048D0  1194               	iorwf	(___almod@divisor+2)& (0+255),w,b
 13659  0048D2  0100               	movlb	0	; () banked
 13660  0048D4  1195               	iorwf	(___almod@divisor+3)& (0+255),w,b
 13661  0048D6  B4D8               	btfsc	status,2,c
 13662  0048D8  D03A               	goto	l6720
 13663                           
 13664                           ; BSR set to: 0
 13665  0048DA  0E01               	movlw	1
 13666  0048DC  0100               	movlb	0	; () banked
 13667  0048DE  6F96               	movwf	___almod@counter& (0+255),b
 13668  0048E0  D008               	goto	l6710
 13669  0048E2                     l6708:
 13670                           
 13671                           ; BSR set to: 0
 13672  0048E2  0100               	movlb	0	; () banked
 13673  0048E4  90D8               	bcf	status,0,c
 13674  0048E6  3792               	rlcf	___almod@divisor& (0+255),f,b
 13675  0048E8  3793               	rlcf	(___almod@divisor+1)& (0+255),f,b
 13676  0048EA  3794               	rlcf	(___almod@divisor+2)& (0+255),f,b
 13677  0048EC  3795               	rlcf	(___almod@divisor+3)& (0+255),f,b
 13678  0048EE  0100               	movlb	0	; () banked
 13679  0048F0  2B96               	incf	___almod@counter& (0+255),f,b
 13680  0048F2                     l6710:
 13681                           
 13682                           ; BSR set to: 0
 13683  0048F2  0100               	movlb	0	; () banked
 13684  0048F4  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 13685  0048F6  D7F5               	goto	l6708
 13686  0048F8                     l6712:
 13687                           
 13688                           ; BSR set to: 0
 13689  0048F8  0100               	movlb	0	; () banked
 13690  0048FA  5192               	movf	___almod@divisor& (0+255),w,b
 13691  0048FC  0100               	movlb	0	; () banked
 13692  0048FE  5D8E               	subwf	___almod@dividend& (0+255),w,b
 13693  004900  0100               	movlb	0	; () banked
 13694  004902  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 13695  004904  0100               	movlb	0	; () banked
 13696  004906  598F               	subwfb	(___almod@dividend+1)& (0+255),w,b
 13697  004908  0100               	movlb	0	; () banked
 13698  00490A  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 13699  00490C  0100               	movlb	0	; () banked
 13700  00490E  5990               	subwfb	(___almod@dividend+2)& (0+255),w,b
 13701  004910  0100               	movlb	0	; () banked
 13702  004912  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 13703  004914  0100               	movlb	0	; () banked
 13704  004916  5991               	subwfb	(___almod@dividend+3)& (0+255),w,b
 13705  004918  A0D8               	btfss	status,0,c
 13706  00491A  D010               	goto	l6716
 13707                           
 13708                           ; BSR set to: 0
 13709  00491C  0100               	movlb	0	; () banked
 13710  00491E  5192               	movf	___almod@divisor& (0+255),w,b
 13711  004920  0100               	movlb	0	; () banked
 13712  004922  5F8E               	subwf	___almod@dividend& (0+255),f,b
 13713  004924  0100               	movlb	0	; () banked
 13714  004926  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 13715  004928  0100               	movlb	0	; () banked
 13716  00492A  5B8F               	subwfb	(___almod@dividend+1)& (0+255),f,b
 13717  00492C  0100               	movlb	0	; () banked
 13718  00492E  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 13719  004930  0100               	movlb	0	; () banked
 13720  004932  5B90               	subwfb	(___almod@dividend+2)& (0+255),f,b
 13721  004934  0100               	movlb	0	; () banked
 13722  004936  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 13723  004938  0100               	movlb	0	; () banked
 13724  00493A  5B91               	subwfb	(___almod@dividend+3)& (0+255),f,b
 13725  00493C                     l6716:
 13726                           
 13727                           ; BSR set to: 0
 13728  00493C  0100               	movlb	0	; () banked
 13729  00493E  90D8               	bcf	status,0,c
 13730  004940  3395               	rrcf	(___almod@divisor+3)& (0+255),f,b
 13731  004942  3394               	rrcf	(___almod@divisor+2)& (0+255),f,b
 13732  004944  3393               	rrcf	(___almod@divisor+1)& (0+255),f,b
 13733  004946  3392               	rrcf	___almod@divisor& (0+255),f,b
 13734                           
 13735                           ; BSR set to: 0
 13736  004948  0100               	movlb	0	; () banked
 13737  00494A  2F96               	decfsz	___almod@counter& (0+255),f,b
 13738  00494C  D7D5               	goto	l6712
 13739  00494E                     l6720:
 13740                           
 13741                           ; BSR set to: 0
 13742  00494E  0100               	movlb	0	; () banked
 13743  004950  5197               	movf	___almod@sign& (0+255),w,b
 13744  004952  0100               	movlb	0	; () banked
 13745  004954  B4D8               	btfsc	status,2,c
 13746  004956  D009               	goto	l6724
 13747                           
 13748                           ; BSR set to: 0
 13749  004958  0100               	movlb	0	; () banked
 13750  00495A  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 13751  00495C  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 13752  00495E  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 13753  004960  6D8E               	negf	___almod@dividend& (0+255),b
 13754  004962  0E00               	movlw	0
 13755  004964  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 13756  004966  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 13757  004968  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 13758  00496A                     l6724:
 13759                           
 13760                           ; BSR set to: 0
 13761  00496A  C08E  F08E         	movff	___almod@dividend,?___almod
 13762  00496E  C08F  F08F         	movff	___almod@dividend+1,?___almod+1
 13763  004972  C090  F090         	movff	___almod@dividend+2,?___almod+2
 13764  004976  C091  F091         	movff	___almod@dividend+3,?___almod+3
 13765  00497A  0012               	return	
 13766  00497C                     __end_of___almod:
 13767                           	opt stack 0
 13768                           tblptru	equ	0xFF8
 13769                           tblptrh	equ	0xFF7
 13770                           tblptrl	equ	0xFF6
 13771                           tablat	equ	0xFF5
 13772                           prodh	equ	0xFF4
 13773                           prodl	equ	0xFF3
 13774                           intcon	equ	0xFF2
 13775                           postinc0	equ	0xFEE
 13776                           wreg	equ	0xFE8
 13777                           postdec1	equ	0xFE5
 13778                           fsr1l	equ	0xFE1
 13779                           indf2	equ	0xFDF
 13780                           postinc2	equ	0xFDE
 13781                           postdec2	equ	0xFDD
 13782                           fsr2h	equ	0xFDA
 13783                           fsr2l	equ	0xFD9
 13784                           status	equ	0xFD8
 13785                           
 13786 ;; *************** function ___aldiv *****************
 13787 ;; Defined at:
 13788 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 13789 ;; Parameters:    Size  Location     Type
 13790 ;;  dividend        4    0[BANK0 ] long 
 13791 ;;  divisor         4    4[BANK0 ] long 
 13792 ;; Auto vars:     Size  Location     Type
 13793 ;;  quotient        4   10[BANK0 ] long 
 13794 ;;  sign            1    9[BANK0 ] unsigned char 
 13795 ;;  counter         1    8[BANK0 ] unsigned char 
 13796 ;; Return value:  Size  Location     Type
 13797 ;;                  4    0[BANK0 ] long 
 13798 ;; Registers used:
 13799 ;;		wreg, status,2, status,0
 13800 ;; Tracked objects:
 13801 ;;		On entry : 0/0
 13802 ;;		On exit  : 0/0
 13803 ;;		Unchanged: 0/0
 13804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13805 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13806 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13808 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13809 ;;Total ram usage:       14 bytes
 13810 ;; Hardware stack levels used:    1
 13811 ;; Hardware stack levels required when called:    6
 13812 ;; This function calls:
 13813 ;;		Nothing
 13814 ;; This function is called by:
 13815 ;;		_main
 13816 ;; This function uses a non-reentrant model
 13817 ;;
 13818                           
 13819                           	psect	text50
 13820  00416E                     __ptext50:
 13821                           	opt stack 0
 13822  00416E                     ___aldiv:
 13823                           	opt stack 24
 13824                           
 13825                           ; BSR set to: 0
 13826                           ;incstack = 0
 13827  00416E  0E00               	movlw	0
 13828  004170  0100               	movlb	0	; () banked
 13829  004172  6F89               	movwf	___aldiv@sign& (0+255),b
 13830                           
 13831                           ; BSR set to: 0
 13832  004174  0100               	movlb	0	; () banked
 13833  004176  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 13834  004178  D00C               	goto	l6656
 13835                           
 13836                           ; BSR set to: 0
 13837  00417A  0100               	movlb	0	; () banked
 13838  00417C  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
 13839  00417E  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
 13840  004180  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
 13841  004182  6D84               	negf	___aldiv@divisor& (0+255),b
 13842  004184  0E00               	movlw	0
 13843  004186  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 13844  004188  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 13845  00418A  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 13846                           
 13847                           ; BSR set to: 0
 13848  00418C  0E01               	movlw	1
 13849  00418E  0100               	movlb	0	; () banked
 13850  004190  6F89               	movwf	___aldiv@sign& (0+255),b
 13851  004192                     l6656:
 13852                           
 13853                           ; BSR set to: 0
 13854  004192  0100               	movlb	0	; () banked
 13855  004194  AF83               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 13856  004196  D00C               	goto	l6662
 13857                           
 13858                           ; BSR set to: 0
 13859  004198  0100               	movlb	0	; () banked
 13860  00419A  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
 13861  00419C  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
 13862  00419E  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
 13863  0041A0  6D80               	negf	___aldiv@dividend& (0+255),b
 13864  0041A2  0E00               	movlw	0
 13865  0041A4  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 13866  0041A6  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 13867  0041A8  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 13868                           
 13869                           ; BSR set to: 0
 13870  0041AA  0E01               	movlw	1
 13871  0041AC  0100               	movlb	0	; () banked
 13872  0041AE  1B89               	xorwf	___aldiv@sign& (0+255),f,b
 13873  0041B0                     l6662:
 13874                           
 13875                           ; BSR set to: 0
 13876  0041B0  0E00               	movlw	0
 13877  0041B2  0100               	movlb	0	; () banked
 13878  0041B4  6F8A               	movwf	___aldiv@quotient& (0+255),b
 13879  0041B6  0E00               	movlw	0
 13880  0041B8  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
 13881  0041BA  0E00               	movlw	0
 13882  0041BC  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
 13883  0041BE  0E00               	movlw	0
 13884  0041C0  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
 13885                           
 13886                           ; BSR set to: 0
 13887  0041C2  0100               	movlb	0	; () banked
 13888  0041C4  5184               	movf	___aldiv@divisor& (0+255),w,b
 13889  0041C6  0100               	movlb	0	; () banked
 13890  0041C8  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 13891  0041CA  0100               	movlb	0	; () banked
 13892  0041CC  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 13893  0041CE  0100               	movlb	0	; () banked
 13894  0041D0  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 13895  0041D2  B4D8               	btfsc	status,2,c
 13896  0041D4  D042               	goto	l6684
 13897                           
 13898                           ; BSR set to: 0
 13899  0041D6  0E01               	movlw	1
 13900  0041D8  0100               	movlb	0	; () banked
 13901  0041DA  6F88               	movwf	___aldiv@counter& (0+255),b
 13902  0041DC  D008               	goto	l6670
 13903  0041DE                     l6668:
 13904                           
 13905                           ; BSR set to: 0
 13906  0041DE  0100               	movlb	0	; () banked
 13907  0041E0  90D8               	bcf	status,0,c
 13908  0041E2  3784               	rlcf	___aldiv@divisor& (0+255),f,b
 13909  0041E4  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 13910  0041E6  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 13911  0041E8  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 13912  0041EA  0100               	movlb	0	; () banked
 13913  0041EC  2B88               	incf	___aldiv@counter& (0+255),f,b
 13914  0041EE                     l6670:
 13915                           
 13916                           ; BSR set to: 0
 13917  0041EE  0100               	movlb	0	; () banked
 13918  0041F0  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 13919  0041F2  D7F5               	goto	l6668
 13920  0041F4                     l6672:
 13921                           
 13922                           ; BSR set to: 0
 13923  0041F4  0100               	movlb	0	; () banked
 13924  0041F6  90D8               	bcf	status,0,c
 13925  0041F8  378A               	rlcf	___aldiv@quotient& (0+255),f,b
 13926  0041FA  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 13927  0041FC  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 13928  0041FE  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 13929                           
 13930                           ; BSR set to: 0
 13931  004200  0100               	movlb	0	; () banked
 13932  004202  5184               	movf	___aldiv@divisor& (0+255),w,b
 13933  004204  0100               	movlb	0	; () banked
 13934  004206  5D80               	subwf	___aldiv@dividend& (0+255),w,b
 13935  004208  0100               	movlb	0	; () banked
 13936  00420A  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 13937  00420C  0100               	movlb	0	; () banked
 13938  00420E  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 13939  004210  0100               	movlb	0	; () banked
 13940  004212  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 13941  004214  0100               	movlb	0	; () banked
 13942  004216  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 13943  004218  0100               	movlb	0	; () banked
 13944  00421A  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 13945  00421C  0100               	movlb	0	; () banked
 13946  00421E  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 13947  004220  A0D8               	btfss	status,0,c
 13948  004222  D012               	goto	l6680
 13949                           
 13950                           ; BSR set to: 0
 13951  004224  0100               	movlb	0	; () banked
 13952  004226  5184               	movf	___aldiv@divisor& (0+255),w,b
 13953  004228  0100               	movlb	0	; () banked
 13954  00422A  5F80               	subwf	___aldiv@dividend& (0+255),f,b
 13955  00422C  0100               	movlb	0	; () banked
 13956  00422E  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 13957  004230  0100               	movlb	0	; () banked
 13958  004232  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 13959  004234  0100               	movlb	0	; () banked
 13960  004236  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 13961  004238  0100               	movlb	0	; () banked
 13962  00423A  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 13963  00423C  0100               	movlb	0	; () banked
 13964  00423E  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 13965  004240  0100               	movlb	0	; () banked
 13966  004242  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 13967                           
 13968                           ; BSR set to: 0
 13969  004244  0100               	movlb	0	; () banked
 13970  004246  818A               	bsf	___aldiv@quotient& (0+255),0,b
 13971  004248                     l6680:
 13972                           
 13973                           ; BSR set to: 0
 13974  004248  0100               	movlb	0	; () banked
 13975  00424A  90D8               	bcf	status,0,c
 13976  00424C  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 13977  00424E  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 13978  004250  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 13979  004252  3384               	rrcf	___aldiv@divisor& (0+255),f,b
 13980                           
 13981                           ; BSR set to: 0
 13982  004254  0100               	movlb	0	; () banked
 13983  004256  2F88               	decfsz	___aldiv@counter& (0+255),f,b
 13984  004258  D7CD               	goto	l6672
 13985  00425A                     l6684:
 13986                           
 13987                           ; BSR set to: 0
 13988  00425A  0100               	movlb	0	; () banked
 13989  00425C  5189               	movf	___aldiv@sign& (0+255),w,b
 13990  00425E  0100               	movlb	0	; () banked
 13991  004260  B4D8               	btfsc	status,2,c
 13992  004262  D009               	goto	l6688
 13993                           
 13994                           ; BSR set to: 0
 13995  004264  0100               	movlb	0	; () banked
 13996  004266  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 13997  004268  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 13998  00426A  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 13999  00426C  6D8A               	negf	___aldiv@quotient& (0+255),b
 14000  00426E  0E00               	movlw	0
 14001  004270  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 14002  004272  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 14003  004274  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 14004  004276                     l6688:
 14005                           
 14006                           ; BSR set to: 0
 14007  004276  C08A  F080         	movff	___aldiv@quotient,?___aldiv
 14008  00427A  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
 14009  00427E  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
 14010  004282  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
 14011  004286  0012               	return	
 14012  004288                     __end_of___aldiv:
 14013                           	opt stack 0
 14014                           tblptru	equ	0xFF8
 14015                           tblptrh	equ	0xFF7
 14016                           tblptrl	equ	0xFF6
 14017                           tablat	equ	0xFF5
 14018                           prodh	equ	0xFF4
 14019                           prodl	equ	0xFF3
 14020                           intcon	equ	0xFF2
 14021                           postinc0	equ	0xFEE
 14022                           wreg	equ	0xFE8
 14023                           postdec1	equ	0xFE5
 14024                           fsr1l	equ	0xFE1
 14025                           indf2	equ	0xFDF
 14026                           postinc2	equ	0xFDE
 14027                           postdec2	equ	0xFDD
 14028                           fsr2h	equ	0xFDA
 14029                           fsr2l	equ	0xFD9
 14030                           status	equ	0xFD8
 14031                           
 14032 ;; *************** function _service *****************
 14033 ;; Defined at:
 14034 ;;		line 301 in file "main.c"
 14035 ;; Parameters:    Size  Location     Type
 14036 ;;		None
 14037 ;; Auto vars:     Size  Location     Type
 14038 ;;  key             1  121[COMRAM] unsigned char 
 14039 ;; Return value:  Size  Location     Type
 14040 ;;                  1    wreg      void 
 14041 ;; Registers used:
 14042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14043 ;; Tracked objects:
 14044 ;;		On entry : 0/0
 14045 ;;		On exit  : 0/0
 14046 ;;		Unchanged: 0/0
 14047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14049 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14050 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14051 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14052 ;;Total ram usage:       19 bytes
 14053 ;; Hardware stack levels used:    1
 14054 ;; Hardware stack levels required when called:    5
 14055 ;; This function calls:
 14056 ;;		_servoInterruptService
 14057 ;;		i2_lcdClear
 14058 ;;		i2_printf
 14059 ;;		i2_startTimer
 14060 ;; This function is called by:
 14061 ;;		Interrupt level 2
 14062 ;; This function uses a non-reentrant model
 14063 ;;
 14064                           
 14065                           	psect	intcode
 14066  000008                     __pintcode:
 14067                           	opt stack 0
 14068  000008                     _service:
 14069                           	opt stack 18
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;incstack = 0
 14073  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14074  00000A  ED55  F01E         	call	int_func,f	;refresh shadow registers
 14075                           tblptru	equ	0xFF8
 14076                           tblptrh	equ	0xFF7
 14077                           tblptrl	equ	0xFF6
 14078                           tablat	equ	0xFF5
 14079                           prodh	equ	0xFF4
 14080                           prodl	equ	0xFF3
 14081                           intcon	equ	0xFF2
 14082                           postinc0	equ	0xFEE
 14083                           wreg	equ	0xFE8
 14084                           postdec1	equ	0xFE5
 14085                           fsr1l	equ	0xFE1
 14086                           indf2	equ	0xFDF
 14087                           postinc2	equ	0xFDE
 14088                           postdec2	equ	0xFDD
 14089                           fsr2h	equ	0xFDA
 14090                           fsr2l	equ	0xFD9
 14091                           status	equ	0xFD8
 14092                           
 14093                           	psect	intcode_body
 14094  003CAA                     __pintcode_body:
 14095                           	opt stack 18
 14096  003CAA                     int_func:
 14097                           	opt stack 18
 14098  003CAA  0006               	pop		; remove dummy address from shadow register refresh
 14099  003CAC  CFFA F06C          	movff	pclath,??_service+4
 14100  003CB0  CFFB F06D          	movff	pclatu,??_service+5
 14101  003CB4  CFE9 F06E          	movff	fsr0l,??_service+6
 14102  003CB8  CFEA F06F          	movff	fsr0h,??_service+7
 14103  003CBC  CFE1 F070          	movff	fsr1l,??_service+8
 14104  003CC0  CFE2 F071          	movff	fsr1h,??_service+9
 14105  003CC4  CFD9 F072          	movff	fsr2l,??_service+10
 14106  003CC8  CFDA F073          	movff	fsr2h,??_service+11
 14107  003CCC  CFF3 F074          	movff	prodl,??_service+12
 14108  003CD0  CFF4 F075          	movff	prodh,??_service+13
 14109  003CD4  CFF6 F076          	movff	tblptrl,??_service+14
 14110  003CD8  CFF7 F077          	movff	tblptrh,??_service+15
 14111  003CDC  CFF8 F078          	movff	tblptru,??_service+16
 14112  003CE0  CFF5 F079          	movff	tablat,??_service+17
 14113                           
 14114                           ;main.c: 303: servoInterruptService();
 14115  003CE4  ECCA  F021         	call	_servoInterruptService	;wreg free
 14116                           
 14117                           ;main.c: 305: if(TMR1IF){
 14118  003CE8  A09E               	btfss	3998,0,c	;volatile
 14119  003CEA  D024               	goto	i2l7168
 14120                           
 14121                           ;main.c: 306: startTimer(1,0xffff - period);
 14122  003CEC  0E00               	movlw	0
 14123  003CEE  6E08               	movwf	i2startTimer@timer+1,c
 14124  003CF0  0E01               	movlw	1
 14125  003CF2  6E07               	movwf	i2startTimer@timer,c
 14126  003CF4  0EFF               	movlw	255
 14127  003CF6  6E68               	movwf	??_service& (0+255),c
 14128  003CF8  0EFF               	movlw	255
 14129  003CFA  6E69               	movwf	(??_service+1)& (0+255),c
 14130  003CFC  C166  F06A         	movff	_period,??_service+2
 14131  003D00  C167  F06B         	movff	_period+1,??_service+3
 14132  003D04  1E6A               	comf	??_service+2,f,c
 14133  003D06  1E6B               	comf	??_service+3,f,c
 14134  003D08  4A6A               	infsnz	??_service+2,f,c
 14135  003D0A  2A6B               	incf	??_service+3,f,c
 14136  003D0C  5068               	movf	??_service,w,c
 14137  003D0E  266A               	addwf	??_service+2,f,c
 14138  003D10  5069               	movf	??_service+1,w,c
 14139  003D12  226B               	addwfc	??_service+3,f,c
 14140  003D14  C06A  F009         	movff	??_service+2,i2startTimer@val
 14141  003D18  C06B  F00A         	movff	??_service+3,i2startTimer@val+1
 14142  003D1C  6A0B               	clrf	i2startTimer@val+2,c
 14143  003D1E  6A0C               	clrf	i2startTimer@val+3,c
 14144  003D20  ECBE  F02A         	call	i2_startTimer	;wreg free
 14145                           
 14146                           ;main.c: 307: time+=1;
 14147  003D24  0E01               	movlw	1
 14148  003D26  0101               	movlb	1	; () banked
 14149  003D28  27A6               	addwf	_time& (0+255),f,b
 14150  003D2A  0E00               	movlw	0
 14151  003D2C  23A7               	addwfc	(_time+1)& (0+255),f,b
 14152  003D2E  23A8               	addwfc	(_time+2)& (0+255),f,b
 14153  003D30  23A9               	addwfc	(_time+3)& (0+255),f,b
 14154                           
 14155                           ; BSR set to: 1
 14156                           ;main.c: 308: TMR1IF = 0;
 14157  003D32  909E               	bcf	3998,0,c	;volatile
 14158  003D34                     i2l7168:
 14159                           
 14160                           ;main.c: 309: }
 14161                           ;main.c: 312: if(INT0IF){ INT0IF = 0;
 14162  003D34  A2F2               	btfss	intcon,1,c	;volatile
 14163  003D36  D006               	goto	i2l7174
 14164  003D38  92F2               	bcf	intcon,1,c	;volatile
 14165                           
 14166                           ;main.c: 313: batteryDetected = 1;
 14167  003D3A  0E00               	movlw	0
 14168  003D3C  0101               	movlb	1	; () banked
 14169  003D3E  6FAB               	movwf	(_batteryDetected+1)& (0+255),b
 14170  003D40  0E01               	movlw	1
 14171  003D42  6FAA               	movwf	_batteryDetected& (0+255),b
 14172  003D44                     i2l7174:
 14173                           
 14174                           ;main.c: 314: }
 14175                           ;main.c: 317: if(INT1IF && INT1IE){INT1IF = 0;
 14176  003D44  B0F0               	btfsc	intcon3,0,c	;volatile
 14177  003D46  A6F0               	btfss	intcon3,3,c	;volatile
 14178  003D48  D02F               	goto	i2l190
 14179  003D4A  90F0               	bcf	intcon3,0,c	;volatile
 14180                           
 14181                           ;main.c: 320: char key = (PORTB & 0xF0) >> 4;
 14182  003D4C  3881               	swapf	3969,w,c	;volatile
 14183  003D4E  0B0F               	andlw	15
 14184  003D50  0B0F               	andlw	15
 14185  003D52  6E7A               	movwf	service@key,c
 14186                           
 14187                           ;main.c: 321: if(key == 0)time = 0;
 14188  003D54  507A               	movf	service@key,w,c
 14189  003D56  A4D8               	btfss	status,2,c
 14190  003D58  D00A               	goto	i2l7186
 14191  003D5A  0E00               	movlw	0
 14192  003D5C  0101               	movlb	1	; () banked
 14193  003D5E  6FA6               	movwf	_time& (0+255),b
 14194  003D60  0E00               	movlw	0
 14195  003D62  6FA7               	movwf	(_time+1)& (0+255),b
 14196  003D64  0E00               	movlw	0
 14197  003D66  6FA8               	movwf	(_time+2)& (0+255),b
 14198  003D68  0E00               	movlw	0
 14199  003D6A  6FA9               	movwf	(_time+3)& (0+255),b
 14200  003D6C  D011               	goto	i2l7194
 14201  003D6E                     i2l7186:
 14202                           
 14203                           ;main.c: 322: else if(key == 1)period+=100;
 14204  003D6E  047A               	decf	service@key,w,c
 14205  003D70  A4D8               	btfss	status,2,c
 14206  003D72  D005               	goto	i2l7190
 14207  003D74  0E64               	movlw	100
 14208  003D76  0101               	movlb	1	; () banked
 14209  003D78  2766               	addwf	_period& (0+255),f,b
 14210  003D7A  0E00               	movlw	0
 14211  003D7C  D008               	goto	L7
 14212  003D7E                     i2l7190:
 14213                           
 14214                           ;main.c: 323: else if(key == 2)period-=100;
 14215  003D7E  0E02               	movlw	2
 14216  003D80  187A               	xorwf	service@key,w,c
 14217  003D82  A4D8               	btfss	status,2,c
 14218  003D84  D005               	goto	i2l7194
 14219  003D86  0101               	movlb	1	; () banked
 14220  003D88  0E9C               	movlw	156
 14221  003D8A  2766               	addwf	_period& (0+255),f,b
 14222  003D8C  0EFF               	movlw	255
 14223  003D8E                     L7:
 14224  003D8E  2367               	addwfc	(_period+1)& (0+255),f,b
 14225  003D90                     i2l7194:
 14226                           
 14227                           ;main.c: 324: lcdClear();
 14228  003D90  EC3C  F02D         	call	i2_lcdClear	;wreg free
 14229                           
 14230                           ;main.c: 325: printf("period %ld",period);
 14231  003D94  0EDB               	movlw	low STR_5
 14232  003D96  6E40               	movwf	i2printf@f,c
 14233  003D98  0EFF               	movlw	high STR_5
 14234  003D9A  6E41               	movwf	i2printf@f+1,c
 14235  003D9C  C166  F042         	movff	_period,?i2_printf+2
 14236  003DA0  C167  F043         	movff	_period+1,?i2_printf+3
 14237  003DA4  EC1E  F007         	call	i2_printf	;wreg free
 14238  003DA8                     i2l190:
 14239  003DA8  C079  FFF5         	movff	??_service+17,tablat
 14240  003DAC  C078  FFF8         	movff	??_service+16,tblptru
 14241  003DB0  C077  FFF7         	movff	??_service+15,tblptrh
 14242  003DB4  C076  FFF6         	movff	??_service+14,tblptrl
 14243  003DB8  C075  FFF4         	movff	??_service+13,prodh
 14244  003DBC  C074  FFF3         	movff	??_service+12,prodl
 14245  003DC0  C073  FFDA         	movff	??_service+11,fsr2h
 14246  003DC4  C072  FFD9         	movff	??_service+10,fsr2l
 14247  003DC8  C071  FFE2         	movff	??_service+9,fsr1h
 14248  003DCC  C070  FFE1         	movff	??_service+8,fsr1l
 14249  003DD0  C06F  FFEA         	movff	??_service+7,fsr0h
 14250  003DD4  C06E  FFE9         	movff	??_service+6,fsr0l
 14251  003DD8  C06D  FFFB         	movff	??_service+5,pclatu
 14252  003DDC  C06C  FFFA         	movff	??_service+4,pclath
 14253  003DE0  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14254  003DE2  0011               	retfie		f
 14255  003DE4                     __end_of_service:
 14256                           	opt stack 0
 14257                           pclatu	equ	0xFFB
 14258                           pclath	equ	0xFFA
 14259                           tblptru	equ	0xFF8
 14260                           tblptrh	equ	0xFF7
 14261                           tblptrl	equ	0xFF6
 14262                           tablat	equ	0xFF5
 14263                           prodh	equ	0xFF4
 14264                           prodl	equ	0xFF3
 14265                           intcon	equ	0xFF2
 14266                           intcon3	equ	0xFF0
 14267                           postinc0	equ	0xFEE
 14268                           fsr0h	equ	0xFEA
 14269                           fsr0l	equ	0xFE9
 14270                           wreg	equ	0xFE8
 14271                           postdec1	equ	0xFE5
 14272                           fsr1h	equ	0xFE2
 14273                           fsr1l	equ	0xFE1
 14274                           indf2	equ	0xFDF
 14275                           postinc2	equ	0xFDE
 14276                           postdec2	equ	0xFDD
 14277                           fsr2h	equ	0xFDA
 14278                           fsr2l	equ	0xFD9
 14279                           status	equ	0xFD8
 14280                           
 14281 ;; *************** function i2_printf *****************
 14282 ;; Defined at:
 14283 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14284 ;; Parameters:    Size  Location     Type
 14285 ;;  f               2   63[COMRAM] PTR const unsigned char 
 14286 ;;		 -> STR_18(17), STR_17(18), STR_16(17), STR_15(18), 
 14287 ;;		 -> STR_14(17), STR_13(19), STR_12(17), STR_11(18), 
 14288 ;;		 -> STR_10(17), STR_9(18), STR_8(17), STR_7(18), 
 14289 ;;		 -> STR_6(8), STR_5(11), STR_4(15), STR_3(9), 
 14290 ;;		 -> STR_2(17), STR_1(8), 
 14291 ;; Auto vars:     Size  Location     Type
 14292 ;;  printf          4   92[COMRAM] unsigned long 
 14293 ;;  printf          4   83[COMRAM] struct .
 14294 ;;  printf          3   89[COMRAM] struct .
 14295 ;;  printf          2  100[COMRAM] int 
 14296 ;;  printf          2   98[COMRAM] unsigned short 
 14297 ;;  printf          2   96[COMRAM] int 
 14298 ;;  printf          2   87[COMRAM] int 
 14299 ;;  printf          2   81[COMRAM] PTR void [1]
 14300 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14301 ;;  printf          2   79[COMRAM] unsigned int 
 14302 ;;  printf          2   77[COMRAM] PTR const unsigned char 
 14303 ;;		 -> printf@c(1), 
 14304 ;;  printf          1  102[COMRAM] char 
 14305 ;;  printf          1   76[COMRAM] unsigned char 
 14306 ;;  printf          1    0        unsigned char 
 14307 ;; Return value:  Size  Location     Type
 14308 ;;                  2   63[COMRAM] int 
 14309 ;; Registers used:
 14310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14311 ;; Tracked objects:
 14312 ;;		On entry : 0/0
 14313 ;;		On exit  : 0/0
 14314 ;;		Unchanged: 0/0
 14315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14316 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14317 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14318 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14319 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14320 ;;Total ram usage:       40 bytes
 14321 ;; Hardware stack levels used:    1
 14322 ;; Hardware stack levels required when called:    4
 14323 ;; This function calls:
 14324 ;;		i2___awdiv
 14325 ;;		i2___ftadd
 14326 ;;		i2___ftge
 14327 ;;		i2___ftmul
 14328 ;;		i2___ftneg
 14329 ;;		i2___ftsub
 14330 ;;		i2___fttol
 14331 ;;		i2___lldiv
 14332 ;;		i2___llmod
 14333 ;;		i2___lltoft
 14334 ;;		i2___wmul
 14335 ;;		i2__div_to_l_
 14336 ;;		i2__tdiv_to_l_
 14337 ;;		i2_fround
 14338 ;;		i2_isdigit
 14339 ;;		i2_putch
 14340 ;;		i2_scale
 14341 ;; This function is called by:
 14342 ;;		_service
 14343 ;; This function uses a non-reentrant model
 14344 ;;
 14345                           
 14346                           	psect	text52
 14347  000E3C                     __ptext52:
 14348                           	opt stack 0
 14349  000E3C                     i2_printf:
 14350                           	opt stack 18
 14351                           
 14352                           ;doprnt.c: 466: va_list ap;
 14353                           ;doprnt.c: 499: signed char c;
 14354                           ;doprnt.c: 501: int width;
 14355                           ;doprnt.c: 504: int prec;
 14356                           ;doprnt.c: 508: unsigned short flag;
 14357                           ;doprnt.c: 515: char d;
 14358                           ;doprnt.c: 516: double fval;
 14359                           ;doprnt.c: 517: int exp;
 14360                           ;doprnt.c: 523: union {
 14361                           ;doprnt.c: 524: unsigned long vd;
 14362                           ;doprnt.c: 525: double integ;
 14363                           ;doprnt.c: 526: } tmpval;
 14364                           ;doprnt.c: 528: unsigned long val;
 14365                           ;doprnt.c: 529: unsigned len;
 14366                           ;doprnt.c: 530: const char * cp;
 14367                           ;doprnt.c: 533: *ap = __va_start();
 14368                           
 14369                           ;incstack = 0
 14370  000E3C  0E42               	movlw	low (?i2_printf+2)
 14371  000E3E  6E52               	movwf	i2printf@ap,c
 14372  000E40  0E00               	movlw	high (?i2_printf+2)
 14373  000E42  6E53               	movwf	i2printf@ap+1,c
 14374                           
 14375                           ;doprnt.c: 536: while(c = *f++) {
 14376  000E44  EFDA  F00C         	goto	i2l7098
 14377  000E48                     i2l6732:
 14378                           
 14379                           ;doprnt.c: 538: if(c != '%')
 14380  000E48  0E25               	movlw	37
 14381  000E4A  1867               	xorwf	i2printf@c,w,c
 14382  000E4C  B4D8               	btfsc	status,2,c
 14383  000E4E  D005               	goto	i2l6736
 14384                           
 14385                           ;doprnt.c: 540: {
 14386                           ;doprnt.c: 541: (putch(c) );
 14387  000E50  5067               	movf	i2printf@c,w,c
 14388  000E52  ECF0  F02C         	call	i2_putch
 14389                           
 14390                           ;doprnt.c: 542: continue;
 14391  000E56  EFDA  F00C         	goto	i2l7098
 14392  000E5A                     i2l6736:
 14393                           
 14394                           ;doprnt.c: 543: }
 14395                           ;doprnt.c: 546: width = 0;
 14396  000E5A  0E00               	movlw	0
 14397  000E5C  6E62               	movwf	i2printf@width+1,c
 14398  000E5E  0E00               	movlw	0
 14399  000E60  6E61               	movwf	i2printf@width,c
 14400                           
 14401                           ;doprnt.c: 548: flag = 0;
 14402  000E62  0E00               	movlw	0
 14403  000E64  6E64               	movwf	i2printf@flag+1,c
 14404  000E66  0E00               	movlw	0
 14405  000E68  6E63               	movwf	i2printf@flag,c
 14406                           
 14407                           ;doprnt.c: 551: switch(*f) {
 14408                           
 14409                           ;doprnt.c: 550: for(;;) {
 14410  000E6A  D003               	goto	i2l6742
 14411  000E6C                     i2l6738:
 14412                           
 14413                           ;doprnt.c: 580: flag |= 0x04;
 14414  000E6C  8463               	bsf	i2printf@flag,2,c
 14415                           
 14416                           ;doprnt.c: 581: f++;
 14417  000E6E  4A40               	infsnz	i2printf@f,f,c
 14418  000E70  2A41               	incf	i2printf@f+1,f,c
 14419  000E72                     i2l6742:
 14420  000E72  C040  FFF6         	movff	i2printf@f,tblptrl
 14421  000E76  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14422  000E7A                     	if	0	;tblptru may be non-zero
 14423  000E7A                     	endif
 14424  000E7A                     	if	0	;tblptru may be non-zero
 14425  000E7A                     	endif
 14426  000E7A  0008               	tblrd		*
 14427  000E7C  50F5               	movf	tablat,w,c
 14428                           
 14429                           ; Switch size 1, requested type "space"
 14430                           ; Number of cases is 1, Range of values is 48 to 48
 14431                           ; switch strategies available:
 14432                           ; Name         Instructions Cycles
 14433                           ; simple_byte            4     3 (average)
 14434                           ;	Chosen strategy is simple_byte
 14435  000E7E  0A30               	xorlw	48	; case 48
 14436  000E80  B4D8               	btfsc	status,2,c
 14437  000E82  D7F4               	goto	i2l6738
 14438                           
 14439                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14440                           
 14441                           ;doprnt.c: 586: }
 14442                           
 14443                           ;doprnt.c: 585: break;
 14444  000E84  C040  FFF6         	movff	i2printf@f,tblptrl
 14445  000E88  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14446  000E8C                     	if	0	;tblptru may be non-zero
 14447  000E8C                     	endif
 14448  000E8C                     	if	0	;tblptru may be non-zero
 14449  000E8C                     	endif
 14450  000E8C  0008               	tblrd		*
 14451  000E8E  50F5               	movf	tablat,w,c
 14452  000E90  EC12  F02D         	call	i2_isdigit
 14453  000E94  A0D8               	btfss	status,0,c
 14454  000E96  D032               	goto	i2l6756
 14455                           
 14456                           ;doprnt.c: 598: width = 0;
 14457  000E98  0E00               	movlw	0
 14458  000E9A  6E62               	movwf	i2printf@width+1,c
 14459  000E9C  0E00               	movlw	0
 14460  000E9E  6E61               	movwf	i2printf@width,c
 14461  000EA0                     i2l6748:
 14462                           
 14463                           ;doprnt.c: 600: width *= 10;
 14464  000EA0  C061  F00F         	movff	i2printf@width,i2___wmul@multiplier
 14465  000EA4  C062  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 14466  000EA8  0E00               	movlw	0
 14467  000EAA  6E12               	movwf	i2___wmul@multiplicand+1,c
 14468  000EAC  0E0A               	movlw	10
 14469  000EAE  6E11               	movwf	i2___wmul@multiplicand,c
 14470  000EB0  ECCB  F02C         	call	i2___wmul	;wreg free
 14471  000EB4  C00F  F061         	movff	?i2___wmul,i2printf@width
 14472  000EB8  C010  F062         	movff	?i2___wmul+1,i2printf@width+1
 14473                           
 14474                           ;doprnt.c: 601: width += *f++ - '0';
 14475  000EBC  0ED0               	movlw	208
 14476  000EBE  6E44               	movwf	??i2_printf& (0+255),c
 14477  000EC0  0EFF               	movlw	255
 14478  000EC2  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14479  000EC4  C040  FFF6         	movff	i2printf@f,tblptrl
 14480  000EC8  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14481  000ECC                     	if	0	;tblptru may be non-zero
 14482  000ECC                     	endif
 14483  000ECC                     	if	0	;tblptru may be non-zero
 14484  000ECC                     	endif
 14485  000ECC  0008               	tblrd		*
 14486  000ECE  50F5               	movf	tablat,w,c
 14487  000ED0  6E46               	movwf	(??i2_printf+2)& (0+255),c
 14488  000ED2  6A47               	clrf	(??i2_printf+3)& (0+255),c
 14489  000ED4  5044               	movf	??i2_printf,w,c
 14490  000ED6  2646               	addwf	??i2_printf+2,f,c
 14491  000ED8  5045               	movf	??i2_printf+1,w,c
 14492  000EDA  2247               	addwfc	??i2_printf+3,f,c
 14493  000EDC  5046               	movf	??i2_printf+2,w,c
 14494  000EDE  2661               	addwf	i2printf@width,f,c
 14495  000EE0  5047               	movf	??i2_printf+3,w,c
 14496  000EE2  2262               	addwfc	i2printf@width+1,f,c
 14497  000EE4  4A40               	infsnz	i2printf@f,f,c
 14498  000EE6  2A41               	incf	i2printf@f+1,f,c
 14499                           
 14500                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14501  000EE8  C040  FFF6         	movff	i2printf@f,tblptrl
 14502  000EEC  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14503  000EF0                     	if	0	;tblptru may be non-zero
 14504  000EF0                     	endif
 14505  000EF0                     	if	0	;tblptru may be non-zero
 14506  000EF0                     	endif
 14507  000EF0  0008               	tblrd		*
 14508  000EF2  50F5               	movf	tablat,w,c
 14509  000EF4  EC12  F02D         	call	i2_isdigit
 14510  000EF8  B0D8               	btfsc	status,0,c
 14511  000EFA  D7D2               	goto	i2l6748
 14512  000EFC                     i2l6756:
 14513                           
 14514                           ;doprnt.c: 608: }
 14515                           ;doprnt.c: 611: if(*f == '.') {
 14516  000EFC  C040  FFF6         	movff	i2printf@f,tblptrl
 14517  000F00  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14518  000F04                     	if	0	;tblptru may be non-zero
 14519  000F04                     	endif
 14520  000F04                     	if	0	;tblptru may be non-zero
 14521  000F04                     	endif
 14522  000F04  0008               	tblrd		*
 14523  000F06  50F5               	movf	tablat,w,c
 14524  000F08  0A2E               	xorlw	46
 14525  000F0A  A4D8               	btfss	status,2,c
 14526  000F0C  D02E               	goto	i2l6768
 14527                           
 14528                           ;doprnt.c: 612: flag |= 0x4000;
 14529  000F0E  8C64               	bsf	i2printf@flag+1,6,c
 14530                           
 14531                           ;doprnt.c: 613: f++;
 14532  000F10  4A40               	infsnz	i2printf@f,f,c
 14533  000F12  2A41               	incf	i2printf@f+1,f,c
 14534                           
 14535                           ;doprnt.c: 620: {
 14536                           ;doprnt.c: 621: prec = 0;
 14537  000F14  0E00               	movlw	0
 14538  000F16  6E66               	movwf	i2printf@prec+1,c
 14539  000F18  0E00               	movlw	0
 14540  000F1A  6E65               	movwf	i2printf@prec,c
 14541                           
 14542                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 14543  000F1C  D01B               	goto	i2l6766
 14544  000F1E                     i2l6762:
 14545                           
 14546                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 14547  000F1E  C065  F00F         	movff	i2printf@prec,i2___wmul@multiplier
 14548  000F22  C066  F010         	movff	i2printf@prec+1,i2___wmul@multiplier+1
 14549  000F26  0E00               	movlw	0
 14550  000F28  6E12               	movwf	i2___wmul@multiplicand+1,c
 14551  000F2A  0E0A               	movlw	10
 14552  000F2C  6E11               	movwf	i2___wmul@multiplicand,c
 14553  000F2E  ECCB  F02C         	call	i2___wmul	;wreg free
 14554  000F32  C040  FFF6         	movff	i2printf@f,tblptrl
 14555  000F36  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14556  000F3A                     	if	0	;tblptru may be non-zero
 14557  000F3A                     	endif
 14558  000F3A                     	if	0	;tblptru may be non-zero
 14559  000F3A                     	endif
 14560  000F3A  0008               	tblrd		*
 14561  000F3C  50F5               	movf	tablat,w,c
 14562  000F3E  260F               	addwf	?i2___wmul,f,c
 14563  000F40  0E00               	movlw	0
 14564  000F42  2210               	addwfc	?i2___wmul+1,f,c
 14565  000F44  0ED0               	movlw	208
 14566  000F46  240F               	addwf	?i2___wmul,w,c
 14567  000F48  6E65               	movwf	i2printf@prec,c
 14568  000F4A  0EFF               	movlw	255
 14569  000F4C  2010               	addwfc	?i2___wmul+1,w,c
 14570  000F4E  6E66               	movwf	i2printf@prec+1,c
 14571  000F50  4A40               	infsnz	i2printf@f,f,c
 14572  000F52  2A41               	incf	i2printf@f+1,f,c
 14573  000F54                     i2l6766:
 14574  000F54  C040  FFF6         	movff	i2printf@f,tblptrl
 14575  000F58  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14576  000F5C                     	if	0	;tblptru may be non-zero
 14577  000F5C                     	endif
 14578  000F5C                     	if	0	;tblptru may be non-zero
 14579  000F5C                     	endif
 14580  000F5C  0008               	tblrd		*
 14581  000F5E  50F5               	movf	tablat,w,c
 14582  000F60  EC12  F02D         	call	i2_isdigit
 14583  000F64  A0D8               	btfss	status,0,c
 14584  000F66  D05D               	goto	i2l6810
 14585  000F68  D7DA               	goto	i2l6762
 14586  000F6A                     i2l6768:
 14587                           
 14588                           ;doprnt.c: 626: prec = 0;
 14589  000F6A  0E00               	movlw	0
 14590  000F6C  6E66               	movwf	i2printf@prec+1,c
 14591  000F6E  0E00               	movlw	0
 14592  000F70  6E65               	movwf	i2printf@prec,c
 14593                           
 14594                           ;doprnt.c: 628: flag |= 0x1000;
 14595  000F72  8864               	bsf	i2printf@flag+1,4,c
 14596                           
 14597                           ;doprnt.c: 635: switch(c = *f++) {
 14598                           
 14599                           ;doprnt.c: 630: }
 14600                           ;doprnt.c: 633: loop:
 14601  000F74  D056               	goto	i2l6810
 14602  000F76                     i2l6772:
 14603                           
 14604                           ;doprnt.c: 643: flag |= 0x10;
 14605  000F76  8863               	bsf	i2printf@flag,4,c
 14606                           
 14607                           ;doprnt.c: 644: goto loop;
 14608  000F78  D054               	goto	i2l6810
 14609  000F7A                     i2l6774:
 14610                           
 14611                           ;doprnt.c: 663: flag |= 0x400;
 14612  000F7A  8464               	bsf	i2printf@flag+1,2,c
 14613                           
 14614                           ;doprnt.c: 698: case 'i':
 14615                           ;doprnt.c: 699: break;
 14616                           
 14617                           ;doprnt.c: 697: case 'd':
 14618                           
 14619                           ;doprnt.c: 664: break;
 14620  000F7C  D072               	goto	i2l6812
 14621  000F7E                     i2l6776:
 14622                           
 14623                           ;doprnt.c: 721: flag |= 0x80;
 14624  000F7E  8E63               	bsf	i2printf@flag,7,c
 14625                           
 14626                           ;doprnt.c: 723: break;
 14627  000F80  D070               	goto	i2l6812
 14628  000F82                     i2l6778:
 14629                           
 14630                           ;doprnt.c: 753: if(prec && prec < len)
 14631  000F82  5065               	movf	i2printf@prec,w,c
 14632  000F84  1066               	iorwf	i2printf@prec+1,w,c
 14633  000F86  B4D8               	btfsc	status,2,c
 14634  000F88  D00A               	goto	i2l6784
 14635  000F8A  5050               	movf	i2printf@len,w,c
 14636  000F8C  5C65               	subwf	i2printf@prec,w,c
 14637  000F8E  5051               	movf	i2printf@len+1,w,c
 14638  000F90  5866               	subwfb	i2printf@prec+1,w,c
 14639  000F92  B0D8               	btfsc	status,0,c
 14640  000F94  D004               	goto	i2l6784
 14641                           
 14642                           ;doprnt.c: 754: len = prec;
 14643  000F96  C065  F050         	movff	i2printf@prec,i2printf@len
 14644  000F9A  C066  F051         	movff	i2printf@prec+1,i2printf@len+1
 14645  000F9E                     i2l6784:
 14646                           
 14647                           ;doprnt.c: 757: if(width > len)
 14648  000F9E  5061               	movf	i2printf@width,w,c
 14649  000FA0  5C50               	subwf	i2printf@len,w,c
 14650  000FA2  5062               	movf	i2printf@width+1,w,c
 14651  000FA4  5851               	subwfb	i2printf@len+1,w,c
 14652  000FA6  B0D8               	btfsc	status,0,c
 14653  000FA8  D005               	goto	i2l6788
 14654                           
 14655                           ;doprnt.c: 758: width -= len;
 14656  000FAA  5050               	movf	i2printf@len,w,c
 14657  000FAC  5E61               	subwf	i2printf@width,f,c
 14658  000FAE  5051               	movf	i2printf@len+1,w,c
 14659  000FB0  5A62               	subwfb	i2printf@width+1,f,c
 14660  000FB2  D008               	goto	i2l6792
 14661  000FB4                     i2l6788:
 14662                           
 14663                           ;doprnt.c: 759: else
 14664                           ;doprnt.c: 760: width = 0;
 14665  000FB4  0E00               	movlw	0
 14666  000FB6  6E62               	movwf	i2printf@width+1,c
 14667  000FB8  0E00               	movlw	0
 14668  000FBA  6E61               	movwf	i2printf@width,c
 14669                           
 14670                           ;doprnt.c: 764: while(width--)
 14671  000FBC  D003               	goto	i2l6792
 14672  000FBE                     i2l6790:
 14673                           
 14674                           ;doprnt.c: 765: (putch(' ') );
 14675  000FBE  0E20               	movlw	32
 14676  000FC0  ECF0  F02C         	call	i2_putch
 14677  000FC4                     i2l6792:
 14678  000FC4  0661               	decf	i2printf@width,f,c
 14679  000FC6  A0D8               	btfss	status,0,c
 14680  000FC8  0662               	decf	i2printf@width+1,f,c
 14681  000FCA  2861               	incf	i2printf@width,w,c
 14682  000FCC  E1F8               	bnz	i2l6790
 14683  000FCE  2862               	incf	i2printf@width+1,w,c
 14684  000FD0  B4D8               	btfsc	status,2,c
 14685  000FD2  D00A               	goto	i2l6798
 14686  000FD4  D7F4               	goto	i2l6790
 14687  000FD6                     i2l6794:
 14688                           
 14689                           ;doprnt.c: 768: (putch(*cp++) );
 14690  000FD6  C04E  FFD9         	movff	i2printf@cp,fsr2l
 14691  000FDA  C04F  FFDA         	movff	i2printf@cp+1,fsr2h
 14692  000FDE  50DF               	movf	indf2,w,c
 14693  000FE0  ECF0  F02C         	call	i2_putch
 14694  000FE4  4A4E               	infsnz	i2printf@cp,f,c
 14695  000FE6  2A4F               	incf	i2printf@cp+1,f,c
 14696  000FE8                     i2l6798:
 14697  000FE8  0650               	decf	i2printf@len,f,c
 14698  000FEA  A0D8               	btfss	status,0,c
 14699  000FEC  0651               	decf	i2printf@len+1,f,c
 14700  000FEE  2850               	incf	i2printf@len,w,c
 14701  000FF0  E1F2               	bnz	i2l6794
 14702  000FF2  2851               	incf	i2printf@len+1,w,c
 14703  000FF4  B4D8               	btfsc	status,2,c
 14704  000FF6  EFDA  F00C         	goto	i2l7098
 14705  000FFA  D7ED               	goto	i2l6794
 14706  000FFC                     i2l6800:
 14707                           
 14708                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 14709  000FFC  C052  FFD9         	movff	i2printf@ap,fsr2l
 14710  001000  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 14711  001004  50DF               	movf	indf2,w,c
 14712  001006  6E67               	movwf	i2printf@c,c
 14713  001008  0E02               	movlw	2
 14714  00100A  2652               	addwf	i2printf@ap,f,c
 14715  00100C  0E00               	movlw	0
 14716  00100E  2253               	addwfc	i2printf@ap+1,f,c
 14717  001010                     i2l6804:
 14718                           
 14719                           ;doprnt.c: 805: cp = (char *)&c;
 14720  001010  0E67               	movlw	low i2printf@c
 14721  001012  6E4E               	movwf	i2printf@cp,c
 14722  001014  0E00               	movlw	high i2printf@c
 14723  001016  6E4F               	movwf	i2printf@cp+1,c
 14724                           
 14725                           ;doprnt.c: 806: len = 1;
 14726  001018  0E00               	movlw	0
 14727  00101A  6E51               	movwf	i2printf@len+1,c
 14728  00101C  0E01               	movlw	1
 14729  00101E  6E50               	movwf	i2printf@len,c
 14730                           
 14731                           ;doprnt.c: 807: goto dostring;
 14732  001020  D7B0               	goto	i2l6778
 14733  001022                     i2l6810:
 14734  001022  C040  FFF6         	movff	i2printf@f,tblptrl
 14735  001026  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14736  00102A  4A40               	infsnz	i2printf@f,f,c
 14737  00102C  2A41               	incf	i2printf@f+1,f,c
 14738  00102E                     	if	0	;tblptru may be non-zero
 14739  00102E                     	endif
 14740  00102E                     	if	0	;tblptru may be non-zero
 14741  00102E                     	endif
 14742  00102E  0008               	tblrd		*
 14743  001030  CFF5 F067          	movff	tablat,i2printf@c
 14744  001034  5067               	movf	i2printf@c,w,c
 14745                           
 14746                           ; Switch size 1, requested type "space"
 14747                           ; Number of cases is 7, Range of values is 0 to 120
 14748                           ; switch strategies available:
 14749                           ; Name         Instructions Cycles
 14750                           ; simple_byte           22    12 (average)
 14751                           ;	Chosen strategy is simple_byte
 14752  001036  0A00               	xorlw	0	; case 0
 14753  001038  B4D8               	btfsc	status,2,c
 14754  00103A  0012               	return	
 14755  00103C  0A63               	xorlw	99	; case 99
 14756  00103E  B4D8               	btfsc	status,2,c
 14757  001040  D7DD               	goto	i2l6800
 14758  001042  0A07               	xorlw	7	; case 100
 14759  001044  B4D8               	btfsc	status,2,c
 14760  001046  D00D               	goto	i2l6812
 14761  001048  0A02               	xorlw	2	; case 102
 14762  00104A  B4D8               	btfsc	status,2,c
 14763  00104C  D796               	goto	i2l6774
 14764  00104E  0A0F               	xorlw	15	; case 105
 14765  001050  B4D8               	btfsc	status,2,c
 14766  001052  D007               	goto	i2l6812
 14767  001054  0A05               	xorlw	5	; case 108
 14768  001056  B4D8               	btfsc	status,2,c
 14769  001058  D78E               	goto	i2l6772
 14770  00105A  0A14               	xorlw	20	; case 120
 14771  00105C  B4D8               	btfsc	status,2,c
 14772  00105E  D78F               	goto	i2l6776
 14773  001060  D7D7               	goto	i2l6804
 14774  001062                     i2l6812:
 14775                           
 14776                           ;doprnt.c: 825: if(flag & (0x700)) {
 14777  001062  0E07               	movlw	7
 14778  001064  1464               	andwf	i2printf@flag+1,w,c
 14779  001066  B4D8               	btfsc	status,2,c
 14780  001068  D2EE               	goto	i2l729
 14781                           
 14782                           ;doprnt.c: 827: if(flag & 0x1000)
 14783  00106A  A864               	btfss	i2printf@flag+1,4,c
 14784  00106C  D004               	goto	i2l6818
 14785                           
 14786                           ;doprnt.c: 829: prec = 6;
 14787  00106E  0E00               	movlw	0
 14788  001070  6E66               	movwf	i2printf@prec+1,c
 14789  001072  0E06               	movlw	6
 14790  001074  6E65               	movwf	i2printf@prec,c
 14791  001076                     i2l6818:
 14792                           
 14793                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 14794  001076  C052  FFD9         	movff	i2printf@ap,fsr2l
 14795  00107A  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 14796  00107E  CFDE F05A          	movff	postinc2,i2printf@fval
 14797  001082  CFDE F05B          	movff	postinc2,i2printf@fval+1
 14798  001086  CFDD F05C          	movff	postdec2,i2printf@fval+2
 14799  00108A  0E03               	movlw	3
 14800  00108C  2652               	addwf	i2printf@ap,f,c
 14801  00108E  0E00               	movlw	0
 14802  001090  2253               	addwfc	i2printf@ap+1,f,c
 14803                           
 14804                           ;doprnt.c: 831: if(fval < 0.0) {
 14805  001092  AE5C               	btfss	i2printf@fval+2,7,c
 14806  001094  D010               	goto	i2l6828
 14807                           
 14808                           ;doprnt.c: 832: fval = -fval;
 14809  001096  C05A  F001         	movff	i2printf@fval,i2___ftneg@f1
 14810  00109A  C05B  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 14811  00109E  C05C  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 14812  0010A2  ECDE  F02C         	call	i2___ftneg	;wreg free
 14813  0010A6  C001  F05A         	movff	?i2___ftneg,i2printf@fval
 14814  0010AA  C002  F05B         	movff	?i2___ftneg+1,i2printf@fval+1
 14815  0010AE  C003  F05C         	movff	?i2___ftneg+2,i2printf@fval+2
 14816                           
 14817                           ;doprnt.c: 833: flag |= 0x03;
 14818  0010B2  0E03               	movlw	3
 14819  0010B4  1263               	iorwf	i2printf@flag,f,c
 14820  0010B6                     i2l6828:
 14821                           
 14822                           ;doprnt.c: 834: }
 14823                           ;doprnt.c: 835: exp = 0;
 14824  0010B6  0E00               	movlw	0
 14825  0010B8  6E59               	movwf	i2printf@exp+1,c
 14826  0010BA  0E00               	movlw	0
 14827  0010BC  6E58               	movwf	i2printf@exp,c
 14828                           
 14829                           ;doprnt.c: 836: if( fval!=0) {
 14830  0010BE  505A               	movf	i2printf@fval,w,c
 14831  0010C0  105B               	iorwf	i2printf@fval+1,w,c
 14832  0010C2  105C               	iorwf	i2printf@fval+2,w,c
 14833  0010C4  B4D8               	btfsc	status,2,c
 14834  0010C6  D083               	goto	i2l6856
 14835                           
 14836                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 14837  0010C8  0E82               	movlw	130
 14838  0010CA  6E44               	movwf	??i2_printf& (0+255),c
 14839  0010CC  0EFF               	movlw	255
 14840  0010CE  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14841  0010D0  C05A  F046         	movff	i2printf@fval,??i2_printf+2
 14842  0010D4  C05B  F047         	movff	i2printf@fval+1,??i2_printf+3
 14843  0010D8  C05C  F048         	movff	i2printf@fval+2,??i2_printf+4
 14844  0010DC  C05D  F049         	movff	i2printf@fval+3,??i2_printf+5
 14845  0010E0  0E10               	movlw	16
 14846  0010E2  D005               	goto	i2u770_40
 14847  0010E4                     i2u770_45:
 14848  0010E4  90D8               	bcf	status,0,c
 14849  0010E6  3249               	rrcf	??i2_printf+5,f,c
 14850  0010E8  3248               	rrcf	??i2_printf+4,f,c
 14851  0010EA  3247               	rrcf	??i2_printf+3,f,c
 14852  0010EC  3246               	rrcf	??i2_printf+2,f,c
 14853  0010EE                     i2u770_40:
 14854  0010EE  2EE8               	decfsz	wreg,f,c
 14855  0010F0  D7F9               	goto	i2u770_45
 14856  0010F2  5046               	movf	??i2_printf+2,w,c
 14857  0010F4  2444               	addwf	??i2_printf,w,c
 14858  0010F6  6E58               	movwf	i2printf@exp,c
 14859  0010F8  0E00               	movlw	0
 14860  0010FA  2045               	addwfc	??i2_printf+1,w,c
 14861  0010FC  6E59               	movwf	i2printf@exp+1,c
 14862                           
 14863                           ;doprnt.c: 838: exp--;
 14864  0010FE  0658               	decf	i2printf@exp,f,c
 14865  001100  A0D8               	btfss	status,0,c
 14866  001102  0659               	decf	i2printf@exp+1,f,c
 14867                           
 14868                           ;doprnt.c: 839: exp *= 3;
 14869  001104  C058  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 14870  001108  C059  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 14871  00110C  0E00               	movlw	0
 14872  00110E  6E12               	movwf	i2___wmul@multiplicand+1,c
 14873  001110  0E03               	movlw	3
 14874  001112  6E11               	movwf	i2___wmul@multiplicand,c
 14875  001114  ECCB  F02C         	call	i2___wmul	;wreg free
 14876  001118  C00F  F058         	movff	?i2___wmul,i2printf@exp
 14877  00111C  C010  F059         	movff	?i2___wmul+1,i2printf@exp+1
 14878                           
 14879                           ;doprnt.c: 840: exp /= 10;
 14880  001120  C058  F007         	movff	i2printf@exp,i2___awdiv@dividend
 14881  001124  C059  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 14882  001128  0E00               	movlw	0
 14883  00112A  6E0A               	movwf	i2___awdiv@divisor+1,c
 14884  00112C  0E0A               	movlw	10
 14885  00112E  6E09               	movwf	i2___awdiv@divisor,c
 14886  001130  EC80  F028         	call	i2___awdiv	;wreg free
 14887  001134  C007  F058         	movff	?i2___awdiv,i2printf@exp
 14888  001138  C008  F059         	movff	?i2___awdiv+1,i2printf@exp+1
 14889                           
 14890                           ;doprnt.c: 841: if(exp < 0)
 14891  00113C  AE59               	btfss	i2printf@exp+1,7,c
 14892  00113E  D003               	goto	i2l6844
 14893                           
 14894                           ;doprnt.c: 842: exp--;
 14895  001140  0658               	decf	i2printf@exp,f,c
 14896  001142  A0D8               	btfss	status,0,c
 14897  001144  0659               	decf	i2printf@exp+1,f,c
 14898  001146                     i2l6844:
 14899                           
 14900                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 14901  001146  5058               	movf	i2printf@exp,w,c
 14902  001148  0800               	sublw	0
 14903  00114A  ECD8  F011         	call	i2_scale
 14904  00114E  C024  F054         	movff	?i2_scale,i2printf@tmpval
 14905  001152  C025  F055         	movff	?i2_scale+1,i2printf@tmpval+1
 14906  001156  C026  F056         	movff	?i2_scale+2,i2printf@tmpval+2
 14907                           
 14908                           ;doprnt.c: 847: tmpval.integ *= fval;
 14909  00115A  C054  F015         	movff	i2printf@tmpval,i2___ftmul@f1
 14910  00115E  C055  F016         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 14911  001162  C056  F017         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 14912  001166  C05A  F018         	movff	i2printf@fval,i2___ftmul@f2
 14913  00116A  C05B  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 14914  00116E  C05C  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 14915  001172  EC51  F023         	call	i2___ftmul	;wreg free
 14916  001176  C015  F054         	movff	?i2___ftmul,i2printf@tmpval
 14917  00117A  C016  F055         	movff	?i2___ftmul+1,i2printf@tmpval+1
 14918  00117E  C017  F056         	movff	?i2___ftmul+2,i2printf@tmpval+2
 14919                           
 14920                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 14921  001182  C054  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 14922  001186  C055  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 14923  00118A  C056  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 14924  00118E  0E00               	movlw	0
 14925  001190  6E04               	movwf	i2___ftge@ff2,c
 14926  001192  0E80               	movlw	128
 14927  001194  6E05               	movwf	i2___ftge@ff2+1,c
 14928  001196  0E3F               	movlw	63
 14929  001198  6E06               	movwf	i2___ftge@ff2+2,c
 14930  00119A  ECF1  F027         	call	i2___ftge	;wreg free
 14931  00119E  B0D8               	btfsc	status,0,c
 14932  0011A0  D004               	goto	i2l6852
 14933                           
 14934                           ;doprnt.c: 849: exp--;
 14935  0011A2  0658               	decf	i2printf@exp,f,c
 14936  0011A4  A0D8               	btfss	status,0,c
 14937  0011A6  0659               	decf	i2printf@exp+1,f,c
 14938  0011A8  D012               	goto	i2l6856
 14939  0011AA                     i2l6852:
 14940                           
 14941                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 14942  0011AA  C054  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 14943  0011AE  C055  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 14944  0011B2  C056  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 14945  0011B6  0E00               	movlw	0
 14946  0011B8  6E04               	movwf	i2___ftge@ff2,c
 14947  0011BA  0E20               	movlw	32
 14948  0011BC  6E05               	movwf	i2___ftge@ff2+1,c
 14949  0011BE  0E41               	movlw	65
 14950  0011C0  6E06               	movwf	i2___ftge@ff2+2,c
 14951  0011C2  ECF1  F027         	call	i2___ftge	;wreg free
 14952  0011C6  A0D8               	btfss	status,0,c
 14953  0011C8  D002               	goto	i2l6856
 14954                           
 14955                           ;doprnt.c: 851: exp++;
 14956  0011CA  4A58               	infsnz	i2printf@exp,f,c
 14957  0011CC  2A59               	incf	i2printf@exp+1,f,c
 14958  0011CE                     i2l6856:
 14959                           
 14960                           ;doprnt.c: 852: }
 14961                           ;doprnt.c: 1112: if(prec <= 12)
 14962  0011CE  BE66               	btfsc	i2printf@prec+1,7,c
 14963  0011D0  D006               	goto	i2l6858
 14964  0011D2  5066               	movf	i2printf@prec+1,w,c
 14965  0011D4  E11B               	bnz	i2l6860
 14966  0011D6  0E0D               	movlw	13
 14967  0011D8  5C65               	subwf	i2printf@prec,w,c
 14968  0011DA  B0D8               	btfsc	status,0,c
 14969  0011DC  D017               	goto	i2l6860
 14970  0011DE                     i2l6858:
 14971                           
 14972                           ;doprnt.c: 1113: fval += fround(prec);
 14973  0011DE  C05A  F02E         	movff	i2printf@fval,i2___ftadd@f1
 14974  0011E2  C05B  F02F         	movff	i2printf@fval+1,i2___ftadd@f1+1
 14975  0011E6  C05C  F030         	movff	i2printf@fval+2,i2___ftadd@f1+2
 14976  0011EA  5065               	movf	i2printf@prec,w,c
 14977  0011EC  EC1F  F018         	call	i2_fround
 14978  0011F0  C024  F031         	movff	?i2_fround,i2___ftadd@f2
 14979  0011F4  C025  F032         	movff	?i2_fround+1,i2___ftadd@f2+1
 14980  0011F8  C026  F033         	movff	?i2_fround+2,i2___ftadd@f2+2
 14981  0011FC  EC42  F019         	call	i2___ftadd	;wreg free
 14982  001200  C02E  F05A         	movff	?i2___ftadd,i2printf@fval
 14983  001204  C02F  F05B         	movff	?i2___ftadd+1,i2printf@fval+1
 14984  001208  C030  F05C         	movff	?i2___ftadd+2,i2printf@fval+2
 14985  00120C                     i2l6860:
 14986                           
 14987                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 14988  00120C  BE59               	btfsc	i2printf@exp+1,7,c
 14989  00120E  D006               	goto	i2l6862
 14990  001210  5059               	movf	i2printf@exp+1,w,c
 14991  001212  E11E               	bnz	i2l6868
 14992  001214  0E0A               	movlw	10
 14993  001216  5C58               	subwf	i2printf@exp,w,c
 14994  001218  B0D8               	btfsc	status,0,c
 14995  00121A  D01A               	goto	i2l6868
 14996  00121C                     i2l6862:
 14997  00121C  505A               	movf	i2printf@fval,w,c
 14998  00121E  105B               	iorwf	i2printf@fval+1,w,c
 14999  001220  105C               	iorwf	i2printf@fval+2,w,c
 15000  001222  B4D8               	btfsc	status,2,c
 15001  001224  D051               	goto	i2l6882
 15002  001226  C05A  F02B         	movff	i2printf@fval,i2___fttol@f1
 15003  00122A  C05B  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 15004  00122E  C05C  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 15005  001232  ECCB  F023         	call	i2___fttol	;wreg free
 15006  001236  502B               	movf	?i2___fttol,w,c
 15007  001238  102C               	iorwf	?i2___fttol+1,w,c
 15008  00123A  102D               	iorwf	?i2___fttol+2,w,c
 15009  00123C  102E               	iorwf	?i2___fttol+3,w,c
 15010  00123E  B4D8               	btfsc	status,2,c
 15011  001240  BE59               	btfsc	i2printf@exp+1,7,c
 15012  001242  D042               	goto	i2l6882
 15013  001244  5059               	movf	i2printf@exp+1,w,c
 15014  001246  E104               	bnz	i2l6868
 15015  001248  0E02               	movlw	2
 15016  00124A  5C58               	subwf	i2printf@exp,w,c
 15017  00124C  A0D8               	btfss	status,0,c
 15018  00124E  D03C               	goto	i2l6882
 15019  001250                     i2l6868:
 15020                           
 15021                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 15022  001250  C054  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 15023  001254  C055  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 15024  001258  C056  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 15025  00125C  0E70               	movlw	112
 15026  00125E  6E04               	movwf	i2___ftge@ff2,c
 15027  001260  0E89               	movlw	137
 15028  001262  6E05               	movwf	i2___ftge@ff2+1,c
 15029  001264  0E40               	movlw	64
 15030  001266  6E06               	movwf	i2___ftge@ff2+2,c
 15031  001268  ECF1  F027         	call	i2___ftge	;wreg free
 15032  00126C  B0D8               	btfsc	status,0,c
 15033  00126E  D002               	goto	i2l6872
 15034                           
 15035                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 15036  001270  0EF7               	movlw	247
 15037  001272  D001               	goto	L8
 15038  001274                     i2l6872:
 15039                           
 15040                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 15041  001274  0EF8               	movlw	248
 15042  001276                     L8:
 15043  001276  2658               	addwf	i2printf@exp,f,c
 15044  001278  0EFF               	movlw	255
 15045  00127A  2259               	addwfc	i2printf@exp+1,f,c
 15046                           
 15047                           ;doprnt.c: 1124: }
 15048                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 15049  00127C  5058               	movf	i2printf@exp,w,c
 15050  00127E  ECD8  F011         	call	i2_scale
 15051  001282  C024  F054         	movff	?i2_scale,i2printf@tmpval
 15052  001286  C025  F055         	movff	?i2_scale+1,i2printf@tmpval+1
 15053  00128A  C026  F056         	movff	?i2_scale+2,i2printf@tmpval+2
 15054                           
 15055                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 15056  00128E  C05A  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 15057  001292  C05B  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 15058  001296  C05C  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 15059  00129A  C054  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 15060  00129E  C055  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 15061  0012A2  C056  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 15062  0012A6  ECF2  F01E         	call	i2__tdiv_to_l_	;wreg free
 15063  0012AA  C001  F05D         	movff	?i2__tdiv_to_l_,i2printf@val
 15064  0012AE  C002  F05E         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 15065  0012B2  C003  F05F         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 15066  0012B6  C004  F060         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 15067                           
 15068                           ;doprnt.c: 1129: fval = 0.0;
 15069  0012BA  0E00               	movlw	0
 15070  0012BC  6E5A               	movwf	i2printf@fval,c
 15071  0012BE  0E00               	movlw	0
 15072  0012C0  6E5B               	movwf	i2printf@fval+1,c
 15073  0012C2  0E00               	movlw	0
 15074  0012C4  6E5C               	movwf	i2printf@fval+2,c
 15075                           
 15076                           ;doprnt.c: 1130: } else {
 15077  0012C6  D032               	goto	i2l6886
 15078  0012C8                     i2l6882:
 15079                           
 15080                           ;doprnt.c: 1131: val = (unsigned long)fval;
 15081  0012C8  C05A  F02B         	movff	i2printf@fval,i2___fttol@f1
 15082  0012CC  C05B  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 15083  0012D0  C05C  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 15084  0012D4  ECCB  F023         	call	i2___fttol	;wreg free
 15085  0012D8  C02B  F05D         	movff	?i2___fttol,i2printf@val
 15086  0012DC  C02C  F05E         	movff	?i2___fttol+1,i2printf@val+1
 15087  0012E0  C02D  F05F         	movff	?i2___fttol+2,i2printf@val+2
 15088  0012E4  C02E  F060         	movff	?i2___fttol+3,i2printf@val+3
 15089                           
 15090                           ;doprnt.c: 1132: fval -= (double)val;
 15091  0012E8  C05A  F03A         	movff	i2printf@fval,i2___ftsub@f1
 15092  0012EC  C05B  F03B         	movff	i2printf@fval+1,i2___ftsub@f1+1
 15093  0012F0  C05C  F03C         	movff	i2printf@fval+2,i2___ftsub@f1+2
 15094  0012F4  C05D  F009         	movff	i2printf@val,i2___lltoft@c
 15095  0012F8  C05E  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 15096  0012FC  C05F  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 15097  001300  C060  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 15098  001304  EC1B  F02A         	call	i2___lltoft	;wreg free
 15099  001308  C009  F03D         	movff	?i2___lltoft,i2___ftsub@f2
 15100  00130C  C00A  F03E         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 15101  001310  C00B  F03F         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 15102  001314  EC6F  F02B         	call	i2___ftsub	;wreg free
 15103  001318  C03A  F05A         	movff	?i2___ftsub,i2printf@fval
 15104  00131C  C03B  F05B         	movff	?i2___ftsub+1,i2printf@fval+1
 15105  001320  C03C  F05C         	movff	?i2___ftsub+2,i2printf@fval+2
 15106                           
 15107                           ;doprnt.c: 1133: exp = 0;
 15108  001324  0E00               	movlw	0
 15109  001326  6E59               	movwf	i2printf@exp+1,c
 15110  001328  0E00               	movlw	0
 15111  00132A  6E58               	movwf	i2printf@exp,c
 15112  00132C                     i2l6886:
 15113                           
 15114                           ;doprnt.c: 1134: }
 15115                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 15116  00132C  0E01               	movlw	1
 15117  00132E  6E67               	movwf	i2printf@c,c
 15118  001330                     i2l6888:
 15119  001330  0E0A               	movlw	10
 15120  001332  1867               	xorwf	i2printf@c,w,c
 15121  001334  B4D8               	btfsc	status,2,c
 15122  001336  D018               	goto	i2l6900
 15123                           
 15124                           ;doprnt.c: 1137: if(val < dpowers[c])
 15125  001338  5067               	movf	i2printf@c,w,c
 15126  00133A  0D04               	mullw	4
 15127  00133C  0E29               	movlw	low _dpowers
 15128  00133E  24F3               	addwf	prodl,w,c
 15129  001340  6EF6               	movwf	tblptrl,c
 15130  001342  0EFE               	movlw	high _dpowers
 15131  001344  20F4               	addwfc	prodh,w,c
 15132  001346  6EF7               	movwf	tblptrh,c
 15133  001348                     	if	0	;There are less than 3 active tblptr bytes
 15134  001348                     	endif
 15135  001348  0009               	tblrd		*+
 15136  00134A  50F5               	movf	tablat,w,c
 15137  00134C  5C5D               	subwf	i2printf@val,w,c
 15138  00134E  0009               	tblrd		*+
 15139  001350  50F5               	movf	tablat,w,c
 15140  001352  585E               	subwfb	i2printf@val+1,w,c
 15141  001354  0009               	tblrd		*+
 15142  001356  50F5               	movf	tablat,w,c
 15143  001358  585F               	subwfb	i2printf@val+2,w,c
 15144  00135A  0009               	tblrd		*+
 15145  00135C  50F5               	movf	tablat,w,c
 15146  00135E  5860               	subwfb	i2printf@val+3,w,c
 15147  001360  A0D8               	btfss	status,0,c
 15148  001362  D002               	goto	i2l6900
 15149                           
 15150                           ;doprnt.c: 1138: break;
 15151  001364  2A67               	incf	i2printf@c,f,c
 15152  001366  D7E4               	goto	i2l6888
 15153  001368                     i2l6900:
 15154                           
 15155                           ;doprnt.c: 1142: width -= prec + c + exp;
 15156  001368  C067  F044         	movff	i2printf@c,??i2_printf
 15157  00136C  6A45               	clrf	(??i2_printf+1)& (0+255),c
 15158  00136E  BE44               	btfsc	??i2_printf& (0+255),7,c
 15159  001370  0645               	decf	(??i2_printf+1)& (0+255),f,c
 15160  001372  5065               	movf	i2printf@prec,w,c
 15161  001374  2644               	addwf	??i2_printf,f,c
 15162  001376  5066               	movf	i2printf@prec+1,w,c
 15163  001378  2245               	addwfc	??i2_printf+1,f,c
 15164  00137A  5058               	movf	i2printf@exp,w,c
 15165  00137C  2644               	addwf	??i2_printf,f,c
 15166  00137E  5059               	movf	i2printf@exp+1,w,c
 15167  001380  2245               	addwfc	??i2_printf+1,f,c
 15168  001382  5044               	movf	??i2_printf,w,c
 15169  001384  5E61               	subwf	i2printf@width,f,c
 15170  001386  5045               	movf	??i2_printf+1,w,c
 15171  001388  5A62               	subwfb	i2printf@width+1,f,c
 15172                           
 15173                           ;doprnt.c: 1143: if(
 15174                           ;doprnt.c: 1147: prec)
 15175  00138A  5065               	movf	i2printf@prec,w,c
 15176  00138C  1066               	iorwf	i2printf@prec+1,w,c
 15177  00138E  B4D8               	btfsc	status,2,c
 15178  001390  D003               	goto	i2l6904
 15179                           
 15180                           ;doprnt.c: 1148: width--;
 15181  001392  0661               	decf	i2printf@width,f,c
 15182  001394  A0D8               	btfss	status,0,c
 15183  001396  0662               	decf	i2printf@width+1,f,c
 15184  001398                     i2l6904:
 15185                           
 15186                           ;doprnt.c: 1149: if(flag & 0x03)
 15187  001398  0E03               	movlw	3
 15188  00139A  1463               	andwf	i2printf@flag,w,c
 15189  00139C  6E44               	movwf	??i2_printf& (0+255),c
 15190  00139E  0E00               	movlw	0
 15191  0013A0  1464               	andwf	i2printf@flag+1,w,c
 15192  0013A2  6E45               	movwf	(??i2_printf+1)& (0+255),c
 15193  0013A4  5044               	movf	??i2_printf,w,c
 15194  0013A6  1045               	iorwf	??i2_printf+1,w,c
 15195  0013A8  B4D8               	btfsc	status,2,c
 15196  0013AA  D003               	goto	i2l6908
 15197                           
 15198                           ;doprnt.c: 1150: width--;
 15199  0013AC  0661               	decf	i2printf@width,f,c
 15200  0013AE  A0D8               	btfss	status,0,c
 15201  0013B0  0662               	decf	i2printf@width+1,f,c
 15202  0013B2                     i2l6908:
 15203                           
 15204                           ;doprnt.c: 1153: if(flag & 0x04) {
 15205  0013B2  A463               	btfss	i2printf@flag,2,c
 15206  0013B4  D022               	goto	i2l6924
 15207                           
 15208                           ;doprnt.c: 1157: if(flag & 0x03)
 15209  0013B6  0E03               	movlw	3
 15210  0013B8  1463               	andwf	i2printf@flag,w,c
 15211  0013BA  6E44               	movwf	??i2_printf& (0+255),c
 15212  0013BC  0E00               	movlw	0
 15213  0013BE  1464               	andwf	i2printf@flag+1,w,c
 15214  0013C0  6E45               	movwf	(??i2_printf+1)& (0+255),c
 15215  0013C2  5044               	movf	??i2_printf,w,c
 15216  0013C4  1045               	iorwf	??i2_printf+1,w,c
 15217  0013C6  B4D8               	btfsc	status,2,c
 15218  0013C8  D00A               	goto	i2l6918
 15219                           
 15220                           ;doprnt.c: 1159: (putch('-') );
 15221  0013CA  0E2D               	movlw	45
 15222  0013CC  ECF0  F02C         	call	i2_putch
 15223                           
 15224                           ;doprnt.c: 1168: while(width > 0) {
 15225  0013D0  D006               	goto	i2l6918
 15226  0013D2                     i2l6914:
 15227                           
 15228                           ;doprnt.c: 1169: (putch('0') );
 15229  0013D2  0E30               	movlw	48
 15230  0013D4  ECF0  F02C         	call	i2_putch
 15231                           
 15232                           ;doprnt.c: 1170: width--;
 15233  0013D8  0661               	decf	i2printf@width,f,c
 15234  0013DA  A0D8               	btfss	status,0,c
 15235  0013DC  0662               	decf	i2printf@width+1,f,c
 15236  0013DE                     i2l6918:
 15237  0013DE  BE62               	btfsc	i2printf@width+1,7,c
 15238  0013E0  D065               	goto	i2l6936
 15239  0013E2  5062               	movf	i2printf@width+1,w,c
 15240  0013E4  E1F6               	bnz	i2l6914
 15241  0013E6  0461               	decf	i2printf@width,w,c
 15242  0013E8  A0D8               	btfss	status,0,c
 15243  0013EA  D060               	goto	i2l6936
 15244  0013EC  D7F2               	goto	i2l6914
 15245  0013EE                     i2l6920:
 15246                           
 15247                           ;doprnt.c: 1181: (putch(' ') );
 15248  0013EE  0E20               	movlw	32
 15249  0013F0  ECF0  F02C         	call	i2_putch
 15250                           
 15251                           ;doprnt.c: 1182: width--;
 15252  0013F4  0661               	decf	i2printf@width,f,c
 15253  0013F6  A0D8               	btfss	status,0,c
 15254  0013F8  0662               	decf	i2printf@width+1,f,c
 15255  0013FA                     i2l6924:
 15256  0013FA  BE62               	btfsc	i2printf@width+1,7,c
 15257  0013FC  D005               	goto	i2l6926
 15258  0013FE  5062               	movf	i2printf@width+1,w,c
 15259  001400  E1F6               	bnz	i2l6920
 15260  001402  0461               	decf	i2printf@width,w,c
 15261  001404  B0D8               	btfsc	status,0,c
 15262  001406  D7F3               	goto	i2l6920
 15263  001408                     i2l6926:
 15264                           
 15265                           ;doprnt.c: 1183: }
 15266                           ;doprnt.c: 1188: if(flag & 0x03)
 15267  001408  0E03               	movlw	3
 15268  00140A  1463               	andwf	i2printf@flag,w,c
 15269  00140C  6E44               	movwf	??i2_printf& (0+255),c
 15270  00140E  0E00               	movlw	0
 15271  001410  1464               	andwf	i2printf@flag+1,w,c
 15272  001412  6E45               	movwf	(??i2_printf+1)& (0+255),c
 15273  001414  5044               	movf	??i2_printf,w,c
 15274  001416  1045               	iorwf	??i2_printf+1,w,c
 15275  001418  B4D8               	btfsc	status,2,c
 15276  00141A  D048               	goto	i2l6936
 15277                           
 15278                           ;doprnt.c: 1190: (putch('-') );
 15279  00141C  0E2D               	movlw	45
 15280  00141E  ECF0  F02C         	call	i2_putch
 15281                           
 15282                           ;doprnt.c: 1195: }
 15283                           ;doprnt.c: 1196: while(c--) {
 15284  001422  D044               	goto	i2l6936
 15285  001424                     i2l6930:
 15286                           
 15287                           ;doprnt.c: 1200: {
 15288                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 15289  001424  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 15290  001428  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15291  00142C  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15292  001430  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15293  001434  5067               	movf	i2printf@c,w,c
 15294  001436  0D04               	mullw	4
 15295  001438  0E29               	movlw	low _dpowers
 15296  00143A  24F3               	addwf	prodl,w,c
 15297  00143C  6EF6               	movwf	tblptrl,c
 15298  00143E  0EFE               	movlw	high _dpowers
 15299  001440  20F4               	addwfc	prodh,w,c
 15300  001442  6EF7               	movwf	tblptrh,c
 15301  001444                     	if	0	;There are less than 3 active tblptr bytes
 15302  001444                     	endif
 15303  001444  0009               	tblrd		*+
 15304  001446  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15305  00144A  0009               	tblrd		*+
 15306  00144C  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15307  001450  0009               	tblrd		*+
 15308  001452  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15309  001456  000A               	tblrd		*-
 15310  001458  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15311  00145C  ECC2  F028         	call	i2___lldiv	;wreg free
 15312  001460  C001  F054         	movff	?i2___lldiv,i2printf@tmpval
 15313  001464  C002  F055         	movff	?i2___lldiv+1,i2printf@tmpval+1
 15314  001468  C003  F056         	movff	?i2___lldiv+2,i2printf@tmpval+2
 15315  00146C  C004  F057         	movff	?i2___lldiv+3,i2printf@tmpval+3
 15316                           
 15317                           ;doprnt.c: 1202: tmpval.vd %= 10;
 15318  001470  C054  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 15319  001474  C055  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 15320  001478  C056  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 15321  00147C  C057  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 15322  001480  0E0A               	movlw	10
 15323  001482  6E12               	movwf	i2___llmod@divisor,c
 15324  001484  0E00               	movlw	0
 15325  001486  6E13               	movwf	i2___llmod@divisor+1,c
 15326  001488  0E00               	movlw	0
 15327  00148A  6E14               	movwf	i2___llmod@divisor+2,c
 15328  00148C  0E00               	movlw	0
 15329  00148E  6E15               	movwf	i2___llmod@divisor+3,c
 15330  001490  ECB5  F029         	call	i2___llmod	;wreg free
 15331  001494  C00E  F054         	movff	?i2___llmod,i2printf@tmpval
 15332  001498  C00F  F055         	movff	?i2___llmod+1,i2printf@tmpval+1
 15333  00149C  C010  F056         	movff	?i2___llmod+2,i2printf@tmpval+2
 15334  0014A0  C011  F057         	movff	?i2___llmod+3,i2printf@tmpval+3
 15335                           
 15336                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 15337  0014A4  5054               	movf	i2printf@tmpval,w,c
 15338  0014A6  0F30               	addlw	48
 15339  0014A8  ECF0  F02C         	call	i2_putch
 15340  0014AC                     i2l6936:
 15341  0014AC  0667               	decf	i2printf@c,f,c
 15342  0014AE  2867               	incf	i2printf@c,w,c
 15343  0014B0  B4D8               	btfsc	status,2,c
 15344  0014B2  D007               	goto	i2l6942
 15345  0014B4  D7B7               	goto	i2l6930
 15346  0014B6                     i2l6938:
 15347                           
 15348                           ;doprnt.c: 1208: (putch('0') );
 15349  0014B6  0E30               	movlw	48
 15350  0014B8  ECF0  F02C         	call	i2_putch
 15351                           
 15352                           ;doprnt.c: 1209: exp--;
 15353  0014BC  0658               	decf	i2printf@exp,f,c
 15354  0014BE  A0D8               	btfss	status,0,c
 15355  0014C0  0659               	decf	i2printf@exp+1,f,c
 15356  0014C2                     i2l6942:
 15357  0014C2  BE59               	btfsc	i2printf@exp+1,7,c
 15358  0014C4  D005               	goto	i2l6944
 15359  0014C6  5059               	movf	i2printf@exp+1,w,c
 15360  0014C8  E1F6               	bnz	i2l6938
 15361  0014CA  0458               	decf	i2printf@exp,w,c
 15362  0014CC  B0D8               	btfsc	status,0,c
 15363  0014CE  D7F3               	goto	i2l6938
 15364  0014D0                     i2l6944:
 15365                           
 15366                           ;doprnt.c: 1210: }
 15367                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 15368  0014D0  BE66               	btfsc	i2printf@prec+1,7,c
 15369  0014D2  D009               	goto	i2l769
 15370  0014D4  5066               	movf	i2printf@prec+1,w,c
 15371  0014D6  E104               	bnz	i2u792_40
 15372  0014D8  0E09               	movlw	9
 15373  0014DA  5C65               	subwf	i2printf@prec,w,c
 15374  0014DC  A0D8               	btfss	status,0,c
 15375  0014DE  D003               	goto	i2l769
 15376  0014E0                     i2u792_40:
 15377                           
 15378                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 15379  0014E0  0E08               	movlw	8
 15380  0014E2  6E67               	movwf	i2printf@c,c
 15381  0014E4  D002               	goto	i2l6948
 15382  0014E6                     i2l769:
 15383                           
 15384                           ;doprnt.c: 1213: else
 15385                           ;doprnt.c: 1214: c = prec;
 15386  0014E6  C065  F067         	movff	i2printf@prec,i2printf@c
 15387  0014EA                     i2l6948:
 15388                           
 15389                           ;doprnt.c: 1215: prec -= c;
 15390  0014EA  5067               	movf	i2printf@c,w,c
 15391  0014EC  5E65               	subwf	i2printf@prec,f,c
 15392  0014EE  0E00               	movlw	0
 15393  0014F0  BE67               	btfsc	i2printf@c,7,c
 15394  0014F2  0EFF               	movlw	255
 15395  0014F4  5A66               	subwfb	i2printf@prec+1,f,c
 15396                           
 15397                           ;doprnt.c: 1219: if(c)
 15398  0014F6  5067               	movf	i2printf@c,w,c
 15399  0014F8  B4D8               	btfsc	status,2,c
 15400  0014FA  D003               	goto	i2l6954
 15401                           
 15402                           ;doprnt.c: 1221: (putch('.') );
 15403  0014FC  0E2E               	movlw	46
 15404  0014FE  ECF0  F02C         	call	i2_putch
 15405  001502                     i2l6954:
 15406                           
 15407                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 15408  001502  5067               	movf	i2printf@c,w,c
 15409  001504  ECD8  F011         	call	i2_scale
 15410  001508  C024  F04A         	movff	?i2_scale,i2_printf$1549
 15411  00150C  C025  F04B         	movff	?i2_scale+1,i2_printf$1549+1
 15412  001510  C026  F04C         	movff	?i2_scale+2,i2_printf$1549+2
 15413                           
 15414                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 15415  001514  C05A  F018         	movff	i2printf@fval,i2___ftmul@f2
 15416  001518  C05B  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 15417  00151C  C05C  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 15418  001520  C04A  F015         	movff	i2_printf$1549,i2___ftmul@f1
 15419  001524  C04B  F016         	movff	i2_printf$1549+1,i2___ftmul@f1+1
 15420  001528  C04C  F017         	movff	i2_printf$1549+2,i2___ftmul@f1+2
 15421  00152C  EC51  F023         	call	i2___ftmul	;wreg free
 15422  001530  C015  F02B         	movff	?i2___ftmul,i2___fttol@f1
 15423  001534  C016  F02C         	movff	?i2___ftmul+1,i2___fttol@f1+1
 15424  001538  C017  F02D         	movff	?i2___ftmul+2,i2___fttol@f1+2
 15425  00153C  ECCB  F023         	call	i2___fttol	;wreg free
 15426  001540  C02B  F05D         	movff	?i2___fttol,i2printf@val
 15427  001544  C02C  F05E         	movff	?i2___fttol+1,i2printf@val+1
 15428  001548  C02D  F05F         	movff	?i2___fttol+2,i2printf@val+2
 15429  00154C  C02E  F060         	movff	?i2___fttol+3,i2printf@val+3
 15430                           
 15431                           ;doprnt.c: 1228: while(c--) {
 15432  001550  D06A               	goto	i2l6964
 15433  001552                     i2l6958:
 15434                           
 15435                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 15436  001552  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 15437  001556  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15438  00155A  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15439  00155E  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15440  001562  5067               	movf	i2printf@c,w,c
 15441  001564  0D04               	mullw	4
 15442  001566  0E29               	movlw	low _dpowers
 15443  001568  24F3               	addwf	prodl,w,c
 15444  00156A  6EF6               	movwf	tblptrl,c
 15445  00156C  0EFE               	movlw	high _dpowers
 15446  00156E  20F4               	addwfc	prodh,w,c
 15447  001570  6EF7               	movwf	tblptrh,c
 15448  001572                     	if	0	;There are less than 3 active tblptr bytes
 15449  001572                     	endif
 15450  001572  0009               	tblrd		*+
 15451  001574  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15452  001578  0009               	tblrd		*+
 15453  00157A  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15454  00157E  0009               	tblrd		*+
 15455  001580  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15456  001584  000A               	tblrd		*-
 15457  001586  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15458  00158A  ECC2  F028         	call	i2___lldiv	;wreg free
 15459  00158E  C001  F054         	movff	?i2___lldiv,i2printf@tmpval
 15460  001592  C002  F055         	movff	?i2___lldiv+1,i2printf@tmpval+1
 15461  001596  C003  F056         	movff	?i2___lldiv+2,i2printf@tmpval+2
 15462  00159A  C004  F057         	movff	?i2___lldiv+3,i2printf@tmpval+3
 15463                           
 15464                           ;doprnt.c: 1230: tmpval.vd %= 10;
 15465  00159E  C054  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 15466  0015A2  C055  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 15467  0015A6  C056  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 15468  0015AA  C057  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 15469  0015AE  0E0A               	movlw	10
 15470  0015B0  6E12               	movwf	i2___llmod@divisor,c
 15471  0015B2  0E00               	movlw	0
 15472  0015B4  6E13               	movwf	i2___llmod@divisor+1,c
 15473  0015B6  0E00               	movlw	0
 15474  0015B8  6E14               	movwf	i2___llmod@divisor+2,c
 15475  0015BA  0E00               	movlw	0
 15476  0015BC  6E15               	movwf	i2___llmod@divisor+3,c
 15477  0015BE  ECB5  F029         	call	i2___llmod	;wreg free
 15478  0015C2  C00E  F054         	movff	?i2___llmod,i2printf@tmpval
 15479  0015C6  C00F  F055         	movff	?i2___llmod+1,i2printf@tmpval+1
 15480  0015CA  C010  F056         	movff	?i2___llmod+2,i2printf@tmpval+2
 15481  0015CE  C011  F057         	movff	?i2___llmod+3,i2printf@tmpval+3
 15482                           
 15483                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 15484  0015D2  5054               	movf	i2printf@tmpval,w,c
 15485  0015D4  0F30               	addlw	48
 15486  0015D6  ECF0  F02C         	call	i2_putch
 15487                           
 15488                           ;doprnt.c: 1232: val %= dpowers[c];
 15489  0015DA  C05D  F00E         	movff	i2printf@val,i2___llmod@dividend
 15490  0015DE  C05E  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 15491  0015E2  C05F  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 15492  0015E6  C060  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 15493  0015EA  5067               	movf	i2printf@c,w,c
 15494  0015EC  0D04               	mullw	4
 15495  0015EE  0E29               	movlw	low _dpowers
 15496  0015F0  24F3               	addwf	prodl,w,c
 15497  0015F2  6EF6               	movwf	tblptrl,c
 15498  0015F4  0EFE               	movlw	high _dpowers
 15499  0015F6  20F4               	addwfc	prodh,w,c
 15500  0015F8  6EF7               	movwf	tblptrh,c
 15501  0015FA                     	if	0	;There are less than 3 active tblptr bytes
 15502  0015FA                     	endif
 15503  0015FA  0009               	tblrd		*+
 15504  0015FC  CFF5 F012          	movff	tablat,i2___llmod@divisor
 15505  001600  0009               	tblrd		*+
 15506  001602  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 15507  001606  0009               	tblrd		*+
 15508  001608  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 15509  00160C  000A               	tblrd		*-
 15510  00160E  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 15511  001612  ECB5  F029         	call	i2___llmod	;wreg free
 15512  001616  C00E  F05D         	movff	?i2___llmod,i2printf@val
 15513  00161A  C00F  F05E         	movff	?i2___llmod+1,i2printf@val+1
 15514  00161E  C010  F05F         	movff	?i2___llmod+2,i2printf@val+2
 15515  001622  C011  F060         	movff	?i2___llmod+3,i2printf@val+3
 15516  001626                     i2l6964:
 15517  001626  0667               	decf	i2printf@c,f,c
 15518  001628  2867               	incf	i2printf@c,w,c
 15519  00162A  B4D8               	btfsc	status,2,c
 15520  00162C  D007               	goto	i2l6970
 15521  00162E  D791               	goto	i2l6958
 15522  001630                     i2l6966:
 15523                           
 15524                           ;doprnt.c: 1236: (putch('0') );
 15525  001630  0E30               	movlw	48
 15526  001632  ECF0  F02C         	call	i2_putch
 15527                           
 15528                           ;doprnt.c: 1237: prec--;
 15529  001636  0665               	decf	i2printf@prec,f,c
 15530  001638  A0D8               	btfss	status,0,c
 15531  00163A  0666               	decf	i2printf@prec+1,f,c
 15532  00163C                     i2l6970:
 15533  00163C  5065               	movf	i2printf@prec,w,c
 15534  00163E  1066               	iorwf	i2printf@prec+1,w,c
 15535  001640  B4D8               	btfsc	status,2,c
 15536  001642  D1B8               	goto	i2l7098
 15537  001644  D7F5               	goto	i2l6966
 15538  001646                     i2l729:
 15539                           
 15540                           ;doprnt.c: 1246: }
 15541                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 15542  001646  BE63               	btfsc	i2printf@flag,7,c
 15543  001648  D02E               	goto	i2l778
 15544                           
 15545                           ;doprnt.c: 1253: {
 15546                           ;doprnt.c: 1255: if(flag & 0x10)
 15547  00164A  A863               	btfss	i2printf@flag,4,c
 15548  00164C  D00E               	goto	i2l6978
 15549                           
 15550                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
 15551  00164E  C052  FFD9         	movff	i2printf@ap,fsr2l
 15552  001652  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 15553  001656  CFDE F05D          	movff	postinc2,i2printf@val
 15554  00165A  CFDE F05E          	movff	postinc2,i2printf@val+1
 15555  00165E  CFDE F05F          	movff	postinc2,i2printf@val+2
 15556  001662  CFDE F060          	movff	postinc2,i2printf@val+3
 15557  001666  0E04               	movlw	4
 15558  001668  D00E               	goto	L9
 15559  00166A                     i2l6978:
 15560                           
 15561                           ;doprnt.c: 1257: else
 15562                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 15563  00166A  C052  FFD9         	movff	i2printf@ap,fsr2l
 15564  00166E  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 15565  001672  CFDE F05D          	movff	postinc2,i2printf@val
 15566  001676  CFDD F05E          	movff	postdec2,i2printf@val+1
 15567  00167A  0E00               	movlw	0
 15568  00167C  BE5E               	btfsc	i2printf@val+1,7,c
 15569  00167E  0EFF               	movlw	-1
 15570  001680  6E5F               	movwf	i2printf@val+2,c
 15571  001682  6E60               	movwf	i2printf@val+3,c
 15572  001684  0E02               	movlw	2
 15573  001686                     L9:
 15574  001686  2652               	addwf	i2printf@ap,f,c
 15575  001688  0E00               	movlw	0
 15576  00168A  2253               	addwfc	i2printf@ap+1,f,c
 15577                           
 15578                           ;doprnt.c: 1261: if((long)val < 0) {
 15579  00168C  AE60               	btfss	i2printf@val+3,7,c
 15580  00168E  D02D               	goto	i2l6996
 15581                           
 15582                           ;doprnt.c: 1262: flag |= 0x03;
 15583  001690  0E03               	movlw	3
 15584  001692  1263               	iorwf	i2printf@flag,f,c
 15585                           
 15586                           ;doprnt.c: 1263: val = -val;
 15587  001694  1E60               	comf	i2printf@val+3,f,c
 15588  001696  1E5F               	comf	i2printf@val+2,f,c
 15589  001698  1E5E               	comf	i2printf@val+1,f,c
 15590  00169A  6C5D               	negf	i2printf@val,c
 15591  00169C  0E00               	movlw	0
 15592  00169E  225E               	addwfc	i2printf@val+1,f,c
 15593  0016A0  225F               	addwfc	i2printf@val+2,f,c
 15594  0016A2  2260               	addwfc	i2printf@val+3,f,c
 15595                           
 15596                           ;doprnt.c: 1264: }
 15597                           ;doprnt.c: 1266: }
 15598  0016A4  D022               	goto	i2l6996
 15599  0016A6                     i2l778:
 15600                           
 15601                           ;doprnt.c: 1268: else
 15602                           ;doprnt.c: 1273: {
 15603                           ;doprnt.c: 1281: if(flag & 0x10)
 15604  0016A6  A863               	btfss	i2printf@flag,4,c
 15605  0016A8  D00E               	goto	i2l6992
 15606                           
 15607                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 15608  0016AA  C052  FFD9         	movff	i2printf@ap,fsr2l
 15609  0016AE  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 15610  0016B2  CFDE F05D          	movff	postinc2,i2printf@val
 15611  0016B6  CFDE F05E          	movff	postinc2,i2printf@val+1
 15612  0016BA  CFDE F05F          	movff	postinc2,i2printf@val+2
 15613  0016BE  CFDE F060          	movff	postinc2,i2printf@val+3
 15614  0016C2  0E04               	movlw	4
 15615  0016C4  D00F               	goto	L10
 15616  0016C6                     i2l6992:
 15617                           
 15618                           ;doprnt.c: 1283: else
 15619                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15620  0016C6  C052  FFD9         	movff	i2printf@ap,fsr2l
 15621  0016CA  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 15622  0016CE  CFDE F044          	movff	postinc2,??i2_printf
 15623  0016D2  CFDD F045          	movff	postdec2,??i2_printf+1
 15624  0016D6  C044  F05D         	movff	??i2_printf,i2printf@val
 15625  0016DA  C045  F05E         	movff	??i2_printf+1,i2printf@val+1
 15626  0016DE  6A5F               	clrf	i2printf@val+2,c
 15627  0016E0  6A60               	clrf	i2printf@val+3,c
 15628  0016E2  0E02               	movlw	2
 15629  0016E4                     L10:
 15630  0016E4  2652               	addwf	i2printf@ap,f,c
 15631  0016E6  0E00               	movlw	0
 15632  0016E8  2253               	addwfc	i2printf@ap+1,f,c
 15633  0016EA                     i2l6996:
 15634                           
 15635                           ;doprnt.c: 1287: }
 15636                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 15637  0016EA  5065               	movf	i2printf@prec,w,c
 15638  0016EC  1066               	iorwf	i2printf@prec+1,w,c
 15639  0016EE  A4D8               	btfss	status,2,c
 15640  0016F0  D045               	goto	i2l7032
 15641  0016F2  505D               	movf	i2printf@val,w,c
 15642  0016F4  105E               	iorwf	i2printf@val+1,w,c
 15643  0016F6  105F               	iorwf	i2printf@val+2,w,c
 15644  0016F8  1060               	iorwf	i2printf@val+3,w,c
 15645  0016FA  A4D8               	btfss	status,2,c
 15646  0016FC  D03F               	goto	i2l7032
 15647                           
 15648                           ;doprnt.c: 1291: prec++;
 15649  0016FE  4A65               	infsnz	i2printf@prec,f,c
 15650  001700  2A66               	incf	i2printf@prec+1,f,c
 15651                           
 15652                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 15653  001702  D03C               	goto	i2l7032
 15654  001704                     i2l7002:
 15655                           
 15656                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15657  001704  0E01               	movlw	1
 15658  001706  6E67               	movwf	i2printf@c,c
 15659  001708                     i2l7004:
 15660  001708  0E0A               	movlw	10
 15661  00170A  1867               	xorwf	i2printf@c,w,c
 15662  00170C  B4D8               	btfsc	status,2,c
 15663  00170E  D03E               	goto	i2l7034
 15664                           
 15665                           ;doprnt.c: 1306: if(val < dpowers[c])
 15666  001710  5067               	movf	i2printf@c,w,c
 15667  001712  0D04               	mullw	4
 15668  001714  0E29               	movlw	low _dpowers
 15669  001716  24F3               	addwf	prodl,w,c
 15670  001718  6EF6               	movwf	tblptrl,c
 15671  00171A  0EFE               	movlw	high _dpowers
 15672  00171C  20F4               	addwfc	prodh,w,c
 15673  00171E  6EF7               	movwf	tblptrh,c
 15674  001720                     	if	0	;There are less than 3 active tblptr bytes
 15675  001720                     	endif
 15676  001720  0009               	tblrd		*+
 15677  001722  50F5               	movf	tablat,w,c
 15678  001724  5C5D               	subwf	i2printf@val,w,c
 15679  001726  0009               	tblrd		*+
 15680  001728  50F5               	movf	tablat,w,c
 15681  00172A  585E               	subwfb	i2printf@val+1,w,c
 15682  00172C  0009               	tblrd		*+
 15683  00172E  50F5               	movf	tablat,w,c
 15684  001730  585F               	subwfb	i2printf@val+2,w,c
 15685  001732  0009               	tblrd		*+
 15686  001734  50F5               	movf	tablat,w,c
 15687  001736  5860               	subwfb	i2printf@val+3,w,c
 15688  001738  A0D8               	btfss	status,0,c
 15689  00173A  D028               	goto	i2l7034
 15690                           
 15691                           ;doprnt.c: 1307: break;
 15692  00173C  2A67               	incf	i2printf@c,f,c
 15693  00173E  D7E4               	goto	i2l7004
 15694  001740                     i2l7016:
 15695                           
 15696                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 15697  001740  0E01               	movlw	1
 15698  001742  6E67               	movwf	i2printf@c,c
 15699  001744                     i2l7018:
 15700  001744  0E08               	movlw	8
 15701  001746  1867               	xorwf	i2printf@c,w,c
 15702  001748  B4D8               	btfsc	status,2,c
 15703  00174A  D020               	goto	i2l7034
 15704                           
 15705                           ;doprnt.c: 1317: if(val < hexpowers[c])
 15706  00174C  5067               	movf	i2printf@c,w,c
 15707  00174E  0D04               	mullw	4
 15708  001750  0E9F               	movlw	low _hexpowers
 15709  001752  24F3               	addwf	prodl,w,c
 15710  001754  6EF6               	movwf	tblptrl,c
 15711  001756  0EFE               	movlw	high _hexpowers
 15712  001758  20F4               	addwfc	prodh,w,c
 15713  00175A  6EF7               	movwf	tblptrh,c
 15714  00175C                     	if	0	;There are less than 3 active tblptr bytes
 15715  00175C                     	endif
 15716  00175C  0009               	tblrd		*+
 15717  00175E  50F5               	movf	tablat,w,c
 15718  001760  5C5D               	subwf	i2printf@val,w,c
 15719  001762  0009               	tblrd		*+
 15720  001764  50F5               	movf	tablat,w,c
 15721  001766  585E               	subwfb	i2printf@val+1,w,c
 15722  001768  0009               	tblrd		*+
 15723  00176A  50F5               	movf	tablat,w,c
 15724  00176C  585F               	subwfb	i2printf@val+2,w,c
 15725  00176E  0009               	tblrd		*+
 15726  001770  50F5               	movf	tablat,w,c
 15727  001772  5860               	subwfb	i2printf@val+3,w,c
 15728  001774  A0D8               	btfss	status,0,c
 15729  001776  D00A               	goto	i2l7034
 15730                           
 15731                           ;doprnt.c: 1318: break;
 15732  001778  2A67               	incf	i2printf@c,f,c
 15733  00177A  D7E4               	goto	i2l7018
 15734  00177C                     i2l7032:
 15735  00177C  5063               	movf	i2printf@flag,w,c
 15736  00177E  0B80               	andlw	128
 15737                           
 15738                           ; Switch size 1, requested type "space"
 15739                           ; Number of cases is 2, Range of values is 0 to 128
 15740                           ; switch strategies available:
 15741                           ; Name         Instructions Cycles
 15742                           ; simple_byte            7     4 (average)
 15743                           ;	Chosen strategy is simple_byte
 15744  001780  0A00               	xorlw	0	; case 0
 15745  001782  B4D8               	btfsc	status,2,c
 15746  001784  D7BF               	goto	i2l7002
 15747  001786  0A80               	xorlw	128	; case 128
 15748  001788  B4D8               	btfsc	status,2,c
 15749  00178A  D7DA               	goto	i2l7016
 15750  00178C                     i2l7034:
 15751                           
 15752                           ;doprnt.c: 1339: if(c < prec)
 15753  00178C  0E80               	movlw	128
 15754  00178E  BE67               	btfsc	i2printf@c,7,c
 15755  001790  0E7F               	movlw	127
 15756  001792  6E44               	movwf	??i2_printf& (0+255),c
 15757  001794  5065               	movf	i2printf@prec,w,c
 15758  001796  5C67               	subwf	i2printf@c,w,c
 15759  001798  5066               	movf	i2printf@prec+1,w,c
 15760  00179A  0A80               	xorlw	128
 15761  00179C  5844               	subwfb	??i2_printf& (0+255),w,c
 15762  00179E  B0D8               	btfsc	status,0,c
 15763  0017A0  D003               	goto	i2l7038
 15764                           
 15765                           ;doprnt.c: 1340: c = prec;
 15766  0017A2  C065  F067         	movff	i2printf@prec,i2printf@c
 15767  0017A6  D010               	goto	i2l7042
 15768  0017A8                     i2l7038:
 15769                           
 15770                           ;doprnt.c: 1341: else if(prec < c)
 15771  0017A8  5066               	movf	i2printf@prec+1,w,c
 15772  0017AA  0A80               	xorlw	128
 15773  0017AC  6E44               	movwf	??i2_printf& (0+255),c
 15774  0017AE  5067               	movf	i2printf@c,w,c
 15775  0017B0  5C65               	subwf	i2printf@prec,w,c
 15776  0017B2  0E80               	movlw	128
 15777  0017B4  BE67               	btfsc	i2printf@c,7,c
 15778  0017B6  0E7F               	movlw	127
 15779  0017B8  5844               	subwfb	??i2_printf& (0+255),w,c
 15780  0017BA  B0D8               	btfsc	status,0,c
 15781  0017BC  D005               	goto	i2l7042
 15782                           
 15783                           ;doprnt.c: 1342: prec = c;
 15784  0017BE  5067               	movf	i2printf@c,w,c
 15785  0017C0  6E65               	movwf	i2printf@prec,c
 15786  0017C2  6A66               	clrf	i2printf@prec+1,c
 15787  0017C4  BE65               	btfsc	i2printf@prec,7,c
 15788  0017C6  0666               	decf	i2printf@prec+1,f,c
 15789  0017C8                     i2l7042:
 15790                           
 15791                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15792  0017C8  5061               	movf	i2printf@width,w,c
 15793  0017CA  1062               	iorwf	i2printf@width+1,w,c
 15794  0017CC  B4D8               	btfsc	status,2,c
 15795  0017CE  D00D               	goto	i2l7048
 15796  0017D0  0E03               	movlw	3
 15797  0017D2  1463               	andwf	i2printf@flag,w,c
 15798  0017D4  6E44               	movwf	??i2_printf& (0+255),c
 15799  0017D6  0E00               	movlw	0
 15800  0017D8  1464               	andwf	i2printf@flag+1,w,c
 15801  0017DA  6E45               	movwf	(??i2_printf+1)& (0+255),c
 15802  0017DC  5044               	movf	??i2_printf,w,c
 15803  0017DE  1045               	iorwf	??i2_printf+1,w,c
 15804  0017E0  B4D8               	btfsc	status,2,c
 15805  0017E2  D003               	goto	i2l7048
 15806                           
 15807                           ;doprnt.c: 1346: width--;
 15808  0017E4  0661               	decf	i2printf@width,f,c
 15809  0017E6  A0D8               	btfss	status,0,c
 15810  0017E8  0662               	decf	i2printf@width+1,f,c
 15811  0017EA                     i2l7048:
 15812                           
 15813                           ;doprnt.c: 1348: if(flag & 0x4000) {
 15814  0017EA  AC64               	btfss	i2printf@flag+1,6,c
 15815  0017EC  D013               	goto	i2l7056
 15816                           
 15817                           ;doprnt.c: 1349: if(width > prec)
 15818  0017EE  5061               	movf	i2printf@width,w,c
 15819  0017F0  5C65               	subwf	i2printf@prec,w,c
 15820  0017F2  5066               	movf	i2printf@prec+1,w,c
 15821  0017F4  0A80               	xorlw	128
 15822  0017F6  6E44               	movwf	??i2_printf& (0+255),c
 15823  0017F8  5062               	movf	i2printf@width+1,w,c
 15824  0017FA  0A80               	xorlw	128
 15825  0017FC  5844               	subwfb	??i2_printf& (0+255),w,c
 15826  0017FE  B0D8               	btfsc	status,0,c
 15827  001800  D005               	goto	i2l7054
 15828                           
 15829                           ;doprnt.c: 1350: width -= prec;
 15830  001802  5065               	movf	i2printf@prec,w,c
 15831  001804  5E61               	subwf	i2printf@width,f,c
 15832  001806  5066               	movf	i2printf@prec+1,w,c
 15833  001808  5A62               	subwfb	i2printf@width+1,f,c
 15834  00180A  D004               	goto	i2l7056
 15835  00180C                     i2l7054:
 15836                           
 15837                           ;doprnt.c: 1351: else
 15838                           ;doprnt.c: 1352: width = 0;
 15839  00180C  0E00               	movlw	0
 15840  00180E  6E62               	movwf	i2printf@width+1,c
 15841  001810  0E00               	movlw	0
 15842  001812  6E61               	movwf	i2printf@width,c
 15843  001814                     i2l7056:
 15844                           
 15845                           ;doprnt.c: 1353: }
 15846                           ;doprnt.c: 1381: if(width > c)
 15847  001814  0E80               	movlw	128
 15848  001816  BE67               	btfsc	i2printf@c,7,c
 15849  001818  0E7F               	movlw	127
 15850  00181A  6E44               	movwf	??i2_printf& (0+255),c
 15851  00181C  5061               	movf	i2printf@width,w,c
 15852  00181E  5C67               	subwf	i2printf@c,w,c
 15853  001820  5062               	movf	i2printf@width+1,w,c
 15854  001822  0A80               	xorlw	128
 15855  001824  5844               	subwfb	??i2_printf& (0+255),w,c
 15856  001826  B0D8               	btfsc	status,0,c
 15857  001828  D007               	goto	i2l7060
 15858                           
 15859                           ;doprnt.c: 1382: width -= c;
 15860  00182A  5067               	movf	i2printf@c,w,c
 15861  00182C  5E61               	subwf	i2printf@width,f,c
 15862  00182E  0E00               	movlw	0
 15863  001830  BE67               	btfsc	i2printf@c,7,c
 15864  001832  0EFF               	movlw	255
 15865  001834  5A62               	subwfb	i2printf@width+1,f,c
 15866  001836  D004               	goto	i2l7062
 15867  001838                     i2l7060:
 15868                           
 15869                           ;doprnt.c: 1383: else
 15870                           ;doprnt.c: 1384: width = 0;
 15871  001838  0E00               	movlw	0
 15872  00183A  6E62               	movwf	i2printf@width+1,c
 15873  00183C  0E00               	movlw	0
 15874  00183E  6E61               	movwf	i2printf@width,c
 15875  001840                     i2l7062:
 15876                           
 15877                           ;doprnt.c: 1387: if(flag & 0x04) {
 15878  001840  A463               	btfss	i2printf@flag,2,c
 15879  001842  D018               	goto	i2l7074
 15880                           
 15881                           ;doprnt.c: 1392: if(flag & 0x03)
 15882  001844  0E03               	movlw	3
 15883  001846  1463               	andwf	i2printf@flag,w,c
 15884  001848  6E44               	movwf	??i2_printf& (0+255),c
 15885  00184A  0E00               	movlw	0
 15886  00184C  1464               	andwf	i2printf@flag+1,w,c
 15887  00184E  6E45               	movwf	(??i2_printf+1)& (0+255),c
 15888  001850  5044               	movf	??i2_printf,w,c
 15889  001852  1045               	iorwf	??i2_printf+1,w,c
 15890  001854  B4D8               	btfsc	status,2,c
 15891  001856  D003               	goto	i2l7068
 15892                           
 15893                           ;doprnt.c: 1393: (putch('-') );
 15894  001858  0E2D               	movlw	45
 15895  00185A  ECF0  F02C         	call	i2_putch
 15896  00185E                     i2l7068:
 15897                           
 15898                           ;doprnt.c: 1415: if(width)
 15899  00185E  5061               	movf	i2printf@width,w,c
 15900  001860  1062               	iorwf	i2printf@width+1,w,c
 15901  001862  B4D8               	btfsc	status,2,c
 15902  001864  D09F               	goto	i2l7096
 15903                           
 15904                           ;doprnt.c: 1417: (putch('0') );
 15905                           
 15906                           ;doprnt.c: 1416: do
 15907  001866  0E30               	movlw	48
 15908  001868  ECF0  F02C         	call	i2_putch
 15909                           
 15910                           ;doprnt.c: 1418: while(--width);
 15911  00186C  0661               	decf	i2printf@width,f,c
 15912  00186E  A0D8               	btfss	status,0,c
 15913  001870  0662               	decf	i2printf@width+1,f,c
 15914  001872  D7F5               	goto	i2l7068
 15915  001874                     i2l7074:
 15916                           
 15917                           ;doprnt.c: 1422: {
 15918                           ;doprnt.c: 1424: if(width
 15919                           ;doprnt.c: 1428: )
 15920  001874  5061               	movf	i2printf@width,w,c
 15921  001876  1062               	iorwf	i2printf@width+1,w,c
 15922  001878  B4D8               	btfsc	status,2,c
 15923  00187A  D00A               	goto	i2l7080
 15924  00187C                     i2l7076:
 15925                           
 15926                           ;doprnt.c: 1430: (putch(' ') );
 15927  00187C  0E20               	movlw	32
 15928  00187E  ECF0  F02C         	call	i2_putch
 15929                           
 15930                           ;doprnt.c: 1431: while(--width);
 15931  001882  0661               	decf	i2printf@width,f,c
 15932  001884  A0D8               	btfss	status,0,c
 15933  001886  0662               	decf	i2printf@width+1,f,c
 15934  001888  5061               	movf	i2printf@width,w,c
 15935  00188A  1062               	iorwf	i2printf@width+1,w,c
 15936  00188C  A4D8               	btfss	status,2,c
 15937  00188E  D7F6               	goto	i2l7076
 15938  001890                     i2l7080:
 15939                           
 15940                           ;doprnt.c: 1438: if(flag & 0x03)
 15941  001890  0E03               	movlw	3
 15942  001892  1463               	andwf	i2printf@flag,w,c
 15943  001894  6E44               	movwf	??i2_printf& (0+255),c
 15944  001896  0E00               	movlw	0
 15945  001898  1464               	andwf	i2printf@flag+1,w,c
 15946  00189A  6E45               	movwf	(??i2_printf+1)& (0+255),c
 15947  00189C  5044               	movf	??i2_printf,w,c
 15948  00189E  1045               	iorwf	??i2_printf+1,w,c
 15949  0018A0  B4D8               	btfsc	status,2,c
 15950  0018A2  D080               	goto	i2l7096
 15951                           
 15952                           ;doprnt.c: 1439: (putch('-') );
 15953  0018A4  0E2D               	movlw	45
 15954  0018A6  ECF0  F02C         	call	i2_putch
 15955                           
 15956                           ;doprnt.c: 1469: }
 15957                           ;doprnt.c: 1474: while(prec--) {
 15958  0018AA  D07C               	goto	i2l7096
 15959  0018AC                     i2l7084:
 15960                           
 15961                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15962  0018AC  C065  F044         	movff	i2printf@prec,??i2_printf
 15963  0018B0  C066  F045         	movff	i2printf@prec+1,??i2_printf+1
 15964  0018B4  90D8               	bcf	status,0,c
 15965  0018B6  3644               	rlcf	??i2_printf,f,c
 15966  0018B8  3645               	rlcf	??i2_printf+1,f,c
 15967  0018BA  90D8               	bcf	status,0,c
 15968  0018BC  3644               	rlcf	??i2_printf,f,c
 15969  0018BE  3645               	rlcf	??i2_printf+1,f,c
 15970  0018C0  0E29               	movlw	low _dpowers
 15971  0018C2  2444               	addwf	??i2_printf,w,c
 15972  0018C4  6EF6               	movwf	tblptrl,c
 15973  0018C6  0EFE               	movlw	high _dpowers
 15974  0018C8  2045               	addwfc	??i2_printf+1,w,c
 15975  0018CA  6EF7               	movwf	tblptrh,c
 15976  0018CC                     	if	0	;There are less than 3 active tblptr bytes
 15977  0018CC                     	endif
 15978  0018CC  0009               	tblrd		*+
 15979  0018CE  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15980  0018D2  0009               	tblrd		*+
 15981  0018D4  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15982  0018D8  0009               	tblrd		*+
 15983  0018DA  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15984  0018DE  000A               	tblrd		*-
 15985  0018E0  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15986  0018E4  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 15987  0018E8  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15988  0018EC  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15989  0018F0  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15990  0018F4  ECC2  F028         	call	i2___lldiv	;wreg free
 15991  0018F8  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 15992  0018FC  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 15993  001900  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 15994  001904  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 15995  001908  0E0A               	movlw	10
 15996  00190A  6E12               	movwf	i2___llmod@divisor,c
 15997  00190C  0E00               	movlw	0
 15998  00190E  6E13               	movwf	i2___llmod@divisor+1,c
 15999  001910  0E00               	movlw	0
 16000  001912  6E14               	movwf	i2___llmod@divisor+2,c
 16001  001914  0E00               	movlw	0
 16002  001916  6E15               	movwf	i2___llmod@divisor+3,c
 16003  001918  ECB5  F029         	call	i2___llmod	;wreg free
 16004  00191C  500E               	movf	?i2___llmod,w,c
 16005  00191E  0F30               	addlw	48
 16006  001920  6E67               	movwf	i2printf@c,c
 16007                           
 16008                           ;doprnt.c: 1491: break;
 16009  001922  D03D               	goto	i2l7094
 16010  001924                     i2l7086:
 16011                           
 16012                           ;doprnt.c: 1499: {
 16013                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 16014  001924  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 16015  001928  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 16016  00192C  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 16017  001930  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 16018  001934  C065  F044         	movff	i2printf@prec,??i2_printf
 16019  001938  C066  F045         	movff	i2printf@prec+1,??i2_printf+1
 16020  00193C  90D8               	bcf	status,0,c
 16021  00193E  3644               	rlcf	??i2_printf,f,c
 16022  001940  3645               	rlcf	??i2_printf+1,f,c
 16023  001942  90D8               	bcf	status,0,c
 16024  001944  3644               	rlcf	??i2_printf,f,c
 16025  001946  3645               	rlcf	??i2_printf+1,f,c
 16026  001948  0E9F               	movlw	low _hexpowers
 16027  00194A  2444               	addwf	??i2_printf,w,c
 16028  00194C  6EF6               	movwf	tblptrl,c
 16029  00194E  0EFE               	movlw	high _hexpowers
 16030  001950  2045               	addwfc	??i2_printf+1,w,c
 16031  001952  6EF7               	movwf	tblptrh,c
 16032  001954                     	if	0	;There are less than 3 active tblptr bytes
 16033  001954                     	endif
 16034  001954  0009               	tblrd		*+
 16035  001956  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 16036  00195A  0009               	tblrd		*+
 16037  00195C  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 16038  001960  0009               	tblrd		*+
 16039  001962  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 16040  001966  000A               	tblrd		*-
 16041  001968  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 16042  00196C  ECC2  F028         	call	i2___lldiv	;wreg free
 16043  001970  5001               	movf	?i2___lldiv,w,c
 16044  001972  0B0F               	andlw	15
 16045  001974  6E4D               	movwf	i2printf@idx,c
 16046                           
 16047                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 16048  001976  504D               	movf	i2printf@idx,w,c
 16049  001978  0D01               	mullw	1
 16050  00197A  0E44               	movlw	low STR_19
 16051  00197C  24F3               	addwf	prodl,w,c
 16052  00197E  6EF6               	movwf	tblptrl,c
 16053  001980  0EFF               	movlw	high STR_19
 16054  001982  20F4               	addwfc	prodh,w,c
 16055  001984  6EF7               	movwf	tblptrh,c
 16056  001986                     	if	0	;There are less than 3 active tblptr bytes
 16057  001986                     	endif
 16058  001986  0008               	tblrd		*
 16059  001988  CFF5 F067          	movff	tablat,i2printf@c
 16060                           
 16061                           ;doprnt.c: 1523: }
 16062                           
 16063                           ;doprnt.c: 1508: }
 16064                           ;doprnt.c: 1510: break;
 16065  00198C  D008               	goto	i2l7094
 16066  00198E                     i2l7092:
 16067  00198E  5063               	movf	i2printf@flag,w,c
 16068  001990  0B80               	andlw	128
 16069                           
 16070                           ; Switch size 1, requested type "space"
 16071                           ; Number of cases is 2, Range of values is 0 to 128
 16072                           ; switch strategies available:
 16073                           ; Name         Instructions Cycles
 16074                           ; simple_byte            7     4 (average)
 16075                           ;	Chosen strategy is simple_byte
 16076  001992  0A00               	xorlw	0	; case 0
 16077  001994  B4D8               	btfsc	status,2,c
 16078  001996  D78A               	goto	i2l7084
 16079  001998  0A80               	xorlw	128	; case 128
 16080  00199A  B4D8               	btfsc	status,2,c
 16081  00199C  D7C3               	goto	i2l7086
 16082  00199E                     i2l7094:
 16083                           
 16084                           ;doprnt.c: 1524: (putch(c) );
 16085  00199E  5067               	movf	i2printf@c,w,c
 16086  0019A0  ECF0  F02C         	call	i2_putch
 16087  0019A4                     i2l7096:
 16088  0019A4  0665               	decf	i2printf@prec,f,c
 16089  0019A6  A0D8               	btfss	status,0,c
 16090  0019A8  0666               	decf	i2printf@prec+1,f,c
 16091  0019AA  2865               	incf	i2printf@prec,w,c
 16092  0019AC  E1F0               	bnz	i2l7092
 16093  0019AE  2866               	incf	i2printf@prec+1,w,c
 16094  0019B0  A4D8               	btfss	status,2,c
 16095  0019B2  D7ED               	goto	i2l7092
 16096  0019B4                     i2l7098:
 16097  0019B4  C040  FFF6         	movff	i2printf@f,tblptrl
 16098  0019B8  C041  FFF7         	movff	i2printf@f+1,tblptrh
 16099  0019BC  4A40               	infsnz	i2printf@f,f,c
 16100  0019BE  2A41               	incf	i2printf@f+1,f,c
 16101  0019C0                     	if	0	;tblptru may be non-zero
 16102  0019C0                     	endif
 16103  0019C0                     	if	0	;tblptru may be non-zero
 16104  0019C0                     	endif
 16105  0019C0  0008               	tblrd		*
 16106  0019C2  CFF5 F067          	movff	tablat,i2printf@c
 16107  0019C6  5067               	movf	i2printf@c,w,c
 16108  0019C8  B4D8               	btfsc	status,2,c
 16109  0019CA  0012               	return	
 16110  0019CC  EF24  F007         	goto	i2l6732
 16111  0019D0                     __end_ofi2_printf:
 16112                           	opt stack 0
 16113                           pclatu	equ	0xFFB
 16114                           pclath	equ	0xFFA
 16115                           tblptru	equ	0xFF8
 16116                           tblptrh	equ	0xFF7
 16117                           tblptrl	equ	0xFF6
 16118                           tablat	equ	0xFF5
 16119                           prodh	equ	0xFF4
 16120                           prodl	equ	0xFF3
 16121                           intcon	equ	0xFF2
 16122                           intcon3	equ	0xFF0
 16123                           postinc0	equ	0xFEE
 16124                           fsr0h	equ	0xFEA
 16125                           fsr0l	equ	0xFE9
 16126                           wreg	equ	0xFE8
 16127                           postdec1	equ	0xFE5
 16128                           fsr1h	equ	0xFE2
 16129                           fsr1l	equ	0xFE1
 16130                           indf2	equ	0xFDF
 16131                           postinc2	equ	0xFDE
 16132                           postdec2	equ	0xFDD
 16133                           fsr2h	equ	0xFDA
 16134                           fsr2l	equ	0xFD9
 16135                           status	equ	0xFD8
 16136                           
 16137 ;; *************** function i2_scale *****************
 16138 ;; Defined at:
 16139 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 16140 ;; Parameters:    Size  Location     Type
 16141 ;;  scl             1    wreg     char 
 16142 ;; Auto vars:     Size  Location     Type
 16143 ;;  scl             1   41[COMRAM] char 
 16144 ;; Return value:  Size  Location     Type
 16145 ;;                  3   35[COMRAM] char 
 16146 ;; Registers used:
 16147 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16148 ;; Tracked objects:
 16149 ;;		On entry : 0/0
 16150 ;;		On exit  : 0/0
 16151 ;;		Unchanged: 0/0
 16152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16153 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16154 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16156 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16157 ;;Total ram usage:        7 bytes
 16158 ;; Hardware stack levels used:    1
 16159 ;; Hardware stack levels required when called:    2
 16160 ;; This function calls:
 16161 ;;		i2___awdiv
 16162 ;;		i2___awmod
 16163 ;;		i2___ftmul
 16164 ;;		i2___wmul
 16165 ;; This function is called by:
 16166 ;;		i2_printf
 16167 ;; This function uses a non-reentrant model
 16168 ;;
 16169                           
 16170                           	psect	text53
 16171  0023B0                     __ptext53:
 16172                           	opt stack 0
 16173  0023B0                     i2_scale:
 16174                           	opt stack 19
 16175                           
 16176                           ;incstack = 0
 16177                           ;i2scale@scl stored from wreg
 16178  0023B0  6E2A               	movwf	i2scale@scl,c
 16179                           
 16180                           ;doprnt.c: 428: if(scl < 0) {
 16181  0023B2  AE2A               	btfss	i2scale@scl,7,c
 16182  0023B4  D0FB               	goto	i2l6142
 16183                           
 16184                           ;doprnt.c: 429: scl = -scl;
 16185  0023B6  6C2A               	negf	i2scale@scl,c
 16186                           
 16187                           ;doprnt.c: 430: if(scl>=110)
 16188  0023B8  502A               	movf	i2scale@scl,w,c
 16189  0023BA  0A80               	xorlw	128
 16190  0023BC  0F12               	addlw	-238
 16191  0023BE  A0D8               	btfss	status,0,c
 16192  0023C0  D091               	goto	i2l6132
 16193                           
 16194                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 16195  0023C2  0E00               	movlw	0
 16196  0023C4  6E12               	movwf	i2___wmul@multiplicand+1,c
 16197  0023C6  0E03               	movlw	3
 16198  0023C8  6E11               	movwf	i2___wmul@multiplicand,c
 16199  0023CA  0E00               	movlw	0
 16200  0023CC  6E0A               	movwf	i2___awdiv@divisor+1,c
 16201  0023CE  0E0A               	movlw	10
 16202  0023D0  6E09               	movwf	i2___awdiv@divisor,c
 16203  0023D2  0E00               	movlw	0
 16204  0023D4  6E04               	movwf	i2___awmod@divisor+1,c
 16205  0023D6  0E64               	movlw	100
 16206  0023D8  6E03               	movwf	i2___awmod@divisor,c
 16207  0023DA  502A               	movf	i2scale@scl,w,c
 16208  0023DC  6E01               	movwf	i2___awmod@dividend,c
 16209  0023DE  6A02               	clrf	i2___awmod@dividend+1,c
 16210  0023E0  BE01               	btfsc	i2___awmod@dividend,7,c
 16211  0023E2  0602               	decf	i2___awmod@dividend+1,f,c
 16212  0023E4  EC7D  F029         	call	i2___awmod	;wreg free
 16213  0023E8  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 16214  0023EC  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 16215  0023F0  EC80  F028         	call	i2___awdiv	;wreg free
 16216  0023F4  0E09               	movlw	9
 16217  0023F6  2407               	addwf	?i2___awdiv,w,c
 16218  0023F8  6E0F               	movwf	i2___wmul@multiplier,c
 16219  0023FA  0E00               	movlw	0
 16220  0023FC  2008               	addwfc	?i2___awdiv+1,w,c
 16221  0023FE  6E10               	movwf	i2___wmul@multiplier+1,c
 16222  002400  ECCB  F02C         	call	i2___wmul	;wreg free
 16223  002404  0E51               	movlw	low __npowers_
 16224  002406  240F               	addwf	?i2___wmul,w,c
 16225  002408  6EF6               	movwf	tblptrl,c
 16226  00240A  0EFE               	movlw	high __npowers_
 16227  00240C  2010               	addwfc	?i2___wmul+1,w,c
 16228  00240E  6EF7               	movwf	tblptrh,c
 16229  002410                     	if	0	;There are less than 3 active tblptr bytes
 16230  002410                     	endif
 16231  002410  0009               	tblrd		*+
 16232  002412  CFF5 F018          	movff	tablat,i2___ftmul@f2
 16233  002416  0009               	tblrd		*+
 16234  002418  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 16235  00241C  000A               	tblrd		*-
 16236  00241E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 16237  002422  0E00               	movlw	0
 16238  002424  6E0A               	movwf	i2___awdiv@divisor+1,c
 16239  002426  0E64               	movlw	100
 16240  002428  6E09               	movwf	i2___awdiv@divisor,c
 16241  00242A  502A               	movf	i2scale@scl,w,c
 16242  00242C  6E07               	movwf	i2___awdiv@dividend,c
 16243  00242E  6A08               	clrf	i2___awdiv@dividend+1,c
 16244  002430  BE07               	btfsc	i2___awdiv@dividend,7,c
 16245  002432  0608               	decf	i2___awdiv@dividend+1,f,c
 16246  002434  EC80  F028         	call	i2___awdiv	;wreg free
 16247  002438  0E12               	movlw	18
 16248  00243A  2407               	addwf	?i2___awdiv,w,c
 16249  00243C  6E0F               	movwf	i2___wmul@multiplier,c
 16250  00243E  0E00               	movlw	0
 16251  002440  2008               	addwfc	?i2___awdiv+1,w,c
 16252  002442  6E10               	movwf	i2___wmul@multiplier+1,c
 16253  002444  0E00               	movlw	0
 16254  002446  6E12               	movwf	i2___wmul@multiplicand+1,c
 16255  002448  0E03               	movlw	3
 16256  00244A  6E11               	movwf	i2___wmul@multiplicand,c
 16257  00244C  ECCB  F02C         	call	i2___wmul	;wreg free
 16258  002450  0E51               	movlw	low __npowers_
 16259  002452  240F               	addwf	?i2___wmul,w,c
 16260  002454  6EF6               	movwf	tblptrl,c
 16261  002456  0EFE               	movlw	high __npowers_
 16262  002458  2010               	addwfc	?i2___wmul+1,w,c
 16263  00245A  6EF7               	movwf	tblptrh,c
 16264  00245C                     	if	0	;There are less than 3 active tblptr bytes
 16265  00245C                     	endif
 16266  00245C  0009               	tblrd		*+
 16267  00245E  CFF5 F015          	movff	tablat,i2___ftmul@f1
 16268  002462  0009               	tblrd		*+
 16269  002464  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 16270  002468  000A               	tblrd		*-
 16271  00246A  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 16272  00246E  EC51  F023         	call	i2___ftmul	;wreg free
 16273  002472  C015  F027         	movff	?i2___ftmul,i2_scale$1548
 16274  002476  C016  F028         	movff	?i2___ftmul+1,i2_scale$1548+1
 16275  00247A  C017  F029         	movff	?i2___ftmul+2,i2_scale$1548+2
 16276                           
 16277                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 16278  00247E  C027  F015         	movff	i2_scale$1548,i2___ftmul@f1
 16279  002482  C028  F016         	movff	i2_scale$1548+1,i2___ftmul@f1+1
 16280  002486  C029  F017         	movff	i2_scale$1548+2,i2___ftmul@f1+2
 16281  00248A  0E00               	movlw	0
 16282  00248C  6E12               	movwf	i2___wmul@multiplicand+1,c
 16283  00248E  0E03               	movlw	3
 16284  002490  6E11               	movwf	i2___wmul@multiplicand,c
 16285  002492  0E00               	movlw	0
 16286  002494  6E04               	movwf	i2___awmod@divisor+1,c
 16287  002496  0E0A               	movlw	10
 16288  002498  6E03               	movwf	i2___awmod@divisor,c
 16289  00249A  502A               	movf	i2scale@scl,w,c
 16290  00249C  6E01               	movwf	i2___awmod@dividend,c
 16291  00249E  6A02               	clrf	i2___awmod@dividend+1,c
 16292  0024A0  BE01               	btfsc	i2___awmod@dividend,7,c
 16293  0024A2  0602               	decf	i2___awmod@dividend+1,f,c
 16294  0024A4  EC7D  F029         	call	i2___awmod	;wreg free
 16295  0024A8  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16296  0024AC  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16297  0024B0  ECCB  F02C         	call	i2___wmul	;wreg free
 16298  0024B4  0E51               	movlw	low __npowers_
 16299  0024B6  240F               	addwf	?i2___wmul,w,c
 16300  0024B8  6EF6               	movwf	tblptrl,c
 16301  0024BA  0EFE               	movlw	high __npowers_
 16302  0024BC  2010               	addwfc	?i2___wmul+1,w,c
 16303  0024BE  6EF7               	movwf	tblptrh,c
 16304  0024C0                     	if	0	;There are less than 3 active tblptr bytes
 16305  0024C0                     	endif
 16306  0024C0  0009               	tblrd		*+
 16307  0024C2  CFF5 F018          	movff	tablat,i2___ftmul@f2
 16308  0024C6  0009               	tblrd		*+
 16309  0024C8  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 16310  0024CC  000A               	tblrd		*-
 16311  0024CE  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 16312  0024D2  EC51  F023         	call	i2___ftmul	;wreg free
 16313  0024D6  C015  F024         	movff	?i2___ftmul,?i2_scale
 16314  0024DA  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 16315  0024DE  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 16316  0024E2  0012               	return	
 16317  0024E4                     i2l6132:
 16318                           
 16319                           ;doprnt.c: 432: else if(scl > 10)
 16320  0024E4  502A               	movf	i2scale@scl,w,c
 16321  0024E6  0A80               	xorlw	128
 16322  0024E8  0F75               	addlw	-139
 16323  0024EA  A0D8               	btfss	status,0,c
 16324  0024EC  D04D               	goto	i2l6138
 16325                           
 16326                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 16327  0024EE  0E00               	movlw	0
 16328  0024F0  6E0A               	movwf	i2___awdiv@divisor+1,c
 16329  0024F2  0E0A               	movlw	10
 16330  0024F4  6E09               	movwf	i2___awdiv@divisor,c
 16331  0024F6  502A               	movf	i2scale@scl,w,c
 16332  0024F8  6E07               	movwf	i2___awdiv@dividend,c
 16333  0024FA  6A08               	clrf	i2___awdiv@dividend+1,c
 16334  0024FC  BE07               	btfsc	i2___awdiv@dividend,7,c
 16335  0024FE  0608               	decf	i2___awdiv@dividend+1,f,c
 16336  002500  EC80  F028         	call	i2___awdiv	;wreg free
 16337  002504  0E09               	movlw	9
 16338  002506  2407               	addwf	?i2___awdiv,w,c
 16339  002508  6E0F               	movwf	i2___wmul@multiplier,c
 16340  00250A  0E00               	movlw	0
 16341  00250C  2008               	addwfc	?i2___awdiv+1,w,c
 16342  00250E  6E10               	movwf	i2___wmul@multiplier+1,c
 16343  002510  0E00               	movlw	0
 16344  002512  6E12               	movwf	i2___wmul@multiplicand+1,c
 16345  002514  0E03               	movlw	3
 16346  002516  6E11               	movwf	i2___wmul@multiplicand,c
 16347  002518  ECCB  F02C         	call	i2___wmul	;wreg free
 16348  00251C  0E51               	movlw	low __npowers_
 16349  00251E  240F               	addwf	?i2___wmul,w,c
 16350  002520  6EF6               	movwf	tblptrl,c
 16351  002522  0EFE               	movlw	high __npowers_
 16352  002524  2010               	addwfc	?i2___wmul+1,w,c
 16353  002526  6EF7               	movwf	tblptrh,c
 16354  002528                     	if	0	;There are less than 3 active tblptr bytes
 16355  002528                     	endif
 16356  002528  0009               	tblrd		*+
 16357  00252A  CFF5 F015          	movff	tablat,i2___ftmul@f1
 16358  00252E  0009               	tblrd		*+
 16359  002530  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 16360  002534  000A               	tblrd		*-
 16361  002536  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 16362  00253A  0E00               	movlw	0
 16363  00253C  6E12               	movwf	i2___wmul@multiplicand+1,c
 16364  00253E  0E03               	movlw	3
 16365  002540  6E11               	movwf	i2___wmul@multiplicand,c
 16366  002542  0E00               	movlw	0
 16367  002544  6E04               	movwf	i2___awmod@divisor+1,c
 16368  002546  0E0A               	movlw	10
 16369  002548  6E03               	movwf	i2___awmod@divisor,c
 16370  00254A  502A               	movf	i2scale@scl,w,c
 16371  00254C  6E01               	movwf	i2___awmod@dividend,c
 16372  00254E  6A02               	clrf	i2___awmod@dividend+1,c
 16373  002550  BE01               	btfsc	i2___awmod@dividend,7,c
 16374  002552  0602               	decf	i2___awmod@dividend+1,f,c
 16375  002554  EC7D  F029         	call	i2___awmod	;wreg free
 16376  002558  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16377  00255C  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16378  002560  ECCB  F02C         	call	i2___wmul	;wreg free
 16379  002564  0E51               	movlw	low __npowers_
 16380  002566  240F               	addwf	?i2___wmul,w,c
 16381  002568  6EF6               	movwf	tblptrl,c
 16382  00256A  0EFE               	movlw	high __npowers_
 16383  00256C  2010               	addwfc	?i2___wmul+1,w,c
 16384  00256E  6EF7               	movwf	tblptrh,c
 16385  002570                     	if	0	;There are less than 3 active tblptr bytes
 16386  002570                     	endif
 16387  002570  0009               	tblrd		*+
 16388  002572  CFF5 F018          	movff	tablat,i2___ftmul@f2
 16389  002576  0009               	tblrd		*+
 16390  002578  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 16391  00257C  000A               	tblrd		*-
 16392  00257E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 16393  002582  EC51  F023         	call	i2___ftmul	;wreg free
 16394  002586  D7A7               	goto	L11
 16395  002588                     i2l6138:
 16396                           
 16397                           ;doprnt.c: 434: return _npowers_[scl];
 16398  002588  502A               	movf	i2scale@scl,w,c
 16399  00258A  0D03               	mullw	3
 16400  00258C  0E51               	movlw	low __npowers_
 16401  00258E  24F3               	addwf	prodl,w,c
 16402  002590  6EF6               	movwf	tblptrl,c
 16403  002592  0EFE               	movlw	high __npowers_
 16404  002594  20F4               	addwfc	prodh,w,c
 16405  002596  6EF7               	movwf	tblptrh,c
 16406  002598                     	if	0	;There are less than 3 active tblptr bytes
 16407  002598                     	endif
 16408  002598  0009               	tblrd		*+
 16409  00259A  CFF5 F024          	movff	tablat,?i2_scale
 16410  00259E  0009               	tblrd		*+
 16411  0025A0  CFF5 F025          	movff	tablat,?i2_scale+1
 16412  0025A4  000A               	tblrd		*-
 16413  0025A6  CFF5 F026          	movff	tablat,?i2_scale+2
 16414  0025AA  0012               	return	
 16415  0025AC                     i2l6142:
 16416                           
 16417                           ;doprnt.c: 435: }
 16418                           ;doprnt.c: 436: if(scl>=110)
 16419  0025AC  502A               	movf	i2scale@scl,w,c
 16420  0025AE  0A80               	xorlw	128
 16421  0025B0  0F12               	addlw	-238
 16422  0025B2  A0D8               	btfss	status,0,c
 16423  0025B4  D091               	goto	i2l6150
 16424                           
 16425                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 16426  0025B6  0E00               	movlw	0
 16427  0025B8  6E12               	movwf	i2___wmul@multiplicand+1,c
 16428  0025BA  0E03               	movlw	3
 16429  0025BC  6E11               	movwf	i2___wmul@multiplicand,c
 16430  0025BE  0E00               	movlw	0
 16431  0025C0  6E0A               	movwf	i2___awdiv@divisor+1,c
 16432  0025C2  0E0A               	movlw	10
 16433  0025C4  6E09               	movwf	i2___awdiv@divisor,c
 16434  0025C6  0E00               	movlw	0
 16435  0025C8  6E04               	movwf	i2___awmod@divisor+1,c
 16436  0025CA  0E64               	movlw	100
 16437  0025CC  6E03               	movwf	i2___awmod@divisor,c
 16438  0025CE  502A               	movf	i2scale@scl,w,c
 16439  0025D0  6E01               	movwf	i2___awmod@dividend,c
 16440  0025D2  6A02               	clrf	i2___awmod@dividend+1,c
 16441  0025D4  BE01               	btfsc	i2___awmod@dividend,7,c
 16442  0025D6  0602               	decf	i2___awmod@dividend+1,f,c
 16443  0025D8  EC7D  F029         	call	i2___awmod	;wreg free
 16444  0025DC  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 16445  0025E0  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 16446  0025E4  EC80  F028         	call	i2___awdiv	;wreg free
 16447  0025E8  0E09               	movlw	9
 16448  0025EA  2407               	addwf	?i2___awdiv,w,c
 16449  0025EC  6E0F               	movwf	i2___wmul@multiplier,c
 16450  0025EE  0E00               	movlw	0
 16451  0025F0  2008               	addwfc	?i2___awdiv+1,w,c
 16452  0025F2  6E10               	movwf	i2___wmul@multiplier+1,c
 16453  0025F4  ECCB  F02C         	call	i2___wmul	;wreg free
 16454  0025F8  0E78               	movlw	low __powers_
 16455  0025FA  240F               	addwf	?i2___wmul,w,c
 16456  0025FC  6EF6               	movwf	tblptrl,c
 16457  0025FE  0EFE               	movlw	high __powers_
 16458  002600  2010               	addwfc	?i2___wmul+1,w,c
 16459  002602  6EF7               	movwf	tblptrh,c
 16460  002604                     	if	0	;There are less than 3 active tblptr bytes
 16461  002604                     	endif
 16462  002604  0009               	tblrd		*+
 16463  002606  CFF5 F018          	movff	tablat,i2___ftmul@f2
 16464  00260A  0009               	tblrd		*+
 16465  00260C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 16466  002610  000A               	tblrd		*-
 16467  002612  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 16468  002616  0E00               	movlw	0
 16469  002618  6E0A               	movwf	i2___awdiv@divisor+1,c
 16470  00261A  0E64               	movlw	100
 16471  00261C  6E09               	movwf	i2___awdiv@divisor,c
 16472  00261E  502A               	movf	i2scale@scl,w,c
 16473  002620  6E07               	movwf	i2___awdiv@dividend,c
 16474  002622  6A08               	clrf	i2___awdiv@dividend+1,c
 16475  002624  BE07               	btfsc	i2___awdiv@dividend,7,c
 16476  002626  0608               	decf	i2___awdiv@dividend+1,f,c
 16477  002628  EC80  F028         	call	i2___awdiv	;wreg free
 16478  00262C  0E12               	movlw	18
 16479  00262E  2407               	addwf	?i2___awdiv,w,c
 16480  002630  6E0F               	movwf	i2___wmul@multiplier,c
 16481  002632  0E00               	movlw	0
 16482  002634  2008               	addwfc	?i2___awdiv+1,w,c
 16483  002636  6E10               	movwf	i2___wmul@multiplier+1,c
 16484  002638  0E00               	movlw	0
 16485  00263A  6E12               	movwf	i2___wmul@multiplicand+1,c
 16486  00263C  0E03               	movlw	3
 16487  00263E  6E11               	movwf	i2___wmul@multiplicand,c
 16488  002640  ECCB  F02C         	call	i2___wmul	;wreg free
 16489  002644  0E78               	movlw	low __powers_
 16490  002646  240F               	addwf	?i2___wmul,w,c
 16491  002648  6EF6               	movwf	tblptrl,c
 16492  00264A  0EFE               	movlw	high __powers_
 16493  00264C  2010               	addwfc	?i2___wmul+1,w,c
 16494  00264E  6EF7               	movwf	tblptrh,c
 16495  002650                     	if	0	;There are less than 3 active tblptr bytes
 16496  002650                     	endif
 16497  002650  0009               	tblrd		*+
 16498  002652  CFF5 F015          	movff	tablat,i2___ftmul@f1
 16499  002656  0009               	tblrd		*+
 16500  002658  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 16501  00265C  000A               	tblrd		*-
 16502  00265E  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 16503  002662  EC51  F023         	call	i2___ftmul	;wreg free
 16504  002666  C015  F027         	movff	?i2___ftmul,i2_scale$1548
 16505  00266A  C016  F028         	movff	?i2___ftmul+1,i2_scale$1548+1
 16506  00266E  C017  F029         	movff	?i2___ftmul+2,i2_scale$1548+2
 16507                           
 16508                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 16509  002672  C027  F015         	movff	i2_scale$1548,i2___ftmul@f1
 16510  002676  C028  F016         	movff	i2_scale$1548+1,i2___ftmul@f1+1
 16511  00267A  C029  F017         	movff	i2_scale$1548+2,i2___ftmul@f1+2
 16512  00267E  0E00               	movlw	0
 16513  002680  6E12               	movwf	i2___wmul@multiplicand+1,c
 16514  002682  0E03               	movlw	3
 16515  002684  6E11               	movwf	i2___wmul@multiplicand,c
 16516  002686  0E00               	movlw	0
 16517  002688  6E04               	movwf	i2___awmod@divisor+1,c
 16518  00268A  0E0A               	movlw	10
 16519  00268C  6E03               	movwf	i2___awmod@divisor,c
 16520  00268E  502A               	movf	i2scale@scl,w,c
 16521  002690  6E01               	movwf	i2___awmod@dividend,c
 16522  002692  6A02               	clrf	i2___awmod@dividend+1,c
 16523  002694  BE01               	btfsc	i2___awmod@dividend,7,c
 16524  002696  0602               	decf	i2___awmod@dividend+1,f,c
 16525  002698  EC7D  F029         	call	i2___awmod	;wreg free
 16526  00269C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16527  0026A0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16528  0026A4  ECCB  F02C         	call	i2___wmul	;wreg free
 16529  0026A8  0E78               	movlw	low __powers_
 16530  0026AA  240F               	addwf	?i2___wmul,w,c
 16531  0026AC  6EF6               	movwf	tblptrl,c
 16532  0026AE  0EFE               	movlw	high __powers_
 16533  0026B0  2010               	addwfc	?i2___wmul+1,w,c
 16534  0026B2  6EF7               	movwf	tblptrh,c
 16535  0026B4                     	if	0	;There are less than 3 active tblptr bytes
 16536  0026B4                     	endif
 16537  0026B4  0009               	tblrd		*+
 16538  0026B6  CFF5 F018          	movff	tablat,i2___ftmul@f2
 16539  0026BA  0009               	tblrd		*+
 16540  0026BC  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 16541  0026C0  000A               	tblrd		*-
 16542  0026C2  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 16543  0026C6  EC51  F023         	call	i2___ftmul	;wreg free
 16544  0026CA  C015  F024         	movff	?i2___ftmul,?i2_scale
 16545  0026CE  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 16546  0026D2  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 16547  0026D6  0012               	return	
 16548  0026D8                     i2l6150:
 16549                           
 16550                           ;doprnt.c: 438: else if(scl > 10)
 16551  0026D8  502A               	movf	i2scale@scl,w,c
 16552  0026DA  0A80               	xorlw	128
 16553  0026DC  0F75               	addlw	-139
 16554  0026DE  A0D8               	btfss	status,0,c
 16555  0026E0  D04D               	goto	i2l6156
 16556                           
 16557                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 16558  0026E2  0E00               	movlw	0
 16559  0026E4  6E0A               	movwf	i2___awdiv@divisor+1,c
 16560  0026E6  0E0A               	movlw	10
 16561  0026E8  6E09               	movwf	i2___awdiv@divisor,c
 16562  0026EA  502A               	movf	i2scale@scl,w,c
 16563  0026EC  6E07               	movwf	i2___awdiv@dividend,c
 16564  0026EE  6A08               	clrf	i2___awdiv@dividend+1,c
 16565  0026F0  BE07               	btfsc	i2___awdiv@dividend,7,c
 16566  0026F2  0608               	decf	i2___awdiv@dividend+1,f,c
 16567  0026F4  EC80  F028         	call	i2___awdiv	;wreg free
 16568  0026F8  0E09               	movlw	9
 16569  0026FA  2407               	addwf	?i2___awdiv,w,c
 16570  0026FC  6E0F               	movwf	i2___wmul@multiplier,c
 16571  0026FE  0E00               	movlw	0
 16572  002700  2008               	addwfc	?i2___awdiv+1,w,c
 16573  002702  6E10               	movwf	i2___wmul@multiplier+1,c
 16574  002704  0E00               	movlw	0
 16575  002706  6E12               	movwf	i2___wmul@multiplicand+1,c
 16576  002708  0E03               	movlw	3
 16577  00270A  6E11               	movwf	i2___wmul@multiplicand,c
 16578  00270C  ECCB  F02C         	call	i2___wmul	;wreg free
 16579  002710  0E78               	movlw	low __powers_
 16580  002712  240F               	addwf	?i2___wmul,w,c
 16581  002714  6EF6               	movwf	tblptrl,c
 16582  002716  0EFE               	movlw	high __powers_
 16583  002718  2010               	addwfc	?i2___wmul+1,w,c
 16584  00271A  6EF7               	movwf	tblptrh,c
 16585  00271C                     	if	0	;There are less than 3 active tblptr bytes
 16586  00271C                     	endif
 16587  00271C  0009               	tblrd		*+
 16588  00271E  CFF5 F015          	movff	tablat,i2___ftmul@f1
 16589  002722  0009               	tblrd		*+
 16590  002724  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 16591  002728  000A               	tblrd		*-
 16592  00272A  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 16593  00272E  0E00               	movlw	0
 16594  002730  6E12               	movwf	i2___wmul@multiplicand+1,c
 16595  002732  0E03               	movlw	3
 16596  002734  6E11               	movwf	i2___wmul@multiplicand,c
 16597  002736  0E00               	movlw	0
 16598  002738  6E04               	movwf	i2___awmod@divisor+1,c
 16599  00273A  0E0A               	movlw	10
 16600  00273C  6E03               	movwf	i2___awmod@divisor,c
 16601  00273E  502A               	movf	i2scale@scl,w,c
 16602  002740  6E01               	movwf	i2___awmod@dividend,c
 16603  002742  6A02               	clrf	i2___awmod@dividend+1,c
 16604  002744  BE01               	btfsc	i2___awmod@dividend,7,c
 16605  002746  0602               	decf	i2___awmod@dividend+1,f,c
 16606  002748  EC7D  F029         	call	i2___awmod	;wreg free
 16607  00274C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16608  002750  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16609  002754  ECCB  F02C         	call	i2___wmul	;wreg free
 16610  002758  0E78               	movlw	low __powers_
 16611  00275A  240F               	addwf	?i2___wmul,w,c
 16612  00275C  6EF6               	movwf	tblptrl,c
 16613  00275E  0EFE               	movlw	high __powers_
 16614  002760  2010               	addwfc	?i2___wmul+1,w,c
 16615  002762  6EF7               	movwf	tblptrh,c
 16616  002764                     	if	0	;There are less than 3 active tblptr bytes
 16617  002764                     	endif
 16618  002764  0009               	tblrd		*+
 16619  002766  CFF5 F018          	movff	tablat,i2___ftmul@f2
 16620  00276A  0009               	tblrd		*+
 16621  00276C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 16622  002770  000A               	tblrd		*-
 16623  002772  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 16624  002776  EC51  F023         	call	i2___ftmul	;wreg free
 16625  00277A  D7A7               	goto	L12
 16626  00277C                     i2l6156:
 16627                           
 16628                           ;doprnt.c: 440: return _powers_[scl];
 16629  00277C  502A               	movf	i2scale@scl,w,c
 16630  00277E  0D03               	mullw	3
 16631  002780  0E78               	movlw	low __powers_
 16632  002782  24F3               	addwf	prodl,w,c
 16633  002784  6EF6               	movwf	tblptrl,c
 16634  002786  0EFE               	movlw	high __powers_
 16635  002788  20F4               	addwfc	prodh,w,c
 16636  00278A  6EF7               	movwf	tblptrh,c
 16637  00278C                     	if	0	;There are less than 3 active tblptr bytes
 16638  00278C                     	endif
 16639  00278C  0009               	tblrd		*+
 16640  00278E  CFF5 F024          	movff	tablat,?i2_scale
 16641  002792  0009               	tblrd		*+
 16642  002794  CFF5 F025          	movff	tablat,?i2_scale+1
 16643  002798  000A               	tblrd		*-
 16644  00279A  CFF5 F026          	movff	tablat,?i2_scale+2
 16645  00279E  0012               	return	
 16646  0027A0                     __end_ofi2_scale:
 16647                           	opt stack 0
 16648                           pclatu	equ	0xFFB
 16649                           pclath	equ	0xFFA
 16650                           tblptru	equ	0xFF8
 16651                           tblptrh	equ	0xFF7
 16652                           tblptrl	equ	0xFF6
 16653                           tablat	equ	0xFF5
 16654                           prodh	equ	0xFF4
 16655                           prodl	equ	0xFF3
 16656                           intcon	equ	0xFF2
 16657                           intcon3	equ	0xFF0
 16658                           postinc0	equ	0xFEE
 16659                           fsr0h	equ	0xFEA
 16660                           fsr0l	equ	0xFE9
 16661                           wreg	equ	0xFE8
 16662                           postdec1	equ	0xFE5
 16663                           fsr1h	equ	0xFE2
 16664                           fsr1l	equ	0xFE1
 16665                           indf2	equ	0xFDF
 16666                           postinc2	equ	0xFDE
 16667                           postdec2	equ	0xFDD
 16668                           fsr2h	equ	0xFDA
 16669                           fsr2l	equ	0xFD9
 16670                           status	equ	0xFD8
 16671                           
 16672 ;; *************** function i2_putch *****************
 16673 ;; Defined at:
 16674 ;;		line 35 in file "lcd.c"
 16675 ;; Parameters:    Size  Location     Type
 16676 ;;  data            1    wreg     unsigned char 
 16677 ;; Auto vars:     Size  Location     Type
 16678 ;;  data            1    4[COMRAM] unsigned char 
 16679 ;; Return value:  Size  Location     Type
 16680 ;;                  1    wreg      void 
 16681 ;; Registers used:
 16682 ;;		wreg, status,2, status,0, cstack
 16683 ;; Tracked objects:
 16684 ;;		On entry : 0/0
 16685 ;;		On exit  : 0/0
 16686 ;;		Unchanged: 0/0
 16687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16692 ;;Total ram usage:        1 bytes
 16693 ;; Hardware stack levels used:    1
 16694 ;; Hardware stack levels required when called:    3
 16695 ;; This function calls:
 16696 ;;		i2_lcdNewline
 16697 ;;		i2_lcdNibble
 16698 ;; This function is called by:
 16699 ;;		i2_printf
 16700 ;; This function uses a non-reentrant model
 16701 ;;
 16702                           
 16703                           	psect	text54
 16704  0059E0                     __ptext54:
 16705                           	opt stack 0
 16706  0059E0                     i2_putch:
 16707                           	opt stack 18
 16708                           
 16709                           ;incstack = 0
 16710                           ;i2putch@data stored from wreg
 16711  0059E0  6E05               	movwf	i2putch@data,c
 16712                           
 16713                           ;lcd.c: 36: if(data == '\n')lcdNewline();
 16714  0059E2  0E0A               	movlw	10
 16715  0059E4  1805               	xorwf	i2putch@data,w,c
 16716  0059E6  A4D8               	btfss	status,2,c
 16717  0059E8  D003               	goto	i2l214
 16718  0059EA  EC38  F02D         	call	i2_lcdNewline	;wreg free
 16719  0059EE  0012               	return	
 16720  0059F0                     i2l214:
 16721                           
 16722                           ;lcd.c: 37: else
 16723                           ;lcd.c: 38: {
 16724                           ;lcd.c: 39: LATDbits.LATD2 = 1;
 16725  0059F0  848C               	bsf	3980,2,c	;volatile
 16726                           
 16727                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
 16728  0059F2  0E74               	movlw	116
 16729  0059F4                     i2u856_47:
 16730  0059F4  2EE8               	decfsz	wreg,f,c
 16731  0059F6  D7FE               	bra	i2u856_47
 16732  0059F8  D000               	nop2	
 16733                           
 16734                           ;lcd.c: 41: lcdNibble(data);
 16735  0059FA  5005               	movf	i2putch@data,w,c
 16736  0059FC  ECE8  F029         	call	i2_lcdNibble
 16737  005A00  0012               	return	
 16738  005A02                     __end_ofi2_putch:
 16739                           	opt stack 0
 16740                           pclatu	equ	0xFFB
 16741                           pclath	equ	0xFFA
 16742                           tblptru	equ	0xFF8
 16743                           tblptrh	equ	0xFF7
 16744                           tblptrl	equ	0xFF6
 16745                           tablat	equ	0xFF5
 16746                           prodh	equ	0xFF4
 16747                           prodl	equ	0xFF3
 16748                           intcon	equ	0xFF2
 16749                           intcon3	equ	0xFF0
 16750                           postinc0	equ	0xFEE
 16751                           fsr0h	equ	0xFEA
 16752                           fsr0l	equ	0xFE9
 16753                           wreg	equ	0xFE8
 16754                           postdec1	equ	0xFE5
 16755                           fsr1h	equ	0xFE2
 16756                           fsr1l	equ	0xFE1
 16757                           indf2	equ	0xFDF
 16758                           postinc2	equ	0xFDE
 16759                           postdec2	equ	0xFDD
 16760                           fsr2h	equ	0xFDA
 16761                           fsr2l	equ	0xFD9
 16762                           status	equ	0xFD8
 16763                           
 16764 ;; *************** function i2_lcdNewline *****************
 16765 ;; Defined at:
 16766 ;;		line 78 in file "lcd.c"
 16767 ;; Parameters:    Size  Location     Type
 16768 ;;		None
 16769 ;; Auto vars:     Size  Location     Type
 16770 ;;		None
 16771 ;; Return value:  Size  Location     Type
 16772 ;;                  1    wreg      void 
 16773 ;; Registers used:
 16774 ;;		wreg, status,2, status,0, cstack
 16775 ;; Tracked objects:
 16776 ;;		On entry : 0/0
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16784 ;;Total ram usage:        0 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; Hardware stack levels required when called:    2
 16787 ;; This function calls:
 16788 ;;		i2_lcdInst
 16789 ;; This function is called by:
 16790 ;;		i2_putch
 16791 ;; This function uses a non-reentrant model
 16792 ;;
 16793                           
 16794                           	psect	text55
 16795  005A70                     __ptext55:
 16796                           	opt stack 0
 16797  005A70                     i2_lcdNewline:
 16798                           	opt stack 18
 16799                           
 16800                           ;lcd.c: 79: lcdInst(0b11000000);
 16801                           
 16802                           ;incstack = 0
 16803  005A70  0EC0               	movlw	192
 16804  005A72  EC01  F02D         	call	i2_lcdInst
 16805  005A76  0012               	return		;funcret
 16806  005A78                     __end_ofi2_lcdNewline:
 16807                           	opt stack 0
 16808                           pclatu	equ	0xFFB
 16809                           pclath	equ	0xFFA
 16810                           tblptru	equ	0xFF8
 16811                           tblptrh	equ	0xFF7
 16812                           tblptrl	equ	0xFF6
 16813                           tablat	equ	0xFF5
 16814                           prodh	equ	0xFF4
 16815                           prodl	equ	0xFF3
 16816                           intcon	equ	0xFF2
 16817                           intcon3	equ	0xFF0
 16818                           postinc0	equ	0xFEE
 16819                           fsr0h	equ	0xFEA
 16820                           fsr0l	equ	0xFE9
 16821                           wreg	equ	0xFE8
 16822                           postdec1	equ	0xFE5
 16823                           fsr1h	equ	0xFE2
 16824                           fsr1l	equ	0xFE1
 16825                           indf2	equ	0xFDF
 16826                           postinc2	equ	0xFDE
 16827                           postdec2	equ	0xFDD
 16828                           fsr2h	equ	0xFDA
 16829                           fsr2l	equ	0xFD9
 16830                           status	equ	0xFD8
 16831                           
 16832 ;; *************** function i2_isdigit *****************
 16833 ;; Defined at:
 16834 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16835 ;; Parameters:    Size  Location     Type
 16836 ;;  c               1    wreg     unsigned char 
 16837 ;; Auto vars:     Size  Location     Type
 16838 ;;  c               1    2[COMRAM] unsigned char 
 16839 ;; Return value:  Size  Location     Type
 16840 ;;		None               void
 16841 ;; Registers used:
 16842 ;;		wreg, status,2, status,0
 16843 ;; Tracked objects:
 16844 ;;		On entry : 0/0
 16845 ;;		On exit  : 0/0
 16846 ;;		Unchanged: 0/0
 16847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16849 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16850 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16851 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16852 ;;Total ram usage:        3 bytes
 16853 ;; Hardware stack levels used:    1
 16854 ;; This function calls:
 16855 ;;		Nothing
 16856 ;; This function is called by:
 16857 ;;		i2_printf
 16858 ;; This function uses a non-reentrant model
 16859 ;;
 16860                           
 16861                           	psect	text56
 16862  005A24                     __ptext56:
 16863                           	opt stack 0
 16864  005A24                     i2_isdigit:
 16865                           	opt stack 21
 16866                           
 16867                           ;incstack = 0
 16868                           ;i2isdigit@c stored from wreg
 16869  005A24  6E03               	movwf	i2isdigit@c,c
 16870  005A26  0E00               	movlw	0
 16871  005A28  6E02               	movwf	i2_isdigit$982,c
 16872  005A2A  0E3A               	movlw	58
 16873  005A2C  6003               	cpfslt	i2isdigit@c,c
 16874  005A2E  D005               	goto	i2l6360
 16875  005A30  0E2F               	movlw	47
 16876  005A32  6403               	cpfsgt	i2isdigit@c,c
 16877  005A34  D002               	goto	i2l6360
 16878  005A36  0E01               	movlw	1
 16879  005A38  6E02               	movwf	i2_isdigit$982,c
 16880  005A3A                     i2l6360:
 16881  005A3A  C002  F001         	movff	i2_isdigit$982,??i2_isdigit
 16882  005A3E  3001               	rrcf	??i2_isdigit,w,c
 16883  005A40  0012               	return	
 16884  005A42                     __end_ofi2_isdigit:
 16885                           	opt stack 0
 16886                           pclatu	equ	0xFFB
 16887                           pclath	equ	0xFFA
 16888                           tblptru	equ	0xFF8
 16889                           tblptrh	equ	0xFF7
 16890                           tblptrl	equ	0xFF6
 16891                           tablat	equ	0xFF5
 16892                           prodh	equ	0xFF4
 16893                           prodl	equ	0xFF3
 16894                           intcon	equ	0xFF2
 16895                           intcon3	equ	0xFF0
 16896                           postinc0	equ	0xFEE
 16897                           fsr0h	equ	0xFEA
 16898                           fsr0l	equ	0xFE9
 16899                           wreg	equ	0xFE8
 16900                           postdec1	equ	0xFE5
 16901                           fsr1h	equ	0xFE2
 16902                           fsr1l	equ	0xFE1
 16903                           indf2	equ	0xFDF
 16904                           postinc2	equ	0xFDE
 16905                           postdec2	equ	0xFDD
 16906                           fsr2h	equ	0xFDA
 16907                           fsr2l	equ	0xFD9
 16908                           status	equ	0xFD8
 16909                           
 16910 ;; *************** function i2_fround *****************
 16911 ;; Defined at:
 16912 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 16913 ;; Parameters:    Size  Location     Type
 16914 ;;  prec            1    wreg     unsigned char 
 16915 ;; Auto vars:     Size  Location     Type
 16916 ;;  prec            1   44[COMRAM] unsigned char 
 16917 ;; Return value:  Size  Location     Type
 16918 ;;                  3   35[COMRAM] unsigned char 
 16919 ;; Registers used:
 16920 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16921 ;; Tracked objects:
 16922 ;;		On entry : 0/0
 16923 ;;		On exit  : 0/0
 16924 ;;		Unchanged: 0/0
 16925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16926 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16927 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16929 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16930 ;;Total ram usage:       10 bytes
 16931 ;; Hardware stack levels used:    1
 16932 ;; Hardware stack levels required when called:    2
 16933 ;; This function calls:
 16934 ;;		i2___awdiv
 16935 ;;		i2___awmod
 16936 ;;		i2___ftmul
 16937 ;;		i2___wmul
 16938 ;; This function is called by:
 16939 ;;		i2_printf
 16940 ;; This function uses a non-reentrant model
 16941 ;;
 16942                           
 16943                           	psect	text57
 16944  00303E                     __ptext57:
 16945                           	opt stack 0
 16946  00303E                     i2_fround:
 16947                           	opt stack 19
 16948                           
 16949                           ;incstack = 0
 16950                           ;i2fround@prec stored from wreg
 16951  00303E  6E2D               	movwf	i2fround@prec,c
 16952                           
 16953                           ;doprnt.c: 413: if(prec>=110)
 16954  003040  0E6D               	movlw	109
 16955  003042  642D               	cpfsgt	i2fround@prec,c
 16956  003044  D09F               	goto	i2l6110
 16957                           
 16958                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16959  003046  0E00               	movlw	0
 16960  003048  6E12               	movwf	i2___wmul@multiplicand+1,c
 16961  00304A  0E03               	movlw	3
 16962  00304C  6E11               	movwf	i2___wmul@multiplicand,c
 16963  00304E  0E00               	movlw	0
 16964  003050  6E0A               	movwf	i2___awdiv@divisor+1,c
 16965  003052  0E0A               	movlw	10
 16966  003054  6E09               	movwf	i2___awdiv@divisor,c
 16967  003056  0E00               	movlw	0
 16968  003058  6E04               	movwf	i2___awmod@divisor+1,c
 16969  00305A  0E64               	movlw	100
 16970  00305C  6E03               	movwf	i2___awmod@divisor,c
 16971  00305E  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 16972  003062  6A02               	clrf	i2___awmod@dividend+1,c
 16973  003064  EC7D  F029         	call	i2___awmod	;wreg free
 16974  003068  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 16975  00306C  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 16976  003070  EC80  F028         	call	i2___awdiv	;wreg free
 16977  003074  0E09               	movlw	9
 16978  003076  2407               	addwf	?i2___awdiv,w,c
 16979  003078  6E0F               	movwf	i2___wmul@multiplier,c
 16980  00307A  0E00               	movlw	0
 16981  00307C  2008               	addwfc	?i2___awdiv+1,w,c
 16982  00307E  6E10               	movwf	i2___wmul@multiplier+1,c
 16983  003080  ECCB  F02C         	call	i2___wmul	;wreg free
 16984  003084  0E51               	movlw	low __npowers_
 16985  003086  240F               	addwf	?i2___wmul,w,c
 16986  003088  6EF6               	movwf	tblptrl,c
 16987  00308A  0EFE               	movlw	high __npowers_
 16988  00308C  2010               	addwfc	?i2___wmul+1,w,c
 16989  00308E  6EF7               	movwf	tblptrh,c
 16990  003090                     	if	0	;There are less than 3 active tblptr bytes
 16991  003090                     	endif
 16992  003090  0009               	tblrd		*+
 16993  003092  CFF5 F018          	movff	tablat,i2___ftmul@f2
 16994  003096  0009               	tblrd		*+
 16995  003098  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 16996  00309C  000A               	tblrd		*-
 16997  00309E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 16998  0030A2  0E00               	movlw	0
 16999  0030A4  6E0A               	movwf	i2___awdiv@divisor+1,c
 17000  0030A6  0E64               	movlw	100
 17001  0030A8  6E09               	movwf	i2___awdiv@divisor,c
 17002  0030AA  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 17003  0030AE  6A08               	clrf	i2___awdiv@dividend+1,c
 17004  0030B0  EC80  F028         	call	i2___awdiv	;wreg free
 17005  0030B4  0E12               	movlw	18
 17006  0030B6  2407               	addwf	?i2___awdiv,w,c
 17007  0030B8  6E0F               	movwf	i2___wmul@multiplier,c
 17008  0030BA  0E00               	movlw	0
 17009  0030BC  2008               	addwfc	?i2___awdiv+1,w,c
 17010  0030BE  6E10               	movwf	i2___wmul@multiplier+1,c
 17011  0030C0  0E00               	movlw	0
 17012  0030C2  6E12               	movwf	i2___wmul@multiplicand+1,c
 17013  0030C4  0E03               	movlw	3
 17014  0030C6  6E11               	movwf	i2___wmul@multiplicand,c
 17015  0030C8  ECCB  F02C         	call	i2___wmul	;wreg free
 17016  0030CC  0E51               	movlw	low __npowers_
 17017  0030CE  240F               	addwf	?i2___wmul,w,c
 17018  0030D0  6EF6               	movwf	tblptrl,c
 17019  0030D2  0EFE               	movlw	high __npowers_
 17020  0030D4  2010               	addwfc	?i2___wmul+1,w,c
 17021  0030D6  6EF7               	movwf	tblptrh,c
 17022  0030D8                     	if	0	;There are less than 3 active tblptr bytes
 17023  0030D8                     	endif
 17024  0030D8  0009               	tblrd		*+
 17025  0030DA  CFF5 F015          	movff	tablat,i2___ftmul@f1
 17026  0030DE  0009               	tblrd		*+
 17027  0030E0  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 17028  0030E4  000A               	tblrd		*-
 17029  0030E6  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 17030  0030EA  EC51  F023         	call	i2___ftmul	;wreg free
 17031  0030EE  C015  F02A         	movff	?i2___ftmul,i2_fround$1546
 17032  0030F2  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1546+1
 17033  0030F6  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1546+2
 17034                           
 17035                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 17036  0030FA  0E00               	movlw	0
 17037  0030FC  6E12               	movwf	i2___wmul@multiplicand+1,c
 17038  0030FE  0E03               	movlw	3
 17039  003100  6E11               	movwf	i2___wmul@multiplicand,c
 17040  003102  0E00               	movlw	0
 17041  003104  6E04               	movwf	i2___awmod@divisor+1,c
 17042  003106  0E0A               	movlw	10
 17043  003108  6E03               	movwf	i2___awmod@divisor,c
 17044  00310A  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 17045  00310E  6A02               	clrf	i2___awmod@dividend+1,c
 17046  003110  EC7D  F029         	call	i2___awmod	;wreg free
 17047  003114  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 17048  003118  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 17049  00311C  ECCB  F02C         	call	i2___wmul	;wreg free
 17050  003120  0E51               	movlw	low __npowers_
 17051  003122  240F               	addwf	?i2___wmul,w,c
 17052  003124  6EF6               	movwf	tblptrl,c
 17053  003126  0EFE               	movlw	high __npowers_
 17054  003128  2010               	addwfc	?i2___wmul+1,w,c
 17055  00312A  6EF7               	movwf	tblptrh,c
 17056  00312C                     	if	0	;There are less than 3 active tblptr bytes
 17057  00312C                     	endif
 17058  00312C  0009               	tblrd		*+
 17059  00312E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 17060  003132  0009               	tblrd		*+
 17061  003134  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 17062  003138  000A               	tblrd		*-
 17063  00313A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 17064  00313E  C02A  F015         	movff	i2_fround$1546,i2___ftmul@f1
 17065  003142  C02B  F016         	movff	i2_fround$1546+1,i2___ftmul@f1+1
 17066  003146  C02C  F017         	movff	i2_fround$1546+2,i2___ftmul@f1+2
 17067  00314A  EC51  F023         	call	i2___ftmul	;wreg free
 17068  00314E  C015  F027         	movff	?i2___ftmul,i2_fround$1547
 17069  003152  C016  F028         	movff	?i2___ftmul+1,i2_fround$1547+1
 17070  003156  C017  F029         	movff	?i2___ftmul+2,i2_fround$1547+2
 17071                           
 17072                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 17073  00315A  C027  F015         	movff	i2_fround$1547,i2___ftmul@f1
 17074  00315E  C028  F016         	movff	i2_fround$1547+1,i2___ftmul@f1+1
 17075  003162  C029  F017         	movff	i2_fround$1547+2,i2___ftmul@f1+2
 17076  003166  0E00               	movlw	0
 17077  003168  6E18               	movwf	i2___ftmul@f2,c
 17078  00316A  0E00               	movlw	0
 17079  00316C  6E19               	movwf	i2___ftmul@f2+1,c
 17080  00316E  0E3F               	movlw	63
 17081  003170  6E1A               	movwf	i2___ftmul@f2+2,c
 17082  003172  EC51  F023         	call	i2___ftmul	;wreg free
 17083  003176  C015  F024         	movff	?i2___ftmul,?i2_fround
 17084  00317A  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 17085  00317E  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 17086  003182  0012               	return	
 17087  003184                     i2l6110:
 17088                           
 17089                           ;doprnt.c: 415: else if(prec > 10)
 17090  003184  0E0A               	movlw	10
 17091  003186  642D               	cpfsgt	i2fround@prec,c
 17092  003188  D05D               	goto	i2l6118
 17093                           
 17094                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 17095  00318A  0E00               	movlw	0
 17096  00318C  6E12               	movwf	i2___wmul@multiplicand+1,c
 17097  00318E  0E03               	movlw	3
 17098  003190  6E11               	movwf	i2___wmul@multiplicand,c
 17099  003192  0E00               	movlw	0
 17100  003194  6E04               	movwf	i2___awmod@divisor+1,c
 17101  003196  0E0A               	movlw	10
 17102  003198  6E03               	movwf	i2___awmod@divisor,c
 17103  00319A  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 17104  00319E  6A02               	clrf	i2___awmod@dividend+1,c
 17105  0031A0  EC7D  F029         	call	i2___awmod	;wreg free
 17106  0031A4  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 17107  0031A8  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 17108  0031AC  ECCB  F02C         	call	i2___wmul	;wreg free
 17109  0031B0  0E51               	movlw	low __npowers_
 17110  0031B2  240F               	addwf	?i2___wmul,w,c
 17111  0031B4  6EF6               	movwf	tblptrl,c
 17112  0031B6  0EFE               	movlw	high __npowers_
 17113  0031B8  2010               	addwfc	?i2___wmul+1,w,c
 17114  0031BA  6EF7               	movwf	tblptrh,c
 17115  0031BC                     	if	0	;There are less than 3 active tblptr bytes
 17116  0031BC                     	endif
 17117  0031BC  0009               	tblrd		*+
 17118  0031BE  CFF5 F018          	movff	tablat,i2___ftmul@f2
 17119  0031C2  0009               	tblrd		*+
 17120  0031C4  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 17121  0031C8  000A               	tblrd		*-
 17122  0031CA  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 17123  0031CE  0E00               	movlw	0
 17124  0031D0  6E0A               	movwf	i2___awdiv@divisor+1,c
 17125  0031D2  0E0A               	movlw	10
 17126  0031D4  6E09               	movwf	i2___awdiv@divisor,c
 17127  0031D6  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 17128  0031DA  6A08               	clrf	i2___awdiv@dividend+1,c
 17129  0031DC  EC80  F028         	call	i2___awdiv	;wreg free
 17130  0031E0  0E09               	movlw	9
 17131  0031E2  2407               	addwf	?i2___awdiv,w,c
 17132  0031E4  6E0F               	movwf	i2___wmul@multiplier,c
 17133  0031E6  0E00               	movlw	0
 17134  0031E8  2008               	addwfc	?i2___awdiv+1,w,c
 17135  0031EA  6E10               	movwf	i2___wmul@multiplier+1,c
 17136  0031EC  0E00               	movlw	0
 17137  0031EE  6E12               	movwf	i2___wmul@multiplicand+1,c
 17138  0031F0  0E03               	movlw	3
 17139  0031F2  6E11               	movwf	i2___wmul@multiplicand,c
 17140  0031F4  ECCB  F02C         	call	i2___wmul	;wreg free
 17141  0031F8  0E51               	movlw	low __npowers_
 17142  0031FA  240F               	addwf	?i2___wmul,w,c
 17143  0031FC  6EF6               	movwf	tblptrl,c
 17144  0031FE  0EFE               	movlw	high __npowers_
 17145  003200  2010               	addwfc	?i2___wmul+1,w,c
 17146  003202  6EF7               	movwf	tblptrh,c
 17147  003204                     	if	0	;There are less than 3 active tblptr bytes
 17148  003204                     	endif
 17149  003204  0009               	tblrd		*+
 17150  003206  CFF5 F015          	movff	tablat,i2___ftmul@f1
 17151  00320A  0009               	tblrd		*+
 17152  00320C  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 17153  003210  000A               	tblrd		*-
 17154  003212  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 17155  003216  EC51  F023         	call	i2___ftmul	;wreg free
 17156  00321A  C015  F02A         	movff	?i2___ftmul,i2_fround$1546
 17157  00321E  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1546+1
 17158  003222  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1546+2
 17159                           
 17160                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 17161  003226  C02A  F015         	movff	i2_fround$1546,i2___ftmul@f1
 17162  00322A  C02B  F016         	movff	i2_fround$1546+1,i2___ftmul@f1+1
 17163  00322E  C02C  F017         	movff	i2_fround$1546+2,i2___ftmul@f1+2
 17164  003232  0E00               	movlw	0
 17165  003234  6E18               	movwf	i2___ftmul@f2,c
 17166  003236  0E00               	movlw	0
 17167  003238  6E19               	movwf	i2___ftmul@f2+1,c
 17168  00323A  0E3F               	movlw	63
 17169  00323C  6E1A               	movwf	i2___ftmul@f2+2,c
 17170  00323E  EC51  F023         	call	i2___ftmul	;wreg free
 17171  003242  D799               	goto	L13
 17172  003244                     i2l6118:
 17173                           
 17174                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 17175  003244  502D               	movf	i2fround@prec,w,c
 17176  003246  0D03               	mullw	3
 17177  003248  0E51               	movlw	low __npowers_
 17178  00324A  24F3               	addwf	prodl,w,c
 17179  00324C  6EF6               	movwf	tblptrl,c
 17180  00324E  0EFE               	movlw	high __npowers_
 17181  003250  20F4               	addwfc	prodh,w,c
 17182  003252  6EF7               	movwf	tblptrh,c
 17183  003254                     	if	0	;There are less than 3 active tblptr bytes
 17184  003254                     	endif
 17185  003254  0009               	tblrd		*+
 17186  003256  CFF5 F015          	movff	tablat,i2___ftmul@f1
 17187  00325A  0009               	tblrd		*+
 17188  00325C  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 17189  003260  000A               	tblrd		*-
 17190  003262  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 17191  003266  0E00               	movlw	0
 17192  003268  6E18               	movwf	i2___ftmul@f2,c
 17193  00326A  0E00               	movlw	0
 17194  00326C  6E19               	movwf	i2___ftmul@f2+1,c
 17195  00326E  0E3F               	movlw	63
 17196  003270  6E1A               	movwf	i2___ftmul@f2+2,c
 17197  003272  EC51  F023         	call	i2___ftmul	;wreg free
 17198  003276  C015  F024         	movff	?i2___ftmul,?i2_fround
 17199  00327A  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 17200  00327E  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 17201  003282  0012               	return	
 17202  003284                     __end_ofi2_fround:
 17203                           	opt stack 0
 17204                           pclatu	equ	0xFFB
 17205                           pclath	equ	0xFFA
 17206                           tblptru	equ	0xFF8
 17207                           tblptrh	equ	0xFF7
 17208                           tblptrl	equ	0xFF6
 17209                           tablat	equ	0xFF5
 17210                           prodh	equ	0xFF4
 17211                           prodl	equ	0xFF3
 17212                           intcon	equ	0xFF2
 17213                           intcon3	equ	0xFF0
 17214                           postinc0	equ	0xFEE
 17215                           fsr0h	equ	0xFEA
 17216                           fsr0l	equ	0xFE9
 17217                           wreg	equ	0xFE8
 17218                           postdec1	equ	0xFE5
 17219                           fsr1h	equ	0xFE2
 17220                           fsr1l	equ	0xFE1
 17221                           indf2	equ	0xFDF
 17222                           postinc2	equ	0xFDE
 17223                           postdec2	equ	0xFDD
 17224                           fsr2h	equ	0xFDA
 17225                           fsr2l	equ	0xFD9
 17226                           status	equ	0xFD8
 17227                           
 17228 ;; *************** function i2___wmul *****************
 17229 ;; Defined at:
 17230 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 17231 ;; Parameters:    Size  Location     Type
 17232 ;;  multiplier      2   14[COMRAM] unsigned int 
 17233 ;;  multiplicand    2   16[COMRAM] unsigned int 
 17234 ;; Auto vars:     Size  Location     Type
 17235 ;;  __wmul          2   18[COMRAM] unsigned int 
 17236 ;; Return value:  Size  Location     Type
 17237 ;;                  2   14[COMRAM] unsigned int 
 17238 ;; Registers used:
 17239 ;;		wreg, status,2, status,0, prodl, prodh
 17240 ;; Tracked objects:
 17241 ;;		On entry : 0/0
 17242 ;;		On exit  : 0/0
 17243 ;;		Unchanged: 0/0
 17244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17245 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17248 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17249 ;;Total ram usage:        6 bytes
 17250 ;; Hardware stack levels used:    1
 17251 ;; This function calls:
 17252 ;;		Nothing
 17253 ;; This function is called by:
 17254 ;;		i2_fround
 17255 ;;		i2_scale
 17256 ;;		i2_printf
 17257 ;; This function uses a non-reentrant model
 17258 ;;
 17259                           
 17260                           	psect	text58
 17261  005996                     __ptext58:
 17262                           	opt stack 0
 17263  005996                     i2___wmul:
 17264                           	opt stack 20
 17265                           
 17266                           ;incstack = 0
 17267  005996  500F               	movf	i2___wmul@multiplier,w,c
 17268  005998  0211               	mulwf	i2___wmul@multiplicand,c
 17269  00599A  CFF3 F013          	movff	prodl,i2___wmul@product
 17270  00599E  CFF4 F014          	movff	prodh,i2___wmul@product+1
 17271  0059A2  500F               	movf	i2___wmul@multiplier,w,c
 17272  0059A4  0212               	mulwf	i2___wmul@multiplicand+1,c
 17273  0059A6  50F3               	movf	prodl,w,c
 17274  0059A8  2614               	addwf	i2___wmul@product+1,f,c
 17275  0059AA  5010               	movf	i2___wmul@multiplier+1,w,c
 17276  0059AC  0211               	mulwf	i2___wmul@multiplicand,c
 17277  0059AE  50F3               	movf	prodl,w,c
 17278  0059B0  2614               	addwf	i2___wmul@product+1,f,c
 17279  0059B2  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 17280  0059B6  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 17281  0059BA  0012               	return	
 17282  0059BC                     __end_ofi2___wmul:
 17283                           	opt stack 0
 17284                           pclatu	equ	0xFFB
 17285                           pclath	equ	0xFFA
 17286                           tblptru	equ	0xFF8
 17287                           tblptrh	equ	0xFF7
 17288                           tblptrl	equ	0xFF6
 17289                           tablat	equ	0xFF5
 17290                           prodh	equ	0xFF4
 17291                           prodl	equ	0xFF3
 17292                           intcon	equ	0xFF2
 17293                           intcon3	equ	0xFF0
 17294                           postinc0	equ	0xFEE
 17295                           fsr0h	equ	0xFEA
 17296                           fsr0l	equ	0xFE9
 17297                           wreg	equ	0xFE8
 17298                           postdec1	equ	0xFE5
 17299                           fsr1h	equ	0xFE2
 17300                           fsr1l	equ	0xFE1
 17301                           indf2	equ	0xFDF
 17302                           postinc2	equ	0xFDE
 17303                           postdec2	equ	0xFDD
 17304                           fsr2h	equ	0xFDA
 17305                           fsr2l	equ	0xFD9
 17306                           status	equ	0xFD8
 17307                           
 17308 ;; *************** function i2___ftmul *****************
 17309 ;; Defined at:
 17310 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 17311 ;; Parameters:    Size  Location     Type
 17312 ;;  f1              3   20[COMRAM] float 
 17313 ;;  f2              3   23[COMRAM] float 
 17314 ;; Auto vars:     Size  Location     Type
 17315 ;;  __ftmul         3   30[COMRAM] unsigned um
 17316 ;;  __ftmul         1   34[COMRAM] unsigned char 
 17317 ;;  __ftmul         1   33[COMRAM] unsigned char 
 17318 ;;  __ftmul         1   29[COMRAM] unsigned char 
 17319 ;; Return value:  Size  Location     Type
 17320 ;;                  3   20[COMRAM] float 
 17321 ;; Registers used:
 17322 ;;		wreg, status,2, status,0, cstack
 17323 ;; Tracked objects:
 17324 ;;		On entry : 0/0
 17325 ;;		On exit  : 0/0
 17326 ;;		Unchanged: 0/0
 17327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17328 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17329 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17330 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17331 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17332 ;;Total ram usage:       15 bytes
 17333 ;; Hardware stack levels used:    1
 17334 ;; Hardware stack levels required when called:    1
 17335 ;; This function calls:
 17336 ;;		i2___ftpack
 17337 ;; This function is called by:
 17338 ;;		i2_fround
 17339 ;;		i2_scale
 17340 ;;		i2_printf
 17341 ;; This function uses a non-reentrant model
 17342 ;;
 17343                           
 17344                           	psect	text59
 17345  0046A2                     __ptext59:
 17346                           	opt stack 0
 17347  0046A2                     i2___ftmul:
 17348                           	opt stack 19
 17349                           
 17350                           ;incstack = 0
 17351  0046A2  C017  F01B         	movff	i2___ftmul@f1+2,??i2___ftmul
 17352  0046A6  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 17353  0046A8  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 17354  0046AA  3416               	rlcf	i2___ftmul@f1+1,w,c
 17355  0046AC  361B               	rlcf	??i2___ftmul& (0+255),f,c
 17356  0046AE  E301               	bnc	u640_41
 17357  0046B0  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 17358  0046B2                     u640_41:
 17359  0046B2  501B               	movf	??i2___ftmul,w,c
 17360  0046B4  6E1E               	movwf	i2___ftmul@exp,c
 17361  0046B6  501E               	movf	i2___ftmul@exp,w,c
 17362  0046B8  A4D8               	btfss	status,2,c
 17363  0046BA  D007               	goto	i2l5824
 17364  0046BC  0E00               	movlw	0
 17365  0046BE  6E15               	movwf	?i2___ftmul,c
 17366  0046C0  0E00               	movlw	0
 17367  0046C2  6E16               	movwf	?i2___ftmul+1,c
 17368  0046C4  0E00               	movlw	0
 17369  0046C6  6E17               	movwf	?i2___ftmul+2,c
 17370  0046C8  0012               	return	
 17371  0046CA                     i2l5824:
 17372  0046CA  C01A  F01B         	movff	i2___ftmul@f2+2,??i2___ftmul
 17373  0046CE  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 17374  0046D0  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 17375  0046D2  3419               	rlcf	i2___ftmul@f2+1,w,c
 17376  0046D4  361B               	rlcf	??i2___ftmul& (0+255),f,c
 17377  0046D6  E301               	bnc	u642_41
 17378  0046D8  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 17379  0046DA                     u642_41:
 17380  0046DA  501B               	movf	??i2___ftmul,w,c
 17381  0046DC  6E23               	movwf	i2___ftmul@sign,c
 17382  0046DE  5023               	movf	i2___ftmul@sign,w,c
 17383  0046E0  A4D8               	btfss	status,2,c
 17384  0046E2  D007               	goto	i2l5830
 17385  0046E4  0E00               	movlw	0
 17386  0046E6  6E15               	movwf	?i2___ftmul,c
 17387  0046E8  0E00               	movlw	0
 17388  0046EA  6E16               	movwf	?i2___ftmul+1,c
 17389  0046EC  0E00               	movlw	0
 17390  0046EE  6E17               	movwf	?i2___ftmul+2,c
 17391  0046F0  0012               	return	
 17392  0046F2                     i2l5830:
 17393  0046F2  5023               	movf	i2___ftmul@sign,w,c
 17394  0046F4  0F7B               	addlw	123
 17395  0046F6  261E               	addwf	i2___ftmul@exp,f,c
 17396  0046F8  C017  F023         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 17397  0046FC  501A               	movf	i2___ftmul@f2+2,w,c
 17398  0046FE  1A23               	xorwf	i2___ftmul@sign,f,c
 17399  004700  0E80               	movlw	128
 17400  004702  1623               	andwf	i2___ftmul@sign,f,c
 17401  004704  8E16               	bsf	i2___ftmul@f1+1,7,c
 17402  004706  8E19               	bsf	i2___ftmul@f2+1,7,c
 17403  004708  0EFF               	movlw	255
 17404  00470A  1618               	andwf	i2___ftmul@f2,f,c
 17405  00470C  0EFF               	movlw	255
 17406  00470E  1619               	andwf	i2___ftmul@f2+1,f,c
 17407  004710  0E00               	movlw	0
 17408  004712  161A               	andwf	i2___ftmul@f2+2,f,c
 17409  004714  0E00               	movlw	0
 17410  004716  6E1F               	movwf	i2___ftmul@f3_as_product,c
 17411  004718  0E00               	movlw	0
 17412  00471A  6E20               	movwf	i2___ftmul@f3_as_product+1,c
 17413  00471C  0E00               	movlw	0
 17414  00471E  6E21               	movwf	i2___ftmul@f3_as_product+2,c
 17415  004720  0E07               	movlw	7
 17416  004722  6E22               	movwf	i2___ftmul@cntr,c
 17417  004724                     i2l5844:
 17418  004724  A015               	btfss	i2___ftmul@f1,0,c
 17419  004726  D006               	goto	i2l5848
 17420  004728  5018               	movf	i2___ftmul@f2,w,c
 17421  00472A  261F               	addwf	i2___ftmul@f3_as_product,f,c
 17422  00472C  5019               	movf	i2___ftmul@f2+1,w,c
 17423  00472E  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 17424  004730  501A               	movf	i2___ftmul@f2+2,w,c
 17425  004732  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 17426  004734                     i2l5848:
 17427  004734  90D8               	bcf	status,0,c
 17428  004736  3217               	rrcf	i2___ftmul@f1+2,f,c
 17429  004738  3216               	rrcf	i2___ftmul@f1+1,f,c
 17430  00473A  3215               	rrcf	i2___ftmul@f1,f,c
 17431  00473C  90D8               	bcf	status,0,c
 17432  00473E  3618               	rlcf	i2___ftmul@f2,f,c
 17433  004740  3619               	rlcf	i2___ftmul@f2+1,f,c
 17434  004742  361A               	rlcf	i2___ftmul@f2+2,f,c
 17435  004744  2E22               	decfsz	i2___ftmul@cntr,f,c
 17436  004746  D7EE               	goto	i2l5844
 17437  004748  0E09               	movlw	9
 17438  00474A  6E22               	movwf	i2___ftmul@cntr,c
 17439  00474C                     i2l5854:
 17440  00474C  A015               	btfss	i2___ftmul@f1,0,c
 17441  00474E  D006               	goto	i2l5858
 17442  004750  5018               	movf	i2___ftmul@f2,w,c
 17443  004752  261F               	addwf	i2___ftmul@f3_as_product,f,c
 17444  004754  5019               	movf	i2___ftmul@f2+1,w,c
 17445  004756  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 17446  004758  501A               	movf	i2___ftmul@f2+2,w,c
 17447  00475A  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 17448  00475C                     i2l5858:
 17449  00475C  90D8               	bcf	status,0,c
 17450  00475E  3217               	rrcf	i2___ftmul@f1+2,f,c
 17451  004760  3216               	rrcf	i2___ftmul@f1+1,f,c
 17452  004762  3215               	rrcf	i2___ftmul@f1,f,c
 17453  004764  90D8               	bcf	status,0,c
 17454  004766  3221               	rrcf	i2___ftmul@f3_as_product+2,f,c
 17455  004768  3220               	rrcf	i2___ftmul@f3_as_product+1,f,c
 17456  00476A  321F               	rrcf	i2___ftmul@f3_as_product,f,c
 17457  00476C  2E22               	decfsz	i2___ftmul@cntr,f,c
 17458  00476E  D7EE               	goto	i2l5854
 17459  004770  C01F  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 17460  004774  C020  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 17461  004778  C021  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 17462  00477C  C01E  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 17463  004780  C023  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 17464  004784  ECAD  F026         	call	i2___ftpack	;wreg free
 17465  004788  C001  F015         	movff	?i2___ftpack,?i2___ftmul
 17466  00478C  C002  F016         	movff	?i2___ftpack+1,?i2___ftmul+1
 17467  004790  C003  F017         	movff	?i2___ftpack+2,?i2___ftmul+2
 17468  004794  0012               	return	
 17469  004796                     __end_ofi2___ftmul:
 17470                           	opt stack 0
 17471                           pclatu	equ	0xFFB
 17472                           pclath	equ	0xFFA
 17473                           tblptru	equ	0xFF8
 17474                           tblptrh	equ	0xFF7
 17475                           tblptrl	equ	0xFF6
 17476                           tablat	equ	0xFF5
 17477                           prodh	equ	0xFF4
 17478                           prodl	equ	0xFF3
 17479                           intcon	equ	0xFF2
 17480                           intcon3	equ	0xFF0
 17481                           postinc0	equ	0xFEE
 17482                           fsr0h	equ	0xFEA
 17483                           fsr0l	equ	0xFE9
 17484                           wreg	equ	0xFE8
 17485                           postdec1	equ	0xFE5
 17486                           fsr1h	equ	0xFE2
 17487                           fsr1l	equ	0xFE1
 17488                           indf2	equ	0xFDF
 17489                           postinc2	equ	0xFDE
 17490                           postdec2	equ	0xFDD
 17491                           fsr2h	equ	0xFDA
 17492                           fsr2l	equ	0xFD9
 17493                           status	equ	0xFD8
 17494                           
 17495 ;; *************** function i2___awdiv *****************
 17496 ;; Defined at:
 17497 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 17498 ;; Parameters:    Size  Location     Type
 17499 ;;  dividend        2    6[COMRAM] int 
 17500 ;;  divisor         2    8[COMRAM] int 
 17501 ;; Auto vars:     Size  Location     Type
 17502 ;;  __awdiv         2   12[COMRAM] int 
 17503 ;;  __awdiv         1   11[COMRAM] unsigned char 
 17504 ;;  __awdiv         1   10[COMRAM] unsigned char 
 17505 ;; Return value:  Size  Location     Type
 17506 ;;                  2    6[COMRAM] int 
 17507 ;; Registers used:
 17508 ;;		wreg, status,2, status,0
 17509 ;; Tracked objects:
 17510 ;;		On entry : 0/0
 17511 ;;		On exit  : 0/0
 17512 ;;		Unchanged: 0/0
 17513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17514 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17515 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17517 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17518 ;;Total ram usage:        8 bytes
 17519 ;; Hardware stack levels used:    1
 17520 ;; This function calls:
 17521 ;;		Nothing
 17522 ;; This function is called by:
 17523 ;;		i2_fround
 17524 ;;		i2_scale
 17525 ;;		i2_printf
 17526 ;; This function uses a non-reentrant model
 17527 ;;
 17528                           
 17529                           	psect	text60
 17530  005100                     __ptext60:
 17531                           	opt stack 0
 17532  005100                     i2___awdiv:
 17533                           	opt stack 20
 17534                           
 17535                           ;incstack = 0
 17536  005100  0E00               	movlw	0
 17537  005102  6E0C               	movwf	i2___awdiv@sign,c
 17538  005104  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 17539  005106  D006               	goto	i2l5676
 17540  005108  6C09               	negf	i2___awdiv@divisor,c
 17541  00510A  1E0A               	comf	i2___awdiv@divisor+1,f,c
 17542  00510C  B0D8               	btfsc	status,0,c
 17543  00510E  2A0A               	incf	i2___awdiv@divisor+1,f,c
 17544  005110  0E01               	movlw	1
 17545  005112  6E0C               	movwf	i2___awdiv@sign,c
 17546  005114                     i2l5676:
 17547  005114  AE08               	btfss	i2___awdiv@dividend+1,7,c
 17548  005116  D006               	goto	i2l5682
 17549  005118  6C07               	negf	i2___awdiv@dividend,c
 17550  00511A  1E08               	comf	i2___awdiv@dividend+1,f,c
 17551  00511C  B0D8               	btfsc	status,0,c
 17552  00511E  2A08               	incf	i2___awdiv@dividend+1,f,c
 17553  005120  0E01               	movlw	1
 17554  005122  1A0C               	xorwf	i2___awdiv@sign,f,c
 17555  005124                     i2l5682:
 17556  005124  0E00               	movlw	0
 17557  005126  6E0E               	movwf	i2___awdiv@quotient+1,c
 17558  005128  0E00               	movlw	0
 17559  00512A  6E0D               	movwf	i2___awdiv@quotient,c
 17560  00512C  5009               	movf	i2___awdiv@divisor,w,c
 17561  00512E  100A               	iorwf	i2___awdiv@divisor+1,w,c
 17562  005130  B4D8               	btfsc	status,2,c
 17563  005132  D01C               	goto	i2l5704
 17564  005134  0E01               	movlw	1
 17565  005136  6E0B               	movwf	i2___awdiv@counter,c
 17566  005138  D004               	goto	i2l5690
 17567  00513A                     i2l5688:
 17568  00513A  90D8               	bcf	status,0,c
 17569  00513C  3609               	rlcf	i2___awdiv@divisor,f,c
 17570  00513E  360A               	rlcf	i2___awdiv@divisor+1,f,c
 17571  005140  2A0B               	incf	i2___awdiv@counter,f,c
 17572  005142                     i2l5690:
 17573  005142  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 17574  005144  D7FA               	goto	i2l5688
 17575  005146                     i2l5692:
 17576  005146  90D8               	bcf	status,0,c
 17577  005148  360D               	rlcf	i2___awdiv@quotient,f,c
 17578  00514A  360E               	rlcf	i2___awdiv@quotient+1,f,c
 17579  00514C  5009               	movf	i2___awdiv@divisor,w,c
 17580  00514E  5C07               	subwf	i2___awdiv@dividend,w,c
 17581  005150  500A               	movf	i2___awdiv@divisor+1,w,c
 17582  005152  5808               	subwfb	i2___awdiv@dividend+1,w,c
 17583  005154  A0D8               	btfss	status,0,c
 17584  005156  D005               	goto	i2l5700
 17585  005158  5009               	movf	i2___awdiv@divisor,w,c
 17586  00515A  5E07               	subwf	i2___awdiv@dividend,f,c
 17587  00515C  500A               	movf	i2___awdiv@divisor+1,w,c
 17588  00515E  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 17589  005160  800D               	bsf	i2___awdiv@quotient,0,c
 17590  005162                     i2l5700:
 17591  005162  90D8               	bcf	status,0,c
 17592  005164  320A               	rrcf	i2___awdiv@divisor+1,f,c
 17593  005166  3209               	rrcf	i2___awdiv@divisor,f,c
 17594  005168  2E0B               	decfsz	i2___awdiv@counter,f,c
 17595  00516A  D7ED               	goto	i2l5692
 17596  00516C                     i2l5704:
 17597  00516C  500C               	movf	i2___awdiv@sign,w,c
 17598  00516E  B4D8               	btfsc	status,2,c
 17599  005170  D004               	goto	i2l5708
 17600  005172  6C0D               	negf	i2___awdiv@quotient,c
 17601  005174  1E0E               	comf	i2___awdiv@quotient+1,f,c
 17602  005176  B0D8               	btfsc	status,0,c
 17603  005178  2A0E               	incf	i2___awdiv@quotient+1,f,c
 17604  00517A                     i2l5708:
 17605  00517A  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 17606  00517E  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 17607  005182  0012               	return	
 17608  005184                     __end_ofi2___awdiv:
 17609                           	opt stack 0
 17610                           pclatu	equ	0xFFB
 17611                           pclath	equ	0xFFA
 17612                           tblptru	equ	0xFF8
 17613                           tblptrh	equ	0xFF7
 17614                           tblptrl	equ	0xFF6
 17615                           tablat	equ	0xFF5
 17616                           prodh	equ	0xFF4
 17617                           prodl	equ	0xFF3
 17618                           intcon	equ	0xFF2
 17619                           intcon3	equ	0xFF0
 17620                           postinc0	equ	0xFEE
 17621                           fsr0h	equ	0xFEA
 17622                           fsr0l	equ	0xFE9
 17623                           wreg	equ	0xFE8
 17624                           postdec1	equ	0xFE5
 17625                           fsr1h	equ	0xFE2
 17626                           fsr1l	equ	0xFE1
 17627                           indf2	equ	0xFDF
 17628                           postinc2	equ	0xFDE
 17629                           postdec2	equ	0xFDD
 17630                           fsr2h	equ	0xFDA
 17631                           fsr2l	equ	0xFD9
 17632                           status	equ	0xFD8
 17633                           
 17634 ;; *************** function i2__tdiv_to_l_ *****************
 17635 ;; Defined at:
 17636 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 17637 ;; Parameters:    Size  Location     Type
 17638 ;;  f1              3    0[COMRAM] float 
 17639 ;;  f2              3    3[COMRAM] float 
 17640 ;; Auto vars:     Size  Location     Type
 17641 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 17642 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 17643 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 17644 ;; Return value:  Size  Location     Type
 17645 ;;                  4    0[COMRAM] unsigned long 
 17646 ;; Registers used:
 17647 ;;		wreg, status,2, status,0
 17648 ;; Tracked objects:
 17649 ;;		On entry : 0/0
 17650 ;;		On exit  : 0/0
 17651 ;;		Unchanged: 0/0
 17652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17653 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17654 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17655 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17656 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17657 ;;Total ram usage:       15 bytes
 17658 ;; Hardware stack levels used:    1
 17659 ;; This function calls:
 17660 ;;		Nothing
 17661 ;; This function is called by:
 17662 ;;		i2_printf
 17663 ;; This function uses a non-reentrant model
 17664 ;;
 17665                           
 17666                           	psect	text61
 17667  003DE4                     __ptext61:
 17668                           	opt stack 0
 17669  003DE4                     i2__tdiv_to_l_:
 17670                           	opt stack 21
 17671                           
 17672                           ;incstack = 0
 17673  003DE4  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 17674  003DE8  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 17675  003DEA  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 17676  003DEC  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 17677  003DEE  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 17678  003DF0  E301               	bnc	u684_41
 17679  003DF2  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 17680  003DF4                     u684_41:
 17681  003DF4  5007               	movf	??i2__tdiv_to_l_,w,c
 17682  003DF6  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 17683  003DF8  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 17684  003DFA  A4D8               	btfss	status,2,c
 17685  003DFC  D009               	goto	i2l6226
 17686  003DFE  0E00               	movlw	0
 17687  003E00  6E01               	movwf	?i2__tdiv_to_l_,c
 17688  003E02  0E00               	movlw	0
 17689  003E04  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17690  003E06  0E00               	movlw	0
 17691  003E08  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17692  003E0A  0E00               	movlw	0
 17693  003E0C  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17694  003E0E  0012               	return	
 17695  003E10                     i2l6226:
 17696  003E10  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 17697  003E14  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 17698  003E16  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 17699  003E18  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 17700  003E1A  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 17701  003E1C  E301               	bnc	u686_41
 17702  003E1E  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 17703  003E20                     u686_41:
 17704  003E20  5007               	movf	??i2__tdiv_to_l_,w,c
 17705  003E22  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 17706  003E24  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 17707  003E26  A4D8               	btfss	status,2,c
 17708  003E28  D009               	goto	i2l6232
 17709  003E2A  0E00               	movlw	0
 17710  003E2C  6E01               	movwf	?i2__tdiv_to_l_,c
 17711  003E2E  0E00               	movlw	0
 17712  003E30  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17713  003E32  0E00               	movlw	0
 17714  003E34  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17715  003E36  0E00               	movlw	0
 17716  003E38  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17717  003E3A  0012               	return	
 17718  003E3C                     i2l6232:
 17719  003E3C  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 17720  003E3E  0EFF               	movlw	255
 17721  003E40  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 17722  003E42  0EFF               	movlw	255
 17723  003E44  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 17724  003E46  0E00               	movlw	0
 17725  003E48  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 17726  003E4A  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 17727  003E4C  0EFF               	movlw	255
 17728  003E4E  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 17729  003E50  0EFF               	movlw	255
 17730  003E52  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 17731  003E54  0E00               	movlw	0
 17732  003E56  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 17733  003E58  0E00               	movlw	0
 17734  003E5A  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 17735  003E5C  0E00               	movlw	0
 17736  003E5E  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 17737  003E60  0E00               	movlw	0
 17738  003E62  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 17739  003E64  0E00               	movlw	0
 17740  003E66  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 17741  003E68  0E7F               	movlw	127
 17742  003E6A  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 17743  003E6C  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 17744  003E6E  0F98               	addlw	152
 17745  003E70  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 17746  003E72  0E18               	movlw	24
 17747  003E74  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 17748  003E76                     i2l1130:
 17749  003E76  90D8               	bcf	status,0,c
 17750  003E78  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 17751  003E7A  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 17752  003E7C  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 17753  003E7E  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 17754  003E80  5004               	movf	i2__tdiv_to_l_@f2,w,c
 17755  003E82  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 17756  003E84  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 17757  003E86  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 17758  003E88  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 17759  003E8A  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 17760  003E8C  A0D8               	btfss	status,0,c
 17761  003E8E  D007               	goto	i2l1131
 17762  003E90  5004               	movf	i2__tdiv_to_l_@f2,w,c
 17763  003E92  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 17764  003E94  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 17765  003E96  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 17766  003E98  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 17767  003E9A  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 17768  003E9C  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 17769  003E9E                     i2l1131:
 17770  003E9E  90D8               	bcf	status,0,c
 17771  003EA0  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 17772  003EA2  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 17773  003EA4  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 17774  003EA6  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 17775  003EA8  D7E6               	goto	i2l1130
 17776  003EAA  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 17777  003EAC  D016               	goto	i2l6266
 17778  003EAE  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 17779  003EB0  0A80               	xorlw	128
 17780  003EB2  0F97               	addlw	151
 17781  003EB4  B0D8               	btfsc	status,0,c
 17782  003EB6  D009               	goto	i2l6262
 17783  003EB8  0E00               	movlw	0
 17784  003EBA  6E01               	movwf	?i2__tdiv_to_l_,c
 17785  003EBC  0E00               	movlw	0
 17786  003EBE  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17787  003EC0  0E00               	movlw	0
 17788  003EC2  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17789  003EC4  0E00               	movlw	0
 17790  003EC6  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17791  003EC8  0012               	return	
 17792  003ECA                     i2l6262:
 17793  003ECA  90D8               	bcf	status,0,c
 17794  003ECC  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 17795  003ECE  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 17796  003ED0  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 17797  003ED2  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 17798  003ED4  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 17799  003ED6  D7F9               	goto	i2l6262
 17800  003ED8  D015               	goto	i2l1137
 17801  003EDA                     i2l6266:
 17802  003EDA  0E17               	movlw	23
 17803  003EDC  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 17804  003EDE  D00F               	goto	i2l6274
 17805  003EE0  0E00               	movlw	0
 17806  003EE2  6E01               	movwf	?i2__tdiv_to_l_,c
 17807  003EE4  0E00               	movlw	0
 17808  003EE6  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17809  003EE8  0E00               	movlw	0
 17810  003EEA  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17811  003EEC  0E00               	movlw	0
 17812  003EEE  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17813  003EF0  0012               	return	
 17814  003EF2                     i2l6272:
 17815  003EF2  90D8               	bcf	status,0,c
 17816  003EF4  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 17817  003EF6  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 17818  003EF8  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 17819  003EFA  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 17820  003EFC  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 17821  003EFE                     i2l6274:
 17822  003EFE  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 17823  003F00  A4D8               	btfss	status,2,c
 17824  003F02  D7F7               	goto	i2l6272
 17825  003F04                     i2l1137:
 17826  003F04  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 17827  003F08  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 17828  003F0C  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 17829  003F10  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 17830  003F14  0012               	return		;funcret
 17831  003F16                     __end_ofi2__tdiv_to_l_:
 17832                           	opt stack 0
 17833                           pclatu	equ	0xFFB
 17834                           pclath	equ	0xFFA
 17835                           tblptru	equ	0xFF8
 17836                           tblptrh	equ	0xFF7
 17837                           tblptrl	equ	0xFF6
 17838                           tablat	equ	0xFF5
 17839                           prodh	equ	0xFF4
 17840                           prodl	equ	0xFF3
 17841                           intcon	equ	0xFF2
 17842                           intcon3	equ	0xFF0
 17843                           postinc0	equ	0xFEE
 17844                           fsr0h	equ	0xFEA
 17845                           fsr0l	equ	0xFE9
 17846                           wreg	equ	0xFE8
 17847                           postdec1	equ	0xFE5
 17848                           fsr1h	equ	0xFE2
 17849                           fsr1l	equ	0xFE1
 17850                           indf2	equ	0xFDF
 17851                           postinc2	equ	0xFDE
 17852                           postdec2	equ	0xFDD
 17853                           fsr2h	equ	0xFDA
 17854                           fsr2l	equ	0xFD9
 17855                           status	equ	0xFD8
 17856                           
 17857 ;; *************** function i2__div_to_l_ *****************
 17858 ;; Defined at:
 17859 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 17860 ;; Parameters:    Size  Location     Type
 17861 ;;  f1              3    0[COMRAM] unsigned long 
 17862 ;;  f2              3    3[COMRAM] unsigned long 
 17863 ;; Auto vars:     Size  Location     Type
 17864 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 17865 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 17866 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 17867 ;; Return value:  Size  Location     Type
 17868 ;;                  4    0[COMRAM] unsigned long 
 17869 ;; Registers used:
 17870 ;;		wreg, status,2, status,0
 17871 ;; Tracked objects:
 17872 ;;		On entry : 0/0
 17873 ;;		On exit  : 0/0
 17874 ;;		Unchanged: 0/0
 17875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17876 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17877 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17879 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17880 ;;Total ram usage:       12 bytes
 17881 ;; Hardware stack levels used:    1
 17882 ;; This function calls:
 17883 ;;		Nothing
 17884 ;; This function is called by:
 17885 ;;		i2_printf
 17886 ;; This function uses a non-reentrant model
 17887 ;;
 17888                           
 17889                           	psect	text62
 17890  004046                     __ptext62:
 17891                           	opt stack 0
 17892  004046                     i2__div_to_l_:
 17893                           	opt stack 21
 17894                           
 17895                           ;incstack = 0
 17896  004046  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 17897  004048  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 17898  00404A  6E0C               	movwf	i2__div_to_l_@exp1,c
 17899  00404C  500C               	movf	i2__div_to_l_@exp1,w,c
 17900  00404E  A4D8               	btfss	status,2,c
 17901  004050  D009               	goto	i2l6166
 17902  004052  0E00               	movlw	0
 17903  004054  6E01               	movwf	?i2__div_to_l_,c
 17904  004056  0E00               	movlw	0
 17905  004058  6E02               	movwf	?i2__div_to_l_+1,c
 17906  00405A  0E00               	movlw	0
 17907  00405C  6E03               	movwf	?i2__div_to_l_+2,c
 17908  00405E  0E00               	movlw	0
 17909  004060  6E04               	movwf	?i2__div_to_l_+3,c
 17910  004062  0012               	return	
 17911  004064                     i2l6166:
 17912  004064  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 17913  004066  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 17914  004068  6E0B               	movwf	i2__div_to_l_@cntr,c
 17915  00406A  500B               	movf	i2__div_to_l_@cntr,w,c
 17916  00406C  A4D8               	btfss	status,2,c
 17917  00406E  D009               	goto	i2l6172
 17918  004070  0E00               	movlw	0
 17919  004072  6E01               	movwf	?i2__div_to_l_,c
 17920  004074  0E00               	movlw	0
 17921  004076  6E02               	movwf	?i2__div_to_l_+1,c
 17922  004078  0E00               	movlw	0
 17923  00407A  6E03               	movwf	?i2__div_to_l_+2,c
 17924  00407C  0E00               	movlw	0
 17925  00407E  6E04               	movwf	?i2__div_to_l_+3,c
 17926  004080  0012               	return	
 17927  004082                     i2l6172:
 17928  004082  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 17929  004084  0EFF               	movlw	255
 17930  004086  1601               	andwf	i2__div_to_l_@f1,f,c
 17931  004088  0EFF               	movlw	255
 17932  00408A  1602               	andwf	i2__div_to_l_@f1+1,f,c
 17933  00408C  0EFF               	movlw	255
 17934  00408E  1603               	andwf	i2__div_to_l_@f1+2,f,c
 17935  004090  0E00               	movlw	0
 17936  004092  1604               	andwf	i2__div_to_l_@f1+3,f,c
 17937  004094  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 17938  004096  0EFF               	movlw	255
 17939  004098  1604               	andwf	i2__div_to_l_@f2,f,c
 17940  00409A  0EFF               	movlw	255
 17941  00409C  1605               	andwf	i2__div_to_l_@f2+1,f,c
 17942  00409E  0EFF               	movlw	255
 17943  0040A0  1606               	andwf	i2__div_to_l_@f2+2,f,c
 17944  0040A2  0E00               	movlw	0
 17945  0040A4  1607               	andwf	i2__div_to_l_@f2+3,f,c
 17946  0040A6  0E00               	movlw	0
 17947  0040A8  6E07               	movwf	i2__div_to_l_@quot,c
 17948  0040AA  0E00               	movlw	0
 17949  0040AC  6E08               	movwf	i2__div_to_l_@quot+1,c
 17950  0040AE  0E00               	movlw	0
 17951  0040B0  6E09               	movwf	i2__div_to_l_@quot+2,c
 17952  0040B2  0E00               	movlw	0
 17953  0040B4  6E0A               	movwf	i2__div_to_l_@quot+3,c
 17954  0040B6  0E7F               	movlw	127
 17955  0040B8  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 17956  0040BA  500B               	movf	i2__div_to_l_@cntr,w,c
 17957  0040BC  0FA0               	addlw	160
 17958  0040BE  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 17959  0040C0  0E20               	movlw	32
 17960  0040C2  6E0B               	movwf	i2__div_to_l_@cntr,c
 17961  0040C4                     i2l6186:
 17962  0040C4  90D8               	bcf	status,0,c
 17963  0040C6  3607               	rlcf	i2__div_to_l_@quot,f,c
 17964  0040C8  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 17965  0040CA  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 17966  0040CC  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 17967  0040CE  5004               	movf	i2__div_to_l_@f2,w,c
 17968  0040D0  5C01               	subwf	i2__div_to_l_@f1,w,c
 17969  0040D2  5005               	movf	i2__div_to_l_@f2+1,w,c
 17970  0040D4  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 17971  0040D6  5006               	movf	i2__div_to_l_@f2+2,w,c
 17972  0040D8  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 17973  0040DA  5007               	movf	i2__div_to_l_@f2+3,w,c
 17974  0040DC  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 17975  0040DE  A0D8               	btfss	status,0,c
 17976  0040E0  D009               	goto	i2l6194
 17977  0040E2  5004               	movf	i2__div_to_l_@f2,w,c
 17978  0040E4  5E01               	subwf	i2__div_to_l_@f1,f,c
 17979  0040E6  5005               	movf	i2__div_to_l_@f2+1,w,c
 17980  0040E8  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 17981  0040EA  5006               	movf	i2__div_to_l_@f2+2,w,c
 17982  0040EC  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 17983  0040EE  5007               	movf	i2__div_to_l_@f2+3,w,c
 17984  0040F0  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 17985  0040F2  8007               	bsf	i2__div_to_l_@quot,0,c
 17986  0040F4                     i2l6194:
 17987  0040F4  90D8               	bcf	status,0,c
 17988  0040F6  3601               	rlcf	i2__div_to_l_@f1,f,c
 17989  0040F8  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 17990  0040FA  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 17991  0040FC  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 17992  0040FE  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 17993  004100  D7E1               	goto	i2l6186
 17994  004102  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 17995  004104  D016               	goto	i2l6210
 17996  004106  500C               	movf	i2__div_to_l_@exp1,w,c
 17997  004108  0A80               	xorlw	128
 17998  00410A  0F9F               	addlw	159
 17999  00410C  B0D8               	btfsc	status,0,c
 18000  00410E  D009               	goto	i2l6206
 18001  004110  0E00               	movlw	0
 18002  004112  6E01               	movwf	?i2__div_to_l_,c
 18003  004114  0E00               	movlw	0
 18004  004116  6E02               	movwf	?i2__div_to_l_+1,c
 18005  004118  0E00               	movlw	0
 18006  00411A  6E03               	movwf	?i2__div_to_l_+2,c
 18007  00411C  0E00               	movlw	0
 18008  00411E  6E04               	movwf	?i2__div_to_l_+3,c
 18009  004120  0012               	return	
 18010  004122                     i2l6206:
 18011  004122  90D8               	bcf	status,0,c
 18012  004124  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 18013  004126  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 18014  004128  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 18015  00412A  3207               	rrcf	i2__div_to_l_@quot,f,c
 18016  00412C  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 18017  00412E  D7F9               	goto	i2l6206
 18018  004130  D015               	goto	i2l1033
 18019  004132                     i2l6210:
 18020  004132  0E1F               	movlw	31
 18021  004134  640C               	cpfsgt	i2__div_to_l_@exp1,c
 18022  004136  D00F               	goto	i2l6218
 18023  004138  0E00               	movlw	0
 18024  00413A  6E01               	movwf	?i2__div_to_l_,c
 18025  00413C  0E00               	movlw	0
 18026  00413E  6E02               	movwf	?i2__div_to_l_+1,c
 18027  004140  0E00               	movlw	0
 18028  004142  6E03               	movwf	?i2__div_to_l_+2,c
 18029  004144  0E00               	movlw	0
 18030  004146  6E04               	movwf	?i2__div_to_l_+3,c
 18031  004148  0012               	return	
 18032  00414A                     i2l6216:
 18033  00414A  90D8               	bcf	status,0,c
 18034  00414C  3607               	rlcf	i2__div_to_l_@quot,f,c
 18035  00414E  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 18036  004150  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 18037  004152  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 18038  004154  060C               	decf	i2__div_to_l_@exp1,f,c
 18039  004156                     i2l6218:
 18040  004156  500C               	movf	i2__div_to_l_@exp1,w,c
 18041  004158  A4D8               	btfss	status,2,c
 18042  00415A  D7F7               	goto	i2l6216
 18043  00415C                     i2l1033:
 18044  00415C  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 18045  004160  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 18046  004164  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 18047  004168  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 18048  00416C  0012               	return		;funcret
 18049  00416E                     __end_ofi2__div_to_l_:
 18050                           	opt stack 0
 18051                           pclatu	equ	0xFFB
 18052                           pclath	equ	0xFFA
 18053                           tblptru	equ	0xFF8
 18054                           tblptrh	equ	0xFF7
 18055                           tblptrl	equ	0xFF6
 18056                           tablat	equ	0xFF5
 18057                           prodh	equ	0xFF4
 18058                           prodl	equ	0xFF3
 18059                           intcon	equ	0xFF2
 18060                           intcon3	equ	0xFF0
 18061                           postinc0	equ	0xFEE
 18062                           fsr0h	equ	0xFEA
 18063                           fsr0l	equ	0xFE9
 18064                           wreg	equ	0xFE8
 18065                           postdec1	equ	0xFE5
 18066                           fsr1h	equ	0xFE2
 18067                           fsr1l	equ	0xFE1
 18068                           indf2	equ	0xFDF
 18069                           postinc2	equ	0xFDE
 18070                           postdec2	equ	0xFDD
 18071                           fsr2h	equ	0xFDA
 18072                           fsr2l	equ	0xFD9
 18073                           status	equ	0xFD8
 18074                           
 18075 ;; *************** function i2___lltoft *****************
 18076 ;; Defined at:
 18077 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 18078 ;; Parameters:    Size  Location     Type
 18079 ;;  c               4    8[COMRAM] unsigned long 
 18080 ;; Auto vars:     Size  Location     Type
 18081 ;;  __lltoft        1   16[COMRAM] unsigned char 
 18082 ;; Return value:  Size  Location     Type
 18083 ;;                  3    8[COMRAM] float 
 18084 ;; Registers used:
 18085 ;;		wreg, status,2, status,0, cstack
 18086 ;; Tracked objects:
 18087 ;;		On entry : 0/0
 18088 ;;		On exit  : 0/0
 18089 ;;		Unchanged: 0/0
 18090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18093 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18094 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18095 ;;Total ram usage:        9 bytes
 18096 ;; Hardware stack levels used:    1
 18097 ;; Hardware stack levels required when called:    1
 18098 ;; This function calls:
 18099 ;;		i2___ftpack
 18100 ;; This function is called by:
 18101 ;;		i2_printf
 18102 ;; This function uses a non-reentrant model
 18103 ;;
 18104                           
 18105                           	psect	text63
 18106  005436                     __ptext63:
 18107                           	opt stack 0
 18108  005436                     i2___lltoft:
 18109                           	opt stack 20
 18110                           
 18111                           ;incstack = 0
 18112  005436  0E8E               	movlw	142
 18113  005438  6E11               	movwf	i2___lltoft@exp,c
 18114  00543A  D006               	goto	i2l6406
 18115  00543C                     i2l6404:
 18116  00543C  90D8               	bcf	status,0,c
 18117  00543E  320C               	rrcf	i2___lltoft@c+3,f,c
 18118  005440  320B               	rrcf	i2___lltoft@c+2,f,c
 18119  005442  320A               	rrcf	i2___lltoft@c+1,f,c
 18120  005444  3209               	rrcf	i2___lltoft@c,f,c
 18121  005446  2A11               	incf	i2___lltoft@exp,f,c
 18122  005448                     i2l6406:
 18123  005448  0E00               	movlw	0
 18124  00544A  1409               	andwf	i2___lltoft@c,w,c
 18125  00544C  6E0D               	movwf	??i2___lltoft& (0+255),c
 18126  00544E  0E00               	movlw	0
 18127  005450  140A               	andwf	i2___lltoft@c+1,w,c
 18128  005452  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 18129  005454  0E00               	movlw	0
 18130  005456  140B               	andwf	i2___lltoft@c+2,w,c
 18131  005458  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 18132  00545A  0EFF               	movlw	255
 18133  00545C  140C               	andwf	i2___lltoft@c+3,w,c
 18134  00545E  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 18135  005460  500D               	movf	??i2___lltoft,w,c
 18136  005462  100E               	iorwf	??i2___lltoft+1,w,c
 18137  005464  100F               	iorwf	??i2___lltoft+2,w,c
 18138  005466  1010               	iorwf	??i2___lltoft+3,w,c
 18139  005468  A4D8               	btfss	status,2,c
 18140  00546A  D7E8               	goto	i2l6404
 18141  00546C  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 18142  005470  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 18143  005474  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 18144  005478  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 18145  00547C  0E00               	movlw	0
 18146  00547E  6E05               	movwf	i2___ftpack@sign,c
 18147  005480  ECAD  F026         	call	i2___ftpack	;wreg free
 18148  005484  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 18149  005488  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 18150  00548C  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 18151  005490  0012               	return	
 18152  005492                     __end_ofi2___lltoft:
 18153                           	opt stack 0
 18154                           pclatu	equ	0xFFB
 18155                           pclath	equ	0xFFA
 18156                           tblptru	equ	0xFF8
 18157                           tblptrh	equ	0xFF7
 18158                           tblptrl	equ	0xFF6
 18159                           tablat	equ	0xFF5
 18160                           prodh	equ	0xFF4
 18161                           prodl	equ	0xFF3
 18162                           intcon	equ	0xFF2
 18163                           intcon3	equ	0xFF0
 18164                           postinc0	equ	0xFEE
 18165                           fsr0h	equ	0xFEA
 18166                           fsr0l	equ	0xFE9
 18167                           wreg	equ	0xFE8
 18168                           postdec1	equ	0xFE5
 18169                           fsr1h	equ	0xFE2
 18170                           fsr1l	equ	0xFE1
 18171                           indf2	equ	0xFDF
 18172                           postinc2	equ	0xFDE
 18173                           postdec2	equ	0xFDD
 18174                           fsr2h	equ	0xFDA
 18175                           fsr2l	equ	0xFD9
 18176                           status	equ	0xFD8
 18177                           
 18178 ;; *************** function i2___llmod *****************
 18179 ;; Defined at:
 18180 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 18181 ;; Parameters:    Size  Location     Type
 18182 ;;  dividend        4   13[COMRAM] unsigned long 
 18183 ;;  divisor         4   17[COMRAM] unsigned long 
 18184 ;; Auto vars:     Size  Location     Type
 18185 ;;  __llmod         1   21[COMRAM] unsigned char 
 18186 ;; Return value:  Size  Location     Type
 18187 ;;                  4   13[COMRAM] unsigned long 
 18188 ;; Registers used:
 18189 ;;		wreg, status,2, status,0
 18190 ;; Tracked objects:
 18191 ;;		On entry : 0/0
 18192 ;;		On exit  : 0/0
 18193 ;;		Unchanged: 0/0
 18194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18195 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18196 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18198 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18199 ;;Total ram usage:        9 bytes
 18200 ;; Hardware stack levels used:    1
 18201 ;; This function calls:
 18202 ;;		Nothing
 18203 ;; This function is called by:
 18204 ;;		i2_printf
 18205 ;; This function uses a non-reentrant model
 18206 ;;
 18207                           
 18208                           	psect	text64
 18209  00536A                     __ptext64:
 18210                           	opt stack 0
 18211  00536A                     i2___llmod:
 18212                           	opt stack 21
 18213                           
 18214                           ;incstack = 0
 18215  00536A  5012               	movf	i2___llmod@divisor,w,c
 18216  00536C  1013               	iorwf	i2___llmod@divisor+1,w,c
 18217  00536E  1014               	iorwf	i2___llmod@divisor+2,w,c
 18218  005370  1015               	iorwf	i2___llmod@divisor+3,w,c
 18219  005372  B4D8               	btfsc	status,2,c
 18220  005374  D024               	goto	i2l1222
 18221  005376  0E01               	movlw	1
 18222  005378  6E16               	movwf	i2___llmod@counter,c
 18223  00537A  D006               	goto	i2l6392
 18224  00537C                     i2l6390:
 18225  00537C  90D8               	bcf	status,0,c
 18226  00537E  3612               	rlcf	i2___llmod@divisor,f,c
 18227  005380  3613               	rlcf	i2___llmod@divisor+1,f,c
 18228  005382  3614               	rlcf	i2___llmod@divisor+2,f,c
 18229  005384  3615               	rlcf	i2___llmod@divisor+3,f,c
 18230  005386  2A16               	incf	i2___llmod@counter,f,c
 18231  005388                     i2l6392:
 18232  005388  AE15               	btfss	i2___llmod@divisor+3,7,c
 18233  00538A  D7F8               	goto	i2l6390
 18234  00538C                     i2l6394:
 18235  00538C  5012               	movf	i2___llmod@divisor,w,c
 18236  00538E  5C0E               	subwf	i2___llmod@dividend,w,c
 18237  005390  5013               	movf	i2___llmod@divisor+1,w,c
 18238  005392  580F               	subwfb	i2___llmod@dividend+1,w,c
 18239  005394  5014               	movf	i2___llmod@divisor+2,w,c
 18240  005396  5810               	subwfb	i2___llmod@dividend+2,w,c
 18241  005398  5015               	movf	i2___llmod@divisor+3,w,c
 18242  00539A  5811               	subwfb	i2___llmod@dividend+3,w,c
 18243  00539C  A0D8               	btfss	status,0,c
 18244  00539E  D008               	goto	i2l6398
 18245  0053A0  5012               	movf	i2___llmod@divisor,w,c
 18246  0053A2  5E0E               	subwf	i2___llmod@dividend,f,c
 18247  0053A4  5013               	movf	i2___llmod@divisor+1,w,c
 18248  0053A6  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 18249  0053A8  5014               	movf	i2___llmod@divisor+2,w,c
 18250  0053AA  5A10               	subwfb	i2___llmod@dividend+2,f,c
 18251  0053AC  5015               	movf	i2___llmod@divisor+3,w,c
 18252  0053AE  5A11               	subwfb	i2___llmod@dividend+3,f,c
 18253  0053B0                     i2l6398:
 18254  0053B0  90D8               	bcf	status,0,c
 18255  0053B2  3215               	rrcf	i2___llmod@divisor+3,f,c
 18256  0053B4  3214               	rrcf	i2___llmod@divisor+2,f,c
 18257  0053B6  3213               	rrcf	i2___llmod@divisor+1,f,c
 18258  0053B8  3212               	rrcf	i2___llmod@divisor,f,c
 18259  0053BA  2E16               	decfsz	i2___llmod@counter,f,c
 18260  0053BC  D7E7               	goto	i2l6394
 18261  0053BE                     i2l1222:
 18262  0053BE  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 18263  0053C2  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 18264  0053C6  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 18265  0053CA  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 18266  0053CE  0012               	return		;funcret
 18267  0053D0                     __end_ofi2___llmod:
 18268                           	opt stack 0
 18269                           pclatu	equ	0xFFB
 18270                           pclath	equ	0xFFA
 18271                           tblptru	equ	0xFF8
 18272                           tblptrh	equ	0xFF7
 18273                           tblptrl	equ	0xFF6
 18274                           tablat	equ	0xFF5
 18275                           prodh	equ	0xFF4
 18276                           prodl	equ	0xFF3
 18277                           intcon	equ	0xFF2
 18278                           intcon3	equ	0xFF0
 18279                           postinc0	equ	0xFEE
 18280                           fsr0h	equ	0xFEA
 18281                           fsr0l	equ	0xFE9
 18282                           wreg	equ	0xFE8
 18283                           postdec1	equ	0xFE5
 18284                           fsr1h	equ	0xFE2
 18285                           fsr1l	equ	0xFE1
 18286                           indf2	equ	0xFDF
 18287                           postinc2	equ	0xFDE
 18288                           postdec2	equ	0xFDD
 18289                           fsr2h	equ	0xFDA
 18290                           fsr2l	equ	0xFD9
 18291                           status	equ	0xFD8
 18292                           
 18293 ;; *************** function i2___lldiv *****************
 18294 ;; Defined at:
 18295 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 18296 ;; Parameters:    Size  Location     Type
 18297 ;;  dividend        4    0[COMRAM] unsigned long 
 18298 ;;  divisor         4    4[COMRAM] unsigned long 
 18299 ;; Auto vars:     Size  Location     Type
 18300 ;;  __lldiv         4    8[COMRAM] unsigned long 
 18301 ;;  __lldiv         1   12[COMRAM] unsigned char 
 18302 ;; Return value:  Size  Location     Type
 18303 ;;                  4    0[COMRAM] unsigned long 
 18304 ;; Registers used:
 18305 ;;		wreg, status,2, status,0
 18306 ;; Tracked objects:
 18307 ;;		On entry : 0/0
 18308 ;;		On exit  : 0/0
 18309 ;;		Unchanged: 0/0
 18310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18311 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18312 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18314 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18315 ;;Total ram usage:       13 bytes
 18316 ;; Hardware stack levels used:    1
 18317 ;; This function calls:
 18318 ;;		Nothing
 18319 ;; This function is called by:
 18320 ;;		i2_printf
 18321 ;; This function uses a non-reentrant model
 18322 ;;
 18323                           
 18324                           	psect	text65
 18325  005184                     __ptext65:
 18326                           	opt stack 0
 18327  005184                     i2___lldiv:
 18328                           	opt stack 21
 18329                           
 18330                           ;incstack = 0
 18331  005184  0E00               	movlw	0
 18332  005186  6E09               	movwf	i2___lldiv@quotient,c
 18333  005188  0E00               	movlw	0
 18334  00518A  6E0A               	movwf	i2___lldiv@quotient+1,c
 18335  00518C  0E00               	movlw	0
 18336  00518E  6E0B               	movwf	i2___lldiv@quotient+2,c
 18337  005190  0E00               	movlw	0
 18338  005192  6E0C               	movwf	i2___lldiv@quotient+3,c
 18339  005194  5005               	movf	i2___lldiv@divisor,w,c
 18340  005196  1006               	iorwf	i2___lldiv@divisor+1,w,c
 18341  005198  1007               	iorwf	i2___lldiv@divisor+2,w,c
 18342  00519A  1008               	iorwf	i2___lldiv@divisor+3,w,c
 18343  00519C  B4D8               	btfsc	status,2,c
 18344  00519E  D02A               	goto	i2l1212
 18345  0051A0  0E01               	movlw	1
 18346  0051A2  6E0D               	movwf	i2___lldiv@counter,c
 18347  0051A4  D006               	goto	i2l6372
 18348  0051A6                     i2l6370:
 18349  0051A6  90D8               	bcf	status,0,c
 18350  0051A8  3605               	rlcf	i2___lldiv@divisor,f,c
 18351  0051AA  3606               	rlcf	i2___lldiv@divisor+1,f,c
 18352  0051AC  3607               	rlcf	i2___lldiv@divisor+2,f,c
 18353  0051AE  3608               	rlcf	i2___lldiv@divisor+3,f,c
 18354  0051B0  2A0D               	incf	i2___lldiv@counter,f,c
 18355  0051B2                     i2l6372:
 18356  0051B2  AE08               	btfss	i2___lldiv@divisor+3,7,c
 18357  0051B4  D7F8               	goto	i2l6370
 18358  0051B6                     i2l6374:
 18359  0051B6  90D8               	bcf	status,0,c
 18360  0051B8  3609               	rlcf	i2___lldiv@quotient,f,c
 18361  0051BA  360A               	rlcf	i2___lldiv@quotient+1,f,c
 18362  0051BC  360B               	rlcf	i2___lldiv@quotient+2,f,c
 18363  0051BE  360C               	rlcf	i2___lldiv@quotient+3,f,c
 18364  0051C0  5005               	movf	i2___lldiv@divisor,w,c
 18365  0051C2  5C01               	subwf	i2___lldiv@dividend,w,c
 18366  0051C4  5006               	movf	i2___lldiv@divisor+1,w,c
 18367  0051C6  5802               	subwfb	i2___lldiv@dividend+1,w,c
 18368  0051C8  5007               	movf	i2___lldiv@divisor+2,w,c
 18369  0051CA  5803               	subwfb	i2___lldiv@dividend+2,w,c
 18370  0051CC  5008               	movf	i2___lldiv@divisor+3,w,c
 18371  0051CE  5804               	subwfb	i2___lldiv@dividend+3,w,c
 18372  0051D0  A0D8               	btfss	status,0,c
 18373  0051D2  D009               	goto	i2l6382
 18374  0051D4  5005               	movf	i2___lldiv@divisor,w,c
 18375  0051D6  5E01               	subwf	i2___lldiv@dividend,f,c
 18376  0051D8  5006               	movf	i2___lldiv@divisor+1,w,c
 18377  0051DA  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 18378  0051DC  5007               	movf	i2___lldiv@divisor+2,w,c
 18379  0051DE  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 18380  0051E0  5008               	movf	i2___lldiv@divisor+3,w,c
 18381  0051E2  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 18382  0051E4  8009               	bsf	i2___lldiv@quotient,0,c
 18383  0051E6                     i2l6382:
 18384  0051E6  90D8               	bcf	status,0,c
 18385  0051E8  3208               	rrcf	i2___lldiv@divisor+3,f,c
 18386  0051EA  3207               	rrcf	i2___lldiv@divisor+2,f,c
 18387  0051EC  3206               	rrcf	i2___lldiv@divisor+1,f,c
 18388  0051EE  3205               	rrcf	i2___lldiv@divisor,f,c
 18389  0051F0  2E0D               	decfsz	i2___lldiv@counter,f,c
 18390  0051F2  D7E1               	goto	i2l6374
 18391  0051F4                     i2l1212:
 18392  0051F4  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 18393  0051F8  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 18394  0051FC  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 18395  005200  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 18396  005204  0012               	return		;funcret
 18397  005206                     __end_ofi2___lldiv:
 18398                           	opt stack 0
 18399                           pclatu	equ	0xFFB
 18400                           pclath	equ	0xFFA
 18401                           tblptru	equ	0xFF8
 18402                           tblptrh	equ	0xFF7
 18403                           tblptrl	equ	0xFF6
 18404                           tablat	equ	0xFF5
 18405                           prodh	equ	0xFF4
 18406                           prodl	equ	0xFF3
 18407                           intcon	equ	0xFF2
 18408                           intcon3	equ	0xFF0
 18409                           postinc0	equ	0xFEE
 18410                           fsr0h	equ	0xFEA
 18411                           fsr0l	equ	0xFE9
 18412                           wreg	equ	0xFE8
 18413                           postdec1	equ	0xFE5
 18414                           fsr1h	equ	0xFE2
 18415                           fsr1l	equ	0xFE1
 18416                           indf2	equ	0xFDF
 18417                           postinc2	equ	0xFDE
 18418                           postdec2	equ	0xFDD
 18419                           fsr2h	equ	0xFDA
 18420                           fsr2l	equ	0xFD9
 18421                           status	equ	0xFD8
 18422                           
 18423 ;; *************** function i2___fttol *****************
 18424 ;; Defined at:
 18425 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 18426 ;; Parameters:    Size  Location     Type
 18427 ;;  f1              3   42[COMRAM] float 
 18428 ;; Auto vars:     Size  Location     Type
 18429 ;;  __fttol         4   52[COMRAM] unsigned long 
 18430 ;;  __fttol         1   56[COMRAM] unsigned char 
 18431 ;;  __fttol         1   51[COMRAM] unsigned char 
 18432 ;; Return value:  Size  Location     Type
 18433 ;;                  4   42[COMRAM] long 
 18434 ;; Registers used:
 18435 ;;		wreg, status,2, status,0
 18436 ;; Tracked objects:
 18437 ;;		On entry : 0/0
 18438 ;;		On exit  : 0/0
 18439 ;;		Unchanged: 0/0
 18440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18441 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18442 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18443 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18444 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18445 ;;Total ram usage:       15 bytes
 18446 ;; Hardware stack levels used:    1
 18447 ;; This function calls:
 18448 ;;		Nothing
 18449 ;; This function is called by:
 18450 ;;		i2_printf
 18451 ;; This function uses a non-reentrant model
 18452 ;;
 18453                           
 18454                           	psect	text66
 18455  004796                     __ptext66:
 18456                           	opt stack 0
 18457  004796                     i2___fttol:
 18458                           	opt stack 21
 18459                           
 18460                           ;incstack = 0
 18461  004796  C02D  F02F         	movff	i2___fttol@f1+2,??i2___fttol
 18462  00479A  6A30               	clrf	(??i2___fttol+1)& (0+255),c
 18463  00479C  6A31               	clrf	(??i2___fttol+2)& (0+255),c
 18464  00479E  342C               	rlcf	i2___fttol@f1+1,w,c
 18465  0047A0  362F               	rlcf	??i2___fttol& (0+255),f,c
 18466  0047A2  E301               	bnc	u698_41
 18467  0047A4  8030               	bsf	(??i2___fttol+1)& (0+255),0,c
 18468  0047A6                     u698_41:
 18469  0047A6  502F               	movf	??i2___fttol,w,c
 18470  0047A8  6E39               	movwf	i2___fttol@exp1,c
 18471  0047AA  5039               	movf	i2___fttol@exp1,w,c
 18472  0047AC  A4D8               	btfss	status,2,c
 18473  0047AE  D009               	goto	i2l6312
 18474  0047B0  0E00               	movlw	0
 18475  0047B2  6E2B               	movwf	?i2___fttol,c
 18476  0047B4  0E00               	movlw	0
 18477  0047B6  6E2C               	movwf	?i2___fttol+1,c
 18478  0047B8  0E00               	movlw	0
 18479  0047BA  6E2D               	movwf	?i2___fttol+2,c
 18480  0047BC  0E00               	movlw	0
 18481  0047BE  6E2E               	movwf	?i2___fttol+3,c
 18482  0047C0  0012               	return	
 18483  0047C2                     i2l6312:
 18484  0047C2  0E17               	movlw	23
 18485  0047C4  6E2F               	movwf	??i2___fttol& (0+255),c
 18486  0047C6  C02B  F030         	movff	i2___fttol@f1,??i2___fttol+1
 18487  0047CA  C02C  F031         	movff	i2___fttol@f1+1,??i2___fttol+2
 18488  0047CE  C02D  F032         	movff	i2___fttol@f1+2,??i2___fttol+3
 18489  0047D2  282F               	incf	??i2___fttol,w,c
 18490  0047D4  6E33               	movwf	(??i2___fttol+4)& (0+255),c
 18491  0047D6  D004               	goto	i2u700_40
 18492  0047D8                     i2u700_45:
 18493  0047D8  90D8               	bcf	status,0,c
 18494  0047DA  3232               	rrcf	??i2___fttol+3,f,c
 18495  0047DC  3231               	rrcf	??i2___fttol+2,f,c
 18496  0047DE  3230               	rrcf	??i2___fttol+1,f,c
 18497  0047E0                     i2u700_40:
 18498  0047E0  2E33               	decfsz	(??i2___fttol+4)& (0+255),f,c
 18499  0047E2  D7FA               	goto	i2u700_45
 18500  0047E4  5030               	movf	??i2___fttol+1,w,c
 18501  0047E6  6E34               	movwf	i2___fttol@sign1,c
 18502  0047E8  8E2C               	bsf	i2___fttol@f1+1,7,c
 18503  0047EA  0EFF               	movlw	255
 18504  0047EC  162B               	andwf	i2___fttol@f1,f,c
 18505  0047EE  0EFF               	movlw	255
 18506  0047F0  162C               	andwf	i2___fttol@f1+1,f,c
 18507  0047F2  0E00               	movlw	0
 18508  0047F4  162D               	andwf	i2___fttol@f1+2,f,c
 18509  0047F6  502B               	movf	i2___fttol@f1,w,c
 18510  0047F8  6E35               	movwf	i2___fttol@lval,c
 18511  0047FA  502C               	movf	i2___fttol@f1+1,w,c
 18512  0047FC  6E36               	movwf	i2___fttol@lval+1,c
 18513  0047FE  502D               	movf	i2___fttol@f1+2,w,c
 18514  004800  6E37               	movwf	i2___fttol@lval+2,c
 18515  004802  6A38               	clrf	i2___fttol@lval+3,c
 18516  004804  0E8E               	movlw	142
 18517  004806  5E39               	subwf	i2___fttol@exp1,f,c
 18518  004808  AE39               	btfss	i2___fttol@exp1,7,c
 18519  00480A  D016               	goto	i2l6334
 18520  00480C  5039               	movf	i2___fttol@exp1,w,c
 18521  00480E  0A80               	xorlw	128
 18522  004810  0F8F               	addlw	143
 18523  004812  B0D8               	btfsc	status,0,c
 18524  004814  D009               	goto	i2l6330
 18525  004816  0E00               	movlw	0
 18526  004818  6E2B               	movwf	?i2___fttol,c
 18527  00481A  0E00               	movlw	0
 18528  00481C  6E2C               	movwf	?i2___fttol+1,c
 18529  00481E  0E00               	movlw	0
 18530  004820  6E2D               	movwf	?i2___fttol+2,c
 18531  004822  0E00               	movlw	0
 18532  004824  6E2E               	movwf	?i2___fttol+3,c
 18533  004826  0012               	return	
 18534  004828                     i2l6330:
 18535  004828  90D8               	bcf	status,0,c
 18536  00482A  3238               	rrcf	i2___fttol@lval+3,f,c
 18537  00482C  3237               	rrcf	i2___fttol@lval+2,f,c
 18538  00482E  3236               	rrcf	i2___fttol@lval+1,f,c
 18539  004830  3235               	rrcf	i2___fttol@lval,f,c
 18540  004832  3E39               	incfsz	i2___fttol@exp1,f,c
 18541  004834  D7F9               	goto	i2l6330
 18542  004836  D015               	goto	i2l6344
 18543  004838                     i2l6334:
 18544  004838  0E17               	movlw	23
 18545  00483A  6439               	cpfsgt	i2___fttol@exp1,c
 18546  00483C  D00F               	goto	i2l6342
 18547  00483E  0E00               	movlw	0
 18548  004840  6E2B               	movwf	?i2___fttol,c
 18549  004842  0E00               	movlw	0
 18550  004844  6E2C               	movwf	?i2___fttol+1,c
 18551  004846  0E00               	movlw	0
 18552  004848  6E2D               	movwf	?i2___fttol+2,c
 18553  00484A  0E00               	movlw	0
 18554  00484C  6E2E               	movwf	?i2___fttol+3,c
 18555  00484E  0012               	return	
 18556  004850                     i2l6340:
 18557  004850  90D8               	bcf	status,0,c
 18558  004852  3635               	rlcf	i2___fttol@lval,f,c
 18559  004854  3636               	rlcf	i2___fttol@lval+1,f,c
 18560  004856  3637               	rlcf	i2___fttol@lval+2,f,c
 18561  004858  3638               	rlcf	i2___fttol@lval+3,f,c
 18562  00485A  0639               	decf	i2___fttol@exp1,f,c
 18563  00485C                     i2l6342:
 18564  00485C  5039               	movf	i2___fttol@exp1,w,c
 18565  00485E  A4D8               	btfss	status,2,c
 18566  004860  D7F7               	goto	i2l6340
 18567  004862                     i2l6344:
 18568  004862  5034               	movf	i2___fttol@sign1,w,c
 18569  004864  B4D8               	btfsc	status,2,c
 18570  004866  D008               	goto	i2l6348
 18571  004868  1E38               	comf	i2___fttol@lval+3,f,c
 18572  00486A  1E37               	comf	i2___fttol@lval+2,f,c
 18573  00486C  1E36               	comf	i2___fttol@lval+1,f,c
 18574  00486E  6C35               	negf	i2___fttol@lval,c
 18575  004870  0E00               	movlw	0
 18576  004872  2236               	addwfc	i2___fttol@lval+1,f,c
 18577  004874  2237               	addwfc	i2___fttol@lval+2,f,c
 18578  004876  2238               	addwfc	i2___fttol@lval+3,f,c
 18579  004878                     i2l6348:
 18580  004878  C035  F02B         	movff	i2___fttol@lval,?i2___fttol
 18581  00487C  C036  F02C         	movff	i2___fttol@lval+1,?i2___fttol+1
 18582  004880  C037  F02D         	movff	i2___fttol@lval+2,?i2___fttol+2
 18583  004884  C038  F02E         	movff	i2___fttol@lval+3,?i2___fttol+3
 18584  004888  0012               	return	
 18585  00488A                     __end_ofi2___fttol:
 18586                           	opt stack 0
 18587                           pclatu	equ	0xFFB
 18588                           pclath	equ	0xFFA
 18589                           tblptru	equ	0xFF8
 18590                           tblptrh	equ	0xFF7
 18591                           tblptrl	equ	0xFF6
 18592                           tablat	equ	0xFF5
 18593                           prodh	equ	0xFF4
 18594                           prodl	equ	0xFF3
 18595                           intcon	equ	0xFF2
 18596                           intcon3	equ	0xFF0
 18597                           postinc0	equ	0xFEE
 18598                           fsr0h	equ	0xFEA
 18599                           fsr0l	equ	0xFE9
 18600                           wreg	equ	0xFE8
 18601                           postdec1	equ	0xFE5
 18602                           fsr1h	equ	0xFE2
 18603                           fsr1l	equ	0xFE1
 18604                           indf2	equ	0xFDF
 18605                           postinc2	equ	0xFDE
 18606                           postdec2	equ	0xFDD
 18607                           fsr2h	equ	0xFDA
 18608                           fsr2l	equ	0xFD9
 18609                           status	equ	0xFD8
 18610                           
 18611 ;; *************** function i2___ftsub *****************
 18612 ;; Defined at:
 18613 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 18614 ;; Parameters:    Size  Location     Type
 18615 ;;  f1              3   57[COMRAM] float 
 18616 ;;  f2              3   60[COMRAM] float 
 18617 ;; Auto vars:     Size  Location     Type
 18618 ;;		None
 18619 ;; Return value:  Size  Location     Type
 18620 ;;                  3   57[COMRAM] float 
 18621 ;; Registers used:
 18622 ;;		wreg, status,2, status,0, cstack
 18623 ;; Tracked objects:
 18624 ;;		On entry : 0/0
 18625 ;;		On exit  : 0/0
 18626 ;;		Unchanged: 0/0
 18627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18628 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18631 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18632 ;;Total ram usage:        6 bytes
 18633 ;; Hardware stack levels used:    1
 18634 ;; Hardware stack levels required when called:    2
 18635 ;; This function calls:
 18636 ;;		i2___ftadd
 18637 ;; This function is called by:
 18638 ;;		i2_printf
 18639 ;; This function uses a non-reentrant model
 18640 ;;
 18641                           
 18642                           	psect	text67
 18643  0056DE                     __ptext67:
 18644                           	opt stack 0
 18645  0056DE                     i2___ftsub:
 18646                           	opt stack 19
 18647                           
 18648                           ;incstack = 0
 18649  0056DE  503D               	movf	i2___ftsub@f2,w,c
 18650  0056E0  103E               	iorwf	i2___ftsub@f2+1,w,c
 18651  0056E2  103F               	iorwf	i2___ftsub@f2+2,w,c
 18652  0056E4  B4D8               	btfsc	status,2,c
 18653  0056E6  D006               	goto	i2l6302
 18654  0056E8  0E00               	movlw	0
 18655  0056EA  1A3D               	xorwf	i2___ftsub@f2,f,c
 18656  0056EC  0E00               	movlw	0
 18657  0056EE  1A3E               	xorwf	i2___ftsub@f2+1,f,c
 18658  0056F0  0E80               	movlw	128
 18659  0056F2  1A3F               	xorwf	i2___ftsub@f2+2,f,c
 18660  0056F4                     i2l6302:
 18661  0056F4  C03A  F02E         	movff	i2___ftsub@f1,i2___ftadd@f1
 18662  0056F8  C03B  F02F         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 18663  0056FC  C03C  F030         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 18664  005700  C03D  F031         	movff	i2___ftsub@f2,i2___ftadd@f2
 18665  005704  C03E  F032         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 18666  005708  C03F  F033         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 18667  00570C  EC42  F019         	call	i2___ftadd	;wreg free
 18668  005710  C02E  F03A         	movff	?i2___ftadd,?i2___ftsub
 18669  005714  C02F  F03B         	movff	?i2___ftadd+1,?i2___ftsub+1
 18670  005718  C030  F03C         	movff	?i2___ftadd+2,?i2___ftsub+2
 18671  00571C  0012               	return	
 18672  00571E                     __end_ofi2___ftsub:
 18673                           	opt stack 0
 18674                           pclatu	equ	0xFFB
 18675                           pclath	equ	0xFFA
 18676                           tblptru	equ	0xFF8
 18677                           tblptrh	equ	0xFF7
 18678                           tblptrl	equ	0xFF6
 18679                           tablat	equ	0xFF5
 18680                           prodh	equ	0xFF4
 18681                           prodl	equ	0xFF3
 18682                           intcon	equ	0xFF2
 18683                           intcon3	equ	0xFF0
 18684                           postinc0	equ	0xFEE
 18685                           fsr0h	equ	0xFEA
 18686                           fsr0l	equ	0xFE9
 18687                           wreg	equ	0xFE8
 18688                           postdec1	equ	0xFE5
 18689                           fsr1h	equ	0xFE2
 18690                           fsr1l	equ	0xFE1
 18691                           indf2	equ	0xFDF
 18692                           postinc2	equ	0xFDE
 18693                           postdec2	equ	0xFDD
 18694                           fsr2h	equ	0xFDA
 18695                           fsr2l	equ	0xFD9
 18696                           status	equ	0xFD8
 18697                           
 18698 ;; *************** function i2___ftadd *****************
 18699 ;; Defined at:
 18700 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 18701 ;; Parameters:    Size  Location     Type
 18702 ;;  f1              3   45[COMRAM] float 
 18703 ;;  f2              3   48[COMRAM] float 
 18704 ;; Auto vars:     Size  Location     Type
 18705 ;;  __ftadd         1   56[COMRAM] unsigned char 
 18706 ;;  __ftadd         1   55[COMRAM] unsigned char 
 18707 ;;  __ftadd         1   54[COMRAM] unsigned char 
 18708 ;; Return value:  Size  Location     Type
 18709 ;;                  3   45[COMRAM] float 
 18710 ;; Registers used:
 18711 ;;		wreg, status,2, status,0, cstack
 18712 ;; Tracked objects:
 18713 ;;		On entry : 0/0
 18714 ;;		On exit  : 0/0
 18715 ;;		Unchanged: 0/0
 18716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18717 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18718 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18719 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18720 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18721 ;;Total ram usage:       12 bytes
 18722 ;; Hardware stack levels used:    1
 18723 ;; Hardware stack levels required when called:    1
 18724 ;; This function calls:
 18725 ;;		i2___ftpack
 18726 ;; This function is called by:
 18727 ;;		i2_printf
 18728 ;;		i2___ftsub
 18729 ;; This function uses a non-reentrant model
 18730 ;;
 18731                           
 18732                           	psect	text68
 18733  003284                     __ptext68:
 18734                           	opt stack 0
 18735  003284                     i2___ftadd:
 18736                           	opt stack 19
 18737                           
 18738                           ;incstack = 0
 18739  003284  C030  F034         	movff	i2___ftadd@f1+2,??i2___ftadd
 18740  003288  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 18741  00328A  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 18742  00328C  342F               	rlcf	i2___ftadd@f1+1,w,c
 18743  00328E  3634               	rlcf	??i2___ftadd& (0+255),f,c
 18744  003290  E301               	bnc	u619_41
 18745  003292  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 18746  003294                     u619_41:
 18747  003294  5034               	movf	??i2___ftadd,w,c
 18748  003296  6E39               	movwf	i2___ftadd@exp1,c
 18749  003298  C033  F034         	movff	i2___ftadd@f2+2,??i2___ftadd
 18750  00329C  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 18751  00329E  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 18752  0032A0  3432               	rlcf	i2___ftadd@f2+1,w,c
 18753  0032A2  3634               	rlcf	??i2___ftadd& (0+255),f,c
 18754  0032A4  E301               	bnc	u620_41
 18755  0032A6  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 18756  0032A8                     u620_41:
 18757  0032A8  5034               	movf	??i2___ftadd,w,c
 18758  0032AA  6E38               	movwf	i2___ftadd@exp2,c
 18759  0032AC  5039               	movf	i2___ftadd@exp1,w,c
 18760  0032AE  B4D8               	btfsc	status,2,c
 18761  0032B0  D00B               	goto	i2l1088
 18762  0032B2  5038               	movf	i2___ftadd@exp2,w,c
 18763  0032B4  5C39               	subwf	i2___ftadd@exp1,w,c
 18764  0032B6  B0D8               	btfsc	status,0,c
 18765  0032B8  D00E               	goto	i2l5756
 18766  0032BA  5039               	movf	i2___ftadd@exp1,w,c
 18767  0032BC  0800               	sublw	0
 18768  0032BE  2438               	addwf	i2___ftadd@exp2,w,c
 18769  0032C0  6E34               	movwf	??i2___ftadd& (0+255),c
 18770  0032C2  0E18               	movlw	24
 18771  0032C4  6434               	cpfsgt	??i2___ftadd,c
 18772  0032C6  D007               	goto	i2l5756
 18773  0032C8                     i2l1088:
 18774  0032C8  C031  F02E         	movff	i2___ftadd@f2,?i2___ftadd
 18775  0032CC  C032  F02F         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 18776  0032D0  C033  F030         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 18777  0032D4  0012               	return	
 18778  0032D6                     i2l5756:
 18779  0032D6  5038               	movf	i2___ftadd@exp2,w,c
 18780  0032D8  B4D8               	btfsc	status,2,c
 18781  0032DA  D00B               	goto	i2l1092
 18782  0032DC  5039               	movf	i2___ftadd@exp1,w,c
 18783  0032DE  5C38               	subwf	i2___ftadd@exp2,w,c
 18784  0032E0  B0D8               	btfsc	status,0,c
 18785  0032E2  D00E               	goto	i2l5762
 18786  0032E4  5038               	movf	i2___ftadd@exp2,w,c
 18787  0032E6  0800               	sublw	0
 18788  0032E8  2439               	addwf	i2___ftadd@exp1,w,c
 18789  0032EA  6E34               	movwf	??i2___ftadd& (0+255),c
 18790  0032EC  0E18               	movlw	24
 18791  0032EE  6434               	cpfsgt	??i2___ftadd,c
 18792  0032F0  D007               	goto	i2l5762
 18793  0032F2                     i2l1092:
 18794  0032F2  C02E  F02E         	movff	i2___ftadd@f1,?i2___ftadd
 18795  0032F6  C02F  F02F         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 18796  0032FA  C030  F030         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 18797  0032FE  0012               	return	
 18798  003300                     i2l5762:
 18799  003300  0E06               	movlw	6
 18800  003302  6E37               	movwf	i2___ftadd@sign,c
 18801  003304  BE30               	btfsc	i2___ftadd@f1+2,7,c
 18802  003306  8E37               	bsf	i2___ftadd@sign,7,c
 18803  003308  BE33               	btfsc	i2___ftadd@f2+2,7,c
 18804  00330A  8C37               	bsf	i2___ftadd@sign,6,c
 18805  00330C  8E2F               	bsf	i2___ftadd@f1+1,7,c
 18806  00330E  0EFF               	movlw	255
 18807  003310  162E               	andwf	i2___ftadd@f1,f,c
 18808  003312  0EFF               	movlw	255
 18809  003314  162F               	andwf	i2___ftadd@f1+1,f,c
 18810  003316  0E00               	movlw	0
 18811  003318  1630               	andwf	i2___ftadd@f1+2,f,c
 18812  00331A  8E32               	bsf	i2___ftadd@f2+1,7,c
 18813  00331C  0EFF               	movlw	255
 18814  00331E  1631               	andwf	i2___ftadd@f2,f,c
 18815  003320  0EFF               	movlw	255
 18816  003322  1632               	andwf	i2___ftadd@f2+1,f,c
 18817  003324  0E00               	movlw	0
 18818  003326  1633               	andwf	i2___ftadd@f2+2,f,c
 18819  003328  5038               	movf	i2___ftadd@exp2,w,c
 18820  00332A  5C39               	subwf	i2___ftadd@exp1,w,c
 18821  00332C  B0D8               	btfsc	status,0,c
 18822  00332E  D01B               	goto	i2l5788
 18823  003330                     i2l5778:
 18824  003330  90D8               	bcf	status,0,c
 18825  003332  3631               	rlcf	i2___ftadd@f2,f,c
 18826  003334  3632               	rlcf	i2___ftadd@f2+1,f,c
 18827  003336  3633               	rlcf	i2___ftadd@f2+2,f,c
 18828  003338  0638               	decf	i2___ftadd@exp2,f,c
 18829  00333A  5039               	movf	i2___ftadd@exp1,w,c
 18830  00333C  1838               	xorwf	i2___ftadd@exp2,w,c
 18831  00333E  B4D8               	btfsc	status,2,c
 18832  003340  D00D               	goto	i2l5786
 18833  003342  0637               	decf	i2___ftadd@sign,f,c
 18834  003344  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 18835  003348  0E07               	movlw	7
 18836  00334A  1634               	andwf	??i2___ftadd,f,c
 18837  00334C  B4D8               	btfsc	status,2,c
 18838  00334E  D006               	goto	i2l5786
 18839  003350  D7EF               	goto	i2l5778
 18840  003352                     i2l5784:
 18841  003352  90D8               	bcf	status,0,c
 18842  003354  3230               	rrcf	i2___ftadd@f1+2,f,c
 18843  003356  322F               	rrcf	i2___ftadd@f1+1,f,c
 18844  003358  322E               	rrcf	i2___ftadd@f1,f,c
 18845  00335A  2A39               	incf	i2___ftadd@exp1,f,c
 18846  00335C                     i2l5786:
 18847  00335C  5038               	movf	i2___ftadd@exp2,w,c
 18848  00335E  1839               	xorwf	i2___ftadd@exp1,w,c
 18849  003360  B4D8               	btfsc	status,2,c
 18850  003362  D01F               	goto	i2l1103
 18851  003364  D7F6               	goto	i2l5784
 18852  003366                     i2l5788:
 18853  003366  5039               	movf	i2___ftadd@exp1,w,c
 18854  003368  5C38               	subwf	i2___ftadd@exp2,w,c
 18855  00336A  B0D8               	btfsc	status,0,c
 18856  00336C  D01A               	goto	i2l1103
 18857  00336E                     i2l5790:
 18858  00336E  90D8               	bcf	status,0,c
 18859  003370  362E               	rlcf	i2___ftadd@f1,f,c
 18860  003372  362F               	rlcf	i2___ftadd@f1+1,f,c
 18861  003374  3630               	rlcf	i2___ftadd@f1+2,f,c
 18862  003376  0639               	decf	i2___ftadd@exp1,f,c
 18863  003378  5039               	movf	i2___ftadd@exp1,w,c
 18864  00337A  1838               	xorwf	i2___ftadd@exp2,w,c
 18865  00337C  B4D8               	btfsc	status,2,c
 18866  00337E  D00D               	goto	i2l5798
 18867  003380  0637               	decf	i2___ftadd@sign,f,c
 18868  003382  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 18869  003386  0E07               	movlw	7
 18870  003388  1634               	andwf	??i2___ftadd,f,c
 18871  00338A  B4D8               	btfsc	status,2,c
 18872  00338C  D006               	goto	i2l5798
 18873  00338E  D7EF               	goto	i2l5790
 18874  003390                     i2l5796:
 18875  003390  90D8               	bcf	status,0,c
 18876  003392  3233               	rrcf	i2___ftadd@f2+2,f,c
 18877  003394  3232               	rrcf	i2___ftadd@f2+1,f,c
 18878  003396  3231               	rrcf	i2___ftadd@f2,f,c
 18879  003398  2A38               	incf	i2___ftadd@exp2,f,c
 18880  00339A                     i2l5798:
 18881  00339A  5038               	movf	i2___ftadd@exp2,w,c
 18882  00339C  1839               	xorwf	i2___ftadd@exp1,w,c
 18883  00339E  A4D8               	btfss	status,2,c
 18884  0033A0  D7F7               	goto	i2l5796
 18885  0033A2                     i2l1103:
 18886  0033A2  AE37               	btfss	i2___ftadd@sign,7,c
 18887  0033A4  D00C               	goto	i2l1112
 18888  0033A6  0EFF               	movlw	255
 18889  0033A8  1A2E               	xorwf	i2___ftadd@f1,f,c
 18890  0033AA  0EFF               	movlw	255
 18891  0033AC  1A2F               	xorwf	i2___ftadd@f1+1,f,c
 18892  0033AE  0EFF               	movlw	255
 18893  0033B0  1A30               	xorwf	i2___ftadd@f1+2,f,c
 18894  0033B2  0E01               	movlw	1
 18895  0033B4  262E               	addwf	i2___ftadd@f1,f,c
 18896  0033B6  0E00               	movlw	0
 18897  0033B8  222F               	addwfc	i2___ftadd@f1+1,f,c
 18898  0033BA  0E00               	movlw	0
 18899  0033BC  2230               	addwfc	i2___ftadd@f1+2,f,c
 18900  0033BE                     i2l1112:
 18901  0033BE  AC37               	btfss	i2___ftadd@sign,6,c
 18902  0033C0  D00C               	goto	i2l5804
 18903  0033C2  0EFF               	movlw	255
 18904  0033C4  1A31               	xorwf	i2___ftadd@f2,f,c
 18905  0033C6  0EFF               	movlw	255
 18906  0033C8  1A32               	xorwf	i2___ftadd@f2+1,f,c
 18907  0033CA  0EFF               	movlw	255
 18908  0033CC  1A33               	xorwf	i2___ftadd@f2+2,f,c
 18909  0033CE  0E01               	movlw	1
 18910  0033D0  2631               	addwf	i2___ftadd@f2,f,c
 18911  0033D2  0E00               	movlw	0
 18912  0033D4  2232               	addwfc	i2___ftadd@f2+1,f,c
 18913  0033D6  0E00               	movlw	0
 18914  0033D8  2233               	addwfc	i2___ftadd@f2+2,f,c
 18915  0033DA                     i2l5804:
 18916  0033DA  0E00               	movlw	0
 18917  0033DC  6E37               	movwf	i2___ftadd@sign,c
 18918  0033DE  502E               	movf	i2___ftadd@f1,w,c
 18919  0033E0  2631               	addwf	i2___ftadd@f2,f,c
 18920  0033E2  502F               	movf	i2___ftadd@f1+1,w,c
 18921  0033E4  2232               	addwfc	i2___ftadd@f2+1,f,c
 18922  0033E6  5030               	movf	i2___ftadd@f1+2,w,c
 18923  0033E8  2233               	addwfc	i2___ftadd@f2+2,f,c
 18924  0033EA  AE33               	btfss	i2___ftadd@f2+2,7,c
 18925  0033EC  D00E               	goto	i2l5814
 18926  0033EE  0EFF               	movlw	255
 18927  0033F0  1A31               	xorwf	i2___ftadd@f2,f,c
 18928  0033F2  0EFF               	movlw	255
 18929  0033F4  1A32               	xorwf	i2___ftadd@f2+1,f,c
 18930  0033F6  0EFF               	movlw	255
 18931  0033F8  1A33               	xorwf	i2___ftadd@f2+2,f,c
 18932  0033FA  0E01               	movlw	1
 18933  0033FC  2631               	addwf	i2___ftadd@f2,f,c
 18934  0033FE  0E00               	movlw	0
 18935  003400  2232               	addwfc	i2___ftadd@f2+1,f,c
 18936  003402  0E00               	movlw	0
 18937  003404  2233               	addwfc	i2___ftadd@f2+2,f,c
 18938  003406  0E01               	movlw	1
 18939  003408  6E37               	movwf	i2___ftadd@sign,c
 18940  00340A                     i2l5814:
 18941  00340A  C031  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 18942  00340E  C032  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 18943  003412  C033  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 18944  003416  C039  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 18945  00341A  C037  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 18946  00341E  ECAD  F026         	call	i2___ftpack	;wreg free
 18947  003422  C001  F02E         	movff	?i2___ftpack,?i2___ftadd
 18948  003426  C002  F02F         	movff	?i2___ftpack+1,?i2___ftadd+1
 18949  00342A  C003  F030         	movff	?i2___ftpack+2,?i2___ftadd+2
 18950  00342E  0012               	return	
 18951  003430                     __end_ofi2___ftadd:
 18952                           	opt stack 0
 18953                           pclatu	equ	0xFFB
 18954                           pclath	equ	0xFFA
 18955                           tblptru	equ	0xFF8
 18956                           tblptrh	equ	0xFF7
 18957                           tblptrl	equ	0xFF6
 18958                           tablat	equ	0xFF5
 18959                           prodh	equ	0xFF4
 18960                           prodl	equ	0xFF3
 18961                           intcon	equ	0xFF2
 18962                           intcon3	equ	0xFF0
 18963                           postinc0	equ	0xFEE
 18964                           fsr0h	equ	0xFEA
 18965                           fsr0l	equ	0xFE9
 18966                           wreg	equ	0xFE8
 18967                           postdec1	equ	0xFE5
 18968                           fsr1h	equ	0xFE2
 18969                           fsr1l	equ	0xFE1
 18970                           indf2	equ	0xFDF
 18971                           postinc2	equ	0xFDE
 18972                           postdec2	equ	0xFDD
 18973                           fsr2h	equ	0xFDA
 18974                           fsr2l	equ	0xFD9
 18975                           status	equ	0xFD8
 18976                           
 18977 ;; *************** function i2___ftpack *****************
 18978 ;; Defined at:
 18979 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 18980 ;; Parameters:    Size  Location     Type
 18981 ;;  arg             3    0[COMRAM] unsigned um
 18982 ;;  exp             1    3[COMRAM] unsigned char 
 18983 ;;  sign            1    4[COMRAM] unsigned char 
 18984 ;; Auto vars:     Size  Location     Type
 18985 ;;		None
 18986 ;; Return value:  Size  Location     Type
 18987 ;;                  3    0[COMRAM] float 
 18988 ;; Registers used:
 18989 ;;		wreg, status,2, status,0
 18990 ;; Tracked objects:
 18991 ;;		On entry : 0/0
 18992 ;;		On exit  : 0/0
 18993 ;;		Unchanged: 0/0
 18994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18995 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18997 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18998 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18999 ;;Total ram usage:        8 bytes
 19000 ;; Hardware stack levels used:    1
 19001 ;; This function calls:
 19002 ;;		Nothing
 19003 ;; This function is called by:
 19004 ;;		i2___ftadd
 19005 ;;		i2___ftmul
 19006 ;;		i2___lltoft
 19007 ;; This function uses a non-reentrant model
 19008 ;;
 19009                           
 19010                           	psect	text69
 19011  004D5A                     __ptext69:
 19012                           	opt stack 0
 19013  004D5A                     i2___ftpack:
 19014                           	opt stack 19
 19015                           
 19016                           ;incstack = 0
 19017  004D5A  5004               	movf	i2___ftpack@exp,w,c
 19018  004D5C  B4D8               	btfsc	status,2,c
 19019  004D5E  D005               	goto	i2l5248
 19020  004D60  5001               	movf	i2___ftpack@arg,w,c
 19021  004D62  1002               	iorwf	i2___ftpack@arg+1,w,c
 19022  004D64  1003               	iorwf	i2___ftpack@arg+2,w,c
 19023  004D66  A4D8               	btfss	status,2,c
 19024  004D68  D00C               	goto	i2l5254
 19025  004D6A                     i2l5248:
 19026  004D6A  0E00               	movlw	0
 19027  004D6C  6E01               	movwf	?i2___ftpack,c
 19028  004D6E  0E00               	movlw	0
 19029  004D70  6E02               	movwf	?i2___ftpack+1,c
 19030  004D72  0E00               	movlw	0
 19031  004D74  6E03               	movwf	?i2___ftpack+2,c
 19032  004D76  0012               	return	
 19033  004D78                     i2l5252:
 19034  004D78  2A04               	incf	i2___ftpack@exp,f,c
 19035  004D7A  90D8               	bcf	status,0,c
 19036  004D7C  3203               	rrcf	i2___ftpack@arg+2,f,c
 19037  004D7E  3202               	rrcf	i2___ftpack@arg+1,f,c
 19038  004D80  3201               	rrcf	i2___ftpack@arg,f,c
 19039  004D82                     i2l5254:
 19040  004D82  0E00               	movlw	0
 19041  004D84  1401               	andwf	i2___ftpack@arg,w,c
 19042  004D86  6E06               	movwf	??i2___ftpack& (0+255),c
 19043  004D88  0E00               	movlw	0
 19044  004D8A  1402               	andwf	i2___ftpack@arg+1,w,c
 19045  004D8C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 19046  004D8E  0EFE               	movlw	254
 19047  004D90  1403               	andwf	i2___ftpack@arg+2,w,c
 19048  004D92  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 19049  004D94  5006               	movf	??i2___ftpack,w,c
 19050  004D96  1007               	iorwf	??i2___ftpack+1,w,c
 19051  004D98  1008               	iorwf	??i2___ftpack+2,w,c
 19052  004D9A  B4D8               	btfsc	status,2,c
 19053  004D9C  D00C               	goto	i2l5260
 19054  004D9E  D7EC               	goto	i2l5252
 19055  004DA0                     i2l5256:
 19056  004DA0  2A04               	incf	i2___ftpack@exp,f,c
 19057  004DA2  0E01               	movlw	1
 19058  004DA4  2601               	addwf	i2___ftpack@arg,f,c
 19059  004DA6  0E00               	movlw	0
 19060  004DA8  2202               	addwfc	i2___ftpack@arg+1,f,c
 19061  004DAA  0E00               	movlw	0
 19062  004DAC  2203               	addwfc	i2___ftpack@arg+2,f,c
 19063  004DAE  90D8               	bcf	status,0,c
 19064  004DB0  3203               	rrcf	i2___ftpack@arg+2,f,c
 19065  004DB2  3202               	rrcf	i2___ftpack@arg+1,f,c
 19066  004DB4  3201               	rrcf	i2___ftpack@arg,f,c
 19067  004DB6                     i2l5260:
 19068  004DB6  0E00               	movlw	0
 19069  004DB8  1401               	andwf	i2___ftpack@arg,w,c
 19070  004DBA  6E06               	movwf	??i2___ftpack& (0+255),c
 19071  004DBC  0E00               	movlw	0
 19072  004DBE  1402               	andwf	i2___ftpack@arg+1,w,c
 19073  004DC0  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 19074  004DC2  0EFF               	movlw	255
 19075  004DC4  1403               	andwf	i2___ftpack@arg+2,w,c
 19076  004DC6  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 19077  004DC8  5006               	movf	??i2___ftpack,w,c
 19078  004DCA  1007               	iorwf	??i2___ftpack+1,w,c
 19079  004DCC  1008               	iorwf	??i2___ftpack+2,w,c
 19080  004DCE  B4D8               	btfsc	status,2,c
 19081  004DD0  D006               	goto	i2l5264
 19082  004DD2  D7E6               	goto	i2l5256
 19083  004DD4                     i2l5262:
 19084  004DD4  0604               	decf	i2___ftpack@exp,f,c
 19085  004DD6  90D8               	bcf	status,0,c
 19086  004DD8  3601               	rlcf	i2___ftpack@arg,f,c
 19087  004DDA  3602               	rlcf	i2___ftpack@arg+1,f,c
 19088  004DDC  3603               	rlcf	i2___ftpack@arg+2,f,c
 19089  004DDE                     i2l5264:
 19090  004DDE  BE02               	btfsc	i2___ftpack@arg+1,7,c
 19091  004DE0  D003               	goto	i2l1065
 19092  004DE2  0E02               	movlw	2
 19093  004DE4  6004               	cpfslt	i2___ftpack@exp,c
 19094  004DE6  D7F6               	goto	i2l5262
 19095  004DE8                     i2l1065:
 19096  004DE8  A004               	btfss	i2___ftpack@exp,0,c
 19097  004DEA  9E02               	bcf	i2___ftpack@arg+1,7,c
 19098  004DEC  90D8               	bcf	status,0,c
 19099  004DEE  3204               	rrcf	i2___ftpack@exp,f,c
 19100  004DF0  5004               	movf	i2___ftpack@exp,w,c
 19101  004DF2  1203               	iorwf	i2___ftpack@arg+2,f,c
 19102  004DF4  5005               	movf	i2___ftpack@sign,w,c
 19103  004DF6  A4D8               	btfss	status,2,c
 19104  004DF8  8E03               	bsf	i2___ftpack@arg+2,7,c
 19105  004DFA  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 19106  004DFE  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 19107  004E02  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 19108  004E06  0012               	return	
 19109  004E08                     __end_ofi2___ftpack:
 19110                           	opt stack 0
 19111                           pclatu	equ	0xFFB
 19112                           pclath	equ	0xFFA
 19113                           tblptru	equ	0xFF8
 19114                           tblptrh	equ	0xFF7
 19115                           tblptrl	equ	0xFF6
 19116                           tablat	equ	0xFF5
 19117                           prodh	equ	0xFF4
 19118                           prodl	equ	0xFF3
 19119                           intcon	equ	0xFF2
 19120                           intcon3	equ	0xFF0
 19121                           postinc0	equ	0xFEE
 19122                           fsr0h	equ	0xFEA
 19123                           fsr0l	equ	0xFE9
 19124                           wreg	equ	0xFE8
 19125                           postdec1	equ	0xFE5
 19126                           fsr1h	equ	0xFE2
 19127                           fsr1l	equ	0xFE1
 19128                           indf2	equ	0xFDF
 19129                           postinc2	equ	0xFDE
 19130                           postdec2	equ	0xFDD
 19131                           fsr2h	equ	0xFDA
 19132                           fsr2l	equ	0xFD9
 19133                           status	equ	0xFD8
 19134                           
 19135 ;; *************** function i2___ftneg *****************
 19136 ;; Defined at:
 19137 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 19138 ;; Parameters:    Size  Location     Type
 19139 ;;  f1              3    0[COMRAM] float 
 19140 ;; Auto vars:     Size  Location     Type
 19141 ;;		None
 19142 ;; Return value:  Size  Location     Type
 19143 ;;                  3    0[COMRAM] float 
 19144 ;; Registers used:
 19145 ;;		wreg, status,2, status,0
 19146 ;; Tracked objects:
 19147 ;;		On entry : 0/0
 19148 ;;		On exit  : 0/0
 19149 ;;		Unchanged: 0/0
 19150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19151 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19154 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19155 ;;Total ram usage:        3 bytes
 19156 ;; Hardware stack levels used:    1
 19157 ;; This function calls:
 19158 ;;		Nothing
 19159 ;; This function is called by:
 19160 ;;		i2_printf
 19161 ;; This function uses a non-reentrant model
 19162 ;;
 19163                           
 19164                           	psect	text70
 19165  0059BC                     __ptext70:
 19166                           	opt stack 0
 19167  0059BC                     i2___ftneg:
 19168                           	opt stack 21
 19169                           
 19170                           ;incstack = 0
 19171  0059BC  5001               	movf	i2___ftneg@f1,w,c
 19172  0059BE  1002               	iorwf	i2___ftneg@f1+1,w,c
 19173  0059C0  1003               	iorwf	i2___ftneg@f1+2,w,c
 19174  0059C2  B4D8               	btfsc	status,2,c
 19175  0059C4  D006               	goto	i2l1162
 19176  0059C6  0E00               	movlw	0
 19177  0059C8  1A01               	xorwf	i2___ftneg@f1,f,c
 19178  0059CA  0E00               	movlw	0
 19179  0059CC  1A02               	xorwf	i2___ftneg@f1+1,f,c
 19180  0059CE  0E80               	movlw	128
 19181  0059D0  1A03               	xorwf	i2___ftneg@f1+2,f,c
 19182  0059D2                     i2l1162:
 19183  0059D2  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 19184  0059D6  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 19185  0059DA  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 19186  0059DE  0012               	return		;funcret
 19187  0059E0                     __end_ofi2___ftneg:
 19188                           	opt stack 0
 19189                           pclatu	equ	0xFFB
 19190                           pclath	equ	0xFFA
 19191                           tblptru	equ	0xFF8
 19192                           tblptrh	equ	0xFF7
 19193                           tblptrl	equ	0xFF6
 19194                           tablat	equ	0xFF5
 19195                           prodh	equ	0xFF4
 19196                           prodl	equ	0xFF3
 19197                           intcon	equ	0xFF2
 19198                           intcon3	equ	0xFF0
 19199                           postinc0	equ	0xFEE
 19200                           fsr0h	equ	0xFEA
 19201                           fsr0l	equ	0xFE9
 19202                           wreg	equ	0xFE8
 19203                           postdec1	equ	0xFE5
 19204                           fsr1h	equ	0xFE2
 19205                           fsr1l	equ	0xFE1
 19206                           indf2	equ	0xFDF
 19207                           postinc2	equ	0xFDE
 19208                           postdec2	equ	0xFDD
 19209                           fsr2h	equ	0xFDA
 19210                           fsr2l	equ	0xFD9
 19211                           status	equ	0xFD8
 19212                           
 19213 ;; *************** function i2___ftge *****************
 19214 ;; Defined at:
 19215 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 19216 ;; Parameters:    Size  Location     Type
 19217 ;;  ff1             3    0[COMRAM] float 
 19218 ;;  ff2             3    3[COMRAM] float 
 19219 ;; Auto vars:     Size  Location     Type
 19220 ;;		None
 19221 ;; Return value:  Size  Location     Type
 19222 ;;		None               void
 19223 ;; Registers used:
 19224 ;;		wreg, status,2, status,0
 19225 ;; Tracked objects:
 19226 ;;		On entry : 0/0
 19227 ;;		On exit  : 0/0
 19228 ;;		Unchanged: 0/0
 19229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19230 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19232 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19233 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19234 ;;Total ram usage:        9 bytes
 19235 ;; Hardware stack levels used:    1
 19236 ;; This function calls:
 19237 ;;		Nothing
 19238 ;; This function is called by:
 19239 ;;		i2_printf
 19240 ;; This function uses a non-reentrant model
 19241 ;;
 19242                           
 19243                           	psect	text71
 19244  004FE2                     __ptext71:
 19245                           	opt stack 0
 19246  004FE2                     i2___ftge:
 19247                           	opt stack 21
 19248                           
 19249                           ;incstack = 0
 19250  004FE2  AE03               	btfss	i2___ftge@ff1+2,7,c
 19251  004FE4  D016               	goto	i2l6280
 19252  004FE6  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 19253  004FEA  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 19254  004FEE  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 19255  004FF2  1E07               	comf	??i2___ftge,f,c
 19256  004FF4  1E08               	comf	??i2___ftge+1,f,c
 19257  004FF6  1E09               	comf	??i2___ftge+2,f,c
 19258  004FF8  2A07               	incf	??i2___ftge,f,c
 19259  004FFA  0E00               	movlw	0
 19260  004FFC  2208               	addwfc	??i2___ftge+1,f,c
 19261  004FFE  2209               	addwfc	??i2___ftge+2,f,c
 19262  005000  0E00               	movlw	0
 19263  005002  2407               	addwf	??i2___ftge,w,c
 19264  005004  6E01               	movwf	i2___ftge@ff1,c
 19265  005006  0E00               	movlw	0
 19266  005008  2008               	addwfc	??i2___ftge+1,w,c
 19267  00500A  6E02               	movwf	i2___ftge@ff1+1,c
 19268  00500C  0E80               	movlw	128
 19269  00500E  2009               	addwfc	??i2___ftge+2,w,c
 19270  005010  6E03               	movwf	i2___ftge@ff1+2,c
 19271  005012                     i2l6280:
 19272  005012  AE06               	btfss	i2___ftge@ff2+2,7,c
 19273  005014  D016               	goto	i2l6284
 19274  005016  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 19275  00501A  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 19276  00501E  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 19277  005022  1E07               	comf	??i2___ftge,f,c
 19278  005024  1E08               	comf	??i2___ftge+1,f,c
 19279  005026  1E09               	comf	??i2___ftge+2,f,c
 19280  005028  2A07               	incf	??i2___ftge,f,c
 19281  00502A  0E00               	movlw	0
 19282  00502C  2208               	addwfc	??i2___ftge+1,f,c
 19283  00502E  2209               	addwfc	??i2___ftge+2,f,c
 19284  005030  0E00               	movlw	0
 19285  005032  2407               	addwf	??i2___ftge,w,c
 19286  005034  6E04               	movwf	i2___ftge@ff2,c
 19287  005036  0E00               	movlw	0
 19288  005038  2008               	addwfc	??i2___ftge+1,w,c
 19289  00503A  6E05               	movwf	i2___ftge@ff2+1,c
 19290  00503C  0E80               	movlw	128
 19291  00503E  2009               	addwfc	??i2___ftge+2,w,c
 19292  005040  6E06               	movwf	i2___ftge@ff2+2,c
 19293  005042                     i2l6284:
 19294  005042  0E00               	movlw	0
 19295  005044  1A01               	xorwf	i2___ftge@ff1,f,c
 19296  005046  0E00               	movlw	0
 19297  005048  1A02               	xorwf	i2___ftge@ff1+1,f,c
 19298  00504A  0E80               	movlw	128
 19299  00504C  1A03               	xorwf	i2___ftge@ff1+2,f,c
 19300  00504E  0E00               	movlw	0
 19301  005050  1A04               	xorwf	i2___ftge@ff2,f,c
 19302  005052  0E00               	movlw	0
 19303  005054  1A05               	xorwf	i2___ftge@ff2+1,f,c
 19304  005056  0E80               	movlw	128
 19305  005058  1A06               	xorwf	i2___ftge@ff2+2,f,c
 19306  00505A  5004               	movf	i2___ftge@ff2,w,c
 19307  00505C  5C01               	subwf	i2___ftge@ff1,w,c
 19308  00505E  5005               	movf	i2___ftge@ff2+1,w,c
 19309  005060  5802               	subwfb	i2___ftge@ff1+1,w,c
 19310  005062  5006               	movf	i2___ftge@ff2+2,w,c
 19311  005064  5803               	subwfb	i2___ftge@ff1+2,w,c
 19312  005066  B0D8               	btfsc	status,0,c
 19313  005068  D002               	goto	i2l6290
 19314  00506A  90D8               	bcf	status,0,c
 19315  00506C  0012               	return	
 19316  00506E                     i2l6290:
 19317  00506E  80D8               	bsf	status,0,c
 19318  005070  0012               	return	
 19319  005072                     __end_ofi2___ftge:
 19320                           	opt stack 0
 19321                           pclatu	equ	0xFFB
 19322                           pclath	equ	0xFFA
 19323                           tblptru	equ	0xFF8
 19324                           tblptrh	equ	0xFF7
 19325                           tblptrl	equ	0xFF6
 19326                           tablat	equ	0xFF5
 19327                           prodh	equ	0xFF4
 19328                           prodl	equ	0xFF3
 19329                           intcon	equ	0xFF2
 19330                           intcon3	equ	0xFF0
 19331                           postinc0	equ	0xFEE
 19332                           fsr0h	equ	0xFEA
 19333                           fsr0l	equ	0xFE9
 19334                           wreg	equ	0xFE8
 19335                           postdec1	equ	0xFE5
 19336                           fsr1h	equ	0xFE2
 19337                           fsr1l	equ	0xFE1
 19338                           indf2	equ	0xFDF
 19339                           postinc2	equ	0xFDE
 19340                           postdec2	equ	0xFDD
 19341                           fsr2h	equ	0xFDA
 19342                           fsr2l	equ	0xFD9
 19343                           status	equ	0xFD8
 19344                           
 19345 ;; *************** function i2_lcdClear *****************
 19346 ;; Defined at:
 19347 ;;		line 74 in file "lcd.c"
 19348 ;; Parameters:    Size  Location     Type
 19349 ;;		None
 19350 ;; Auto vars:     Size  Location     Type
 19351 ;;		None
 19352 ;; Return value:  Size  Location     Type
 19353 ;;                  1    wreg      void 
 19354 ;; Registers used:
 19355 ;;		wreg, status,2, status,0, cstack
 19356 ;; Tracked objects:
 19357 ;;		On entry : 0/0
 19358 ;;		On exit  : 0/0
 19359 ;;		Unchanged: 0/0
 19360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19365 ;;Total ram usage:        0 bytes
 19366 ;; Hardware stack levels used:    1
 19367 ;; Hardware stack levels required when called:    2
 19368 ;; This function calls:
 19369 ;;		i2_lcdInst
 19370 ;; This function is called by:
 19371 ;;		_service
 19372 ;; This function uses a non-reentrant model
 19373 ;;
 19374                           
 19375                           	psect	text72
 19376  005A78                     __ptext72:
 19377                           	opt stack 0
 19378  005A78                     i2_lcdClear:
 19379                           	opt stack 20
 19380                           
 19381                           ;lcd.c: 75: lcdInst(0b00000001);
 19382                           
 19383                           ;incstack = 0
 19384  005A78  0E01               	movlw	1
 19385  005A7A  EC01  F02D         	call	i2_lcdInst
 19386  005A7E  0012               	return		;funcret
 19387  005A80                     __end_ofi2_lcdClear:
 19388                           	opt stack 0
 19389                           pclatu	equ	0xFFB
 19390                           pclath	equ	0xFFA
 19391                           tblptru	equ	0xFF8
 19392                           tblptrh	equ	0xFF7
 19393                           tblptrl	equ	0xFF6
 19394                           tablat	equ	0xFF5
 19395                           prodh	equ	0xFF4
 19396                           prodl	equ	0xFF3
 19397                           intcon	equ	0xFF2
 19398                           intcon3	equ	0xFF0
 19399                           postinc0	equ	0xFEE
 19400                           fsr0h	equ	0xFEA
 19401                           fsr0l	equ	0xFE9
 19402                           wreg	equ	0xFE8
 19403                           postdec1	equ	0xFE5
 19404                           fsr1h	equ	0xFE2
 19405                           fsr1l	equ	0xFE1
 19406                           indf2	equ	0xFDF
 19407                           postinc2	equ	0xFDE
 19408                           postdec2	equ	0xFDD
 19409                           fsr2h	equ	0xFDA
 19410                           fsr2l	equ	0xFD9
 19411                           status	equ	0xFD8
 19412                           
 19413 ;; *************** function i2_lcdInst *****************
 19414 ;; Defined at:
 19415 ;;		line 27 in file "lcd.c"
 19416 ;; Parameters:    Size  Location     Type
 19417 ;;  data            1    wreg     unsigned char 
 19418 ;; Auto vars:     Size  Location     Type
 19419 ;;  data            1    3[COMRAM] unsigned char 
 19420 ;; Return value:  Size  Location     Type
 19421 ;;                  1    wreg      void 
 19422 ;; Registers used:
 19423 ;;		wreg, status,2, status,0, cstack
 19424 ;; Tracked objects:
 19425 ;;		On entry : 0/0
 19426 ;;		On exit  : 0/0
 19427 ;;		Unchanged: 0/0
 19428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19432 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19433 ;;Total ram usage:        2 bytes
 19434 ;; Hardware stack levels used:    1
 19435 ;; Hardware stack levels required when called:    1
 19436 ;; This function calls:
 19437 ;;		i2_lcdNibble
 19438 ;; This function is called by:
 19439 ;;		i2_lcdClear
 19440 ;;		i2_lcdNewline
 19441 ;; This function uses a non-reentrant model
 19442 ;;
 19443                           
 19444                           	psect	text73
 19445  005A02                     __ptext73:
 19446                           	opt stack 0
 19447  005A02                     i2_lcdInst:
 19448                           	opt stack 18
 19449                           
 19450                           ;incstack = 0
 19451                           ;i2lcdInst@data stored from wreg
 19452  005A02  6E04               	movwf	i2lcdInst@data,c
 19453                           
 19454                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 19455  005A04  948C               	bcf	3980,2,c	;volatile
 19456                           
 19457                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 19458  005A06  0E74               	movlw	116
 19459  005A08                     i2u857_47:
 19460  005A08  2EE8               	decfsz	wreg,f,c
 19461  005A0A  D7FE               	bra	i2u857_47
 19462  005A0C  D000               	nop2	
 19463                           
 19464                           ;lcd.c: 30: lcdNibble(data);
 19465  005A0E  5004               	movf	i2lcdInst@data,w,c
 19466  005A10  ECE8  F029         	call	i2_lcdNibble
 19467                           
 19468                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 19469  005A14  0E04               	movlw	4
 19470  005A16  6E03               	movwf	??i2_lcdInst& (0+255),c
 19471  005A18  0E3E               	movlw	62
 19472  005A1A                     i2u858_47:
 19473  005A1A  2EE8               	decfsz	wreg,f,c
 19474  005A1C  D7FE               	bra	i2u858_47
 19475  005A1E  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
 19476  005A20  D7FC               	bra	i2u858_47
 19477  005A22  0012               	return		;funcret
 19478  005A24                     __end_ofi2_lcdInst:
 19479                           	opt stack 0
 19480                           pclatu	equ	0xFFB
 19481                           pclath	equ	0xFFA
 19482                           tblptru	equ	0xFF8
 19483                           tblptrh	equ	0xFF7
 19484                           tblptrl	equ	0xFF6
 19485                           tablat	equ	0xFF5
 19486                           prodh	equ	0xFF4
 19487                           prodl	equ	0xFF3
 19488                           intcon	equ	0xFF2
 19489                           intcon3	equ	0xFF0
 19490                           postinc0	equ	0xFEE
 19491                           fsr0h	equ	0xFEA
 19492                           fsr0l	equ	0xFE9
 19493                           wreg	equ	0xFE8
 19494                           postdec1	equ	0xFE5
 19495                           fsr1h	equ	0xFE2
 19496                           fsr1l	equ	0xFE1
 19497                           indf2	equ	0xFDF
 19498                           postinc2	equ	0xFDE
 19499                           postdec2	equ	0xFDD
 19500                           fsr2h	equ	0xFDA
 19501                           fsr2l	equ	0xFD9
 19502                           status	equ	0xFD8
 19503                           
 19504 ;; *************** function i2_lcdNibble *****************
 19505 ;; Defined at:
 19506 ;;		line 46 in file "lcd.c"
 19507 ;; Parameters:    Size  Location     Type
 19508 ;;  data            1    wreg     unsigned char 
 19509 ;; Auto vars:     Size  Location     Type
 19510 ;;  data            1    1[COMRAM] unsigned char 
 19511 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 19512 ;; Return value:  Size  Location     Type
 19513 ;;                  1    wreg      void 
 19514 ;; Registers used:
 19515 ;;		wreg, status,2, status,0
 19516 ;; Tracked objects:
 19517 ;;		On entry : 0/0
 19518 ;;		On exit  : 0/0
 19519 ;;		Unchanged: 0/0
 19520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19522 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19524 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19525 ;;Total ram usage:        2 bytes
 19526 ;; Hardware stack levels used:    1
 19527 ;; This function calls:
 19528 ;;		Nothing
 19529 ;; This function is called by:
 19530 ;;		i2_lcdInst
 19531 ;;		i2_putch
 19532 ;; This function uses a non-reentrant model
 19533 ;;
 19534                           
 19535                           	psect	text74
 19536  0053D0                     __ptext74:
 19537                           	opt stack 0
 19538  0053D0                     i2_lcdNibble:
 19539                           	opt stack 20
 19540                           
 19541                           ;incstack = 0
 19542                           ;i2lcdNibble@data stored from wreg
 19543  0053D0  6E02               	movwf	i2lcdNibble@data,c
 19544                           
 19545                           ;lcd.c: 48: char temp = data & 0xF0;
 19546  0053D2  5002               	movf	i2lcdNibble@data,w,c
 19547  0053D4  0BF0               	andlw	240
 19548  0053D6  6E01               	movwf	i2lcdNibble@temp,c
 19549                           
 19550                           ;lcd.c: 49: LATD = LATD & 0x0F;
 19551  0053D8  508C               	movf	3980,w,c	;volatile
 19552  0053DA  0B0F               	andlw	15
 19553  0053DC  6E8C               	movwf	3980,c	;volatile
 19554                           
 19555                           ;lcd.c: 50: LATD = temp | LATD;
 19556  0053DE  5001               	movf	i2lcdNibble@temp,w,c
 19557  0053E0  108C               	iorwf	3980,w,c	;volatile
 19558  0053E2  6E8C               	movwf	3980,c	;volatile
 19559                           
 19560                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 19561  0053E4  968C               	bcf	3980,3,c	;volatile
 19562                           
 19563                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 19564  0053E6  0ED6               	movlw	214
 19565  0053E8                     i2u859_47:
 19566  0053E8  D000               	nop2	
 19567  0053EA  D000               	nop2	
 19568  0053EC  2EE8               	decfsz	wreg,f,c
 19569  0053EE  D7FC               	bra	i2u859_47
 19570  0053F0  D000               	nop2	
 19571                           
 19572                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 19573  0053F2  868C               	bsf	3980,3,c	;volatile
 19574                           
 19575                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 19576  0053F4  0ED6               	movlw	214
 19577  0053F6                     i2u860_47:
 19578  0053F6  D000               	nop2	
 19579  0053F8  D000               	nop2	
 19580  0053FA  2EE8               	decfsz	wreg,f,c
 19581  0053FC  D7FC               	bra	i2u860_47
 19582  0053FE  D000               	nop2	
 19583                           
 19584                           ;lcd.c: 58: data = data << 4;
 19585  005400  3802               	swapf	i2lcdNibble@data,w,c
 19586  005402  0BF0               	andlw	240
 19587  005404  6E02               	movwf	i2lcdNibble@data,c
 19588                           
 19589                           ;lcd.c: 60: temp = data & 0xF0;
 19590  005406  5002               	movf	i2lcdNibble@data,w,c
 19591  005408  0BF0               	andlw	240
 19592  00540A  6E01               	movwf	i2lcdNibble@temp,c
 19593                           
 19594                           ;lcd.c: 61: LATD = LATD & 0x0F;
 19595  00540C  508C               	movf	3980,w,c	;volatile
 19596  00540E  0B0F               	andlw	15
 19597  005410  6E8C               	movwf	3980,c	;volatile
 19598                           
 19599                           ;lcd.c: 62: LATD = temp | LATD;
 19600  005412  5001               	movf	i2lcdNibble@temp,w,c
 19601  005414  108C               	iorwf	3980,w,c	;volatile
 19602  005416  6E8C               	movwf	3980,c	;volatile
 19603                           
 19604                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 19605  005418  968C               	bcf	3980,3,c	;volatile
 19606                           
 19607                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 19608  00541A  0ED6               	movlw	214
 19609  00541C                     i2u861_47:
 19610  00541C  D000               	nop2	
 19611  00541E  D000               	nop2	
 19612  005420  2EE8               	decfsz	wreg,f,c
 19613  005422  D7FC               	bra	i2u861_47
 19614  005424  D000               	nop2	
 19615                           
 19616                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 19617  005426  868C               	bsf	3980,3,c	;volatile
 19618                           
 19619                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 19620  005428  0ED6               	movlw	214
 19621  00542A                     i2u862_47:
 19622  00542A  D000               	nop2	
 19623  00542C  D000               	nop2	
 19624  00542E  2EE8               	decfsz	wreg,f,c
 19625  005430  D7FC               	bra	i2u862_47
 19626  005432  D000               	nop2	
 19627  005434  0012               	return		;funcret
 19628  005436                     __end_ofi2_lcdNibble:
 19629                           	opt stack 0
 19630                           pclatu	equ	0xFFB
 19631                           pclath	equ	0xFFA
 19632                           tblptru	equ	0xFF8
 19633                           tblptrh	equ	0xFF7
 19634                           tblptrl	equ	0xFF6
 19635                           tablat	equ	0xFF5
 19636                           prodh	equ	0xFF4
 19637                           prodl	equ	0xFF3
 19638                           intcon	equ	0xFF2
 19639                           intcon3	equ	0xFF0
 19640                           postinc0	equ	0xFEE
 19641                           fsr0h	equ	0xFEA
 19642                           fsr0l	equ	0xFE9
 19643                           wreg	equ	0xFE8
 19644                           postdec1	equ	0xFE5
 19645                           fsr1h	equ	0xFE2
 19646                           fsr1l	equ	0xFE1
 19647                           indf2	equ	0xFDF
 19648                           postinc2	equ	0xFDE
 19649                           postdec2	equ	0xFDD
 19650                           fsr2h	equ	0xFDA
 19651                           fsr2l	equ	0xFD9
 19652                           status	equ	0xFD8
 19653                           
 19654 ;; *************** function _servoInterruptService *****************
 19655 ;; Defined at:
 19656 ;;		line 52 in file "servo.c"
 19657 ;; Parameters:    Size  Location     Type
 19658 ;;		None
 19659 ;; Auto vars:     Size  Location     Type
 19660 ;;		None
 19661 ;; Return value:  Size  Location     Type
 19662 ;;                  1    wreg      void 
 19663 ;; Registers used:
 19664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19665 ;; Tracked objects:
 19666 ;;		On entry : 0/0
 19667 ;;		On exit  : 0/0
 19668 ;;		Unchanged: 0/0
 19669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19672 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19673 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19674 ;;Total ram usage:        4 bytes
 19675 ;; Hardware stack levels used:    1
 19676 ;; Hardware stack levels required when called:    1
 19677 ;; This function calls:
 19678 ;;		i2___awmod
 19679 ;;		i2_digitalWrite
 19680 ;;		i2_startTimer
 19681 ;; This function is called by:
 19682 ;;		_service
 19683 ;; This function uses a non-reentrant model
 19684 ;;
 19685                           
 19686                           	psect	text75
 19687  004394                     __ptext75:
 19688                           	opt stack 0
 19689  004394                     _servoInterruptService:
 19690                           	opt stack 21
 19691                           
 19692                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 19693                           
 19694                           ;incstack = 0
 19695  004394  A4F2               	btfss	intcon,2,c	;volatile
 19696  004396  0012               	return	
 19697  004398  94F2               	bcf	intcon,2,c	;volatile
 19698                           
 19699                           ;servo.c: 55: digitalWrite(servos[curr],0);
 19700  00439A  90D8               	bcf	status,0,c
 19701  00439C  347B               	rlcf	_curr,w,c
 19702  00439E  6ED9               	movwf	fsr2l,c
 19703  0043A0  347C               	rlcf	_curr+1,w,c
 19704  0043A2  6EDA               	movwf	fsr2h,c
 19705  0043A4  0E9A               	movlw	low _servos
 19706  0043A6  26D9               	addwf	fsr2l,f,c
 19707  0043A8  0E01               	movlw	high _servos
 19708  0043AA  22DA               	addwfc	fsr2h,f,c
 19709  0043AC  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 19710  0043B0  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 19711  0043B4  0E00               	movlw	0
 19712  0043B6  6E0A               	movwf	i2digitalWrite@val+1,c
 19713  0043B8  0E00               	movlw	0
 19714  0043BA  6E09               	movwf	i2digitalWrite@val,c
 19715  0043BC  EC8C  F025         	call	i2_digitalWrite	;wreg free
 19716                           
 19717                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 19718  0043C0  0E01               	movlw	1
 19719  0043C2  247B               	addwf	_curr,w,c
 19720  0043C4  6E01               	movwf	i2___awmod@dividend,c
 19721  0043C6  0E00               	movlw	0
 19722  0043C8  207C               	addwfc	_curr+1,w,c
 19723  0043CA  6E02               	movwf	i2___awmod@dividend+1,c
 19724  0043CC  0E01               	movlw	1
 19725  0043CE  0100               	movlb	0	; () banked
 19726  0043D0  25FE               	addwf	_n& (0+255),w,b
 19727  0043D2  6E03               	movwf	i2___awmod@divisor,c
 19728  0043D4  0E00               	movlw	0
 19729  0043D6  0100               	movlb	0	; () banked
 19730  0043D8  21FF               	addwfc	(_n+1)& (0+255),w,b
 19731  0043DA  6E04               	movwf	i2___awmod@divisor+1,c
 19732  0043DC  EC7D  F029         	call	i2___awmod	;wreg free
 19733  0043E0  90D8               	bcf	status,0,c
 19734  0043E2  3601               	rlcf	?i2___awmod,f,c
 19735  0043E4  3602               	rlcf	?i2___awmod+1,f,c
 19736  0043E6  0E9A               	movlw	low _servos
 19737  0043E8  2401               	addwf	?i2___awmod,w,c
 19738  0043EA  6ED9               	movwf	fsr2l,c
 19739  0043EC  0E01               	movlw	high _servos
 19740  0043EE  2002               	addwfc	?i2___awmod+1,w,c
 19741  0043F0  6EDA               	movwf	fsr2h,c
 19742  0043F2  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 19743  0043F6  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 19744  0043FA  0E00               	movlw	0
 19745  0043FC  6E0A               	movwf	i2digitalWrite@val+1,c
 19746  0043FE  0E01               	movlw	1
 19747  004400  6E09               	movwf	i2digitalWrite@val,c
 19748  004402  EC8C  F025         	call	i2_digitalWrite	;wreg free
 19749                           
 19750                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 19751  004406  0E00               	movlw	0
 19752  004408  6E08               	movwf	i2startTimer@timer+1,c
 19753  00440A  0E00               	movlw	0
 19754  00440C  6E07               	movwf	i2startTimer@timer,c
 19755  00440E  0EFF               	movlw	255
 19756  004410  6E10               	movwf	??_servoInterruptService& (0+255),c
 19757  004412  0EFF               	movlw	255
 19758  004414  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 19759  004416  0E01               	movlw	1
 19760  004418  247B               	addwf	_curr,w,c
 19761  00441A  6E01               	movwf	i2___awmod@dividend,c
 19762  00441C  0E00               	movlw	0
 19763  00441E  207C               	addwfc	_curr+1,w,c
 19764  004420  6E02               	movwf	i2___awmod@dividend+1,c
 19765  004422  0E01               	movlw	1
 19766  004424  0100               	movlb	0	; () banked
 19767  004426  25FE               	addwf	_n& (0+255),w,b
 19768  004428  6E03               	movwf	i2___awmod@divisor,c
 19769  00442A  0E00               	movlw	0
 19770  00442C  0100               	movlb	0	; () banked
 19771  00442E  21FF               	addwfc	(_n+1)& (0+255),w,b
 19772  004430  6E04               	movwf	i2___awmod@divisor+1,c
 19773  004432  EC7D  F029         	call	i2___awmod	;wreg free
 19774  004436  90D8               	bcf	status,0,c
 19775  004438  3601               	rlcf	?i2___awmod,f,c
 19776  00443A  3602               	rlcf	?i2___awmod+1,f,c
 19777  00443C  0E92               	movlw	low _pulse
 19778  00443E  2401               	addwf	?i2___awmod,w,c
 19779  004440  6ED9               	movwf	fsr2l,c
 19780  004442  0E01               	movlw	high _pulse
 19781  004444  2002               	addwfc	?i2___awmod+1,w,c
 19782  004446  6EDA               	movwf	fsr2h,c
 19783  004448  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 19784  00444C  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 19785  004450  1E12               	comf	??_servoInterruptService+2,f,c
 19786  004452  1E13               	comf	??_servoInterruptService+3,f,c
 19787  004454  4A12               	infsnz	??_servoInterruptService+2,f,c
 19788  004456  2A13               	incf	??_servoInterruptService+3,f,c
 19789  004458  5010               	movf	??_servoInterruptService,w,c
 19790  00445A  2612               	addwf	??_servoInterruptService+2,f,c
 19791  00445C  5011               	movf	??_servoInterruptService+1,w,c
 19792  00445E  2213               	addwfc	??_servoInterruptService+3,f,c
 19793  004460  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 19794  004464  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 19795  004468  6A0B               	clrf	i2startTimer@val+2,c
 19796  00446A  6A0C               	clrf	i2startTimer@val+3,c
 19797  00446C  ECBE  F02A         	call	i2_startTimer	;wreg free
 19798                           
 19799                           ;servo.c: 59: curr = (curr+1)%(n+1);
 19800  004470  0E01               	movlw	1
 19801  004472  247B               	addwf	_curr,w,c
 19802  004474  6E01               	movwf	i2___awmod@dividend,c
 19803  004476  0E00               	movlw	0
 19804  004478  207C               	addwfc	_curr+1,w,c
 19805  00447A  6E02               	movwf	i2___awmod@dividend+1,c
 19806  00447C  0E01               	movlw	1
 19807  00447E  0100               	movlb	0	; () banked
 19808  004480  25FE               	addwf	_n& (0+255),w,b
 19809  004482  6E03               	movwf	i2___awmod@divisor,c
 19810  004484  0E00               	movlw	0
 19811  004486  0100               	movlb	0	; () banked
 19812  004488  21FF               	addwfc	(_n+1)& (0+255),w,b
 19813  00448A  6E04               	movwf	i2___awmod@divisor+1,c
 19814  00448C  EC7D  F029         	call	i2___awmod	;wreg free
 19815  004490  C001  F07B         	movff	?i2___awmod,_curr
 19816  004494  C002  F07C         	movff	?i2___awmod+1,_curr+1
 19817  004498  0012               	return	
 19818  00449A                     __end_of_servoInterruptService:
 19819                           	opt stack 0
 19820                           pclatu	equ	0xFFB
 19821                           pclath	equ	0xFFA
 19822                           tblptru	equ	0xFF8
 19823                           tblptrh	equ	0xFF7
 19824                           tblptrl	equ	0xFF6
 19825                           tablat	equ	0xFF5
 19826                           prodh	equ	0xFF4
 19827                           prodl	equ	0xFF3
 19828                           intcon	equ	0xFF2
 19829                           intcon3	equ	0xFF0
 19830                           postinc0	equ	0xFEE
 19831                           fsr0h	equ	0xFEA
 19832                           fsr0l	equ	0xFE9
 19833                           wreg	equ	0xFE8
 19834                           postdec1	equ	0xFE5
 19835                           fsr1h	equ	0xFE2
 19836                           fsr1l	equ	0xFE1
 19837                           indf2	equ	0xFDF
 19838                           postinc2	equ	0xFDE
 19839                           postdec2	equ	0xFDD
 19840                           fsr2h	equ	0xFDA
 19841                           fsr2l	equ	0xFD9
 19842                           status	equ	0xFD8
 19843                           
 19844 ;; *************** function i2_startTimer *****************
 19845 ;; Defined at:
 19846 ;;		line 76 in file "timer.c"
 19847 ;; Parameters:    Size  Location     Type
 19848 ;;  timer           2    6[COMRAM] int 
 19849 ;;  val             4    8[COMRAM] long 
 19850 ;; Auto vars:     Size  Location     Type
 19851 ;;		None
 19852 ;; Return value:  Size  Location     Type
 19853 ;;                  1    wreg      void 
 19854 ;; Registers used:
 19855 ;;		wreg, status,2, status,0
 19856 ;; Tracked objects:
 19857 ;;		On entry : 0/0
 19858 ;;		On exit  : 0/0
 19859 ;;		Unchanged: 0/0
 19860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19861 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19864 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19865 ;;Total ram usage:        8 bytes
 19866 ;; Hardware stack levels used:    1
 19867 ;; This function calls:
 19868 ;;		Nothing
 19869 ;; This function is called by:
 19870 ;;		_service
 19871 ;;		_servoInterruptService
 19872 ;; This function uses a non-reentrant model
 19873 ;;
 19874                           
 19875                           	psect	text76
 19876  00557C                     __ptext76:
 19877                           	opt stack 0
 19878  00557C                     i2_startTimer:
 19879                           	opt stack 22
 19880                           
 19881                           ;timer.c: 77: switch(timer){
 19882                           
 19883                           ;incstack = 0
 19884  00557C  D012               	goto	i2l6094
 19885  00557E                     i2l429:
 19886                           
 19887                           ;timer.c: 79: TMR0H = val>>8;
 19888  00557E  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 19889                           
 19890                           ;timer.c: 80: TMR0L = val;
 19891  005582  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 19892                           
 19893                           ;timer.c: 81: T0CON |= 1<<7;
 19894  005586  8ED5               	bsf	4053,7,c	;volatile
 19895                           
 19896                           ;timer.c: 82: break;
 19897  005588  0012               	return	
 19898  00558A                     i2l431:
 19899                           
 19900                           ;timer.c: 84: TMR1H = val>>8;
 19901  00558A  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 19902                           
 19903                           ;timer.c: 85: TMR1L = val;
 19904  00558E  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 19905                           
 19906                           ;timer.c: 86: T1CON |= 1<<0;
 19907  005592  80CD               	bsf	4045,0,c	;volatile
 19908                           
 19909                           ;timer.c: 87: break;
 19910  005594  0012               	return	
 19911  005596                     i2l432:
 19912                           
 19913                           ;timer.c: 89: TMR3H = val>>8;
 19914  005596  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 19915                           
 19916                           ;timer.c: 90: TMR3L = val;
 19917  00559A  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 19918                           
 19919                           ;timer.c: 91: T3CON |= 1<<0;
 19920  00559E  80B1               	bsf	4017,0,c	;volatile
 19921                           
 19922                           ;timer.c: 92: }
 19923  0055A0  0012               	return	
 19924  0055A2                     i2l6094:
 19925  0055A2  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 19926  0055A6  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 19927                           
 19928                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19929                           ; Switch size 1, requested type "space"
 19930                           ; Number of cases is 1, Range of values is 0 to 0
 19931                           ; switch strategies available:
 19932                           ; Name         Instructions Cycles
 19933                           ; simple_byte            4     3 (average)
 19934                           ;	Chosen strategy is simple_byte
 19935  0055AA  500E               	movf	??i2_startTimer+1,w,c
 19936  0055AC  0A00               	xorlw	0	; case 0
 19937  0055AE  A4D8               	btfss	status,2,c
 19938  0055B0  0012               	return	
 19939                           
 19940                           ; Switch size 1, requested type "space"
 19941                           ; Number of cases is 3, Range of values is 0 to 3
 19942                           ; switch strategies available:
 19943                           ; Name         Instructions Cycles
 19944                           ; simple_byte           10     6 (average)
 19945                           ;	Chosen strategy is simple_byte
 19946  0055B2  500D               	movf	??i2_startTimer,w,c
 19947  0055B4  0A00               	xorlw	0	; case 0
 19948  0055B6  B4D8               	btfsc	status,2,c
 19949  0055B8  D7E2               	goto	i2l429
 19950  0055BA  0A01               	xorlw	1	; case 1
 19951  0055BC  B4D8               	btfsc	status,2,c
 19952  0055BE  D7E5               	goto	i2l431
 19953  0055C0  0A02               	xorlw	2	; case 3
 19954  0055C2  A4D8               	btfss	status,2,c
 19955  0055C4  0012               	return	
 19956  0055C6  D7E7               	goto	i2l432
 19957  0055C8                     __end_ofi2_startTimer:
 19958                           	opt stack 0
 19959                           pclatu	equ	0xFFB
 19960                           pclath	equ	0xFFA
 19961                           tblptru	equ	0xFF8
 19962                           tblptrh	equ	0xFF7
 19963                           tblptrl	equ	0xFF6
 19964                           tablat	equ	0xFF5
 19965                           prodh	equ	0xFF4
 19966                           prodl	equ	0xFF3
 19967                           intcon	equ	0xFF2
 19968                           intcon3	equ	0xFF0
 19969                           postinc0	equ	0xFEE
 19970                           fsr0h	equ	0xFEA
 19971                           fsr0l	equ	0xFE9
 19972                           wreg	equ	0xFE8
 19973                           postdec1	equ	0xFE5
 19974                           fsr1h	equ	0xFE2
 19975                           fsr1l	equ	0xFE1
 19976                           indf2	equ	0xFDF
 19977                           postinc2	equ	0xFDE
 19978                           postdec2	equ	0xFDD
 19979                           fsr2h	equ	0xFDA
 19980                           fsr2l	equ	0xFD9
 19981                           status	equ	0xFD8
 19982                           
 19983 ;; *************** function i2_digitalWrite *****************
 19984 ;; Defined at:
 19985 ;;		line 53 in file "iopin.c"
 19986 ;; Parameters:    Size  Location     Type
 19987 ;;  pin             2    6[COMRAM] PTR int 
 19988 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
 19989 ;;		 -> conveyorServo(4), cylinderMotor(4), 
 19990 ;;  val             2    8[COMRAM] int 
 19991 ;; Auto vars:     Size  Location     Type
 19992 ;;  digitalWrite    2   13[COMRAM] int 
 19993 ;; Return value:  Size  Location     Type
 19994 ;;                  1    wreg      void 
 19995 ;; Registers used:
 19996 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19997 ;; Tracked objects:
 19998 ;;		On entry : 0/0
 19999 ;;		On exit  : 0/0
 20000 ;;		Unchanged: 0/0
 20001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20004 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20005 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20006 ;;Total ram usage:        9 bytes
 20007 ;; Hardware stack levels used:    1
 20008 ;; This function calls:
 20009 ;;		Nothing
 20010 ;; This function is called by:
 20011 ;;		_servoInterruptService
 20012 ;; This function uses a non-reentrant model
 20013 ;;
 20014                           
 20015                           	psect	text77
 20016  004B18                     __ptext77:
 20017                           	opt stack 0
 20018  004B18                     i2_digitalWrite:
 20019                           	opt stack 21
 20020                           
 20021                           ;iopin.c: 54: if(pin){
 20022                           
 20023                           ;incstack = 0
 20024  004B18  5007               	movf	i2digitalWrite@pin,w,c
 20025  004B1A  1008               	iorwf	i2digitalWrite@pin+1,w,c
 20026  004B1C  B4D8               	btfsc	status,2,c
 20027  004B1E  0012               	return	
 20028                           
 20029                           ;iopin.c: 55: int p = 1 << pin[1];
 20030  004B20  EE20 F002          	lfsr	2,2
 20031  004B24  5007               	movf	i2digitalWrite@pin,w,c
 20032  004B26  26D9               	addwf	fsr2l,f,c
 20033  004B28  5008               	movf	i2digitalWrite@pin+1,w,c
 20034  004B2A  22DA               	addwfc	fsr2h,f,c
 20035  004B2C  50DF               	movf	indf2,w,c
 20036  004B2E  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 20037  004B30  0E01               	movlw	1
 20038  004B32  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 20039  004B34  0E00               	movlw	0
 20040  004B36  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 20041  004B38  2A0B               	incf	??i2_digitalWrite,f,c
 20042  004B3A  D003               	goto	i2u664_44
 20043  004B3C                     i2u664_45:
 20044  004B3C  90D8               	bcf	status,0,c
 20045  004B3E  360C               	rlcf	??i2_digitalWrite+1,f,c
 20046  004B40  360D               	rlcf	??i2_digitalWrite+2,f,c
 20047  004B42                     i2u664_44:
 20048  004B42  2E0B               	decfsz	??i2_digitalWrite,f,c
 20049  004B44  D7FB               	goto	i2u664_45
 20050  004B46  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 20051  004B4A  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 20052                           
 20053                           ;iopin.c: 56: if(val == 0){
 20054  004B4E  5009               	movf	i2digitalWrite@val,w,c
 20055  004B50  100A               	iorwf	i2digitalWrite@val+1,w,c
 20056  004B52  A4D8               	btfss	status,2,c
 20057  004B54  D02B               	goto	i2l6080
 20058                           
 20059                           ;iopin.c: 57: p ^= 0xff;
 20060  004B56  0EFF               	movlw	255
 20061  004B58  1A0E               	xorwf	i2digitalWrite@p,f,c
 20062                           
 20063                           ;iopin.c: 58: }
 20064                           ;iopin.c: 60: switch(pin[0]){
 20065  004B5A  D028               	goto	i2l6080
 20066  004B5C                     i2l6056:
 20067  004B5C  0409               	decf	i2digitalWrite@val,w,c
 20068  004B5E  100A               	iorwf	i2digitalWrite@val+1,w,c
 20069  004B60  A4D8               	btfss	status,2,c
 20070  004B62  D003               	goto	i2l6060
 20071  004B64  500E               	movf	i2digitalWrite@p,w,c
 20072  004B66  1289               	iorwf	3977,f,c	;volatile
 20073  004B68  0012               	return	
 20074  004B6A                     i2l6060:
 20075                           
 20076                           ;iopin.c: 62: else LATA &= p;
 20077  004B6A  500E               	movf	i2digitalWrite@p,w,c
 20078  004B6C  1689               	andwf	3977,f,c	;volatile
 20079                           
 20080                           ;iopin.c: 63: break;
 20081  004B6E  0012               	return	
 20082  004B70                     i2l6062:
 20083  004B70  0409               	decf	i2digitalWrite@val,w,c
 20084  004B72  100A               	iorwf	i2digitalWrite@val+1,w,c
 20085  004B74  A4D8               	btfss	status,2,c
 20086  004B76  D003               	goto	i2l6066
 20087  004B78  500E               	movf	i2digitalWrite@p,w,c
 20088  004B7A  128A               	iorwf	3978,f,c	;volatile
 20089  004B7C  0012               	return	
 20090  004B7E                     i2l6066:
 20091                           
 20092                           ;iopin.c: 65: else LATB &= p;
 20093  004B7E  500E               	movf	i2digitalWrite@p,w,c
 20094  004B80  168A               	andwf	3978,f,c	;volatile
 20095                           
 20096                           ;iopin.c: 66: break;
 20097  004B82  0012               	return	
 20098  004B84                     i2l6068:
 20099  004B84  0409               	decf	i2digitalWrite@val,w,c
 20100  004B86  100A               	iorwf	i2digitalWrite@val+1,w,c
 20101  004B88  A4D8               	btfss	status,2,c
 20102  004B8A  D003               	goto	i2l6072
 20103  004B8C  500E               	movf	i2digitalWrite@p,w,c
 20104  004B8E  128B               	iorwf	3979,f,c	;volatile
 20105  004B90  0012               	return	
 20106  004B92                     i2l6072:
 20107                           
 20108                           ;iopin.c: 68: else LATC &= p;
 20109  004B92  500E               	movf	i2digitalWrite@p,w,c
 20110  004B94  168B               	andwf	3979,f,c	;volatile
 20111                           
 20112                           ;iopin.c: 69: break;
 20113  004B96  0012               	return	
 20114  004B98                     i2l6074:
 20115  004B98  0409               	decf	i2digitalWrite@val,w,c
 20116  004B9A  100A               	iorwf	i2digitalWrite@val+1,w,c
 20117  004B9C  A4D8               	btfss	status,2,c
 20118  004B9E  D003               	goto	i2l6078
 20119  004BA0  500E               	movf	i2digitalWrite@p,w,c
 20120  004BA2  128C               	iorwf	3980,f,c	;volatile
 20121  004BA4  0012               	return	
 20122  004BA6                     i2l6078:
 20123                           
 20124                           ;iopin.c: 71: else LATD &= p;
 20125  004BA6  500E               	movf	i2digitalWrite@p,w,c
 20126  004BA8  168C               	andwf	3980,f,c	;volatile
 20127                           
 20128                           ;iopin.c: 72: }
 20129  004BAA  0012               	return	
 20130  004BAC                     i2l6080:
 20131  004BAC  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 20132  004BB0  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 20133  004BB4  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 20134  004BB8  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 20135                           
 20136                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20137                           ; Switch size 1, requested type "space"
 20138                           ; Number of cases is 1, Range of values is 0 to 0
 20139                           ; switch strategies available:
 20140                           ; Name         Instructions Cycles
 20141                           ; simple_byte            4     3 (average)
 20142                           ;	Chosen strategy is simple_byte
 20143  004BBC  500C               	movf	??i2_digitalWrite+1,w,c
 20144  004BBE  0A00               	xorlw	0	; case 0
 20145  004BC0  A4D8               	btfss	status,2,c
 20146  004BC2  0012               	return	
 20147                           
 20148                           ; Switch size 1, requested type "space"
 20149                           ; Number of cases is 4, Range of values is 0 to 3
 20150                           ; switch strategies available:
 20151                           ; Name         Instructions Cycles
 20152                           ; simple_byte           13     7 (average)
 20153                           ;	Chosen strategy is simple_byte
 20154  004BC4  500B               	movf	??i2_digitalWrite,w,c
 20155  004BC6  0A00               	xorlw	0	; case 0
 20156  004BC8  B4D8               	btfsc	status,2,c
 20157  004BCA  D7C8               	goto	i2l6056
 20158  004BCC  0A01               	xorlw	1	; case 1
 20159  004BCE  B4D8               	btfsc	status,2,c
 20160  004BD0  D7CF               	goto	i2l6062
 20161  004BD2  0A03               	xorlw	3	; case 2
 20162  004BD4  B4D8               	btfsc	status,2,c
 20163  004BD6  D7D6               	goto	i2l6068
 20164  004BD8  0A01               	xorlw	1	; case 3
 20165  004BDA  A4D8               	btfss	status,2,c
 20166  004BDC  0012               	return	
 20167  004BDE  D7DC               	goto	i2l6074
 20168  004BE0                     __end_ofi2_digitalWrite:
 20169                           	opt stack 0
 20170                           pclatu	equ	0xFFB
 20171                           pclath	equ	0xFFA
 20172                           tblptru	equ	0xFF8
 20173                           tblptrh	equ	0xFF7
 20174                           tblptrl	equ	0xFF6
 20175                           tablat	equ	0xFF5
 20176                           prodh	equ	0xFF4
 20177                           prodl	equ	0xFF3
 20178                           intcon	equ	0xFF2
 20179                           intcon3	equ	0xFF0
 20180                           postinc0	equ	0xFEE
 20181                           fsr0h	equ	0xFEA
 20182                           fsr0l	equ	0xFE9
 20183                           wreg	equ	0xFE8
 20184                           postdec1	equ	0xFE5
 20185                           fsr1h	equ	0xFE2
 20186                           fsr1l	equ	0xFE1
 20187                           indf2	equ	0xFDF
 20188                           postinc2	equ	0xFDE
 20189                           postdec2	equ	0xFDD
 20190                           fsr2h	equ	0xFDA
 20191                           fsr2l	equ	0xFD9
 20192                           status	equ	0xFD8
 20193                           
 20194 ;; *************** function i2___awmod *****************
 20195 ;; Defined at:
 20196 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 20197 ;; Parameters:    Size  Location     Type
 20198 ;;  dividend        2    0[COMRAM] int 
 20199 ;;  divisor         2    2[COMRAM] int 
 20200 ;; Auto vars:     Size  Location     Type
 20201 ;;  __awmod         1    5[COMRAM] unsigned char 
 20202 ;;  __awmod         1    4[COMRAM] unsigned char 
 20203 ;; Return value:  Size  Location     Type
 20204 ;;                  2    0[COMRAM] int 
 20205 ;; Registers used:
 20206 ;;		wreg, status,2, status,0
 20207 ;; Tracked objects:
 20208 ;;		On entry : 0/0
 20209 ;;		On exit  : 0/0
 20210 ;;		Unchanged: 0/0
 20211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20212 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20215 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20216 ;;Total ram usage:        6 bytes
 20217 ;; Hardware stack levels used:    1
 20218 ;; This function calls:
 20219 ;;		Nothing
 20220 ;; This function is called by:
 20221 ;;		_servoInterruptService
 20222 ;;		i2_fround
 20223 ;;		i2_scale
 20224 ;; This function uses a non-reentrant model
 20225 ;;
 20226                           
 20227                           	psect	text78
 20228  0052FA                     __ptext78:
 20229                           	opt stack 0
 20230  0052FA                     i2___awmod:
 20231                           	opt stack 20
 20232                           
 20233                           ;incstack = 0
 20234  0052FA  0E00               	movlw	0
 20235  0052FC  6E06               	movwf	i2___awmod@sign,c
 20236  0052FE  AE02               	btfss	i2___awmod@dividend+1,7,c
 20237  005300  D006               	goto	i2l5720
 20238  005302  6C01               	negf	i2___awmod@dividend,c
 20239  005304  1E02               	comf	i2___awmod@dividend+1,f,c
 20240  005306  B0D8               	btfsc	status,0,c
 20241  005308  2A02               	incf	i2___awmod@dividend+1,f,c
 20242  00530A  0E01               	movlw	1
 20243  00530C  6E06               	movwf	i2___awmod@sign,c
 20244  00530E                     i2l5720:
 20245  00530E  AE04               	btfss	i2___awmod@divisor+1,7,c
 20246  005310  D004               	goto	i2l5724
 20247  005312  6C03               	negf	i2___awmod@divisor,c
 20248  005314  1E04               	comf	i2___awmod@divisor+1,f,c
 20249  005316  B0D8               	btfsc	status,0,c
 20250  005318  2A04               	incf	i2___awmod@divisor+1,f,c
 20251  00531A                     i2l5724:
 20252  00531A  5003               	movf	i2___awmod@divisor,w,c
 20253  00531C  1004               	iorwf	i2___awmod@divisor+1,w,c
 20254  00531E  B4D8               	btfsc	status,2,c
 20255  005320  D018               	goto	i2l5740
 20256  005322  0E01               	movlw	1
 20257  005324  6E05               	movwf	i2___awmod@counter,c
 20258  005326  D004               	goto	i2l5730
 20259  005328                     i2l5728:
 20260  005328  90D8               	bcf	status,0,c
 20261  00532A  3603               	rlcf	i2___awmod@divisor,f,c
 20262  00532C  3604               	rlcf	i2___awmod@divisor+1,f,c
 20263  00532E  2A05               	incf	i2___awmod@counter,f,c
 20264  005330                     i2l5730:
 20265  005330  AE04               	btfss	i2___awmod@divisor+1,7,c
 20266  005332  D7FA               	goto	i2l5728
 20267  005334                     i2l5732:
 20268  005334  5003               	movf	i2___awmod@divisor,w,c
 20269  005336  5C01               	subwf	i2___awmod@dividend,w,c
 20270  005338  5004               	movf	i2___awmod@divisor+1,w,c
 20271  00533A  5802               	subwfb	i2___awmod@dividend+1,w,c
 20272  00533C  A0D8               	btfss	status,0,c
 20273  00533E  D004               	goto	i2l5736
 20274  005340  5003               	movf	i2___awmod@divisor,w,c
 20275  005342  5E01               	subwf	i2___awmod@dividend,f,c
 20276  005344  5004               	movf	i2___awmod@divisor+1,w,c
 20277  005346  5A02               	subwfb	i2___awmod@dividend+1,f,c
 20278  005348                     i2l5736:
 20279  005348  90D8               	bcf	status,0,c
 20280  00534A  3204               	rrcf	i2___awmod@divisor+1,f,c
 20281  00534C  3203               	rrcf	i2___awmod@divisor,f,c
 20282  00534E  2E05               	decfsz	i2___awmod@counter,f,c
 20283  005350  D7F1               	goto	i2l5732
 20284  005352                     i2l5740:
 20285  005352  5006               	movf	i2___awmod@sign,w,c
 20286  005354  B4D8               	btfsc	status,2,c
 20287  005356  D004               	goto	i2l5744
 20288  005358  6C01               	negf	i2___awmod@dividend,c
 20289  00535A  1E02               	comf	i2___awmod@dividend+1,f,c
 20290  00535C  B0D8               	btfsc	status,0,c
 20291  00535E  2A02               	incf	i2___awmod@dividend+1,f,c
 20292  005360                     i2l5744:
 20293  005360  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 20294  005364  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 20295  005368  0012               	return	
 20296  00536A                     __end_ofi2___awmod:
 20297                           	opt stack 0
 20298                           pclatu	equ	0xFFB
 20299                           pclath	equ	0xFFA
 20300                           tblptru	equ	0xFF8
 20301                           tblptrh	equ	0xFF7
 20302                           tblptrl	equ	0xFF6
 20303                           tablat	equ	0xFF5
 20304                           prodh	equ	0xFF4
 20305                           prodl	equ	0xFF3
 20306                           intcon	equ	0xFF2
 20307                           intcon3	equ	0xFF0
 20308                           postinc0	equ	0xFEE
 20309                           fsr0h	equ	0xFEA
 20310                           fsr0l	equ	0xFE9
 20311                           wreg	equ	0xFE8
 20312                           postdec1	equ	0xFE5
 20313                           fsr1h	equ	0xFE2
 20314                           fsr1l	equ	0xFE1
 20315                           indf2	equ	0xFDF
 20316                           postinc2	equ	0xFDE
 20317                           postdec2	equ	0xFDD
 20318                           fsr2h	equ	0xFDA
 20319                           fsr2l	equ	0xFD9
 20320                           status	equ	0xFD8
 20321                           pclatu	equ	0xFFB
 20322                           pclath	equ	0xFFA
 20323                           tblptru	equ	0xFF8
 20324                           tblptrh	equ	0xFF7
 20325                           tblptrl	equ	0xFF6
 20326                           tablat	equ	0xFF5
 20327                           prodh	equ	0xFF4
 20328                           prodl	equ	0xFF3
 20329                           intcon	equ	0xFF2
 20330                           intcon3	equ	0xFF0
 20331                           postinc0	equ	0xFEE
 20332                           fsr0h	equ	0xFEA
 20333                           fsr0l	equ	0xFE9
 20334                           wreg	equ	0xFE8
 20335                           postdec1	equ	0xFE5
 20336                           fsr1h	equ	0xFE2
 20337                           fsr1l	equ	0xFE1
 20338                           indf2	equ	0xFDF
 20339                           postinc2	equ	0xFDE
 20340                           postdec2	equ	0xFDD
 20341                           fsr2h	equ	0xFDA
 20342                           fsr2l	equ	0xFD9
 20343                           status	equ	0xFD8
 20344                           
 20345                           	psect	rparam
 20346  0000                     pclatu	equ	0xFFB
 20347                           pclath	equ	0xFFA
 20348                           tblptru	equ	0xFF8
 20349                           tblptrh	equ	0xFF7
 20350                           tblptrl	equ	0xFF6
 20351                           tablat	equ	0xFF5
 20352                           prodh	equ	0xFF4
 20353                           prodl	equ	0xFF3
 20354                           intcon	equ	0xFF2
 20355                           intcon3	equ	0xFF0
 20356                           postinc0	equ	0xFEE
 20357                           fsr0h	equ	0xFEA
 20358                           fsr0l	equ	0xFE9
 20359                           wreg	equ	0xFE8
 20360                           postdec1	equ	0xFE5
 20361                           fsr1h	equ	0xFE2
 20362                           fsr1l	equ	0xFE1
 20363                           indf2	equ	0xFDF
 20364                           postinc2	equ	0xFDE
 20365                           postdec2	equ	0xFDD
 20366                           fsr2h	equ	0xFDA
 20367                           fsr2l	equ	0xFD9
 20368                           status	equ	0xFD8
 20369                           
 20370                           	psect	temp
 20371  00007E                     btemp:
 20372                           	opt stack 0
 20373  00007E                     	ds	1
 20374  0000                     int$flags	set	btemp
 20375                           pclatu	equ	0xFFB
 20376                           pclath	equ	0xFFA
 20377                           tblptru	equ	0xFF8
 20378                           tblptrh	equ	0xFF7
 20379                           tblptrl	equ	0xFF6
 20380                           tablat	equ	0xFF5
 20381                           prodh	equ	0xFF4
 20382                           prodl	equ	0xFF3
 20383                           intcon	equ	0xFF2
 20384                           intcon3	equ	0xFF0
 20385                           postinc0	equ	0xFEE
 20386                           fsr0h	equ	0xFEA
 20387                           fsr0l	equ	0xFE9
 20388                           wreg	equ	0xFE8
 20389                           postdec1	equ	0xFE5
 20390                           fsr1h	equ	0xFE2
 20391                           fsr1l	equ	0xFE1
 20392                           indf2	equ	0xFDF
 20393                           postinc2	equ	0xFDE
 20394                           postdec2	equ	0xFDD
 20395                           fsr2h	equ	0xFDA
 20396                           fsr2l	equ	0xFD9
 20397                           status	equ	0xFD8


Data Sizes:
    Strings     296
    Constant    174
    Data        61
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    122     125
    BANK0           128    126     128
    BANK1           256     85     186
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_18(CODE[17]), STR_17(CODE[18]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[17]), STR_9(CODE[18]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[8]), STR_5(CODE[11]), STR_4(CODE[15]), STR_3(CODE[9]), 
		 -> STR_2(CODE[17]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), cylinderDir(BANK1[4]), 

    pause@message	PTR unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_printf
    i2_printf->i2___ftsub
    i2_scale->i2___ftmul
    i2_lcdNewline->i2_lcdInst
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->i2___wmul
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2_scale
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_initServo
    _sortBattery->_setAngle
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _pause->_printf
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _pause->_printf

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  520038
                                             60 BANK1     25    25      0
                            ___aldiv
                            ___almod
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                              _pause
                           _pinSetup
                             _printf
                      _showInterface
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         32    32      0   90180
                                            118 BANK0      2     2      0
                                             30 BANK1     30    30      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1274
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     302
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     150
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  304654
                                            102 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   50698
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   50698
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   50698
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   50720
                                            101 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   50698
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   50698
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pause                                                2     0      2   50807
                                            101 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   50563
                                             85 BANK0     16     6     10
                                              0 BANK1     30    30      0
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11266
                                             48 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   11068
                                             48 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2769
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1676
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2281
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4027
                                             70 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1288
                                             12 BANK0      9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   19805
                                            118 BANK0      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   18451
                                            108 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   17397
                                             85 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     636
                                             70 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4752
                                             33 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2914
                                             18 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3602
                                             58 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2687
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2606
                                              8 BANK0     10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             14 BANK0     10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             19    19      0   24361
                                            103 COMRAM    19    19      0
              _servoInterruptService
                         i2_lcdClear
                           i2_printf
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            41    37      4   22265
                                             63 COMRAM    40    36      4
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (10) i2_scale                                            13    10      3    4841
                                             35 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2_fround                                           16    13      3    4643
                                             35 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4    1093
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6    1519
                                             20 COMRAM    15     9      6
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___awdiv                                           8     4      4     820
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2__tdiv_to_l_                                      15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (10) i2__div_to_l_                                       12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (10) i2___lltoft                                          9     5      4     560
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___llmod                                           9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lldiv                                          13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) i2___fttol                                          15    11      4     330
                                             42 COMRAM    15    11      4
                          i2___ftmul (ARG)
                            i2_scale (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftsub                                           6     0      6    1528
                                             57 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1409
                                             45 COMRAM    12     6      6
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (10) i2___ftneg                                           3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) i2___ftge                                            9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) i2_lcdClear                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (12) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1636
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     920
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pause
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_lcdClear
     i2_lcdInst
       i2_lcdNibble
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       i2___ftpack
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_scale (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_isdigit
     i2_putch
       i2_lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     55      BA       7       72.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7E      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B7      34        0.0%
DATA                 0      0     1B7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 27 16:19:30 2017

                  ___altoft@exp 0090                               _n 00FE               main@cylinderStart 014F  
          main@cylinderBackward 014B                   ___altoft@sign 0091                     _sortBattery 19D0  
                  ___awdiv@sign 008B             ___wmul@multiplicand 0090                     __CFG_BORV$3 000000  
                    i2___ftpack 4D5A                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000  
              _redirectingServo 018E                    ___ftadd@exp1 00C5                    ___ftadd@exp2 00C4  
                    i2___lltoft 5436             main@cylinderForward 0149                    ___ftadd@sign 00C3  
                           l214 58C4                             l250 5832                             l138 2A3C  
                           l323 403E                             l147 2B28                             l139 2A44  
                           l253 5840                             l422 552A                             l431 54A0  
                           l167 1DD2                             l432 54AC                             l348 56AA  
                           l429 5494                             l729 09C2                 ??_showInterface 00E6  
                           l769 0842                             l778 0A30                    __CFG_CPB$OFF 000000  
                           _PEN 007E2A                    __CFG_CPD$OFF 000000                             _SEN 007E28  
                           _n_C 01B2                    ___awmod@sign 0085                             wreg 000FE8  
                    i2_lcdClear 5A78                    __CFG_LVP$OFF 000000                    ___ftdiv@cntr 009B  
                  ___ftdiv@sign 00A0                    __CFG_WDT$OFF 000000                            l1103 2F76  
                          l1112 2FA0                            l1033 3744                            l1130 34F8  
                          l1123 3B30                            l1131 353C                            l1212 4D48  
                          l1222 4FD0                            l1065 4360                            l1137 35BC  
                          l1162 5824                            l1092 2E78                            l1094 2EA0  
                          l1088 2E3E                            l5012 36C2                            l5004 366E  
                          l5104 5552                            l5024 36FA                            l5034 372A  
                          l5116 5674                            l5060 3A54                            l5124 4A90  
                          l5036 373A                            l5028 370E                            l5300 0088  
                          l5046 4ED6                            l5134 4B14                            l5206 4D36  
                          l5222 4FBE                            l5214 4F64                            l5230 521E  
                          l4600 4344                            l5048 4EE6                            l5128 4AD0  
                          l5216 4F74                            l5320 0182                            l4602 4352  
                          l5066 3A8E                            l5170 3C46                            l5218 4F7A  
                          l5410 0484                            l5330 01A4                            l5314 0126  
                          l5180 3C7C                            l5148 3BA0                            l5228 520E  
                          l5500 0846                            l5420 0514                            l5412 04B4  
                          l5404 0440                            l5340 01F2                            l5324 0192  
                          l5308 00FE                            l4614 4386                            l5086 3AEE  
                          l4702 38F6                            l5166 3C32                            l5510 08BC  
                          l5414 04CA                            l5350 0230                            l5342 01FE  
                          l5326 0198                            l5318 016C                            l7102 27A8  
                          l4608 436A                            l4640 2E86                            l5184 3C98  
                          l5176 3C62                            l4800 4E34                            l5600 0BD8  
                          l5440 060C                            l5424 0542                            l5408 046E  
                          l5352 024A                            l5344 0204                            l5336 01CC  
                          l5328 019E                            l4634 2E4C                            l4722 397E  
                          l5178 3C72                            l5194 4CCC                            l5530 09EA  
                          l5522 09B4                            l5506 086A                            l5434 05A0  
                          l5370 02D8                            l5346 021C                            l5362 027A  
                          l5290 004E                            l4732 39BC                            l4708 3930  
                          l5196 4CDC                            l4820 4EA0                            l4812 4E7E  
                          l4804 4E48                            l4900 22C4                            l5620 0C88  
                          l5612 0C52                            l5516 0998                            l5460 06CA  
                          l5452 0652                            l5380 031E                            l5356 0262  
                          l5364 02BE                            l5284 0022                            l6500 468C  
                          l7140 2A4C                            l4590 42B6                            l4662 2F06  
                          l4646 2E96                            l4726 399C                            l5198 4CE2  
                          l4806 4E54                            l5614 0C5C                            l5606 0C10  
                          l5518 09A6                            l5470 0706                            l5438 0606  
                          l5294 0058                            l7126 2894                            l7118 2850  
                          l4592 42C4                            l4664 2F14                            l4656 2ED8  
                          l4736 39DA                            l4752 4BFC                            l4808 4E5A  
                          l4816 4E8C                            l5632 0CCA                            l5608 0C1A  
                          l5544 0A52                            l5472 071C                            l5456 06A2  
                          l5288 0038                            l6600 1E0A                            l7144 2AE6  
                          l4594 42F4                            l4586 42A2                            l4682 2FCA  
                          l4674 2F5C                            l4666 2F22                            l4906 238A  
                          l5626 0CA4                            l5570 0AF4                            l5554 0AA2  
                          l5490 0802                            l5482 0766                            l5466 06F8  
                          l5650 0E1C                            l6442 459E                            l7146 2AF2  
                          l6700 48AE                            l4692 3018                            l4676 2F6A  
                          l4668 2F2E                            l5900 54B8                            l4764 4C30  
                          l4780 4C80                            l4860 2CAA                            l5636 0CF2  
                          l5644 0DEC                            l5628 0CB0                            l5556 0AA8  
                          l5548 0A7A                            l5476 072A                            l5396 03D0  
                          l6460 45E4                            l6444 45A2                            l6612 1E78  
                          l6540 1A96                            l7156 2B16                            l6710 48F2  
                          l4598 4314                            l4934 34A4                            l4766 4C3C  
                          l4758 4C12                            l4918 587C                            l5638 0D76  
                          l5646 0DFE                            l5590 0B74                            l5494 0810  
                          l5478 073E                            l6446 45AC                            l6606 1E48  
                          l6712 48F8                            l6720 494E                            l6704 48C6  
                          l4928 346A                            l4784 4C94                            l4776 4C72  
                          l4768 4C42                            l5648 0E06                            l5568 0AEE  
                          l5584 0B3A                            l5496 0824                            l5488 07F4  
                          l6472 461E                            l6456 45D6                            l6448 45B0  
                          l5920 450A                            l6560 1C56                            l4882 2074  
                          l5594 0BA4                            l5586 0B4C                            l6490 4666  
                          l5922 4512                            l6570 1CF0                            l6562 1C84  
                          l6724 496A                            l6716 493C                            l6708 48E2  
                          l4964 3572                            l4796 4E24                            l4868 2D8E  
                          l4892 2160                            l6476 4628                            l5932 4542  
                          l5916 44F6                            l5940 4566                            l6580 1D56  
                          l6670 41EE                            l6662 41B0                            l4990 361A  
                          l4974 35A2                            l6494 4676                            l6486 4656  
                          l6478 4630                            l5934 454A                            l5926 4526  
                          l6680 4248                            l6672 41F4                            l6656 4192  
                          l5880 54FA                            l4984 35F4                            l4976 35B2  
                          l4968 3586                            l4888 213A                            l5960 3FCC  
                          l5952 3F54                            l5928 452E                            l5874 54EE  
                          l6498 4680                            l5938 455E                            l6668 41DE  
                          l6684 425A                            l5868 54E4                            l5956 3F90  
                          l5948 3F18                            l6588 1D94                            l5886 5502  
                          l5974 4992                            l5982 4A10                            l5966 4008  
                          l6598 1DE2                            l6688 4276                            l5978 49E8  
                          _EEIF 007D0C           __size_ofi2__div_to_l_ 0128                            STR_1 FFF7  
                          STR_2 FFBB                            STR_3 FFE6                            STR_4 FFCC  
                          STR_5 FFDB                            STR_6 FFEF                            STR_7 FEFC  
                          STR_8 FFAA                            STR_9 FEEA                            _LATA 000F89  
                          _LATB 000F8A                            _LATC 000F8B                            _LATD 000F8C  
                          _LATE 000F8D                            u5051 3A30                    printf@tmpval 010A  
                          u5071 3A6A                            u5161 3B7C                            u4611 390C  
                          _PEIE 007F96                            u5180 3BC6                            u4381 2DEC  
                          u4391 2E0A                            u5185 3BBC                            u5530 0364  
                          _RCEN 007E2B                            u4591 38D2                            u5535 0358  
                          u5750 083A                            u6534 3F3C                            u4871 3446  
                          u6535 3F36                            u6544 3F78                            u6545 3F72  
                          u6554 3FB4                            u6474 44D4                            u8250 2A1A  
                          u4891 3480                            u6555 3FAE                            u6475 44CC  
                          u6564 3FF0                            u8260 2A1C                            u6565 3FEA  
                          u8407 2942                            u8417 1A12                            u8507 588E  
                          u8427 1ACE                            u8517 58A4                            u8437 1BE8  
                          u8527 52A2                            u8447 1E30                            u8537 52B0  
                          u8457 1E68                            u8547 52E0                            u8467 1EA6  
                          u8557 52EE                            u8477 58C8                            u8487 55D0  
                          u8497 5606                            _RSEN 007E29                            _n_AA 01B0  
                          _n_9V 01AE                            _main 27A0                            _curr 007B  
                  ___ftpack@arg 0080                            _keys FEBF                    ___ftpack@exp 0083  
                          _time 01A6                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            btemp 007E  
                  i2___ftadd@f1 002E                    i2___ftadd@f2 0031                    i2___ftge@ff1 0001  
                  i2___ftge@ff2 0004                            prodh 000FF4                            prodl 000FF3  
                          start 000E                   __CFG_IESO$OFF 000000                 __end_ofi2_scale 27A0  
                  i2___ftneg@f1 0001                 __end_ofi2_putch 5A02                   __CFG_MCLRE$ON 000000  
                  ___ftmul@cntr 00AE                    i2___ftmul@f1 0015                    i2___ftmul@f2 0018  
                  ___param_bank 000000                    ___ftmul@sign 00AF                    i2___ftsub@f1 003A  
                  i2___ftsub@f2 003D                    i2___fttol@f1 002B                     i2_lcdNibble 53D0  
                  ___fttol@exp1 00D4                    i2___lltoft@c 0009                    ___fttol@lval 00D0  
          __end_ofi2_startTimer 55C8            __end_of_angleToPulse 38BC                 __end_of___aldiv 4288  
               __end_of___almod 497C                           ?_main 0001                           _ACKEN 007E2C  
                         _ACKDT 007E2D                 __end_of___awdiv 4C9E                           _EEADR 000FA9  
               __end_of___ftadd 303E                           STR_10 FF77                           STR_11 FF0E  
                         STR_12 FF66                           STR_13 FED7                           STR_14 FF88  
                         STR_15 FF20                           STR_16 FF55                           STR_17 FF32  
                         STR_18 FF99                           STR_19 FF44                 __end_of___awmod 4EAA  
               __end_of___ftdiv 3B66         ??_servoInterruptService 0010                 __end_of___ftneg 5832  
               __end_of___lldiv 4D5A                 __end_of___ftmul 3A1A                           _T0CON 000FD5  
               ___awdiv@divisor 0088                           _T1CON 000FCD                 __end_of___llmod 4FE2  
               __end_of___ftsub 557C                 __end_of___fttol 3CAA                           _T3CON 000FB1  
                         i2l214 59F0                           i2l190 3DA8                           i2l431 558A  
                         i2l432 5596                           i2l429 557E                           i2l729 1646  
                         i2l769 14E6                           i2l778 16A6                 ___awdiv@counter 008A  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR3H 000FB3                           _TMR1L 000FCE                           _TMR3L 000FB2  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTD 000F83                    i2__div_to_l_ 4046                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
               __end_of_lcdHome 5A70                    ___lltoft@exp 0090                   _conveyorServo 0176  
               __end_of_lcdInst 58B0                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
         __size_ofi2_lcdNewline 0008                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                 __end_of_initLCD 5612                  __CFG_EBTRB$OFF 000000  
                    i2isdigit@c 0003                   ___awtoft@sign 008B                           _angle 015E  
               __end_of_dpowers FE51                      i2scale@scl 002A                           _count 01AC  
                         _scale 1F02                 __end_of_isdigit 5886                           _pause 5A42  
                 ___ftpack@sign 0084                           _pulse 0192                           _putch 58B0  
                         pclath 000FFA                           tablat 000FF5                __end_ofi2___ftge 5072  
               __end_of_service 3DE4                __end_ofi2___wmul 59BC                 __end_of_runMenu 5802  
               __end_of_runTime 58FE                           status 000FD8                __end_ofi2_fround 3284  
            __size_ofi2___awdiv 0084              __size_ofi2___ftadd 01AC              __size_ofi2___awmod 0070  
                __CFG_PBADEN$ON 000000                   i2printf@width 0061              __size_ofi2___ftneg 0024  
            __size_ofi2___lldiv 0082              __size_ofi2___ftmul 00F4              __size_ofi2___llmod 0066  
            __size_ofi2___ftsub 0040              __size_ofi2___fttol 00F4                __end_ofi2_printf 19D0  
          __end_of_digitalWrite 459E                 __initialization 5612               i2___lldiv@divisor 0005  
            __size_ofi2_lcdInst 0022                    __end_of_main 2B2A               i2___lldiv@counter 000D  
                  __end_of_keys FED0                   i2___ftmul@exp 001E                      i2printf@ap 0052  
                    i2printf@cp 004E              __size_ofi2_isdigit 001E                     ?i2___ftpack 0001  
                  i2_lcdNewline 5A70                     ?i2___lltoft 0009                          ??_main 013C  
                 ___fttol@sign1 00CF                   __activetblptr 000002            __size_of_digitalRead 0130  
          __size_of__tdiv_to_l_ 019E                    _stoppingTime 0170                 i2digitalWrite@p 000E  
                   ?i2_lcdClear 0001                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                __end_of___altoft 4F48                ___llmod@dividend 008D  
                        ?_scale 00B0                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                          _EEDATA 000FA8                          ?_pause 00E5  
                        _EECON1 000FA6                          _EECON2 000FA7                ___awdiv@dividend 0086  
               i2lcdNibble@data 0002                __end_of___awtoft 569C                          ?_putch 0001  
              __end_of___ftpack 4394                 i2lcdNibble@temp 0001                __end_of___lltoft 5282  
                        _INT0IE 007F94                          _INT0IF 007F91                          _INT1IE 007F83  
                        _INT1IF 007F80                    sortBattery@V 012D                          i2l1103 33A2  
                        i2l1112 33BE                          i2l1033 415C                          i2l1130 3E76  
                        i2l1131 3E9E                          i2l1212 51F4                          i2l1222 53BE  
                        i2l1065 4DE8                          i2l1137 3F04                          i2l1162 59D2  
                  sortBattery@i 0137                          i2l1092 32F2                          i2l1088 32C8  
                        i2l6110 3184                          i2l6210 4132                          i2l7002 1704  
                        i2l6060 4B6A                          i2l5260 4DB6                          i2l5252 4D78  
                        i2l6132 24E4                          i2l7004 1708                          i2l6062 4B70  
                        i2l5262 4DD4                          i2l5254 4D82                          i2l6302 56F4  
                        i2l6206 4122                          i2l6118 3244                          i2l6150 26D8  
                        i2l6142 25AC                          i2l6072 4B92                          i2l6056 4B5C  
                        i2l6080 4BAC                          i2l5264 4DDE                          i2l5256 4DA0  
                        i2l5248 4D6A                          i2l6312 47C2                          i2l6216 414A  
                        i2l6232 3E3C                          i2l7016 1740                          i2l7032 177C  
                        i2l6074 4B98                          i2l6066 4B7E                          i2l6330 4828  
                        i2l6218 4156                          i2l6226 3E10                          i2l6138 2588  
                        i2l7042 17C8                          i2l7018 1744                          i2l7034 178C  
                        i2l6068 4B84                          i2l6340 4850                          i2l6404 543C  
                        i2l6172 4082                          i2l5700 5162                          i2l6156 277C  
                        i2l7060 1838                          i2l6078 4BA6                          i2l6094 55A2  
                        i2l6342 485C                          i2l6334 4838                          i2l6406 5448  
                        i2l6166 4064                          i2l6262 3ECA                          i2l7062 1840  
                        i2l7054 180C                          i2l7038 17A8                          i2l5720 530E  
                        i2l6280 5012                          i2l6344 4862                          i2l6272 3EF2  
                        i2l5704 516C                          i2l6360 5A3A                          i2l7080 1890  
                        i2l7056 1814                          i2l7048 17EA                          i2l5730 5330  
                        i2l6290 506E                          i2l6370 51A6                          i2l6194 40F4  
                        i2l6186 40C4                          i2l6274 3EFE                          i2l6266 3EDA  
                        i2l7074 1874                          i2l5732 5334                          i2l5740 5352  
                        i2l5724 531A                          i2l6284 5042                          i2l5804 33DA  
                        i2l6348 4878                          i2l6372 51B2                          i2l5708 517A  
                        i2l7084 18AC                          i2l7092 198E                          i2l7076 187C  
                        i2l7068 185E                          i2l5814 340A                          i2l6382 51E6  
                        i2l6374 51B6                          i2l6390 537C                          i2l5830 46F2  
                        i2l7086 1924                          i2l7094 199E                          i2l7190 3D7E  
                        i2l7174 3D44                          i2l5744 5360                          i2l5736 5348  
                        i2l5728 5328                          i2l6392 5388                          i2l5824 46CA  
                        i2l7096 19A4                          i2l6800 0FFC                          i2l7168 3D34  
                        i2l5762 3300                          i2l6394 538C                          i2l5690 5142  
                        i2l5682 5124                          i2l6810 1022                          i2l7098 19B4  
                        i2l7194 3D90                          i2l7186 3D6E                          i2l5756 32D6  
                        i2l5692 5146                          i2l5676 5114                          i2l5844 4724  
                        i2l6900 1368                          i2l6804 1010                          i2l6812 1062  
                        i2l6732 0E48                          i2l5790 336E                          i2l6398 53B0  
                        i2l5854 474C                          i2l6742 0E72                          i2l5784 3352  
                        i2l5688 513A                          i2l5848 4734                          i2l6920 13EE  
                        i2l6904 1398                          i2l6736 0E5A                          i2l5786 335C  
                        i2l5778 3330                          i2l5858 475C                          i2l6930 1424  
                        i2l6914 13D2                          i2l6818 1076                          i2l6762 0F1E  
                        i2l6738 0E6C                          i2l5796 3390                          i2l5788 3366  
                        i2l6924 13FA                          i2l6908 13B2                          i2l6860 120C  
                        i2l6852 11AA                          i2l6844 1146                          i2l6828 10B6  
                        i2l6772 0F76                          i2l6748 0EA0                          i2l6756 0EFC  
                        i2l5798 339A                          i2l6942 14C2                          i2l6926 1408  
                        i2l6918 13DE                          i2l6862 121C                          i2l6790 0FBE  
                        i2l6774 0F7A                          i2l6766 0F54                          i2l6944 14D0  
                        i2l6936 14AC                          i2l6872 1274                          i2l6856 11CE  
                        i2l6792 0FC4                          i2l6784 0F9E                          i2l6776 0F7E  
                        i2l6768 0F6A                          i2l6970 163C                          i2l6954 1502  
                        i2l6938 14B6                          i2l6882 12C8                          i2l6858 11DE  
                        i2l6794 0FD6                          i2l6778 0F82                          i2l6964 1626  
                        i2l6948 14EA                          i2l6868 1250                          i2l6788 0FB4  
                        i2l6966 1630                          i2l6958 1552                          i2l6886 132C  
                        i2l6798 0FE8                          i2l6992 16C6                          i2l6888 1330  
                        i2l6978 166A                          i2l6996 16EA                       ??i2_scale 0027  
                        u620_41 32A8                          u640_41 46B2                          u642_41 46DA  
                        u619_41 3294                          u684_41 3DF4                          _TMR0IE 007F95  
                        _TMR0IF 007F92                       ??i2_putch 0005                          _TMR1IE 007CE8  
                        _TMR1IF 007CF0                          _TMR3IE 007D01                          u686_41 3E20  
                        u698_41 47A6                          _SSPADD 000FC8                          _TRISC3 007CA3  
                        _TRISC4 007CA4                          _SSPBUF 000FC9                __end_of_dateTime 5996  
        __size_ofi2__tdiv_to_l_ 0132               _angleToPulse$1350 00E5                __end_of_lcdClear 5A68  
                __CFG_XINST$OFF 000000                    i2_scale$1548 0027                __end_of__powers_ FE9F  
                        ___ftge 4A50                __end_of_mainMenu 5970                       ??___aldiv 0088  
                     ??___almod 0096                          ___wmul 579A                       ??___awdiv 008A  
                     ??___ftadd 00C0                  __CFG_STVREN$ON 000000                       ??___awmod 0084  
                     ??___ftdiv 0098                       ??___ftneg 0083                       ??___lldiv 0088  
                     ??___ftmul 00A7                       ??___llmod 0095                       ??___ftsub 00CC  
                     ??___fttol 00CA                          _fround 2B2A                          clear_0 5638  
              ___awdiv@quotient 008C                          _period 0166                 ___awmod@divisor 0082  
                     ??_lcdHome 0084                 ___awmod@counter 0084                          _servos 019A  
                     ??_lcdInst 0082                          _printf 0012                __end_of_pinSetup 575C  
              __end_of_setAngle 4A50                  i2___awdiv@sign 000C               analogRead@channel 0080  
         ___ftmul@f3_as_product 00AB                       ??_initLCD 0084                       ??_isdigit 0080  
             __end_ofi2___awdiv 5184               __end_ofi2___ftadd 3430               __end_ofi2___awmod 536A  
                i2___ftadd@exp1 0039                  i2___ftadd@exp2 0038               __end_ofi2___ftneg 59E0  
             __end_ofi2___lldiv 5206               __end_ofi2___ftmul 4796                   setAngle@angle 00EE  
             __end_ofi2___llmod 53D0               __end_ofi2___ftsub 571E               __end_ofi2___fttol 488A  
                i2___ftadd@sign 0037                    __mediumconst FE28                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                   setAngle@motor 00EC  
                     ??_service 0068                       ??_runMenu 00E5                __end_of_runStats 5924  
                     ??_runTime 00E5                  i2___awmod@sign 0006               __end_ofi2_lcdInst 5A24  
             __end_ofi2_isdigit 5A42                      __accesstop 0080         __end_of__initialization 564A  
                    ___altoft@c 0088                      ___ftadd@f1 00BA                      ___ftadd@f2 00BD  
           __size_ofi2___ftpack 00AE                  i2printf@tmpval 0054                      ___ftge@ff1 008C  
                    ___ftge@ff2 008F             __size_ofi2___lltoft 005C                   ___rparam_used 000001  
                    ___ftdiv@f1 0092                      ___ftdiv@f2 0095                      ___ftdiv@f3 009C  
                    ___ftneg@f1 0080                      ___awtoft@c 0088                  i2___ftpack@arg 0001  
         __size_ofi2_startTimer 004C              i2__tdiv_to_l_@exp1 000F               i2___llmod@divisor 0012  
                i2___ftpack@exp 0004              i2__tdiv_to_l_@cntr 000E               i2___llmod@counter 0016  
            i2__tdiv_to_l_@quot 000A                      ___ftmul@f1 00A1                      ___ftmul@f2 00A4  
                    ___ftsub@f1 00C6                      ___ftsub@f2 00C9                      ___fttol@f1 00C6  
          __end_of_happynewyear FED7                  __pcstackCOMRAM 0001              i2___lldiv@dividend 0001  
         __size_of_angleToPulse 0166             __size_ofi2_lcdClear 0008                    __pidataBANK1 575C  
                    ___lltoft@c 0088                   _cylinderMotor 017E                  i2___ftmul@cntr 0022  
                 __end_of_scale 23B0                    ?_sortBattery 0001                   __end_of_pause 5A58  
                i2___ftmul@sign 0023                   __end_of_putch 58D8                     i2printf@idx 004D  
                   i2printf@len 0050                     i2printf@exp 0058                     i2printf@val 005D  
                i2___fttol@exp1 0039                  i2___fttol@lval 0035                       ?i2___ftge 0001  
                     ?i2___wmul 000F                   i2__tdiv_to_l_ 3DE4              __size_of_lcdNibble 0078  
                    __div_to_l_ 35CE                     i2putch@data 0005                       ?i2_fround 0024  
                     ?i2_printf 0040                 __div_to_l_@exp1 008B                 __div_to_l_@cntr 008A  
                       ??_scale 00B3                  i2___lltoft@exp 0011                         ??_pause 00E7  
               __div_to_l_@quot 0086                         ??_putch 0084              i2___lldiv@quotient 0009  
                  i2_startTimer 557C                      __pbssBANK0 00FE                      __pbssBANK1 0192  
              i2__tdiv_to_l_@f1 0001                i2__tdiv_to_l_@f2 0004                    _angleToPulse 3756  
         __size_of_digitalWrite 0104              __size_of_initTimer 004E              __size_of_initServo 008E  
                    _analogRead 569C                   __div_to_l_@f1 0080                   __div_to_l_@f2 0083  
                       ?___ftge 008C                    ?i2_lcdNibble 0001                         ?___wmul 008E  
         sortBattery@resolution 012A                _sortBattery$1349 0120                       ?___altoft 0088  
                       ?_fround 00B0                      _lcdNewline 5A58                       ?___awtoft 0088  
                     ?___ftpack 0080                         ?_printf 00D5                       ?___lltoft 0088  
                ?i2__tdiv_to_l_ 0001                      ??i2___ftge 0007                      ??i2___wmul 0013  
__size_of_servoInterruptService 0106   __end_of_servoInterruptService 449A           __end_of_showInterface 46A2  
                     ?_dateTime 0001                      ??i2_fround 0027               i2startTimer@timer 0007  
                     ?_lcdClear 0001              __size_of_runSelect 0026                angleToPulse@a000 00E8  
                    ??i2_printf 0044                angleToPulse@a180 00E1                    _digitalWrite 449A  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
                     ?_mainMenu 0001         __size_ofi2_digitalWrite 00C8                         i2_scale 23B0  
                       _V_LIM_C 015B             main@lastBatteryTime 014D                         i2_putch 59E0  
                     ?_pinSetup 0001                       ?_setAngle 00EC               __end_of_lcdNibble 52FA  
             __end_of__npowers_ FE78                         __Hparam 0000                      _scale$1353 00B3  
                       __Lparam 0000                         ___aldiv 416E                         ___almod 488A  
               __size_of___ftge 00C8                         ___awdiv 4BE0                         ___ftadd 2DD6  
                       ___awmod 4E08                      _readKeypad 5832                         ___ftdiv 3A1A  
                       ___ftneg 5802                         ___lldiv 4C9E                 __size_of___wmul 0036  
                       ___ftmul 38BC                         ___llmod 4F48                         ___ftsub 5530  
                       ___fttol 3B66                       ?_runStats 0001                         _n_OTHER 01B4  
                    ??___altoft 008C                         __pcinit 5612                    ??i2___ftpack 0006  
                    ??___awtoft 008B                      ??___ftpack 0085                 __size_of_fround 02AC  
       i2___ftmul@f3_as_product 001F                         __ramtop 1000                         _lcdHome 5A68  
                  ??i2___lltoft 000D                         _lcdInst 5886                      ??___lltoft 008C  
                       __ptext0 27A0                         __ptext1 19D0                         __ptext2 449A  
                       __ptext3 3F16                         __ptext4 569C                         __ptext5 459E  
                       __ptext6 58D8                         __ptext7 58FE                         __ptext8 5924  
                       __ptext9 57D0                 __size_of_printf 0E2A                         _padPin1 0182  
                       _padPin2 0186                         _padPin3 01A2                   startTimer@val 0082  
                 i2_fround$1546 002A                   i2_fround$1547 0027                         _initLCD 55C8  
             __end_of_hexpowers FEBF                     ?__div_to_l_ 0080                         _lastKey 007D  
             __end_of_initTimer 5530               __end_of_initServo 5100                   i2_isdigit$982 0002  
                       _dpowers FE29                    i2fround@prec 002D                         _isdigit 585C  
              ___awmod@dividend 0080                      ??_dateTime 00E5                ___aldiv@dividend 0080  
                  ??i2_lcdClear 0005                      ??_lcdClear 0084                         _service 0008  
                       _runMenu 57D0                         _runTime 58D8                  __pintcode_body 3CAA  
          end_of_initialization 564A                      ??_mainMenu 00E5                   __Lmediumconst FE28  
                       int_func 3CAA             i2___wmul@multiplier 000F                  digitalRead@pin 0080  
                   ?_analogRead 0080              __end_ofi2___ftpack 4E08                      ??_pinSetup 0080  
                    ??_setAngle 00F0              __end_ofi2___lltoft 5492                 ___lldiv@divisor 0084  
               ___lldiv@counter 008C                  setAngle@period 00F2               __end_of_runSelect 594A  
                       printf@c 011D                         printf@f 00D5                ___aldiv@quotient 008A  
                       postdec1 000FE5                         postdec2 000FDD                 _batteryDetected 01AA  
                       postinc0 000FEE                         postinc2 000FDE              __end_ofi2_lcdClear 5A80  
                    ??_runStats 00E5                  __tdiv_to_l_@f1 0080                  __tdiv_to_l_@f2 0083  
               ??i2__tdiv_to_l_ 0007                   ??_digitalRead 0082                     ?_lcdNewline 0001  
                 ??__tdiv_to_l_ 0086                       _PORTBbits 000F81            __size_of_sortBattery 0532  
              showInterface@key 00E6             _redirectAngle_OTHER 016E                    _happynewyear FED0  
            angleToPulse@offset 00DD              sortBattery@V_float 0122                       i2___awdiv 5100  
                     i2___ftadd 3284                       i2___awmod 52FA                       i2___ftneg 59BC  
                     i2___lldiv 5184                       i2___ftmul 46A2                       i2___llmod 536A  
                     i2___ftsub 56DE                       i2___fttol 4796                      _startTimer 5492  
                     i2_lcdInst 5A02                     ___ftdiv@exp 009F                     printf@width 0117  
            i2___llmod@dividend 000E              i2___awdiv@dividend 0007                 i2___ftpack@sign 0005  
                     i2_isdigit 5A24             __size_of__div_to_l_ 0188                     ___ftmul@exp 00AA  
                   ?_readKeypad 0001                  __end_of___ftge 4B18                  __end_of___wmul 57D0  
          __size_ofi2_lcdNibble 0066                   i2lcdInst@data 0004                  __end_of_fround 2DD6  
              i2___wmul@product 0013                  __end_of_printf 0E3C                   i2_printf$1549 004A  
                  i2printf@flag 0063                    i2printf@fval 005A             __size_of_analogRead 0042  
                  i2printf@prec 0065             start_initialization 5612               __size_ofi2___ftge 0090  
           __end_of_digitalRead 4046              i2___awdiv@quotient 000D               __size_ofi2___wmul 0026  
           __end_of__tdiv_to_l_ 35CE                  initServo@angle 00F8                       i2printf@c 0067  
                     i2printf@f 0040                  initTimer@timer 0080                 i2___fttol@sign1 0034  
                initServo@motor 00F6               __size_ofi2_fround 0246                      ?i2___awdiv 0007  
                    ?i2___ftadd 002E                      ?i2___awmod 0001                      ?i2___ftneg 0001  
                    ?i2___lldiv 0001                      ?i2___ftmul 0015                      ?i2___llmod 000E  
                    ?i2___ftsub 003A                      ?i2___fttol 002B               __size_ofi2_printf 0B94  
                i2_digitalWrite 4B18                      ?i2_lcdInst 0001             __size_of_lcdNewline 0008  
               ___llmod@divisor 0091                 ___llmod@counter 0095                      ?i2_isdigit 0001  
                      ??___ftge 0092                        ??___wmul 0092                     __pdataBANK1 0155  
                  pause@message 00E5                __CFG_LPT1OSC$OFF 000000                        ??_fround 00B3  
                      ??_printf 00DF               __size_of___altoft 009E                      fround@prec 00B9  
                 ?i2__div_to_l_ 0001               __size_of___awtoft 0044               __size_of___ftpack 010C  
             __size_of___lltoft 007C                     __pbssCOMRAM 007B                   __pcstackBANK0 0080  
                 __pcstackBANK1 0100          __end_ofi2_digitalWrite 4BE0          sortBattery@targetAngle 0133  
             __size_of_dateTime 0026                     ?_startTimer 0080               __size_of_lcdClear 0008  
           __size_of_readKeypad 002A                        ?i2_scale 0024                        ?i2_putch 0001  
             __size_of_mainMenu 0026               i2digitalWrite@pin 0007               i2digitalWrite@val 0009  
             __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 003E               __size_of_setAngle 00D4  
                     __pintcode 0008                   __pmediumconst FE28                       _lcdNibble 5282  
                      ?___aldiv 0080                        ?___almod 008E                        ?___awdiv 0086  
                      ?___ftadd 00BA                        ?___awmod 0080                        ?___ftdiv 0092  
                      ?___ftneg 0080                        ?___lldiv 0080                        ?___ftmul 00A1  
                      ?___llmod 008D                        ?___ftsub 00C6                       __npowers_ FE51  
                      ?___fttol 00C6                   ?i2_lcdNewline 0001                     _digitalRead 3F16  
              ___almod@dividend 008E                        ?_lcdHome 0001                        ?_lcdInst 0001  
                   __tdiv_to_l_ 3430               __size_of_runStats 0026                  ??i2__div_to_l_ 0007  
                  ??__div_to_l_ 0086                        ?_initLCD 0001                 startTimer@timer 0080  
                      ?_isdigit 0001                        ?_service 0001                       _hexpowers FE9F  
                      ?_runMenu 0001                       _initTimer 54E2                       _initServo 5072  
                      ?_runTime 0001                 ?i2_digitalWrite 0007           _servoInterruptService 4394  
                   ??i2___awdiv 000B                     ??i2___ftadd 0034                     ??i2___awmod 0005  
                   ??i2___ftneg 0004                     ??i2___lldiv 0009                     ??i2___ftmul 001B  
                __size_of_scale 04AE                     ??i2___llmod 0016                     ??i2___ftsub 0040  
                   ??i2___fttol 002F                  __size_of_pause 0016                  __size_of_putch 0028  
                      _AA_float 0172                 ___aldiv@divisor 0084                     ??i2_lcdInst 0003  
               ___aldiv@counter 0088                  sortBattery@Vcc 0127                  ___wmul@product 0092  
                      _LATDbits 000F8C                    ??_analogRead 0084                     ??i2_isdigit 0001  
            __end_of__div_to_l_ 3756                        i2u700_40 47E0                        i2u700_45 47D8  
                      i2u664_44 4B42                        i2u664_45 4B3C                        i2u770_40 10EE  
                      i2u770_45 10E4          __size_of_showInterface 0104                        i2u860_47 53F6  
                      i2u861_47 541C                        i2u862_47 542A                        i2u792_40 14E0  
                      i2u856_47 59F4                        i2u857_47 5A08                        i2u858_47 5A1A  
                      i2u859_47 53E8                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                _padAngle_CLOSE 0160                       _terminate 01B8                 i2__div_to_l_@f1 0001  
               i2__div_to_l_@f2 0004                   digitalWrite@p 0087                  ??i2_lcdNewline 0005  
                    service@key 007A                    ??_lcdNewline 0084             __size_of_startTimer 0050  
                     _runSelect 5924               angleToPulse@angle 00D5                 main@cylinderDur 0151  
             ___wmul@multiplier 008E                        i2___ftge 4FE2                        i2___wmul 5996  
                 lcdNibble@data 0081                      printf@flag 0119                   lcdNibble@temp 0080  
                    printf@fval 0114                      printf@prec 011B               i2___awdiv@divisor 0009  
                      i2_fround 303E              __end_of_analogRead 56DE                        _V_LIM_AA 0158  
                      _V_LIM_9V 0155               i2___awdiv@counter 000B                      runMenu@key 00E5  
                      i2_printf 0E3C                      ?_initTimer 0080                      ?_initServo 00F6  
             sortBattery@signal 0125        sortBattery@pos_v_counter 011E                       copy_data0 5626  
            i2___awmod@dividend 0001                __size_ofi2_scale 03F0                __size_ofi2_putch 0022  
            __end_of_lcdNewline 5A60                   readKeypad@key 0080                        __Hrparam 0000  
                      __Lrparam 0000              __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0080  
                 ??_sortBattery 00F6                __size_of___aldiv 011A                __size_of___almod 00F2  
              __size_of___awdiv 00BE                __size_of___ftadd 0268                __size_of___awmod 00A2  
              __size_of___ftdiv 014C                __size_of___ftneg 0030           i2___wmul@multiplicand 0011  
              __size_of___lldiv 00BC                        ___altoft 4EAA                __size_of___ftmul 015E  
              __size_of___llmod 009A                __size_of___ftsub 004C                __size_of___fttol 0144  
                    ?_runSelect 0001                        ___awtoft 5658                        ___ftpack 4288  
                   _fround$1351 00B6                     _fround$1352 00B3                     _cylinderDir 017A  
                      ___lltoft 5206           __end_ofi2__tdiv_to_l_ 3F16                     _isdigit$982 0081  
              __size_of_lcdHome 0008                __size_of_lcdInst 002A                       setAngle@i 00F4  
              __size_of_initLCD 004A                        _dateTime 5970                __size_of_isdigit 002A  
        ?_servoInterruptService 0001                   _showInterface 459E                        _lcdClear 5A60  
                      __ptext10 594A                        __ptext11 5970                        __ptext20 2B2A  
                      __ptext12 571E                        __ptext21 579A                        __ptext13 5A42  
                      __ptext30 5802                        __ptext22 4E08                        __ptext14 5832  
                      __ptext31 4A50                        __ptext23 4BE0                        __ptext15 0012  
                      __ptext40 3A1A                        __ptext32 5A60                        __ptext24 3430  
                      __ptext16 1F02                        __ptext41 2DD6                        __ptext33 5A68  
                      __ptext25 35CE                        __ptext17 58B0                        __ptext50 416E  
                      __ptext42 5658                        __ptext34 5072                        __ptext26 5206  
                      __ptext18 5A58                        __ptext43 4EAA                        __ptext35 5492  
                      __ptext27 4F48                        __ptext19 585C                        __ptext60 5100  
                      __ptext52 0E3C                        __ptext44 4288                        __ptext36 497C  
                      __ptext28 4C9E                        __ptext61 3DE4                        __ptext53 23B0  
                      __ptext45 54E2                        __ptext37 3756                        __ptext29 5530  
                      __ptext70 59BC                        __ptext62 4046                        __ptext54 59E0  
                      __ptext46 55C8                        __ptext38 3B66                        __ptext71 4FE2  
                      __ptext63 5436                        __ptext55 5A70                        __ptext47 5886  
                      __ptext39 38BC                        __ptext72 5A78                        __ptext64 536A  
                      __ptext56 5A24                        __ptext48 5282                        __ptext73 5A02  
                      __ptext65 5184                        __ptext57 303E                        __ptext49 488A  
                      __ptext74 53D0                        __ptext66 4796                        __ptext58 5996  
                      __ptext75 4394                        __ptext67 56DE                        __ptext59 46A2  
                      __ptext76 557C                        __ptext68 3284                        __ptext77 4B18  
                      __ptext69 4D5A                        __ptext78 52FA                        __powers_ FE78  
              __size_of_service 3DDC                __size_of_runMenu 0032                 i2startTimer@val 0009  
              __size_of_runTime 0026                 ___almod@divisor 0092                   ?i2_startTimer 0007  
                      _mainMenu 594A                        _padServo 018A                 ___almod@counter 0096  
            __end_of_readKeypad 585C                   ?_angleToPulse 00D5                   __size_of_main 038A  
          __end_ofi2__div_to_l_ 416E                        _pinSetup 571E                        _setAngle 497C  
                      _prevTime 01B6                sortBattery@V_223 013A                   ??i2_lcdNibble 0001  
                   ??_lcdNibble 0080                   _padAngle_OPEN 0164                        int$flags 007E  
              sortBattery@i_225 0135                        _runStats 58FE                sortBattery@V_max 0130  
                     printf@idx 0105                       printf@len 0106                       printf@exp 010E  
                     printf@val 0110                        main@prev 0153               i2___awmod@divisor 0003  
                     putch@data 0084               i2___awmod@counter 0005             __end_of_sortBattery 1F02  
                    _INTCONbits 000FF2                  ?_showInterface 0001                   ?_digitalWrite 0080  
                   ??_initTimer 0082                     ??_initServo 00FA                        isdigit@c 0082  
                      scale@scl 00B6                  ??i2_startTimer 000D                    ??_startTimer 0086  
                      intlevel2 0000                __tdiv_to_l_@exp1 008E                __tdiv_to_l_@cntr 008D  
                ??_angleToPulse 00D9            __end_ofi2_lcdNewline 5A78                __tdiv_to_l_@quot 0089  
              ___lldiv@dividend 0080                _redirectAngle_AA 016A                _redirectAngle_9V 0168  
                      printf@ap 0108                        printf@cp 0103                     lcdInst@data 0083  
                  ?_digitalRead 0080                     ??_runSelect 00E5                    ?__tdiv_to_l_ 0080  
            __end_of_startTimer 54E2                     _printf$1354 0100             __end_ofi2_lcdNibble 5436  
              ??i2_digitalWrite 000B                ___lldiv@quotient 0088                  ??_digitalWrite 0084  
                  ___aldiv@sign 0089                 _redirectAngle_C 016C                _padAngle_NEUTRAL 0162  
               digitalWrite@pin 0080                 digitalWrite@val 0082               i2__div_to_l_@exp1 000C  
             i2__div_to_l_@cntr 000B                    ___almod@sign 0097               i2__div_to_l_@quot 0007  
