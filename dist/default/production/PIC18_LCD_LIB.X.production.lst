

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 27 17:17:05 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           ; Version 1.40
    77                           ; Generated 01/12/2016 GMT
    78                           ; 
    79                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F4620 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataCOMRAM
   112  003A64                     __pidataCOMRAM:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _padAngle_CLOSE
   116  003A64  001E               	dw	30
   117                           
   118                           ;initializer for _padAngle_NEUTRAL
   119  003A66  004C               	dw	76
   120                           
   121                           ;initializer for _padAngle_OPEN
   122  003A68  00B4               	dw	180
   123                           
   124                           ;initializer for _redirectAngle_9V
   125  003A6A  0076               	dw	118
   126                           
   127                           ;initializer for _redirectAngle_AA
   128  003A6C  008A               	dw	138
   129                           
   130                           ;initializer for _redirectAngle_C
   131  003A6E  00A6               	dw	166
   132                           
   133                           ;initializer for _redirectAngle_OTHER
   134  003A70  0099               	dw	153
   135                           
   136                           ;initializer for _stoppingTime
   137  003A72  2710               	dw	10000
   138                           
   139                           	psect	idataBANK1
   140  0038CC                     __pidataBANK1:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _V_LIM_9V
   144  0038CC  77                 	db	119
   145  0038CD  EE                 	db	238
   146  0038CE  3F                 	db	63
   147                           
   148                           ;initializer for _V_LIM_AA
   149  0038CF  C1                 	db	193
   150  0038D0  4A                 	db	74
   151  0038D1  3E                 	db	62
   152                           
   153                           ;initializer for _V_LIM_C
   154  0038D2  A7                 	db	167
   155  0038D3  A9                 	db	169
   156  0038D4  3F                 	db	63
   157                           
   158                           ;initializer for _angle
   159  0038D5  005A               	dw	90
   160                           
   161                           ;initializer for _period
   162  0038D7  797C               	dw	31100
   163                           
   164                           ;initializer for _AA_float
   165  0038D9  0002               	dw	2
   166  0038DB  0005               	dw	5
   167                           
   168                           ;initializer for _conveyorServo
   169  0038DD  0002               	dw	2
   170  0038DF  0002               	dw	2
   171                           
   172                           ;initializer for _cylinderDir
   173  0038E1  0003               	dw	3
   174  0038E3  0001               	dw	1
   175                           
   176                           ;initializer for _cylinderMotor
   177  0038E5  0002               	dw	2
   178  0038E7  0000               	dw	0
   179                           
   180                           ;initializer for _padPin1
   181  0038E9  0002               	dw	2
   182  0038EB  0006               	dw	6
   183                           
   184                           ;initializer for _padPin2
   185  0038ED  0002               	dw	2
   186  0038EF  0007               	dw	7
   187                           
   188                           ;initializer for _padServo
   189  0038F1  0002               	dw	2
   190  0038F3  0001               	dw	1
   191                           
   192                           ;initializer for _redirectingServo
   193  0038F5  0003               	dw	3
   194  0038F7  0000               	dw	0
   195                           
   196                           	psect	mediumconst
   197  00FE1C                     __pmediumconst:
   198                           	opt stack 0
   199  00FE1C  00                 	db	0
   200  00FE1D                     _dpowers:
   201                           	opt stack 0
   202  00FE1D  0001               	dw	1
   203  00FE1F  0000               	dw	0
   204  00FE21  000A               	dw	10
   205  00FE23  0000               	dw	0
   206  00FE25  0064               	dw	100
   207  00FE27  0000               	dw	0
   208  00FE29  03E8               	dw	1000
   209  00FE2B  0000               	dw	0
   210  00FE2D  2710               	dw	10000
   211  00FE2F  0000               	dw	0
   212  00FE31  86A0               	dw	34464
   213  00FE33  0001               	dw	1
   214  00FE35  4240               	dw	16960
   215  00FE37  000F               	dw	15
   216  00FE39  9680               	dw	38528
   217  00FE3B  0098               	dw	152
   218  00FE3D  E100               	dw	57600
   219  00FE3F  05F5               	dw	1525
   220  00FE41  CA00               	dw	51712
   221  00FE43  3B9A               	dw	15258
   222  00FE45                     __end_of_dpowers:
   223                           	opt stack 0
   224  00FE45                     __npowers_:
   225                           	opt stack 0
   226  00FE45  00                 	db	0
   227  00FE46  80                 	db	128
   228  00FE47  3F                 	db	63
   229  00FE48  CD                 	db	205
   230  00FE49  CC                 	db	204
   231  00FE4A  3D                 	db	61
   232  00FE4B  D7                 	db	215
   233  00FE4C  23                 	db	35
   234  00FE4D  3C                 	db	60
   235  00FE4E  12                 	db	18
   236  00FE4F  83                 	db	131
   237  00FE50  3A                 	db	58
   238  00FE51  B7                 	db	183
   239  00FE52  D1                 	db	209
   240  00FE53  38                 	db	56
   241  00FE54  C6                 	db	198
   242  00FE55  27                 	db	39
   243  00FE56  37                 	db	55
   244  00FE57  38                 	db	56
   245  00FE58  86                 	db	134
   246  00FE59  35                 	db	53
   247  00FE5A  C0                 	db	192
   248  00FE5B  D6                 	db	214
   249  00FE5C  33                 	db	51
   250  00FE5D  CC                 	db	204
   251  00FE5E  2B                 	db	43
   252  00FE5F  32                 	db	50
   253  00FE60  70                 	db	112
   254  00FE61  89                 	db	137
   255  00FE62  30                 	db	48
   256  00FE63  E7                 	db	231
   257  00FE64  DB                 	db	219
   258  00FE65  2E                 	db	46
   259  00FE66  E5                 	db	229
   260  00FE67  3C                 	db	60
   261  00FE68  1E                 	db	30
   262  00FE69  42                 	db	66
   263  00FE6A  A2                 	db	162
   264  00FE6B  0D                 	db	13
   265  00FE6C                     __end_of__npowers_:
   266                           	opt stack 0
   267  00FE6C                     __powers_:
   268                           	opt stack 0
   269  00FE6C  00                 	db	0
   270  00FE6D  80                 	db	128
   271  00FE6E  3F                 	db	63
   272  00FE6F  00                 	db	0
   273  00FE70  20                 	db	32
   274  00FE71  41                 	db	65
   275  00FE72  00                 	db	0
   276  00FE73  C8                 	db	200
   277  00FE74  42                 	db	66
   278  00FE75  00                 	db	0
   279  00FE76  7A                 	db	122
   280  00FE77  44                 	db	68
   281  00FE78  40                 	db	64
   282  00FE79  1C                 	db	28
   283  00FE7A  46                 	db	70
   284  00FE7B  50                 	db	80
   285  00FE7C  C3                 	db	195
   286  00FE7D  47                 	db	71
   287  00FE7E  24                 	db	36
   288  00FE7F  74                 	db	116
   289  00FE80  49                 	db	73
   290  00FE81  97                 	db	151
   291  00FE82  18                 	db	24
   292  00FE83  4B                 	db	75
   293  00FE84  BC                 	db	188
   294  00FE85  BE                 	db	190
   295  00FE86  4C                 	db	76
   296  00FE87  6B                 	db	107
   297  00FE88  6E                 	db	110
   298  00FE89  4E                 	db	78
   299  00FE8A  03                 	db	3
   300  00FE8B  15                 	db	21
   301  00FE8C  50                 	db	80
   302  00FE8D  79                 	db	121
   303  00FE8E  AD                 	db	173
   304  00FE8F  60                 	db	96
   305  00FE90  F3                 	db	243
   306  00FE91  49                 	db	73
   307  00FE92  71                 	db	113
   308  00FE93                     __end_of__powers_:
   309                           	opt stack 0
   310  00FE93                     _hexpowers:
   311                           	opt stack 0
   312  00FE93  0001               	dw	1
   313  00FE95  0000               	dw	0
   314  00FE97  0010               	dw	16
   315  00FE99  0000               	dw	0
   316  00FE9B  0100               	dw	256
   317  00FE9D  0000               	dw	0
   318  00FE9F  1000               	dw	4096
   319  00FEA1  0000               	dw	0
   320  00FEA3  0000               	dw	0
   321  00FEA5  0001               	dw	1
   322  00FEA7  0000               	dw	0
   323  00FEA9  0010               	dw	16
   324  00FEAB  0000               	dw	0
   325  00FEAD  0100               	dw	256
   326  00FEAF  0000               	dw	0
   327  00FEB1  1000               	dw	4096
   328  00FEB3                     __end_of_hexpowers:
   329                           	opt stack 0
   330  00FEB3                     _keys:
   331                           	opt stack 0
   332  00FEB3  31                 	db	49
   333  00FEB4  32                 	db	50
   334  00FEB5  33                 	db	51
   335  00FEB6  41                 	db	65
   336  00FEB7  34                 	db	52
   337  00FEB8  35                 	db	53
   338  00FEB9  36                 	db	54
   339  00FEBA  42                 	db	66
   340  00FEBB  37                 	db	55
   341  00FEBC  38                 	db	56
   342  00FEBD  39                 	db	57
   343  00FEBE  43                 	db	67
   344  00FEBF  2A                 	db	42
   345  00FEC0  30                 	db	48
   346  00FEC1  23                 	db	35
   347  00FEC2  44                 	db	68
   348  00FEC3  00                 	db	0
   349  00FEC4                     __end_of_keys:
   350                           	opt stack 0
   351  00FEC4                     _happynewyear:
   352                           	opt stack 0
   353  00FEC4  00                 	db	0
   354  00FEC5  59                 	db	89
   355  00FEC6  03                 	db	3
   356  00FEC7  01                 	db	1
   357  00FEC8  13                 	db	19
   358  00FEC9  04                 	db	4
   359  00FECA  17                 	db	23
   360  00FECB                     __end_of_happynewyear:
   361                           	opt stack 0
   362  0000                     _ADCON0	set	4034
   363  0000                     _ADCON1	set	4033
   364  0000                     _ADCON2	set	4032
   365  0000                     _ADRESH	set	4036
   366  0000                     _ADRESL	set	4035
   367  0000                     _EEADR	set	4009
   368  0000                     _EEADRH	set	4010
   369  0000                     _EECON1	set	4006
   370  0000                     _EECON2	set	4007
   371  0000                     _EEDATA	set	4008
   372  0000                     _INTCONbits	set	4082
   373  0000                     _LATA	set	3977
   374  0000                     _LATB	set	3978
   375  0000                     _LATC	set	3979
   376  0000                     _LATD	set	3980
   377  0000                     _LATDbits	set	3980
   378  0000                     _LATE	set	3981
   379  0000                     _PORTA	set	3968
   380  0000                     _PORTB	set	3969
   381  0000                     _PORTBbits	set	3969
   382  0000                     _PORTC	set	3970
   383  0000                     _PORTD	set	3971
   384  0000                     _SSPADD	set	4040
   385  0000                     _SSPBUF	set	4041
   386  0000                     _SSPCON1	set	4038
   387  0000                     _SSPCON2	set	4037
   388  0000                     _SSPSTAT	set	4039
   389  0000                     _T0CON	set	4053
   390  0000                     _T1CON	set	4045
   391  0000                     _T3CON	set	4017
   392  0000                     _TMR0H	set	4055
   393  0000                     _TMR0L	set	4054
   394  0000                     _TMR1H	set	4047
   395  0000                     _TMR1L	set	4046
   396  0000                     _TMR3H	set	4019
   397  0000                     _TMR3L	set	4018
   398  0000                     _TRISA	set	3986
   399  0000                     _TRISB	set	3987
   400  0000                     _TRISC	set	3988
   401  0000                     _TRISD	set	3989
   402  0000                     _TRISE	set	3990
   403  0000                     _ACKDT	set	32301
   404  0000                     _ACKEN	set	32300
   405  0000                     _EEIF	set	32012
   406  0000                     _INT0IE	set	32660
   407  0000                     _INT0IF	set	32657
   408  0000                     _INT1IE	set	32643
   409  0000                     _INT1IF	set	32640
   410  0000                     _PEIE	set	32662
   411  0000                     _PEN	set	32298
   412  0000                     _RCEN	set	32299
   413  0000                     _RSEN	set	32297
   414  0000                     _SEN	set	32296
   415  0000                     _TMR0IE	set	32661
   416  0000                     _TMR0IF	set	32658
   417  0000                     _TMR1IE	set	31976
   418  0000                     _TMR1IF	set	31984
   419  0000                     _TMR3IE	set	32001
   420  0000                     _TRISC3	set	31907
   421  0000                     _TRISC4	set	31908
   422  00FECB                     STR_13:
   423  00FECB  25                 	db	37
   424  00FECC  63                 	db	99	;'c'
   425  00FECD  29                 	db	41
   426  00FECE  20                 	db	32
   427  00FECF  74                 	db	116	;'t'
   428  00FED0  69                 	db	105	;'i'
   429  00FED1  6D                 	db	109	;'m'
   430  00FED2  65                 	db	101	;'e'
   431  00FED3  20                 	db	32
   432  00FED4  20                 	db	32
   433  00FED5  3C                 	db	60	;'<'
   434  00FED6  41                 	db	65	;'A'
   435  00FED7  20                 	db	32
   436  00FED8  20                 	db	32
   437  00FED9  20                 	db	32
   438  00FEDA  20                 	db	32
   439  00FEDB  20                 	db	32
   440  00FEDC  0A                 	db	10
   441  00FEDD  00                 	db	0
   442  00FEDE                     STR_9:
   443  00FEDE  73                 	db	115	;'s'
   444  00FEDF  74                 	db	116	;'t'
   445  00FEE0  61                 	db	97	;'a'
   446  00FEE1  72                 	db	114	;'r'
   447  00FEE2  74                 	db	116	;'t'
   448  00FEE3  20                 	db	32
   449  00FEE4  20                 	db	32
   450  00FEE5  20                 	db	32
   451  00FEE6  3C                 	db	60	;'<'
   452  00FEE7  42                 	db	66	;'B'
   453  00FEE8  20                 	db	32
   454  00FEE9  20                 	db	32
   455  00FEEA  20                 	db	32
   456  00FEEB  20                 	db	32
   457  00FEEC  20                 	db	32
   458  00FEED  20                 	db	32
   459  00FEEE  0A                 	db	10
   460  00FEEF  00                 	db	0
   461  00FEF0                     STR_7:
   462  00FEF0  20                 	db	32
   463  00FEF1  20                 	db	32
   464  00FEF2  68                 	db	104	;'h'
   465  00FEF3  68                 	db	104	;'h'
   466  00FEF4  3A                 	db	58	;':'
   467  00FEF5  6D                 	db	109	;'m'
   468  00FEF6  6D                 	db	109	;'m'
   469  00FEF7  3A                 	db	58	;':'
   470  00FEF8  73                 	db	115	;'s'
   471  00FEF9  73                 	db	115	;'s'
   472  00FEFA  20                 	db	32
   473  00FEFB  20                 	db	32
   474  00FEFC  20                 	db	32
   475  00FEFD  20                 	db	32
   476  00FEFE  20                 	db	32
   477  00FEFF  20                 	db	32
   478  00FF00  0A                 	db	10
   479  00FF01  00                 	db	0
   480  00FF02                     STR_11:
   481  00FF02  73                 	db	115	;'s'
   482  00FF03  65                 	db	101	;'e'
   483  00FF04  6C                 	db	108	;'l'
   484  00FF05  65                 	db	101	;'e'
   485  00FF06  63                 	db	99	;'c'
   486  00FF07  74                 	db	116	;'t'
   487  00FF08  20                 	db	32
   488  00FF09  72                 	db	114	;'r'
   489  00FF0A  75                 	db	117	;'u'
   490  00FF0B  6E                 	db	110	;'n'
   491  00FF0C  3A                 	db	58	;':'
   492  00FF0D  20                 	db	32
   493  00FF0E  20                 	db	32
   494  00FF0F  20                 	db	32
   495  00FF10  20                 	db	32
   496  00FF11  20                 	db	32
   497  00FF12  0A                 	db	10
   498  00FF13  00                 	db	0
   499  00FF14                     STR_15:
   500  00FF14  74                 	db	116	;'t'
   501  00FF15  69                 	db	105	;'i'
   502  00FF16  6D                 	db	109	;'m'
   503  00FF17  65                 	db	101	;'e'
   504  00FF18  3A                 	db	58	;':'
   505  00FF19  20                 	db	32
   506  00FF1A  6E                 	db	110	;'n'
   507  00FF1B  6E                 	db	110	;'n'
   508  00FF1C  6E                 	db	110	;'n'
   509  00FF1D  20                 	db	32
   510  00FF1E  73                 	db	115	;'s'
   511  00FF1F  65                 	db	101	;'e'
   512  00FF20  63                 	db	99	;'c'
   513  00FF21  20                 	db	32
   514  00FF22  20                 	db	32
   515  00FF23  20                 	db	32
   516  00FF24  0A                 	db	10
   517  00FF25  00                 	db	0
   518  00FF26                     STR_17:
   519  00FF26  5B                 	db	91	;'['
   520  00FF27  41                 	db	65	;'A'
   521  00FF28  41                 	db	65	;'A'
   522  00FF29  2C                 	db	44
   523  00FF2A  39                 	db	57	;'9'
   524  00FF2B  56                 	db	86	;'V'
   525  00FF2C  2C                 	db	44
   526  00FF2D  43                 	db	67	;'C'
   527  00FF2E  2C                 	db	44
   528  00FF2F  6F                 	db	111	;'o'
   529  00FF30  74                 	db	116	;'t'
   530  00FF31  68                 	db	104	;'h'
   531  00FF32  65                 	db	101	;'e'
   532  00FF33  72                 	db	114	;'r'
   533  00FF34  5D                 	db	93	;']'
   534  00FF35  20                 	db	32
   535  00FF36  0A                 	db	10
   536  00FF37  00                 	db	0
   537  00FF38                     STR_19:
   538  00FF38  30                 	db	48	;'0'
   539  00FF39  31                 	db	49	;'1'
   540  00FF3A  32                 	db	50	;'2'
   541  00FF3B  33                 	db	51	;'3'
   542  00FF3C  34                 	db	52	;'4'
   543  00FF3D  35                 	db	53	;'5'
   544  00FF3E  36                 	db	54	;'6'
   545  00FF3F  37                 	db	55	;'7'
   546  00FF40  38                 	db	56	;'8'
   547  00FF41  39                 	db	57	;'9'
   548  00FF42  61                 	db	97	;'a'
   549  00FF43  62                 	db	98	;'b'
   550  00FF44  63                 	db	99	;'c'
   551  00FF45  64                 	db	100	;'d'
   552  00FF46  65                 	db	101	;'e'
   553  00FF47  66                 	db	102	;'f'
   554  00FF48  00                 	db	0
   555  00FF49                     STR_16:
   556  00FF49  20                 	db	32
   557  00FF4A  20                 	db	32
   558  00FF4B  20                 	db	32
   559  00FF4C  20                 	db	32
   560  00FF4D  20                 	db	32
   561  00FF4E  20                 	db	32
   562  00FF4F  20                 	db	32
   563  00FF50  20                 	db	32
   564  00FF51  20                 	db	32
   565  00FF52  20                 	db	32
   566  00FF53  20                 	db	32
   567  00FF54  20                 	db	32
   568  00FF55  20                 	db	32
   569  00FF56  20                 	db	32
   570  00FF57  2A                 	db	42
   571  00FF58  3E                 	db	62	;'>'
   572  00FF59  00                 	db	0
   573  00FF5A                     STR_12:
   574  00FF5A  5B                 	db	91	;'['
   575  00FF5B  31                 	db	49	;'1'
   576  00FF5C  2C                 	db	44
   577  00FF5D  32                 	db	50	;'2'
   578  00FF5E  2C                 	db	44
   579  00FF5F  33                 	db	51	;'3'
   580  00FF60  2C                 	db	44
   581  00FF61  34                 	db	52	;'4'
   582  00FF62  5D                 	db	93	;']'
   583  00FF63  20                 	db	32
   584  00FF64  20                 	db	32
   585  00FF65  20                 	db	32
   586  00FF66  20                 	db	32
   587  00FF67  20                 	db	32
   588  00FF68  2A                 	db	42
   589  00FF69  3E                 	db	62	;'>'
   590  00FF6A  00                 	db	0
   591  00FF6B                     STR_10:
   592  00FF6B  68                 	db	104	;'h'
   593  00FF6C  69                 	db	105	;'i'
   594  00FF6D  73                 	db	115	;'s'
   595  00FF6E  74                 	db	116	;'t'
   596  00FF6F  6F                 	db	111	;'o'
   597  00FF70  72                 	db	114	;'r'
   598  00FF71  79                 	db	121	;'y'
   599  00FF72  20                 	db	32
   600  00FF73  3C                 	db	60	;'<'
   601  00FF74  43                 	db	67	;'C'
   602  00FF75  20                 	db	32
   603  00FF76  20                 	db	32
   604  00FF77  20                 	db	32
   605  00FF78  20                 	db	32
   606  00FF79  2A                 	db	42
   607  00FF7A  3E                 	db	62	;'>'
   608  00FF7B  00                 	db	0
   609  00FF7C                     STR_14:
   610  00FF7C  20                 	db	32
   611  00FF7D  20                 	db	32
   612  00FF7E  20                 	db	32
   613  00FF7F  73                 	db	115	;'s'
   614  00FF80  74                 	db	116	;'t'
   615  00FF81  61                 	db	97	;'a'
   616  00FF82  74                 	db	116	;'t'
   617  00FF83  73                 	db	115	;'s'
   618  00FF84  20                 	db	32
   619  00FF85  3C                 	db	60	;'<'
   620  00FF86  42                 	db	66	;'B'
   621  00FF87  20                 	db	32
   622  00FF88  20                 	db	32
   623  00FF89  20                 	db	32
   624  00FF8A  2A                 	db	42
   625  00FF8B  3E                 	db	62	;'>'
   626  00FF8C  00                 	db	0
   627  00FF8D                     STR_18:
   628  00FF8D  5B                 	db	91	;'['
   629  00FF8E  6E                 	db	110	;'n'
   630  00FF8F  6E                 	db	110	;'n'
   631  00FF90  2C                 	db	44
   632  00FF91  6E                 	db	110	;'n'
   633  00FF92  2C                 	db	44
   634  00FF93  6E                 	db	110	;'n'
   635  00FF94  2C                 	db	44
   636  00FF95  6E                 	db	110	;'n'
   637  00FF96  6E                 	db	110	;'n'
   638  00FF97  5D                 	db	93	;']'
   639  00FF98  20                 	db	32
   640  00FF99  20                 	db	32
   641  00FF9A  20                 	db	32
   642  00FF9B  2A                 	db	42
   643  00FF9C  3E                 	db	62	;'>'
   644  00FF9D  00                 	db	0
   645  00FF9E                     STR_8:
   646  00FF9E  20                 	db	32
   647  00FF9F  20                 	db	32
   648  00FFA0  6D                 	db	109	;'m'
   649  00FFA1  6D                 	db	109	;'m'
   650  00FFA2  3A                 	db	58	;':'
   651  00FFA3  64                 	db	100	;'d'
   652  00FFA4  64                 	db	100	;'d'
   653  00FFA5  3A                 	db	58	;':'
   654  00FFA6  79                 	db	121	;'y'
   655  00FFA7  79                 	db	121	;'y'
   656  00FFA8  20                 	db	32
   657  00FFA9  20                 	db	32
   658  00FFAA  20                 	db	32
   659  00FFAB  20                 	db	32
   660  00FFAC  41                 	db	65	;'A'
   661  00FFAD  3E                 	db	62	;'>'
   662  00FFAE  00                 	db	0
   663  00FFAF                     STR_3:
   664  00FFAF  5B                 	db	91	;'['
   665  00FFB0  41                 	db	65	;'A'
   666  00FFB1  41                 	db	65	;'A'
   667  00FFB2  2C                 	db	44
   668  00FFB3  43                 	db	67	;'C'
   669  00FFB4  2C                 	db	44
   670  00FFB5  39                 	db	57	;'9'
   671  00FFB6  56                 	db	86	;'V'
   672  00FFB7  2C                 	db	44
   673  00FFB8  4F                 	db	79	;'O'
   674  00FFB9  54                 	db	84	;'T'
   675  00FFBA  48                 	db	72	;'H'
   676  00FFBB  45                 	db	69	;'E'
   677  00FFBC  52                 	db	82	;'R'
   678  00FFBD  5D                 	db	93	;']'
   679  00FFBE  0A                 	db	10
   680  00FFBF  00                 	db	0
   681  00FFC0                     STR_2:
   682  00FFC0  74                 	db	116	;'t'
   683  00FFC1  69                 	db	105	;'i'
   684  00FFC2  6D                 	db	109	;'m'
   685  00FFC3  65                 	db	101	;'e'
   686  00FFC4  20                 	db	32
   687  00FFC5  25                 	db	37
   688  00FFC6  30                 	db	48	;'0'
   689  00FFC7  32                 	db	50	;'2'
   690  00FFC8  6C                 	db	108	;'l'
   691  00FFC9  64                 	db	100	;'d'
   692  00FFCA  3A                 	db	58	;':'
   693  00FFCB  25                 	db	37
   694  00FFCC  30                 	db	48	;'0'
   695  00FFCD  32                 	db	50	;'2'
   696  00FFCE  6C                 	db	108	;'l'
   697  00FFCF  64                 	db	100	;'d'
   698  00FFD0  00                 	db	0
   699  00FFD1                     STR_5:
   700  00FFD1  4E                 	db	78	;'N'
   701  00FFD2  3A                 	db	58	;':'
   702  00FFD3  20                 	db	32
   703  00FFD4  25                 	db	37
   704  00FFD5  64                 	db	100	;'d'
   705  00FFD6  2C                 	db	44
   706  00FFD7  0A                 	db	10
   707  00FFD8  56                 	db	86	;'V'
   708  00FFD9  3A                 	db	58	;':'
   709  00FFDA  20                 	db	32
   710  00FFDB  25                 	db	37
   711  00FFDC  2E                 	db	46
   712  00FFDD  33                 	db	51	;'3'
   713  00FFDE  66                 	db	102	;'f'
   714  00FFDF  00                 	db	0
   715  00FFE0                     STR_4:
   716  00FFE0  5B                 	db	91	;'['
   717  00FFE1  25                 	db	37
   718  00FFE2  64                 	db	100	;'d'
   719  00FFE3  2C                 	db	44
   720  00FFE4  25                 	db	37
   721  00FFE5  64                 	db	100	;'d'
   722  00FFE6  2C                 	db	44
   723  00FFE7  25                 	db	37
   724  00FFE8  64                 	db	100	;'d'
   725  00FFE9  2C                 	db	44
   726  00FFEA  25                 	db	37
   727  00FFEB  64                 	db	100	;'d'
   728  00FFEC  5D                 	db	93	;']'
   729  00FFED  00                 	db	0
   730  00FFEE  74                 	db	116	;'t'
   731  00FFEF  31                 	db	49	;'1'
   732  00FFF0  3A                 	db	58	;':'
   733  00FFF1  20                 	db	32
   734  00FFF2  25                 	db	37
   735  00FFF3  78                 	db	120	;'x'
   736  00FFF4  20                 	db	32
   737  00FFF5  00                 	db	0
   738  00FFF6                     STR_1:
   739  00FFF6  72                 	db	114	;'r'
   740  00FFF7  75                 	db	117	;'u'
   741  00FFF8  6E                 	db	110	;'n'
   742  00FFF9  6E                 	db	110	;'n'
   743  00FFFA  69                 	db	105	;'i'
   744  00FFFB  6E                 	db	110	;'n'
   745  00FFFC  67                 	db	103	;'g'
   746  00FFFD  00                 	db	0
   747                           
   748                           ; #config settings
   749  00FFFE  00                 	db	0	; dummy byte at the end
   750  0000                     
   751                           	psect	cinit
   752  003578                     __pcinit:
   753                           	opt stack 0
   754  003578                     start_initialization:
   755                           	opt stack 0
   756  003578                     __initialization:
   757                           	opt stack 0
   758                           
   759                           ; Initialize objects allocated to BANK1 (45 bytes)
   760                           ; load TBLPTR registers with __pidataBANK1
   761  003578  0ECC               	movlw	low __pidataBANK1
   762  00357A  6EF6               	movwf	tblptrl,c
   763  00357C  0E38               	movlw	high __pidataBANK1
   764  00357E  6EF7               	movwf	tblptrh,c
   765  003580  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   766  003582  6EF8               	movwf	tblptru,c
   767  003584  EE01  F038         	lfsr	0,__pdataBANK1
   768  003588  EE10 F02D          	lfsr	1,45
   769  00358C                     copy_data0:
   770  00358C  0009               	tblrd		*+
   771  00358E  CFF5 FFEE          	movff	tablat,postinc0
   772  003592  50E5               	movf	postdec1,w,c
   773  003594  50E1               	movf	fsr1l,w,c
   774  003596  E1FA               	bnz	copy_data0
   775                           
   776                           ; Initialize objects allocated to COMRAM (16 bytes)
   777                           ; load TBLPTR registers with __pidataCOMRAM
   778  003598  0E64               	movlw	low __pidataCOMRAM
   779  00359A  6EF6               	movwf	tblptrl,c
   780  00359C  0E3A               	movlw	high __pidataCOMRAM
   781  00359E  6EF7               	movwf	tblptrh,c
   782  0035A0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   783  0035A2  6EF8               	movwf	tblptru,c
   784  0035A4  EE00  F049         	lfsr	0,__pdataCOMRAM
   785  0035A8  EE10 F010          	lfsr	1,16
   786  0035AC                     copy_data1:
   787  0035AC  0009               	tblrd		*+
   788  0035AE  CFF5 FFEE          	movff	tablat,postinc0
   789  0035B2  50E5               	movf	postdec1,w,c
   790  0035B4  50E1               	movf	fsr1l,w,c
   791  0035B6  E1FA               	bnz	copy_data1
   792                           
   793                           ; Clear objects allocated to BANK1 (24 bytes)
   794  0035B8  EE01  F065         	lfsr	0,__pbssBANK1
   795  0035BC  0E18               	movlw	24
   796  0035BE                     clear_0:
   797  0035BE  6AEE               	clrf	postinc0,c
   798  0035C0  06E8               	decf	wreg,f,c
   799  0035C2  E1FD               	bnz	clear_0
   800                           
   801                           ; Clear objects allocated to COMRAM (21 bytes)
   802  0035C4  EE00  F034         	lfsr	0,__pbssCOMRAM
   803  0035C8  0E15               	movlw	21
   804  0035CA                     clear_1:
   805  0035CA  6AEE               	clrf	postinc0,c
   806  0035CC  06E8               	decf	wreg,f,c
   807  0035CE  E1FD               	bnz	clear_1
   808  0035D0                     end_of_initialization:
   809                           	opt stack 0
   810  0035D0                     __end_of__initialization:
   811                           	opt stack 0
   812  0035D0  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   813  0035D2  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   814  0035D4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   815  0035D6  6EF8               	movwf	tblptru,c
   816  0035D8  0100               	movlb	0
   817  0035DA  EFCE  F00B         	goto	_main	;jump to C main() function
   818                           tblptru	equ	0xFF8
   819                           tblptrh	equ	0xFF7
   820                           tblptrl	equ	0xFF6
   821                           tablat	equ	0xFF5
   822                           postinc0	equ	0xFEE
   823                           wreg	equ	0xFE8
   824                           postdec1	equ	0xFE5
   825                           fsr1l	equ	0xFE1
   826                           
   827                           	psect	bssCOMRAM
   828  000034                     __pbssCOMRAM:
   829                           	opt stack 0
   830  000034                     _time:
   831                           	opt stack 0
   832  000034                     	ds	4
   833  000038                     _batteryDetected:
   834                           	opt stack 0
   835  000038                     	ds	2
   836  00003A                     _curr:
   837                           	opt stack 0
   838  00003A                     	ds	2
   839  00003C                     _n:
   840                           	opt stack 0
   841  00003C                     	ds	2
   842  00003E                     _n_9V:
   843                           	opt stack 0
   844  00003E                     	ds	2
   845  000040                     _n_AA:
   846                           	opt stack 0
   847  000040                     	ds	2
   848  000042                     _n_C:
   849                           	opt stack 0
   850  000042                     	ds	2
   851  000044                     _n_OTHER:
   852                           	opt stack 0
   853  000044                     	ds	2
   854  000046                     _terminate:
   855                           	opt stack 0
   856  000046                     	ds	2
   857  000048                     _lastKey:
   858                           	opt stack 0
   859  000048                     	ds	1
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           postinc0	equ	0xFEE
   865                           wreg	equ	0xFE8
   866                           postdec1	equ	0xFE5
   867                           fsr1l	equ	0xFE1
   868                           
   869                           	psect	dataCOMRAM
   870  000049                     __pdataCOMRAM:
   871                           	opt stack 0
   872  000049                     _padAngle_CLOSE:
   873                           	opt stack 0
   874  000049                     	ds	2
   875  00004B                     _padAngle_NEUTRAL:
   876                           	opt stack 0
   877  00004B                     	ds	2
   878  00004D                     _padAngle_OPEN:
   879                           	opt stack 0
   880  00004D                     	ds	2
   881  00004F                     _redirectAngle_9V:
   882                           	opt stack 0
   883  00004F                     	ds	2
   884  000051                     _redirectAngle_AA:
   885                           	opt stack 0
   886  000051                     	ds	2
   887  000053                     _redirectAngle_C:
   888                           	opt stack 0
   889  000053                     	ds	2
   890  000055                     _redirectAngle_OTHER:
   891                           	opt stack 0
   892  000055                     	ds	2
   893  000057                     _stoppingTime:
   894                           	opt stack 0
   895  000057                     	ds	2
   896                           tblptru	equ	0xFF8
   897                           tblptrh	equ	0xFF7
   898                           tblptrl	equ	0xFF6
   899                           tablat	equ	0xFF5
   900                           postinc0	equ	0xFEE
   901                           wreg	equ	0xFE8
   902                           postdec1	equ	0xFE5
   903                           fsr1l	equ	0xFE1
   904                           
   905                           	psect	bssBANK1
   906  000165                     __pbssBANK1:
   907                           	opt stack 0
   908  000165                     _pulse:
   909                           	opt stack 0
   910  000165                     	ds	8
   911  00016D                     _servos:
   912                           	opt stack 0
   913  00016D                     	ds	8
   914  000175                     _padPin3:
   915                           	opt stack 0
   916  000175                     	ds	4
   917  000179                     _count:
   918                           	opt stack 0
   919  000179                     	ds	2
   920  00017B                     _prevTime:
   921                           	opt stack 0
   922  00017B                     	ds	2
   923                           tblptru	equ	0xFF8
   924                           tblptrh	equ	0xFF7
   925                           tblptrl	equ	0xFF6
   926                           tablat	equ	0xFF5
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           postdec1	equ	0xFE5
   930                           fsr1l	equ	0xFE1
   931                           
   932                           	psect	dataBANK1
   933  000138                     __pdataBANK1:
   934                           	opt stack 0
   935  000138                     _V_LIM_9V:
   936                           	opt stack 0
   937  000138                     	ds	3
   938  00013B                     _V_LIM_AA:
   939                           	opt stack 0
   940  00013B                     	ds	3
   941  00013E                     _V_LIM_C:
   942                           	opt stack 0
   943  00013E                     	ds	3
   944  000141                     _angle:
   945                           	opt stack 0
   946  000141                     	ds	2
   947  000143                     _period:
   948                           	opt stack 0
   949  000143                     	ds	2
   950  000145                     _AA_float:
   951                           	opt stack 0
   952  000145                     	ds	4
   953  000149                     _conveyorServo:
   954                           	opt stack 0
   955  000149                     	ds	4
   956  00014D                     _cylinderDir:
   957                           	opt stack 0
   958  00014D                     	ds	4
   959  000151                     _cylinderMotor:
   960                           	opt stack 0
   961  000151                     	ds	4
   962  000155                     _padPin1:
   963                           	opt stack 0
   964  000155                     	ds	4
   965  000159                     _padPin2:
   966                           	opt stack 0
   967  000159                     	ds	4
   968  00015D                     _padServo:
   969                           	opt stack 0
   970  00015D                     	ds	4
   971  000161                     _redirectingServo:
   972                           	opt stack 0
   973  000161                     	ds	4
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	cstackBANK1
   984  000100                     __pcstackBANK1:
   985                           	opt stack 0
   986  000100                     _sortBattery$1347:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x0
   990  000100                     	ds	2
   991  000102                     sortBattery@V_float:
   992                           	opt stack 0
   993                           
   994                           ; 3 bytes @ 0x2
   995  000102                     	ds	3
   996  000105                     sortBattery@pos_v_counter:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x5
  1000  000105                     	ds	2
  1001  000107                     sortBattery@signal:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x7
  1005  000107                     	ds	2
  1006  000109                     sortBattery@Vcc:
  1007                           	opt stack 0
  1008                           
  1009                           ; 3 bytes @ 0x9
  1010  000109                     	ds	3
  1011  00010C                     sortBattery@resolution:
  1012                           	opt stack 0
  1013                           
  1014                           ; 3 bytes @ 0xC
  1015  00010C                     	ds	3
  1016  00010F                     sortBattery@V_max:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0xF
  1020  00010F                     	ds	3
  1021  000112                     sortBattery@i_221:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x12
  1025  000112                     	ds	2
  1026  000114                     sortBattery@targetAngle:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x14
  1030  000114                     	ds	2
  1031  000116                     sortBattery@V:
  1032                           	opt stack 0
  1033                           
  1034                           ; 3 bytes @ 0x16
  1035  000116                     	ds	3
  1036  000119                     sortBattery@i:
  1037                           	opt stack 0
  1038                           
  1039                           ; 3 bytes @ 0x19
  1040  000119                     	ds	3
  1041  00011C                     sortBattery@V_219:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x1C
  1045  00011C                     	ds	3
  1046  00011F                     ??_main:
  1047                           
  1048                           ; 1 bytes @ 0x1F
  1049  00011F                     	ds	13
  1050  00012C                     main@cylinderForward:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x2C
  1054  00012C                     	ds	2
  1055  00012E                     main@cylinderBackward:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x2E
  1059  00012E                     	ds	2
  1060  000130                     main@lastBatteryTime:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x30
  1064  000130                     	ds	2
  1065  000132                     main@cylinderStart:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x32
  1069  000132                     	ds	2
  1070  000134                     main@cylinderDur:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x34
  1074  000134                     	ds	2
  1075  000136                     main@prev:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x36
  1079  000136                     	ds	2
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           
  1089                           	psect	cstackBANK0
  1090  000080                     __pcstackBANK0:
  1091                           	opt stack 0
  1092  000080                     ??___altoft:
  1093  000080                     ??___lltoft:
  1094  000080                     ?___llmod:
  1095                           	opt stack 0
  1096  000080                     ___aldiv@counter:
  1097                           	opt stack 0
  1098  000080                     ___awdiv@counter:
  1099                           	opt stack 0
  1100  000080                     ___ftge@ff1:
  1101                           	opt stack 0
  1102  000080                     __tdiv_to_l_@quot:
  1103                           	opt stack 0
  1104  000080                     ___llmod@dividend:
  1105                           	opt stack 0
  1106                           
  1107                           ; 4 bytes @ 0x0
  1108  000080                     	ds	1
  1109  000081                     ___aldiv@sign:
  1110                           	opt stack 0
  1111  000081                     ___awdiv@sign:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x1
  1115  000081                     	ds	1
  1116  000082                     ___awdiv@quotient:
  1117                           	opt stack 0
  1118  000082                     ___aldiv@quotient:
  1119                           	opt stack 0
  1120                           
  1121                           ; 4 bytes @ 0x2
  1122  000082                     	ds	1
  1123  000083                     ___ftge@ff2:
  1124                           	opt stack 0
  1125                           
  1126                           ; 3 bytes @ 0x3
  1127  000083                     	ds	1
  1128  000084                     ?___wmul:
  1129                           	opt stack 0
  1130  000084                     ___altoft@exp:
  1131                           	opt stack 0
  1132  000084                     __tdiv_to_l_@cntr:
  1133                           	opt stack 0
  1134  000084                     ___wmul@multiplier:
  1135                           	opt stack 0
  1136  000084                     ___llmod@divisor:
  1137                           	opt stack 0
  1138                           
  1139                           ; 4 bytes @ 0x4
  1140  000084                     	ds	1
  1141  000085                     ___altoft@sign:
  1142                           	opt stack 0
  1143  000085                     __tdiv_to_l_@exp1:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x5
  1147  000085                     	ds	1
  1148  000086                     ??___ftge:
  1149  000086                     ?___ftdiv:
  1150                           	opt stack 0
  1151  000086                     ?___almod:
  1152                           	opt stack 0
  1153  000086                     ___wmul@multiplicand:
  1154                           	opt stack 0
  1155  000086                     ___ftdiv@f1:
  1156                           	opt stack 0
  1157  000086                     ___almod@dividend:
  1158                           	opt stack 0
  1159                           
  1160                           ; 4 bytes @ 0x6
  1161  000086                     	ds	2
  1162  000088                     ___llmod@counter:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x8
  1166  000088                     	ds	1
  1167  000089                     ___ftdiv@f2:
  1168                           	opt stack 0
  1169                           
  1170                           ; 3 bytes @ 0x9
  1171  000089                     	ds	1
  1172  00008A                     ___almod@divisor:
  1173                           	opt stack 0
  1174                           
  1175                           ; 4 bytes @ 0xA
  1176  00008A                     	ds	2
  1177  00008C                     ??___ftdiv:
  1178                           
  1179                           ; 1 bytes @ 0xC
  1180  00008C                     	ds	3
  1181  00008F                     ___ftdiv@cntr:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0xF
  1185  00008F                     	ds	1
  1186  000090                     ___ftdiv@f3:
  1187                           	opt stack 0
  1188                           
  1189                           ; 3 bytes @ 0x10
  1190  000090                     	ds	3
  1191  000093                     ___ftdiv@exp:
  1192                           	opt stack 0
  1193                           
  1194                           ; 1 bytes @ 0x13
  1195  000093                     	ds	1
  1196  000094                     ___ftdiv@sign:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x14
  1200  000094                     	ds	1
  1201  000095                     ?___ftmul:
  1202                           	opt stack 0
  1203  000095                     ___ftmul@f1:
  1204                           	opt stack 0
  1205                           
  1206                           ; 3 bytes @ 0x15
  1207  000095                     	ds	3
  1208  000098                     ___ftmul@f2:
  1209                           	opt stack 0
  1210                           
  1211                           ; 3 bytes @ 0x18
  1212  000098                     	ds	3
  1213  00009B                     ??___ftmul:
  1214                           
  1215                           ; 1 bytes @ 0x1B
  1216  00009B                     	ds	3
  1217  00009E                     ___ftmul@exp:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x1E
  1221  00009E                     	ds	1
  1222  00009F                     ___ftmul@f3_as_product:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x1F
  1226  00009F                     	ds	3
  1227  0000A2                     ___ftmul@cntr:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x22
  1231  0000A2                     	ds	1
  1232  0000A3                     ___ftmul@sign:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x23
  1236  0000A3                     	ds	1
  1237  0000A4                     ?_fround:
  1238                           	opt stack 0
  1239  0000A4                     ?_scale:
  1240                           	opt stack 0
  1241                           
  1242                           ; 3 bytes @ 0x24
  1243  0000A4                     	ds	3
  1244  0000A7                     _fround$1350:
  1245                           	opt stack 0
  1246  0000A7                     _scale$1351:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x27
  1250  0000A7                     	ds	3
  1251  0000AA                     scale@scl:
  1252                           	opt stack 0
  1253  0000AA                     _fround$1349:
  1254                           	opt stack 0
  1255                           
  1256                           ; 3 bytes @ 0x2A
  1257  0000AA                     	ds	3
  1258  0000AD                     fround@prec:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0x2D
  1262  0000AD                     	ds	1
  1263  0000AE                     ?___ftadd:
  1264                           	opt stack 0
  1265  0000AE                     ___ftadd@f1:
  1266                           	opt stack 0
  1267                           
  1268                           ; 3 bytes @ 0x2E
  1269  0000AE                     	ds	3
  1270  0000B1                     ___ftadd@f2:
  1271                           	opt stack 0
  1272                           
  1273                           ; 3 bytes @ 0x31
  1274  0000B1                     	ds	3
  1275  0000B4                     ??___ftadd:
  1276                           
  1277                           ; 1 bytes @ 0x34
  1278  0000B4                     	ds	3
  1279  0000B7                     ___ftadd@sign:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x37
  1283  0000B7                     	ds	1
  1284  0000B8                     ___ftadd@exp2:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x38
  1288  0000B8                     	ds	1
  1289  0000B9                     ___ftadd@exp1:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x39
  1293  0000B9                     	ds	1
  1294  0000BA                     ?___ftsub:
  1295                           	opt stack 0
  1296  0000BA                     ?___fttol:
  1297                           	opt stack 0
  1298  0000BA                     ___ftsub@f1:
  1299                           	opt stack 0
  1300  0000BA                     ___fttol@f1:
  1301                           	opt stack 0
  1302                           
  1303                           ; 3 bytes @ 0x3A
  1304  0000BA                     	ds	3
  1305  0000BD                     ___ftsub@f2:
  1306                           	opt stack 0
  1307                           
  1308                           ; 3 bytes @ 0x3D
  1309  0000BD                     	ds	1
  1310  0000BE                     ??___fttol:
  1311                           
  1312                           ; 1 bytes @ 0x3E
  1313  0000BE                     	ds	5
  1314  0000C3                     ___fttol@sign1:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x43
  1318  0000C3                     	ds	1
  1319  0000C4                     ___fttol@lval:
  1320                           	opt stack 0
  1321                           
  1322                           ; 4 bytes @ 0x44
  1323  0000C4                     	ds	4
  1324  0000C8                     ___fttol@exp1:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x48
  1328  0000C8                     	ds	1
  1329  0000C9                     ?_printf:
  1330                           	opt stack 0
  1331  0000C9                     ?_angleToPulse:
  1332                           	opt stack 0
  1333  0000C9                     angleToPulse@angle:
  1334                           	opt stack 0
  1335  0000C9                     printf@f:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x49
  1339  0000C9                     	ds	4
  1340  0000CD                     ??_angleToPulse:
  1341                           
  1342                           ; 1 bytes @ 0x4D
  1343  0000CD                     	ds	4
  1344  0000D1                     angleToPulse@offset:
  1345                           	opt stack 0
  1346                           
  1347                           ; 4 bytes @ 0x51
  1348  0000D1                     	ds	2
  1349  0000D3                     ??_printf:
  1350                           
  1351                           ; 1 bytes @ 0x53
  1352  0000D3                     	ds	2
  1353  0000D5                     angleToPulse@a180:
  1354                           	opt stack 0
  1355                           
  1356                           ; 4 bytes @ 0x55
  1357  0000D5                     	ds	4
  1358  0000D9                     _angleToPulse$1348:
  1359                           	opt stack 0
  1360  0000D9                     _printf$1352:
  1361                           	opt stack 0
  1362                           
  1363                           ; 3 bytes @ 0x59
  1364  0000D9                     	ds	3
  1365  0000DC                     printf@idx:
  1366                           	opt stack 0
  1367  0000DC                     angleToPulse@a000:
  1368                           	opt stack 0
  1369                           
  1370                           ; 4 bytes @ 0x5C
  1371  0000DC                     	ds	1
  1372  0000DD                     printf@cp:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x5D
  1376  0000DD                     	ds	2
  1377  0000DF                     printf@len:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0x5F
  1381  0000DF                     	ds	1
  1382  0000E0                     setAngle@motor:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x60
  1386  0000E0                     	ds	1
  1387  0000E1                     printf@ap:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x61
  1391  0000E1                     	ds	1
  1392  0000E2                     setAngle@angle:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x62
  1396  0000E2                     	ds	1
  1397  0000E3                     printf@tmpval:
  1398                           	opt stack 0
  1399                           
  1400                           ; 4 bytes @ 0x63
  1401  0000E3                     	ds	1
  1402  0000E4                     ??_setAngle:
  1403                           
  1404                           ; 1 bytes @ 0x64
  1405  0000E4                     	ds	2
  1406  0000E6                     setAngle@period:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x66
  1410  0000E6                     	ds	1
  1411  0000E7                     printf@exp:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x67
  1415  0000E7                     	ds	1
  1416  0000E8                     setAngle@i:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x68
  1420  0000E8                     	ds	1
  1421  0000E9                     printf@fval:
  1422                           	opt stack 0
  1423                           
  1424                           ; 3 bytes @ 0x69
  1425  0000E9                     	ds	1
  1426  0000EA                     initServo@motor:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x6A
  1430  0000EA                     	ds	2
  1431  0000EC                     initServo@angle:
  1432                           	opt stack 0
  1433  0000EC                     printf@val:
  1434                           	opt stack 0
  1435                           
  1436                           ; 4 bytes @ 0x6C
  1437  0000EC                     	ds	2
  1438  0000EE                     ??_initServo:
  1439                           
  1440                           ; 1 bytes @ 0x6E
  1441  0000EE                     	ds	2
  1442  0000F0                     printf@width:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x70
  1446  0000F0                     	ds	2
  1447  0000F2                     printf@flag:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x72
  1451  0000F2                     	ds	2
  1452  0000F4                     printf@prec:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x74
  1456  0000F4                     	ds	2
  1457  0000F6                     printf@c:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x76
  1461  0000F6                     	ds	1
  1462  0000F7                     ??_sortBattery:
  1463  0000F7                     runMenu@key:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x77
  1467  0000F7                     	ds	1
  1468  0000F8                     showInterface@key:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x78
  1472  0000F8                     	ds	1
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           postdec1	equ	0xFE5
  1480                           fsr1l	equ	0xFE1
  1481                           
  1482                           	psect	cstackCOMRAM
  1483  000001                     __pcstackCOMRAM:
  1484                           	opt stack 0
  1485  000001                     ?i2___awmod:
  1486                           	opt stack 0
  1487  000001                     i2___awmod@dividend:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x0
  1491  000001                     	ds	2
  1492  000003                     i2___awmod@divisor:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x2
  1496  000003                     	ds	2
  1497  000005                     i2___awmod@counter:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x4
  1501  000005                     	ds	1
  1502  000006                     i2___awmod@sign:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x5
  1506  000006                     	ds	1
  1507  000007                     i2digitalWrite@pin:
  1508                           	opt stack 0
  1509  000007                     i2startTimer@timer:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x6
  1513  000007                     	ds	2
  1514  000009                     i2digitalWrite@val:
  1515                           	opt stack 0
  1516  000009                     i2startTimer@val:
  1517                           	opt stack 0
  1518                           
  1519                           ; 4 bytes @ 0x8
  1520  000009                     	ds	2
  1521  00000B                     ??i2_digitalWrite:
  1522                           
  1523                           ; 1 bytes @ 0xA
  1524  00000B                     	ds	2
  1525  00000D                     ??i2_startTimer:
  1526                           
  1527                           ; 1 bytes @ 0xC
  1528  00000D                     	ds	1
  1529  00000E                     i2digitalWrite@p:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0xD
  1533  00000E                     	ds	2
  1534  000010                     ??_servoInterruptService:
  1535                           
  1536                           ; 1 bytes @ 0xF
  1537  000010                     	ds	4
  1538  000014                     ??_service:
  1539                           
  1540                           ; 1 bytes @ 0x13
  1541  000014                     	ds	18
  1542  000026                     service@key:
  1543                           	opt stack 0
  1544                           
  1545                           ; 1 bytes @ 0x25
  1546  000026                     	ds	1
  1547  000027                     ??_isdigit:
  1548  000027                     ?_digitalRead:
  1549                           	opt stack 0
  1550  000027                     ?___awmod:
  1551                           	opt stack 0
  1552  000027                     ?___ftpack:
  1553                           	opt stack 0
  1554  000027                     ?___ftneg:
  1555                           	opt stack 0
  1556  000027                     ?_analogRead:
  1557                           	opt stack 0
  1558  000027                     ?__tdiv_to_l_:
  1559                           	opt stack 0
  1560  000027                     ?__div_to_l_:
  1561                           	opt stack 0
  1562  000027                     ?___aldiv:
  1563                           	opt stack 0
  1564  000027                     ?___lldiv:
  1565                           	opt stack 0
  1566  000027                     lcdNibble@temp:
  1567                           	opt stack 0
  1568  000027                     readKeypad@key:
  1569                           	opt stack 0
  1570  000027                     digitalRead@pin:
  1571                           	opt stack 0
  1572  000027                     digitalWrite@pin:
  1573                           	opt stack 0
  1574  000027                     analogRead@channel:
  1575                           	opt stack 0
  1576  000027                     initTimer@timer:
  1577                           	opt stack 0
  1578  000027                     startTimer@timer:
  1579                           	opt stack 0
  1580  000027                     ___awmod@dividend:
  1581                           	opt stack 0
  1582  000027                     __div_to_l_@f1:
  1583                           	opt stack 0
  1584  000027                     ___ftpack@arg:
  1585                           	opt stack 0
  1586  000027                     __tdiv_to_l_@f1:
  1587                           	opt stack 0
  1588  000027                     ___ftneg@f1:
  1589                           	opt stack 0
  1590  000027                     ___aldiv@dividend:
  1591                           	opt stack 0
  1592  000027                     ___lldiv@dividend:
  1593                           	opt stack 0
  1594                           
  1595                           ; 4 bytes @ 0x26
  1596  000027                     	ds	1
  1597  000028                     lcdNibble@data:
  1598                           	opt stack 0
  1599  000028                     _isdigit$977:
  1600                           	opt stack 0
  1601                           
  1602                           ; 1 bytes @ 0x27
  1603  000028                     	ds	1
  1604  000029                     ??_initTimer:
  1605  000029                     ??_digitalRead:
  1606  000029                     ??_lcdInst:
  1607  000029                     isdigit@c:
  1608                           	opt stack 0
  1609  000029                     digitalWrite@val:
  1610                           	opt stack 0
  1611  000029                     ___awmod@divisor:
  1612                           	opt stack 0
  1613  000029                     startTimer@val:
  1614                           	opt stack 0
  1615                           
  1616                           ; 4 bytes @ 0x28
  1617  000029                     	ds	1
  1618  00002A                     lcdInst@data:
  1619                           	opt stack 0
  1620  00002A                     ___ftpack@exp:
  1621                           	opt stack 0
  1622  00002A                     __div_to_l_@f2:
  1623                           	opt stack 0
  1624  00002A                     __tdiv_to_l_@f2:
  1625                           	opt stack 0
  1626                           
  1627                           ; 3 bytes @ 0x29
  1628  00002A                     	ds	1
  1629  00002B                     ??_initLCD:
  1630  00002B                     ??_digitalWrite:
  1631  00002B                     ??_analogRead:
  1632  00002B                     putch@data:
  1633                           	opt stack 0
  1634  00002B                     ___awmod@counter:
  1635                           	opt stack 0
  1636  00002B                     ___ftpack@sign:
  1637                           	opt stack 0
  1638  00002B                     ___aldiv@divisor:
  1639                           	opt stack 0
  1640  00002B                     ___lldiv@divisor:
  1641                           	opt stack 0
  1642                           
  1643                           ; 4 bytes @ 0x2A
  1644  00002B                     	ds	1
  1645  00002C                     ??___ftpack:
  1646  00002C                     ___awmod@sign:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0x2B
  1650  00002C                     	ds	1
  1651  00002D                     ??_startTimer:
  1652  00002D                     ??__tdiv_to_l_:
  1653  00002D                     ?___awdiv:
  1654                           	opt stack 0
  1655  00002D                     ___awdiv@dividend:
  1656                           	opt stack 0
  1657  00002D                     __div_to_l_@quot:
  1658                           	opt stack 0
  1659                           
  1660                           ; 4 bytes @ 0x2C
  1661  00002D                     	ds	1
  1662  00002E                     digitalWrite@p:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x2D
  1666  00002E                     	ds	1
  1667  00002F                     ?___altoft:
  1668                           	opt stack 0
  1669  00002F                     ?___awtoft:
  1670                           	opt stack 0
  1671  00002F                     ?___lltoft:
  1672                           	opt stack 0
  1673  00002F                     ___almod@counter:
  1674                           	opt stack 0
  1675  00002F                     ___awdiv@divisor:
  1676                           	opt stack 0
  1677  00002F                     ___awtoft@c:
  1678                           	opt stack 0
  1679  00002F                     ___altoft@c:
  1680                           	opt stack 0
  1681  00002F                     ___lldiv@quotient:
  1682                           	opt stack 0
  1683  00002F                     ___lltoft@c:
  1684                           	opt stack 0
  1685                           
  1686                           ; 4 bytes @ 0x2E
  1687  00002F                     	ds	1
  1688  000030                     ___almod@sign:
  1689                           	opt stack 0
  1690                           
  1691                           ; 1 bytes @ 0x2F
  1692  000030                     	ds	1
  1693  000031                     __div_to_l_@cntr:
  1694                           	opt stack 0
  1695  000031                     ___wmul@product:
  1696                           	opt stack 0
  1697                           
  1698                           ; 2 bytes @ 0x30
  1699  000031                     	ds	1
  1700  000032                     ___awtoft@sign:
  1701                           	opt stack 0
  1702  000032                     __div_to_l_@exp1:
  1703                           	opt stack 0
  1704                           
  1705                           ; 1 bytes @ 0x31
  1706  000032                     	ds	1
  1707  000033                     ___lldiv@counter:
  1708                           	opt stack 0
  1709  000033                     ___lltoft@exp:
  1710                           	opt stack 0
  1711                           
  1712                           ; 1 bytes @ 0x32
  1713  000033                     	ds	1
  1714  000034                     tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           tblptrl	equ	0xFF6
  1717                           tablat	equ	0xFF5
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           postdec1	equ	0xFE5
  1721                           fsr1l	equ	0xFE1
  1722                           
  1723                           ; 1 bytes @ 0x33
  1724 ;;
  1725 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  1726 ;;
  1727 ;; *************** function _main *****************
  1728 ;; Defined at:
  1729 ;;		line 101 in file "main.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  prev            2   54[BANK1 ] int 
  1734 ;;  cylinderDur     2   52[BANK1 ] int 
  1735 ;;  cylinderStar    2   50[BANK1 ] int 
  1736 ;;  lastBatteryT    2   48[BANK1 ] int 
  1737 ;;  cylinderBack    2   46[BANK1 ] int 
  1738 ;;  cylinderForw    2   44[BANK1 ] int 
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  1    wreg      void 
  1741 ;; Registers used:
  1742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;Total ram usage:       25 bytes
  1753 ;; Hardware stack levels required when called:   10
  1754 ;; This function calls:
  1755 ;;		___aldiv
  1756 ;;		___almod
  1757 ;;		_digitalRead
  1758 ;;		_digitalWrite
  1759 ;;		_initLCD
  1760 ;;		_initServo
  1761 ;;		_initTimer
  1762 ;;		_lcdClear
  1763 ;;		_lcdHome
  1764 ;;		_pinSetup
  1765 ;;		_printf
  1766 ;;		_readKeypad
  1767 ;;		_showInterface
  1768 ;;		_sortBattery
  1769 ;;		_startTimer
  1770 ;; This function is called by:
  1771 ;;		Startup code after reset
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text0
  1776  00179C                     __ptext0:
  1777                           	opt stack 0
  1778  00179C                     _main:
  1779                           	opt stack 21
  1780                           
  1781                           ;main.c: 102: pinSetup();
  1782                           
  1783                           ;incstack = 0
  1784  00179C  ECDC  F01B         	call	_pinSetup	;wreg free
  1785                           
  1786                           ;main.c: 103: initLCD();
  1787  0017A0  ECB9  F01B         	call	_initLCD	;wreg free
  1788  0017A4                     l7029:
  1789                           
  1790                           ;main.c: 106: showInterface();
  1791  0017A4  ECF5  F013         	call	_showInterface	;wreg free
  1792                           
  1793                           ;main.c: 111: time = 0;
  1794  0017A8  0E00               	movlw	0
  1795  0017AA  6E34               	movwf	_time,c
  1796  0017AC  0E00               	movlw	0
  1797  0017AE  6E35               	movwf	_time+1,c
  1798  0017B0  0E00               	movlw	0
  1799  0017B2  6E36               	movwf	_time+2,c
  1800  0017B4  0E00               	movlw	0
  1801  0017B6  6E37               	movwf	_time+3,c
  1802                           
  1803                           ;main.c: 112: initTimer(1);
  1804  0017B8  0E00               	movlw	0
  1805  0017BA  6E28               	movwf	initTimer@timer+1,c
  1806  0017BC  0E01               	movlw	1
  1807  0017BE  6E27               	movwf	initTimer@timer,c
  1808  0017C0  EC94  F01B         	call	_initTimer	;wreg free
  1809                           
  1810                           ;main.c: 113: startTimer(1,0);
  1811  0017C4  0E00               	movlw	0
  1812  0017C6  6E28               	movwf	startTimer@timer+1,c
  1813  0017C8  0E01               	movlw	1
  1814  0017CA  6E27               	movwf	startTimer@timer,c
  1815  0017CC  0E00               	movlw	0
  1816  0017CE  6E29               	movwf	startTimer@val,c
  1817  0017D0  0E00               	movlw	0
  1818  0017D2  6E2A               	movwf	startTimer@val+1,c
  1819  0017D4  0E00               	movlw	0
  1820  0017D6  6E2B               	movwf	startTimer@val+2,c
  1821  0017D8  0E00               	movlw	0
  1822  0017DA  6E2C               	movwf	startTimer@val+3,c
  1823  0017DC  EC48  F01B         	call	_startTimer	;wreg free
  1824                           
  1825                           ;main.c: 116: digitalWrite(cylinderMotor, 1);
  1826  0017E0  0E51               	movlw	low _cylinderMotor
  1827  0017E2  6E27               	movwf	digitalWrite@pin,c
  1828  0017E4  0E01               	movlw	high _cylinderMotor
  1829  0017E6  6E28               	movwf	digitalWrite@pin+1,c
  1830  0017E8  0E00               	movlw	0
  1831  0017EA  6E2A               	movwf	digitalWrite@val+1,c
  1832  0017EC  0E01               	movlw	1
  1833  0017EE  6E29               	movwf	digitalWrite@val,c
  1834  0017F0  EC2C  F017         	call	_digitalWrite	;wreg free
  1835                           
  1836                           ;main.c: 117: initServo(conveyorServo, 130);
  1837  0017F4  0E49               	movlw	low _conveyorServo
  1838  0017F6  0100               	movlb	0	; () banked
  1839  0017F8  6FEA               	movwf	initServo@motor& (0+255),b
  1840  0017FA  0E01               	movlw	high _conveyorServo
  1841  0017FC  0100               	movlb	0	; () banked
  1842  0017FE  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  1843  001800  0E00               	movlw	0
  1844  001802  0100               	movlb	0	; () banked
  1845  001804  6FED               	movwf	(initServo@angle+1)& (0+255),b
  1846  001806  0E82               	movlw	130
  1847  001808  6FEC               	movwf	initServo@angle& (0+255),b
  1848  00180A  EC92  F019         	call	_initServo	;wreg free
  1849                           
  1850                           ;main.c: 118: initServo(padServo, padAngle_NEUTRAL);
  1851  00180E  0E5D               	movlw	low _padServo
  1852  001810  0100               	movlb	0	; () banked
  1853  001812  6FEA               	movwf	initServo@motor& (0+255),b
  1854  001814  0E01               	movlw	high _padServo
  1855  001816  0100               	movlb	0	; () banked
  1856  001818  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  1857  00181A  C04B  F0EC         	movff	_padAngle_NEUTRAL,initServo@angle
  1858  00181E  C04C  F0ED         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1859  001822  EC92  F019         	call	_initServo	;wreg free
  1860                           
  1861                           ;main.c: 119: initServo(redirectingServo, redirectAngle_AA);
  1862  001826  0E61               	movlw	low _redirectingServo
  1863  001828  0100               	movlb	0	; () banked
  1864  00182A  6FEA               	movwf	initServo@motor& (0+255),b
  1865  00182C  0E01               	movlw	high _redirectingServo
  1866  00182E  0100               	movlb	0	; () banked
  1867  001830  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  1868  001832  C051  F0EC         	movff	_redirectAngle_AA,initServo@angle
  1869  001836  C052  F0ED         	movff	_redirectAngle_AA+1,initServo@angle+1
  1870  00183A  EC92  F019         	call	_initServo	;wreg free
  1871  00183E                     l7045:
  1872                           
  1873                           ;main.c: 123: lcdClear();
  1874  00183E  EC3E  F01D         	call	_lcdClear	;wreg free
  1875                           
  1876                           ;main.c: 124: printf("running");
  1877  001842  0EF6               	movlw	low STR_1
  1878  001844  0100               	movlb	0	; () banked
  1879  001846  6FC9               	movwf	printf@f& (0+255),b
  1880  001848  0EFF               	movlw	high STR_1
  1881  00184A  0100               	movlb	0	; () banked
  1882  00184C  6FCA               	movwf	(printf@f+1)& (0+255),b
  1883  00184E  EC09  F000         	call	_printf	;wreg free
  1884                           
  1885                           ;main.c: 126: int lastBatteryTime = time;
  1886  001852  C034  F130         	movff	_time,main@lastBatteryTime
  1887  001856  C035  F131         	movff	_time+1,main@lastBatteryTime+1
  1888                           
  1889                           ;main.c: 128: int cylinderStart = time;
  1890  00185A  C034  F132         	movff	_time,main@cylinderStart
  1891  00185E  C035  F133         	movff	_time+1,main@cylinderStart+1
  1892                           
  1893                           ;main.c: 129: int cylinderDur = 0;
  1894  001862  0E00               	movlw	0
  1895  001864  0101               	movlb	1	; () banked
  1896  001866  6F35               	movwf	(main@cylinderDur+1)& (0+255),b
  1897  001868  0E00               	movlw	0
  1898  00186A  6F34               	movwf	main@cylinderDur& (0+255),b
  1899                           
  1900                           ;main.c: 130: int cylinderForward = 10;
  1901  00186C  0E00               	movlw	0
  1902  00186E  0101               	movlb	1	; () banked
  1903  001870  6F2D               	movwf	(main@cylinderForward+1)& (0+255),b
  1904  001872  0E0A               	movlw	10
  1905  001874  6F2C               	movwf	main@cylinderForward& (0+255),b
  1906                           
  1907                           ;main.c: 131: int cylinderBackward = 10;
  1908  001876  0E00               	movlw	0
  1909  001878  0101               	movlb	1	; () banked
  1910  00187A  6F2F               	movwf	(main@cylinderBackward+1)& (0+255),b
  1911  00187C  0E0A               	movlw	10
  1912  00187E  6F2E               	movwf	main@cylinderBackward& (0+255),b
  1913                           
  1914                           ;main.c: 133: while(!batteryDetected && !terminate){
  1915  001880  D116               	goto	l7071
  1916  001882                     l7053:
  1917                           
  1918                           ; BSR set to: 1
  1919                           ;main.c: 135: lcdHome();
  1920  001882  EC42  F01D         	call	_lcdHome	;wreg free
  1921                           
  1922                           ;main.c: 136: printf("time %02ld:%02ld",time/600,(time/10)%60);
  1923  001886  0EC0               	movlw	low STR_2
  1924  001888  0100               	movlb	0	; () banked
  1925  00188A  6FC9               	movwf	printf@f& (0+255),b
  1926  00188C  0EFF               	movlw	high STR_2
  1927  00188E  0100               	movlb	0	; () banked
  1928  001890  6FCA               	movwf	(printf@f+1)& (0+255),b
  1929  001892  C034  F027         	movff	_time,___aldiv@dividend
  1930  001896  C035  F028         	movff	_time+1,___aldiv@dividend+1
  1931  00189A  C036  F029         	movff	_time+2,___aldiv@dividend+2
  1932  00189E  C037  F02A         	movff	_time+3,___aldiv@dividend+3
  1933  0018A2  0E58               	movlw	88
  1934  0018A4  6E2B               	movwf	___aldiv@divisor,c
  1935  0018A6  0E02               	movlw	2
  1936  0018A8  6E2C               	movwf	___aldiv@divisor+1,c
  1937  0018AA  0E00               	movlw	0
  1938  0018AC  6E2D               	movwf	___aldiv@divisor+2,c
  1939  0018AE  0E00               	movlw	0
  1940  0018B0  6E2E               	movwf	___aldiv@divisor+3,c
  1941  0018B2  EC54  F016         	call	___aldiv	;wreg free
  1942  0018B6  C027  F0CB         	movff	?___aldiv,?_printf+2
  1943  0018BA  C028  F0CC         	movff	?___aldiv+1,?_printf+3
  1944  0018BE  C029  F0CD         	movff	?___aldiv+2,?_printf+4
  1945  0018C2  C02A  F0CE         	movff	?___aldiv+3,?_printf+5
  1946  0018C6  0E0A               	movlw	10
  1947  0018C8  6E2B               	movwf	___aldiv@divisor,c
  1948  0018CA  0E00               	movlw	0
  1949  0018CC  6E2C               	movwf	___aldiv@divisor+1,c
  1950  0018CE  0E00               	movlw	0
  1951  0018D0  6E2D               	movwf	___aldiv@divisor+2,c
  1952  0018D2  0E00               	movlw	0
  1953  0018D4  6E2E               	movwf	___aldiv@divisor+3,c
  1954  0018D6  C034  F027         	movff	_time,___aldiv@dividend
  1955  0018DA  C035  F028         	movff	_time+1,___aldiv@dividend+1
  1956  0018DE  C036  F029         	movff	_time+2,___aldiv@dividend+2
  1957  0018E2  C037  F02A         	movff	_time+3,___aldiv@dividend+3
  1958  0018E6  EC54  F016         	call	___aldiv	;wreg free
  1959  0018EA  C027  F086         	movff	?___aldiv,___almod@dividend
  1960  0018EE  C028  F087         	movff	?___aldiv+1,___almod@dividend+1
  1961  0018F2  C029  F088         	movff	?___aldiv+2,___almod@dividend+2
  1962  0018F6  C02A  F089         	movff	?___aldiv+3,___almod@dividend+3
  1963  0018FA  0E3C               	movlw	60
  1964  0018FC  0100               	movlb	0	; () banked
  1965  0018FE  6F8A               	movwf	___almod@divisor& (0+255),b
  1966  001900  0E00               	movlw	0
  1967  001902  6F8B               	movwf	(___almod@divisor+1)& (0+255),b
  1968  001904  0E00               	movlw	0
  1969  001906  6F8C               	movwf	(___almod@divisor+2)& (0+255),b
  1970  001908  0E00               	movlw	0
  1971  00190A  6F8D               	movwf	(___almod@divisor+3)& (0+255),b
  1972  00190C  ECE2  F015         	call	___almod	;wreg free
  1973  001910  C086  F0CF         	movff	?___almod,?_printf+6
  1974  001914  C087  F0D0         	movff	?___almod+1,?_printf+7
  1975  001918  C088  F0D1         	movff	?___almod+2,?_printf+8
  1976  00191C  C089  F0D2         	movff	?___almod+3,?_printf+9
  1977  001920  EC09  F000         	call	_printf	;wreg free
  1978                           
  1979                           ;main.c: 137: _delay((unsigned long)((77)*(10000000/4000.0)));
  1980  001924  0EFA               	movlw	250
  1981  001926  0101               	movlb	1	; () banked
  1982  001928  6F1F               	movwf	??_main& (0+255),b
  1983  00192A  0EFF               	movlw	255
  1984  00192C                     u7667:
  1985  00192C  2EE8               	decfsz	wreg,f,c
  1986  00192E  D7FE               	bra	u7667
  1987  001930  2F1F               	decfsz	??_main& (0+255),f,b
  1988  001932  D7FC               	bra	u7667
  1989                           
  1990                           ;main.c: 140: if(time - cylinderStart >= cylinderDur)
  1991  001934  C134  F11F         	movff	main@cylinderDur,??_main
  1992  001938  C135  F120         	movff	main@cylinderDur+1,??_main+1
  1993  00193C  0E00               	movlw	0
  1994  00193E  0101               	movlb	1	; () banked
  1995  001940  BF20               	btfsc	(??_main+1)& (0+255),7,b
  1996  001942  0EFF               	movlw	255
  1997  001944  6F21               	movwf	(??_main+2)& (0+255),b
  1998  001946  6F22               	movwf	(??_main+3)& (0+255),b
  1999  001948  C132  F123         	movff	main@cylinderStart,??_main+4
  2000  00194C  C133  F124         	movff	main@cylinderStart+1,??_main+5
  2001  001950  0E00               	movlw	0
  2002  001952  0101               	movlb	1	; () banked
  2003  001954  BF24               	btfsc	(??_main+5)& (0+255),7,b
  2004  001956  0EFF               	movlw	255
  2005  001958  6F25               	movwf	(??_main+6)& (0+255),b
  2006  00195A  6F26               	movwf	(??_main+7)& (0+255),b
  2007  00195C  0101               	movlb	1	; () banked
  2008  00195E  1F23               	comf	(??_main+4)& (0+255),f,b
  2009  001960  1F24               	comf	(??_main+5)& (0+255),f,b
  2010  001962  1F25               	comf	(??_main+6)& (0+255),f,b
  2011  001964  1F26               	comf	(??_main+7)& (0+255),f,b
  2012  001966  2B23               	incf	(??_main+4)& (0+255),f,b
  2013  001968  0E00               	movlw	0
  2014  00196A  2324               	addwfc	(??_main+5)& (0+255),f,b
  2015  00196C  2325               	addwfc	(??_main+6)& (0+255),f,b
  2016  00196E  2326               	addwfc	(??_main+7)& (0+255),f,b
  2017  001970  5034               	movf	_time,w,c
  2018  001972  0101               	movlb	1	; () banked
  2019  001974  2523               	addwf	(??_main+4)& (0+255),w,b
  2020  001976  0101               	movlb	1	; () banked
  2021  001978  6F27               	movwf	(??_main+8)& (0+255),b
  2022  00197A  5035               	movf	_time+1,w,c
  2023  00197C  0101               	movlb	1	; () banked
  2024  00197E  2124               	addwfc	(??_main+5)& (0+255),w,b
  2025  001980  0101               	movlb	1	; () banked
  2026  001982  6F28               	movwf	(??_main+9)& (0+255),b
  2027  001984  5036               	movf	_time+2,w,c
  2028  001986  0101               	movlb	1	; () banked
  2029  001988  2125               	addwfc	(??_main+6)& (0+255),w,b
  2030  00198A  0101               	movlb	1	; () banked
  2031  00198C  6F29               	movwf	(??_main+10)& (0+255),b
  2032  00198E  5037               	movf	_time+3,w,c
  2033  001990  0101               	movlb	1	; () banked
  2034  001992  2126               	addwfc	(??_main+7)& (0+255),w,b
  2035  001994  0101               	movlb	1	; () banked
  2036  001996  6F2A               	movwf	(??_main+11)& (0+255),b
  2037  001998  0101               	movlb	1	; () banked
  2038  00199A  511F               	movf	??_main& (0+255),w,b
  2039  00199C  0101               	movlb	1	; () banked
  2040  00199E  5D27               	subwf	(??_main+8)& (0+255),w,b
  2041  0019A0  0101               	movlb	1	; () banked
  2042  0019A2  5120               	movf	(??_main+1)& (0+255),w,b
  2043  0019A4  0101               	movlb	1	; () banked
  2044  0019A6  5928               	subwfb	(??_main+9)& (0+255),w,b
  2045  0019A8  0101               	movlb	1	; () banked
  2046  0019AA  5121               	movf	(??_main+2)& (0+255),w,b
  2047  0019AC  0101               	movlb	1	; () banked
  2048  0019AE  5929               	subwfb	(??_main+10)& (0+255),w,b
  2049  0019B0  0101               	movlb	1	; () banked
  2050  0019B2  512A               	movf	(??_main+11)& (0+255),w,b
  2051  0019B4  0A80               	xorlw	128
  2052  0019B6  0101               	movlb	1	; () banked
  2053  0019B8  6F2B               	movwf	(??_main+12)& (0+255),b
  2054  0019BA  0101               	movlb	1	; () banked
  2055  0019BC  5122               	movf	(??_main+3)& (0+255),w,b
  2056  0019BE  0A80               	xorlw	128
  2057  0019C0  0101               	movlb	1	; () banked
  2058  0019C2  592B               	subwfb	(??_main+12)& (0+255),w,b
  2059  0019C4  A0D8               	btfss	status,0,c
  2060  0019C6  D02E               	goto	l7067
  2061                           
  2062                           ; BSR set to: 1
  2063                           ;main.c: 141: {
  2064                           ;main.c: 142: int prev = digitalRead(cylinderDir);
  2065  0019C8  0E4D               	movlw	low _cylinderDir
  2066  0019CA  6E27               	movwf	digitalRead@pin,c
  2067  0019CC  0E01               	movlw	high _cylinderDir
  2068  0019CE  6E28               	movwf	digitalRead@pin+1,c
  2069  0019D0  EC6D  F015         	call	_digitalRead	;wreg free
  2070  0019D4  C027  F136         	movff	?_digitalRead,main@prev
  2071  0019D8  C028  F137         	movff	?_digitalRead+1,main@prev+1
  2072                           
  2073                           ;main.c: 143: digitalWrite(cylinderDir, !prev);
  2074  0019DC  0E4D               	movlw	low _cylinderDir
  2075  0019DE  6E27               	movwf	digitalWrite@pin,c
  2076  0019E0  0E01               	movlw	high _cylinderDir
  2077  0019E2  6E28               	movwf	digitalWrite@pin+1,c
  2078  0019E4  0101               	movlb	1	; () banked
  2079  0019E6  5136               	movf	main@prev& (0+255),w,b
  2080  0019E8  0101               	movlb	1	; () banked
  2081  0019EA  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2082  0019EC  A4D8               	btfss	status,2,c
  2083  0019EE  D002               	goto	u7570
  2084  0019F0  0E01               	movlw	1
  2085  0019F2  D001               	goto	u7580
  2086  0019F4                     u7570:
  2087  0019F4  0E00               	movlw	0
  2088  0019F6                     u7580:
  2089  0019F6  6E29               	movwf	digitalWrite@val,c
  2090  0019F8  6A2A               	clrf	digitalWrite@val+1,c
  2091  0019FA  EC2C  F017         	call	_digitalWrite	;wreg free
  2092                           
  2093                           ;main.c: 144: if(prev)cylinderDur = cylinderBackward;
  2094  0019FE  0101               	movlb	1	; () banked
  2095  001A00  5136               	movf	main@prev& (0+255),w,b
  2096  001A02  0101               	movlb	1	; () banked
  2097  001A04  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2098  001A06  B4D8               	btfsc	status,2,c
  2099  001A08  D005               	goto	l136
  2100                           
  2101                           ; BSR set to: 1
  2102  001A0A  C12E  F134         	movff	main@cylinderBackward,main@cylinderDur
  2103  001A0E  C12F  F135         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2104  001A12  D004               	goto	l137
  2105  001A14                     l136:
  2106                           
  2107                           ; BSR set to: 1
  2108                           ;main.c: 145: else cylinderDur = cylinderForward;
  2109  001A14  C12C  F134         	movff	main@cylinderForward,main@cylinderDur
  2110  001A18  C12D  F135         	movff	main@cylinderForward+1,main@cylinderDur+1
  2111  001A1C                     l137:
  2112                           
  2113                           ; BSR set to: 1
  2114                           ;main.c: 146: cylinderStart = time;
  2115  001A1C  C034  F132         	movff	_time,main@cylinderStart
  2116  001A20  C035  F133         	movff	_time+1,main@cylinderStart+1
  2117  001A24                     l7067:
  2118                           
  2119                           ; BSR set to: 1
  2120                           ;main.c: 147: }
  2121                           ;main.c: 149: if(time - lastBatteryTime > stoppingTime)
  2122  001A24  C130  F11F         	movff	main@lastBatteryTime,??_main
  2123  001A28  C131  F120         	movff	main@lastBatteryTime+1,??_main+1
  2124  001A2C  0E00               	movlw	0
  2125  001A2E  0101               	movlb	1	; () banked
  2126  001A30  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2127  001A32  0EFF               	movlw	255
  2128  001A34  6F21               	movwf	(??_main+2)& (0+255),b
  2129  001A36  6F22               	movwf	(??_main+3)& (0+255),b
  2130  001A38  0101               	movlb	1	; () banked
  2131  001A3A  1F1F               	comf	??_main& (0+255),f,b
  2132  001A3C  1F20               	comf	(??_main+1)& (0+255),f,b
  2133  001A3E  1F21               	comf	(??_main+2)& (0+255),f,b
  2134  001A40  1F22               	comf	(??_main+3)& (0+255),f,b
  2135  001A42  2B1F               	incf	??_main& (0+255),f,b
  2136  001A44  0E00               	movlw	0
  2137  001A46  2320               	addwfc	(??_main+1)& (0+255),f,b
  2138  001A48  2321               	addwfc	(??_main+2)& (0+255),f,b
  2139  001A4A  2322               	addwfc	(??_main+3)& (0+255),f,b
  2140  001A4C  5034               	movf	_time,w,c
  2141  001A4E  0101               	movlb	1	; () banked
  2142  001A50  251F               	addwf	??_main& (0+255),w,b
  2143  001A52  0101               	movlb	1	; () banked
  2144  001A54  6F23               	movwf	(??_main+4)& (0+255),b
  2145  001A56  5035               	movf	_time+1,w,c
  2146  001A58  0101               	movlb	1	; () banked
  2147  001A5A  2120               	addwfc	(??_main+1)& (0+255),w,b
  2148  001A5C  0101               	movlb	1	; () banked
  2149  001A5E  6F24               	movwf	(??_main+5)& (0+255),b
  2150  001A60  5036               	movf	_time+2,w,c
  2151  001A62  0101               	movlb	1	; () banked
  2152  001A64  2121               	addwfc	(??_main+2)& (0+255),w,b
  2153  001A66  0101               	movlb	1	; () banked
  2154  001A68  6F25               	movwf	(??_main+6)& (0+255),b
  2155  001A6A  5037               	movf	_time+3,w,c
  2156  001A6C  0101               	movlb	1	; () banked
  2157  001A6E  2122               	addwfc	(??_main+3)& (0+255),w,b
  2158  001A70  0101               	movlb	1	; () banked
  2159  001A72  6F26               	movwf	(??_main+7)& (0+255),b
  2160  001A74  0E00               	movlw	0
  2161  001A76  BE58               	btfsc	_stoppingTime+1,7,c
  2162  001A78  0EFF               	movlw	255
  2163  001A7A  0101               	movlb	1	; () banked
  2164  001A7C  6F28               	movwf	(??_main+9)& (0+255),b
  2165  001A7E  0A80               	xorlw	128
  2166  001A80  6F27               	movwf	(??_main+8)& (0+255),b
  2167  001A82  0101               	movlb	1	; () banked
  2168  001A84  5123               	movf	(??_main+4)& (0+255),w,b
  2169  001A86  5C57               	subwf	_stoppingTime,w,c
  2170  001A88  0101               	movlb	1	; () banked
  2171  001A8A  5124               	movf	(??_main+5)& (0+255),w,b
  2172  001A8C  5858               	subwfb	_stoppingTime+1,w,c
  2173  001A8E  0101               	movlb	1	; () banked
  2174  001A90  5125               	movf	(??_main+6)& (0+255),w,b
  2175  001A92  0101               	movlb	1	; () banked
  2176  001A94  5928               	subwfb	(??_main+9)& (0+255),w,b
  2177  001A96  0101               	movlb	1	; () banked
  2178  001A98  5126               	movf	(??_main+7)& (0+255),w,b
  2179  001A9A  0A80               	xorlw	128
  2180  001A9C  0101               	movlb	1	; () banked
  2181  001A9E  5927               	subwfb	(??_main+8)& (0+255),w,b
  2182  001AA0  B0D8               	btfsc	status,0,c
  2183  001AA2  D005               	goto	l7071
  2184                           
  2185                           ; BSR set to: 1
  2186                           ;main.c: 150: {
  2187                           ;main.c: 151: terminate = 1;
  2188  001AA4  0E00               	movlw	0
  2189  001AA6  6E47               	movwf	_terminate+1,c
  2190  001AA8  0E01               	movlw	1
  2191  001AAA  6E46               	movwf	_terminate,c
  2192                           
  2193                           ;main.c: 152: break;
  2194  001AAC  D008               	goto	l7075
  2195  001AAE                     l7071:
  2196                           
  2197                           ; BSR set to: 1
  2198  001AAE  5038               	movf	_batteryDetected,w,c
  2199  001AB0  1039               	iorwf	_batteryDetected+1,w,c
  2200  001AB2  A4D8               	btfss	status,2,c
  2201  001AB4  D004               	goto	l7075
  2202                           
  2203                           ; BSR set to: 1
  2204  001AB6  5046               	movf	_terminate,w,c
  2205  001AB8  1047               	iorwf	_terminate+1,w,c
  2206  001ABA  B4D8               	btfsc	status,2,c
  2207  001ABC  D6E2               	goto	l7053
  2208  001ABE                     l7075:
  2209                           
  2210                           ; BSR set to: 1
  2211                           ;main.c: 153: }
  2212                           ;main.c: 154: }
  2213                           ;main.c: 156: if(terminate)break;
  2214  001ABE  5046               	movf	_terminate,w,c
  2215  001AC0  1047               	iorwf	_terminate+1,w,c
  2216  001AC2  A4D8               	btfss	status,2,c
  2217  001AC4  D00B               	goto	l7085
  2218                           
  2219                           ; BSR set to: 1
  2220                           ;main.c: 158: sortBattery();
  2221                           
  2222                           ; BSR set to: 1
  2223                           
  2224                           ; BSR set to: 1
  2225  001AC6  EC1C  F007         	call	_sortBattery	;wreg free
  2226                           
  2227                           ;main.c: 161: lastBatteryTime = time;
  2228  001ACA  C034  F130         	movff	_time,main@lastBatteryTime
  2229  001ACE  C035  F131         	movff	_time+1,main@lastBatteryTime+1
  2230                           
  2231                           ;main.c: 162: batteryDetected = 0;
  2232  001AD2  0E00               	movlw	0
  2233  001AD4  6E39               	movwf	_batteryDetected+1,c
  2234  001AD6  0E00               	movlw	0
  2235  001AD8  6E38               	movwf	_batteryDetected,c
  2236  001ADA  D6B1               	goto	l7045
  2237  001ADC                     l7085:
  2238                           
  2239                           ;main.c: 163: }
  2240                           ;main.c: 166: lcdClear();
  2241  001ADC  EC3E  F01D         	call	_lcdClear	;wreg free
  2242                           
  2243                           ;main.c: 167: printf("[AA,C,9V,OTHER]\n");
  2244  001AE0  0EAF               	movlw	low STR_3
  2245  001AE2  0100               	movlb	0	; () banked
  2246  001AE4  6FC9               	movwf	printf@f& (0+255),b
  2247  001AE6  0EFF               	movlw	high STR_3
  2248  001AE8  0100               	movlb	0	; () banked
  2249  001AEA  6FCA               	movwf	(printf@f+1)& (0+255),b
  2250  001AEC  EC09  F000         	call	_printf	;wreg free
  2251                           
  2252                           ;main.c: 168: printf("[%d,%d,%d,%d]",n_AA,n_C,n_9V,n_OTHER);
  2253  001AF0  0EE0               	movlw	low STR_4
  2254  001AF2  0100               	movlb	0	; () banked
  2255  001AF4  6FC9               	movwf	printf@f& (0+255),b
  2256  001AF6  0EFF               	movlw	high STR_4
  2257  001AF8  0100               	movlb	0	; () banked
  2258  001AFA  6FCA               	movwf	(printf@f+1)& (0+255),b
  2259  001AFC  C040  F0CB         	movff	_n_AA,?_printf+2
  2260  001B00  C041  F0CC         	movff	_n_AA+1,?_printf+3
  2261  001B04  C042  F0CD         	movff	_n_C,?_printf+4
  2262  001B08  C043  F0CE         	movff	_n_C+1,?_printf+5
  2263  001B0C  C03E  F0CF         	movff	_n_9V,?_printf+6
  2264  001B10  C03F  F0D0         	movff	_n_9V+1,?_printf+7
  2265  001B14  C044  F0D1         	movff	_n_OTHER,?_printf+8
  2266  001B18  C045  F0D2         	movff	_n_OTHER+1,?_printf+9
  2267  001B1C  EC09  F000         	call	_printf	;wreg free
  2268                           
  2269                           ;main.c: 169: readKeypad();
  2270  001B20  ECB6  F01C         	call	_readKeypad	;wreg free
  2271  001B24  D63F               	goto	l7029
  2272  001B26                     l147:
  2273  001B26  D7FF               	goto	l147
  2274  001B28                     __end_of_main:
  2275                           	opt stack 0
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           postinc0	equ	0xFEE
  2281                           wreg	equ	0xFE8
  2282                           postdec1	equ	0xFE5
  2283                           fsr1l	equ	0xFE1
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _sortBattery *****************
  2287 ;; Defined at:
  2288 ;;		line 177 in file "main.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  V               3   22[BANK1 ] float 
  2293 ;;  i               2   18[BANK1 ] int 
  2294 ;;  i               3   25[BANK1 ] float 
  2295 ;;  V               3   28[BANK1 ] float 
  2296 ;;  V_max           3   15[BANK1 ] float 
  2297 ;;  resolution      3   12[BANK1 ] float 
  2298 ;;  Vcc             3    9[BANK1 ] float 
  2299 ;;  V_float         3    2[BANK1 ] float 
  2300 ;;  targetAngle     2   20[BANK1 ] int 
  2301 ;;  signal          2    7[BANK1 ] int 
  2302 ;;  pos_v_counte    2    5[BANK1 ] int 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      void 
  2305 ;; Registers used:
  2306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;Total ram usage:       33 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    8
  2319 ;; This function calls:
  2320 ;;		___altoft
  2321 ;;		___awtoft
  2322 ;;		___ftdiv
  2323 ;;		___ftge
  2324 ;;		___ftmul
  2325 ;;		___ftsub
  2326 ;;		___fttol
  2327 ;;		_analogRead
  2328 ;;		_digitalRead
  2329 ;;		_digitalWrite
  2330 ;;		_lcdClear
  2331 ;;		_printf
  2332 ;;		_readKeypad
  2333 ;;		_setAngle
  2334 ;; This function is called by:
  2335 ;;		_main
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text1
  2340  000E38                     __ptext1:
  2341                           	opt stack 0
  2342  000E38                     _sortBattery:
  2343                           	opt stack 22
  2344                           
  2345                           ;main.c: 180: setAngle(conveyorServo, 90);
  2346                           
  2347                           ;incstack = 0
  2348  000E38  0E49               	movlw	low _conveyorServo
  2349  000E3A  0100               	movlb	0	; () banked
  2350  000E3C  6FE0               	movwf	setAngle@motor& (0+255),b
  2351  000E3E  0E01               	movlw	high _conveyorServo
  2352  000E40  0100               	movlb	0	; () banked
  2353  000E42  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2354  000E44  0E00               	movlw	0
  2355  000E46  0100               	movlb	0	; () banked
  2356  000E48  6FE3               	movwf	(setAngle@angle+1)& (0+255),b
  2357  000E4A  0E5A               	movlw	90
  2358  000E4C  6FE2               	movwf	setAngle@angle& (0+255),b
  2359  000E4E  ECC6  F016         	call	_setAngle	;wreg free
  2360                           
  2361                           ;main.c: 181: digitalWrite(cylinderMotor, 0);
  2362  000E52  0E51               	movlw	low _cylinderMotor
  2363  000E54  6E27               	movwf	digitalWrite@pin,c
  2364  000E56  0E01               	movlw	high _cylinderMotor
  2365  000E58  6E28               	movwf	digitalWrite@pin+1,c
  2366  000E5A  0E00               	movlw	0
  2367  000E5C  6E2A               	movwf	digitalWrite@val+1,c
  2368  000E5E  0E00               	movlw	0
  2369  000E60  6E29               	movwf	digitalWrite@val,c
  2370  000E62  EC2C  F017         	call	_digitalWrite	;wreg free
  2371                           
  2372                           ;main.c: 184: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2373  000E66  0E0D               	movlw	13
  2374  000E68  0100               	movlb	0	; () banked
  2375  000E6A  6FF8               	movwf	(??_sortBattery+1)& (0+255),b
  2376  000E6C  0EAF               	movlw	175
  2377  000E6E  0100               	movlb	0	; () banked
  2378  000E70  6FF7               	movwf	??_sortBattery& (0+255),b
  2379  000E72  0EB6               	movlw	182
  2380  000E74                     u7677:
  2381  000E74  2EE8               	decfsz	wreg,f,c
  2382  000E76  D7FE               	bra	u7677
  2383  000E78  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2384  000E7A  D7FC               	bra	u7677
  2385  000E7C  2FF8               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2386  000E7E  D7FA               	bra	u7677
  2387  000E80  F000               	nop	
  2388                           
  2389                           ;main.c: 186: float Vcc = 5.00;
  2390  000E82  0E00               	movlw	0
  2391  000E84  0101               	movlb	1	; () banked
  2392  000E86  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2393  000E88  0EA0               	movlw	160
  2394  000E8A  0101               	movlb	1	; () banked
  2395  000E8C  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2396  000E8E  0E40               	movlw	64
  2397  000E90  0101               	movlb	1	; () banked
  2398  000E92  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2399                           
  2400                           ; BSR set to: 1
  2401                           ;main.c: 187: float resolution = (1<<10) - 1;
  2402  000E94  0EC0               	movlw	192
  2403  000E96  0101               	movlb	1	; () banked
  2404  000E98  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2405  000E9A  0E7F               	movlw	127
  2406  000E9C  0101               	movlb	1	; () banked
  2407  000E9E  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2408  000EA0  0E44               	movlw	68
  2409  000EA2  0101               	movlb	1	; () banked
  2410  000EA4  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2411                           
  2412                           ; BSR set to: 1
  2413                           ;main.c: 188: float V_max = 0;
  2414  000EA6  0E00               	movlw	0
  2415  000EA8  0101               	movlb	1	; () banked
  2416  000EAA  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2417  000EAC  0E00               	movlw	0
  2418  000EAE  0101               	movlb	1	; () banked
  2419  000EB0  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2420  000EB2  0E00               	movlw	0
  2421  000EB4  0101               	movlb	1	; () banked
  2422  000EB6  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2423                           
  2424                           ; BSR set to: 1
  2425                           ;main.c: 189: float V_float = 0;
  2426  000EB8  0E00               	movlw	0
  2427  000EBA  0101               	movlb	1	; () banked
  2428  000EBC  6F02               	movwf	sortBattery@V_float& (0+255),b
  2429  000EBE  0E00               	movlw	0
  2430  000EC0  0101               	movlb	1	; () banked
  2431  000EC2  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2432  000EC4  0E00               	movlw	0
  2433  000EC6  0101               	movlb	1	; () banked
  2434  000EC8  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2435                           
  2436                           ; BSR set to: 1
  2437                           ;main.c: 190: int pos_v_counter = 1;
  2438  000ECA  0E00               	movlw	0
  2439  000ECC  0101               	movlb	1	; () banked
  2440  000ECE  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2441  000ED0  0E01               	movlw	1
  2442  000ED2  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2443                           
  2444                           ; BSR set to: 1
  2445                           ;main.c: 191: int signal = 0;
  2446  000ED4  0E00               	movlw	0
  2447  000ED6  0101               	movlb	1	; () banked
  2448  000ED8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2449  000EDA  0E00               	movlw	0
  2450  000EDC  6F07               	movwf	sortBattery@signal& (0+255),b
  2451                           
  2452                           ; BSR set to: 1
  2453                           ;main.c: 195: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2454  000EDE  C04B  F02F         	movff	_padAngle_NEUTRAL,___awtoft@c
  2455  000EE2  C04C  F030         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2456  000EE6  EC18  F01C         	call	___awtoft	;wreg free
  2457  000EEA  C02F  F119         	movff	?___awtoft,sortBattery@i
  2458  000EEE  C030  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2459  000EF2  C031  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2460  000EF6  D0FB               	goto	l6875
  2461  000EF8                     l6849:
  2462                           
  2463                           ;main.c: 196: setAngle(padServo, i);
  2464  000EF8  C119  F0BA         	movff	sortBattery@i,___fttol@f1
  2465  000EFC  C11A  F0BB         	movff	sortBattery@i+1,___fttol@f1+1
  2466  000F00  C11B  F0BC         	movff	sortBattery@i+2,___fttol@f1+2
  2467  000F04  ECBF  F012         	call	___fttol	;wreg free
  2468  000F08  C0BA  F100         	movff	?___fttol,_sortBattery$1347
  2469  000F0C  C0BB  F101         	movff	?___fttol+1,_sortBattery$1347+1
  2470                           
  2471                           ;main.c: 196: setAngle(padServo, i);
  2472  000F10  0E5D               	movlw	low _padServo
  2473  000F12  0100               	movlb	0	; () banked
  2474  000F14  6FE0               	movwf	setAngle@motor& (0+255),b
  2475  000F16  0E01               	movlw	high _padServo
  2476  000F18  0100               	movlb	0	; () banked
  2477  000F1A  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2478  000F1C  C100  F0E2         	movff	_sortBattery$1347,setAngle@angle
  2479  000F20  C101  F0E3         	movff	_sortBattery$1347+1,setAngle@angle+1
  2480  000F24  ECC6  F016         	call	_setAngle	;wreg free
  2481                           
  2482                           ;main.c: 197: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2483  000F28  0E53               	movlw	83
  2484  000F2A                     u7687:
  2485  000F2A  2EE8               	decfsz	wreg,f,c
  2486  000F2C  D7FE               	bra	u7687
  2487  000F2E  F000               	nop	
  2488                           
  2489                           ;main.c: 198: digitalWrite(AA_float, 1);
  2490  000F30  0E45               	movlw	low _AA_float
  2491  000F32  6E27               	movwf	digitalWrite@pin,c
  2492  000F34  0E01               	movlw	high _AA_float
  2493  000F36  6E28               	movwf	digitalWrite@pin+1,c
  2494  000F38  0E00               	movlw	0
  2495  000F3A  6E2A               	movwf	digitalWrite@val+1,c
  2496  000F3C  0E01               	movlw	1
  2497  000F3E  6E29               	movwf	digitalWrite@val,c
  2498  000F40  EC2C  F017         	call	_digitalWrite	;wreg free
  2499                           
  2500                           ;main.c: 199: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2501  000F44  C10C  F089         	movff	sortBattery@resolution,___ftdiv@f2
  2502  000F48  C10D  F08A         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2503  000F4C  C10E  F08B         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2504  000F50  C177  F027         	movff	_padPin3+2,analogRead@channel
  2505  000F54  C178  F028         	movff	_padPin3+3,analogRead@channel+1
  2506  000F58  ECFC  F01B         	call	_analogRead	;wreg free
  2507  000F5C  C027  F02F         	movff	?_analogRead,___altoft@c
  2508  000F60  C028  F030         	movff	?_analogRead+1,___altoft@c+1
  2509  000F64  C029  F031         	movff	?_analogRead+2,___altoft@c+2
  2510  000F68  C02A  F032         	movff	?_analogRead+3,___altoft@c+3
  2511  000F6C  EC4A  F019         	call	___altoft	;wreg free
  2512  000F70  C02F  F086         	movff	?___altoft,___ftdiv@f1
  2513  000F74  C030  F087         	movff	?___altoft+1,___ftdiv@f1+1
  2514  000F78  C031  F088         	movff	?___altoft+2,___ftdiv@f1+2
  2515  000F7C  EC19  F012         	call	___ftdiv	;wreg free
  2516  000F80  C086  F095         	movff	?___ftdiv,___ftmul@f1
  2517  000F84  C087  F096         	movff	?___ftdiv+1,___ftmul@f1+1
  2518  000F88  C088  F097         	movff	?___ftdiv+2,___ftmul@f1+2
  2519  000F8C  C109  F098         	movff	sortBattery@Vcc,___ftmul@f2
  2520  000F90  C10A  F099         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2521  000F94  C10B  F09A         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2522  000F98  ECBC  F010         	call	___ftmul	;wreg free
  2523  000F9C  C095  F116         	movff	?___ftmul,sortBattery@V
  2524  000FA0  C096  F117         	movff	?___ftmul+1,sortBattery@V+1
  2525  000FA4  C097  F118         	movff	?___ftmul+2,sortBattery@V+2
  2526                           
  2527                           ;main.c: 201: if(V > 0.1)pos_v_counter++;
  2528  000FA8  0ECD               	movlw	205
  2529  000FAA  0100               	movlb	0	; () banked
  2530  000FAC  6F80               	movwf	___ftge@ff1& (0+255),b
  2531  000FAE  0ECC               	movlw	204
  2532  000FB0  0100               	movlb	0	; () banked
  2533  000FB2  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  2534  000FB4  0E3D               	movlw	61
  2535  000FB6  0100               	movlb	0	; () banked
  2536  000FB8  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  2537  000FBA  C116  F083         	movff	sortBattery@V,___ftge@ff2
  2538  000FBE  C117  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2539  000FC2  C118  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2540  000FC6  EC90  F017         	call	___ftge	;wreg free
  2541  000FCA  0100               	movlb	0	; () banked
  2542  000FCC  B0D8               	btfsc	status,0,c
  2543  000FCE  D003               	goto	l6863
  2544                           
  2545                           ; BSR set to: 0
  2546  000FD0  0101               	movlb	1	; () banked
  2547  000FD2  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2548  000FD4  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2549  000FD6                     l6863:
  2550                           
  2551                           ;main.c: 203: if(V > V_max) {
  2552  000FD6  C10F  F080         	movff	sortBattery@V_max,___ftge@ff1
  2553  000FDA  C110  F081         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2554  000FDE  C111  F082         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2555  000FE2  C116  F083         	movff	sortBattery@V,___ftge@ff2
  2556  000FE6  C117  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2557  000FEA  C118  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2558  000FEE  EC90  F017         	call	___ftge	;wreg free
  2559  000FF2  0100               	movlb	0	; () banked
  2560  000FF4  B0D8               	btfsc	status,0,c
  2561  000FF6  D064               	goto	l6873
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;main.c: 204: signal = digitalRead(padPin1)<<1;
  2565  000FF8  0E55               	movlw	low _padPin1
  2566  000FFA  6E27               	movwf	digitalRead@pin,c
  2567  000FFC  0E01               	movlw	high _padPin1
  2568  000FFE  6E28               	movwf	digitalRead@pin+1,c
  2569  001000  EC6D  F015         	call	_digitalRead	;wreg free
  2570  001004  90D8               	bcf	status,0,c
  2571  001006  3427               	rlcf	?_digitalRead,w,c
  2572  001008  0101               	movlb	1	; () banked
  2573  00100A  6F07               	movwf	sortBattery@signal& (0+255),b
  2574  00100C  3428               	rlcf	?_digitalRead+1,w,c
  2575  00100E  0101               	movlb	1	; () banked
  2576  001010  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2577                           
  2578                           ;main.c: 205: signal |= digitalRead(padPin2)<<0;
  2579  001012  0E59               	movlw	low _padPin2
  2580  001014  6E27               	movwf	digitalRead@pin,c
  2581  001016  0E01               	movlw	high _padPin2
  2582  001018  6E28               	movwf	digitalRead@pin+1,c
  2583  00101A  EC6D  F015         	call	_digitalRead	;wreg free
  2584  00101E  5027               	movf	?_digitalRead,w,c
  2585  001020  0101               	movlb	1	; () banked
  2586  001022  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2587  001024  5028               	movf	?_digitalRead+1,w,c
  2588  001026  0101               	movlb	1	; () banked
  2589  001028  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2590                           
  2591                           ; BSR set to: 1
  2592                           ;main.c: 207: V_max = V;
  2593  00102A  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2594  00102E  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2595  001032  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2596                           
  2597                           ;main.c: 210: digitalWrite(AA_float, 0);
  2598  001036  0E45               	movlw	low _AA_float
  2599  001038  6E27               	movwf	digitalWrite@pin,c
  2600  00103A  0E01               	movlw	high _AA_float
  2601  00103C  6E28               	movwf	digitalWrite@pin+1,c
  2602  00103E  0E00               	movlw	0
  2603  001040  6E2A               	movwf	digitalWrite@val+1,c
  2604  001042  0E00               	movlw	0
  2605  001044  6E29               	movwf	digitalWrite@val,c
  2606  001046  EC2C  F017         	call	_digitalWrite	;wreg free
  2607                           
  2608                           ;main.c: 211: _delay((unsigned long)((1)*(10000000/4000.0)));
  2609  00104A  0E04               	movlw	4
  2610  00104C  0100               	movlb	0	; () banked
  2611  00104E  6FF7               	movwf	??_sortBattery& (0+255),b
  2612  001050  0E3D               	movlw	61
  2613  001052                     u7697:
  2614  001052  2EE8               	decfsz	wreg,f,c
  2615  001054  D7FE               	bra	u7697
  2616  001056  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2617  001058  D7FC               	bra	u7697
  2618  00105A  D000               	nop2	
  2619                           
  2620                           ;main.c: 212: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2621  00105C  C10C  F089         	movff	sortBattery@resolution,___ftdiv@f2
  2622  001060  C10D  F08A         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2623  001064  C10E  F08B         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2624  001068  C177  F027         	movff	_padPin3+2,analogRead@channel
  2625  00106C  C178  F028         	movff	_padPin3+3,analogRead@channel+1
  2626  001070  ECFC  F01B         	call	_analogRead	;wreg free
  2627  001074  C027  F02F         	movff	?_analogRead,___altoft@c
  2628  001078  C028  F030         	movff	?_analogRead+1,___altoft@c+1
  2629  00107C  C029  F031         	movff	?_analogRead+2,___altoft@c+2
  2630  001080  C02A  F032         	movff	?_analogRead+3,___altoft@c+3
  2631  001084  EC4A  F019         	call	___altoft	;wreg free
  2632  001088  C02F  F086         	movff	?___altoft,___ftdiv@f1
  2633  00108C  C030  F087         	movff	?___altoft+1,___ftdiv@f1+1
  2634  001090  C031  F088         	movff	?___altoft+2,___ftdiv@f1+2
  2635  001094  EC19  F012         	call	___ftdiv	;wreg free
  2636  001098  C086  F095         	movff	?___ftdiv,___ftmul@f1
  2637  00109C  C087  F096         	movff	?___ftdiv+1,___ftmul@f1+1
  2638  0010A0  C088  F097         	movff	?___ftdiv+2,___ftmul@f1+2
  2639  0010A4  C109  F098         	movff	sortBattery@Vcc,___ftmul@f2
  2640  0010A8  C10A  F099         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2641  0010AC  C10B  F09A         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2642  0010B0  ECBC  F010         	call	___ftmul	;wreg free
  2643  0010B4  C095  F102         	movff	?___ftmul,sortBattery@V_float
  2644  0010B8  C096  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2645  0010BC  C097  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2646  0010C0                     l6873:
  2647  0010C0  C119  F0BA         	movff	sortBattery@i,___ftsub@f1
  2648  0010C4  C11A  F0BB         	movff	sortBattery@i+1,___ftsub@f1+1
  2649  0010C8  C11B  F0BC         	movff	sortBattery@i+2,___ftsub@f1+2
  2650  0010CC  0ECD               	movlw	205
  2651  0010CE  0100               	movlb	0	; () banked
  2652  0010D0  6FBD               	movwf	___ftsub@f2& (0+255),b
  2653  0010D2  0ECC               	movlw	204
  2654  0010D4  0100               	movlb	0	; () banked
  2655  0010D6  6FBE               	movwf	(___ftsub@f2+1)& (0+255),b
  2656  0010D8  0E3D               	movlw	61
  2657  0010DA  0100               	movlb	0	; () banked
  2658  0010DC  6FBF               	movwf	(___ftsub@f2+2)& (0+255),b
  2659  0010DE  EC22  F01B         	call	___ftsub	;wreg free
  2660  0010E2  C0BA  F119         	movff	?___ftsub,sortBattery@i
  2661  0010E6  C0BB  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2662  0010EA  C0BC  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2663  0010EE                     l6875:
  2664  0010EE  C049  F02F         	movff	_padAngle_CLOSE,___awtoft@c
  2665  0010F2  C04A  F030         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2666  0010F6  EC18  F01C         	call	___awtoft	;wreg free
  2667  0010FA  C02F  F080         	movff	?___awtoft,___ftge@ff1
  2668  0010FE  C030  F081         	movff	?___awtoft+1,___ftge@ff1+1
  2669  001102  C031  F082         	movff	?___awtoft+2,___ftge@ff1+2
  2670  001106  C119  F083         	movff	sortBattery@i,___ftge@ff2
  2671  00110A  C11A  F084         	movff	sortBattery@i+1,___ftge@ff2+1
  2672  00110E  C11B  F085         	movff	sortBattery@i+2,___ftge@ff2+2
  2673  001112  EC90  F017         	call	___ftge	;wreg free
  2674  001116  0100               	movlb	0	; () banked
  2675  001118  A0D8               	btfss	status,0,c
  2676  00111A  D6EE               	goto	l6849
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;main.c: 214: }
  2680                           ;main.c: 215: }
  2681                           ;main.c: 217: int targetAngle;
  2682                           ;main.c: 218: float V = V_max;
  2683  00111C  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_219
  2684  001120  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_219+1
  2685  001124  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_219+2
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;main.c: 220: lcdClear();
  2689  001128  EC3E  F01D         	call	_lcdClear	;wreg free
  2690                           
  2691                           ;main.c: 221: printf("N: %d,\nV: %.3f",pos_v_counter, V);
  2692  00112C  0ED1               	movlw	low STR_5
  2693  00112E  0100               	movlb	0	; () banked
  2694  001130  6FC9               	movwf	printf@f& (0+255),b
  2695  001132  0EFF               	movlw	high STR_5
  2696  001134  0100               	movlb	0	; () banked
  2697  001136  6FCA               	movwf	(printf@f+1)& (0+255),b
  2698  001138  C105  F0CB         	movff	sortBattery@pos_v_counter,?_printf+2
  2699  00113C  C106  F0CC         	movff	sortBattery@pos_v_counter+1,?_printf+3
  2700  001140  C11C  F0CD         	movff	sortBattery@V_219,?_printf+4
  2701  001144  C11D  F0CE         	movff	sortBattery@V_219+1,?_printf+5
  2702  001148  C11E  F0CF         	movff	sortBattery@V_219+2,?_printf+6
  2703  00114C  EC09  F000         	call	_printf	;wreg free
  2704                           
  2705                           ;main.c: 223: readKeypad();
  2706  001150  ECB6  F01C         	call	_readKeypad	;wreg free
  2707                           
  2708                           ;main.c: 227: switch(signal){
  2709  001154  D063               	goto	l6911
  2710  001156                     l6883:
  2711                           
  2712                           ;main.c: 229: if(V_float < 0.1){
  2713  001156  C102  F080         	movff	sortBattery@V_float,___ftge@ff1
  2714  00115A  C103  F081         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2715  00115E  C104  F082         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2716  001162  0ECD               	movlw	205
  2717  001164  0100               	movlb	0	; () banked
  2718  001166  6F83               	movwf	___ftge@ff2& (0+255),b
  2719  001168  0ECC               	movlw	204
  2720  00116A  0100               	movlb	0	; () banked
  2721  00116C  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2722  00116E  0E3D               	movlw	61
  2723  001170  0100               	movlb	0	; () banked
  2724  001172  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2725  001174  EC90  F017         	call	___ftge	;wreg free
  2726  001178  0100               	movlb	0	; () banked
  2727  00117A  B0D8               	btfsc	status,0,c
  2728  00117C  D018               	goto	l6893
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;main.c: 230: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2732  00117E  C13B  F080         	movff	_V_LIM_AA,___ftge@ff1
  2733  001182  C13C  F081         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2734  001186  C13D  F082         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2735  00118A  C11C  F083         	movff	sortBattery@V_219,___ftge@ff2
  2736  00118E  C11D  F084         	movff	sortBattery@V_219+1,___ftge@ff2+1
  2737  001192  C11E  F085         	movff	sortBattery@V_219+2,___ftge@ff2+2
  2738  001196  EC90  F017         	call	___ftge	;wreg free
  2739  00119A  0100               	movlb	0	; () banked
  2740  00119C  B0D8               	btfsc	status,0,c
  2741  00119E  D037               	goto	l168
  2742                           
  2743                           ; BSR set to: 0
  2744  0011A0  C051  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2745  0011A4  C052  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2746                           
  2747                           ; BSR set to: 0
  2748  0011A8  4A40               	infsnz	_n_AA,f,c
  2749  0011AA  2A41               	incf	_n_AA+1,f,c
  2750  0011AC  D04B               	goto	l6913
  2751  0011AE                     l6893:
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;main.c: 236: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  2755  0011AE  C138  F080         	movff	_V_LIM_9V,___ftge@ff1
  2756  0011B2  C139  F081         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2757  0011B6  C13A  F082         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2758  0011BA  C11C  F083         	movff	sortBattery@V_219,___ftge@ff2
  2759  0011BE  C11D  F084         	movff	sortBattery@V_219+1,___ftge@ff2+1
  2760  0011C2  C11E  F085         	movff	sortBattery@V_219+2,___ftge@ff2+2
  2761  0011C6  EC90  F017         	call	___ftge	;wreg free
  2762  0011CA  0100               	movlb	0	; () banked
  2763  0011CC  B0D8               	btfsc	status,0,c
  2764  0011CE  D01F               	goto	l168
  2765                           
  2766                           ; BSR set to: 0
  2767  0011D0  C04F  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2768  0011D4  C050  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2769                           
  2770                           ; BSR set to: 0
  2771  0011D8  4A3E               	infsnz	_n_9V,f,c
  2772  0011DA  2A3F               	incf	_n_9V+1,f,c
  2773  0011DC  D033               	goto	l6913
  2774  0011DE                     l6901:
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;main.c: 240: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  2778  0011DE  C13E  F080         	movff	_V_LIM_C,___ftge@ff1
  2779  0011E2  C13F  F081         	movff	_V_LIM_C+1,___ftge@ff1+1
  2780  0011E6  C140  F082         	movff	_V_LIM_C+2,___ftge@ff1+2
  2781  0011EA  C11C  F083         	movff	sortBattery@V_219,___ftge@ff2
  2782  0011EE  C11D  F084         	movff	sortBattery@V_219+1,___ftge@ff2+1
  2783  0011F2  C11E  F085         	movff	sortBattery@V_219+2,___ftge@ff2+2
  2784  0011F6  EC90  F017         	call	___ftge	;wreg free
  2785  0011FA  0100               	movlb	0	; () banked
  2786  0011FC  B0D8               	btfsc	status,0,c
  2787  0011FE  D007               	goto	l168
  2788                           
  2789                           ; BSR set to: 0
  2790  001200  C053  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  2791  001204  C054  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2792                           
  2793                           ; BSR set to: 0
  2794  001208  4A42               	infsnz	_n_C,f,c
  2795  00120A  2A43               	incf	_n_C+1,f,c
  2796  00120C  D01B               	goto	l6913
  2797  00120E                     l168:
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;main.c: 241: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2801  00120E  C055  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2802  001212  C056  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2803                           
  2804                           ; BSR set to: 0
  2805  001216  4A44               	infsnz	_n_OTHER,f,c
  2806  001218  2A45               	incf	_n_OTHER+1,f,c
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;main.c: 243: }
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;main.c: 242: break;
  2813  00121A  D014               	goto	l6913
  2814  00121C                     l6911:
  2815  00121C  C107  F0F7         	movff	sortBattery@signal,??_sortBattery
  2816  001220  C108  F0F8         	movff	sortBattery@signal+1,??_sortBattery+1
  2817                           
  2818                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2819                           ; Switch size 1, requested type "space"
  2820                           ; Number of cases is 1, Range of values is 0 to 0
  2821                           ; switch strategies available:
  2822                           ; Name         Instructions Cycles
  2823                           ; simple_byte            4     3 (average)
  2824                           ;	Chosen strategy is simple_byte
  2825  001224  0100               	movlb	0	; () banked
  2826  001226  51F8               	movf	(??_sortBattery+1)& (0+255),w,b
  2827  001228  0A00               	xorlw	0	; case 0
  2828  00122A  A4D8               	btfss	status,2,c
  2829  00122C  D00B               	goto	l6913
  2830                           
  2831                           ; BSR set to: 0
  2832                           ; Switch size 1, requested type "space"
  2833                           ; Number of cases is 3, Range of values is 0 to 2
  2834                           ; switch strategies available:
  2835                           ; Name         Instructions Cycles
  2836                           ; simple_byte           10     6 (average)
  2837                           ;	Chosen strategy is simple_byte
  2838  00122E  0100               	movlb	0	; () banked
  2839  001230  51F7               	movf	??_sortBattery& (0+255),w,b
  2840  001232  0A00               	xorlw	0	; case 0
  2841  001234  B4D8               	btfsc	status,2,c
  2842  001236  D78F               	goto	l6883
  2843  001238  0A01               	xorlw	1	; case 1
  2844  00123A  B4D8               	btfsc	status,2,c
  2845  00123C  D7D0               	goto	l6901
  2846  00123E  0A03               	xorlw	3	; case 2
  2847  001240  B4D8               	btfsc	status,2,c
  2848  001242  D7B5               	goto	l6893
  2849  001244                     l6913:
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;main.c: 245: setAngle(redirectingServo, targetAngle);
  2853  001244  0E61               	movlw	low _redirectingServo
  2854  001246  0100               	movlb	0	; () banked
  2855  001248  6FE0               	movwf	setAngle@motor& (0+255),b
  2856  00124A  0E01               	movlw	high _redirectingServo
  2857  00124C  0100               	movlb	0	; () banked
  2858  00124E  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2859  001250  C114  F0E2         	movff	sortBattery@targetAngle,setAngle@angle
  2860  001254  C115  F0E3         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2861  001258  ECC6  F016         	call	_setAngle	;wreg free
  2862                           
  2863                           ;main.c: 246: _delay((unsigned long)((500)*(10000000/4000.0)));
  2864  00125C  0E07               	movlw	7
  2865  00125E  0100               	movlb	0	; () banked
  2866  001260  6FF8               	movwf	(??_sortBattery+1)& (0+255),b
  2867  001262  0E58               	movlw	88
  2868  001264  0100               	movlb	0	; () banked
  2869  001266  6FF7               	movwf	??_sortBattery& (0+255),b
  2870  001268  0E59               	movlw	89
  2871  00126A                     u7707:
  2872  00126A  2EE8               	decfsz	wreg,f,c
  2873  00126C  D7FE               	bra	u7707
  2874  00126E  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2875  001270  D7FC               	bra	u7707
  2876  001272  2FF8               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2877  001274  D7FA               	bra	u7707
  2878  001276  D000               	nop2	
  2879                           
  2880                           ;main.c: 250: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  2881  001278  C049  F112         	movff	_padAngle_CLOSE,sortBattery@i_221
  2882  00127C  C04A  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_221+1
  2883  001280  D018               	goto	l6925
  2884  001282                     l6919:
  2885                           
  2886                           ;main.c: 251: setAngle(padServo, i);
  2887  001282  0E5D               	movlw	low _padServo
  2888  001284  0100               	movlb	0	; () banked
  2889  001286  6FE0               	movwf	setAngle@motor& (0+255),b
  2890  001288  0E01               	movlw	high _padServo
  2891  00128A  0100               	movlb	0	; () banked
  2892  00128C  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2893  00128E  C112  F0E2         	movff	sortBattery@i_221,setAngle@angle
  2894  001292  C113  F0E3         	movff	sortBattery@i_221+1,setAngle@angle+1
  2895  001296  ECC6  F016         	call	_setAngle	;wreg free
  2896                           
  2897                           ;main.c: 252: _delay((unsigned long)((3)*(10000000/4000.0)));
  2898  00129A  0E0A               	movlw	10
  2899  00129C  0100               	movlb	0	; () banked
  2900  00129E  6FF7               	movwf	??_sortBattery& (0+255),b
  2901  0012A0  0EBC               	movlw	188
  2902  0012A2                     u7717:
  2903  0012A2  2EE8               	decfsz	wreg,f,c
  2904  0012A4  D7FE               	bra	u7717
  2905  0012A6  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2906  0012A8  D7FC               	bra	u7717
  2907  0012AA  F000               	nop	
  2908  0012AC  0101               	movlb	1	; () banked
  2909  0012AE  4B12               	infsnz	sortBattery@i_221& (0+255),f,b
  2910  0012B0  2B13               	incf	(sortBattery@i_221+1)& (0+255),f,b
  2911  0012B2                     l6925:
  2912  0012B2  504D               	movf	_padAngle_OPEN,w,c
  2913  0012B4  0101               	movlb	1	; () banked
  2914  0012B6  5D12               	subwf	sortBattery@i_221& (0+255),w,b
  2915  0012B8  0101               	movlb	1	; () banked
  2916  0012BA  5113               	movf	(sortBattery@i_221+1)& (0+255),w,b
  2917  0012BC  0A80               	xorlw	128
  2918  0012BE  0100               	movlb	0	; () banked
  2919  0012C0  6FF7               	movwf	??_sortBattery& (0+255),b
  2920  0012C2  504E               	movf	_padAngle_OPEN+1,w,c
  2921  0012C4  0A80               	xorlw	128
  2922  0012C6  0100               	movlb	0	; () banked
  2923  0012C8  59F7               	subwfb	??_sortBattery& (0+255),w,b
  2924  0012CA  A0D8               	btfss	status,0,c
  2925  0012CC  D7DA               	goto	l6919
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;main.c: 253: }
  2929                           ;main.c: 255: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2930                           
  2931                           ; BSR set to: 0
  2932  0012CE  0E0D               	movlw	13
  2933  0012D0  0100               	movlb	0	; () banked
  2934  0012D2  6FF8               	movwf	(??_sortBattery+1)& (0+255),b
  2935  0012D4  0EAF               	movlw	175
  2936  0012D6  0100               	movlb	0	; () banked
  2937  0012D8  6FF7               	movwf	??_sortBattery& (0+255),b
  2938  0012DA  0EB6               	movlw	182
  2939  0012DC                     u7727:
  2940  0012DC  2EE8               	decfsz	wreg,f,c
  2941  0012DE  D7FE               	bra	u7727
  2942  0012E0  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2943  0012E2  D7FC               	bra	u7727
  2944  0012E4  2FF8               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2945  0012E6  D7FA               	bra	u7727
  2946  0012E8  F000               	nop	
  2947                           
  2948                           ;main.c: 259: setAngle(padServo, padAngle_NEUTRAL);
  2949  0012EA  0E5D               	movlw	low _padServo
  2950  0012EC  0100               	movlb	0	; () banked
  2951  0012EE  6FE0               	movwf	setAngle@motor& (0+255),b
  2952  0012F0  0E01               	movlw	high _padServo
  2953  0012F2  0100               	movlb	0	; () banked
  2954  0012F4  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2955  0012F6  C04B  F0E2         	movff	_padAngle_NEUTRAL,setAngle@angle
  2956  0012FA  C04C  F0E3         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2957  0012FE  ECC6  F016         	call	_setAngle	;wreg free
  2958                           
  2959                           ;main.c: 263: setAngle(conveyorServo, 130);
  2960  001302  0E49               	movlw	low _conveyorServo
  2961  001304  0100               	movlb	0	; () banked
  2962  001306  6FE0               	movwf	setAngle@motor& (0+255),b
  2963  001308  0E01               	movlw	high _conveyorServo
  2964  00130A  0100               	movlb	0	; () banked
  2965  00130C  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2966  00130E  0E00               	movlw	0
  2967  001310  0100               	movlb	0	; () banked
  2968  001312  6FE3               	movwf	(setAngle@angle+1)& (0+255),b
  2969  001314  0E82               	movlw	130
  2970  001316  6FE2               	movwf	setAngle@angle& (0+255),b
  2971  001318  ECC6  F016         	call	_setAngle	;wreg free
  2972                           
  2973                           ;main.c: 264: digitalWrite(cylinderMotor, 1);
  2974  00131C  0E51               	movlw	low _cylinderMotor
  2975  00131E  6E27               	movwf	digitalWrite@pin,c
  2976  001320  0E01               	movlw	high _cylinderMotor
  2977  001322  6E28               	movwf	digitalWrite@pin+1,c
  2978  001324  0E00               	movlw	0
  2979  001326  6E2A               	movwf	digitalWrite@val+1,c
  2980  001328  0E01               	movlw	1
  2981  00132A  6E29               	movwf	digitalWrite@val,c
  2982  00132C  EC2C  F017         	call	_digitalWrite	;wreg free
  2983  001330  0012               	return		;funcret
  2984  001332                     __end_of_sortBattery:
  2985                           	opt stack 0
  2986                           tblptru	equ	0xFF8
  2987                           tblptrh	equ	0xFF7
  2988                           tblptrl	equ	0xFF6
  2989                           tablat	equ	0xFF5
  2990                           postinc0	equ	0xFEE
  2991                           wreg	equ	0xFE8
  2992                           postdec1	equ	0xFE5
  2993                           fsr1l	equ	0xFE1
  2994                           status	equ	0xFD8
  2995                           
  2996 ;; *************** function _digitalWrite *****************
  2997 ;; Defined at:
  2998 ;;		line 53 in file "iopin.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  pin             2   38[COMRAM] PTR int 
  3001 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
  3002 ;;		 -> conveyorServo(4), cylinderMotor(4), 
  3003 ;;  val             2   40[COMRAM] int 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  p               2   45[COMRAM] int 
  3006 ;; Return value:  Size  Location     Type
  3007 ;;                  1    wreg      void 
  3008 ;; Registers used:
  3009 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/0
  3012 ;;		On exit  : 0/0
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3015 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3019 ;;Total ram usage:        9 bytes
  3020 ;; Hardware stack levels used:    1
  3021 ;; Hardware stack levels required when called:    3
  3022 ;; This function calls:
  3023 ;;		Nothing
  3024 ;; This function is called by:
  3025 ;;		_main
  3026 ;;		_sortBattery
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text2
  3031  002E58                     __ptext2:
  3032                           	opt stack 0
  3033  002E58                     _digitalWrite:
  3034                           	opt stack 26
  3035                           
  3036                           ;iopin.c: 54: if(pin){
  3037                           
  3038                           ;incstack = 0
  3039  002E58  5027               	movf	digitalWrite@pin,w,c
  3040  002E5A  1028               	iorwf	digitalWrite@pin+1,w,c
  3041  002E5C  B4D8               	btfsc	status,2,c
  3042  002E5E  0012               	return	
  3043                           
  3044                           ;iopin.c: 55: int p = 1 << pin[1];
  3045  002E60  EE20 F002          	lfsr	2,2
  3046  002E64  5027               	movf	digitalWrite@pin,w,c
  3047  002E66  26D9               	addwf	fsr2l,f,c
  3048  002E68  5028               	movf	digitalWrite@pin+1,w,c
  3049  002E6A  22DA               	addwfc	fsr2h,f,c
  3050  002E6C  50DF               	movf	indf2,w,c
  3051  002E6E  6E2B               	movwf	??_digitalWrite& (0+255),c
  3052  002E70  0E01               	movlw	1
  3053  002E72  6E2C               	movwf	(??_digitalWrite+1)& (0+255),c
  3054  002E74  0E00               	movlw	0
  3055  002E76  6E2D               	movwf	(??_digitalWrite+2)& (0+255),c
  3056  002E78  2A2B               	incf	??_digitalWrite,f,c
  3057  002E7A  D003               	goto	u7004
  3058  002E7C                     u7005:
  3059  002E7C  90D8               	bcf	status,0,c
  3060  002E7E  362C               	rlcf	??_digitalWrite+1,f,c
  3061  002E80  362D               	rlcf	??_digitalWrite+2,f,c
  3062  002E82                     u7004:
  3063  002E82  2E2B               	decfsz	??_digitalWrite,f,c
  3064  002E84  D7FB               	goto	u7005
  3065  002E86  C02C  F02E         	movff	??_digitalWrite+1,digitalWrite@p
  3066  002E8A  C02D  F02F         	movff	??_digitalWrite+2,digitalWrite@p+1
  3067                           
  3068                           ;iopin.c: 56: if(val == 0){
  3069  002E8E  5029               	movf	digitalWrite@val,w,c
  3070  002E90  102A               	iorwf	digitalWrite@val+1,w,c
  3071  002E92  A4D8               	btfss	status,2,c
  3072  002E94  D02B               	goto	l6619
  3073                           
  3074                           ;iopin.c: 57: p ^= 0xff;
  3075  002E96  0EFF               	movlw	255
  3076  002E98  1A2E               	xorwf	digitalWrite@p,f,c
  3077                           
  3078                           ;iopin.c: 58: }
  3079                           ;iopin.c: 60: switch(pin[0]){
  3080  002E9A  D028               	goto	l6619
  3081  002E9C                     l6595:
  3082  002E9C  0429               	decf	digitalWrite@val,w,c
  3083  002E9E  102A               	iorwf	digitalWrite@val+1,w,c
  3084  002EA0  A4D8               	btfss	status,2,c
  3085  002EA2  D003               	goto	l6599
  3086  002EA4  502E               	movf	digitalWrite@p,w,c
  3087  002EA6  1289               	iorwf	3977,f,c	;volatile
  3088  002EA8  0012               	return	
  3089  002EAA                     l6599:
  3090                           
  3091                           ;iopin.c: 62: else LATA &= p;
  3092  002EAA  502E               	movf	digitalWrite@p,w,c
  3093  002EAC  1689               	andwf	3977,f,c	;volatile
  3094                           
  3095                           ;iopin.c: 63: break;
  3096  002EAE  0012               	return	
  3097  002EB0                     l6601:
  3098  002EB0  0429               	decf	digitalWrite@val,w,c
  3099  002EB2  102A               	iorwf	digitalWrite@val+1,w,c
  3100  002EB4  A4D8               	btfss	status,2,c
  3101  002EB6  D003               	goto	l6605
  3102  002EB8  502E               	movf	digitalWrite@p,w,c
  3103  002EBA  128A               	iorwf	3978,f,c	;volatile
  3104  002EBC  0012               	return	
  3105  002EBE                     l6605:
  3106                           
  3107                           ;iopin.c: 65: else LATB &= p;
  3108  002EBE  502E               	movf	digitalWrite@p,w,c
  3109  002EC0  168A               	andwf	3978,f,c	;volatile
  3110                           
  3111                           ;iopin.c: 66: break;
  3112  002EC2  0012               	return	
  3113  002EC4                     l6607:
  3114  002EC4  0429               	decf	digitalWrite@val,w,c
  3115  002EC6  102A               	iorwf	digitalWrite@val+1,w,c
  3116  002EC8  A4D8               	btfss	status,2,c
  3117  002ECA  D003               	goto	l6611
  3118  002ECC  502E               	movf	digitalWrite@p,w,c
  3119  002ECE  128B               	iorwf	3979,f,c	;volatile
  3120  002ED0  0012               	return	
  3121  002ED2                     l6611:
  3122                           
  3123                           ;iopin.c: 68: else LATC &= p;
  3124  002ED2  502E               	movf	digitalWrite@p,w,c
  3125  002ED4  168B               	andwf	3979,f,c	;volatile
  3126                           
  3127                           ;iopin.c: 69: break;
  3128  002ED6  0012               	return	
  3129  002ED8                     l6613:
  3130  002ED8  0429               	decf	digitalWrite@val,w,c
  3131  002EDA  102A               	iorwf	digitalWrite@val+1,w,c
  3132  002EDC  A4D8               	btfss	status,2,c
  3133  002EDE  D003               	goto	l6617
  3134  002EE0  502E               	movf	digitalWrite@p,w,c
  3135  002EE2  128C               	iorwf	3980,f,c	;volatile
  3136  002EE4  0012               	return	
  3137  002EE6                     l6617:
  3138                           
  3139                           ;iopin.c: 71: else LATD &= p;
  3140  002EE6  502E               	movf	digitalWrite@p,w,c
  3141  002EE8  168C               	andwf	3980,f,c	;volatile
  3142                           
  3143                           ;iopin.c: 72: }
  3144  002EEA  0012               	return	
  3145  002EEC                     l6619:
  3146  002EEC  C027  FFD9         	movff	digitalWrite@pin,fsr2l
  3147  002EF0  C028  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3148  002EF4  CFDE F02B          	movff	postinc2,??_digitalWrite
  3149  002EF8  CFDD F02C          	movff	postdec2,??_digitalWrite+1
  3150                           
  3151                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3152                           ; Switch size 1, requested type "space"
  3153                           ; Number of cases is 1, Range of values is 0 to 0
  3154                           ; switch strategies available:
  3155                           ; Name         Instructions Cycles
  3156                           ; simple_byte            4     3 (average)
  3157                           ;	Chosen strategy is simple_byte
  3158  002EFC  502C               	movf	??_digitalWrite+1,w,c
  3159  002EFE  0A00               	xorlw	0	; case 0
  3160  002F00  A4D8               	btfss	status,2,c
  3161  002F02  0012               	return	
  3162                           
  3163                           ; Switch size 1, requested type "space"
  3164                           ; Number of cases is 4, Range of values is 0 to 3
  3165                           ; switch strategies available:
  3166                           ; Name         Instructions Cycles
  3167                           ; simple_byte           13     7 (average)
  3168                           ;	Chosen strategy is simple_byte
  3169  002F04  502B               	movf	??_digitalWrite,w,c
  3170  002F06  0A00               	xorlw	0	; case 0
  3171  002F08  B4D8               	btfsc	status,2,c
  3172  002F0A  D7C8               	goto	l6595
  3173  002F0C  0A01               	xorlw	1	; case 1
  3174  002F0E  B4D8               	btfsc	status,2,c
  3175  002F10  D7CF               	goto	l6601
  3176  002F12  0A03               	xorlw	3	; case 2
  3177  002F14  B4D8               	btfsc	status,2,c
  3178  002F16  D7D6               	goto	l6607
  3179  002F18  0A01               	xorlw	1	; case 3
  3180  002F1A  A4D8               	btfss	status,2,c
  3181  002F1C  0012               	return	
  3182  002F1E  D7DC               	goto	l6613
  3183  002F20                     __end_of_digitalWrite:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           postinc0	equ	0xFEE
  3190                           wreg	equ	0xFE8
  3191                           postdec1	equ	0xFE5
  3192                           fsr1l	equ	0xFE1
  3193                           indf2	equ	0xFDF
  3194                           postinc2	equ	0xFDE
  3195                           postdec2	equ	0xFDD
  3196                           fsr2h	equ	0xFDA
  3197                           fsr2l	equ	0xFD9
  3198                           status	equ	0xFD8
  3199                           
  3200 ;; *************** function _digitalRead *****************
  3201 ;; Defined at:
  3202 ;;		line 43 in file "iopin.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;  pin             2   38[COMRAM] PTR int 
  3205 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;		None
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  2   38[COMRAM] int 
  3210 ;; Registers used:
  3211 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3217 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;Total ram usage:        4 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    3
  3224 ;; This function calls:
  3225 ;;		Nothing
  3226 ;; This function is called by:
  3227 ;;		_main
  3228 ;;		_sortBattery
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           	psect	text3
  3233  002ADA                     __ptext3:
  3234                           	opt stack 0
  3235  002ADA                     _digitalRead:
  3236                           	opt stack 26
  3237                           
  3238                           ;iopin.c: 44: switch(pin[0]){
  3239                           
  3240                           ;incstack = 0
  3241  002ADA  D058               	goto	l6645
  3242  002ADC                     l6627:
  3243  002ADC  EE20 F002          	lfsr	2,2
  3244  002AE0  5027               	movf	digitalRead@pin,w,c
  3245  002AE2  26D9               	addwf	fsr2l,f,c
  3246  002AE4  5028               	movf	digitalRead@pin+1,w,c
  3247  002AE6  22DA               	addwfc	fsr2h,f,c
  3248  002AE8  50DF               	movf	indf2,w,c
  3249  002AEA  6E29               	movwf	??_digitalRead& (0+255),c
  3250  002AEC  CF80 F02A          	movff	3968,??_digitalRead+1	;volatile
  3251  002AF0  2A29               	incf	??_digitalRead,f,c
  3252  002AF2  D002               	goto	u7064
  3253  002AF4                     u7065:
  3254  002AF4  90D8               	bcf	status,0,c
  3255  002AF6  322A               	rrcf	??_digitalRead+1,f,c
  3256  002AF8                     u7064:
  3257  002AF8  2E29               	decfsz	??_digitalRead,f,c
  3258  002AFA  D7FC               	goto	u7065
  3259  002AFC  0E01               	movlw	1
  3260  002AFE  162A               	andwf	??_digitalRead+1,f,c
  3261  002B00  502A               	movf	??_digitalRead+1,w,c
  3262  002B02  6E27               	movwf	?_digitalRead,c
  3263  002B04  6A28               	clrf	?_digitalRead+1,c
  3264  002B06  0012               	return	
  3265  002B08                     l6631:
  3266  002B08  EE20 F002          	lfsr	2,2
  3267  002B0C  5027               	movf	digitalRead@pin,w,c
  3268  002B0E  26D9               	addwf	fsr2l,f,c
  3269  002B10  5028               	movf	digitalRead@pin+1,w,c
  3270  002B12  22DA               	addwfc	fsr2h,f,c
  3271  002B14  50DF               	movf	indf2,w,c
  3272  002B16  6E29               	movwf	??_digitalRead& (0+255),c
  3273  002B18  CF81 F02A          	movff	3969,??_digitalRead+1	;volatile
  3274  002B1C  2A29               	incf	??_digitalRead,f,c
  3275  002B1E  D002               	goto	u7074
  3276  002B20                     u7075:
  3277  002B20  90D8               	bcf	status,0,c
  3278  002B22  322A               	rrcf	??_digitalRead+1,f,c
  3279  002B24                     u7074:
  3280  002B24  2E29               	decfsz	??_digitalRead,f,c
  3281  002B26  D7FC               	goto	u7075
  3282  002B28  0E01               	movlw	1
  3283  002B2A  162A               	andwf	??_digitalRead+1,f,c
  3284  002B2C  502A               	movf	??_digitalRead+1,w,c
  3285  002B2E  6E27               	movwf	?_digitalRead,c
  3286  002B30  6A28               	clrf	?_digitalRead+1,c
  3287  002B32  0012               	return	
  3288  002B34                     l6635:
  3289  002B34  EE20 F002          	lfsr	2,2
  3290  002B38  5027               	movf	digitalRead@pin,w,c
  3291  002B3A  26D9               	addwf	fsr2l,f,c
  3292  002B3C  5028               	movf	digitalRead@pin+1,w,c
  3293  002B3E  22DA               	addwfc	fsr2h,f,c
  3294  002B40  50DF               	movf	indf2,w,c
  3295  002B42  6E29               	movwf	??_digitalRead& (0+255),c
  3296  002B44  CF82 F02A          	movff	3970,??_digitalRead+1	;volatile
  3297  002B48  2A29               	incf	??_digitalRead,f,c
  3298  002B4A  D002               	goto	u7084
  3299  002B4C                     u7085:
  3300  002B4C  90D8               	bcf	status,0,c
  3301  002B4E  322A               	rrcf	??_digitalRead+1,f,c
  3302  002B50                     u7084:
  3303  002B50  2E29               	decfsz	??_digitalRead,f,c
  3304  002B52  D7FC               	goto	u7085
  3305  002B54  0E01               	movlw	1
  3306  002B56  162A               	andwf	??_digitalRead+1,f,c
  3307  002B58  502A               	movf	??_digitalRead+1,w,c
  3308  002B5A  6E27               	movwf	?_digitalRead,c
  3309  002B5C  6A28               	clrf	?_digitalRead+1,c
  3310  002B5E  0012               	return	
  3311  002B60                     l6639:
  3312  002B60  EE20 F002          	lfsr	2,2
  3313  002B64  5027               	movf	digitalRead@pin,w,c
  3314  002B66  26D9               	addwf	fsr2l,f,c
  3315  002B68  5028               	movf	digitalRead@pin+1,w,c
  3316  002B6A  22DA               	addwfc	fsr2h,f,c
  3317  002B6C  50DF               	movf	indf2,w,c
  3318  002B6E  6E29               	movwf	??_digitalRead& (0+255),c
  3319  002B70  CF83 F02A          	movff	3971,??_digitalRead+1	;volatile
  3320  002B74  2A29               	incf	??_digitalRead,f,c
  3321  002B76  D002               	goto	u7094
  3322  002B78                     u7095:
  3323  002B78  90D8               	bcf	status,0,c
  3324  002B7A  322A               	rrcf	??_digitalRead+1,f,c
  3325  002B7C                     u7094:
  3326  002B7C  2E29               	decfsz	??_digitalRead,f,c
  3327  002B7E  D7FC               	goto	u7095
  3328  002B80  0E01               	movlw	1
  3329  002B82  162A               	andwf	??_digitalRead+1,f,c
  3330  002B84  502A               	movf	??_digitalRead+1,w,c
  3331  002B86  6E27               	movwf	?_digitalRead,c
  3332  002B88  6A28               	clrf	?_digitalRead+1,c
  3333  002B8A  0012               	return	
  3334  002B8C                     l6645:
  3335  002B8C  C027  FFD9         	movff	digitalRead@pin,fsr2l
  3336  002B90  C028  FFDA         	movff	digitalRead@pin+1,fsr2h
  3337  002B94  CFDE F029          	movff	postinc2,??_digitalRead
  3338  002B98  CFDD F02A          	movff	postdec2,??_digitalRead+1
  3339                           
  3340                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3341                           ; Switch size 1, requested type "space"
  3342                           ; Number of cases is 1, Range of values is 0 to 0
  3343                           ; switch strategies available:
  3344                           ; Name         Instructions Cycles
  3345                           ; simple_byte            4     3 (average)
  3346                           ;	Chosen strategy is simple_byte
  3347  002B9C  502A               	movf	??_digitalRead+1,w,c
  3348  002B9E  0A00               	xorlw	0	; case 0
  3349  002BA0  A4D8               	btfss	status,2,c
  3350  002BA2  D00D               	goto	l320
  3351                           
  3352                           ; Switch size 1, requested type "space"
  3353                           ; Number of cases is 4, Range of values is 0 to 3
  3354                           ; switch strategies available:
  3355                           ; Name         Instructions Cycles
  3356                           ; simple_byte           13     7 (average)
  3357                           ;	Chosen strategy is simple_byte
  3358  002BA4  5029               	movf	??_digitalRead,w,c
  3359  002BA6  0A00               	xorlw	0	; case 0
  3360  002BA8  B4D8               	btfsc	status,2,c
  3361  002BAA  D798               	goto	l6627
  3362  002BAC  0A01               	xorlw	1	; case 1
  3363  002BAE  B4D8               	btfsc	status,2,c
  3364  002BB0  D7AB               	goto	l6631
  3365  002BB2  0A03               	xorlw	3	; case 2
  3366  002BB4  B4D8               	btfsc	status,2,c
  3367  002BB6  D7BE               	goto	l6635
  3368  002BB8  0A01               	xorlw	1	; case 3
  3369  002BBA  B4D8               	btfsc	status,2,c
  3370  002BBC  D7D1               	goto	l6639
  3371  002BBE                     l320:
  3372                           
  3373                           ;iopin.c: 50: return -1;
  3374  002BBE  6827               	setf	?_digitalRead,c
  3375  002BC0  6828               	setf	?_digitalRead+1,c
  3376  002BC2  0012               	return		;funcret
  3377  002BC4                     __end_of_digitalRead:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           postinc0	equ	0xFEE
  3384                           wreg	equ	0xFE8
  3385                           postdec1	equ	0xFE5
  3386                           fsr1l	equ	0xFE1
  3387                           indf2	equ	0xFDF
  3388                           postinc2	equ	0xFDE
  3389                           postdec2	equ	0xFDD
  3390                           fsr2h	equ	0xFDA
  3391                           fsr2l	equ	0xFD9
  3392                           status	equ	0xFD8
  3393                           
  3394 ;; *************** function _analogRead *****************
  3395 ;; Defined at:
  3396 ;;		line 90 in file "iopin.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;  channel         2   38[COMRAM] int 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;		None
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  4   38[COMRAM] long 
  3403 ;; Registers used:
  3404 ;;		wreg, status,2, status,0
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3410 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;Total ram usage:        6 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:    3
  3417 ;; This function calls:
  3418 ;;		Nothing
  3419 ;; This function is called by:
  3420 ;;		_sortBattery
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	text4
  3425  0037F8                     __ptext4:
  3426                           	opt stack 0
  3427  0037F8                     _analogRead:
  3428                           	opt stack 26
  3429                           
  3430                           ;iopin.c: 91: ADCON0 = channel<<2;
  3431                           
  3432                           ;incstack = 0
  3433  0037F8  4427               	rlncf	analogRead@channel,w,c
  3434  0037FA  46E8               	rlncf	wreg,f,c
  3435  0037FC  0BFC               	andlw	252
  3436  0037FE  6EC2               	movwf	4034,c	;volatile
  3437                           
  3438                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3439  003800  80C2               	bsf	4034,0,c	;volatile
  3440                           
  3441                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3442  003802  82C2               	bsf	4034,1,c	;volatile
  3443  003804                     l345:
  3444  003804  B2C2               	btfsc	4034,1,c	;volatile
  3445  003806  D7FE               	goto	l345
  3446                           
  3447                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3448  003808  50C3               	movf	4035,w,c	;volatile
  3449  00380A  CFC4 F02B          	movff	4036,??_analogRead	;volatile
  3450  00380E  6A2C               	clrf	(??_analogRead+1)& (0+255),c
  3451  003810  C02B  F02C         	movff	??_analogRead,??_analogRead+1
  3452  003814  6A2B               	clrf	??_analogRead,c
  3453  003816  262B               	addwf	??_analogRead,f,c
  3454  003818  0E00               	movlw	0
  3455  00381A  222C               	addwfc	??_analogRead+1,f,c
  3456  00381C  C02B  F027         	movff	??_analogRead,?_analogRead
  3457  003820  C02C  F028         	movff	??_analogRead+1,?_analogRead+1
  3458  003824  0E00               	movlw	0
  3459  003826  BE28               	btfsc	?_analogRead+1,7,c
  3460  003828  0EFF               	movlw	-1
  3461  00382A  6E29               	movwf	?_analogRead+2,c
  3462  00382C  6E2A               	movwf	?_analogRead+3,c
  3463  00382E  0012               	return	
  3464  003830                     __end_of_analogRead:
  3465                           	opt stack 0
  3466                           tblptru	equ	0xFF8
  3467                           tblptrh	equ	0xFF7
  3468                           tblptrl	equ	0xFF6
  3469                           tablat	equ	0xFF5
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           postdec1	equ	0xFE5
  3473                           fsr1l	equ	0xFE1
  3474                           indf2	equ	0xFDF
  3475                           postinc2	equ	0xFDE
  3476                           postdec2	equ	0xFDD
  3477                           fsr2h	equ	0xFDA
  3478                           fsr2l	equ	0xFD9
  3479                           status	equ	0xFD8
  3480                           
  3481 ;; *************** function _showInterface *****************
  3482 ;; Defined at:
  3483 ;;		line 16 in file "interface.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;		None
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  key             1  120[BANK0 ] unsigned char 
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  1    wreg      void 
  3490 ;; Registers used:
  3491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;Total ram usage:        1 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    9
  3504 ;; This function calls:
  3505 ;;		_dateTime
  3506 ;;		_mainMenu
  3507 ;;		_readKeypad
  3508 ;;		_runMenu
  3509 ;;		_runSelect
  3510 ;;		_runStats
  3511 ;;		_runTime
  3512 ;; This function is called by:
  3513 ;;		_main
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           	psect	text5
  3518  0027EA                     __ptext5:
  3519                           	opt stack 0
  3520  0027EA                     _showInterface:
  3521                           	opt stack 21
  3522  0027EA                     
  3523                           ;interface.c: 23: dateTime();
  3524  0027EA  ECDC  F01C         	call	_dateTime	;wreg free
  3525  0027EE                     l6753:
  3526  0027EE  ECB6  F01C         	call	_readKeypad	;wreg free
  3527  0027F2  0A41               	xorlw	65
  3528  0027F4  A4D8               	btfss	status,2,c
  3529  0027F6  D7FB               	goto	l6753
  3530  0027F8                     l6755:
  3531                           
  3532                           ;interface.c: 28: mainMenu();
  3533  0027F8  ECC9  F01C         	call	_mainMenu	;wreg free
  3534  0027FC                     l6757:
  3535  0027FC  ECB6  F01C         	call	_readKeypad	;wreg free
  3536  002800  0100               	movlb	0	; () banked
  3537  002802  6FF8               	movwf	showInterface@key& (0+255),b
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;interface.c: 32: while(key != 'B' && key != 'C' && key != '*');
  3541  002804  0E42               	movlw	66
  3542  002806  0100               	movlb	0	; () banked
  3543  002808  19F8               	xorwf	showInterface@key& (0+255),w,b
  3544  00280A  B4D8               	btfsc	status,2,c
  3545  00280C  D00A               	goto	l6765
  3546                           
  3547                           ; BSR set to: 0
  3548  00280E  0E43               	movlw	67
  3549  002810  0100               	movlb	0	; () banked
  3550  002812  19F8               	xorwf	showInterface@key& (0+255),w,b
  3551  002814  B4D8               	btfsc	status,2,c
  3552  002816  D005               	goto	l6765
  3553                           
  3554                           ; BSR set to: 0
  3555  002818  0E2A               	movlw	42
  3556  00281A  0100               	movlb	0	; () banked
  3557  00281C  19F8               	xorwf	showInterface@key& (0+255),w,b
  3558  00281E  A4D8               	btfss	status,2,c
  3559  002820  D7ED               	goto	l6757
  3560  002822                     l6765:
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;interface.c: 34: if(key == 'C'){
  3564  002822  0E43               	movlw	67
  3565  002824  0100               	movlb	0	; () banked
  3566  002826  19F8               	xorwf	showInterface@key& (0+255),w,b
  3567  002828  A4D8               	btfss	status,2,c
  3568  00282A  D056               	goto	l6809
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;interface.c: 36: runSelect();
  3572  00282C  ECA3  F01C         	call	_runSelect	;wreg free
  3573  002830                     l6769:
  3574  002830  ECB6  F01C         	call	_readKeypad	;wreg free
  3575  002834  0100               	movlb	0	; () banked
  3576  002836  6FF8               	movwf	showInterface@key& (0+255),b
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;interface.c: 42: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '
      +                          *');
  3580  002838  0E31               	movlw	49
  3581  00283A  0100               	movlb	0	; () banked
  3582  00283C  19F8               	xorwf	showInterface@key& (0+255),w,b
  3583  00283E  B4D8               	btfsc	status,2,c
  3584  002840  D014               	goto	l6781
  3585                           
  3586                           ; BSR set to: 0
  3587  002842  0E32               	movlw	50
  3588  002844  0100               	movlb	0	; () banked
  3589  002846  19F8               	xorwf	showInterface@key& (0+255),w,b
  3590  002848  B4D8               	btfsc	status,2,c
  3591  00284A  D00F               	goto	l6781
  3592                           
  3593                           ; BSR set to: 0
  3594  00284C  0E33               	movlw	51
  3595  00284E  0100               	movlb	0	; () banked
  3596  002850  19F8               	xorwf	showInterface@key& (0+255),w,b
  3597  002852  B4D8               	btfsc	status,2,c
  3598  002854  D00A               	goto	l6781
  3599                           
  3600                           ; BSR set to: 0
  3601  002856  0E34               	movlw	52
  3602  002858  0100               	movlb	0	; () banked
  3603  00285A  19F8               	xorwf	showInterface@key& (0+255),w,b
  3604  00285C  B4D8               	btfsc	status,2,c
  3605  00285E  D005               	goto	l6781
  3606                           
  3607                           ; BSR set to: 0
  3608  002860  0E2A               	movlw	42
  3609  002862  0100               	movlb	0	; () banked
  3610  002864  19F8               	xorwf	showInterface@key& (0+255),w,b
  3611  002866  A4D8               	btfss	status,2,c
  3612  002868  D7E3               	goto	l6769
  3613  00286A                     l6781:
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;interface.c: 44: if(key == '*')continue;
  3617  00286A  0E2A               	movlw	42
  3618  00286C  0100               	movlb	0	; () banked
  3619  00286E  19F8               	xorwf	showInterface@key& (0+255),w,b
  3620  002870  B4D8               	btfsc	status,2,c
  3621  002872  D7C2               	goto	l6755
  3622  002874                     l6785:
  3623                           
  3624                           ;interface.c: 50: runMenu(key);
  3625  002874  0100               	movlb	0	; () banked
  3626  002876  51F8               	movf	showInterface@key& (0+255),w,b
  3627  002878  EC34  F01C         	call	_runMenu
  3628  00287C                     l6787:
  3629  00287C  ECB6  F01C         	call	_readKeypad	;wreg free
  3630  002880  0100               	movlb	0	; () banked
  3631  002882  6FF8               	movwf	showInterface@key& (0+255),b
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;interface.c: 54: while(key != 'A' && key != 'B' && key != '*');
  3635  002884  0E41               	movlw	65
  3636  002886  0100               	movlb	0	; () banked
  3637  002888  19F8               	xorwf	showInterface@key& (0+255),w,b
  3638  00288A  B4D8               	btfsc	status,2,c
  3639  00288C  D00A               	goto	l6795
  3640                           
  3641                           ; BSR set to: 0
  3642  00288E  0E42               	movlw	66
  3643  002890  0100               	movlb	0	; () banked
  3644  002892  19F8               	xorwf	showInterface@key& (0+255),w,b
  3645  002894  B4D8               	btfsc	status,2,c
  3646  002896  D005               	goto	l6795
  3647                           
  3648                           ; BSR set to: 0
  3649  002898  0E2A               	movlw	42
  3650  00289A  0100               	movlb	0	; () banked
  3651  00289C  19F8               	xorwf	showInterface@key& (0+255),w,b
  3652  00289E  A4D8               	btfss	status,2,c
  3653  0028A0  D7ED               	goto	l6787
  3654  0028A2                     l6795:
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;interface.c: 56: if(key == 'A'){
  3658  0028A2  0E41               	movlw	65
  3659  0028A4  0100               	movlb	0	; () banked
  3660  0028A6  19F8               	xorwf	showInterface@key& (0+255),w,b
  3661  0028A8  A4D8               	btfss	status,2,c
  3662  0028AA  D003               	goto	l6799
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;interface.c: 58: runTime();
  3666  0028AC  EC7D  F01C         	call	_runTime	;wreg free
  3667                           
  3668                           ;interface.c: 60: }
  3669  0028B0  D00D               	goto	l6807
  3670  0028B2                     l6799:
  3671                           
  3672                           ;interface.c: 61: else if(key == 'B'){
  3673  0028B2  0E42               	movlw	66
  3674  0028B4  0100               	movlb	0	; () banked
  3675  0028B6  19F8               	xorwf	showInterface@key& (0+255),w,b
  3676  0028B8  A4D8               	btfss	status,2,c
  3677  0028BA  D003               	goto	l6803
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;interface.c: 63: runStats();
  3681  0028BC  EC90  F01C         	call	_runStats	;wreg free
  3682                           
  3683                           ;interface.c: 65: }
  3684  0028C0  D005               	goto	l6807
  3685  0028C2                     l6803:
  3686                           
  3687                           ;interface.c: 66: else if(key == '*')break;
  3688  0028C2  0E2A               	movlw	42
  3689  0028C4  0100               	movlb	0	; () banked
  3690  0028C6  19F8               	xorwf	showInterface@key& (0+255),w,b
  3691  0028C8  B4D8               	btfsc	status,2,c
  3692  0028CA  D796               	goto	l6755
  3693  0028CC                     l6807:
  3694  0028CC  ECB6  F01C         	call	_readKeypad	;wreg free
  3695  0028D0  0A2A               	xorlw	42
  3696  0028D2  B4D8               	btfsc	status,2,c
  3697  0028D4  D7CF               	goto	l6785
  3698  0028D6  D7FA               	goto	l6807
  3699  0028D8                     l6809:
  3700                           
  3701                           ;interface.c: 72: else if(key == 'B'){
  3702  0028D8  0E42               	movlw	66
  3703  0028DA  0100               	movlb	0	; () banked
  3704  0028DC  19F8               	xorwf	showInterface@key& (0+255),w,b
  3705  0028DE  B4D8               	btfsc	status,2,c
  3706  0028E0  0012               	return	
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;interface.c: 75: else if(key == '*')
  3710                           
  3711                           ; BSR set to: 0
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;interface.c: 74: }
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;interface.c: 73: return;
  3718  0028E2  0E2A               	movlw	42
  3719  0028E4  0100               	movlb	0	; () banked
  3720  0028E6  19F8               	xorwf	showInterface@key& (0+255),w,b
  3721  0028E8  B4D8               	btfsc	status,2,c
  3722  0028EA  D77F               	goto	l6751
  3723  0028EC  D785               	goto	l6755
  3724  0028EE                     __end_of_showInterface:
  3725                           	opt stack 0
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           postinc0	equ	0xFEE
  3731                           wreg	equ	0xFE8
  3732                           postdec1	equ	0xFE5
  3733                           fsr1l	equ	0xFE1
  3734                           indf2	equ	0xFDF
  3735                           postinc2	equ	0xFDE
  3736                           postdec2	equ	0xFDD
  3737                           fsr2h	equ	0xFDA
  3738                           fsr2l	equ	0xFD9
  3739                           status	equ	0xFD8
  3740                           
  3741 ;; *************** function _runTime *****************
  3742 ;; Defined at:
  3743 ;;		line 117 in file "interface.c"
  3744 ;; Parameters:    Size  Location     Type
  3745 ;;		None
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;		None
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      void 
  3750 ;; Registers used:
  3751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3761 ;;Total ram usage:        0 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    8
  3764 ;; This function calls:
  3765 ;;		_lcdClear
  3766 ;;		_printf
  3767 ;; This function is called by:
  3768 ;;		_showInterface
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text6
  3773  0038FA                     __ptext6:
  3774                           	opt stack 0
  3775  0038FA                     _runTime:
  3776                           	opt stack 21
  3777                           
  3778                           ;interface.c: 118: lcdClear();
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;incstack = 0
  3782  0038FA  EC3E  F01D         	call	_lcdClear	;wreg free
  3783                           
  3784                           ;interface.c: 119: printf("time: nnn sec   \n");
  3785  0038FE  0E14               	movlw	low STR_15
  3786  003900  0100               	movlb	0	; () banked
  3787  003902  6FC9               	movwf	printf@f& (0+255),b
  3788  003904  0EFF               	movlw	high STR_15
  3789  003906  0100               	movlb	0	; () banked
  3790  003908  6FCA               	movwf	(printf@f+1)& (0+255),b
  3791  00390A  EC09  F000         	call	_printf	;wreg free
  3792                           
  3793                           ;interface.c: 120: printf("              *>");
  3794  00390E  0E49               	movlw	low STR_16
  3795  003910  0100               	movlb	0	; () banked
  3796  003912  6FC9               	movwf	printf@f& (0+255),b
  3797  003914  0EFF               	movlw	high STR_16
  3798  003916  0100               	movlb	0	; () banked
  3799  003918  6FCA               	movwf	(printf@f+1)& (0+255),b
  3800  00391A  EC09  F000         	call	_printf	;wreg free
  3801  00391E  0012               	return		;funcret
  3802  003920                     __end_of_runTime:
  3803                           	opt stack 0
  3804                           tblptru	equ	0xFF8
  3805                           tblptrh	equ	0xFF7
  3806                           tblptrl	equ	0xFF6
  3807                           tablat	equ	0xFF5
  3808                           postinc0	equ	0xFEE
  3809                           wreg	equ	0xFE8
  3810                           postdec1	equ	0xFE5
  3811                           fsr1l	equ	0xFE1
  3812                           indf2	equ	0xFDF
  3813                           postinc2	equ	0xFDE
  3814                           postdec2	equ	0xFDD
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8
  3818                           
  3819 ;; *************** function _runStats *****************
  3820 ;; Defined at:
  3821 ;;		line 123 in file "interface.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;		None
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;		None
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  1    wreg      void 
  3828 ;; Registers used:
  3829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;Total ram usage:        0 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    8
  3842 ;; This function calls:
  3843 ;;		_lcdClear
  3844 ;;		_printf
  3845 ;; This function is called by:
  3846 ;;		_showInterface
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text7
  3851  003920                     __ptext7:
  3852                           	opt stack 0
  3853  003920                     _runStats:
  3854                           	opt stack 21
  3855                           
  3856                           ;interface.c: 124: lcdClear();
  3857                           
  3858                           ;incstack = 0
  3859  003920  EC3E  F01D         	call	_lcdClear	;wreg free
  3860                           
  3861                           ;interface.c: 125: printf("[AA,9V,C,other] \n");
  3862  003924  0E26               	movlw	low STR_17
  3863  003926  0100               	movlb	0	; () banked
  3864  003928  6FC9               	movwf	printf@f& (0+255),b
  3865  00392A  0EFF               	movlw	high STR_17
  3866  00392C  0100               	movlb	0	; () banked
  3867  00392E  6FCA               	movwf	(printf@f+1)& (0+255),b
  3868  003930  EC09  F000         	call	_printf	;wreg free
  3869                           
  3870                           ;interface.c: 126: printf("[nn,n,n,nn]   *>");
  3871  003934  0E8D               	movlw	low STR_18
  3872  003936  0100               	movlb	0	; () banked
  3873  003938  6FC9               	movwf	printf@f& (0+255),b
  3874  00393A  0EFF               	movlw	high STR_18
  3875  00393C  0100               	movlb	0	; () banked
  3876  00393E  6FCA               	movwf	(printf@f+1)& (0+255),b
  3877  003940  EC09  F000         	call	_printf	;wreg free
  3878  003944  0012               	return		;funcret
  3879  003946                     __end_of_runStats:
  3880                           	opt stack 0
  3881                           tblptru	equ	0xFF8
  3882                           tblptrh	equ	0xFF7
  3883                           tblptrl	equ	0xFF6
  3884                           tablat	equ	0xFF5
  3885                           postinc0	equ	0xFEE
  3886                           wreg	equ	0xFE8
  3887                           postdec1	equ	0xFE5
  3888                           fsr1l	equ	0xFE1
  3889                           indf2	equ	0xFDF
  3890                           postinc2	equ	0xFDE
  3891                           postdec2	equ	0xFDD
  3892                           fsr2h	equ	0xFDA
  3893                           fsr2l	equ	0xFD9
  3894                           status	equ	0xFD8
  3895                           
  3896 ;; *************** function _runSelect *****************
  3897 ;; Defined at:
  3898 ;;		line 105 in file "interface.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      void 
  3905 ;; Registers used:
  3906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;Total ram usage:        0 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    8
  3919 ;; This function calls:
  3920 ;;		_lcdClear
  3921 ;;		_printf
  3922 ;; This function is called by:
  3923 ;;		_showInterface
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927                           	psect	text8
  3928  003946                     __ptext8:
  3929                           	opt stack 0
  3930  003946                     _runSelect:
  3931                           	opt stack 21
  3932                           
  3933                           ;interface.c: 106: lcdClear();
  3934                           
  3935                           ;incstack = 0
  3936  003946  EC3E  F01D         	call	_lcdClear	;wreg free
  3937                           
  3938                           ;interface.c: 107: printf("select run:     \n");
  3939  00394A  0E02               	movlw	low STR_11
  3940  00394C  0100               	movlb	0	; () banked
  3941  00394E  6FC9               	movwf	printf@f& (0+255),b
  3942  003950  0EFF               	movlw	high STR_11
  3943  003952  0100               	movlb	0	; () banked
  3944  003954  6FCA               	movwf	(printf@f+1)& (0+255),b
  3945  003956  EC09  F000         	call	_printf	;wreg free
  3946                           
  3947                           ;interface.c: 108: printf("[1,2,3,4]     *>");
  3948  00395A  0E5A               	movlw	low STR_12
  3949  00395C  0100               	movlb	0	; () banked
  3950  00395E  6FC9               	movwf	printf@f& (0+255),b
  3951  003960  0EFF               	movlw	high STR_12
  3952  003962  0100               	movlb	0	; () banked
  3953  003964  6FCA               	movwf	(printf@f+1)& (0+255),b
  3954  003966  EC09  F000         	call	_printf	;wreg free
  3955  00396A  0012               	return		;funcret
  3956  00396C                     __end_of_runSelect:
  3957                           	opt stack 0
  3958                           tblptru	equ	0xFF8
  3959                           tblptrh	equ	0xFF7
  3960                           tblptrl	equ	0xFF6
  3961                           tablat	equ	0xFF5
  3962                           postinc0	equ	0xFEE
  3963                           wreg	equ	0xFE8
  3964                           postdec1	equ	0xFE5
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _runMenu *****************
  3974 ;; Defined at:
  3975 ;;		line 111 in file "interface.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  key             1    wreg     unsigned char 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  key             1  119[BANK0 ] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;Total ram usage:        1 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    8
  3996 ;; This function calls:
  3997 ;;		_lcdClear
  3998 ;;		_printf
  3999 ;; This function is called by:
  4000 ;;		_showInterface
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text9
  4005  003868                     __ptext9:
  4006                           	opt stack 0
  4007  003868                     _runMenu:
  4008                           	opt stack 21
  4009                           
  4010                           ;incstack = 0
  4011                           ;runMenu@key stored from wreg
  4012  003868  0100               	movlb	0	; () banked
  4013  00386A  6FF7               	movwf	runMenu@key& (0+255),b
  4014                           
  4015                           ;interface.c: 112: lcdClear();
  4016  00386C  EC3E  F01D         	call	_lcdClear	;wreg free
  4017                           
  4018                           ;interface.c: 113: printf("%c) time  <A     \n",key);
  4019  003870  0ECB               	movlw	low STR_13
  4020  003872  0100               	movlb	0	; () banked
  4021  003874  6FC9               	movwf	printf@f& (0+255),b
  4022  003876  0EFE               	movlw	high STR_13
  4023  003878  0100               	movlb	0	; () banked
  4024  00387A  6FCA               	movwf	(printf@f+1)& (0+255),b
  4025  00387C  C0F7  F0CB         	movff	runMenu@key,?_printf+2
  4026  003880  0100               	movlb	0	; () banked
  4027  003882  6BCC               	clrf	(?_printf+3)& (0+255),b
  4028  003884  EC09  F000         	call	_printf	;wreg free
  4029                           
  4030                           ;interface.c: 114: printf( "   stats <B   *>");
  4031  003888  0E7C               	movlw	low STR_14
  4032  00388A  0100               	movlb	0	; () banked
  4033  00388C  6FC9               	movwf	printf@f& (0+255),b
  4034  00388E  0EFF               	movlw	high STR_14
  4035  003890  0100               	movlb	0	; () banked
  4036  003892  6FCA               	movwf	(printf@f+1)& (0+255),b
  4037  003894  EC09  F000         	call	_printf	;wreg free
  4038  003898  0012               	return		;funcret
  4039  00389A                     __end_of_runMenu:
  4040                           	opt stack 0
  4041                           tblptru	equ	0xFF8
  4042                           tblptrh	equ	0xFF7
  4043                           tblptrl	equ	0xFF6
  4044                           tablat	equ	0xFF5
  4045                           postinc0	equ	0xFEE
  4046                           wreg	equ	0xFE8
  4047                           postdec1	equ	0xFE5
  4048                           fsr1l	equ	0xFE1
  4049                           indf2	equ	0xFDF
  4050                           postinc2	equ	0xFDE
  4051                           postdec2	equ	0xFDD
  4052                           fsr2h	equ	0xFDA
  4053                           fsr2l	equ	0xFD9
  4054                           status	equ	0xFD8
  4055                           
  4056 ;; *************** function _readKeypad *****************
  4057 ;; Defined at:
  4058 ;;		line 36 in file "keypad.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;		None
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;  key             1   38[COMRAM] unsigned char 
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  1    wreg      unsigned char 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;Total ram usage:        1 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    3
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_main
  4083 ;;		_sortBattery
  4084 ;;		_showInterface
  4085 ;;		_pause
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text10
  4090  00396C                     __ptext10:
  4091                           	opt stack 0
  4092  00396C                     _readKeypad:
  4093                           	opt stack 26
  4094  00396C                     l247:
  4095  00396C  A281               	btfss	3969,1,c	;volatile
  4096  00396E  D7FE               	goto	l247
  4097                           
  4098                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4099  003970  3881               	swapf	3969,w,c	;volatile
  4100  003972  0B0F               	andlw	15
  4101  003974  0B0F               	andlw	15
  4102  003976  6E27               	movwf	readKeypad@key,c
  4103  003978                     l250:
  4104  003978  B281               	btfsc	3969,1,c	;volatile
  4105  00397A  D7FE               	goto	l250
  4106                           
  4107                           ;keypad.c: 40: return keys[key];
  4108  00397C  5027               	movf	readKeypad@key,w,c
  4109  00397E  0D01               	mullw	1
  4110  003980  0EB3               	movlw	low _keys
  4111  003982  24F3               	addwf	prodl,w,c
  4112  003984  6EF6               	movwf	tblptrl,c
  4113  003986  0EFE               	movlw	high _keys
  4114  003988  20F4               	addwfc	prodh,w,c
  4115  00398A  6EF7               	movwf	tblptrh,c
  4116  00398C                     	if	0	;There are less than 3 active tblptr bytes
  4117  00398C                     	endif
  4118  00398C  0008               	tblrd		*
  4119  00398E  50F5               	movf	tablat,w,c
  4120  003990  0012               	return	
  4121  003992                     __end_of_readKeypad:
  4122                           	opt stack 0
  4123                           tblptru	equ	0xFF8
  4124                           tblptrh	equ	0xFF7
  4125                           tblptrl	equ	0xFF6
  4126                           tablat	equ	0xFF5
  4127                           prodh	equ	0xFF4
  4128                           prodl	equ	0xFF3
  4129                           postinc0	equ	0xFEE
  4130                           wreg	equ	0xFE8
  4131                           postdec1	equ	0xFE5
  4132                           fsr1l	equ	0xFE1
  4133                           indf2	equ	0xFDF
  4134                           postinc2	equ	0xFDE
  4135                           postdec2	equ	0xFDD
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function _mainMenu *****************
  4141 ;; Defined at:
  4142 ;;		line 99 in file "interface.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;Total ram usage:        0 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    8
  4163 ;; This function calls:
  4164 ;;		_lcdClear
  4165 ;;		_printf
  4166 ;; This function is called by:
  4167 ;;		_showInterface
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text11
  4172  003992                     __ptext11:
  4173                           	opt stack 0
  4174  003992                     _mainMenu:
  4175                           	opt stack 21
  4176                           
  4177                           ;interface.c: 100: lcdClear();
  4178                           
  4179                           ;incstack = 0
  4180  003992  EC3E  F01D         	call	_lcdClear	;wreg free
  4181                           
  4182                           ;interface.c: 101: printf("start   <B      \n");
  4183  003996  0EDE               	movlw	low STR_9
  4184  003998  0100               	movlb	0	; () banked
  4185  00399A  6FC9               	movwf	printf@f& (0+255),b
  4186  00399C  0EFE               	movlw	high STR_9
  4187  00399E  0100               	movlb	0	; () banked
  4188  0039A0  6FCA               	movwf	(printf@f+1)& (0+255),b
  4189  0039A2  EC09  F000         	call	_printf	;wreg free
  4190                           
  4191                           ;interface.c: 102: printf("history <C    *>");
  4192  0039A6  0E6B               	movlw	low STR_10
  4193  0039A8  0100               	movlb	0	; () banked
  4194  0039AA  6FC9               	movwf	printf@f& (0+255),b
  4195  0039AC  0EFF               	movlw	high STR_10
  4196  0039AE  0100               	movlb	0	; () banked
  4197  0039B0  6FCA               	movwf	(printf@f+1)& (0+255),b
  4198  0039B2  EC09  F000         	call	_printf	;wreg free
  4199  0039B6  0012               	return		;funcret
  4200  0039B8                     __end_of_mainMenu:
  4201                           	opt stack 0
  4202                           tblptru	equ	0xFF8
  4203                           tblptrh	equ	0xFF7
  4204                           tblptrl	equ	0xFF6
  4205                           tablat	equ	0xFF5
  4206                           prodh	equ	0xFF4
  4207                           prodl	equ	0xFF3
  4208                           postinc0	equ	0xFEE
  4209                           wreg	equ	0xFE8
  4210                           postdec1	equ	0xFE5
  4211                           fsr1l	equ	0xFE1
  4212                           indf2	equ	0xFDF
  4213                           postinc2	equ	0xFDE
  4214                           postdec2	equ	0xFDD
  4215                           fsr2h	equ	0xFDA
  4216                           fsr2l	equ	0xFD9
  4217                           status	equ	0xFD8
  4218                           
  4219 ;; *************** function _dateTime *****************
  4220 ;; Defined at:
  4221 ;;		line 84 in file "interface.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;		None
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;		None
  4226 ;; Return value:  Size  Location     Type
  4227 ;;                  1    wreg      void 
  4228 ;; Registers used:
  4229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;Total ram usage:        0 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; Hardware stack levels required when called:    8
  4242 ;; This function calls:
  4243 ;;		_lcdClear
  4244 ;;		_printf
  4245 ;; This function is called by:
  4246 ;;		_showInterface
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           	psect	text12
  4251  0039B8                     __ptext12:
  4252                           	opt stack 0
  4253  0039B8                     _dateTime:
  4254                           	opt stack 21
  4255                           
  4256                           ;interface.c: 94: lcdClear();
  4257                           
  4258                           ;incstack = 0
  4259  0039B8  EC3E  F01D         	call	_lcdClear	;wreg free
  4260                           
  4261                           ;interface.c: 95: printf("  hh:mm:ss      \n");
  4262  0039BC  0EF0               	movlw	low STR_7
  4263  0039BE  0100               	movlb	0	; () banked
  4264  0039C0  6FC9               	movwf	printf@f& (0+255),b
  4265  0039C2  0EFE               	movlw	high STR_7
  4266  0039C4  0100               	movlb	0	; () banked
  4267  0039C6  6FCA               	movwf	(printf@f+1)& (0+255),b
  4268  0039C8  EC09  F000         	call	_printf	;wreg free
  4269                           
  4270                           ;interface.c: 96: printf("  mm:dd:yy    A>");
  4271  0039CC  0E9E               	movlw	low STR_8
  4272  0039CE  0100               	movlb	0	; () banked
  4273  0039D0  6FC9               	movwf	printf@f& (0+255),b
  4274  0039D2  0EFF               	movlw	high STR_8
  4275  0039D4  0100               	movlb	0	; () banked
  4276  0039D6  6FCA               	movwf	(printf@f+1)& (0+255),b
  4277  0039D8  EC09  F000         	call	_printf	;wreg free
  4278  0039DC  0012               	return		;funcret
  4279  0039DE                     __end_of_dateTime:
  4280                           	opt stack 0
  4281                           tblptru	equ	0xFF8
  4282                           tblptrh	equ	0xFF7
  4283                           tblptrl	equ	0xFF6
  4284                           tablat	equ	0xFF5
  4285                           prodh	equ	0xFF4
  4286                           prodl	equ	0xFF3
  4287                           postinc0	equ	0xFEE
  4288                           wreg	equ	0xFE8
  4289                           postdec1	equ	0xFE5
  4290                           fsr1l	equ	0xFE1
  4291                           indf2	equ	0xFDF
  4292                           postinc2	equ	0xFDE
  4293                           postdec2	equ	0xFDD
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function _printf *****************
  4299 ;; Defined at:
  4300 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  f               2   73[BANK0 ] PTR const unsigned char 
  4303 ;;		 -> STR_18(17), STR_17(18), STR_16(17), STR_15(18), 
  4304 ;;		 -> STR_14(17), STR_13(19), STR_12(17), STR_11(18), 
  4305 ;;		 -> STR_10(17), STR_9(18), STR_8(17), STR_7(18), 
  4306 ;;		 -> STR_6(8), STR_5(15), STR_4(14), STR_3(17), 
  4307 ;;		 -> STR_2(17), STR_1(8), 
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;  idx             1   92[BANK0 ] unsigned char 
  4310 ;;  val             4  108[BANK0 ] unsigned long 
  4311 ;;  tmpval          4   99[BANK0 ] struct .
  4312 ;;  fval            3  105[BANK0 ] struct .
  4313 ;;  prec            2  116[BANK0 ] int 
  4314 ;;  flag            2  114[BANK0 ] unsigned short 
  4315 ;;  width           2  112[BANK0 ] int 
  4316 ;;  exp             2  103[BANK0 ] int 
  4317 ;;  ap              2   97[BANK0 ] PTR void [1]
  4318 ;;		 -> ?_printf(2), 
  4319 ;;  len             2   95[BANK0 ] unsigned int 
  4320 ;;  cp              2   93[BANK0 ] PTR const unsigned char 
  4321 ;;		 -> printf@c(1), 
  4322 ;;  c               1  118[BANK0 ] char 
  4323 ;;  d               1    0        unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  2   73[BANK0 ] int 
  4326 ;; Registers used:
  4327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4333 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;Total ram usage:       46 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    7
  4340 ;; This function calls:
  4341 ;;		___awdiv
  4342 ;;		___ftadd
  4343 ;;		___ftge
  4344 ;;		___ftmul
  4345 ;;		___ftneg
  4346 ;;		___ftsub
  4347 ;;		___fttol
  4348 ;;		___lldiv
  4349 ;;		___llmod
  4350 ;;		___lltoft
  4351 ;;		___wmul
  4352 ;;		__div_to_l_
  4353 ;;		__tdiv_to_l_
  4354 ;;		_fround
  4355 ;;		_isdigit
  4356 ;;		_putch
  4357 ;;		_scale
  4358 ;; This function is called by:
  4359 ;;		_main
  4360 ;;		_sortBattery
  4361 ;;		_dateTime
  4362 ;;		_mainMenu
  4363 ;;		_runSelect
  4364 ;;		_runMenu
  4365 ;;		_runTime
  4366 ;;		_runStats
  4367 ;;		_pause
  4368 ;;		_testFrequency
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           	psect	text13
  4373  000012                     __ptext13:
  4374                           	opt stack 0
  4375  000012                     _printf:
  4376                           	opt stack 22
  4377                           
  4378                           ;doprnt.c: 466: va_list ap;
  4379                           ;doprnt.c: 499: signed char c;
  4380                           ;doprnt.c: 501: int width;
  4381                           ;doprnt.c: 504: int prec;
  4382                           ;doprnt.c: 508: unsigned short flag;
  4383                           ;doprnt.c: 515: char d;
  4384                           ;doprnt.c: 516: double fval;
  4385                           ;doprnt.c: 517: int exp;
  4386                           ;doprnt.c: 523: union {
  4387                           ;doprnt.c: 524: unsigned long vd;
  4388                           ;doprnt.c: 525: double integ;
  4389                           ;doprnt.c: 526: } tmpval;
  4390                           ;doprnt.c: 528: unsigned long val;
  4391                           ;doprnt.c: 529: unsigned len;
  4392                           ;doprnt.c: 530: const char * cp;
  4393                           ;doprnt.c: 533: *ap = __va_start();
  4394                           
  4395                           ;incstack = 0
  4396  000012  0ECB               	movlw	low (?_printf+2)
  4397  000014  0100               	movlb	0	; () banked
  4398  000016  6FE1               	movwf	printf@ap& (0+255),b
  4399  000018  0E00               	movlw	high (?_printf+2)
  4400  00001A  0100               	movlb	0	; () banked
  4401  00001C  6FE2               	movwf	(printf@ap+1)& (0+255),b
  4402                           
  4403                           ;doprnt.c: 536: while(c = *f++) {
  4404  00001E  EF0C  F007         	goto	l6537
  4405  000022                     l6171:
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;doprnt.c: 538: if(c != '%')
  4409  000022  0E25               	movlw	37
  4410  000024  0100               	movlb	0	; () banked
  4411  000026  19F6               	xorwf	printf@c& (0+255),w,b
  4412  000028  B4D8               	btfsc	status,2,c
  4413  00002A  D006               	goto	l6175
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;doprnt.c: 540: {
  4417                           ;doprnt.c: 541: (putch(c) );
  4418  00002C  0100               	movlb	0	; () banked
  4419  00002E  51F6               	movf	printf@c& (0+255),w,b
  4420  000030  EC01  F01D         	call	_putch
  4421                           
  4422                           ;doprnt.c: 542: continue;
  4423  000034  EF0C  F007         	goto	l6537
  4424  000038                     l6175:
  4425                           
  4426                           ;doprnt.c: 543: }
  4427                           ;doprnt.c: 546: width = 0;
  4428  000038  0E00               	movlw	0
  4429  00003A  0100               	movlb	0	; () banked
  4430  00003C  6FF1               	movwf	(printf@width+1)& (0+255),b
  4431  00003E  0E00               	movlw	0
  4432  000040  6FF0               	movwf	printf@width& (0+255),b
  4433                           
  4434                           ;doprnt.c: 548: flag = 0;
  4435  000042  0E00               	movlw	0
  4436  000044  0100               	movlb	0	; () banked
  4437  000046  6FF3               	movwf	(printf@flag+1)& (0+255),b
  4438  000048  0E00               	movlw	0
  4439  00004A  6FF2               	movwf	printf@flag& (0+255),b
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;doprnt.c: 551: switch(*f) {
  4443                           
  4444                           ;doprnt.c: 550: for(;;) {
  4445  00004C  D005               	goto	l6181
  4446  00004E                     l6177:
  4447                           
  4448                           ;doprnt.c: 580: flag |= 0x04;
  4449  00004E  0100               	movlb	0	; () banked
  4450  000050  85F2               	bsf	printf@flag& (0+255),2,b
  4451                           
  4452                           ;doprnt.c: 581: f++;
  4453  000052  0100               	movlb	0	; () banked
  4454  000054  4BC9               	infsnz	printf@f& (0+255),f,b
  4455  000056  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4456  000058                     l6181:
  4457  000058  C0C9  FFF6         	movff	printf@f,tblptrl
  4458  00005C  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4459  000060                     	if	0	;tblptru may be non-zero
  4460  000060                     	endif
  4461  000060                     	if	0	;tblptru may be non-zero
  4462  000060                     	endif
  4463  000060  0008               	tblrd		*
  4464  000062  50F5               	movf	tablat,w,c
  4465                           
  4466                           ; Switch size 1, requested type "space"
  4467                           ; Number of cases is 1, Range of values is 48 to 48
  4468                           ; switch strategies available:
  4469                           ; Name         Instructions Cycles
  4470                           ; simple_byte            4     3 (average)
  4471                           ;	Chosen strategy is simple_byte
  4472  000064  0A30               	xorlw	48	; case 48
  4473  000066  B4D8               	btfsc	status,2,c
  4474  000068  D7F2               	goto	l6177
  4475                           
  4476                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4477                           
  4478                           ;doprnt.c: 586: }
  4479                           
  4480                           ;doprnt.c: 585: break;
  4481  00006A  C0C9  FFF6         	movff	printf@f,tblptrl
  4482  00006E  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4483  000072                     	if	0	;tblptru may be non-zero
  4484  000072                     	endif
  4485  000072                     	if	0	;tblptru may be non-zero
  4486  000072                     	endif
  4487  000072  0008               	tblrd		*
  4488  000074  50F5               	movf	tablat,w,c
  4489  000076  EC23  F01D         	call	_isdigit
  4490  00007A  A0D8               	btfss	status,0,c
  4491  00007C  D040               	goto	l6195
  4492                           
  4493                           ;doprnt.c: 598: width = 0;
  4494  00007E  0E00               	movlw	0
  4495  000080  0100               	movlb	0	; () banked
  4496  000082  6FF1               	movwf	(printf@width+1)& (0+255),b
  4497  000084  0E00               	movlw	0
  4498  000086  6FF0               	movwf	printf@width& (0+255),b
  4499  000088                     l6187:
  4500                           
  4501                           ;doprnt.c: 600: width *= 10;
  4502  000088  C0F0  F084         	movff	printf@width,___wmul@multiplier
  4503  00008C  C0F1  F085         	movff	printf@width+1,___wmul@multiplier+1
  4504  000090  0E00               	movlw	0
  4505  000092  0100               	movlb	0	; () banked
  4506  000094  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4507  000096  0E0A               	movlw	10
  4508  000098  6F86               	movwf	___wmul@multiplicand& (0+255),b
  4509  00009A  EC4D  F01C         	call	___wmul	;wreg free
  4510  00009E  C084  F0F0         	movff	?___wmul,printf@width
  4511  0000A2  C085  F0F1         	movff	?___wmul+1,printf@width+1
  4512                           
  4513                           ;doprnt.c: 601: width += *f++ - '0';
  4514  0000A6  0ED0               	movlw	208
  4515  0000A8  0100               	movlb	0	; () banked
  4516  0000AA  6FD3               	movwf	??_printf& (0+255),b
  4517  0000AC  0EFF               	movlw	255
  4518  0000AE  0100               	movlb	0	; () banked
  4519  0000B0  6FD4               	movwf	(??_printf+1)& (0+255),b
  4520  0000B2  C0C9  FFF6         	movff	printf@f,tblptrl
  4521  0000B6  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4522  0000BA                     	if	0	;tblptru may be non-zero
  4523  0000BA                     	endif
  4524  0000BA                     	if	0	;tblptru may be non-zero
  4525  0000BA                     	endif
  4526  0000BA  0008               	tblrd		*
  4527  0000BC  50F5               	movf	tablat,w,c
  4528  0000BE  0100               	movlb	0	; () banked
  4529  0000C0  6FD5               	movwf	(??_printf+2)& (0+255),b
  4530  0000C2  6BD6               	clrf	(??_printf+3)& (0+255),b
  4531  0000C4  0100               	movlb	0	; () banked
  4532  0000C6  51D3               	movf	??_printf& (0+255),w,b
  4533  0000C8  0100               	movlb	0	; () banked
  4534  0000CA  27D5               	addwf	(??_printf+2)& (0+255),f,b
  4535  0000CC  0100               	movlb	0	; () banked
  4536  0000CE  51D4               	movf	(??_printf+1)& (0+255),w,b
  4537  0000D0  0100               	movlb	0	; () banked
  4538  0000D2  23D6               	addwfc	(??_printf+3)& (0+255),f,b
  4539  0000D4  0100               	movlb	0	; () banked
  4540  0000D6  51D5               	movf	(??_printf+2)& (0+255),w,b
  4541  0000D8  0100               	movlb	0	; () banked
  4542  0000DA  27F0               	addwf	printf@width& (0+255),f,b
  4543  0000DC  0100               	movlb	0	; () banked
  4544  0000DE  51D6               	movf	(??_printf+3)& (0+255),w,b
  4545  0000E0  0100               	movlb	0	; () banked
  4546  0000E2  23F1               	addwfc	(printf@width+1)& (0+255),f,b
  4547                           
  4548                           ; BSR set to: 0
  4549  0000E4  0100               	movlb	0	; () banked
  4550  0000E6  4BC9               	infsnz	printf@f& (0+255),f,b
  4551  0000E8  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4555  0000EA  C0C9  FFF6         	movff	printf@f,tblptrl
  4556  0000EE  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4557  0000F2                     	if	0	;tblptru may be non-zero
  4558  0000F2                     	endif
  4559  0000F2                     	if	0	;tblptru may be non-zero
  4560  0000F2                     	endif
  4561  0000F2  0008               	tblrd		*
  4562  0000F4  50F5               	movf	tablat,w,c
  4563  0000F6  EC23  F01D         	call	_isdigit
  4564  0000FA  B0D8               	btfsc	status,0,c
  4565  0000FC  D7C5               	goto	l6187
  4566  0000FE                     l6195:
  4567                           
  4568                           ;doprnt.c: 608: }
  4569                           ;doprnt.c: 611: if(*f == '.') {
  4570  0000FE  C0C9  FFF6         	movff	printf@f,tblptrl
  4571  000102  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4572  000106                     	if	0	;tblptru may be non-zero
  4573  000106                     	endif
  4574  000106                     	if	0	;tblptru may be non-zero
  4575  000106                     	endif
  4576  000106  0008               	tblrd		*
  4577  000108  50F5               	movf	tablat,w,c
  4578  00010A  0A2E               	xorlw	46
  4579  00010C  A4D8               	btfss	status,2,c
  4580  00010E  D039               	goto	l6207
  4581                           
  4582                           ;doprnt.c: 612: flag |= 0x4000;
  4583  000110  0100               	movlb	0	; () banked
  4584  000112  8DF3               	bsf	(printf@flag+1)& (0+255),6,b
  4585                           
  4586                           ;doprnt.c: 613: f++;
  4587  000114  0100               	movlb	0	; () banked
  4588  000116  4BC9               	infsnz	printf@f& (0+255),f,b
  4589  000118  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;doprnt.c: 620: {
  4593                           ;doprnt.c: 621: prec = 0;
  4594  00011A  0E00               	movlw	0
  4595  00011C  0100               	movlb	0	; () banked
  4596  00011E  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4597  000120  0E00               	movlw	0
  4598  000122  6FF4               	movwf	printf@prec& (0+255),b
  4599                           
  4600                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4601  000124  D023               	goto	l6205
  4602  000126                     l6201:
  4603                           
  4604                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4605  000126  C0F4  F084         	movff	printf@prec,___wmul@multiplier
  4606  00012A  C0F5  F085         	movff	printf@prec+1,___wmul@multiplier+1
  4607  00012E  0E00               	movlw	0
  4608  000130  0100               	movlb	0	; () banked
  4609  000132  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4610  000134  0E0A               	movlw	10
  4611  000136  6F86               	movwf	___wmul@multiplicand& (0+255),b
  4612  000138  EC4D  F01C         	call	___wmul	;wreg free
  4613  00013C  C0C9  FFF6         	movff	printf@f,tblptrl
  4614  000140  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4615  000144                     	if	0	;tblptru may be non-zero
  4616  000144                     	endif
  4617  000144                     	if	0	;tblptru may be non-zero
  4618  000144                     	endif
  4619  000144  0008               	tblrd		*
  4620  000146  50F5               	movf	tablat,w,c
  4621  000148  0100               	movlb	0	; () banked
  4622  00014A  2784               	addwf	?___wmul& (0+255),f,b
  4623  00014C  0E00               	movlw	0
  4624  00014E  0100               	movlb	0	; () banked
  4625  000150  2385               	addwfc	(?___wmul+1)& (0+255),f,b
  4626  000152  0ED0               	movlw	208
  4627  000154  0100               	movlb	0	; () banked
  4628  000156  2584               	addwf	?___wmul& (0+255),w,b
  4629  000158  0100               	movlb	0	; () banked
  4630  00015A  6FF4               	movwf	printf@prec& (0+255),b
  4631  00015C  0EFF               	movlw	255
  4632  00015E  0100               	movlb	0	; () banked
  4633  000160  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  4634  000162  0100               	movlb	0	; () banked
  4635  000164  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4636                           
  4637                           ; BSR set to: 0
  4638  000166  0100               	movlb	0	; () banked
  4639  000168  4BC9               	infsnz	printf@f& (0+255),f,b
  4640  00016A  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4641  00016C                     l6205:
  4642                           
  4643                           ; BSR set to: 0
  4644  00016C  C0C9  FFF6         	movff	printf@f,tblptrl
  4645  000170  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4646  000174                     	if	0	;tblptru may be non-zero
  4647  000174                     	endif
  4648  000174                     	if	0	;tblptru may be non-zero
  4649  000174                     	endif
  4650  000174  0008               	tblrd		*
  4651  000176  50F5               	movf	tablat,w,c
  4652  000178  EC23  F01D         	call	_isdigit
  4653  00017C  A0D8               	btfss	status,0,c
  4654  00017E  D07D               	goto	l6249
  4655  000180  D7D2               	goto	l6201
  4656  000182                     l6207:
  4657                           
  4658                           ;doprnt.c: 626: prec = 0;
  4659  000182  0E00               	movlw	0
  4660  000184  0100               	movlb	0	; () banked
  4661  000186  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4662  000188  0E00               	movlw	0
  4663  00018A  6FF4               	movwf	printf@prec& (0+255),b
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;doprnt.c: 628: flag |= 0x1000;
  4667  00018C  0100               	movlb	0	; () banked
  4668  00018E  89F3               	bsf	(printf@flag+1)& (0+255),4,b
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;doprnt.c: 635: switch(c = *f++) {
  4672                           
  4673                           ;doprnt.c: 630: }
  4674                           ;doprnt.c: 633: loop:
  4675                           
  4676                           ; BSR set to: 0
  4677  000190  D074               	goto	l6249
  4678  000192                     l6211:
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;doprnt.c: 643: flag |= 0x10;
  4682  000192  0100               	movlb	0	; () banked
  4683  000194  89F2               	bsf	printf@flag& (0+255),4,b
  4684                           
  4685                           ;doprnt.c: 644: goto loop;
  4686  000196  D071               	goto	l6249
  4687  000198                     l6213:
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;doprnt.c: 663: flag |= 0x400;
  4691  000198  0100               	movlb	0	; () banked
  4692  00019A  85F3               	bsf	(printf@flag+1)& (0+255),2,b
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;doprnt.c: 698: case 'i':
  4696                           ;doprnt.c: 699: break;
  4697                           
  4698                           ; BSR set to: 0
  4699                           
  4700                           ;doprnt.c: 697: case 'd':
  4701                           
  4702                           ;doprnt.c: 664: break;
  4703  00019C  D090               	goto	l6251
  4704  00019E                     l6215:
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;doprnt.c: 721: flag |= 0x80;
  4708  00019E  0100               	movlb	0	; () banked
  4709  0001A0  8FF2               	bsf	printf@flag& (0+255),7,b
  4710                           
  4711                           ;doprnt.c: 723: break;
  4712  0001A2  D08D               	goto	l6251
  4713  0001A4                     l6217:
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;doprnt.c: 753: if(prec && prec < len)
  4717  0001A4  0100               	movlb	0	; () banked
  4718  0001A6  51F4               	movf	printf@prec& (0+255),w,b
  4719  0001A8  0100               	movlb	0	; () banked
  4720  0001AA  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  4721  0001AC  B4D8               	btfsc	status,2,c
  4722  0001AE  D00E               	goto	l6223
  4723                           
  4724                           ; BSR set to: 0
  4725  0001B0  0100               	movlb	0	; () banked
  4726  0001B2  51DF               	movf	printf@len& (0+255),w,b
  4727  0001B4  0100               	movlb	0	; () banked
  4728  0001B6  5DF4               	subwf	printf@prec& (0+255),w,b
  4729  0001B8  0100               	movlb	0	; () banked
  4730  0001BA  51E0               	movf	(printf@len+1)& (0+255),w,b
  4731  0001BC  0100               	movlb	0	; () banked
  4732  0001BE  59F5               	subwfb	(printf@prec+1)& (0+255),w,b
  4733  0001C0  B0D8               	btfsc	status,0,c
  4734  0001C2  D004               	goto	l6223
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;doprnt.c: 754: len = prec;
  4738  0001C4  C0F4  F0DF         	movff	printf@prec,printf@len
  4739  0001C8  C0F5  F0E0         	movff	printf@prec+1,printf@len+1
  4740  0001CC                     l6223:
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;doprnt.c: 757: if(width > len)
  4744  0001CC  0100               	movlb	0	; () banked
  4745  0001CE  51F0               	movf	printf@width& (0+255),w,b
  4746  0001D0  0100               	movlb	0	; () banked
  4747  0001D2  5DDF               	subwf	printf@len& (0+255),w,b
  4748  0001D4  0100               	movlb	0	; () banked
  4749  0001D6  51F1               	movf	(printf@width+1)& (0+255),w,b
  4750  0001D8  0100               	movlb	0	; () banked
  4751  0001DA  59E0               	subwfb	(printf@len+1)& (0+255),w,b
  4752  0001DC  B0D8               	btfsc	status,0,c
  4753  0001DE  D009               	goto	l6227
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;doprnt.c: 758: width -= len;
  4757  0001E0  0100               	movlb	0	; () banked
  4758  0001E2  51DF               	movf	printf@len& (0+255),w,b
  4759  0001E4  0100               	movlb	0	; () banked
  4760  0001E6  5FF0               	subwf	printf@width& (0+255),f,b
  4761  0001E8  0100               	movlb	0	; () banked
  4762  0001EA  51E0               	movf	(printf@len+1)& (0+255),w,b
  4763  0001EC  0100               	movlb	0	; () banked
  4764  0001EE  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  4765  0001F0  D009               	goto	l6231
  4766  0001F2                     l6227:
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;doprnt.c: 759: else
  4770                           ;doprnt.c: 760: width = 0;
  4771  0001F2  0E00               	movlw	0
  4772  0001F4  0100               	movlb	0	; () banked
  4773  0001F6  6FF1               	movwf	(printf@width+1)& (0+255),b
  4774  0001F8  0E00               	movlw	0
  4775  0001FA  6FF0               	movwf	printf@width& (0+255),b
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;doprnt.c: 764: while(width--)
  4779  0001FC  D003               	goto	l6231
  4780  0001FE                     l6229:
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;doprnt.c: 765: (putch(' ') );
  4784  0001FE  0E20               	movlw	32
  4785  000200  EC01  F01D         	call	_putch
  4786  000204                     l6231:
  4787  000204  0100               	movlb	0	; () banked
  4788  000206  07F0               	decf	printf@width& (0+255),f,b
  4789  000208  A0D8               	btfss	status,0,c
  4790  00020A  07F1               	decf	(printf@width+1)& (0+255),f,b
  4791  00020C  0100               	movlb	0	; () banked
  4792  00020E  29F0               	incf	printf@width& (0+255),w,b
  4793  000210  E1F6               	bnz	l6229
  4794  000212  0100               	movlb	0	; () banked
  4795  000214  29F1               	incf	(printf@width+1)& (0+255),w,b
  4796  000216  B4D8               	btfsc	status,2,c
  4797  000218  D00B               	goto	l6237
  4798  00021A  D7F1               	goto	l6229
  4799  00021C                     l6233:
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;doprnt.c: 768: (putch(*cp++) );
  4803  00021C  C0DD  FFD9         	movff	printf@cp,fsr2l
  4804  000220  C0DE  FFDA         	movff	printf@cp+1,fsr2h
  4805  000224  50DF               	movf	indf2,w,c
  4806  000226  EC01  F01D         	call	_putch
  4807  00022A  0100               	movlb	0	; () banked
  4808  00022C  4BDD               	infsnz	printf@cp& (0+255),f,b
  4809  00022E  2BDE               	incf	(printf@cp+1)& (0+255),f,b
  4810  000230                     l6237:
  4811                           
  4812                           ; BSR set to: 0
  4813  000230  0100               	movlb	0	; () banked
  4814  000232  07DF               	decf	printf@len& (0+255),f,b
  4815  000234  A0D8               	btfss	status,0,c
  4816  000236  07E0               	decf	(printf@len+1)& (0+255),f,b
  4817  000238  0100               	movlb	0	; () banked
  4818  00023A  29DF               	incf	printf@len& (0+255),w,b
  4819  00023C  E1EF               	bnz	l6233
  4820  00023E  0100               	movlb	0	; () banked
  4821  000240  29E0               	incf	(printf@len+1)& (0+255),w,b
  4822  000242  B4D8               	btfsc	status,2,c
  4823  000244  EF0C  F007         	goto	l6537
  4824  000248  D7E9               	goto	l6233
  4825  00024A                     l6239:
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4829  00024A  C0E1  FFD9         	movff	printf@ap,fsr2l
  4830  00024E  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  4831  000252  50DF               	movf	indf2,w,c
  4832  000254  0100               	movlb	0	; () banked
  4833  000256  6FF6               	movwf	printf@c& (0+255),b
  4834                           
  4835                           ; BSR set to: 0
  4836  000258  0E02               	movlw	2
  4837  00025A  0100               	movlb	0	; () banked
  4838  00025C  27E1               	addwf	printf@ap& (0+255),f,b
  4839  00025E  0E00               	movlw	0
  4840  000260  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  4841  000262                     l6243:
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;doprnt.c: 805: cp = (char *)&c;
  4845  000262  0EF6               	movlw	low printf@c
  4846  000264  0100               	movlb	0	; () banked
  4847  000266  6FDD               	movwf	printf@cp& (0+255),b
  4848  000268  0E00               	movlw	high printf@c
  4849  00026A  0100               	movlb	0	; () banked
  4850  00026C  6FDE               	movwf	(printf@cp+1)& (0+255),b
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;doprnt.c: 806: len = 1;
  4854  00026E  0E00               	movlw	0
  4855  000270  0100               	movlb	0	; () banked
  4856  000272  6FE0               	movwf	(printf@len+1)& (0+255),b
  4857  000274  0E01               	movlw	1
  4858  000276  6FDF               	movwf	printf@len& (0+255),b
  4859                           
  4860                           ;doprnt.c: 807: goto dostring;
  4861  000278  D795               	goto	l6217
  4862  00027A                     l6249:
  4863  00027A  C0C9  FFF6         	movff	printf@f,tblptrl
  4864  00027E  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4865  000282  0100               	movlb	0	; () banked
  4866  000284  4BC9               	infsnz	printf@f& (0+255),f,b
  4867  000286  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4868  000288                     	if	0	;tblptru may be non-zero
  4869  000288                     	endif
  4870  000288                     	if	0	;tblptru may be non-zero
  4871  000288                     	endif
  4872  000288  0008               	tblrd		*
  4873  00028A  CFF5 F0F6          	movff	tablat,printf@c
  4874  00028E  0100               	movlb	0	; () banked
  4875  000290  51F6               	movf	printf@c& (0+255),w,b
  4876                           
  4877                           ; Switch size 1, requested type "space"
  4878                           ; Number of cases is 7, Range of values is 0 to 120
  4879                           ; switch strategies available:
  4880                           ; Name         Instructions Cycles
  4881                           ; simple_byte           22    12 (average)
  4882                           ;	Chosen strategy is simple_byte
  4883  000292  0A00               	xorlw	0	; case 0
  4884  000294  B4D8               	btfsc	status,2,c
  4885  000296  0012               	return	
  4886  000298  0A63               	xorlw	99	; case 99
  4887  00029A  B4D8               	btfsc	status,2,c
  4888  00029C  D7D6               	goto	l6239
  4889  00029E  0A07               	xorlw	7	; case 100
  4890  0002A0  B4D8               	btfsc	status,2,c
  4891  0002A2  D00D               	goto	l6251
  4892  0002A4  0A02               	xorlw	2	; case 102
  4893  0002A6  B4D8               	btfsc	status,2,c
  4894  0002A8  D777               	goto	l6213
  4895  0002AA  0A0F               	xorlw	15	; case 105
  4896  0002AC  B4D8               	btfsc	status,2,c
  4897  0002AE  D007               	goto	l6251
  4898  0002B0  0A05               	xorlw	5	; case 108
  4899  0002B2  B4D8               	btfsc	status,2,c
  4900  0002B4  D76E               	goto	l6211
  4901  0002B6  0A14               	xorlw	20	; case 120
  4902  0002B8  B4D8               	btfsc	status,2,c
  4903  0002BA  D771               	goto	l6215
  4904  0002BC  D7D2               	goto	l6243
  4905  0002BE                     l6251:
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;doprnt.c: 825: if(flag & (0x700)) {
  4909  0002BE  0E07               	movlw	7
  4910  0002C0  0100               	movlb	0	; () banked
  4911  0002C2  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  4912  0002C4  B4D8               	btfsc	status,2,c
  4913  0002C6  D37C               	goto	l726
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;doprnt.c: 827: if(flag & 0x1000)
  4917  0002C8  0100               	movlb	0	; () banked
  4918  0002CA  A9F3               	btfss	(printf@flag+1)& (0+255),4,b
  4919  0002CC  D005               	goto	l6257
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;doprnt.c: 829: prec = 6;
  4923  0002CE  0E00               	movlw	0
  4924  0002D0  0100               	movlb	0	; () banked
  4925  0002D2  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4926  0002D4  0E06               	movlw	6
  4927  0002D6  6FF4               	movwf	printf@prec& (0+255),b
  4928  0002D8                     l6257:
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4932  0002D8  C0E1  FFD9         	movff	printf@ap,fsr2l
  4933  0002DC  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  4934  0002E0  CFDE F0E9          	movff	postinc2,printf@fval
  4935  0002E4  CFDE F0EA          	movff	postinc2,printf@fval+1
  4936  0002E8  CFDD F0EB          	movff	postdec2,printf@fval+2
  4937                           
  4938                           ; BSR set to: 0
  4939  0002EC  0E03               	movlw	3
  4940  0002EE  0100               	movlb	0	; () banked
  4941  0002F0  27E1               	addwf	printf@ap& (0+255),f,b
  4942  0002F2  0E00               	movlw	0
  4943  0002F4  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;doprnt.c: 831: if(fval < 0.0) {
  4947  0002F6  0100               	movlb	0	; () banked
  4948  0002F8  AFEB               	btfss	(printf@fval+2)& (0+255),7,b
  4949  0002FA  D011               	goto	l6267
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;doprnt.c: 832: fval = -fval;
  4953  0002FC  C0E9  F027         	movff	printf@fval,___ftneg@f1
  4954  000300  C0EA  F028         	movff	printf@fval+1,___ftneg@f1+1
  4955  000304  C0EB  F029         	movff	printf@fval+2,___ftneg@f1+2
  4956  000308  ECEF  F01C         	call	___ftneg	;wreg free
  4957  00030C  C027  F0E9         	movff	?___ftneg,printf@fval
  4958  000310  C028  F0EA         	movff	?___ftneg+1,printf@fval+1
  4959  000314  C029  F0EB         	movff	?___ftneg+2,printf@fval+2
  4960                           
  4961                           ;doprnt.c: 833: flag |= 0x03;
  4962  000318  0E03               	movlw	3
  4963  00031A  0100               	movlb	0	; () banked
  4964  00031C  13F2               	iorwf	printf@flag& (0+255),f,b
  4965  00031E                     l6267:
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;doprnt.c: 834: }
  4969                           ;doprnt.c: 835: exp = 0;
  4970  00031E  0E00               	movlw	0
  4971  000320  0100               	movlb	0	; () banked
  4972  000322  6FE8               	movwf	(printf@exp+1)& (0+255),b
  4973  000324  0E00               	movlw	0
  4974  000326  6FE7               	movwf	printf@exp& (0+255),b
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;doprnt.c: 836: if( fval!=0) {
  4978  000328  0100               	movlb	0	; () banked
  4979  00032A  51E9               	movf	printf@fval& (0+255),w,b
  4980  00032C  0100               	movlb	0	; () banked
  4981  00032E  11EA               	iorwf	(printf@fval+1)& (0+255),w,b
  4982  000330  0100               	movlb	0	; () banked
  4983  000332  11EB               	iorwf	(printf@fval+2)& (0+255),w,b
  4984  000334  B4D8               	btfsc	status,2,c
  4985  000336  D09A               	goto	l6295
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4989  000338  0E82               	movlw	130
  4990  00033A  0100               	movlb	0	; () banked
  4991  00033C  6FD3               	movwf	??_printf& (0+255),b
  4992  00033E  0EFF               	movlw	255
  4993  000340  0100               	movlb	0	; () banked
  4994  000342  6FD4               	movwf	(??_printf+1)& (0+255),b
  4995  000344  C0E9  F0D5         	movff	printf@fval,??_printf+2
  4996  000348  C0EA  F0D6         	movff	printf@fval+1,??_printf+3
  4997  00034C  C0EB  F0D7         	movff	printf@fval+2,??_printf+4
  4998  000350  C0EC  F0D8         	movff	printf@fval+3,??_printf+5
  4999  000354  0E10               	movlw	16
  5000  000356  D006               	goto	u6450
  5001  000358                     u6455:
  5002  000358  0100               	movlb	0	; () banked
  5003  00035A  90D8               	bcf	status,0,c
  5004  00035C  33D8               	rrcf	(??_printf+5)& (0+255),f,b
  5005  00035E  33D7               	rrcf	(??_printf+4)& (0+255),f,b
  5006  000360  33D6               	rrcf	(??_printf+3)& (0+255),f,b
  5007  000362  33D5               	rrcf	(??_printf+2)& (0+255),f,b
  5008  000364                     u6450:
  5009  000364  2EE8               	decfsz	wreg,f,c
  5010  000366  D7F8               	goto	u6455
  5011  000368  0100               	movlb	0	; () banked
  5012  00036A  51D5               	movf	(??_printf+2)& (0+255),w,b
  5013  00036C  0100               	movlb	0	; () banked
  5014  00036E  25D3               	addwf	??_printf& (0+255),w,b
  5015  000370  0100               	movlb	0	; () banked
  5016  000372  6FE7               	movwf	printf@exp& (0+255),b
  5017  000374  0E00               	movlw	0
  5018  000376  0100               	movlb	0	; () banked
  5019  000378  21D4               	addwfc	(??_printf+1)& (0+255),w,b
  5020  00037A  0100               	movlb	0	; () banked
  5021  00037C  6FE8               	movwf	(printf@exp+1)& (0+255),b
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;doprnt.c: 838: exp--;
  5025  00037E  0100               	movlb	0	; () banked
  5026  000380  07E7               	decf	printf@exp& (0+255),f,b
  5027  000382  A0D8               	btfss	status,0,c
  5028  000384  07E8               	decf	(printf@exp+1)& (0+255),f,b
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;doprnt.c: 839: exp *= 3;
  5032  000386  C0E7  F084         	movff	printf@exp,___wmul@multiplier
  5033  00038A  C0E8  F085         	movff	printf@exp+1,___wmul@multiplier+1
  5034  00038E  0E00               	movlw	0
  5035  000390  0100               	movlb	0	; () banked
  5036  000392  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5037  000394  0E03               	movlw	3
  5038  000396  6F86               	movwf	___wmul@multiplicand& (0+255),b
  5039  000398  EC4D  F01C         	call	___wmul	;wreg free
  5040  00039C  C084  F0E7         	movff	?___wmul,printf@exp
  5041  0003A0  C085  F0E8         	movff	?___wmul+1,printf@exp+1
  5042                           
  5043                           ;doprnt.c: 840: exp /= 10;
  5044  0003A4  C0E7  F02D         	movff	printf@exp,___awdiv@dividend
  5045  0003A8  C0E8  F02E         	movff	printf@exp+1,___awdiv@dividend+1
  5046  0003AC  0E00               	movlw	0
  5047  0003AE  6E30               	movwf	___awdiv@divisor+1,c
  5048  0003B0  0E0A               	movlw	10
  5049  0003B2  6E2F               	movwf	___awdiv@divisor,c
  5050  0003B4  ECAF  F018         	call	___awdiv	;wreg free
  5051  0003B8  C02D  F0E7         	movff	?___awdiv,printf@exp
  5052  0003BC  C02E  F0E8         	movff	?___awdiv+1,printf@exp+1
  5053                           
  5054                           ;doprnt.c: 841: if(exp < 0)
  5055  0003C0  0100               	movlb	0	; () banked
  5056  0003C2  AFE8               	btfss	(printf@exp+1)& (0+255),7,b
  5057  0003C4  D004               	goto	l6283
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;doprnt.c: 842: exp--;
  5061  0003C6  0100               	movlb	0	; () banked
  5062  0003C8  07E7               	decf	printf@exp& (0+255),f,b
  5063  0003CA  A0D8               	btfss	status,0,c
  5064  0003CC  07E8               	decf	(printf@exp+1)& (0+255),f,b
  5065  0003CE                     l6283:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5069  0003CE  0100               	movlb	0	; () banked
  5070  0003D0  51E7               	movf	printf@exp& (0+255),w,b
  5071  0003D2  0800               	sublw	0
  5072  0003D4  EC99  F009         	call	_scale
  5073  0003D8  C0A4  F0E3         	movff	?_scale,printf@tmpval
  5074  0003DC  C0A5  F0E4         	movff	?_scale+1,printf@tmpval+1
  5075  0003E0  C0A6  F0E5         	movff	?_scale+2,printf@tmpval+2
  5076                           
  5077                           ;doprnt.c: 847: tmpval.integ *= fval;
  5078  0003E4  C0E3  F095         	movff	printf@tmpval,___ftmul@f1
  5079  0003E8  C0E4  F096         	movff	printf@tmpval+1,___ftmul@f1+1
  5080  0003EC  C0E5  F097         	movff	printf@tmpval+2,___ftmul@f1+2
  5081  0003F0  C0E9  F098         	movff	printf@fval,___ftmul@f2
  5082  0003F4  C0EA  F099         	movff	printf@fval+1,___ftmul@f2+1
  5083  0003F8  C0EB  F09A         	movff	printf@fval+2,___ftmul@f2+2
  5084  0003FC  ECBC  F010         	call	___ftmul	;wreg free
  5085  000400  C095  F0E3         	movff	?___ftmul,printf@tmpval
  5086  000404  C096  F0E4         	movff	?___ftmul+1,printf@tmpval+1
  5087  000408  C097  F0E5         	movff	?___ftmul+2,printf@tmpval+2
  5088                           
  5089                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5090  00040C  C0E3  F080         	movff	printf@tmpval,___ftge@ff1
  5091  000410  C0E4  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5092  000414  C0E5  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5093  000418  0E00               	movlw	0
  5094  00041A  0100               	movlb	0	; () banked
  5095  00041C  6F83               	movwf	___ftge@ff2& (0+255),b
  5096  00041E  0E80               	movlw	128
  5097  000420  0100               	movlb	0	; () banked
  5098  000422  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5099  000424  0E3F               	movlw	63
  5100  000426  0100               	movlb	0	; () banked
  5101  000428  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5102  00042A  EC90  F017         	call	___ftge	;wreg free
  5103  00042E  0100               	movlb	0	; () banked
  5104  000430  B0D8               	btfsc	status,0,c
  5105  000432  D005               	goto	l6291
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;doprnt.c: 849: exp--;
  5109  000434  0100               	movlb	0	; () banked
  5110  000436  07E7               	decf	printf@exp& (0+255),f,b
  5111  000438  A0D8               	btfss	status,0,c
  5112  00043A  07E8               	decf	(printf@exp+1)& (0+255),f,b
  5113  00043C  D017               	goto	l6295
  5114  00043E                     l6291:
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5118  00043E  C0E3  F080         	movff	printf@tmpval,___ftge@ff1
  5119  000442  C0E4  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5120  000446  C0E5  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5121  00044A  0E00               	movlw	0
  5122  00044C  0100               	movlb	0	; () banked
  5123  00044E  6F83               	movwf	___ftge@ff2& (0+255),b
  5124  000450  0E20               	movlw	32
  5125  000452  0100               	movlb	0	; () banked
  5126  000454  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5127  000456  0E41               	movlw	65
  5128  000458  0100               	movlb	0	; () banked
  5129  00045A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5130  00045C  EC90  F017         	call	___ftge	;wreg free
  5131  000460  0100               	movlb	0	; () banked
  5132  000462  A0D8               	btfss	status,0,c
  5133  000464  D003               	goto	l6295
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;doprnt.c: 851: exp++;
  5137  000466  0100               	movlb	0	; () banked
  5138  000468  4BE7               	infsnz	printf@exp& (0+255),f,b
  5139  00046A  2BE8               	incf	(printf@exp+1)& (0+255),f,b
  5140  00046C                     l6295:
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;doprnt.c: 852: }
  5144                           ;doprnt.c: 1112: if(prec <= 12)
  5145  00046C  0100               	movlb	0	; () banked
  5146  00046E  BFF5               	btfsc	(printf@prec+1)& (0+255),7,b
  5147  000470  D008               	goto	l6297
  5148  000472  0100               	movlb	0	; () banked
  5149  000474  51F5               	movf	(printf@prec+1)& (0+255),w,b
  5150  000476  E11D               	bnz	l6299
  5151  000478  0E0D               	movlw	13
  5152  00047A  0100               	movlb	0	; () banked
  5153  00047C  5DF4               	subwf	printf@prec& (0+255),w,b
  5154  00047E  B0D8               	btfsc	status,0,c
  5155  000480  D018               	goto	l6299
  5156  000482                     l6297:
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;doprnt.c: 1113: fval += fround(prec);
  5160  000482  C0E9  F0AE         	movff	printf@fval,___ftadd@f1
  5161  000486  C0EA  F0AF         	movff	printf@fval+1,___ftadd@f1+1
  5162  00048A  C0EB  F0B0         	movff	printf@fval+2,___ftadd@f1+2
  5163  00048E  0100               	movlb	0	; () banked
  5164  000490  51F4               	movf	printf@prec& (0+255),w,b
  5165  000492  EC94  F00D         	call	_fround
  5166  000496  C0A4  F0B1         	movff	?_fround,___ftadd@f2
  5167  00049A  C0A5  F0B2         	movff	?_fround+1,___ftadd@f2+1
  5168  00049E  C0A6  F0B3         	movff	?_fround+2,___ftadd@f2+2
  5169  0004A2  ECD9  F00E         	call	___ftadd	;wreg free
  5170  0004A6  C0AE  F0E9         	movff	?___ftadd,printf@fval
  5171  0004AA  C0AF  F0EA         	movff	?___ftadd+1,printf@fval+1
  5172  0004AE  C0B0  F0EB         	movff	?___ftadd+2,printf@fval+2
  5173  0004B2                     l6299:
  5174                           
  5175                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5176  0004B2  0100               	movlb	0	; () banked
  5177  0004B4  BFE8               	btfsc	(printf@exp+1)& (0+255),7,b
  5178  0004B6  D008               	goto	l6301
  5179  0004B8  0100               	movlb	0	; () banked
  5180  0004BA  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5181  0004BC  E12A               	bnz	l6307
  5182  0004BE  0E0A               	movlw	10
  5183  0004C0  0100               	movlb	0	; () banked
  5184  0004C2  5DE7               	subwf	printf@exp& (0+255),w,b
  5185  0004C4  B0D8               	btfsc	status,0,c
  5186  0004C6  D025               	goto	l6307
  5187  0004C8                     l6301:
  5188                           
  5189                           ; BSR set to: 0
  5190  0004C8  0100               	movlb	0	; () banked
  5191  0004CA  51E9               	movf	printf@fval& (0+255),w,b
  5192  0004CC  0100               	movlb	0	; () banked
  5193  0004CE  11EA               	iorwf	(printf@fval+1)& (0+255),w,b
  5194  0004D0  0100               	movlb	0	; () banked
  5195  0004D2  11EB               	iorwf	(printf@fval+2)& (0+255),w,b
  5196  0004D4  B4D8               	btfsc	status,2,c
  5197  0004D6  D063               	goto	l6321
  5198                           
  5199                           ; BSR set to: 0
  5200  0004D8  C0E9  F0BA         	movff	printf@fval,___fttol@f1
  5201  0004DC  C0EA  F0BB         	movff	printf@fval+1,___fttol@f1+1
  5202  0004E0  C0EB  F0BC         	movff	printf@fval+2,___fttol@f1+2
  5203  0004E4  ECBF  F012         	call	___fttol	;wreg free
  5204  0004E8  0100               	movlb	0	; () banked
  5205  0004EA  51BA               	movf	?___fttol& (0+255),w,b
  5206  0004EC  0100               	movlb	0	; () banked
  5207  0004EE  11BB               	iorwf	(?___fttol+1)& (0+255),w,b
  5208  0004F0  0100               	movlb	0	; () banked
  5209  0004F2  11BC               	iorwf	(?___fttol+2)& (0+255),w,b
  5210  0004F4  0100               	movlb	0	; () banked
  5211  0004F6  11BD               	iorwf	(?___fttol+3)& (0+255),w,b
  5212  0004F8  A4D8               	btfss	status,2,c
  5213  0004FA  D051               	goto	l6321
  5214                           
  5215                           ; BSR set to: 0
  5216  0004FC  0100               	movlb	0	; () banked
  5217  0004FE  BFE8               	btfsc	(printf@exp+1)& (0+255),7,b
  5218  000500  D04E               	goto	l6321
  5219  000502  0100               	movlb	0	; () banked
  5220  000504  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5221  000506  E105               	bnz	l6307
  5222  000508  0E02               	movlw	2
  5223  00050A  0100               	movlb	0	; () banked
  5224  00050C  5DE7               	subwf	printf@exp& (0+255),w,b
  5225  00050E  A0D8               	btfss	status,0,c
  5226  000510  D046               	goto	l6321
  5227  000512                     l6307:
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5231  000512  C0E3  F080         	movff	printf@tmpval,___ftge@ff1
  5232  000516  C0E4  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5233  00051A  C0E5  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5234  00051E  0E70               	movlw	112
  5235  000520  0100               	movlb	0	; () banked
  5236  000522  6F83               	movwf	___ftge@ff2& (0+255),b
  5237  000524  0E89               	movlw	137
  5238  000526  0100               	movlb	0	; () banked
  5239  000528  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5240  00052A  0E40               	movlw	64
  5241  00052C  0100               	movlb	0	; () banked
  5242  00052E  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5243  000530  EC90  F017         	call	___ftge	;wreg free
  5244  000534  0100               	movlb	0	; () banked
  5245  000536  B0D8               	btfsc	status,0,c
  5246  000538  D003               	goto	l6311
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5250  00053A  0100               	movlb	0	; () banked
  5251  00053C  0EF7               	movlw	247
  5252  00053E  D002               	goto	L1
  5253  000540                     l6311:
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5257  000540  0100               	movlb	0	; () banked
  5258  000542  0EF8               	movlw	248
  5259  000544                     L1:
  5260  000544  27E7               	addwf	printf@exp& (0+255),f,b
  5261  000546  0EFF               	movlw	255
  5262  000548  23E8               	addwfc	(printf@exp+1)& (0+255),f,b
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;doprnt.c: 1124: }
  5266                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5267                           
  5268                           ; BSR set to: 0
  5269  00054A  0100               	movlb	0	; () banked
  5270  00054C  51E7               	movf	printf@exp& (0+255),w,b
  5271  00054E  EC99  F009         	call	_scale
  5272  000552  C0A4  F0E3         	movff	?_scale,printf@tmpval
  5273  000556  C0A5  F0E4         	movff	?_scale+1,printf@tmpval+1
  5274  00055A  C0A6  F0E5         	movff	?_scale+2,printf@tmpval+2
  5275                           
  5276                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5277  00055E  C0E9  F027         	movff	printf@fval,__tdiv_to_l_@f1
  5278  000562  C0EA  F028         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5279  000566  C0EB  F029         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5280  00056A  C0E3  F02A         	movff	printf@tmpval,__tdiv_to_l_@f2
  5281  00056E  C0E4  F02B         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5282  000572  C0E5  F02C         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5283  000576  EC6B  F011         	call	__tdiv_to_l_	;wreg free
  5284  00057A  C027  F0EC         	movff	?__tdiv_to_l_,printf@val
  5285  00057E  C028  F0ED         	movff	?__tdiv_to_l_+1,printf@val+1
  5286  000582  C029  F0EE         	movff	?__tdiv_to_l_+2,printf@val+2
  5287  000586  C02A  F0EF         	movff	?__tdiv_to_l_+3,printf@val+3
  5288                           
  5289                           ;doprnt.c: 1129: fval = 0.0;
  5290  00058A  0E00               	movlw	0
  5291  00058C  0100               	movlb	0	; () banked
  5292  00058E  6FE9               	movwf	printf@fval& (0+255),b
  5293  000590  0E00               	movlw	0
  5294  000592  0100               	movlb	0	; () banked
  5295  000594  6FEA               	movwf	(printf@fval+1)& (0+255),b
  5296  000596  0E00               	movlw	0
  5297  000598  0100               	movlb	0	; () banked
  5298  00059A  6FEB               	movwf	(printf@fval+2)& (0+255),b
  5299                           
  5300                           ;doprnt.c: 1130: } else {
  5301  00059C  D033               	goto	l6325
  5302  00059E                     l6321:
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5306  00059E  C0E9  F0BA         	movff	printf@fval,___fttol@f1
  5307  0005A2  C0EA  F0BB         	movff	printf@fval+1,___fttol@f1+1
  5308  0005A6  C0EB  F0BC         	movff	printf@fval+2,___fttol@f1+2
  5309  0005AA  ECBF  F012         	call	___fttol	;wreg free
  5310  0005AE  C0BA  F0EC         	movff	?___fttol,printf@val
  5311  0005B2  C0BB  F0ED         	movff	?___fttol+1,printf@val+1
  5312  0005B6  C0BC  F0EE         	movff	?___fttol+2,printf@val+2
  5313  0005BA  C0BD  F0EF         	movff	?___fttol+3,printf@val+3
  5314                           
  5315                           ;doprnt.c: 1132: fval -= (double)val;
  5316  0005BE  C0E9  F0BA         	movff	printf@fval,___ftsub@f1
  5317  0005C2  C0EA  F0BB         	movff	printf@fval+1,___ftsub@f1+1
  5318  0005C6  C0EB  F0BC         	movff	printf@fval+2,___ftsub@f1+2
  5319  0005CA  C0EC  F02F         	movff	printf@val,___lltoft@c
  5320  0005CE  C0ED  F030         	movff	printf@val+1,___lltoft@c+1
  5321  0005D2  C0EE  F031         	movff	printf@val+2,___lltoft@c+2
  5322  0005D6  C0EF  F032         	movff	printf@val+3,___lltoft@c+3
  5323  0005DA  EC86  F01A         	call	___lltoft	;wreg free
  5324  0005DE  C02F  F0BD         	movff	?___lltoft,___ftsub@f2
  5325  0005E2  C030  F0BE         	movff	?___lltoft+1,___ftsub@f2+1
  5326  0005E6  C031  F0BF         	movff	?___lltoft+2,___ftsub@f2+2
  5327  0005EA  EC22  F01B         	call	___ftsub	;wreg free
  5328  0005EE  C0BA  F0E9         	movff	?___ftsub,printf@fval
  5329  0005F2  C0BB  F0EA         	movff	?___ftsub+1,printf@fval+1
  5330  0005F6  C0BC  F0EB         	movff	?___ftsub+2,printf@fval+2
  5331                           
  5332                           ;doprnt.c: 1133: exp = 0;
  5333  0005FA  0E00               	movlw	0
  5334  0005FC  0100               	movlb	0	; () banked
  5335  0005FE  6FE8               	movwf	(printf@exp+1)& (0+255),b
  5336  000600  0E00               	movlw	0
  5337  000602  6FE7               	movwf	printf@exp& (0+255),b
  5338  000604                     l6325:
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;doprnt.c: 1134: }
  5342                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5343  000604  0E01               	movlw	1
  5344  000606  0100               	movlb	0	; () banked
  5345  000608  6FF6               	movwf	printf@c& (0+255),b
  5346  00060A                     l6327:
  5347                           
  5348                           ; BSR set to: 0
  5349  00060A  0E0A               	movlw	10
  5350  00060C  0100               	movlb	0	; () banked
  5351  00060E  19F6               	xorwf	printf@c& (0+255),w,b
  5352  000610  B4D8               	btfsc	status,2,c
  5353  000612  D01E               	goto	l6339
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;doprnt.c: 1137: if(val < dpowers[c])
  5357                           
  5358                           ; BSR set to: 0
  5359                           
  5360                           ; BSR set to: 0
  5361  000614  0100               	movlb	0	; () banked
  5362  000616  51F6               	movf	printf@c& (0+255),w,b
  5363  000618  0D04               	mullw	4
  5364  00061A  0E1D               	movlw	low _dpowers
  5365  00061C  24F3               	addwf	prodl,w,c
  5366  00061E  6EF6               	movwf	tblptrl,c
  5367  000620  0EFE               	movlw	high _dpowers
  5368  000622  20F4               	addwfc	prodh,w,c
  5369  000624  6EF7               	movwf	tblptrh,c
  5370  000626                     	if	0	;There are less than 3 active tblptr bytes
  5371  000626                     	endif
  5372  000626  0009               	tblrd		*+
  5373  000628  50F5               	movf	tablat,w,c
  5374  00062A  0100               	movlb	0	; () banked
  5375  00062C  5DEC               	subwf	printf@val& (0+255),w,b
  5376  00062E  0009               	tblrd		*+
  5377  000630  50F5               	movf	tablat,w,c
  5378  000632  0100               	movlb	0	; () banked
  5379  000634  59ED               	subwfb	(printf@val+1)& (0+255),w,b
  5380  000636  0009               	tblrd		*+
  5381  000638  50F5               	movf	tablat,w,c
  5382  00063A  0100               	movlb	0	; () banked
  5383  00063C  59EE               	subwfb	(printf@val+2)& (0+255),w,b
  5384  00063E  0009               	tblrd		*+
  5385  000640  50F5               	movf	tablat,w,c
  5386  000642  0100               	movlb	0	; () banked
  5387  000644  59EF               	subwfb	(printf@val+3)& (0+255),w,b
  5388  000646  A0D8               	btfss	status,0,c
  5389  000648  D003               	goto	l6339
  5390                           
  5391                           ; BSR set to: 0
  5392                           
  5393                           ; BSR set to: 0
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;doprnt.c: 1138: break;
  5397  00064A  0100               	movlb	0	; () banked
  5398  00064C  2BF6               	incf	printf@c& (0+255),f,b
  5399  00064E  D7DD               	goto	l6327
  5400  000650                     l6339:
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;doprnt.c: 1142: width -= prec + c + exp;
  5404  000650  C0F6  F0D3         	movff	printf@c,??_printf
  5405  000654  0100               	movlb	0	; () banked
  5406  000656  6BD4               	clrf	(??_printf+1)& (0+255),b
  5407  000658  BFD3               	btfsc	??_printf& (0+255),7,b
  5408  00065A  07D4               	decf	(??_printf+1)& (0+255),f,b
  5409  00065C  0100               	movlb	0	; () banked
  5410  00065E  51F4               	movf	printf@prec& (0+255),w,b
  5411  000660  0100               	movlb	0	; () banked
  5412  000662  27D3               	addwf	??_printf& (0+255),f,b
  5413  000664  0100               	movlb	0	; () banked
  5414  000666  51F5               	movf	(printf@prec+1)& (0+255),w,b
  5415  000668  0100               	movlb	0	; () banked
  5416  00066A  23D4               	addwfc	(??_printf+1)& (0+255),f,b
  5417  00066C  0100               	movlb	0	; () banked
  5418  00066E  51E7               	movf	printf@exp& (0+255),w,b
  5419  000670  0100               	movlb	0	; () banked
  5420  000672  27D3               	addwf	??_printf& (0+255),f,b
  5421  000674  0100               	movlb	0	; () banked
  5422  000676  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5423  000678  0100               	movlb	0	; () banked
  5424  00067A  23D4               	addwfc	(??_printf+1)& (0+255),f,b
  5425  00067C  0100               	movlb	0	; () banked
  5426  00067E  51D3               	movf	??_printf& (0+255),w,b
  5427  000680  0100               	movlb	0	; () banked
  5428  000682  5FF0               	subwf	printf@width& (0+255),f,b
  5429  000684  0100               	movlb	0	; () banked
  5430  000686  51D4               	movf	(??_printf+1)& (0+255),w,b
  5431  000688  0100               	movlb	0	; () banked
  5432  00068A  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  5433                           
  5434                           ;doprnt.c: 1143: if(
  5435                           ;doprnt.c: 1147: prec)
  5436  00068C  0100               	movlb	0	; () banked
  5437  00068E  51F4               	movf	printf@prec& (0+255),w,b
  5438  000690  0100               	movlb	0	; () banked
  5439  000692  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  5440  000694  B4D8               	btfsc	status,2,c
  5441  000696  D004               	goto	l6343
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;doprnt.c: 1148: width--;
  5445  000698  0100               	movlb	0	; () banked
  5446  00069A  07F0               	decf	printf@width& (0+255),f,b
  5447  00069C  A0D8               	btfss	status,0,c
  5448  00069E  07F1               	decf	(printf@width+1)& (0+255),f,b
  5449  0006A0                     l6343:
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;doprnt.c: 1149: if(flag & 0x03)
  5453  0006A0  0E03               	movlw	3
  5454  0006A2  0100               	movlb	0	; () banked
  5455  0006A4  15F2               	andwf	printf@flag& (0+255),w,b
  5456  0006A6  0100               	movlb	0	; () banked
  5457  0006A8  6FD3               	movwf	??_printf& (0+255),b
  5458  0006AA  0E00               	movlw	0
  5459  0006AC  0100               	movlb	0	; () banked
  5460  0006AE  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  5461  0006B0  0100               	movlb	0	; () banked
  5462  0006B2  6FD4               	movwf	(??_printf+1)& (0+255),b
  5463  0006B4  0100               	movlb	0	; () banked
  5464  0006B6  51D3               	movf	??_printf& (0+255),w,b
  5465  0006B8  0100               	movlb	0	; () banked
  5466  0006BA  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  5467  0006BC  B4D8               	btfsc	status,2,c
  5468  0006BE  D004               	goto	l6347
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;doprnt.c: 1150: width--;
  5472  0006C0  0100               	movlb	0	; () banked
  5473  0006C2  07F0               	decf	printf@width& (0+255),f,b
  5474  0006C4  A0D8               	btfss	status,0,c
  5475  0006C6  07F1               	decf	(printf@width+1)& (0+255),f,b
  5476  0006C8                     l6347:
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;doprnt.c: 1153: if(flag & 0x04) {
  5480  0006C8  0100               	movlb	0	; () banked
  5481  0006CA  A5F2               	btfss	printf@flag& (0+255),2,b
  5482  0006CC  D02D               	goto	l6363
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;doprnt.c: 1157: if(flag & 0x03)
  5486  0006CE  0E03               	movlw	3
  5487  0006D0  0100               	movlb	0	; () banked
  5488  0006D2  15F2               	andwf	printf@flag& (0+255),w,b
  5489  0006D4  0100               	movlb	0	; () banked
  5490  0006D6  6FD3               	movwf	??_printf& (0+255),b
  5491  0006D8  0E00               	movlw	0
  5492  0006DA  0100               	movlb	0	; () banked
  5493  0006DC  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  5494  0006DE  0100               	movlb	0	; () banked
  5495  0006E0  6FD4               	movwf	(??_printf+1)& (0+255),b
  5496  0006E2  0100               	movlb	0	; () banked
  5497  0006E4  51D3               	movf	??_printf& (0+255),w,b
  5498  0006E6  0100               	movlb	0	; () banked
  5499  0006E8  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  5500  0006EA  B4D8               	btfsc	status,2,c
  5501  0006EC  D00B               	goto	l6357
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;doprnt.c: 1159: (putch('-') );
  5505  0006EE  0E2D               	movlw	45
  5506  0006F0  EC01  F01D         	call	_putch
  5507                           
  5508                           ;doprnt.c: 1168: while(width > 0) {
  5509  0006F4  D007               	goto	l6357
  5510  0006F6                     l6353:
  5511                           
  5512                           ;doprnt.c: 1169: (putch('0') );
  5513  0006F6  0E30               	movlw	48
  5514  0006F8  EC01  F01D         	call	_putch
  5515                           
  5516                           ;doprnt.c: 1170: width--;
  5517  0006FC  0100               	movlb	0	; () banked
  5518  0006FE  07F0               	decf	printf@width& (0+255),f,b
  5519  000700  A0D8               	btfss	status,0,c
  5520  000702  07F1               	decf	(printf@width+1)& (0+255),f,b
  5521  000704                     l6357:
  5522  000704  0100               	movlb	0	; () banked
  5523  000706  BFF1               	btfsc	(printf@width+1)& (0+255),7,b
  5524  000708  D074               	goto	l6375
  5525  00070A  0100               	movlb	0	; () banked
  5526  00070C  51F1               	movf	(printf@width+1)& (0+255),w,b
  5527  00070E  E1F3               	bnz	l6353
  5528  000710  0100               	movlb	0	; () banked
  5529  000712  05F0               	decf	printf@width& (0+255),w,b
  5530  000714  A0D8               	btfss	status,0,c
  5531  000716  D06D               	goto	l6375
  5532  000718  D7EE               	goto	l6353
  5533  00071A                     l6359:
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;doprnt.c: 1181: (putch(' ') );
  5537  00071A  0E20               	movlw	32
  5538  00071C  EC01  F01D         	call	_putch
  5539                           
  5540                           ;doprnt.c: 1182: width--;
  5541  000720  0100               	movlb	0	; () banked
  5542  000722  07F0               	decf	printf@width& (0+255),f,b
  5543  000724  A0D8               	btfss	status,0,c
  5544  000726  07F1               	decf	(printf@width+1)& (0+255),f,b
  5545  000728                     l6363:
  5546                           
  5547                           ; BSR set to: 0
  5548  000728  0100               	movlb	0	; () banked
  5549  00072A  BFF1               	btfsc	(printf@width+1)& (0+255),7,b
  5550  00072C  D007               	goto	l6365
  5551  00072E  0100               	movlb	0	; () banked
  5552  000730  51F1               	movf	(printf@width+1)& (0+255),w,b
  5553  000732  E1F3               	bnz	l6359
  5554  000734  0100               	movlb	0	; () banked
  5555  000736  05F0               	decf	printf@width& (0+255),w,b
  5556  000738  B0D8               	btfsc	status,0,c
  5557  00073A  D7EF               	goto	l6359
  5558  00073C                     l6365:
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;doprnt.c: 1183: }
  5562                           ;doprnt.c: 1188: if(flag & 0x03)
  5563  00073C  0E03               	movlw	3
  5564  00073E  0100               	movlb	0	; () banked
  5565  000740  15F2               	andwf	printf@flag& (0+255),w,b
  5566  000742  0100               	movlb	0	; () banked
  5567  000744  6FD3               	movwf	??_printf& (0+255),b
  5568  000746  0E00               	movlw	0
  5569  000748  0100               	movlb	0	; () banked
  5570  00074A  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  5571  00074C  0100               	movlb	0	; () banked
  5572  00074E  6FD4               	movwf	(??_printf+1)& (0+255),b
  5573  000750  0100               	movlb	0	; () banked
  5574  000752  51D3               	movf	??_printf& (0+255),w,b
  5575  000754  0100               	movlb	0	; () banked
  5576  000756  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  5577  000758  B4D8               	btfsc	status,2,c
  5578  00075A  D04B               	goto	l6375
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;doprnt.c: 1190: (putch('-') );
  5582  00075C  0E2D               	movlw	45
  5583  00075E  EC01  F01D         	call	_putch
  5584                           
  5585                           ;doprnt.c: 1195: }
  5586                           ;doprnt.c: 1196: while(c--) {
  5587  000762  D047               	goto	l6375
  5588  000764                     l6369:
  5589                           
  5590                           ;doprnt.c: 1200: {
  5591                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5592  000764  C0EC  F027         	movff	printf@val,___lldiv@dividend
  5593  000768  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  5594  00076C  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  5595  000770  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  5596  000774  0100               	movlb	0	; () banked
  5597  000776  51F6               	movf	printf@c& (0+255),w,b
  5598  000778  0D04               	mullw	4
  5599  00077A  0E1D               	movlw	low _dpowers
  5600  00077C  24F3               	addwf	prodl,w,c
  5601  00077E  6EF6               	movwf	tblptrl,c
  5602  000780  0EFE               	movlw	high _dpowers
  5603  000782  20F4               	addwfc	prodh,w,c
  5604  000784  6EF7               	movwf	tblptrh,c
  5605  000786                     	if	0	;There are less than 3 active tblptr bytes
  5606  000786                     	endif
  5607  000786  0009               	tblrd		*+
  5608  000788  CFF5 F02B          	movff	tablat,___lldiv@divisor
  5609  00078C  0009               	tblrd		*+
  5610  00078E  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  5611  000792  0009               	tblrd		*+
  5612  000794  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  5613  000798  000A               	tblrd		*-
  5614  00079A  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  5615  00079E  ECD5  F019         	call	___lldiv	;wreg free
  5616  0007A2  C027  F0E3         	movff	?___lldiv,printf@tmpval
  5617  0007A6  C028  F0E4         	movff	?___lldiv+1,printf@tmpval+1
  5618  0007AA  C029  F0E5         	movff	?___lldiv+2,printf@tmpval+2
  5619  0007AE  C02A  F0E6         	movff	?___lldiv+3,printf@tmpval+3
  5620                           
  5621                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5622  0007B2  C0E3  F080         	movff	printf@tmpval,___llmod@dividend
  5623  0007B6  C0E4  F081         	movff	printf@tmpval+1,___llmod@dividend+1
  5624  0007BA  C0E5  F082         	movff	printf@tmpval+2,___llmod@dividend+2
  5625  0007BE  C0E6  F083         	movff	printf@tmpval+3,___llmod@dividend+3
  5626  0007C2  0E0A               	movlw	10
  5627  0007C4  0100               	movlb	0	; () banked
  5628  0007C6  6F84               	movwf	___llmod@divisor& (0+255),b
  5629  0007C8  0E00               	movlw	0
  5630  0007CA  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  5631  0007CC  0E00               	movlw	0
  5632  0007CE  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  5633  0007D0  0E00               	movlw	0
  5634  0007D2  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  5635  0007D4  ECFD  F018         	call	___llmod	;wreg free
  5636  0007D8  C080  F0E3         	movff	?___llmod,printf@tmpval
  5637  0007DC  C081  F0E4         	movff	?___llmod+1,printf@tmpval+1
  5638  0007E0  C082  F0E5         	movff	?___llmod+2,printf@tmpval+2
  5639  0007E4  C083  F0E6         	movff	?___llmod+3,printf@tmpval+3
  5640                           
  5641                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5642  0007E8  0100               	movlb	0	; () banked
  5643  0007EA  51E3               	movf	printf@tmpval& (0+255),w,b
  5644  0007EC  0F30               	addlw	48
  5645  0007EE  EC01  F01D         	call	_putch
  5646  0007F2                     l6375:
  5647  0007F2  0100               	movlb	0	; () banked
  5648  0007F4  07F6               	decf	printf@c& (0+255),f,b
  5649  0007F6  0100               	movlb	0	; () banked
  5650  0007F8  29F6               	incf	printf@c& (0+255),w,b
  5651  0007FA  B4D8               	btfsc	status,2,c
  5652  0007FC  D008               	goto	l6381
  5653  0007FE  D7B2               	goto	l6369
  5654  000800                     l6377:
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;doprnt.c: 1208: (putch('0') );
  5658  000800  0E30               	movlw	48
  5659  000802  EC01  F01D         	call	_putch
  5660                           
  5661                           ;doprnt.c: 1209: exp--;
  5662  000806  0100               	movlb	0	; () banked
  5663  000808  07E7               	decf	printf@exp& (0+255),f,b
  5664  00080A  A0D8               	btfss	status,0,c
  5665  00080C  07E8               	decf	(printf@exp+1)& (0+255),f,b
  5666  00080E                     l6381:
  5667                           
  5668                           ; BSR set to: 0
  5669  00080E  0100               	movlb	0	; () banked
  5670  000810  BFE8               	btfsc	(printf@exp+1)& (0+255),7,b
  5671  000812  D007               	goto	l6383
  5672  000814  0100               	movlb	0	; () banked
  5673  000816  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5674  000818  E1F3               	bnz	l6377
  5675  00081A  0100               	movlb	0	; () banked
  5676  00081C  05E7               	decf	printf@exp& (0+255),w,b
  5677  00081E  B0D8               	btfsc	status,0,c
  5678  000820  D7EF               	goto	l6377
  5679  000822                     l6383:
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;doprnt.c: 1210: }
  5683                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5684  000822  0100               	movlb	0	; () banked
  5685  000824  BFF5               	btfsc	(printf@prec+1)& (0+255),7,b
  5686  000826  D00C               	goto	l766
  5687  000828  0100               	movlb	0	; () banked
  5688  00082A  51F5               	movf	(printf@prec+1)& (0+255),w,b
  5689  00082C  E105               	bnz	u6670
  5690  00082E  0E09               	movlw	9
  5691  000830  0100               	movlb	0	; () banked
  5692  000832  5DF4               	subwf	printf@prec& (0+255),w,b
  5693  000834  A0D8               	btfss	status,0,c
  5694  000836  D004               	goto	l766
  5695  000838                     u6670:
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5699  000838  0E08               	movlw	8
  5700  00083A  0100               	movlb	0	; () banked
  5701  00083C  6FF6               	movwf	printf@c& (0+255),b
  5702  00083E  D002               	goto	l6387
  5703  000840                     l766:
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;doprnt.c: 1213: else
  5707                           ;doprnt.c: 1214: c = prec;
  5708  000840  C0F4  F0F6         	movff	printf@prec,printf@c
  5709  000844                     l6387:
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;doprnt.c: 1215: prec -= c;
  5713  000844  0100               	movlb	0	; () banked
  5714  000846  51F6               	movf	printf@c& (0+255),w,b
  5715  000848  0100               	movlb	0	; () banked
  5716  00084A  5FF4               	subwf	printf@prec& (0+255),f,b
  5717  00084C  0E00               	movlw	0
  5718  00084E  0100               	movlb	0	; () banked
  5719  000850  BFF6               	btfsc	printf@c& (0+255),7,b
  5720  000852  0EFF               	movlw	255
  5721  000854  0100               	movlb	0	; () banked
  5722  000856  5BF5               	subwfb	(printf@prec+1)& (0+255),f,b
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;doprnt.c: 1219: if(c)
  5726  000858  0100               	movlb	0	; () banked
  5727  00085A  51F6               	movf	printf@c& (0+255),w,b
  5728  00085C  0100               	movlb	0	; () banked
  5729  00085E  B4D8               	btfsc	status,2,c
  5730  000860  D003               	goto	l6393
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;doprnt.c: 1221: (putch('.') );
  5734  000862  0E2E               	movlw	46
  5735  000864  EC01  F01D         	call	_putch
  5736  000868                     l6393:
  5737                           
  5738                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5739  000868  0100               	movlb	0	; () banked
  5740  00086A  51F6               	movf	printf@c& (0+255),w,b
  5741  00086C  EC99  F009         	call	_scale
  5742  000870  C0A4  F0D9         	movff	?_scale,_printf$1352
  5743  000874  C0A5  F0DA         	movff	?_scale+1,_printf$1352+1
  5744  000878  C0A6  F0DB         	movff	?_scale+2,_printf$1352+2
  5745                           
  5746                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5747  00087C  C0E9  F098         	movff	printf@fval,___ftmul@f2
  5748  000880  C0EA  F099         	movff	printf@fval+1,___ftmul@f2+1
  5749  000884  C0EB  F09A         	movff	printf@fval+2,___ftmul@f2+2
  5750  000888  C0D9  F095         	movff	_printf$1352,___ftmul@f1
  5751  00088C  C0DA  F096         	movff	_printf$1352+1,___ftmul@f1+1
  5752  000890  C0DB  F097         	movff	_printf$1352+2,___ftmul@f1+2
  5753  000894  ECBC  F010         	call	___ftmul	;wreg free
  5754  000898  C095  F0BA         	movff	?___ftmul,___fttol@f1
  5755  00089C  C096  F0BB         	movff	?___ftmul+1,___fttol@f1+1
  5756  0008A0  C097  F0BC         	movff	?___ftmul+2,___fttol@f1+2
  5757  0008A4  ECBF  F012         	call	___fttol	;wreg free
  5758  0008A8  C0BA  F0EC         	movff	?___fttol,printf@val
  5759  0008AC  C0BB  F0ED         	movff	?___fttol+1,printf@val+1
  5760  0008B0  C0BC  F0EE         	movff	?___fttol+2,printf@val+2
  5761  0008B4  C0BD  F0EF         	movff	?___fttol+3,printf@val+3
  5762                           
  5763                           ;doprnt.c: 1228: while(c--) {
  5764  0008B8  D06E               	goto	l6403
  5765  0008BA                     l6397:
  5766                           
  5767                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5768  0008BA  C0EC  F027         	movff	printf@val,___lldiv@dividend
  5769  0008BE  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  5770  0008C2  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  5771  0008C6  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  5772  0008CA  0100               	movlb	0	; () banked
  5773  0008CC  51F6               	movf	printf@c& (0+255),w,b
  5774  0008CE  0D04               	mullw	4
  5775  0008D0  0E1D               	movlw	low _dpowers
  5776  0008D2  24F3               	addwf	prodl,w,c
  5777  0008D4  6EF6               	movwf	tblptrl,c
  5778  0008D6  0EFE               	movlw	high _dpowers
  5779  0008D8  20F4               	addwfc	prodh,w,c
  5780  0008DA  6EF7               	movwf	tblptrh,c
  5781  0008DC                     	if	0	;There are less than 3 active tblptr bytes
  5782  0008DC                     	endif
  5783  0008DC  0009               	tblrd		*+
  5784  0008DE  CFF5 F02B          	movff	tablat,___lldiv@divisor
  5785  0008E2  0009               	tblrd		*+
  5786  0008E4  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  5787  0008E8  0009               	tblrd		*+
  5788  0008EA  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  5789  0008EE  000A               	tblrd		*-
  5790  0008F0  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  5791  0008F4  ECD5  F019         	call	___lldiv	;wreg free
  5792  0008F8  C027  F0E3         	movff	?___lldiv,printf@tmpval
  5793  0008FC  C028  F0E4         	movff	?___lldiv+1,printf@tmpval+1
  5794  000900  C029  F0E5         	movff	?___lldiv+2,printf@tmpval+2
  5795  000904  C02A  F0E6         	movff	?___lldiv+3,printf@tmpval+3
  5796                           
  5797                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5798  000908  C0E3  F080         	movff	printf@tmpval,___llmod@dividend
  5799  00090C  C0E4  F081         	movff	printf@tmpval+1,___llmod@dividend+1
  5800  000910  C0E5  F082         	movff	printf@tmpval+2,___llmod@dividend+2
  5801  000914  C0E6  F083         	movff	printf@tmpval+3,___llmod@dividend+3
  5802  000918  0E0A               	movlw	10
  5803  00091A  0100               	movlb	0	; () banked
  5804  00091C  6F84               	movwf	___llmod@divisor& (0+255),b
  5805  00091E  0E00               	movlw	0
  5806  000920  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  5807  000922  0E00               	movlw	0
  5808  000924  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  5809  000926  0E00               	movlw	0
  5810  000928  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  5811  00092A  ECFD  F018         	call	___llmod	;wreg free
  5812  00092E  C080  F0E3         	movff	?___llmod,printf@tmpval
  5813  000932  C081  F0E4         	movff	?___llmod+1,printf@tmpval+1
  5814  000936  C082  F0E5         	movff	?___llmod+2,printf@tmpval+2
  5815  00093A  C083  F0E6         	movff	?___llmod+3,printf@tmpval+3
  5816                           
  5817                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5818  00093E  0100               	movlb	0	; () banked
  5819  000940  51E3               	movf	printf@tmpval& (0+255),w,b
  5820  000942  0F30               	addlw	48
  5821  000944  EC01  F01D         	call	_putch
  5822                           
  5823                           ;doprnt.c: 1232: val %= dpowers[c];
  5824  000948  C0EC  F080         	movff	printf@val,___llmod@dividend
  5825  00094C  C0ED  F081         	movff	printf@val+1,___llmod@dividend+1
  5826  000950  C0EE  F082         	movff	printf@val+2,___llmod@dividend+2
  5827  000954  C0EF  F083         	movff	printf@val+3,___llmod@dividend+3
  5828  000958  0100               	movlb	0	; () banked
  5829  00095A  51F6               	movf	printf@c& (0+255),w,b
  5830  00095C  0D04               	mullw	4
  5831  00095E  0E1D               	movlw	low _dpowers
  5832  000960  24F3               	addwf	prodl,w,c
  5833  000962  6EF6               	movwf	tblptrl,c
  5834  000964  0EFE               	movlw	high _dpowers
  5835  000966  20F4               	addwfc	prodh,w,c
  5836  000968  6EF7               	movwf	tblptrh,c
  5837  00096A                     	if	0	;There are less than 3 active tblptr bytes
  5838  00096A                     	endif
  5839  00096A  0009               	tblrd		*+
  5840  00096C  CFF5 F084          	movff	tablat,___llmod@divisor
  5841  000970  0009               	tblrd		*+
  5842  000972  CFF5 F085          	movff	tablat,___llmod@divisor+1
  5843  000976  0009               	tblrd		*+
  5844  000978  CFF5 F086          	movff	tablat,___llmod@divisor+2
  5845  00097C  000A               	tblrd		*-
  5846  00097E  CFF5 F087          	movff	tablat,___llmod@divisor+3
  5847  000982  ECFD  F018         	call	___llmod	;wreg free
  5848  000986  C080  F0EC         	movff	?___llmod,printf@val
  5849  00098A  C081  F0ED         	movff	?___llmod+1,printf@val+1
  5850  00098E  C082  F0EE         	movff	?___llmod+2,printf@val+2
  5851  000992  C083  F0EF         	movff	?___llmod+3,printf@val+3
  5852  000996                     l6403:
  5853  000996  0100               	movlb	0	; () banked
  5854  000998  07F6               	decf	printf@c& (0+255),f,b
  5855  00099A  0100               	movlb	0	; () banked
  5856  00099C  29F6               	incf	printf@c& (0+255),w,b
  5857  00099E  B4D8               	btfsc	status,2,c
  5858  0009A0  D008               	goto	l6409
  5859  0009A2  D78B               	goto	l6397
  5860  0009A4                     l6405:
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;doprnt.c: 1236: (putch('0') );
  5864  0009A4  0E30               	movlw	48
  5865  0009A6  EC01  F01D         	call	_putch
  5866                           
  5867                           ;doprnt.c: 1237: prec--;
  5868  0009AA  0100               	movlb	0	; () banked
  5869  0009AC  07F4               	decf	printf@prec& (0+255),f,b
  5870  0009AE  A0D8               	btfss	status,0,c
  5871  0009B0  07F5               	decf	(printf@prec+1)& (0+255),f,b
  5872  0009B2                     l6409:
  5873                           
  5874                           ; BSR set to: 0
  5875  0009B2  0100               	movlb	0	; () banked
  5876  0009B4  51F4               	movf	printf@prec& (0+255),w,b
  5877  0009B6  0100               	movlb	0	; () banked
  5878  0009B8  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  5879  0009BA  B4D8               	btfsc	status,2,c
  5880  0009BC  D22D               	goto	l6537
  5881  0009BE  D7F2               	goto	l6405
  5882  0009C0                     l726:
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;doprnt.c: 1246: }
  5886                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5887  0009C0  0100               	movlb	0	; () banked
  5888  0009C2  BFF2               	btfsc	printf@flag& (0+255),7,b
  5889  0009C4  D034               	goto	l775
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;doprnt.c: 1253: {
  5893                           ;doprnt.c: 1255: if(flag & 0x10)
  5894  0009C6  0100               	movlb	0	; () banked
  5895  0009C8  A9F2               	btfss	printf@flag& (0+255),4,b
  5896  0009CA  D00E               	goto	l6417
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5900  0009CC  C0E1  FFD9         	movff	printf@ap,fsr2l
  5901  0009D0  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5902  0009D4  CFDE F0EC          	movff	postinc2,printf@val
  5903  0009D8  CFDE F0ED          	movff	postinc2,printf@val+1
  5904  0009DC  CFDE F0EE          	movff	postinc2,printf@val+2
  5905  0009E0  CFDE F0EF          	movff	postinc2,printf@val+3
  5906                           
  5907                           ; BSR set to: 0
  5908  0009E4  0E04               	movlw	4
  5909  0009E6  D00F               	goto	L2
  5910  0009E8                     l6417:
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;doprnt.c: 1257: else
  5914                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5915  0009E8  C0E1  FFD9         	movff	printf@ap,fsr2l
  5916  0009EC  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5917  0009F0  CFDE F0EC          	movff	postinc2,printf@val
  5918  0009F4  CFDD F0ED          	movff	postdec2,printf@val+1
  5919  0009F8  0100               	movlb	0	; () banked
  5920  0009FA  0E00               	movlw	0
  5921  0009FC  BFED               	btfsc	(printf@val+1)& (0+255),7,b
  5922  0009FE  0EFF               	movlw	-1
  5923  000A00  6FEE               	movwf	(printf@val+2)& (0+255),b
  5924  000A02  6FEF               	movwf	(printf@val+3)& (0+255),b
  5925                           
  5926                           ; BSR set to: 0
  5927  000A04  0E02               	movlw	2
  5928  000A06                     L2:
  5929  000A06  0100               	movlb	0	; () banked
  5930  000A08  27E1               	addwf	printf@ap& (0+255),f,b
  5931  000A0A  0E00               	movlw	0
  5932  000A0C  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;doprnt.c: 1261: if((long)val < 0) {
  5936                           
  5937                           ; BSR set to: 0
  5938  000A0E  0100               	movlb	0	; () banked
  5939  000A10  AFEF               	btfss	(printf@val+3)& (0+255),7,b
  5940  000A12  D032               	goto	l6435
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;doprnt.c: 1262: flag |= 0x03;
  5944  000A14  0E03               	movlw	3
  5945  000A16  0100               	movlb	0	; () banked
  5946  000A18  13F2               	iorwf	printf@flag& (0+255),f,b
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;doprnt.c: 1263: val = -val;
  5950  000A1A  0100               	movlb	0	; () banked
  5951  000A1C  1FEF               	comf	(printf@val+3)& (0+255),f,b
  5952  000A1E  1FEE               	comf	(printf@val+2)& (0+255),f,b
  5953  000A20  1FED               	comf	(printf@val+1)& (0+255),f,b
  5954  000A22  6DEC               	negf	printf@val& (0+255),b
  5955  000A24  0E00               	movlw	0
  5956  000A26  23ED               	addwfc	(printf@val+1)& (0+255),f,b
  5957  000A28  23EE               	addwfc	(printf@val+2)& (0+255),f,b
  5958  000A2A  23EF               	addwfc	(printf@val+3)& (0+255),f,b
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;doprnt.c: 1264: }
  5962                           ;doprnt.c: 1266: }
  5963  000A2C  D025               	goto	l6435
  5964  000A2E                     l775:
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;doprnt.c: 1268: else
  5968                           ;doprnt.c: 1273: {
  5969                           ;doprnt.c: 1281: if(flag & 0x10)
  5970  000A2E  0100               	movlb	0	; () banked
  5971  000A30  A9F2               	btfss	printf@flag& (0+255),4,b
  5972  000A32  D00E               	goto	l6431
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5976  000A34  C0E1  FFD9         	movff	printf@ap,fsr2l
  5977  000A38  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5978  000A3C  CFDE F0EC          	movff	postinc2,printf@val
  5979  000A40  CFDE F0ED          	movff	postinc2,printf@val+1
  5980  000A44  CFDE F0EE          	movff	postinc2,printf@val+2
  5981  000A48  CFDE F0EF          	movff	postinc2,printf@val+3
  5982                           
  5983                           ; BSR set to: 0
  5984  000A4C  0E04               	movlw	4
  5985  000A4E  D010               	goto	L3
  5986  000A50                     l6431:
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;doprnt.c: 1283: else
  5990                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5991  000A50  C0E1  FFD9         	movff	printf@ap,fsr2l
  5992  000A54  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5993  000A58  CFDE F0D3          	movff	postinc2,??_printf
  5994  000A5C  CFDD F0D4          	movff	postdec2,??_printf+1
  5995  000A60  C0D3  F0EC         	movff	??_printf,printf@val
  5996  000A64  C0D4  F0ED         	movff	??_printf+1,printf@val+1
  5997  000A68  0100               	movlb	0	; () banked
  5998  000A6A  6BEE               	clrf	(printf@val+2)& (0+255),b
  5999  000A6C  6BEF               	clrf	(printf@val+3)& (0+255),b
  6000                           
  6001                           ; BSR set to: 0
  6002  000A6E  0E02               	movlw	2
  6003  000A70                     L3:
  6004  000A70  0100               	movlb	0	; () banked
  6005  000A72  27E1               	addwf	printf@ap& (0+255),f,b
  6006  000A74  0E00               	movlw	0
  6007  000A76  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  6008  000A78                     l6435:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;doprnt.c: 1287: }
  6012                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6013  000A78  0100               	movlb	0	; () banked
  6014  000A7A  51F4               	movf	printf@prec& (0+255),w,b
  6015  000A7C  0100               	movlb	0	; () banked
  6016  000A7E  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  6017  000A80  A4D8               	btfss	status,2,c
  6018  000A82  D05A               	goto	l6471
  6019                           
  6020                           ; BSR set to: 0
  6021  000A84  0100               	movlb	0	; () banked
  6022  000A86  51EC               	movf	printf@val& (0+255),w,b
  6023  000A88  0100               	movlb	0	; () banked
  6024  000A8A  11ED               	iorwf	(printf@val+1)& (0+255),w,b
  6025  000A8C  0100               	movlb	0	; () banked
  6026  000A8E  11EE               	iorwf	(printf@val+2)& (0+255),w,b
  6027  000A90  0100               	movlb	0	; () banked
  6028  000A92  11EF               	iorwf	(printf@val+3)& (0+255),w,b
  6029  000A94  A4D8               	btfss	status,2,c
  6030  000A96  D050               	goto	l6471
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;doprnt.c: 1291: prec++;
  6034  000A98  0100               	movlb	0	; () banked
  6035  000A9A  4BF4               	infsnz	printf@prec& (0+255),f,b
  6036  000A9C  2BF5               	incf	(printf@prec+1)& (0+255),f,b
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6040  000A9E  D04C               	goto	l6471
  6041  000AA0                     l6441:
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6045  000AA0  0E01               	movlw	1
  6046  000AA2  0100               	movlb	0	; () banked
  6047  000AA4  6FF6               	movwf	printf@c& (0+255),b
  6048  000AA6                     l6443:
  6049                           
  6050                           ; BSR set to: 0
  6051  000AA6  0E0A               	movlw	10
  6052  000AA8  0100               	movlb	0	; () banked
  6053  000AAA  19F6               	xorwf	printf@c& (0+255),w,b
  6054  000AAC  B4D8               	btfsc	status,2,c
  6055  000AAE  D04D               	goto	l6473
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;doprnt.c: 1306: if(val < dpowers[c])
  6059                           
  6060                           ; BSR set to: 0
  6061                           
  6062                           ; BSR set to: 0
  6063  000AB0  0100               	movlb	0	; () banked
  6064  000AB2  51F6               	movf	printf@c& (0+255),w,b
  6065  000AB4  0D04               	mullw	4
  6066  000AB6  0E1D               	movlw	low _dpowers
  6067  000AB8  24F3               	addwf	prodl,w,c
  6068  000ABA  6EF6               	movwf	tblptrl,c
  6069  000ABC  0EFE               	movlw	high _dpowers
  6070  000ABE  20F4               	addwfc	prodh,w,c
  6071  000AC0  6EF7               	movwf	tblptrh,c
  6072  000AC2                     	if	0	;There are less than 3 active tblptr bytes
  6073  000AC2                     	endif
  6074  000AC2  0009               	tblrd		*+
  6075  000AC4  50F5               	movf	tablat,w,c
  6076  000AC6  0100               	movlb	0	; () banked
  6077  000AC8  5DEC               	subwf	printf@val& (0+255),w,b
  6078  000ACA  0009               	tblrd		*+
  6079  000ACC  50F5               	movf	tablat,w,c
  6080  000ACE  0100               	movlb	0	; () banked
  6081  000AD0  59ED               	subwfb	(printf@val+1)& (0+255),w,b
  6082  000AD2  0009               	tblrd		*+
  6083  000AD4  50F5               	movf	tablat,w,c
  6084  000AD6  0100               	movlb	0	; () banked
  6085  000AD8  59EE               	subwfb	(printf@val+2)& (0+255),w,b
  6086  000ADA  0009               	tblrd		*+
  6087  000ADC  50F5               	movf	tablat,w,c
  6088  000ADE  0100               	movlb	0	; () banked
  6089  000AE0  59EF               	subwfb	(printf@val+3)& (0+255),w,b
  6090  000AE2  A0D8               	btfss	status,0,c
  6091  000AE4  D032               	goto	l6473
  6092                           
  6093                           ; BSR set to: 0
  6094                           
  6095                           ; BSR set to: 0
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;doprnt.c: 1307: break;
  6099  000AE6  0100               	movlb	0	; () banked
  6100  000AE8  2BF6               	incf	printf@c& (0+255),f,b
  6101  000AEA  D7DD               	goto	l6443
  6102  000AEC                     l6455:
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6106  000AEC  0E01               	movlw	1
  6107  000AEE  0100               	movlb	0	; () banked
  6108  000AF0  6FF6               	movwf	printf@c& (0+255),b
  6109  000AF2                     l6457:
  6110                           
  6111                           ; BSR set to: 0
  6112  000AF2  0E08               	movlw	8
  6113  000AF4  0100               	movlb	0	; () banked
  6114  000AF6  19F6               	xorwf	printf@c& (0+255),w,b
  6115  000AF8  B4D8               	btfsc	status,2,c
  6116  000AFA  D027               	goto	l6473
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6120                           
  6121                           ; BSR set to: 0
  6122                           
  6123                           ; BSR set to: 0
  6124  000AFC  0100               	movlb	0	; () banked
  6125  000AFE  51F6               	movf	printf@c& (0+255),w,b
  6126  000B00  0D04               	mullw	4
  6127  000B02  0E93               	movlw	low _hexpowers
  6128  000B04  24F3               	addwf	prodl,w,c
  6129  000B06  6EF6               	movwf	tblptrl,c
  6130  000B08  0EFE               	movlw	high _hexpowers
  6131  000B0A  20F4               	addwfc	prodh,w,c
  6132  000B0C  6EF7               	movwf	tblptrh,c
  6133  000B0E                     	if	0	;There are less than 3 active tblptr bytes
  6134  000B0E                     	endif
  6135  000B0E  0009               	tblrd		*+
  6136  000B10  50F5               	movf	tablat,w,c
  6137  000B12  0100               	movlb	0	; () banked
  6138  000B14  5DEC               	subwf	printf@val& (0+255),w,b
  6139  000B16  0009               	tblrd		*+
  6140  000B18  50F5               	movf	tablat,w,c
  6141  000B1A  0100               	movlb	0	; () banked
  6142  000B1C  59ED               	subwfb	(printf@val+1)& (0+255),w,b
  6143  000B1E  0009               	tblrd		*+
  6144  000B20  50F5               	movf	tablat,w,c
  6145  000B22  0100               	movlb	0	; () banked
  6146  000B24  59EE               	subwfb	(printf@val+2)& (0+255),w,b
  6147  000B26  0009               	tblrd		*+
  6148  000B28  50F5               	movf	tablat,w,c
  6149  000B2A  0100               	movlb	0	; () banked
  6150  000B2C  59EF               	subwfb	(printf@val+3)& (0+255),w,b
  6151  000B2E  A0D8               	btfss	status,0,c
  6152  000B30  D00C               	goto	l6473
  6153                           
  6154                           ; BSR set to: 0
  6155                           
  6156                           ; BSR set to: 0
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;doprnt.c: 1318: break;
  6160  000B32  0100               	movlb	0	; () banked
  6161  000B34  2BF6               	incf	printf@c& (0+255),f,b
  6162  000B36  D7DD               	goto	l6457
  6163  000B38                     l6471:
  6164                           
  6165                           ; BSR set to: 0
  6166  000B38  0100               	movlb	0	; () banked
  6167  000B3A  51F2               	movf	printf@flag& (0+255),w,b
  6168  000B3C  0B80               	andlw	128
  6169                           
  6170                           ; Switch size 1, requested type "space"
  6171                           ; Number of cases is 2, Range of values is 0 to 128
  6172                           ; switch strategies available:
  6173                           ; Name         Instructions Cycles
  6174                           ; simple_byte            7     4 (average)
  6175                           ;	Chosen strategy is simple_byte
  6176  000B3E  0A00               	xorlw	0	; case 0
  6177  000B40  B4D8               	btfsc	status,2,c
  6178  000B42  D7AE               	goto	l6441
  6179  000B44  0A80               	xorlw	128	; case 128
  6180  000B46  B4D8               	btfsc	status,2,c
  6181  000B48  D7D1               	goto	l6455
  6182  000B4A                     l6473:
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;doprnt.c: 1339: if(c < prec)
  6186  000B4A  0E80               	movlw	128
  6187  000B4C  0100               	movlb	0	; () banked
  6188  000B4E  BFF6               	btfsc	printf@c& (0+255),7,b
  6189  000B50  0E7F               	movlw	127
  6190  000B52  0100               	movlb	0	; () banked
  6191  000B54  6FD3               	movwf	??_printf& (0+255),b
  6192  000B56  0100               	movlb	0	; () banked
  6193  000B58  51F4               	movf	printf@prec& (0+255),w,b
  6194  000B5A  0100               	movlb	0	; () banked
  6195  000B5C  5DF6               	subwf	printf@c& (0+255),w,b
  6196  000B5E  0100               	movlb	0	; () banked
  6197  000B60  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6198  000B62  0A80               	xorlw	128
  6199  000B64  0100               	movlb	0	; () banked
  6200  000B66  59D3               	subwfb	??_printf& (0+255),w,b
  6201  000B68  B0D8               	btfsc	status,0,c
  6202  000B6A  D003               	goto	l6477
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;doprnt.c: 1340: c = prec;
  6206  000B6C  C0F4  F0F6         	movff	printf@prec,printf@c
  6207  000B70  D018               	goto	l6481
  6208  000B72                     l6477:
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;doprnt.c: 1341: else if(prec < c)
  6212  000B72  0100               	movlb	0	; () banked
  6213  000B74  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6214  000B76  0A80               	xorlw	128
  6215  000B78  0100               	movlb	0	; () banked
  6216  000B7A  6FD3               	movwf	??_printf& (0+255),b
  6217  000B7C  0100               	movlb	0	; () banked
  6218  000B7E  51F6               	movf	printf@c& (0+255),w,b
  6219  000B80  0100               	movlb	0	; () banked
  6220  000B82  5DF4               	subwf	printf@prec& (0+255),w,b
  6221  000B84  0E80               	movlw	128
  6222  000B86  0100               	movlb	0	; () banked
  6223  000B88  BFF6               	btfsc	printf@c& (0+255),7,b
  6224  000B8A  0E7F               	movlw	127
  6225  000B8C  0100               	movlb	0	; () banked
  6226  000B8E  59D3               	subwfb	??_printf& (0+255),w,b
  6227  000B90  B0D8               	btfsc	status,0,c
  6228  000B92  D007               	goto	l6481
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;doprnt.c: 1342: prec = c;
  6232  000B94  0100               	movlb	0	; () banked
  6233  000B96  51F6               	movf	printf@c& (0+255),w,b
  6234  000B98  0100               	movlb	0	; () banked
  6235  000B9A  6FF4               	movwf	printf@prec& (0+255),b
  6236  000B9C  6BF5               	clrf	(printf@prec+1)& (0+255),b
  6237  000B9E  BFF4               	btfsc	printf@prec& (0+255),7,b
  6238  000BA0  07F5               	decf	(printf@prec+1)& (0+255),f,b
  6239  000BA2                     l6481:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6243  000BA2  0100               	movlb	0	; () banked
  6244  000BA4  51F0               	movf	printf@width& (0+255),w,b
  6245  000BA6  0100               	movlb	0	; () banked
  6246  000BA8  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6247  000BAA  B4D8               	btfsc	status,2,c
  6248  000BAC  D014               	goto	l6487
  6249                           
  6250                           ; BSR set to: 0
  6251  000BAE  0E03               	movlw	3
  6252  000BB0  0100               	movlb	0	; () banked
  6253  000BB2  15F2               	andwf	printf@flag& (0+255),w,b
  6254  000BB4  0100               	movlb	0	; () banked
  6255  000BB6  6FD3               	movwf	??_printf& (0+255),b
  6256  000BB8  0E00               	movlw	0
  6257  000BBA  0100               	movlb	0	; () banked
  6258  000BBC  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  6259  000BBE  0100               	movlb	0	; () banked
  6260  000BC0  6FD4               	movwf	(??_printf+1)& (0+255),b
  6261  000BC2  0100               	movlb	0	; () banked
  6262  000BC4  51D3               	movf	??_printf& (0+255),w,b
  6263  000BC6  0100               	movlb	0	; () banked
  6264  000BC8  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  6265  000BCA  B4D8               	btfsc	status,2,c
  6266  000BCC  D004               	goto	l6487
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;doprnt.c: 1346: width--;
  6270  000BCE  0100               	movlb	0	; () banked
  6271  000BD0  07F0               	decf	printf@width& (0+255),f,b
  6272  000BD2  A0D8               	btfss	status,0,c
  6273  000BD4  07F1               	decf	(printf@width+1)& (0+255),f,b
  6274  000BD6                     l6487:
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6278  000BD6  0100               	movlb	0	; () banked
  6279  000BD8  ADF3               	btfss	(printf@flag+1)& (0+255),6,b
  6280  000BDA  D01E               	goto	l6495
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;doprnt.c: 1349: if(width > prec)
  6284  000BDC  0100               	movlb	0	; () banked
  6285  000BDE  51F0               	movf	printf@width& (0+255),w,b
  6286  000BE0  0100               	movlb	0	; () banked
  6287  000BE2  5DF4               	subwf	printf@prec& (0+255),w,b
  6288  000BE4  0100               	movlb	0	; () banked
  6289  000BE6  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6290  000BE8  0A80               	xorlw	128
  6291  000BEA  0100               	movlb	0	; () banked
  6292  000BEC  6FD3               	movwf	??_printf& (0+255),b
  6293  000BEE  0100               	movlb	0	; () banked
  6294  000BF0  51F1               	movf	(printf@width+1)& (0+255),w,b
  6295  000BF2  0A80               	xorlw	128
  6296  000BF4  0100               	movlb	0	; () banked
  6297  000BF6  59D3               	subwfb	??_printf& (0+255),w,b
  6298  000BF8  B0D8               	btfsc	status,0,c
  6299  000BFA  D009               	goto	l6493
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;doprnt.c: 1350: width -= prec;
  6303  000BFC  0100               	movlb	0	; () banked
  6304  000BFE  51F4               	movf	printf@prec& (0+255),w,b
  6305  000C00  0100               	movlb	0	; () banked
  6306  000C02  5FF0               	subwf	printf@width& (0+255),f,b
  6307  000C04  0100               	movlb	0	; () banked
  6308  000C06  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6309  000C08  0100               	movlb	0	; () banked
  6310  000C0A  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  6311  000C0C  D005               	goto	l6495
  6312  000C0E                     l6493:
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;doprnt.c: 1351: else
  6316                           ;doprnt.c: 1352: width = 0;
  6317  000C0E  0E00               	movlw	0
  6318  000C10  0100               	movlb	0	; () banked
  6319  000C12  6FF1               	movwf	(printf@width+1)& (0+255),b
  6320  000C14  0E00               	movlw	0
  6321  000C16  6FF0               	movwf	printf@width& (0+255),b
  6322  000C18                     l6495:
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;doprnt.c: 1353: }
  6326                           ;doprnt.c: 1381: if(width > c)
  6327  000C18  0E80               	movlw	128
  6328  000C1A  0100               	movlb	0	; () banked
  6329  000C1C  BFF6               	btfsc	printf@c& (0+255),7,b
  6330  000C1E  0E7F               	movlw	127
  6331  000C20  0100               	movlb	0	; () banked
  6332  000C22  6FD3               	movwf	??_printf& (0+255),b
  6333  000C24  0100               	movlb	0	; () banked
  6334  000C26  51F0               	movf	printf@width& (0+255),w,b
  6335  000C28  0100               	movlb	0	; () banked
  6336  000C2A  5DF6               	subwf	printf@c& (0+255),w,b
  6337  000C2C  0100               	movlb	0	; () banked
  6338  000C2E  51F1               	movf	(printf@width+1)& (0+255),w,b
  6339  000C30  0A80               	xorlw	128
  6340  000C32  0100               	movlb	0	; () banked
  6341  000C34  59D3               	subwfb	??_printf& (0+255),w,b
  6342  000C36  B0D8               	btfsc	status,0,c
  6343  000C38  D00B               	goto	l6499
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;doprnt.c: 1382: width -= c;
  6347  000C3A  0100               	movlb	0	; () banked
  6348  000C3C  51F6               	movf	printf@c& (0+255),w,b
  6349  000C3E  0100               	movlb	0	; () banked
  6350  000C40  5FF0               	subwf	printf@width& (0+255),f,b
  6351  000C42  0E00               	movlw	0
  6352  000C44  0100               	movlb	0	; () banked
  6353  000C46  BFF6               	btfsc	printf@c& (0+255),7,b
  6354  000C48  0EFF               	movlw	255
  6355  000C4A  0100               	movlb	0	; () banked
  6356  000C4C  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  6357  000C4E  D005               	goto	l6501
  6358  000C50                     l6499:
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;doprnt.c: 1383: else
  6362                           ;doprnt.c: 1384: width = 0;
  6363  000C50  0E00               	movlw	0
  6364  000C52  0100               	movlb	0	; () banked
  6365  000C54  6FF1               	movwf	(printf@width+1)& (0+255),b
  6366  000C56  0E00               	movlw	0
  6367  000C58  6FF0               	movwf	printf@width& (0+255),b
  6368  000C5A                     l6501:
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;doprnt.c: 1387: if(flag & 0x04) {
  6372  000C5A  0100               	movlb	0	; () banked
  6373  000C5C  A5F2               	btfss	printf@flag& (0+255),2,b
  6374  000C5E  D021               	goto	l6513
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;doprnt.c: 1392: if(flag & 0x03)
  6378  000C60  0E03               	movlw	3
  6379  000C62  0100               	movlb	0	; () banked
  6380  000C64  15F2               	andwf	printf@flag& (0+255),w,b
  6381  000C66  0100               	movlb	0	; () banked
  6382  000C68  6FD3               	movwf	??_printf& (0+255),b
  6383  000C6A  0E00               	movlw	0
  6384  000C6C  0100               	movlb	0	; () banked
  6385  000C6E  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  6386  000C70  0100               	movlb	0	; () banked
  6387  000C72  6FD4               	movwf	(??_printf+1)& (0+255),b
  6388  000C74  0100               	movlb	0	; () banked
  6389  000C76  51D3               	movf	??_printf& (0+255),w,b
  6390  000C78  0100               	movlb	0	; () banked
  6391  000C7A  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  6392  000C7C  B4D8               	btfsc	status,2,c
  6393  000C7E  D003               	goto	l6507
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;doprnt.c: 1393: (putch('-') );
  6397  000C80  0E2D               	movlw	45
  6398  000C82  EC01  F01D         	call	_putch
  6399  000C86                     l6507:
  6400                           
  6401                           ;doprnt.c: 1415: if(width)
  6402  000C86  0100               	movlb	0	; () banked
  6403  000C88  51F0               	movf	printf@width& (0+255),w,b
  6404  000C8A  0100               	movlb	0	; () banked
  6405  000C8C  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6406  000C8E  B4D8               	btfsc	status,2,c
  6407  000C90  D0B8               	goto	l6535
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;doprnt.c: 1417: (putch('0') );
  6411                           
  6412                           ; BSR set to: 0
  6413                           
  6414                           ;doprnt.c: 1416: do
  6415  000C92  0E30               	movlw	48
  6416  000C94  EC01  F01D         	call	_putch
  6417                           
  6418                           ;doprnt.c: 1418: while(--width);
  6419  000C98  0100               	movlb	0	; () banked
  6420  000C9A  07F0               	decf	printf@width& (0+255),f,b
  6421  000C9C  A0D8               	btfss	status,0,c
  6422  000C9E  07F1               	decf	(printf@width+1)& (0+255),f,b
  6423  000CA0  D7F2               	goto	l6507
  6424  000CA2                     l6513:
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;doprnt.c: 1422: {
  6428                           ;doprnt.c: 1424: if(width
  6429                           ;doprnt.c: 1428: )
  6430  000CA2  0100               	movlb	0	; () banked
  6431  000CA4  51F0               	movf	printf@width& (0+255),w,b
  6432  000CA6  0100               	movlb	0	; () banked
  6433  000CA8  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6434  000CAA  B4D8               	btfsc	status,2,c
  6435  000CAC  D00D               	goto	l6519
  6436  000CAE                     l6515:
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;doprnt.c: 1430: (putch(' ') );
  6440  000CAE  0E20               	movlw	32
  6441  000CB0  EC01  F01D         	call	_putch
  6442                           
  6443                           ;doprnt.c: 1431: while(--width);
  6444  000CB4  0100               	movlb	0	; () banked
  6445  000CB6  07F0               	decf	printf@width& (0+255),f,b
  6446  000CB8  A0D8               	btfss	status,0,c
  6447  000CBA  07F1               	decf	(printf@width+1)& (0+255),f,b
  6448  000CBC  0100               	movlb	0	; () banked
  6449  000CBE  51F0               	movf	printf@width& (0+255),w,b
  6450  000CC0  0100               	movlb	0	; () banked
  6451  000CC2  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6452  000CC4  A4D8               	btfss	status,2,c
  6453  000CC6  D7F3               	goto	l6515
  6454  000CC8                     l6519:
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;doprnt.c: 1438: if(flag & 0x03)
  6458  000CC8  0E03               	movlw	3
  6459  000CCA  0100               	movlb	0	; () banked
  6460  000CCC  15F2               	andwf	printf@flag& (0+255),w,b
  6461  000CCE  0100               	movlb	0	; () banked
  6462  000CD0  6FD3               	movwf	??_printf& (0+255),b
  6463  000CD2  0E00               	movlw	0
  6464  000CD4  0100               	movlb	0	; () banked
  6465  000CD6  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  6466  000CD8  0100               	movlb	0	; () banked
  6467  000CDA  6FD4               	movwf	(??_printf+1)& (0+255),b
  6468  000CDC  0100               	movlb	0	; () banked
  6469  000CDE  51D3               	movf	??_printf& (0+255),w,b
  6470  000CE0  0100               	movlb	0	; () banked
  6471  000CE2  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  6472  000CE4  B4D8               	btfsc	status,2,c
  6473  000CE6  D08D               	goto	l6535
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;doprnt.c: 1439: (putch('-') );
  6477  000CE8  0E2D               	movlw	45
  6478  000CEA  EC01  F01D         	call	_putch
  6479                           
  6480                           ;doprnt.c: 1469: }
  6481                           ;doprnt.c: 1474: while(prec--) {
  6482  000CEE  D089               	goto	l6535
  6483  000CF0                     l6523:
  6484                           
  6485                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6486  000CF0  C0F4  F0D3         	movff	printf@prec,??_printf
  6487  000CF4  C0F5  F0D4         	movff	printf@prec+1,??_printf+1
  6488  000CF8  0100               	movlb	0	; () banked
  6489  000CFA  90D8               	bcf	status,0,c
  6490  000CFC  37D3               	rlcf	??_printf& (0+255),f,b
  6491  000CFE  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6492  000D00  0100               	movlb	0	; () banked
  6493  000D02  90D8               	bcf	status,0,c
  6494  000D04  37D3               	rlcf	??_printf& (0+255),f,b
  6495  000D06  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6496  000D08  0E1D               	movlw	low _dpowers
  6497  000D0A  0100               	movlb	0	; () banked
  6498  000D0C  25D3               	addwf	??_printf& (0+255),w,b
  6499  000D0E  6EF6               	movwf	tblptrl,c
  6500  000D10  0EFE               	movlw	high _dpowers
  6501  000D12  21D4               	addwfc	(??_printf+1)& (0+255),w,b
  6502  000D14  6EF7               	movwf	tblptrh,c
  6503  000D16                     	if	0	;There are less than 3 active tblptr bytes
  6504  000D16                     	endif
  6505  000D16  0009               	tblrd		*+
  6506  000D18  CFF5 F02B          	movff	tablat,___lldiv@divisor
  6507  000D1C  0009               	tblrd		*+
  6508  000D1E  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  6509  000D22  0009               	tblrd		*+
  6510  000D24  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  6511  000D28  000A               	tblrd		*-
  6512  000D2A  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  6513  000D2E  C0EC  F027         	movff	printf@val,___lldiv@dividend
  6514  000D32  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  6515  000D36  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  6516  000D3A  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  6517  000D3E  ECD5  F019         	call	___lldiv	;wreg free
  6518  000D42  C027  F080         	movff	?___lldiv,___llmod@dividend
  6519  000D46  C028  F081         	movff	?___lldiv+1,___llmod@dividend+1
  6520  000D4A  C029  F082         	movff	?___lldiv+2,___llmod@dividend+2
  6521  000D4E  C02A  F083         	movff	?___lldiv+3,___llmod@dividend+3
  6522  000D52  0E0A               	movlw	10
  6523  000D54  0100               	movlb	0	; () banked
  6524  000D56  6F84               	movwf	___llmod@divisor& (0+255),b
  6525  000D58  0E00               	movlw	0
  6526  000D5A  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  6527  000D5C  0E00               	movlw	0
  6528  000D5E  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  6529  000D60  0E00               	movlw	0
  6530  000D62  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  6531  000D64  ECFD  F018         	call	___llmod	;wreg free
  6532  000D68  0100               	movlb	0	; () banked
  6533  000D6A  5180               	movf	?___llmod& (0+255),w,b
  6534  000D6C  0F30               	addlw	48
  6535  000D6E  0100               	movlb	0	; () banked
  6536  000D70  6FF6               	movwf	printf@c& (0+255),b
  6537                           
  6538                           ;doprnt.c: 1491: break;
  6539  000D72  D043               	goto	l6533
  6540  000D74                     l6525:
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;doprnt.c: 1499: {
  6544                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6545  000D74  C0EC  F027         	movff	printf@val,___lldiv@dividend
  6546  000D78  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  6547  000D7C  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  6548  000D80  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  6549  000D84  C0F4  F0D3         	movff	printf@prec,??_printf
  6550  000D88  C0F5  F0D4         	movff	printf@prec+1,??_printf+1
  6551  000D8C  0100               	movlb	0	; () banked
  6552  000D8E  90D8               	bcf	status,0,c
  6553  000D90  37D3               	rlcf	??_printf& (0+255),f,b
  6554  000D92  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6555  000D94  0100               	movlb	0	; () banked
  6556  000D96  90D8               	bcf	status,0,c
  6557  000D98  37D3               	rlcf	??_printf& (0+255),f,b
  6558  000D9A  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6559  000D9C  0E93               	movlw	low _hexpowers
  6560  000D9E  0100               	movlb	0	; () banked
  6561  000DA0  25D3               	addwf	??_printf& (0+255),w,b
  6562  000DA2  6EF6               	movwf	tblptrl,c
  6563  000DA4  0EFE               	movlw	high _hexpowers
  6564  000DA6  21D4               	addwfc	(??_printf+1)& (0+255),w,b
  6565  000DA8  6EF7               	movwf	tblptrh,c
  6566  000DAA                     	if	0	;There are less than 3 active tblptr bytes
  6567  000DAA                     	endif
  6568  000DAA  0009               	tblrd		*+
  6569  000DAC  CFF5 F02B          	movff	tablat,___lldiv@divisor
  6570  000DB0  0009               	tblrd		*+
  6571  000DB2  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  6572  000DB6  0009               	tblrd		*+
  6573  000DB8  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  6574  000DBC  000A               	tblrd		*-
  6575  000DBE  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  6576  000DC2  ECD5  F019         	call	___lldiv	;wreg free
  6577  000DC6  5027               	movf	?___lldiv,w,c
  6578  000DC8  0B0F               	andlw	15
  6579  000DCA  0100               	movlb	0	; () banked
  6580  000DCC  6FDC               	movwf	printf@idx& (0+255),b
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6584  000DCE  0100               	movlb	0	; () banked
  6585  000DD0  51DC               	movf	printf@idx& (0+255),w,b
  6586  000DD2  0D01               	mullw	1
  6587  000DD4  0E38               	movlw	low STR_19
  6588  000DD6  24F3               	addwf	prodl,w,c
  6589  000DD8  6EF6               	movwf	tblptrl,c
  6590  000DDA  0EFF               	movlw	high STR_19
  6591  000DDC  20F4               	addwfc	prodh,w,c
  6592  000DDE  6EF7               	movwf	tblptrh,c
  6593  000DE0                     	if	0	;There are less than 3 active tblptr bytes
  6594  000DE0                     	endif
  6595  000DE0  0008               	tblrd		*
  6596  000DE2  CFF5 F0F6          	movff	tablat,printf@c
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;doprnt.c: 1523: }
  6600                           
  6601                           ;doprnt.c: 1508: }
  6602                           ;doprnt.c: 1510: break;
  6603  000DE6  D009               	goto	l6533
  6604  000DE8                     l6531:
  6605  000DE8  0100               	movlb	0	; () banked
  6606  000DEA  51F2               	movf	printf@flag& (0+255),w,b
  6607  000DEC  0B80               	andlw	128
  6608                           
  6609                           ; Switch size 1, requested type "space"
  6610                           ; Number of cases is 2, Range of values is 0 to 128
  6611                           ; switch strategies available:
  6612                           ; Name         Instructions Cycles
  6613                           ; simple_byte            7     4 (average)
  6614                           ;	Chosen strategy is simple_byte
  6615  000DEE  0A00               	xorlw	0	; case 0
  6616  000DF0  B4D8               	btfsc	status,2,c
  6617  000DF2  D77E               	goto	l6523
  6618  000DF4  0A80               	xorlw	128	; case 128
  6619  000DF6  B4D8               	btfsc	status,2,c
  6620  000DF8  D7BD               	goto	l6525
  6621  000DFA                     l6533:
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;doprnt.c: 1524: (putch(c) );
  6625  000DFA  0100               	movlb	0	; () banked
  6626  000DFC  51F6               	movf	printf@c& (0+255),w,b
  6627  000DFE  EC01  F01D         	call	_putch
  6628  000E02                     l6535:
  6629  000E02  0100               	movlb	0	; () banked
  6630  000E04  07F4               	decf	printf@prec& (0+255),f,b
  6631  000E06  A0D8               	btfss	status,0,c
  6632  000E08  07F5               	decf	(printf@prec+1)& (0+255),f,b
  6633  000E0A  0100               	movlb	0	; () banked
  6634  000E0C  29F4               	incf	printf@prec& (0+255),w,b
  6635  000E0E  E1EC               	bnz	l6531
  6636  000E10  0100               	movlb	0	; () banked
  6637  000E12  29F5               	incf	(printf@prec+1)& (0+255),w,b
  6638  000E14  A4D8               	btfss	status,2,c
  6639  000E16  D7E8               	goto	l6531
  6640  000E18                     l6537:
  6641  000E18  C0C9  FFF6         	movff	printf@f,tblptrl
  6642  000E1C  C0CA  FFF7         	movff	printf@f+1,tblptrh
  6643  000E20  0100               	movlb	0	; () banked
  6644  000E22  4BC9               	infsnz	printf@f& (0+255),f,b
  6645  000E24  2BCA               	incf	(printf@f+1)& (0+255),f,b
  6646  000E26                     	if	0	;tblptru may be non-zero
  6647  000E26                     	endif
  6648  000E26                     	if	0	;tblptru may be non-zero
  6649  000E26                     	endif
  6650  000E26  0008               	tblrd		*
  6651  000E28  CFF5 F0F6          	movff	tablat,printf@c
  6652  000E2C  0100               	movlb	0	; () banked
  6653  000E2E  51F6               	movf	printf@c& (0+255),w,b
  6654  000E30  B4D8               	btfsc	status,2,c
  6655  000E32  0012               	return	
  6656  000E34  EF11  F000         	goto	l6171
  6657  000E38                     __end_of_printf:
  6658                           	opt stack 0
  6659                           tblptru	equ	0xFF8
  6660                           tblptrh	equ	0xFF7
  6661                           tblptrl	equ	0xFF6
  6662                           tablat	equ	0xFF5
  6663                           prodh	equ	0xFF4
  6664                           prodl	equ	0xFF3
  6665                           postinc0	equ	0xFEE
  6666                           wreg	equ	0xFE8
  6667                           postdec1	equ	0xFE5
  6668                           fsr1l	equ	0xFE1
  6669                           indf2	equ	0xFDF
  6670                           postinc2	equ	0xFDE
  6671                           postdec2	equ	0xFDD
  6672                           fsr2h	equ	0xFDA
  6673                           fsr2l	equ	0xFD9
  6674                           status	equ	0xFD8
  6675                           
  6676 ;; *************** function _scale *****************
  6677 ;; Defined at:
  6678 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  scl             1    wreg     char 
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  scl             1   42[BANK0 ] char 
  6683 ;; Return value:  Size  Location     Type
  6684 ;;                  3   36[BANK0 ] char 
  6685 ;; Registers used:
  6686 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6692 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;Total ram usage:        7 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; Hardware stack levels required when called:    5
  6699 ;; This function calls:
  6700 ;;		___awdiv
  6701 ;;		___awmod
  6702 ;;		___ftmul
  6703 ;;		___wmul
  6704 ;; This function is called by:
  6705 ;;		_printf
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	text14
  6710  001332                     __ptext14:
  6711                           	opt stack 0
  6712  001332                     _scale:
  6713                           	opt stack 23
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;incstack = 0
  6717                           ;scale@scl stored from wreg
  6718  001332  0100               	movlb	0	; () banked
  6719  001334  6FAA               	movwf	scale@scl& (0+255),b
  6720                           
  6721                           ;doprnt.c: 428: if(scl < 0) {
  6722  001336  0100               	movlb	0	; () banked
  6723  001338  AFAA               	btfss	scale@scl& (0+255),7,b
  6724  00133A  D119               	goto	l5823
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;doprnt.c: 429: scl = -scl;
  6728  00133C  0100               	movlb	0	; () banked
  6729  00133E  6DAA               	negf	scale@scl& (0+255),b
  6730                           
  6731                           ;doprnt.c: 430: if(scl>=110)
  6732  001340  0100               	movlb	0	; () banked
  6733  001342  51AA               	movf	scale@scl& (0+255),w,b
  6734  001344  0A80               	xorlw	128
  6735  001346  0F12               	addlw	-238
  6736  001348  A0D8               	btfss	status,0,c
  6737  00134A  D0A1               	goto	l5813
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6741  00134C  0E00               	movlw	0
  6742  00134E  0100               	movlb	0	; () banked
  6743  001350  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6744  001352  0E03               	movlw	3
  6745  001354  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6746  001356  0E00               	movlw	0
  6747  001358  6E30               	movwf	___awdiv@divisor+1,c
  6748  00135A  0E0A               	movlw	10
  6749  00135C  6E2F               	movwf	___awdiv@divisor,c
  6750  00135E  0E00               	movlw	0
  6751  001360  6E2A               	movwf	___awmod@divisor+1,c
  6752  001362  0E64               	movlw	100
  6753  001364  6E29               	movwf	___awmod@divisor,c
  6754  001366  0100               	movlb	0	; () banked
  6755  001368  51AA               	movf	scale@scl& (0+255),w,b
  6756  00136A  6E27               	movwf	___awmod@dividend,c
  6757  00136C  6A28               	clrf	___awmod@dividend+1,c
  6758  00136E  BE27               	btfsc	___awmod@dividend,7,c
  6759  001370  0628               	decf	___awmod@dividend+1,f,c
  6760  001372  EC16  F01A         	call	___awmod	;wreg free
  6761  001376  C027  F02D         	movff	?___awmod,___awdiv@dividend
  6762  00137A  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  6763  00137E  ECAF  F018         	call	___awdiv	;wreg free
  6764  001382  0E09               	movlw	9
  6765  001384  242D               	addwf	?___awdiv,w,c
  6766  001386  0100               	movlb	0	; () banked
  6767  001388  6F84               	movwf	___wmul@multiplier& (0+255),b
  6768  00138A  0E00               	movlw	0
  6769  00138C  202E               	addwfc	?___awdiv+1,w,c
  6770  00138E  0100               	movlb	0	; () banked
  6771  001390  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  6772  001392  EC4D  F01C         	call	___wmul	;wreg free
  6773  001396  0E45               	movlw	low __npowers_
  6774  001398  0100               	movlb	0	; () banked
  6775  00139A  2584               	addwf	?___wmul& (0+255),w,b
  6776  00139C  6EF6               	movwf	tblptrl,c
  6777  00139E  0EFE               	movlw	high __npowers_
  6778  0013A0  0100               	movlb	0	; () banked
  6779  0013A2  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6780  0013A4  6EF7               	movwf	tblptrh,c
  6781  0013A6                     	if	0	;There are less than 3 active tblptr bytes
  6782  0013A6                     	endif
  6783  0013A6  0009               	tblrd		*+
  6784  0013A8  CFF5 F098          	movff	tablat,___ftmul@f2
  6785  0013AC  0009               	tblrd		*+
  6786  0013AE  CFF5 F099          	movff	tablat,___ftmul@f2+1
  6787  0013B2  000A               	tblrd		*-
  6788  0013B4  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  6789  0013B8  0E00               	movlw	0
  6790  0013BA  6E30               	movwf	___awdiv@divisor+1,c
  6791  0013BC  0E64               	movlw	100
  6792  0013BE  6E2F               	movwf	___awdiv@divisor,c
  6793  0013C0  0100               	movlb	0	; () banked
  6794  0013C2  51AA               	movf	scale@scl& (0+255),w,b
  6795  0013C4  6E2D               	movwf	___awdiv@dividend,c
  6796  0013C6  6A2E               	clrf	___awdiv@dividend+1,c
  6797  0013C8  BE2D               	btfsc	___awdiv@dividend,7,c
  6798  0013CA  062E               	decf	___awdiv@dividend+1,f,c
  6799  0013CC  ECAF  F018         	call	___awdiv	;wreg free
  6800  0013D0  0E12               	movlw	18
  6801  0013D2  242D               	addwf	?___awdiv,w,c
  6802  0013D4  0100               	movlb	0	; () banked
  6803  0013D6  6F84               	movwf	___wmul@multiplier& (0+255),b
  6804  0013D8  0E00               	movlw	0
  6805  0013DA  202E               	addwfc	?___awdiv+1,w,c
  6806  0013DC  0100               	movlb	0	; () banked
  6807  0013DE  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  6808  0013E0  0E00               	movlw	0
  6809  0013E2  0100               	movlb	0	; () banked
  6810  0013E4  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6811  0013E6  0E03               	movlw	3
  6812  0013E8  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6813  0013EA  EC4D  F01C         	call	___wmul	;wreg free
  6814  0013EE  0E45               	movlw	low __npowers_
  6815  0013F0  0100               	movlb	0	; () banked
  6816  0013F2  2584               	addwf	?___wmul& (0+255),w,b
  6817  0013F4  6EF6               	movwf	tblptrl,c
  6818  0013F6  0EFE               	movlw	high __npowers_
  6819  0013F8  0100               	movlb	0	; () banked
  6820  0013FA  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6821  0013FC  6EF7               	movwf	tblptrh,c
  6822  0013FE                     	if	0	;There are less than 3 active tblptr bytes
  6823  0013FE                     	endif
  6824  0013FE  0009               	tblrd		*+
  6825  001400  CFF5 F095          	movff	tablat,___ftmul@f1
  6826  001404  0009               	tblrd		*+
  6827  001406  CFF5 F096          	movff	tablat,___ftmul@f1+1
  6828  00140A  000A               	tblrd		*-
  6829  00140C  CFF5 F097          	movff	tablat,___ftmul@f1+2
  6830  001410  ECBC  F010         	call	___ftmul	;wreg free
  6831  001414  C095  F0A7         	movff	?___ftmul,_scale$1351
  6832  001418  C096  F0A8         	movff	?___ftmul+1,_scale$1351+1
  6833  00141C  C097  F0A9         	movff	?___ftmul+2,_scale$1351+2
  6834                           
  6835                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6836  001420  C0A7  F095         	movff	_scale$1351,___ftmul@f1
  6837  001424  C0A8  F096         	movff	_scale$1351+1,___ftmul@f1+1
  6838  001428  C0A9  F097         	movff	_scale$1351+2,___ftmul@f1+2
  6839  00142C  0E00               	movlw	0
  6840  00142E  0100               	movlb	0	; () banked
  6841  001430  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6842  001432  0E03               	movlw	3
  6843  001434  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6844  001436  0E00               	movlw	0
  6845  001438  6E2A               	movwf	___awmod@divisor+1,c
  6846  00143A  0E0A               	movlw	10
  6847  00143C  6E29               	movwf	___awmod@divisor,c
  6848  00143E  0100               	movlb	0	; () banked
  6849  001440  51AA               	movf	scale@scl& (0+255),w,b
  6850  001442  6E27               	movwf	___awmod@dividend,c
  6851  001444  6A28               	clrf	___awmod@dividend+1,c
  6852  001446  BE27               	btfsc	___awmod@dividend,7,c
  6853  001448  0628               	decf	___awmod@dividend+1,f,c
  6854  00144A  EC16  F01A         	call	___awmod	;wreg free
  6855  00144E  C027  F084         	movff	?___awmod,___wmul@multiplier
  6856  001452  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  6857  001456  EC4D  F01C         	call	___wmul	;wreg free
  6858  00145A  0E45               	movlw	low __npowers_
  6859  00145C  0100               	movlb	0	; () banked
  6860  00145E  2584               	addwf	?___wmul& (0+255),w,b
  6861  001460  6EF6               	movwf	tblptrl,c
  6862  001462  0EFE               	movlw	high __npowers_
  6863  001464  0100               	movlb	0	; () banked
  6864  001466  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6865  001468  6EF7               	movwf	tblptrh,c
  6866  00146A                     	if	0	;There are less than 3 active tblptr bytes
  6867  00146A                     	endif
  6868  00146A  0009               	tblrd		*+
  6869  00146C  CFF5 F098          	movff	tablat,___ftmul@f2
  6870  001470  0009               	tblrd		*+
  6871  001472  CFF5 F099          	movff	tablat,___ftmul@f2+1
  6872  001476  000A               	tblrd		*-
  6873  001478  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  6874  00147C  ECBC  F010         	call	___ftmul	;wreg free
  6875  001480  C095  F0A4         	movff	?___ftmul,?_scale
  6876  001484  C096  F0A5         	movff	?___ftmul+1,?_scale+1
  6877  001488  C097  F0A6         	movff	?___ftmul+2,?_scale+2
  6878  00148C  0012               	return	
  6879  00148E                     l5813:
  6880                           
  6881                           ;doprnt.c: 432: else if(scl > 10)
  6882  00148E  0100               	movlb	0	; () banked
  6883  001490  51AA               	movf	scale@scl& (0+255),w,b
  6884  001492  0A80               	xorlw	128
  6885  001494  0F75               	addlw	-139
  6886  001496  A0D8               	btfss	status,0,c
  6887  001498  D057               	goto	l5819
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6891  00149A  0E00               	movlw	0
  6892  00149C  6E30               	movwf	___awdiv@divisor+1,c
  6893  00149E  0E0A               	movlw	10
  6894  0014A0  6E2F               	movwf	___awdiv@divisor,c
  6895  0014A2  0100               	movlb	0	; () banked
  6896  0014A4  51AA               	movf	scale@scl& (0+255),w,b
  6897  0014A6  6E2D               	movwf	___awdiv@dividend,c
  6898  0014A8  6A2E               	clrf	___awdiv@dividend+1,c
  6899  0014AA  BE2D               	btfsc	___awdiv@dividend,7,c
  6900  0014AC  062E               	decf	___awdiv@dividend+1,f,c
  6901  0014AE  ECAF  F018         	call	___awdiv	;wreg free
  6902  0014B2  0E09               	movlw	9
  6903  0014B4  242D               	addwf	?___awdiv,w,c
  6904  0014B6  0100               	movlb	0	; () banked
  6905  0014B8  6F84               	movwf	___wmul@multiplier& (0+255),b
  6906  0014BA  0E00               	movlw	0
  6907  0014BC  202E               	addwfc	?___awdiv+1,w,c
  6908  0014BE  0100               	movlb	0	; () banked
  6909  0014C0  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  6910  0014C2  0E00               	movlw	0
  6911  0014C4  0100               	movlb	0	; () banked
  6912  0014C6  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6913  0014C8  0E03               	movlw	3
  6914  0014CA  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6915  0014CC  EC4D  F01C         	call	___wmul	;wreg free
  6916  0014D0  0E45               	movlw	low __npowers_
  6917  0014D2  0100               	movlb	0	; () banked
  6918  0014D4  2584               	addwf	?___wmul& (0+255),w,b
  6919  0014D6  6EF6               	movwf	tblptrl,c
  6920  0014D8  0EFE               	movlw	high __npowers_
  6921  0014DA  0100               	movlb	0	; () banked
  6922  0014DC  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6923  0014DE  6EF7               	movwf	tblptrh,c
  6924  0014E0                     	if	0	;There are less than 3 active tblptr bytes
  6925  0014E0                     	endif
  6926  0014E0  0009               	tblrd		*+
  6927  0014E2  CFF5 F095          	movff	tablat,___ftmul@f1
  6928  0014E6  0009               	tblrd		*+
  6929  0014E8  CFF5 F096          	movff	tablat,___ftmul@f1+1
  6930  0014EC  000A               	tblrd		*-
  6931  0014EE  CFF5 F097          	movff	tablat,___ftmul@f1+2
  6932  0014F2  0E00               	movlw	0
  6933  0014F4  0100               	movlb	0	; () banked
  6934  0014F6  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6935  0014F8  0E03               	movlw	3
  6936  0014FA  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6937  0014FC  0E00               	movlw	0
  6938  0014FE  6E2A               	movwf	___awmod@divisor+1,c
  6939  001500  0E0A               	movlw	10
  6940  001502  6E29               	movwf	___awmod@divisor,c
  6941  001504  0100               	movlb	0	; () banked
  6942  001506  51AA               	movf	scale@scl& (0+255),w,b
  6943  001508  6E27               	movwf	___awmod@dividend,c
  6944  00150A  6A28               	clrf	___awmod@dividend+1,c
  6945  00150C  BE27               	btfsc	___awmod@dividend,7,c
  6946  00150E  0628               	decf	___awmod@dividend+1,f,c
  6947  001510  EC16  F01A         	call	___awmod	;wreg free
  6948  001514  C027  F084         	movff	?___awmod,___wmul@multiplier
  6949  001518  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  6950  00151C  EC4D  F01C         	call	___wmul	;wreg free
  6951  001520  0E45               	movlw	low __npowers_
  6952  001522  0100               	movlb	0	; () banked
  6953  001524  2584               	addwf	?___wmul& (0+255),w,b
  6954  001526  6EF6               	movwf	tblptrl,c
  6955  001528  0EFE               	movlw	high __npowers_
  6956  00152A  0100               	movlb	0	; () banked
  6957  00152C  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6958  00152E  6EF7               	movwf	tblptrh,c
  6959  001530                     	if	0	;There are less than 3 active tblptr bytes
  6960  001530                     	endif
  6961  001530  0009               	tblrd		*+
  6962  001532  CFF5 F098          	movff	tablat,___ftmul@f2
  6963  001536  0009               	tblrd		*+
  6964  001538  CFF5 F099          	movff	tablat,___ftmul@f2+1
  6965  00153C  000A               	tblrd		*-
  6966  00153E  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  6967  001542  ECBC  F010         	call	___ftmul	;wreg free
  6968  001546  D79C               	goto	L4
  6969  001548                     l5819:
  6970                           
  6971                           ;doprnt.c: 434: return _npowers_[scl];
  6972  001548  0100               	movlb	0	; () banked
  6973  00154A  51AA               	movf	scale@scl& (0+255),w,b
  6974  00154C  0D03               	mullw	3
  6975  00154E  0E45               	movlw	low __npowers_
  6976  001550  24F3               	addwf	prodl,w,c
  6977  001552  6EF6               	movwf	tblptrl,c
  6978  001554  0EFE               	movlw	high __npowers_
  6979  001556  20F4               	addwfc	prodh,w,c
  6980  001558  6EF7               	movwf	tblptrh,c
  6981  00155A                     	if	0	;There are less than 3 active tblptr bytes
  6982  00155A                     	endif
  6983  00155A  0009               	tblrd		*+
  6984  00155C  CFF5 F0A4          	movff	tablat,?_scale
  6985  001560  0009               	tblrd		*+
  6986  001562  CFF5 F0A5          	movff	tablat,?_scale+1
  6987  001566  000A               	tblrd		*-
  6988  001568  CFF5 F0A6          	movff	tablat,?_scale+2
  6989                           
  6990                           ; BSR set to: 0
  6991  00156C  0012               	return	
  6992  00156E                     l5823:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;doprnt.c: 435: }
  6996                           ;doprnt.c: 436: if(scl>=110)
  6997  00156E  0100               	movlb	0	; () banked
  6998  001570  51AA               	movf	scale@scl& (0+255),w,b
  6999  001572  0A80               	xorlw	128
  7000  001574  0F12               	addlw	-238
  7001  001576  A0D8               	btfss	status,0,c
  7002  001578  D0A1               	goto	l5831
  7003                           
  7004                           ; BSR set to: 0
  7005                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7006  00157A  0E00               	movlw	0
  7007  00157C  0100               	movlb	0	; () banked
  7008  00157E  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7009  001580  0E03               	movlw	3
  7010  001582  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7011  001584  0E00               	movlw	0
  7012  001586  6E30               	movwf	___awdiv@divisor+1,c
  7013  001588  0E0A               	movlw	10
  7014  00158A  6E2F               	movwf	___awdiv@divisor,c
  7015  00158C  0E00               	movlw	0
  7016  00158E  6E2A               	movwf	___awmod@divisor+1,c
  7017  001590  0E64               	movlw	100
  7018  001592  6E29               	movwf	___awmod@divisor,c
  7019  001594  0100               	movlb	0	; () banked
  7020  001596  51AA               	movf	scale@scl& (0+255),w,b
  7021  001598  6E27               	movwf	___awmod@dividend,c
  7022  00159A  6A28               	clrf	___awmod@dividend+1,c
  7023  00159C  BE27               	btfsc	___awmod@dividend,7,c
  7024  00159E  0628               	decf	___awmod@dividend+1,f,c
  7025  0015A0  EC16  F01A         	call	___awmod	;wreg free
  7026  0015A4  C027  F02D         	movff	?___awmod,___awdiv@dividend
  7027  0015A8  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  7028  0015AC  ECAF  F018         	call	___awdiv	;wreg free
  7029  0015B0  0E09               	movlw	9
  7030  0015B2  242D               	addwf	?___awdiv,w,c
  7031  0015B4  0100               	movlb	0	; () banked
  7032  0015B6  6F84               	movwf	___wmul@multiplier& (0+255),b
  7033  0015B8  0E00               	movlw	0
  7034  0015BA  202E               	addwfc	?___awdiv+1,w,c
  7035  0015BC  0100               	movlb	0	; () banked
  7036  0015BE  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7037  0015C0  EC4D  F01C         	call	___wmul	;wreg free
  7038  0015C4  0E6C               	movlw	low __powers_
  7039  0015C6  0100               	movlb	0	; () banked
  7040  0015C8  2584               	addwf	?___wmul& (0+255),w,b
  7041  0015CA  6EF6               	movwf	tblptrl,c
  7042  0015CC  0EFE               	movlw	high __powers_
  7043  0015CE  0100               	movlb	0	; () banked
  7044  0015D0  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7045  0015D2  6EF7               	movwf	tblptrh,c
  7046  0015D4                     	if	0	;There are less than 3 active tblptr bytes
  7047  0015D4                     	endif
  7048  0015D4  0009               	tblrd		*+
  7049  0015D6  CFF5 F098          	movff	tablat,___ftmul@f2
  7050  0015DA  0009               	tblrd		*+
  7051  0015DC  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7052  0015E0  000A               	tblrd		*-
  7053  0015E2  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7054  0015E6  0E00               	movlw	0
  7055  0015E8  6E30               	movwf	___awdiv@divisor+1,c
  7056  0015EA  0E64               	movlw	100
  7057  0015EC  6E2F               	movwf	___awdiv@divisor,c
  7058  0015EE  0100               	movlb	0	; () banked
  7059  0015F0  51AA               	movf	scale@scl& (0+255),w,b
  7060  0015F2  6E2D               	movwf	___awdiv@dividend,c
  7061  0015F4  6A2E               	clrf	___awdiv@dividend+1,c
  7062  0015F6  BE2D               	btfsc	___awdiv@dividend,7,c
  7063  0015F8  062E               	decf	___awdiv@dividend+1,f,c
  7064  0015FA  ECAF  F018         	call	___awdiv	;wreg free
  7065  0015FE  0E12               	movlw	18
  7066  001600  242D               	addwf	?___awdiv,w,c
  7067  001602  0100               	movlb	0	; () banked
  7068  001604  6F84               	movwf	___wmul@multiplier& (0+255),b
  7069  001606  0E00               	movlw	0
  7070  001608  202E               	addwfc	?___awdiv+1,w,c
  7071  00160A  0100               	movlb	0	; () banked
  7072  00160C  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7073  00160E  0E00               	movlw	0
  7074  001610  0100               	movlb	0	; () banked
  7075  001612  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7076  001614  0E03               	movlw	3
  7077  001616  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7078  001618  EC4D  F01C         	call	___wmul	;wreg free
  7079  00161C  0E6C               	movlw	low __powers_
  7080  00161E  0100               	movlb	0	; () banked
  7081  001620  2584               	addwf	?___wmul& (0+255),w,b
  7082  001622  6EF6               	movwf	tblptrl,c
  7083  001624  0EFE               	movlw	high __powers_
  7084  001626  0100               	movlb	0	; () banked
  7085  001628  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7086  00162A  6EF7               	movwf	tblptrh,c
  7087  00162C                     	if	0	;There are less than 3 active tblptr bytes
  7088  00162C                     	endif
  7089  00162C  0009               	tblrd		*+
  7090  00162E  CFF5 F095          	movff	tablat,___ftmul@f1
  7091  001632  0009               	tblrd		*+
  7092  001634  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7093  001638  000A               	tblrd		*-
  7094  00163A  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7095  00163E  ECBC  F010         	call	___ftmul	;wreg free
  7096  001642  C095  F0A7         	movff	?___ftmul,_scale$1351
  7097  001646  C096  F0A8         	movff	?___ftmul+1,_scale$1351+1
  7098  00164A  C097  F0A9         	movff	?___ftmul+2,_scale$1351+2
  7099                           
  7100                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7101  00164E  C0A7  F095         	movff	_scale$1351,___ftmul@f1
  7102  001652  C0A8  F096         	movff	_scale$1351+1,___ftmul@f1+1
  7103  001656  C0A9  F097         	movff	_scale$1351+2,___ftmul@f1+2
  7104  00165A  0E00               	movlw	0
  7105  00165C  0100               	movlb	0	; () banked
  7106  00165E  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7107  001660  0E03               	movlw	3
  7108  001662  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7109  001664  0E00               	movlw	0
  7110  001666  6E2A               	movwf	___awmod@divisor+1,c
  7111  001668  0E0A               	movlw	10
  7112  00166A  6E29               	movwf	___awmod@divisor,c
  7113  00166C  0100               	movlb	0	; () banked
  7114  00166E  51AA               	movf	scale@scl& (0+255),w,b
  7115  001670  6E27               	movwf	___awmod@dividend,c
  7116  001672  6A28               	clrf	___awmod@dividend+1,c
  7117  001674  BE27               	btfsc	___awmod@dividend,7,c
  7118  001676  0628               	decf	___awmod@dividend+1,f,c
  7119  001678  EC16  F01A         	call	___awmod	;wreg free
  7120  00167C  C027  F084         	movff	?___awmod,___wmul@multiplier
  7121  001680  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7122  001684  EC4D  F01C         	call	___wmul	;wreg free
  7123  001688  0E6C               	movlw	low __powers_
  7124  00168A  0100               	movlb	0	; () banked
  7125  00168C  2584               	addwf	?___wmul& (0+255),w,b
  7126  00168E  6EF6               	movwf	tblptrl,c
  7127  001690  0EFE               	movlw	high __powers_
  7128  001692  0100               	movlb	0	; () banked
  7129  001694  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7130  001696  6EF7               	movwf	tblptrh,c
  7131  001698                     	if	0	;There are less than 3 active tblptr bytes
  7132  001698                     	endif
  7133  001698  0009               	tblrd		*+
  7134  00169A  CFF5 F098          	movff	tablat,___ftmul@f2
  7135  00169E  0009               	tblrd		*+
  7136  0016A0  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7137  0016A4  000A               	tblrd		*-
  7138  0016A6  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7139  0016AA  ECBC  F010         	call	___ftmul	;wreg free
  7140  0016AE  C095  F0A4         	movff	?___ftmul,?_scale
  7141  0016B2  C096  F0A5         	movff	?___ftmul+1,?_scale+1
  7142  0016B6  C097  F0A6         	movff	?___ftmul+2,?_scale+2
  7143  0016BA  0012               	return	
  7144  0016BC                     l5831:
  7145                           
  7146                           ;doprnt.c: 438: else if(scl > 10)
  7147  0016BC  0100               	movlb	0	; () banked
  7148  0016BE  51AA               	movf	scale@scl& (0+255),w,b
  7149  0016C0  0A80               	xorlw	128
  7150  0016C2  0F75               	addlw	-139
  7151  0016C4  A0D8               	btfss	status,0,c
  7152  0016C6  D057               	goto	l5837
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7156  0016C8  0E00               	movlw	0
  7157  0016CA  6E30               	movwf	___awdiv@divisor+1,c
  7158  0016CC  0E0A               	movlw	10
  7159  0016CE  6E2F               	movwf	___awdiv@divisor,c
  7160  0016D0  0100               	movlb	0	; () banked
  7161  0016D2  51AA               	movf	scale@scl& (0+255),w,b
  7162  0016D4  6E2D               	movwf	___awdiv@dividend,c
  7163  0016D6  6A2E               	clrf	___awdiv@dividend+1,c
  7164  0016D8  BE2D               	btfsc	___awdiv@dividend,7,c
  7165  0016DA  062E               	decf	___awdiv@dividend+1,f,c
  7166  0016DC  ECAF  F018         	call	___awdiv	;wreg free
  7167  0016E0  0E09               	movlw	9
  7168  0016E2  242D               	addwf	?___awdiv,w,c
  7169  0016E4  0100               	movlb	0	; () banked
  7170  0016E6  6F84               	movwf	___wmul@multiplier& (0+255),b
  7171  0016E8  0E00               	movlw	0
  7172  0016EA  202E               	addwfc	?___awdiv+1,w,c
  7173  0016EC  0100               	movlb	0	; () banked
  7174  0016EE  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7175  0016F0  0E00               	movlw	0
  7176  0016F2  0100               	movlb	0	; () banked
  7177  0016F4  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7178  0016F6  0E03               	movlw	3
  7179  0016F8  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7180  0016FA  EC4D  F01C         	call	___wmul	;wreg free
  7181  0016FE  0E6C               	movlw	low __powers_
  7182  001700  0100               	movlb	0	; () banked
  7183  001702  2584               	addwf	?___wmul& (0+255),w,b
  7184  001704  6EF6               	movwf	tblptrl,c
  7185  001706  0EFE               	movlw	high __powers_
  7186  001708  0100               	movlb	0	; () banked
  7187  00170A  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7188  00170C  6EF7               	movwf	tblptrh,c
  7189  00170E                     	if	0	;There are less than 3 active tblptr bytes
  7190  00170E                     	endif
  7191  00170E  0009               	tblrd		*+
  7192  001710  CFF5 F095          	movff	tablat,___ftmul@f1
  7193  001714  0009               	tblrd		*+
  7194  001716  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7195  00171A  000A               	tblrd		*-
  7196  00171C  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7197  001720  0E00               	movlw	0
  7198  001722  0100               	movlb	0	; () banked
  7199  001724  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7200  001726  0E03               	movlw	3
  7201  001728  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7202  00172A  0E00               	movlw	0
  7203  00172C  6E2A               	movwf	___awmod@divisor+1,c
  7204  00172E  0E0A               	movlw	10
  7205  001730  6E29               	movwf	___awmod@divisor,c
  7206  001732  0100               	movlb	0	; () banked
  7207  001734  51AA               	movf	scale@scl& (0+255),w,b
  7208  001736  6E27               	movwf	___awmod@dividend,c
  7209  001738  6A28               	clrf	___awmod@dividend+1,c
  7210  00173A  BE27               	btfsc	___awmod@dividend,7,c
  7211  00173C  0628               	decf	___awmod@dividend+1,f,c
  7212  00173E  EC16  F01A         	call	___awmod	;wreg free
  7213  001742  C027  F084         	movff	?___awmod,___wmul@multiplier
  7214  001746  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7215  00174A  EC4D  F01C         	call	___wmul	;wreg free
  7216  00174E  0E6C               	movlw	low __powers_
  7217  001750  0100               	movlb	0	; () banked
  7218  001752  2584               	addwf	?___wmul& (0+255),w,b
  7219  001754  6EF6               	movwf	tblptrl,c
  7220  001756  0EFE               	movlw	high __powers_
  7221  001758  0100               	movlb	0	; () banked
  7222  00175A  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7223  00175C  6EF7               	movwf	tblptrh,c
  7224  00175E                     	if	0	;There are less than 3 active tblptr bytes
  7225  00175E                     	endif
  7226  00175E  0009               	tblrd		*+
  7227  001760  CFF5 F098          	movff	tablat,___ftmul@f2
  7228  001764  0009               	tblrd		*+
  7229  001766  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7230  00176A  000A               	tblrd		*-
  7231  00176C  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7232  001770  ECBC  F010         	call	___ftmul	;wreg free
  7233  001774  D79C               	goto	L5
  7234  001776                     l5837:
  7235                           
  7236                           ;doprnt.c: 440: return _powers_[scl];
  7237  001776  0100               	movlb	0	; () banked
  7238  001778  51AA               	movf	scale@scl& (0+255),w,b
  7239  00177A  0D03               	mullw	3
  7240  00177C  0E6C               	movlw	low __powers_
  7241  00177E  24F3               	addwf	prodl,w,c
  7242  001780  6EF6               	movwf	tblptrl,c
  7243  001782  0EFE               	movlw	high __powers_
  7244  001784  20F4               	addwfc	prodh,w,c
  7245  001786  6EF7               	movwf	tblptrh,c
  7246  001788                     	if	0	;There are less than 3 active tblptr bytes
  7247  001788                     	endif
  7248  001788  0009               	tblrd		*+
  7249  00178A  CFF5 F0A4          	movff	tablat,?_scale
  7250  00178E  0009               	tblrd		*+
  7251  001790  CFF5 F0A5          	movff	tablat,?_scale+1
  7252  001794  000A               	tblrd		*-
  7253  001796  CFF5 F0A6          	movff	tablat,?_scale+2
  7254  00179A  0012               	return	
  7255  00179C                     __end_of_scale:
  7256                           	opt stack 0
  7257                           tblptru	equ	0xFF8
  7258                           tblptrh	equ	0xFF7
  7259                           tblptrl	equ	0xFF6
  7260                           tablat	equ	0xFF5
  7261                           prodh	equ	0xFF4
  7262                           prodl	equ	0xFF3
  7263                           postinc0	equ	0xFEE
  7264                           wreg	equ	0xFE8
  7265                           postdec1	equ	0xFE5
  7266                           fsr1l	equ	0xFE1
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           postdec2	equ	0xFDD
  7270                           fsr2h	equ	0xFDA
  7271                           fsr2l	equ	0xFD9
  7272                           status	equ	0xFD8
  7273                           
  7274 ;; *************** function _putch *****************
  7275 ;; Defined at:
  7276 ;;		line 35 in file "lcd.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;  data            1    wreg     unsigned char 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;  data            1   42[COMRAM] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg, status,2, status,0, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;Total ram usage:        1 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    6
  7297 ;; This function calls:
  7298 ;;		_lcdNewline
  7299 ;;		_lcdNibble
  7300 ;; This function is called by:
  7301 ;;		_printf
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           	psect	text15
  7306  003A02                     __ptext15:
  7307                           	opt stack 0
  7308  003A02                     _putch:
  7309                           	opt stack 22
  7310                           
  7311                           ;incstack = 0
  7312                           ;putch@data stored from wreg
  7313  003A02  6E2B               	movwf	putch@data,c
  7314                           
  7315                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7316  003A04  0E0A               	movlw	10
  7317  003A06  182B               	xorwf	putch@data,w,c
  7318  003A08  A4D8               	btfss	status,2,c
  7319  003A0A  D003               	goto	l211
  7320  003A0C  EC3A  F01D         	call	_lcdNewline	;wreg free
  7321  003A10  0012               	return	
  7322  003A12                     l211:
  7323                           
  7324                           ;lcd.c: 37: else
  7325                           ;lcd.c: 38: {
  7326                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7327  003A12  848C               	bsf	3980,2,c	;volatile
  7328                           
  7329                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7330  003A14  0E74               	movlw	116
  7331  003A16                     u7737:
  7332  003A16  2EE8               	decfsz	wreg,f,c
  7333  003A18  D7FE               	bra	u7737
  7334  003A1A  D000               	nop2	
  7335                           
  7336                           ;lcd.c: 41: lcdNibble(data);
  7337  003A1C  502B               	movf	putch@data,w,c
  7338  003A1E  ECEF  F01A         	call	_lcdNibble
  7339  003A22  0012               	return	
  7340  003A24                     __end_of_putch:
  7341                           	opt stack 0
  7342                           tblptru	equ	0xFF8
  7343                           tblptrh	equ	0xFF7
  7344                           tblptrl	equ	0xFF6
  7345                           tablat	equ	0xFF5
  7346                           prodh	equ	0xFF4
  7347                           prodl	equ	0xFF3
  7348                           postinc0	equ	0xFEE
  7349                           wreg	equ	0xFE8
  7350                           postdec1	equ	0xFE5
  7351                           fsr1l	equ	0xFE1
  7352                           indf2	equ	0xFDF
  7353                           postinc2	equ	0xFDE
  7354                           postdec2	equ	0xFDD
  7355                           fsr2h	equ	0xFDA
  7356                           fsr2l	equ	0xFD9
  7357                           status	equ	0xFD8
  7358                           
  7359 ;; *************** function _lcdNewline *****************
  7360 ;; Defined at:
  7361 ;;		line 78 in file "lcd.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;		None
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg, status,2, status,0, cstack
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7379 ;;Total ram usage:        0 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    5
  7382 ;; This function calls:
  7383 ;;		_lcdInst
  7384 ;; This function is called by:
  7385 ;;		_putch
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           	psect	text16
  7390  003A74                     __ptext16:
  7391                           	opt stack 0
  7392  003A74                     _lcdNewline:
  7393                           	opt stack 22
  7394                           
  7395                           ;lcd.c: 79: lcdInst(0b11000000);
  7396                           
  7397                           ;incstack = 0
  7398  003A74  0EC0               	movlw	192
  7399  003A76  EC12  F01D         	call	_lcdInst
  7400  003A7A  0012               	return		;funcret
  7401  003A7C                     __end_of_lcdNewline:
  7402                           	opt stack 0
  7403                           tblptru	equ	0xFF8
  7404                           tblptrh	equ	0xFF7
  7405                           tblptrl	equ	0xFF6
  7406                           tablat	equ	0xFF5
  7407                           prodh	equ	0xFF4
  7408                           prodl	equ	0xFF3
  7409                           postinc0	equ	0xFEE
  7410                           wreg	equ	0xFE8
  7411                           postdec1	equ	0xFE5
  7412                           fsr1l	equ	0xFE1
  7413                           indf2	equ	0xFDF
  7414                           postinc2	equ	0xFDE
  7415                           postdec2	equ	0xFDD
  7416                           fsr2h	equ	0xFDA
  7417                           fsr2l	equ	0xFD9
  7418                           status	equ	0xFD8
  7419                           
  7420 ;; *************** function _isdigit *****************
  7421 ;; Defined at:
  7422 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;  c               1    wreg     unsigned char 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  c               1   40[COMRAM] unsigned char 
  7427 ;; Return value:  Size  Location     Type
  7428 ;;		None               void
  7429 ;; Registers used:
  7430 ;;		wreg, status,2, status,0
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7439 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7440 ;;Total ram usage:        3 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    3
  7443 ;; This function calls:
  7444 ;;		Nothing
  7445 ;; This function is called by:
  7446 ;;		_printf
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           	psect	text17
  7451  003A46                     __ptext17:
  7452                           	opt stack 0
  7453  003A46                     _isdigit:
  7454                           	opt stack 25
  7455                           
  7456                           ;incstack = 0
  7457                           ;isdigit@c stored from wreg
  7458  003A46  6E29               	movwf	isdigit@c,c
  7459  003A48  0E00               	movlw	0
  7460  003A4A  6E28               	movwf	_isdigit$977,c
  7461  003A4C  0E3A               	movlw	58
  7462  003A4E  6029               	cpfslt	isdigit@c,c
  7463  003A50  D005               	goto	l5849
  7464  003A52  0E2F               	movlw	47
  7465  003A54  6429               	cpfsgt	isdigit@c,c
  7466  003A56  D002               	goto	l5849
  7467  003A58  0E01               	movlw	1
  7468  003A5A  6E28               	movwf	_isdigit$977,c
  7469  003A5C                     l5849:
  7470  003A5C  C028  F027         	movff	_isdigit$977,??_isdigit
  7471  003A60  3027               	rrcf	??_isdigit,w,c
  7472  003A62  0012               	return	
  7473  003A64                     __end_of_isdigit:
  7474                           	opt stack 0
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           postinc0	equ	0xFEE
  7482                           wreg	equ	0xFE8
  7483                           postdec1	equ	0xFE5
  7484                           fsr1l	equ	0xFE1
  7485                           indf2	equ	0xFDF
  7486                           postinc2	equ	0xFDE
  7487                           postdec2	equ	0xFDD
  7488                           fsr2h	equ	0xFDA
  7489                           fsr2l	equ	0xFD9
  7490                           status	equ	0xFD8
  7491                           
  7492 ;; *************** function _fround *****************
  7493 ;; Defined at:
  7494 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  prec            1    wreg     unsigned char 
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;  prec            1   45[BANK0 ] unsigned char 
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  3   36[BANK0 ] unsigned char 
  7501 ;; Registers used:
  7502 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7508 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;Total ram usage:       10 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    5
  7515 ;; This function calls:
  7516 ;;		___awdiv
  7517 ;;		___awmod
  7518 ;;		___ftmul
  7519 ;;		___wmul
  7520 ;; This function is called by:
  7521 ;;		_printf
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           	psect	text18
  7526  001B28                     __ptext18:
  7527                           	opt stack 0
  7528  001B28                     _fround:
  7529                           	opt stack 23
  7530                           
  7531                           ;incstack = 0
  7532                           ;fround@prec stored from wreg
  7533  001B28  0100               	movlb	0	; () banked
  7534  001B2A  6FAD               	movwf	fround@prec& (0+255),b
  7535                           
  7536                           ;doprnt.c: 413: if(prec>=110)
  7537  001B2C  0E6D               	movlw	109
  7538  001B2E  0100               	movlb	0	; () banked
  7539  001B30  65AD               	cpfsgt	fround@prec& (0+255),b
  7540  001B32  D0AF               	goto	l5791
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7544  001B34  0E00               	movlw	0
  7545  001B36  0100               	movlb	0	; () banked
  7546  001B38  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7547  001B3A  0E03               	movlw	3
  7548  001B3C  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7549  001B3E  0E00               	movlw	0
  7550  001B40  6E30               	movwf	___awdiv@divisor+1,c
  7551  001B42  0E0A               	movlw	10
  7552  001B44  6E2F               	movwf	___awdiv@divisor,c
  7553  001B46  0E00               	movlw	0
  7554  001B48  6E2A               	movwf	___awmod@divisor+1,c
  7555  001B4A  0E64               	movlw	100
  7556  001B4C  6E29               	movwf	___awmod@divisor,c
  7557  001B4E  C0AD  F027         	movff	fround@prec,___awmod@dividend
  7558  001B52  6A28               	clrf	___awmod@dividend+1,c
  7559  001B54  EC16  F01A         	call	___awmod	;wreg free
  7560  001B58  C027  F02D         	movff	?___awmod,___awdiv@dividend
  7561  001B5C  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  7562  001B60  ECAF  F018         	call	___awdiv	;wreg free
  7563  001B64  0E09               	movlw	9
  7564  001B66  242D               	addwf	?___awdiv,w,c
  7565  001B68  0100               	movlb	0	; () banked
  7566  001B6A  6F84               	movwf	___wmul@multiplier& (0+255),b
  7567  001B6C  0E00               	movlw	0
  7568  001B6E  202E               	addwfc	?___awdiv+1,w,c
  7569  001B70  0100               	movlb	0	; () banked
  7570  001B72  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7571  001B74  EC4D  F01C         	call	___wmul	;wreg free
  7572  001B78  0E45               	movlw	low __npowers_
  7573  001B7A  0100               	movlb	0	; () banked
  7574  001B7C  2584               	addwf	?___wmul& (0+255),w,b
  7575  001B7E  6EF6               	movwf	tblptrl,c
  7576  001B80  0EFE               	movlw	high __npowers_
  7577  001B82  0100               	movlb	0	; () banked
  7578  001B84  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7579  001B86  6EF7               	movwf	tblptrh,c
  7580  001B88                     	if	0	;There are less than 3 active tblptr bytes
  7581  001B88                     	endif
  7582  001B88  0009               	tblrd		*+
  7583  001B8A  CFF5 F098          	movff	tablat,___ftmul@f2
  7584  001B8E  0009               	tblrd		*+
  7585  001B90  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7586  001B94  000A               	tblrd		*-
  7587  001B96  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7588  001B9A  0E00               	movlw	0
  7589  001B9C  6E30               	movwf	___awdiv@divisor+1,c
  7590  001B9E  0E64               	movlw	100
  7591  001BA0  6E2F               	movwf	___awdiv@divisor,c
  7592  001BA2  C0AD  F02D         	movff	fround@prec,___awdiv@dividend
  7593  001BA6  6A2E               	clrf	___awdiv@dividend+1,c
  7594  001BA8  ECAF  F018         	call	___awdiv	;wreg free
  7595  001BAC  0E12               	movlw	18
  7596  001BAE  242D               	addwf	?___awdiv,w,c
  7597  001BB0  0100               	movlb	0	; () banked
  7598  001BB2  6F84               	movwf	___wmul@multiplier& (0+255),b
  7599  001BB4  0E00               	movlw	0
  7600  001BB6  202E               	addwfc	?___awdiv+1,w,c
  7601  001BB8  0100               	movlb	0	; () banked
  7602  001BBA  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7603  001BBC  0E00               	movlw	0
  7604  001BBE  0100               	movlb	0	; () banked
  7605  001BC0  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7606  001BC2  0E03               	movlw	3
  7607  001BC4  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7608  001BC6  EC4D  F01C         	call	___wmul	;wreg free
  7609  001BCA  0E45               	movlw	low __npowers_
  7610  001BCC  0100               	movlb	0	; () banked
  7611  001BCE  2584               	addwf	?___wmul& (0+255),w,b
  7612  001BD0  6EF6               	movwf	tblptrl,c
  7613  001BD2  0EFE               	movlw	high __npowers_
  7614  001BD4  0100               	movlb	0	; () banked
  7615  001BD6  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7616  001BD8  6EF7               	movwf	tblptrh,c
  7617  001BDA                     	if	0	;There are less than 3 active tblptr bytes
  7618  001BDA                     	endif
  7619  001BDA  0009               	tblrd		*+
  7620  001BDC  CFF5 F095          	movff	tablat,___ftmul@f1
  7621  001BE0  0009               	tblrd		*+
  7622  001BE2  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7623  001BE6  000A               	tblrd		*-
  7624  001BE8  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7625  001BEC  ECBC  F010         	call	___ftmul	;wreg free
  7626  001BF0  C095  F0AA         	movff	?___ftmul,_fround$1349
  7627  001BF4  C096  F0AB         	movff	?___ftmul+1,_fround$1349+1
  7628  001BF8  C097  F0AC         	movff	?___ftmul+2,_fround$1349+2
  7629                           
  7630                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7631  001BFC  0E00               	movlw	0
  7632  001BFE  0100               	movlb	0	; () banked
  7633  001C00  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7634  001C02  0E03               	movlw	3
  7635  001C04  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7636  001C06  0E00               	movlw	0
  7637  001C08  6E2A               	movwf	___awmod@divisor+1,c
  7638  001C0A  0E0A               	movlw	10
  7639  001C0C  6E29               	movwf	___awmod@divisor,c
  7640  001C0E  C0AD  F027         	movff	fround@prec,___awmod@dividend
  7641  001C12  6A28               	clrf	___awmod@dividend+1,c
  7642  001C14  EC16  F01A         	call	___awmod	;wreg free
  7643  001C18  C027  F084         	movff	?___awmod,___wmul@multiplier
  7644  001C1C  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7645  001C20  EC4D  F01C         	call	___wmul	;wreg free
  7646  001C24  0E45               	movlw	low __npowers_
  7647  001C26  0100               	movlb	0	; () banked
  7648  001C28  2584               	addwf	?___wmul& (0+255),w,b
  7649  001C2A  6EF6               	movwf	tblptrl,c
  7650  001C2C  0EFE               	movlw	high __npowers_
  7651  001C2E  0100               	movlb	0	; () banked
  7652  001C30  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7653  001C32  6EF7               	movwf	tblptrh,c
  7654  001C34                     	if	0	;There are less than 3 active tblptr bytes
  7655  001C34                     	endif
  7656  001C34  0009               	tblrd		*+
  7657  001C36  CFF5 F098          	movff	tablat,___ftmul@f2
  7658  001C3A  0009               	tblrd		*+
  7659  001C3C  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7660  001C40  000A               	tblrd		*-
  7661  001C42  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7662  001C46  C0AA  F095         	movff	_fround$1349,___ftmul@f1
  7663  001C4A  C0AB  F096         	movff	_fround$1349+1,___ftmul@f1+1
  7664  001C4E  C0AC  F097         	movff	_fround$1349+2,___ftmul@f1+2
  7665  001C52  ECBC  F010         	call	___ftmul	;wreg free
  7666  001C56  C095  F0A7         	movff	?___ftmul,_fround$1350
  7667  001C5A  C096  F0A8         	movff	?___ftmul+1,_fround$1350+1
  7668  001C5E  C097  F0A9         	movff	?___ftmul+2,_fround$1350+2
  7669                           
  7670                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7671  001C62  C0A7  F095         	movff	_fround$1350,___ftmul@f1
  7672  001C66  C0A8  F096         	movff	_fround$1350+1,___ftmul@f1+1
  7673  001C6A  C0A9  F097         	movff	_fround$1350+2,___ftmul@f1+2
  7674  001C6E  0E00               	movlw	0
  7675  001C70  0100               	movlb	0	; () banked
  7676  001C72  6F98               	movwf	___ftmul@f2& (0+255),b
  7677  001C74  0E00               	movlw	0
  7678  001C76  0100               	movlb	0	; () banked
  7679  001C78  6F99               	movwf	(___ftmul@f2+1)& (0+255),b
  7680  001C7A  0E3F               	movlw	63
  7681  001C7C  0100               	movlb	0	; () banked
  7682  001C7E  6F9A               	movwf	(___ftmul@f2+2)& (0+255),b
  7683  001C80  ECBC  F010         	call	___ftmul	;wreg free
  7684  001C84  C095  F0A4         	movff	?___ftmul,?_fround
  7685  001C88  C096  F0A5         	movff	?___ftmul+1,?_fround+1
  7686  001C8C  C097  F0A6         	movff	?___ftmul+2,?_fround+2
  7687  001C90  0012               	return	
  7688  001C92                     l5791:
  7689                           
  7690                           ;doprnt.c: 415: else if(prec > 10)
  7691  001C92  0E0A               	movlw	10
  7692  001C94  0100               	movlb	0	; () banked
  7693  001C96  65AD               	cpfsgt	fround@prec& (0+255),b
  7694  001C98  D068               	goto	l5799
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7698  001C9A  0E00               	movlw	0
  7699  001C9C  0100               	movlb	0	; () banked
  7700  001C9E  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7701  001CA0  0E03               	movlw	3
  7702  001CA2  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7703  001CA4  0E00               	movlw	0
  7704  001CA6  6E2A               	movwf	___awmod@divisor+1,c
  7705  001CA8  0E0A               	movlw	10
  7706  001CAA  6E29               	movwf	___awmod@divisor,c
  7707  001CAC  C0AD  F027         	movff	fround@prec,___awmod@dividend
  7708  001CB0  6A28               	clrf	___awmod@dividend+1,c
  7709  001CB2  EC16  F01A         	call	___awmod	;wreg free
  7710  001CB6  C027  F084         	movff	?___awmod,___wmul@multiplier
  7711  001CBA  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7712  001CBE  EC4D  F01C         	call	___wmul	;wreg free
  7713  001CC2  0E45               	movlw	low __npowers_
  7714  001CC4  0100               	movlb	0	; () banked
  7715  001CC6  2584               	addwf	?___wmul& (0+255),w,b
  7716  001CC8  6EF6               	movwf	tblptrl,c
  7717  001CCA  0EFE               	movlw	high __npowers_
  7718  001CCC  0100               	movlb	0	; () banked
  7719  001CCE  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7720  001CD0  6EF7               	movwf	tblptrh,c
  7721  001CD2                     	if	0	;There are less than 3 active tblptr bytes
  7722  001CD2                     	endif
  7723  001CD2  0009               	tblrd		*+
  7724  001CD4  CFF5 F098          	movff	tablat,___ftmul@f2
  7725  001CD8  0009               	tblrd		*+
  7726  001CDA  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7727  001CDE  000A               	tblrd		*-
  7728  001CE0  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7729  001CE4  0E00               	movlw	0
  7730  001CE6  6E30               	movwf	___awdiv@divisor+1,c
  7731  001CE8  0E0A               	movlw	10
  7732  001CEA  6E2F               	movwf	___awdiv@divisor,c
  7733  001CEC  C0AD  F02D         	movff	fround@prec,___awdiv@dividend
  7734  001CF0  6A2E               	clrf	___awdiv@dividend+1,c
  7735  001CF2  ECAF  F018         	call	___awdiv	;wreg free
  7736  001CF6  0E09               	movlw	9
  7737  001CF8  242D               	addwf	?___awdiv,w,c
  7738  001CFA  0100               	movlb	0	; () banked
  7739  001CFC  6F84               	movwf	___wmul@multiplier& (0+255),b
  7740  001CFE  0E00               	movlw	0
  7741  001D00  202E               	addwfc	?___awdiv+1,w,c
  7742  001D02  0100               	movlb	0	; () banked
  7743  001D04  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7744  001D06  0E00               	movlw	0
  7745  001D08  0100               	movlb	0	; () banked
  7746  001D0A  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7747  001D0C  0E03               	movlw	3
  7748  001D0E  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7749  001D10  EC4D  F01C         	call	___wmul	;wreg free
  7750  001D14  0E45               	movlw	low __npowers_
  7751  001D16  0100               	movlb	0	; () banked
  7752  001D18  2584               	addwf	?___wmul& (0+255),w,b
  7753  001D1A  6EF6               	movwf	tblptrl,c
  7754  001D1C  0EFE               	movlw	high __npowers_
  7755  001D1E  0100               	movlb	0	; () banked
  7756  001D20  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7757  001D22  6EF7               	movwf	tblptrh,c
  7758  001D24                     	if	0	;There are less than 3 active tblptr bytes
  7759  001D24                     	endif
  7760  001D24  0009               	tblrd		*+
  7761  001D26  CFF5 F095          	movff	tablat,___ftmul@f1
  7762  001D2A  0009               	tblrd		*+
  7763  001D2C  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7764  001D30  000A               	tblrd		*-
  7765  001D32  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7766  001D36  ECBC  F010         	call	___ftmul	;wreg free
  7767  001D3A  C095  F0AA         	movff	?___ftmul,_fround$1349
  7768  001D3E  C096  F0AB         	movff	?___ftmul+1,_fround$1349+1
  7769  001D42  C097  F0AC         	movff	?___ftmul+2,_fround$1349+2
  7770                           
  7771                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7772  001D46  C0AA  F095         	movff	_fround$1349,___ftmul@f1
  7773  001D4A  C0AB  F096         	movff	_fround$1349+1,___ftmul@f1+1
  7774  001D4E  C0AC  F097         	movff	_fround$1349+2,___ftmul@f1+2
  7775  001D52  0E00               	movlw	0
  7776  001D54  0100               	movlb	0	; () banked
  7777  001D56  6F98               	movwf	___ftmul@f2& (0+255),b
  7778  001D58  0E00               	movlw	0
  7779  001D5A  0100               	movlb	0	; () banked
  7780  001D5C  6F99               	movwf	(___ftmul@f2+1)& (0+255),b
  7781  001D5E  0E3F               	movlw	63
  7782  001D60  0100               	movlb	0	; () banked
  7783  001D62  6F9A               	movwf	(___ftmul@f2+2)& (0+255),b
  7784  001D64  ECBC  F010         	call	___ftmul	;wreg free
  7785  001D68  D78D               	goto	L6
  7786  001D6A                     l5799:
  7787                           
  7788                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7789  001D6A  0100               	movlb	0	; () banked
  7790  001D6C  51AD               	movf	fround@prec& (0+255),w,b
  7791  001D6E  0D03               	mullw	3
  7792  001D70  0E45               	movlw	low __npowers_
  7793  001D72  24F3               	addwf	prodl,w,c
  7794  001D74  6EF6               	movwf	tblptrl,c
  7795  001D76  0EFE               	movlw	high __npowers_
  7796  001D78  20F4               	addwfc	prodh,w,c
  7797  001D7A  6EF7               	movwf	tblptrh,c
  7798  001D7C                     	if	0	;There are less than 3 active tblptr bytes
  7799  001D7C                     	endif
  7800  001D7C  0009               	tblrd		*+
  7801  001D7E  CFF5 F095          	movff	tablat,___ftmul@f1
  7802  001D82  0009               	tblrd		*+
  7803  001D84  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7804  001D88  000A               	tblrd		*-
  7805  001D8A  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7806  001D8E  0E00               	movlw	0
  7807  001D90  0100               	movlb	0	; () banked
  7808  001D92  6F98               	movwf	___ftmul@f2& (0+255),b
  7809  001D94  0E00               	movlw	0
  7810  001D96  0100               	movlb	0	; () banked
  7811  001D98  6F99               	movwf	(___ftmul@f2+1)& (0+255),b
  7812  001D9A  0E3F               	movlw	63
  7813  001D9C  0100               	movlb	0	; () banked
  7814  001D9E  6F9A               	movwf	(___ftmul@f2+2)& (0+255),b
  7815  001DA0  ECBC  F010         	call	___ftmul	;wreg free
  7816  001DA4  C095  F0A4         	movff	?___ftmul,?_fround
  7817  001DA8  C096  F0A5         	movff	?___ftmul+1,?_fround+1
  7818  001DAC  C097  F0A6         	movff	?___ftmul+2,?_fround+2
  7819  001DB0  0012               	return	
  7820  001DB2                     __end_of_fround:
  7821                           	opt stack 0
  7822                           tblptru	equ	0xFF8
  7823                           tblptrh	equ	0xFF7
  7824                           tblptrl	equ	0xFF6
  7825                           tablat	equ	0xFF5
  7826                           prodh	equ	0xFF4
  7827                           prodl	equ	0xFF3
  7828                           postinc0	equ	0xFEE
  7829                           wreg	equ	0xFE8
  7830                           postdec1	equ	0xFE5
  7831                           fsr1l	equ	0xFE1
  7832                           indf2	equ	0xFDF
  7833                           postinc2	equ	0xFDE
  7834                           postdec2	equ	0xFDD
  7835                           fsr2h	equ	0xFDA
  7836                           fsr2l	equ	0xFD9
  7837                           status	equ	0xFD8
  7838                           
  7839 ;; *************** function ___wmul *****************
  7840 ;; Defined at:
  7841 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;  multiplier      2    4[BANK0 ] unsigned int 
  7844 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  7845 ;; Auto vars:     Size  Location     Type
  7846 ;;  product         2   48[COMRAM] unsigned int 
  7847 ;; Return value:  Size  Location     Type
  7848 ;;                  2    4[BANK0 ] unsigned int 
  7849 ;; Registers used:
  7850 ;;		wreg, status,2, status,0, prodl, prodh
  7851 ;; Tracked objects:
  7852 ;;		On entry : 0/0
  7853 ;;		On exit  : 0/0
  7854 ;;		Unchanged: 0/0
  7855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7856 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7859 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7860 ;;Total ram usage:        6 bytes
  7861 ;; Hardware stack levels used:    1
  7862 ;; Hardware stack levels required when called:    3
  7863 ;; This function calls:
  7864 ;;		Nothing
  7865 ;; This function is called by:
  7866 ;;		_fround
  7867 ;;		_scale
  7868 ;;		_printf
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           	psect	text19
  7873  00389A                     __ptext19:
  7874                           	opt stack 0
  7875  00389A                     ___wmul:
  7876                           	opt stack 24
  7877                           
  7878                           ;incstack = 0
  7879  00389A  0100               	movlb	0	; () banked
  7880  00389C  5184               	movf	___wmul@multiplier& (0+255),w,b
  7881  00389E  0100               	movlb	0	; () banked
  7882  0038A0  0386               	mulwf	___wmul@multiplicand& (0+255),b
  7883  0038A2  CFF3 F031          	movff	prodl,___wmul@product
  7884  0038A6  CFF4 F032          	movff	prodh,___wmul@product+1
  7885  0038AA  0100               	movlb	0	; () banked
  7886  0038AC  5184               	movf	___wmul@multiplier& (0+255),w,b
  7887  0038AE  0100               	movlb	0	; () banked
  7888  0038B0  0387               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7889  0038B2  50F3               	movf	prodl,w,c
  7890  0038B4  2632               	addwf	___wmul@product+1,f,c
  7891  0038B6  0100               	movlb	0	; () banked
  7892  0038B8  5185               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7893  0038BA  0100               	movlb	0	; () banked
  7894  0038BC  0386               	mulwf	___wmul@multiplicand& (0+255),b
  7895  0038BE  50F3               	movf	prodl,w,c
  7896  0038C0  2632               	addwf	___wmul@product+1,f,c
  7897                           
  7898                           ; BSR set to: 0
  7899  0038C2  C031  F084         	movff	___wmul@product,?___wmul
  7900  0038C6  C032  F085         	movff	___wmul@product+1,?___wmul+1
  7901  0038CA  0012               	return	
  7902  0038CC                     __end_of___wmul:
  7903                           	opt stack 0
  7904                           tblptru	equ	0xFF8
  7905                           tblptrh	equ	0xFF7
  7906                           tblptrl	equ	0xFF6
  7907                           tablat	equ	0xFF5
  7908                           prodh	equ	0xFF4
  7909                           prodl	equ	0xFF3
  7910                           postinc0	equ	0xFEE
  7911                           wreg	equ	0xFE8
  7912                           postdec1	equ	0xFE5
  7913                           fsr1l	equ	0xFE1
  7914                           indf2	equ	0xFDF
  7915                           postinc2	equ	0xFDE
  7916                           postdec2	equ	0xFDD
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function ___awmod *****************
  7922 ;; Defined at:
  7923 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  dividend        2   38[COMRAM] int 
  7926 ;;  divisor         2   40[COMRAM] int 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  sign            1   43[COMRAM] unsigned char 
  7929 ;;  counter         1   42[COMRAM] unsigned char 
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  2   38[COMRAM] int 
  7932 ;; Registers used:
  7933 ;;		wreg, status,2, status,0
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7939 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;Total ram usage:        6 bytes
  7944 ;; Hardware stack levels used:    1
  7945 ;; Hardware stack levels required when called:    3
  7946 ;; This function calls:
  7947 ;;		Nothing
  7948 ;; This function is called by:
  7949 ;;		_fround
  7950 ;;		_scale
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           	psect	text20
  7955  00342C                     __ptext20:
  7956                           	opt stack 0
  7957  00342C                     ___awmod:
  7958                           	opt stack 24
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;incstack = 0
  7962  00342C  0E00               	movlw	0
  7963  00342E  6E2C               	movwf	___awmod@sign,c
  7964  003430  AE28               	btfss	___awmod@dividend+1,7,c
  7965  003432  D006               	goto	l5745
  7966  003434  6C27               	negf	___awmod@dividend,c
  7967  003436  1E28               	comf	___awmod@dividend+1,f,c
  7968  003438  B0D8               	btfsc	status,0,c
  7969  00343A  2A28               	incf	___awmod@dividend+1,f,c
  7970  00343C  0E01               	movlw	1
  7971  00343E  6E2C               	movwf	___awmod@sign,c
  7972  003440                     l5745:
  7973  003440  AE2A               	btfss	___awmod@divisor+1,7,c
  7974  003442  D004               	goto	l5749
  7975  003444  6C29               	negf	___awmod@divisor,c
  7976  003446  1E2A               	comf	___awmod@divisor+1,f,c
  7977  003448  B0D8               	btfsc	status,0,c
  7978  00344A  2A2A               	incf	___awmod@divisor+1,f,c
  7979  00344C                     l5749:
  7980  00344C  5029               	movf	___awmod@divisor,w,c
  7981  00344E  102A               	iorwf	___awmod@divisor+1,w,c
  7982  003450  B4D8               	btfsc	status,2,c
  7983  003452  D018               	goto	l5765
  7984  003454  0E01               	movlw	1
  7985  003456  6E2B               	movwf	___awmod@counter,c
  7986  003458  D004               	goto	l5755
  7987  00345A                     l5753:
  7988  00345A  90D8               	bcf	status,0,c
  7989  00345C  3629               	rlcf	___awmod@divisor,f,c
  7990  00345E  362A               	rlcf	___awmod@divisor+1,f,c
  7991  003460  2A2B               	incf	___awmod@counter,f,c
  7992  003462                     l5755:
  7993  003462  AE2A               	btfss	___awmod@divisor+1,7,c
  7994  003464  D7FA               	goto	l5753
  7995  003466                     l5757:
  7996  003466  5029               	movf	___awmod@divisor,w,c
  7997  003468  5C27               	subwf	___awmod@dividend,w,c
  7998  00346A  502A               	movf	___awmod@divisor+1,w,c
  7999  00346C  5828               	subwfb	___awmod@dividend+1,w,c
  8000  00346E  A0D8               	btfss	status,0,c
  8001  003470  D004               	goto	l5761
  8002  003472  5029               	movf	___awmod@divisor,w,c
  8003  003474  5E27               	subwf	___awmod@dividend,f,c
  8004  003476  502A               	movf	___awmod@divisor+1,w,c
  8005  003478  5A28               	subwfb	___awmod@dividend+1,f,c
  8006  00347A                     l5761:
  8007  00347A  90D8               	bcf	status,0,c
  8008  00347C  322A               	rrcf	___awmod@divisor+1,f,c
  8009  00347E  3229               	rrcf	___awmod@divisor,f,c
  8010  003480  2E2B               	decfsz	___awmod@counter,f,c
  8011  003482  D7F1               	goto	l5757
  8012  003484                     l5765:
  8013  003484  502C               	movf	___awmod@sign,w,c
  8014  003486  B4D8               	btfsc	status,2,c
  8015  003488  D004               	goto	l5769
  8016  00348A  6C27               	negf	___awmod@dividend,c
  8017  00348C  1E28               	comf	___awmod@dividend+1,f,c
  8018  00348E  B0D8               	btfsc	status,0,c
  8019  003490  2A28               	incf	___awmod@dividend+1,f,c
  8020  003492                     l5769:
  8021  003492  C027  F027         	movff	___awmod@dividend,?___awmod
  8022  003496  C028  F028         	movff	___awmod@dividend+1,?___awmod+1
  8023  00349A  0012               	return	
  8024  00349C                     __end_of___awmod:
  8025                           	opt stack 0
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           prodh	equ	0xFF4
  8031                           prodl	equ	0xFF3
  8032                           postinc0	equ	0xFEE
  8033                           wreg	equ	0xFE8
  8034                           postdec1	equ	0xFE5
  8035                           fsr1l	equ	0xFE1
  8036                           indf2	equ	0xFDF
  8037                           postinc2	equ	0xFDE
  8038                           postdec2	equ	0xFDD
  8039                           fsr2h	equ	0xFDA
  8040                           fsr2l	equ	0xFD9
  8041                           status	equ	0xFD8
  8042                           
  8043 ;; *************** function ___awdiv *****************
  8044 ;; Defined at:
  8045 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8046 ;; Parameters:    Size  Location     Type
  8047 ;;  dividend        2   44[COMRAM] int 
  8048 ;;  divisor         2   46[COMRAM] int 
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;  quotient        2    2[BANK0 ] int 
  8051 ;;  sign            1    1[BANK0 ] unsigned char 
  8052 ;;  counter         1    0[BANK0 ] unsigned char 
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  2   44[COMRAM] int 
  8055 ;; Registers used:
  8056 ;;		wreg, status,2, status,0
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;Total ram usage:        8 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    3
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_fround
  8073 ;;		_scale
  8074 ;;		_printf
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078                           	psect	text21
  8079  00315E                     __ptext21:
  8080                           	opt stack 0
  8081  00315E                     ___awdiv:
  8082                           	opt stack 24
  8083                           
  8084                           ;incstack = 0
  8085  00315E  0E00               	movlw	0
  8086  003160  0100               	movlb	0	; () banked
  8087  003162  6F81               	movwf	___awdiv@sign& (0+255),b
  8088                           
  8089                           ; BSR set to: 0
  8090  003164  AE30               	btfss	___awdiv@divisor+1,7,c
  8091  003166  D007               	goto	l5701
  8092                           
  8093                           ; BSR set to: 0
  8094  003168  6C2F               	negf	___awdiv@divisor,c
  8095  00316A  1E30               	comf	___awdiv@divisor+1,f,c
  8096  00316C  B0D8               	btfsc	status,0,c
  8097  00316E  2A30               	incf	___awdiv@divisor+1,f,c
  8098                           
  8099                           ; BSR set to: 0
  8100  003170  0E01               	movlw	1
  8101  003172  0100               	movlb	0	; () banked
  8102  003174  6F81               	movwf	___awdiv@sign& (0+255),b
  8103  003176                     l5701:
  8104                           
  8105                           ; BSR set to: 0
  8106  003176  AE2E               	btfss	___awdiv@dividend+1,7,c
  8107  003178  D007               	goto	l5707
  8108                           
  8109                           ; BSR set to: 0
  8110  00317A  6C2D               	negf	___awdiv@dividend,c
  8111  00317C  1E2E               	comf	___awdiv@dividend+1,f,c
  8112  00317E  B0D8               	btfsc	status,0,c
  8113  003180  2A2E               	incf	___awdiv@dividend+1,f,c
  8114                           
  8115                           ; BSR set to: 0
  8116  003182  0E01               	movlw	1
  8117  003184  0100               	movlb	0	; () banked
  8118  003186  1B81               	xorwf	___awdiv@sign& (0+255),f,b
  8119  003188                     l5707:
  8120                           
  8121                           ; BSR set to: 0
  8122  003188  0E00               	movlw	0
  8123  00318A  0100               	movlb	0	; () banked
  8124  00318C  6F83               	movwf	(___awdiv@quotient+1)& (0+255),b
  8125  00318E  0E00               	movlw	0
  8126  003190  6F82               	movwf	___awdiv@quotient& (0+255),b
  8127                           
  8128                           ; BSR set to: 0
  8129  003192  502F               	movf	___awdiv@divisor,w,c
  8130  003194  1030               	iorwf	___awdiv@divisor+1,w,c
  8131  003196  B4D8               	btfsc	status,2,c
  8132  003198  D021               	goto	l5729
  8133                           
  8134                           ; BSR set to: 0
  8135  00319A  0E01               	movlw	1
  8136  00319C  0100               	movlb	0	; () banked
  8137  00319E  6F80               	movwf	___awdiv@counter& (0+255),b
  8138  0031A0  D005               	goto	l5715
  8139  0031A2                     l5713:
  8140                           
  8141                           ; BSR set to: 0
  8142  0031A2  90D8               	bcf	status,0,c
  8143  0031A4  362F               	rlcf	___awdiv@divisor,f,c
  8144  0031A6  3630               	rlcf	___awdiv@divisor+1,f,c
  8145  0031A8  0100               	movlb	0	; () banked
  8146  0031AA  2B80               	incf	___awdiv@counter& (0+255),f,b
  8147  0031AC                     l5715:
  8148                           
  8149                           ; BSR set to: 0
  8150  0031AC  AE30               	btfss	___awdiv@divisor+1,7,c
  8151  0031AE  D7F9               	goto	l5713
  8152  0031B0                     l5717:
  8153                           
  8154                           ; BSR set to: 0
  8155  0031B0  0100               	movlb	0	; () banked
  8156  0031B2  90D8               	bcf	status,0,c
  8157  0031B4  3782               	rlcf	___awdiv@quotient& (0+255),f,b
  8158  0031B6  3783               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8159                           
  8160                           ; BSR set to: 0
  8161  0031B8  502F               	movf	___awdiv@divisor,w,c
  8162  0031BA  5C2D               	subwf	___awdiv@dividend,w,c
  8163  0031BC  5030               	movf	___awdiv@divisor+1,w,c
  8164  0031BE  582E               	subwfb	___awdiv@dividend+1,w,c
  8165  0031C0  A0D8               	btfss	status,0,c
  8166  0031C2  D006               	goto	l5725
  8167                           
  8168                           ; BSR set to: 0
  8169  0031C4  502F               	movf	___awdiv@divisor,w,c
  8170  0031C6  5E2D               	subwf	___awdiv@dividend,f,c
  8171  0031C8  5030               	movf	___awdiv@divisor+1,w,c
  8172  0031CA  5A2E               	subwfb	___awdiv@dividend+1,f,c
  8173                           
  8174                           ; BSR set to: 0
  8175  0031CC  0100               	movlb	0	; () banked
  8176  0031CE  8182               	bsf	___awdiv@quotient& (0+255),0,b
  8177  0031D0                     l5725:
  8178                           
  8179                           ; BSR set to: 0
  8180  0031D0  90D8               	bcf	status,0,c
  8181  0031D2  3230               	rrcf	___awdiv@divisor+1,f,c
  8182  0031D4  322F               	rrcf	___awdiv@divisor,f,c
  8183                           
  8184                           ; BSR set to: 0
  8185  0031D6  0100               	movlb	0	; () banked
  8186  0031D8  2F80               	decfsz	___awdiv@counter& (0+255),f,b
  8187  0031DA  D7EA               	goto	l5717
  8188  0031DC                     l5729:
  8189                           
  8190                           ; BSR set to: 0
  8191  0031DC  0100               	movlb	0	; () banked
  8192  0031DE  5181               	movf	___awdiv@sign& (0+255),w,b
  8193  0031E0  0100               	movlb	0	; () banked
  8194  0031E2  B4D8               	btfsc	status,2,c
  8195  0031E4  D005               	goto	l5733
  8196                           
  8197                           ; BSR set to: 0
  8198  0031E6  0100               	movlb	0	; () banked
  8199  0031E8  6D82               	negf	___awdiv@quotient& (0+255),b
  8200  0031EA  1F83               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8201  0031EC  B0D8               	btfsc	status,0,c
  8202  0031EE  2B83               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8203  0031F0                     l5733:
  8204                           
  8205                           ; BSR set to: 0
  8206  0031F0  C082  F02D         	movff	___awdiv@quotient,?___awdiv
  8207  0031F4  C083  F02E         	movff	___awdiv@quotient+1,?___awdiv+1
  8208  0031F8  0012               	return	
  8209  0031FA                     __end_of___awdiv:
  8210                           	opt stack 0
  8211                           tblptru	equ	0xFF8
  8212                           tblptrh	equ	0xFF7
  8213                           tblptrl	equ	0xFF6
  8214                           tablat	equ	0xFF5
  8215                           prodh	equ	0xFF4
  8216                           prodl	equ	0xFF3
  8217                           postinc0	equ	0xFEE
  8218                           wreg	equ	0xFE8
  8219                           postdec1	equ	0xFE5
  8220                           fsr1l	equ	0xFE1
  8221                           indf2	equ	0xFDF
  8222                           postinc2	equ	0xFDE
  8223                           postdec2	equ	0xFDD
  8224                           fsr2h	equ	0xFDA
  8225                           fsr2l	equ	0xFD9
  8226                           status	equ	0xFD8
  8227                           
  8228 ;; *************** function __tdiv_to_l_ *****************
  8229 ;; Defined at:
  8230 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;  f1              3   38[COMRAM] float 
  8233 ;;  f2              3   41[COMRAM] float 
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;  quot            4    0[BANK0 ] unsigned long 
  8236 ;;  exp1            1    5[BANK0 ] unsigned char 
  8237 ;;  cntr            1    4[BANK0 ] unsigned char 
  8238 ;; Return value:  Size  Location     Type
  8239 ;;                  4   38[COMRAM] unsigned long 
  8240 ;; Registers used:
  8241 ;;		wreg, status,2, status,0
  8242 ;; Tracked objects:
  8243 ;;		On entry : 0/0
  8244 ;;		On exit  : 0/0
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8247 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8251 ;;Total ram usage:       15 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; Hardware stack levels required when called:    3
  8254 ;; This function calls:
  8255 ;;		Nothing
  8256 ;; This function is called by:
  8257 ;;		_printf
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           	psect	text22
  8262  0022D6                     __ptext22:
  8263                           	opt stack 0
  8264  0022D6                     __tdiv_to_l_:
  8265                           	opt stack 25
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;incstack = 0
  8269  0022D6  C029  F02D         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8270  0022DA  6A2E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8271  0022DC  6A2F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8272  0022DE  3428               	rlcf	__tdiv_to_l_@f1+1,w,c
  8273  0022E0  362D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8274  0022E2  E301               	bnc	u5871
  8275  0022E4  802E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8276  0022E6                     u5871:
  8277  0022E6  502D               	movf	??__tdiv_to_l_,w,c
  8278  0022E8  0100               	movlb	0	; () banked
  8279  0022EA  6F85               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8280  0022EC  0100               	movlb	0	; () banked
  8281  0022EE  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8282  0022F0  A4D8               	btfss	status,2,c
  8283  0022F2  D009               	goto	l5859
  8284                           
  8285                           ; BSR set to: 0
  8286  0022F4  0E00               	movlw	0
  8287  0022F6  6E27               	movwf	?__tdiv_to_l_,c
  8288  0022F8  0E00               	movlw	0
  8289  0022FA  6E28               	movwf	?__tdiv_to_l_+1,c
  8290  0022FC  0E00               	movlw	0
  8291  0022FE  6E29               	movwf	?__tdiv_to_l_+2,c
  8292  002300  0E00               	movlw	0
  8293  002302  6E2A               	movwf	?__tdiv_to_l_+3,c
  8294                           
  8295                           ; BSR set to: 0
  8296  002304  0012               	return	
  8297  002306                     l5859:
  8298                           
  8299                           ; BSR set to: 0
  8300  002306  C02C  F02D         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8301  00230A  6A2E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8302  00230C  6A2F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8303  00230E  342B               	rlcf	__tdiv_to_l_@f2+1,w,c
  8304  002310  362D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8305  002312  E301               	bnc	u5891
  8306  002314  802E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8307  002316                     u5891:
  8308  002316  502D               	movf	??__tdiv_to_l_,w,c
  8309  002318  0100               	movlb	0	; () banked
  8310  00231A  6F84               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8311  00231C  0100               	movlb	0	; () banked
  8312  00231E  5184               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8313  002320  A4D8               	btfss	status,2,c
  8314  002322  D009               	goto	l5865
  8315                           
  8316                           ; BSR set to: 0
  8317  002324  0E00               	movlw	0
  8318  002326  6E27               	movwf	?__tdiv_to_l_,c
  8319  002328  0E00               	movlw	0
  8320  00232A  6E28               	movwf	?__tdiv_to_l_+1,c
  8321  00232C  0E00               	movlw	0
  8322  00232E  6E29               	movwf	?__tdiv_to_l_+2,c
  8323  002330  0E00               	movlw	0
  8324  002332  6E2A               	movwf	?__tdiv_to_l_+3,c
  8325                           
  8326                           ; BSR set to: 0
  8327  002334  0012               	return	
  8328  002336                     l5865:
  8329                           
  8330                           ; BSR set to: 0
  8331  002336  8E28               	bsf	__tdiv_to_l_@f1+1,7,c
  8332                           
  8333                           ; BSR set to: 0
  8334  002338  0EFF               	movlw	255
  8335  00233A  1627               	andwf	__tdiv_to_l_@f1,f,c
  8336  00233C  0EFF               	movlw	255
  8337  00233E  1628               	andwf	__tdiv_to_l_@f1+1,f,c
  8338  002340  0E00               	movlw	0
  8339  002342  1629               	andwf	__tdiv_to_l_@f1+2,f,c
  8340  002344  8E2B               	bsf	__tdiv_to_l_@f2+1,7,c
  8341                           
  8342                           ; BSR set to: 0
  8343  002346  0EFF               	movlw	255
  8344  002348  162A               	andwf	__tdiv_to_l_@f2,f,c
  8345  00234A  0EFF               	movlw	255
  8346  00234C  162B               	andwf	__tdiv_to_l_@f2+1,f,c
  8347  00234E  0E00               	movlw	0
  8348  002350  162C               	andwf	__tdiv_to_l_@f2+2,f,c
  8349                           
  8350                           ; BSR set to: 0
  8351  002352  0E00               	movlw	0
  8352  002354  0100               	movlb	0	; () banked
  8353  002356  6F80               	movwf	__tdiv_to_l_@quot& (0+255),b
  8354  002358  0E00               	movlw	0
  8355  00235A  6F81               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8356  00235C  0E00               	movlw	0
  8357  00235E  6F82               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8358  002360  0E00               	movlw	0
  8359  002362  6F83               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8360                           
  8361                           ; BSR set to: 0
  8362  002364  0E7F               	movlw	127
  8363  002366  0100               	movlb	0	; () banked
  8364  002368  5F85               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8365                           
  8366                           ; BSR set to: 0
  8367  00236A  0100               	movlb	0	; () banked
  8368  00236C  5184               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8369  00236E  0F98               	addlw	152
  8370  002370  0100               	movlb	0	; () banked
  8371  002372  5F85               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8372                           
  8373                           ; BSR set to: 0
  8374  002374  0E18               	movlw	24
  8375  002376  0100               	movlb	0	; () banked
  8376  002378  6F84               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8377  00237A                     l1127:
  8378                           
  8379                           ; BSR set to: 0
  8380  00237A  0100               	movlb	0	; () banked
  8381  00237C  90D8               	bcf	status,0,c
  8382  00237E  3780               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8383  002380  3781               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8384  002382  3782               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8385  002384  3783               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8386                           
  8387                           ; BSR set to: 0
  8388  002386  502A               	movf	__tdiv_to_l_@f2,w,c
  8389  002388  5C27               	subwf	__tdiv_to_l_@f1,w,c
  8390  00238A  502B               	movf	__tdiv_to_l_@f2+1,w,c
  8391  00238C  5828               	subwfb	__tdiv_to_l_@f1+1,w,c
  8392  00238E  502C               	movf	__tdiv_to_l_@f2+2,w,c
  8393  002390  5829               	subwfb	__tdiv_to_l_@f1+2,w,c
  8394  002392  A0D8               	btfss	status,0,c
  8395  002394  D008               	goto	l1128
  8396                           
  8397                           ; BSR set to: 0
  8398  002396  502A               	movf	__tdiv_to_l_@f2,w,c
  8399  002398  5E27               	subwf	__tdiv_to_l_@f1,f,c
  8400  00239A  502B               	movf	__tdiv_to_l_@f2+1,w,c
  8401  00239C  5A28               	subwfb	__tdiv_to_l_@f1+1,f,c
  8402  00239E  502C               	movf	__tdiv_to_l_@f2+2,w,c
  8403  0023A0  5A29               	subwfb	__tdiv_to_l_@f1+2,f,c
  8404                           
  8405                           ; BSR set to: 0
  8406  0023A2  0100               	movlb	0	; () banked
  8407  0023A4  8180               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8408  0023A6                     l1128:
  8409                           
  8410                           ; BSR set to: 0
  8411  0023A6  90D8               	bcf	status,0,c
  8412  0023A8  3627               	rlcf	__tdiv_to_l_@f1,f,c
  8413  0023AA  3628               	rlcf	__tdiv_to_l_@f1+1,f,c
  8414  0023AC  3629               	rlcf	__tdiv_to_l_@f1+2,f,c
  8415                           
  8416                           ; BSR set to: 0
  8417  0023AE  0100               	movlb	0	; () banked
  8418  0023B0  2F84               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8419  0023B2  D7E3               	goto	l1127
  8420                           
  8421                           ; BSR set to: 0
  8422                           
  8423                           ; BSR set to: 0
  8424  0023B4  0100               	movlb	0	; () banked
  8425  0023B6  AF85               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8426  0023B8  D019               	goto	l5899
  8427                           
  8428                           ; BSR set to: 0
  8429  0023BA  0100               	movlb	0	; () banked
  8430  0023BC  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8431  0023BE  0A80               	xorlw	128
  8432  0023C0  0F97               	addlw	151
  8433  0023C2  B0D8               	btfsc	status,0,c
  8434  0023C4  D009               	goto	l5895
  8435                           
  8436                           ; BSR set to: 0
  8437  0023C6  0E00               	movlw	0
  8438  0023C8  6E27               	movwf	?__tdiv_to_l_,c
  8439  0023CA  0E00               	movlw	0
  8440  0023CC  6E28               	movwf	?__tdiv_to_l_+1,c
  8441  0023CE  0E00               	movlw	0
  8442  0023D0  6E29               	movwf	?__tdiv_to_l_+2,c
  8443  0023D2  0E00               	movlw	0
  8444  0023D4  6E2A               	movwf	?__tdiv_to_l_+3,c
  8445                           
  8446                           ; BSR set to: 0
  8447  0023D6  0012               	return	
  8448  0023D8                     l5895:
  8449                           
  8450                           ; BSR set to: 0
  8451  0023D8  0100               	movlb	0	; () banked
  8452  0023DA  90D8               	bcf	status,0,c
  8453  0023DC  3383               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8454  0023DE  3382               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8455  0023E0  3381               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8456  0023E2  3380               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  8457                           
  8458                           ; BSR set to: 0
  8459  0023E4  0100               	movlb	0	; () banked
  8460  0023E6  3F85               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  8461  0023E8  D7F7               	goto	l5895
  8462                           
  8463                           ; BSR set to: 0
  8464  0023EA  D01A               	goto	l1134
  8465  0023EC                     l5899:
  8466                           
  8467                           ; BSR set to: 0
  8468  0023EC  0E17               	movlw	23
  8469  0023EE  0100               	movlb	0	; () banked
  8470  0023F0  6585               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  8471  0023F2  D011               	goto	l5907
  8472                           
  8473                           ; BSR set to: 0
  8474  0023F4  0E00               	movlw	0
  8475  0023F6  6E27               	movwf	?__tdiv_to_l_,c
  8476  0023F8  0E00               	movlw	0
  8477  0023FA  6E28               	movwf	?__tdiv_to_l_+1,c
  8478  0023FC  0E00               	movlw	0
  8479  0023FE  6E29               	movwf	?__tdiv_to_l_+2,c
  8480  002400  0E00               	movlw	0
  8481  002402  6E2A               	movwf	?__tdiv_to_l_+3,c
  8482                           
  8483                           ; BSR set to: 0
  8484  002404  0012               	return	
  8485  002406                     l5905:
  8486                           
  8487                           ; BSR set to: 0
  8488  002406  0100               	movlb	0	; () banked
  8489  002408  90D8               	bcf	status,0,c
  8490  00240A  3780               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8491  00240C  3781               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8492  00240E  3782               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8493  002410  3783               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8494  002412  0100               	movlb	0	; () banked
  8495  002414  0785               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  8496  002416                     l5907:
  8497                           
  8498                           ; BSR set to: 0
  8499  002416  0100               	movlb	0	; () banked
  8500  002418  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8501  00241A  0100               	movlb	0	; () banked
  8502  00241C  A4D8               	btfss	status,2,c
  8503  00241E  D7F3               	goto	l5905
  8504  002420                     l1134:
  8505                           
  8506                           ; BSR set to: 0
  8507  002420  C080  F027         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8508  002424  C081  F028         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8509  002428  C082  F029         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8510  00242C  C083  F02A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8511                           
  8512                           ; BSR set to: 0
  8513  002430  0012               	return		;funcret
  8514  002432                     __end_of__tdiv_to_l_:
  8515                           	opt stack 0
  8516                           tblptru	equ	0xFF8
  8517                           tblptrh	equ	0xFF7
  8518                           tblptrl	equ	0xFF6
  8519                           tablat	equ	0xFF5
  8520                           prodh	equ	0xFF4
  8521                           prodl	equ	0xFF3
  8522                           postinc0	equ	0xFEE
  8523                           wreg	equ	0xFE8
  8524                           postdec1	equ	0xFE5
  8525                           fsr1l	equ	0xFE1
  8526                           indf2	equ	0xFDF
  8527                           postinc2	equ	0xFDE
  8528                           postdec2	equ	0xFDD
  8529                           fsr2h	equ	0xFDA
  8530                           fsr2l	equ	0xFD9
  8531                           status	equ	0xFD8
  8532                           
  8533 ;; *************** function __div_to_l_ *****************
  8534 ;; Defined at:
  8535 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;  f1              3   38[COMRAM] unsigned long 
  8538 ;;  f2              3   41[COMRAM] unsigned long 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;  quot            4   44[COMRAM] unsigned long 
  8541 ;;  exp1            1   49[COMRAM] unsigned char 
  8542 ;;  cntr            1   48[COMRAM] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  4   38[COMRAM] unsigned long 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2, status,0
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8552 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8555 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;Total ram usage:       12 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    3
  8559 ;; This function calls:
  8560 ;;		Nothing
  8561 ;; This function is called by:
  8562 ;;		_printf
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           	psect	text23
  8567  0026C2                     __ptext23:
  8568                           	opt stack 0
  8569  0026C2                     __div_to_l_:
  8570                           	opt stack 25
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;incstack = 0
  8574  0026C2  3429               	rlcf	__div_to_l_@f1+2,w,c
  8575  0026C4  342A               	rlcf	__div_to_l_@f1+3,w,c
  8576  0026C6  6E32               	movwf	__div_to_l_@exp1,c
  8577  0026C8  5032               	movf	__div_to_l_@exp1,w,c
  8578  0026CA  A4D8               	btfss	status,2,c
  8579  0026CC  D009               	goto	l5915
  8580  0026CE  0E00               	movlw	0
  8581  0026D0  6E27               	movwf	?__div_to_l_,c
  8582  0026D2  0E00               	movlw	0
  8583  0026D4  6E28               	movwf	?__div_to_l_+1,c
  8584  0026D6  0E00               	movlw	0
  8585  0026D8  6E29               	movwf	?__div_to_l_+2,c
  8586  0026DA  0E00               	movlw	0
  8587  0026DC  6E2A               	movwf	?__div_to_l_+3,c
  8588  0026DE  0012               	return	
  8589  0026E0                     l5915:
  8590  0026E0  342C               	rlcf	__div_to_l_@f2+2,w,c
  8591  0026E2  342D               	rlcf	__div_to_l_@f2+3,w,c
  8592  0026E4  6E31               	movwf	__div_to_l_@cntr,c
  8593  0026E6  5031               	movf	__div_to_l_@cntr,w,c
  8594  0026E8  A4D8               	btfss	status,2,c
  8595  0026EA  D009               	goto	l5921
  8596  0026EC  0E00               	movlw	0
  8597  0026EE  6E27               	movwf	?__div_to_l_,c
  8598  0026F0  0E00               	movlw	0
  8599  0026F2  6E28               	movwf	?__div_to_l_+1,c
  8600  0026F4  0E00               	movlw	0
  8601  0026F6  6E29               	movwf	?__div_to_l_+2,c
  8602  0026F8  0E00               	movlw	0
  8603  0026FA  6E2A               	movwf	?__div_to_l_+3,c
  8604  0026FC  0012               	return	
  8605  0026FE                     l5921:
  8606  0026FE  8E29               	bsf	__div_to_l_@f1+2,7,c
  8607  002700  0EFF               	movlw	255
  8608  002702  1627               	andwf	__div_to_l_@f1,f,c
  8609  002704  0EFF               	movlw	255
  8610  002706  1628               	andwf	__div_to_l_@f1+1,f,c
  8611  002708  0EFF               	movlw	255
  8612  00270A  1629               	andwf	__div_to_l_@f1+2,f,c
  8613  00270C  0E00               	movlw	0
  8614  00270E  162A               	andwf	__div_to_l_@f1+3,f,c
  8615  002710  8E2C               	bsf	__div_to_l_@f2+2,7,c
  8616  002712  0EFF               	movlw	255
  8617  002714  162A               	andwf	__div_to_l_@f2,f,c
  8618  002716  0EFF               	movlw	255
  8619  002718  162B               	andwf	__div_to_l_@f2+1,f,c
  8620  00271A  0EFF               	movlw	255
  8621  00271C  162C               	andwf	__div_to_l_@f2+2,f,c
  8622  00271E  0E00               	movlw	0
  8623  002720  162D               	andwf	__div_to_l_@f2+3,f,c
  8624  002722  0E00               	movlw	0
  8625  002724  6E2D               	movwf	__div_to_l_@quot,c
  8626  002726  0E00               	movlw	0
  8627  002728  6E2E               	movwf	__div_to_l_@quot+1,c
  8628  00272A  0E00               	movlw	0
  8629  00272C  6E2F               	movwf	__div_to_l_@quot+2,c
  8630  00272E  0E00               	movlw	0
  8631  002730  6E30               	movwf	__div_to_l_@quot+3,c
  8632  002732  0E7F               	movlw	127
  8633  002734  5E32               	subwf	__div_to_l_@exp1,f,c
  8634  002736  5031               	movf	__div_to_l_@cntr,w,c
  8635  002738  0FA0               	addlw	160
  8636  00273A  5E32               	subwf	__div_to_l_@exp1,f,c
  8637  00273C  0E20               	movlw	32
  8638  00273E  6E31               	movwf	__div_to_l_@cntr,c
  8639  002740                     l5935:
  8640  002740  90D8               	bcf	status,0,c
  8641  002742  362D               	rlcf	__div_to_l_@quot,f,c
  8642  002744  362E               	rlcf	__div_to_l_@quot+1,f,c
  8643  002746  362F               	rlcf	__div_to_l_@quot+2,f,c
  8644  002748  3630               	rlcf	__div_to_l_@quot+3,f,c
  8645  00274A  502A               	movf	__div_to_l_@f2,w,c
  8646  00274C  5C27               	subwf	__div_to_l_@f1,w,c
  8647  00274E  502B               	movf	__div_to_l_@f2+1,w,c
  8648  002750  5828               	subwfb	__div_to_l_@f1+1,w,c
  8649  002752  502C               	movf	__div_to_l_@f2+2,w,c
  8650  002754  5829               	subwfb	__div_to_l_@f1+2,w,c
  8651  002756  502D               	movf	__div_to_l_@f2+3,w,c
  8652  002758  582A               	subwfb	__div_to_l_@f1+3,w,c
  8653  00275A  A0D8               	btfss	status,0,c
  8654  00275C  D009               	goto	l5943
  8655  00275E  502A               	movf	__div_to_l_@f2,w,c
  8656  002760  5E27               	subwf	__div_to_l_@f1,f,c
  8657  002762  502B               	movf	__div_to_l_@f2+1,w,c
  8658  002764  5A28               	subwfb	__div_to_l_@f1+1,f,c
  8659  002766  502C               	movf	__div_to_l_@f2+2,w,c
  8660  002768  5A29               	subwfb	__div_to_l_@f1+2,f,c
  8661  00276A  502D               	movf	__div_to_l_@f2+3,w,c
  8662  00276C  5A2A               	subwfb	__div_to_l_@f1+3,f,c
  8663  00276E  802D               	bsf	__div_to_l_@quot,0,c
  8664  002770                     l5943:
  8665  002770  90D8               	bcf	status,0,c
  8666  002772  3627               	rlcf	__div_to_l_@f1,f,c
  8667  002774  3628               	rlcf	__div_to_l_@f1+1,f,c
  8668  002776  3629               	rlcf	__div_to_l_@f1+2,f,c
  8669  002778  362A               	rlcf	__div_to_l_@f1+3,f,c
  8670  00277A  2E31               	decfsz	__div_to_l_@cntr,f,c
  8671  00277C  D7E1               	goto	l5935
  8672  00277E  AE32               	btfss	__div_to_l_@exp1,7,c
  8673  002780  D016               	goto	l5959
  8674  002782  5032               	movf	__div_to_l_@exp1,w,c
  8675  002784  0A80               	xorlw	128
  8676  002786  0F9F               	addlw	159
  8677  002788  B0D8               	btfsc	status,0,c
  8678  00278A  D009               	goto	l5955
  8679  00278C  0E00               	movlw	0
  8680  00278E  6E27               	movwf	?__div_to_l_,c
  8681  002790  0E00               	movlw	0
  8682  002792  6E28               	movwf	?__div_to_l_+1,c
  8683  002794  0E00               	movlw	0
  8684  002796  6E29               	movwf	?__div_to_l_+2,c
  8685  002798  0E00               	movlw	0
  8686  00279A  6E2A               	movwf	?__div_to_l_+3,c
  8687  00279C  0012               	return	
  8688  00279E                     l5955:
  8689  00279E  90D8               	bcf	status,0,c
  8690  0027A0  3230               	rrcf	__div_to_l_@quot+3,f,c
  8691  0027A2  322F               	rrcf	__div_to_l_@quot+2,f,c
  8692  0027A4  322E               	rrcf	__div_to_l_@quot+1,f,c
  8693  0027A6  322D               	rrcf	__div_to_l_@quot,f,c
  8694  0027A8  3E32               	incfsz	__div_to_l_@exp1,f,c
  8695  0027AA  D7F9               	goto	l5955
  8696  0027AC  D015               	goto	l1030
  8697  0027AE                     l5959:
  8698  0027AE  0E1F               	movlw	31
  8699  0027B0  6432               	cpfsgt	__div_to_l_@exp1,c
  8700  0027B2  D00F               	goto	l5967
  8701  0027B4  0E00               	movlw	0
  8702  0027B6  6E27               	movwf	?__div_to_l_,c
  8703  0027B8  0E00               	movlw	0
  8704  0027BA  6E28               	movwf	?__div_to_l_+1,c
  8705  0027BC  0E00               	movlw	0
  8706  0027BE  6E29               	movwf	?__div_to_l_+2,c
  8707  0027C0  0E00               	movlw	0
  8708  0027C2  6E2A               	movwf	?__div_to_l_+3,c
  8709  0027C4  0012               	return	
  8710  0027C6                     l5965:
  8711  0027C6  90D8               	bcf	status,0,c
  8712  0027C8  362D               	rlcf	__div_to_l_@quot,f,c
  8713  0027CA  362E               	rlcf	__div_to_l_@quot+1,f,c
  8714  0027CC  362F               	rlcf	__div_to_l_@quot+2,f,c
  8715  0027CE  3630               	rlcf	__div_to_l_@quot+3,f,c
  8716  0027D0  0632               	decf	__div_to_l_@exp1,f,c
  8717  0027D2                     l5967:
  8718  0027D2  5032               	movf	__div_to_l_@exp1,w,c
  8719  0027D4  A4D8               	btfss	status,2,c
  8720  0027D6  D7F7               	goto	l5965
  8721  0027D8                     l1030:
  8722  0027D8  C02D  F027         	movff	__div_to_l_@quot,?__div_to_l_
  8723  0027DC  C02E  F028         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8724  0027E0  C02F  F029         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8725  0027E4  C030  F02A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8726  0027E8  0012               	return		;funcret
  8727  0027EA                     __end_of__div_to_l_:
  8728                           	opt stack 0
  8729                           tblptru	equ	0xFF8
  8730                           tblptrh	equ	0xFF7
  8731                           tblptrl	equ	0xFF6
  8732                           tablat	equ	0xFF5
  8733                           prodh	equ	0xFF4
  8734                           prodl	equ	0xFF3
  8735                           postinc0	equ	0xFEE
  8736                           wreg	equ	0xFE8
  8737                           postdec1	equ	0xFE5
  8738                           fsr1l	equ	0xFE1
  8739                           indf2	equ	0xFDF
  8740                           postinc2	equ	0xFDE
  8741                           postdec2	equ	0xFDD
  8742                           fsr2h	equ	0xFDA
  8743                           fsr2l	equ	0xFD9
  8744                           status	equ	0xFD8
  8745                           
  8746 ;; *************** function ___lltoft *****************
  8747 ;; Defined at:
  8748 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8749 ;; Parameters:    Size  Location     Type
  8750 ;;  c               4   46[COMRAM] unsigned long 
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;  exp             1   50[COMRAM] unsigned char 
  8753 ;; Return value:  Size  Location     Type
  8754 ;;                  3   46[COMRAM] float 
  8755 ;; Registers used:
  8756 ;;		wreg, status,2, status,0, cstack
  8757 ;; Tracked objects:
  8758 ;;		On entry : 0/0
  8759 ;;		On exit  : 0/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8762 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8763 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;Total ram usage:        9 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; Hardware stack levels required when called:    4
  8769 ;; This function calls:
  8770 ;;		___ftpack
  8771 ;; This function is called by:
  8772 ;;		_printf
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           	psect	text24
  8777  00350C                     __ptext24:
  8778                           	opt stack 0
  8779  00350C                     ___lltoft:
  8780                           	opt stack 24
  8781                           
  8782                           ;incstack = 0
  8783  00350C  0E8E               	movlw	142
  8784  00350E  6E33               	movwf	___lltoft@exp,c
  8785  003510  D006               	goto	l6161
  8786  003512                     l6159:
  8787  003512  90D8               	bcf	status,0,c
  8788  003514  3232               	rrcf	___lltoft@c+3,f,c
  8789  003516  3231               	rrcf	___lltoft@c+2,f,c
  8790  003518  3230               	rrcf	___lltoft@c+1,f,c
  8791  00351A  322F               	rrcf	___lltoft@c,f,c
  8792  00351C  2A33               	incf	___lltoft@exp,f,c
  8793  00351E                     l6161:
  8794  00351E  0E00               	movlw	0
  8795  003520  142F               	andwf	___lltoft@c,w,c
  8796  003522  0100               	movlb	0	; () banked
  8797  003524  6F80               	movwf	??___lltoft& (0+255),b
  8798  003526  0E00               	movlw	0
  8799  003528  1430               	andwf	___lltoft@c+1,w,c
  8800  00352A  0100               	movlb	0	; () banked
  8801  00352C  6F81               	movwf	(??___lltoft+1)& (0+255),b
  8802  00352E  0E00               	movlw	0
  8803  003530  1431               	andwf	___lltoft@c+2,w,c
  8804  003532  0100               	movlb	0	; () banked
  8805  003534  6F82               	movwf	(??___lltoft+2)& (0+255),b
  8806  003536  0EFF               	movlw	255
  8807  003538  1432               	andwf	___lltoft@c+3,w,c
  8808  00353A  0100               	movlb	0	; () banked
  8809  00353C  6F83               	movwf	(??___lltoft+3)& (0+255),b
  8810  00353E  0100               	movlb	0	; () banked
  8811  003540  5180               	movf	??___lltoft& (0+255),w,b
  8812  003542  0100               	movlb	0	; () banked
  8813  003544  1181               	iorwf	(??___lltoft+1)& (0+255),w,b
  8814  003546  0100               	movlb	0	; () banked
  8815  003548  1182               	iorwf	(??___lltoft+2)& (0+255),w,b
  8816  00354A  0100               	movlb	0	; () banked
  8817  00354C  1183               	iorwf	(??___lltoft+3)& (0+255),w,b
  8818  00354E  A4D8               	btfss	status,2,c
  8819  003550  D7E0               	goto	l6159
  8820                           
  8821                           ; BSR set to: 0
  8822                           
  8823                           ; BSR set to: 0
  8824  003552  C02F  F027         	movff	___lltoft@c,___ftpack@arg
  8825  003556  C030  F028         	movff	___lltoft@c+1,___ftpack@arg+1
  8826  00355A  C031  F029         	movff	___lltoft@c+2,___ftpack@arg+2
  8827  00355E  C033  F02A         	movff	___lltoft@exp,___ftpack@exp
  8828  003562  0E00               	movlw	0
  8829  003564  6E2B               	movwf	___ftpack@sign,c
  8830  003566  EC58  F018         	call	___ftpack	;wreg free
  8831  00356A  C027  F02F         	movff	?___ftpack,?___lltoft
  8832  00356E  C028  F030         	movff	?___ftpack+1,?___lltoft+1
  8833  003572  C029  F031         	movff	?___ftpack+2,?___lltoft+2
  8834  003576  0012               	return	
  8835  003578                     __end_of___lltoft:
  8836                           	opt stack 0
  8837                           tblptru	equ	0xFF8
  8838                           tblptrh	equ	0xFF7
  8839                           tblptrl	equ	0xFF6
  8840                           tablat	equ	0xFF5
  8841                           prodh	equ	0xFF4
  8842                           prodl	equ	0xFF3
  8843                           postinc0	equ	0xFEE
  8844                           wreg	equ	0xFE8
  8845                           postdec1	equ	0xFE5
  8846                           fsr1l	equ	0xFE1
  8847                           indf2	equ	0xFDF
  8848                           postinc2	equ	0xFDE
  8849                           postdec2	equ	0xFDD
  8850                           fsr2h	equ	0xFDA
  8851                           fsr2l	equ	0xFD9
  8852                           status	equ	0xFD8
  8853                           
  8854 ;; *************** function ___llmod *****************
  8855 ;; Defined at:
  8856 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;  dividend        4    0[BANK0 ] unsigned long 
  8859 ;;  divisor         4    4[BANK0 ] unsigned long 
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  counter         1    8[BANK0 ] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  4    0[BANK0 ] unsigned long 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8871 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8874 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;Total ram usage:        9 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    3
  8878 ;; This function calls:
  8879 ;;		Nothing
  8880 ;; This function is called by:
  8881 ;;		_printf
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           	psect	text25
  8886  0031FA                     __ptext25:
  8887                           	opt stack 0
  8888  0031FA                     ___llmod:
  8889                           	opt stack 25
  8890                           
  8891                           ;incstack = 0
  8892  0031FA  0100               	movlb	0	; () banked
  8893  0031FC  5184               	movf	___llmod@divisor& (0+255),w,b
  8894  0031FE  0100               	movlb	0	; () banked
  8895  003200  1185               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  8896  003202  0100               	movlb	0	; () banked
  8897  003204  1186               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  8898  003206  0100               	movlb	0	; () banked
  8899  003208  1187               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  8900  00320A  B4D8               	btfsc	status,2,c
  8901  00320C  D03A               	goto	l1219
  8902                           
  8903                           ; BSR set to: 0
  8904  00320E  0E01               	movlw	1
  8905  003210  0100               	movlb	0	; () banked
  8906  003212  6F88               	movwf	___llmod@counter& (0+255),b
  8907  003214  D008               	goto	l6147
  8908  003216                     l6145:
  8909                           
  8910                           ; BSR set to: 0
  8911  003216  0100               	movlb	0	; () banked
  8912  003218  90D8               	bcf	status,0,c
  8913  00321A  3784               	rlcf	___llmod@divisor& (0+255),f,b
  8914  00321C  3785               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  8915  00321E  3786               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  8916  003220  3787               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  8917  003222  0100               	movlb	0	; () banked
  8918  003224  2B88               	incf	___llmod@counter& (0+255),f,b
  8919  003226                     l6147:
  8920                           
  8921                           ; BSR set to: 0
  8922  003226  0100               	movlb	0	; () banked
  8923  003228  AF87               	btfss	(___llmod@divisor+3)& (0+255),7,b
  8924  00322A  D7F5               	goto	l6145
  8925  00322C                     l6149:
  8926                           
  8927                           ; BSR set to: 0
  8928  00322C  0100               	movlb	0	; () banked
  8929  00322E  5184               	movf	___llmod@divisor& (0+255),w,b
  8930  003230  0100               	movlb	0	; () banked
  8931  003232  5D80               	subwf	___llmod@dividend& (0+255),w,b
  8932  003234  0100               	movlb	0	; () banked
  8933  003236  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  8934  003238  0100               	movlb	0	; () banked
  8935  00323A  5981               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  8936  00323C  0100               	movlb	0	; () banked
  8937  00323E  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  8938  003240  0100               	movlb	0	; () banked
  8939  003242  5982               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  8940  003244  0100               	movlb	0	; () banked
  8941  003246  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  8942  003248  0100               	movlb	0	; () banked
  8943  00324A  5983               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  8944  00324C  A0D8               	btfss	status,0,c
  8945  00324E  D010               	goto	l6153
  8946                           
  8947                           ; BSR set to: 0
  8948  003250  0100               	movlb	0	; () banked
  8949  003252  5184               	movf	___llmod@divisor& (0+255),w,b
  8950  003254  0100               	movlb	0	; () banked
  8951  003256  5F80               	subwf	___llmod@dividend& (0+255),f,b
  8952  003258  0100               	movlb	0	; () banked
  8953  00325A  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  8954  00325C  0100               	movlb	0	; () banked
  8955  00325E  5B81               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  8956  003260  0100               	movlb	0	; () banked
  8957  003262  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  8958  003264  0100               	movlb	0	; () banked
  8959  003266  5B82               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  8960  003268  0100               	movlb	0	; () banked
  8961  00326A  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  8962  00326C  0100               	movlb	0	; () banked
  8963  00326E  5B83               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  8964  003270                     l6153:
  8965                           
  8966                           ; BSR set to: 0
  8967  003270  0100               	movlb	0	; () banked
  8968  003272  90D8               	bcf	status,0,c
  8969  003274  3387               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  8970  003276  3386               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  8971  003278  3385               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  8972  00327A  3384               	rrcf	___llmod@divisor& (0+255),f,b
  8973                           
  8974                           ; BSR set to: 0
  8975  00327C  0100               	movlb	0	; () banked
  8976  00327E  2F88               	decfsz	___llmod@counter& (0+255),f,b
  8977  003280  D7D5               	goto	l6149
  8978  003282                     l1219:
  8979                           
  8980                           ; BSR set to: 0
  8981  003282  C080  F080         	movff	___llmod@dividend,?___llmod
  8982  003286  C081  F081         	movff	___llmod@dividend+1,?___llmod+1
  8983  00328A  C082  F082         	movff	___llmod@dividend+2,?___llmod+2
  8984  00328E  C083  F083         	movff	___llmod@dividend+3,?___llmod+3
  8985                           
  8986                           ; BSR set to: 0
  8987  003292  0012               	return		;funcret
  8988  003294                     __end_of___llmod:
  8989                           	opt stack 0
  8990                           tblptru	equ	0xFF8
  8991                           tblptrh	equ	0xFF7
  8992                           tblptrl	equ	0xFF6
  8993                           tablat	equ	0xFF5
  8994                           prodh	equ	0xFF4
  8995                           prodl	equ	0xFF3
  8996                           postinc0	equ	0xFEE
  8997                           wreg	equ	0xFE8
  8998                           postdec1	equ	0xFE5
  8999                           fsr1l	equ	0xFE1
  9000                           indf2	equ	0xFDF
  9001                           postinc2	equ	0xFDE
  9002                           postdec2	equ	0xFDD
  9003                           fsr2h	equ	0xFDA
  9004                           fsr2l	equ	0xFD9
  9005                           status	equ	0xFD8
  9006                           
  9007 ;; *************** function ___lldiv *****************
  9008 ;; Defined at:
  9009 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9010 ;; Parameters:    Size  Location     Type
  9011 ;;  dividend        4   38[COMRAM] unsigned long 
  9012 ;;  divisor         4   42[COMRAM] unsigned long 
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;  quotient        4   46[COMRAM] unsigned long 
  9015 ;;  counter         1   50[COMRAM] unsigned char 
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  4   38[COMRAM] unsigned long 
  9018 ;; Registers used:
  9019 ;;		wreg, status,2, status,0
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9025 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9028 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9029 ;;Total ram usage:       13 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    3
  9032 ;; This function calls:
  9033 ;;		Nothing
  9034 ;; This function is called by:
  9035 ;;		_printf
  9036 ;;		_I2C_Master_Init
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           	psect	text26
  9041  0033AA                     __ptext26:
  9042                           	opt stack 0
  9043  0033AA                     ___lldiv:
  9044                           	opt stack 25
  9045                           
  9046                           ; BSR set to: 0
  9047                           ;incstack = 0
  9048  0033AA  0E00               	movlw	0
  9049  0033AC  6E2F               	movwf	___lldiv@quotient,c
  9050  0033AE  0E00               	movlw	0
  9051  0033B0  6E30               	movwf	___lldiv@quotient+1,c
  9052  0033B2  0E00               	movlw	0
  9053  0033B4  6E31               	movwf	___lldiv@quotient+2,c
  9054  0033B6  0E00               	movlw	0
  9055  0033B8  6E32               	movwf	___lldiv@quotient+3,c
  9056  0033BA  502B               	movf	___lldiv@divisor,w,c
  9057  0033BC  102C               	iorwf	___lldiv@divisor+1,w,c
  9058  0033BE  102D               	iorwf	___lldiv@divisor+2,w,c
  9059  0033C0  102E               	iorwf	___lldiv@divisor+3,w,c
  9060  0033C2  B4D8               	btfsc	status,2,c
  9061  0033C4  D02A               	goto	l1209
  9062  0033C6  0E01               	movlw	1
  9063  0033C8  6E33               	movwf	___lldiv@counter,c
  9064  0033CA  D006               	goto	l6127
  9065  0033CC                     l6125:
  9066  0033CC  90D8               	bcf	status,0,c
  9067  0033CE  362B               	rlcf	___lldiv@divisor,f,c
  9068  0033D0  362C               	rlcf	___lldiv@divisor+1,f,c
  9069  0033D2  362D               	rlcf	___lldiv@divisor+2,f,c
  9070  0033D4  362E               	rlcf	___lldiv@divisor+3,f,c
  9071  0033D6  2A33               	incf	___lldiv@counter,f,c
  9072  0033D8                     l6127:
  9073  0033D8  AE2E               	btfss	___lldiv@divisor+3,7,c
  9074  0033DA  D7F8               	goto	l6125
  9075  0033DC                     l6129:
  9076  0033DC  90D8               	bcf	status,0,c
  9077  0033DE  362F               	rlcf	___lldiv@quotient,f,c
  9078  0033E0  3630               	rlcf	___lldiv@quotient+1,f,c
  9079  0033E2  3631               	rlcf	___lldiv@quotient+2,f,c
  9080  0033E4  3632               	rlcf	___lldiv@quotient+3,f,c
  9081  0033E6  502B               	movf	___lldiv@divisor,w,c
  9082  0033E8  5C27               	subwf	___lldiv@dividend,w,c
  9083  0033EA  502C               	movf	___lldiv@divisor+1,w,c
  9084  0033EC  5828               	subwfb	___lldiv@dividend+1,w,c
  9085  0033EE  502D               	movf	___lldiv@divisor+2,w,c
  9086  0033F0  5829               	subwfb	___lldiv@dividend+2,w,c
  9087  0033F2  502E               	movf	___lldiv@divisor+3,w,c
  9088  0033F4  582A               	subwfb	___lldiv@dividend+3,w,c
  9089  0033F6  A0D8               	btfss	status,0,c
  9090  0033F8  D009               	goto	l6137
  9091  0033FA  502B               	movf	___lldiv@divisor,w,c
  9092  0033FC  5E27               	subwf	___lldiv@dividend,f,c
  9093  0033FE  502C               	movf	___lldiv@divisor+1,w,c
  9094  003400  5A28               	subwfb	___lldiv@dividend+1,f,c
  9095  003402  502D               	movf	___lldiv@divisor+2,w,c
  9096  003404  5A29               	subwfb	___lldiv@dividend+2,f,c
  9097  003406  502E               	movf	___lldiv@divisor+3,w,c
  9098  003408  5A2A               	subwfb	___lldiv@dividend+3,f,c
  9099  00340A  802F               	bsf	___lldiv@quotient,0,c
  9100  00340C                     l6137:
  9101  00340C  90D8               	bcf	status,0,c
  9102  00340E  322E               	rrcf	___lldiv@divisor+3,f,c
  9103  003410  322D               	rrcf	___lldiv@divisor+2,f,c
  9104  003412  322C               	rrcf	___lldiv@divisor+1,f,c
  9105  003414  322B               	rrcf	___lldiv@divisor,f,c
  9106  003416  2E33               	decfsz	___lldiv@counter,f,c
  9107  003418  D7E1               	goto	l6129
  9108  00341A                     l1209:
  9109  00341A  C02F  F027         	movff	___lldiv@quotient,?___lldiv
  9110  00341E  C030  F028         	movff	___lldiv@quotient+1,?___lldiv+1
  9111  003422  C031  F029         	movff	___lldiv@quotient+2,?___lldiv+2
  9112  003426  C032  F02A         	movff	___lldiv@quotient+3,?___lldiv+3
  9113  00342A  0012               	return		;funcret
  9114  00342C                     __end_of___lldiv:
  9115                           	opt stack 0
  9116                           tblptru	equ	0xFF8
  9117                           tblptrh	equ	0xFF7
  9118                           tblptrl	equ	0xFF6
  9119                           tablat	equ	0xFF5
  9120                           prodh	equ	0xFF4
  9121                           prodl	equ	0xFF3
  9122                           postinc0	equ	0xFEE
  9123                           wreg	equ	0xFE8
  9124                           postdec1	equ	0xFE5
  9125                           fsr1l	equ	0xFE1
  9126                           indf2	equ	0xFDF
  9127                           postinc2	equ	0xFDE
  9128                           postdec2	equ	0xFDD
  9129                           fsr2h	equ	0xFDA
  9130                           fsr2l	equ	0xFD9
  9131                           status	equ	0xFD8
  9132                           
  9133 ;; *************** function ___ftsub *****************
  9134 ;; Defined at:
  9135 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;  f1              3   58[BANK0 ] float 
  9138 ;;  f2              3   61[BANK0 ] float 
  9139 ;; Auto vars:     Size  Location     Type
  9140 ;;		None
  9141 ;; Return value:  Size  Location     Type
  9142 ;;                  3   58[BANK0 ] float 
  9143 ;; Registers used:
  9144 ;;		wreg, status,2, status,0, cstack
  9145 ;; Tracked objects:
  9146 ;;		On entry : 0/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9150 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;Total ram usage:        6 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    5
  9157 ;; This function calls:
  9158 ;;		___ftadd
  9159 ;; This function is called by:
  9160 ;;		_sortBattery
  9161 ;;		_printf
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           	psect	text27
  9166  003644                     __ptext27:
  9167                           	opt stack 0
  9168  003644                     ___ftsub:
  9169                           	opt stack 23
  9170                           
  9171                           ;incstack = 0
  9172  003644  0100               	movlb	0	; () banked
  9173  003646  51BD               	movf	___ftsub@f2& (0+255),w,b
  9174  003648  0100               	movlb	0	; () banked
  9175  00364A  11BE               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9176  00364C  0100               	movlb	0	; () banked
  9177  00364E  11BF               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9178  003650  B4D8               	btfsc	status,2,c
  9179  003652  D009               	goto	l6035
  9180                           
  9181                           ; BSR set to: 0
  9182  003654  0E00               	movlw	0
  9183  003656  0100               	movlb	0	; () banked
  9184  003658  1BBD               	xorwf	___ftsub@f2& (0+255),f,b
  9185  00365A  0E00               	movlw	0
  9186  00365C  0100               	movlb	0	; () banked
  9187  00365E  1BBE               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9188  003660  0E80               	movlw	128
  9189  003662  0100               	movlb	0	; () banked
  9190  003664  1BBF               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9191  003666                     l6035:
  9192                           
  9193                           ; BSR set to: 0
  9194  003666  C0BA  F0AE         	movff	___ftsub@f1,___ftadd@f1
  9195  00366A  C0BB  F0AF         	movff	___ftsub@f1+1,___ftadd@f1+1
  9196  00366E  C0BC  F0B0         	movff	___ftsub@f1+2,___ftadd@f1+2
  9197  003672  C0BD  F0B1         	movff	___ftsub@f2,___ftadd@f2
  9198  003676  C0BE  F0B2         	movff	___ftsub@f2+1,___ftadd@f2+1
  9199  00367A  C0BF  F0B3         	movff	___ftsub@f2+2,___ftadd@f2+2
  9200  00367E  ECD9  F00E         	call	___ftadd	;wreg free
  9201  003682  C0AE  F0BA         	movff	?___ftadd,?___ftsub
  9202  003686  C0AF  F0BB         	movff	?___ftadd+1,?___ftsub+1
  9203  00368A  C0B0  F0BC         	movff	?___ftadd+2,?___ftsub+2
  9204  00368E  0012               	return	
  9205  003690                     __end_of___ftsub:
  9206                           	opt stack 0
  9207                           tblptru	equ	0xFF8
  9208                           tblptrh	equ	0xFF7
  9209                           tblptrl	equ	0xFF6
  9210                           tablat	equ	0xFF5
  9211                           prodh	equ	0xFF4
  9212                           prodl	equ	0xFF3
  9213                           postinc0	equ	0xFEE
  9214                           wreg	equ	0xFE8
  9215                           postdec1	equ	0xFE5
  9216                           fsr1l	equ	0xFE1
  9217                           indf2	equ	0xFDF
  9218                           postinc2	equ	0xFDE
  9219                           postdec2	equ	0xFDD
  9220                           fsr2h	equ	0xFDA
  9221                           fsr2l	equ	0xFD9
  9222                           status	equ	0xFD8
  9223                           
  9224 ;; *************** function ___ftneg *****************
  9225 ;; Defined at:
  9226 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;  f1              3   38[COMRAM] float 
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;		None
  9231 ;; Return value:  Size  Location     Type
  9232 ;;                  3   38[COMRAM] float 
  9233 ;; Registers used:
  9234 ;;		wreg, status,2, status,0
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9240 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;Total ram usage:        3 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:    3
  9247 ;; This function calls:
  9248 ;;		Nothing
  9249 ;; This function is called by:
  9250 ;;		_printf
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           	psect	text28
  9255  0039DE                     __ptext28:
  9256                           	opt stack 0
  9257  0039DE                     ___ftneg:
  9258                           	opt stack 25
  9259                           
  9260                           ;incstack = 0
  9261  0039DE  5027               	movf	___ftneg@f1,w,c
  9262  0039E0  1028               	iorwf	___ftneg@f1+1,w,c
  9263  0039E2  1029               	iorwf	___ftneg@f1+2,w,c
  9264  0039E4  B4D8               	btfsc	status,2,c
  9265  0039E6  D006               	goto	l1159
  9266  0039E8  0E00               	movlw	0
  9267  0039EA  1A27               	xorwf	___ftneg@f1,f,c
  9268  0039EC  0E00               	movlw	0
  9269  0039EE  1A28               	xorwf	___ftneg@f1+1,f,c
  9270  0039F0  0E80               	movlw	128
  9271  0039F2  1A29               	xorwf	___ftneg@f1+2,f,c
  9272  0039F4                     l1159:
  9273  0039F4  C027  F027         	movff	___ftneg@f1,?___ftneg
  9274  0039F8  C028  F028         	movff	___ftneg@f1+1,?___ftneg+1
  9275  0039FC  C029  F029         	movff	___ftneg@f1+2,?___ftneg+2
  9276  003A00  0012               	return		;funcret
  9277  003A02                     __end_of___ftneg:
  9278                           	opt stack 0
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           postinc0	equ	0xFEE
  9286                           wreg	equ	0xFE8
  9287                           postdec1	equ	0xFE5
  9288                           fsr1l	equ	0xFE1
  9289                           indf2	equ	0xFDF
  9290                           postinc2	equ	0xFDE
  9291                           postdec2	equ	0xFDD
  9292                           fsr2h	equ	0xFDA
  9293                           fsr2l	equ	0xFD9
  9294                           status	equ	0xFD8
  9295                           
  9296 ;; *************** function ___ftge *****************
  9297 ;; Defined at:
  9298 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9299 ;; Parameters:    Size  Location     Type
  9300 ;;  ff1             3    0[BANK0 ] float 
  9301 ;;  ff2             3    3[BANK0 ] float 
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;		None
  9304 ;; Return value:  Size  Location     Type
  9305 ;;		None               void
  9306 ;; Registers used:
  9307 ;;		wreg, status,2, status,0
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9313 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9316 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9317 ;;Total ram usage:        9 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    3
  9320 ;; This function calls:
  9321 ;;		Nothing
  9322 ;; This function is called by:
  9323 ;;		_sortBattery
  9324 ;;		_printf
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328                           	psect	text29
  9329  002F20                     __ptext29:
  9330                           	opt stack 0
  9331  002F20                     ___ftge:
  9332                           	opt stack 25
  9333                           
  9334                           ;incstack = 0
  9335  002F20  0100               	movlb	0	; () banked
  9336  002F22  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9337  002F24  D01D               	goto	l6055
  9338                           
  9339                           ; BSR set to: 0
  9340  002F26  C080  F086         	movff	___ftge@ff1,??___ftge
  9341  002F2A  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
  9342  002F2E  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
  9343  002F32  0100               	movlb	0	; () banked
  9344  002F34  1F86               	comf	??___ftge& (0+255),f,b
  9345  002F36  1F87               	comf	(??___ftge+1)& (0+255),f,b
  9346  002F38  1F88               	comf	(??___ftge+2)& (0+255),f,b
  9347  002F3A  2B86               	incf	??___ftge& (0+255),f,b
  9348  002F3C  0E00               	movlw	0
  9349  002F3E  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  9350  002F40  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  9351  002F42  0E00               	movlw	0
  9352  002F44  0100               	movlb	0	; () banked
  9353  002F46  2586               	addwf	??___ftge& (0+255),w,b
  9354  002F48  0100               	movlb	0	; () banked
  9355  002F4A  6F80               	movwf	___ftge@ff1& (0+255),b
  9356  002F4C  0E00               	movlw	0
  9357  002F4E  0100               	movlb	0	; () banked
  9358  002F50  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  9359  002F52  0100               	movlb	0	; () banked
  9360  002F54  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  9361  002F56  0E80               	movlw	128
  9362  002F58  0100               	movlb	0	; () banked
  9363  002F5A  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  9364  002F5C  0100               	movlb	0	; () banked
  9365  002F5E  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  9366  002F60                     l6055:
  9367                           
  9368                           ; BSR set to: 0
  9369  002F60  0100               	movlb	0	; () banked
  9370  002F62  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9371  002F64  D01D               	goto	l6059
  9372                           
  9373                           ; BSR set to: 0
  9374  002F66  C083  F086         	movff	___ftge@ff2,??___ftge
  9375  002F6A  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
  9376  002F6E  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
  9377  002F72  0100               	movlb	0	; () banked
  9378  002F74  1F86               	comf	??___ftge& (0+255),f,b
  9379  002F76  1F87               	comf	(??___ftge+1)& (0+255),f,b
  9380  002F78  1F88               	comf	(??___ftge+2)& (0+255),f,b
  9381  002F7A  2B86               	incf	??___ftge& (0+255),f,b
  9382  002F7C  0E00               	movlw	0
  9383  002F7E  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  9384  002F80  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  9385  002F82  0E00               	movlw	0
  9386  002F84  0100               	movlb	0	; () banked
  9387  002F86  2586               	addwf	??___ftge& (0+255),w,b
  9388  002F88  0100               	movlb	0	; () banked
  9389  002F8A  6F83               	movwf	___ftge@ff2& (0+255),b
  9390  002F8C  0E00               	movlw	0
  9391  002F8E  0100               	movlb	0	; () banked
  9392  002F90  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  9393  002F92  0100               	movlb	0	; () banked
  9394  002F94  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  9395  002F96  0E80               	movlw	128
  9396  002F98  0100               	movlb	0	; () banked
  9397  002F9A  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  9398  002F9C  0100               	movlb	0	; () banked
  9399  002F9E  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  9400  002FA0                     l6059:
  9401                           
  9402                           ; BSR set to: 0
  9403  002FA0  0E00               	movlw	0
  9404  002FA2  0100               	movlb	0	; () banked
  9405  002FA4  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  9406  002FA6  0E00               	movlw	0
  9407  002FA8  0100               	movlb	0	; () banked
  9408  002FAA  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9409  002FAC  0E80               	movlw	128
  9410  002FAE  0100               	movlb	0	; () banked
  9411  002FB0  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9412                           
  9413                           ; BSR set to: 0
  9414  002FB2  0E00               	movlw	0
  9415  002FB4  0100               	movlb	0	; () banked
  9416  002FB6  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  9417  002FB8  0E00               	movlw	0
  9418  002FBA  0100               	movlb	0	; () banked
  9419  002FBC  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9420  002FBE  0E80               	movlw	128
  9421  002FC0  0100               	movlb	0	; () banked
  9422  002FC2  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9423  002FC4  0100               	movlb	0	; () banked
  9424  002FC6  5183               	movf	___ftge@ff2& (0+255),w,b
  9425  002FC8  0100               	movlb	0	; () banked
  9426  002FCA  5D80               	subwf	___ftge@ff1& (0+255),w,b
  9427  002FCC  0100               	movlb	0	; () banked
  9428  002FCE  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  9429  002FD0  0100               	movlb	0	; () banked
  9430  002FD2  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9431  002FD4  0100               	movlb	0	; () banked
  9432  002FD6  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  9433  002FD8  0100               	movlb	0	; () banked
  9434  002FDA  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9435  002FDC  B0D8               	btfsc	status,0,c
  9436  002FDE  D002               	goto	l6065
  9437                           
  9438                           ; BSR set to: 0
  9439  002FE0  90D8               	bcf	status,0,c
  9440  002FE2  0012               	return	
  9441  002FE4                     l6065:
  9442                           
  9443                           ; BSR set to: 0
  9444  002FE4  80D8               	bsf	status,0,c
  9445                           
  9446                           ; BSR set to: 0
  9447  002FE6  0012               	return	
  9448  002FE8                     __end_of___ftge:
  9449                           	opt stack 0
  9450                           tblptru	equ	0xFF8
  9451                           tblptrh	equ	0xFF7
  9452                           tblptrl	equ	0xFF6
  9453                           tablat	equ	0xFF5
  9454                           prodh	equ	0xFF4
  9455                           prodl	equ	0xFF3
  9456                           postinc0	equ	0xFEE
  9457                           wreg	equ	0xFE8
  9458                           postdec1	equ	0xFE5
  9459                           fsr1l	equ	0xFE1
  9460                           indf2	equ	0xFDF
  9461                           postinc2	equ	0xFDE
  9462                           postdec2	equ	0xFDD
  9463                           fsr2h	equ	0xFDA
  9464                           fsr2l	equ	0xFD9
  9465                           status	equ	0xFD8
  9466                           
  9467 ;; *************** function _lcdClear *****************
  9468 ;; Defined at:
  9469 ;;		line 74 in file "lcd.c"
  9470 ;; Parameters:    Size  Location     Type
  9471 ;;		None
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;		None
  9474 ;; Return value:  Size  Location     Type
  9475 ;;                  1    wreg      void 
  9476 ;; Registers used:
  9477 ;;		wreg, status,2, status,0, cstack
  9478 ;; Tracked objects:
  9479 ;;		On entry : 0/0
  9480 ;;		On exit  : 0/0
  9481 ;;		Unchanged: 0/0
  9482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9487 ;;Total ram usage:        0 bytes
  9488 ;; Hardware stack levels used:    1
  9489 ;; Hardware stack levels required when called:    5
  9490 ;; This function calls:
  9491 ;;		_lcdInst
  9492 ;; This function is called by:
  9493 ;;		_main
  9494 ;;		_sortBattery
  9495 ;;		_dateTime
  9496 ;;		_mainMenu
  9497 ;;		_runSelect
  9498 ;;		_runMenu
  9499 ;;		_runTime
  9500 ;;		_runStats
  9501 ;;		_pause
  9502 ;; This function uses a non-reentrant model
  9503 ;;
  9504                           
  9505                           	psect	text30
  9506  003A7C                     __ptext30:
  9507                           	opt stack 0
  9508  003A7C                     _lcdClear:
  9509                           	opt stack 24
  9510                           
  9511                           ;lcd.c: 75: lcdInst(0b00000001);
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;incstack = 0
  9515  003A7C  0E01               	movlw	1
  9516  003A7E  EC12  F01D         	call	_lcdInst
  9517  003A82  0012               	return		;funcret
  9518  003A84                     __end_of_lcdClear:
  9519                           	opt stack 0
  9520                           tblptru	equ	0xFF8
  9521                           tblptrh	equ	0xFF7
  9522                           tblptrl	equ	0xFF6
  9523                           tablat	equ	0xFF5
  9524                           prodh	equ	0xFF4
  9525                           prodl	equ	0xFF3
  9526                           postinc0	equ	0xFEE
  9527                           wreg	equ	0xFE8
  9528                           postdec1	equ	0xFE5
  9529                           fsr1l	equ	0xFE1
  9530                           indf2	equ	0xFDF
  9531                           postinc2	equ	0xFDE
  9532                           postdec2	equ	0xFDD
  9533                           fsr2h	equ	0xFDA
  9534                           fsr2l	equ	0xFD9
  9535                           status	equ	0xFD8
  9536                           
  9537 ;; *************** function _pinSetup *****************
  9538 ;; Defined at:
  9539 ;;		line 267 in file "main.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;		None
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;		None
  9544 ;; Return value:  Size  Location     Type
  9545 ;;                  1    wreg      void 
  9546 ;; Registers used:
  9547 ;;		wreg, status,2, status,0
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9557 ;;Total ram usage:        0 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    3
  9560 ;; This function calls:
  9561 ;;		Nothing
  9562 ;; This function is called by:
  9563 ;;		_main
  9564 ;; This function uses a non-reentrant model
  9565 ;;
  9566                           
  9567                           	psect	text31
  9568  0037B8                     __ptext31:
  9569                           	opt stack 0
  9570  0037B8                     _pinSetup:
  9571                           	opt stack 27
  9572                           
  9573                           ;main.c: 273: TRISA = 0xFF;
  9574                           
  9575                           ;incstack = 0
  9576  0037B8  6892               	setf	3986,c	;volatile
  9577                           
  9578                           ;main.c: 274: TRISB = 0xFF;
  9579  0037BA  6893               	setf	3987,c	;volatile
  9580                           
  9581                           ;main.c: 275: TRISC = 0b11000000;
  9582  0037BC  0EC0               	movlw	192
  9583  0037BE  6E94               	movwf	3988,c	;volatile
  9584                           
  9585                           ;main.c: 276: TRISD = 0x00;
  9586  0037C0  0E00               	movlw	0
  9587  0037C2  6E95               	movwf	3989,c	;volatile
  9588                           
  9589                           ;main.c: 277: TRISE = 0x00;
  9590  0037C4  0E00               	movlw	0
  9591  0037C6  6E96               	movwf	3990,c	;volatile
  9592                           
  9593                           ;main.c: 279: LATA = 0x00;
  9594  0037C8  0E00               	movlw	0
  9595  0037CA  6E89               	movwf	3977,c	;volatile
  9596                           
  9597                           ;main.c: 280: LATB = 0x00;
  9598  0037CC  0E00               	movlw	0
  9599  0037CE  6E8A               	movwf	3978,c	;volatile
  9600                           
  9601                           ;main.c: 281: LATC = 0x00;
  9602  0037D0  0E00               	movlw	0
  9603  0037D2  6E8B               	movwf	3979,c	;volatile
  9604                           
  9605                           ;main.c: 282: LATD = 0x00;
  9606  0037D4  0E00               	movlw	0
  9607  0037D6  6E8C               	movwf	3980,c	;volatile
  9608                           
  9609                           ;main.c: 283: LATE = 0x00;
  9610  0037D8  0E00               	movlw	0
  9611  0037DA  6E8D               	movwf	3981,c	;volatile
  9612                           
  9613                           ;main.c: 285: ADCON0 = 0x00;
  9614  0037DC  0E00               	movlw	0
  9615  0037DE  6EC2               	movwf	4034,c	;volatile
  9616                           
  9617                           ;main.c: 287: ADCON1 |= 0x0B;
  9618  0037E0  0E0B               	movlw	11
  9619  0037E2  12C1               	iorwf	4033,f,c	;volatile
  9620                           
  9621                           ;main.c: 292: ADCON2 = 0;
  9622  0037E4  0E00               	movlw	0
  9623  0037E6  6EC0               	movwf	4032,c	;volatile
  9624                           
  9625                           ;main.c: 293: ADCON2 |= 0b010;
  9626  0037E8  82C0               	bsf	4032,1,c	;volatile
  9627                           
  9628                           ;main.c: 294: ADCON2 |= 0b110<<3;
  9629  0037EA  0E30               	movlw	48
  9630  0037EC  12C0               	iorwf	4032,f,c	;volatile
  9631                           
  9632                           ;main.c: 295: ADCON2 |= 1<<7;
  9633  0037EE  8EC0               	bsf	4032,7,c	;volatile
  9634                           
  9635                           ;main.c: 298: INT1IE = 1;
  9636  0037F0  86F0               	bsf	intcon3,3,c	;volatile
  9637                           
  9638                           ;main.c: 299: INT0IE = 1;
  9639  0037F2  88F2               	bsf	intcon,4,c	;volatile
  9640                           
  9641                           ;main.c: 300: (INTCONbits.GIE = 1);
  9642  0037F4  8EF2               	bsf	intcon,7,c	;volatile
  9643  0037F6  0012               	return		;funcret
  9644  0037F8                     __end_of_pinSetup:
  9645                           	opt stack 0
  9646                           tblptru	equ	0xFF8
  9647                           tblptrh	equ	0xFF7
  9648                           tblptrl	equ	0xFF6
  9649                           tablat	equ	0xFF5
  9650                           prodh	equ	0xFF4
  9651                           prodl	equ	0xFF3
  9652                           intcon	equ	0xFF2
  9653                           intcon3	equ	0xFF0
  9654                           postinc0	equ	0xFEE
  9655                           wreg	equ	0xFE8
  9656                           postdec1	equ	0xFE5
  9657                           fsr1l	equ	0xFE1
  9658                           indf2	equ	0xFDF
  9659                           postinc2	equ	0xFDE
  9660                           postdec2	equ	0xFDD
  9661                           fsr2h	equ	0xFDA
  9662                           fsr2l	equ	0xFD9
  9663                           status	equ	0xFD8
  9664                           
  9665 ;; *************** function _lcdHome *****************
  9666 ;; Defined at:
  9667 ;;		line 70 in file "lcd.c"
  9668 ;; Parameters:    Size  Location     Type
  9669 ;;		None
  9670 ;; Auto vars:     Size  Location     Type
  9671 ;;		None
  9672 ;; Return value:  Size  Location     Type
  9673 ;;                  2   20[None  ] int 
  9674 ;; Registers used:
  9675 ;;		wreg, status,2, status,0, cstack
  9676 ;; Tracked objects:
  9677 ;;		On entry : 0/0
  9678 ;;		On exit  : 0/0
  9679 ;;		Unchanged: 0/0
  9680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;Total ram usage:        0 bytes
  9686 ;; Hardware stack levels used:    1
  9687 ;; Hardware stack levels required when called:    5
  9688 ;; This function calls:
  9689 ;;		_lcdInst
  9690 ;; This function is called by:
  9691 ;;		_main
  9692 ;; This function uses a non-reentrant model
  9693 ;;
  9694                           
  9695                           	psect	text32
  9696  003A84                     __ptext32:
  9697                           	opt stack 0
  9698  003A84                     _lcdHome:
  9699                           	opt stack 25
  9700                           
  9701                           ;lcd.c: 71: lcdInst(0b11000000);
  9702                           
  9703                           ;incstack = 0
  9704  003A84  0EC0               	movlw	192
  9705  003A86  EC12  F01D         	call	_lcdInst
  9706  003A8A  0012               	return		;funcret
  9707  003A8C                     __end_of_lcdHome:
  9708                           	opt stack 0
  9709                           tblptru	equ	0xFF8
  9710                           tblptrh	equ	0xFF7
  9711                           tblptrl	equ	0xFF6
  9712                           tablat	equ	0xFF5
  9713                           prodh	equ	0xFF4
  9714                           prodl	equ	0xFF3
  9715                           intcon	equ	0xFF2
  9716                           intcon3	equ	0xFF0
  9717                           postinc0	equ	0xFEE
  9718                           wreg	equ	0xFE8
  9719                           postdec1	equ	0xFE5
  9720                           fsr1l	equ	0xFE1
  9721                           indf2	equ	0xFDF
  9722                           postinc2	equ	0xFDE
  9723                           postdec2	equ	0xFDD
  9724                           fsr2h	equ	0xFDA
  9725                           fsr2l	equ	0xFD9
  9726                           status	equ	0xFD8
  9727                           
  9728 ;; *************** function _initServo *****************
  9729 ;; Defined at:
  9730 ;;		line 21 in file "servo.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;  motor           2  106[BANK0 ] PTR int 
  9733 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9734 ;;  angle           2  108[BANK0 ] int 
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;		None
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      void 
  9739 ;; Registers used:
  9740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9746 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9748 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9749 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9750 ;;Total ram usage:        8 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    7
  9753 ;; This function calls:
  9754 ;;		_initTimer
  9755 ;;		_setAngle
  9756 ;;		_startTimer
  9757 ;; This function is called by:
  9758 ;;		_main
  9759 ;; This function uses a non-reentrant model
  9760 ;;
  9761                           
  9762                           	psect	text33
  9763  003324                     __ptext33:
  9764                           	opt stack 0
  9765  003324                     _initServo:
  9766                           	opt stack 23
  9767                           
  9768                           ;servo.c: 22: n++;
  9769                           
  9770                           ;incstack = 0
  9771  003324  4A3C               	infsnz	_n,f,c
  9772  003326  2A3D               	incf	_n+1,f,c
  9773                           
  9774                           ;servo.c: 23: servos[n-1] = motor;
  9775  003328  0EFE               	movlw	254
  9776  00332A  0100               	movlb	0	; () banked
  9777  00332C  6FEE               	movwf	??_initServo& (0+255),b
  9778  00332E  0EFF               	movlw	255
  9779  003330  0100               	movlb	0	; () banked
  9780  003332  6FEF               	movwf	(??_initServo+1)& (0+255),b
  9781  003334  C03C  F0F0         	movff	_n,??_initServo+2
  9782  003338  C03D  F0F1         	movff	_n+1,??_initServo+3
  9783  00333C  90D8               	bcf	status,0,c
  9784  00333E  0100               	movlb	0	; () banked
  9785  003340  37F0               	rlcf	(??_initServo+2)& (0+255),f,b
  9786  003342  37F1               	rlcf	(??_initServo+3)& (0+255),f,b
  9787  003344  0100               	movlb	0	; () banked
  9788  003346  51EE               	movf	??_initServo& (0+255),w,b
  9789  003348  0100               	movlb	0	; () banked
  9790  00334A  27F0               	addwf	(??_initServo+2)& (0+255),f,b
  9791  00334C  0100               	movlb	0	; () banked
  9792  00334E  51EF               	movf	(??_initServo+1)& (0+255),w,b
  9793  003350  0100               	movlb	0	; () banked
  9794  003352  23F1               	addwfc	(??_initServo+3)& (0+255),f,b
  9795  003354  0E6D               	movlw	low _servos
  9796  003356  0100               	movlb	0	; () banked
  9797  003358  25F0               	addwf	(??_initServo+2)& (0+255),w,b
  9798  00335A  6ED9               	movwf	fsr2l,c
  9799  00335C  0E01               	movlw	high _servos
  9800  00335E  0100               	movlb	0	; () banked
  9801  003360  21F1               	addwfc	(??_initServo+3)& (0+255),w,b
  9802  003362  6EDA               	movwf	fsr2h,c
  9803  003364  C0EA  FFDE         	movff	initServo@motor,postinc2
  9804  003368  C0EB  FFDD         	movff	initServo@motor+1,postdec2
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;servo.c: 24: setAngle(motor, angle);
  9808  00336C  C0EA  F0E0         	movff	initServo@motor,setAngle@motor
  9809  003370  C0EB  F0E1         	movff	initServo@motor+1,setAngle@motor+1
  9810  003374  C0EC  F0E2         	movff	initServo@angle,setAngle@angle
  9811  003378  C0ED  F0E3         	movff	initServo@angle+1,setAngle@angle+1
  9812  00337C  ECC6  F016         	call	_setAngle	;wreg free
  9813                           
  9814                           ;servo.c: 26: initTimer(0);
  9815  003380  0E00               	movlw	0
  9816  003382  6E28               	movwf	initTimer@timer+1,c
  9817  003384  0E00               	movlw	0
  9818  003386  6E27               	movwf	initTimer@timer,c
  9819  003388  EC94  F01B         	call	_initTimer	;wreg free
  9820                           
  9821                           ;servo.c: 27: startTimer(0,0);
  9822  00338C  0E00               	movlw	0
  9823  00338E  6E28               	movwf	startTimer@timer+1,c
  9824  003390  0E00               	movlw	0
  9825  003392  6E27               	movwf	startTimer@timer,c
  9826  003394  0E00               	movlw	0
  9827  003396  6E29               	movwf	startTimer@val,c
  9828  003398  0E00               	movlw	0
  9829  00339A  6E2A               	movwf	startTimer@val+1,c
  9830  00339C  0E00               	movlw	0
  9831  00339E  6E2B               	movwf	startTimer@val+2,c
  9832  0033A0  0E00               	movlw	0
  9833  0033A2  6E2C               	movwf	startTimer@val+3,c
  9834  0033A4  EC48  F01B         	call	_startTimer	;wreg free
  9835  0033A8  0012               	return		;funcret
  9836  0033AA                     __end_of_initServo:
  9837                           	opt stack 0
  9838                           tblptru	equ	0xFF8
  9839                           tblptrh	equ	0xFF7
  9840                           tblptrl	equ	0xFF6
  9841                           tablat	equ	0xFF5
  9842                           prodh	equ	0xFF4
  9843                           prodl	equ	0xFF3
  9844                           intcon	equ	0xFF2
  9845                           intcon3	equ	0xFF0
  9846                           postinc0	equ	0xFEE
  9847                           wreg	equ	0xFE8
  9848                           postdec1	equ	0xFE5
  9849                           fsr1l	equ	0xFE1
  9850                           indf2	equ	0xFDF
  9851                           postinc2	equ	0xFDE
  9852                           postdec2	equ	0xFDD
  9853                           fsr2h	equ	0xFDA
  9854                           fsr2l	equ	0xFD9
  9855                           status	equ	0xFD8
  9856                           
  9857 ;; *************** function _startTimer *****************
  9858 ;; Defined at:
  9859 ;;		line 76 in file "timer.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;  timer           2   38[COMRAM] int 
  9862 ;;  val             4   40[COMRAM] long 
  9863 ;; Auto vars:     Size  Location     Type
  9864 ;;		None
  9865 ;; Return value:  Size  Location     Type
  9866 ;;                  1    wreg      void 
  9867 ;; Registers used:
  9868 ;;		wreg, status,2, status,0
  9869 ;; Tracked objects:
  9870 ;;		On entry : 0/0
  9871 ;;		On exit  : 0/0
  9872 ;;		Unchanged: 0/0
  9873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9874 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9876 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9877 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;Total ram usage:        8 bytes
  9879 ;; Hardware stack levels used:    1
  9880 ;; Hardware stack levels required when called:    3
  9881 ;; This function calls:
  9882 ;;		Nothing
  9883 ;; This function is called by:
  9884 ;;		_main
  9885 ;;		_initServo
  9886 ;;		_testFrequency
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           	psect	text34
  9891  003690                     __ptext34:
  9892                           	opt stack 0
  9893  003690                     _startTimer:
  9894                           	opt stack 27
  9895                           
  9896                           ;timer.c: 77: switch(timer){
  9897                           
  9898                           ;incstack = 0
  9899  003690  D012               	goto	l6581
  9900  003692                     l426:
  9901                           
  9902                           ;timer.c: 79: TMR0H = val>>8;
  9903  003692  C02A  FFD7         	movff	startTimer@val+1,4055	;volatile
  9904                           
  9905                           ;timer.c: 80: TMR0L = val;
  9906  003696  C029  FFD6         	movff	startTimer@val,4054	;volatile
  9907                           
  9908                           ;timer.c: 81: T0CON |= 1<<7;
  9909  00369A  8ED5               	bsf	4053,7,c	;volatile
  9910                           
  9911                           ;timer.c: 82: break;
  9912  00369C  0012               	return	
  9913  00369E                     l428:
  9914                           
  9915                           ;timer.c: 84: TMR1H = val>>8;
  9916  00369E  C02A  FFCF         	movff	startTimer@val+1,4047	;volatile
  9917                           
  9918                           ;timer.c: 85: TMR1L = val;
  9919  0036A2  C029  FFCE         	movff	startTimer@val,4046	;volatile
  9920                           
  9921                           ;timer.c: 86: T1CON |= 1<<0;
  9922  0036A6  80CD               	bsf	4045,0,c	;volatile
  9923                           
  9924                           ;timer.c: 87: break;
  9925  0036A8  0012               	return	
  9926  0036AA                     l429:
  9927                           
  9928                           ;timer.c: 89: TMR3H = val>>8;
  9929  0036AA  C02A  FFB3         	movff	startTimer@val+1,4019	;volatile
  9930                           
  9931                           ;timer.c: 90: TMR3L = val;
  9932  0036AE  C029  FFB2         	movff	startTimer@val,4018	;volatile
  9933                           
  9934                           ;timer.c: 91: T3CON |= 1<<0;
  9935  0036B2  80B1               	bsf	4017,0,c	;volatile
  9936                           
  9937                           ;timer.c: 92: }
  9938  0036B4  0012               	return	
  9939  0036B6                     l6581:
  9940  0036B6  C027  F02D         	movff	startTimer@timer,??_startTimer
  9941  0036BA  C028  F02E         	movff	startTimer@timer+1,??_startTimer+1
  9942                           
  9943                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9944                           ; Switch size 1, requested type "space"
  9945                           ; Number of cases is 1, Range of values is 0 to 0
  9946                           ; switch strategies available:
  9947                           ; Name         Instructions Cycles
  9948                           ; simple_byte            4     3 (average)
  9949                           ;	Chosen strategy is simple_byte
  9950  0036BE  502E               	movf	??_startTimer+1,w,c
  9951  0036C0  0A00               	xorlw	0	; case 0
  9952  0036C2  A4D8               	btfss	status,2,c
  9953  0036C4  0012               	return	
  9954                           
  9955                           ; Switch size 1, requested type "space"
  9956                           ; Number of cases is 3, Range of values is 0 to 3
  9957                           ; switch strategies available:
  9958                           ; Name         Instructions Cycles
  9959                           ; simple_byte           10     6 (average)
  9960                           ;	Chosen strategy is simple_byte
  9961  0036C6  502D               	movf	??_startTimer,w,c
  9962  0036C8  0A00               	xorlw	0	; case 0
  9963  0036CA  B4D8               	btfsc	status,2,c
  9964  0036CC  D7E2               	goto	l426
  9965  0036CE  0A01               	xorlw	1	; case 1
  9966  0036D0  B4D8               	btfsc	status,2,c
  9967  0036D2  D7E5               	goto	l428
  9968  0036D4  0A02               	xorlw	2	; case 3
  9969  0036D6  A4D8               	btfss	status,2,c
  9970  0036D8  0012               	return	
  9971  0036DA  D7E7               	goto	l429
  9972  0036DC                     __end_of_startTimer:
  9973                           	opt stack 0
  9974                           tblptru	equ	0xFF8
  9975                           tblptrh	equ	0xFF7
  9976                           tblptrl	equ	0xFF6
  9977                           tablat	equ	0xFF5
  9978                           prodh	equ	0xFF4
  9979                           prodl	equ	0xFF3
  9980                           intcon	equ	0xFF2
  9981                           intcon3	equ	0xFF0
  9982                           postinc0	equ	0xFEE
  9983                           wreg	equ	0xFE8
  9984                           postdec1	equ	0xFE5
  9985                           fsr1l	equ	0xFE1
  9986                           indf2	equ	0xFDF
  9987                           postinc2	equ	0xFDE
  9988                           postdec2	equ	0xFDD
  9989                           fsr2h	equ	0xFDA
  9990                           fsr2l	equ	0xFD9
  9991                           status	equ	0xFD8
  9992                           
  9993 ;; *************** function _setAngle *****************
  9994 ;; Defined at:
  9995 ;;		line 41 in file "servo.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;  motor           2   96[BANK0 ] PTR int 
  9998 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9999 ;;  angle           2   98[BANK0 ] int 
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;  i               2  104[BANK0 ] int 
 10002 ;;  period          2  102[BANK0 ] unsigned int 
 10003 ;; Return value:  Size  Location     Type
 10004 ;;                  1    wreg      void 
 10005 ;; Registers used:
 10006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10012 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10015 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;Total ram usage:       10 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    6
 10019 ;; This function calls:
 10020 ;;		_angleToPulse
 10021 ;; This function is called by:
 10022 ;;		_sortBattery
 10023 ;;		_initServo
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           	psect	text35
 10028  002D8C                     __ptext35:
 10029                           	opt stack 0
 10030  002D8C                     _setAngle:
 10031                           	opt stack 23
 10032                           
 10033                           ;servo.c: 42: unsigned int period = 50000;
 10034                           
 10035                           ;incstack = 0
 10036  002D8C  0EC3               	movlw	195
 10037  002D8E  0100               	movlb	0	; () banked
 10038  002D90  6FE7               	movwf	(setAngle@period+1)& (0+255),b
 10039  002D92  0E50               	movlw	80
 10040  002D94  6FE6               	movwf	setAngle@period& (0+255),b
 10041                           
 10042                           ;servo.c: 43: for(int i = 0; i < n; i++){
 10043  002D96  0E00               	movlw	0
 10044  002D98  0100               	movlb	0	; () banked
 10045  002D9A  6FE9               	movwf	(setAngle@i+1)& (0+255),b
 10046  002D9C  0E00               	movlw	0
 10047  002D9E  6FE8               	movwf	setAngle@i& (0+255),b
 10048  002DA0  D03F               	goto	l6669
 10049  002DA2                     l6661:
 10050                           
 10051                           ; BSR set to: 0
 10052                           ;servo.c: 44: if(servos[i] == motor){
 10053  002DA2  90D8               	bcf	status,0,c
 10054  002DA4  0100               	movlb	0	; () banked
 10055  002DA6  35E8               	rlcf	setAngle@i& (0+255),w,b
 10056  002DA8  6ED9               	movwf	fsr2l,c
 10057  002DAA  0100               	movlb	0	; () banked
 10058  002DAC  35E9               	rlcf	(setAngle@i+1)& (0+255),w,b
 10059  002DAE  6EDA               	movwf	fsr2h,c
 10060  002DB0  0E6D               	movlw	low _servos
 10061  002DB2  26D9               	addwf	fsr2l,f,c
 10062  002DB4  0E01               	movlw	high _servos
 10063  002DB6  22DA               	addwfc	fsr2h,f,c
 10064  002DB8  0100               	movlb	0	; () banked
 10065  002DBA  51E0               	movf	setAngle@motor& (0+255),w,b
 10066  002DBC  18DE               	xorwf	postinc2,w,c
 10067  002DBE  E11C               	bnz	l6665
 10068  002DC0  0100               	movlb	0	; () banked
 10069  002DC2  51E1               	movf	(setAngle@motor+1)& (0+255),w,b
 10070  002DC4  18DE               	xorwf	postinc2,w,c
 10071  002DC6  A4D8               	btfss	status,2,c
 10072  002DC8  D017               	goto	l6665
 10073                           
 10074                           ; BSR set to: 0
 10075                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
 10076  002DCA  C0E2  F0C9         	movff	setAngle@angle,angleToPulse@angle
 10077  002DCE  C0E3  F0CA         	movff	setAngle@angle+1,angleToPulse@angle+1
 10078  002DD2  EC0D  F010         	call	_angleToPulse	;wreg free
 10079  002DD6  90D8               	bcf	status,0,c
 10080  002DD8  0100               	movlb	0	; () banked
 10081  002DDA  35E8               	rlcf	setAngle@i& (0+255),w,b
 10082  002DDC  6ED9               	movwf	fsr2l,c
 10083  002DDE  0100               	movlb	0	; () banked
 10084  002DE0  35E9               	rlcf	(setAngle@i+1)& (0+255),w,b
 10085  002DE2  6EDA               	movwf	fsr2h,c
 10086  002DE4  0E65               	movlw	low _pulse
 10087  002DE6  26D9               	addwf	fsr2l,f,c
 10088  002DE8  0E01               	movlw	high _pulse
 10089  002DEA  22DA               	addwfc	fsr2h,f,c
 10090  002DEC  0100               	movlb	0	; () banked
 10091  002DEE  C0C9  FFDE         	movff	?_angleToPulse,postinc2
 10092  002DF2  0100               	movlb	0	; () banked
 10093  002DF4  C0CA  FFDD         	movff	?_angleToPulse+1,postdec2
 10094  002DF8                     l6665:
 10095                           
 10096                           ; BSR set to: 0
 10097                           ;servo.c: 46: }
 10098                           ;servo.c: 47: period-=pulse[i];
 10099  002DF8  90D8               	bcf	status,0,c
 10100  002DFA  0100               	movlb	0	; () banked
 10101  002DFC  35E8               	rlcf	setAngle@i& (0+255),w,b
 10102  002DFE  6ED9               	movwf	fsr2l,c
 10103  002E00  0100               	movlb	0	; () banked
 10104  002E02  35E9               	rlcf	(setAngle@i+1)& (0+255),w,b
 10105  002E04  6EDA               	movwf	fsr2h,c
 10106  002E06  0E65               	movlw	low _pulse
 10107  002E08  26D9               	addwf	fsr2l,f,c
 10108  002E0A  0E01               	movlw	high _pulse
 10109  002E0C  22DA               	addwfc	fsr2h,f,c
 10110  002E0E  50DE               	movf	postinc2,w,c
 10111  002E10  0100               	movlb	0	; () banked
 10112  002E12  5FE6               	subwf	setAngle@period& (0+255),f,b
 10113  002E14  50DD               	movf	postdec2,w,c
 10114  002E16  0100               	movlb	0	; () banked
 10115  002E18  5BE7               	subwfb	(setAngle@period+1)& (0+255),f,b
 10116                           
 10117                           ; BSR set to: 0
 10118  002E1A  0100               	movlb	0	; () banked
 10119  002E1C  4BE8               	infsnz	setAngle@i& (0+255),f,b
 10120  002E1E  2BE9               	incf	(setAngle@i+1)& (0+255),f,b
 10121  002E20                     l6669:
 10122                           
 10123                           ; BSR set to: 0
 10124  002E20  503C               	movf	_n,w,c
 10125  002E22  0100               	movlb	0	; () banked
 10126  002E24  5DE8               	subwf	setAngle@i& (0+255),w,b
 10127  002E26  0100               	movlb	0	; () banked
 10128  002E28  51E9               	movf	(setAngle@i+1)& (0+255),w,b
 10129  002E2A  0A80               	xorlw	128
 10130  002E2C  0100               	movlb	0	; () banked
 10131  002E2E  6FE4               	movwf	??_setAngle& (0+255),b
 10132  002E30  503D               	movf	_n+1,w,c
 10133  002E32  0A80               	xorlw	128
 10134  002E34  0100               	movlb	0	; () banked
 10135  002E36  59E4               	subwfb	??_setAngle& (0+255),w,b
 10136  002E38  A0D8               	btfss	status,0,c
 10137  002E3A  D7B3               	goto	l6661
 10138                           
 10139                           ; BSR set to: 0
 10140                           ;servo.c: 48: }
 10141                           ;servo.c: 49: pulse[n] = period;
 10142                           
 10143                           ; BSR set to: 0
 10144  002E3C  90D8               	bcf	status,0,c
 10145  002E3E  343C               	rlcf	_n,w,c
 10146  002E40  6ED9               	movwf	fsr2l,c
 10147  002E42  343D               	rlcf	_n+1,w,c
 10148  002E44  6EDA               	movwf	fsr2h,c
 10149  002E46  0E65               	movlw	low _pulse
 10150  002E48  26D9               	addwf	fsr2l,f,c
 10151  002E4A  0E01               	movlw	high _pulse
 10152  002E4C  22DA               	addwfc	fsr2h,f,c
 10153  002E4E  C0E6  FFDE         	movff	setAngle@period,postinc2
 10154  002E52  C0E7  FFDD         	movff	setAngle@period+1,postdec2
 10155                           
 10156                           ; BSR set to: 0
 10157  002E56  0012               	return		;funcret
 10158  002E58                     __end_of_setAngle:
 10159                           	opt stack 0
 10160                           tblptru	equ	0xFF8
 10161                           tblptrh	equ	0xFF7
 10162                           tblptrl	equ	0xFF6
 10163                           tablat	equ	0xFF5
 10164                           prodh	equ	0xFF4
 10165                           prodl	equ	0xFF3
 10166                           intcon	equ	0xFF2
 10167                           intcon3	equ	0xFF0
 10168                           postinc0	equ	0xFEE
 10169                           wreg	equ	0xFE8
 10170                           postdec1	equ	0xFE5
 10171                           fsr1l	equ	0xFE1
 10172                           indf2	equ	0xFDF
 10173                           postinc2	equ	0xFDE
 10174                           postdec2	equ	0xFDD
 10175                           fsr2h	equ	0xFDA
 10176                           fsr2l	equ	0xFD9
 10177                           status	equ	0xFD8
 10178                           
 10179 ;; *************** function _angleToPulse *****************
 10180 ;; Defined at:
 10181 ;;		line 33 in file "servo.c"
 10182 ;; Parameters:    Size  Location     Type
 10183 ;;  angle           2   73[BANK0 ] int 
 10184 ;; Auto vars:     Size  Location     Type
 10185 ;;  a000            4   92[BANK0 ] long 
 10186 ;;  a180            4   85[BANK0 ] long 
 10187 ;;  offset          4   81[BANK0 ] long 
 10188 ;; Return value:  Size  Location     Type
 10189 ;;                  4   73[BANK0 ] long 
 10190 ;; Registers used:
 10191 ;;		wreg, status,2, status,0, cstack
 10192 ;; Tracked objects:
 10193 ;;		On entry : 0/0
 10194 ;;		On exit  : 0/0
 10195 ;;		Unchanged: 0/0
 10196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10197 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10199 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10200 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10201 ;;Total ram usage:       23 bytes
 10202 ;; Hardware stack levels used:    1
 10203 ;; Hardware stack levels required when called:    5
 10204 ;; This function calls:
 10205 ;;		___altoft
 10206 ;;		___awtoft
 10207 ;;		___ftadd
 10208 ;;		___ftdiv
 10209 ;;		___ftmul
 10210 ;;		___fttol
 10211 ;; This function is called by:
 10212 ;;		_setAngle
 10213 ;; This function uses a non-reentrant model
 10214 ;;
 10215                           
 10216                           	psect	text36
 10217  00201A                     __ptext36:
 10218                           	opt stack 0
 10219  00201A                     _angleToPulse:
 10220                           	opt stack 23
 10221                           
 10222                           ;servo.c: 34: long offset = -600;
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;incstack = 0
 10226  00201A  0EA8               	movlw	168
 10227  00201C  0100               	movlb	0	; () banked
 10228  00201E  6FD1               	movwf	angleToPulse@offset& (0+255),b
 10229  002020  0EFD               	movlw	253
 10230  002022  6FD2               	movwf	(angleToPulse@offset+1)& (0+255),b
 10231  002024  0EFF               	movlw	255
 10232  002026  6FD3               	movwf	(angleToPulse@offset+2)& (0+255),b
 10233  002028  0EFF               	movlw	255
 10234  00202A  6FD4               	movwf	(angleToPulse@offset+3)& (0+255),b
 10235                           
 10236                           ;servo.c: 35: long a000 = 1250;
 10237  00202C  0EE2               	movlw	226
 10238  00202E  0100               	movlb	0	; () banked
 10239  002030  6FDC               	movwf	angleToPulse@a000& (0+255),b
 10240  002032  0E04               	movlw	4
 10241  002034  6FDD               	movwf	(angleToPulse@a000+1)& (0+255),b
 10242  002036  0E00               	movlw	0
 10243  002038  6FDE               	movwf	(angleToPulse@a000+2)& (0+255),b
 10244  00203A  0E00               	movlw	0
 10245  00203C  6FDF               	movwf	(angleToPulse@a000+3)& (0+255),b
 10246                           
 10247                           ;servo.c: 36: long a180 = 6250;
 10248  00203E  0E6A               	movlw	106
 10249  002040  0100               	movlb	0	; () banked
 10250  002042  6FD5               	movwf	angleToPulse@a180& (0+255),b
 10251  002044  0E18               	movlw	24
 10252  002046  6FD6               	movwf	(angleToPulse@a180+1)& (0+255),b
 10253  002048  0E00               	movlw	0
 10254  00204A  6FD7               	movwf	(angleToPulse@a180+2)& (0+255),b
 10255  00204C  0E00               	movlw	0
 10256  00204E  6FD8               	movwf	(angleToPulse@a180+3)& (0+255),b
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 10260  002050  C0DC  F0CD         	movff	angleToPulse@a000,??_angleToPulse
 10261  002054  C0DD  F0CE         	movff	angleToPulse@a000+1,??_angleToPulse+1
 10262  002058  C0DE  F0CF         	movff	angleToPulse@a000+2,??_angleToPulse+2
 10263  00205C  C0DF  F0D0         	movff	angleToPulse@a000+3,??_angleToPulse+3
 10264  002060  0100               	movlb	0	; () banked
 10265  002062  1FCD               	comf	??_angleToPulse& (0+255),f,b
 10266  002064  1FCE               	comf	(??_angleToPulse+1)& (0+255),f,b
 10267  002066  1FCF               	comf	(??_angleToPulse+2)& (0+255),f,b
 10268  002068  1FD0               	comf	(??_angleToPulse+3)& (0+255),f,b
 10269  00206A  2BCD               	incf	??_angleToPulse& (0+255),f,b
 10270  00206C  0E00               	movlw	0
 10271  00206E  23CE               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 10272  002070  23CF               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 10273  002072  23D0               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 10274  002074  0100               	movlb	0	; () banked
 10275  002076  51D5               	movf	angleToPulse@a180& (0+255),w,b
 10276  002078  0100               	movlb	0	; () banked
 10277  00207A  25CD               	addwf	??_angleToPulse& (0+255),w,b
 10278  00207C  6E2F               	movwf	___altoft@c,c
 10279  00207E  0100               	movlb	0	; () banked
 10280  002080  51D6               	movf	(angleToPulse@a180+1)& (0+255),w,b
 10281  002082  0100               	movlb	0	; () banked
 10282  002084  21CE               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 10283  002086  6E30               	movwf	___altoft@c+1,c
 10284  002088  0100               	movlb	0	; () banked
 10285  00208A  51D7               	movf	(angleToPulse@a180+2)& (0+255),w,b
 10286  00208C  0100               	movlb	0	; () banked
 10287  00208E  21CF               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 10288  002090  6E31               	movwf	___altoft@c+2,c
 10289  002092  0100               	movlb	0	; () banked
 10290  002094  51D8               	movf	(angleToPulse@a180+3)& (0+255),w,b
 10291  002096  0100               	movlb	0	; () banked
 10292  002098  21D0               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 10293  00209A  6E32               	movwf	___altoft@c+3,c
 10294  00209C  EC4A  F019         	call	___altoft	;wreg free
 10295  0020A0  C02F  F098         	movff	?___altoft,___ftmul@f2
 10296  0020A4  C030  F099         	movff	?___altoft+1,___ftmul@f2+1
 10297  0020A8  C031  F09A         	movff	?___altoft+2,___ftmul@f2+2
 10298  0020AC  0E00               	movlw	0
 10299  0020AE  0100               	movlb	0	; () banked
 10300  0020B0  6F89               	movwf	___ftdiv@f2& (0+255),b
 10301  0020B2  0E34               	movlw	52
 10302  0020B4  0100               	movlb	0	; () banked
 10303  0020B6  6F8A               	movwf	(___ftdiv@f2+1)& (0+255),b
 10304  0020B8  0E43               	movlw	67
 10305  0020BA  0100               	movlb	0	; () banked
 10306  0020BC  6F8B               	movwf	(___ftdiv@f2+2)& (0+255),b
 10307  0020BE  C0C9  F02F         	movff	angleToPulse@angle,___awtoft@c
 10308  0020C2  C0CA  F030         	movff	angleToPulse@angle+1,___awtoft@c+1
 10309  0020C6  EC18  F01C         	call	___awtoft	;wreg free
 10310  0020CA  C02F  F086         	movff	?___awtoft,___ftdiv@f1
 10311  0020CE  C030  F087         	movff	?___awtoft+1,___ftdiv@f1+1
 10312  0020D2  C031  F088         	movff	?___awtoft+2,___ftdiv@f1+2
 10313  0020D6  EC19  F012         	call	___ftdiv	;wreg free
 10314  0020DA  C086  F095         	movff	?___ftdiv,___ftmul@f1
 10315  0020DE  C087  F096         	movff	?___ftdiv+1,___ftmul@f1+1
 10316  0020E2  C088  F097         	movff	?___ftdiv+2,___ftmul@f1+2
 10317  0020E6  ECBC  F010         	call	___ftmul	;wreg free
 10318  0020EA  C095  F0B1         	movff	?___ftmul,___ftadd@f2
 10319  0020EE  C096  F0B2         	movff	?___ftmul+1,___ftadd@f2+1
 10320  0020F2  C097  F0B3         	movff	?___ftmul+2,___ftadd@f2+2
 10321  0020F6  C0DC  F02F         	movff	angleToPulse@a000,___altoft@c
 10322  0020FA  C0DD  F030         	movff	angleToPulse@a000+1,___altoft@c+1
 10323  0020FE  C0DE  F031         	movff	angleToPulse@a000+2,___altoft@c+2
 10324  002102  C0DF  F032         	movff	angleToPulse@a000+3,___altoft@c+3
 10325  002106  EC4A  F019         	call	___altoft	;wreg free
 10326  00210A  C02F  F0AE         	movff	?___altoft,___ftadd@f1
 10327  00210E  C030  F0AF         	movff	?___altoft+1,___ftadd@f1+1
 10328  002112  C031  F0B0         	movff	?___altoft+2,___ftadd@f1+2
 10329  002116  ECD9  F00E         	call	___ftadd	;wreg free
 10330  00211A  C0AE  F0D9         	movff	?___ftadd,_angleToPulse$1348
 10331  00211E  C0AF  F0DA         	movff	?___ftadd+1,_angleToPulse$1348+1
 10332  002122  C0B0  F0DB         	movff	?___ftadd+2,_angleToPulse$1348+2
 10333                           
 10334                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 10335  002126  C0D1  F02F         	movff	angleToPulse@offset,___altoft@c
 10336  00212A  C0D2  F030         	movff	angleToPulse@offset+1,___altoft@c+1
 10337  00212E  C0D3  F031         	movff	angleToPulse@offset+2,___altoft@c+2
 10338  002132  C0D4  F032         	movff	angleToPulse@offset+3,___altoft@c+3
 10339  002136  EC4A  F019         	call	___altoft	;wreg free
 10340  00213A  C02F  F0B1         	movff	?___altoft,___ftadd@f2
 10341  00213E  C030  F0B2         	movff	?___altoft+1,___ftadd@f2+1
 10342  002142  C031  F0B3         	movff	?___altoft+2,___ftadd@f2+2
 10343  002146  C0D9  F0AE         	movff	_angleToPulse$1348,___ftadd@f1
 10344  00214A  C0DA  F0AF         	movff	_angleToPulse$1348+1,___ftadd@f1+1
 10345  00214E  C0DB  F0B0         	movff	_angleToPulse$1348+2,___ftadd@f1+2
 10346  002152  ECD9  F00E         	call	___ftadd	;wreg free
 10347  002156  C0AE  F0BA         	movff	?___ftadd,___fttol@f1
 10348  00215A  C0AF  F0BB         	movff	?___ftadd+1,___fttol@f1+1
 10349  00215E  C0B0  F0BC         	movff	?___ftadd+2,___fttol@f1+2
 10350  002162  ECBF  F012         	call	___fttol	;wreg free
 10351  002166  C0BA  F0C9         	movff	?___fttol,?_angleToPulse
 10352  00216A  C0BB  F0CA         	movff	?___fttol+1,?_angleToPulse+1
 10353  00216E  C0BC  F0CB         	movff	?___fttol+2,?_angleToPulse+2
 10354  002172  C0BD  F0CC         	movff	?___fttol+3,?_angleToPulse+3
 10355  002176  0012               	return	
 10356  002178                     __end_of_angleToPulse:
 10357                           	opt stack 0
 10358                           tblptru	equ	0xFF8
 10359                           tblptrh	equ	0xFF7
 10360                           tblptrl	equ	0xFF6
 10361                           tablat	equ	0xFF5
 10362                           prodh	equ	0xFF4
 10363                           prodl	equ	0xFF3
 10364                           intcon	equ	0xFF2
 10365                           intcon3	equ	0xFF0
 10366                           postinc0	equ	0xFEE
 10367                           wreg	equ	0xFE8
 10368                           postdec1	equ	0xFE5
 10369                           fsr1l	equ	0xFE1
 10370                           indf2	equ	0xFDF
 10371                           postinc2	equ	0xFDE
 10372                           postdec2	equ	0xFDD
 10373                           fsr2h	equ	0xFDA
 10374                           fsr2l	equ	0xFD9
 10375                           status	equ	0xFD8
 10376                           
 10377 ;; *************** function ___fttol *****************
 10378 ;; Defined at:
 10379 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;  f1              3   58[BANK0 ] float 
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;  lval            4   68[BANK0 ] unsigned long 
 10384 ;;  exp1            1   72[BANK0 ] unsigned char 
 10385 ;;  sign1           1   67[BANK0 ] unsigned char 
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  4   58[BANK0 ] long 
 10388 ;; Registers used:
 10389 ;;		wreg, status,2, status,0
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10395 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10397 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10398 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10399 ;;Total ram usage:       15 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:    3
 10402 ;; This function calls:
 10403 ;;		Nothing
 10404 ;; This function is called by:
 10405 ;;		_sortBattery
 10406 ;;		_angleToPulse
 10407 ;;		_printf
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           	psect	text37
 10412  00257E                     __ptext37:
 10413                           	opt stack 0
 10414  00257E                     ___fttol:
 10415                           	opt stack 24
 10416                           
 10417                           ;incstack = 0
 10418  00257E  C0BC  F0BE         	movff	___fttol@f1+2,??___fttol
 10419  002582  0100               	movlb	0	; () banked
 10420  002584  6BBF               	clrf	(??___fttol+1)& (0+255),b
 10421  002586  6BC0               	clrf	(??___fttol+2)& (0+255),b
 10422  002588  0100               	movlb	0	; () banked
 10423  00258A  35BB               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10424  00258C  0100               	movlb	0	; () banked
 10425  00258E  37BE               	rlcf	??___fttol& (0+255),f,b
 10426  002590  E301               	bnc	u6161
 10427  002592  81BF               	bsf	(??___fttol+1)& (0+255),0,b
 10428  002594                     u6161:
 10429  002594  0100               	movlb	0	; () banked
 10430  002596  51BE               	movf	??___fttol& (0+255),w,b
 10431  002598  0100               	movlb	0	; () banked
 10432  00259A  6FC8               	movwf	___fttol@exp1& (0+255),b
 10433  00259C  0100               	movlb	0	; () banked
 10434  00259E  51C8               	movf	___fttol@exp1& (0+255),w,b
 10435  0025A0  A4D8               	btfss	status,2,c
 10436  0025A2  D00A               	goto	l6079
 10437                           
 10438                           ; BSR set to: 0
 10439  0025A4  0E00               	movlw	0
 10440  0025A6  0100               	movlb	0	; () banked
 10441  0025A8  6FBA               	movwf	?___fttol& (0+255),b
 10442  0025AA  0E00               	movlw	0
 10443  0025AC  6FBB               	movwf	(?___fttol+1)& (0+255),b
 10444  0025AE  0E00               	movlw	0
 10445  0025B0  6FBC               	movwf	(?___fttol+2)& (0+255),b
 10446  0025B2  0E00               	movlw	0
 10447  0025B4  6FBD               	movwf	(?___fttol+3)& (0+255),b
 10448                           
 10449                           ; BSR set to: 0
 10450  0025B6  0012               	return	
 10451  0025B8                     l6079:
 10452                           
 10453                           ; BSR set to: 0
 10454  0025B8  0E17               	movlw	23
 10455  0025BA  0100               	movlb	0	; () banked
 10456  0025BC  6FBE               	movwf	??___fttol& (0+255),b
 10457  0025BE  C0BA  F0BF         	movff	___fttol@f1,??___fttol+1
 10458  0025C2  C0BB  F0C0         	movff	___fttol@f1+1,??___fttol+2
 10459  0025C6  C0BC  F0C1         	movff	___fttol@f1+2,??___fttol+3
 10460  0025CA  0100               	movlb	0	; () banked
 10461  0025CC  29BE               	incf	??___fttol& (0+255),w,b
 10462  0025CE  0100               	movlb	0	; () banked
 10463  0025D0  6FC2               	movwf	(??___fttol+4)& (0+255),b
 10464  0025D2  D005               	goto	u6180
 10465  0025D4                     u6185:
 10466  0025D4  0100               	movlb	0	; () banked
 10467  0025D6  90D8               	bcf	status,0,c
 10468  0025D8  33C1               	rrcf	(??___fttol+3)& (0+255),f,b
 10469  0025DA  33C0               	rrcf	(??___fttol+2)& (0+255),f,b
 10470  0025DC  33BF               	rrcf	(??___fttol+1)& (0+255),f,b
 10471  0025DE                     u6180:
 10472  0025DE  0100               	movlb	0	; () banked
 10473  0025E0  2FC2               	decfsz	(??___fttol+4)& (0+255),f,b
 10474  0025E2  D7F8               	goto	u6185
 10475  0025E4  0100               	movlb	0	; () banked
 10476  0025E6  51BF               	movf	(??___fttol+1)& (0+255),w,b
 10477  0025E8  0100               	movlb	0	; () banked
 10478  0025EA  6FC3               	movwf	___fttol@sign1& (0+255),b
 10479                           
 10480                           ; BSR set to: 0
 10481  0025EC  0100               	movlb	0	; () banked
 10482  0025EE  8FBB               	bsf	(___fttol@f1+1)& (0+255),7,b
 10483                           
 10484                           ; BSR set to: 0
 10485  0025F0  0EFF               	movlw	255
 10486  0025F2  0100               	movlb	0	; () banked
 10487  0025F4  17BA               	andwf	___fttol@f1& (0+255),f,b
 10488  0025F6  0EFF               	movlw	255
 10489  0025F8  0100               	movlb	0	; () banked
 10490  0025FA  17BB               	andwf	(___fttol@f1+1)& (0+255),f,b
 10491  0025FC  0E00               	movlw	0
 10492  0025FE  0100               	movlb	0	; () banked
 10493  002600  17BC               	andwf	(___fttol@f1+2)& (0+255),f,b
 10494                           
 10495                           ; BSR set to: 0
 10496  002602  0100               	movlb	0	; () banked
 10497  002604  51BA               	movf	___fttol@f1& (0+255),w,b
 10498  002606  0100               	movlb	0	; () banked
 10499  002608  6FC4               	movwf	___fttol@lval& (0+255),b
 10500  00260A  0100               	movlb	0	; () banked
 10501  00260C  51BB               	movf	(___fttol@f1+1)& (0+255),w,b
 10502  00260E  0100               	movlb	0	; () banked
 10503  002610  6FC5               	movwf	(___fttol@lval+1)& (0+255),b
 10504  002612  0100               	movlb	0	; () banked
 10505  002614  51BC               	movf	(___fttol@f1+2)& (0+255),w,b
 10506  002616  0100               	movlb	0	; () banked
 10507  002618  6FC6               	movwf	(___fttol@lval+2)& (0+255),b
 10508  00261A  0100               	movlb	0	; () banked
 10509  00261C  6BC7               	clrf	(___fttol@lval+3)& (0+255),b
 10510                           
 10511                           ; BSR set to: 0
 10512  00261E  0E8E               	movlw	142
 10513  002620  0100               	movlb	0	; () banked
 10514  002622  5FC8               	subwf	___fttol@exp1& (0+255),f,b
 10515                           
 10516                           ; BSR set to: 0
 10517  002624  0100               	movlb	0	; () banked
 10518  002626  AFC8               	btfss	___fttol@exp1& (0+255),7,b
 10519  002628  D01A               	goto	l6101
 10520                           
 10521                           ; BSR set to: 0
 10522  00262A  0100               	movlb	0	; () banked
 10523  00262C  51C8               	movf	___fttol@exp1& (0+255),w,b
 10524  00262E  0A80               	xorlw	128
 10525  002630  0F8F               	addlw	143
 10526  002632  B0D8               	btfsc	status,0,c
 10527  002634  D00A               	goto	l6097
 10528                           
 10529                           ; BSR set to: 0
 10530  002636  0E00               	movlw	0
 10531  002638  0100               	movlb	0	; () banked
 10532  00263A  6FBA               	movwf	?___fttol& (0+255),b
 10533  00263C  0E00               	movlw	0
 10534  00263E  6FBB               	movwf	(?___fttol+1)& (0+255),b
 10535  002640  0E00               	movlw	0
 10536  002642  6FBC               	movwf	(?___fttol+2)& (0+255),b
 10537  002644  0E00               	movlw	0
 10538  002646  6FBD               	movwf	(?___fttol+3)& (0+255),b
 10539                           
 10540                           ; BSR set to: 0
 10541  002648  0012               	return	
 10542  00264A                     l6097:
 10543                           
 10544                           ; BSR set to: 0
 10545  00264A  0100               	movlb	0	; () banked
 10546  00264C  90D8               	bcf	status,0,c
 10547  00264E  33C7               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10548  002650  33C6               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10549  002652  33C5               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10550  002654  33C4               	rrcf	___fttol@lval& (0+255),f,b
 10551                           
 10552                           ; BSR set to: 0
 10553  002656  0100               	movlb	0	; () banked
 10554  002658  3FC8               	incfsz	___fttol@exp1& (0+255),f,b
 10555  00265A  D7F7               	goto	l6097
 10556                           
 10557                           ; BSR set to: 0
 10558  00265C  D01B               	goto	l6111
 10559  00265E                     l6101:
 10560                           
 10561                           ; BSR set to: 0
 10562  00265E  0E17               	movlw	23
 10563  002660  0100               	movlb	0	; () banked
 10564  002662  65C8               	cpfsgt	___fttol@exp1& (0+255),b
 10565  002664  D012               	goto	l6109
 10566                           
 10567                           ; BSR set to: 0
 10568  002666  0E00               	movlw	0
 10569  002668  0100               	movlb	0	; () banked
 10570  00266A  6FBA               	movwf	?___fttol& (0+255),b
 10571  00266C  0E00               	movlw	0
 10572  00266E  6FBB               	movwf	(?___fttol+1)& (0+255),b
 10573  002670  0E00               	movlw	0
 10574  002672  6FBC               	movwf	(?___fttol+2)& (0+255),b
 10575  002674  0E00               	movlw	0
 10576  002676  6FBD               	movwf	(?___fttol+3)& (0+255),b
 10577                           
 10578                           ; BSR set to: 0
 10579  002678  0012               	return	
 10580  00267A                     l6107:
 10581                           
 10582                           ; BSR set to: 0
 10583  00267A  0100               	movlb	0	; () banked
 10584  00267C  90D8               	bcf	status,0,c
 10585  00267E  37C4               	rlcf	___fttol@lval& (0+255),f,b
 10586  002680  37C5               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10587  002682  37C6               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10588  002684  37C7               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10589  002686  0100               	movlb	0	; () banked
 10590  002688  07C8               	decf	___fttol@exp1& (0+255),f,b
 10591  00268A                     l6109:
 10592                           
 10593                           ; BSR set to: 0
 10594  00268A  0100               	movlb	0	; () banked
 10595  00268C  51C8               	movf	___fttol@exp1& (0+255),w,b
 10596  00268E  0100               	movlb	0	; () banked
 10597  002690  A4D8               	btfss	status,2,c
 10598  002692  D7F3               	goto	l6107
 10599  002694                     l6111:
 10600                           
 10601                           ; BSR set to: 0
 10602  002694  0100               	movlb	0	; () banked
 10603  002696  51C3               	movf	___fttol@sign1& (0+255),w,b
 10604  002698  0100               	movlb	0	; () banked
 10605  00269A  B4D8               	btfsc	status,2,c
 10606  00269C  D009               	goto	l6115
 10607                           
 10608                           ; BSR set to: 0
 10609  00269E  0100               	movlb	0	; () banked
 10610  0026A0  1FC7               	comf	(___fttol@lval+3)& (0+255),f,b
 10611  0026A2  1FC6               	comf	(___fttol@lval+2)& (0+255),f,b
 10612  0026A4  1FC5               	comf	(___fttol@lval+1)& (0+255),f,b
 10613  0026A6  6DC4               	negf	___fttol@lval& (0+255),b
 10614  0026A8  0E00               	movlw	0
 10615  0026AA  23C5               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10616  0026AC  23C6               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10617  0026AE  23C7               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10618  0026B0                     l6115:
 10619                           
 10620                           ; BSR set to: 0
 10621  0026B0  C0C4  F0BA         	movff	___fttol@lval,?___fttol
 10622  0026B4  C0C5  F0BB         	movff	___fttol@lval+1,?___fttol+1
 10623  0026B8  C0C6  F0BC         	movff	___fttol@lval+2,?___fttol+2
 10624  0026BC  C0C7  F0BD         	movff	___fttol@lval+3,?___fttol+3
 10625  0026C0  0012               	return	
 10626  0026C2                     __end_of___fttol:
 10627                           	opt stack 0
 10628                           tblptru	equ	0xFF8
 10629                           tblptrh	equ	0xFF7
 10630                           tblptrl	equ	0xFF6
 10631                           tablat	equ	0xFF5
 10632                           prodh	equ	0xFF4
 10633                           prodl	equ	0xFF3
 10634                           intcon	equ	0xFF2
 10635                           intcon3	equ	0xFF0
 10636                           postinc0	equ	0xFEE
 10637                           wreg	equ	0xFE8
 10638                           postdec1	equ	0xFE5
 10639                           fsr1l	equ	0xFE1
 10640                           indf2	equ	0xFDF
 10641                           postinc2	equ	0xFDE
 10642                           postdec2	equ	0xFDD
 10643                           fsr2h	equ	0xFDA
 10644                           fsr2l	equ	0xFD9
 10645                           status	equ	0xFD8
 10646                           
 10647 ;; *************** function ___ftmul *****************
 10648 ;; Defined at:
 10649 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;  f1              3   21[BANK0 ] float 
 10652 ;;  f2              3   24[BANK0 ] float 
 10653 ;; Auto vars:     Size  Location     Type
 10654 ;;  f3_as_produc    3   31[BANK0 ] unsigned um
 10655 ;;  sign            1   35[BANK0 ] unsigned char 
 10656 ;;  cntr            1   34[BANK0 ] unsigned char 
 10657 ;;  exp             1   30[BANK0 ] unsigned char 
 10658 ;; Return value:  Size  Location     Type
 10659 ;;                  3   21[BANK0 ] float 
 10660 ;; Registers used:
 10661 ;;		wreg, status,2, status,0, cstack
 10662 ;; Tracked objects:
 10663 ;;		On entry : 0/0
 10664 ;;		On exit  : 0/0
 10665 ;;		Unchanged: 0/0
 10666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10667 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10668 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10669 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;Total ram usage:       15 bytes
 10672 ;; Hardware stack levels used:    1
 10673 ;; Hardware stack levels required when called:    4
 10674 ;; This function calls:
 10675 ;;		___ftpack
 10676 ;; This function is called by:
 10677 ;;		_sortBattery
 10678 ;;		_angleToPulse
 10679 ;;		_fround
 10680 ;;		_scale
 10681 ;;		_printf
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           	psect	text38
 10686  002178                     __ptext38:
 10687                           	opt stack 0
 10688  002178                     ___ftmul:
 10689                           	opt stack 23
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;incstack = 0
 10693  002178  C097  F09B         	movff	___ftmul@f1+2,??___ftmul
 10694  00217C  0100               	movlb	0	; () banked
 10695  00217E  6B9C               	clrf	(??___ftmul+1)& (0+255),b
 10696  002180  6B9D               	clrf	(??___ftmul+2)& (0+255),b
 10697  002182  0100               	movlb	0	; () banked
 10698  002184  3596               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10699  002186  0100               	movlb	0	; () banked
 10700  002188  379B               	rlcf	??___ftmul& (0+255),f,b
 10701  00218A  E301               	bnc	u5591
 10702  00218C  819C               	bsf	(??___ftmul+1)& (0+255),0,b
 10703  00218E                     u5591:
 10704  00218E  0100               	movlb	0	; () banked
 10705  002190  519B               	movf	??___ftmul& (0+255),w,b
 10706  002192  0100               	movlb	0	; () banked
 10707  002194  6F9E               	movwf	___ftmul@exp& (0+255),b
 10708  002196  0100               	movlb	0	; () banked
 10709  002198  519E               	movf	___ftmul@exp& (0+255),w,b
 10710  00219A  A4D8               	btfss	status,2,c
 10711  00219C  D00A               	goto	l5651
 10712                           
 10713                           ; BSR set to: 0
 10714  00219E  0E00               	movlw	0
 10715  0021A0  0100               	movlb	0	; () banked
 10716  0021A2  6F95               	movwf	?___ftmul& (0+255),b
 10717  0021A4  0E00               	movlw	0
 10718  0021A6  0100               	movlb	0	; () banked
 10719  0021A8  6F96               	movwf	(?___ftmul+1)& (0+255),b
 10720  0021AA  0E00               	movlw	0
 10721  0021AC  0100               	movlb	0	; () banked
 10722  0021AE  6F97               	movwf	(?___ftmul+2)& (0+255),b
 10723                           
 10724                           ; BSR set to: 0
 10725  0021B0  0012               	return	
 10726  0021B2                     l5651:
 10727                           
 10728                           ; BSR set to: 0
 10729  0021B2  C09A  F09B         	movff	___ftmul@f2+2,??___ftmul
 10730  0021B6  0100               	movlb	0	; () banked
 10731  0021B8  6B9C               	clrf	(??___ftmul+1)& (0+255),b
 10732  0021BA  6B9D               	clrf	(??___ftmul+2)& (0+255),b
 10733  0021BC  0100               	movlb	0	; () banked
 10734  0021BE  3599               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10735  0021C0  0100               	movlb	0	; () banked
 10736  0021C2  379B               	rlcf	??___ftmul& (0+255),f,b
 10737  0021C4  E301               	bnc	u5611
 10738  0021C6  819C               	bsf	(??___ftmul+1)& (0+255),0,b
 10739  0021C8                     u5611:
 10740  0021C8  0100               	movlb	0	; () banked
 10741  0021CA  519B               	movf	??___ftmul& (0+255),w,b
 10742  0021CC  0100               	movlb	0	; () banked
 10743  0021CE  6FA3               	movwf	___ftmul@sign& (0+255),b
 10744  0021D0  0100               	movlb	0	; () banked
 10745  0021D2  51A3               	movf	___ftmul@sign& (0+255),w,b
 10746  0021D4  A4D8               	btfss	status,2,c
 10747  0021D6  D00A               	goto	l5657
 10748                           
 10749                           ; BSR set to: 0
 10750  0021D8  0E00               	movlw	0
 10751  0021DA  0100               	movlb	0	; () banked
 10752  0021DC  6F95               	movwf	?___ftmul& (0+255),b
 10753  0021DE  0E00               	movlw	0
 10754  0021E0  0100               	movlb	0	; () banked
 10755  0021E2  6F96               	movwf	(?___ftmul+1)& (0+255),b
 10756  0021E4  0E00               	movlw	0
 10757  0021E6  0100               	movlb	0	; () banked
 10758  0021E8  6F97               	movwf	(?___ftmul+2)& (0+255),b
 10759                           
 10760                           ; BSR set to: 0
 10761  0021EA  0012               	return	
 10762  0021EC                     l5657:
 10763                           
 10764                           ; BSR set to: 0
 10765  0021EC  0100               	movlb	0	; () banked
 10766  0021EE  51A3               	movf	___ftmul@sign& (0+255),w,b
 10767  0021F0  0F7B               	addlw	123
 10768  0021F2  0100               	movlb	0	; () banked
 10769  0021F4  279E               	addwf	___ftmul@exp& (0+255),f,b
 10770                           
 10771                           ; BSR set to: 0
 10772  0021F6  C097  F0A3         	movff	___ftmul@f1+2,___ftmul@sign
 10773  0021FA  0100               	movlb	0	; () banked
 10774  0021FC  519A               	movf	(___ftmul@f2+2)& (0+255),w,b
 10775  0021FE  0100               	movlb	0	; () banked
 10776  002200  1BA3               	xorwf	___ftmul@sign& (0+255),f,b
 10777  002202  0E80               	movlw	128
 10778  002204  0100               	movlb	0	; () banked
 10779  002206  17A3               	andwf	___ftmul@sign& (0+255),f,b
 10780                           
 10781                           ; BSR set to: 0
 10782  002208  0100               	movlb	0	; () banked
 10783  00220A  8F96               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10784                           
 10785                           ; BSR set to: 0
 10786  00220C  0100               	movlb	0	; () banked
 10787  00220E  8F99               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10788                           
 10789                           ; BSR set to: 0
 10790  002210  0EFF               	movlw	255
 10791  002212  0100               	movlb	0	; () banked
 10792  002214  1798               	andwf	___ftmul@f2& (0+255),f,b
 10793  002216  0EFF               	movlw	255
 10794  002218  0100               	movlb	0	; () banked
 10795  00221A  1799               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10796  00221C  0E00               	movlw	0
 10797  00221E  0100               	movlb	0	; () banked
 10798  002220  179A               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10799                           
 10800                           ; BSR set to: 0
 10801  002222  0E00               	movlw	0
 10802  002224  0100               	movlb	0	; () banked
 10803  002226  6F9F               	movwf	___ftmul@f3_as_product& (0+255),b
 10804  002228  0E00               	movlw	0
 10805  00222A  0100               	movlb	0	; () banked
 10806  00222C  6FA0               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10807  00222E  0E00               	movlw	0
 10808  002230  0100               	movlb	0	; () banked
 10809  002232  6FA1               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10810                           
 10811                           ; BSR set to: 0
 10812  002234  0E07               	movlw	7
 10813  002236  0100               	movlb	0	; () banked
 10814  002238  6FA2               	movwf	___ftmul@cntr& (0+255),b
 10815  00223A                     l5671:
 10816                           
 10817                           ; BSR set to: 0
 10818  00223A  0100               	movlb	0	; () banked
 10819  00223C  A195               	btfss	___ftmul@f1& (0+255),0,b
 10820  00223E  D00C               	goto	l5675
 10821                           
 10822                           ; BSR set to: 0
 10823  002240  0100               	movlb	0	; () banked
 10824  002242  5198               	movf	___ftmul@f2& (0+255),w,b
 10825  002244  0100               	movlb	0	; () banked
 10826  002246  279F               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10827  002248  0100               	movlb	0	; () banked
 10828  00224A  5199               	movf	(___ftmul@f2+1)& (0+255),w,b
 10829  00224C  0100               	movlb	0	; () banked
 10830  00224E  23A0               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10831  002250  0100               	movlb	0	; () banked
 10832  002252  519A               	movf	(___ftmul@f2+2)& (0+255),w,b
 10833  002254  0100               	movlb	0	; () banked
 10834  002256  23A1               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10835  002258                     l5675:
 10836                           
 10837                           ; BSR set to: 0
 10838  002258  0100               	movlb	0	; () banked
 10839  00225A  90D8               	bcf	status,0,c
 10840  00225C  3397               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10841  00225E  3396               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10842  002260  3395               	rrcf	___ftmul@f1& (0+255),f,b
 10843  002262  0100               	movlb	0	; () banked
 10844  002264  90D8               	bcf	status,0,c
 10845  002266  3798               	rlcf	___ftmul@f2& (0+255),f,b
 10846  002268  3799               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10847  00226A  379A               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10848                           
 10849                           ; BSR set to: 0
 10850  00226C  0100               	movlb	0	; () banked
 10851  00226E  2FA2               	decfsz	___ftmul@cntr& (0+255),f,b
 10852  002270  D7E4               	goto	l5671
 10853                           
 10854                           ; BSR set to: 0
 10855                           
 10856                           ; BSR set to: 0
 10857  002272  0E09               	movlw	9
 10858  002274  0100               	movlb	0	; () banked
 10859  002276  6FA2               	movwf	___ftmul@cntr& (0+255),b
 10860  002278                     l5681:
 10861                           
 10862                           ; BSR set to: 0
 10863  002278  0100               	movlb	0	; () banked
 10864  00227A  A195               	btfss	___ftmul@f1& (0+255),0,b
 10865  00227C  D00C               	goto	l5685
 10866                           
 10867                           ; BSR set to: 0
 10868  00227E  0100               	movlb	0	; () banked
 10869  002280  5198               	movf	___ftmul@f2& (0+255),w,b
 10870  002282  0100               	movlb	0	; () banked
 10871  002284  279F               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10872  002286  0100               	movlb	0	; () banked
 10873  002288  5199               	movf	(___ftmul@f2+1)& (0+255),w,b
 10874  00228A  0100               	movlb	0	; () banked
 10875  00228C  23A0               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10876  00228E  0100               	movlb	0	; () banked
 10877  002290  519A               	movf	(___ftmul@f2+2)& (0+255),w,b
 10878  002292  0100               	movlb	0	; () banked
 10879  002294  23A1               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10880  002296                     l5685:
 10881                           
 10882                           ; BSR set to: 0
 10883  002296  0100               	movlb	0	; () banked
 10884  002298  90D8               	bcf	status,0,c
 10885  00229A  3397               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10886  00229C  3396               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10887  00229E  3395               	rrcf	___ftmul@f1& (0+255),f,b
 10888  0022A0  0100               	movlb	0	; () banked
 10889  0022A2  90D8               	bcf	status,0,c
 10890  0022A4  33A1               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10891  0022A6  33A0               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10892  0022A8  339F               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10893                           
 10894                           ; BSR set to: 0
 10895  0022AA  0100               	movlb	0	; () banked
 10896  0022AC  2FA2               	decfsz	___ftmul@cntr& (0+255),f,b
 10897  0022AE  D7E4               	goto	l5681
 10898                           
 10899                           ; BSR set to: 0
 10900                           
 10901                           ; BSR set to: 0
 10902  0022B0  C09F  F027         	movff	___ftmul@f3_as_product,___ftpack@arg
 10903  0022B4  C0A0  F028         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10904  0022B8  C0A1  F029         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10905  0022BC  C09E  F02A         	movff	___ftmul@exp,___ftpack@exp
 10906  0022C0  C0A3  F02B         	movff	___ftmul@sign,___ftpack@sign
 10907  0022C4  EC58  F018         	call	___ftpack	;wreg free
 10908  0022C8  C027  F095         	movff	?___ftpack,?___ftmul
 10909  0022CC  C028  F096         	movff	?___ftpack+1,?___ftmul+1
 10910  0022D0  C029  F097         	movff	?___ftpack+2,?___ftmul+2
 10911  0022D4  0012               	return	
 10912  0022D6                     __end_of___ftmul:
 10913                           	opt stack 0
 10914                           tblptru	equ	0xFF8
 10915                           tblptrh	equ	0xFF7
 10916                           tblptrl	equ	0xFF6
 10917                           tablat	equ	0xFF5
 10918                           prodh	equ	0xFF4
 10919                           prodl	equ	0xFF3
 10920                           intcon	equ	0xFF2
 10921                           intcon3	equ	0xFF0
 10922                           postinc0	equ	0xFEE
 10923                           wreg	equ	0xFE8
 10924                           postdec1	equ	0xFE5
 10925                           fsr1l	equ	0xFE1
 10926                           indf2	equ	0xFDF
 10927                           postinc2	equ	0xFDE
 10928                           postdec2	equ	0xFDD
 10929                           fsr2h	equ	0xFDA
 10930                           fsr2l	equ	0xFD9
 10931                           status	equ	0xFD8
 10932                           
 10933 ;; *************** function ___ftdiv *****************
 10934 ;; Defined at:
 10935 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10936 ;; Parameters:    Size  Location     Type
 10937 ;;  f1              3    6[BANK0 ] float 
 10938 ;;  f2              3    9[BANK0 ] float 
 10939 ;; Auto vars:     Size  Location     Type
 10940 ;;  f3              3   16[BANK0 ] float 
 10941 ;;  sign            1   20[BANK0 ] unsigned char 
 10942 ;;  exp             1   19[BANK0 ] unsigned char 
 10943 ;;  cntr            1   15[BANK0 ] unsigned char 
 10944 ;; Return value:  Size  Location     Type
 10945 ;;                  3    6[BANK0 ] float 
 10946 ;; Registers used:
 10947 ;;		wreg, status,2, status,0, cstack
 10948 ;; Tracked objects:
 10949 ;;		On entry : 0/0
 10950 ;;		On exit  : 0/0
 10951 ;;		Unchanged: 0/0
 10952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10953 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10954 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10955 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10956 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10957 ;;Total ram usage:       15 bytes
 10958 ;; Hardware stack levels used:    1
 10959 ;; Hardware stack levels required when called:    4
 10960 ;; This function calls:
 10961 ;;		___ftpack
 10962 ;; This function is called by:
 10963 ;;		_sortBattery
 10964 ;;		_angleToPulse
 10965 ;; This function uses a non-reentrant model
 10966 ;;
 10967                           
 10968                           	psect	text39
 10969  002432                     __ptext39:
 10970                           	opt stack 0
 10971  002432                     ___ftdiv:
 10972                           	opt stack 23
 10973                           
 10974                           ;incstack = 0
 10975  002432  C088  F08C         	movff	___ftdiv@f1+2,??___ftdiv
 10976  002436  0100               	movlb	0	; () banked
 10977  002438  6B8D               	clrf	(??___ftdiv+1)& (0+255),b
 10978  00243A  6B8E               	clrf	(??___ftdiv+2)& (0+255),b
 10979  00243C  0100               	movlb	0	; () banked
 10980  00243E  3587               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10981  002440  0100               	movlb	0	; () banked
 10982  002442  378C               	rlcf	??___ftdiv& (0+255),f,b
 10983  002444  E301               	bnc	u6051
 10984  002446  818D               	bsf	(??___ftdiv+1)& (0+255),0,b
 10985  002448                     u6051:
 10986  002448  0100               	movlb	0	; () banked
 10987  00244A  518C               	movf	??___ftdiv& (0+255),w,b
 10988  00244C  0100               	movlb	0	; () banked
 10989  00244E  6F93               	movwf	___ftdiv@exp& (0+255),b
 10990  002450  0100               	movlb	0	; () banked
 10991  002452  5193               	movf	___ftdiv@exp& (0+255),w,b
 10992  002454  A4D8               	btfss	status,2,c
 10993  002456  D00A               	goto	l5991
 10994                           
 10995                           ; BSR set to: 0
 10996  002458  0E00               	movlw	0
 10997  00245A  0100               	movlb	0	; () banked
 10998  00245C  6F86               	movwf	?___ftdiv& (0+255),b
 10999  00245E  0E00               	movlw	0
 11000  002460  0100               	movlb	0	; () banked
 11001  002462  6F87               	movwf	(?___ftdiv+1)& (0+255),b
 11002  002464  0E00               	movlw	0
 11003  002466  0100               	movlb	0	; () banked
 11004  002468  6F88               	movwf	(?___ftdiv+2)& (0+255),b
 11005                           
 11006                           ; BSR set to: 0
 11007  00246A  0012               	return	
 11008  00246C                     l5991:
 11009                           
 11010                           ; BSR set to: 0
 11011  00246C  C08B  F08C         	movff	___ftdiv@f2+2,??___ftdiv
 11012  002470  0100               	movlb	0	; () banked
 11013  002472  6B8D               	clrf	(??___ftdiv+1)& (0+255),b
 11014  002474  6B8E               	clrf	(??___ftdiv+2)& (0+255),b
 11015  002476  0100               	movlb	0	; () banked
 11016  002478  358A               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 11017  00247A  0100               	movlb	0	; () banked
 11018  00247C  378C               	rlcf	??___ftdiv& (0+255),f,b
 11019  00247E  E301               	bnc	u6071
 11020  002480  818D               	bsf	(??___ftdiv+1)& (0+255),0,b
 11021  002482                     u6071:
 11022  002482  0100               	movlb	0	; () banked
 11023  002484  518C               	movf	??___ftdiv& (0+255),w,b
 11024  002486  0100               	movlb	0	; () banked
 11025  002488  6F94               	movwf	___ftdiv@sign& (0+255),b
 11026  00248A  0100               	movlb	0	; () banked
 11027  00248C  5194               	movf	___ftdiv@sign& (0+255),w,b
 11028  00248E  A4D8               	btfss	status,2,c
 11029  002490  D00A               	goto	l5997
 11030                           
 11031                           ; BSR set to: 0
 11032  002492  0E00               	movlw	0
 11033  002494  0100               	movlb	0	; () banked
 11034  002496  6F86               	movwf	?___ftdiv& (0+255),b
 11035  002498  0E00               	movlw	0
 11036  00249A  0100               	movlb	0	; () banked
 11037  00249C  6F87               	movwf	(?___ftdiv+1)& (0+255),b
 11038  00249E  0E00               	movlw	0
 11039  0024A0  0100               	movlb	0	; () banked
 11040  0024A2  6F88               	movwf	(?___ftdiv+2)& (0+255),b
 11041                           
 11042                           ; BSR set to: 0
 11043  0024A4  0012               	return	
 11044  0024A6                     l5997:
 11045                           
 11046                           ; BSR set to: 0
 11047  0024A6  0E00               	movlw	0
 11048  0024A8  0100               	movlb	0	; () banked
 11049  0024AA  6F90               	movwf	___ftdiv@f3& (0+255),b
 11050  0024AC  0E00               	movlw	0
 11051  0024AE  0100               	movlb	0	; () banked
 11052  0024B0  6F91               	movwf	(___ftdiv@f3+1)& (0+255),b
 11053  0024B2  0E00               	movlw	0
 11054  0024B4  0100               	movlb	0	; () banked
 11055  0024B6  6F92               	movwf	(___ftdiv@f3+2)& (0+255),b
 11056                           
 11057                           ; BSR set to: 0
 11058  0024B8  0100               	movlb	0	; () banked
 11059  0024BA  5194               	movf	___ftdiv@sign& (0+255),w,b
 11060  0024BC  0F89               	addlw	137
 11061  0024BE  0100               	movlb	0	; () banked
 11062  0024C0  5F93               	subwf	___ftdiv@exp& (0+255),f,b
 11063                           
 11064                           ; BSR set to: 0
 11065  0024C2  C088  F094         	movff	___ftdiv@f1+2,___ftdiv@sign
 11066                           
 11067                           ; BSR set to: 0
 11068  0024C6  0100               	movlb	0	; () banked
 11069  0024C8  518B               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11070  0024CA  0100               	movlb	0	; () banked
 11071  0024CC  1B94               	xorwf	___ftdiv@sign& (0+255),f,b
 11072                           
 11073                           ; BSR set to: 0
 11074  0024CE  0E80               	movlw	128
 11075  0024D0  0100               	movlb	0	; () banked
 11076  0024D2  1794               	andwf	___ftdiv@sign& (0+255),f,b
 11077                           
 11078                           ; BSR set to: 0
 11079  0024D4  0100               	movlb	0	; () banked
 11080  0024D6  8F87               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 11081                           
 11082                           ; BSR set to: 0
 11083  0024D8  0EFF               	movlw	255
 11084  0024DA  0100               	movlb	0	; () banked
 11085  0024DC  1786               	andwf	___ftdiv@f1& (0+255),f,b
 11086  0024DE  0EFF               	movlw	255
 11087  0024E0  0100               	movlb	0	; () banked
 11088  0024E2  1787               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 11089  0024E4  0E00               	movlw	0
 11090  0024E6  0100               	movlb	0	; () banked
 11091  0024E8  1788               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 11092                           
 11093                           ; BSR set to: 0
 11094  0024EA  0100               	movlb	0	; () banked
 11095  0024EC  8F8A               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 11096                           
 11097                           ; BSR set to: 0
 11098  0024EE  0EFF               	movlw	255
 11099  0024F0  0100               	movlb	0	; () banked
 11100  0024F2  1789               	andwf	___ftdiv@f2& (0+255),f,b
 11101  0024F4  0EFF               	movlw	255
 11102  0024F6  0100               	movlb	0	; () banked
 11103  0024F8  178A               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 11104  0024FA  0E00               	movlw	0
 11105  0024FC  0100               	movlb	0	; () banked
 11106  0024FE  178B               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 11107                           
 11108                           ; BSR set to: 0
 11109  002500  0E18               	movlw	24
 11110  002502  0100               	movlb	0	; () banked
 11111  002504  6F8F               	movwf	___ftdiv@cntr& (0+255),b
 11112  002506                     l6017:
 11113                           
 11114                           ; BSR set to: 0
 11115  002506  0100               	movlb	0	; () banked
 11116  002508  90D8               	bcf	status,0,c
 11117  00250A  3790               	rlcf	___ftdiv@f3& (0+255),f,b
 11118  00250C  3791               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 11119  00250E  3792               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 11120                           
 11121                           ; BSR set to: 0
 11122  002510  0100               	movlb	0	; () banked
 11123  002512  5189               	movf	___ftdiv@f2& (0+255),w,b
 11124  002514  0100               	movlb	0	; () banked
 11125  002516  5D86               	subwf	___ftdiv@f1& (0+255),w,b
 11126  002518  0100               	movlb	0	; () banked
 11127  00251A  518A               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11128  00251C  0100               	movlb	0	; () banked
 11129  00251E  5987               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 11130  002520  0100               	movlb	0	; () banked
 11131  002522  518B               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11132  002524  0100               	movlb	0	; () banked
 11133  002526  5988               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 11134  002528  A0D8               	btfss	status,0,c
 11135  00252A  D00E               	goto	l1120
 11136                           
 11137                           ; BSR set to: 0
 11138  00252C  0100               	movlb	0	; () banked
 11139  00252E  5189               	movf	___ftdiv@f2& (0+255),w,b
 11140  002530  0100               	movlb	0	; () banked
 11141  002532  5F86               	subwf	___ftdiv@f1& (0+255),f,b
 11142  002534  0100               	movlb	0	; () banked
 11143  002536  518A               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11144  002538  0100               	movlb	0	; () banked
 11145  00253A  5B87               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 11146  00253C  0100               	movlb	0	; () banked
 11147  00253E  518B               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11148  002540  0100               	movlb	0	; () banked
 11149  002542  5B88               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 11150                           
 11151                           ; BSR set to: 0
 11152  002544  0100               	movlb	0	; () banked
 11153  002546  8190               	bsf	___ftdiv@f3& (0+255),0,b
 11154  002548                     l1120:
 11155                           
 11156                           ; BSR set to: 0
 11157  002548  0100               	movlb	0	; () banked
 11158  00254A  90D8               	bcf	status,0,c
 11159  00254C  3786               	rlcf	___ftdiv@f1& (0+255),f,b
 11160  00254E  3787               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 11161  002550  3788               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 11162                           
 11163                           ; BSR set to: 0
 11164  002552  0100               	movlb	0	; () banked
 11165  002554  2F8F               	decfsz	___ftdiv@cntr& (0+255),f,b
 11166  002556  D7D7               	goto	l6017
 11167                           
 11168                           ; BSR set to: 0
 11169                           
 11170                           ; BSR set to: 0
 11171  002558  C090  F027         	movff	___ftdiv@f3,___ftpack@arg
 11172  00255C  C091  F028         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11173  002560  C092  F029         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11174  002564  C093  F02A         	movff	___ftdiv@exp,___ftpack@exp
 11175  002568  C094  F02B         	movff	___ftdiv@sign,___ftpack@sign
 11176  00256C  EC58  F018         	call	___ftpack	;wreg free
 11177  002570  C027  F086         	movff	?___ftpack,?___ftdiv
 11178  002574  C028  F087         	movff	?___ftpack+1,?___ftdiv+1
 11179  002578  C029  F088         	movff	?___ftpack+2,?___ftdiv+2
 11180  00257C  0012               	return	
 11181  00257E                     __end_of___ftdiv:
 11182                           	opt stack 0
 11183                           tblptru	equ	0xFF8
 11184                           tblptrh	equ	0xFF7
 11185                           tblptrl	equ	0xFF6
 11186                           tablat	equ	0xFF5
 11187                           prodh	equ	0xFF4
 11188                           prodl	equ	0xFF3
 11189                           intcon	equ	0xFF2
 11190                           intcon3	equ	0xFF0
 11191                           postinc0	equ	0xFEE
 11192                           wreg	equ	0xFE8
 11193                           postdec1	equ	0xFE5
 11194                           fsr1l	equ	0xFE1
 11195                           indf2	equ	0xFDF
 11196                           postinc2	equ	0xFDE
 11197                           postdec2	equ	0xFDD
 11198                           fsr2h	equ	0xFDA
 11199                           fsr2l	equ	0xFD9
 11200                           status	equ	0xFD8
 11201                           
 11202 ;; *************** function ___ftadd *****************
 11203 ;; Defined at:
 11204 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11205 ;; Parameters:    Size  Location     Type
 11206 ;;  f1              3   46[BANK0 ] float 
 11207 ;;  f2              3   49[BANK0 ] float 
 11208 ;; Auto vars:     Size  Location     Type
 11209 ;;  exp1            1   57[BANK0 ] unsigned char 
 11210 ;;  exp2            1   56[BANK0 ] unsigned char 
 11211 ;;  sign            1   55[BANK0 ] unsigned char 
 11212 ;; Return value:  Size  Location     Type
 11213 ;;                  3   46[BANK0 ] float 
 11214 ;; Registers used:
 11215 ;;		wreg, status,2, status,0, cstack
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11221 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11222 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11223 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11224 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11225 ;;Total ram usage:       12 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    4
 11228 ;; This function calls:
 11229 ;;		___ftpack
 11230 ;; This function is called by:
 11231 ;;		_angleToPulse
 11232 ;;		_printf
 11233 ;;		___ftsub
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           	psect	text40
 11238  001DB2                     __ptext40:
 11239                           	opt stack 0
 11240  001DB2                     ___ftadd:
 11241                           	opt stack 23
 11242                           
 11243                           ;incstack = 0
 11244  001DB2  C0B0  F0B4         	movff	___ftadd@f1+2,??___ftadd
 11245  001DB6  0100               	movlb	0	; () banked
 11246  001DB8  6BB5               	clrf	(??___ftadd+1)& (0+255),b
 11247  001DBA  6BB6               	clrf	(??___ftadd+2)& (0+255),b
 11248  001DBC  0100               	movlb	0	; () banked
 11249  001DBE  35AF               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11250  001DC0  0100               	movlb	0	; () banked
 11251  001DC2  37B4               	rlcf	??___ftadd& (0+255),f,b
 11252  001DC4  E301               	bnc	u5381
 11253  001DC6  81B5               	bsf	(??___ftadd+1)& (0+255),0,b
 11254  001DC8                     u5381:
 11255  001DC8  0100               	movlb	0	; () banked
 11256  001DCA  51B4               	movf	??___ftadd& (0+255),w,b
 11257  001DCC  0100               	movlb	0	; () banked
 11258  001DCE  6FB9               	movwf	___ftadd@exp1& (0+255),b
 11259  001DD0  C0B3  F0B4         	movff	___ftadd@f2+2,??___ftadd
 11260  001DD4  0100               	movlb	0	; () banked
 11261  001DD6  6BB5               	clrf	(??___ftadd+1)& (0+255),b
 11262  001DD8  6BB6               	clrf	(??___ftadd+2)& (0+255),b
 11263  001DDA  0100               	movlb	0	; () banked
 11264  001DDC  35B2               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11265  001DDE  0100               	movlb	0	; () banked
 11266  001DE0  37B4               	rlcf	??___ftadd& (0+255),f,b
 11267  001DE2  E301               	bnc	u5391
 11268  001DE4  81B5               	bsf	(??___ftadd+1)& (0+255),0,b
 11269  001DE6                     u5391:
 11270  001DE6  0100               	movlb	0	; () banked
 11271  001DE8  51B4               	movf	??___ftadd& (0+255),w,b
 11272  001DEA  0100               	movlb	0	; () banked
 11273  001DEC  6FB8               	movwf	___ftadd@exp2& (0+255),b
 11274                           
 11275                           ; BSR set to: 0
 11276  001DEE  0100               	movlb	0	; () banked
 11277  001DF0  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11278  001DF2  0100               	movlb	0	; () banked
 11279  001DF4  B4D8               	btfsc	status,2,c
 11280  001DF6  D011               	goto	l1085
 11281                           
 11282                           ; BSR set to: 0
 11283  001DF8  0100               	movlb	0	; () banked
 11284  001DFA  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11285  001DFC  0100               	movlb	0	; () banked
 11286  001DFE  5DB9               	subwf	___ftadd@exp1& (0+255),w,b
 11287  001E00  B0D8               	btfsc	status,0,c
 11288  001E02  D012               	goto	l5583
 11289                           
 11290                           ; BSR set to: 0
 11291  001E04  0100               	movlb	0	; () banked
 11292  001E06  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11293  001E08  0800               	sublw	0
 11294  001E0A  0100               	movlb	0	; () banked
 11295  001E0C  25B8               	addwf	___ftadd@exp2& (0+255),w,b
 11296  001E0E  0100               	movlb	0	; () banked
 11297  001E10  6FB4               	movwf	??___ftadd& (0+255),b
 11298  001E12  0E18               	movlw	24
 11299  001E14  0100               	movlb	0	; () banked
 11300  001E16  65B4               	cpfsgt	??___ftadd& (0+255),b
 11301  001E18  D007               	goto	l5583
 11302  001E1A                     l1085:
 11303                           
 11304                           ; BSR set to: 0
 11305  001E1A  C0B1  F0AE         	movff	___ftadd@f2,?___ftadd
 11306  001E1E  C0B2  F0AF         	movff	___ftadd@f2+1,?___ftadd+1
 11307  001E22  C0B3  F0B0         	movff	___ftadd@f2+2,?___ftadd+2
 11308  001E26  0012               	return	
 11309  001E28                     l5583:
 11310                           
 11311                           ; BSR set to: 0
 11312  001E28  0100               	movlb	0	; () banked
 11313  001E2A  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11314  001E2C  0100               	movlb	0	; () banked
 11315  001E2E  B4D8               	btfsc	status,2,c
 11316  001E30  D011               	goto	l1089
 11317                           
 11318                           ; BSR set to: 0
 11319  001E32  0100               	movlb	0	; () banked
 11320  001E34  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11321  001E36  0100               	movlb	0	; () banked
 11322  001E38  5DB8               	subwf	___ftadd@exp2& (0+255),w,b
 11323  001E3A  B0D8               	btfsc	status,0,c
 11324  001E3C  D012               	goto	l5589
 11325                           
 11326                           ; BSR set to: 0
 11327  001E3E  0100               	movlb	0	; () banked
 11328  001E40  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11329  001E42  0800               	sublw	0
 11330  001E44  0100               	movlb	0	; () banked
 11331  001E46  25B9               	addwf	___ftadd@exp1& (0+255),w,b
 11332  001E48  0100               	movlb	0	; () banked
 11333  001E4A  6FB4               	movwf	??___ftadd& (0+255),b
 11334  001E4C  0E18               	movlw	24
 11335  001E4E  0100               	movlb	0	; () banked
 11336  001E50  65B4               	cpfsgt	??___ftadd& (0+255),b
 11337  001E52  D007               	goto	l5589
 11338  001E54                     l1089:
 11339                           
 11340                           ; BSR set to: 0
 11341  001E54  C0AE  F0AE         	movff	___ftadd@f1,?___ftadd
 11342  001E58  C0AF  F0AF         	movff	___ftadd@f1+1,?___ftadd+1
 11343  001E5C  C0B0  F0B0         	movff	___ftadd@f1+2,?___ftadd+2
 11344  001E60  0012               	return	
 11345  001E62                     l5589:
 11346                           
 11347                           ; BSR set to: 0
 11348  001E62  0E06               	movlw	6
 11349  001E64  0100               	movlb	0	; () banked
 11350  001E66  6FB7               	movwf	___ftadd@sign& (0+255),b
 11351                           
 11352                           ; BSR set to: 0
 11353  001E68  0100               	movlb	0	; () banked
 11354  001E6A  AFB0               	btfss	(___ftadd@f1+2)& (0+255),7,b
 11355  001E6C  D002               	goto	l5595
 11356                           
 11357                           ; BSR set to: 0
 11358  001E6E  0100               	movlb	0	; () banked
 11359  001E70  8FB7               	bsf	___ftadd@sign& (0+255),7,b
 11360  001E72                     l5595:
 11361                           
 11362                           ; BSR set to: 0
 11363  001E72  0100               	movlb	0	; () banked
 11364  001E74  AFB3               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11365  001E76  D002               	goto	l1091
 11366                           
 11367                           ; BSR set to: 0
 11368  001E78  0100               	movlb	0	; () banked
 11369  001E7A  8DB7               	bsf	___ftadd@sign& (0+255),6,b
 11370  001E7C                     l1091:
 11371                           
 11372                           ; BSR set to: 0
 11373  001E7C  0100               	movlb	0	; () banked
 11374  001E7E  8FAF               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11375                           
 11376                           ; BSR set to: 0
 11377  001E80  0EFF               	movlw	255
 11378  001E82  0100               	movlb	0	; () banked
 11379  001E84  17AE               	andwf	___ftadd@f1& (0+255),f,b
 11380  001E86  0EFF               	movlw	255
 11381  001E88  0100               	movlb	0	; () banked
 11382  001E8A  17AF               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11383  001E8C  0E00               	movlw	0
 11384  001E8E  0100               	movlb	0	; () banked
 11385  001E90  17B0               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11386  001E92  0100               	movlb	0	; () banked
 11387  001E94  8FB2               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11388                           
 11389                           ; BSR set to: 0
 11390  001E96  0EFF               	movlw	255
 11391  001E98  0100               	movlb	0	; () banked
 11392  001E9A  17B1               	andwf	___ftadd@f2& (0+255),f,b
 11393  001E9C  0EFF               	movlw	255
 11394  001E9E  0100               	movlb	0	; () banked
 11395  001EA0  17B2               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11396  001EA2  0E00               	movlw	0
 11397  001EA4  0100               	movlb	0	; () banked
 11398  001EA6  17B3               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11399                           
 11400                           ; BSR set to: 0
 11401  001EA8  0100               	movlb	0	; () banked
 11402  001EAA  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11403  001EAC  0100               	movlb	0	; () banked
 11404  001EAE  5DB9               	subwf	___ftadd@exp1& (0+255),w,b
 11405  001EB0  B0D8               	btfsc	status,0,c
 11406  001EB2  D025               	goto	l5615
 11407  001EB4                     l5605:
 11408                           
 11409                           ; BSR set to: 0
 11410  001EB4  0100               	movlb	0	; () banked
 11411  001EB6  90D8               	bcf	status,0,c
 11412  001EB8  37B1               	rlcf	___ftadd@f2& (0+255),f,b
 11413  001EBA  37B2               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11414  001EBC  37B3               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11415  001EBE  0100               	movlb	0	; () banked
 11416  001EC0  07B8               	decf	___ftadd@exp2& (0+255),f,b
 11417                           
 11418                           ; BSR set to: 0
 11419  001EC2  0100               	movlb	0	; () banked
 11420  001EC4  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11421  001EC6  0100               	movlb	0	; () banked
 11422  001EC8  19B8               	xorwf	___ftadd@exp2& (0+255),w,b
 11423  001ECA  B4D8               	btfsc	status,2,c
 11424  001ECC  D011               	goto	l5613
 11425                           
 11426                           ; BSR set to: 0
 11427  001ECE  0100               	movlb	0	; () banked
 11428  001ED0  07B7               	decf	___ftadd@sign& (0+255),f,b
 11429  001ED2  C0B7  F0B4         	movff	___ftadd@sign,??___ftadd
 11430  001ED6  0E07               	movlw	7
 11431  001ED8  0100               	movlb	0	; () banked
 11432  001EDA  17B4               	andwf	??___ftadd& (0+255),f,b
 11433  001EDC  B4D8               	btfsc	status,2,c
 11434  001EDE  D008               	goto	l5613
 11435  001EE0  D7E9               	goto	l5605
 11436  001EE2                     l5611:
 11437                           
 11438                           ; BSR set to: 0
 11439  001EE2  0100               	movlb	0	; () banked
 11440  001EE4  90D8               	bcf	status,0,c
 11441  001EE6  33B0               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11442  001EE8  33AF               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11443  001EEA  33AE               	rrcf	___ftadd@f1& (0+255),f,b
 11444  001EEC  0100               	movlb	0	; () banked
 11445  001EEE  2BB9               	incf	___ftadd@exp1& (0+255),f,b
 11446  001EF0                     l5613:
 11447                           
 11448                           ; BSR set to: 0
 11449  001EF0  0100               	movlb	0	; () banked
 11450  001EF2  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11451  001EF4  0100               	movlb	0	; () banked
 11452  001EF6  19B9               	xorwf	___ftadd@exp1& (0+255),w,b
 11453  001EF8  B4D8               	btfsc	status,2,c
 11454  001EFA  D02B               	goto	l1100
 11455  001EFC  D7F2               	goto	l5611
 11456  001EFE                     l5615:
 11457                           
 11458                           ; BSR set to: 0
 11459  001EFE  0100               	movlb	0	; () banked
 11460  001F00  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11461  001F02  0100               	movlb	0	; () banked
 11462  001F04  5DB8               	subwf	___ftadd@exp2& (0+255),w,b
 11463  001F06  B0D8               	btfsc	status,0,c
 11464  001F08  D024               	goto	l1100
 11465  001F0A                     l5617:
 11466                           
 11467                           ; BSR set to: 0
 11468  001F0A  0100               	movlb	0	; () banked
 11469  001F0C  90D8               	bcf	status,0,c
 11470  001F0E  37AE               	rlcf	___ftadd@f1& (0+255),f,b
 11471  001F10  37AF               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11472  001F12  37B0               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11473  001F14  0100               	movlb	0	; () banked
 11474  001F16  07B9               	decf	___ftadd@exp1& (0+255),f,b
 11475                           
 11476                           ; BSR set to: 0
 11477  001F18  0100               	movlb	0	; () banked
 11478  001F1A  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11479  001F1C  0100               	movlb	0	; () banked
 11480  001F1E  19B8               	xorwf	___ftadd@exp2& (0+255),w,b
 11481  001F20  B4D8               	btfsc	status,2,c
 11482  001F22  D011               	goto	l5625
 11483                           
 11484                           ; BSR set to: 0
 11485  001F24  0100               	movlb	0	; () banked
 11486  001F26  07B7               	decf	___ftadd@sign& (0+255),f,b
 11487  001F28  C0B7  F0B4         	movff	___ftadd@sign,??___ftadd
 11488  001F2C  0E07               	movlw	7
 11489  001F2E  0100               	movlb	0	; () banked
 11490  001F30  17B4               	andwf	??___ftadd& (0+255),f,b
 11491  001F32  B4D8               	btfsc	status,2,c
 11492  001F34  D008               	goto	l5625
 11493  001F36  D7E9               	goto	l5617
 11494  001F38                     l5623:
 11495                           
 11496                           ; BSR set to: 0
 11497  001F38  0100               	movlb	0	; () banked
 11498  001F3A  90D8               	bcf	status,0,c
 11499  001F3C  33B3               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11500  001F3E  33B2               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11501  001F40  33B1               	rrcf	___ftadd@f2& (0+255),f,b
 11502  001F42  0100               	movlb	0	; () banked
 11503  001F44  2BB8               	incf	___ftadd@exp2& (0+255),f,b
 11504  001F46                     l5625:
 11505                           
 11506                           ; BSR set to: 0
 11507  001F46  0100               	movlb	0	; () banked
 11508  001F48  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11509  001F4A  0100               	movlb	0	; () banked
 11510  001F4C  19B9               	xorwf	___ftadd@exp1& (0+255),w,b
 11511  001F4E  A4D8               	btfss	status,2,c
 11512  001F50  D7F3               	goto	l5623
 11513  001F52                     l1100:
 11514                           
 11515                           ; BSR set to: 0
 11516  001F52  0100               	movlb	0	; () banked
 11517  001F54  AFB7               	btfss	___ftadd@sign& (0+255),7,b
 11518  001F56  D012               	goto	l1109
 11519                           
 11520                           ; BSR set to: 0
 11521  001F58  0EFF               	movlw	255
 11522  001F5A  0100               	movlb	0	; () banked
 11523  001F5C  1BAE               	xorwf	___ftadd@f1& (0+255),f,b
 11524  001F5E  0EFF               	movlw	255
 11525  001F60  0100               	movlb	0	; () banked
 11526  001F62  1BAF               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11527  001F64  0EFF               	movlw	255
 11528  001F66  0100               	movlb	0	; () banked
 11529  001F68  1BB0               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11530  001F6A  0E01               	movlw	1
 11531  001F6C  0100               	movlb	0	; () banked
 11532  001F6E  27AE               	addwf	___ftadd@f1& (0+255),f,b
 11533  001F70  0E00               	movlw	0
 11534  001F72  0100               	movlb	0	; () banked
 11535  001F74  23AF               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11536  001F76  0E00               	movlw	0
 11537  001F78  0100               	movlb	0	; () banked
 11538  001F7A  23B0               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11539  001F7C                     l1109:
 11540                           
 11541                           ; BSR set to: 0
 11542  001F7C  0100               	movlb	0	; () banked
 11543  001F7E  ADB7               	btfss	___ftadd@sign& (0+255),6,b
 11544  001F80  D012               	goto	l5631
 11545                           
 11546                           ; BSR set to: 0
 11547  001F82  0EFF               	movlw	255
 11548  001F84  0100               	movlb	0	; () banked
 11549  001F86  1BB1               	xorwf	___ftadd@f2& (0+255),f,b
 11550  001F88  0EFF               	movlw	255
 11551  001F8A  0100               	movlb	0	; () banked
 11552  001F8C  1BB2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11553  001F8E  0EFF               	movlw	255
 11554  001F90  0100               	movlb	0	; () banked
 11555  001F92  1BB3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11556  001F94  0E01               	movlw	1
 11557  001F96  0100               	movlb	0	; () banked
 11558  001F98  27B1               	addwf	___ftadd@f2& (0+255),f,b
 11559  001F9A  0E00               	movlw	0
 11560  001F9C  0100               	movlb	0	; () banked
 11561  001F9E  23B2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11562  001FA0  0E00               	movlw	0
 11563  001FA2  0100               	movlb	0	; () banked
 11564  001FA4  23B3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11565  001FA6                     l5631:
 11566                           
 11567                           ; BSR set to: 0
 11568  001FA6  0E00               	movlw	0
 11569  001FA8  0100               	movlb	0	; () banked
 11570  001FAA  6FB7               	movwf	___ftadd@sign& (0+255),b
 11571                           
 11572                           ; BSR set to: 0
 11573  001FAC  0100               	movlb	0	; () banked
 11574  001FAE  51AE               	movf	___ftadd@f1& (0+255),w,b
 11575  001FB0  0100               	movlb	0	; () banked
 11576  001FB2  27B1               	addwf	___ftadd@f2& (0+255),f,b
 11577  001FB4  0100               	movlb	0	; () banked
 11578  001FB6  51AF               	movf	(___ftadd@f1+1)& (0+255),w,b
 11579  001FB8  0100               	movlb	0	; () banked
 11580  001FBA  23B2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11581  001FBC  0100               	movlb	0	; () banked
 11582  001FBE  51B0               	movf	(___ftadd@f1+2)& (0+255),w,b
 11583  001FC0  0100               	movlb	0	; () banked
 11584  001FC2  23B3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11585                           
 11586                           ; BSR set to: 0
 11587  001FC4  0100               	movlb	0	; () banked
 11588  001FC6  AFB3               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11589  001FC8  D015               	goto	l5641
 11590                           
 11591                           ; BSR set to: 0
 11592  001FCA  0EFF               	movlw	255
 11593  001FCC  0100               	movlb	0	; () banked
 11594  001FCE  1BB1               	xorwf	___ftadd@f2& (0+255),f,b
 11595  001FD0  0EFF               	movlw	255
 11596  001FD2  0100               	movlb	0	; () banked
 11597  001FD4  1BB2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11598  001FD6  0EFF               	movlw	255
 11599  001FD8  0100               	movlb	0	; () banked
 11600  001FDA  1BB3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11601  001FDC  0E01               	movlw	1
 11602  001FDE  0100               	movlb	0	; () banked
 11603  001FE0  27B1               	addwf	___ftadd@f2& (0+255),f,b
 11604  001FE2  0E00               	movlw	0
 11605  001FE4  0100               	movlb	0	; () banked
 11606  001FE6  23B2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11607  001FE8  0E00               	movlw	0
 11608  001FEA  0100               	movlb	0	; () banked
 11609  001FEC  23B3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11610                           
 11611                           ; BSR set to: 0
 11612  001FEE  0E01               	movlw	1
 11613  001FF0  0100               	movlb	0	; () banked
 11614  001FF2  6FB7               	movwf	___ftadd@sign& (0+255),b
 11615  001FF4                     l5641:
 11616                           
 11617                           ; BSR set to: 0
 11618  001FF4  C0B1  F027         	movff	___ftadd@f2,___ftpack@arg
 11619  001FF8  C0B2  F028         	movff	___ftadd@f2+1,___ftpack@arg+1
 11620  001FFC  C0B3  F029         	movff	___ftadd@f2+2,___ftpack@arg+2
 11621  002000  C0B9  F02A         	movff	___ftadd@exp1,___ftpack@exp
 11622  002004  C0B7  F02B         	movff	___ftadd@sign,___ftpack@sign
 11623  002008  EC58  F018         	call	___ftpack	;wreg free
 11624  00200C  C027  F0AE         	movff	?___ftpack,?___ftadd
 11625  002010  C028  F0AF         	movff	?___ftpack+1,?___ftadd+1
 11626  002014  C029  F0B0         	movff	?___ftpack+2,?___ftadd+2
 11627  002018  0012               	return	
 11628  00201A                     __end_of___ftadd:
 11629                           	opt stack 0
 11630                           tblptru	equ	0xFF8
 11631                           tblptrh	equ	0xFF7
 11632                           tblptrl	equ	0xFF6
 11633                           tablat	equ	0xFF5
 11634                           prodh	equ	0xFF4
 11635                           prodl	equ	0xFF3
 11636                           intcon	equ	0xFF2
 11637                           intcon3	equ	0xFF0
 11638                           postinc0	equ	0xFEE
 11639                           wreg	equ	0xFE8
 11640                           postdec1	equ	0xFE5
 11641                           fsr1l	equ	0xFE1
 11642                           indf2	equ	0xFDF
 11643                           postinc2	equ	0xFDE
 11644                           postdec2	equ	0xFDD
 11645                           fsr2h	equ	0xFDA
 11646                           fsr2l	equ	0xFD9
 11647                           status	equ	0xFD8
 11648                           
 11649 ;; *************** function ___awtoft *****************
 11650 ;; Defined at:
 11651 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11652 ;; Parameters:    Size  Location     Type
 11653 ;;  c               2   46[COMRAM] int 
 11654 ;; Auto vars:     Size  Location     Type
 11655 ;;  sign            1   49[COMRAM] unsigned char 
 11656 ;; Return value:  Size  Location     Type
 11657 ;;                  3   46[COMRAM] float 
 11658 ;; Registers used:
 11659 ;;		wreg, status,2, status,0, cstack
 11660 ;; Tracked objects:
 11661 ;;		On entry : 0/0
 11662 ;;		On exit  : 0/0
 11663 ;;		Unchanged: 0/0
 11664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11665 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11668 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11669 ;;Total ram usage:        4 bytes
 11670 ;; Hardware stack levels used:    1
 11671 ;; Hardware stack levels required when called:    4
 11672 ;; This function calls:
 11673 ;;		___ftpack
 11674 ;; This function is called by:
 11675 ;;		_sortBattery
 11676 ;;		_angleToPulse
 11677 ;;		_testFrequency
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           	psect	text41
 11682  003830                     __ptext41:
 11683                           	opt stack 0
 11684  003830                     ___awtoft:
 11685                           	opt stack 23
 11686                           
 11687                           ;incstack = 0
 11688  003830  0E00               	movlw	0
 11689  003832  6E32               	movwf	___awtoft@sign,c
 11690  003834  AE30               	btfss	___awtoft@c+1,7,c
 11691  003836  D006               	goto	l6047
 11692  003838  6C2F               	negf	___awtoft@c,c
 11693  00383A  1E30               	comf	___awtoft@c+1,f,c
 11694  00383C  B0D8               	btfsc	status,0,c
 11695  00383E  2A30               	incf	___awtoft@c+1,f,c
 11696  003840  0E01               	movlw	1
 11697  003842  6E32               	movwf	___awtoft@sign,c
 11698  003844                     l6047:
 11699  003844  C02F  F027         	movff	___awtoft@c,___ftpack@arg
 11700  003848  C030  F028         	movff	___awtoft@c+1,___ftpack@arg+1
 11701  00384C  6A29               	clrf	___ftpack@arg+2,c
 11702  00384E  0E8E               	movlw	142
 11703  003850  6E2A               	movwf	___ftpack@exp,c
 11704  003852  C032  F02B         	movff	___awtoft@sign,___ftpack@sign
 11705  003856  EC58  F018         	call	___ftpack	;wreg free
 11706  00385A  C027  F02F         	movff	?___ftpack,?___awtoft
 11707  00385E  C028  F030         	movff	?___ftpack+1,?___awtoft+1
 11708  003862  C029  F031         	movff	?___ftpack+2,?___awtoft+2
 11709  003866  0012               	return	
 11710  003868                     __end_of___awtoft:
 11711                           	opt stack 0
 11712                           tblptru	equ	0xFF8
 11713                           tblptrh	equ	0xFF7
 11714                           tblptrl	equ	0xFF6
 11715                           tablat	equ	0xFF5
 11716                           prodh	equ	0xFF4
 11717                           prodl	equ	0xFF3
 11718                           intcon	equ	0xFF2
 11719                           intcon3	equ	0xFF0
 11720                           postinc0	equ	0xFEE
 11721                           wreg	equ	0xFE8
 11722                           postdec1	equ	0xFE5
 11723                           fsr1l	equ	0xFE1
 11724                           indf2	equ	0xFDF
 11725                           postinc2	equ	0xFDE
 11726                           postdec2	equ	0xFDD
 11727                           fsr2h	equ	0xFDA
 11728                           fsr2l	equ	0xFD9
 11729                           status	equ	0xFD8
 11730                           
 11731 ;; *************** function ___altoft *****************
 11732 ;; Defined at:
 11733 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11734 ;; Parameters:    Size  Location     Type
 11735 ;;  c               4   46[COMRAM] long 
 11736 ;; Auto vars:     Size  Location     Type
 11737 ;;  sign            1    5[BANK0 ] unsigned char 
 11738 ;;  exp             1    4[BANK0 ] unsigned char 
 11739 ;; Return value:  Size  Location     Type
 11740 ;;                  3   46[COMRAM] float 
 11741 ;; Registers used:
 11742 ;;		wreg, status,2, status,0, cstack
 11743 ;; Tracked objects:
 11744 ;;		On entry : 0/0
 11745 ;;		On exit  : 0/0
 11746 ;;		Unchanged: 0/0
 11747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11748 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11750 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11751 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11752 ;;Total ram usage:       10 bytes
 11753 ;; Hardware stack levels used:    1
 11754 ;; Hardware stack levels required when called:    4
 11755 ;; This function calls:
 11756 ;;		___ftpack
 11757 ;; This function is called by:
 11758 ;;		_sortBattery
 11759 ;;		_angleToPulse
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           	psect	text42
 11764  003294                     __ptext42:
 11765                           	opt stack 0
 11766  003294                     ___altoft:
 11767                           	opt stack 23
 11768                           
 11769                           ;incstack = 0
 11770  003294  0E00               	movlw	0
 11771  003296  0100               	movlb	0	; () banked
 11772  003298  6F85               	movwf	___altoft@sign& (0+255),b
 11773  00329A  0E8E               	movlw	142
 11774  00329C  0100               	movlb	0	; () banked
 11775  00329E  6F84               	movwf	___altoft@exp& (0+255),b
 11776                           
 11777                           ; BSR set to: 0
 11778  0032A0  AE32               	btfss	___altoft@c+3,7,c
 11779  0032A2  D013               	goto	l5979
 11780                           
 11781                           ; BSR set to: 0
 11782  0032A4  1E32               	comf	___altoft@c+3,f,c
 11783  0032A6  1E31               	comf	___altoft@c+2,f,c
 11784  0032A8  1E30               	comf	___altoft@c+1,f,c
 11785  0032AA  6C2F               	negf	___altoft@c,c
 11786  0032AC  0E00               	movlw	0
 11787  0032AE  2230               	addwfc	___altoft@c+1,f,c
 11788  0032B0  2231               	addwfc	___altoft@c+2,f,c
 11789  0032B2  2232               	addwfc	___altoft@c+3,f,c
 11790                           
 11791                           ; BSR set to: 0
 11792  0032B4  0E01               	movlw	1
 11793  0032B6  0100               	movlb	0	; () banked
 11794  0032B8  6F85               	movwf	___altoft@sign& (0+255),b
 11795                           
 11796                           ; BSR set to: 0
 11797  0032BA  D007               	goto	l5979
 11798  0032BC                     l5977:
 11799                           
 11800                           ; BSR set to: 0
 11801  0032BC  90D8               	bcf	status,0,c
 11802  0032BE  3232               	rrcf	___altoft@c+3,f,c
 11803  0032C0  3231               	rrcf	___altoft@c+2,f,c
 11804  0032C2  3230               	rrcf	___altoft@c+1,f,c
 11805  0032C4  322F               	rrcf	___altoft@c,f,c
 11806  0032C6  0100               	movlb	0	; () banked
 11807  0032C8  2B84               	incf	___altoft@exp& (0+255),f,b
 11808  0032CA                     l5979:
 11809                           
 11810                           ; BSR set to: 0
 11811  0032CA  0E00               	movlw	0
 11812  0032CC  142F               	andwf	___altoft@c,w,c
 11813  0032CE  0100               	movlb	0	; () banked
 11814  0032D0  6F80               	movwf	??___altoft& (0+255),b
 11815  0032D2  0E00               	movlw	0
 11816  0032D4  1430               	andwf	___altoft@c+1,w,c
 11817  0032D6  0100               	movlb	0	; () banked
 11818  0032D8  6F81               	movwf	(??___altoft+1)& (0+255),b
 11819  0032DA  0E00               	movlw	0
 11820  0032DC  1431               	andwf	___altoft@c+2,w,c
 11821  0032DE  0100               	movlb	0	; () banked
 11822  0032E0  6F82               	movwf	(??___altoft+2)& (0+255),b
 11823  0032E2  0EFF               	movlw	255
 11824  0032E4  1432               	andwf	___altoft@c+3,w,c
 11825  0032E6  0100               	movlb	0	; () banked
 11826  0032E8  6F83               	movwf	(??___altoft+3)& (0+255),b
 11827  0032EA  0100               	movlb	0	; () banked
 11828  0032EC  5180               	movf	??___altoft& (0+255),w,b
 11829  0032EE  0100               	movlb	0	; () banked
 11830  0032F0  1181               	iorwf	(??___altoft+1)& (0+255),w,b
 11831  0032F2  0100               	movlb	0	; () banked
 11832  0032F4  1182               	iorwf	(??___altoft+2)& (0+255),w,b
 11833  0032F6  0100               	movlb	0	; () banked
 11834  0032F8  1183               	iorwf	(??___altoft+3)& (0+255),w,b
 11835  0032FA  A4D8               	btfss	status,2,c
 11836  0032FC  D7DF               	goto	l5977
 11837                           
 11838                           ; BSR set to: 0
 11839                           
 11840                           ; BSR set to: 0
 11841  0032FE  C02F  F027         	movff	___altoft@c,___ftpack@arg
 11842  003302  C030  F028         	movff	___altoft@c+1,___ftpack@arg+1
 11843  003306  C031  F029         	movff	___altoft@c+2,___ftpack@arg+2
 11844  00330A  C084  F02A         	movff	___altoft@exp,___ftpack@exp
 11845  00330E  C085  F02B         	movff	___altoft@sign,___ftpack@sign
 11846  003312  EC58  F018         	call	___ftpack	;wreg free
 11847  003316  C027  F02F         	movff	?___ftpack,?___altoft
 11848  00331A  C028  F030         	movff	?___ftpack+1,?___altoft+1
 11849  00331E  C029  F031         	movff	?___ftpack+2,?___altoft+2
 11850  003322  0012               	return	
 11851  003324                     __end_of___altoft:
 11852                           	opt stack 0
 11853                           tblptru	equ	0xFF8
 11854                           tblptrh	equ	0xFF7
 11855                           tblptrl	equ	0xFF6
 11856                           tablat	equ	0xFF5
 11857                           prodh	equ	0xFF4
 11858                           prodl	equ	0xFF3
 11859                           intcon	equ	0xFF2
 11860                           intcon3	equ	0xFF0
 11861                           postinc0	equ	0xFEE
 11862                           wreg	equ	0xFE8
 11863                           postdec1	equ	0xFE5
 11864                           fsr1l	equ	0xFE1
 11865                           indf2	equ	0xFDF
 11866                           postinc2	equ	0xFDE
 11867                           postdec2	equ	0xFDD
 11868                           fsr2h	equ	0xFDA
 11869                           fsr2l	equ	0xFD9
 11870                           status	equ	0xFD8
 11871                           
 11872 ;; *************** function ___ftpack *****************
 11873 ;; Defined at:
 11874 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11875 ;; Parameters:    Size  Location     Type
 11876 ;;  arg             3   38[COMRAM] unsigned um
 11877 ;;  exp             1   41[COMRAM] unsigned char 
 11878 ;;  sign            1   42[COMRAM] unsigned char 
 11879 ;; Auto vars:     Size  Location     Type
 11880 ;;		None
 11881 ;; Return value:  Size  Location     Type
 11882 ;;                  3   38[COMRAM] float 
 11883 ;; Registers used:
 11884 ;;		wreg, status,2, status,0
 11885 ;; Tracked objects:
 11886 ;;		On entry : 0/0
 11887 ;;		On exit  : 0/0
 11888 ;;		Unchanged: 0/0
 11889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11890 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11892 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11893 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11894 ;;Total ram usage:        8 bytes
 11895 ;; Hardware stack levels used:    1
 11896 ;; Hardware stack levels required when called:    3
 11897 ;; This function calls:
 11898 ;;		Nothing
 11899 ;; This function is called by:
 11900 ;;		___altoft
 11901 ;;		___awtoft
 11902 ;;		___ftadd
 11903 ;;		___ftdiv
 11904 ;;		___ftmul
 11905 ;;		___lltoft
 11906 ;; This function uses a non-reentrant model
 11907 ;;
 11908                           
 11909                           	psect	text43
 11910  0030B0                     __ptext43:
 11911                           	opt stack 0
 11912  0030B0                     ___ftpack:
 11913                           	opt stack 23
 11914                           
 11915                           ;incstack = 0
 11916  0030B0  502A               	movf	___ftpack@exp,w,c
 11917  0030B2  B4D8               	btfsc	status,2,c
 11918  0030B4  D005               	goto	l5535
 11919  0030B6  5027               	movf	___ftpack@arg,w,c
 11920  0030B8  1028               	iorwf	___ftpack@arg+1,w,c
 11921  0030BA  1029               	iorwf	___ftpack@arg+2,w,c
 11922  0030BC  A4D8               	btfss	status,2,c
 11923  0030BE  D00C               	goto	l5541
 11924  0030C0                     l5535:
 11925  0030C0  0E00               	movlw	0
 11926  0030C2  6E27               	movwf	?___ftpack,c
 11927  0030C4  0E00               	movlw	0
 11928  0030C6  6E28               	movwf	?___ftpack+1,c
 11929  0030C8  0E00               	movlw	0
 11930  0030CA  6E29               	movwf	?___ftpack+2,c
 11931  0030CC  0012               	return	
 11932  0030CE                     l5539:
 11933  0030CE  2A2A               	incf	___ftpack@exp,f,c
 11934  0030D0  90D8               	bcf	status,0,c
 11935  0030D2  3229               	rrcf	___ftpack@arg+2,f,c
 11936  0030D4  3228               	rrcf	___ftpack@arg+1,f,c
 11937  0030D6  3227               	rrcf	___ftpack@arg,f,c
 11938  0030D8                     l5541:
 11939  0030D8  0E00               	movlw	0
 11940  0030DA  1427               	andwf	___ftpack@arg,w,c
 11941  0030DC  6E2C               	movwf	??___ftpack& (0+255),c
 11942  0030DE  0E00               	movlw	0
 11943  0030E0  1428               	andwf	___ftpack@arg+1,w,c
 11944  0030E2  6E2D               	movwf	(??___ftpack+1)& (0+255),c
 11945  0030E4  0EFE               	movlw	254
 11946  0030E6  1429               	andwf	___ftpack@arg+2,w,c
 11947  0030E8  6E2E               	movwf	(??___ftpack+2)& (0+255),c
 11948  0030EA  502C               	movf	??___ftpack,w,c
 11949  0030EC  102D               	iorwf	??___ftpack+1,w,c
 11950  0030EE  102E               	iorwf	??___ftpack+2,w,c
 11951  0030F0  B4D8               	btfsc	status,2,c
 11952  0030F2  D00C               	goto	l5547
 11953  0030F4  D7EC               	goto	l5539
 11954  0030F6                     l5543:
 11955  0030F6  2A2A               	incf	___ftpack@exp,f,c
 11956  0030F8  0E01               	movlw	1
 11957  0030FA  2627               	addwf	___ftpack@arg,f,c
 11958  0030FC  0E00               	movlw	0
 11959  0030FE  2228               	addwfc	___ftpack@arg+1,f,c
 11960  003100  0E00               	movlw	0
 11961  003102  2229               	addwfc	___ftpack@arg+2,f,c
 11962  003104  90D8               	bcf	status,0,c
 11963  003106  3229               	rrcf	___ftpack@arg+2,f,c
 11964  003108  3228               	rrcf	___ftpack@arg+1,f,c
 11965  00310A  3227               	rrcf	___ftpack@arg,f,c
 11966  00310C                     l5547:
 11967  00310C  0E00               	movlw	0
 11968  00310E  1427               	andwf	___ftpack@arg,w,c
 11969  003110  6E2C               	movwf	??___ftpack& (0+255),c
 11970  003112  0E00               	movlw	0
 11971  003114  1428               	andwf	___ftpack@arg+1,w,c
 11972  003116  6E2D               	movwf	(??___ftpack+1)& (0+255),c
 11973  003118  0EFF               	movlw	255
 11974  00311A  1429               	andwf	___ftpack@arg+2,w,c
 11975  00311C  6E2E               	movwf	(??___ftpack+2)& (0+255),c
 11976  00311E  502C               	movf	??___ftpack,w,c
 11977  003120  102D               	iorwf	??___ftpack+1,w,c
 11978  003122  102E               	iorwf	??___ftpack+2,w,c
 11979  003124  B4D8               	btfsc	status,2,c
 11980  003126  D006               	goto	l5551
 11981  003128  D7E6               	goto	l5543
 11982  00312A                     l5549:
 11983  00312A  062A               	decf	___ftpack@exp,f,c
 11984  00312C  90D8               	bcf	status,0,c
 11985  00312E  3627               	rlcf	___ftpack@arg,f,c
 11986  003130  3628               	rlcf	___ftpack@arg+1,f,c
 11987  003132  3629               	rlcf	___ftpack@arg+2,f,c
 11988  003134                     l5551:
 11989  003134  BE28               	btfsc	___ftpack@arg+1,7,c
 11990  003136  D003               	goto	l1062
 11991  003138  0E02               	movlw	2
 11992  00313A  602A               	cpfslt	___ftpack@exp,c
 11993  00313C  D7F6               	goto	l5549
 11994  00313E                     l1062:
 11995  00313E  A02A               	btfss	___ftpack@exp,0,c
 11996  003140  9E28               	bcf	___ftpack@arg+1,7,c
 11997  003142  90D8               	bcf	status,0,c
 11998  003144  322A               	rrcf	___ftpack@exp,f,c
 11999  003146  502A               	movf	___ftpack@exp,w,c
 12000  003148  1229               	iorwf	___ftpack@arg+2,f,c
 12001  00314A  502B               	movf	___ftpack@sign,w,c
 12002  00314C  A4D8               	btfss	status,2,c
 12003  00314E  8E29               	bsf	___ftpack@arg+2,7,c
 12004  003150  C027  F027         	movff	___ftpack@arg,?___ftpack
 12005  003154  C028  F028         	movff	___ftpack@arg+1,?___ftpack+1
 12006  003158  C029  F029         	movff	___ftpack@arg+2,?___ftpack+2
 12007  00315C  0012               	return	
 12008  00315E                     __end_of___ftpack:
 12009                           	opt stack 0
 12010                           tblptru	equ	0xFF8
 12011                           tblptrh	equ	0xFF7
 12012                           tblptrl	equ	0xFF6
 12013                           tablat	equ	0xFF5
 12014                           prodh	equ	0xFF4
 12015                           prodl	equ	0xFF3
 12016                           intcon	equ	0xFF2
 12017                           intcon3	equ	0xFF0
 12018                           postinc0	equ	0xFEE
 12019                           wreg	equ	0xFE8
 12020                           postdec1	equ	0xFE5
 12021                           fsr1l	equ	0xFE1
 12022                           indf2	equ	0xFDF
 12023                           postinc2	equ	0xFDE
 12024                           postdec2	equ	0xFDD
 12025                           fsr2h	equ	0xFDA
 12026                           fsr2l	equ	0xFD9
 12027                           status	equ	0xFD8
 12028                           
 12029 ;; *************** function _initTimer *****************
 12030 ;; Defined at:
 12031 ;;		line 52 in file "timer.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;  timer           2   38[COMRAM] int 
 12034 ;; Auto vars:     Size  Location     Type
 12035 ;;		None
 12036 ;; Return value:  Size  Location     Type
 12037 ;;                  1    wreg      void 
 12038 ;; Registers used:
 12039 ;;		wreg, status,2, status,0
 12040 ;; Tracked objects:
 12041 ;;		On entry : 0/0
 12042 ;;		On exit  : 0/0
 12043 ;;		Unchanged: 0/0
 12044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12045 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12047 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12048 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12049 ;;Total ram usage:        4 bytes
 12050 ;; Hardware stack levels used:    1
 12051 ;; Hardware stack levels required when called:    3
 12052 ;; This function calls:
 12053 ;;		Nothing
 12054 ;; This function is called by:
 12055 ;;		_main
 12056 ;;		_initServo
 12057 ;;		_testFrequency
 12058 ;; This function uses a non-reentrant model
 12059 ;;
 12060                           
 12061                           	psect	text44
 12062  003728                     __ptext44:
 12063                           	opt stack 0
 12064  003728                     _initTimer:
 12065                           	opt stack 27
 12066                           
 12067                           ;timer.c: 53: switch(timer){
 12068                           
 12069                           ;incstack = 0
 12070  003728  D00F               	goto	l6567
 12071  00372A                     l6549:
 12072                           
 12073                           ;timer.c: 55: T0CON = 0;
 12074  00372A  0E00               	movlw	0
 12075  00372C  6ED5               	movwf	4053,c	;volatile
 12076                           
 12077                           ;timer.c: 56: T0CON |= 1<<3;
 12078  00372E  86D5               	bsf	4053,3,c	;volatile
 12079                           
 12080                           ;timer.c: 58: TMR0IE = 1;
 12081  003730  8AF2               	bsf	intcon,5,c	;volatile
 12082                           
 12083                           ;timer.c: 59: break;
 12084  003732  D01C               	goto	l419
 12085  003734                     l6555:
 12086                           
 12087                           ;timer.c: 61: T1CON = 0;
 12088  003734  0E00               	movlw	0
 12089  003736  6ECD               	movwf	4045,c	;volatile
 12090                           
 12091                           ;timer.c: 63: T1CON |= 0b11<<4;
 12092  003738  0E30               	movlw	48
 12093  00373A  12CD               	iorwf	4045,f,c	;volatile
 12094                           
 12095                           ;timer.c: 64: TMR1IE = 1;
 12096  00373C  809D               	bsf	3997,0,c	;volatile
 12097                           
 12098                           ;timer.c: 65: break;
 12099  00373E  D016               	goto	l419
 12100  003740                     l6561:
 12101                           
 12102                           ;timer.c: 67: T3CON = 0;
 12103  003740  0E00               	movlw	0
 12104  003742  6EB1               	movwf	4017,c	;volatile
 12105                           
 12106                           ;timer.c: 68: TMR3IE = 1;
 12107  003744  82A0               	bsf	4000,1,c	;volatile
 12108                           
 12109                           ;timer.c: 70: }
 12110                           
 12111                           ;timer.c: 69: break;
 12112  003746  D012               	goto	l419
 12113  003748                     l6567:
 12114  003748  C027  F029         	movff	initTimer@timer,??_initTimer
 12115  00374C  C028  F02A         	movff	initTimer@timer+1,??_initTimer+1
 12116                           
 12117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12118                           ; Switch size 1, requested type "space"
 12119                           ; Number of cases is 1, Range of values is 0 to 0
 12120                           ; switch strategies available:
 12121                           ; Name         Instructions Cycles
 12122                           ; simple_byte            4     3 (average)
 12123                           ;	Chosen strategy is simple_byte
 12124  003750  502A               	movf	??_initTimer+1,w,c
 12125  003752  0A00               	xorlw	0	; case 0
 12126  003754  A4D8               	btfss	status,2,c
 12127  003756  D00A               	goto	l419
 12128                           
 12129                           ; Switch size 1, requested type "space"
 12130                           ; Number of cases is 3, Range of values is 0 to 3
 12131                           ; switch strategies available:
 12132                           ; Name         Instructions Cycles
 12133                           ; simple_byte           10     6 (average)
 12134                           ;	Chosen strategy is simple_byte
 12135  003758  5029               	movf	??_initTimer,w,c
 12136  00375A  0A00               	xorlw	0	; case 0
 12137  00375C  B4D8               	btfsc	status,2,c
 12138  00375E  D7E5               	goto	l6549
 12139  003760  0A01               	xorlw	1	; case 1
 12140  003762  B4D8               	btfsc	status,2,c
 12141  003764  D7E7               	goto	l6555
 12142  003766  0A02               	xorlw	2	; case 3
 12143  003768  B4D8               	btfsc	status,2,c
 12144  00376A  D7EA               	goto	l6561
 12145  00376C                     l419:
 12146                           
 12147                           ;timer.c: 71: PEIE = 1;
 12148  00376C  8CF2               	bsf	intcon,6,c	;volatile
 12149                           
 12150                           ;timer.c: 72: (INTCONbits.GIE = 1);
 12151  00376E  8EF2               	bsf	intcon,7,c	;volatile
 12152  003770  0012               	return		;funcret
 12153  003772                     __end_of_initTimer:
 12154                           	opt stack 0
 12155                           tblptru	equ	0xFF8
 12156                           tblptrh	equ	0xFF7
 12157                           tblptrl	equ	0xFF6
 12158                           tablat	equ	0xFF5
 12159                           prodh	equ	0xFF4
 12160                           prodl	equ	0xFF3
 12161                           intcon	equ	0xFF2
 12162                           intcon3	equ	0xFF0
 12163                           postinc0	equ	0xFEE
 12164                           wreg	equ	0xFE8
 12165                           postdec1	equ	0xFE5
 12166                           fsr1l	equ	0xFE1
 12167                           indf2	equ	0xFDF
 12168                           postinc2	equ	0xFDE
 12169                           postdec2	equ	0xFDD
 12170                           fsr2h	equ	0xFDA
 12171                           fsr2l	equ	0xFD9
 12172                           status	equ	0xFD8
 12173                           
 12174 ;; *************** function _initLCD *****************
 12175 ;; Defined at:
 12176 ;;		line 15 in file "lcd.c"
 12177 ;; Parameters:    Size  Location     Type
 12178 ;;		None
 12179 ;; Auto vars:     Size  Location     Type
 12180 ;;		None
 12181 ;; Return value:  Size  Location     Type
 12182 ;;                  1    wreg      void 
 12183 ;; Registers used:
 12184 ;;		wreg, status,2, status,0, cstack
 12185 ;; Tracked objects:
 12186 ;;		On entry : 0/0
 12187 ;;		On exit  : 0/0
 12188 ;;		Unchanged: 0/0
 12189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12193 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12194 ;;Total ram usage:        1 bytes
 12195 ;; Hardware stack levels used:    1
 12196 ;; Hardware stack levels required when called:    5
 12197 ;; This function calls:
 12198 ;;		_lcdInst
 12199 ;; This function is called by:
 12200 ;;		_main
 12201 ;; This function uses a non-reentrant model
 12202 ;;
 12203                           
 12204                           	psect	text45
 12205  003772                     __ptext45:
 12206                           	opt stack 0
 12207  003772                     _initLCD:
 12208                           	opt stack 25
 12209                           
 12210                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 12211                           
 12212                           ;incstack = 0
 12213  003772  0E31               	movlw	49
 12214  003774  6E2B               	movwf	??_initLCD& (0+255),c
 12215  003776  0EB2               	movlw	178
 12216  003778                     u7747:
 12217  003778  2EE8               	decfsz	wreg,f,c
 12218  00377A  D7FE               	bra	u7747
 12219  00377C  2E2B               	decfsz	??_initLCD& (0+255),f,c
 12220  00377E  D7FC               	bra	u7747
 12221  003780  D000               	nop2	
 12222                           
 12223                           ;lcd.c: 18: lcdInst(0b00110011);
 12224  003782  0E33               	movlw	51
 12225  003784  EC12  F01D         	call	_lcdInst
 12226                           
 12227                           ;lcd.c: 19: lcdInst(0b00110010);
 12228  003788  0E32               	movlw	50
 12229  00378A  EC12  F01D         	call	_lcdInst
 12230                           
 12231                           ;lcd.c: 20: lcdInst(0b00101000);
 12232  00378E  0E28               	movlw	40
 12233  003790  EC12  F01D         	call	_lcdInst
 12234                           
 12235                           ;lcd.c: 21: lcdInst(0b00001111);
 12236  003794  0E0F               	movlw	15
 12237  003796  EC12  F01D         	call	_lcdInst
 12238                           
 12239                           ;lcd.c: 22: lcdInst(0b00000110);
 12240  00379A  0E06               	movlw	6
 12241  00379C  EC12  F01D         	call	_lcdInst
 12242                           
 12243                           ;lcd.c: 23: lcdInst(0b00000001);
 12244  0037A0  0E01               	movlw	1
 12245  0037A2  EC12  F01D         	call	_lcdInst
 12246                           
 12247                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 12248  0037A6  0E31               	movlw	49
 12249  0037A8  6E2B               	movwf	??_initLCD& (0+255),c
 12250  0037AA  0EB2               	movlw	178
 12251  0037AC                     u7757:
 12252  0037AC  2EE8               	decfsz	wreg,f,c
 12253  0037AE  D7FE               	bra	u7757
 12254  0037B0  2E2B               	decfsz	??_initLCD& (0+255),f,c
 12255  0037B2  D7FC               	bra	u7757
 12256  0037B4  D000               	nop2	
 12257  0037B6  0012               	return		;funcret
 12258  0037B8                     __end_of_initLCD:
 12259                           	opt stack 0
 12260                           tblptru	equ	0xFF8
 12261                           tblptrh	equ	0xFF7
 12262                           tblptrl	equ	0xFF6
 12263                           tablat	equ	0xFF5
 12264                           prodh	equ	0xFF4
 12265                           prodl	equ	0xFF3
 12266                           intcon	equ	0xFF2
 12267                           intcon3	equ	0xFF0
 12268                           postinc0	equ	0xFEE
 12269                           wreg	equ	0xFE8
 12270                           postdec1	equ	0xFE5
 12271                           fsr1l	equ	0xFE1
 12272                           indf2	equ	0xFDF
 12273                           postinc2	equ	0xFDE
 12274                           postdec2	equ	0xFDD
 12275                           fsr2h	equ	0xFDA
 12276                           fsr2l	equ	0xFD9
 12277                           status	equ	0xFD8
 12278                           
 12279 ;; *************** function _lcdInst *****************
 12280 ;; Defined at:
 12281 ;;		line 27 in file "lcd.c"
 12282 ;; Parameters:    Size  Location     Type
 12283 ;;  data            1    wreg     unsigned char 
 12284 ;; Auto vars:     Size  Location     Type
 12285 ;;  data            1   41[COMRAM] unsigned char 
 12286 ;; Return value:  Size  Location     Type
 12287 ;;                  1    wreg      void 
 12288 ;; Registers used:
 12289 ;;		wreg, status,2, status,0, cstack
 12290 ;; Tracked objects:
 12291 ;;		On entry : 0/0
 12292 ;;		On exit  : 0/0
 12293 ;;		Unchanged: 0/0
 12294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12297 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12298 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12299 ;;Total ram usage:        2 bytes
 12300 ;; Hardware stack levels used:    1
 12301 ;; Hardware stack levels required when called:    4
 12302 ;; This function calls:
 12303 ;;		_lcdNibble
 12304 ;; This function is called by:
 12305 ;;		_initLCD
 12306 ;;		_lcdHome
 12307 ;;		_lcdClear
 12308 ;;		_lcdNewline
 12309 ;; This function uses a non-reentrant model
 12310 ;;
 12311                           
 12312                           	psect	text46
 12313  003A24                     __ptext46:
 12314                           	opt stack 0
 12315  003A24                     _lcdInst:
 12316                           	opt stack 22
 12317                           
 12318                           ;incstack = 0
 12319                           ;lcdInst@data stored from wreg
 12320  003A24  6E2A               	movwf	lcdInst@data,c
 12321                           
 12322                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 12323  003A26  948C               	bcf	3980,2,c	;volatile
 12324                           
 12325                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 12326  003A28  0E74               	movlw	116
 12327  003A2A                     u7767:
 12328  003A2A  2EE8               	decfsz	wreg,f,c
 12329  003A2C  D7FE               	bra	u7767
 12330  003A2E  D000               	nop2	
 12331                           
 12332                           ;lcd.c: 30: lcdNibble(data);
 12333  003A30  502A               	movf	lcdInst@data,w,c
 12334  003A32  ECEF  F01A         	call	_lcdNibble
 12335                           
 12336                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 12337  003A36  0E04               	movlw	4
 12338  003A38  6E29               	movwf	??_lcdInst& (0+255),c
 12339  003A3A  0E3E               	movlw	62
 12340  003A3C                     u7777:
 12341  003A3C  2EE8               	decfsz	wreg,f,c
 12342  003A3E  D7FE               	bra	u7777
 12343  003A40  2E29               	decfsz	??_lcdInst& (0+255),f,c
 12344  003A42  D7FC               	bra	u7777
 12345  003A44  0012               	return		;funcret
 12346  003A46                     __end_of_lcdInst:
 12347                           	opt stack 0
 12348                           tblptru	equ	0xFF8
 12349                           tblptrh	equ	0xFF7
 12350                           tblptrl	equ	0xFF6
 12351                           tablat	equ	0xFF5
 12352                           prodh	equ	0xFF4
 12353                           prodl	equ	0xFF3
 12354                           intcon	equ	0xFF2
 12355                           intcon3	equ	0xFF0
 12356                           postinc0	equ	0xFEE
 12357                           wreg	equ	0xFE8
 12358                           postdec1	equ	0xFE5
 12359                           fsr1l	equ	0xFE1
 12360                           indf2	equ	0xFDF
 12361                           postinc2	equ	0xFDE
 12362                           postdec2	equ	0xFDD
 12363                           fsr2h	equ	0xFDA
 12364                           fsr2l	equ	0xFD9
 12365                           status	equ	0xFD8
 12366                           
 12367 ;; *************** function _lcdNibble *****************
 12368 ;; Defined at:
 12369 ;;		line 46 in file "lcd.c"
 12370 ;; Parameters:    Size  Location     Type
 12371 ;;  data            1    wreg     unsigned char 
 12372 ;; Auto vars:     Size  Location     Type
 12373 ;;  data            1   39[COMRAM] unsigned char 
 12374 ;;  temp            1   38[COMRAM] unsigned char 
 12375 ;; Return value:  Size  Location     Type
 12376 ;;                  1    wreg      void 
 12377 ;; Registers used:
 12378 ;;		wreg, status,2, status,0
 12379 ;; Tracked objects:
 12380 ;;		On entry : 0/0
 12381 ;;		On exit  : 0/0
 12382 ;;		Unchanged: 0/0
 12383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12385 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12387 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12388 ;;Total ram usage:        2 bytes
 12389 ;; Hardware stack levels used:    1
 12390 ;; Hardware stack levels required when called:    3
 12391 ;; This function calls:
 12392 ;;		Nothing
 12393 ;; This function is called by:
 12394 ;;		_lcdInst
 12395 ;;		_putch
 12396 ;; This function uses a non-reentrant model
 12397 ;;
 12398                           
 12399                           	psect	text47
 12400  0035DE                     __ptext47:
 12401                           	opt stack 0
 12402  0035DE                     _lcdNibble:
 12403                           	opt stack 24
 12404                           
 12405                           ;incstack = 0
 12406                           ;lcdNibble@data stored from wreg
 12407  0035DE  6E28               	movwf	lcdNibble@data,c
 12408                           
 12409                           ;lcd.c: 48: char temp = data & 0xF0;
 12410  0035E0  5028               	movf	lcdNibble@data,w,c
 12411  0035E2  0BF0               	andlw	240
 12412  0035E4  6E27               	movwf	lcdNibble@temp,c
 12413                           
 12414                           ;lcd.c: 49: LATD = LATD & 0x0F;
 12415  0035E6  508C               	movf	3980,w,c	;volatile
 12416  0035E8  0B0F               	andlw	15
 12417  0035EA  6E8C               	movwf	3980,c	;volatile
 12418                           
 12419                           ;lcd.c: 50: LATD = temp | LATD;
 12420  0035EC  5027               	movf	lcdNibble@temp,w,c
 12421  0035EE  108C               	iorwf	3980,w,c	;volatile
 12422  0035F0  6E8C               	movwf	3980,c	;volatile
 12423                           
 12424                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 12425  0035F2  968C               	bcf	3980,3,c	;volatile
 12426                           
 12427                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12428  0035F4  0ED6               	movlw	214
 12429  0035F6                     u7787:
 12430  0035F6  D000               	nop2	
 12431  0035F8  D000               	nop2	
 12432  0035FA  2EE8               	decfsz	wreg,f,c
 12433  0035FC  D7FC               	bra	u7787
 12434  0035FE  D000               	nop2	
 12435                           
 12436                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 12437  003600  868C               	bsf	3980,3,c	;volatile
 12438                           
 12439                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12440  003602  0ED6               	movlw	214
 12441  003604                     u7797:
 12442  003604  D000               	nop2	
 12443  003606  D000               	nop2	
 12444  003608  2EE8               	decfsz	wreg,f,c
 12445  00360A  D7FC               	bra	u7797
 12446  00360C  D000               	nop2	
 12447                           
 12448                           ;lcd.c: 58: data = data << 4;
 12449  00360E  3828               	swapf	lcdNibble@data,w,c
 12450  003610  0BF0               	andlw	240
 12451  003612  6E28               	movwf	lcdNibble@data,c
 12452                           
 12453                           ;lcd.c: 60: temp = data & 0xF0;
 12454  003614  5028               	movf	lcdNibble@data,w,c
 12455  003616  0BF0               	andlw	240
 12456  003618  6E27               	movwf	lcdNibble@temp,c
 12457                           
 12458                           ;lcd.c: 61: LATD = LATD & 0x0F;
 12459  00361A  508C               	movf	3980,w,c	;volatile
 12460  00361C  0B0F               	andlw	15
 12461  00361E  6E8C               	movwf	3980,c	;volatile
 12462                           
 12463                           ;lcd.c: 62: LATD = temp | LATD;
 12464  003620  5027               	movf	lcdNibble@temp,w,c
 12465  003622  108C               	iorwf	3980,w,c	;volatile
 12466  003624  6E8C               	movwf	3980,c	;volatile
 12467                           
 12468                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 12469  003626  968C               	bcf	3980,3,c	;volatile
 12470                           
 12471                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12472  003628  0ED6               	movlw	214
 12473  00362A                     u7807:
 12474  00362A  D000               	nop2	
 12475  00362C  D000               	nop2	
 12476  00362E  2EE8               	decfsz	wreg,f,c
 12477  003630  D7FC               	bra	u7807
 12478  003632  D000               	nop2	
 12479                           
 12480                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 12481  003634  868C               	bsf	3980,3,c	;volatile
 12482                           
 12483                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12484  003636  0ED6               	movlw	214
 12485  003638                     u7817:
 12486  003638  D000               	nop2	
 12487  00363A  D000               	nop2	
 12488  00363C  2EE8               	decfsz	wreg,f,c
 12489  00363E  D7FC               	bra	u7817
 12490  003640  D000               	nop2	
 12491  003642  0012               	return		;funcret
 12492  003644                     __end_of_lcdNibble:
 12493                           	opt stack 0
 12494                           tblptru	equ	0xFF8
 12495                           tblptrh	equ	0xFF7
 12496                           tblptrl	equ	0xFF6
 12497                           tablat	equ	0xFF5
 12498                           prodh	equ	0xFF4
 12499                           prodl	equ	0xFF3
 12500                           intcon	equ	0xFF2
 12501                           intcon3	equ	0xFF0
 12502                           postinc0	equ	0xFEE
 12503                           wreg	equ	0xFE8
 12504                           postdec1	equ	0xFE5
 12505                           fsr1l	equ	0xFE1
 12506                           indf2	equ	0xFDF
 12507                           postinc2	equ	0xFDE
 12508                           postdec2	equ	0xFDD
 12509                           fsr2h	equ	0xFDA
 12510                           fsr2l	equ	0xFD9
 12511                           status	equ	0xFD8
 12512                           
 12513 ;; *************** function ___almod *****************
 12514 ;; Defined at:
 12515 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 12516 ;; Parameters:    Size  Location     Type
 12517 ;;  dividend        4    6[BANK0 ] long 
 12518 ;;  divisor         4   10[BANK0 ] long 
 12519 ;; Auto vars:     Size  Location     Type
 12520 ;;  sign            1   47[COMRAM] unsigned char 
 12521 ;;  counter         1   46[COMRAM] unsigned char 
 12522 ;; Return value:  Size  Location     Type
 12523 ;;                  4    6[BANK0 ] long 
 12524 ;; Registers used:
 12525 ;;		wreg, status,2, status,0
 12526 ;; Tracked objects:
 12527 ;;		On entry : 0/0
 12528 ;;		On exit  : 0/0
 12529 ;;		Unchanged: 0/0
 12530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12531 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12534 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12535 ;;Total ram usage:       10 bytes
 12536 ;; Hardware stack levels used:    1
 12537 ;; Hardware stack levels required when called:    3
 12538 ;; This function calls:
 12539 ;;		Nothing
 12540 ;; This function is called by:
 12541 ;;		_main
 12542 ;; This function uses a non-reentrant model
 12543 ;;
 12544                           
 12545                           	psect	text48
 12546  002BC4                     __ptext48:
 12547                           	opt stack 0
 12548  002BC4                     ___almod:
 12549                           	opt stack 27
 12550                           
 12551                           ;incstack = 0
 12552  002BC4  0E00               	movlw	0
 12553  002BC6  6E30               	movwf	___almod@sign,c
 12554  002BC8  0100               	movlb	0	; () banked
 12555  002BCA  AF89               	btfss	(___almod@dividend+3)& (0+255),7,b
 12556  002BCC  D00B               	goto	l6999
 12557                           
 12558                           ; BSR set to: 0
 12559  002BCE  0100               	movlb	0	; () banked
 12560  002BD0  1F89               	comf	(___almod@dividend+3)& (0+255),f,b
 12561  002BD2  1F88               	comf	(___almod@dividend+2)& (0+255),f,b
 12562  002BD4  1F87               	comf	(___almod@dividend+1)& (0+255),f,b
 12563  002BD6  6D86               	negf	___almod@dividend& (0+255),b
 12564  002BD8  0E00               	movlw	0
 12565  002BDA  2387               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12566  002BDC  2388               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12567  002BDE  2389               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12568                           
 12569                           ; BSR set to: 0
 12570  002BE0  0E01               	movlw	1
 12571  002BE2  6E30               	movwf	___almod@sign,c
 12572  002BE4                     l6999:
 12573                           
 12574                           ; BSR set to: 0
 12575  002BE4  0100               	movlb	0	; () banked
 12576  002BE6  AF8D               	btfss	(___almod@divisor+3)& (0+255),7,b
 12577  002BE8  D009               	goto	l7003
 12578                           
 12579                           ; BSR set to: 0
 12580  002BEA  0100               	movlb	0	; () banked
 12581  002BEC  1F8D               	comf	(___almod@divisor+3)& (0+255),f,b
 12582  002BEE  1F8C               	comf	(___almod@divisor+2)& (0+255),f,b
 12583  002BF0  1F8B               	comf	(___almod@divisor+1)& (0+255),f,b
 12584  002BF2  6D8A               	negf	___almod@divisor& (0+255),b
 12585  002BF4  0E00               	movlw	0
 12586  002BF6  238B               	addwfc	(___almod@divisor+1)& (0+255),f,b
 12587  002BF8  238C               	addwfc	(___almod@divisor+2)& (0+255),f,b
 12588  002BFA  238D               	addwfc	(___almod@divisor+3)& (0+255),f,b
 12589  002BFC                     l7003:
 12590                           
 12591                           ; BSR set to: 0
 12592  002BFC  0100               	movlb	0	; () banked
 12593  002BFE  518A               	movf	___almod@divisor& (0+255),w,b
 12594  002C00  0100               	movlb	0	; () banked
 12595  002C02  118B               	iorwf	(___almod@divisor+1)& (0+255),w,b
 12596  002C04  0100               	movlb	0	; () banked
 12597  002C06  118C               	iorwf	(___almod@divisor+2)& (0+255),w,b
 12598  002C08  0100               	movlb	0	; () banked
 12599  002C0A  118D               	iorwf	(___almod@divisor+3)& (0+255),w,b
 12600  002C0C  B4D8               	btfsc	status,2,c
 12601  002C0E  D037               	goto	l7019
 12602                           
 12603                           ; BSR set to: 0
 12604  002C10  0E01               	movlw	1
 12605  002C12  6E2F               	movwf	___almod@counter,c
 12606  002C14  D007               	goto	l7009
 12607  002C16                     l7007:
 12608                           
 12609                           ; BSR set to: 0
 12610  002C16  0100               	movlb	0	; () banked
 12611  002C18  90D8               	bcf	status,0,c
 12612  002C1A  378A               	rlcf	___almod@divisor& (0+255),f,b
 12613  002C1C  378B               	rlcf	(___almod@divisor+1)& (0+255),f,b
 12614  002C1E  378C               	rlcf	(___almod@divisor+2)& (0+255),f,b
 12615  002C20  378D               	rlcf	(___almod@divisor+3)& (0+255),f,b
 12616  002C22  2A2F               	incf	___almod@counter,f,c
 12617  002C24                     l7009:
 12618                           
 12619                           ; BSR set to: 0
 12620  002C24  0100               	movlb	0	; () banked
 12621  002C26  AF8D               	btfss	(___almod@divisor+3)& (0+255),7,b
 12622  002C28  D7F6               	goto	l7007
 12623  002C2A                     l7011:
 12624                           
 12625                           ; BSR set to: 0
 12626  002C2A  0100               	movlb	0	; () banked
 12627  002C2C  518A               	movf	___almod@divisor& (0+255),w,b
 12628  002C2E  0100               	movlb	0	; () banked
 12629  002C30  5D86               	subwf	___almod@dividend& (0+255),w,b
 12630  002C32  0100               	movlb	0	; () banked
 12631  002C34  518B               	movf	(___almod@divisor+1)& (0+255),w,b
 12632  002C36  0100               	movlb	0	; () banked
 12633  002C38  5987               	subwfb	(___almod@dividend+1)& (0+255),w,b
 12634  002C3A  0100               	movlb	0	; () banked
 12635  002C3C  518C               	movf	(___almod@divisor+2)& (0+255),w,b
 12636  002C3E  0100               	movlb	0	; () banked
 12637  002C40  5988               	subwfb	(___almod@dividend+2)& (0+255),w,b
 12638  002C42  0100               	movlb	0	; () banked
 12639  002C44  518D               	movf	(___almod@divisor+3)& (0+255),w,b
 12640  002C46  0100               	movlb	0	; () banked
 12641  002C48  5989               	subwfb	(___almod@dividend+3)& (0+255),w,b
 12642  002C4A  A0D8               	btfss	status,0,c
 12643  002C4C  D010               	goto	l7015
 12644                           
 12645                           ; BSR set to: 0
 12646  002C4E  0100               	movlb	0	; () banked
 12647  002C50  518A               	movf	___almod@divisor& (0+255),w,b
 12648  002C52  0100               	movlb	0	; () banked
 12649  002C54  5F86               	subwf	___almod@dividend& (0+255),f,b
 12650  002C56  0100               	movlb	0	; () banked
 12651  002C58  518B               	movf	(___almod@divisor+1)& (0+255),w,b
 12652  002C5A  0100               	movlb	0	; () banked
 12653  002C5C  5B87               	subwfb	(___almod@dividend+1)& (0+255),f,b
 12654  002C5E  0100               	movlb	0	; () banked
 12655  002C60  518C               	movf	(___almod@divisor+2)& (0+255),w,b
 12656  002C62  0100               	movlb	0	; () banked
 12657  002C64  5B88               	subwfb	(___almod@dividend+2)& (0+255),f,b
 12658  002C66  0100               	movlb	0	; () banked
 12659  002C68  518D               	movf	(___almod@divisor+3)& (0+255),w,b
 12660  002C6A  0100               	movlb	0	; () banked
 12661  002C6C  5B89               	subwfb	(___almod@dividend+3)& (0+255),f,b
 12662  002C6E                     l7015:
 12663                           
 12664                           ; BSR set to: 0
 12665  002C6E  0100               	movlb	0	; () banked
 12666  002C70  90D8               	bcf	status,0,c
 12667  002C72  338D               	rrcf	(___almod@divisor+3)& (0+255),f,b
 12668  002C74  338C               	rrcf	(___almod@divisor+2)& (0+255),f,b
 12669  002C76  338B               	rrcf	(___almod@divisor+1)& (0+255),f,b
 12670  002C78  338A               	rrcf	___almod@divisor& (0+255),f,b
 12671                           
 12672                           ; BSR set to: 0
 12673  002C7A  2E2F               	decfsz	___almod@counter,f,c
 12674  002C7C  D7D6               	goto	l7011
 12675  002C7E                     l7019:
 12676                           
 12677                           ; BSR set to: 0
 12678  002C7E  5030               	movf	___almod@sign,w,c
 12679  002C80  B4D8               	btfsc	status,2,c
 12680  002C82  D009               	goto	l7023
 12681                           
 12682                           ; BSR set to: 0
 12683  002C84  0100               	movlb	0	; () banked
 12684  002C86  1F89               	comf	(___almod@dividend+3)& (0+255),f,b
 12685  002C88  1F88               	comf	(___almod@dividend+2)& (0+255),f,b
 12686  002C8A  1F87               	comf	(___almod@dividend+1)& (0+255),f,b
 12687  002C8C  6D86               	negf	___almod@dividend& (0+255),b
 12688  002C8E  0E00               	movlw	0
 12689  002C90  2387               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12690  002C92  2388               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12691  002C94  2389               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12692  002C96                     l7023:
 12693                           
 12694                           ; BSR set to: 0
 12695  002C96  C086  F086         	movff	___almod@dividend,?___almod
 12696  002C9A  C087  F087         	movff	___almod@dividend+1,?___almod+1
 12697  002C9E  C088  F088         	movff	___almod@dividend+2,?___almod+2
 12698  002CA2  C089  F089         	movff	___almod@dividend+3,?___almod+3
 12699  002CA6  0012               	return	
 12700  002CA8                     __end_of___almod:
 12701                           	opt stack 0
 12702                           tblptru	equ	0xFF8
 12703                           tblptrh	equ	0xFF7
 12704                           tblptrl	equ	0xFF6
 12705                           tablat	equ	0xFF5
 12706                           prodh	equ	0xFF4
 12707                           prodl	equ	0xFF3
 12708                           intcon	equ	0xFF2
 12709                           intcon3	equ	0xFF0
 12710                           postinc0	equ	0xFEE
 12711                           wreg	equ	0xFE8
 12712                           postdec1	equ	0xFE5
 12713                           fsr1l	equ	0xFE1
 12714                           indf2	equ	0xFDF
 12715                           postinc2	equ	0xFDE
 12716                           postdec2	equ	0xFDD
 12717                           fsr2h	equ	0xFDA
 12718                           fsr2l	equ	0xFD9
 12719                           status	equ	0xFD8
 12720                           
 12721 ;; *************** function ___aldiv *****************
 12722 ;; Defined at:
 12723 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 12724 ;; Parameters:    Size  Location     Type
 12725 ;;  dividend        4   38[COMRAM] long 
 12726 ;;  divisor         4   42[COMRAM] long 
 12727 ;; Auto vars:     Size  Location     Type
 12728 ;;  quotient        4    2[BANK0 ] long 
 12729 ;;  sign            1    1[BANK0 ] unsigned char 
 12730 ;;  counter         1    0[BANK0 ] unsigned char 
 12731 ;; Return value:  Size  Location     Type
 12732 ;;                  4   38[COMRAM] long 
 12733 ;; Registers used:
 12734 ;;		wreg, status,2, status,0
 12735 ;; Tracked objects:
 12736 ;;		On entry : 0/0
 12737 ;;		On exit  : 0/0
 12738 ;;		Unchanged: 0/0
 12739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12740 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12741 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12743 ;;      Totals:         8       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12744 ;;Total ram usage:       14 bytes
 12745 ;; Hardware stack levels used:    1
 12746 ;; Hardware stack levels required when called:    3
 12747 ;; This function calls:
 12748 ;;		Nothing
 12749 ;; This function is called by:
 12750 ;;		_main
 12751 ;; This function uses a non-reentrant model
 12752 ;;
 12753                           
 12754                           	psect	text49
 12755  002CA8                     __ptext49:
 12756                           	opt stack 0
 12757  002CA8                     ___aldiv:
 12758                           	opt stack 27
 12759                           
 12760                           ; BSR set to: 0
 12761                           ;incstack = 0
 12762  002CA8  0E00               	movlw	0
 12763  002CAA  0100               	movlb	0	; () banked
 12764  002CAC  6F81               	movwf	___aldiv@sign& (0+255),b
 12765                           
 12766                           ; BSR set to: 0
 12767  002CAE  AE2E               	btfss	___aldiv@divisor+3,7,c
 12768  002CB0  D00B               	goto	l6955
 12769                           
 12770                           ; BSR set to: 0
 12771  002CB2  1E2E               	comf	___aldiv@divisor+3,f,c
 12772  002CB4  1E2D               	comf	___aldiv@divisor+2,f,c
 12773  002CB6  1E2C               	comf	___aldiv@divisor+1,f,c
 12774  002CB8  6C2B               	negf	___aldiv@divisor,c
 12775  002CBA  0E00               	movlw	0
 12776  002CBC  222C               	addwfc	___aldiv@divisor+1,f,c
 12777  002CBE  222D               	addwfc	___aldiv@divisor+2,f,c
 12778  002CC0  222E               	addwfc	___aldiv@divisor+3,f,c
 12779                           
 12780                           ; BSR set to: 0
 12781  002CC2  0E01               	movlw	1
 12782  002CC4  0100               	movlb	0	; () banked
 12783  002CC6  6F81               	movwf	___aldiv@sign& (0+255),b
 12784  002CC8                     l6955:
 12785                           
 12786                           ; BSR set to: 0
 12787  002CC8  AE2A               	btfss	___aldiv@dividend+3,7,c
 12788  002CCA  D00B               	goto	l6961
 12789                           
 12790                           ; BSR set to: 0
 12791  002CCC  1E2A               	comf	___aldiv@dividend+3,f,c
 12792  002CCE  1E29               	comf	___aldiv@dividend+2,f,c
 12793  002CD0  1E28               	comf	___aldiv@dividend+1,f,c
 12794  002CD2  6C27               	negf	___aldiv@dividend,c
 12795  002CD4  0E00               	movlw	0
 12796  002CD6  2228               	addwfc	___aldiv@dividend+1,f,c
 12797  002CD8  2229               	addwfc	___aldiv@dividend+2,f,c
 12798  002CDA  222A               	addwfc	___aldiv@dividend+3,f,c
 12799                           
 12800                           ; BSR set to: 0
 12801  002CDC  0E01               	movlw	1
 12802  002CDE  0100               	movlb	0	; () banked
 12803  002CE0  1B81               	xorwf	___aldiv@sign& (0+255),f,b
 12804  002CE2                     l6961:
 12805                           
 12806                           ; BSR set to: 0
 12807  002CE2  0E00               	movlw	0
 12808  002CE4  0100               	movlb	0	; () banked
 12809  002CE6  6F82               	movwf	___aldiv@quotient& (0+255),b
 12810  002CE8  0E00               	movlw	0
 12811  002CEA  6F83               	movwf	(___aldiv@quotient+1)& (0+255),b
 12812  002CEC  0E00               	movlw	0
 12813  002CEE  6F84               	movwf	(___aldiv@quotient+2)& (0+255),b
 12814  002CF0  0E00               	movlw	0
 12815  002CF2  6F85               	movwf	(___aldiv@quotient+3)& (0+255),b
 12816                           
 12817                           ; BSR set to: 0
 12818  002CF4  502B               	movf	___aldiv@divisor,w,c
 12819  002CF6  102C               	iorwf	___aldiv@divisor+1,w,c
 12820  002CF8  102D               	iorwf	___aldiv@divisor+2,w,c
 12821  002CFA  102E               	iorwf	___aldiv@divisor+3,w,c
 12822  002CFC  B4D8               	btfsc	status,2,c
 12823  002CFE  D02F               	goto	l6983
 12824                           
 12825                           ; BSR set to: 0
 12826  002D00  0E01               	movlw	1
 12827  002D02  0100               	movlb	0	; () banked
 12828  002D04  6F80               	movwf	___aldiv@counter& (0+255),b
 12829  002D06  D007               	goto	l6969
 12830  002D08                     l6967:
 12831                           
 12832                           ; BSR set to: 0
 12833  002D08  90D8               	bcf	status,0,c
 12834  002D0A  362B               	rlcf	___aldiv@divisor,f,c
 12835  002D0C  362C               	rlcf	___aldiv@divisor+1,f,c
 12836  002D0E  362D               	rlcf	___aldiv@divisor+2,f,c
 12837  002D10  362E               	rlcf	___aldiv@divisor+3,f,c
 12838  002D12  0100               	movlb	0	; () banked
 12839  002D14  2B80               	incf	___aldiv@counter& (0+255),f,b
 12840  002D16                     l6969:
 12841                           
 12842                           ; BSR set to: 0
 12843  002D16  AE2E               	btfss	___aldiv@divisor+3,7,c
 12844  002D18  D7F7               	goto	l6967
 12845  002D1A                     l6971:
 12846                           
 12847                           ; BSR set to: 0
 12848  002D1A  0100               	movlb	0	; () banked
 12849  002D1C  90D8               	bcf	status,0,c
 12850  002D1E  3782               	rlcf	___aldiv@quotient& (0+255),f,b
 12851  002D20  3783               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 12852  002D22  3784               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 12853  002D24  3785               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 12854                           
 12855                           ; BSR set to: 0
 12856  002D26  502B               	movf	___aldiv@divisor,w,c
 12857  002D28  5C27               	subwf	___aldiv@dividend,w,c
 12858  002D2A  502C               	movf	___aldiv@divisor+1,w,c
 12859  002D2C  5828               	subwfb	___aldiv@dividend+1,w,c
 12860  002D2E  502D               	movf	___aldiv@divisor+2,w,c
 12861  002D30  5829               	subwfb	___aldiv@dividend+2,w,c
 12862  002D32  502E               	movf	___aldiv@divisor+3,w,c
 12863  002D34  582A               	subwfb	___aldiv@dividend+3,w,c
 12864  002D36  A0D8               	btfss	status,0,c
 12865  002D38  D00A               	goto	l6979
 12866                           
 12867                           ; BSR set to: 0
 12868  002D3A  502B               	movf	___aldiv@divisor,w,c
 12869  002D3C  5E27               	subwf	___aldiv@dividend,f,c
 12870  002D3E  502C               	movf	___aldiv@divisor+1,w,c
 12871  002D40  5A28               	subwfb	___aldiv@dividend+1,f,c
 12872  002D42  502D               	movf	___aldiv@divisor+2,w,c
 12873  002D44  5A29               	subwfb	___aldiv@dividend+2,f,c
 12874  002D46  502E               	movf	___aldiv@divisor+3,w,c
 12875  002D48  5A2A               	subwfb	___aldiv@dividend+3,f,c
 12876                           
 12877                           ; BSR set to: 0
 12878  002D4A  0100               	movlb	0	; () banked
 12879  002D4C  8182               	bsf	___aldiv@quotient& (0+255),0,b
 12880  002D4E                     l6979:
 12881                           
 12882                           ; BSR set to: 0
 12883  002D4E  90D8               	bcf	status,0,c
 12884  002D50  322E               	rrcf	___aldiv@divisor+3,f,c
 12885  002D52  322D               	rrcf	___aldiv@divisor+2,f,c
 12886  002D54  322C               	rrcf	___aldiv@divisor+1,f,c
 12887  002D56  322B               	rrcf	___aldiv@divisor,f,c
 12888                           
 12889                           ; BSR set to: 0
 12890  002D58  0100               	movlb	0	; () banked
 12891  002D5A  2F80               	decfsz	___aldiv@counter& (0+255),f,b
 12892  002D5C  D7DE               	goto	l6971
 12893  002D5E                     l6983:
 12894                           
 12895                           ; BSR set to: 0
 12896  002D5E  0100               	movlb	0	; () banked
 12897  002D60  5181               	movf	___aldiv@sign& (0+255),w,b
 12898  002D62  0100               	movlb	0	; () banked
 12899  002D64  B4D8               	btfsc	status,2,c
 12900  002D66  D009               	goto	l6987
 12901                           
 12902                           ; BSR set to: 0
 12903  002D68  0100               	movlb	0	; () banked
 12904  002D6A  1F85               	comf	(___aldiv@quotient+3)& (0+255),f,b
 12905  002D6C  1F84               	comf	(___aldiv@quotient+2)& (0+255),f,b
 12906  002D6E  1F83               	comf	(___aldiv@quotient+1)& (0+255),f,b
 12907  002D70  6D82               	negf	___aldiv@quotient& (0+255),b
 12908  002D72  0E00               	movlw	0
 12909  002D74  2383               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 12910  002D76  2384               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 12911  002D78  2385               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 12912  002D7A                     l6987:
 12913                           
 12914                           ; BSR set to: 0
 12915  002D7A  C082  F027         	movff	___aldiv@quotient,?___aldiv
 12916  002D7E  C083  F028         	movff	___aldiv@quotient+1,?___aldiv+1
 12917  002D82  C084  F029         	movff	___aldiv@quotient+2,?___aldiv+2
 12918  002D86  C085  F02A         	movff	___aldiv@quotient+3,?___aldiv+3
 12919  002D8A  0012               	return	
 12920  002D8C                     __end_of___aldiv:
 12921                           	opt stack 0
 12922                           tblptru	equ	0xFF8
 12923                           tblptrh	equ	0xFF7
 12924                           tblptrl	equ	0xFF6
 12925                           tablat	equ	0xFF5
 12926                           prodh	equ	0xFF4
 12927                           prodl	equ	0xFF3
 12928                           intcon	equ	0xFF2
 12929                           intcon3	equ	0xFF0
 12930                           postinc0	equ	0xFEE
 12931                           wreg	equ	0xFE8
 12932                           postdec1	equ	0xFE5
 12933                           fsr1l	equ	0xFE1
 12934                           indf2	equ	0xFDF
 12935                           postinc2	equ	0xFDE
 12936                           postdec2	equ	0xFDD
 12937                           fsr2h	equ	0xFDA
 12938                           fsr2l	equ	0xFD9
 12939                           status	equ	0xFD8
 12940                           
 12941 ;; *************** function _service *****************
 12942 ;; Defined at:
 12943 ;;		line 307 in file "main.c"
 12944 ;; Parameters:    Size  Location     Type
 12945 ;;		None
 12946 ;; Auto vars:     Size  Location     Type
 12947 ;;  key             1   37[COMRAM] unsigned char 
 12948 ;; Return value:  Size  Location     Type
 12949 ;;                  1    wreg      void 
 12950 ;; Registers used:
 12951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12952 ;; Tracked objects:
 12953 ;;		On entry : 0/0
 12954 ;;		On exit  : 0/0
 12955 ;;		Unchanged: 0/0
 12956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12958 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12959 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12960 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12961 ;;Total ram usage:       19 bytes
 12962 ;; Hardware stack levels used:    1
 12963 ;; Hardware stack levels required when called:    2
 12964 ;; This function calls:
 12965 ;;		_servoInterruptService
 12966 ;;		i2_startTimer
 12967 ;; This function is called by:
 12968 ;;		Interrupt level 2
 12969 ;; This function uses a non-reentrant model
 12970 ;;
 12971                           
 12972                           	psect	intcode
 12973  000008                     __pintcode:
 12974                           	opt stack 0
 12975  000008                     _service:
 12976                           	opt stack 21
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;incstack = 0
 12980  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12981  00000A  EDF4  F014         	call	int_func,f	;refresh shadow registers
 12982                           tblptru	equ	0xFF8
 12983                           tblptrh	equ	0xFF7
 12984                           tblptrl	equ	0xFF6
 12985                           tablat	equ	0xFF5
 12986                           prodh	equ	0xFF4
 12987                           prodl	equ	0xFF3
 12988                           intcon	equ	0xFF2
 12989                           intcon3	equ	0xFF0
 12990                           postinc0	equ	0xFEE
 12991                           wreg	equ	0xFE8
 12992                           postdec1	equ	0xFE5
 12993                           fsr1l	equ	0xFE1
 12994                           indf2	equ	0xFDF
 12995                           postinc2	equ	0xFDE
 12996                           postdec2	equ	0xFDD
 12997                           fsr2h	equ	0xFDA
 12998                           fsr2l	equ	0xFD9
 12999                           status	equ	0xFD8
 13000                           
 13001                           	psect	intcode_body
 13002  0029E8                     __pintcode_body:
 13003                           	opt stack 21
 13004  0029E8                     int_func:
 13005                           	opt stack 21
 13006  0029E8  0006               	pop		; remove dummy address from shadow register refresh
 13007  0029EA  CFFA F018          	movff	pclath,??_service+4
 13008  0029EE  CFFB F019          	movff	pclatu,??_service+5
 13009  0029F2  CFE9 F01A          	movff	fsr0l,??_service+6
 13010  0029F6  CFEA F01B          	movff	fsr0h,??_service+7
 13011  0029FA  CFE1 F01C          	movff	fsr1l,??_service+8
 13012  0029FE  CFE2 F01D          	movff	fsr1h,??_service+9
 13013  002A02  CFD9 F01E          	movff	fsr2l,??_service+10
 13014  002A06  CFDA F01F          	movff	fsr2h,??_service+11
 13015  002A0A  CFF3 F020          	movff	prodl,??_service+12
 13016  002A0E  CFF4 F021          	movff	prodh,??_service+13
 13017  002A12  CFF6 F022          	movff	tblptrl,??_service+14
 13018  002A16  CFF7 F023          	movff	tblptrh,??_service+15
 13019  002A1A  CFF8 F024          	movff	tblptru,??_service+16
 13020  002A1E  CFF5 F025          	movff	tablat,??_service+17
 13021                           
 13022                           ;main.c: 309: servoInterruptService();
 13023  002A22  EC77  F014         	call	_servoInterruptService	;wreg free
 13024                           
 13025                           ;main.c: 311: if(TMR1IF){
 13026  002A26  A09E               	btfss	3998,0,c	;volatile
 13027  002A28  D023               	goto	i2l5293
 13028                           
 13029                           ;main.c: 312: startTimer(1,0xffff - period);
 13030  002A2A  0E00               	movlw	0
 13031  002A2C  6E08               	movwf	i2startTimer@timer+1,c
 13032  002A2E  0E01               	movlw	1
 13033  002A30  6E07               	movwf	i2startTimer@timer,c
 13034  002A32  0EFF               	movlw	255
 13035  002A34  6E14               	movwf	??_service& (0+255),c
 13036  002A36  0EFF               	movlw	255
 13037  002A38  6E15               	movwf	(??_service+1)& (0+255),c
 13038  002A3A  C143  F016         	movff	_period,??_service+2
 13039  002A3E  C144  F017         	movff	_period+1,??_service+3
 13040  002A42  1E16               	comf	??_service+2,f,c
 13041  002A44  1E17               	comf	??_service+3,f,c
 13042  002A46  4A16               	infsnz	??_service+2,f,c
 13043  002A48  2A17               	incf	??_service+3,f,c
 13044  002A4A  5014               	movf	??_service,w,c
 13045  002A4C  2616               	addwf	??_service+2,f,c
 13046  002A4E  5015               	movf	??_service+1,w,c
 13047  002A50  2217               	addwfc	??_service+3,f,c
 13048  002A52  C016  F009         	movff	??_service+2,i2startTimer@val
 13049  002A56  C017  F00A         	movff	??_service+3,i2startTimer@val+1
 13050  002A5A  6A0B               	clrf	i2startTimer@val+2,c
 13051  002A5C  6A0C               	clrf	i2startTimer@val+3,c
 13052  002A5E  EC6E  F01B         	call	i2_startTimer	;wreg free
 13053                           
 13054                           ;main.c: 313: time+=1;
 13055  002A62  0E01               	movlw	1
 13056  002A64  2634               	addwf	_time,f,c
 13057  002A66  0E00               	movlw	0
 13058  002A68  2235               	addwfc	_time+1,f,c
 13059  002A6A  2236               	addwfc	_time+2,f,c
 13060  002A6C  2237               	addwfc	_time+3,f,c
 13061                           
 13062                           ;main.c: 314: TMR1IF = 0;
 13063  002A6E  909E               	bcf	3998,0,c	;volatile
 13064  002A70                     i2l5293:
 13065                           
 13066                           ;main.c: 315: }
 13067                           ;main.c: 318: if(INT0IF){ INT0IF = 0;
 13068  002A70  A2F2               	btfss	intcon,1,c	;volatile
 13069  002A72  D005               	goto	i2l5299
 13070  002A74  92F2               	bcf	intcon,1,c	;volatile
 13071                           
 13072                           ;main.c: 319: batteryDetected = 1;
 13073  002A76  0E00               	movlw	0
 13074  002A78  6E39               	movwf	_batteryDetected+1,c
 13075  002A7A  0E01               	movlw	1
 13076  002A7C  6E38               	movwf	_batteryDetected,c
 13077  002A7E                     i2l5299:
 13078                           
 13079                           ;main.c: 320: }
 13080                           ;main.c: 323: if(INT1IF && INT1IE){INT1IF = 0;
 13081  002A7E  B0F0               	btfsc	intcon3,0,c	;volatile
 13082  002A80  A6F0               	btfss	intcon3,3,c	;volatile
 13083  002A82  D00D               	goto	i2l187
 13084  002A84  90F0               	bcf	intcon3,0,c	;volatile
 13085                           
 13086                           ;main.c: 324: char key = (PORTB & 0xF0) >> 4;
 13087  002A86  3881               	swapf	3969,w,c	;volatile
 13088  002A88  0B0F               	andlw	15
 13089  002A8A  0B0F               	andlw	15
 13090  002A8C  6E26               	movwf	service@key,c
 13091                           
 13092                           ;main.c: 325: if(key == 12)terminate = 1;
 13093  002A8E  0E0C               	movlw	12
 13094  002A90  1826               	xorwf	service@key,w,c
 13095  002A92  A4D8               	btfss	status,2,c
 13096  002A94  D004               	goto	i2l187
 13097  002A96  0E00               	movlw	0
 13098  002A98  6E47               	movwf	_terminate+1,c
 13099  002A9A  0E01               	movlw	1
 13100  002A9C  6E46               	movwf	_terminate,c
 13101  002A9E                     i2l187:
 13102  002A9E  C025  FFF5         	movff	??_service+17,tablat
 13103  002AA2  C024  FFF8         	movff	??_service+16,tblptru
 13104  002AA6  C023  FFF7         	movff	??_service+15,tblptrh
 13105  002AAA  C022  FFF6         	movff	??_service+14,tblptrl
 13106  002AAE  C021  FFF4         	movff	??_service+13,prodh
 13107  002AB2  C020  FFF3         	movff	??_service+12,prodl
 13108  002AB6  C01F  FFDA         	movff	??_service+11,fsr2h
 13109  002ABA  C01E  FFD9         	movff	??_service+10,fsr2l
 13110  002ABE  C01D  FFE2         	movff	??_service+9,fsr1h
 13111  002AC2  C01C  FFE1         	movff	??_service+8,fsr1l
 13112  002AC6  C01B  FFEA         	movff	??_service+7,fsr0h
 13113  002ACA  C01A  FFE9         	movff	??_service+6,fsr0l
 13114  002ACE  C019  FFFB         	movff	??_service+5,pclatu
 13115  002AD2  C018  FFFA         	movff	??_service+4,pclath
 13116  002AD6  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13117  002AD8  0011               	retfie		f
 13118  002ADA                     __end_of_service:
 13119                           	opt stack 0
 13120                           pclatu	equ	0xFFB
 13121                           pclath	equ	0xFFA
 13122                           tblptru	equ	0xFF8
 13123                           tblptrh	equ	0xFF7
 13124                           tblptrl	equ	0xFF6
 13125                           tablat	equ	0xFF5
 13126                           prodh	equ	0xFF4
 13127                           prodl	equ	0xFF3
 13128                           intcon	equ	0xFF2
 13129                           intcon3	equ	0xFF0
 13130                           postinc0	equ	0xFEE
 13131                           fsr0h	equ	0xFEA
 13132                           fsr0l	equ	0xFE9
 13133                           wreg	equ	0xFE8
 13134                           postdec1	equ	0xFE5
 13135                           fsr1h	equ	0xFE2
 13136                           fsr1l	equ	0xFE1
 13137                           indf2	equ	0xFDF
 13138                           postinc2	equ	0xFDE
 13139                           postdec2	equ	0xFDD
 13140                           fsr2h	equ	0xFDA
 13141                           fsr2l	equ	0xFD9
 13142                           status	equ	0xFD8
 13143                           
 13144 ;; *************** function _servoInterruptService *****************
 13145 ;; Defined at:
 13146 ;;		line 52 in file "servo.c"
 13147 ;; Parameters:    Size  Location     Type
 13148 ;;		None
 13149 ;; Auto vars:     Size  Location     Type
 13150 ;;		None
 13151 ;; Return value:  Size  Location     Type
 13152 ;;                  1    wreg      void 
 13153 ;; Registers used:
 13154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13155 ;; Tracked objects:
 13156 ;;		On entry : 0/0
 13157 ;;		On exit  : 0/0
 13158 ;;		Unchanged: 0/0
 13159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13162 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13163 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13164 ;;Total ram usage:        4 bytes
 13165 ;; Hardware stack levels used:    1
 13166 ;; Hardware stack levels required when called:    1
 13167 ;; This function calls:
 13168 ;;		i2___awmod
 13169 ;;		i2_digitalWrite
 13170 ;;		i2_startTimer
 13171 ;; This function is called by:
 13172 ;;		_service
 13173 ;; This function uses a non-reentrant model
 13174 ;;
 13175                           
 13176                           	psect	text51
 13177  0028EE                     __ptext51:
 13178                           	opt stack 0
 13179  0028EE                     _servoInterruptService:
 13180                           	opt stack 21
 13181                           
 13182                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 13183                           
 13184                           ;incstack = 0
 13185  0028EE  A4F2               	btfss	intcon,2,c	;volatile
 13186  0028F0  0012               	return	
 13187  0028F2  94F2               	bcf	intcon,2,c	;volatile
 13188                           
 13189                           ;servo.c: 55: digitalWrite(servos[curr],0);
 13190  0028F4  90D8               	bcf	status,0,c
 13191  0028F6  343A               	rlcf	_curr,w,c
 13192  0028F8  6ED9               	movwf	fsr2l,c
 13193  0028FA  343B               	rlcf	_curr+1,w,c
 13194  0028FC  6EDA               	movwf	fsr2h,c
 13195  0028FE  0E6D               	movlw	low _servos
 13196  002900  26D9               	addwf	fsr2l,f,c
 13197  002902  0E01               	movlw	high _servos
 13198  002904  22DA               	addwfc	fsr2h,f,c
 13199  002906  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 13200  00290A  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 13201  00290E  0E00               	movlw	0
 13202  002910  6E0A               	movwf	i2digitalWrite@val+1,c
 13203  002912  0E00               	movlw	0
 13204  002914  6E09               	movwf	i2digitalWrite@val,c
 13205  002916  ECF4  F017         	call	i2_digitalWrite	;wreg free
 13206                           
 13207                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 13208  00291A  0E01               	movlw	1
 13209  00291C  243A               	addwf	_curr,w,c
 13210  00291E  6E01               	movwf	i2___awmod@dividend,c
 13211  002920  0E00               	movlw	0
 13212  002922  203B               	addwfc	_curr+1,w,c
 13213  002924  6E02               	movwf	i2___awmod@dividend+1,c
 13214  002926  0E01               	movlw	1
 13215  002928  243C               	addwf	_n,w,c
 13216  00292A  6E03               	movwf	i2___awmod@divisor,c
 13217  00292C  0E00               	movlw	0
 13218  00292E  203D               	addwfc	_n+1,w,c
 13219  002930  6E04               	movwf	i2___awmod@divisor+1,c
 13220  002932  EC4E  F01A         	call	i2___awmod	;wreg free
 13221  002936  90D8               	bcf	status,0,c
 13222  002938  3601               	rlcf	?i2___awmod,f,c
 13223  00293A  3602               	rlcf	?i2___awmod+1,f,c
 13224  00293C  0E6D               	movlw	low _servos
 13225  00293E  2401               	addwf	?i2___awmod,w,c
 13226  002940  6ED9               	movwf	fsr2l,c
 13227  002942  0E01               	movlw	high _servos
 13228  002944  2002               	addwfc	?i2___awmod+1,w,c
 13229  002946  6EDA               	movwf	fsr2h,c
 13230  002948  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 13231  00294C  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 13232  002950  0E00               	movlw	0
 13233  002952  6E0A               	movwf	i2digitalWrite@val+1,c
 13234  002954  0E01               	movlw	1
 13235  002956  6E09               	movwf	i2digitalWrite@val,c
 13236  002958  ECF4  F017         	call	i2_digitalWrite	;wreg free
 13237                           
 13238                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 13239  00295C  0E00               	movlw	0
 13240  00295E  6E08               	movwf	i2startTimer@timer+1,c
 13241  002960  0E00               	movlw	0
 13242  002962  6E07               	movwf	i2startTimer@timer,c
 13243  002964  0EFF               	movlw	255
 13244  002966  6E10               	movwf	??_servoInterruptService& (0+255),c
 13245  002968  0EFF               	movlw	255
 13246  00296A  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 13247  00296C  0E01               	movlw	1
 13248  00296E  243A               	addwf	_curr,w,c
 13249  002970  6E01               	movwf	i2___awmod@dividend,c
 13250  002972  0E00               	movlw	0
 13251  002974  203B               	addwfc	_curr+1,w,c
 13252  002976  6E02               	movwf	i2___awmod@dividend+1,c
 13253  002978  0E01               	movlw	1
 13254  00297A  243C               	addwf	_n,w,c
 13255  00297C  6E03               	movwf	i2___awmod@divisor,c
 13256  00297E  0E00               	movlw	0
 13257  002980  203D               	addwfc	_n+1,w,c
 13258  002982  6E04               	movwf	i2___awmod@divisor+1,c
 13259  002984  EC4E  F01A         	call	i2___awmod	;wreg free
 13260  002988  90D8               	bcf	status,0,c
 13261  00298A  3601               	rlcf	?i2___awmod,f,c
 13262  00298C  3602               	rlcf	?i2___awmod+1,f,c
 13263  00298E  0E65               	movlw	low _pulse
 13264  002990  2401               	addwf	?i2___awmod,w,c
 13265  002992  6ED9               	movwf	fsr2l,c
 13266  002994  0E01               	movlw	high _pulse
 13267  002996  2002               	addwfc	?i2___awmod+1,w,c
 13268  002998  6EDA               	movwf	fsr2h,c
 13269  00299A  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 13270  00299E  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 13271  0029A2  1E12               	comf	??_servoInterruptService+2,f,c
 13272  0029A4  1E13               	comf	??_servoInterruptService+3,f,c
 13273  0029A6  4A12               	infsnz	??_servoInterruptService+2,f,c
 13274  0029A8  2A13               	incf	??_servoInterruptService+3,f,c
 13275  0029AA  5010               	movf	??_servoInterruptService,w,c
 13276  0029AC  2612               	addwf	??_servoInterruptService+2,f,c
 13277  0029AE  5011               	movf	??_servoInterruptService+1,w,c
 13278  0029B0  2213               	addwfc	??_servoInterruptService+3,f,c
 13279  0029B2  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 13280  0029B6  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 13281  0029BA  6A0B               	clrf	i2startTimer@val+2,c
 13282  0029BC  6A0C               	clrf	i2startTimer@val+3,c
 13283  0029BE  EC6E  F01B         	call	i2_startTimer	;wreg free
 13284                           
 13285                           ;servo.c: 59: curr = (curr+1)%(n+1);
 13286  0029C2  0E01               	movlw	1
 13287  0029C4  243A               	addwf	_curr,w,c
 13288  0029C6  6E01               	movwf	i2___awmod@dividend,c
 13289  0029C8  0E00               	movlw	0
 13290  0029CA  203B               	addwfc	_curr+1,w,c
 13291  0029CC  6E02               	movwf	i2___awmod@dividend+1,c
 13292  0029CE  0E01               	movlw	1
 13293  0029D0  243C               	addwf	_n,w,c
 13294  0029D2  6E03               	movwf	i2___awmod@divisor,c
 13295  0029D4  0E00               	movlw	0
 13296  0029D6  203D               	addwfc	_n+1,w,c
 13297  0029D8  6E04               	movwf	i2___awmod@divisor+1,c
 13298  0029DA  EC4E  F01A         	call	i2___awmod	;wreg free
 13299  0029DE  C001  F03A         	movff	?i2___awmod,_curr
 13300  0029E2  C002  F03B         	movff	?i2___awmod+1,_curr+1
 13301  0029E6  0012               	return	
 13302  0029E8                     __end_of_servoInterruptService:
 13303                           	opt stack 0
 13304                           pclatu	equ	0xFFB
 13305                           pclath	equ	0xFFA
 13306                           tblptru	equ	0xFF8
 13307                           tblptrh	equ	0xFF7
 13308                           tblptrl	equ	0xFF6
 13309                           tablat	equ	0xFF5
 13310                           prodh	equ	0xFF4
 13311                           prodl	equ	0xFF3
 13312                           intcon	equ	0xFF2
 13313                           intcon3	equ	0xFF0
 13314                           postinc0	equ	0xFEE
 13315                           fsr0h	equ	0xFEA
 13316                           fsr0l	equ	0xFE9
 13317                           wreg	equ	0xFE8
 13318                           postdec1	equ	0xFE5
 13319                           fsr1h	equ	0xFE2
 13320                           fsr1l	equ	0xFE1
 13321                           indf2	equ	0xFDF
 13322                           postinc2	equ	0xFDE
 13323                           postdec2	equ	0xFDD
 13324                           fsr2h	equ	0xFDA
 13325                           fsr2l	equ	0xFD9
 13326                           status	equ	0xFD8
 13327                           
 13328 ;; *************** function i2_startTimer *****************
 13329 ;; Defined at:
 13330 ;;		line 76 in file "timer.c"
 13331 ;; Parameters:    Size  Location     Type
 13332 ;;  timer           2    6[COMRAM] int 
 13333 ;;  val             4    8[COMRAM] long 
 13334 ;; Auto vars:     Size  Location     Type
 13335 ;;		None
 13336 ;; Return value:  Size  Location     Type
 13337 ;;                  1    wreg      void 
 13338 ;; Registers used:
 13339 ;;		wreg, status,2, status,0
 13340 ;; Tracked objects:
 13341 ;;		On entry : 0/0
 13342 ;;		On exit  : 0/0
 13343 ;;		Unchanged: 0/0
 13344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13345 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13347 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13348 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13349 ;;Total ram usage:        8 bytes
 13350 ;; Hardware stack levels used:    1
 13351 ;; This function calls:
 13352 ;;		Nothing
 13353 ;; This function is called by:
 13354 ;;		_service
 13355 ;;		_servoInterruptService
 13356 ;; This function uses a non-reentrant model
 13357 ;;
 13358                           
 13359                           	psect	text52
 13360  0036DC                     __ptext52:
 13361                           	opt stack 0
 13362  0036DC                     i2_startTimer:
 13363                           	opt stack 22
 13364                           
 13365                           ;timer.c: 77: switch(timer){
 13366                           
 13367                           ;incstack = 0
 13368  0036DC  D012               	goto	i2l4859
 13369  0036DE                     i2l426:
 13370                           
 13371                           ;timer.c: 79: TMR0H = val>>8;
 13372  0036DE  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 13373                           
 13374                           ;timer.c: 80: TMR0L = val;
 13375  0036E2  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 13376                           
 13377                           ;timer.c: 81: T0CON |= 1<<7;
 13378  0036E6  8ED5               	bsf	4053,7,c	;volatile
 13379                           
 13380                           ;timer.c: 82: break;
 13381  0036E8  0012               	return	
 13382  0036EA                     i2l428:
 13383                           
 13384                           ;timer.c: 84: TMR1H = val>>8;
 13385  0036EA  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 13386                           
 13387                           ;timer.c: 85: TMR1L = val;
 13388  0036EE  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 13389                           
 13390                           ;timer.c: 86: T1CON |= 1<<0;
 13391  0036F2  80CD               	bsf	4045,0,c	;volatile
 13392                           
 13393                           ;timer.c: 87: break;
 13394  0036F4  0012               	return	
 13395  0036F6                     i2l429:
 13396                           
 13397                           ;timer.c: 89: TMR3H = val>>8;
 13398  0036F6  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 13399                           
 13400                           ;timer.c: 90: TMR3L = val;
 13401  0036FA  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 13402                           
 13403                           ;timer.c: 91: T3CON |= 1<<0;
 13404  0036FE  80B1               	bsf	4017,0,c	;volatile
 13405                           
 13406                           ;timer.c: 92: }
 13407  003700  0012               	return	
 13408  003702                     i2l4859:
 13409  003702  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 13410  003706  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 13411                           
 13412                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13413                           ; Switch size 1, requested type "space"
 13414                           ; Number of cases is 1, Range of values is 0 to 0
 13415                           ; switch strategies available:
 13416                           ; Name         Instructions Cycles
 13417                           ; simple_byte            4     3 (average)
 13418                           ;	Chosen strategy is simple_byte
 13419  00370A  500E               	movf	??i2_startTimer+1,w,c
 13420  00370C  0A00               	xorlw	0	; case 0
 13421  00370E  A4D8               	btfss	status,2,c
 13422  003710  0012               	return	
 13423                           
 13424                           ; Switch size 1, requested type "space"
 13425                           ; Number of cases is 3, Range of values is 0 to 3
 13426                           ; switch strategies available:
 13427                           ; Name         Instructions Cycles
 13428                           ; simple_byte           10     6 (average)
 13429                           ;	Chosen strategy is simple_byte
 13430  003712  500D               	movf	??i2_startTimer,w,c
 13431  003714  0A00               	xorlw	0	; case 0
 13432  003716  B4D8               	btfsc	status,2,c
 13433  003718  D7E2               	goto	i2l426
 13434  00371A  0A01               	xorlw	1	; case 1
 13435  00371C  B4D8               	btfsc	status,2,c
 13436  00371E  D7E5               	goto	i2l428
 13437  003720  0A02               	xorlw	2	; case 3
 13438  003722  A4D8               	btfss	status,2,c
 13439  003724  0012               	return	
 13440  003726  D7E7               	goto	i2l429
 13441  003728                     __end_ofi2_startTimer:
 13442                           	opt stack 0
 13443                           pclatu	equ	0xFFB
 13444                           pclath	equ	0xFFA
 13445                           tblptru	equ	0xFF8
 13446                           tblptrh	equ	0xFF7
 13447                           tblptrl	equ	0xFF6
 13448                           tablat	equ	0xFF5
 13449                           prodh	equ	0xFF4
 13450                           prodl	equ	0xFF3
 13451                           intcon	equ	0xFF2
 13452                           intcon3	equ	0xFF0
 13453                           postinc0	equ	0xFEE
 13454                           fsr0h	equ	0xFEA
 13455                           fsr0l	equ	0xFE9
 13456                           wreg	equ	0xFE8
 13457                           postdec1	equ	0xFE5
 13458                           fsr1h	equ	0xFE2
 13459                           fsr1l	equ	0xFE1
 13460                           indf2	equ	0xFDF
 13461                           postinc2	equ	0xFDE
 13462                           postdec2	equ	0xFDD
 13463                           fsr2h	equ	0xFDA
 13464                           fsr2l	equ	0xFD9
 13465                           status	equ	0xFD8
 13466                           
 13467 ;; *************** function i2_digitalWrite *****************
 13468 ;; Defined at:
 13469 ;;		line 53 in file "iopin.c"
 13470 ;; Parameters:    Size  Location     Type
 13471 ;;  pin             2    6[COMRAM] PTR int 
 13472 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
 13473 ;;		 -> conveyorServo(4), cylinderMotor(4), 
 13474 ;;  val             2    8[COMRAM] int 
 13475 ;; Auto vars:     Size  Location     Type
 13476 ;;  digitalWrite    2   13[COMRAM] int 
 13477 ;; Return value:  Size  Location     Type
 13478 ;;                  1    wreg      void 
 13479 ;; Registers used:
 13480 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13481 ;; Tracked objects:
 13482 ;;		On entry : 0/0
 13483 ;;		On exit  : 0/0
 13484 ;;		Unchanged: 0/0
 13485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13486 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13487 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13488 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13489 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13490 ;;Total ram usage:        9 bytes
 13491 ;; Hardware stack levels used:    1
 13492 ;; This function calls:
 13493 ;;		Nothing
 13494 ;; This function is called by:
 13495 ;;		_servoInterruptService
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           	psect	text53
 13500  002FE8                     __ptext53:
 13501                           	opt stack 0
 13502  002FE8                     i2_digitalWrite:
 13503                           	opt stack 21
 13504                           
 13505                           ;iopin.c: 54: if(pin){
 13506                           
 13507                           ;incstack = 0
 13508  002FE8  5007               	movf	i2digitalWrite@pin,w,c
 13509  002FEA  1008               	iorwf	i2digitalWrite@pin+1,w,c
 13510  002FEC  B4D8               	btfsc	status,2,c
 13511  002FEE  0012               	return	
 13512                           
 13513                           ;iopin.c: 55: int p = 1 << pin[1];
 13514  002FF0  EE20 F002          	lfsr	2,2
 13515  002FF4  5007               	movf	i2digitalWrite@pin,w,c
 13516  002FF6  26D9               	addwf	fsr2l,f,c
 13517  002FF8  5008               	movf	i2digitalWrite@pin+1,w,c
 13518  002FFA  22DA               	addwfc	fsr2h,f,c
 13519  002FFC  50DF               	movf	indf2,w,c
 13520  002FFE  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 13521  003000  0E01               	movlw	1
 13522  003002  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 13523  003004  0E00               	movlw	0
 13524  003006  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 13525  003008  2A0B               	incf	??i2_digitalWrite,f,c
 13526  00300A  D003               	goto	i2u461_44
 13527  00300C                     i2u461_45:
 13528  00300C  90D8               	bcf	status,0,c
 13529  00300E  360C               	rlcf	??i2_digitalWrite+1,f,c
 13530  003010  360D               	rlcf	??i2_digitalWrite+2,f,c
 13531  003012                     i2u461_44:
 13532  003012  2E0B               	decfsz	??i2_digitalWrite,f,c
 13533  003014  D7FB               	goto	i2u461_45
 13534  003016  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 13535  00301A  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 13536                           
 13537                           ;iopin.c: 56: if(val == 0){
 13538  00301E  5009               	movf	i2digitalWrite@val,w,c
 13539  003020  100A               	iorwf	i2digitalWrite@val+1,w,c
 13540  003022  A4D8               	btfss	status,2,c
 13541  003024  D02B               	goto	i2l4845
 13542                           
 13543                           ;iopin.c: 57: p ^= 0xff;
 13544  003026  0EFF               	movlw	255
 13545  003028  1A0E               	xorwf	i2digitalWrite@p,f,c
 13546                           
 13547                           ;iopin.c: 58: }
 13548                           ;iopin.c: 60: switch(pin[0]){
 13549  00302A  D028               	goto	i2l4845
 13550  00302C                     i2l4821:
 13551  00302C  0409               	decf	i2digitalWrite@val,w,c
 13552  00302E  100A               	iorwf	i2digitalWrite@val+1,w,c
 13553  003030  A4D8               	btfss	status,2,c
 13554  003032  D003               	goto	i2l4825
 13555  003034  500E               	movf	i2digitalWrite@p,w,c
 13556  003036  1289               	iorwf	3977,f,c	;volatile
 13557  003038  0012               	return	
 13558  00303A                     i2l4825:
 13559                           
 13560                           ;iopin.c: 62: else LATA &= p;
 13561  00303A  500E               	movf	i2digitalWrite@p,w,c
 13562  00303C  1689               	andwf	3977,f,c	;volatile
 13563                           
 13564                           ;iopin.c: 63: break;
 13565  00303E  0012               	return	
 13566  003040                     i2l4827:
 13567  003040  0409               	decf	i2digitalWrite@val,w,c
 13568  003042  100A               	iorwf	i2digitalWrite@val+1,w,c
 13569  003044  A4D8               	btfss	status,2,c
 13570  003046  D003               	goto	i2l4831
 13571  003048  500E               	movf	i2digitalWrite@p,w,c
 13572  00304A  128A               	iorwf	3978,f,c	;volatile
 13573  00304C  0012               	return	
 13574  00304E                     i2l4831:
 13575                           
 13576                           ;iopin.c: 65: else LATB &= p;
 13577  00304E  500E               	movf	i2digitalWrite@p,w,c
 13578  003050  168A               	andwf	3978,f,c	;volatile
 13579                           
 13580                           ;iopin.c: 66: break;
 13581  003052  0012               	return	
 13582  003054                     i2l4833:
 13583  003054  0409               	decf	i2digitalWrite@val,w,c
 13584  003056  100A               	iorwf	i2digitalWrite@val+1,w,c
 13585  003058  A4D8               	btfss	status,2,c
 13586  00305A  D003               	goto	i2l4837
 13587  00305C  500E               	movf	i2digitalWrite@p,w,c
 13588  00305E  128B               	iorwf	3979,f,c	;volatile
 13589  003060  0012               	return	
 13590  003062                     i2l4837:
 13591                           
 13592                           ;iopin.c: 68: else LATC &= p;
 13593  003062  500E               	movf	i2digitalWrite@p,w,c
 13594  003064  168B               	andwf	3979,f,c	;volatile
 13595                           
 13596                           ;iopin.c: 69: break;
 13597  003066  0012               	return	
 13598  003068                     i2l4839:
 13599  003068  0409               	decf	i2digitalWrite@val,w,c
 13600  00306A  100A               	iorwf	i2digitalWrite@val+1,w,c
 13601  00306C  A4D8               	btfss	status,2,c
 13602  00306E  D003               	goto	i2l4843
 13603  003070  500E               	movf	i2digitalWrite@p,w,c
 13604  003072  128C               	iorwf	3980,f,c	;volatile
 13605  003074  0012               	return	
 13606  003076                     i2l4843:
 13607                           
 13608                           ;iopin.c: 71: else LATD &= p;
 13609  003076  500E               	movf	i2digitalWrite@p,w,c
 13610  003078  168C               	andwf	3980,f,c	;volatile
 13611                           
 13612                           ;iopin.c: 72: }
 13613  00307A  0012               	return	
 13614  00307C                     i2l4845:
 13615  00307C  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 13616  003080  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 13617  003084  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 13618  003088  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 13619                           
 13620                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13621                           ; Switch size 1, requested type "space"
 13622                           ; Number of cases is 1, Range of values is 0 to 0
 13623                           ; switch strategies available:
 13624                           ; Name         Instructions Cycles
 13625                           ; simple_byte            4     3 (average)
 13626                           ;	Chosen strategy is simple_byte
 13627  00308C  500C               	movf	??i2_digitalWrite+1,w,c
 13628  00308E  0A00               	xorlw	0	; case 0
 13629  003090  A4D8               	btfss	status,2,c
 13630  003092  0012               	return	
 13631                           
 13632                           ; Switch size 1, requested type "space"
 13633                           ; Number of cases is 4, Range of values is 0 to 3
 13634                           ; switch strategies available:
 13635                           ; Name         Instructions Cycles
 13636                           ; simple_byte           13     7 (average)
 13637                           ;	Chosen strategy is simple_byte
 13638  003094  500B               	movf	??i2_digitalWrite,w,c
 13639  003096  0A00               	xorlw	0	; case 0
 13640  003098  B4D8               	btfsc	status,2,c
 13641  00309A  D7C8               	goto	i2l4821
 13642  00309C  0A01               	xorlw	1	; case 1
 13643  00309E  B4D8               	btfsc	status,2,c
 13644  0030A0  D7CF               	goto	i2l4827
 13645  0030A2  0A03               	xorlw	3	; case 2
 13646  0030A4  B4D8               	btfsc	status,2,c
 13647  0030A6  D7D6               	goto	i2l4833
 13648  0030A8  0A01               	xorlw	1	; case 3
 13649  0030AA  A4D8               	btfss	status,2,c
 13650  0030AC  0012               	return	
 13651  0030AE  D7DC               	goto	i2l4839
 13652  0030B0                     __end_ofi2_digitalWrite:
 13653                           	opt stack 0
 13654                           pclatu	equ	0xFFB
 13655                           pclath	equ	0xFFA
 13656                           tblptru	equ	0xFF8
 13657                           tblptrh	equ	0xFF7
 13658                           tblptrl	equ	0xFF6
 13659                           tablat	equ	0xFF5
 13660                           prodh	equ	0xFF4
 13661                           prodl	equ	0xFF3
 13662                           intcon	equ	0xFF2
 13663                           intcon3	equ	0xFF0
 13664                           postinc0	equ	0xFEE
 13665                           fsr0h	equ	0xFEA
 13666                           fsr0l	equ	0xFE9
 13667                           wreg	equ	0xFE8
 13668                           postdec1	equ	0xFE5
 13669                           fsr1h	equ	0xFE2
 13670                           fsr1l	equ	0xFE1
 13671                           indf2	equ	0xFDF
 13672                           postinc2	equ	0xFDE
 13673                           postdec2	equ	0xFDD
 13674                           fsr2h	equ	0xFDA
 13675                           fsr2l	equ	0xFD9
 13676                           status	equ	0xFD8
 13677                           
 13678 ;; *************** function i2___awmod *****************
 13679 ;; Defined at:
 13680 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 13681 ;; Parameters:    Size  Location     Type
 13682 ;;  dividend        2    0[COMRAM] int 
 13683 ;;  divisor         2    2[COMRAM] int 
 13684 ;; Auto vars:     Size  Location     Type
 13685 ;;  __awmod         1    5[COMRAM] unsigned char 
 13686 ;;  __awmod         1    4[COMRAM] unsigned char 
 13687 ;; Return value:  Size  Location     Type
 13688 ;;                  2    0[COMRAM] int 
 13689 ;; Registers used:
 13690 ;;		wreg, status,2, status,0
 13691 ;; Tracked objects:
 13692 ;;		On entry : 0/0
 13693 ;;		On exit  : 0/0
 13694 ;;		Unchanged: 0/0
 13695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13697 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13699 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13700 ;;Total ram usage:        6 bytes
 13701 ;; Hardware stack levels used:    1
 13702 ;; This function calls:
 13703 ;;		Nothing
 13704 ;; This function is called by:
 13705 ;;		_servoInterruptService
 13706 ;; This function uses a non-reentrant model
 13707 ;;
 13708                           
 13709                           	psect	text54
 13710  00349C                     __ptext54:
 13711                           	opt stack 0
 13712  00349C                     i2___awmod:
 13713                           	opt stack 21
 13714                           
 13715                           ;incstack = 0
 13716  00349C  0E00               	movlw	0
 13717  00349E  6E06               	movwf	i2___awmod@sign,c
 13718  0034A0  AE02               	btfss	i2___awmod@dividend+1,7,c
 13719  0034A2  D006               	goto	i2l4873
 13720  0034A4  6C01               	negf	i2___awmod@dividend,c
 13721  0034A6  1E02               	comf	i2___awmod@dividend+1,f,c
 13722  0034A8  B0D8               	btfsc	status,0,c
 13723  0034AA  2A02               	incf	i2___awmod@dividend+1,f,c
 13724  0034AC  0E01               	movlw	1
 13725  0034AE  6E06               	movwf	i2___awmod@sign,c
 13726  0034B0                     i2l4873:
 13727  0034B0  AE04               	btfss	i2___awmod@divisor+1,7,c
 13728  0034B2  D004               	goto	i2l4877
 13729  0034B4  6C03               	negf	i2___awmod@divisor,c
 13730  0034B6  1E04               	comf	i2___awmod@divisor+1,f,c
 13731  0034B8  B0D8               	btfsc	status,0,c
 13732  0034BA  2A04               	incf	i2___awmod@divisor+1,f,c
 13733  0034BC                     i2l4877:
 13734  0034BC  5003               	movf	i2___awmod@divisor,w,c
 13735  0034BE  1004               	iorwf	i2___awmod@divisor+1,w,c
 13736  0034C0  B4D8               	btfsc	status,2,c
 13737  0034C2  D018               	goto	i2l4893
 13738  0034C4  0E01               	movlw	1
 13739  0034C6  6E05               	movwf	i2___awmod@counter,c
 13740  0034C8  D004               	goto	i2l4883
 13741  0034CA                     i2l4881:
 13742  0034CA  90D8               	bcf	status,0,c
 13743  0034CC  3603               	rlcf	i2___awmod@divisor,f,c
 13744  0034CE  3604               	rlcf	i2___awmod@divisor+1,f,c
 13745  0034D0  2A05               	incf	i2___awmod@counter,f,c
 13746  0034D2                     i2l4883:
 13747  0034D2  AE04               	btfss	i2___awmod@divisor+1,7,c
 13748  0034D4  D7FA               	goto	i2l4881
 13749  0034D6                     i2l4885:
 13750  0034D6  5003               	movf	i2___awmod@divisor,w,c
 13751  0034D8  5C01               	subwf	i2___awmod@dividend,w,c
 13752  0034DA  5004               	movf	i2___awmod@divisor+1,w,c
 13753  0034DC  5802               	subwfb	i2___awmod@dividend+1,w,c
 13754  0034DE  A0D8               	btfss	status,0,c
 13755  0034E0  D004               	goto	i2l4889
 13756  0034E2  5003               	movf	i2___awmod@divisor,w,c
 13757  0034E4  5E01               	subwf	i2___awmod@dividend,f,c
 13758  0034E6  5004               	movf	i2___awmod@divisor+1,w,c
 13759  0034E8  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13760  0034EA                     i2l4889:
 13761  0034EA  90D8               	bcf	status,0,c
 13762  0034EC  3204               	rrcf	i2___awmod@divisor+1,f,c
 13763  0034EE  3203               	rrcf	i2___awmod@divisor,f,c
 13764  0034F0  2E05               	decfsz	i2___awmod@counter,f,c
 13765  0034F2  D7F1               	goto	i2l4885
 13766  0034F4                     i2l4893:
 13767  0034F4  5006               	movf	i2___awmod@sign,w,c
 13768  0034F6  B4D8               	btfsc	status,2,c
 13769  0034F8  D004               	goto	i2l4897
 13770  0034FA  6C01               	negf	i2___awmod@dividend,c
 13771  0034FC  1E02               	comf	i2___awmod@dividend+1,f,c
 13772  0034FE  B0D8               	btfsc	status,0,c
 13773  003500  2A02               	incf	i2___awmod@dividend+1,f,c
 13774  003502                     i2l4897:
 13775  003502  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13776  003506  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13777  00350A  0012               	return	
 13778  00350C                     __end_ofi2___awmod:
 13779                           	opt stack 0
 13780                           pclatu	equ	0xFFB
 13781                           pclath	equ	0xFFA
 13782                           tblptru	equ	0xFF8
 13783                           tblptrh	equ	0xFF7
 13784                           tblptrl	equ	0xFF6
 13785                           tablat	equ	0xFF5
 13786                           prodh	equ	0xFF4
 13787                           prodl	equ	0xFF3
 13788                           intcon	equ	0xFF2
 13789                           intcon3	equ	0xFF0
 13790                           postinc0	equ	0xFEE
 13791                           fsr0h	equ	0xFEA
 13792                           fsr0l	equ	0xFE9
 13793                           wreg	equ	0xFE8
 13794                           postdec1	equ	0xFE5
 13795                           fsr1h	equ	0xFE2
 13796                           fsr1l	equ	0xFE1
 13797                           indf2	equ	0xFDF
 13798                           postinc2	equ	0xFDE
 13799                           postdec2	equ	0xFDD
 13800                           fsr2h	equ	0xFDA
 13801                           fsr2l	equ	0xFD9
 13802                           status	equ	0xFD8
 13803                           pclatu	equ	0xFFB
 13804                           pclath	equ	0xFFA
 13805                           tblptru	equ	0xFF8
 13806                           tblptrh	equ	0xFF7
 13807                           tblptrl	equ	0xFF6
 13808                           tablat	equ	0xFF5
 13809                           prodh	equ	0xFF4
 13810                           prodl	equ	0xFF3
 13811                           intcon	equ	0xFF2
 13812                           intcon3	equ	0xFF0
 13813                           postinc0	equ	0xFEE
 13814                           fsr0h	equ	0xFEA
 13815                           fsr0l	equ	0xFE9
 13816                           wreg	equ	0xFE8
 13817                           postdec1	equ	0xFE5
 13818                           fsr1h	equ	0xFE2
 13819                           fsr1l	equ	0xFE1
 13820                           indf2	equ	0xFDF
 13821                           postinc2	equ	0xFDE
 13822                           postdec2	equ	0xFDD
 13823                           fsr2h	equ	0xFDA
 13824                           fsr2l	equ	0xFD9
 13825                           status	equ	0xFD8
 13826                           
 13827                           	psect	rparam
 13828  0000                     pclatu	equ	0xFFB
 13829                           pclath	equ	0xFFA
 13830                           tblptru	equ	0xFF8
 13831                           tblptrh	equ	0xFF7
 13832                           tblptrl	equ	0xFF6
 13833                           tablat	equ	0xFF5
 13834                           prodh	equ	0xFF4
 13835                           prodl	equ	0xFF3
 13836                           intcon	equ	0xFF2
 13837                           intcon3	equ	0xFF0
 13838                           postinc0	equ	0xFEE
 13839                           fsr0h	equ	0xFEA
 13840                           fsr0l	equ	0xFE9
 13841                           wreg	equ	0xFE8
 13842                           postdec1	equ	0xFE5
 13843                           fsr1h	equ	0xFE2
 13844                           fsr1l	equ	0xFE1
 13845                           indf2	equ	0xFDF
 13846                           postinc2	equ	0xFDE
 13847                           postdec2	equ	0xFDD
 13848                           fsr2h	equ	0xFDA
 13849                           fsr2l	equ	0xFD9
 13850                           status	equ	0xFD8
 13851                           
 13852                           	psect	temp
 13853  000059                     btemp:
 13854                           	opt stack 0
 13855  000059                     	ds	1
 13856  0000                     int$flags	set	btemp
 13857                           pclatu	equ	0xFFB
 13858                           pclath	equ	0xFFA
 13859                           tblptru	equ	0xFF8
 13860                           tblptrh	equ	0xFF7
 13861                           tblptrl	equ	0xFF6
 13862                           tablat	equ	0xFF5
 13863                           prodh	equ	0xFF4
 13864                           prodl	equ	0xFF3
 13865                           intcon	equ	0xFF2
 13866                           intcon3	equ	0xFF0
 13867                           postinc0	equ	0xFEE
 13868                           fsr0h	equ	0xFEA
 13869                           fsr0l	equ	0xFE9
 13870                           wreg	equ	0xFE8
 13871                           postdec1	equ	0xFE5
 13872                           fsr1h	equ	0xFE2
 13873                           fsr1l	equ	0xFE1
 13874                           indf2	equ	0xFDF
 13875                           postinc2	equ	0xFDE
 13876                           postdec2	equ	0xFDD
 13877                           fsr2h	equ	0xFDA
 13878                           fsr2l	equ	0xFD9
 13879                           status	equ	0xFD8


Data Sizes:
    Strings     307
    Constant    174
    Data        61
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51      88
    BANK0           128    121     121
    BANK1           256     56     125
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_18(CODE[17]), STR_17(CODE[18]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[17]), STR_9(CODE[18]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[8]), STR_5(CODE[15]), STR_4(CODE[14]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), cylinderDir(BANK1[4]), 


Critical Paths under _main in COMRAM

    _printf->___lldiv
    _printf->___lltoft
    _scale->___wmul
    _lcdNewline->_lcdInst
    _fround->___wmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _angleToPulse->___altoft
    _angleToPulse->___awtoft
    ___fttol->___altoft
    ___fttol->___awtoft
    ___ftmul->___altoft
    ___ftmul->___awtoft
    ___ftmul->___wmul
    ___ftdiv->___altoft
    ___ftdiv->___awtoft
    ___ftadd->___altoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _main->_sortBattery
    _sortBattery->_printf
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftsub->___ftadd
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___almod->___aldiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  588814
                                             31 BANK1     25    25      0
                            ___aldiv
                            ___almod
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _readKeypad
                      _showInterface
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  112370
                                            119 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1594
                                             38 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     386
                                             38 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             38 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  383427
                                            120 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   63794
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   63794
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   63794
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   63825
                                            119 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             38 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   63794
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   63794
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   63599
                                             73 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   13901
                                             36 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             42 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             38 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   13622
                                             36 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3344
                                             48 COMRAM     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             38 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             44 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             38 COMRAM     9     3      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             38 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             46 COMRAM     5     1      4
                                              0 BANK0      4     4      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                              0 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             38 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             58 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             38 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                              0 BANK0      9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   24123
                                            106 BANK0      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     847
                                             38 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22459
                                             96 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21152
                                             73 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             58 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                             21 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                              6 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             46 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3025
                                             46 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             46 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             38 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     262
                                             38 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             42 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             40 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             38 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     587
                                             46 COMRAM     2     2      0
                                              6 BANK0      8     0      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     753
                                             38 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             19    19      0    1449
                                             19 COMRAM    19    19      0
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readKeypad
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     38      7D       7       48.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     79      79       5       94.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 27 17:17:05 2017

                  ___altoft@exp 0084                               _n 003C               main@cylinderStart 0132  
          main@cylinderBackward 012E                   ___altoft@sign 0085                     _sortBattery 0E38  
                  ___awdiv@sign 0081             ___wmul@multiplicand 0086                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000                _redirectingServo 0161  
                  ___ftadd@exp1 00B9                    ___ftadd@exp2 00B8             main@cylinderForward 012C  
                  ___ftadd@sign 00B7                             l211 3A12                             l320 2BBE  
                           l136 1A14                             l137 1A1C                             l250 3978  
                           l147 1B26                             l247 396C                             l168 120E  
                           l345 3804                             l426 3692                             l419 376C  
                           l428 369E                             l429 36AA                             l726 09C0  
               ??_showInterface 0034                             l766 0840                             l775 0A2E  
                  __CFG_CPB$OFF 000000                             _PEN 007E2A                    __CFG_CPD$OFF 000000  
                           _SEN 007E28                             _n_C 0042                    ___awmod@sign 002C  
                           wreg 000FE8                    __CFG_LVP$OFF 000000                    ___ftdiv@cntr 008F  
                  ___ftdiv@sign 0094                    __CFG_WDT$OFF 000000                            l1100 1F52  
                          l1030 27D8                            l1120 2548                            l1109 1F7C  
                          l1062 313E                            l1134 2420                            l1127 237A  
                          l1128 23A6                            l1209 341A                            l1091 1E7C  
                          l1219 3282                            l1085 1E1A                            l1159 39F4  
                          l1089 1E54                            l6101 265E                            l6111 2694  
                          l6017 2506                            l6201 0126                            l7011 2C2A  
                          l7003 2BFC                            l6115 26B0                            l6107 267A  
                          l6035 3666                            l6211 0192                            l6109 268A  
                          l6125 33CC                            l6301 04C8                            l6213 0198  
                          l6205 016C                            l7023 2C96                            l7015 2C6E  
                          l7007 2C16                            l6047 3844                            l6055 2F60  
                          l6127 33D8                            l6311 0540                            l6231 0204  
                          l6223 01CC                            l6215 019E                            l6207 0182  
                          l7009 2C24                            l6065 2FE4                            l6137 340C  
                          l6129 33DC                            l6153 3270                            l6145 3216  
                          l6161 351E                            l6321 059E                            l6233 021C  
                          l6217 01A4                            l7019 2C7E                            l5611 1EE2  
                          l6059 2FA0                            l6147 3226                            l6403 0996  
                          l6307 0512                            l6243 0262                            l6227 01F2  
                          l6251 02BE                            l6171 0022                            l5541 30D8  
                          l5613 1EF0                            l5605 1EB4                            l6149 322C  
                          l5701 3176                            l6501 0C5A                            l6405 09A4  
                          l6325 0604                            l6237 0230                            l6229 01FE  
                          l6181 0058                            l7053 1882                            l7045 183E  
                          l7029 17A4                            l5551 3134                            l5543 30F6  
                          l5535 30C0                            l5631 1FA6                            l5623 1F38  
                          l5615 1EFE                            l6079 25B8                            l6159 3512  
                          l6431 0A50                            l6343 06A0                            l6327 060A  
                          l6239 024A                            l6175 0038                            l7071 1AAE  
                          l5641 1FF4                            l5625 1F46                            l5617 1F0A  
                          l6097 264A                            l5713 31A2                            l6513 0CA2  
                          l6441 0AA0                            l6417 09E8                            l6409 09B2  
                          l6353 06F6                            l6257 02D8                            l6249 027A  
                          l6177 004E                            l6601 2EB0                            l5547 310C  
                          l5539 30CE                            l5651 21B2                            l5715 31AC  
                          l5707 3188                            l6523 0CF0                            l6531 0DE8  
                          l6515 0CAE                            l6507 0C86                            l6443 0AA6  
                          l6435 0A78                            l6363 0728                            l6347 06C8  
                          l6339 0650                            l6291 043E                            l6283 03CE  
                          l6267 031E                            l6187 0088                            l6195 00FE  
                          l6611 2ED2                            l7075 1ABE                            l7067 1A24  
                          l5549 312A                            l5733 31F0                            l5725 31D0  
                          l5717 31B0                            l5813 148E                            l6525 0D74  
                          l6533 0DFA                            l6381 080E                            l6365 073C  
                          l6357 0704                            l6613 2ED8                            l6605 2EBE  
                          l7085 1ADC                            l5583 1E28                            l5671 223A  
                          l5831 16BC                            l5823 156E                            l6519 0CC8  
                          l6535 0E02                            l6455 0AEC                            l6471 0B38  
                          l6383 0822                            l6359 071A                            l6375 07F2  
                          l6295 046C                            l6631 2B08                            l6607 2EC4  
                          l6561 3740                            l5681 2278                            l5657 21EC  
                          l5921 26FE                            l5905 2406                            l5729 31DC  
                          l5761 347A                            l5753 345A                            l5745 3440  
                          l6481 0BA2                            l6457 0AF2                            l6473 0B4A  
                          l6393 0868                            l6377 0800                            l6369 0764  
                          l6297 0482                            l6537 0E18                            l6617 2EE6  
                          l6555 3734                            l5595 1E72                            l5675 2258  
                          l5915 26E0                            l5907 2416                            l5755 3462  
                          l5819 1548                            l6387 0844                            l6299 04B2  
                          l6803 28C2                            l6635 2B34                            l6627 2ADC  
                          l6619 2EEC                            l6549 372A                            l5589 1E62  
                          l5685 2296                            l6661 2DA2                            l6581 36B6  
                          l5757 3466                            l5765 3484                            l5749 344C  
                          l5837 1776                            l6493 0C0E                            l6477 0B72  
                          l6397 08BA                            l6645 2B8C                            l6901 11DE  
                          l6567 3748                            l5943 2770                            l5935 2740  
                          l5791 1C92                            l6495 0C18                            l6487 0BD6  
                          l6807 28CC                            l6751 27EA                            l6639 2B60  
                          l6911 121C                            l6665 2DF8                            l5865 2336  
                          l5769 3492                            l5849 3A5C                            l6809 28D8  
                          l6753 27EE                            l6913 1244                            l5955 279E  
                          l5859 2306                            l6499 0C50                            l6755 27F8  
                          l6595 2E9C                            l6669 2E20                            l5965 27C6  
                          l6781 286A                            l6765 2822                            l6757 27FC  
                          l6925 12B2                            l5991 246C                            l5967 27D2  
                          l5959 27AE                            l5895 23D8                            l5799 1D6A  
                          l6599 2EAA                            l6919 1282                            l6863 0FD6  
                          l6961 2CE2                            l5977 32BC                            l6785 2874  
                          l6769 2830                            l6873 10C0                            l6849 0EF8  
                          l6971 2D1A                            l6955 2CC8                            l5979 32CA  
                          l5899 23EC                            l6795 28A2                            l6787 287C  
                          l6883 1156                            l6875 10EE                            l5997 24A6  
                          l6893 11AE                            l6967 2D08                            l6983 2D5E  
                          l6799 28B2                            l6969 2D16                            l6987 2D7A  
                          l6979 2D4E                            l6999 2BE4                            _EEIF 007D0C  
                          STR_1 FFF6                            STR_2 FFC0                            STR_3 FFAF  
                          STR_4 FFE0                            STR_5 FFD1                            STR_6 FFEE  
                          STR_7 FEF0                            STR_8 FF9E                            STR_9 FEDE  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                    printf@tmpval 00E3  
                          u6051 2448                            _PEIE 007F96                            u7004 2E82  
                          u7005 2E7C                            u6071 2482                            u6161 2594  
                          u5611 21C8                            u6180 25DE                            _RCEN 007E2B  
                          u5381 1DC8                            u5391 1DE6                            u7064 2AF8  
                          u6185 25D4                            u7065 2AF4                            u6450 0364  
                          u7074 2B24                            u7075 2B20                            u7084 2B50  
                          u7085 2B4C                            u7094 2B7C                            u5591 218E  
                          u6455 0358                            u7095 2B78                            u6670 0838  
                          u5871 22E6                            u7570 19F4                            u5891 2316  
                          u7707 126A                            u7580 19F6                            u7717 12A2  
                          u7807 362A                            u7727 12DC                            u7817 3638  
                          u7737 3A16                            u7747 3778                            u7667 192C  
                          u7757 37AC                            u7677 0E74                            u7767 3A2A  
                          u7687 0F2A                            u7777 3A3C                            u7697 1052  
                          u7787 35F6                            u7797 3604                            _RSEN 007E29  
                          _n_AA 0040                            _n_9V 003E                            _main 179C  
                          _curr 003A                    ___ftpack@arg 0027                            _keys FEB3  
                  ___ftpack@exp 002A                            _time 0034                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 0059                            prodh 000FF4                            prodl 000FF3  
                          start 000E                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___ftmul@cntr 00A2                    ___param_bank 000000                    ___ftmul@sign 00A3  
                  ___fttol@exp1 00C8                    ___fttol@lval 00C4            __end_ofi2_startTimer 3728  
          __end_of_angleToPulse 2178                 __end_of___aldiv 2D8C                 __end_of___almod 2CA8  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
               __end_of___awdiv 31FA                           _EEADR 000FA9                 __end_of___ftadd 201A  
                         STR_10 FF6B                           STR_11 FF02                           STR_12 FF5A  
                         STR_13 FECB                           STR_14 FF7C                           STR_15 FF14  
                         STR_16 FF49                           STR_17 FF26                           STR_18 FF8D  
                         STR_19 FF38                 __end_of___awmod 349C                 __end_of___ftdiv 257E  
       ??_servoInterruptService 0010                 __end_of___ftneg 3A02                 __end_of___lldiv 342C  
               __end_of___ftmul 22D6                           _T0CON 000FD5                 ___awdiv@divisor 002F  
                         _T1CON 000FCD                 __end_of___llmod 3294                 __end_of___ftsub 3690  
               __end_of___fttol 26C2                           _T3CON 000FB1                           i2l426 36DE  
                         i2l187 2A9E                           i2l428 36EA                           i2l429 36F6  
               ___awdiv@counter 0080                           _TMR0H 000FD7                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
               __end_of_lcdHome 3A8C                    ___lltoft@exp 0033                   _conveyorServo 0149  
               __end_of_lcdInst 3A46                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
               __end_of_initLCD 37B8                  __CFG_EBTRB$OFF 000000                   ___awtoft@sign 0032  
                         _angle 0141                 __end_of_dpowers FE45                           _count 0179  
                         _scale 1332                 __end_of_isdigit 3A64                   ___ftpack@sign 002B  
                         _pulse 0165                           _putch 3A02                           pclath 000FFA  
                         tablat 000FF5                 __end_of_service 2ADA                 __end_of_runMenu 389A  
               __end_of_runTime 3920                           status 000FD8              __size_ofi2___awmod 0070  
                __CFG_PBADEN$ON 000000            __end_of_digitalWrite 2F20                 __initialization 3578  
                  __end_of_main 1B28                    __end_of_keys FEC4                          ??_main 011F  
                 ___fttol@sign1 00C3                   __activetblptr 000002            __size_of_digitalRead 00EA  
          __size_of__tdiv_to_l_ 015C                    _stoppingTime 0057                 i2digitalWrite@p 000E  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
              __end_of___altoft 3324                ___llmod@dividend 0080                          ?_scale 00A4  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          _EECON1 000FA6                          _EECON2 000FA7  
              ___awdiv@dividend 002D                __end_of___awtoft 3868                          ?_putch 0001  
              __end_of___ftpack 315E                __end_of___lltoft 3578                          _INT0IE 007F94  
                        _INT0IF 007F91                          _INT1IE 007F83                          _INT1IF 007F80  
                  sortBattery@V 0116                    sortBattery@i 0119                          i2l4821 302C  
                        i2l5293 2A70                          i2l4831 304E                          i2l4833 3054  
                        i2l4825 303A                          i2l4843 3076                          i2l4827 3040  
                        i2l5299 2A7E                          i2l4837 3062                          i2l4845 307C  
                        i2l4839 3068                          i2l4881 34CA                          i2l4873 34B0  
                        i2l4883 34D2                          i2l4859 3702                          i2l4885 34D6  
                        i2l4893 34F4                          i2l4877 34BC                          i2l4897 3502  
                        i2l4889 34EA                          _TMR0IE 007F95                          _TMR0IF 007F92  
                        _TMR1IE 007CE8                          _TMR1IF 007CF0                          _TMR3IE 007D01  
                        _SSPADD 000FC8                          _TRISC3 007CA3                          _TRISC4 007CA4  
                        _SSPBUF 000FC9                __end_of_dateTime 39DE                __end_of_lcdClear 3A84  
             _angleToPulse$1348 00D9                  __CFG_XINST$OFF 000000                __end_of__powers_ FE93  
                        ___ftge 2F20                __end_of_mainMenu 39B8                       ??___aldiv 002F  
                     ??___almod 002F                          ___wmul 389A                       ??___awdiv 0031  
                     ??___ftadd 00B4                  __CFG_STVREN$ON 000000                       ??___awmod 002B  
                     ??___ftdiv 008C                       ??___ftneg 002A                       ??___lldiv 002F  
                     ??___ftmul 009B                       ??___llmod 0034                       ??___ftsub 0034  
                     ??___fttol 00BE                          _fround 1B28                          clear_0 35BE  
                        clear_1 35CA                ___awdiv@quotient 0082                          _period 0143  
               ___awmod@divisor 0029                       ??_lcdHome 002B                 ___awmod@counter 002B  
                        _servos 016D                       ??_lcdInst 0029                          _printf 0012  
              __end_of_pinSetup 37F8                __end_of_setAngle 2E58               analogRead@channel 0027  
         ___ftmul@f3_as_product 009F                       ??_initLCD 002B                    __pdataCOMRAM 0049  
                     ??_isdigit 0027               __end_ofi2___awmod 350C                   setAngle@angle 00E2  
                  __mediumconst FE1C                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                   setAngle@motor 00E0                       ??_service 0014  
                     ??_runMenu 0034                __end_of_runStats 3946                       ??_runTime 0034  
                i2___awmod@sign 0006                      __accesstop 0080         __end_of__initialization 35D0  
                    ___altoft@c 002F                      ___ftadd@f1 00AE                      ___ftadd@f2 00B1  
                    ___ftge@ff1 0080                      ___ftge@ff2 0083                   ___rparam_used 000001  
                    ___ftdiv@f1 0086                      ___ftdiv@f2 0089                      ___ftdiv@f3 0090  
                    ___ftneg@f1 0027                      ___awtoft@c 002F           __size_ofi2_startTimer 004C  
                    ___ftmul@f1 0095                      ___ftmul@f2 0098                      ___ftsub@f1 00BA  
                    ___ftsub@f2 00BD                      ___fttol@f1 00BA            __end_of_happynewyear FECB  
                __pcstackCOMRAM 0001           __size_of_angleToPulse 015E                    __pidataBANK1 38CC  
                    ___lltoft@c 002F                   _cylinderMotor 0151                   __end_of_scale 179C  
                  ?_sortBattery 0001                   __end_of_putch 3A24              __size_of_lcdNibble 0066  
                    __div_to_l_ 26C2                 __div_to_l_@exp1 0032                 __div_to_l_@cntr 0031  
                       ??_scale 0033                 __div_to_l_@quot 002D                         ??_putch 002B  
                  i2_startTimer 36DC                      __pbssBANK1 0165                    _angleToPulse 201A  
         __size_of_digitalWrite 00C8              __size_of_initTimer 004A              __size_of_initServo 0086  
                    _analogRead 37F8                   __div_to_l_@f1 0027                   __div_to_l_@f2 002A  
                       ?___ftge 0080                         ?___wmul 0084                _sortBattery$1347 0100  
         sortBattery@resolution 010C                       ?___altoft 002F                         ?_fround 00A4  
                    _lcdNewline 3A74                       ?___awtoft 002F                       ?___ftpack 0027  
                       ?_printf 00C9                       ?___lltoft 002F  __size_of_servoInterruptService 00FA  
 __end_of_servoInterruptService 29E8           __end_of_showInterface 28EE                       ?_dateTime 0001  
             i2startTimer@timer 0007                       ?_lcdClear 0001              __size_of_runSelect 0026  
              angleToPulse@a000 00DC                angleToPulse@a180 00D5                    _digitalWrite 2E58  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
                     ?_mainMenu 0001         __size_ofi2_digitalWrite 00C8                         _V_LIM_C 013E  
           main@lastBatteryTime 0130                       ?_pinSetup 0001                       ?_setAngle 00E0  
             __end_of_lcdNibble 3644               __end_of__npowers_ FE6C                         __Hparam 0000  
                    _scale$1351 00A7                         __Lparam 0000                         ___aldiv 2CA8  
                       ___almod 2BC4                 __size_of___ftge 00C8                         ___awdiv 315E  
                       ___ftadd 1DB2                         ___awmod 342C                      _readKeypad 396C  
                       ___ftdiv 2432                         ___ftneg 39DE                         ___lldiv 33AA  
               __size_of___wmul 0032                         ___ftmul 2178                         ___llmod 31FA  
                       ___ftsub 3644                         ___fttol 257E                       ?_runStats 0001  
                       _n_OTHER 0044                      ??___altoft 0080                         __pcinit 3578  
                    ??___awtoft 0032                      ??___ftpack 002C                 __size_of_fround 028A  
                       __ramtop 1000                         _lcdHome 3A84                         _lcdInst 3A24  
                    ??___lltoft 0080                         __ptext0 179C                         __ptext1 0E38  
                       __ptext2 2E58                         __ptext3 2ADA                         __ptext4 37F8  
                       __ptext5 27EA                         __ptext6 38FA                         __ptext7 3920  
                       __ptext8 3946                         __ptext9 3868                 __size_of_printf 0E26  
                       _padPin1 0155                         _padPin2 0159                         _padPin3 0175  
                 startTimer@val 0029                         _initLCD 3772               __end_of_hexpowers FEB3  
                   ?__div_to_l_ 0027                         _lastKey 0048               __end_of_initTimer 3772  
             __end_of_initServo 33AA                         _dpowers FE1D                         _isdigit 3A46  
              ___awmod@dividend 0027                      ??_dateTime 0034                ___aldiv@dividend 0027  
                    ??_lcdClear 002B                         _service 0008                         _runMenu 3868  
                       _runTime 38FA                  __pintcode_body 29E8            end_of_initialization 35D0  
                    ??_mainMenu 0034                   __Lmediumconst FE1C                         int_func 29E8  
                digitalRead@pin 0027                     ?_analogRead 0027                      ??_pinSetup 0027  
                    ??_setAngle 00E4                 ___lldiv@divisor 002B                 ___lldiv@counter 0033  
                setAngle@period 00E6               __end_of_runSelect 396C                         printf@c 00F6  
                       printf@f 00C9                ___aldiv@quotient 0082                         postdec1 000FE5  
                       postdec2 000FDD                 _batteryDetected 0038                         postinc0 000FEE  
                       postinc2 000FDE                      ??_runStats 0034                  __tdiv_to_l_@f1 0027  
                __tdiv_to_l_@f2 002A                   ??_digitalRead 0029                     ?_lcdNewline 0001  
                 ??__tdiv_to_l_ 002D                       _PORTBbits 000F81            __size_of_sortBattery 04FA  
              showInterface@key 00F8             _redirectAngle_OTHER 0055                    _happynewyear FEC4  
            angleToPulse@offset 00D1              sortBattery@V_float 0102                       i2___awmod 349C  
                    _startTimer 3690                     ___ftdiv@exp 0093                     printf@width 00F0  
           __size_of__div_to_l_ 0128                     ___ftmul@exp 009E                     ?_readKeypad 0001  
                __end_of___ftge 2FE8                  __end_of___wmul 38CC                   __pidataCOMRAM 3A64  
                __end_of_fround 1DB2                  __end_of_printf 0E38             __size_of_analogRead 0038  
           start_initialization 3578             __end_of_digitalRead 2BC4             __end_of__tdiv_to_l_ 2432  
                initServo@angle 00EC                  initTimer@timer 0027                  initServo@motor 00EA  
                    ?i2___awmod 0001                  i2_digitalWrite 2FE8             __size_of_lcdNewline 0008  
               ___llmod@divisor 0084                 ___llmod@counter 0088                        ??___ftge 0086  
                      ??___wmul 0031                     __pdataBANK1 0138                __CFG_LPT1OSC$OFF 000000  
                      ??_fround 0033                        ??_printf 00D3               __size_of___altoft 0090  
                    fround@prec 00AD               __size_of___awtoft 0038               __size_of___ftpack 00AE  
             __size_of___lltoft 006C                     __pbssCOMRAM 0034                   __pcstackBANK0 0080  
                 __pcstackBANK1 0100          __end_ofi2_digitalWrite 30B0          sortBattery@targetAngle 0114  
             __size_of_dateTime 0026                     ?_startTimer 0027               __size_of_lcdClear 0008  
           __size_of_readKeypad 0026               __size_of_mainMenu 0026               i2digitalWrite@pin 0007  
             i2digitalWrite@val 0009               __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 0040  
             __size_of_setAngle 00CC                       __pintcode 0008                   __pmediumconst FE1C  
                     _lcdNibble 35DE                        ?___aldiv 0027                        ?___almod 0086  
                      ?___awdiv 002D                        ?___ftadd 00AE                        ?___awmod 0027  
                      ?___ftdiv 0086                        ?___ftneg 0027                        ?___lldiv 0027  
                      ?___ftmul 0095                        ?___llmod 0080                        ?___ftsub 00BA  
                     __npowers_ FE45                        ?___fttol 00BA                     _digitalRead 2ADA  
              ___almod@dividend 0086                        ?_lcdHome 0001                        ?_lcdInst 0001  
                   __tdiv_to_l_ 22D6               __size_of_runStats 0026                    ??__div_to_l_ 002D  
                      ?_initLCD 0001                 startTimer@timer 0027                        ?_isdigit 0001  
                      ?_service 0001                       _hexpowers FE93                        ?_runMenu 0001  
                     _initTimer 3728                       _initServo 3324                        ?_runTime 0001  
               ?i2_digitalWrite 0007           _servoInterruptService 28EE                     ??i2___awmod 0005  
                __size_of_scale 046A                  __size_of_putch 0022                        _AA_float 0145  
               ___aldiv@divisor 002B                 ___aldiv@counter 0080                  sortBattery@Vcc 0109  
                ___wmul@product 0031                        _LATDbits 000F8C                    ??_analogRead 002B  
            __end_of__div_to_l_ 27EA                        i2u461_44 3012                        i2u461_45 300C  
        __size_of_showInterface 0104                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                _padAngle_CLOSE 0049                       _terminate 0046                   digitalWrite@p 002E  
                    service@key 0026                    ??_lcdNewline 002B             __size_of_startTimer 004C  
                     _runSelect 3946               angleToPulse@angle 00C9                 main@cylinderDur 0134  
             ___wmul@multiplier 0084                   lcdNibble@data 0028                      printf@flag 00F2  
                 lcdNibble@temp 0027                      printf@fval 00E9                      printf@prec 00F4  
            __end_of_analogRead 3830                        _V_LIM_AA 013B                        _V_LIM_9V 0138  
                    runMenu@key 00F7                      ?_initTimer 0027                      ?_initServo 00EA  
             sortBattery@signal 0107        sortBattery@pos_v_counter 0105                       copy_data0 358C  
                     copy_data1 35AC              i2___awmod@dividend 0001              __end_of_lcdNewline 3A7C  
                 readKeypad@key 0027                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0027                   ??_sortBattery 00F7  
              __size_of___aldiv 00E4                __size_of___almod 00E4                __size_of___awdiv 009C  
              __size_of___ftadd 0268                __size_of___awmod 0070                __size_of___ftdiv 014C  
              __size_of___ftneg 0024                __size_of___lldiv 0082                        ___altoft 3294  
              __size_of___ftmul 015E                __size_of___llmod 009A                __size_of___ftsub 004C  
              __size_of___fttol 0144                      ?_runSelect 0001                        ___awtoft 3830  
                      ___ftpack 30B0                     _fround$1350 00A7                     _cylinderDir 014D  
                   _fround$1349 00AA                        ___lltoft 350C                     _isdigit$977 0028  
              __size_of_lcdHome 0008                __size_of_lcdInst 0022                       setAngle@i 00E8  
              __size_of_initLCD 0046                        _dateTime 39B8                __size_of_isdigit 001E  
        ?_servoInterruptService 0001                   _showInterface 27EA                        _lcdClear 3A7C  
                      __ptext10 396C                        __ptext11 3992                        __ptext20 342C  
                      __ptext12 39B8                        __ptext21 315E                        __ptext13 0012  
                      __ptext30 3A7C                        __ptext22 22D6                        __ptext14 1332  
                      __ptext31 37B8                        __ptext23 26C2                        __ptext15 3A02  
                      __ptext40 1DB2                        __ptext32 3A84                        __ptext24 350C  
                      __ptext16 3A74                        __ptext41 3830                        __ptext33 3324  
                      __ptext25 31FA                        __ptext17 3A46                        __ptext42 3294  
                      __ptext34 3690                        __ptext26 33AA                        __ptext18 1B28  
                      __ptext51 28EE                        __ptext43 30B0                        __ptext35 2D8C  
                      __ptext27 3644                        __ptext19 389A                        __ptext52 36DC  
                      __ptext44 3728                        __ptext36 201A                        __ptext28 39DE  
                      __ptext53 2FE8                        __ptext45 3772                        __ptext37 257E  
                      __ptext29 2F20                        __ptext54 349C                        __ptext46 3A24  
                      __ptext38 2178                        __ptext47 35DE                        __ptext39 2432  
                      __ptext48 2BC4                        __ptext49 2CA8                        __powers_ FE6C  
              __size_of_service 2AD2                __size_of_runMenu 0032                 i2startTimer@val 0009  
              __size_of_runTime 0026                 ___almod@divisor 008A                   ?i2_startTimer 0007  
                      _mainMenu 3992                        _padServo 015D                 ___almod@counter 002F  
            __end_of_readKeypad 3992                   ?_angleToPulse 00C9                   __size_of_main 038C  
                      _pinSetup 37B8                        _setAngle 2D8C                        _prevTime 017B  
              sortBattery@V_219 011C                     ??_lcdNibble 0027                   _padAngle_OPEN 004D  
                      int$flags 0059                sortBattery@i_221 0112                        _runStats 3920  
              sortBattery@V_max 010F                       printf@idx 00DC                       printf@len 00DF  
                     printf@exp 00E7                       printf@val 00EC                        main@prev 0136  
             i2___awmod@divisor 0003                       putch@data 002B               i2___awmod@counter 0005  
           __end_of_sortBattery 1332                      _INTCONbits 000FF2                  ?_showInterface 0001  
                 ?_digitalWrite 0027                     ??_initTimer 0029                     ??_initServo 00EE  
                      isdigit@c 0029                        scale@scl 00AA                  ??i2_startTimer 000D  
                  ??_startTimer 002D                        intlevel2 0000                __tdiv_to_l_@exp1 0085  
              __tdiv_to_l_@cntr 0084                  ??_angleToPulse 00CD                __tdiv_to_l_@quot 0080  
              ___lldiv@dividend 0027                _redirectAngle_AA 0051                _redirectAngle_9V 004F  
                      printf@ap 00E1                        printf@cp 00DD                     lcdInst@data 002A  
                  ?_digitalRead 0027                     ??_runSelect 0034                    ?__tdiv_to_l_ 0027  
            __end_of_startTimer 36DC                     _printf$1352 00D9                ??i2_digitalWrite 000B  
              ___lldiv@quotient 002F                  ??_digitalWrite 002B                    ___aldiv@sign 0081  
               _redirectAngle_C 0053                _padAngle_NEUTRAL 004B                 digitalWrite@pin 0027  
               digitalWrite@val 0029                    ___almod@sign 0030  
