

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 18 15:52:04 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.40
    21                           ; Generated 01/12/2016 GMT
    22                           ; 
    23                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4620 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	smallconst
    56  001000                     __psmallconst:
    57                           	opt stack 0
    58  001000  00                 	db	0
    59  001001                     _keys:
    60                           	opt stack 0
    61  001001  31                 	db	49
    62  001002  32                 	db	50
    63  001003  33                 	db	51
    64  001004  41                 	db	65
    65  001005  34                 	db	52
    66  001006  35                 	db	53
    67  001007  36                 	db	54
    68  001008  42                 	db	66
    69  001009  37                 	db	55
    70  00100A  38                 	db	56
    71  00100B  39                 	db	57
    72  00100C  43                 	db	67
    73  00100D  2A                 	db	42
    74  00100E  30                 	db	48
    75  00100F  23                 	db	35
    76  001010  44                 	db	68
    77  001011  00                 	db	0
    78  001012                     __end_of_keys:
    79                           	opt stack 0
    80  001012                     _dpowers:
    81                           	opt stack 0
    82  001012  0001               	dw	1
    83  001014  000A               	dw	10
    84  001016  0064               	dw	100
    85  001018  03E8               	dw	1000
    86  00101A  2710               	dw	10000
    87  00101C                     __end_of_dpowers:
    88                           	opt stack 0
    89  0000                     _ADCON0	set	4034
    90  0000                     _ADCON1	set	4033
    91  0000                     _LATB	set	3978
    92  0000                     _LATC	set	3979
    93  0000                     _LATD	set	3980
    94  0000                     _LATDbits	set	3980
    95  0000                     _PORTB	set	3969
    96  0000                     _PORTBbits	set	3969
    97  0000                     _TRISB	set	3987
    98  0000                     _TRISC	set	3988
    99  0000                     _TRISD	set	3989
   100  00101C                     STR_1:
   101  00101C  25                 	db	37
   102  00101D  64                 	db	100	;'d'
   103  00101E  0A                 	db	10
   104  00101F  00                 	db	0
   105  001020                     STR_2:
   106  001020  32                 	db	50	;'2'
   107  001021  32                 	db	50	;'2'
   108  001022  33                 	db	51	;'3'
   109  001023  00                 	db	0
   110                           
   111                           ; #config settings
   112  001024  00                 	db	0	; dummy byte at the end
   113  0000                     
   114                           	psect	cinit
   115  001332                     __pcinit:
   116                           	opt stack 0
   117  001332                     start_initialization:
   118                           	opt stack 0
   119  001332                     __initialization:
   120                           	opt stack 0
   121  001332                     end_of_initialization:
   122                           	opt stack 0
   123  001332                     __end_of__initialization:
   124                           	opt stack 0
   125  001332  0E00               	movlw	low (__Lmediumconst shr (0+16))
   126  001334  6EF8               	movwf	tblptru,c
   127  001336  0100               	movlb	0
   128  001338  EFA2  F008         	goto	_main	;jump to C main() function
   129                           tblptru	equ	0xFF8
   130                           
   131                           	psect	cstackCOMRAM
   132  000001                     __pcstackCOMRAM:
   133                           	opt stack 0
   134  000001                     ?___lwdiv:
   135                           	opt stack 0
   136  000001                     lcdNibble@temp:
   137                           	opt stack 0
   138  000001                     ___lwdiv@dividend:
   139                           	opt stack 0
   140                           
   141                           ; 2 bytes @ 0x0
   142  000001                     	ds	1
   143  000002                     lcdNibble@data:
   144                           	opt stack 0
   145                           
   146                           ; 1 bytes @ 0x1
   147  000002                     	ds	1
   148  000003                     lcdInst@data:
   149                           	opt stack 0
   150  000003                     ___lwdiv@divisor:
   151                           	opt stack 0
   152                           
   153                           ; 2 bytes @ 0x2
   154  000003                     	ds	1
   155  000004                     ??_initLCD:
   156  000004                     putch@data:
   157                           	opt stack 0
   158                           
   159                           ; 1 bytes @ 0x3
   160  000004                     	ds	1
   161  000005                     ___lwdiv@quotient:
   162                           	opt stack 0
   163                           
   164                           ; 2 bytes @ 0x4
   165  000005                     	ds	2
   166  000007                     ___lwdiv@counter:
   167                           	opt stack 0
   168                           
   169                           ; 1 bytes @ 0x6
   170  000007                     	ds	1
   171  000008                     ?___lwmod:
   172                           	opt stack 0
   173  000008                     ___lwmod@dividend:
   174                           	opt stack 0
   175                           
   176                           ; 2 bytes @ 0x7
   177  000008                     	ds	2
   178  00000A                     ___lwmod@divisor:
   179                           	opt stack 0
   180                           
   181                           ; 2 bytes @ 0x9
   182  00000A                     	ds	2
   183  00000C                     ___lwmod@counter:
   184                           	opt stack 0
   185                           
   186                           ; 1 bytes @ 0xB
   187  00000C                     	ds	1
   188  00000D                     ?_printf:
   189                           	opt stack 0
   190  00000D                     printf@f:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0xC
   194  00000D                     	ds	4
   195  000011                     ??_printf:
   196                           
   197                           ; 1 bytes @ 0x10
   198  000011                     	ds	1
   199  000012                     printf@ap:
   200                           	opt stack 0
   201                           
   202                           ; 2 bytes @ 0x11
   203  000012                     	ds	2
   204  000014                     printf@flag:
   205                           	opt stack 0
   206                           
   207                           ; 1 bytes @ 0x13
   208  000014                     	ds	1
   209  000015                     printf@prec:
   210                           	opt stack 0
   211                           
   212                           ; 1 bytes @ 0x14
   213  000015                     	ds	1
   214  000016                     printf@val:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x15
   218  000016                     	ds	2
   219  000018                     printf@c:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0x17
   223  000018                     	ds	1
   224  000019                     ??_main:
   225                           
   226                           ; 1 bytes @ 0x18
   227  000019                     	ds	1
   228  00001A                     main@f:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x19
   232  00001A                     	ds	2
   233  00001C                     main@keypress:
   234                           	opt stack 0
   235                           
   236                           ; 1 bytes @ 0x1B
   237  00001C                     	ds	1
   238  00001D                     main@temp:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0x1C
   242  00001D                     	ds	1
   243  00001E                     main@i:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0x1D
   247  00001E                     	ds	1
   248                           tblptru	equ	0xFF8
   249                           
   250 ;;
   251 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   252 ;;
   253 ;; *************** function _main *****************
   254 ;; Defined at:
   255 ;;		line 21 in file "main.c"
   256 ;; Parameters:    Size  Location     Type
   257 ;;		None
   258 ;; Auto vars:     Size  Location     Type
   259 ;;  i               1   29[COMRAM] unsigned char 
   260 ;;  f               2   25[COMRAM] int 
   261 ;;  temp            1   28[COMRAM] unsigned char 
   262 ;;  keypress        1   27[COMRAM] unsigned char 
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1    wreg      void 
   265 ;; Registers used:
   266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : 0/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   273 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   274 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   275 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   276 ;;Total ram usage:        6 bytes
   277 ;; Hardware stack levels required when called:    5
   278 ;; This function calls:
   279 ;;		_initLCD
   280 ;;		_printf
   281 ;;		_putch
   282 ;; This function is called by:
   283 ;;		Startup code after reset
   284 ;; This function uses a non-reentrant model
   285 ;;
   286                           
   287                           	psect	text0
   288  001144                     __ptext0:
   289                           	opt stack 0
   290  001144                     _main:
   291                           	opt stack 26
   292                           
   293                           ;main.c: 22: TRISC = 0x00;
   294                           
   295                           ;incstack = 0
   296  001144  0E00               	movlw	0
   297  001146  6E94               	movwf	3988,c	;volatile
   298                           
   299                           ;main.c: 23: TRISD = 0x00;
   300  001148  0E00               	movlw	0
   301  00114A  6E95               	movwf	3989,c	;volatile
   302                           
   303                           ;main.c: 24: TRISB = 0xFF;
   304  00114C  6893               	setf	3987,c	;volatile
   305                           
   306                           ;main.c: 25: LATB = 0x00;
   307  00114E  0E00               	movlw	0
   308  001150  6E8A               	movwf	3978,c	;volatile
   309                           
   310                           ;main.c: 26: LATC = 0x00;
   311  001152  0E00               	movlw	0
   312  001154  6E8B               	movwf	3979,c	;volatile
   313                           
   314                           ;main.c: 27: ADCON0 = 0x00;
   315  001156  0E00               	movlw	0
   316  001158  6EC2               	movwf	4034,c	;volatile
   317                           
   318                           ;main.c: 28: ADCON1 = 0xFF;
   319  00115A  68C1               	setf	4033,c	;volatile
   320  00115C                     l33:
   321                           
   322                           ;main.c: 32: int f = 5;
   323  00115C  0E00               	movlw	0
   324  00115E  6E1B               	movwf	main@f+1,c
   325  001160  0E05               	movlw	5
   326  001162  6E1A               	movwf	main@f,c
   327                           
   328                           ;main.c: 33: initLCD();
   329  001164  EC42  F009         	call	_initLCD	;wreg free
   330                           
   331                           ;main.c: 34: printf("%d\n",f);
   332  001168  0E1C               	movlw	low STR_1
   333  00116A  6E0D               	movwf	printf@f,c
   334  00116C  0E10               	movlw	high STR_1
   335  00116E  6E0E               	movwf	printf@f+1,c
   336  001170  C01A  F00F         	movff	main@f,?_printf+2
   337  001174  C01B  F010         	movff	main@f+1,?_printf+3
   338  001178  EC13  F008         	call	_printf	;wreg free
   339                           
   340                           ;main.c: 35: printf("223");
   341  00117C  0E20               	movlw	low STR_2
   342  00117E  6E0D               	movwf	printf@f,c
   343  001180  0E10               	movlw	high STR_2
   344  001182  6E0E               	movwf	printf@f+1,c
   345  001184  EC13  F008         	call	_printf	;wreg free
   346  001188                     l34:
   347  001188  A281               	btfss	3969,1,c	;volatile
   348  00118A  D7FE               	goto	l34
   349                           
   350                           ;main.c: 40: }
   351                           ;main.c: 41: unsigned char keypress = (PORTB & 0xF0)>>4;
   352  00118C  3881               	swapf	3969,w,c	;volatile
   353  00118E  0B0F               	andlw	15
   354  001190  0B0F               	andlw	15
   355  001192  6E1C               	movwf	main@keypress,c
   356  001194                     l37:
   357  001194  B281               	btfsc	3969,1,c	;volatile
   358  001196  D7FE               	goto	l37
   359                           
   360                           ;main.c: 45: }
   361                           ;main.c: 47: initLCD();
   362  001198  EC42  F009         	call	_initLCD	;wreg free
   363                           
   364                           ;main.c: 49: __nop();
   365  00119C  F000               	nop	
   366                           
   367                           ;main.c: 50: __nop();
   368  00119E  F000               	nop	
   369                           
   370                           ;main.c: 51: unsigned char temp = keys[keypress];
   371  0011A0  501C               	movf	main@keypress,w,c
   372  0011A2  0D01               	mullw	1
   373  0011A4  0E01               	movlw	low _keys
   374  0011A6  24F3               	addwf	prodl,w,c
   375  0011A8  6EF6               	movwf	tblptrl,c
   376  0011AA  0E10               	movlw	high _keys
   377  0011AC  20F4               	addwfc	prodh,w,c
   378  0011AE  6EF7               	movwf	tblptrh,c
   379  0011B0                     	if	0	;There are less than 3 active tblptr bytes
   380  0011B0                     	endif
   381  0011B0  0008               	tblrd		*
   382  0011B2  CFF5 F01D          	movff	tablat,main@temp
   383                           
   384                           ;main.c: 52: putch(temp);
   385  0011B6  501D               	movf	main@temp,w,c
   386  0011B8  EC86  F009         	call	_putch
   387                           
   388                           ;main.c: 54: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
   389  0011BC  0E00               	movlw	0
   390  0011BE  6E1E               	movwf	main@i,c
   391  0011C0                     l1007:
   392  0011C0  0E63               	movlw	99
   393  0011C2  641E               	cpfsgt	main@i,c
   394  0011C4  D001               	goto	l1011
   395  0011C6  D7CA               	goto	l33
   396  0011C8                     l1011:
   397  0011C8  0E1A               	movlw	26
   398  0011CA  6E19               	movwf	??_main& (0+255),c
   399  0011CC  0EF8               	movlw	248
   400  0011CE                     u387:
   401  0011CE  2EE8               	decfsz	wreg,f,c
   402  0011D0  D7FE               	bra	u387
   403  0011D2  2E19               	decfsz	??_main& (0+255),f,c
   404  0011D4  D7FC               	bra	u387
   405  0011D6  D000               	nop2	
   406  0011D8  2A1E               	incf	main@i,f,c
   407  0011DA  D7F2               	goto	l1007
   408  0011DC                     __end_of_main:
   409                           	opt stack 0
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           prodh	equ	0xFF4
   415                           prodl	equ	0xFF3
   416                           wreg	equ	0xFE8
   417                           
   418 ;; *************** function _printf *****************
   419 ;; Defined at:
   420 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;  f               2   12[COMRAM] PTR const unsigned char 
   423 ;;		 -> STR_2(4), STR_1(4), 
   424 ;; Auto vars:     Size  Location     Type
   425 ;;  tmpval          4    0        struct .
   426 ;;  cp              3    0        PTR const unsigned char 
   427 ;;  val             2   21[COMRAM] unsigned int 
   428 ;;  ap              2   17[COMRAM] PTR void [1]
   429 ;;		 -> ?_printf(2), 
   430 ;;  len             2    0        unsigned int 
   431 ;;  c               1   23[COMRAM] char 
   432 ;;  prec            1   20[COMRAM] char 
   433 ;;  flag            1   19[COMRAM] unsigned char 
   434 ;; Return value:  Size  Location     Type
   435 ;;                  2   12[COMRAM] int 
   436 ;; Registers used:
   437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   443 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;Total ram usage:       12 bytes
   448 ;; Hardware stack levels used:    1
   449 ;; Hardware stack levels required when called:    4
   450 ;; This function calls:
   451 ;;		___lwdiv
   452 ;;		___lwmod
   453 ;;		_putch
   454 ;; This function is called by:
   455 ;;		_main
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text1
   460  001026                     __ptext1:
   461                           	opt stack 0
   462  001026                     _printf:
   463                           	opt stack 26
   464                           
   465                           ;doprnt.c: 466: va_list ap;
   466                           ;doprnt.c: 499: signed char c;
   467                           ;doprnt.c: 506: signed char prec;
   468                           ;doprnt.c: 508: unsigned char flag;
   469                           ;doprnt.c: 523: union {
   470                           ;doprnt.c: 524: unsigned long vd;
   471                           ;doprnt.c: 525: double integ;
   472                           ;doprnt.c: 526: } tmpval;
   473                           ;doprnt.c: 528: unsigned int val;
   474                           ;doprnt.c: 529: unsigned len;
   475                           ;doprnt.c: 530: const char * cp;
   476                           ;doprnt.c: 533: *ap = __va_start();
   477                           
   478                           ;incstack = 0
   479  001026  0E0F               	movlw	low (?_printf+2)
   480  001028  6E12               	movwf	printf@ap,c
   481  00102A  0E00               	movlw	high (?_printf+2)
   482  00102C  6E13               	movwf	printf@ap+1,c
   483                           
   484                           ;doprnt.c: 536: while(c = *f++) {
   485  00102E  D07D               	goto	l979
   486  001030                     l933:
   487                           
   488                           ;doprnt.c: 538: if(c != '%')
   489  001030  0E25               	movlw	37
   490  001032  1818               	xorwf	printf@c,w,c
   491  001034  B4D8               	btfsc	status,2,c
   492  001036  D004               	goto	l937
   493                           
   494                           ;doprnt.c: 540: {
   495                           ;doprnt.c: 541: (putch(c) );
   496  001038  5018               	movf	printf@c,w,c
   497  00103A  EC86  F009         	call	_putch
   498                           
   499                           ;doprnt.c: 542: continue;
   500  00103E  D075               	goto	l979
   501  001040                     l937:
   502                           
   503                           ;doprnt.c: 543: }
   504                           ;doprnt.c: 548: flag = 0;
   505  001040  0E00               	movlw	0
   506  001042  6E14               	movwf	printf@flag,c
   507                           
   508                           ;doprnt.c: 822: }
   509                           
   510                           ;doprnt.c: 813: continue;
   511                           
   512                           ;doprnt.c: 802: default:
   513                           
   514                           ;doprnt.c: 698: case 'i':
   515                           ;doprnt.c: 699: break;
   516                           
   517                           ;doprnt.c: 697: case 'd':
   518                           
   519                           ;doprnt.c: 638: goto alldone;
   520                           
   521                           ;doprnt.c: 637: case 0:
   522                           
   523                           ;doprnt.c: 635: switch(c = *f++) {
   524  001044  C00D  FFF6         	movff	printf@f,tblptrl
   525  001048  C00E  FFF7         	movff	printf@f+1,tblptrh
   526  00104C  4A0D               	infsnz	printf@f,f,c
   527  00104E  2A0E               	incf	printf@f+1,f,c
   528  001050                     	if	0	;tblptru may be non-zero
   529  001050                     	endif
   530  001050                     	if	0	;tblptru may be non-zero
   531  001050                     	endif
   532  001050  0008               	tblrd		*
   533  001052  CFF5 F018          	movff	tablat,printf@c
   534  001056  5018               	movf	printf@c,w,c
   535                           
   536                           ; Switch size 1, requested type "space"
   537                           ; Number of cases is 3, Range of values is 0 to 105
   538                           ; switch strategies available:
   539                           ; Name         Instructions Cycles
   540                           ; simple_byte           10     6 (average)
   541                           ;	Chosen strategy is simple_byte
   542  001058  0A00               	xorlw	0	; case 0
   543  00105A  B4D8               	btfsc	status,2,c
   544  00105C  0012               	return	
   545  00105E  0A64               	xorlw	100	; case 100
   546  001060  B4D8               	btfsc	status,2,c
   547  001062  D003               	goto	l943
   548  001064  0A0D               	xorlw	13	; case 105
   549  001066  A4D8               	btfss	status,2,c
   550  001068  D060               	goto	l979
   551  00106A                     l943:
   552                           
   553                           ;doprnt.c: 1253: {
   554                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   555  00106A  C012  FFD9         	movff	printf@ap,fsr2l
   556  00106E  C013  FFDA         	movff	printf@ap+1,fsr2h
   557  001072  CFDE F016          	movff	postinc2,printf@val
   558  001076  CFDD F017          	movff	postdec2,printf@val+1
   559  00107A  0E02               	movlw	2
   560  00107C  2612               	addwf	printf@ap,f,c
   561  00107E  0E00               	movlw	0
   562  001080  2213               	addwfc	printf@ap+1,f,c
   563                           
   564                           ;doprnt.c: 1261: if((int)val < 0) {
   565  001082  AE17               	btfss	printf@val+1,7,c
   566  001084  D006               	goto	l953
   567                           
   568                           ;doprnt.c: 1262: flag |= 0x03;
   569  001086  0E03               	movlw	3
   570  001088  1214               	iorwf	printf@flag,f,c
   571                           
   572                           ;doprnt.c: 1263: val = -val;
   573  00108A  6C16               	negf	printf@val,c
   574  00108C  1E17               	comf	printf@val+1,f,c
   575  00108E  B0D8               	btfsc	status,0,c
   576  001090  2A17               	incf	printf@val+1,f,c
   577  001092                     l953:
   578                           
   579                           ;doprnt.c: 1264: }
   580                           ;doprnt.c: 1266: }
   581                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   582  001092  0E01               	movlw	1
   583  001094  6E18               	movwf	printf@c,c
   584  001096                     l955:
   585  001096  0E05               	movlw	5
   586  001098  1818               	xorwf	printf@c,w,c
   587  00109A  B4D8               	btfsc	status,2,c
   588  00109C  D012               	goto	l967
   589                           
   590                           ;doprnt.c: 1306: if(val < dpowers[c])
   591  00109E  5018               	movf	printf@c,w,c
   592  0010A0  0D02               	mullw	2
   593  0010A2  0E12               	movlw	low _dpowers
   594  0010A4  24F3               	addwf	prodl,w,c
   595  0010A6  6EF6               	movwf	tblptrl,c
   596  0010A8  0E10               	movlw	high _dpowers
   597  0010AA  20F4               	addwfc	prodh,w,c
   598  0010AC  6EF7               	movwf	tblptrh,c
   599  0010AE                     	if	0	;There are less than 3 active tblptr bytes
   600  0010AE                     	endif
   601  0010AE  0009               	tblrd		*+
   602  0010B0  50F5               	movf	tablat,w,c
   603  0010B2  5C16               	subwf	printf@val,w,c
   604  0010B4  0009               	tblrd		*+
   605  0010B6  50F5               	movf	tablat,w,c
   606  0010B8  5817               	subwfb	printf@val+1,w,c
   607  0010BA  A0D8               	btfss	status,0,c
   608  0010BC  D002               	goto	l967
   609                           
   610                           ;doprnt.c: 1307: break;
   611  0010BE  2A18               	incf	printf@c,f,c
   612  0010C0  D7EA               	goto	l955
   613  0010C2                     l967:
   614                           
   615                           ;doprnt.c: 1422: {
   616                           ;doprnt.c: 1438: if(flag & 0x03)
   617  0010C2  C014  F011         	movff	printf@flag,??_printf
   618  0010C6  0E03               	movlw	3
   619  0010C8  1611               	andwf	??_printf,f,c
   620  0010CA  B4D8               	btfsc	status,2,c
   621  0010CC  D003               	goto	l971
   622                           
   623                           ;doprnt.c: 1439: (putch('-') );
   624  0010CE  0E2D               	movlw	45
   625  0010D0  EC86  F009         	call	_putch
   626  0010D4                     l971:
   627                           
   628                           ;doprnt.c: 1469: }
   629                           ;doprnt.c: 1472: prec = c;
   630  0010D4  C018  F015         	movff	printf@c,printf@prec
   631                           
   632                           ;doprnt.c: 1474: while(prec--) {
   633  0010D8  D024               	goto	l977
   634  0010DA                     l973:
   635                           
   636                           ;doprnt.c: 1478: {
   637                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   638  0010DA  5015               	movf	printf@prec,w,c
   639  0010DC  0D02               	mullw	2
   640  0010DE  0E12               	movlw	low _dpowers
   641  0010E0  24F3               	addwf	prodl,w,c
   642  0010E2  6EF6               	movwf	tblptrl,c
   643  0010E4  0E10               	movlw	high _dpowers
   644  0010E6  20F4               	addwfc	prodh,w,c
   645  0010E8  6EF7               	movwf	tblptrh,c
   646  0010EA                     	if	0	;There are less than 3 active tblptr bytes
   647  0010EA                     	endif
   648  0010EA  0009               	tblrd		*+
   649  0010EC  CFF5 F003          	movff	tablat,___lwdiv@divisor
   650  0010F0  000A               	tblrd		*-
   651  0010F2  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   652  0010F6  C016  F001         	movff	printf@val,___lwdiv@dividend
   653  0010FA  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
   654  0010FE  EC19  F009         	call	___lwdiv	;wreg free
   655  001102  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   656  001106  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   657  00110A  0E00               	movlw	0
   658  00110C  6E0B               	movwf	___lwmod@divisor+1,c
   659  00110E  0E0A               	movlw	10
   660  001110  6E0A               	movwf	___lwmod@divisor,c
   661  001112  EC65  F009         	call	___lwmod	;wreg free
   662  001116  5008               	movf	?___lwmod,w,c
   663  001118  0F30               	addlw	48
   664  00111A  6E18               	movwf	printf@c,c
   665                           
   666                           ;doprnt.c: 1523: }
   667                           ;doprnt.c: 1524: (putch(c) );
   668  00111C  5018               	movf	printf@c,w,c
   669  00111E  EC86  F009         	call	_putch
   670  001122                     l977:
   671  001122  0615               	decf	printf@prec,f,c
   672  001124  2815               	incf	printf@prec,w,c
   673  001126  A4D8               	btfss	status,2,c
   674  001128  D7D8               	goto	l973
   675  00112A                     l979:
   676  00112A  C00D  FFF6         	movff	printf@f,tblptrl
   677  00112E  C00E  FFF7         	movff	printf@f+1,tblptrh
   678  001132  4A0D               	infsnz	printf@f,f,c
   679  001134  2A0E               	incf	printf@f+1,f,c
   680  001136                     	if	0	;tblptru may be non-zero
   681  001136                     	endif
   682  001136                     	if	0	;tblptru may be non-zero
   683  001136                     	endif
   684  001136  0008               	tblrd		*
   685  001138  CFF5 F018          	movff	tablat,printf@c
   686  00113C  5018               	movf	printf@c,w,c
   687  00113E  B4D8               	btfsc	status,2,c
   688  001140  0012               	return	
   689  001142  D776               	goto	l933
   690  001144                     __end_of_printf:
   691                           	opt stack 0
   692                           tblptru	equ	0xFF8
   693                           tblptrh	equ	0xFF7
   694                           tblptrl	equ	0xFF6
   695                           tablat	equ	0xFF5
   696                           prodh	equ	0xFF4
   697                           prodl	equ	0xFF3
   698                           wreg	equ	0xFE8
   699                           postinc2	equ	0xFDE
   700                           postdec2	equ	0xFDD
   701                           fsr2h	equ	0xFDA
   702                           fsr2l	equ	0xFD9
   703                           status	equ	0xFD8
   704                           
   705 ;; *************** function _putch *****************
   706 ;; Defined at:
   707 ;;		line 37 in file "lcd.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;  data            1    wreg     unsigned char 
   710 ;; Auto vars:     Size  Location     Type
   711 ;;  data            1    3[COMRAM] unsigned char 
   712 ;; Return value:  Size  Location     Type
   713 ;;                  1    wreg      void 
   714 ;; Registers used:
   715 ;;		wreg, status,2, status,0, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   724 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   725 ;;Total ram usage:        1 bytes
   726 ;; Hardware stack levels used:    1
   727 ;; Hardware stack levels required when called:    3
   728 ;; This function calls:
   729 ;;		_lcdNewline
   730 ;;		_lcdNibble
   731 ;; This function is called by:
   732 ;;		_main
   733 ;;		_printf
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           	psect	text2
   738  00130C                     __ptext2:
   739                           	opt stack 0
   740  00130C                     _putch:
   741                           	opt stack 27
   742                           
   743                           ;incstack = 0
   744                           ;putch@data stored from wreg
   745  00130C  6E04               	movwf	putch@data,c
   746                           
   747                           ;lcd.c: 38: if(data == '\n')lcdNewline();
   748  00130E  0E0A               	movlw	10
   749  001310  1804               	xorwf	putch@data,w,c
   750  001312  A4D8               	btfss	status,2,c
   751  001314  D003               	goto	l65
   752  001316  EC9E  F009         	call	_lcdNewline	;wreg free
   753  00131A  0012               	return	
   754  00131C                     l65:
   755                           
   756                           ;lcd.c: 39: else
   757                           ;lcd.c: 40: {
   758                           ;lcd.c: 41: LATDbits.LATD2 = 1;
   759  00131C  848C               	bsf	3980,2,c	;volatile
   760                           
   761                           ;lcd.c: 42: lcdNibble(data);
   762  00131E  5004               	movf	putch@data,w,c
   763  001320  ECEE  F008         	call	_lcdNibble
   764  001324  0012               	return	
   765  001326                     __end_of_putch:
   766                           	opt stack 0
   767                           tblptru	equ	0xFF8
   768                           tblptrh	equ	0xFF7
   769                           tblptrl	equ	0xFF6
   770                           tablat	equ	0xFF5
   771                           prodh	equ	0xFF4
   772                           prodl	equ	0xFF3
   773                           wreg	equ	0xFE8
   774                           postinc2	equ	0xFDE
   775                           postdec2	equ	0xFDD
   776                           fsr2h	equ	0xFDA
   777                           fsr2l	equ	0xFD9
   778                           status	equ	0xFD8
   779                           
   780 ;; *************** function _lcdNewline *****************
   781 ;; Defined at:
   782 ;;		line 75 in file "lcd.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;		None
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, status,2, status,0, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;Total ram usage:        0 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    2
   803 ;; This function calls:
   804 ;;		_lcdInst
   805 ;; This function is called by:
   806 ;;		_putch
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text3
   811  00133C                     __ptext3:
   812                           	opt stack 0
   813  00133C                     _lcdNewline:
   814                           	opt stack 27
   815                           
   816                           ;lcd.c: 76: lcdInst(0b11000000);
   817                           
   818                           ;incstack = 0
   819  00133C  0EC0               	movlw	192
   820  00133E  EC93  F009         	call	_lcdInst
   821  001342  0012               	return		;funcret
   822  001344                     __end_of_lcdNewline:
   823                           	opt stack 0
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           prodh	equ	0xFF4
   829                           prodl	equ	0xFF3
   830                           wreg	equ	0xFE8
   831                           postinc2	equ	0xFDE
   832                           postdec2	equ	0xFDD
   833                           fsr2h	equ	0xFDA
   834                           fsr2l	equ	0xFD9
   835                           status	equ	0xFD8
   836                           
   837 ;; *************** function ___lwmod *****************
   838 ;; Defined at:
   839 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;  dividend        2    7[COMRAM] unsigned int 
   842 ;;  divisor         2    9[COMRAM] unsigned int 
   843 ;; Auto vars:     Size  Location     Type
   844 ;;  counter         1   11[COMRAM] unsigned char 
   845 ;; Return value:  Size  Location     Type
   846 ;;                  2    7[COMRAM] unsigned int 
   847 ;; Registers used:
   848 ;;		wreg, status,2, status,0
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   854 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   857 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   858 ;;Total ram usage:        5 bytes
   859 ;; Hardware stack levels used:    1
   860 ;; This function calls:
   861 ;;		Nothing
   862 ;; This function is called by:
   863 ;;		_printf
   864 ;; This function uses a non-reentrant model
   865 ;;
   866                           
   867                           	psect	text4
   868  0012CA                     __ptext4:
   869                           	opt stack 0
   870  0012CA                     ___lwmod:
   871                           	opt stack 29
   872                           
   873                           ;incstack = 0
   874  0012CA  500A               	movf	___lwmod@divisor,w,c
   875  0012CC  100B               	iorwf	___lwmod@divisor+1,w,c
   876  0012CE  B4D8               	btfsc	status,2,c
   877  0012D0  D018               	goto	l522
   878  0012D2  0E01               	movlw	1
   879  0012D4  6E0C               	movwf	___lwmod@counter,c
   880  0012D6  D004               	goto	l921
   881  0012D8                     l919:
   882  0012D8  90D8               	bcf	status,0,c
   883  0012DA  360A               	rlcf	___lwmod@divisor,f,c
   884  0012DC  360B               	rlcf	___lwmod@divisor+1,f,c
   885  0012DE  2A0C               	incf	___lwmod@counter,f,c
   886  0012E0                     l921:
   887  0012E0  AE0B               	btfss	___lwmod@divisor+1,7,c
   888  0012E2  D7FA               	goto	l919
   889  0012E4                     l923:
   890  0012E4  500A               	movf	___lwmod@divisor,w,c
   891  0012E6  5C08               	subwf	___lwmod@dividend,w,c
   892  0012E8  500B               	movf	___lwmod@divisor+1,w,c
   893  0012EA  5809               	subwfb	___lwmod@dividend+1,w,c
   894  0012EC  A0D8               	btfss	status,0,c
   895  0012EE  D004               	goto	l927
   896  0012F0  500A               	movf	___lwmod@divisor,w,c
   897  0012F2  5E08               	subwf	___lwmod@dividend,f,c
   898  0012F4  500B               	movf	___lwmod@divisor+1,w,c
   899  0012F6  5A09               	subwfb	___lwmod@dividend+1,f,c
   900  0012F8                     l927:
   901  0012F8  90D8               	bcf	status,0,c
   902  0012FA  320B               	rrcf	___lwmod@divisor+1,f,c
   903  0012FC  320A               	rrcf	___lwmod@divisor,f,c
   904  0012FE  2E0C               	decfsz	___lwmod@counter,f,c
   905  001300  D7F1               	goto	l923
   906  001302                     l522:
   907  001302  C008  F008         	movff	___lwmod@dividend,?___lwmod
   908  001306  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   909  00130A  0012               	return		;funcret
   910  00130C                     __end_of___lwmod:
   911                           	opt stack 0
   912                           tblptru	equ	0xFF8
   913                           tblptrh	equ	0xFF7
   914                           tblptrl	equ	0xFF6
   915                           tablat	equ	0xFF5
   916                           prodh	equ	0xFF4
   917                           prodl	equ	0xFF3
   918                           wreg	equ	0xFE8
   919                           postinc2	equ	0xFDE
   920                           postdec2	equ	0xFDD
   921                           fsr2h	equ	0xFDA
   922                           fsr2l	equ	0xFD9
   923                           status	equ	0xFD8
   924                           
   925 ;; *************** function ___lwdiv *****************
   926 ;; Defined at:
   927 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;  dividend        2    0[COMRAM] unsigned int 
   930 ;;  divisor         2    2[COMRAM] unsigned int 
   931 ;; Auto vars:     Size  Location     Type
   932 ;;  quotient        2    4[COMRAM] unsigned int 
   933 ;;  counter         1    6[COMRAM] unsigned char 
   934 ;; Return value:  Size  Location     Type
   935 ;;                  2    0[COMRAM] unsigned int 
   936 ;; Registers used:
   937 ;;		wreg, status,2, status,0
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   944 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   946 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   947 ;;Total ram usage:        7 bytes
   948 ;; Hardware stack levels used:    1
   949 ;; This function calls:
   950 ;;		Nothing
   951 ;; This function is called by:
   952 ;;		_printf
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text5
   957  001232                     __ptext5:
   958                           	opt stack 0
   959  001232                     ___lwdiv:
   960                           	opt stack 29
   961                           
   962                           ;incstack = 0
   963  001232  0E00               	movlw	0
   964  001234  6E06               	movwf	___lwdiv@quotient+1,c
   965  001236  0E00               	movlw	0
   966  001238  6E05               	movwf	___lwdiv@quotient,c
   967  00123A  5003               	movf	___lwdiv@divisor,w,c
   968  00123C  1004               	iorwf	___lwdiv@divisor+1,w,c
   969  00123E  B4D8               	btfsc	status,2,c
   970  001240  D01C               	goto	l512
   971  001242  0E01               	movlw	1
   972  001244  6E07               	movwf	___lwdiv@counter,c
   973  001246  D004               	goto	l901
   974  001248                     l899:
   975  001248  90D8               	bcf	status,0,c
   976  00124A  3603               	rlcf	___lwdiv@divisor,f,c
   977  00124C  3604               	rlcf	___lwdiv@divisor+1,f,c
   978  00124E  2A07               	incf	___lwdiv@counter,f,c
   979  001250                     l901:
   980  001250  AE04               	btfss	___lwdiv@divisor+1,7,c
   981  001252  D7FA               	goto	l899
   982  001254                     l903:
   983  001254  90D8               	bcf	status,0,c
   984  001256  3605               	rlcf	___lwdiv@quotient,f,c
   985  001258  3606               	rlcf	___lwdiv@quotient+1,f,c
   986  00125A  5003               	movf	___lwdiv@divisor,w,c
   987  00125C  5C01               	subwf	___lwdiv@dividend,w,c
   988  00125E  5004               	movf	___lwdiv@divisor+1,w,c
   989  001260  5802               	subwfb	___lwdiv@dividend+1,w,c
   990  001262  A0D8               	btfss	status,0,c
   991  001264  D005               	goto	l911
   992  001266  5003               	movf	___lwdiv@divisor,w,c
   993  001268  5E01               	subwf	___lwdiv@dividend,f,c
   994  00126A  5004               	movf	___lwdiv@divisor+1,w,c
   995  00126C  5A02               	subwfb	___lwdiv@dividend+1,f,c
   996  00126E  8005               	bsf	___lwdiv@quotient,0,c
   997  001270                     l911:
   998  001270  90D8               	bcf	status,0,c
   999  001272  3204               	rrcf	___lwdiv@divisor+1,f,c
  1000  001274  3203               	rrcf	___lwdiv@divisor,f,c
  1001  001276  2E07               	decfsz	___lwdiv@counter,f,c
  1002  001278  D7ED               	goto	l903
  1003  00127A                     l512:
  1004  00127A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1005  00127E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1006  001282  0012               	return		;funcret
  1007  001284                     __end_of___lwdiv:
  1008                           	opt stack 0
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           prodh	equ	0xFF4
  1014                           prodl	equ	0xFF3
  1015                           wreg	equ	0xFE8
  1016                           postinc2	equ	0xFDE
  1017                           postdec2	equ	0xFDD
  1018                           fsr2h	equ	0xFDA
  1019                           fsr2l	equ	0xFD9
  1020                           status	equ	0xFD8
  1021                           
  1022 ;; *************** function _initLCD *****************
  1023 ;; Defined at:
  1024 ;;		line 20 in file "lcd.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;		None
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  2   16[None  ] int 
  1031 ;; Registers used:
  1032 ;;		wreg, status,2, status,0, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1041 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1042 ;;Total ram usage:        1 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    2
  1045 ;; This function calls:
  1046 ;;		_lcdInst
  1047 ;; This function is called by:
  1048 ;;		_main
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           	psect	text6
  1053  001284                     __ptext6:
  1054                           	opt stack 0
  1055  001284                     _initLCD:
  1056                           	opt stack 28
  1057                           
  1058                           ;lcd.c: 21: _delay((unsigned long)((15)*(8000000/4000.0)));
  1059                           
  1060                           ;incstack = 0
  1061  001284  0E27               	movlw	39
  1062  001286  6E04               	movwf	??_initLCD& (0+255),c
  1063  001288  0EF5               	movlw	245
  1064  00128A                     u397:
  1065  00128A  2EE8               	decfsz	wreg,f,c
  1066  00128C  D7FE               	bra	u397
  1067  00128E  2E04               	decfsz	??_initLCD& (0+255),f,c
  1068  001290  D7FC               	bra	u397
  1069  001292  F000               	nop	
  1070                           
  1071                           ;lcd.c: 22: lcdInst(0b00110011);
  1072  001294  0E33               	movlw	51
  1073  001296  EC93  F009         	call	_lcdInst
  1074                           
  1075                           ;lcd.c: 23: lcdInst(0b00110010);
  1076  00129A  0E32               	movlw	50
  1077  00129C  EC93  F009         	call	_lcdInst
  1078                           
  1079                           ;lcd.c: 24: lcdInst(0b00101000);
  1080  0012A0  0E28               	movlw	40
  1081  0012A2  EC93  F009         	call	_lcdInst
  1082                           
  1083                           ;lcd.c: 25: lcdInst(0b00001111);
  1084  0012A6  0E0F               	movlw	15
  1085  0012A8  EC93  F009         	call	_lcdInst
  1086                           
  1087                           ;lcd.c: 26: lcdInst(0b00000110);
  1088  0012AC  0E06               	movlw	6
  1089  0012AE  EC93  F009         	call	_lcdInst
  1090                           
  1091                           ;lcd.c: 27: lcdInst(0b00000001);
  1092  0012B2  0E01               	movlw	1
  1093  0012B4  EC93  F009         	call	_lcdInst
  1094                           
  1095                           ;lcd.c: 28: _delay((unsigned long)((15)*(8000000/4000.0)));
  1096  0012B8  0E27               	movlw	39
  1097  0012BA  6E04               	movwf	??_initLCD& (0+255),c
  1098  0012BC  0EF5               	movlw	245
  1099  0012BE                     u407:
  1100  0012BE  2EE8               	decfsz	wreg,f,c
  1101  0012C0  D7FE               	bra	u407
  1102  0012C2  2E04               	decfsz	??_initLCD& (0+255),f,c
  1103  0012C4  D7FC               	bra	u407
  1104  0012C6  F000               	nop	
  1105  0012C8  0012               	return		;funcret
  1106  0012CA                     __end_of_initLCD:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           prodh	equ	0xFF4
  1113                           prodl	equ	0xFF3
  1114                           wreg	equ	0xFE8
  1115                           postinc2	equ	0xFDE
  1116                           postdec2	equ	0xFDD
  1117                           fsr2h	equ	0xFDA
  1118                           fsr2l	equ	0xFD9
  1119                           status	equ	0xFD8
  1120                           
  1121 ;; *************** function _lcdInst *****************
  1122 ;; Defined at:
  1123 ;;		line 31 in file "lcd.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;  data            1    wreg     unsigned char 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;  data            1    2[COMRAM] unsigned char 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, status,2, status,0, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1140 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1141 ;;Total ram usage:        1 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    1
  1144 ;; This function calls:
  1145 ;;		_lcdNibble
  1146 ;; This function is called by:
  1147 ;;		_initLCD
  1148 ;;		_lcdNewline
  1149 ;;		_lcdClear
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text7
  1154  001326                     __ptext7:
  1155                           	opt stack 0
  1156  001326                     _lcdInst:
  1157                           	opt stack 27
  1158                           
  1159                           ;incstack = 0
  1160                           ;lcdInst@data stored from wreg
  1161  001326  6E03               	movwf	lcdInst@data,c
  1162                           
  1163                           ;lcd.c: 32: LATDbits.LATD2 = 0;
  1164  001328  948C               	bcf	3980,2,c	;volatile
  1165                           
  1166                           ;lcd.c: 33: lcdNibble(data);
  1167  00132A  5003               	movf	lcdInst@data,w,c
  1168  00132C  ECEE  F008         	call	_lcdNibble
  1169  001330  0012               	return		;funcret
  1170  001332                     __end_of_lcdInst:
  1171                           	opt stack 0
  1172                           tblptru	equ	0xFF8
  1173                           tblptrh	equ	0xFF7
  1174                           tblptrl	equ	0xFF6
  1175                           tablat	equ	0xFF5
  1176                           prodh	equ	0xFF4
  1177                           prodl	equ	0xFF3
  1178                           wreg	equ	0xFE8
  1179                           postinc2	equ	0xFDE
  1180                           postdec2	equ	0xFDD
  1181                           fsr2h	equ	0xFDA
  1182                           fsr2l	equ	0xFD9
  1183                           status	equ	0xFD8
  1184                           
  1185 ;; *************** function _lcdNibble *****************
  1186 ;; Defined at:
  1187 ;;		line 47 in file "lcd.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  data            1    wreg     unsigned char 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  data            1    1[COMRAM] unsigned char 
  1192 ;;  temp            1    0[COMRAM] unsigned char 
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, status,2, status,0
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;Total ram usage:        2 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; This function calls:
  1209 ;;		Nothing
  1210 ;; This function is called by:
  1211 ;;		_lcdInst
  1212 ;;		_putch
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text8
  1217  0011DC                     __ptext8:
  1218                           	opt stack 0
  1219  0011DC                     _lcdNibble:
  1220                           	opt stack 29
  1221                           
  1222                           ;incstack = 0
  1223                           ;lcdNibble@data stored from wreg
  1224  0011DC  6E02               	movwf	lcdNibble@data,c
  1225                           
  1226                           ;lcd.c: 49: char temp = data & 0xF0;
  1227  0011DE  5002               	movf	lcdNibble@data,w,c
  1228  0011E0  0BF0               	andlw	240
  1229  0011E2  6E01               	movwf	lcdNibble@temp,c
  1230                           
  1231                           ;lcd.c: 50: LATD = LATD & 0x0F;
  1232  0011E4  508C               	movf	3980,w,c	;volatile
  1233  0011E6  0B0F               	andlw	15
  1234  0011E8  6E8C               	movwf	3980,c	;volatile
  1235                           
  1236                           ;lcd.c: 51: LATD = temp | LATD;
  1237  0011EA  5001               	movf	lcdNibble@temp,w,c
  1238  0011EC  108C               	iorwf	3980,w,c	;volatile
  1239  0011EE  6E8C               	movwf	3980,c	;volatile
  1240                           
  1241                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  1242  0011F0  968C               	bcf	3980,3,c	;volatile
  1243                           
  1244                           ;lcd.c: 54: _delay((unsigned long)((25)*(8000000/4000000.0)));
  1245  0011F2  0E10               	movlw	16
  1246  0011F4                     u417:
  1247  0011F4  2EE8               	decfsz	wreg,f,c
  1248  0011F6  D7FE               	bra	u417
  1249  0011F8  D000               	nop2	
  1250                           
  1251                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  1252  0011FA  868C               	bsf	3980,3,c	;volatile
  1253                           
  1254                           ;lcd.c: 56: _delay((unsigned long)((25)*(8000000/4000000.0)));
  1255  0011FC  0E10               	movlw	16
  1256  0011FE                     u427:
  1257  0011FE  2EE8               	decfsz	wreg,f,c
  1258  001200  D7FE               	bra	u427
  1259  001202  D000               	nop2	
  1260                           
  1261                           ;lcd.c: 59: data = data << 4;
  1262  001204  3802               	swapf	lcdNibble@data,w,c
  1263  001206  0BF0               	andlw	240
  1264  001208  6E02               	movwf	lcdNibble@data,c
  1265                           
  1266                           ;lcd.c: 61: temp = data & 0xF0;
  1267  00120A  5002               	movf	lcdNibble@data,w,c
  1268  00120C  0BF0               	andlw	240
  1269  00120E  6E01               	movwf	lcdNibble@temp,c
  1270                           
  1271                           ;lcd.c: 62: LATD = LATD & 0x0F;
  1272  001210  508C               	movf	3980,w,c	;volatile
  1273  001212  0B0F               	andlw	15
  1274  001214  6E8C               	movwf	3980,c	;volatile
  1275                           
  1276                           ;lcd.c: 63: LATD = temp | LATD;
  1277  001216  5001               	movf	lcdNibble@temp,w,c
  1278  001218  108C               	iorwf	3980,w,c	;volatile
  1279  00121A  6E8C               	movwf	3980,c	;volatile
  1280                           
  1281                           ;lcd.c: 65: LATDbits.LATD3 = 0;
  1282  00121C  968C               	bcf	3980,3,c	;volatile
  1283                           
  1284                           ;lcd.c: 66: _delay((unsigned long)((25)*(8000000/4000000.0)));
  1285  00121E  0E10               	movlw	16
  1286  001220                     u437:
  1287  001220  2EE8               	decfsz	wreg,f,c
  1288  001222  D7FE               	bra	u437
  1289  001224  D000               	nop2	
  1290                           
  1291                           ;lcd.c: 67: LATDbits.LATD3 = 1;
  1292  001226  868C               	bsf	3980,3,c	;volatile
  1293                           
  1294                           ;lcd.c: 68: _delay((unsigned long)((25)*(8000000/4000000.0)));
  1295  001228  0E10               	movlw	16
  1296  00122A                     u447:
  1297  00122A  2EE8               	decfsz	wreg,f,c
  1298  00122C  D7FE               	bra	u447
  1299  00122E  D000               	nop2	
  1300  001230  0012               	return		;funcret
  1301  001232                     __end_of_lcdNibble:
  1302                           	opt stack 0
  1303                           tblptru	equ	0xFF8
  1304                           tblptrh	equ	0xFF7
  1305                           tblptrl	equ	0xFF6
  1306                           tablat	equ	0xFF5
  1307                           prodh	equ	0xFF4
  1308                           prodl	equ	0xFF3
  1309                           wreg	equ	0xFE8
  1310                           postinc2	equ	0xFDE
  1311                           postdec2	equ	0xFDD
  1312                           fsr2h	equ	0xFDA
  1313                           fsr2l	equ	0xFD9
  1314                           status	equ	0xFD8
  1315                           tblptru	equ	0xFF8
  1316                           tblptrh	equ	0xFF7
  1317                           tblptrl	equ	0xFF6
  1318                           tablat	equ	0xFF5
  1319                           prodh	equ	0xFF4
  1320                           prodl	equ	0xFF3
  1321                           wreg	equ	0xFE8
  1322                           postinc2	equ	0xFDE
  1323                           postdec2	equ	0xFDD
  1324                           fsr2h	equ	0xFDA
  1325                           fsr2l	equ	0xFD9
  1326                           status	equ	0xFD8
  1327                           
  1328                           	psect	rparam
  1329  0000                     tblptru	equ	0xFF8
  1330                           tblptrh	equ	0xFF7
  1331                           tblptrl	equ	0xFF6
  1332                           tablat	equ	0xFF5
  1333                           prodh	equ	0xFF4
  1334                           prodl	equ	0xFF3
  1335                           wreg	equ	0xFE8
  1336                           postinc2	equ	0xFDE
  1337                           postdec2	equ	0xFDD
  1338                           fsr2h	equ	0xFDA
  1339                           fsr2l	equ	0xFD9
  1340                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    27
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     30      30
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _lcdNewline->_lcdInst
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1686
                                             24 COMRAM     6     6      0
                            _initLCD
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1286
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0     195
                                              3 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNewline                                           0     0      0      90
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
   _putch
     _lcdNewline
       _lcdInst
         _lcdNibble
     _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     1E      1E       1       23.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 18 15:52:04 2017

                     l33 115C                       l34 1188                       l37 1194  
                     l65 131C              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l512 127A                      l522 1302  
                    l901 1250                      l911 1270                      l903 1254  
                    l921 12E0                      l923 12E4                      l933 1030  
                    l927 12F8                      l919 12D8                      l943 106A  
                    l953 1092                      l937 1040                      l971 10D4  
                    l955 1096                      l973 10DA                      l967 10C2  
                    l977 1122                      l899 1248                      l979 112A  
           __CFG_CPB$OFF 000000                      u407 12BE                      u417 11F4  
           __CFG_CPD$OFF 000000                      u427 11FE                      u437 1220  
                    u447 122A                      u387 11CE                      u397 128A  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1011 11C8                     l1007 11C0                     STR_1 101C  
                   STR_2 1020                     _LATB 000F8A                     _LATC 000F8B  
                   _LATD 000F8C                     _main 1144                     _keys 1001  
                   fsr2h 000FDA                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ?_main 0001  
        __end_of___lwdiv 1284          __end_of___lwmod 130C                    _PORTB 000F81  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 1332  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000             main@keypress 001C           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initLCD 12CA           __CFG_EBTRB$OFF 000000          __end_of_dpowers 101C  
                  _putch 130C                    main@f 001A                    main@i 001E  
                  tablat 000FF5                    status 000FD8           __CFG_PBADEN$ON 000000  
        __initialization 1332             __end_of_main 11DC             __end_of_keys 1012  
                 ??_main 0019            __activetblptr 000002                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   ?_putch 0001           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000                ??___lwdiv 0005                ??___lwmod 000C  
              ??_lcdInst 0003                   _printf 1026                ??_initLCD 0004  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 1332  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 1326  
     __size_of_lcdNibble 0056                  ??_putch 0004               _lcdNewline 133C  
                ?_printf 000D        __end_of_lcdNibble 1232                  __Hparam 0000  
                __Lparam 0000                  ___lwdiv 1232                  ___lwmod 12CA  
           __psmallconst 1000                  __pcinit 1332                  __ramtop 1000  
                _lcdInst 1326                  __ptext0 1144                  __ptext1 1026  
                __ptext2 130C                  __ptext3 133C                  __ptext4 12CA  
                __ptext5 1232                  __ptext6 1284                  __ptext7 1326  
                __ptext8 11DC          __size_of_printf 011E                  _initLCD 1284  
                _dpowers 1012     end_of_initialization 1332            __Lmediumconst 0000  
                printf@c 0018                  printf@f 000D                  postdec2 000FDD  
                postinc2 000FDE              ?_lcdNewline 0001                _PORTBbits 000F81  
         __end_of_printf 1144      start_initialization 1332      __size_of_lcdNewline 0008  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0011         ___lwdiv@dividend 0001  
      __CFG_CCP2MX$PORTC 000000                _lcdNibble 11DC                 ?___lwdiv 0001  
               ?___lwmod 0008                 ?_lcdInst 0001                 ?_initLCD 0001  
            __smallconst 1000         ___lwdiv@quotient 0005           __size_of_putch 001A  
               _LATDbits 000F8C         __CFG_WDTPS$32768 000000               ?_lcdNibble 0001  
           ??_lcdNewline 0004            lcdNibble@data 0002               printf@flag 0014  
          lcdNibble@temp 0001               printf@prec 0015       __end_of_lcdNewline 1344  
               __Hrparam 0000                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
       __size_of___lwdiv 0052         __size_of___lwmod 0042         __size_of_lcdInst 000C  
       __size_of_initLCD 0046          ___lwdiv@divisor 0003          ___lwdiv@counter 0007  
          __size_of_main 0098              ??_lcdNibble 0001                printf@val 0016  
               main@temp 001D                putch@data 0004         ___lwmod@dividend 0008  
               printf@ap 0012              lcdInst@data 0003          ___lwmod@divisor 000A  
        ___lwmod@counter 000C  
