

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 27 17:23:47 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           ; Version 1.40
    77                           ; Generated 01/12/2016 GMT
    78                           ; 
    79                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F4620 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataCOMRAM
   112  003A78                     __pidataCOMRAM:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _padAngle_CLOSE
   116  003A78  001E               	dw	30
   117                           
   118                           ;initializer for _padAngle_NEUTRAL
   119  003A7A  004C               	dw	76
   120                           
   121                           ;initializer for _padAngle_OPEN
   122  003A7C  00B4               	dw	180
   123                           
   124                           ;initializer for _redirectAngle_9V
   125  003A7E  0076               	dw	118
   126                           
   127                           ;initializer for _redirectAngle_AA
   128  003A80  008A               	dw	138
   129                           
   130                           ;initializer for _redirectAngle_C
   131  003A82  00A6               	dw	166
   132                           
   133                           ;initializer for _redirectAngle_OTHER
   134  003A84  0099               	dw	153
   135                           
   136                           ;initializer for _stoppingTime
   137  003A86  2710               	dw	10000
   138                           
   139                           	psect	idataBANK1
   140  0038E0                     __pidataBANK1:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _V_LIM_9V
   144  0038E0  77                 	db	119
   145  0038E1  EE                 	db	238
   146  0038E2  3F                 	db	63
   147                           
   148                           ;initializer for _V_LIM_AA
   149  0038E3  C1                 	db	193
   150  0038E4  4A                 	db	74
   151  0038E5  3E                 	db	62
   152                           
   153                           ;initializer for _V_LIM_C
   154  0038E6  A7                 	db	167
   155  0038E7  A9                 	db	169
   156  0038E8  3F                 	db	63
   157                           
   158                           ;initializer for _angle
   159  0038E9  005A               	dw	90
   160                           
   161                           ;initializer for _period
   162  0038EB  797C               	dw	31100
   163                           
   164                           ;initializer for _AA_float
   165  0038ED  0002               	dw	2
   166  0038EF  0005               	dw	5
   167                           
   168                           ;initializer for _conveyorServo
   169  0038F1  0002               	dw	2
   170  0038F3  0002               	dw	2
   171                           
   172                           ;initializer for _cylinderDir
   173  0038F5  0003               	dw	3
   174  0038F7  0001               	dw	1
   175                           
   176                           ;initializer for _cylinderMotor
   177  0038F9  0002               	dw	2
   178  0038FB  0000               	dw	0
   179                           
   180                           ;initializer for _padPin1
   181  0038FD  0002               	dw	2
   182  0038FF  0006               	dw	6
   183                           
   184                           ;initializer for _padPin2
   185  003901  0002               	dw	2
   186  003903  0007               	dw	7
   187                           
   188                           ;initializer for _padServo
   189  003905  0002               	dw	2
   190  003907  0001               	dw	1
   191                           
   192                           ;initializer for _redirectingServo
   193  003909  0003               	dw	3
   194  00390B  0000               	dw	0
   195                           
   196                           	psect	mediumconst
   197  00FE1C                     __pmediumconst:
   198                           	opt stack 0
   199  00FE1C  00                 	db	0
   200  00FE1D                     _dpowers:
   201                           	opt stack 0
   202  00FE1D  0001               	dw	1
   203  00FE1F  0000               	dw	0
   204  00FE21  000A               	dw	10
   205  00FE23  0000               	dw	0
   206  00FE25  0064               	dw	100
   207  00FE27  0000               	dw	0
   208  00FE29  03E8               	dw	1000
   209  00FE2B  0000               	dw	0
   210  00FE2D  2710               	dw	10000
   211  00FE2F  0000               	dw	0
   212  00FE31  86A0               	dw	34464
   213  00FE33  0001               	dw	1
   214  00FE35  4240               	dw	16960
   215  00FE37  000F               	dw	15
   216  00FE39  9680               	dw	38528
   217  00FE3B  0098               	dw	152
   218  00FE3D  E100               	dw	57600
   219  00FE3F  05F5               	dw	1525
   220  00FE41  CA00               	dw	51712
   221  00FE43  3B9A               	dw	15258
   222  00FE45                     __end_of_dpowers:
   223                           	opt stack 0
   224  00FE45                     __npowers_:
   225                           	opt stack 0
   226  00FE45  00                 	db	0
   227  00FE46  80                 	db	128
   228  00FE47  3F                 	db	63
   229  00FE48  CD                 	db	205
   230  00FE49  CC                 	db	204
   231  00FE4A  3D                 	db	61
   232  00FE4B  D7                 	db	215
   233  00FE4C  23                 	db	35
   234  00FE4D  3C                 	db	60
   235  00FE4E  12                 	db	18
   236  00FE4F  83                 	db	131
   237  00FE50  3A                 	db	58
   238  00FE51  B7                 	db	183
   239  00FE52  D1                 	db	209
   240  00FE53  38                 	db	56
   241  00FE54  C6                 	db	198
   242  00FE55  27                 	db	39
   243  00FE56  37                 	db	55
   244  00FE57  38                 	db	56
   245  00FE58  86                 	db	134
   246  00FE59  35                 	db	53
   247  00FE5A  C0                 	db	192
   248  00FE5B  D6                 	db	214
   249  00FE5C  33                 	db	51
   250  00FE5D  CC                 	db	204
   251  00FE5E  2B                 	db	43
   252  00FE5F  32                 	db	50
   253  00FE60  70                 	db	112
   254  00FE61  89                 	db	137
   255  00FE62  30                 	db	48
   256  00FE63  E7                 	db	231
   257  00FE64  DB                 	db	219
   258  00FE65  2E                 	db	46
   259  00FE66  E5                 	db	229
   260  00FE67  3C                 	db	60
   261  00FE68  1E                 	db	30
   262  00FE69  42                 	db	66
   263  00FE6A  A2                 	db	162
   264  00FE6B  0D                 	db	13
   265  00FE6C                     __end_of__npowers_:
   266                           	opt stack 0
   267  00FE6C                     __powers_:
   268                           	opt stack 0
   269  00FE6C  00                 	db	0
   270  00FE6D  80                 	db	128
   271  00FE6E  3F                 	db	63
   272  00FE6F  00                 	db	0
   273  00FE70  20                 	db	32
   274  00FE71  41                 	db	65
   275  00FE72  00                 	db	0
   276  00FE73  C8                 	db	200
   277  00FE74  42                 	db	66
   278  00FE75  00                 	db	0
   279  00FE76  7A                 	db	122
   280  00FE77  44                 	db	68
   281  00FE78  40                 	db	64
   282  00FE79  1C                 	db	28
   283  00FE7A  46                 	db	70
   284  00FE7B  50                 	db	80
   285  00FE7C  C3                 	db	195
   286  00FE7D  47                 	db	71
   287  00FE7E  24                 	db	36
   288  00FE7F  74                 	db	116
   289  00FE80  49                 	db	73
   290  00FE81  97                 	db	151
   291  00FE82  18                 	db	24
   292  00FE83  4B                 	db	75
   293  00FE84  BC                 	db	188
   294  00FE85  BE                 	db	190
   295  00FE86  4C                 	db	76
   296  00FE87  6B                 	db	107
   297  00FE88  6E                 	db	110
   298  00FE89  4E                 	db	78
   299  00FE8A  03                 	db	3
   300  00FE8B  15                 	db	21
   301  00FE8C  50                 	db	80
   302  00FE8D  79                 	db	121
   303  00FE8E  AD                 	db	173
   304  00FE8F  60                 	db	96
   305  00FE90  F3                 	db	243
   306  00FE91  49                 	db	73
   307  00FE92  71                 	db	113
   308  00FE93                     __end_of__powers_:
   309                           	opt stack 0
   310  00FE93                     _hexpowers:
   311                           	opt stack 0
   312  00FE93  0001               	dw	1
   313  00FE95  0000               	dw	0
   314  00FE97  0010               	dw	16
   315  00FE99  0000               	dw	0
   316  00FE9B  0100               	dw	256
   317  00FE9D  0000               	dw	0
   318  00FE9F  1000               	dw	4096
   319  00FEA1  0000               	dw	0
   320  00FEA3  0000               	dw	0
   321  00FEA5  0001               	dw	1
   322  00FEA7  0000               	dw	0
   323  00FEA9  0010               	dw	16
   324  00FEAB  0000               	dw	0
   325  00FEAD  0100               	dw	256
   326  00FEAF  0000               	dw	0
   327  00FEB1  1000               	dw	4096
   328  00FEB3                     __end_of_hexpowers:
   329                           	opt stack 0
   330  00FEB3                     _keys:
   331                           	opt stack 0
   332  00FEB3  31                 	db	49
   333  00FEB4  32                 	db	50
   334  00FEB5  33                 	db	51
   335  00FEB6  41                 	db	65
   336  00FEB7  34                 	db	52
   337  00FEB8  35                 	db	53
   338  00FEB9  36                 	db	54
   339  00FEBA  42                 	db	66
   340  00FEBB  37                 	db	55
   341  00FEBC  38                 	db	56
   342  00FEBD  39                 	db	57
   343  00FEBE  43                 	db	67
   344  00FEBF  2A                 	db	42
   345  00FEC0  30                 	db	48
   346  00FEC1  23                 	db	35
   347  00FEC2  44                 	db	68
   348  00FEC3  00                 	db	0
   349  00FEC4                     __end_of_keys:
   350                           	opt stack 0
   351  00FEC4                     _happynewyear:
   352                           	opt stack 0
   353  00FEC4  00                 	db	0
   354  00FEC5  59                 	db	89
   355  00FEC6  03                 	db	3
   356  00FEC7  01                 	db	1
   357  00FEC8  13                 	db	19
   358  00FEC9  04                 	db	4
   359  00FECA  17                 	db	23
   360  00FECB                     __end_of_happynewyear:
   361                           	opt stack 0
   362  0000                     _ADCON0	set	4034
   363  0000                     _ADCON1	set	4033
   364  0000                     _ADCON2	set	4032
   365  0000                     _ADRESH	set	4036
   366  0000                     _ADRESL	set	4035
   367  0000                     _EEADR	set	4009
   368  0000                     _EEADRH	set	4010
   369  0000                     _EECON1	set	4006
   370  0000                     _EECON2	set	4007
   371  0000                     _EEDATA	set	4008
   372  0000                     _INTCONbits	set	4082
   373  0000                     _LATA	set	3977
   374  0000                     _LATB	set	3978
   375  0000                     _LATC	set	3979
   376  0000                     _LATD	set	3980
   377  0000                     _LATDbits	set	3980
   378  0000                     _LATE	set	3981
   379  0000                     _PORTA	set	3968
   380  0000                     _PORTB	set	3969
   381  0000                     _PORTBbits	set	3969
   382  0000                     _PORTC	set	3970
   383  0000                     _PORTD	set	3971
   384  0000                     _SSPADD	set	4040
   385  0000                     _SSPBUF	set	4041
   386  0000                     _SSPCON1	set	4038
   387  0000                     _SSPCON2	set	4037
   388  0000                     _SSPSTAT	set	4039
   389  0000                     _T0CON	set	4053
   390  0000                     _T1CON	set	4045
   391  0000                     _T3CON	set	4017
   392  0000                     _TMR0H	set	4055
   393  0000                     _TMR0L	set	4054
   394  0000                     _TMR1H	set	4047
   395  0000                     _TMR1L	set	4046
   396  0000                     _TMR3H	set	4019
   397  0000                     _TMR3L	set	4018
   398  0000                     _TRISA	set	3986
   399  0000                     _TRISB	set	3987
   400  0000                     _TRISC	set	3988
   401  0000                     _TRISD	set	3989
   402  0000                     _TRISE	set	3990
   403  0000                     _ACKDT	set	32301
   404  0000                     _ACKEN	set	32300
   405  0000                     _EEIF	set	32012
   406  0000                     _INT0IE	set	32660
   407  0000                     _INT0IF	set	32657
   408  0000                     _INT1IE	set	32643
   409  0000                     _INT1IF	set	32640
   410  0000                     _PEIE	set	32662
   411  0000                     _PEN	set	32298
   412  0000                     _RCEN	set	32299
   413  0000                     _RSEN	set	32297
   414  0000                     _SEN	set	32296
   415  0000                     _TMR0IE	set	32661
   416  0000                     _TMR0IF	set	32658
   417  0000                     _TMR1IE	set	31976
   418  0000                     _TMR1IF	set	31984
   419  0000                     _TMR3IE	set	32001
   420  0000                     _TRISC3	set	31907
   421  0000                     _TRISC4	set	31908
   422  00FECB                     STR_13:
   423  00FECB  25                 	db	37
   424  00FECC  63                 	db	99	;'c'
   425  00FECD  29                 	db	41
   426  00FECE  20                 	db	32
   427  00FECF  74                 	db	116	;'t'
   428  00FED0  69                 	db	105	;'i'
   429  00FED1  6D                 	db	109	;'m'
   430  00FED2  65                 	db	101	;'e'
   431  00FED3  20                 	db	32
   432  00FED4  20                 	db	32
   433  00FED5  3C                 	db	60	;'<'
   434  00FED6  41                 	db	65	;'A'
   435  00FED7  20                 	db	32
   436  00FED8  20                 	db	32
   437  00FED9  20                 	db	32
   438  00FEDA  20                 	db	32
   439  00FEDB  20                 	db	32
   440  00FEDC  0A                 	db	10
   441  00FEDD  00                 	db	0
   442  00FEDE                     STR_9:
   443  00FEDE  73                 	db	115	;'s'
   444  00FEDF  74                 	db	116	;'t'
   445  00FEE0  61                 	db	97	;'a'
   446  00FEE1  72                 	db	114	;'r'
   447  00FEE2  74                 	db	116	;'t'
   448  00FEE3  20                 	db	32
   449  00FEE4  20                 	db	32
   450  00FEE5  20                 	db	32
   451  00FEE6  3C                 	db	60	;'<'
   452  00FEE7  42                 	db	66	;'B'
   453  00FEE8  20                 	db	32
   454  00FEE9  20                 	db	32
   455  00FEEA  20                 	db	32
   456  00FEEB  20                 	db	32
   457  00FEEC  20                 	db	32
   458  00FEED  20                 	db	32
   459  00FEEE  0A                 	db	10
   460  00FEEF  00                 	db	0
   461  00FEF0                     STR_7:
   462  00FEF0  20                 	db	32
   463  00FEF1  20                 	db	32
   464  00FEF2  68                 	db	104	;'h'
   465  00FEF3  68                 	db	104	;'h'
   466  00FEF4  3A                 	db	58	;':'
   467  00FEF5  6D                 	db	109	;'m'
   468  00FEF6  6D                 	db	109	;'m'
   469  00FEF7  3A                 	db	58	;':'
   470  00FEF8  73                 	db	115	;'s'
   471  00FEF9  73                 	db	115	;'s'
   472  00FEFA  20                 	db	32
   473  00FEFB  20                 	db	32
   474  00FEFC  20                 	db	32
   475  00FEFD  20                 	db	32
   476  00FEFE  20                 	db	32
   477  00FEFF  20                 	db	32
   478  00FF00  0A                 	db	10
   479  00FF01  00                 	db	0
   480  00FF02                     STR_11:
   481  00FF02  73                 	db	115	;'s'
   482  00FF03  65                 	db	101	;'e'
   483  00FF04  6C                 	db	108	;'l'
   484  00FF05  65                 	db	101	;'e'
   485  00FF06  63                 	db	99	;'c'
   486  00FF07  74                 	db	116	;'t'
   487  00FF08  20                 	db	32
   488  00FF09  72                 	db	114	;'r'
   489  00FF0A  75                 	db	117	;'u'
   490  00FF0B  6E                 	db	110	;'n'
   491  00FF0C  3A                 	db	58	;':'
   492  00FF0D  20                 	db	32
   493  00FF0E  20                 	db	32
   494  00FF0F  20                 	db	32
   495  00FF10  20                 	db	32
   496  00FF11  20                 	db	32
   497  00FF12  0A                 	db	10
   498  00FF13  00                 	db	0
   499  00FF14                     STR_15:
   500  00FF14  74                 	db	116	;'t'
   501  00FF15  69                 	db	105	;'i'
   502  00FF16  6D                 	db	109	;'m'
   503  00FF17  65                 	db	101	;'e'
   504  00FF18  3A                 	db	58	;':'
   505  00FF19  20                 	db	32
   506  00FF1A  6E                 	db	110	;'n'
   507  00FF1B  6E                 	db	110	;'n'
   508  00FF1C  6E                 	db	110	;'n'
   509  00FF1D  20                 	db	32
   510  00FF1E  73                 	db	115	;'s'
   511  00FF1F  65                 	db	101	;'e'
   512  00FF20  63                 	db	99	;'c'
   513  00FF21  20                 	db	32
   514  00FF22  20                 	db	32
   515  00FF23  20                 	db	32
   516  00FF24  0A                 	db	10
   517  00FF25  00                 	db	0
   518  00FF26                     STR_17:
   519  00FF26  5B                 	db	91	;'['
   520  00FF27  41                 	db	65	;'A'
   521  00FF28  41                 	db	65	;'A'
   522  00FF29  2C                 	db	44
   523  00FF2A  39                 	db	57	;'9'
   524  00FF2B  56                 	db	86	;'V'
   525  00FF2C  2C                 	db	44
   526  00FF2D  43                 	db	67	;'C'
   527  00FF2E  2C                 	db	44
   528  00FF2F  6F                 	db	111	;'o'
   529  00FF30  74                 	db	116	;'t'
   530  00FF31  68                 	db	104	;'h'
   531  00FF32  65                 	db	101	;'e'
   532  00FF33  72                 	db	114	;'r'
   533  00FF34  5D                 	db	93	;']'
   534  00FF35  20                 	db	32
   535  00FF36  0A                 	db	10
   536  00FF37  00                 	db	0
   537  00FF38                     STR_19:
   538  00FF38  30                 	db	48	;'0'
   539  00FF39  31                 	db	49	;'1'
   540  00FF3A  32                 	db	50	;'2'
   541  00FF3B  33                 	db	51	;'3'
   542  00FF3C  34                 	db	52	;'4'
   543  00FF3D  35                 	db	53	;'5'
   544  00FF3E  36                 	db	54	;'6'
   545  00FF3F  37                 	db	55	;'7'
   546  00FF40  38                 	db	56	;'8'
   547  00FF41  39                 	db	57	;'9'
   548  00FF42  61                 	db	97	;'a'
   549  00FF43  62                 	db	98	;'b'
   550  00FF44  63                 	db	99	;'c'
   551  00FF45  64                 	db	100	;'d'
   552  00FF46  65                 	db	101	;'e'
   553  00FF47  66                 	db	102	;'f'
   554  00FF48  00                 	db	0
   555  00FF49                     STR_16:
   556  00FF49  20                 	db	32
   557  00FF4A  20                 	db	32
   558  00FF4B  20                 	db	32
   559  00FF4C  20                 	db	32
   560  00FF4D  20                 	db	32
   561  00FF4E  20                 	db	32
   562  00FF4F  20                 	db	32
   563  00FF50  20                 	db	32
   564  00FF51  20                 	db	32
   565  00FF52  20                 	db	32
   566  00FF53  20                 	db	32
   567  00FF54  20                 	db	32
   568  00FF55  20                 	db	32
   569  00FF56  20                 	db	32
   570  00FF57  2A                 	db	42
   571  00FF58  3E                 	db	62	;'>'
   572  00FF59  00                 	db	0
   573  00FF5A                     STR_12:
   574  00FF5A  5B                 	db	91	;'['
   575  00FF5B  31                 	db	49	;'1'
   576  00FF5C  2C                 	db	44
   577  00FF5D  32                 	db	50	;'2'
   578  00FF5E  2C                 	db	44
   579  00FF5F  33                 	db	51	;'3'
   580  00FF60  2C                 	db	44
   581  00FF61  34                 	db	52	;'4'
   582  00FF62  5D                 	db	93	;']'
   583  00FF63  20                 	db	32
   584  00FF64  20                 	db	32
   585  00FF65  20                 	db	32
   586  00FF66  20                 	db	32
   587  00FF67  20                 	db	32
   588  00FF68  2A                 	db	42
   589  00FF69  3E                 	db	62	;'>'
   590  00FF6A  00                 	db	0
   591  00FF6B                     STR_10:
   592  00FF6B  68                 	db	104	;'h'
   593  00FF6C  69                 	db	105	;'i'
   594  00FF6D  73                 	db	115	;'s'
   595  00FF6E  74                 	db	116	;'t'
   596  00FF6F  6F                 	db	111	;'o'
   597  00FF70  72                 	db	114	;'r'
   598  00FF71  79                 	db	121	;'y'
   599  00FF72  20                 	db	32
   600  00FF73  3C                 	db	60	;'<'
   601  00FF74  43                 	db	67	;'C'
   602  00FF75  20                 	db	32
   603  00FF76  20                 	db	32
   604  00FF77  20                 	db	32
   605  00FF78  20                 	db	32
   606  00FF79  2A                 	db	42
   607  00FF7A  3E                 	db	62	;'>'
   608  00FF7B  00                 	db	0
   609  00FF7C                     STR_14:
   610  00FF7C  20                 	db	32
   611  00FF7D  20                 	db	32
   612  00FF7E  20                 	db	32
   613  00FF7F  73                 	db	115	;'s'
   614  00FF80  74                 	db	116	;'t'
   615  00FF81  61                 	db	97	;'a'
   616  00FF82  74                 	db	116	;'t'
   617  00FF83  73                 	db	115	;'s'
   618  00FF84  20                 	db	32
   619  00FF85  3C                 	db	60	;'<'
   620  00FF86  42                 	db	66	;'B'
   621  00FF87  20                 	db	32
   622  00FF88  20                 	db	32
   623  00FF89  20                 	db	32
   624  00FF8A  2A                 	db	42
   625  00FF8B  3E                 	db	62	;'>'
   626  00FF8C  00                 	db	0
   627  00FF8D                     STR_18:
   628  00FF8D  5B                 	db	91	;'['
   629  00FF8E  6E                 	db	110	;'n'
   630  00FF8F  6E                 	db	110	;'n'
   631  00FF90  2C                 	db	44
   632  00FF91  6E                 	db	110	;'n'
   633  00FF92  2C                 	db	44
   634  00FF93  6E                 	db	110	;'n'
   635  00FF94  2C                 	db	44
   636  00FF95  6E                 	db	110	;'n'
   637  00FF96  6E                 	db	110	;'n'
   638  00FF97  5D                 	db	93	;']'
   639  00FF98  20                 	db	32
   640  00FF99  20                 	db	32
   641  00FF9A  20                 	db	32
   642  00FF9B  2A                 	db	42
   643  00FF9C  3E                 	db	62	;'>'
   644  00FF9D  00                 	db	0
   645  00FF9E                     STR_8:
   646  00FF9E  20                 	db	32
   647  00FF9F  20                 	db	32
   648  00FFA0  6D                 	db	109	;'m'
   649  00FFA1  6D                 	db	109	;'m'
   650  00FFA2  3A                 	db	58	;':'
   651  00FFA3  64                 	db	100	;'d'
   652  00FFA4  64                 	db	100	;'d'
   653  00FFA5  3A                 	db	58	;':'
   654  00FFA6  79                 	db	121	;'y'
   655  00FFA7  79                 	db	121	;'y'
   656  00FFA8  20                 	db	32
   657  00FFA9  20                 	db	32
   658  00FFAA  20                 	db	32
   659  00FFAB  20                 	db	32
   660  00FFAC  41                 	db	65	;'A'
   661  00FFAD  3E                 	db	62	;'>'
   662  00FFAE  00                 	db	0
   663  00FFAF                     STR_3:
   664  00FFAF  5B                 	db	91	;'['
   665  00FFB0  41                 	db	65	;'A'
   666  00FFB1  41                 	db	65	;'A'
   667  00FFB2  2C                 	db	44
   668  00FFB3  43                 	db	67	;'C'
   669  00FFB4  2C                 	db	44
   670  00FFB5  39                 	db	57	;'9'
   671  00FFB6  56                 	db	86	;'V'
   672  00FFB7  2C                 	db	44
   673  00FFB8  4F                 	db	79	;'O'
   674  00FFB9  54                 	db	84	;'T'
   675  00FFBA  48                 	db	72	;'H'
   676  00FFBB  45                 	db	69	;'E'
   677  00FFBC  52                 	db	82	;'R'
   678  00FFBD  5D                 	db	93	;']'
   679  00FFBE  0A                 	db	10
   680  00FFBF  00                 	db	0
   681  00FFC0                     STR_2:
   682  00FFC0  74                 	db	116	;'t'
   683  00FFC1  69                 	db	105	;'i'
   684  00FFC2  6D                 	db	109	;'m'
   685  00FFC3  65                 	db	101	;'e'
   686  00FFC4  20                 	db	32
   687  00FFC5  25                 	db	37
   688  00FFC6  30                 	db	48	;'0'
   689  00FFC7  32                 	db	50	;'2'
   690  00FFC8  6C                 	db	108	;'l'
   691  00FFC9  64                 	db	100	;'d'
   692  00FFCA  3A                 	db	58	;':'
   693  00FFCB  25                 	db	37
   694  00FFCC  30                 	db	48	;'0'
   695  00FFCD  32                 	db	50	;'2'
   696  00FFCE  6C                 	db	108	;'l'
   697  00FFCF  64                 	db	100	;'d'
   698  00FFD0  00                 	db	0
   699  00FFD1                     STR_5:
   700  00FFD1  4E                 	db	78	;'N'
   701  00FFD2  3A                 	db	58	;':'
   702  00FFD3  20                 	db	32
   703  00FFD4  25                 	db	37
   704  00FFD5  64                 	db	100	;'d'
   705  00FFD6  2C                 	db	44
   706  00FFD7  0A                 	db	10
   707  00FFD8  56                 	db	86	;'V'
   708  00FFD9  3A                 	db	58	;':'
   709  00FFDA  20                 	db	32
   710  00FFDB  25                 	db	37
   711  00FFDC  2E                 	db	46
   712  00FFDD  33                 	db	51	;'3'
   713  00FFDE  66                 	db	102	;'f'
   714  00FFDF  00                 	db	0
   715  00FFE0                     STR_4:
   716  00FFE0  5B                 	db	91	;'['
   717  00FFE1  25                 	db	37
   718  00FFE2  64                 	db	100	;'d'
   719  00FFE3  2C                 	db	44
   720  00FFE4  25                 	db	37
   721  00FFE5  64                 	db	100	;'d'
   722  00FFE6  2C                 	db	44
   723  00FFE7  25                 	db	37
   724  00FFE8  64                 	db	100	;'d'
   725  00FFE9  2C                 	db	44
   726  00FFEA  25                 	db	37
   727  00FFEB  64                 	db	100	;'d'
   728  00FFEC  5D                 	db	93	;']'
   729  00FFED  00                 	db	0
   730  00FFEE  74                 	db	116	;'t'
   731  00FFEF  31                 	db	49	;'1'
   732  00FFF0  3A                 	db	58	;':'
   733  00FFF1  20                 	db	32
   734  00FFF2  25                 	db	37
   735  00FFF3  78                 	db	120	;'x'
   736  00FFF4  20                 	db	32
   737  00FFF5  00                 	db	0
   738  00FFF6                     STR_1:
   739  00FFF6  72                 	db	114	;'r'
   740  00FFF7  75                 	db	117	;'u'
   741  00FFF8  6E                 	db	110	;'n'
   742  00FFF9  6E                 	db	110	;'n'
   743  00FFFA  69                 	db	105	;'i'
   744  00FFFB  6E                 	db	110	;'n'
   745  00FFFC  67                 	db	103	;'g'
   746  00FFFD  00                 	db	0
   747                           
   748                           ; #config settings
   749  00FFFE  00                 	db	0	; dummy byte at the end
   750  0000                     
   751                           	psect	cinit
   752  00358C                     __pcinit:
   753                           	opt stack 0
   754  00358C                     start_initialization:
   755                           	opt stack 0
   756  00358C                     __initialization:
   757                           	opt stack 0
   758                           
   759                           ; Initialize objects allocated to BANK1 (45 bytes)
   760                           ; load TBLPTR registers with __pidataBANK1
   761  00358C  0EE0               	movlw	low __pidataBANK1
   762  00358E  6EF6               	movwf	tblptrl,c
   763  003590  0E38               	movlw	high __pidataBANK1
   764  003592  6EF7               	movwf	tblptrh,c
   765  003594  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   766  003596  6EF8               	movwf	tblptru,c
   767  003598  EE01  F038         	lfsr	0,__pdataBANK1
   768  00359C  EE10 F02D          	lfsr	1,45
   769  0035A0                     copy_data0:
   770  0035A0  0009               	tblrd		*+
   771  0035A2  CFF5 FFEE          	movff	tablat,postinc0
   772  0035A6  50E5               	movf	postdec1,w,c
   773  0035A8  50E1               	movf	fsr1l,w,c
   774  0035AA  E1FA               	bnz	copy_data0
   775                           
   776                           ; Initialize objects allocated to COMRAM (16 bytes)
   777                           ; load TBLPTR registers with __pidataCOMRAM
   778  0035AC  0E78               	movlw	low __pidataCOMRAM
   779  0035AE  6EF6               	movwf	tblptrl,c
   780  0035B0  0E3A               	movlw	high __pidataCOMRAM
   781  0035B2  6EF7               	movwf	tblptrh,c
   782  0035B4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   783  0035B6  6EF8               	movwf	tblptru,c
   784  0035B8  EE00  F049         	lfsr	0,__pdataCOMRAM
   785  0035BC  EE10 F010          	lfsr	1,16
   786  0035C0                     copy_data1:
   787  0035C0  0009               	tblrd		*+
   788  0035C2  CFF5 FFEE          	movff	tablat,postinc0
   789  0035C6  50E5               	movf	postdec1,w,c
   790  0035C8  50E1               	movf	fsr1l,w,c
   791  0035CA  E1FA               	bnz	copy_data1
   792                           
   793                           ; Clear objects allocated to BANK1 (24 bytes)
   794  0035CC  EE01  F065         	lfsr	0,__pbssBANK1
   795  0035D0  0E18               	movlw	24
   796  0035D2                     clear_0:
   797  0035D2  6AEE               	clrf	postinc0,c
   798  0035D4  06E8               	decf	wreg,f,c
   799  0035D6  E1FD               	bnz	clear_0
   800                           
   801                           ; Clear objects allocated to COMRAM (21 bytes)
   802  0035D8  EE00  F034         	lfsr	0,__pbssCOMRAM
   803  0035DC  0E15               	movlw	21
   804  0035DE                     clear_1:
   805  0035DE  6AEE               	clrf	postinc0,c
   806  0035E0  06E8               	decf	wreg,f,c
   807  0035E2  E1FD               	bnz	clear_1
   808  0035E4                     end_of_initialization:
   809                           	opt stack 0
   810  0035E4                     __end_of__initialization:
   811                           	opt stack 0
   812  0035E4  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   813  0035E6  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   814  0035E8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   815  0035EA  6EF8               	movwf	tblptru,c
   816  0035EC  0100               	movlb	0
   817  0035EE  EFCE  F00B         	goto	_main	;jump to C main() function
   818                           tblptru	equ	0xFF8
   819                           tblptrh	equ	0xFF7
   820                           tblptrl	equ	0xFF6
   821                           tablat	equ	0xFF5
   822                           postinc0	equ	0xFEE
   823                           wreg	equ	0xFE8
   824                           postdec1	equ	0xFE5
   825                           fsr1l	equ	0xFE1
   826                           
   827                           	psect	bssCOMRAM
   828  000034                     __pbssCOMRAM:
   829                           	opt stack 0
   830  000034                     _time:
   831                           	opt stack 0
   832  000034                     	ds	4
   833  000038                     _batteryDetected:
   834                           	opt stack 0
   835  000038                     	ds	2
   836  00003A                     _curr:
   837                           	opt stack 0
   838  00003A                     	ds	2
   839  00003C                     _n:
   840                           	opt stack 0
   841  00003C                     	ds	2
   842  00003E                     _n_9V:
   843                           	opt stack 0
   844  00003E                     	ds	2
   845  000040                     _n_AA:
   846                           	opt stack 0
   847  000040                     	ds	2
   848  000042                     _n_C:
   849                           	opt stack 0
   850  000042                     	ds	2
   851  000044                     _n_OTHER:
   852                           	opt stack 0
   853  000044                     	ds	2
   854  000046                     _terminate:
   855                           	opt stack 0
   856  000046                     	ds	2
   857  000048                     _lastKey:
   858                           	opt stack 0
   859  000048                     	ds	1
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           postinc0	equ	0xFEE
   865                           wreg	equ	0xFE8
   866                           postdec1	equ	0xFE5
   867                           fsr1l	equ	0xFE1
   868                           
   869                           	psect	dataCOMRAM
   870  000049                     __pdataCOMRAM:
   871                           	opt stack 0
   872  000049                     _padAngle_CLOSE:
   873                           	opt stack 0
   874  000049                     	ds	2
   875  00004B                     _padAngle_NEUTRAL:
   876                           	opt stack 0
   877  00004B                     	ds	2
   878  00004D                     _padAngle_OPEN:
   879                           	opt stack 0
   880  00004D                     	ds	2
   881  00004F                     _redirectAngle_9V:
   882                           	opt stack 0
   883  00004F                     	ds	2
   884  000051                     _redirectAngle_AA:
   885                           	opt stack 0
   886  000051                     	ds	2
   887  000053                     _redirectAngle_C:
   888                           	opt stack 0
   889  000053                     	ds	2
   890  000055                     _redirectAngle_OTHER:
   891                           	opt stack 0
   892  000055                     	ds	2
   893  000057                     _stoppingTime:
   894                           	opt stack 0
   895  000057                     	ds	2
   896                           tblptru	equ	0xFF8
   897                           tblptrh	equ	0xFF7
   898                           tblptrl	equ	0xFF6
   899                           tablat	equ	0xFF5
   900                           postinc0	equ	0xFEE
   901                           wreg	equ	0xFE8
   902                           postdec1	equ	0xFE5
   903                           fsr1l	equ	0xFE1
   904                           
   905                           	psect	bssBANK1
   906  000165                     __pbssBANK1:
   907                           	opt stack 0
   908  000165                     _pulse:
   909                           	opt stack 0
   910  000165                     	ds	8
   911  00016D                     _servos:
   912                           	opt stack 0
   913  00016D                     	ds	8
   914  000175                     _padPin3:
   915                           	opt stack 0
   916  000175                     	ds	4
   917  000179                     _count:
   918                           	opt stack 0
   919  000179                     	ds	2
   920  00017B                     _prevTime:
   921                           	opt stack 0
   922  00017B                     	ds	2
   923                           tblptru	equ	0xFF8
   924                           tblptrh	equ	0xFF7
   925                           tblptrl	equ	0xFF6
   926                           tablat	equ	0xFF5
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           postdec1	equ	0xFE5
   930                           fsr1l	equ	0xFE1
   931                           
   932                           	psect	dataBANK1
   933  000138                     __pdataBANK1:
   934                           	opt stack 0
   935  000138                     _V_LIM_9V:
   936                           	opt stack 0
   937  000138                     	ds	3
   938  00013B                     _V_LIM_AA:
   939                           	opt stack 0
   940  00013B                     	ds	3
   941  00013E                     _V_LIM_C:
   942                           	opt stack 0
   943  00013E                     	ds	3
   944  000141                     _angle:
   945                           	opt stack 0
   946  000141                     	ds	2
   947  000143                     _period:
   948                           	opt stack 0
   949  000143                     	ds	2
   950  000145                     _AA_float:
   951                           	opt stack 0
   952  000145                     	ds	4
   953  000149                     _conveyorServo:
   954                           	opt stack 0
   955  000149                     	ds	4
   956  00014D                     _cylinderDir:
   957                           	opt stack 0
   958  00014D                     	ds	4
   959  000151                     _cylinderMotor:
   960                           	opt stack 0
   961  000151                     	ds	4
   962  000155                     _padPin1:
   963                           	opt stack 0
   964  000155                     	ds	4
   965  000159                     _padPin2:
   966                           	opt stack 0
   967  000159                     	ds	4
   968  00015D                     _padServo:
   969                           	opt stack 0
   970  00015D                     	ds	4
   971  000161                     _redirectingServo:
   972                           	opt stack 0
   973  000161                     	ds	4
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	cstackBANK1
   984  000100                     __pcstackBANK1:
   985                           	opt stack 0
   986  000100                     _sortBattery$1347:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x0
   990  000100                     	ds	2
   991  000102                     sortBattery@V_float:
   992                           	opt stack 0
   993                           
   994                           ; 3 bytes @ 0x2
   995  000102                     	ds	3
   996  000105                     sortBattery@pos_v_counter:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x5
  1000  000105                     	ds	2
  1001  000107                     sortBattery@signal:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x7
  1005  000107                     	ds	2
  1006  000109                     sortBattery@Vcc:
  1007                           	opt stack 0
  1008                           
  1009                           ; 3 bytes @ 0x9
  1010  000109                     	ds	3
  1011  00010C                     sortBattery@resolution:
  1012                           	opt stack 0
  1013                           
  1014                           ; 3 bytes @ 0xC
  1015  00010C                     	ds	3
  1016  00010F                     sortBattery@V_max:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0xF
  1020  00010F                     	ds	3
  1021  000112                     sortBattery@i_221:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x12
  1025  000112                     	ds	2
  1026  000114                     sortBattery@targetAngle:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x14
  1030  000114                     	ds	2
  1031  000116                     sortBattery@V:
  1032                           	opt stack 0
  1033                           
  1034                           ; 3 bytes @ 0x16
  1035  000116                     	ds	3
  1036  000119                     sortBattery@i:
  1037                           	opt stack 0
  1038                           
  1039                           ; 3 bytes @ 0x19
  1040  000119                     	ds	3
  1041  00011C                     sortBattery@V_219:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x1C
  1045  00011C                     	ds	3
  1046  00011F                     ??_main:
  1047                           
  1048                           ; 1 bytes @ 0x1F
  1049  00011F                     	ds	13
  1050  00012C                     main@cylinderForward:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x2C
  1054  00012C                     	ds	2
  1055  00012E                     main@cylinderBackward:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x2E
  1059  00012E                     	ds	2
  1060  000130                     main@lastBatteryTime:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x30
  1064  000130                     	ds	2
  1065  000132                     main@cylinderStart:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x32
  1069  000132                     	ds	2
  1070  000134                     main@cylinderDur:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x34
  1074  000134                     	ds	2
  1075  000136                     main@prev:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x36
  1079  000136                     	ds	2
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           
  1089                           	psect	cstackBANK0
  1090  000080                     __pcstackBANK0:
  1091                           	opt stack 0
  1092  000080                     ??___altoft:
  1093  000080                     ??___lltoft:
  1094  000080                     ?___llmod:
  1095                           	opt stack 0
  1096  000080                     ___aldiv@counter:
  1097                           	opt stack 0
  1098  000080                     ___awdiv@counter:
  1099                           	opt stack 0
  1100  000080                     ___ftge@ff1:
  1101                           	opt stack 0
  1102  000080                     __tdiv_to_l_@quot:
  1103                           	opt stack 0
  1104  000080                     ___llmod@dividend:
  1105                           	opt stack 0
  1106                           
  1107                           ; 4 bytes @ 0x0
  1108  000080                     	ds	1
  1109  000081                     ___aldiv@sign:
  1110                           	opt stack 0
  1111  000081                     ___awdiv@sign:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x1
  1115  000081                     	ds	1
  1116  000082                     ___awdiv@quotient:
  1117                           	opt stack 0
  1118  000082                     ___aldiv@quotient:
  1119                           	opt stack 0
  1120                           
  1121                           ; 4 bytes @ 0x2
  1122  000082                     	ds	1
  1123  000083                     ___ftge@ff2:
  1124                           	opt stack 0
  1125                           
  1126                           ; 3 bytes @ 0x3
  1127  000083                     	ds	1
  1128  000084                     ?___wmul:
  1129                           	opt stack 0
  1130  000084                     ___altoft@exp:
  1131                           	opt stack 0
  1132  000084                     __tdiv_to_l_@cntr:
  1133                           	opt stack 0
  1134  000084                     ___wmul@multiplier:
  1135                           	opt stack 0
  1136  000084                     ___llmod@divisor:
  1137                           	opt stack 0
  1138                           
  1139                           ; 4 bytes @ 0x4
  1140  000084                     	ds	1
  1141  000085                     ___altoft@sign:
  1142                           	opt stack 0
  1143  000085                     __tdiv_to_l_@exp1:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x5
  1147  000085                     	ds	1
  1148  000086                     ??___ftge:
  1149  000086                     ?___ftdiv:
  1150                           	opt stack 0
  1151  000086                     ?___almod:
  1152                           	opt stack 0
  1153  000086                     ___wmul@multiplicand:
  1154                           	opt stack 0
  1155  000086                     ___ftdiv@f1:
  1156                           	opt stack 0
  1157  000086                     ___almod@dividend:
  1158                           	opt stack 0
  1159                           
  1160                           ; 4 bytes @ 0x6
  1161  000086                     	ds	2
  1162  000088                     ___llmod@counter:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x8
  1166  000088                     	ds	1
  1167  000089                     ___ftdiv@f2:
  1168                           	opt stack 0
  1169                           
  1170                           ; 3 bytes @ 0x9
  1171  000089                     	ds	1
  1172  00008A                     ___almod@divisor:
  1173                           	opt stack 0
  1174                           
  1175                           ; 4 bytes @ 0xA
  1176  00008A                     	ds	2
  1177  00008C                     ??___ftdiv:
  1178                           
  1179                           ; 1 bytes @ 0xC
  1180  00008C                     	ds	3
  1181  00008F                     ___ftdiv@cntr:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0xF
  1185  00008F                     	ds	1
  1186  000090                     ___ftdiv@f3:
  1187                           	opt stack 0
  1188                           
  1189                           ; 3 bytes @ 0x10
  1190  000090                     	ds	3
  1191  000093                     ___ftdiv@exp:
  1192                           	opt stack 0
  1193                           
  1194                           ; 1 bytes @ 0x13
  1195  000093                     	ds	1
  1196  000094                     ___ftdiv@sign:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x14
  1200  000094                     	ds	1
  1201  000095                     ?___ftmul:
  1202                           	opt stack 0
  1203  000095                     ___ftmul@f1:
  1204                           	opt stack 0
  1205                           
  1206                           ; 3 bytes @ 0x15
  1207  000095                     	ds	3
  1208  000098                     ___ftmul@f2:
  1209                           	opt stack 0
  1210                           
  1211                           ; 3 bytes @ 0x18
  1212  000098                     	ds	3
  1213  00009B                     ??___ftmul:
  1214                           
  1215                           ; 1 bytes @ 0x1B
  1216  00009B                     	ds	3
  1217  00009E                     ___ftmul@exp:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x1E
  1221  00009E                     	ds	1
  1222  00009F                     ___ftmul@f3_as_product:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x1F
  1226  00009F                     	ds	3
  1227  0000A2                     ___ftmul@cntr:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x22
  1231  0000A2                     	ds	1
  1232  0000A3                     ___ftmul@sign:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x23
  1236  0000A3                     	ds	1
  1237  0000A4                     ?_fround:
  1238                           	opt stack 0
  1239  0000A4                     ?_scale:
  1240                           	opt stack 0
  1241                           
  1242                           ; 3 bytes @ 0x24
  1243  0000A4                     	ds	3
  1244  0000A7                     _fround$1350:
  1245                           	opt stack 0
  1246  0000A7                     _scale$1351:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x27
  1250  0000A7                     	ds	3
  1251  0000AA                     scale@scl:
  1252                           	opt stack 0
  1253  0000AA                     _fround$1349:
  1254                           	opt stack 0
  1255                           
  1256                           ; 3 bytes @ 0x2A
  1257  0000AA                     	ds	3
  1258  0000AD                     fround@prec:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0x2D
  1262  0000AD                     	ds	1
  1263  0000AE                     ?___ftadd:
  1264                           	opt stack 0
  1265  0000AE                     ___ftadd@f1:
  1266                           	opt stack 0
  1267                           
  1268                           ; 3 bytes @ 0x2E
  1269  0000AE                     	ds	3
  1270  0000B1                     ___ftadd@f2:
  1271                           	opt stack 0
  1272                           
  1273                           ; 3 bytes @ 0x31
  1274  0000B1                     	ds	3
  1275  0000B4                     ??___ftadd:
  1276                           
  1277                           ; 1 bytes @ 0x34
  1278  0000B4                     	ds	3
  1279  0000B7                     ___ftadd@sign:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x37
  1283  0000B7                     	ds	1
  1284  0000B8                     ___ftadd@exp2:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x38
  1288  0000B8                     	ds	1
  1289  0000B9                     ___ftadd@exp1:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x39
  1293  0000B9                     	ds	1
  1294  0000BA                     ?___ftsub:
  1295                           	opt stack 0
  1296  0000BA                     ?___fttol:
  1297                           	opt stack 0
  1298  0000BA                     ___ftsub@f1:
  1299                           	opt stack 0
  1300  0000BA                     ___fttol@f1:
  1301                           	opt stack 0
  1302                           
  1303                           ; 3 bytes @ 0x3A
  1304  0000BA                     	ds	3
  1305  0000BD                     ___ftsub@f2:
  1306                           	opt stack 0
  1307                           
  1308                           ; 3 bytes @ 0x3D
  1309  0000BD                     	ds	1
  1310  0000BE                     ??___fttol:
  1311                           
  1312                           ; 1 bytes @ 0x3E
  1313  0000BE                     	ds	5
  1314  0000C3                     ___fttol@sign1:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x43
  1318  0000C3                     	ds	1
  1319  0000C4                     ___fttol@lval:
  1320                           	opt stack 0
  1321                           
  1322                           ; 4 bytes @ 0x44
  1323  0000C4                     	ds	4
  1324  0000C8                     ___fttol@exp1:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x48
  1328  0000C8                     	ds	1
  1329  0000C9                     ?_printf:
  1330                           	opt stack 0
  1331  0000C9                     ?_angleToPulse:
  1332                           	opt stack 0
  1333  0000C9                     angleToPulse@angle:
  1334                           	opt stack 0
  1335  0000C9                     printf@f:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x49
  1339  0000C9                     	ds	4
  1340  0000CD                     ??_angleToPulse:
  1341                           
  1342                           ; 1 bytes @ 0x4D
  1343  0000CD                     	ds	4
  1344  0000D1                     angleToPulse@offset:
  1345                           	opt stack 0
  1346                           
  1347                           ; 4 bytes @ 0x51
  1348  0000D1                     	ds	2
  1349  0000D3                     ??_printf:
  1350                           
  1351                           ; 1 bytes @ 0x53
  1352  0000D3                     	ds	2
  1353  0000D5                     angleToPulse@a180:
  1354                           	opt stack 0
  1355                           
  1356                           ; 4 bytes @ 0x55
  1357  0000D5                     	ds	4
  1358  0000D9                     _angleToPulse$1348:
  1359                           	opt stack 0
  1360  0000D9                     _printf$1352:
  1361                           	opt stack 0
  1362                           
  1363                           ; 3 bytes @ 0x59
  1364  0000D9                     	ds	3
  1365  0000DC                     printf@idx:
  1366                           	opt stack 0
  1367  0000DC                     angleToPulse@a000:
  1368                           	opt stack 0
  1369                           
  1370                           ; 4 bytes @ 0x5C
  1371  0000DC                     	ds	1
  1372  0000DD                     printf@cp:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x5D
  1376  0000DD                     	ds	2
  1377  0000DF                     printf@len:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0x5F
  1381  0000DF                     	ds	1
  1382  0000E0                     setAngle@motor:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x60
  1386  0000E0                     	ds	1
  1387  0000E1                     printf@ap:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x61
  1391  0000E1                     	ds	1
  1392  0000E2                     setAngle@angle:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x62
  1396  0000E2                     	ds	1
  1397  0000E3                     printf@tmpval:
  1398                           	opt stack 0
  1399                           
  1400                           ; 4 bytes @ 0x63
  1401  0000E3                     	ds	1
  1402  0000E4                     ??_setAngle:
  1403                           
  1404                           ; 1 bytes @ 0x64
  1405  0000E4                     	ds	2
  1406  0000E6                     setAngle@period:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x66
  1410  0000E6                     	ds	1
  1411  0000E7                     printf@exp:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x67
  1415  0000E7                     	ds	1
  1416  0000E8                     setAngle@i:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x68
  1420  0000E8                     	ds	1
  1421  0000E9                     printf@fval:
  1422                           	opt stack 0
  1423                           
  1424                           ; 3 bytes @ 0x69
  1425  0000E9                     	ds	1
  1426  0000EA                     initServo@motor:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x6A
  1430  0000EA                     	ds	2
  1431  0000EC                     initServo@angle:
  1432                           	opt stack 0
  1433  0000EC                     printf@val:
  1434                           	opt stack 0
  1435                           
  1436                           ; 4 bytes @ 0x6C
  1437  0000EC                     	ds	2
  1438  0000EE                     ??_initServo:
  1439                           
  1440                           ; 1 bytes @ 0x6E
  1441  0000EE                     	ds	2
  1442  0000F0                     printf@width:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x70
  1446  0000F0                     	ds	2
  1447  0000F2                     printf@flag:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x72
  1451  0000F2                     	ds	2
  1452  0000F4                     printf@prec:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x74
  1456  0000F4                     	ds	2
  1457  0000F6                     printf@c:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x76
  1461  0000F6                     	ds	1
  1462  0000F7                     ??_sortBattery:
  1463  0000F7                     runMenu@key:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x77
  1467  0000F7                     	ds	1
  1468  0000F8                     showInterface@key:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x78
  1472  0000F8                     	ds	1
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           postdec1	equ	0xFE5
  1480                           fsr1l	equ	0xFE1
  1481                           
  1482                           	psect	cstackCOMRAM
  1483  000001                     __pcstackCOMRAM:
  1484                           	opt stack 0
  1485  000001                     ?i2___awmod:
  1486                           	opt stack 0
  1487  000001                     i2___awmod@dividend:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x0
  1491  000001                     	ds	2
  1492  000003                     i2___awmod@divisor:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x2
  1496  000003                     	ds	2
  1497  000005                     i2___awmod@counter:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x4
  1501  000005                     	ds	1
  1502  000006                     i2___awmod@sign:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x5
  1506  000006                     	ds	1
  1507  000007                     i2digitalWrite@pin:
  1508                           	opt stack 0
  1509  000007                     i2startTimer@timer:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x6
  1513  000007                     	ds	2
  1514  000009                     i2digitalWrite@val:
  1515                           	opt stack 0
  1516  000009                     i2startTimer@val:
  1517                           	opt stack 0
  1518                           
  1519                           ; 4 bytes @ 0x8
  1520  000009                     	ds	2
  1521  00000B                     ??i2_digitalWrite:
  1522                           
  1523                           ; 1 bytes @ 0xA
  1524  00000B                     	ds	2
  1525  00000D                     ??i2_startTimer:
  1526                           
  1527                           ; 1 bytes @ 0xC
  1528  00000D                     	ds	1
  1529  00000E                     i2digitalWrite@p:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0xD
  1533  00000E                     	ds	2
  1534  000010                     ??_servoInterruptService:
  1535                           
  1536                           ; 1 bytes @ 0xF
  1537  000010                     	ds	4
  1538  000014                     ??_service:
  1539                           
  1540                           ; 1 bytes @ 0x13
  1541  000014                     	ds	18
  1542  000026                     service@key:
  1543                           	opt stack 0
  1544                           
  1545                           ; 1 bytes @ 0x25
  1546  000026                     	ds	1
  1547  000027                     ??_isdigit:
  1548  000027                     ?_digitalRead:
  1549                           	opt stack 0
  1550  000027                     ?___awmod:
  1551                           	opt stack 0
  1552  000027                     ?___ftpack:
  1553                           	opt stack 0
  1554  000027                     ?___ftneg:
  1555                           	opt stack 0
  1556  000027                     ?_analogRead:
  1557                           	opt stack 0
  1558  000027                     ?__tdiv_to_l_:
  1559                           	opt stack 0
  1560  000027                     ?__div_to_l_:
  1561                           	opt stack 0
  1562  000027                     ?___aldiv:
  1563                           	opt stack 0
  1564  000027                     ?___lldiv:
  1565                           	opt stack 0
  1566  000027                     lcdNibble@temp:
  1567                           	opt stack 0
  1568  000027                     readKeypad@key:
  1569                           	opt stack 0
  1570  000027                     digitalRead@pin:
  1571                           	opt stack 0
  1572  000027                     digitalWrite@pin:
  1573                           	opt stack 0
  1574  000027                     analogRead@channel:
  1575                           	opt stack 0
  1576  000027                     initTimer@timer:
  1577                           	opt stack 0
  1578  000027                     startTimer@timer:
  1579                           	opt stack 0
  1580  000027                     ___awmod@dividend:
  1581                           	opt stack 0
  1582  000027                     __div_to_l_@f1:
  1583                           	opt stack 0
  1584  000027                     ___ftpack@arg:
  1585                           	opt stack 0
  1586  000027                     __tdiv_to_l_@f1:
  1587                           	opt stack 0
  1588  000027                     ___ftneg@f1:
  1589                           	opt stack 0
  1590  000027                     ___aldiv@dividend:
  1591                           	opt stack 0
  1592  000027                     ___lldiv@dividend:
  1593                           	opt stack 0
  1594                           
  1595                           ; 4 bytes @ 0x26
  1596  000027                     	ds	1
  1597  000028                     lcdNibble@data:
  1598                           	opt stack 0
  1599  000028                     _isdigit$977:
  1600                           	opt stack 0
  1601                           
  1602                           ; 1 bytes @ 0x27
  1603  000028                     	ds	1
  1604  000029                     ??_initTimer:
  1605  000029                     ??_digitalRead:
  1606  000029                     ??_lcdInst:
  1607  000029                     isdigit@c:
  1608                           	opt stack 0
  1609  000029                     digitalWrite@val:
  1610                           	opt stack 0
  1611  000029                     ___awmod@divisor:
  1612                           	opt stack 0
  1613  000029                     startTimer@val:
  1614                           	opt stack 0
  1615                           
  1616                           ; 4 bytes @ 0x28
  1617  000029                     	ds	1
  1618  00002A                     lcdInst@data:
  1619                           	opt stack 0
  1620  00002A                     ___ftpack@exp:
  1621                           	opt stack 0
  1622  00002A                     __div_to_l_@f2:
  1623                           	opt stack 0
  1624  00002A                     __tdiv_to_l_@f2:
  1625                           	opt stack 0
  1626                           
  1627                           ; 3 bytes @ 0x29
  1628  00002A                     	ds	1
  1629  00002B                     ??_initLCD:
  1630  00002B                     ??_digitalWrite:
  1631  00002B                     ??_analogRead:
  1632  00002B                     putch@data:
  1633                           	opt stack 0
  1634  00002B                     ___awmod@counter:
  1635                           	opt stack 0
  1636  00002B                     ___ftpack@sign:
  1637                           	opt stack 0
  1638  00002B                     ___aldiv@divisor:
  1639                           	opt stack 0
  1640  00002B                     ___lldiv@divisor:
  1641                           	opt stack 0
  1642                           
  1643                           ; 4 bytes @ 0x2A
  1644  00002B                     	ds	1
  1645  00002C                     ??___ftpack:
  1646  00002C                     ___awmod@sign:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0x2B
  1650  00002C                     	ds	1
  1651  00002D                     ??_startTimer:
  1652  00002D                     ??__tdiv_to_l_:
  1653  00002D                     ?___awdiv:
  1654                           	opt stack 0
  1655  00002D                     ___awdiv@dividend:
  1656                           	opt stack 0
  1657  00002D                     __div_to_l_@quot:
  1658                           	opt stack 0
  1659                           
  1660                           ; 4 bytes @ 0x2C
  1661  00002D                     	ds	1
  1662  00002E                     digitalWrite@p:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x2D
  1666  00002E                     	ds	1
  1667  00002F                     ?___altoft:
  1668                           	opt stack 0
  1669  00002F                     ?___awtoft:
  1670                           	opt stack 0
  1671  00002F                     ?___lltoft:
  1672                           	opt stack 0
  1673  00002F                     ___almod@counter:
  1674                           	opt stack 0
  1675  00002F                     ___awdiv@divisor:
  1676                           	opt stack 0
  1677  00002F                     ___awtoft@c:
  1678                           	opt stack 0
  1679  00002F                     ___altoft@c:
  1680                           	opt stack 0
  1681  00002F                     ___lldiv@quotient:
  1682                           	opt stack 0
  1683  00002F                     ___lltoft@c:
  1684                           	opt stack 0
  1685                           
  1686                           ; 4 bytes @ 0x2E
  1687  00002F                     	ds	1
  1688  000030                     ___almod@sign:
  1689                           	opt stack 0
  1690                           
  1691                           ; 1 bytes @ 0x2F
  1692  000030                     	ds	1
  1693  000031                     __div_to_l_@cntr:
  1694                           	opt stack 0
  1695  000031                     ___wmul@product:
  1696                           	opt stack 0
  1697                           
  1698                           ; 2 bytes @ 0x30
  1699  000031                     	ds	1
  1700  000032                     ___awtoft@sign:
  1701                           	opt stack 0
  1702  000032                     __div_to_l_@exp1:
  1703                           	opt stack 0
  1704                           
  1705                           ; 1 bytes @ 0x31
  1706  000032                     	ds	1
  1707  000033                     ___lldiv@counter:
  1708                           	opt stack 0
  1709  000033                     ___lltoft@exp:
  1710                           	opt stack 0
  1711                           
  1712                           ; 1 bytes @ 0x32
  1713  000033                     	ds	1
  1714  000034                     tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           tblptrl	equ	0xFF6
  1717                           tablat	equ	0xFF5
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           postdec1	equ	0xFE5
  1721                           fsr1l	equ	0xFE1
  1722                           
  1723                           ; 1 bytes @ 0x33
  1724 ;;
  1725 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  1726 ;;
  1727 ;; *************** function _main *****************
  1728 ;; Defined at:
  1729 ;;		line 101 in file "main.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  prev            2   54[BANK1 ] int 
  1734 ;;  cylinderDur     2   52[BANK1 ] int 
  1735 ;;  cylinderStar    2   50[BANK1 ] int 
  1736 ;;  lastBatteryT    2   48[BANK1 ] int 
  1737 ;;  cylinderBack    2   46[BANK1 ] int 
  1738 ;;  cylinderForw    2   44[BANK1 ] int 
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  1    wreg      void 
  1741 ;; Registers used:
  1742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;Total ram usage:       25 bytes
  1753 ;; Hardware stack levels required when called:   10
  1754 ;; This function calls:
  1755 ;;		___aldiv
  1756 ;;		___almod
  1757 ;;		_digitalRead
  1758 ;;		_digitalWrite
  1759 ;;		_initLCD
  1760 ;;		_initServo
  1761 ;;		_initTimer
  1762 ;;		_lcdClear
  1763 ;;		_lcdHome
  1764 ;;		_pinSetup
  1765 ;;		_printf
  1766 ;;		_readKeypad
  1767 ;;		_showInterface
  1768 ;;		_sortBattery
  1769 ;;		_startTimer
  1770 ;; This function is called by:
  1771 ;;		Startup code after reset
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text0
  1776  00179C                     __ptext0:
  1777                           	opt stack 0
  1778  00179C                     _main:
  1779                           	opt stack 21
  1780                           
  1781                           ;main.c: 102: pinSetup();
  1782                           
  1783                           ;incstack = 0
  1784  00179C  ECE6  F01B         	call	_pinSetup	;wreg free
  1785                           
  1786                           ;main.c: 103: initLCD();
  1787  0017A0  ECC3  F01B         	call	_initLCD	;wreg free
  1788  0017A4                     l7033:
  1789                           
  1790                           ;main.c: 106: showInterface();
  1791  0017A4  ECFF  F013         	call	_showInterface	;wreg free
  1792                           
  1793                           ;main.c: 111: time = 0;
  1794  0017A8  0E00               	movlw	0
  1795  0017AA  6E34               	movwf	_time,c
  1796  0017AC  0E00               	movlw	0
  1797  0017AE  6E35               	movwf	_time+1,c
  1798  0017B0  0E00               	movlw	0
  1799  0017B2  6E36               	movwf	_time+2,c
  1800  0017B4  0E00               	movlw	0
  1801  0017B6  6E37               	movwf	_time+3,c
  1802                           
  1803                           ;main.c: 112: initTimer(1);
  1804  0017B8  0E00               	movlw	0
  1805  0017BA  6E28               	movwf	initTimer@timer+1,c
  1806  0017BC  0E01               	movlw	1
  1807  0017BE  6E27               	movwf	initTimer@timer,c
  1808  0017C0  EC9E  F01B         	call	_initTimer	;wreg free
  1809                           
  1810                           ;main.c: 113: startTimer(1,0);
  1811  0017C4  0E00               	movlw	0
  1812  0017C6  6E28               	movwf	startTimer@timer+1,c
  1813  0017C8  0E01               	movlw	1
  1814  0017CA  6E27               	movwf	startTimer@timer,c
  1815  0017CC  0E00               	movlw	0
  1816  0017CE  6E29               	movwf	startTimer@val,c
  1817  0017D0  0E00               	movlw	0
  1818  0017D2  6E2A               	movwf	startTimer@val+1,c
  1819  0017D4  0E00               	movlw	0
  1820  0017D6  6E2B               	movwf	startTimer@val+2,c
  1821  0017D8  0E00               	movlw	0
  1822  0017DA  6E2C               	movwf	startTimer@val+3,c
  1823  0017DC  EC52  F01B         	call	_startTimer	;wreg free
  1824                           
  1825                           ;main.c: 116: digitalWrite(cylinderMotor, 1);
  1826  0017E0  0E51               	movlw	low _cylinderMotor
  1827  0017E2  6E27               	movwf	digitalWrite@pin,c
  1828  0017E4  0E01               	movlw	high _cylinderMotor
  1829  0017E6  6E28               	movwf	digitalWrite@pin+1,c
  1830  0017E8  0E00               	movlw	0
  1831  0017EA  6E2A               	movwf	digitalWrite@val+1,c
  1832  0017EC  0E01               	movlw	1
  1833  0017EE  6E29               	movwf	digitalWrite@val,c
  1834  0017F0  EC36  F017         	call	_digitalWrite	;wreg free
  1835                           
  1836                           ;main.c: 117: initServo(conveyorServo, 130);
  1837  0017F4  0E49               	movlw	low _conveyorServo
  1838  0017F6  0100               	movlb	0	; () banked
  1839  0017F8  6FEA               	movwf	initServo@motor& (0+255),b
  1840  0017FA  0E01               	movlw	high _conveyorServo
  1841  0017FC  0100               	movlb	0	; () banked
  1842  0017FE  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  1843  001800  0E00               	movlw	0
  1844  001802  0100               	movlb	0	; () banked
  1845  001804  6FED               	movwf	(initServo@angle+1)& (0+255),b
  1846  001806  0E82               	movlw	130
  1847  001808  6FEC               	movwf	initServo@angle& (0+255),b
  1848  00180A  EC9C  F019         	call	_initServo	;wreg free
  1849                           
  1850                           ;main.c: 118: initServo(padServo, padAngle_NEUTRAL);
  1851  00180E  0E5D               	movlw	low _padServo
  1852  001810  0100               	movlb	0	; () banked
  1853  001812  6FEA               	movwf	initServo@motor& (0+255),b
  1854  001814  0E01               	movlw	high _padServo
  1855  001816  0100               	movlb	0	; () banked
  1856  001818  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  1857  00181A  C04B  F0EC         	movff	_padAngle_NEUTRAL,initServo@angle
  1858  00181E  C04C  F0ED         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1859  001822  EC9C  F019         	call	_initServo	;wreg free
  1860                           
  1861                           ;main.c: 119: initServo(redirectingServo, redirectAngle_AA);
  1862  001826  0E61               	movlw	low _redirectingServo
  1863  001828  0100               	movlb	0	; () banked
  1864  00182A  6FEA               	movwf	initServo@motor& (0+255),b
  1865  00182C  0E01               	movlw	high _redirectingServo
  1866  00182E  0100               	movlb	0	; () banked
  1867  001830  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  1868  001832  C051  F0EC         	movff	_redirectAngle_AA,initServo@angle
  1869  001836  C052  F0ED         	movff	_redirectAngle_AA+1,initServo@angle+1
  1870  00183A  EC9C  F019         	call	_initServo	;wreg free
  1871  00183E                     l7049:
  1872                           
  1873                           ;main.c: 123: lcdClear();
  1874  00183E  EC48  F01D         	call	_lcdClear	;wreg free
  1875                           
  1876                           ;main.c: 124: printf("running");
  1877  001842  0EF6               	movlw	low STR_1
  1878  001844  0100               	movlb	0	; () banked
  1879  001846  6FC9               	movwf	printf@f& (0+255),b
  1880  001848  0EFF               	movlw	high STR_1
  1881  00184A  0100               	movlb	0	; () banked
  1882  00184C  6FCA               	movwf	(printf@f+1)& (0+255),b
  1883  00184E  EC09  F000         	call	_printf	;wreg free
  1884                           
  1885                           ;main.c: 126: int lastBatteryTime = time;
  1886  001852  C034  F130         	movff	_time,main@lastBatteryTime
  1887  001856  C035  F131         	movff	_time+1,main@lastBatteryTime+1
  1888                           
  1889                           ;main.c: 128: int cylinderStart = time;
  1890  00185A  C034  F132         	movff	_time,main@cylinderStart
  1891  00185E  C035  F133         	movff	_time+1,main@cylinderStart+1
  1892                           
  1893                           ;main.c: 129: int cylinderDur = 0;
  1894  001862  0E00               	movlw	0
  1895  001864  0101               	movlb	1	; () banked
  1896  001866  6F35               	movwf	(main@cylinderDur+1)& (0+255),b
  1897  001868  0E00               	movlw	0
  1898  00186A  6F34               	movwf	main@cylinderDur& (0+255),b
  1899                           
  1900                           ;main.c: 130: int cylinderForward = 10;
  1901  00186C  0E00               	movlw	0
  1902  00186E  0101               	movlb	1	; () banked
  1903  001870  6F2D               	movwf	(main@cylinderForward+1)& (0+255),b
  1904  001872  0E0A               	movlw	10
  1905  001874  6F2C               	movwf	main@cylinderForward& (0+255),b
  1906                           
  1907                           ;main.c: 131: int cylinderBackward = 10;
  1908  001876  0E00               	movlw	0
  1909  001878  0101               	movlb	1	; () banked
  1910  00187A  6F2F               	movwf	(main@cylinderBackward+1)& (0+255),b
  1911  00187C  0E0A               	movlw	10
  1912  00187E  6F2E               	movwf	main@cylinderBackward& (0+255),b
  1913                           
  1914                           ;main.c: 133: while(!batteryDetected && !terminate){
  1915  001880  D116               	goto	l7075
  1916  001882                     l7057:
  1917                           
  1918                           ; BSR set to: 1
  1919                           ;main.c: 135: lcdHome();
  1920  001882  EC4C  F01D         	call	_lcdHome	;wreg free
  1921                           
  1922                           ;main.c: 136: printf("time %02ld:%02ld",time/600,(time/10)%60);
  1923  001886  0EC0               	movlw	low STR_2
  1924  001888  0100               	movlb	0	; () banked
  1925  00188A  6FC9               	movwf	printf@f& (0+255),b
  1926  00188C  0EFF               	movlw	high STR_2
  1927  00188E  0100               	movlb	0	; () banked
  1928  001890  6FCA               	movwf	(printf@f+1)& (0+255),b
  1929  001892  C034  F027         	movff	_time,___aldiv@dividend
  1930  001896  C035  F028         	movff	_time+1,___aldiv@dividend+1
  1931  00189A  C036  F029         	movff	_time+2,___aldiv@dividend+2
  1932  00189E  C037  F02A         	movff	_time+3,___aldiv@dividend+3
  1933  0018A2  0E58               	movlw	88
  1934  0018A4  6E2B               	movwf	___aldiv@divisor,c
  1935  0018A6  0E02               	movlw	2
  1936  0018A8  6E2C               	movwf	___aldiv@divisor+1,c
  1937  0018AA  0E00               	movlw	0
  1938  0018AC  6E2D               	movwf	___aldiv@divisor+2,c
  1939  0018AE  0E00               	movlw	0
  1940  0018B0  6E2E               	movwf	___aldiv@divisor+3,c
  1941  0018B2  EC5E  F016         	call	___aldiv	;wreg free
  1942  0018B6  C027  F0CB         	movff	?___aldiv,?_printf+2
  1943  0018BA  C028  F0CC         	movff	?___aldiv+1,?_printf+3
  1944  0018BE  C029  F0CD         	movff	?___aldiv+2,?_printf+4
  1945  0018C2  C02A  F0CE         	movff	?___aldiv+3,?_printf+5
  1946  0018C6  0E0A               	movlw	10
  1947  0018C8  6E2B               	movwf	___aldiv@divisor,c
  1948  0018CA  0E00               	movlw	0
  1949  0018CC  6E2C               	movwf	___aldiv@divisor+1,c
  1950  0018CE  0E00               	movlw	0
  1951  0018D0  6E2D               	movwf	___aldiv@divisor+2,c
  1952  0018D2  0E00               	movlw	0
  1953  0018D4  6E2E               	movwf	___aldiv@divisor+3,c
  1954  0018D6  C034  F027         	movff	_time,___aldiv@dividend
  1955  0018DA  C035  F028         	movff	_time+1,___aldiv@dividend+1
  1956  0018DE  C036  F029         	movff	_time+2,___aldiv@dividend+2
  1957  0018E2  C037  F02A         	movff	_time+3,___aldiv@dividend+3
  1958  0018E6  EC5E  F016         	call	___aldiv	;wreg free
  1959  0018EA  C027  F086         	movff	?___aldiv,___almod@dividend
  1960  0018EE  C028  F087         	movff	?___aldiv+1,___almod@dividend+1
  1961  0018F2  C029  F088         	movff	?___aldiv+2,___almod@dividend+2
  1962  0018F6  C02A  F089         	movff	?___aldiv+3,___almod@dividend+3
  1963  0018FA  0E3C               	movlw	60
  1964  0018FC  0100               	movlb	0	; () banked
  1965  0018FE  6F8A               	movwf	___almod@divisor& (0+255),b
  1966  001900  0E00               	movlw	0
  1967  001902  6F8B               	movwf	(___almod@divisor+1)& (0+255),b
  1968  001904  0E00               	movlw	0
  1969  001906  6F8C               	movwf	(___almod@divisor+2)& (0+255),b
  1970  001908  0E00               	movlw	0
  1971  00190A  6F8D               	movwf	(___almod@divisor+3)& (0+255),b
  1972  00190C  ECEC  F015         	call	___almod	;wreg free
  1973  001910  C086  F0CF         	movff	?___almod,?_printf+6
  1974  001914  C087  F0D0         	movff	?___almod+1,?_printf+7
  1975  001918  C088  F0D1         	movff	?___almod+2,?_printf+8
  1976  00191C  C089  F0D2         	movff	?___almod+3,?_printf+9
  1977  001920  EC09  F000         	call	_printf	;wreg free
  1978                           
  1979                           ;main.c: 137: _delay((unsigned long)((77)*(10000000/4000.0)));
  1980  001924  0EFA               	movlw	250
  1981  001926  0101               	movlb	1	; () banked
  1982  001928  6F1F               	movwf	??_main& (0+255),b
  1983  00192A  0EFF               	movlw	255
  1984  00192C                     u7667:
  1985  00192C  2EE8               	decfsz	wreg,f,c
  1986  00192E  D7FE               	bra	u7667
  1987  001930  2F1F               	decfsz	??_main& (0+255),f,b
  1988  001932  D7FC               	bra	u7667
  1989                           
  1990                           ;main.c: 140: if(time - cylinderStart >= cylinderDur)
  1991  001934  C134  F11F         	movff	main@cylinderDur,??_main
  1992  001938  C135  F120         	movff	main@cylinderDur+1,??_main+1
  1993  00193C  0E00               	movlw	0
  1994  00193E  0101               	movlb	1	; () banked
  1995  001940  BF20               	btfsc	(??_main+1)& (0+255),7,b
  1996  001942  0EFF               	movlw	255
  1997  001944  6F21               	movwf	(??_main+2)& (0+255),b
  1998  001946  6F22               	movwf	(??_main+3)& (0+255),b
  1999  001948  C132  F123         	movff	main@cylinderStart,??_main+4
  2000  00194C  C133  F124         	movff	main@cylinderStart+1,??_main+5
  2001  001950  0E00               	movlw	0
  2002  001952  0101               	movlb	1	; () banked
  2003  001954  BF24               	btfsc	(??_main+5)& (0+255),7,b
  2004  001956  0EFF               	movlw	255
  2005  001958  6F25               	movwf	(??_main+6)& (0+255),b
  2006  00195A  6F26               	movwf	(??_main+7)& (0+255),b
  2007  00195C  0101               	movlb	1	; () banked
  2008  00195E  1F23               	comf	(??_main+4)& (0+255),f,b
  2009  001960  1F24               	comf	(??_main+5)& (0+255),f,b
  2010  001962  1F25               	comf	(??_main+6)& (0+255),f,b
  2011  001964  1F26               	comf	(??_main+7)& (0+255),f,b
  2012  001966  2B23               	incf	(??_main+4)& (0+255),f,b
  2013  001968  0E00               	movlw	0
  2014  00196A  2324               	addwfc	(??_main+5)& (0+255),f,b
  2015  00196C  2325               	addwfc	(??_main+6)& (0+255),f,b
  2016  00196E  2326               	addwfc	(??_main+7)& (0+255),f,b
  2017  001970  5034               	movf	_time,w,c
  2018  001972  0101               	movlb	1	; () banked
  2019  001974  2523               	addwf	(??_main+4)& (0+255),w,b
  2020  001976  0101               	movlb	1	; () banked
  2021  001978  6F27               	movwf	(??_main+8)& (0+255),b
  2022  00197A  5035               	movf	_time+1,w,c
  2023  00197C  0101               	movlb	1	; () banked
  2024  00197E  2124               	addwfc	(??_main+5)& (0+255),w,b
  2025  001980  0101               	movlb	1	; () banked
  2026  001982  6F28               	movwf	(??_main+9)& (0+255),b
  2027  001984  5036               	movf	_time+2,w,c
  2028  001986  0101               	movlb	1	; () banked
  2029  001988  2125               	addwfc	(??_main+6)& (0+255),w,b
  2030  00198A  0101               	movlb	1	; () banked
  2031  00198C  6F29               	movwf	(??_main+10)& (0+255),b
  2032  00198E  5037               	movf	_time+3,w,c
  2033  001990  0101               	movlb	1	; () banked
  2034  001992  2126               	addwfc	(??_main+7)& (0+255),w,b
  2035  001994  0101               	movlb	1	; () banked
  2036  001996  6F2A               	movwf	(??_main+11)& (0+255),b
  2037  001998  0101               	movlb	1	; () banked
  2038  00199A  511F               	movf	??_main& (0+255),w,b
  2039  00199C  0101               	movlb	1	; () banked
  2040  00199E  5D27               	subwf	(??_main+8)& (0+255),w,b
  2041  0019A0  0101               	movlb	1	; () banked
  2042  0019A2  5120               	movf	(??_main+1)& (0+255),w,b
  2043  0019A4  0101               	movlb	1	; () banked
  2044  0019A6  5928               	subwfb	(??_main+9)& (0+255),w,b
  2045  0019A8  0101               	movlb	1	; () banked
  2046  0019AA  5121               	movf	(??_main+2)& (0+255),w,b
  2047  0019AC  0101               	movlb	1	; () banked
  2048  0019AE  5929               	subwfb	(??_main+10)& (0+255),w,b
  2049  0019B0  0101               	movlb	1	; () banked
  2050  0019B2  512A               	movf	(??_main+11)& (0+255),w,b
  2051  0019B4  0A80               	xorlw	128
  2052  0019B6  0101               	movlb	1	; () banked
  2053  0019B8  6F2B               	movwf	(??_main+12)& (0+255),b
  2054  0019BA  0101               	movlb	1	; () banked
  2055  0019BC  5122               	movf	(??_main+3)& (0+255),w,b
  2056  0019BE  0A80               	xorlw	128
  2057  0019C0  0101               	movlb	1	; () banked
  2058  0019C2  592B               	subwfb	(??_main+12)& (0+255),w,b
  2059  0019C4  A0D8               	btfss	status,0,c
  2060  0019C6  D02E               	goto	l7071
  2061                           
  2062                           ; BSR set to: 1
  2063                           ;main.c: 141: {
  2064                           ;main.c: 142: int prev = digitalRead(cylinderDir);
  2065  0019C8  0E4D               	movlw	low _cylinderDir
  2066  0019CA  6E27               	movwf	digitalRead@pin,c
  2067  0019CC  0E01               	movlw	high _cylinderDir
  2068  0019CE  6E28               	movwf	digitalRead@pin+1,c
  2069  0019D0  EC77  F015         	call	_digitalRead	;wreg free
  2070  0019D4  C027  F136         	movff	?_digitalRead,main@prev
  2071  0019D8  C028  F137         	movff	?_digitalRead+1,main@prev+1
  2072                           
  2073                           ;main.c: 143: digitalWrite(cylinderDir, !prev);
  2074  0019DC  0E4D               	movlw	low _cylinderDir
  2075  0019DE  6E27               	movwf	digitalWrite@pin,c
  2076  0019E0  0E01               	movlw	high _cylinderDir
  2077  0019E2  6E28               	movwf	digitalWrite@pin+1,c
  2078  0019E4  0101               	movlb	1	; () banked
  2079  0019E6  5136               	movf	main@prev& (0+255),w,b
  2080  0019E8  0101               	movlb	1	; () banked
  2081  0019EA  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2082  0019EC  A4D8               	btfss	status,2,c
  2083  0019EE  D002               	goto	u7570
  2084  0019F0  0E01               	movlw	1
  2085  0019F2  D001               	goto	u7580
  2086  0019F4                     u7570:
  2087  0019F4  0E00               	movlw	0
  2088  0019F6                     u7580:
  2089  0019F6  6E29               	movwf	digitalWrite@val,c
  2090  0019F8  6A2A               	clrf	digitalWrite@val+1,c
  2091  0019FA  EC36  F017         	call	_digitalWrite	;wreg free
  2092                           
  2093                           ;main.c: 144: if(prev)cylinderDur = cylinderBackward;
  2094  0019FE  0101               	movlb	1	; () banked
  2095  001A00  5136               	movf	main@prev& (0+255),w,b
  2096  001A02  0101               	movlb	1	; () banked
  2097  001A04  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2098  001A06  B4D8               	btfsc	status,2,c
  2099  001A08  D005               	goto	l136
  2100                           
  2101                           ; BSR set to: 1
  2102  001A0A  C12E  F134         	movff	main@cylinderBackward,main@cylinderDur
  2103  001A0E  C12F  F135         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2104  001A12  D004               	goto	l137
  2105  001A14                     l136:
  2106                           
  2107                           ; BSR set to: 1
  2108                           ;main.c: 145: else cylinderDur = cylinderForward;
  2109  001A14  C12C  F134         	movff	main@cylinderForward,main@cylinderDur
  2110  001A18  C12D  F135         	movff	main@cylinderForward+1,main@cylinderDur+1
  2111  001A1C                     l137:
  2112                           
  2113                           ; BSR set to: 1
  2114                           ;main.c: 146: cylinderStart = time;
  2115  001A1C  C034  F132         	movff	_time,main@cylinderStart
  2116  001A20  C035  F133         	movff	_time+1,main@cylinderStart+1
  2117  001A24                     l7071:
  2118                           
  2119                           ; BSR set to: 1
  2120                           ;main.c: 147: }
  2121                           ;main.c: 149: if(time - lastBatteryTime > stoppingTime)
  2122  001A24  C130  F11F         	movff	main@lastBatteryTime,??_main
  2123  001A28  C131  F120         	movff	main@lastBatteryTime+1,??_main+1
  2124  001A2C  0E00               	movlw	0
  2125  001A2E  0101               	movlb	1	; () banked
  2126  001A30  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2127  001A32  0EFF               	movlw	255
  2128  001A34  6F21               	movwf	(??_main+2)& (0+255),b
  2129  001A36  6F22               	movwf	(??_main+3)& (0+255),b
  2130  001A38  0101               	movlb	1	; () banked
  2131  001A3A  1F1F               	comf	??_main& (0+255),f,b
  2132  001A3C  1F20               	comf	(??_main+1)& (0+255),f,b
  2133  001A3E  1F21               	comf	(??_main+2)& (0+255),f,b
  2134  001A40  1F22               	comf	(??_main+3)& (0+255),f,b
  2135  001A42  2B1F               	incf	??_main& (0+255),f,b
  2136  001A44  0E00               	movlw	0
  2137  001A46  2320               	addwfc	(??_main+1)& (0+255),f,b
  2138  001A48  2321               	addwfc	(??_main+2)& (0+255),f,b
  2139  001A4A  2322               	addwfc	(??_main+3)& (0+255),f,b
  2140  001A4C  5034               	movf	_time,w,c
  2141  001A4E  0101               	movlb	1	; () banked
  2142  001A50  251F               	addwf	??_main& (0+255),w,b
  2143  001A52  0101               	movlb	1	; () banked
  2144  001A54  6F23               	movwf	(??_main+4)& (0+255),b
  2145  001A56  5035               	movf	_time+1,w,c
  2146  001A58  0101               	movlb	1	; () banked
  2147  001A5A  2120               	addwfc	(??_main+1)& (0+255),w,b
  2148  001A5C  0101               	movlb	1	; () banked
  2149  001A5E  6F24               	movwf	(??_main+5)& (0+255),b
  2150  001A60  5036               	movf	_time+2,w,c
  2151  001A62  0101               	movlb	1	; () banked
  2152  001A64  2121               	addwfc	(??_main+2)& (0+255),w,b
  2153  001A66  0101               	movlb	1	; () banked
  2154  001A68  6F25               	movwf	(??_main+6)& (0+255),b
  2155  001A6A  5037               	movf	_time+3,w,c
  2156  001A6C  0101               	movlb	1	; () banked
  2157  001A6E  2122               	addwfc	(??_main+3)& (0+255),w,b
  2158  001A70  0101               	movlb	1	; () banked
  2159  001A72  6F26               	movwf	(??_main+7)& (0+255),b
  2160  001A74  0E00               	movlw	0
  2161  001A76  BE58               	btfsc	_stoppingTime+1,7,c
  2162  001A78  0EFF               	movlw	255
  2163  001A7A  0101               	movlb	1	; () banked
  2164  001A7C  6F28               	movwf	(??_main+9)& (0+255),b
  2165  001A7E  0A80               	xorlw	128
  2166  001A80  6F27               	movwf	(??_main+8)& (0+255),b
  2167  001A82  0101               	movlb	1	; () banked
  2168  001A84  5123               	movf	(??_main+4)& (0+255),w,b
  2169  001A86  5C57               	subwf	_stoppingTime,w,c
  2170  001A88  0101               	movlb	1	; () banked
  2171  001A8A  5124               	movf	(??_main+5)& (0+255),w,b
  2172  001A8C  5858               	subwfb	_stoppingTime+1,w,c
  2173  001A8E  0101               	movlb	1	; () banked
  2174  001A90  5125               	movf	(??_main+6)& (0+255),w,b
  2175  001A92  0101               	movlb	1	; () banked
  2176  001A94  5928               	subwfb	(??_main+9)& (0+255),w,b
  2177  001A96  0101               	movlb	1	; () banked
  2178  001A98  5126               	movf	(??_main+7)& (0+255),w,b
  2179  001A9A  0A80               	xorlw	128
  2180  001A9C  0101               	movlb	1	; () banked
  2181  001A9E  5927               	subwfb	(??_main+8)& (0+255),w,b
  2182  001AA0  B0D8               	btfsc	status,0,c
  2183  001AA2  D005               	goto	l7075
  2184                           
  2185                           ; BSR set to: 1
  2186                           ;main.c: 150: {
  2187                           ;main.c: 151: terminate = 1;
  2188  001AA4  0E00               	movlw	0
  2189  001AA6  6E47               	movwf	_terminate+1,c
  2190  001AA8  0E01               	movlw	1
  2191  001AAA  6E46               	movwf	_terminate,c
  2192                           
  2193                           ;main.c: 152: break;
  2194  001AAC  D008               	goto	l7079
  2195  001AAE                     l7075:
  2196                           
  2197                           ; BSR set to: 1
  2198  001AAE  5038               	movf	_batteryDetected,w,c
  2199  001AB0  1039               	iorwf	_batteryDetected+1,w,c
  2200  001AB2  A4D8               	btfss	status,2,c
  2201  001AB4  D004               	goto	l7079
  2202                           
  2203                           ; BSR set to: 1
  2204  001AB6  5046               	movf	_terminate,w,c
  2205  001AB8  1047               	iorwf	_terminate+1,w,c
  2206  001ABA  B4D8               	btfsc	status,2,c
  2207  001ABC  D6E2               	goto	l7057
  2208  001ABE                     l7079:
  2209                           
  2210                           ; BSR set to: 1
  2211                           ;main.c: 153: }
  2212                           ;main.c: 154: }
  2213                           ;main.c: 156: if(terminate)break;
  2214  001ABE  5046               	movf	_terminate,w,c
  2215  001AC0  1047               	iorwf	_terminate+1,w,c
  2216  001AC2  A4D8               	btfss	status,2,c
  2217  001AC4  D00B               	goto	l7089
  2218                           
  2219                           ; BSR set to: 1
  2220                           ;main.c: 158: sortBattery();
  2221                           
  2222                           ; BSR set to: 1
  2223                           
  2224                           ; BSR set to: 1
  2225  001AC6  EC1C  F007         	call	_sortBattery	;wreg free
  2226                           
  2227                           ;main.c: 161: lastBatteryTime = time;
  2228  001ACA  C034  F130         	movff	_time,main@lastBatteryTime
  2229  001ACE  C035  F131         	movff	_time+1,main@lastBatteryTime+1
  2230                           
  2231                           ;main.c: 162: batteryDetected = 0;
  2232  001AD2  0E00               	movlw	0
  2233  001AD4  6E39               	movwf	_batteryDetected+1,c
  2234  001AD6  0E00               	movlw	0
  2235  001AD8  6E38               	movwf	_batteryDetected,c
  2236  001ADA  D6B1               	goto	l7049
  2237  001ADC                     l7089:
  2238                           
  2239                           ;main.c: 163: }
  2240                           ;main.c: 166: digitalWrite(cylinderMotor, 0);
  2241  001ADC  0E51               	movlw	low _cylinderMotor
  2242  001ADE  6E27               	movwf	digitalWrite@pin,c
  2243  001AE0  0E01               	movlw	high _cylinderMotor
  2244  001AE2  6E28               	movwf	digitalWrite@pin+1,c
  2245  001AE4  0E00               	movlw	0
  2246  001AE6  6E2A               	movwf	digitalWrite@val+1,c
  2247  001AE8  0E00               	movlw	0
  2248  001AEA  6E29               	movwf	digitalWrite@val,c
  2249  001AEC  EC36  F017         	call	_digitalWrite	;wreg free
  2250                           
  2251                           ;main.c: 169: lcdClear();
  2252  001AF0  EC48  F01D         	call	_lcdClear	;wreg free
  2253                           
  2254                           ;main.c: 170: printf("[AA,C,9V,OTHER]\n");
  2255  001AF4  0EAF               	movlw	low STR_3
  2256  001AF6  0100               	movlb	0	; () banked
  2257  001AF8  6FC9               	movwf	printf@f& (0+255),b
  2258  001AFA  0EFF               	movlw	high STR_3
  2259  001AFC  0100               	movlb	0	; () banked
  2260  001AFE  6FCA               	movwf	(printf@f+1)& (0+255),b
  2261  001B00  EC09  F000         	call	_printf	;wreg free
  2262                           
  2263                           ;main.c: 171: printf("[%d,%d,%d,%d]",n_AA,n_C,n_9V,n_OTHER);
  2264  001B04  0EE0               	movlw	low STR_4
  2265  001B06  0100               	movlb	0	; () banked
  2266  001B08  6FC9               	movwf	printf@f& (0+255),b
  2267  001B0A  0EFF               	movlw	high STR_4
  2268  001B0C  0100               	movlb	0	; () banked
  2269  001B0E  6FCA               	movwf	(printf@f+1)& (0+255),b
  2270  001B10  C040  F0CB         	movff	_n_AA,?_printf+2
  2271  001B14  C041  F0CC         	movff	_n_AA+1,?_printf+3
  2272  001B18  C042  F0CD         	movff	_n_C,?_printf+4
  2273  001B1C  C043  F0CE         	movff	_n_C+1,?_printf+5
  2274  001B20  C03E  F0CF         	movff	_n_9V,?_printf+6
  2275  001B24  C03F  F0D0         	movff	_n_9V+1,?_printf+7
  2276  001B28  C044  F0D1         	movff	_n_OTHER,?_printf+8
  2277  001B2C  C045  F0D2         	movff	_n_OTHER+1,?_printf+9
  2278  001B30  EC09  F000         	call	_printf	;wreg free
  2279                           
  2280                           ;main.c: 172: readKeypad();
  2281  001B34  ECC0  F01C         	call	_readKeypad	;wreg free
  2282  001B38  D635               	goto	l7033
  2283  001B3A                     l147:
  2284  001B3A  D7FF               	goto	l147
  2285  001B3C                     __end_of_main:
  2286                           	opt stack 0
  2287                           tblptru	equ	0xFF8
  2288                           tblptrh	equ	0xFF7
  2289                           tblptrl	equ	0xFF6
  2290                           tablat	equ	0xFF5
  2291                           postinc0	equ	0xFEE
  2292                           wreg	equ	0xFE8
  2293                           postdec1	equ	0xFE5
  2294                           fsr1l	equ	0xFE1
  2295                           status	equ	0xFD8
  2296                           
  2297 ;; *************** function _sortBattery *****************
  2298 ;; Defined at:
  2299 ;;		line 180 in file "main.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;		None
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  V               3   22[BANK1 ] float 
  2304 ;;  i               2   18[BANK1 ] int 
  2305 ;;  i               3   25[BANK1 ] float 
  2306 ;;  V               3   28[BANK1 ] float 
  2307 ;;  V_max           3   15[BANK1 ] float 
  2308 ;;  resolution      3   12[BANK1 ] float 
  2309 ;;  Vcc             3    9[BANK1 ] float 
  2310 ;;  V_float         3    2[BANK1 ] float 
  2311 ;;  targetAngle     2   20[BANK1 ] int 
  2312 ;;  signal          2    7[BANK1 ] int 
  2313 ;;  pos_v_counte    2    5[BANK1 ] int 
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;Total ram usage:       33 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    8
  2330 ;; This function calls:
  2331 ;;		___altoft
  2332 ;;		___awtoft
  2333 ;;		___ftdiv
  2334 ;;		___ftge
  2335 ;;		___ftmul
  2336 ;;		___ftsub
  2337 ;;		___fttol
  2338 ;;		_analogRead
  2339 ;;		_digitalRead
  2340 ;;		_digitalWrite
  2341 ;;		_lcdClear
  2342 ;;		_printf
  2343 ;;		_readKeypad
  2344 ;;		_setAngle
  2345 ;; This function is called by:
  2346 ;;		_main
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           	psect	text1
  2351  000E38                     __ptext1:
  2352                           	opt stack 0
  2353  000E38                     _sortBattery:
  2354                           	opt stack 22
  2355                           
  2356                           ;main.c: 183: setAngle(conveyorServo, 90);
  2357                           
  2358                           ;incstack = 0
  2359  000E38  0E49               	movlw	low _conveyorServo
  2360  000E3A  0100               	movlb	0	; () banked
  2361  000E3C  6FE0               	movwf	setAngle@motor& (0+255),b
  2362  000E3E  0E01               	movlw	high _conveyorServo
  2363  000E40  0100               	movlb	0	; () banked
  2364  000E42  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2365  000E44  0E00               	movlw	0
  2366  000E46  0100               	movlb	0	; () banked
  2367  000E48  6FE3               	movwf	(setAngle@angle+1)& (0+255),b
  2368  000E4A  0E5A               	movlw	90
  2369  000E4C  6FE2               	movwf	setAngle@angle& (0+255),b
  2370  000E4E  ECD0  F016         	call	_setAngle	;wreg free
  2371                           
  2372                           ;main.c: 184: digitalWrite(cylinderMotor, 0);
  2373  000E52  0E51               	movlw	low _cylinderMotor
  2374  000E54  6E27               	movwf	digitalWrite@pin,c
  2375  000E56  0E01               	movlw	high _cylinderMotor
  2376  000E58  6E28               	movwf	digitalWrite@pin+1,c
  2377  000E5A  0E00               	movlw	0
  2378  000E5C  6E2A               	movwf	digitalWrite@val+1,c
  2379  000E5E  0E00               	movlw	0
  2380  000E60  6E29               	movwf	digitalWrite@val,c
  2381  000E62  EC36  F017         	call	_digitalWrite	;wreg free
  2382                           
  2383                           ;main.c: 187: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2384  000E66  0E0D               	movlw	13
  2385  000E68  0100               	movlb	0	; () banked
  2386  000E6A  6FF8               	movwf	(??_sortBattery+1)& (0+255),b
  2387  000E6C  0EAF               	movlw	175
  2388  000E6E  0100               	movlb	0	; () banked
  2389  000E70  6FF7               	movwf	??_sortBattery& (0+255),b
  2390  000E72  0EB6               	movlw	182
  2391  000E74                     u7677:
  2392  000E74  2EE8               	decfsz	wreg,f,c
  2393  000E76  D7FE               	bra	u7677
  2394  000E78  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2395  000E7A  D7FC               	bra	u7677
  2396  000E7C  2FF8               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2397  000E7E  D7FA               	bra	u7677
  2398  000E80  F000               	nop	
  2399                           
  2400                           ;main.c: 189: float Vcc = 5.00;
  2401  000E82  0E00               	movlw	0
  2402  000E84  0101               	movlb	1	; () banked
  2403  000E86  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2404  000E88  0EA0               	movlw	160
  2405  000E8A  0101               	movlb	1	; () banked
  2406  000E8C  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2407  000E8E  0E40               	movlw	64
  2408  000E90  0101               	movlb	1	; () banked
  2409  000E92  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2410                           
  2411                           ; BSR set to: 1
  2412                           ;main.c: 190: float resolution = (1<<10) - 1;
  2413  000E94  0EC0               	movlw	192
  2414  000E96  0101               	movlb	1	; () banked
  2415  000E98  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2416  000E9A  0E7F               	movlw	127
  2417  000E9C  0101               	movlb	1	; () banked
  2418  000E9E  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2419  000EA0  0E44               	movlw	68
  2420  000EA2  0101               	movlb	1	; () banked
  2421  000EA4  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2422                           
  2423                           ; BSR set to: 1
  2424                           ;main.c: 191: float V_max = 0;
  2425  000EA6  0E00               	movlw	0
  2426  000EA8  0101               	movlb	1	; () banked
  2427  000EAA  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2428  000EAC  0E00               	movlw	0
  2429  000EAE  0101               	movlb	1	; () banked
  2430  000EB0  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2431  000EB2  0E00               	movlw	0
  2432  000EB4  0101               	movlb	1	; () banked
  2433  000EB6  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2434                           
  2435                           ; BSR set to: 1
  2436                           ;main.c: 192: float V_float = 0;
  2437  000EB8  0E00               	movlw	0
  2438  000EBA  0101               	movlb	1	; () banked
  2439  000EBC  6F02               	movwf	sortBattery@V_float& (0+255),b
  2440  000EBE  0E00               	movlw	0
  2441  000EC0  0101               	movlb	1	; () banked
  2442  000EC2  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2443  000EC4  0E00               	movlw	0
  2444  000EC6  0101               	movlb	1	; () banked
  2445  000EC8  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2446                           
  2447                           ; BSR set to: 1
  2448                           ;main.c: 193: int pos_v_counter = 1;
  2449  000ECA  0E00               	movlw	0
  2450  000ECC  0101               	movlb	1	; () banked
  2451  000ECE  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2452  000ED0  0E01               	movlw	1
  2453  000ED2  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2454                           
  2455                           ; BSR set to: 1
  2456                           ;main.c: 194: int signal = 0;
  2457  000ED4  0E00               	movlw	0
  2458  000ED6  0101               	movlb	1	; () banked
  2459  000ED8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2460  000EDA  0E00               	movlw	0
  2461  000EDC  6F07               	movwf	sortBattery@signal& (0+255),b
  2462                           
  2463                           ; BSR set to: 1
  2464                           ;main.c: 198: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2465  000EDE  C04B  F02F         	movff	_padAngle_NEUTRAL,___awtoft@c
  2466  000EE2  C04C  F030         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2467  000EE6  EC22  F01C         	call	___awtoft	;wreg free
  2468  000EEA  C02F  F119         	movff	?___awtoft,sortBattery@i
  2469  000EEE  C030  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2470  000EF2  C031  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2471  000EF6  D0FB               	goto	l6879
  2472  000EF8                     l6853:
  2473                           
  2474                           ;main.c: 199: setAngle(padServo, i);
  2475  000EF8  C119  F0BA         	movff	sortBattery@i,___fttol@f1
  2476  000EFC  C11A  F0BB         	movff	sortBattery@i+1,___fttol@f1+1
  2477  000F00  C11B  F0BC         	movff	sortBattery@i+2,___fttol@f1+2
  2478  000F04  ECC9  F012         	call	___fttol	;wreg free
  2479  000F08  C0BA  F100         	movff	?___fttol,_sortBattery$1347
  2480  000F0C  C0BB  F101         	movff	?___fttol+1,_sortBattery$1347+1
  2481                           
  2482                           ;main.c: 199: setAngle(padServo, i);
  2483  000F10  0E5D               	movlw	low _padServo
  2484  000F12  0100               	movlb	0	; () banked
  2485  000F14  6FE0               	movwf	setAngle@motor& (0+255),b
  2486  000F16  0E01               	movlw	high _padServo
  2487  000F18  0100               	movlb	0	; () banked
  2488  000F1A  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2489  000F1C  C100  F0E2         	movff	_sortBattery$1347,setAngle@angle
  2490  000F20  C101  F0E3         	movff	_sortBattery$1347+1,setAngle@angle+1
  2491  000F24  ECD0  F016         	call	_setAngle	;wreg free
  2492                           
  2493                           ;main.c: 200: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2494  000F28  0E53               	movlw	83
  2495  000F2A                     u7687:
  2496  000F2A  2EE8               	decfsz	wreg,f,c
  2497  000F2C  D7FE               	bra	u7687
  2498  000F2E  F000               	nop	
  2499                           
  2500                           ;main.c: 201: digitalWrite(AA_float, 1);
  2501  000F30  0E45               	movlw	low _AA_float
  2502  000F32  6E27               	movwf	digitalWrite@pin,c
  2503  000F34  0E01               	movlw	high _AA_float
  2504  000F36  6E28               	movwf	digitalWrite@pin+1,c
  2505  000F38  0E00               	movlw	0
  2506  000F3A  6E2A               	movwf	digitalWrite@val+1,c
  2507  000F3C  0E01               	movlw	1
  2508  000F3E  6E29               	movwf	digitalWrite@val,c
  2509  000F40  EC36  F017         	call	_digitalWrite	;wreg free
  2510                           
  2511                           ;main.c: 202: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2512  000F44  C10C  F089         	movff	sortBattery@resolution,___ftdiv@f2
  2513  000F48  C10D  F08A         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2514  000F4C  C10E  F08B         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2515  000F50  C177  F027         	movff	_padPin3+2,analogRead@channel
  2516  000F54  C178  F028         	movff	_padPin3+3,analogRead@channel+1
  2517  000F58  EC06  F01C         	call	_analogRead	;wreg free
  2518  000F5C  C027  F02F         	movff	?_analogRead,___altoft@c
  2519  000F60  C028  F030         	movff	?_analogRead+1,___altoft@c+1
  2520  000F64  C029  F031         	movff	?_analogRead+2,___altoft@c+2
  2521  000F68  C02A  F032         	movff	?_analogRead+3,___altoft@c+3
  2522  000F6C  EC54  F019         	call	___altoft	;wreg free
  2523  000F70  C02F  F086         	movff	?___altoft,___ftdiv@f1
  2524  000F74  C030  F087         	movff	?___altoft+1,___ftdiv@f1+1
  2525  000F78  C031  F088         	movff	?___altoft+2,___ftdiv@f1+2
  2526  000F7C  EC23  F012         	call	___ftdiv	;wreg free
  2527  000F80  C086  F095         	movff	?___ftdiv,___ftmul@f1
  2528  000F84  C087  F096         	movff	?___ftdiv+1,___ftmul@f1+1
  2529  000F88  C088  F097         	movff	?___ftdiv+2,___ftmul@f1+2
  2530  000F8C  C109  F098         	movff	sortBattery@Vcc,___ftmul@f2
  2531  000F90  C10A  F099         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2532  000F94  C10B  F09A         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2533  000F98  ECC6  F010         	call	___ftmul	;wreg free
  2534  000F9C  C095  F116         	movff	?___ftmul,sortBattery@V
  2535  000FA0  C096  F117         	movff	?___ftmul+1,sortBattery@V+1
  2536  000FA4  C097  F118         	movff	?___ftmul+2,sortBattery@V+2
  2537                           
  2538                           ;main.c: 204: if(V > 0.1)pos_v_counter++;
  2539  000FA8  0ECD               	movlw	205
  2540  000FAA  0100               	movlb	0	; () banked
  2541  000FAC  6F80               	movwf	___ftge@ff1& (0+255),b
  2542  000FAE  0ECC               	movlw	204
  2543  000FB0  0100               	movlb	0	; () banked
  2544  000FB2  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  2545  000FB4  0E3D               	movlw	61
  2546  000FB6  0100               	movlb	0	; () banked
  2547  000FB8  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  2548  000FBA  C116  F083         	movff	sortBattery@V,___ftge@ff2
  2549  000FBE  C117  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2550  000FC2  C118  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2551  000FC6  EC9A  F017         	call	___ftge	;wreg free
  2552  000FCA  0100               	movlb	0	; () banked
  2553  000FCC  B0D8               	btfsc	status,0,c
  2554  000FCE  D003               	goto	l6867
  2555                           
  2556                           ; BSR set to: 0
  2557  000FD0  0101               	movlb	1	; () banked
  2558  000FD2  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2559  000FD4  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2560  000FD6                     l6867:
  2561                           
  2562                           ;main.c: 206: if(V > V_max) {
  2563  000FD6  C10F  F080         	movff	sortBattery@V_max,___ftge@ff1
  2564  000FDA  C110  F081         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2565  000FDE  C111  F082         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2566  000FE2  C116  F083         	movff	sortBattery@V,___ftge@ff2
  2567  000FE6  C117  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2568  000FEA  C118  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2569  000FEE  EC9A  F017         	call	___ftge	;wreg free
  2570  000FF2  0100               	movlb	0	; () banked
  2571  000FF4  B0D8               	btfsc	status,0,c
  2572  000FF6  D064               	goto	l6877
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;main.c: 207: signal = digitalRead(padPin1)<<1;
  2576  000FF8  0E55               	movlw	low _padPin1
  2577  000FFA  6E27               	movwf	digitalRead@pin,c
  2578  000FFC  0E01               	movlw	high _padPin1
  2579  000FFE  6E28               	movwf	digitalRead@pin+1,c
  2580  001000  EC77  F015         	call	_digitalRead	;wreg free
  2581  001004  90D8               	bcf	status,0,c
  2582  001006  3427               	rlcf	?_digitalRead,w,c
  2583  001008  0101               	movlb	1	; () banked
  2584  00100A  6F07               	movwf	sortBattery@signal& (0+255),b
  2585  00100C  3428               	rlcf	?_digitalRead+1,w,c
  2586  00100E  0101               	movlb	1	; () banked
  2587  001010  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2588                           
  2589                           ;main.c: 208: signal |= digitalRead(padPin2)<<0;
  2590  001012  0E59               	movlw	low _padPin2
  2591  001014  6E27               	movwf	digitalRead@pin,c
  2592  001016  0E01               	movlw	high _padPin2
  2593  001018  6E28               	movwf	digitalRead@pin+1,c
  2594  00101A  EC77  F015         	call	_digitalRead	;wreg free
  2595  00101E  5027               	movf	?_digitalRead,w,c
  2596  001020  0101               	movlb	1	; () banked
  2597  001022  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2598  001024  5028               	movf	?_digitalRead+1,w,c
  2599  001026  0101               	movlb	1	; () banked
  2600  001028  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2601                           
  2602                           ; BSR set to: 1
  2603                           ;main.c: 210: V_max = V;
  2604  00102A  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2605  00102E  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2606  001032  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2607                           
  2608                           ;main.c: 213: digitalWrite(AA_float, 0);
  2609  001036  0E45               	movlw	low _AA_float
  2610  001038  6E27               	movwf	digitalWrite@pin,c
  2611  00103A  0E01               	movlw	high _AA_float
  2612  00103C  6E28               	movwf	digitalWrite@pin+1,c
  2613  00103E  0E00               	movlw	0
  2614  001040  6E2A               	movwf	digitalWrite@val+1,c
  2615  001042  0E00               	movlw	0
  2616  001044  6E29               	movwf	digitalWrite@val,c
  2617  001046  EC36  F017         	call	_digitalWrite	;wreg free
  2618                           
  2619                           ;main.c: 214: _delay((unsigned long)((1)*(10000000/4000.0)));
  2620  00104A  0E04               	movlw	4
  2621  00104C  0100               	movlb	0	; () banked
  2622  00104E  6FF7               	movwf	??_sortBattery& (0+255),b
  2623  001050  0E3D               	movlw	61
  2624  001052                     u7697:
  2625  001052  2EE8               	decfsz	wreg,f,c
  2626  001054  D7FE               	bra	u7697
  2627  001056  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2628  001058  D7FC               	bra	u7697
  2629  00105A  D000               	nop2	
  2630                           
  2631                           ;main.c: 215: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2632  00105C  C10C  F089         	movff	sortBattery@resolution,___ftdiv@f2
  2633  001060  C10D  F08A         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2634  001064  C10E  F08B         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2635  001068  C177  F027         	movff	_padPin3+2,analogRead@channel
  2636  00106C  C178  F028         	movff	_padPin3+3,analogRead@channel+1
  2637  001070  EC06  F01C         	call	_analogRead	;wreg free
  2638  001074  C027  F02F         	movff	?_analogRead,___altoft@c
  2639  001078  C028  F030         	movff	?_analogRead+1,___altoft@c+1
  2640  00107C  C029  F031         	movff	?_analogRead+2,___altoft@c+2
  2641  001080  C02A  F032         	movff	?_analogRead+3,___altoft@c+3
  2642  001084  EC54  F019         	call	___altoft	;wreg free
  2643  001088  C02F  F086         	movff	?___altoft,___ftdiv@f1
  2644  00108C  C030  F087         	movff	?___altoft+1,___ftdiv@f1+1
  2645  001090  C031  F088         	movff	?___altoft+2,___ftdiv@f1+2
  2646  001094  EC23  F012         	call	___ftdiv	;wreg free
  2647  001098  C086  F095         	movff	?___ftdiv,___ftmul@f1
  2648  00109C  C087  F096         	movff	?___ftdiv+1,___ftmul@f1+1
  2649  0010A0  C088  F097         	movff	?___ftdiv+2,___ftmul@f1+2
  2650  0010A4  C109  F098         	movff	sortBattery@Vcc,___ftmul@f2
  2651  0010A8  C10A  F099         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2652  0010AC  C10B  F09A         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2653  0010B0  ECC6  F010         	call	___ftmul	;wreg free
  2654  0010B4  C095  F102         	movff	?___ftmul,sortBattery@V_float
  2655  0010B8  C096  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2656  0010BC  C097  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2657  0010C0                     l6877:
  2658  0010C0  C119  F0BA         	movff	sortBattery@i,___ftsub@f1
  2659  0010C4  C11A  F0BB         	movff	sortBattery@i+1,___ftsub@f1+1
  2660  0010C8  C11B  F0BC         	movff	sortBattery@i+2,___ftsub@f1+2
  2661  0010CC  0ECD               	movlw	205
  2662  0010CE  0100               	movlb	0	; () banked
  2663  0010D0  6FBD               	movwf	___ftsub@f2& (0+255),b
  2664  0010D2  0ECC               	movlw	204
  2665  0010D4  0100               	movlb	0	; () banked
  2666  0010D6  6FBE               	movwf	(___ftsub@f2+1)& (0+255),b
  2667  0010D8  0E3D               	movlw	61
  2668  0010DA  0100               	movlb	0	; () banked
  2669  0010DC  6FBF               	movwf	(___ftsub@f2+2)& (0+255),b
  2670  0010DE  EC2C  F01B         	call	___ftsub	;wreg free
  2671  0010E2  C0BA  F119         	movff	?___ftsub,sortBattery@i
  2672  0010E6  C0BB  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2673  0010EA  C0BC  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2674  0010EE                     l6879:
  2675  0010EE  C049  F02F         	movff	_padAngle_CLOSE,___awtoft@c
  2676  0010F2  C04A  F030         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2677  0010F6  EC22  F01C         	call	___awtoft	;wreg free
  2678  0010FA  C02F  F080         	movff	?___awtoft,___ftge@ff1
  2679  0010FE  C030  F081         	movff	?___awtoft+1,___ftge@ff1+1
  2680  001102  C031  F082         	movff	?___awtoft+2,___ftge@ff1+2
  2681  001106  C119  F083         	movff	sortBattery@i,___ftge@ff2
  2682  00110A  C11A  F084         	movff	sortBattery@i+1,___ftge@ff2+1
  2683  00110E  C11B  F085         	movff	sortBattery@i+2,___ftge@ff2+2
  2684  001112  EC9A  F017         	call	___ftge	;wreg free
  2685  001116  0100               	movlb	0	; () banked
  2686  001118  A0D8               	btfss	status,0,c
  2687  00111A  D6EE               	goto	l6853
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;main.c: 217: }
  2691                           ;main.c: 218: }
  2692                           ;main.c: 220: int targetAngle;
  2693                           ;main.c: 221: float V = V_max;
  2694  00111C  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_219
  2695  001120  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_219+1
  2696  001124  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_219+2
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 223: lcdClear();
  2700  001128  EC48  F01D         	call	_lcdClear	;wreg free
  2701                           
  2702                           ;main.c: 224: printf("N: %d,\nV: %.3f",pos_v_counter, V);
  2703  00112C  0ED1               	movlw	low STR_5
  2704  00112E  0100               	movlb	0	; () banked
  2705  001130  6FC9               	movwf	printf@f& (0+255),b
  2706  001132  0EFF               	movlw	high STR_5
  2707  001134  0100               	movlb	0	; () banked
  2708  001136  6FCA               	movwf	(printf@f+1)& (0+255),b
  2709  001138  C105  F0CB         	movff	sortBattery@pos_v_counter,?_printf+2
  2710  00113C  C106  F0CC         	movff	sortBattery@pos_v_counter+1,?_printf+3
  2711  001140  C11C  F0CD         	movff	sortBattery@V_219,?_printf+4
  2712  001144  C11D  F0CE         	movff	sortBattery@V_219+1,?_printf+5
  2713  001148  C11E  F0CF         	movff	sortBattery@V_219+2,?_printf+6
  2714  00114C  EC09  F000         	call	_printf	;wreg free
  2715                           
  2716                           ;main.c: 226: readKeypad();
  2717  001150  ECC0  F01C         	call	_readKeypad	;wreg free
  2718                           
  2719                           ;main.c: 230: switch(signal){
  2720  001154  D063               	goto	l6915
  2721  001156                     l6887:
  2722                           
  2723                           ;main.c: 232: if(V_float < 0.1){
  2724  001156  C102  F080         	movff	sortBattery@V_float,___ftge@ff1
  2725  00115A  C103  F081         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2726  00115E  C104  F082         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2727  001162  0ECD               	movlw	205
  2728  001164  0100               	movlb	0	; () banked
  2729  001166  6F83               	movwf	___ftge@ff2& (0+255),b
  2730  001168  0ECC               	movlw	204
  2731  00116A  0100               	movlb	0	; () banked
  2732  00116C  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2733  00116E  0E3D               	movlw	61
  2734  001170  0100               	movlb	0	; () banked
  2735  001172  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2736  001174  EC9A  F017         	call	___ftge	;wreg free
  2737  001178  0100               	movlb	0	; () banked
  2738  00117A  B0D8               	btfsc	status,0,c
  2739  00117C  D018               	goto	l6897
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;main.c: 233: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2743  00117E  C13B  F080         	movff	_V_LIM_AA,___ftge@ff1
  2744  001182  C13C  F081         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2745  001186  C13D  F082         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2746  00118A  C11C  F083         	movff	sortBattery@V_219,___ftge@ff2
  2747  00118E  C11D  F084         	movff	sortBattery@V_219+1,___ftge@ff2+1
  2748  001192  C11E  F085         	movff	sortBattery@V_219+2,___ftge@ff2+2
  2749  001196  EC9A  F017         	call	___ftge	;wreg free
  2750  00119A  0100               	movlb	0	; () banked
  2751  00119C  B0D8               	btfsc	status,0,c
  2752  00119E  D037               	goto	l168
  2753                           
  2754                           ; BSR set to: 0
  2755  0011A0  C051  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2756  0011A4  C052  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2757                           
  2758                           ; BSR set to: 0
  2759  0011A8  4A40               	infsnz	_n_AA,f,c
  2760  0011AA  2A41               	incf	_n_AA+1,f,c
  2761  0011AC  D04B               	goto	l6917
  2762  0011AE                     l6897:
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;main.c: 239: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  2766  0011AE  C138  F080         	movff	_V_LIM_9V,___ftge@ff1
  2767  0011B2  C139  F081         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2768  0011B6  C13A  F082         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2769  0011BA  C11C  F083         	movff	sortBattery@V_219,___ftge@ff2
  2770  0011BE  C11D  F084         	movff	sortBattery@V_219+1,___ftge@ff2+1
  2771  0011C2  C11E  F085         	movff	sortBattery@V_219+2,___ftge@ff2+2
  2772  0011C6  EC9A  F017         	call	___ftge	;wreg free
  2773  0011CA  0100               	movlb	0	; () banked
  2774  0011CC  B0D8               	btfsc	status,0,c
  2775  0011CE  D01F               	goto	l168
  2776                           
  2777                           ; BSR set to: 0
  2778  0011D0  C04F  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2779  0011D4  C050  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2780                           
  2781                           ; BSR set to: 0
  2782  0011D8  4A3E               	infsnz	_n_9V,f,c
  2783  0011DA  2A3F               	incf	_n_9V+1,f,c
  2784  0011DC  D033               	goto	l6917
  2785  0011DE                     l6905:
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;main.c: 243: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  2789  0011DE  C13E  F080         	movff	_V_LIM_C,___ftge@ff1
  2790  0011E2  C13F  F081         	movff	_V_LIM_C+1,___ftge@ff1+1
  2791  0011E6  C140  F082         	movff	_V_LIM_C+2,___ftge@ff1+2
  2792  0011EA  C11C  F083         	movff	sortBattery@V_219,___ftge@ff2
  2793  0011EE  C11D  F084         	movff	sortBattery@V_219+1,___ftge@ff2+1
  2794  0011F2  C11E  F085         	movff	sortBattery@V_219+2,___ftge@ff2+2
  2795  0011F6  EC9A  F017         	call	___ftge	;wreg free
  2796  0011FA  0100               	movlb	0	; () banked
  2797  0011FC  B0D8               	btfsc	status,0,c
  2798  0011FE  D007               	goto	l168
  2799                           
  2800                           ; BSR set to: 0
  2801  001200  C053  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  2802  001204  C054  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2803                           
  2804                           ; BSR set to: 0
  2805  001208  4A42               	infsnz	_n_C,f,c
  2806  00120A  2A43               	incf	_n_C+1,f,c
  2807  00120C  D01B               	goto	l6917
  2808  00120E                     l168:
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;main.c: 244: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2812  00120E  C055  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2813  001212  C056  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2814                           
  2815                           ; BSR set to: 0
  2816  001216  4A44               	infsnz	_n_OTHER,f,c
  2817  001218  2A45               	incf	_n_OTHER+1,f,c
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;main.c: 246: }
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;main.c: 245: break;
  2824  00121A  D014               	goto	l6917
  2825  00121C                     l6915:
  2826  00121C  C107  F0F7         	movff	sortBattery@signal,??_sortBattery
  2827  001220  C108  F0F8         	movff	sortBattery@signal+1,??_sortBattery+1
  2828                           
  2829                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2830                           ; Switch size 1, requested type "space"
  2831                           ; Number of cases is 1, Range of values is 0 to 0
  2832                           ; switch strategies available:
  2833                           ; Name         Instructions Cycles
  2834                           ; simple_byte            4     3 (average)
  2835                           ;	Chosen strategy is simple_byte
  2836  001224  0100               	movlb	0	; () banked
  2837  001226  51F8               	movf	(??_sortBattery+1)& (0+255),w,b
  2838  001228  0A00               	xorlw	0	; case 0
  2839  00122A  A4D8               	btfss	status,2,c
  2840  00122C  D00B               	goto	l6917
  2841                           
  2842                           ; BSR set to: 0
  2843                           ; Switch size 1, requested type "space"
  2844                           ; Number of cases is 3, Range of values is 0 to 2
  2845                           ; switch strategies available:
  2846                           ; Name         Instructions Cycles
  2847                           ; simple_byte           10     6 (average)
  2848                           ;	Chosen strategy is simple_byte
  2849  00122E  0100               	movlb	0	; () banked
  2850  001230  51F7               	movf	??_sortBattery& (0+255),w,b
  2851  001232  0A00               	xorlw	0	; case 0
  2852  001234  B4D8               	btfsc	status,2,c
  2853  001236  D78F               	goto	l6887
  2854  001238  0A01               	xorlw	1	; case 1
  2855  00123A  B4D8               	btfsc	status,2,c
  2856  00123C  D7D0               	goto	l6905
  2857  00123E  0A03               	xorlw	3	; case 2
  2858  001240  B4D8               	btfsc	status,2,c
  2859  001242  D7B5               	goto	l6897
  2860  001244                     l6917:
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;main.c: 248: setAngle(redirectingServo, targetAngle);
  2864  001244  0E61               	movlw	low _redirectingServo
  2865  001246  0100               	movlb	0	; () banked
  2866  001248  6FE0               	movwf	setAngle@motor& (0+255),b
  2867  00124A  0E01               	movlw	high _redirectingServo
  2868  00124C  0100               	movlb	0	; () banked
  2869  00124E  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2870  001250  C114  F0E2         	movff	sortBattery@targetAngle,setAngle@angle
  2871  001254  C115  F0E3         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2872  001258  ECD0  F016         	call	_setAngle	;wreg free
  2873                           
  2874                           ;main.c: 249: _delay((unsigned long)((500)*(10000000/4000.0)));
  2875  00125C  0E07               	movlw	7
  2876  00125E  0100               	movlb	0	; () banked
  2877  001260  6FF8               	movwf	(??_sortBattery+1)& (0+255),b
  2878  001262  0E58               	movlw	88
  2879  001264  0100               	movlb	0	; () banked
  2880  001266  6FF7               	movwf	??_sortBattery& (0+255),b
  2881  001268  0E59               	movlw	89
  2882  00126A                     u7707:
  2883  00126A  2EE8               	decfsz	wreg,f,c
  2884  00126C  D7FE               	bra	u7707
  2885  00126E  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2886  001270  D7FC               	bra	u7707
  2887  001272  2FF8               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2888  001274  D7FA               	bra	u7707
  2889  001276  D000               	nop2	
  2890                           
  2891                           ;main.c: 253: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  2892  001278  C049  F112         	movff	_padAngle_CLOSE,sortBattery@i_221
  2893  00127C  C04A  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_221+1
  2894  001280  D018               	goto	l6929
  2895  001282                     l6923:
  2896                           
  2897                           ;main.c: 254: setAngle(padServo, i);
  2898  001282  0E5D               	movlw	low _padServo
  2899  001284  0100               	movlb	0	; () banked
  2900  001286  6FE0               	movwf	setAngle@motor& (0+255),b
  2901  001288  0E01               	movlw	high _padServo
  2902  00128A  0100               	movlb	0	; () banked
  2903  00128C  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2904  00128E  C112  F0E2         	movff	sortBattery@i_221,setAngle@angle
  2905  001292  C113  F0E3         	movff	sortBattery@i_221+1,setAngle@angle+1
  2906  001296  ECD0  F016         	call	_setAngle	;wreg free
  2907                           
  2908                           ;main.c: 255: _delay((unsigned long)((3)*(10000000/4000.0)));
  2909  00129A  0E0A               	movlw	10
  2910  00129C  0100               	movlb	0	; () banked
  2911  00129E  6FF7               	movwf	??_sortBattery& (0+255),b
  2912  0012A0  0EBC               	movlw	188
  2913  0012A2                     u7717:
  2914  0012A2  2EE8               	decfsz	wreg,f,c
  2915  0012A4  D7FE               	bra	u7717
  2916  0012A6  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2917  0012A8  D7FC               	bra	u7717
  2918  0012AA  F000               	nop	
  2919  0012AC  0101               	movlb	1	; () banked
  2920  0012AE  4B12               	infsnz	sortBattery@i_221& (0+255),f,b
  2921  0012B0  2B13               	incf	(sortBattery@i_221+1)& (0+255),f,b
  2922  0012B2                     l6929:
  2923  0012B2  504D               	movf	_padAngle_OPEN,w,c
  2924  0012B4  0101               	movlb	1	; () banked
  2925  0012B6  5D12               	subwf	sortBattery@i_221& (0+255),w,b
  2926  0012B8  0101               	movlb	1	; () banked
  2927  0012BA  5113               	movf	(sortBattery@i_221+1)& (0+255),w,b
  2928  0012BC  0A80               	xorlw	128
  2929  0012BE  0100               	movlb	0	; () banked
  2930  0012C0  6FF7               	movwf	??_sortBattery& (0+255),b
  2931  0012C2  504E               	movf	_padAngle_OPEN+1,w,c
  2932  0012C4  0A80               	xorlw	128
  2933  0012C6  0100               	movlb	0	; () banked
  2934  0012C8  59F7               	subwfb	??_sortBattery& (0+255),w,b
  2935  0012CA  A0D8               	btfss	status,0,c
  2936  0012CC  D7DA               	goto	l6923
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;main.c: 256: }
  2940                           ;main.c: 258: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2941                           
  2942                           ; BSR set to: 0
  2943  0012CE  0E0D               	movlw	13
  2944  0012D0  0100               	movlb	0	; () banked
  2945  0012D2  6FF8               	movwf	(??_sortBattery+1)& (0+255),b
  2946  0012D4  0EAF               	movlw	175
  2947  0012D6  0100               	movlb	0	; () banked
  2948  0012D8  6FF7               	movwf	??_sortBattery& (0+255),b
  2949  0012DA  0EB6               	movlw	182
  2950  0012DC                     u7727:
  2951  0012DC  2EE8               	decfsz	wreg,f,c
  2952  0012DE  D7FE               	bra	u7727
  2953  0012E0  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2954  0012E2  D7FC               	bra	u7727
  2955  0012E4  2FF8               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2956  0012E6  D7FA               	bra	u7727
  2957  0012E8  F000               	nop	
  2958                           
  2959                           ;main.c: 262: setAngle(padServo, padAngle_NEUTRAL);
  2960  0012EA  0E5D               	movlw	low _padServo
  2961  0012EC  0100               	movlb	0	; () banked
  2962  0012EE  6FE0               	movwf	setAngle@motor& (0+255),b
  2963  0012F0  0E01               	movlw	high _padServo
  2964  0012F2  0100               	movlb	0	; () banked
  2965  0012F4  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2966  0012F6  C04B  F0E2         	movff	_padAngle_NEUTRAL,setAngle@angle
  2967  0012FA  C04C  F0E3         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2968  0012FE  ECD0  F016         	call	_setAngle	;wreg free
  2969                           
  2970                           ;main.c: 266: setAngle(conveyorServo, 130);
  2971  001302  0E49               	movlw	low _conveyorServo
  2972  001304  0100               	movlb	0	; () banked
  2973  001306  6FE0               	movwf	setAngle@motor& (0+255),b
  2974  001308  0E01               	movlw	high _conveyorServo
  2975  00130A  0100               	movlb	0	; () banked
  2976  00130C  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2977  00130E  0E00               	movlw	0
  2978  001310  0100               	movlb	0	; () banked
  2979  001312  6FE3               	movwf	(setAngle@angle+1)& (0+255),b
  2980  001314  0E82               	movlw	130
  2981  001316  6FE2               	movwf	setAngle@angle& (0+255),b
  2982  001318  ECD0  F016         	call	_setAngle	;wreg free
  2983                           
  2984                           ;main.c: 267: digitalWrite(cylinderMotor, 1);
  2985  00131C  0E51               	movlw	low _cylinderMotor
  2986  00131E  6E27               	movwf	digitalWrite@pin,c
  2987  001320  0E01               	movlw	high _cylinderMotor
  2988  001322  6E28               	movwf	digitalWrite@pin+1,c
  2989  001324  0E00               	movlw	0
  2990  001326  6E2A               	movwf	digitalWrite@val+1,c
  2991  001328  0E01               	movlw	1
  2992  00132A  6E29               	movwf	digitalWrite@val,c
  2993  00132C  EC36  F017         	call	_digitalWrite	;wreg free
  2994  001330  0012               	return		;funcret
  2995  001332                     __end_of_sortBattery:
  2996                           	opt stack 0
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           postinc0	equ	0xFEE
  3002                           wreg	equ	0xFE8
  3003                           postdec1	equ	0xFE5
  3004                           fsr1l	equ	0xFE1
  3005                           status	equ	0xFD8
  3006                           
  3007 ;; *************** function _digitalWrite *****************
  3008 ;; Defined at:
  3009 ;;		line 53 in file "iopin.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;  pin             2   38[COMRAM] PTR int 
  3012 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
  3013 ;;		 -> conveyorServo(4), cylinderMotor(4), 
  3014 ;;  val             2   40[COMRAM] int 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  p               2   45[COMRAM] int 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;Total ram usage:        9 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    3
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_main
  3037 ;;		_sortBattery
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text2
  3042  002E6C                     __ptext2:
  3043                           	opt stack 0
  3044  002E6C                     _digitalWrite:
  3045                           	opt stack 26
  3046                           
  3047                           ;iopin.c: 54: if(pin){
  3048                           
  3049                           ;incstack = 0
  3050  002E6C  5027               	movf	digitalWrite@pin,w,c
  3051  002E6E  1028               	iorwf	digitalWrite@pin+1,w,c
  3052  002E70  B4D8               	btfsc	status,2,c
  3053  002E72  0012               	return	
  3054                           
  3055                           ;iopin.c: 55: int p = 1 << pin[1];
  3056  002E74  EE20 F002          	lfsr	2,2
  3057  002E78  5027               	movf	digitalWrite@pin,w,c
  3058  002E7A  26D9               	addwf	fsr2l,f,c
  3059  002E7C  5028               	movf	digitalWrite@pin+1,w,c
  3060  002E7E  22DA               	addwfc	fsr2h,f,c
  3061  002E80  50DF               	movf	indf2,w,c
  3062  002E82  6E2B               	movwf	??_digitalWrite& (0+255),c
  3063  002E84  0E01               	movlw	1
  3064  002E86  6E2C               	movwf	(??_digitalWrite+1)& (0+255),c
  3065  002E88  0E00               	movlw	0
  3066  002E8A  6E2D               	movwf	(??_digitalWrite+2)& (0+255),c
  3067  002E8C  2A2B               	incf	??_digitalWrite,f,c
  3068  002E8E  D003               	goto	u7004
  3069  002E90                     u7005:
  3070  002E90  90D8               	bcf	status,0,c
  3071  002E92  362C               	rlcf	??_digitalWrite+1,f,c
  3072  002E94  362D               	rlcf	??_digitalWrite+2,f,c
  3073  002E96                     u7004:
  3074  002E96  2E2B               	decfsz	??_digitalWrite,f,c
  3075  002E98  D7FB               	goto	u7005
  3076  002E9A  C02C  F02E         	movff	??_digitalWrite+1,digitalWrite@p
  3077  002E9E  C02D  F02F         	movff	??_digitalWrite+2,digitalWrite@p+1
  3078                           
  3079                           ;iopin.c: 56: if(val == 0){
  3080  002EA2  5029               	movf	digitalWrite@val,w,c
  3081  002EA4  102A               	iorwf	digitalWrite@val+1,w,c
  3082  002EA6  A4D8               	btfss	status,2,c
  3083  002EA8  D02B               	goto	l6623
  3084                           
  3085                           ;iopin.c: 57: p ^= 0xff;
  3086  002EAA  0EFF               	movlw	255
  3087  002EAC  1A2E               	xorwf	digitalWrite@p,f,c
  3088                           
  3089                           ;iopin.c: 58: }
  3090                           ;iopin.c: 60: switch(pin[0]){
  3091  002EAE  D028               	goto	l6623
  3092  002EB0                     l6599:
  3093  002EB0  0429               	decf	digitalWrite@val,w,c
  3094  002EB2  102A               	iorwf	digitalWrite@val+1,w,c
  3095  002EB4  A4D8               	btfss	status,2,c
  3096  002EB6  D003               	goto	l6603
  3097  002EB8  502E               	movf	digitalWrite@p,w,c
  3098  002EBA  1289               	iorwf	3977,f,c	;volatile
  3099  002EBC  0012               	return	
  3100  002EBE                     l6603:
  3101                           
  3102                           ;iopin.c: 62: else LATA &= p;
  3103  002EBE  502E               	movf	digitalWrite@p,w,c
  3104  002EC0  1689               	andwf	3977,f,c	;volatile
  3105                           
  3106                           ;iopin.c: 63: break;
  3107  002EC2  0012               	return	
  3108  002EC4                     l6605:
  3109  002EC4  0429               	decf	digitalWrite@val,w,c
  3110  002EC6  102A               	iorwf	digitalWrite@val+1,w,c
  3111  002EC8  A4D8               	btfss	status,2,c
  3112  002ECA  D003               	goto	l6609
  3113  002ECC  502E               	movf	digitalWrite@p,w,c
  3114  002ECE  128A               	iorwf	3978,f,c	;volatile
  3115  002ED0  0012               	return	
  3116  002ED2                     l6609:
  3117                           
  3118                           ;iopin.c: 65: else LATB &= p;
  3119  002ED2  502E               	movf	digitalWrite@p,w,c
  3120  002ED4  168A               	andwf	3978,f,c	;volatile
  3121                           
  3122                           ;iopin.c: 66: break;
  3123  002ED6  0012               	return	
  3124  002ED8                     l6611:
  3125  002ED8  0429               	decf	digitalWrite@val,w,c
  3126  002EDA  102A               	iorwf	digitalWrite@val+1,w,c
  3127  002EDC  A4D8               	btfss	status,2,c
  3128  002EDE  D003               	goto	l6615
  3129  002EE0  502E               	movf	digitalWrite@p,w,c
  3130  002EE2  128B               	iorwf	3979,f,c	;volatile
  3131  002EE4  0012               	return	
  3132  002EE6                     l6615:
  3133                           
  3134                           ;iopin.c: 68: else LATC &= p;
  3135  002EE6  502E               	movf	digitalWrite@p,w,c
  3136  002EE8  168B               	andwf	3979,f,c	;volatile
  3137                           
  3138                           ;iopin.c: 69: break;
  3139  002EEA  0012               	return	
  3140  002EEC                     l6617:
  3141  002EEC  0429               	decf	digitalWrite@val,w,c
  3142  002EEE  102A               	iorwf	digitalWrite@val+1,w,c
  3143  002EF0  A4D8               	btfss	status,2,c
  3144  002EF2  D003               	goto	l6621
  3145  002EF4  502E               	movf	digitalWrite@p,w,c
  3146  002EF6  128C               	iorwf	3980,f,c	;volatile
  3147  002EF8  0012               	return	
  3148  002EFA                     l6621:
  3149                           
  3150                           ;iopin.c: 71: else LATD &= p;
  3151  002EFA  502E               	movf	digitalWrite@p,w,c
  3152  002EFC  168C               	andwf	3980,f,c	;volatile
  3153                           
  3154                           ;iopin.c: 72: }
  3155  002EFE  0012               	return	
  3156  002F00                     l6623:
  3157  002F00  C027  FFD9         	movff	digitalWrite@pin,fsr2l
  3158  002F04  C028  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3159  002F08  CFDE F02B          	movff	postinc2,??_digitalWrite
  3160  002F0C  CFDD F02C          	movff	postdec2,??_digitalWrite+1
  3161                           
  3162                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3163                           ; Switch size 1, requested type "space"
  3164                           ; Number of cases is 1, Range of values is 0 to 0
  3165                           ; switch strategies available:
  3166                           ; Name         Instructions Cycles
  3167                           ; simple_byte            4     3 (average)
  3168                           ;	Chosen strategy is simple_byte
  3169  002F10  502C               	movf	??_digitalWrite+1,w,c
  3170  002F12  0A00               	xorlw	0	; case 0
  3171  002F14  A4D8               	btfss	status,2,c
  3172  002F16  0012               	return	
  3173                           
  3174                           ; Switch size 1, requested type "space"
  3175                           ; Number of cases is 4, Range of values is 0 to 3
  3176                           ; switch strategies available:
  3177                           ; Name         Instructions Cycles
  3178                           ; simple_byte           13     7 (average)
  3179                           ;	Chosen strategy is simple_byte
  3180  002F18  502B               	movf	??_digitalWrite,w,c
  3181  002F1A  0A00               	xorlw	0	; case 0
  3182  002F1C  B4D8               	btfsc	status,2,c
  3183  002F1E  D7C8               	goto	l6599
  3184  002F20  0A01               	xorlw	1	; case 1
  3185  002F22  B4D8               	btfsc	status,2,c
  3186  002F24  D7CF               	goto	l6605
  3187  002F26  0A03               	xorlw	3	; case 2
  3188  002F28  B4D8               	btfsc	status,2,c
  3189  002F2A  D7D6               	goto	l6611
  3190  002F2C  0A01               	xorlw	1	; case 3
  3191  002F2E  A4D8               	btfss	status,2,c
  3192  002F30  0012               	return	
  3193  002F32  D7DC               	goto	l6617
  3194  002F34                     __end_of_digitalWrite:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           postinc0	equ	0xFEE
  3201                           wreg	equ	0xFE8
  3202                           postdec1	equ	0xFE5
  3203                           fsr1l	equ	0xFE1
  3204                           indf2	equ	0xFDF
  3205                           postinc2	equ	0xFDE
  3206                           postdec2	equ	0xFDD
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _digitalRead *****************
  3212 ;; Defined at:
  3213 ;;		line 43 in file "iopin.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  pin             2   38[COMRAM] PTR int 
  3216 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;		None
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  2   38[COMRAM] int 
  3221 ;; Registers used:
  3222 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3228 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;Total ram usage:        4 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; Hardware stack levels required when called:    3
  3235 ;; This function calls:
  3236 ;;		Nothing
  3237 ;; This function is called by:
  3238 ;;		_main
  3239 ;;		_sortBattery
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           	psect	text3
  3244  002AEE                     __ptext3:
  3245                           	opt stack 0
  3246  002AEE                     _digitalRead:
  3247                           	opt stack 26
  3248                           
  3249                           ;iopin.c: 44: switch(pin[0]){
  3250                           
  3251                           ;incstack = 0
  3252  002AEE  D058               	goto	l6649
  3253  002AF0                     l6631:
  3254  002AF0  EE20 F002          	lfsr	2,2
  3255  002AF4  5027               	movf	digitalRead@pin,w,c
  3256  002AF6  26D9               	addwf	fsr2l,f,c
  3257  002AF8  5028               	movf	digitalRead@pin+1,w,c
  3258  002AFA  22DA               	addwfc	fsr2h,f,c
  3259  002AFC  50DF               	movf	indf2,w,c
  3260  002AFE  6E29               	movwf	??_digitalRead& (0+255),c
  3261  002B00  CF80 F02A          	movff	3968,??_digitalRead+1	;volatile
  3262  002B04  2A29               	incf	??_digitalRead,f,c
  3263  002B06  D002               	goto	u7064
  3264  002B08                     u7065:
  3265  002B08  90D8               	bcf	status,0,c
  3266  002B0A  322A               	rrcf	??_digitalRead+1,f,c
  3267  002B0C                     u7064:
  3268  002B0C  2E29               	decfsz	??_digitalRead,f,c
  3269  002B0E  D7FC               	goto	u7065
  3270  002B10  0E01               	movlw	1
  3271  002B12  162A               	andwf	??_digitalRead+1,f,c
  3272  002B14  502A               	movf	??_digitalRead+1,w,c
  3273  002B16  6E27               	movwf	?_digitalRead,c
  3274  002B18  6A28               	clrf	?_digitalRead+1,c
  3275  002B1A  0012               	return	
  3276  002B1C                     l6635:
  3277  002B1C  EE20 F002          	lfsr	2,2
  3278  002B20  5027               	movf	digitalRead@pin,w,c
  3279  002B22  26D9               	addwf	fsr2l,f,c
  3280  002B24  5028               	movf	digitalRead@pin+1,w,c
  3281  002B26  22DA               	addwfc	fsr2h,f,c
  3282  002B28  50DF               	movf	indf2,w,c
  3283  002B2A  6E29               	movwf	??_digitalRead& (0+255),c
  3284  002B2C  CF81 F02A          	movff	3969,??_digitalRead+1	;volatile
  3285  002B30  2A29               	incf	??_digitalRead,f,c
  3286  002B32  D002               	goto	u7074
  3287  002B34                     u7075:
  3288  002B34  90D8               	bcf	status,0,c
  3289  002B36  322A               	rrcf	??_digitalRead+1,f,c
  3290  002B38                     u7074:
  3291  002B38  2E29               	decfsz	??_digitalRead,f,c
  3292  002B3A  D7FC               	goto	u7075
  3293  002B3C  0E01               	movlw	1
  3294  002B3E  162A               	andwf	??_digitalRead+1,f,c
  3295  002B40  502A               	movf	??_digitalRead+1,w,c
  3296  002B42  6E27               	movwf	?_digitalRead,c
  3297  002B44  6A28               	clrf	?_digitalRead+1,c
  3298  002B46  0012               	return	
  3299  002B48                     l6639:
  3300  002B48  EE20 F002          	lfsr	2,2
  3301  002B4C  5027               	movf	digitalRead@pin,w,c
  3302  002B4E  26D9               	addwf	fsr2l,f,c
  3303  002B50  5028               	movf	digitalRead@pin+1,w,c
  3304  002B52  22DA               	addwfc	fsr2h,f,c
  3305  002B54  50DF               	movf	indf2,w,c
  3306  002B56  6E29               	movwf	??_digitalRead& (0+255),c
  3307  002B58  CF82 F02A          	movff	3970,??_digitalRead+1	;volatile
  3308  002B5C  2A29               	incf	??_digitalRead,f,c
  3309  002B5E  D002               	goto	u7084
  3310  002B60                     u7085:
  3311  002B60  90D8               	bcf	status,0,c
  3312  002B62  322A               	rrcf	??_digitalRead+1,f,c
  3313  002B64                     u7084:
  3314  002B64  2E29               	decfsz	??_digitalRead,f,c
  3315  002B66  D7FC               	goto	u7085
  3316  002B68  0E01               	movlw	1
  3317  002B6A  162A               	andwf	??_digitalRead+1,f,c
  3318  002B6C  502A               	movf	??_digitalRead+1,w,c
  3319  002B6E  6E27               	movwf	?_digitalRead,c
  3320  002B70  6A28               	clrf	?_digitalRead+1,c
  3321  002B72  0012               	return	
  3322  002B74                     l6643:
  3323  002B74  EE20 F002          	lfsr	2,2
  3324  002B78  5027               	movf	digitalRead@pin,w,c
  3325  002B7A  26D9               	addwf	fsr2l,f,c
  3326  002B7C  5028               	movf	digitalRead@pin+1,w,c
  3327  002B7E  22DA               	addwfc	fsr2h,f,c
  3328  002B80  50DF               	movf	indf2,w,c
  3329  002B82  6E29               	movwf	??_digitalRead& (0+255),c
  3330  002B84  CF83 F02A          	movff	3971,??_digitalRead+1	;volatile
  3331  002B88  2A29               	incf	??_digitalRead,f,c
  3332  002B8A  D002               	goto	u7094
  3333  002B8C                     u7095:
  3334  002B8C  90D8               	bcf	status,0,c
  3335  002B8E  322A               	rrcf	??_digitalRead+1,f,c
  3336  002B90                     u7094:
  3337  002B90  2E29               	decfsz	??_digitalRead,f,c
  3338  002B92  D7FC               	goto	u7095
  3339  002B94  0E01               	movlw	1
  3340  002B96  162A               	andwf	??_digitalRead+1,f,c
  3341  002B98  502A               	movf	??_digitalRead+1,w,c
  3342  002B9A  6E27               	movwf	?_digitalRead,c
  3343  002B9C  6A28               	clrf	?_digitalRead+1,c
  3344  002B9E  0012               	return	
  3345  002BA0                     l6649:
  3346  002BA0  C027  FFD9         	movff	digitalRead@pin,fsr2l
  3347  002BA4  C028  FFDA         	movff	digitalRead@pin+1,fsr2h
  3348  002BA8  CFDE F029          	movff	postinc2,??_digitalRead
  3349  002BAC  CFDD F02A          	movff	postdec2,??_digitalRead+1
  3350                           
  3351                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3352                           ; Switch size 1, requested type "space"
  3353                           ; Number of cases is 1, Range of values is 0 to 0
  3354                           ; switch strategies available:
  3355                           ; Name         Instructions Cycles
  3356                           ; simple_byte            4     3 (average)
  3357                           ;	Chosen strategy is simple_byte
  3358  002BB0  502A               	movf	??_digitalRead+1,w,c
  3359  002BB2  0A00               	xorlw	0	; case 0
  3360  002BB4  A4D8               	btfss	status,2,c
  3361  002BB6  D00D               	goto	l320
  3362                           
  3363                           ; Switch size 1, requested type "space"
  3364                           ; Number of cases is 4, Range of values is 0 to 3
  3365                           ; switch strategies available:
  3366                           ; Name         Instructions Cycles
  3367                           ; simple_byte           13     7 (average)
  3368                           ;	Chosen strategy is simple_byte
  3369  002BB8  5029               	movf	??_digitalRead,w,c
  3370  002BBA  0A00               	xorlw	0	; case 0
  3371  002BBC  B4D8               	btfsc	status,2,c
  3372  002BBE  D798               	goto	l6631
  3373  002BC0  0A01               	xorlw	1	; case 1
  3374  002BC2  B4D8               	btfsc	status,2,c
  3375  002BC4  D7AB               	goto	l6635
  3376  002BC6  0A03               	xorlw	3	; case 2
  3377  002BC8  B4D8               	btfsc	status,2,c
  3378  002BCA  D7BE               	goto	l6639
  3379  002BCC  0A01               	xorlw	1	; case 3
  3380  002BCE  B4D8               	btfsc	status,2,c
  3381  002BD0  D7D1               	goto	l6643
  3382  002BD2                     l320:
  3383                           
  3384                           ;iopin.c: 50: return -1;
  3385  002BD2  6827               	setf	?_digitalRead,c
  3386  002BD4  6828               	setf	?_digitalRead+1,c
  3387  002BD6  0012               	return		;funcret
  3388  002BD8                     __end_of_digitalRead:
  3389                           	opt stack 0
  3390                           tblptru	equ	0xFF8
  3391                           tblptrh	equ	0xFF7
  3392                           tblptrl	equ	0xFF6
  3393                           tablat	equ	0xFF5
  3394                           postinc0	equ	0xFEE
  3395                           wreg	equ	0xFE8
  3396                           postdec1	equ	0xFE5
  3397                           fsr1l	equ	0xFE1
  3398                           indf2	equ	0xFDF
  3399                           postinc2	equ	0xFDE
  3400                           postdec2	equ	0xFDD
  3401                           fsr2h	equ	0xFDA
  3402                           fsr2l	equ	0xFD9
  3403                           status	equ	0xFD8
  3404                           
  3405 ;; *************** function _analogRead *****************
  3406 ;; Defined at:
  3407 ;;		line 90 in file "iopin.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  channel         2   38[COMRAM] int 
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;		None
  3412 ;; Return value:  Size  Location     Type
  3413 ;;                  4   38[COMRAM] long 
  3414 ;; Registers used:
  3415 ;;		wreg, status,2, status,0
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;Total ram usage:        6 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    3
  3428 ;; This function calls:
  3429 ;;		Nothing
  3430 ;; This function is called by:
  3431 ;;		_sortBattery
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           	psect	text4
  3436  00380C                     __ptext4:
  3437                           	opt stack 0
  3438  00380C                     _analogRead:
  3439                           	opt stack 26
  3440                           
  3441                           ;iopin.c: 91: ADCON0 = channel<<2;
  3442                           
  3443                           ;incstack = 0
  3444  00380C  4427               	rlncf	analogRead@channel,w,c
  3445  00380E  46E8               	rlncf	wreg,f,c
  3446  003810  0BFC               	andlw	252
  3447  003812  6EC2               	movwf	4034,c	;volatile
  3448                           
  3449                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3450  003814  80C2               	bsf	4034,0,c	;volatile
  3451                           
  3452                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3453  003816  82C2               	bsf	4034,1,c	;volatile
  3454  003818                     l345:
  3455  003818  B2C2               	btfsc	4034,1,c	;volatile
  3456  00381A  D7FE               	goto	l345
  3457                           
  3458                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3459  00381C  50C3               	movf	4035,w,c	;volatile
  3460  00381E  CFC4 F02B          	movff	4036,??_analogRead	;volatile
  3461  003822  6A2C               	clrf	(??_analogRead+1)& (0+255),c
  3462  003824  C02B  F02C         	movff	??_analogRead,??_analogRead+1
  3463  003828  6A2B               	clrf	??_analogRead,c
  3464  00382A  262B               	addwf	??_analogRead,f,c
  3465  00382C  0E00               	movlw	0
  3466  00382E  222C               	addwfc	??_analogRead+1,f,c
  3467  003830  C02B  F027         	movff	??_analogRead,?_analogRead
  3468  003834  C02C  F028         	movff	??_analogRead+1,?_analogRead+1
  3469  003838  0E00               	movlw	0
  3470  00383A  BE28               	btfsc	?_analogRead+1,7,c
  3471  00383C  0EFF               	movlw	-1
  3472  00383E  6E29               	movwf	?_analogRead+2,c
  3473  003840  6E2A               	movwf	?_analogRead+3,c
  3474  003842  0012               	return	
  3475  003844                     __end_of_analogRead:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           postinc0	equ	0xFEE
  3482                           wreg	equ	0xFE8
  3483                           postdec1	equ	0xFE5
  3484                           fsr1l	equ	0xFE1
  3485                           indf2	equ	0xFDF
  3486                           postinc2	equ	0xFDE
  3487                           postdec2	equ	0xFDD
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function _showInterface *****************
  3493 ;; Defined at:
  3494 ;;		line 16 in file "interface.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;		None
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  key             1  120[BANK0 ] unsigned char 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      void 
  3501 ;; Registers used:
  3502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;Total ram usage:        1 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    9
  3515 ;; This function calls:
  3516 ;;		_dateTime
  3517 ;;		_mainMenu
  3518 ;;		_readKeypad
  3519 ;;		_runMenu
  3520 ;;		_runSelect
  3521 ;;		_runStats
  3522 ;;		_runTime
  3523 ;; This function is called by:
  3524 ;;		_main
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text5
  3529  0027FE                     __ptext5:
  3530                           	opt stack 0
  3531  0027FE                     _showInterface:
  3532                           	opt stack 21
  3533  0027FE                     
  3534                           ;interface.c: 23: dateTime();
  3535  0027FE  ECE6  F01C         	call	_dateTime	;wreg free
  3536  002802                     l6757:
  3537  002802  ECC0  F01C         	call	_readKeypad	;wreg free
  3538  002806  0A41               	xorlw	65
  3539  002808  A4D8               	btfss	status,2,c
  3540  00280A  D7FB               	goto	l6757
  3541  00280C                     l6759:
  3542                           
  3543                           ;interface.c: 28: mainMenu();
  3544  00280C  ECD3  F01C         	call	_mainMenu	;wreg free
  3545  002810                     l6761:
  3546  002810  ECC0  F01C         	call	_readKeypad	;wreg free
  3547  002814  0100               	movlb	0	; () banked
  3548  002816  6FF8               	movwf	showInterface@key& (0+255),b
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;interface.c: 32: while(key != 'B' && key != 'C' && key != '*');
  3552  002818  0E42               	movlw	66
  3553  00281A  0100               	movlb	0	; () banked
  3554  00281C  19F8               	xorwf	showInterface@key& (0+255),w,b
  3555  00281E  B4D8               	btfsc	status,2,c
  3556  002820  D00A               	goto	l6769
  3557                           
  3558                           ; BSR set to: 0
  3559  002822  0E43               	movlw	67
  3560  002824  0100               	movlb	0	; () banked
  3561  002826  19F8               	xorwf	showInterface@key& (0+255),w,b
  3562  002828  B4D8               	btfsc	status,2,c
  3563  00282A  D005               	goto	l6769
  3564                           
  3565                           ; BSR set to: 0
  3566  00282C  0E2A               	movlw	42
  3567  00282E  0100               	movlb	0	; () banked
  3568  002830  19F8               	xorwf	showInterface@key& (0+255),w,b
  3569  002832  A4D8               	btfss	status,2,c
  3570  002834  D7ED               	goto	l6761
  3571  002836                     l6769:
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;interface.c: 34: if(key == 'C'){
  3575  002836  0E43               	movlw	67
  3576  002838  0100               	movlb	0	; () banked
  3577  00283A  19F8               	xorwf	showInterface@key& (0+255),w,b
  3578  00283C  A4D8               	btfss	status,2,c
  3579  00283E  D056               	goto	l6813
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;interface.c: 36: runSelect();
  3583  002840  ECAD  F01C         	call	_runSelect	;wreg free
  3584  002844                     l6773:
  3585  002844  ECC0  F01C         	call	_readKeypad	;wreg free
  3586  002848  0100               	movlb	0	; () banked
  3587  00284A  6FF8               	movwf	showInterface@key& (0+255),b
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;interface.c: 42: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '
      +                          *');
  3591  00284C  0E31               	movlw	49
  3592  00284E  0100               	movlb	0	; () banked
  3593  002850  19F8               	xorwf	showInterface@key& (0+255),w,b
  3594  002852  B4D8               	btfsc	status,2,c
  3595  002854  D014               	goto	l6785
  3596                           
  3597                           ; BSR set to: 0
  3598  002856  0E32               	movlw	50
  3599  002858  0100               	movlb	0	; () banked
  3600  00285A  19F8               	xorwf	showInterface@key& (0+255),w,b
  3601  00285C  B4D8               	btfsc	status,2,c
  3602  00285E  D00F               	goto	l6785
  3603                           
  3604                           ; BSR set to: 0
  3605  002860  0E33               	movlw	51
  3606  002862  0100               	movlb	0	; () banked
  3607  002864  19F8               	xorwf	showInterface@key& (0+255),w,b
  3608  002866  B4D8               	btfsc	status,2,c
  3609  002868  D00A               	goto	l6785
  3610                           
  3611                           ; BSR set to: 0
  3612  00286A  0E34               	movlw	52
  3613  00286C  0100               	movlb	0	; () banked
  3614  00286E  19F8               	xorwf	showInterface@key& (0+255),w,b
  3615  002870  B4D8               	btfsc	status,2,c
  3616  002872  D005               	goto	l6785
  3617                           
  3618                           ; BSR set to: 0
  3619  002874  0E2A               	movlw	42
  3620  002876  0100               	movlb	0	; () banked
  3621  002878  19F8               	xorwf	showInterface@key& (0+255),w,b
  3622  00287A  A4D8               	btfss	status,2,c
  3623  00287C  D7E3               	goto	l6773
  3624  00287E                     l6785:
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;interface.c: 44: if(key == '*')continue;
  3628  00287E  0E2A               	movlw	42
  3629  002880  0100               	movlb	0	; () banked
  3630  002882  19F8               	xorwf	showInterface@key& (0+255),w,b
  3631  002884  B4D8               	btfsc	status,2,c
  3632  002886  D7C2               	goto	l6759
  3633  002888                     l6789:
  3634                           
  3635                           ;interface.c: 50: runMenu(key);
  3636  002888  0100               	movlb	0	; () banked
  3637  00288A  51F8               	movf	showInterface@key& (0+255),w,b
  3638  00288C  EC3E  F01C         	call	_runMenu
  3639  002890                     l6791:
  3640  002890  ECC0  F01C         	call	_readKeypad	;wreg free
  3641  002894  0100               	movlb	0	; () banked
  3642  002896  6FF8               	movwf	showInterface@key& (0+255),b
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;interface.c: 54: while(key != 'A' && key != 'B' && key != '*');
  3646  002898  0E41               	movlw	65
  3647  00289A  0100               	movlb	0	; () banked
  3648  00289C  19F8               	xorwf	showInterface@key& (0+255),w,b
  3649  00289E  B4D8               	btfsc	status,2,c
  3650  0028A0  D00A               	goto	l6799
  3651                           
  3652                           ; BSR set to: 0
  3653  0028A2  0E42               	movlw	66
  3654  0028A4  0100               	movlb	0	; () banked
  3655  0028A6  19F8               	xorwf	showInterface@key& (0+255),w,b
  3656  0028A8  B4D8               	btfsc	status,2,c
  3657  0028AA  D005               	goto	l6799
  3658                           
  3659                           ; BSR set to: 0
  3660  0028AC  0E2A               	movlw	42
  3661  0028AE  0100               	movlb	0	; () banked
  3662  0028B0  19F8               	xorwf	showInterface@key& (0+255),w,b
  3663  0028B2  A4D8               	btfss	status,2,c
  3664  0028B4  D7ED               	goto	l6791
  3665  0028B6                     l6799:
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;interface.c: 56: if(key == 'A'){
  3669  0028B6  0E41               	movlw	65
  3670  0028B8  0100               	movlb	0	; () banked
  3671  0028BA  19F8               	xorwf	showInterface@key& (0+255),w,b
  3672  0028BC  A4D8               	btfss	status,2,c
  3673  0028BE  D003               	goto	l6803
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;interface.c: 58: runTime();
  3677  0028C0  EC87  F01C         	call	_runTime	;wreg free
  3678                           
  3679                           ;interface.c: 60: }
  3680  0028C4  D00D               	goto	l6811
  3681  0028C6                     l6803:
  3682                           
  3683                           ;interface.c: 61: else if(key == 'B'){
  3684  0028C6  0E42               	movlw	66
  3685  0028C8  0100               	movlb	0	; () banked
  3686  0028CA  19F8               	xorwf	showInterface@key& (0+255),w,b
  3687  0028CC  A4D8               	btfss	status,2,c
  3688  0028CE  D003               	goto	l6807
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;interface.c: 63: runStats();
  3692  0028D0  EC9A  F01C         	call	_runStats	;wreg free
  3693                           
  3694                           ;interface.c: 65: }
  3695  0028D4  D005               	goto	l6811
  3696  0028D6                     l6807:
  3697                           
  3698                           ;interface.c: 66: else if(key == '*')break;
  3699  0028D6  0E2A               	movlw	42
  3700  0028D8  0100               	movlb	0	; () banked
  3701  0028DA  19F8               	xorwf	showInterface@key& (0+255),w,b
  3702  0028DC  B4D8               	btfsc	status,2,c
  3703  0028DE  D796               	goto	l6759
  3704  0028E0                     l6811:
  3705  0028E0  ECC0  F01C         	call	_readKeypad	;wreg free
  3706  0028E4  0A2A               	xorlw	42
  3707  0028E6  B4D8               	btfsc	status,2,c
  3708  0028E8  D7CF               	goto	l6789
  3709  0028EA  D7FA               	goto	l6811
  3710  0028EC                     l6813:
  3711                           
  3712                           ;interface.c: 72: else if(key == 'B'){
  3713  0028EC  0E42               	movlw	66
  3714  0028EE  0100               	movlb	0	; () banked
  3715  0028F0  19F8               	xorwf	showInterface@key& (0+255),w,b
  3716  0028F2  B4D8               	btfsc	status,2,c
  3717  0028F4  0012               	return	
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;interface.c: 75: else if(key == '*')
  3721                           
  3722                           ; BSR set to: 0
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;interface.c: 74: }
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;interface.c: 73: return;
  3729  0028F6  0E2A               	movlw	42
  3730  0028F8  0100               	movlb	0	; () banked
  3731  0028FA  19F8               	xorwf	showInterface@key& (0+255),w,b
  3732  0028FC  B4D8               	btfsc	status,2,c
  3733  0028FE  D77F               	goto	l6755
  3734  002900  D785               	goto	l6759
  3735  002902                     __end_of_showInterface:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           postinc0	equ	0xFEE
  3742                           wreg	equ	0xFE8
  3743                           postdec1	equ	0xFE5
  3744                           fsr1l	equ	0xFE1
  3745                           indf2	equ	0xFDF
  3746                           postinc2	equ	0xFDE
  3747                           postdec2	equ	0xFDD
  3748                           fsr2h	equ	0xFDA
  3749                           fsr2l	equ	0xFD9
  3750                           status	equ	0xFD8
  3751                           
  3752 ;; *************** function _runTime *****************
  3753 ;; Defined at:
  3754 ;;		line 117 in file "interface.c"
  3755 ;; Parameters:    Size  Location     Type
  3756 ;;		None
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;		None
  3759 ;; Return value:  Size  Location     Type
  3760 ;;                  1    wreg      void 
  3761 ;; Registers used:
  3762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3763 ;; Tracked objects:
  3764 ;;		On entry : 0/0
  3765 ;;		On exit  : 0/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;Total ram usage:        0 bytes
  3773 ;; Hardware stack levels used:    1
  3774 ;; Hardware stack levels required when called:    8
  3775 ;; This function calls:
  3776 ;;		_lcdClear
  3777 ;;		_printf
  3778 ;; This function is called by:
  3779 ;;		_showInterface
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           	psect	text6
  3784  00390E                     __ptext6:
  3785                           	opt stack 0
  3786  00390E                     _runTime:
  3787                           	opt stack 21
  3788                           
  3789                           ;interface.c: 118: lcdClear();
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;incstack = 0
  3793  00390E  EC48  F01D         	call	_lcdClear	;wreg free
  3794                           
  3795                           ;interface.c: 119: printf("time: nnn sec   \n");
  3796  003912  0E14               	movlw	low STR_15
  3797  003914  0100               	movlb	0	; () banked
  3798  003916  6FC9               	movwf	printf@f& (0+255),b
  3799  003918  0EFF               	movlw	high STR_15
  3800  00391A  0100               	movlb	0	; () banked
  3801  00391C  6FCA               	movwf	(printf@f+1)& (0+255),b
  3802  00391E  EC09  F000         	call	_printf	;wreg free
  3803                           
  3804                           ;interface.c: 120: printf("              *>");
  3805  003922  0E49               	movlw	low STR_16
  3806  003924  0100               	movlb	0	; () banked
  3807  003926  6FC9               	movwf	printf@f& (0+255),b
  3808  003928  0EFF               	movlw	high STR_16
  3809  00392A  0100               	movlb	0	; () banked
  3810  00392C  6FCA               	movwf	(printf@f+1)& (0+255),b
  3811  00392E  EC09  F000         	call	_printf	;wreg free
  3812  003932  0012               	return		;funcret
  3813  003934                     __end_of_runTime:
  3814                           	opt stack 0
  3815                           tblptru	equ	0xFF8
  3816                           tblptrh	equ	0xFF7
  3817                           tblptrl	equ	0xFF6
  3818                           tablat	equ	0xFF5
  3819                           postinc0	equ	0xFEE
  3820                           wreg	equ	0xFE8
  3821                           postdec1	equ	0xFE5
  3822                           fsr1l	equ	0xFE1
  3823                           indf2	equ	0xFDF
  3824                           postinc2	equ	0xFDE
  3825                           postdec2	equ	0xFDD
  3826                           fsr2h	equ	0xFDA
  3827                           fsr2l	equ	0xFD9
  3828                           status	equ	0xFD8
  3829                           
  3830 ;; *************** function _runStats *****************
  3831 ;; Defined at:
  3832 ;;		line 123 in file "interface.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;		None
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;		None
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  1    wreg      void 
  3839 ;; Registers used:
  3840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;Total ram usage:        0 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    8
  3853 ;; This function calls:
  3854 ;;		_lcdClear
  3855 ;;		_printf
  3856 ;; This function is called by:
  3857 ;;		_showInterface
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           	psect	text7
  3862  003934                     __ptext7:
  3863                           	opt stack 0
  3864  003934                     _runStats:
  3865                           	opt stack 21
  3866                           
  3867                           ;interface.c: 124: lcdClear();
  3868                           
  3869                           ;incstack = 0
  3870  003934  EC48  F01D         	call	_lcdClear	;wreg free
  3871                           
  3872                           ;interface.c: 125: printf("[AA,9V,C,other] \n");
  3873  003938  0E26               	movlw	low STR_17
  3874  00393A  0100               	movlb	0	; () banked
  3875  00393C  6FC9               	movwf	printf@f& (0+255),b
  3876  00393E  0EFF               	movlw	high STR_17
  3877  003940  0100               	movlb	0	; () banked
  3878  003942  6FCA               	movwf	(printf@f+1)& (0+255),b
  3879  003944  EC09  F000         	call	_printf	;wreg free
  3880                           
  3881                           ;interface.c: 126: printf("[nn,n,n,nn]   *>");
  3882  003948  0E8D               	movlw	low STR_18
  3883  00394A  0100               	movlb	0	; () banked
  3884  00394C  6FC9               	movwf	printf@f& (0+255),b
  3885  00394E  0EFF               	movlw	high STR_18
  3886  003950  0100               	movlb	0	; () banked
  3887  003952  6FCA               	movwf	(printf@f+1)& (0+255),b
  3888  003954  EC09  F000         	call	_printf	;wreg free
  3889  003958  0012               	return		;funcret
  3890  00395A                     __end_of_runStats:
  3891                           	opt stack 0
  3892                           tblptru	equ	0xFF8
  3893                           tblptrh	equ	0xFF7
  3894                           tblptrl	equ	0xFF6
  3895                           tablat	equ	0xFF5
  3896                           postinc0	equ	0xFEE
  3897                           wreg	equ	0xFE8
  3898                           postdec1	equ	0xFE5
  3899                           fsr1l	equ	0xFE1
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           postdec2	equ	0xFDD
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           status	equ	0xFD8
  3906                           
  3907 ;; *************** function _runSelect *****************
  3908 ;; Defined at:
  3909 ;;		line 105 in file "interface.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;		None
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;		None
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  1    wreg      void 
  3916 ;; Registers used:
  3917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;Total ram usage:        0 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    8
  3930 ;; This function calls:
  3931 ;;		_lcdClear
  3932 ;;		_printf
  3933 ;; This function is called by:
  3934 ;;		_showInterface
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           	psect	text8
  3939  00395A                     __ptext8:
  3940                           	opt stack 0
  3941  00395A                     _runSelect:
  3942                           	opt stack 21
  3943                           
  3944                           ;interface.c: 106: lcdClear();
  3945                           
  3946                           ;incstack = 0
  3947  00395A  EC48  F01D         	call	_lcdClear	;wreg free
  3948                           
  3949                           ;interface.c: 107: printf("select run:     \n");
  3950  00395E  0E02               	movlw	low STR_11
  3951  003960  0100               	movlb	0	; () banked
  3952  003962  6FC9               	movwf	printf@f& (0+255),b
  3953  003964  0EFF               	movlw	high STR_11
  3954  003966  0100               	movlb	0	; () banked
  3955  003968  6FCA               	movwf	(printf@f+1)& (0+255),b
  3956  00396A  EC09  F000         	call	_printf	;wreg free
  3957                           
  3958                           ;interface.c: 108: printf("[1,2,3,4]     *>");
  3959  00396E  0E5A               	movlw	low STR_12
  3960  003970  0100               	movlb	0	; () banked
  3961  003972  6FC9               	movwf	printf@f& (0+255),b
  3962  003974  0EFF               	movlw	high STR_12
  3963  003976  0100               	movlb	0	; () banked
  3964  003978  6FCA               	movwf	(printf@f+1)& (0+255),b
  3965  00397A  EC09  F000         	call	_printf	;wreg free
  3966  00397E  0012               	return		;funcret
  3967  003980                     __end_of_runSelect:
  3968                           	opt stack 0
  3969                           tblptru	equ	0xFF8
  3970                           tblptrh	equ	0xFF7
  3971                           tblptrl	equ	0xFF6
  3972                           tablat	equ	0xFF5
  3973                           postinc0	equ	0xFEE
  3974                           wreg	equ	0xFE8
  3975                           postdec1	equ	0xFE5
  3976                           fsr1l	equ	0xFE1
  3977                           indf2	equ	0xFDF
  3978                           postinc2	equ	0xFDE
  3979                           postdec2	equ	0xFDD
  3980                           fsr2h	equ	0xFDA
  3981                           fsr2l	equ	0xFD9
  3982                           status	equ	0xFD8
  3983                           
  3984 ;; *************** function _runMenu *****************
  3985 ;; Defined at:
  3986 ;;		line 111 in file "interface.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;  key             1    wreg     unsigned char 
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;  key             1  119[BANK0 ] unsigned char 
  3991 ;; Return value:  Size  Location     Type
  3992 ;;                  1    wreg      void 
  3993 ;; Registers used:
  3994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;Total ram usage:        1 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; Hardware stack levels required when called:    8
  4007 ;; This function calls:
  4008 ;;		_lcdClear
  4009 ;;		_printf
  4010 ;; This function is called by:
  4011 ;;		_showInterface
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text9
  4016  00387C                     __ptext9:
  4017                           	opt stack 0
  4018  00387C                     _runMenu:
  4019                           	opt stack 21
  4020                           
  4021                           ;incstack = 0
  4022                           ;runMenu@key stored from wreg
  4023  00387C  0100               	movlb	0	; () banked
  4024  00387E  6FF7               	movwf	runMenu@key& (0+255),b
  4025                           
  4026                           ;interface.c: 112: lcdClear();
  4027  003880  EC48  F01D         	call	_lcdClear	;wreg free
  4028                           
  4029                           ;interface.c: 113: printf("%c) time  <A     \n",key);
  4030  003884  0ECB               	movlw	low STR_13
  4031  003886  0100               	movlb	0	; () banked
  4032  003888  6FC9               	movwf	printf@f& (0+255),b
  4033  00388A  0EFE               	movlw	high STR_13
  4034  00388C  0100               	movlb	0	; () banked
  4035  00388E  6FCA               	movwf	(printf@f+1)& (0+255),b
  4036  003890  C0F7  F0CB         	movff	runMenu@key,?_printf+2
  4037  003894  0100               	movlb	0	; () banked
  4038  003896  6BCC               	clrf	(?_printf+3)& (0+255),b
  4039  003898  EC09  F000         	call	_printf	;wreg free
  4040                           
  4041                           ;interface.c: 114: printf( "   stats <B   *>");
  4042  00389C  0E7C               	movlw	low STR_14
  4043  00389E  0100               	movlb	0	; () banked
  4044  0038A0  6FC9               	movwf	printf@f& (0+255),b
  4045  0038A2  0EFF               	movlw	high STR_14
  4046  0038A4  0100               	movlb	0	; () banked
  4047  0038A6  6FCA               	movwf	(printf@f+1)& (0+255),b
  4048  0038A8  EC09  F000         	call	_printf	;wreg free
  4049  0038AC  0012               	return		;funcret
  4050  0038AE                     __end_of_runMenu:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           postdec1	equ	0xFE5
  4059                           fsr1l	equ	0xFE1
  4060                           indf2	equ	0xFDF
  4061                           postinc2	equ	0xFDE
  4062                           postdec2	equ	0xFDD
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function _readKeypad *****************
  4068 ;; Defined at:
  4069 ;;		line 36 in file "keypad.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  key             1   38[COMRAM] unsigned char 
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      unsigned char 
  4076 ;; Registers used:
  4077 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;Total ram usage:        1 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    3
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_main
  4094 ;;		_sortBattery
  4095 ;;		_showInterface
  4096 ;;		_pause
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text10
  4101  003980                     __ptext10:
  4102                           	opt stack 0
  4103  003980                     _readKeypad:
  4104                           	opt stack 26
  4105  003980                     l247:
  4106  003980  A281               	btfss	3969,1,c	;volatile
  4107  003982  D7FE               	goto	l247
  4108                           
  4109                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4110  003984  3881               	swapf	3969,w,c	;volatile
  4111  003986  0B0F               	andlw	15
  4112  003988  0B0F               	andlw	15
  4113  00398A  6E27               	movwf	readKeypad@key,c
  4114  00398C                     l250:
  4115  00398C  B281               	btfsc	3969,1,c	;volatile
  4116  00398E  D7FE               	goto	l250
  4117                           
  4118                           ;keypad.c: 40: return keys[key];
  4119  003990  5027               	movf	readKeypad@key,w,c
  4120  003992  0D01               	mullw	1
  4121  003994  0EB3               	movlw	low _keys
  4122  003996  24F3               	addwf	prodl,w,c
  4123  003998  6EF6               	movwf	tblptrl,c
  4124  00399A  0EFE               	movlw	high _keys
  4125  00399C  20F4               	addwfc	prodh,w,c
  4126  00399E  6EF7               	movwf	tblptrh,c
  4127  0039A0                     	if	0	;There are less than 3 active tblptr bytes
  4128  0039A0                     	endif
  4129  0039A0  0008               	tblrd		*
  4130  0039A2  50F5               	movf	tablat,w,c
  4131  0039A4  0012               	return	
  4132  0039A6                     __end_of_readKeypad:
  4133                           	opt stack 0
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           postdec1	equ	0xFE5
  4143                           fsr1l	equ	0xFE1
  4144                           indf2	equ	0xFDF
  4145                           postinc2	equ	0xFDE
  4146                           postdec2	equ	0xFDD
  4147                           fsr2h	equ	0xFDA
  4148                           fsr2l	equ	0xFD9
  4149                           status	equ	0xFD8
  4150                           
  4151 ;; *************** function _mainMenu *****************
  4152 ;; Defined at:
  4153 ;;		line 99 in file "interface.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  1    wreg      void 
  4160 ;; Registers used:
  4161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;Total ram usage:        0 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    8
  4174 ;; This function calls:
  4175 ;;		_lcdClear
  4176 ;;		_printf
  4177 ;; This function is called by:
  4178 ;;		_showInterface
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           	psect	text11
  4183  0039A6                     __ptext11:
  4184                           	opt stack 0
  4185  0039A6                     _mainMenu:
  4186                           	opt stack 21
  4187                           
  4188                           ;interface.c: 100: lcdClear();
  4189                           
  4190                           ;incstack = 0
  4191  0039A6  EC48  F01D         	call	_lcdClear	;wreg free
  4192                           
  4193                           ;interface.c: 101: printf("start   <B      \n");
  4194  0039AA  0EDE               	movlw	low STR_9
  4195  0039AC  0100               	movlb	0	; () banked
  4196  0039AE  6FC9               	movwf	printf@f& (0+255),b
  4197  0039B0  0EFE               	movlw	high STR_9
  4198  0039B2  0100               	movlb	0	; () banked
  4199  0039B4  6FCA               	movwf	(printf@f+1)& (0+255),b
  4200  0039B6  EC09  F000         	call	_printf	;wreg free
  4201                           
  4202                           ;interface.c: 102: printf("history <C    *>");
  4203  0039BA  0E6B               	movlw	low STR_10
  4204  0039BC  0100               	movlb	0	; () banked
  4205  0039BE  6FC9               	movwf	printf@f& (0+255),b
  4206  0039C0  0EFF               	movlw	high STR_10
  4207  0039C2  0100               	movlb	0	; () banked
  4208  0039C4  6FCA               	movwf	(printf@f+1)& (0+255),b
  4209  0039C6  EC09  F000         	call	_printf	;wreg free
  4210  0039CA  0012               	return		;funcret
  4211  0039CC                     __end_of_mainMenu:
  4212                           	opt stack 0
  4213                           tblptru	equ	0xFF8
  4214                           tblptrh	equ	0xFF7
  4215                           tblptrl	equ	0xFF6
  4216                           tablat	equ	0xFF5
  4217                           prodh	equ	0xFF4
  4218                           prodl	equ	0xFF3
  4219                           postinc0	equ	0xFEE
  4220                           wreg	equ	0xFE8
  4221                           postdec1	equ	0xFE5
  4222                           fsr1l	equ	0xFE1
  4223                           indf2	equ	0xFDF
  4224                           postinc2	equ	0xFDE
  4225                           postdec2	equ	0xFDD
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function _dateTime *****************
  4231 ;; Defined at:
  4232 ;;		line 84 in file "interface.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;		None
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;		None
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      void 
  4239 ;; Registers used:
  4240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;Total ram usage:        0 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; Hardware stack levels required when called:    8
  4253 ;; This function calls:
  4254 ;;		_lcdClear
  4255 ;;		_printf
  4256 ;; This function is called by:
  4257 ;;		_showInterface
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text12
  4262  0039CC                     __ptext12:
  4263                           	opt stack 0
  4264  0039CC                     _dateTime:
  4265                           	opt stack 21
  4266                           
  4267                           ;interface.c: 94: lcdClear();
  4268                           
  4269                           ;incstack = 0
  4270  0039CC  EC48  F01D         	call	_lcdClear	;wreg free
  4271                           
  4272                           ;interface.c: 95: printf("  hh:mm:ss      \n");
  4273  0039D0  0EF0               	movlw	low STR_7
  4274  0039D2  0100               	movlb	0	; () banked
  4275  0039D4  6FC9               	movwf	printf@f& (0+255),b
  4276  0039D6  0EFE               	movlw	high STR_7
  4277  0039D8  0100               	movlb	0	; () banked
  4278  0039DA  6FCA               	movwf	(printf@f+1)& (0+255),b
  4279  0039DC  EC09  F000         	call	_printf	;wreg free
  4280                           
  4281                           ;interface.c: 96: printf("  mm:dd:yy    A>");
  4282  0039E0  0E9E               	movlw	low STR_8
  4283  0039E2  0100               	movlb	0	; () banked
  4284  0039E4  6FC9               	movwf	printf@f& (0+255),b
  4285  0039E6  0EFF               	movlw	high STR_8
  4286  0039E8  0100               	movlb	0	; () banked
  4287  0039EA  6FCA               	movwf	(printf@f+1)& (0+255),b
  4288  0039EC  EC09  F000         	call	_printf	;wreg free
  4289  0039F0  0012               	return		;funcret
  4290  0039F2                     __end_of_dateTime:
  4291                           	opt stack 0
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           prodh	equ	0xFF4
  4297                           prodl	equ	0xFF3
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           postdec1	equ	0xFE5
  4301                           fsr1l	equ	0xFE1
  4302                           indf2	equ	0xFDF
  4303                           postinc2	equ	0xFDE
  4304                           postdec2	equ	0xFDD
  4305                           fsr2h	equ	0xFDA
  4306                           fsr2l	equ	0xFD9
  4307                           status	equ	0xFD8
  4308                           
  4309 ;; *************** function _printf *****************
  4310 ;; Defined at:
  4311 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;  f               2   73[BANK0 ] PTR const unsigned char 
  4314 ;;		 -> STR_18(17), STR_17(18), STR_16(17), STR_15(18), 
  4315 ;;		 -> STR_14(17), STR_13(19), STR_12(17), STR_11(18), 
  4316 ;;		 -> STR_10(17), STR_9(18), STR_8(17), STR_7(18), 
  4317 ;;		 -> STR_6(8), STR_5(15), STR_4(14), STR_3(17), 
  4318 ;;		 -> STR_2(17), STR_1(8), 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  idx             1   92[BANK0 ] unsigned char 
  4321 ;;  val             4  108[BANK0 ] unsigned long 
  4322 ;;  tmpval          4   99[BANK0 ] struct .
  4323 ;;  fval            3  105[BANK0 ] struct .
  4324 ;;  prec            2  116[BANK0 ] int 
  4325 ;;  flag            2  114[BANK0 ] unsigned short 
  4326 ;;  width           2  112[BANK0 ] int 
  4327 ;;  exp             2  103[BANK0 ] int 
  4328 ;;  ap              2   97[BANK0 ] PTR void [1]
  4329 ;;		 -> ?_printf(2), 
  4330 ;;  len             2   95[BANK0 ] unsigned int 
  4331 ;;  cp              2   93[BANK0 ] PTR const unsigned char 
  4332 ;;		 -> printf@c(1), 
  4333 ;;  c               1  118[BANK0 ] char 
  4334 ;;  d               1    0        unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  2   73[BANK0 ] int 
  4337 ;; Registers used:
  4338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4344 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;Total ram usage:       46 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    7
  4351 ;; This function calls:
  4352 ;;		___awdiv
  4353 ;;		___ftadd
  4354 ;;		___ftge
  4355 ;;		___ftmul
  4356 ;;		___ftneg
  4357 ;;		___ftsub
  4358 ;;		___fttol
  4359 ;;		___lldiv
  4360 ;;		___llmod
  4361 ;;		___lltoft
  4362 ;;		___wmul
  4363 ;;		__div_to_l_
  4364 ;;		__tdiv_to_l_
  4365 ;;		_fround
  4366 ;;		_isdigit
  4367 ;;		_putch
  4368 ;;		_scale
  4369 ;; This function is called by:
  4370 ;;		_main
  4371 ;;		_sortBattery
  4372 ;;		_dateTime
  4373 ;;		_mainMenu
  4374 ;;		_runSelect
  4375 ;;		_runMenu
  4376 ;;		_runTime
  4377 ;;		_runStats
  4378 ;;		_pause
  4379 ;;		_testFrequency
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text13
  4384  000012                     __ptext13:
  4385                           	opt stack 0
  4386  000012                     _printf:
  4387                           	opt stack 22
  4388                           
  4389                           ;doprnt.c: 466: va_list ap;
  4390                           ;doprnt.c: 499: signed char c;
  4391                           ;doprnt.c: 501: int width;
  4392                           ;doprnt.c: 504: int prec;
  4393                           ;doprnt.c: 508: unsigned short flag;
  4394                           ;doprnt.c: 515: char d;
  4395                           ;doprnt.c: 516: double fval;
  4396                           ;doprnt.c: 517: int exp;
  4397                           ;doprnt.c: 523: union {
  4398                           ;doprnt.c: 524: unsigned long vd;
  4399                           ;doprnt.c: 525: double integ;
  4400                           ;doprnt.c: 526: } tmpval;
  4401                           ;doprnt.c: 528: unsigned long val;
  4402                           ;doprnt.c: 529: unsigned len;
  4403                           ;doprnt.c: 530: const char * cp;
  4404                           ;doprnt.c: 533: *ap = __va_start();
  4405                           
  4406                           ;incstack = 0
  4407  000012  0ECB               	movlw	low (?_printf+2)
  4408  000014  0100               	movlb	0	; () banked
  4409  000016  6FE1               	movwf	printf@ap& (0+255),b
  4410  000018  0E00               	movlw	high (?_printf+2)
  4411  00001A  0100               	movlb	0	; () banked
  4412  00001C  6FE2               	movwf	(printf@ap+1)& (0+255),b
  4413                           
  4414                           ;doprnt.c: 536: while(c = *f++) {
  4415  00001E  EF0C  F007         	goto	l6541
  4416  000022                     l6175:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;doprnt.c: 538: if(c != '%')
  4420  000022  0E25               	movlw	37
  4421  000024  0100               	movlb	0	; () banked
  4422  000026  19F6               	xorwf	printf@c& (0+255),w,b
  4423  000028  B4D8               	btfsc	status,2,c
  4424  00002A  D006               	goto	l6179
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;doprnt.c: 540: {
  4428                           ;doprnt.c: 541: (putch(c) );
  4429  00002C  0100               	movlb	0	; () banked
  4430  00002E  51F6               	movf	printf@c& (0+255),w,b
  4431  000030  EC0B  F01D         	call	_putch
  4432                           
  4433                           ;doprnt.c: 542: continue;
  4434  000034  EF0C  F007         	goto	l6541
  4435  000038                     l6179:
  4436                           
  4437                           ;doprnt.c: 543: }
  4438                           ;doprnt.c: 546: width = 0;
  4439  000038  0E00               	movlw	0
  4440  00003A  0100               	movlb	0	; () banked
  4441  00003C  6FF1               	movwf	(printf@width+1)& (0+255),b
  4442  00003E  0E00               	movlw	0
  4443  000040  6FF0               	movwf	printf@width& (0+255),b
  4444                           
  4445                           ;doprnt.c: 548: flag = 0;
  4446  000042  0E00               	movlw	0
  4447  000044  0100               	movlb	0	; () banked
  4448  000046  6FF3               	movwf	(printf@flag+1)& (0+255),b
  4449  000048  0E00               	movlw	0
  4450  00004A  6FF2               	movwf	printf@flag& (0+255),b
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;doprnt.c: 551: switch(*f) {
  4454                           
  4455                           ;doprnt.c: 550: for(;;) {
  4456  00004C  D005               	goto	l6185
  4457  00004E                     l6181:
  4458                           
  4459                           ;doprnt.c: 580: flag |= 0x04;
  4460  00004E  0100               	movlb	0	; () banked
  4461  000050  85F2               	bsf	printf@flag& (0+255),2,b
  4462                           
  4463                           ;doprnt.c: 581: f++;
  4464  000052  0100               	movlb	0	; () banked
  4465  000054  4BC9               	infsnz	printf@f& (0+255),f,b
  4466  000056  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4467  000058                     l6185:
  4468  000058  C0C9  FFF6         	movff	printf@f,tblptrl
  4469  00005C  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4470  000060                     	if	0	;tblptru may be non-zero
  4471  000060                     	endif
  4472  000060                     	if	0	;tblptru may be non-zero
  4473  000060                     	endif
  4474  000060  0008               	tblrd		*
  4475  000062  50F5               	movf	tablat,w,c
  4476                           
  4477                           ; Switch size 1, requested type "space"
  4478                           ; Number of cases is 1, Range of values is 48 to 48
  4479                           ; switch strategies available:
  4480                           ; Name         Instructions Cycles
  4481                           ; simple_byte            4     3 (average)
  4482                           ;	Chosen strategy is simple_byte
  4483  000064  0A30               	xorlw	48	; case 48
  4484  000066  B4D8               	btfsc	status,2,c
  4485  000068  D7F2               	goto	l6181
  4486                           
  4487                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4488                           
  4489                           ;doprnt.c: 586: }
  4490                           
  4491                           ;doprnt.c: 585: break;
  4492  00006A  C0C9  FFF6         	movff	printf@f,tblptrl
  4493  00006E  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4494  000072                     	if	0	;tblptru may be non-zero
  4495  000072                     	endif
  4496  000072                     	if	0	;tblptru may be non-zero
  4497  000072                     	endif
  4498  000072  0008               	tblrd		*
  4499  000074  50F5               	movf	tablat,w,c
  4500  000076  EC2D  F01D         	call	_isdigit
  4501  00007A  A0D8               	btfss	status,0,c
  4502  00007C  D040               	goto	l6199
  4503                           
  4504                           ;doprnt.c: 598: width = 0;
  4505  00007E  0E00               	movlw	0
  4506  000080  0100               	movlb	0	; () banked
  4507  000082  6FF1               	movwf	(printf@width+1)& (0+255),b
  4508  000084  0E00               	movlw	0
  4509  000086  6FF0               	movwf	printf@width& (0+255),b
  4510  000088                     l6191:
  4511                           
  4512                           ;doprnt.c: 600: width *= 10;
  4513  000088  C0F0  F084         	movff	printf@width,___wmul@multiplier
  4514  00008C  C0F1  F085         	movff	printf@width+1,___wmul@multiplier+1
  4515  000090  0E00               	movlw	0
  4516  000092  0100               	movlb	0	; () banked
  4517  000094  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4518  000096  0E0A               	movlw	10
  4519  000098  6F86               	movwf	___wmul@multiplicand& (0+255),b
  4520  00009A  EC57  F01C         	call	___wmul	;wreg free
  4521  00009E  C084  F0F0         	movff	?___wmul,printf@width
  4522  0000A2  C085  F0F1         	movff	?___wmul+1,printf@width+1
  4523                           
  4524                           ;doprnt.c: 601: width += *f++ - '0';
  4525  0000A6  0ED0               	movlw	208
  4526  0000A8  0100               	movlb	0	; () banked
  4527  0000AA  6FD3               	movwf	??_printf& (0+255),b
  4528  0000AC  0EFF               	movlw	255
  4529  0000AE  0100               	movlb	0	; () banked
  4530  0000B0  6FD4               	movwf	(??_printf+1)& (0+255),b
  4531  0000B2  C0C9  FFF6         	movff	printf@f,tblptrl
  4532  0000B6  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4533  0000BA                     	if	0	;tblptru may be non-zero
  4534  0000BA                     	endif
  4535  0000BA                     	if	0	;tblptru may be non-zero
  4536  0000BA                     	endif
  4537  0000BA  0008               	tblrd		*
  4538  0000BC  50F5               	movf	tablat,w,c
  4539  0000BE  0100               	movlb	0	; () banked
  4540  0000C0  6FD5               	movwf	(??_printf+2)& (0+255),b
  4541  0000C2  6BD6               	clrf	(??_printf+3)& (0+255),b
  4542  0000C4  0100               	movlb	0	; () banked
  4543  0000C6  51D3               	movf	??_printf& (0+255),w,b
  4544  0000C8  0100               	movlb	0	; () banked
  4545  0000CA  27D5               	addwf	(??_printf+2)& (0+255),f,b
  4546  0000CC  0100               	movlb	0	; () banked
  4547  0000CE  51D4               	movf	(??_printf+1)& (0+255),w,b
  4548  0000D0  0100               	movlb	0	; () banked
  4549  0000D2  23D6               	addwfc	(??_printf+3)& (0+255),f,b
  4550  0000D4  0100               	movlb	0	; () banked
  4551  0000D6  51D5               	movf	(??_printf+2)& (0+255),w,b
  4552  0000D8  0100               	movlb	0	; () banked
  4553  0000DA  27F0               	addwf	printf@width& (0+255),f,b
  4554  0000DC  0100               	movlb	0	; () banked
  4555  0000DE  51D6               	movf	(??_printf+3)& (0+255),w,b
  4556  0000E0  0100               	movlb	0	; () banked
  4557  0000E2  23F1               	addwfc	(printf@width+1)& (0+255),f,b
  4558                           
  4559                           ; BSR set to: 0
  4560  0000E4  0100               	movlb	0	; () banked
  4561  0000E6  4BC9               	infsnz	printf@f& (0+255),f,b
  4562  0000E8  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4566  0000EA  C0C9  FFF6         	movff	printf@f,tblptrl
  4567  0000EE  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4568  0000F2                     	if	0	;tblptru may be non-zero
  4569  0000F2                     	endif
  4570  0000F2                     	if	0	;tblptru may be non-zero
  4571  0000F2                     	endif
  4572  0000F2  0008               	tblrd		*
  4573  0000F4  50F5               	movf	tablat,w,c
  4574  0000F6  EC2D  F01D         	call	_isdigit
  4575  0000FA  B0D8               	btfsc	status,0,c
  4576  0000FC  D7C5               	goto	l6191
  4577  0000FE                     l6199:
  4578                           
  4579                           ;doprnt.c: 608: }
  4580                           ;doprnt.c: 611: if(*f == '.') {
  4581  0000FE  C0C9  FFF6         	movff	printf@f,tblptrl
  4582  000102  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4583  000106                     	if	0	;tblptru may be non-zero
  4584  000106                     	endif
  4585  000106                     	if	0	;tblptru may be non-zero
  4586  000106                     	endif
  4587  000106  0008               	tblrd		*
  4588  000108  50F5               	movf	tablat,w,c
  4589  00010A  0A2E               	xorlw	46
  4590  00010C  A4D8               	btfss	status,2,c
  4591  00010E  D039               	goto	l6211
  4592                           
  4593                           ;doprnt.c: 612: flag |= 0x4000;
  4594  000110  0100               	movlb	0	; () banked
  4595  000112  8DF3               	bsf	(printf@flag+1)& (0+255),6,b
  4596                           
  4597                           ;doprnt.c: 613: f++;
  4598  000114  0100               	movlb	0	; () banked
  4599  000116  4BC9               	infsnz	printf@f& (0+255),f,b
  4600  000118  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 620: {
  4604                           ;doprnt.c: 621: prec = 0;
  4605  00011A  0E00               	movlw	0
  4606  00011C  0100               	movlb	0	; () banked
  4607  00011E  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4608  000120  0E00               	movlw	0
  4609  000122  6FF4               	movwf	printf@prec& (0+255),b
  4610                           
  4611                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4612  000124  D023               	goto	l6209
  4613  000126                     l6205:
  4614                           
  4615                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4616  000126  C0F4  F084         	movff	printf@prec,___wmul@multiplier
  4617  00012A  C0F5  F085         	movff	printf@prec+1,___wmul@multiplier+1
  4618  00012E  0E00               	movlw	0
  4619  000130  0100               	movlb	0	; () banked
  4620  000132  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4621  000134  0E0A               	movlw	10
  4622  000136  6F86               	movwf	___wmul@multiplicand& (0+255),b
  4623  000138  EC57  F01C         	call	___wmul	;wreg free
  4624  00013C  C0C9  FFF6         	movff	printf@f,tblptrl
  4625  000140  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4626  000144                     	if	0	;tblptru may be non-zero
  4627  000144                     	endif
  4628  000144                     	if	0	;tblptru may be non-zero
  4629  000144                     	endif
  4630  000144  0008               	tblrd		*
  4631  000146  50F5               	movf	tablat,w,c
  4632  000148  0100               	movlb	0	; () banked
  4633  00014A  2784               	addwf	?___wmul& (0+255),f,b
  4634  00014C  0E00               	movlw	0
  4635  00014E  0100               	movlb	0	; () banked
  4636  000150  2385               	addwfc	(?___wmul+1)& (0+255),f,b
  4637  000152  0ED0               	movlw	208
  4638  000154  0100               	movlb	0	; () banked
  4639  000156  2584               	addwf	?___wmul& (0+255),w,b
  4640  000158  0100               	movlb	0	; () banked
  4641  00015A  6FF4               	movwf	printf@prec& (0+255),b
  4642  00015C  0EFF               	movlw	255
  4643  00015E  0100               	movlb	0	; () banked
  4644  000160  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  4645  000162  0100               	movlb	0	; () banked
  4646  000164  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4647                           
  4648                           ; BSR set to: 0
  4649  000166  0100               	movlb	0	; () banked
  4650  000168  4BC9               	infsnz	printf@f& (0+255),f,b
  4651  00016A  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4652  00016C                     l6209:
  4653                           
  4654                           ; BSR set to: 0
  4655  00016C  C0C9  FFF6         	movff	printf@f,tblptrl
  4656  000170  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4657  000174                     	if	0	;tblptru may be non-zero
  4658  000174                     	endif
  4659  000174                     	if	0	;tblptru may be non-zero
  4660  000174                     	endif
  4661  000174  0008               	tblrd		*
  4662  000176  50F5               	movf	tablat,w,c
  4663  000178  EC2D  F01D         	call	_isdigit
  4664  00017C  A0D8               	btfss	status,0,c
  4665  00017E  D07D               	goto	l6253
  4666  000180  D7D2               	goto	l6205
  4667  000182                     l6211:
  4668                           
  4669                           ;doprnt.c: 626: prec = 0;
  4670  000182  0E00               	movlw	0
  4671  000184  0100               	movlb	0	; () banked
  4672  000186  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4673  000188  0E00               	movlw	0
  4674  00018A  6FF4               	movwf	printf@prec& (0+255),b
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;doprnt.c: 628: flag |= 0x1000;
  4678  00018C  0100               	movlb	0	; () banked
  4679  00018E  89F3               	bsf	(printf@flag+1)& (0+255),4,b
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;doprnt.c: 635: switch(c = *f++) {
  4683                           
  4684                           ;doprnt.c: 630: }
  4685                           ;doprnt.c: 633: loop:
  4686                           
  4687                           ; BSR set to: 0
  4688  000190  D074               	goto	l6253
  4689  000192                     l6215:
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;doprnt.c: 643: flag |= 0x10;
  4693  000192  0100               	movlb	0	; () banked
  4694  000194  89F2               	bsf	printf@flag& (0+255),4,b
  4695                           
  4696                           ;doprnt.c: 644: goto loop;
  4697  000196  D071               	goto	l6253
  4698  000198                     l6217:
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;doprnt.c: 663: flag |= 0x400;
  4702  000198  0100               	movlb	0	; () banked
  4703  00019A  85F3               	bsf	(printf@flag+1)& (0+255),2,b
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;doprnt.c: 698: case 'i':
  4707                           ;doprnt.c: 699: break;
  4708                           
  4709                           ; BSR set to: 0
  4710                           
  4711                           ;doprnt.c: 697: case 'd':
  4712                           
  4713                           ;doprnt.c: 664: break;
  4714  00019C  D090               	goto	l6255
  4715  00019E                     l6219:
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;doprnt.c: 721: flag |= 0x80;
  4719  00019E  0100               	movlb	0	; () banked
  4720  0001A0  8FF2               	bsf	printf@flag& (0+255),7,b
  4721                           
  4722                           ;doprnt.c: 723: break;
  4723  0001A2  D08D               	goto	l6255
  4724  0001A4                     l6221:
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;doprnt.c: 753: if(prec && prec < len)
  4728  0001A4  0100               	movlb	0	; () banked
  4729  0001A6  51F4               	movf	printf@prec& (0+255),w,b
  4730  0001A8  0100               	movlb	0	; () banked
  4731  0001AA  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  4732  0001AC  B4D8               	btfsc	status,2,c
  4733  0001AE  D00E               	goto	l6227
  4734                           
  4735                           ; BSR set to: 0
  4736  0001B0  0100               	movlb	0	; () banked
  4737  0001B2  51DF               	movf	printf@len& (0+255),w,b
  4738  0001B4  0100               	movlb	0	; () banked
  4739  0001B6  5DF4               	subwf	printf@prec& (0+255),w,b
  4740  0001B8  0100               	movlb	0	; () banked
  4741  0001BA  51E0               	movf	(printf@len+1)& (0+255),w,b
  4742  0001BC  0100               	movlb	0	; () banked
  4743  0001BE  59F5               	subwfb	(printf@prec+1)& (0+255),w,b
  4744  0001C0  B0D8               	btfsc	status,0,c
  4745  0001C2  D004               	goto	l6227
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;doprnt.c: 754: len = prec;
  4749  0001C4  C0F4  F0DF         	movff	printf@prec,printf@len
  4750  0001C8  C0F5  F0E0         	movff	printf@prec+1,printf@len+1
  4751  0001CC                     l6227:
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;doprnt.c: 757: if(width > len)
  4755  0001CC  0100               	movlb	0	; () banked
  4756  0001CE  51F0               	movf	printf@width& (0+255),w,b
  4757  0001D0  0100               	movlb	0	; () banked
  4758  0001D2  5DDF               	subwf	printf@len& (0+255),w,b
  4759  0001D4  0100               	movlb	0	; () banked
  4760  0001D6  51F1               	movf	(printf@width+1)& (0+255),w,b
  4761  0001D8  0100               	movlb	0	; () banked
  4762  0001DA  59E0               	subwfb	(printf@len+1)& (0+255),w,b
  4763  0001DC  B0D8               	btfsc	status,0,c
  4764  0001DE  D009               	goto	l6231
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;doprnt.c: 758: width -= len;
  4768  0001E0  0100               	movlb	0	; () banked
  4769  0001E2  51DF               	movf	printf@len& (0+255),w,b
  4770  0001E4  0100               	movlb	0	; () banked
  4771  0001E6  5FF0               	subwf	printf@width& (0+255),f,b
  4772  0001E8  0100               	movlb	0	; () banked
  4773  0001EA  51E0               	movf	(printf@len+1)& (0+255),w,b
  4774  0001EC  0100               	movlb	0	; () banked
  4775  0001EE  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  4776  0001F0  D009               	goto	l6235
  4777  0001F2                     l6231:
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;doprnt.c: 759: else
  4781                           ;doprnt.c: 760: width = 0;
  4782  0001F2  0E00               	movlw	0
  4783  0001F4  0100               	movlb	0	; () banked
  4784  0001F6  6FF1               	movwf	(printf@width+1)& (0+255),b
  4785  0001F8  0E00               	movlw	0
  4786  0001FA  6FF0               	movwf	printf@width& (0+255),b
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;doprnt.c: 764: while(width--)
  4790  0001FC  D003               	goto	l6235
  4791  0001FE                     l6233:
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;doprnt.c: 765: (putch(' ') );
  4795  0001FE  0E20               	movlw	32
  4796  000200  EC0B  F01D         	call	_putch
  4797  000204                     l6235:
  4798  000204  0100               	movlb	0	; () banked
  4799  000206  07F0               	decf	printf@width& (0+255),f,b
  4800  000208  A0D8               	btfss	status,0,c
  4801  00020A  07F1               	decf	(printf@width+1)& (0+255),f,b
  4802  00020C  0100               	movlb	0	; () banked
  4803  00020E  29F0               	incf	printf@width& (0+255),w,b
  4804  000210  E1F6               	bnz	l6233
  4805  000212  0100               	movlb	0	; () banked
  4806  000214  29F1               	incf	(printf@width+1)& (0+255),w,b
  4807  000216  B4D8               	btfsc	status,2,c
  4808  000218  D00B               	goto	l6241
  4809  00021A  D7F1               	goto	l6233
  4810  00021C                     l6237:
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;doprnt.c: 768: (putch(*cp++) );
  4814  00021C  C0DD  FFD9         	movff	printf@cp,fsr2l
  4815  000220  C0DE  FFDA         	movff	printf@cp+1,fsr2h
  4816  000224  50DF               	movf	indf2,w,c
  4817  000226  EC0B  F01D         	call	_putch
  4818  00022A  0100               	movlb	0	; () banked
  4819  00022C  4BDD               	infsnz	printf@cp& (0+255),f,b
  4820  00022E  2BDE               	incf	(printf@cp+1)& (0+255),f,b
  4821  000230                     l6241:
  4822                           
  4823                           ; BSR set to: 0
  4824  000230  0100               	movlb	0	; () banked
  4825  000232  07DF               	decf	printf@len& (0+255),f,b
  4826  000234  A0D8               	btfss	status,0,c
  4827  000236  07E0               	decf	(printf@len+1)& (0+255),f,b
  4828  000238  0100               	movlb	0	; () banked
  4829  00023A  29DF               	incf	printf@len& (0+255),w,b
  4830  00023C  E1EF               	bnz	l6237
  4831  00023E  0100               	movlb	0	; () banked
  4832  000240  29E0               	incf	(printf@len+1)& (0+255),w,b
  4833  000242  B4D8               	btfsc	status,2,c
  4834  000244  EF0C  F007         	goto	l6541
  4835  000248  D7E9               	goto	l6237
  4836  00024A                     l6243:
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4840  00024A  C0E1  FFD9         	movff	printf@ap,fsr2l
  4841  00024E  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  4842  000252  50DF               	movf	indf2,w,c
  4843  000254  0100               	movlb	0	; () banked
  4844  000256  6FF6               	movwf	printf@c& (0+255),b
  4845                           
  4846                           ; BSR set to: 0
  4847  000258  0E02               	movlw	2
  4848  00025A  0100               	movlb	0	; () banked
  4849  00025C  27E1               	addwf	printf@ap& (0+255),f,b
  4850  00025E  0E00               	movlw	0
  4851  000260  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  4852  000262                     l6247:
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;doprnt.c: 805: cp = (char *)&c;
  4856  000262  0EF6               	movlw	low printf@c
  4857  000264  0100               	movlb	0	; () banked
  4858  000266  6FDD               	movwf	printf@cp& (0+255),b
  4859  000268  0E00               	movlw	high printf@c
  4860  00026A  0100               	movlb	0	; () banked
  4861  00026C  6FDE               	movwf	(printf@cp+1)& (0+255),b
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;doprnt.c: 806: len = 1;
  4865  00026E  0E00               	movlw	0
  4866  000270  0100               	movlb	0	; () banked
  4867  000272  6FE0               	movwf	(printf@len+1)& (0+255),b
  4868  000274  0E01               	movlw	1
  4869  000276  6FDF               	movwf	printf@len& (0+255),b
  4870                           
  4871                           ;doprnt.c: 807: goto dostring;
  4872  000278  D795               	goto	l6221
  4873  00027A                     l6253:
  4874  00027A  C0C9  FFF6         	movff	printf@f,tblptrl
  4875  00027E  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4876  000282  0100               	movlb	0	; () banked
  4877  000284  4BC9               	infsnz	printf@f& (0+255),f,b
  4878  000286  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4879  000288                     	if	0	;tblptru may be non-zero
  4880  000288                     	endif
  4881  000288                     	if	0	;tblptru may be non-zero
  4882  000288                     	endif
  4883  000288  0008               	tblrd		*
  4884  00028A  CFF5 F0F6          	movff	tablat,printf@c
  4885  00028E  0100               	movlb	0	; () banked
  4886  000290  51F6               	movf	printf@c& (0+255),w,b
  4887                           
  4888                           ; Switch size 1, requested type "space"
  4889                           ; Number of cases is 7, Range of values is 0 to 120
  4890                           ; switch strategies available:
  4891                           ; Name         Instructions Cycles
  4892                           ; simple_byte           22    12 (average)
  4893                           ;	Chosen strategy is simple_byte
  4894  000292  0A00               	xorlw	0	; case 0
  4895  000294  B4D8               	btfsc	status,2,c
  4896  000296  0012               	return	
  4897  000298  0A63               	xorlw	99	; case 99
  4898  00029A  B4D8               	btfsc	status,2,c
  4899  00029C  D7D6               	goto	l6243
  4900  00029E  0A07               	xorlw	7	; case 100
  4901  0002A0  B4D8               	btfsc	status,2,c
  4902  0002A2  D00D               	goto	l6255
  4903  0002A4  0A02               	xorlw	2	; case 102
  4904  0002A6  B4D8               	btfsc	status,2,c
  4905  0002A8  D777               	goto	l6217
  4906  0002AA  0A0F               	xorlw	15	; case 105
  4907  0002AC  B4D8               	btfsc	status,2,c
  4908  0002AE  D007               	goto	l6255
  4909  0002B0  0A05               	xorlw	5	; case 108
  4910  0002B2  B4D8               	btfsc	status,2,c
  4911  0002B4  D76E               	goto	l6215
  4912  0002B6  0A14               	xorlw	20	; case 120
  4913  0002B8  B4D8               	btfsc	status,2,c
  4914  0002BA  D771               	goto	l6219
  4915  0002BC  D7D2               	goto	l6247
  4916  0002BE                     l6255:
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;doprnt.c: 825: if(flag & (0x700)) {
  4920  0002BE  0E07               	movlw	7
  4921  0002C0  0100               	movlb	0	; () banked
  4922  0002C2  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  4923  0002C4  B4D8               	btfsc	status,2,c
  4924  0002C6  D37C               	goto	l726
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;doprnt.c: 827: if(flag & 0x1000)
  4928  0002C8  0100               	movlb	0	; () banked
  4929  0002CA  A9F3               	btfss	(printf@flag+1)& (0+255),4,b
  4930  0002CC  D005               	goto	l6261
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;doprnt.c: 829: prec = 6;
  4934  0002CE  0E00               	movlw	0
  4935  0002D0  0100               	movlb	0	; () banked
  4936  0002D2  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4937  0002D4  0E06               	movlw	6
  4938  0002D6  6FF4               	movwf	printf@prec& (0+255),b
  4939  0002D8                     l6261:
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4943  0002D8  C0E1  FFD9         	movff	printf@ap,fsr2l
  4944  0002DC  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  4945  0002E0  CFDE F0E9          	movff	postinc2,printf@fval
  4946  0002E4  CFDE F0EA          	movff	postinc2,printf@fval+1
  4947  0002E8  CFDD F0EB          	movff	postdec2,printf@fval+2
  4948                           
  4949                           ; BSR set to: 0
  4950  0002EC  0E03               	movlw	3
  4951  0002EE  0100               	movlb	0	; () banked
  4952  0002F0  27E1               	addwf	printf@ap& (0+255),f,b
  4953  0002F2  0E00               	movlw	0
  4954  0002F4  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;doprnt.c: 831: if(fval < 0.0) {
  4958  0002F6  0100               	movlb	0	; () banked
  4959  0002F8  AFEB               	btfss	(printf@fval+2)& (0+255),7,b
  4960  0002FA  D011               	goto	l6271
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;doprnt.c: 832: fval = -fval;
  4964  0002FC  C0E9  F027         	movff	printf@fval,___ftneg@f1
  4965  000300  C0EA  F028         	movff	printf@fval+1,___ftneg@f1+1
  4966  000304  C0EB  F029         	movff	printf@fval+2,___ftneg@f1+2
  4967  000308  ECF9  F01C         	call	___ftneg	;wreg free
  4968  00030C  C027  F0E9         	movff	?___ftneg,printf@fval
  4969  000310  C028  F0EA         	movff	?___ftneg+1,printf@fval+1
  4970  000314  C029  F0EB         	movff	?___ftneg+2,printf@fval+2
  4971                           
  4972                           ;doprnt.c: 833: flag |= 0x03;
  4973  000318  0E03               	movlw	3
  4974  00031A  0100               	movlb	0	; () banked
  4975  00031C  13F2               	iorwf	printf@flag& (0+255),f,b
  4976  00031E                     l6271:
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;doprnt.c: 834: }
  4980                           ;doprnt.c: 835: exp = 0;
  4981  00031E  0E00               	movlw	0
  4982  000320  0100               	movlb	0	; () banked
  4983  000322  6FE8               	movwf	(printf@exp+1)& (0+255),b
  4984  000324  0E00               	movlw	0
  4985  000326  6FE7               	movwf	printf@exp& (0+255),b
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;doprnt.c: 836: if( fval!=0) {
  4989  000328  0100               	movlb	0	; () banked
  4990  00032A  51E9               	movf	printf@fval& (0+255),w,b
  4991  00032C  0100               	movlb	0	; () banked
  4992  00032E  11EA               	iorwf	(printf@fval+1)& (0+255),w,b
  4993  000330  0100               	movlb	0	; () banked
  4994  000332  11EB               	iorwf	(printf@fval+2)& (0+255),w,b
  4995  000334  B4D8               	btfsc	status,2,c
  4996  000336  D09A               	goto	l6299
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5000  000338  0E82               	movlw	130
  5001  00033A  0100               	movlb	0	; () banked
  5002  00033C  6FD3               	movwf	??_printf& (0+255),b
  5003  00033E  0EFF               	movlw	255
  5004  000340  0100               	movlb	0	; () banked
  5005  000342  6FD4               	movwf	(??_printf+1)& (0+255),b
  5006  000344  C0E9  F0D5         	movff	printf@fval,??_printf+2
  5007  000348  C0EA  F0D6         	movff	printf@fval+1,??_printf+3
  5008  00034C  C0EB  F0D7         	movff	printf@fval+2,??_printf+4
  5009  000350  C0EC  F0D8         	movff	printf@fval+3,??_printf+5
  5010  000354  0E10               	movlw	16
  5011  000356  D006               	goto	u6450
  5012  000358                     u6455:
  5013  000358  0100               	movlb	0	; () banked
  5014  00035A  90D8               	bcf	status,0,c
  5015  00035C  33D8               	rrcf	(??_printf+5)& (0+255),f,b
  5016  00035E  33D7               	rrcf	(??_printf+4)& (0+255),f,b
  5017  000360  33D6               	rrcf	(??_printf+3)& (0+255),f,b
  5018  000362  33D5               	rrcf	(??_printf+2)& (0+255),f,b
  5019  000364                     u6450:
  5020  000364  2EE8               	decfsz	wreg,f,c
  5021  000366  D7F8               	goto	u6455
  5022  000368  0100               	movlb	0	; () banked
  5023  00036A  51D5               	movf	(??_printf+2)& (0+255),w,b
  5024  00036C  0100               	movlb	0	; () banked
  5025  00036E  25D3               	addwf	??_printf& (0+255),w,b
  5026  000370  0100               	movlb	0	; () banked
  5027  000372  6FE7               	movwf	printf@exp& (0+255),b
  5028  000374  0E00               	movlw	0
  5029  000376  0100               	movlb	0	; () banked
  5030  000378  21D4               	addwfc	(??_printf+1)& (0+255),w,b
  5031  00037A  0100               	movlb	0	; () banked
  5032  00037C  6FE8               	movwf	(printf@exp+1)& (0+255),b
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;doprnt.c: 838: exp--;
  5036  00037E  0100               	movlb	0	; () banked
  5037  000380  07E7               	decf	printf@exp& (0+255),f,b
  5038  000382  A0D8               	btfss	status,0,c
  5039  000384  07E8               	decf	(printf@exp+1)& (0+255),f,b
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;doprnt.c: 839: exp *= 3;
  5043  000386  C0E7  F084         	movff	printf@exp,___wmul@multiplier
  5044  00038A  C0E8  F085         	movff	printf@exp+1,___wmul@multiplier+1
  5045  00038E  0E00               	movlw	0
  5046  000390  0100               	movlb	0	; () banked
  5047  000392  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5048  000394  0E03               	movlw	3
  5049  000396  6F86               	movwf	___wmul@multiplicand& (0+255),b
  5050  000398  EC57  F01C         	call	___wmul	;wreg free
  5051  00039C  C084  F0E7         	movff	?___wmul,printf@exp
  5052  0003A0  C085  F0E8         	movff	?___wmul+1,printf@exp+1
  5053                           
  5054                           ;doprnt.c: 840: exp /= 10;
  5055  0003A4  C0E7  F02D         	movff	printf@exp,___awdiv@dividend
  5056  0003A8  C0E8  F02E         	movff	printf@exp+1,___awdiv@dividend+1
  5057  0003AC  0E00               	movlw	0
  5058  0003AE  6E30               	movwf	___awdiv@divisor+1,c
  5059  0003B0  0E0A               	movlw	10
  5060  0003B2  6E2F               	movwf	___awdiv@divisor,c
  5061  0003B4  ECB9  F018         	call	___awdiv	;wreg free
  5062  0003B8  C02D  F0E7         	movff	?___awdiv,printf@exp
  5063  0003BC  C02E  F0E8         	movff	?___awdiv+1,printf@exp+1
  5064                           
  5065                           ;doprnt.c: 841: if(exp < 0)
  5066  0003C0  0100               	movlb	0	; () banked
  5067  0003C2  AFE8               	btfss	(printf@exp+1)& (0+255),7,b
  5068  0003C4  D004               	goto	l6287
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;doprnt.c: 842: exp--;
  5072  0003C6  0100               	movlb	0	; () banked
  5073  0003C8  07E7               	decf	printf@exp& (0+255),f,b
  5074  0003CA  A0D8               	btfss	status,0,c
  5075  0003CC  07E8               	decf	(printf@exp+1)& (0+255),f,b
  5076  0003CE                     l6287:
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5080  0003CE  0100               	movlb	0	; () banked
  5081  0003D0  51E7               	movf	printf@exp& (0+255),w,b
  5082  0003D2  0800               	sublw	0
  5083  0003D4  EC99  F009         	call	_scale
  5084  0003D8  C0A4  F0E3         	movff	?_scale,printf@tmpval
  5085  0003DC  C0A5  F0E4         	movff	?_scale+1,printf@tmpval+1
  5086  0003E0  C0A6  F0E5         	movff	?_scale+2,printf@tmpval+2
  5087                           
  5088                           ;doprnt.c: 847: tmpval.integ *= fval;
  5089  0003E4  C0E3  F095         	movff	printf@tmpval,___ftmul@f1
  5090  0003E8  C0E4  F096         	movff	printf@tmpval+1,___ftmul@f1+1
  5091  0003EC  C0E5  F097         	movff	printf@tmpval+2,___ftmul@f1+2
  5092  0003F0  C0E9  F098         	movff	printf@fval,___ftmul@f2
  5093  0003F4  C0EA  F099         	movff	printf@fval+1,___ftmul@f2+1
  5094  0003F8  C0EB  F09A         	movff	printf@fval+2,___ftmul@f2+2
  5095  0003FC  ECC6  F010         	call	___ftmul	;wreg free
  5096  000400  C095  F0E3         	movff	?___ftmul,printf@tmpval
  5097  000404  C096  F0E4         	movff	?___ftmul+1,printf@tmpval+1
  5098  000408  C097  F0E5         	movff	?___ftmul+2,printf@tmpval+2
  5099                           
  5100                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5101  00040C  C0E3  F080         	movff	printf@tmpval,___ftge@ff1
  5102  000410  C0E4  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5103  000414  C0E5  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5104  000418  0E00               	movlw	0
  5105  00041A  0100               	movlb	0	; () banked
  5106  00041C  6F83               	movwf	___ftge@ff2& (0+255),b
  5107  00041E  0E80               	movlw	128
  5108  000420  0100               	movlb	0	; () banked
  5109  000422  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5110  000424  0E3F               	movlw	63
  5111  000426  0100               	movlb	0	; () banked
  5112  000428  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5113  00042A  EC9A  F017         	call	___ftge	;wreg free
  5114  00042E  0100               	movlb	0	; () banked
  5115  000430  B0D8               	btfsc	status,0,c
  5116  000432  D005               	goto	l6295
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;doprnt.c: 849: exp--;
  5120  000434  0100               	movlb	0	; () banked
  5121  000436  07E7               	decf	printf@exp& (0+255),f,b
  5122  000438  A0D8               	btfss	status,0,c
  5123  00043A  07E8               	decf	(printf@exp+1)& (0+255),f,b
  5124  00043C  D017               	goto	l6299
  5125  00043E                     l6295:
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5129  00043E  C0E3  F080         	movff	printf@tmpval,___ftge@ff1
  5130  000442  C0E4  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5131  000446  C0E5  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5132  00044A  0E00               	movlw	0
  5133  00044C  0100               	movlb	0	; () banked
  5134  00044E  6F83               	movwf	___ftge@ff2& (0+255),b
  5135  000450  0E20               	movlw	32
  5136  000452  0100               	movlb	0	; () banked
  5137  000454  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5138  000456  0E41               	movlw	65
  5139  000458  0100               	movlb	0	; () banked
  5140  00045A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5141  00045C  EC9A  F017         	call	___ftge	;wreg free
  5142  000460  0100               	movlb	0	; () banked
  5143  000462  A0D8               	btfss	status,0,c
  5144  000464  D003               	goto	l6299
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;doprnt.c: 851: exp++;
  5148  000466  0100               	movlb	0	; () banked
  5149  000468  4BE7               	infsnz	printf@exp& (0+255),f,b
  5150  00046A  2BE8               	incf	(printf@exp+1)& (0+255),f,b
  5151  00046C                     l6299:
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;doprnt.c: 852: }
  5155                           ;doprnt.c: 1112: if(prec <= 12)
  5156  00046C  0100               	movlb	0	; () banked
  5157  00046E  BFF5               	btfsc	(printf@prec+1)& (0+255),7,b
  5158  000470  D008               	goto	l6301
  5159  000472  0100               	movlb	0	; () banked
  5160  000474  51F5               	movf	(printf@prec+1)& (0+255),w,b
  5161  000476  E11D               	bnz	l6303
  5162  000478  0E0D               	movlw	13
  5163  00047A  0100               	movlb	0	; () banked
  5164  00047C  5DF4               	subwf	printf@prec& (0+255),w,b
  5165  00047E  B0D8               	btfsc	status,0,c
  5166  000480  D018               	goto	l6303
  5167  000482                     l6301:
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;doprnt.c: 1113: fval += fround(prec);
  5171  000482  C0E9  F0AE         	movff	printf@fval,___ftadd@f1
  5172  000486  C0EA  F0AF         	movff	printf@fval+1,___ftadd@f1+1
  5173  00048A  C0EB  F0B0         	movff	printf@fval+2,___ftadd@f1+2
  5174  00048E  0100               	movlb	0	; () banked
  5175  000490  51F4               	movf	printf@prec& (0+255),w,b
  5176  000492  EC9E  F00D         	call	_fround
  5177  000496  C0A4  F0B1         	movff	?_fround,___ftadd@f2
  5178  00049A  C0A5  F0B2         	movff	?_fround+1,___ftadd@f2+1
  5179  00049E  C0A6  F0B3         	movff	?_fround+2,___ftadd@f2+2
  5180  0004A2  ECE3  F00E         	call	___ftadd	;wreg free
  5181  0004A6  C0AE  F0E9         	movff	?___ftadd,printf@fval
  5182  0004AA  C0AF  F0EA         	movff	?___ftadd+1,printf@fval+1
  5183  0004AE  C0B0  F0EB         	movff	?___ftadd+2,printf@fval+2
  5184  0004B2                     l6303:
  5185                           
  5186                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5187  0004B2  0100               	movlb	0	; () banked
  5188  0004B4  BFE8               	btfsc	(printf@exp+1)& (0+255),7,b
  5189  0004B6  D008               	goto	l6305
  5190  0004B8  0100               	movlb	0	; () banked
  5191  0004BA  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5192  0004BC  E12A               	bnz	l6311
  5193  0004BE  0E0A               	movlw	10
  5194  0004C0  0100               	movlb	0	; () banked
  5195  0004C2  5DE7               	subwf	printf@exp& (0+255),w,b
  5196  0004C4  B0D8               	btfsc	status,0,c
  5197  0004C6  D025               	goto	l6311
  5198  0004C8                     l6305:
  5199                           
  5200                           ; BSR set to: 0
  5201  0004C8  0100               	movlb	0	; () banked
  5202  0004CA  51E9               	movf	printf@fval& (0+255),w,b
  5203  0004CC  0100               	movlb	0	; () banked
  5204  0004CE  11EA               	iorwf	(printf@fval+1)& (0+255),w,b
  5205  0004D0  0100               	movlb	0	; () banked
  5206  0004D2  11EB               	iorwf	(printf@fval+2)& (0+255),w,b
  5207  0004D4  B4D8               	btfsc	status,2,c
  5208  0004D6  D063               	goto	l6325
  5209                           
  5210                           ; BSR set to: 0
  5211  0004D8  C0E9  F0BA         	movff	printf@fval,___fttol@f1
  5212  0004DC  C0EA  F0BB         	movff	printf@fval+1,___fttol@f1+1
  5213  0004E0  C0EB  F0BC         	movff	printf@fval+2,___fttol@f1+2
  5214  0004E4  ECC9  F012         	call	___fttol	;wreg free
  5215  0004E8  0100               	movlb	0	; () banked
  5216  0004EA  51BA               	movf	?___fttol& (0+255),w,b
  5217  0004EC  0100               	movlb	0	; () banked
  5218  0004EE  11BB               	iorwf	(?___fttol+1)& (0+255),w,b
  5219  0004F0  0100               	movlb	0	; () banked
  5220  0004F2  11BC               	iorwf	(?___fttol+2)& (0+255),w,b
  5221  0004F4  0100               	movlb	0	; () banked
  5222  0004F6  11BD               	iorwf	(?___fttol+3)& (0+255),w,b
  5223  0004F8  A4D8               	btfss	status,2,c
  5224  0004FA  D051               	goto	l6325
  5225                           
  5226                           ; BSR set to: 0
  5227  0004FC  0100               	movlb	0	; () banked
  5228  0004FE  BFE8               	btfsc	(printf@exp+1)& (0+255),7,b
  5229  000500  D04E               	goto	l6325
  5230  000502  0100               	movlb	0	; () banked
  5231  000504  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5232  000506  E105               	bnz	l6311
  5233  000508  0E02               	movlw	2
  5234  00050A  0100               	movlb	0	; () banked
  5235  00050C  5DE7               	subwf	printf@exp& (0+255),w,b
  5236  00050E  A0D8               	btfss	status,0,c
  5237  000510  D046               	goto	l6325
  5238  000512                     l6311:
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5242  000512  C0E3  F080         	movff	printf@tmpval,___ftge@ff1
  5243  000516  C0E4  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5244  00051A  C0E5  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5245  00051E  0E70               	movlw	112
  5246  000520  0100               	movlb	0	; () banked
  5247  000522  6F83               	movwf	___ftge@ff2& (0+255),b
  5248  000524  0E89               	movlw	137
  5249  000526  0100               	movlb	0	; () banked
  5250  000528  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5251  00052A  0E40               	movlw	64
  5252  00052C  0100               	movlb	0	; () banked
  5253  00052E  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5254  000530  EC9A  F017         	call	___ftge	;wreg free
  5255  000534  0100               	movlb	0	; () banked
  5256  000536  B0D8               	btfsc	status,0,c
  5257  000538  D003               	goto	l6315
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5261  00053A  0100               	movlb	0	; () banked
  5262  00053C  0EF7               	movlw	247
  5263  00053E  D002               	goto	L1
  5264  000540                     l6315:
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5268  000540  0100               	movlb	0	; () banked
  5269  000542  0EF8               	movlw	248
  5270  000544                     L1:
  5271  000544  27E7               	addwf	printf@exp& (0+255),f,b
  5272  000546  0EFF               	movlw	255
  5273  000548  23E8               	addwfc	(printf@exp+1)& (0+255),f,b
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;doprnt.c: 1124: }
  5277                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5278                           
  5279                           ; BSR set to: 0
  5280  00054A  0100               	movlb	0	; () banked
  5281  00054C  51E7               	movf	printf@exp& (0+255),w,b
  5282  00054E  EC99  F009         	call	_scale
  5283  000552  C0A4  F0E3         	movff	?_scale,printf@tmpval
  5284  000556  C0A5  F0E4         	movff	?_scale+1,printf@tmpval+1
  5285  00055A  C0A6  F0E5         	movff	?_scale+2,printf@tmpval+2
  5286                           
  5287                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5288  00055E  C0E9  F027         	movff	printf@fval,__tdiv_to_l_@f1
  5289  000562  C0EA  F028         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5290  000566  C0EB  F029         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5291  00056A  C0E3  F02A         	movff	printf@tmpval,__tdiv_to_l_@f2
  5292  00056E  C0E4  F02B         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5293  000572  C0E5  F02C         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5294  000576  EC75  F011         	call	__tdiv_to_l_	;wreg free
  5295  00057A  C027  F0EC         	movff	?__tdiv_to_l_,printf@val
  5296  00057E  C028  F0ED         	movff	?__tdiv_to_l_+1,printf@val+1
  5297  000582  C029  F0EE         	movff	?__tdiv_to_l_+2,printf@val+2
  5298  000586  C02A  F0EF         	movff	?__tdiv_to_l_+3,printf@val+3
  5299                           
  5300                           ;doprnt.c: 1129: fval = 0.0;
  5301  00058A  0E00               	movlw	0
  5302  00058C  0100               	movlb	0	; () banked
  5303  00058E  6FE9               	movwf	printf@fval& (0+255),b
  5304  000590  0E00               	movlw	0
  5305  000592  0100               	movlb	0	; () banked
  5306  000594  6FEA               	movwf	(printf@fval+1)& (0+255),b
  5307  000596  0E00               	movlw	0
  5308  000598  0100               	movlb	0	; () banked
  5309  00059A  6FEB               	movwf	(printf@fval+2)& (0+255),b
  5310                           
  5311                           ;doprnt.c: 1130: } else {
  5312  00059C  D033               	goto	l6329
  5313  00059E                     l6325:
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5317  00059E  C0E9  F0BA         	movff	printf@fval,___fttol@f1
  5318  0005A2  C0EA  F0BB         	movff	printf@fval+1,___fttol@f1+1
  5319  0005A6  C0EB  F0BC         	movff	printf@fval+2,___fttol@f1+2
  5320  0005AA  ECC9  F012         	call	___fttol	;wreg free
  5321  0005AE  C0BA  F0EC         	movff	?___fttol,printf@val
  5322  0005B2  C0BB  F0ED         	movff	?___fttol+1,printf@val+1
  5323  0005B6  C0BC  F0EE         	movff	?___fttol+2,printf@val+2
  5324  0005BA  C0BD  F0EF         	movff	?___fttol+3,printf@val+3
  5325                           
  5326                           ;doprnt.c: 1132: fval -= (double)val;
  5327  0005BE  C0E9  F0BA         	movff	printf@fval,___ftsub@f1
  5328  0005C2  C0EA  F0BB         	movff	printf@fval+1,___ftsub@f1+1
  5329  0005C6  C0EB  F0BC         	movff	printf@fval+2,___ftsub@f1+2
  5330  0005CA  C0EC  F02F         	movff	printf@val,___lltoft@c
  5331  0005CE  C0ED  F030         	movff	printf@val+1,___lltoft@c+1
  5332  0005D2  C0EE  F031         	movff	printf@val+2,___lltoft@c+2
  5333  0005D6  C0EF  F032         	movff	printf@val+3,___lltoft@c+3
  5334  0005DA  EC90  F01A         	call	___lltoft	;wreg free
  5335  0005DE  C02F  F0BD         	movff	?___lltoft,___ftsub@f2
  5336  0005E2  C030  F0BE         	movff	?___lltoft+1,___ftsub@f2+1
  5337  0005E6  C031  F0BF         	movff	?___lltoft+2,___ftsub@f2+2
  5338  0005EA  EC2C  F01B         	call	___ftsub	;wreg free
  5339  0005EE  C0BA  F0E9         	movff	?___ftsub,printf@fval
  5340  0005F2  C0BB  F0EA         	movff	?___ftsub+1,printf@fval+1
  5341  0005F6  C0BC  F0EB         	movff	?___ftsub+2,printf@fval+2
  5342                           
  5343                           ;doprnt.c: 1133: exp = 0;
  5344  0005FA  0E00               	movlw	0
  5345  0005FC  0100               	movlb	0	; () banked
  5346  0005FE  6FE8               	movwf	(printf@exp+1)& (0+255),b
  5347  000600  0E00               	movlw	0
  5348  000602  6FE7               	movwf	printf@exp& (0+255),b
  5349  000604                     l6329:
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;doprnt.c: 1134: }
  5353                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5354  000604  0E01               	movlw	1
  5355  000606  0100               	movlb	0	; () banked
  5356  000608  6FF6               	movwf	printf@c& (0+255),b
  5357  00060A                     l6331:
  5358                           
  5359                           ; BSR set to: 0
  5360  00060A  0E0A               	movlw	10
  5361  00060C  0100               	movlb	0	; () banked
  5362  00060E  19F6               	xorwf	printf@c& (0+255),w,b
  5363  000610  B4D8               	btfsc	status,2,c
  5364  000612  D01E               	goto	l6343
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;doprnt.c: 1137: if(val < dpowers[c])
  5368                           
  5369                           ; BSR set to: 0
  5370                           
  5371                           ; BSR set to: 0
  5372  000614  0100               	movlb	0	; () banked
  5373  000616  51F6               	movf	printf@c& (0+255),w,b
  5374  000618  0D04               	mullw	4
  5375  00061A  0E1D               	movlw	low _dpowers
  5376  00061C  24F3               	addwf	prodl,w,c
  5377  00061E  6EF6               	movwf	tblptrl,c
  5378  000620  0EFE               	movlw	high _dpowers
  5379  000622  20F4               	addwfc	prodh,w,c
  5380  000624  6EF7               	movwf	tblptrh,c
  5381  000626                     	if	0	;There are less than 3 active tblptr bytes
  5382  000626                     	endif
  5383  000626  0009               	tblrd		*+
  5384  000628  50F5               	movf	tablat,w,c
  5385  00062A  0100               	movlb	0	; () banked
  5386  00062C  5DEC               	subwf	printf@val& (0+255),w,b
  5387  00062E  0009               	tblrd		*+
  5388  000630  50F5               	movf	tablat,w,c
  5389  000632  0100               	movlb	0	; () banked
  5390  000634  59ED               	subwfb	(printf@val+1)& (0+255),w,b
  5391  000636  0009               	tblrd		*+
  5392  000638  50F5               	movf	tablat,w,c
  5393  00063A  0100               	movlb	0	; () banked
  5394  00063C  59EE               	subwfb	(printf@val+2)& (0+255),w,b
  5395  00063E  0009               	tblrd		*+
  5396  000640  50F5               	movf	tablat,w,c
  5397  000642  0100               	movlb	0	; () banked
  5398  000644  59EF               	subwfb	(printf@val+3)& (0+255),w,b
  5399  000646  A0D8               	btfss	status,0,c
  5400  000648  D003               	goto	l6343
  5401                           
  5402                           ; BSR set to: 0
  5403                           
  5404                           ; BSR set to: 0
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;doprnt.c: 1138: break;
  5408  00064A  0100               	movlb	0	; () banked
  5409  00064C  2BF6               	incf	printf@c& (0+255),f,b
  5410  00064E  D7DD               	goto	l6331
  5411  000650                     l6343:
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;doprnt.c: 1142: width -= prec + c + exp;
  5415  000650  C0F6  F0D3         	movff	printf@c,??_printf
  5416  000654  0100               	movlb	0	; () banked
  5417  000656  6BD4               	clrf	(??_printf+1)& (0+255),b
  5418  000658  BFD3               	btfsc	??_printf& (0+255),7,b
  5419  00065A  07D4               	decf	(??_printf+1)& (0+255),f,b
  5420  00065C  0100               	movlb	0	; () banked
  5421  00065E  51F4               	movf	printf@prec& (0+255),w,b
  5422  000660  0100               	movlb	0	; () banked
  5423  000662  27D3               	addwf	??_printf& (0+255),f,b
  5424  000664  0100               	movlb	0	; () banked
  5425  000666  51F5               	movf	(printf@prec+1)& (0+255),w,b
  5426  000668  0100               	movlb	0	; () banked
  5427  00066A  23D4               	addwfc	(??_printf+1)& (0+255),f,b
  5428  00066C  0100               	movlb	0	; () banked
  5429  00066E  51E7               	movf	printf@exp& (0+255),w,b
  5430  000670  0100               	movlb	0	; () banked
  5431  000672  27D3               	addwf	??_printf& (0+255),f,b
  5432  000674  0100               	movlb	0	; () banked
  5433  000676  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5434  000678  0100               	movlb	0	; () banked
  5435  00067A  23D4               	addwfc	(??_printf+1)& (0+255),f,b
  5436  00067C  0100               	movlb	0	; () banked
  5437  00067E  51D3               	movf	??_printf& (0+255),w,b
  5438  000680  0100               	movlb	0	; () banked
  5439  000682  5FF0               	subwf	printf@width& (0+255),f,b
  5440  000684  0100               	movlb	0	; () banked
  5441  000686  51D4               	movf	(??_printf+1)& (0+255),w,b
  5442  000688  0100               	movlb	0	; () banked
  5443  00068A  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  5444                           
  5445                           ;doprnt.c: 1143: if(
  5446                           ;doprnt.c: 1147: prec)
  5447  00068C  0100               	movlb	0	; () banked
  5448  00068E  51F4               	movf	printf@prec& (0+255),w,b
  5449  000690  0100               	movlb	0	; () banked
  5450  000692  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  5451  000694  B4D8               	btfsc	status,2,c
  5452  000696  D004               	goto	l6347
  5453                           
  5454                           ; BSR set to: 0
  5455                           ;doprnt.c: 1148: width--;
  5456  000698  0100               	movlb	0	; () banked
  5457  00069A  07F0               	decf	printf@width& (0+255),f,b
  5458  00069C  A0D8               	btfss	status,0,c
  5459  00069E  07F1               	decf	(printf@width+1)& (0+255),f,b
  5460  0006A0                     l6347:
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;doprnt.c: 1149: if(flag & 0x03)
  5464  0006A0  0E03               	movlw	3
  5465  0006A2  0100               	movlb	0	; () banked
  5466  0006A4  15F2               	andwf	printf@flag& (0+255),w,b
  5467  0006A6  0100               	movlb	0	; () banked
  5468  0006A8  6FD3               	movwf	??_printf& (0+255),b
  5469  0006AA  0E00               	movlw	0
  5470  0006AC  0100               	movlb	0	; () banked
  5471  0006AE  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  5472  0006B0  0100               	movlb	0	; () banked
  5473  0006B2  6FD4               	movwf	(??_printf+1)& (0+255),b
  5474  0006B4  0100               	movlb	0	; () banked
  5475  0006B6  51D3               	movf	??_printf& (0+255),w,b
  5476  0006B8  0100               	movlb	0	; () banked
  5477  0006BA  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  5478  0006BC  B4D8               	btfsc	status,2,c
  5479  0006BE  D004               	goto	l6351
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;doprnt.c: 1150: width--;
  5483  0006C0  0100               	movlb	0	; () banked
  5484  0006C2  07F0               	decf	printf@width& (0+255),f,b
  5485  0006C4  A0D8               	btfss	status,0,c
  5486  0006C6  07F1               	decf	(printf@width+1)& (0+255),f,b
  5487  0006C8                     l6351:
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;doprnt.c: 1153: if(flag & 0x04) {
  5491  0006C8  0100               	movlb	0	; () banked
  5492  0006CA  A5F2               	btfss	printf@flag& (0+255),2,b
  5493  0006CC  D02D               	goto	l6367
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;doprnt.c: 1157: if(flag & 0x03)
  5497  0006CE  0E03               	movlw	3
  5498  0006D0  0100               	movlb	0	; () banked
  5499  0006D2  15F2               	andwf	printf@flag& (0+255),w,b
  5500  0006D4  0100               	movlb	0	; () banked
  5501  0006D6  6FD3               	movwf	??_printf& (0+255),b
  5502  0006D8  0E00               	movlw	0
  5503  0006DA  0100               	movlb	0	; () banked
  5504  0006DC  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  5505  0006DE  0100               	movlb	0	; () banked
  5506  0006E0  6FD4               	movwf	(??_printf+1)& (0+255),b
  5507  0006E2  0100               	movlb	0	; () banked
  5508  0006E4  51D3               	movf	??_printf& (0+255),w,b
  5509  0006E6  0100               	movlb	0	; () banked
  5510  0006E8  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  5511  0006EA  B4D8               	btfsc	status,2,c
  5512  0006EC  D00B               	goto	l6361
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;doprnt.c: 1159: (putch('-') );
  5516  0006EE  0E2D               	movlw	45
  5517  0006F0  EC0B  F01D         	call	_putch
  5518                           
  5519                           ;doprnt.c: 1168: while(width > 0) {
  5520  0006F4  D007               	goto	l6361
  5521  0006F6                     l6357:
  5522                           
  5523                           ;doprnt.c: 1169: (putch('0') );
  5524  0006F6  0E30               	movlw	48
  5525  0006F8  EC0B  F01D         	call	_putch
  5526                           
  5527                           ;doprnt.c: 1170: width--;
  5528  0006FC  0100               	movlb	0	; () banked
  5529  0006FE  07F0               	decf	printf@width& (0+255),f,b
  5530  000700  A0D8               	btfss	status,0,c
  5531  000702  07F1               	decf	(printf@width+1)& (0+255),f,b
  5532  000704                     l6361:
  5533  000704  0100               	movlb	0	; () banked
  5534  000706  BFF1               	btfsc	(printf@width+1)& (0+255),7,b
  5535  000708  D074               	goto	l6379
  5536  00070A  0100               	movlb	0	; () banked
  5537  00070C  51F1               	movf	(printf@width+1)& (0+255),w,b
  5538  00070E  E1F3               	bnz	l6357
  5539  000710  0100               	movlb	0	; () banked
  5540  000712  05F0               	decf	printf@width& (0+255),w,b
  5541  000714  A0D8               	btfss	status,0,c
  5542  000716  D06D               	goto	l6379
  5543  000718  D7EE               	goto	l6357
  5544  00071A                     l6363:
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;doprnt.c: 1181: (putch(' ') );
  5548  00071A  0E20               	movlw	32
  5549  00071C  EC0B  F01D         	call	_putch
  5550                           
  5551                           ;doprnt.c: 1182: width--;
  5552  000720  0100               	movlb	0	; () banked
  5553  000722  07F0               	decf	printf@width& (0+255),f,b
  5554  000724  A0D8               	btfss	status,0,c
  5555  000726  07F1               	decf	(printf@width+1)& (0+255),f,b
  5556  000728                     l6367:
  5557                           
  5558                           ; BSR set to: 0
  5559  000728  0100               	movlb	0	; () banked
  5560  00072A  BFF1               	btfsc	(printf@width+1)& (0+255),7,b
  5561  00072C  D007               	goto	l6369
  5562  00072E  0100               	movlb	0	; () banked
  5563  000730  51F1               	movf	(printf@width+1)& (0+255),w,b
  5564  000732  E1F3               	bnz	l6363
  5565  000734  0100               	movlb	0	; () banked
  5566  000736  05F0               	decf	printf@width& (0+255),w,b
  5567  000738  B0D8               	btfsc	status,0,c
  5568  00073A  D7EF               	goto	l6363
  5569  00073C                     l6369:
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;doprnt.c: 1183: }
  5573                           ;doprnt.c: 1188: if(flag & 0x03)
  5574  00073C  0E03               	movlw	3
  5575  00073E  0100               	movlb	0	; () banked
  5576  000740  15F2               	andwf	printf@flag& (0+255),w,b
  5577  000742  0100               	movlb	0	; () banked
  5578  000744  6FD3               	movwf	??_printf& (0+255),b
  5579  000746  0E00               	movlw	0
  5580  000748  0100               	movlb	0	; () banked
  5581  00074A  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  5582  00074C  0100               	movlb	0	; () banked
  5583  00074E  6FD4               	movwf	(??_printf+1)& (0+255),b
  5584  000750  0100               	movlb	0	; () banked
  5585  000752  51D3               	movf	??_printf& (0+255),w,b
  5586  000754  0100               	movlb	0	; () banked
  5587  000756  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  5588  000758  B4D8               	btfsc	status,2,c
  5589  00075A  D04B               	goto	l6379
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;doprnt.c: 1190: (putch('-') );
  5593  00075C  0E2D               	movlw	45
  5594  00075E  EC0B  F01D         	call	_putch
  5595                           
  5596                           ;doprnt.c: 1195: }
  5597                           ;doprnt.c: 1196: while(c--) {
  5598  000762  D047               	goto	l6379
  5599  000764                     l6373:
  5600                           
  5601                           ;doprnt.c: 1200: {
  5602                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5603  000764  C0EC  F027         	movff	printf@val,___lldiv@dividend
  5604  000768  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  5605  00076C  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  5606  000770  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  5607  000774  0100               	movlb	0	; () banked
  5608  000776  51F6               	movf	printf@c& (0+255),w,b
  5609  000778  0D04               	mullw	4
  5610  00077A  0E1D               	movlw	low _dpowers
  5611  00077C  24F3               	addwf	prodl,w,c
  5612  00077E  6EF6               	movwf	tblptrl,c
  5613  000780  0EFE               	movlw	high _dpowers
  5614  000782  20F4               	addwfc	prodh,w,c
  5615  000784  6EF7               	movwf	tblptrh,c
  5616  000786                     	if	0	;There are less than 3 active tblptr bytes
  5617  000786                     	endif
  5618  000786  0009               	tblrd		*+
  5619  000788  CFF5 F02B          	movff	tablat,___lldiv@divisor
  5620  00078C  0009               	tblrd		*+
  5621  00078E  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  5622  000792  0009               	tblrd		*+
  5623  000794  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  5624  000798  000A               	tblrd		*-
  5625  00079A  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  5626  00079E  ECDF  F019         	call	___lldiv	;wreg free
  5627  0007A2  C027  F0E3         	movff	?___lldiv,printf@tmpval
  5628  0007A6  C028  F0E4         	movff	?___lldiv+1,printf@tmpval+1
  5629  0007AA  C029  F0E5         	movff	?___lldiv+2,printf@tmpval+2
  5630  0007AE  C02A  F0E6         	movff	?___lldiv+3,printf@tmpval+3
  5631                           
  5632                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5633  0007B2  C0E3  F080         	movff	printf@tmpval,___llmod@dividend
  5634  0007B6  C0E4  F081         	movff	printf@tmpval+1,___llmod@dividend+1
  5635  0007BA  C0E5  F082         	movff	printf@tmpval+2,___llmod@dividend+2
  5636  0007BE  C0E6  F083         	movff	printf@tmpval+3,___llmod@dividend+3
  5637  0007C2  0E0A               	movlw	10
  5638  0007C4  0100               	movlb	0	; () banked
  5639  0007C6  6F84               	movwf	___llmod@divisor& (0+255),b
  5640  0007C8  0E00               	movlw	0
  5641  0007CA  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  5642  0007CC  0E00               	movlw	0
  5643  0007CE  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  5644  0007D0  0E00               	movlw	0
  5645  0007D2  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  5646  0007D4  EC07  F019         	call	___llmod	;wreg free
  5647  0007D8  C080  F0E3         	movff	?___llmod,printf@tmpval
  5648  0007DC  C081  F0E4         	movff	?___llmod+1,printf@tmpval+1
  5649  0007E0  C082  F0E5         	movff	?___llmod+2,printf@tmpval+2
  5650  0007E4  C083  F0E6         	movff	?___llmod+3,printf@tmpval+3
  5651                           
  5652                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5653  0007E8  0100               	movlb	0	; () banked
  5654  0007EA  51E3               	movf	printf@tmpval& (0+255),w,b
  5655  0007EC  0F30               	addlw	48
  5656  0007EE  EC0B  F01D         	call	_putch
  5657  0007F2                     l6379:
  5658  0007F2  0100               	movlb	0	; () banked
  5659  0007F4  07F6               	decf	printf@c& (0+255),f,b
  5660  0007F6  0100               	movlb	0	; () banked
  5661  0007F8  29F6               	incf	printf@c& (0+255),w,b
  5662  0007FA  B4D8               	btfsc	status,2,c
  5663  0007FC  D008               	goto	l6385
  5664  0007FE  D7B2               	goto	l6373
  5665  000800                     l6381:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;doprnt.c: 1208: (putch('0') );
  5669  000800  0E30               	movlw	48
  5670  000802  EC0B  F01D         	call	_putch
  5671                           
  5672                           ;doprnt.c: 1209: exp--;
  5673  000806  0100               	movlb	0	; () banked
  5674  000808  07E7               	decf	printf@exp& (0+255),f,b
  5675  00080A  A0D8               	btfss	status,0,c
  5676  00080C  07E8               	decf	(printf@exp+1)& (0+255),f,b
  5677  00080E                     l6385:
  5678                           
  5679                           ; BSR set to: 0
  5680  00080E  0100               	movlb	0	; () banked
  5681  000810  BFE8               	btfsc	(printf@exp+1)& (0+255),7,b
  5682  000812  D007               	goto	l6387
  5683  000814  0100               	movlb	0	; () banked
  5684  000816  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5685  000818  E1F3               	bnz	l6381
  5686  00081A  0100               	movlb	0	; () banked
  5687  00081C  05E7               	decf	printf@exp& (0+255),w,b
  5688  00081E  B0D8               	btfsc	status,0,c
  5689  000820  D7EF               	goto	l6381
  5690  000822                     l6387:
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;doprnt.c: 1210: }
  5694                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5695  000822  0100               	movlb	0	; () banked
  5696  000824  BFF5               	btfsc	(printf@prec+1)& (0+255),7,b
  5697  000826  D00C               	goto	l766
  5698  000828  0100               	movlb	0	; () banked
  5699  00082A  51F5               	movf	(printf@prec+1)& (0+255),w,b
  5700  00082C  E105               	bnz	u6670
  5701  00082E  0E09               	movlw	9
  5702  000830  0100               	movlb	0	; () banked
  5703  000832  5DF4               	subwf	printf@prec& (0+255),w,b
  5704  000834  A0D8               	btfss	status,0,c
  5705  000836  D004               	goto	l766
  5706  000838                     u6670:
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5710  000838  0E08               	movlw	8
  5711  00083A  0100               	movlb	0	; () banked
  5712  00083C  6FF6               	movwf	printf@c& (0+255),b
  5713  00083E  D002               	goto	l6391
  5714  000840                     l766:
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;doprnt.c: 1213: else
  5718                           ;doprnt.c: 1214: c = prec;
  5719  000840  C0F4  F0F6         	movff	printf@prec,printf@c
  5720  000844                     l6391:
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;doprnt.c: 1215: prec -= c;
  5724  000844  0100               	movlb	0	; () banked
  5725  000846  51F6               	movf	printf@c& (0+255),w,b
  5726  000848  0100               	movlb	0	; () banked
  5727  00084A  5FF4               	subwf	printf@prec& (0+255),f,b
  5728  00084C  0E00               	movlw	0
  5729  00084E  0100               	movlb	0	; () banked
  5730  000850  BFF6               	btfsc	printf@c& (0+255),7,b
  5731  000852  0EFF               	movlw	255
  5732  000854  0100               	movlb	0	; () banked
  5733  000856  5BF5               	subwfb	(printf@prec+1)& (0+255),f,b
  5734                           
  5735                           ; BSR set to: 0
  5736                           ;doprnt.c: 1219: if(c)
  5737  000858  0100               	movlb	0	; () banked
  5738  00085A  51F6               	movf	printf@c& (0+255),w,b
  5739  00085C  0100               	movlb	0	; () banked
  5740  00085E  B4D8               	btfsc	status,2,c
  5741  000860  D003               	goto	l6397
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;doprnt.c: 1221: (putch('.') );
  5745  000862  0E2E               	movlw	46
  5746  000864  EC0B  F01D         	call	_putch
  5747  000868                     l6397:
  5748                           
  5749                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5750  000868  0100               	movlb	0	; () banked
  5751  00086A  51F6               	movf	printf@c& (0+255),w,b
  5752  00086C  EC99  F009         	call	_scale
  5753  000870  C0A4  F0D9         	movff	?_scale,_printf$1352
  5754  000874  C0A5  F0DA         	movff	?_scale+1,_printf$1352+1
  5755  000878  C0A6  F0DB         	movff	?_scale+2,_printf$1352+2
  5756                           
  5757                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5758  00087C  C0E9  F098         	movff	printf@fval,___ftmul@f2
  5759  000880  C0EA  F099         	movff	printf@fval+1,___ftmul@f2+1
  5760  000884  C0EB  F09A         	movff	printf@fval+2,___ftmul@f2+2
  5761  000888  C0D9  F095         	movff	_printf$1352,___ftmul@f1
  5762  00088C  C0DA  F096         	movff	_printf$1352+1,___ftmul@f1+1
  5763  000890  C0DB  F097         	movff	_printf$1352+2,___ftmul@f1+2
  5764  000894  ECC6  F010         	call	___ftmul	;wreg free
  5765  000898  C095  F0BA         	movff	?___ftmul,___fttol@f1
  5766  00089C  C096  F0BB         	movff	?___ftmul+1,___fttol@f1+1
  5767  0008A0  C097  F0BC         	movff	?___ftmul+2,___fttol@f1+2
  5768  0008A4  ECC9  F012         	call	___fttol	;wreg free
  5769  0008A8  C0BA  F0EC         	movff	?___fttol,printf@val
  5770  0008AC  C0BB  F0ED         	movff	?___fttol+1,printf@val+1
  5771  0008B0  C0BC  F0EE         	movff	?___fttol+2,printf@val+2
  5772  0008B4  C0BD  F0EF         	movff	?___fttol+3,printf@val+3
  5773                           
  5774                           ;doprnt.c: 1228: while(c--) {
  5775  0008B8  D06E               	goto	l6407
  5776  0008BA                     l6401:
  5777                           
  5778                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5779  0008BA  C0EC  F027         	movff	printf@val,___lldiv@dividend
  5780  0008BE  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  5781  0008C2  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  5782  0008C6  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  5783  0008CA  0100               	movlb	0	; () banked
  5784  0008CC  51F6               	movf	printf@c& (0+255),w,b
  5785  0008CE  0D04               	mullw	4
  5786  0008D0  0E1D               	movlw	low _dpowers
  5787  0008D2  24F3               	addwf	prodl,w,c
  5788  0008D4  6EF6               	movwf	tblptrl,c
  5789  0008D6  0EFE               	movlw	high _dpowers
  5790  0008D8  20F4               	addwfc	prodh,w,c
  5791  0008DA  6EF7               	movwf	tblptrh,c
  5792  0008DC                     	if	0	;There are less than 3 active tblptr bytes
  5793  0008DC                     	endif
  5794  0008DC  0009               	tblrd		*+
  5795  0008DE  CFF5 F02B          	movff	tablat,___lldiv@divisor
  5796  0008E2  0009               	tblrd		*+
  5797  0008E4  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  5798  0008E8  0009               	tblrd		*+
  5799  0008EA  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  5800  0008EE  000A               	tblrd		*-
  5801  0008F0  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  5802  0008F4  ECDF  F019         	call	___lldiv	;wreg free
  5803  0008F8  C027  F0E3         	movff	?___lldiv,printf@tmpval
  5804  0008FC  C028  F0E4         	movff	?___lldiv+1,printf@tmpval+1
  5805  000900  C029  F0E5         	movff	?___lldiv+2,printf@tmpval+2
  5806  000904  C02A  F0E6         	movff	?___lldiv+3,printf@tmpval+3
  5807                           
  5808                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5809  000908  C0E3  F080         	movff	printf@tmpval,___llmod@dividend
  5810  00090C  C0E4  F081         	movff	printf@tmpval+1,___llmod@dividend+1
  5811  000910  C0E5  F082         	movff	printf@tmpval+2,___llmod@dividend+2
  5812  000914  C0E6  F083         	movff	printf@tmpval+3,___llmod@dividend+3
  5813  000918  0E0A               	movlw	10
  5814  00091A  0100               	movlb	0	; () banked
  5815  00091C  6F84               	movwf	___llmod@divisor& (0+255),b
  5816  00091E  0E00               	movlw	0
  5817  000920  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  5818  000922  0E00               	movlw	0
  5819  000924  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  5820  000926  0E00               	movlw	0
  5821  000928  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  5822  00092A  EC07  F019         	call	___llmod	;wreg free
  5823  00092E  C080  F0E3         	movff	?___llmod,printf@tmpval
  5824  000932  C081  F0E4         	movff	?___llmod+1,printf@tmpval+1
  5825  000936  C082  F0E5         	movff	?___llmod+2,printf@tmpval+2
  5826  00093A  C083  F0E6         	movff	?___llmod+3,printf@tmpval+3
  5827                           
  5828                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5829  00093E  0100               	movlb	0	; () banked
  5830  000940  51E3               	movf	printf@tmpval& (0+255),w,b
  5831  000942  0F30               	addlw	48
  5832  000944  EC0B  F01D         	call	_putch
  5833                           
  5834                           ;doprnt.c: 1232: val %= dpowers[c];
  5835  000948  C0EC  F080         	movff	printf@val,___llmod@dividend
  5836  00094C  C0ED  F081         	movff	printf@val+1,___llmod@dividend+1
  5837  000950  C0EE  F082         	movff	printf@val+2,___llmod@dividend+2
  5838  000954  C0EF  F083         	movff	printf@val+3,___llmod@dividend+3
  5839  000958  0100               	movlb	0	; () banked
  5840  00095A  51F6               	movf	printf@c& (0+255),w,b
  5841  00095C  0D04               	mullw	4
  5842  00095E  0E1D               	movlw	low _dpowers
  5843  000960  24F3               	addwf	prodl,w,c
  5844  000962  6EF6               	movwf	tblptrl,c
  5845  000964  0EFE               	movlw	high _dpowers
  5846  000966  20F4               	addwfc	prodh,w,c
  5847  000968  6EF7               	movwf	tblptrh,c
  5848  00096A                     	if	0	;There are less than 3 active tblptr bytes
  5849  00096A                     	endif
  5850  00096A  0009               	tblrd		*+
  5851  00096C  CFF5 F084          	movff	tablat,___llmod@divisor
  5852  000970  0009               	tblrd		*+
  5853  000972  CFF5 F085          	movff	tablat,___llmod@divisor+1
  5854  000976  0009               	tblrd		*+
  5855  000978  CFF5 F086          	movff	tablat,___llmod@divisor+2
  5856  00097C  000A               	tblrd		*-
  5857  00097E  CFF5 F087          	movff	tablat,___llmod@divisor+3
  5858  000982  EC07  F019         	call	___llmod	;wreg free
  5859  000986  C080  F0EC         	movff	?___llmod,printf@val
  5860  00098A  C081  F0ED         	movff	?___llmod+1,printf@val+1
  5861  00098E  C082  F0EE         	movff	?___llmod+2,printf@val+2
  5862  000992  C083  F0EF         	movff	?___llmod+3,printf@val+3
  5863  000996                     l6407:
  5864  000996  0100               	movlb	0	; () banked
  5865  000998  07F6               	decf	printf@c& (0+255),f,b
  5866  00099A  0100               	movlb	0	; () banked
  5867  00099C  29F6               	incf	printf@c& (0+255),w,b
  5868  00099E  B4D8               	btfsc	status,2,c
  5869  0009A0  D008               	goto	l6413
  5870  0009A2  D78B               	goto	l6401
  5871  0009A4                     l6409:
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;doprnt.c: 1236: (putch('0') );
  5875  0009A4  0E30               	movlw	48
  5876  0009A6  EC0B  F01D         	call	_putch
  5877                           
  5878                           ;doprnt.c: 1237: prec--;
  5879  0009AA  0100               	movlb	0	; () banked
  5880  0009AC  07F4               	decf	printf@prec& (0+255),f,b
  5881  0009AE  A0D8               	btfss	status,0,c
  5882  0009B0  07F5               	decf	(printf@prec+1)& (0+255),f,b
  5883  0009B2                     l6413:
  5884                           
  5885                           ; BSR set to: 0
  5886  0009B2  0100               	movlb	0	; () banked
  5887  0009B4  51F4               	movf	printf@prec& (0+255),w,b
  5888  0009B6  0100               	movlb	0	; () banked
  5889  0009B8  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  5890  0009BA  B4D8               	btfsc	status,2,c
  5891  0009BC  D22D               	goto	l6541
  5892  0009BE  D7F2               	goto	l6409
  5893  0009C0                     l726:
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;doprnt.c: 1246: }
  5897                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5898  0009C0  0100               	movlb	0	; () banked
  5899  0009C2  BFF2               	btfsc	printf@flag& (0+255),7,b
  5900  0009C4  D034               	goto	l775
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;doprnt.c: 1253: {
  5904                           ;doprnt.c: 1255: if(flag & 0x10)
  5905  0009C6  0100               	movlb	0	; () banked
  5906  0009C8  A9F2               	btfss	printf@flag& (0+255),4,b
  5907  0009CA  D00E               	goto	l6421
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5911  0009CC  C0E1  FFD9         	movff	printf@ap,fsr2l
  5912  0009D0  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5913  0009D4  CFDE F0EC          	movff	postinc2,printf@val
  5914  0009D8  CFDE F0ED          	movff	postinc2,printf@val+1
  5915  0009DC  CFDE F0EE          	movff	postinc2,printf@val+2
  5916  0009E0  CFDE F0EF          	movff	postinc2,printf@val+3
  5917                           
  5918                           ; BSR set to: 0
  5919  0009E4  0E04               	movlw	4
  5920  0009E6  D00F               	goto	L2
  5921  0009E8                     l6421:
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;doprnt.c: 1257: else
  5925                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5926  0009E8  C0E1  FFD9         	movff	printf@ap,fsr2l
  5927  0009EC  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5928  0009F0  CFDE F0EC          	movff	postinc2,printf@val
  5929  0009F4  CFDD F0ED          	movff	postdec2,printf@val+1
  5930  0009F8  0100               	movlb	0	; () banked
  5931  0009FA  0E00               	movlw	0
  5932  0009FC  BFED               	btfsc	(printf@val+1)& (0+255),7,b
  5933  0009FE  0EFF               	movlw	-1
  5934  000A00  6FEE               	movwf	(printf@val+2)& (0+255),b
  5935  000A02  6FEF               	movwf	(printf@val+3)& (0+255),b
  5936                           
  5937                           ; BSR set to: 0
  5938  000A04  0E02               	movlw	2
  5939  000A06                     L2:
  5940  000A06  0100               	movlb	0	; () banked
  5941  000A08  27E1               	addwf	printf@ap& (0+255),f,b
  5942  000A0A  0E00               	movlw	0
  5943  000A0C  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;doprnt.c: 1261: if((long)val < 0) {
  5947                           
  5948                           ; BSR set to: 0
  5949  000A0E  0100               	movlb	0	; () banked
  5950  000A10  AFEF               	btfss	(printf@val+3)& (0+255),7,b
  5951  000A12  D032               	goto	l6439
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;doprnt.c: 1262: flag |= 0x03;
  5955  000A14  0E03               	movlw	3
  5956  000A16  0100               	movlb	0	; () banked
  5957  000A18  13F2               	iorwf	printf@flag& (0+255),f,b
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;doprnt.c: 1263: val = -val;
  5961  000A1A  0100               	movlb	0	; () banked
  5962  000A1C  1FEF               	comf	(printf@val+3)& (0+255),f,b
  5963  000A1E  1FEE               	comf	(printf@val+2)& (0+255),f,b
  5964  000A20  1FED               	comf	(printf@val+1)& (0+255),f,b
  5965  000A22  6DEC               	negf	printf@val& (0+255),b
  5966  000A24  0E00               	movlw	0
  5967  000A26  23ED               	addwfc	(printf@val+1)& (0+255),f,b
  5968  000A28  23EE               	addwfc	(printf@val+2)& (0+255),f,b
  5969  000A2A  23EF               	addwfc	(printf@val+3)& (0+255),f,b
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;doprnt.c: 1264: }
  5973                           ;doprnt.c: 1266: }
  5974  000A2C  D025               	goto	l6439
  5975  000A2E                     l775:
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;doprnt.c: 1268: else
  5979                           ;doprnt.c: 1273: {
  5980                           ;doprnt.c: 1281: if(flag & 0x10)
  5981  000A2E  0100               	movlb	0	; () banked
  5982  000A30  A9F2               	btfss	printf@flag& (0+255),4,b
  5983  000A32  D00E               	goto	l6435
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5987  000A34  C0E1  FFD9         	movff	printf@ap,fsr2l
  5988  000A38  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5989  000A3C  CFDE F0EC          	movff	postinc2,printf@val
  5990  000A40  CFDE F0ED          	movff	postinc2,printf@val+1
  5991  000A44  CFDE F0EE          	movff	postinc2,printf@val+2
  5992  000A48  CFDE F0EF          	movff	postinc2,printf@val+3
  5993                           
  5994                           ; BSR set to: 0
  5995  000A4C  0E04               	movlw	4
  5996  000A4E  D010               	goto	L3
  5997  000A50                     l6435:
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;doprnt.c: 1283: else
  6001                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6002  000A50  C0E1  FFD9         	movff	printf@ap,fsr2l
  6003  000A54  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  6004  000A58  CFDE F0D3          	movff	postinc2,??_printf
  6005  000A5C  CFDD F0D4          	movff	postdec2,??_printf+1
  6006  000A60  C0D3  F0EC         	movff	??_printf,printf@val
  6007  000A64  C0D4  F0ED         	movff	??_printf+1,printf@val+1
  6008  000A68  0100               	movlb	0	; () banked
  6009  000A6A  6BEE               	clrf	(printf@val+2)& (0+255),b
  6010  000A6C  6BEF               	clrf	(printf@val+3)& (0+255),b
  6011                           
  6012                           ; BSR set to: 0
  6013  000A6E  0E02               	movlw	2
  6014  000A70                     L3:
  6015  000A70  0100               	movlb	0	; () banked
  6016  000A72  27E1               	addwf	printf@ap& (0+255),f,b
  6017  000A74  0E00               	movlw	0
  6018  000A76  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  6019  000A78                     l6439:
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;doprnt.c: 1287: }
  6023                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6024  000A78  0100               	movlb	0	; () banked
  6025  000A7A  51F4               	movf	printf@prec& (0+255),w,b
  6026  000A7C  0100               	movlb	0	; () banked
  6027  000A7E  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  6028  000A80  A4D8               	btfss	status,2,c
  6029  000A82  D05A               	goto	l6475
  6030                           
  6031                           ; BSR set to: 0
  6032  000A84  0100               	movlb	0	; () banked
  6033  000A86  51EC               	movf	printf@val& (0+255),w,b
  6034  000A88  0100               	movlb	0	; () banked
  6035  000A8A  11ED               	iorwf	(printf@val+1)& (0+255),w,b
  6036  000A8C  0100               	movlb	0	; () banked
  6037  000A8E  11EE               	iorwf	(printf@val+2)& (0+255),w,b
  6038  000A90  0100               	movlb	0	; () banked
  6039  000A92  11EF               	iorwf	(printf@val+3)& (0+255),w,b
  6040  000A94  A4D8               	btfss	status,2,c
  6041  000A96  D050               	goto	l6475
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;doprnt.c: 1291: prec++;
  6045  000A98  0100               	movlb	0	; () banked
  6046  000A9A  4BF4               	infsnz	printf@prec& (0+255),f,b
  6047  000A9C  2BF5               	incf	(printf@prec+1)& (0+255),f,b
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6051  000A9E  D04C               	goto	l6475
  6052  000AA0                     l6445:
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6056  000AA0  0E01               	movlw	1
  6057  000AA2  0100               	movlb	0	; () banked
  6058  000AA4  6FF6               	movwf	printf@c& (0+255),b
  6059  000AA6                     l6447:
  6060                           
  6061                           ; BSR set to: 0
  6062  000AA6  0E0A               	movlw	10
  6063  000AA8  0100               	movlb	0	; () banked
  6064  000AAA  19F6               	xorwf	printf@c& (0+255),w,b
  6065  000AAC  B4D8               	btfsc	status,2,c
  6066  000AAE  D04D               	goto	l6477
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;doprnt.c: 1306: if(val < dpowers[c])
  6070                           
  6071                           ; BSR set to: 0
  6072                           
  6073                           ; BSR set to: 0
  6074  000AB0  0100               	movlb	0	; () banked
  6075  000AB2  51F6               	movf	printf@c& (0+255),w,b
  6076  000AB4  0D04               	mullw	4
  6077  000AB6  0E1D               	movlw	low _dpowers
  6078  000AB8  24F3               	addwf	prodl,w,c
  6079  000ABA  6EF6               	movwf	tblptrl,c
  6080  000ABC  0EFE               	movlw	high _dpowers
  6081  000ABE  20F4               	addwfc	prodh,w,c
  6082  000AC0  6EF7               	movwf	tblptrh,c
  6083  000AC2                     	if	0	;There are less than 3 active tblptr bytes
  6084  000AC2                     	endif
  6085  000AC2  0009               	tblrd		*+
  6086  000AC4  50F5               	movf	tablat,w,c
  6087  000AC6  0100               	movlb	0	; () banked
  6088  000AC8  5DEC               	subwf	printf@val& (0+255),w,b
  6089  000ACA  0009               	tblrd		*+
  6090  000ACC  50F5               	movf	tablat,w,c
  6091  000ACE  0100               	movlb	0	; () banked
  6092  000AD0  59ED               	subwfb	(printf@val+1)& (0+255),w,b
  6093  000AD2  0009               	tblrd		*+
  6094  000AD4  50F5               	movf	tablat,w,c
  6095  000AD6  0100               	movlb	0	; () banked
  6096  000AD8  59EE               	subwfb	(printf@val+2)& (0+255),w,b
  6097  000ADA  0009               	tblrd		*+
  6098  000ADC  50F5               	movf	tablat,w,c
  6099  000ADE  0100               	movlb	0	; () banked
  6100  000AE0  59EF               	subwfb	(printf@val+3)& (0+255),w,b
  6101  000AE2  A0D8               	btfss	status,0,c
  6102  000AE4  D032               	goto	l6477
  6103                           
  6104                           ; BSR set to: 0
  6105                           
  6106                           ; BSR set to: 0
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;doprnt.c: 1307: break;
  6110  000AE6  0100               	movlb	0	; () banked
  6111  000AE8  2BF6               	incf	printf@c& (0+255),f,b
  6112  000AEA  D7DD               	goto	l6447
  6113  000AEC                     l6459:
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6117  000AEC  0E01               	movlw	1
  6118  000AEE  0100               	movlb	0	; () banked
  6119  000AF0  6FF6               	movwf	printf@c& (0+255),b
  6120  000AF2                     l6461:
  6121                           
  6122                           ; BSR set to: 0
  6123  000AF2  0E08               	movlw	8
  6124  000AF4  0100               	movlb	0	; () banked
  6125  000AF6  19F6               	xorwf	printf@c& (0+255),w,b
  6126  000AF8  B4D8               	btfsc	status,2,c
  6127  000AFA  D027               	goto	l6477
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6131                           
  6132                           ; BSR set to: 0
  6133                           
  6134                           ; BSR set to: 0
  6135  000AFC  0100               	movlb	0	; () banked
  6136  000AFE  51F6               	movf	printf@c& (0+255),w,b
  6137  000B00  0D04               	mullw	4
  6138  000B02  0E93               	movlw	low _hexpowers
  6139  000B04  24F3               	addwf	prodl,w,c
  6140  000B06  6EF6               	movwf	tblptrl,c
  6141  000B08  0EFE               	movlw	high _hexpowers
  6142  000B0A  20F4               	addwfc	prodh,w,c
  6143  000B0C  6EF7               	movwf	tblptrh,c
  6144  000B0E                     	if	0	;There are less than 3 active tblptr bytes
  6145  000B0E                     	endif
  6146  000B0E  0009               	tblrd		*+
  6147  000B10  50F5               	movf	tablat,w,c
  6148  000B12  0100               	movlb	0	; () banked
  6149  000B14  5DEC               	subwf	printf@val& (0+255),w,b
  6150  000B16  0009               	tblrd		*+
  6151  000B18  50F5               	movf	tablat,w,c
  6152  000B1A  0100               	movlb	0	; () banked
  6153  000B1C  59ED               	subwfb	(printf@val+1)& (0+255),w,b
  6154  000B1E  0009               	tblrd		*+
  6155  000B20  50F5               	movf	tablat,w,c
  6156  000B22  0100               	movlb	0	; () banked
  6157  000B24  59EE               	subwfb	(printf@val+2)& (0+255),w,b
  6158  000B26  0009               	tblrd		*+
  6159  000B28  50F5               	movf	tablat,w,c
  6160  000B2A  0100               	movlb	0	; () banked
  6161  000B2C  59EF               	subwfb	(printf@val+3)& (0+255),w,b
  6162  000B2E  A0D8               	btfss	status,0,c
  6163  000B30  D00C               	goto	l6477
  6164                           
  6165                           ; BSR set to: 0
  6166                           
  6167                           ; BSR set to: 0
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;doprnt.c: 1318: break;
  6171  000B32  0100               	movlb	0	; () banked
  6172  000B34  2BF6               	incf	printf@c& (0+255),f,b
  6173  000B36  D7DD               	goto	l6461
  6174  000B38                     l6475:
  6175                           
  6176                           ; BSR set to: 0
  6177  000B38  0100               	movlb	0	; () banked
  6178  000B3A  51F2               	movf	printf@flag& (0+255),w,b
  6179  000B3C  0B80               	andlw	128
  6180                           
  6181                           ; Switch size 1, requested type "space"
  6182                           ; Number of cases is 2, Range of values is 0 to 128
  6183                           ; switch strategies available:
  6184                           ; Name         Instructions Cycles
  6185                           ; simple_byte            7     4 (average)
  6186                           ;	Chosen strategy is simple_byte
  6187  000B3E  0A00               	xorlw	0	; case 0
  6188  000B40  B4D8               	btfsc	status,2,c
  6189  000B42  D7AE               	goto	l6445
  6190  000B44  0A80               	xorlw	128	; case 128
  6191  000B46  B4D8               	btfsc	status,2,c
  6192  000B48  D7D1               	goto	l6459
  6193  000B4A                     l6477:
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;doprnt.c: 1339: if(c < prec)
  6197  000B4A  0E80               	movlw	128
  6198  000B4C  0100               	movlb	0	; () banked
  6199  000B4E  BFF6               	btfsc	printf@c& (0+255),7,b
  6200  000B50  0E7F               	movlw	127
  6201  000B52  0100               	movlb	0	; () banked
  6202  000B54  6FD3               	movwf	??_printf& (0+255),b
  6203  000B56  0100               	movlb	0	; () banked
  6204  000B58  51F4               	movf	printf@prec& (0+255),w,b
  6205  000B5A  0100               	movlb	0	; () banked
  6206  000B5C  5DF6               	subwf	printf@c& (0+255),w,b
  6207  000B5E  0100               	movlb	0	; () banked
  6208  000B60  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6209  000B62  0A80               	xorlw	128
  6210  000B64  0100               	movlb	0	; () banked
  6211  000B66  59D3               	subwfb	??_printf& (0+255),w,b
  6212  000B68  B0D8               	btfsc	status,0,c
  6213  000B6A  D003               	goto	l6481
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;doprnt.c: 1340: c = prec;
  6217  000B6C  C0F4  F0F6         	movff	printf@prec,printf@c
  6218  000B70  D018               	goto	l6485
  6219  000B72                     l6481:
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;doprnt.c: 1341: else if(prec < c)
  6223  000B72  0100               	movlb	0	; () banked
  6224  000B74  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6225  000B76  0A80               	xorlw	128
  6226  000B78  0100               	movlb	0	; () banked
  6227  000B7A  6FD3               	movwf	??_printf& (0+255),b
  6228  000B7C  0100               	movlb	0	; () banked
  6229  000B7E  51F6               	movf	printf@c& (0+255),w,b
  6230  000B80  0100               	movlb	0	; () banked
  6231  000B82  5DF4               	subwf	printf@prec& (0+255),w,b
  6232  000B84  0E80               	movlw	128
  6233  000B86  0100               	movlb	0	; () banked
  6234  000B88  BFF6               	btfsc	printf@c& (0+255),7,b
  6235  000B8A  0E7F               	movlw	127
  6236  000B8C  0100               	movlb	0	; () banked
  6237  000B8E  59D3               	subwfb	??_printf& (0+255),w,b
  6238  000B90  B0D8               	btfsc	status,0,c
  6239  000B92  D007               	goto	l6485
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;doprnt.c: 1342: prec = c;
  6243  000B94  0100               	movlb	0	; () banked
  6244  000B96  51F6               	movf	printf@c& (0+255),w,b
  6245  000B98  0100               	movlb	0	; () banked
  6246  000B9A  6FF4               	movwf	printf@prec& (0+255),b
  6247  000B9C  6BF5               	clrf	(printf@prec+1)& (0+255),b
  6248  000B9E  BFF4               	btfsc	printf@prec& (0+255),7,b
  6249  000BA0  07F5               	decf	(printf@prec+1)& (0+255),f,b
  6250  000BA2                     l6485:
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6254  000BA2  0100               	movlb	0	; () banked
  6255  000BA4  51F0               	movf	printf@width& (0+255),w,b
  6256  000BA6  0100               	movlb	0	; () banked
  6257  000BA8  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6258  000BAA  B4D8               	btfsc	status,2,c
  6259  000BAC  D014               	goto	l6491
  6260                           
  6261                           ; BSR set to: 0
  6262  000BAE  0E03               	movlw	3
  6263  000BB0  0100               	movlb	0	; () banked
  6264  000BB2  15F2               	andwf	printf@flag& (0+255),w,b
  6265  000BB4  0100               	movlb	0	; () banked
  6266  000BB6  6FD3               	movwf	??_printf& (0+255),b
  6267  000BB8  0E00               	movlw	0
  6268  000BBA  0100               	movlb	0	; () banked
  6269  000BBC  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  6270  000BBE  0100               	movlb	0	; () banked
  6271  000BC0  6FD4               	movwf	(??_printf+1)& (0+255),b
  6272  000BC2  0100               	movlb	0	; () banked
  6273  000BC4  51D3               	movf	??_printf& (0+255),w,b
  6274  000BC6  0100               	movlb	0	; () banked
  6275  000BC8  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  6276  000BCA  B4D8               	btfsc	status,2,c
  6277  000BCC  D004               	goto	l6491
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;doprnt.c: 1346: width--;
  6281  000BCE  0100               	movlb	0	; () banked
  6282  000BD0  07F0               	decf	printf@width& (0+255),f,b
  6283  000BD2  A0D8               	btfss	status,0,c
  6284  000BD4  07F1               	decf	(printf@width+1)& (0+255),f,b
  6285  000BD6                     l6491:
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6289  000BD6  0100               	movlb	0	; () banked
  6290  000BD8  ADF3               	btfss	(printf@flag+1)& (0+255),6,b
  6291  000BDA  D01E               	goto	l6499
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;doprnt.c: 1349: if(width > prec)
  6295  000BDC  0100               	movlb	0	; () banked
  6296  000BDE  51F0               	movf	printf@width& (0+255),w,b
  6297  000BE0  0100               	movlb	0	; () banked
  6298  000BE2  5DF4               	subwf	printf@prec& (0+255),w,b
  6299  000BE4  0100               	movlb	0	; () banked
  6300  000BE6  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6301  000BE8  0A80               	xorlw	128
  6302  000BEA  0100               	movlb	0	; () banked
  6303  000BEC  6FD3               	movwf	??_printf& (0+255),b
  6304  000BEE  0100               	movlb	0	; () banked
  6305  000BF0  51F1               	movf	(printf@width+1)& (0+255),w,b
  6306  000BF2  0A80               	xorlw	128
  6307  000BF4  0100               	movlb	0	; () banked
  6308  000BF6  59D3               	subwfb	??_printf& (0+255),w,b
  6309  000BF8  B0D8               	btfsc	status,0,c
  6310  000BFA  D009               	goto	l6497
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;doprnt.c: 1350: width -= prec;
  6314  000BFC  0100               	movlb	0	; () banked
  6315  000BFE  51F4               	movf	printf@prec& (0+255),w,b
  6316  000C00  0100               	movlb	0	; () banked
  6317  000C02  5FF0               	subwf	printf@width& (0+255),f,b
  6318  000C04  0100               	movlb	0	; () banked
  6319  000C06  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6320  000C08  0100               	movlb	0	; () banked
  6321  000C0A  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  6322  000C0C  D005               	goto	l6499
  6323  000C0E                     l6497:
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;doprnt.c: 1351: else
  6327                           ;doprnt.c: 1352: width = 0;
  6328  000C0E  0E00               	movlw	0
  6329  000C10  0100               	movlb	0	; () banked
  6330  000C12  6FF1               	movwf	(printf@width+1)& (0+255),b
  6331  000C14  0E00               	movlw	0
  6332  000C16  6FF0               	movwf	printf@width& (0+255),b
  6333  000C18                     l6499:
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;doprnt.c: 1353: }
  6337                           ;doprnt.c: 1381: if(width > c)
  6338  000C18  0E80               	movlw	128
  6339  000C1A  0100               	movlb	0	; () banked
  6340  000C1C  BFF6               	btfsc	printf@c& (0+255),7,b
  6341  000C1E  0E7F               	movlw	127
  6342  000C20  0100               	movlb	0	; () banked
  6343  000C22  6FD3               	movwf	??_printf& (0+255),b
  6344  000C24  0100               	movlb	0	; () banked
  6345  000C26  51F0               	movf	printf@width& (0+255),w,b
  6346  000C28  0100               	movlb	0	; () banked
  6347  000C2A  5DF6               	subwf	printf@c& (0+255),w,b
  6348  000C2C  0100               	movlb	0	; () banked
  6349  000C2E  51F1               	movf	(printf@width+1)& (0+255),w,b
  6350  000C30  0A80               	xorlw	128
  6351  000C32  0100               	movlb	0	; () banked
  6352  000C34  59D3               	subwfb	??_printf& (0+255),w,b
  6353  000C36  B0D8               	btfsc	status,0,c
  6354  000C38  D00B               	goto	l6503
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;doprnt.c: 1382: width -= c;
  6358  000C3A  0100               	movlb	0	; () banked
  6359  000C3C  51F6               	movf	printf@c& (0+255),w,b
  6360  000C3E  0100               	movlb	0	; () banked
  6361  000C40  5FF0               	subwf	printf@width& (0+255),f,b
  6362  000C42  0E00               	movlw	0
  6363  000C44  0100               	movlb	0	; () banked
  6364  000C46  BFF6               	btfsc	printf@c& (0+255),7,b
  6365  000C48  0EFF               	movlw	255
  6366  000C4A  0100               	movlb	0	; () banked
  6367  000C4C  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  6368  000C4E  D005               	goto	l6505
  6369  000C50                     l6503:
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;doprnt.c: 1383: else
  6373                           ;doprnt.c: 1384: width = 0;
  6374  000C50  0E00               	movlw	0
  6375  000C52  0100               	movlb	0	; () banked
  6376  000C54  6FF1               	movwf	(printf@width+1)& (0+255),b
  6377  000C56  0E00               	movlw	0
  6378  000C58  6FF0               	movwf	printf@width& (0+255),b
  6379  000C5A                     l6505:
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;doprnt.c: 1387: if(flag & 0x04) {
  6383  000C5A  0100               	movlb	0	; () banked
  6384  000C5C  A5F2               	btfss	printf@flag& (0+255),2,b
  6385  000C5E  D021               	goto	l6517
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;doprnt.c: 1392: if(flag & 0x03)
  6389  000C60  0E03               	movlw	3
  6390  000C62  0100               	movlb	0	; () banked
  6391  000C64  15F2               	andwf	printf@flag& (0+255),w,b
  6392  000C66  0100               	movlb	0	; () banked
  6393  000C68  6FD3               	movwf	??_printf& (0+255),b
  6394  000C6A  0E00               	movlw	0
  6395  000C6C  0100               	movlb	0	; () banked
  6396  000C6E  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  6397  000C70  0100               	movlb	0	; () banked
  6398  000C72  6FD4               	movwf	(??_printf+1)& (0+255),b
  6399  000C74  0100               	movlb	0	; () banked
  6400  000C76  51D3               	movf	??_printf& (0+255),w,b
  6401  000C78  0100               	movlb	0	; () banked
  6402  000C7A  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  6403  000C7C  B4D8               	btfsc	status,2,c
  6404  000C7E  D003               	goto	l6511
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;doprnt.c: 1393: (putch('-') );
  6408  000C80  0E2D               	movlw	45
  6409  000C82  EC0B  F01D         	call	_putch
  6410  000C86                     l6511:
  6411                           
  6412                           ;doprnt.c: 1415: if(width)
  6413  000C86  0100               	movlb	0	; () banked
  6414  000C88  51F0               	movf	printf@width& (0+255),w,b
  6415  000C8A  0100               	movlb	0	; () banked
  6416  000C8C  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6417  000C8E  B4D8               	btfsc	status,2,c
  6418  000C90  D0B8               	goto	l6539
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;doprnt.c: 1417: (putch('0') );
  6422                           
  6423                           ; BSR set to: 0
  6424                           
  6425                           ;doprnt.c: 1416: do
  6426  000C92  0E30               	movlw	48
  6427  000C94  EC0B  F01D         	call	_putch
  6428                           
  6429                           ;doprnt.c: 1418: while(--width);
  6430  000C98  0100               	movlb	0	; () banked
  6431  000C9A  07F0               	decf	printf@width& (0+255),f,b
  6432  000C9C  A0D8               	btfss	status,0,c
  6433  000C9E  07F1               	decf	(printf@width+1)& (0+255),f,b
  6434  000CA0  D7F2               	goto	l6511
  6435  000CA2                     l6517:
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;doprnt.c: 1422: {
  6439                           ;doprnt.c: 1424: if(width
  6440                           ;doprnt.c: 1428: )
  6441  000CA2  0100               	movlb	0	; () banked
  6442  000CA4  51F0               	movf	printf@width& (0+255),w,b
  6443  000CA6  0100               	movlb	0	; () banked
  6444  000CA8  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6445  000CAA  B4D8               	btfsc	status,2,c
  6446  000CAC  D00D               	goto	l6523
  6447  000CAE                     l6519:
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;doprnt.c: 1430: (putch(' ') );
  6451  000CAE  0E20               	movlw	32
  6452  000CB0  EC0B  F01D         	call	_putch
  6453                           
  6454                           ;doprnt.c: 1431: while(--width);
  6455  000CB4  0100               	movlb	0	; () banked
  6456  000CB6  07F0               	decf	printf@width& (0+255),f,b
  6457  000CB8  A0D8               	btfss	status,0,c
  6458  000CBA  07F1               	decf	(printf@width+1)& (0+255),f,b
  6459  000CBC  0100               	movlb	0	; () banked
  6460  000CBE  51F0               	movf	printf@width& (0+255),w,b
  6461  000CC0  0100               	movlb	0	; () banked
  6462  000CC2  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6463  000CC4  A4D8               	btfss	status,2,c
  6464  000CC6  D7F3               	goto	l6519
  6465  000CC8                     l6523:
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;doprnt.c: 1438: if(flag & 0x03)
  6469  000CC8  0E03               	movlw	3
  6470  000CCA  0100               	movlb	0	; () banked
  6471  000CCC  15F2               	andwf	printf@flag& (0+255),w,b
  6472  000CCE  0100               	movlb	0	; () banked
  6473  000CD0  6FD3               	movwf	??_printf& (0+255),b
  6474  000CD2  0E00               	movlw	0
  6475  000CD4  0100               	movlb	0	; () banked
  6476  000CD6  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  6477  000CD8  0100               	movlb	0	; () banked
  6478  000CDA  6FD4               	movwf	(??_printf+1)& (0+255),b
  6479  000CDC  0100               	movlb	0	; () banked
  6480  000CDE  51D3               	movf	??_printf& (0+255),w,b
  6481  000CE0  0100               	movlb	0	; () banked
  6482  000CE2  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  6483  000CE4  B4D8               	btfsc	status,2,c
  6484  000CE6  D08D               	goto	l6539
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;doprnt.c: 1439: (putch('-') );
  6488  000CE8  0E2D               	movlw	45
  6489  000CEA  EC0B  F01D         	call	_putch
  6490                           
  6491                           ;doprnt.c: 1469: }
  6492                           ;doprnt.c: 1474: while(prec--) {
  6493  000CEE  D089               	goto	l6539
  6494  000CF0                     l6527:
  6495                           
  6496                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6497  000CF0  C0F4  F0D3         	movff	printf@prec,??_printf
  6498  000CF4  C0F5  F0D4         	movff	printf@prec+1,??_printf+1
  6499  000CF8  0100               	movlb	0	; () banked
  6500  000CFA  90D8               	bcf	status,0,c
  6501  000CFC  37D3               	rlcf	??_printf& (0+255),f,b
  6502  000CFE  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6503  000D00  0100               	movlb	0	; () banked
  6504  000D02  90D8               	bcf	status,0,c
  6505  000D04  37D3               	rlcf	??_printf& (0+255),f,b
  6506  000D06  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6507  000D08  0E1D               	movlw	low _dpowers
  6508  000D0A  0100               	movlb	0	; () banked
  6509  000D0C  25D3               	addwf	??_printf& (0+255),w,b
  6510  000D0E  6EF6               	movwf	tblptrl,c
  6511  000D10  0EFE               	movlw	high _dpowers
  6512  000D12  21D4               	addwfc	(??_printf+1)& (0+255),w,b
  6513  000D14  6EF7               	movwf	tblptrh,c
  6514  000D16                     	if	0	;There are less than 3 active tblptr bytes
  6515  000D16                     	endif
  6516  000D16  0009               	tblrd		*+
  6517  000D18  CFF5 F02B          	movff	tablat,___lldiv@divisor
  6518  000D1C  0009               	tblrd		*+
  6519  000D1E  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  6520  000D22  0009               	tblrd		*+
  6521  000D24  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  6522  000D28  000A               	tblrd		*-
  6523  000D2A  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  6524  000D2E  C0EC  F027         	movff	printf@val,___lldiv@dividend
  6525  000D32  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  6526  000D36  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  6527  000D3A  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  6528  000D3E  ECDF  F019         	call	___lldiv	;wreg free
  6529  000D42  C027  F080         	movff	?___lldiv,___llmod@dividend
  6530  000D46  C028  F081         	movff	?___lldiv+1,___llmod@dividend+1
  6531  000D4A  C029  F082         	movff	?___lldiv+2,___llmod@dividend+2
  6532  000D4E  C02A  F083         	movff	?___lldiv+3,___llmod@dividend+3
  6533  000D52  0E0A               	movlw	10
  6534  000D54  0100               	movlb	0	; () banked
  6535  000D56  6F84               	movwf	___llmod@divisor& (0+255),b
  6536  000D58  0E00               	movlw	0
  6537  000D5A  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  6538  000D5C  0E00               	movlw	0
  6539  000D5E  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  6540  000D60  0E00               	movlw	0
  6541  000D62  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  6542  000D64  EC07  F019         	call	___llmod	;wreg free
  6543  000D68  0100               	movlb	0	; () banked
  6544  000D6A  5180               	movf	?___llmod& (0+255),w,b
  6545  000D6C  0F30               	addlw	48
  6546  000D6E  0100               	movlb	0	; () banked
  6547  000D70  6FF6               	movwf	printf@c& (0+255),b
  6548                           
  6549                           ;doprnt.c: 1491: break;
  6550  000D72  D043               	goto	l6537
  6551  000D74                     l6529:
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;doprnt.c: 1499: {
  6555                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6556  000D74  C0EC  F027         	movff	printf@val,___lldiv@dividend
  6557  000D78  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  6558  000D7C  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  6559  000D80  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  6560  000D84  C0F4  F0D3         	movff	printf@prec,??_printf
  6561  000D88  C0F5  F0D4         	movff	printf@prec+1,??_printf+1
  6562  000D8C  0100               	movlb	0	; () banked
  6563  000D8E  90D8               	bcf	status,0,c
  6564  000D90  37D3               	rlcf	??_printf& (0+255),f,b
  6565  000D92  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6566  000D94  0100               	movlb	0	; () banked
  6567  000D96  90D8               	bcf	status,0,c
  6568  000D98  37D3               	rlcf	??_printf& (0+255),f,b
  6569  000D9A  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6570  000D9C  0E93               	movlw	low _hexpowers
  6571  000D9E  0100               	movlb	0	; () banked
  6572  000DA0  25D3               	addwf	??_printf& (0+255),w,b
  6573  000DA2  6EF6               	movwf	tblptrl,c
  6574  000DA4  0EFE               	movlw	high _hexpowers
  6575  000DA6  21D4               	addwfc	(??_printf+1)& (0+255),w,b
  6576  000DA8  6EF7               	movwf	tblptrh,c
  6577  000DAA                     	if	0	;There are less than 3 active tblptr bytes
  6578  000DAA                     	endif
  6579  000DAA  0009               	tblrd		*+
  6580  000DAC  CFF5 F02B          	movff	tablat,___lldiv@divisor
  6581  000DB0  0009               	tblrd		*+
  6582  000DB2  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  6583  000DB6  0009               	tblrd		*+
  6584  000DB8  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  6585  000DBC  000A               	tblrd		*-
  6586  000DBE  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  6587  000DC2  ECDF  F019         	call	___lldiv	;wreg free
  6588  000DC6  5027               	movf	?___lldiv,w,c
  6589  000DC8  0B0F               	andlw	15
  6590  000DCA  0100               	movlb	0	; () banked
  6591  000DCC  6FDC               	movwf	printf@idx& (0+255),b
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6595  000DCE  0100               	movlb	0	; () banked
  6596  000DD0  51DC               	movf	printf@idx& (0+255),w,b
  6597  000DD2  0D01               	mullw	1
  6598  000DD4  0E38               	movlw	low STR_19
  6599  000DD6  24F3               	addwf	prodl,w,c
  6600  000DD8  6EF6               	movwf	tblptrl,c
  6601  000DDA  0EFF               	movlw	high STR_19
  6602  000DDC  20F4               	addwfc	prodh,w,c
  6603  000DDE  6EF7               	movwf	tblptrh,c
  6604  000DE0                     	if	0	;There are less than 3 active tblptr bytes
  6605  000DE0                     	endif
  6606  000DE0  0008               	tblrd		*
  6607  000DE2  CFF5 F0F6          	movff	tablat,printf@c
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;doprnt.c: 1523: }
  6611                           
  6612                           ;doprnt.c: 1508: }
  6613                           ;doprnt.c: 1510: break;
  6614  000DE6  D009               	goto	l6537
  6615  000DE8                     l6535:
  6616  000DE8  0100               	movlb	0	; () banked
  6617  000DEA  51F2               	movf	printf@flag& (0+255),w,b
  6618  000DEC  0B80               	andlw	128
  6619                           
  6620                           ; Switch size 1, requested type "space"
  6621                           ; Number of cases is 2, Range of values is 0 to 128
  6622                           ; switch strategies available:
  6623                           ; Name         Instructions Cycles
  6624                           ; simple_byte            7     4 (average)
  6625                           ;	Chosen strategy is simple_byte
  6626  000DEE  0A00               	xorlw	0	; case 0
  6627  000DF0  B4D8               	btfsc	status,2,c
  6628  000DF2  D77E               	goto	l6527
  6629  000DF4  0A80               	xorlw	128	; case 128
  6630  000DF6  B4D8               	btfsc	status,2,c
  6631  000DF8  D7BD               	goto	l6529
  6632  000DFA                     l6537:
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;doprnt.c: 1524: (putch(c) );
  6636  000DFA  0100               	movlb	0	; () banked
  6637  000DFC  51F6               	movf	printf@c& (0+255),w,b
  6638  000DFE  EC0B  F01D         	call	_putch
  6639  000E02                     l6539:
  6640  000E02  0100               	movlb	0	; () banked
  6641  000E04  07F4               	decf	printf@prec& (0+255),f,b
  6642  000E06  A0D8               	btfss	status,0,c
  6643  000E08  07F5               	decf	(printf@prec+1)& (0+255),f,b
  6644  000E0A  0100               	movlb	0	; () banked
  6645  000E0C  29F4               	incf	printf@prec& (0+255),w,b
  6646  000E0E  E1EC               	bnz	l6535
  6647  000E10  0100               	movlb	0	; () banked
  6648  000E12  29F5               	incf	(printf@prec+1)& (0+255),w,b
  6649  000E14  A4D8               	btfss	status,2,c
  6650  000E16  D7E8               	goto	l6535
  6651  000E18                     l6541:
  6652  000E18  C0C9  FFF6         	movff	printf@f,tblptrl
  6653  000E1C  C0CA  FFF7         	movff	printf@f+1,tblptrh
  6654  000E20  0100               	movlb	0	; () banked
  6655  000E22  4BC9               	infsnz	printf@f& (0+255),f,b
  6656  000E24  2BCA               	incf	(printf@f+1)& (0+255),f,b
  6657  000E26                     	if	0	;tblptru may be non-zero
  6658  000E26                     	endif
  6659  000E26                     	if	0	;tblptru may be non-zero
  6660  000E26                     	endif
  6661  000E26  0008               	tblrd		*
  6662  000E28  CFF5 F0F6          	movff	tablat,printf@c
  6663  000E2C  0100               	movlb	0	; () banked
  6664  000E2E  51F6               	movf	printf@c& (0+255),w,b
  6665  000E30  B4D8               	btfsc	status,2,c
  6666  000E32  0012               	return	
  6667  000E34  EF11  F000         	goto	l6175
  6668  000E38                     __end_of_printf:
  6669                           	opt stack 0
  6670                           tblptru	equ	0xFF8
  6671                           tblptrh	equ	0xFF7
  6672                           tblptrl	equ	0xFF6
  6673                           tablat	equ	0xFF5
  6674                           prodh	equ	0xFF4
  6675                           prodl	equ	0xFF3
  6676                           postinc0	equ	0xFEE
  6677                           wreg	equ	0xFE8
  6678                           postdec1	equ	0xFE5
  6679                           fsr1l	equ	0xFE1
  6680                           indf2	equ	0xFDF
  6681                           postinc2	equ	0xFDE
  6682                           postdec2	equ	0xFDD
  6683                           fsr2h	equ	0xFDA
  6684                           fsr2l	equ	0xFD9
  6685                           status	equ	0xFD8
  6686                           
  6687 ;; *************** function _scale *****************
  6688 ;; Defined at:
  6689 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;  scl             1    wreg     char 
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;  scl             1   42[BANK0 ] char 
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  3   36[BANK0 ] char 
  6696 ;; Registers used:
  6697 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6703 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6704 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6706 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6707 ;;Total ram usage:        7 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:    5
  6710 ;; This function calls:
  6711 ;;		___awdiv
  6712 ;;		___awmod
  6713 ;;		___ftmul
  6714 ;;		___wmul
  6715 ;; This function is called by:
  6716 ;;		_printf
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           	psect	text14
  6721  001332                     __ptext14:
  6722                           	opt stack 0
  6723  001332                     _scale:
  6724                           	opt stack 23
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;incstack = 0
  6728                           ;scale@scl stored from wreg
  6729  001332  0100               	movlb	0	; () banked
  6730  001334  6FAA               	movwf	scale@scl& (0+255),b
  6731                           
  6732                           ;doprnt.c: 428: if(scl < 0) {
  6733  001336  0100               	movlb	0	; () banked
  6734  001338  AFAA               	btfss	scale@scl& (0+255),7,b
  6735  00133A  D119               	goto	l5827
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;doprnt.c: 429: scl = -scl;
  6739  00133C  0100               	movlb	0	; () banked
  6740  00133E  6DAA               	negf	scale@scl& (0+255),b
  6741                           
  6742                           ;doprnt.c: 430: if(scl>=110)
  6743  001340  0100               	movlb	0	; () banked
  6744  001342  51AA               	movf	scale@scl& (0+255),w,b
  6745  001344  0A80               	xorlw	128
  6746  001346  0F12               	addlw	-238
  6747  001348  A0D8               	btfss	status,0,c
  6748  00134A  D0A1               	goto	l5817
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6752  00134C  0E00               	movlw	0
  6753  00134E  0100               	movlb	0	; () banked
  6754  001350  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6755  001352  0E03               	movlw	3
  6756  001354  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6757  001356  0E00               	movlw	0
  6758  001358  6E30               	movwf	___awdiv@divisor+1,c
  6759  00135A  0E0A               	movlw	10
  6760  00135C  6E2F               	movwf	___awdiv@divisor,c
  6761  00135E  0E00               	movlw	0
  6762  001360  6E2A               	movwf	___awmod@divisor+1,c
  6763  001362  0E64               	movlw	100
  6764  001364  6E29               	movwf	___awmod@divisor,c
  6765  001366  0100               	movlb	0	; () banked
  6766  001368  51AA               	movf	scale@scl& (0+255),w,b
  6767  00136A  6E27               	movwf	___awmod@dividend,c
  6768  00136C  6A28               	clrf	___awmod@dividend+1,c
  6769  00136E  BE27               	btfsc	___awmod@dividend,7,c
  6770  001370  0628               	decf	___awmod@dividend+1,f,c
  6771  001372  EC20  F01A         	call	___awmod	;wreg free
  6772  001376  C027  F02D         	movff	?___awmod,___awdiv@dividend
  6773  00137A  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  6774  00137E  ECB9  F018         	call	___awdiv	;wreg free
  6775  001382  0E09               	movlw	9
  6776  001384  242D               	addwf	?___awdiv,w,c
  6777  001386  0100               	movlb	0	; () banked
  6778  001388  6F84               	movwf	___wmul@multiplier& (0+255),b
  6779  00138A  0E00               	movlw	0
  6780  00138C  202E               	addwfc	?___awdiv+1,w,c
  6781  00138E  0100               	movlb	0	; () banked
  6782  001390  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  6783  001392  EC57  F01C         	call	___wmul	;wreg free
  6784  001396  0E45               	movlw	low __npowers_
  6785  001398  0100               	movlb	0	; () banked
  6786  00139A  2584               	addwf	?___wmul& (0+255),w,b
  6787  00139C  6EF6               	movwf	tblptrl,c
  6788  00139E  0EFE               	movlw	high __npowers_
  6789  0013A0  0100               	movlb	0	; () banked
  6790  0013A2  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6791  0013A4  6EF7               	movwf	tblptrh,c
  6792  0013A6                     	if	0	;There are less than 3 active tblptr bytes
  6793  0013A6                     	endif
  6794  0013A6  0009               	tblrd		*+
  6795  0013A8  CFF5 F098          	movff	tablat,___ftmul@f2
  6796  0013AC  0009               	tblrd		*+
  6797  0013AE  CFF5 F099          	movff	tablat,___ftmul@f2+1
  6798  0013B2  000A               	tblrd		*-
  6799  0013B4  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  6800  0013B8  0E00               	movlw	0
  6801  0013BA  6E30               	movwf	___awdiv@divisor+1,c
  6802  0013BC  0E64               	movlw	100
  6803  0013BE  6E2F               	movwf	___awdiv@divisor,c
  6804  0013C0  0100               	movlb	0	; () banked
  6805  0013C2  51AA               	movf	scale@scl& (0+255),w,b
  6806  0013C4  6E2D               	movwf	___awdiv@dividend,c
  6807  0013C6  6A2E               	clrf	___awdiv@dividend+1,c
  6808  0013C8  BE2D               	btfsc	___awdiv@dividend,7,c
  6809  0013CA  062E               	decf	___awdiv@dividend+1,f,c
  6810  0013CC  ECB9  F018         	call	___awdiv	;wreg free
  6811  0013D0  0E12               	movlw	18
  6812  0013D2  242D               	addwf	?___awdiv,w,c
  6813  0013D4  0100               	movlb	0	; () banked
  6814  0013D6  6F84               	movwf	___wmul@multiplier& (0+255),b
  6815  0013D8  0E00               	movlw	0
  6816  0013DA  202E               	addwfc	?___awdiv+1,w,c
  6817  0013DC  0100               	movlb	0	; () banked
  6818  0013DE  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  6819  0013E0  0E00               	movlw	0
  6820  0013E2  0100               	movlb	0	; () banked
  6821  0013E4  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6822  0013E6  0E03               	movlw	3
  6823  0013E8  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6824  0013EA  EC57  F01C         	call	___wmul	;wreg free
  6825  0013EE  0E45               	movlw	low __npowers_
  6826  0013F0  0100               	movlb	0	; () banked
  6827  0013F2  2584               	addwf	?___wmul& (0+255),w,b
  6828  0013F4  6EF6               	movwf	tblptrl,c
  6829  0013F6  0EFE               	movlw	high __npowers_
  6830  0013F8  0100               	movlb	0	; () banked
  6831  0013FA  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6832  0013FC  6EF7               	movwf	tblptrh,c
  6833  0013FE                     	if	0	;There are less than 3 active tblptr bytes
  6834  0013FE                     	endif
  6835  0013FE  0009               	tblrd		*+
  6836  001400  CFF5 F095          	movff	tablat,___ftmul@f1
  6837  001404  0009               	tblrd		*+
  6838  001406  CFF5 F096          	movff	tablat,___ftmul@f1+1
  6839  00140A  000A               	tblrd		*-
  6840  00140C  CFF5 F097          	movff	tablat,___ftmul@f1+2
  6841  001410  ECC6  F010         	call	___ftmul	;wreg free
  6842  001414  C095  F0A7         	movff	?___ftmul,_scale$1351
  6843  001418  C096  F0A8         	movff	?___ftmul+1,_scale$1351+1
  6844  00141C  C097  F0A9         	movff	?___ftmul+2,_scale$1351+2
  6845                           
  6846                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6847  001420  C0A7  F095         	movff	_scale$1351,___ftmul@f1
  6848  001424  C0A8  F096         	movff	_scale$1351+1,___ftmul@f1+1
  6849  001428  C0A9  F097         	movff	_scale$1351+2,___ftmul@f1+2
  6850  00142C  0E00               	movlw	0
  6851  00142E  0100               	movlb	0	; () banked
  6852  001430  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6853  001432  0E03               	movlw	3
  6854  001434  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6855  001436  0E00               	movlw	0
  6856  001438  6E2A               	movwf	___awmod@divisor+1,c
  6857  00143A  0E0A               	movlw	10
  6858  00143C  6E29               	movwf	___awmod@divisor,c
  6859  00143E  0100               	movlb	0	; () banked
  6860  001440  51AA               	movf	scale@scl& (0+255),w,b
  6861  001442  6E27               	movwf	___awmod@dividend,c
  6862  001444  6A28               	clrf	___awmod@dividend+1,c
  6863  001446  BE27               	btfsc	___awmod@dividend,7,c
  6864  001448  0628               	decf	___awmod@dividend+1,f,c
  6865  00144A  EC20  F01A         	call	___awmod	;wreg free
  6866  00144E  C027  F084         	movff	?___awmod,___wmul@multiplier
  6867  001452  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  6868  001456  EC57  F01C         	call	___wmul	;wreg free
  6869  00145A  0E45               	movlw	low __npowers_
  6870  00145C  0100               	movlb	0	; () banked
  6871  00145E  2584               	addwf	?___wmul& (0+255),w,b
  6872  001460  6EF6               	movwf	tblptrl,c
  6873  001462  0EFE               	movlw	high __npowers_
  6874  001464  0100               	movlb	0	; () banked
  6875  001466  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6876  001468  6EF7               	movwf	tblptrh,c
  6877  00146A                     	if	0	;There are less than 3 active tblptr bytes
  6878  00146A                     	endif
  6879  00146A  0009               	tblrd		*+
  6880  00146C  CFF5 F098          	movff	tablat,___ftmul@f2
  6881  001470  0009               	tblrd		*+
  6882  001472  CFF5 F099          	movff	tablat,___ftmul@f2+1
  6883  001476  000A               	tblrd		*-
  6884  001478  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  6885  00147C  ECC6  F010         	call	___ftmul	;wreg free
  6886  001480  C095  F0A4         	movff	?___ftmul,?_scale
  6887  001484  C096  F0A5         	movff	?___ftmul+1,?_scale+1
  6888  001488  C097  F0A6         	movff	?___ftmul+2,?_scale+2
  6889  00148C  0012               	return	
  6890  00148E                     l5817:
  6891                           
  6892                           ;doprnt.c: 432: else if(scl > 10)
  6893  00148E  0100               	movlb	0	; () banked
  6894  001490  51AA               	movf	scale@scl& (0+255),w,b
  6895  001492  0A80               	xorlw	128
  6896  001494  0F75               	addlw	-139
  6897  001496  A0D8               	btfss	status,0,c
  6898  001498  D057               	goto	l5823
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6902  00149A  0E00               	movlw	0
  6903  00149C  6E30               	movwf	___awdiv@divisor+1,c
  6904  00149E  0E0A               	movlw	10
  6905  0014A0  6E2F               	movwf	___awdiv@divisor,c
  6906  0014A2  0100               	movlb	0	; () banked
  6907  0014A4  51AA               	movf	scale@scl& (0+255),w,b
  6908  0014A6  6E2D               	movwf	___awdiv@dividend,c
  6909  0014A8  6A2E               	clrf	___awdiv@dividend+1,c
  6910  0014AA  BE2D               	btfsc	___awdiv@dividend,7,c
  6911  0014AC  062E               	decf	___awdiv@dividend+1,f,c
  6912  0014AE  ECB9  F018         	call	___awdiv	;wreg free
  6913  0014B2  0E09               	movlw	9
  6914  0014B4  242D               	addwf	?___awdiv,w,c
  6915  0014B6  0100               	movlb	0	; () banked
  6916  0014B8  6F84               	movwf	___wmul@multiplier& (0+255),b
  6917  0014BA  0E00               	movlw	0
  6918  0014BC  202E               	addwfc	?___awdiv+1,w,c
  6919  0014BE  0100               	movlb	0	; () banked
  6920  0014C0  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  6921  0014C2  0E00               	movlw	0
  6922  0014C4  0100               	movlb	0	; () banked
  6923  0014C6  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6924  0014C8  0E03               	movlw	3
  6925  0014CA  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6926  0014CC  EC57  F01C         	call	___wmul	;wreg free
  6927  0014D0  0E45               	movlw	low __npowers_
  6928  0014D2  0100               	movlb	0	; () banked
  6929  0014D4  2584               	addwf	?___wmul& (0+255),w,b
  6930  0014D6  6EF6               	movwf	tblptrl,c
  6931  0014D8  0EFE               	movlw	high __npowers_
  6932  0014DA  0100               	movlb	0	; () banked
  6933  0014DC  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6934  0014DE  6EF7               	movwf	tblptrh,c
  6935  0014E0                     	if	0	;There are less than 3 active tblptr bytes
  6936  0014E0                     	endif
  6937  0014E0  0009               	tblrd		*+
  6938  0014E2  CFF5 F095          	movff	tablat,___ftmul@f1
  6939  0014E6  0009               	tblrd		*+
  6940  0014E8  CFF5 F096          	movff	tablat,___ftmul@f1+1
  6941  0014EC  000A               	tblrd		*-
  6942  0014EE  CFF5 F097          	movff	tablat,___ftmul@f1+2
  6943  0014F2  0E00               	movlw	0
  6944  0014F4  0100               	movlb	0	; () banked
  6945  0014F6  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6946  0014F8  0E03               	movlw	3
  6947  0014FA  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6948  0014FC  0E00               	movlw	0
  6949  0014FE  6E2A               	movwf	___awmod@divisor+1,c
  6950  001500  0E0A               	movlw	10
  6951  001502  6E29               	movwf	___awmod@divisor,c
  6952  001504  0100               	movlb	0	; () banked
  6953  001506  51AA               	movf	scale@scl& (0+255),w,b
  6954  001508  6E27               	movwf	___awmod@dividend,c
  6955  00150A  6A28               	clrf	___awmod@dividend+1,c
  6956  00150C  BE27               	btfsc	___awmod@dividend,7,c
  6957  00150E  0628               	decf	___awmod@dividend+1,f,c
  6958  001510  EC20  F01A         	call	___awmod	;wreg free
  6959  001514  C027  F084         	movff	?___awmod,___wmul@multiplier
  6960  001518  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  6961  00151C  EC57  F01C         	call	___wmul	;wreg free
  6962  001520  0E45               	movlw	low __npowers_
  6963  001522  0100               	movlb	0	; () banked
  6964  001524  2584               	addwf	?___wmul& (0+255),w,b
  6965  001526  6EF6               	movwf	tblptrl,c
  6966  001528  0EFE               	movlw	high __npowers_
  6967  00152A  0100               	movlb	0	; () banked
  6968  00152C  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6969  00152E  6EF7               	movwf	tblptrh,c
  6970  001530                     	if	0	;There are less than 3 active tblptr bytes
  6971  001530                     	endif
  6972  001530  0009               	tblrd		*+
  6973  001532  CFF5 F098          	movff	tablat,___ftmul@f2
  6974  001536  0009               	tblrd		*+
  6975  001538  CFF5 F099          	movff	tablat,___ftmul@f2+1
  6976  00153C  000A               	tblrd		*-
  6977  00153E  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  6978  001542  ECC6  F010         	call	___ftmul	;wreg free
  6979  001546  D79C               	goto	L4
  6980  001548                     l5823:
  6981                           
  6982                           ;doprnt.c: 434: return _npowers_[scl];
  6983  001548  0100               	movlb	0	; () banked
  6984  00154A  51AA               	movf	scale@scl& (0+255),w,b
  6985  00154C  0D03               	mullw	3
  6986  00154E  0E45               	movlw	low __npowers_
  6987  001550  24F3               	addwf	prodl,w,c
  6988  001552  6EF6               	movwf	tblptrl,c
  6989  001554  0EFE               	movlw	high __npowers_
  6990  001556  20F4               	addwfc	prodh,w,c
  6991  001558  6EF7               	movwf	tblptrh,c
  6992  00155A                     	if	0	;There are less than 3 active tblptr bytes
  6993  00155A                     	endif
  6994  00155A  0009               	tblrd		*+
  6995  00155C  CFF5 F0A4          	movff	tablat,?_scale
  6996  001560  0009               	tblrd		*+
  6997  001562  CFF5 F0A5          	movff	tablat,?_scale+1
  6998  001566  000A               	tblrd		*-
  6999  001568  CFF5 F0A6          	movff	tablat,?_scale+2
  7000                           
  7001                           ; BSR set to: 0
  7002  00156C  0012               	return	
  7003  00156E                     l5827:
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;doprnt.c: 435: }
  7007                           ;doprnt.c: 436: if(scl>=110)
  7008  00156E  0100               	movlb	0	; () banked
  7009  001570  51AA               	movf	scale@scl& (0+255),w,b
  7010  001572  0A80               	xorlw	128
  7011  001574  0F12               	addlw	-238
  7012  001576  A0D8               	btfss	status,0,c
  7013  001578  D0A1               	goto	l5835
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7017  00157A  0E00               	movlw	0
  7018  00157C  0100               	movlb	0	; () banked
  7019  00157E  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7020  001580  0E03               	movlw	3
  7021  001582  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7022  001584  0E00               	movlw	0
  7023  001586  6E30               	movwf	___awdiv@divisor+1,c
  7024  001588  0E0A               	movlw	10
  7025  00158A  6E2F               	movwf	___awdiv@divisor,c
  7026  00158C  0E00               	movlw	0
  7027  00158E  6E2A               	movwf	___awmod@divisor+1,c
  7028  001590  0E64               	movlw	100
  7029  001592  6E29               	movwf	___awmod@divisor,c
  7030  001594  0100               	movlb	0	; () banked
  7031  001596  51AA               	movf	scale@scl& (0+255),w,b
  7032  001598  6E27               	movwf	___awmod@dividend,c
  7033  00159A  6A28               	clrf	___awmod@dividend+1,c
  7034  00159C  BE27               	btfsc	___awmod@dividend,7,c
  7035  00159E  0628               	decf	___awmod@dividend+1,f,c
  7036  0015A0  EC20  F01A         	call	___awmod	;wreg free
  7037  0015A4  C027  F02D         	movff	?___awmod,___awdiv@dividend
  7038  0015A8  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  7039  0015AC  ECB9  F018         	call	___awdiv	;wreg free
  7040  0015B0  0E09               	movlw	9
  7041  0015B2  242D               	addwf	?___awdiv,w,c
  7042  0015B4  0100               	movlb	0	; () banked
  7043  0015B6  6F84               	movwf	___wmul@multiplier& (0+255),b
  7044  0015B8  0E00               	movlw	0
  7045  0015BA  202E               	addwfc	?___awdiv+1,w,c
  7046  0015BC  0100               	movlb	0	; () banked
  7047  0015BE  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7048  0015C0  EC57  F01C         	call	___wmul	;wreg free
  7049  0015C4  0E6C               	movlw	low __powers_
  7050  0015C6  0100               	movlb	0	; () banked
  7051  0015C8  2584               	addwf	?___wmul& (0+255),w,b
  7052  0015CA  6EF6               	movwf	tblptrl,c
  7053  0015CC  0EFE               	movlw	high __powers_
  7054  0015CE  0100               	movlb	0	; () banked
  7055  0015D0  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7056  0015D2  6EF7               	movwf	tblptrh,c
  7057  0015D4                     	if	0	;There are less than 3 active tblptr bytes
  7058  0015D4                     	endif
  7059  0015D4  0009               	tblrd		*+
  7060  0015D6  CFF5 F098          	movff	tablat,___ftmul@f2
  7061  0015DA  0009               	tblrd		*+
  7062  0015DC  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7063  0015E0  000A               	tblrd		*-
  7064  0015E2  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7065  0015E6  0E00               	movlw	0
  7066  0015E8  6E30               	movwf	___awdiv@divisor+1,c
  7067  0015EA  0E64               	movlw	100
  7068  0015EC  6E2F               	movwf	___awdiv@divisor,c
  7069  0015EE  0100               	movlb	0	; () banked
  7070  0015F0  51AA               	movf	scale@scl& (0+255),w,b
  7071  0015F2  6E2D               	movwf	___awdiv@dividend,c
  7072  0015F4  6A2E               	clrf	___awdiv@dividend+1,c
  7073  0015F6  BE2D               	btfsc	___awdiv@dividend,7,c
  7074  0015F8  062E               	decf	___awdiv@dividend+1,f,c
  7075  0015FA  ECB9  F018         	call	___awdiv	;wreg free
  7076  0015FE  0E12               	movlw	18
  7077  001600  242D               	addwf	?___awdiv,w,c
  7078  001602  0100               	movlb	0	; () banked
  7079  001604  6F84               	movwf	___wmul@multiplier& (0+255),b
  7080  001606  0E00               	movlw	0
  7081  001608  202E               	addwfc	?___awdiv+1,w,c
  7082  00160A  0100               	movlb	0	; () banked
  7083  00160C  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7084  00160E  0E00               	movlw	0
  7085  001610  0100               	movlb	0	; () banked
  7086  001612  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7087  001614  0E03               	movlw	3
  7088  001616  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7089  001618  EC57  F01C         	call	___wmul	;wreg free
  7090  00161C  0E6C               	movlw	low __powers_
  7091  00161E  0100               	movlb	0	; () banked
  7092  001620  2584               	addwf	?___wmul& (0+255),w,b
  7093  001622  6EF6               	movwf	tblptrl,c
  7094  001624  0EFE               	movlw	high __powers_
  7095  001626  0100               	movlb	0	; () banked
  7096  001628  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7097  00162A  6EF7               	movwf	tblptrh,c
  7098  00162C                     	if	0	;There are less than 3 active tblptr bytes
  7099  00162C                     	endif
  7100  00162C  0009               	tblrd		*+
  7101  00162E  CFF5 F095          	movff	tablat,___ftmul@f1
  7102  001632  0009               	tblrd		*+
  7103  001634  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7104  001638  000A               	tblrd		*-
  7105  00163A  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7106  00163E  ECC6  F010         	call	___ftmul	;wreg free
  7107  001642  C095  F0A7         	movff	?___ftmul,_scale$1351
  7108  001646  C096  F0A8         	movff	?___ftmul+1,_scale$1351+1
  7109  00164A  C097  F0A9         	movff	?___ftmul+2,_scale$1351+2
  7110                           
  7111                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7112  00164E  C0A7  F095         	movff	_scale$1351,___ftmul@f1
  7113  001652  C0A8  F096         	movff	_scale$1351+1,___ftmul@f1+1
  7114  001656  C0A9  F097         	movff	_scale$1351+2,___ftmul@f1+2
  7115  00165A  0E00               	movlw	0
  7116  00165C  0100               	movlb	0	; () banked
  7117  00165E  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7118  001660  0E03               	movlw	3
  7119  001662  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7120  001664  0E00               	movlw	0
  7121  001666  6E2A               	movwf	___awmod@divisor+1,c
  7122  001668  0E0A               	movlw	10
  7123  00166A  6E29               	movwf	___awmod@divisor,c
  7124  00166C  0100               	movlb	0	; () banked
  7125  00166E  51AA               	movf	scale@scl& (0+255),w,b
  7126  001670  6E27               	movwf	___awmod@dividend,c
  7127  001672  6A28               	clrf	___awmod@dividend+1,c
  7128  001674  BE27               	btfsc	___awmod@dividend,7,c
  7129  001676  0628               	decf	___awmod@dividend+1,f,c
  7130  001678  EC20  F01A         	call	___awmod	;wreg free
  7131  00167C  C027  F084         	movff	?___awmod,___wmul@multiplier
  7132  001680  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7133  001684  EC57  F01C         	call	___wmul	;wreg free
  7134  001688  0E6C               	movlw	low __powers_
  7135  00168A  0100               	movlb	0	; () banked
  7136  00168C  2584               	addwf	?___wmul& (0+255),w,b
  7137  00168E  6EF6               	movwf	tblptrl,c
  7138  001690  0EFE               	movlw	high __powers_
  7139  001692  0100               	movlb	0	; () banked
  7140  001694  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7141  001696  6EF7               	movwf	tblptrh,c
  7142  001698                     	if	0	;There are less than 3 active tblptr bytes
  7143  001698                     	endif
  7144  001698  0009               	tblrd		*+
  7145  00169A  CFF5 F098          	movff	tablat,___ftmul@f2
  7146  00169E  0009               	tblrd		*+
  7147  0016A0  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7148  0016A4  000A               	tblrd		*-
  7149  0016A6  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7150  0016AA  ECC6  F010         	call	___ftmul	;wreg free
  7151  0016AE  C095  F0A4         	movff	?___ftmul,?_scale
  7152  0016B2  C096  F0A5         	movff	?___ftmul+1,?_scale+1
  7153  0016B6  C097  F0A6         	movff	?___ftmul+2,?_scale+2
  7154  0016BA  0012               	return	
  7155  0016BC                     l5835:
  7156                           
  7157                           ;doprnt.c: 438: else if(scl > 10)
  7158  0016BC  0100               	movlb	0	; () banked
  7159  0016BE  51AA               	movf	scale@scl& (0+255),w,b
  7160  0016C0  0A80               	xorlw	128
  7161  0016C2  0F75               	addlw	-139
  7162  0016C4  A0D8               	btfss	status,0,c
  7163  0016C6  D057               	goto	l5841
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7167  0016C8  0E00               	movlw	0
  7168  0016CA  6E30               	movwf	___awdiv@divisor+1,c
  7169  0016CC  0E0A               	movlw	10
  7170  0016CE  6E2F               	movwf	___awdiv@divisor,c
  7171  0016D0  0100               	movlb	0	; () banked
  7172  0016D2  51AA               	movf	scale@scl& (0+255),w,b
  7173  0016D4  6E2D               	movwf	___awdiv@dividend,c
  7174  0016D6  6A2E               	clrf	___awdiv@dividend+1,c
  7175  0016D8  BE2D               	btfsc	___awdiv@dividend,7,c
  7176  0016DA  062E               	decf	___awdiv@dividend+1,f,c
  7177  0016DC  ECB9  F018         	call	___awdiv	;wreg free
  7178  0016E0  0E09               	movlw	9
  7179  0016E2  242D               	addwf	?___awdiv,w,c
  7180  0016E4  0100               	movlb	0	; () banked
  7181  0016E6  6F84               	movwf	___wmul@multiplier& (0+255),b
  7182  0016E8  0E00               	movlw	0
  7183  0016EA  202E               	addwfc	?___awdiv+1,w,c
  7184  0016EC  0100               	movlb	0	; () banked
  7185  0016EE  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7186  0016F0  0E00               	movlw	0
  7187  0016F2  0100               	movlb	0	; () banked
  7188  0016F4  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7189  0016F6  0E03               	movlw	3
  7190  0016F8  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7191  0016FA  EC57  F01C         	call	___wmul	;wreg free
  7192  0016FE  0E6C               	movlw	low __powers_
  7193  001700  0100               	movlb	0	; () banked
  7194  001702  2584               	addwf	?___wmul& (0+255),w,b
  7195  001704  6EF6               	movwf	tblptrl,c
  7196  001706  0EFE               	movlw	high __powers_
  7197  001708  0100               	movlb	0	; () banked
  7198  00170A  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7199  00170C  6EF7               	movwf	tblptrh,c
  7200  00170E                     	if	0	;There are less than 3 active tblptr bytes
  7201  00170E                     	endif
  7202  00170E  0009               	tblrd		*+
  7203  001710  CFF5 F095          	movff	tablat,___ftmul@f1
  7204  001714  0009               	tblrd		*+
  7205  001716  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7206  00171A  000A               	tblrd		*-
  7207  00171C  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7208  001720  0E00               	movlw	0
  7209  001722  0100               	movlb	0	; () banked
  7210  001724  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7211  001726  0E03               	movlw	3
  7212  001728  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7213  00172A  0E00               	movlw	0
  7214  00172C  6E2A               	movwf	___awmod@divisor+1,c
  7215  00172E  0E0A               	movlw	10
  7216  001730  6E29               	movwf	___awmod@divisor,c
  7217  001732  0100               	movlb	0	; () banked
  7218  001734  51AA               	movf	scale@scl& (0+255),w,b
  7219  001736  6E27               	movwf	___awmod@dividend,c
  7220  001738  6A28               	clrf	___awmod@dividend+1,c
  7221  00173A  BE27               	btfsc	___awmod@dividend,7,c
  7222  00173C  0628               	decf	___awmod@dividend+1,f,c
  7223  00173E  EC20  F01A         	call	___awmod	;wreg free
  7224  001742  C027  F084         	movff	?___awmod,___wmul@multiplier
  7225  001746  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7226  00174A  EC57  F01C         	call	___wmul	;wreg free
  7227  00174E  0E6C               	movlw	low __powers_
  7228  001750  0100               	movlb	0	; () banked
  7229  001752  2584               	addwf	?___wmul& (0+255),w,b
  7230  001754  6EF6               	movwf	tblptrl,c
  7231  001756  0EFE               	movlw	high __powers_
  7232  001758  0100               	movlb	0	; () banked
  7233  00175A  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7234  00175C  6EF7               	movwf	tblptrh,c
  7235  00175E                     	if	0	;There are less than 3 active tblptr bytes
  7236  00175E                     	endif
  7237  00175E  0009               	tblrd		*+
  7238  001760  CFF5 F098          	movff	tablat,___ftmul@f2
  7239  001764  0009               	tblrd		*+
  7240  001766  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7241  00176A  000A               	tblrd		*-
  7242  00176C  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7243  001770  ECC6  F010         	call	___ftmul	;wreg free
  7244  001774  D79C               	goto	L5
  7245  001776                     l5841:
  7246                           
  7247                           ;doprnt.c: 440: return _powers_[scl];
  7248  001776  0100               	movlb	0	; () banked
  7249  001778  51AA               	movf	scale@scl& (0+255),w,b
  7250  00177A  0D03               	mullw	3
  7251  00177C  0E6C               	movlw	low __powers_
  7252  00177E  24F3               	addwf	prodl,w,c
  7253  001780  6EF6               	movwf	tblptrl,c
  7254  001782  0EFE               	movlw	high __powers_
  7255  001784  20F4               	addwfc	prodh,w,c
  7256  001786  6EF7               	movwf	tblptrh,c
  7257  001788                     	if	0	;There are less than 3 active tblptr bytes
  7258  001788                     	endif
  7259  001788  0009               	tblrd		*+
  7260  00178A  CFF5 F0A4          	movff	tablat,?_scale
  7261  00178E  0009               	tblrd		*+
  7262  001790  CFF5 F0A5          	movff	tablat,?_scale+1
  7263  001794  000A               	tblrd		*-
  7264  001796  CFF5 F0A6          	movff	tablat,?_scale+2
  7265  00179A  0012               	return	
  7266  00179C                     __end_of_scale:
  7267                           	opt stack 0
  7268                           tblptru	equ	0xFF8
  7269                           tblptrh	equ	0xFF7
  7270                           tblptrl	equ	0xFF6
  7271                           tablat	equ	0xFF5
  7272                           prodh	equ	0xFF4
  7273                           prodl	equ	0xFF3
  7274                           postinc0	equ	0xFEE
  7275                           wreg	equ	0xFE8
  7276                           postdec1	equ	0xFE5
  7277                           fsr1l	equ	0xFE1
  7278                           indf2	equ	0xFDF
  7279                           postinc2	equ	0xFDE
  7280                           postdec2	equ	0xFDD
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function _putch *****************
  7286 ;; Defined at:
  7287 ;;		line 35 in file "lcd.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  data            1    wreg     unsigned char 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  data            1   42[COMRAM] unsigned char 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		wreg, status,2, status,0, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;Total ram usage:        1 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    6
  7308 ;; This function calls:
  7309 ;;		_lcdNewline
  7310 ;;		_lcdNibble
  7311 ;; This function is called by:
  7312 ;;		_printf
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           	psect	text15
  7317  003A16                     __ptext15:
  7318                           	opt stack 0
  7319  003A16                     _putch:
  7320                           	opt stack 22
  7321                           
  7322                           ;incstack = 0
  7323                           ;putch@data stored from wreg
  7324  003A16  6E2B               	movwf	putch@data,c
  7325                           
  7326                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7327  003A18  0E0A               	movlw	10
  7328  003A1A  182B               	xorwf	putch@data,w,c
  7329  003A1C  A4D8               	btfss	status,2,c
  7330  003A1E  D003               	goto	l211
  7331  003A20  EC44  F01D         	call	_lcdNewline	;wreg free
  7332  003A24  0012               	return	
  7333  003A26                     l211:
  7334                           
  7335                           ;lcd.c: 37: else
  7336                           ;lcd.c: 38: {
  7337                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7338  003A26  848C               	bsf	3980,2,c	;volatile
  7339                           
  7340                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7341  003A28  0E74               	movlw	116
  7342  003A2A                     u7737:
  7343  003A2A  2EE8               	decfsz	wreg,f,c
  7344  003A2C  D7FE               	bra	u7737
  7345  003A2E  D000               	nop2	
  7346                           
  7347                           ;lcd.c: 41: lcdNibble(data);
  7348  003A30  502B               	movf	putch@data,w,c
  7349  003A32  ECF9  F01A         	call	_lcdNibble
  7350  003A36  0012               	return	
  7351  003A38                     __end_of_putch:
  7352                           	opt stack 0
  7353                           tblptru	equ	0xFF8
  7354                           tblptrh	equ	0xFF7
  7355                           tblptrl	equ	0xFF6
  7356                           tablat	equ	0xFF5
  7357                           prodh	equ	0xFF4
  7358                           prodl	equ	0xFF3
  7359                           postinc0	equ	0xFEE
  7360                           wreg	equ	0xFE8
  7361                           postdec1	equ	0xFE5
  7362                           fsr1l	equ	0xFE1
  7363                           indf2	equ	0xFDF
  7364                           postinc2	equ	0xFDE
  7365                           postdec2	equ	0xFDD
  7366                           fsr2h	equ	0xFDA
  7367                           fsr2l	equ	0xFD9
  7368                           status	equ	0xFD8
  7369                           
  7370 ;; *************** function _lcdNewline *****************
  7371 ;; Defined at:
  7372 ;;		line 78 in file "lcd.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;		None
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;		None
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, status,2, status,0, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;Total ram usage:        0 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    5
  7393 ;; This function calls:
  7394 ;;		_lcdInst
  7395 ;; This function is called by:
  7396 ;;		_putch
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           	psect	text16
  7401  003A88                     __ptext16:
  7402                           	opt stack 0
  7403  003A88                     _lcdNewline:
  7404                           	opt stack 22
  7405                           
  7406                           ;lcd.c: 79: lcdInst(0b11000000);
  7407                           
  7408                           ;incstack = 0
  7409  003A88  0EC0               	movlw	192
  7410  003A8A  EC1C  F01D         	call	_lcdInst
  7411  003A8E  0012               	return		;funcret
  7412  003A90                     __end_of_lcdNewline:
  7413                           	opt stack 0
  7414                           tblptru	equ	0xFF8
  7415                           tblptrh	equ	0xFF7
  7416                           tblptrl	equ	0xFF6
  7417                           tablat	equ	0xFF5
  7418                           prodh	equ	0xFF4
  7419                           prodl	equ	0xFF3
  7420                           postinc0	equ	0xFEE
  7421                           wreg	equ	0xFE8
  7422                           postdec1	equ	0xFE5
  7423                           fsr1l	equ	0xFE1
  7424                           indf2	equ	0xFDF
  7425                           postinc2	equ	0xFDE
  7426                           postdec2	equ	0xFDD
  7427                           fsr2h	equ	0xFDA
  7428                           fsr2l	equ	0xFD9
  7429                           status	equ	0xFD8
  7430                           
  7431 ;; *************** function _isdigit *****************
  7432 ;; Defined at:
  7433 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7434 ;; Parameters:    Size  Location     Type
  7435 ;;  c               1    wreg     unsigned char 
  7436 ;; Auto vars:     Size  Location     Type
  7437 ;;  c               1   40[COMRAM] unsigned char 
  7438 ;; Return value:  Size  Location     Type
  7439 ;;		None               void
  7440 ;; Registers used:
  7441 ;;		wreg, status,2, status,0
  7442 ;; Tracked objects:
  7443 ;;		On entry : 0/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;Total ram usage:        3 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    3
  7454 ;; This function calls:
  7455 ;;		Nothing
  7456 ;; This function is called by:
  7457 ;;		_printf
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           	psect	text17
  7462  003A5A                     __ptext17:
  7463                           	opt stack 0
  7464  003A5A                     _isdigit:
  7465                           	opt stack 25
  7466                           
  7467                           ;incstack = 0
  7468                           ;isdigit@c stored from wreg
  7469  003A5A  6E29               	movwf	isdigit@c,c
  7470  003A5C  0E00               	movlw	0
  7471  003A5E  6E28               	movwf	_isdigit$977,c
  7472  003A60  0E3A               	movlw	58
  7473  003A62  6029               	cpfslt	isdigit@c,c
  7474  003A64  D005               	goto	l5853
  7475  003A66  0E2F               	movlw	47
  7476  003A68  6429               	cpfsgt	isdigit@c,c
  7477  003A6A  D002               	goto	l5853
  7478  003A6C  0E01               	movlw	1
  7479  003A6E  6E28               	movwf	_isdigit$977,c
  7480  003A70                     l5853:
  7481  003A70  C028  F027         	movff	_isdigit$977,??_isdigit
  7482  003A74  3027               	rrcf	??_isdigit,w,c
  7483  003A76  0012               	return	
  7484  003A78                     __end_of_isdigit:
  7485                           	opt stack 0
  7486                           tblptru	equ	0xFF8
  7487                           tblptrh	equ	0xFF7
  7488                           tblptrl	equ	0xFF6
  7489                           tablat	equ	0xFF5
  7490                           prodh	equ	0xFF4
  7491                           prodl	equ	0xFF3
  7492                           postinc0	equ	0xFEE
  7493                           wreg	equ	0xFE8
  7494                           postdec1	equ	0xFE5
  7495                           fsr1l	equ	0xFE1
  7496                           indf2	equ	0xFDF
  7497                           postinc2	equ	0xFDE
  7498                           postdec2	equ	0xFDD
  7499                           fsr2h	equ	0xFDA
  7500                           fsr2l	equ	0xFD9
  7501                           status	equ	0xFD8
  7502                           
  7503 ;; *************** function _fround *****************
  7504 ;; Defined at:
  7505 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;  prec            1    wreg     unsigned char 
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;  prec            1   45[BANK0 ] unsigned char 
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  3   36[BANK0 ] unsigned char 
  7512 ;; Registers used:
  7513 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7519 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7522 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7523 ;;Total ram usage:       10 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    5
  7526 ;; This function calls:
  7527 ;;		___awdiv
  7528 ;;		___awmod
  7529 ;;		___ftmul
  7530 ;;		___wmul
  7531 ;; This function is called by:
  7532 ;;		_printf
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           	psect	text18
  7537  001B3C                     __ptext18:
  7538                           	opt stack 0
  7539  001B3C                     _fround:
  7540                           	opt stack 23
  7541                           
  7542                           ;incstack = 0
  7543                           ;fround@prec stored from wreg
  7544  001B3C  0100               	movlb	0	; () banked
  7545  001B3E  6FAD               	movwf	fround@prec& (0+255),b
  7546                           
  7547                           ;doprnt.c: 413: if(prec>=110)
  7548  001B40  0E6D               	movlw	109
  7549  001B42  0100               	movlb	0	; () banked
  7550  001B44  65AD               	cpfsgt	fround@prec& (0+255),b
  7551  001B46  D0AF               	goto	l5795
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7555  001B48  0E00               	movlw	0
  7556  001B4A  0100               	movlb	0	; () banked
  7557  001B4C  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7558  001B4E  0E03               	movlw	3
  7559  001B50  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7560  001B52  0E00               	movlw	0
  7561  001B54  6E30               	movwf	___awdiv@divisor+1,c
  7562  001B56  0E0A               	movlw	10
  7563  001B58  6E2F               	movwf	___awdiv@divisor,c
  7564  001B5A  0E00               	movlw	0
  7565  001B5C  6E2A               	movwf	___awmod@divisor+1,c
  7566  001B5E  0E64               	movlw	100
  7567  001B60  6E29               	movwf	___awmod@divisor,c
  7568  001B62  C0AD  F027         	movff	fround@prec,___awmod@dividend
  7569  001B66  6A28               	clrf	___awmod@dividend+1,c
  7570  001B68  EC20  F01A         	call	___awmod	;wreg free
  7571  001B6C  C027  F02D         	movff	?___awmod,___awdiv@dividend
  7572  001B70  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  7573  001B74  ECB9  F018         	call	___awdiv	;wreg free
  7574  001B78  0E09               	movlw	9
  7575  001B7A  242D               	addwf	?___awdiv,w,c
  7576  001B7C  0100               	movlb	0	; () banked
  7577  001B7E  6F84               	movwf	___wmul@multiplier& (0+255),b
  7578  001B80  0E00               	movlw	0
  7579  001B82  202E               	addwfc	?___awdiv+1,w,c
  7580  001B84  0100               	movlb	0	; () banked
  7581  001B86  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7582  001B88  EC57  F01C         	call	___wmul	;wreg free
  7583  001B8C  0E45               	movlw	low __npowers_
  7584  001B8E  0100               	movlb	0	; () banked
  7585  001B90  2584               	addwf	?___wmul& (0+255),w,b
  7586  001B92  6EF6               	movwf	tblptrl,c
  7587  001B94  0EFE               	movlw	high __npowers_
  7588  001B96  0100               	movlb	0	; () banked
  7589  001B98  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7590  001B9A  6EF7               	movwf	tblptrh,c
  7591  001B9C                     	if	0	;There are less than 3 active tblptr bytes
  7592  001B9C                     	endif
  7593  001B9C  0009               	tblrd		*+
  7594  001B9E  CFF5 F098          	movff	tablat,___ftmul@f2
  7595  001BA2  0009               	tblrd		*+
  7596  001BA4  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7597  001BA8  000A               	tblrd		*-
  7598  001BAA  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7599  001BAE  0E00               	movlw	0
  7600  001BB0  6E30               	movwf	___awdiv@divisor+1,c
  7601  001BB2  0E64               	movlw	100
  7602  001BB4  6E2F               	movwf	___awdiv@divisor,c
  7603  001BB6  C0AD  F02D         	movff	fround@prec,___awdiv@dividend
  7604  001BBA  6A2E               	clrf	___awdiv@dividend+1,c
  7605  001BBC  ECB9  F018         	call	___awdiv	;wreg free
  7606  001BC0  0E12               	movlw	18
  7607  001BC2  242D               	addwf	?___awdiv,w,c
  7608  001BC4  0100               	movlb	0	; () banked
  7609  001BC6  6F84               	movwf	___wmul@multiplier& (0+255),b
  7610  001BC8  0E00               	movlw	0
  7611  001BCA  202E               	addwfc	?___awdiv+1,w,c
  7612  001BCC  0100               	movlb	0	; () banked
  7613  001BCE  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7614  001BD0  0E00               	movlw	0
  7615  001BD2  0100               	movlb	0	; () banked
  7616  001BD4  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7617  001BD6  0E03               	movlw	3
  7618  001BD8  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7619  001BDA  EC57  F01C         	call	___wmul	;wreg free
  7620  001BDE  0E45               	movlw	low __npowers_
  7621  001BE0  0100               	movlb	0	; () banked
  7622  001BE2  2584               	addwf	?___wmul& (0+255),w,b
  7623  001BE4  6EF6               	movwf	tblptrl,c
  7624  001BE6  0EFE               	movlw	high __npowers_
  7625  001BE8  0100               	movlb	0	; () banked
  7626  001BEA  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7627  001BEC  6EF7               	movwf	tblptrh,c
  7628  001BEE                     	if	0	;There are less than 3 active tblptr bytes
  7629  001BEE                     	endif
  7630  001BEE  0009               	tblrd		*+
  7631  001BF0  CFF5 F095          	movff	tablat,___ftmul@f1
  7632  001BF4  0009               	tblrd		*+
  7633  001BF6  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7634  001BFA  000A               	tblrd		*-
  7635  001BFC  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7636  001C00  ECC6  F010         	call	___ftmul	;wreg free
  7637  001C04  C095  F0AA         	movff	?___ftmul,_fround$1349
  7638  001C08  C096  F0AB         	movff	?___ftmul+1,_fround$1349+1
  7639  001C0C  C097  F0AC         	movff	?___ftmul+2,_fround$1349+2
  7640                           
  7641                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7642  001C10  0E00               	movlw	0
  7643  001C12  0100               	movlb	0	; () banked
  7644  001C14  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7645  001C16  0E03               	movlw	3
  7646  001C18  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7647  001C1A  0E00               	movlw	0
  7648  001C1C  6E2A               	movwf	___awmod@divisor+1,c
  7649  001C1E  0E0A               	movlw	10
  7650  001C20  6E29               	movwf	___awmod@divisor,c
  7651  001C22  C0AD  F027         	movff	fround@prec,___awmod@dividend
  7652  001C26  6A28               	clrf	___awmod@dividend+1,c
  7653  001C28  EC20  F01A         	call	___awmod	;wreg free
  7654  001C2C  C027  F084         	movff	?___awmod,___wmul@multiplier
  7655  001C30  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7656  001C34  EC57  F01C         	call	___wmul	;wreg free
  7657  001C38  0E45               	movlw	low __npowers_
  7658  001C3A  0100               	movlb	0	; () banked
  7659  001C3C  2584               	addwf	?___wmul& (0+255),w,b
  7660  001C3E  6EF6               	movwf	tblptrl,c
  7661  001C40  0EFE               	movlw	high __npowers_
  7662  001C42  0100               	movlb	0	; () banked
  7663  001C44  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7664  001C46  6EF7               	movwf	tblptrh,c
  7665  001C48                     	if	0	;There are less than 3 active tblptr bytes
  7666  001C48                     	endif
  7667  001C48  0009               	tblrd		*+
  7668  001C4A  CFF5 F098          	movff	tablat,___ftmul@f2
  7669  001C4E  0009               	tblrd		*+
  7670  001C50  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7671  001C54  000A               	tblrd		*-
  7672  001C56  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7673  001C5A  C0AA  F095         	movff	_fround$1349,___ftmul@f1
  7674  001C5E  C0AB  F096         	movff	_fround$1349+1,___ftmul@f1+1
  7675  001C62  C0AC  F097         	movff	_fround$1349+2,___ftmul@f1+2
  7676  001C66  ECC6  F010         	call	___ftmul	;wreg free
  7677  001C6A  C095  F0A7         	movff	?___ftmul,_fround$1350
  7678  001C6E  C096  F0A8         	movff	?___ftmul+1,_fround$1350+1
  7679  001C72  C097  F0A9         	movff	?___ftmul+2,_fround$1350+2
  7680                           
  7681                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7682  001C76  C0A7  F095         	movff	_fround$1350,___ftmul@f1
  7683  001C7A  C0A8  F096         	movff	_fround$1350+1,___ftmul@f1+1
  7684  001C7E  C0A9  F097         	movff	_fround$1350+2,___ftmul@f1+2
  7685  001C82  0E00               	movlw	0
  7686  001C84  0100               	movlb	0	; () banked
  7687  001C86  6F98               	movwf	___ftmul@f2& (0+255),b
  7688  001C88  0E00               	movlw	0
  7689  001C8A  0100               	movlb	0	; () banked
  7690  001C8C  6F99               	movwf	(___ftmul@f2+1)& (0+255),b
  7691  001C8E  0E3F               	movlw	63
  7692  001C90  0100               	movlb	0	; () banked
  7693  001C92  6F9A               	movwf	(___ftmul@f2+2)& (0+255),b
  7694  001C94  ECC6  F010         	call	___ftmul	;wreg free
  7695  001C98  C095  F0A4         	movff	?___ftmul,?_fround
  7696  001C9C  C096  F0A5         	movff	?___ftmul+1,?_fround+1
  7697  001CA0  C097  F0A6         	movff	?___ftmul+2,?_fround+2
  7698  001CA4  0012               	return	
  7699  001CA6                     l5795:
  7700                           
  7701                           ;doprnt.c: 415: else if(prec > 10)
  7702  001CA6  0E0A               	movlw	10
  7703  001CA8  0100               	movlb	0	; () banked
  7704  001CAA  65AD               	cpfsgt	fround@prec& (0+255),b
  7705  001CAC  D068               	goto	l5803
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7709  001CAE  0E00               	movlw	0
  7710  001CB0  0100               	movlb	0	; () banked
  7711  001CB2  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7712  001CB4  0E03               	movlw	3
  7713  001CB6  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7714  001CB8  0E00               	movlw	0
  7715  001CBA  6E2A               	movwf	___awmod@divisor+1,c
  7716  001CBC  0E0A               	movlw	10
  7717  001CBE  6E29               	movwf	___awmod@divisor,c
  7718  001CC0  C0AD  F027         	movff	fround@prec,___awmod@dividend
  7719  001CC4  6A28               	clrf	___awmod@dividend+1,c
  7720  001CC6  EC20  F01A         	call	___awmod	;wreg free
  7721  001CCA  C027  F084         	movff	?___awmod,___wmul@multiplier
  7722  001CCE  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7723  001CD2  EC57  F01C         	call	___wmul	;wreg free
  7724  001CD6  0E45               	movlw	low __npowers_
  7725  001CD8  0100               	movlb	0	; () banked
  7726  001CDA  2584               	addwf	?___wmul& (0+255),w,b
  7727  001CDC  6EF6               	movwf	tblptrl,c
  7728  001CDE  0EFE               	movlw	high __npowers_
  7729  001CE0  0100               	movlb	0	; () banked
  7730  001CE2  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7731  001CE4  6EF7               	movwf	tblptrh,c
  7732  001CE6                     	if	0	;There are less than 3 active tblptr bytes
  7733  001CE6                     	endif
  7734  001CE6  0009               	tblrd		*+
  7735  001CE8  CFF5 F098          	movff	tablat,___ftmul@f2
  7736  001CEC  0009               	tblrd		*+
  7737  001CEE  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7738  001CF2  000A               	tblrd		*-
  7739  001CF4  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7740  001CF8  0E00               	movlw	0
  7741  001CFA  6E30               	movwf	___awdiv@divisor+1,c
  7742  001CFC  0E0A               	movlw	10
  7743  001CFE  6E2F               	movwf	___awdiv@divisor,c
  7744  001D00  C0AD  F02D         	movff	fround@prec,___awdiv@dividend
  7745  001D04  6A2E               	clrf	___awdiv@dividend+1,c
  7746  001D06  ECB9  F018         	call	___awdiv	;wreg free
  7747  001D0A  0E09               	movlw	9
  7748  001D0C  242D               	addwf	?___awdiv,w,c
  7749  001D0E  0100               	movlb	0	; () banked
  7750  001D10  6F84               	movwf	___wmul@multiplier& (0+255),b
  7751  001D12  0E00               	movlw	0
  7752  001D14  202E               	addwfc	?___awdiv+1,w,c
  7753  001D16  0100               	movlb	0	; () banked
  7754  001D18  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7755  001D1A  0E00               	movlw	0
  7756  001D1C  0100               	movlb	0	; () banked
  7757  001D1E  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7758  001D20  0E03               	movlw	3
  7759  001D22  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7760  001D24  EC57  F01C         	call	___wmul	;wreg free
  7761  001D28  0E45               	movlw	low __npowers_
  7762  001D2A  0100               	movlb	0	; () banked
  7763  001D2C  2584               	addwf	?___wmul& (0+255),w,b
  7764  001D2E  6EF6               	movwf	tblptrl,c
  7765  001D30  0EFE               	movlw	high __npowers_
  7766  001D32  0100               	movlb	0	; () banked
  7767  001D34  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7768  001D36  6EF7               	movwf	tblptrh,c
  7769  001D38                     	if	0	;There are less than 3 active tblptr bytes
  7770  001D38                     	endif
  7771  001D38  0009               	tblrd		*+
  7772  001D3A  CFF5 F095          	movff	tablat,___ftmul@f1
  7773  001D3E  0009               	tblrd		*+
  7774  001D40  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7775  001D44  000A               	tblrd		*-
  7776  001D46  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7777  001D4A  ECC6  F010         	call	___ftmul	;wreg free
  7778  001D4E  C095  F0AA         	movff	?___ftmul,_fround$1349
  7779  001D52  C096  F0AB         	movff	?___ftmul+1,_fround$1349+1
  7780  001D56  C097  F0AC         	movff	?___ftmul+2,_fround$1349+2
  7781                           
  7782                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7783  001D5A  C0AA  F095         	movff	_fround$1349,___ftmul@f1
  7784  001D5E  C0AB  F096         	movff	_fround$1349+1,___ftmul@f1+1
  7785  001D62  C0AC  F097         	movff	_fround$1349+2,___ftmul@f1+2
  7786  001D66  0E00               	movlw	0
  7787  001D68  0100               	movlb	0	; () banked
  7788  001D6A  6F98               	movwf	___ftmul@f2& (0+255),b
  7789  001D6C  0E00               	movlw	0
  7790  001D6E  0100               	movlb	0	; () banked
  7791  001D70  6F99               	movwf	(___ftmul@f2+1)& (0+255),b
  7792  001D72  0E3F               	movlw	63
  7793  001D74  0100               	movlb	0	; () banked
  7794  001D76  6F9A               	movwf	(___ftmul@f2+2)& (0+255),b
  7795  001D78  ECC6  F010         	call	___ftmul	;wreg free
  7796  001D7C  D78D               	goto	L6
  7797  001D7E                     l5803:
  7798                           
  7799                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7800  001D7E  0100               	movlb	0	; () banked
  7801  001D80  51AD               	movf	fround@prec& (0+255),w,b
  7802  001D82  0D03               	mullw	3
  7803  001D84  0E45               	movlw	low __npowers_
  7804  001D86  24F3               	addwf	prodl,w,c
  7805  001D88  6EF6               	movwf	tblptrl,c
  7806  001D8A  0EFE               	movlw	high __npowers_
  7807  001D8C  20F4               	addwfc	prodh,w,c
  7808  001D8E  6EF7               	movwf	tblptrh,c
  7809  001D90                     	if	0	;There are less than 3 active tblptr bytes
  7810  001D90                     	endif
  7811  001D90  0009               	tblrd		*+
  7812  001D92  CFF5 F095          	movff	tablat,___ftmul@f1
  7813  001D96  0009               	tblrd		*+
  7814  001D98  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7815  001D9C  000A               	tblrd		*-
  7816  001D9E  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7817  001DA2  0E00               	movlw	0
  7818  001DA4  0100               	movlb	0	; () banked
  7819  001DA6  6F98               	movwf	___ftmul@f2& (0+255),b
  7820  001DA8  0E00               	movlw	0
  7821  001DAA  0100               	movlb	0	; () banked
  7822  001DAC  6F99               	movwf	(___ftmul@f2+1)& (0+255),b
  7823  001DAE  0E3F               	movlw	63
  7824  001DB0  0100               	movlb	0	; () banked
  7825  001DB2  6F9A               	movwf	(___ftmul@f2+2)& (0+255),b
  7826  001DB4  ECC6  F010         	call	___ftmul	;wreg free
  7827  001DB8  C095  F0A4         	movff	?___ftmul,?_fround
  7828  001DBC  C096  F0A5         	movff	?___ftmul+1,?_fround+1
  7829  001DC0  C097  F0A6         	movff	?___ftmul+2,?_fround+2
  7830  001DC4  0012               	return	
  7831  001DC6                     __end_of_fround:
  7832                           	opt stack 0
  7833                           tblptru	equ	0xFF8
  7834                           tblptrh	equ	0xFF7
  7835                           tblptrl	equ	0xFF6
  7836                           tablat	equ	0xFF5
  7837                           prodh	equ	0xFF4
  7838                           prodl	equ	0xFF3
  7839                           postinc0	equ	0xFEE
  7840                           wreg	equ	0xFE8
  7841                           postdec1	equ	0xFE5
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           postdec2	equ	0xFDD
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function ___wmul *****************
  7851 ;; Defined at:
  7852 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;  multiplier      2    4[BANK0 ] unsigned int 
  7855 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;  product         2   48[COMRAM] unsigned int 
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  2    4[BANK0 ] unsigned int 
  7860 ;; Registers used:
  7861 ;;		wreg, status,2, status,0, prodl, prodh
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7867 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;Total ram usage:        6 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    3
  7874 ;; This function calls:
  7875 ;;		Nothing
  7876 ;; This function is called by:
  7877 ;;		_fround
  7878 ;;		_scale
  7879 ;;		_printf
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           	psect	text19
  7884  0038AE                     __ptext19:
  7885                           	opt stack 0
  7886  0038AE                     ___wmul:
  7887                           	opt stack 24
  7888                           
  7889                           ;incstack = 0
  7890  0038AE  0100               	movlb	0	; () banked
  7891  0038B0  5184               	movf	___wmul@multiplier& (0+255),w,b
  7892  0038B2  0100               	movlb	0	; () banked
  7893  0038B4  0386               	mulwf	___wmul@multiplicand& (0+255),b
  7894  0038B6  CFF3 F031          	movff	prodl,___wmul@product
  7895  0038BA  CFF4 F032          	movff	prodh,___wmul@product+1
  7896  0038BE  0100               	movlb	0	; () banked
  7897  0038C0  5184               	movf	___wmul@multiplier& (0+255),w,b
  7898  0038C2  0100               	movlb	0	; () banked
  7899  0038C4  0387               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7900  0038C6  50F3               	movf	prodl,w,c
  7901  0038C8  2632               	addwf	___wmul@product+1,f,c
  7902  0038CA  0100               	movlb	0	; () banked
  7903  0038CC  5185               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7904  0038CE  0100               	movlb	0	; () banked
  7905  0038D0  0386               	mulwf	___wmul@multiplicand& (0+255),b
  7906  0038D2  50F3               	movf	prodl,w,c
  7907  0038D4  2632               	addwf	___wmul@product+1,f,c
  7908                           
  7909                           ; BSR set to: 0
  7910  0038D6  C031  F084         	movff	___wmul@product,?___wmul
  7911  0038DA  C032  F085         	movff	___wmul@product+1,?___wmul+1
  7912  0038DE  0012               	return	
  7913  0038E0                     __end_of___wmul:
  7914                           	opt stack 0
  7915                           tblptru	equ	0xFF8
  7916                           tblptrh	equ	0xFF7
  7917                           tblptrl	equ	0xFF6
  7918                           tablat	equ	0xFF5
  7919                           prodh	equ	0xFF4
  7920                           prodl	equ	0xFF3
  7921                           postinc0	equ	0xFEE
  7922                           wreg	equ	0xFE8
  7923                           postdec1	equ	0xFE5
  7924                           fsr1l	equ	0xFE1
  7925                           indf2	equ	0xFDF
  7926                           postinc2	equ	0xFDE
  7927                           postdec2	equ	0xFDD
  7928                           fsr2h	equ	0xFDA
  7929                           fsr2l	equ	0xFD9
  7930                           status	equ	0xFD8
  7931                           
  7932 ;; *************** function ___awmod *****************
  7933 ;; Defined at:
  7934 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;  dividend        2   38[COMRAM] int 
  7937 ;;  divisor         2   40[COMRAM] int 
  7938 ;; Auto vars:     Size  Location     Type
  7939 ;;  sign            1   43[COMRAM] unsigned char 
  7940 ;;  counter         1   42[COMRAM] unsigned char 
  7941 ;; Return value:  Size  Location     Type
  7942 ;;                  2   38[COMRAM] int 
  7943 ;; Registers used:
  7944 ;;		wreg, status,2, status,0
  7945 ;; Tracked objects:
  7946 ;;		On entry : 0/0
  7947 ;;		On exit  : 0/0
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7950 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;Total ram usage:        6 bytes
  7955 ;; Hardware stack levels used:    1
  7956 ;; Hardware stack levels required when called:    3
  7957 ;; This function calls:
  7958 ;;		Nothing
  7959 ;; This function is called by:
  7960 ;;		_fround
  7961 ;;		_scale
  7962 ;; This function uses a non-reentrant model
  7963 ;;
  7964                           
  7965                           	psect	text20
  7966  003440                     __ptext20:
  7967                           	opt stack 0
  7968  003440                     ___awmod:
  7969                           	opt stack 24
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;incstack = 0
  7973  003440  0E00               	movlw	0
  7974  003442  6E2C               	movwf	___awmod@sign,c
  7975  003444  AE28               	btfss	___awmod@dividend+1,7,c
  7976  003446  D006               	goto	l5749
  7977  003448  6C27               	negf	___awmod@dividend,c
  7978  00344A  1E28               	comf	___awmod@dividend+1,f,c
  7979  00344C  B0D8               	btfsc	status,0,c
  7980  00344E  2A28               	incf	___awmod@dividend+1,f,c
  7981  003450  0E01               	movlw	1
  7982  003452  6E2C               	movwf	___awmod@sign,c
  7983  003454                     l5749:
  7984  003454  AE2A               	btfss	___awmod@divisor+1,7,c
  7985  003456  D004               	goto	l5753
  7986  003458  6C29               	negf	___awmod@divisor,c
  7987  00345A  1E2A               	comf	___awmod@divisor+1,f,c
  7988  00345C  B0D8               	btfsc	status,0,c
  7989  00345E  2A2A               	incf	___awmod@divisor+1,f,c
  7990  003460                     l5753:
  7991  003460  5029               	movf	___awmod@divisor,w,c
  7992  003462  102A               	iorwf	___awmod@divisor+1,w,c
  7993  003464  B4D8               	btfsc	status,2,c
  7994  003466  D018               	goto	l5769
  7995  003468  0E01               	movlw	1
  7996  00346A  6E2B               	movwf	___awmod@counter,c
  7997  00346C  D004               	goto	l5759
  7998  00346E                     l5757:
  7999  00346E  90D8               	bcf	status,0,c
  8000  003470  3629               	rlcf	___awmod@divisor,f,c
  8001  003472  362A               	rlcf	___awmod@divisor+1,f,c
  8002  003474  2A2B               	incf	___awmod@counter,f,c
  8003  003476                     l5759:
  8004  003476  AE2A               	btfss	___awmod@divisor+1,7,c
  8005  003478  D7FA               	goto	l5757
  8006  00347A                     l5761:
  8007  00347A  5029               	movf	___awmod@divisor,w,c
  8008  00347C  5C27               	subwf	___awmod@dividend,w,c
  8009  00347E  502A               	movf	___awmod@divisor+1,w,c
  8010  003480  5828               	subwfb	___awmod@dividend+1,w,c
  8011  003482  A0D8               	btfss	status,0,c
  8012  003484  D004               	goto	l5765
  8013  003486  5029               	movf	___awmod@divisor,w,c
  8014  003488  5E27               	subwf	___awmod@dividend,f,c
  8015  00348A  502A               	movf	___awmod@divisor+1,w,c
  8016  00348C  5A28               	subwfb	___awmod@dividend+1,f,c
  8017  00348E                     l5765:
  8018  00348E  90D8               	bcf	status,0,c
  8019  003490  322A               	rrcf	___awmod@divisor+1,f,c
  8020  003492  3229               	rrcf	___awmod@divisor,f,c
  8021  003494  2E2B               	decfsz	___awmod@counter,f,c
  8022  003496  D7F1               	goto	l5761
  8023  003498                     l5769:
  8024  003498  502C               	movf	___awmod@sign,w,c
  8025  00349A  B4D8               	btfsc	status,2,c
  8026  00349C  D004               	goto	l5773
  8027  00349E  6C27               	negf	___awmod@dividend,c
  8028  0034A0  1E28               	comf	___awmod@dividend+1,f,c
  8029  0034A2  B0D8               	btfsc	status,0,c
  8030  0034A4  2A28               	incf	___awmod@dividend+1,f,c
  8031  0034A6                     l5773:
  8032  0034A6  C027  F027         	movff	___awmod@dividend,?___awmod
  8033  0034AA  C028  F028         	movff	___awmod@dividend+1,?___awmod+1
  8034  0034AE  0012               	return	
  8035  0034B0                     __end_of___awmod:
  8036                           	opt stack 0
  8037                           tblptru	equ	0xFF8
  8038                           tblptrh	equ	0xFF7
  8039                           tblptrl	equ	0xFF6
  8040                           tablat	equ	0xFF5
  8041                           prodh	equ	0xFF4
  8042                           prodl	equ	0xFF3
  8043                           postinc0	equ	0xFEE
  8044                           wreg	equ	0xFE8
  8045                           postdec1	equ	0xFE5
  8046                           fsr1l	equ	0xFE1
  8047                           indf2	equ	0xFDF
  8048                           postinc2	equ	0xFDE
  8049                           postdec2	equ	0xFDD
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function ___awdiv *****************
  8055 ;; Defined at:
  8056 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;  dividend        2   44[COMRAM] int 
  8059 ;;  divisor         2   46[COMRAM] int 
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;  quotient        2    2[BANK0 ] int 
  8062 ;;  sign            1    1[BANK0 ] unsigned char 
  8063 ;;  counter         1    0[BANK0 ] unsigned char 
  8064 ;; Return value:  Size  Location     Type
  8065 ;;                  2   44[COMRAM] int 
  8066 ;; Registers used:
  8067 ;;		wreg, status,2, status,0
  8068 ;; Tracked objects:
  8069 ;;		On entry : 0/0
  8070 ;;		On exit  : 0/0
  8071 ;;		Unchanged: 0/0
  8072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;Total ram usage:        8 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; Hardware stack levels required when called:    3
  8080 ;; This function calls:
  8081 ;;		Nothing
  8082 ;; This function is called by:
  8083 ;;		_fround
  8084 ;;		_scale
  8085 ;;		_printf
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           	psect	text21
  8090  003172                     __ptext21:
  8091                           	opt stack 0
  8092  003172                     ___awdiv:
  8093                           	opt stack 24
  8094                           
  8095                           ;incstack = 0
  8096  003172  0E00               	movlw	0
  8097  003174  0100               	movlb	0	; () banked
  8098  003176  6F81               	movwf	___awdiv@sign& (0+255),b
  8099                           
  8100                           ; BSR set to: 0
  8101  003178  AE30               	btfss	___awdiv@divisor+1,7,c
  8102  00317A  D007               	goto	l5705
  8103                           
  8104                           ; BSR set to: 0
  8105  00317C  6C2F               	negf	___awdiv@divisor,c
  8106  00317E  1E30               	comf	___awdiv@divisor+1,f,c
  8107  003180  B0D8               	btfsc	status,0,c
  8108  003182  2A30               	incf	___awdiv@divisor+1,f,c
  8109                           
  8110                           ; BSR set to: 0
  8111  003184  0E01               	movlw	1
  8112  003186  0100               	movlb	0	; () banked
  8113  003188  6F81               	movwf	___awdiv@sign& (0+255),b
  8114  00318A                     l5705:
  8115                           
  8116                           ; BSR set to: 0
  8117  00318A  AE2E               	btfss	___awdiv@dividend+1,7,c
  8118  00318C  D007               	goto	l5711
  8119                           
  8120                           ; BSR set to: 0
  8121  00318E  6C2D               	negf	___awdiv@dividend,c
  8122  003190  1E2E               	comf	___awdiv@dividend+1,f,c
  8123  003192  B0D8               	btfsc	status,0,c
  8124  003194  2A2E               	incf	___awdiv@dividend+1,f,c
  8125                           
  8126                           ; BSR set to: 0
  8127  003196  0E01               	movlw	1
  8128  003198  0100               	movlb	0	; () banked
  8129  00319A  1B81               	xorwf	___awdiv@sign& (0+255),f,b
  8130  00319C                     l5711:
  8131                           
  8132                           ; BSR set to: 0
  8133  00319C  0E00               	movlw	0
  8134  00319E  0100               	movlb	0	; () banked
  8135  0031A0  6F83               	movwf	(___awdiv@quotient+1)& (0+255),b
  8136  0031A2  0E00               	movlw	0
  8137  0031A4  6F82               	movwf	___awdiv@quotient& (0+255),b
  8138                           
  8139                           ; BSR set to: 0
  8140  0031A6  502F               	movf	___awdiv@divisor,w,c
  8141  0031A8  1030               	iorwf	___awdiv@divisor+1,w,c
  8142  0031AA  B4D8               	btfsc	status,2,c
  8143  0031AC  D021               	goto	l5733
  8144                           
  8145                           ; BSR set to: 0
  8146  0031AE  0E01               	movlw	1
  8147  0031B0  0100               	movlb	0	; () banked
  8148  0031B2  6F80               	movwf	___awdiv@counter& (0+255),b
  8149  0031B4  D005               	goto	l5719
  8150  0031B6                     l5717:
  8151                           
  8152                           ; BSR set to: 0
  8153  0031B6  90D8               	bcf	status,0,c
  8154  0031B8  362F               	rlcf	___awdiv@divisor,f,c
  8155  0031BA  3630               	rlcf	___awdiv@divisor+1,f,c
  8156  0031BC  0100               	movlb	0	; () banked
  8157  0031BE  2B80               	incf	___awdiv@counter& (0+255),f,b
  8158  0031C0                     l5719:
  8159                           
  8160                           ; BSR set to: 0
  8161  0031C0  AE30               	btfss	___awdiv@divisor+1,7,c
  8162  0031C2  D7F9               	goto	l5717
  8163  0031C4                     l5721:
  8164                           
  8165                           ; BSR set to: 0
  8166  0031C4  0100               	movlb	0	; () banked
  8167  0031C6  90D8               	bcf	status,0,c
  8168  0031C8  3782               	rlcf	___awdiv@quotient& (0+255),f,b
  8169  0031CA  3783               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8170                           
  8171                           ; BSR set to: 0
  8172  0031CC  502F               	movf	___awdiv@divisor,w,c
  8173  0031CE  5C2D               	subwf	___awdiv@dividend,w,c
  8174  0031D0  5030               	movf	___awdiv@divisor+1,w,c
  8175  0031D2  582E               	subwfb	___awdiv@dividend+1,w,c
  8176  0031D4  A0D8               	btfss	status,0,c
  8177  0031D6  D006               	goto	l5729
  8178                           
  8179                           ; BSR set to: 0
  8180  0031D8  502F               	movf	___awdiv@divisor,w,c
  8181  0031DA  5E2D               	subwf	___awdiv@dividend,f,c
  8182  0031DC  5030               	movf	___awdiv@divisor+1,w,c
  8183  0031DE  5A2E               	subwfb	___awdiv@dividend+1,f,c
  8184                           
  8185                           ; BSR set to: 0
  8186  0031E0  0100               	movlb	0	; () banked
  8187  0031E2  8182               	bsf	___awdiv@quotient& (0+255),0,b
  8188  0031E4                     l5729:
  8189                           
  8190                           ; BSR set to: 0
  8191  0031E4  90D8               	bcf	status,0,c
  8192  0031E6  3230               	rrcf	___awdiv@divisor+1,f,c
  8193  0031E8  322F               	rrcf	___awdiv@divisor,f,c
  8194                           
  8195                           ; BSR set to: 0
  8196  0031EA  0100               	movlb	0	; () banked
  8197  0031EC  2F80               	decfsz	___awdiv@counter& (0+255),f,b
  8198  0031EE  D7EA               	goto	l5721
  8199  0031F0                     l5733:
  8200                           
  8201                           ; BSR set to: 0
  8202  0031F0  0100               	movlb	0	; () banked
  8203  0031F2  5181               	movf	___awdiv@sign& (0+255),w,b
  8204  0031F4  0100               	movlb	0	; () banked
  8205  0031F6  B4D8               	btfsc	status,2,c
  8206  0031F8  D005               	goto	l5737
  8207                           
  8208                           ; BSR set to: 0
  8209  0031FA  0100               	movlb	0	; () banked
  8210  0031FC  6D82               	negf	___awdiv@quotient& (0+255),b
  8211  0031FE  1F83               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8212  003200  B0D8               	btfsc	status,0,c
  8213  003202  2B83               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8214  003204                     l5737:
  8215                           
  8216                           ; BSR set to: 0
  8217  003204  C082  F02D         	movff	___awdiv@quotient,?___awdiv
  8218  003208  C083  F02E         	movff	___awdiv@quotient+1,?___awdiv+1
  8219  00320C  0012               	return	
  8220  00320E                     __end_of___awdiv:
  8221                           	opt stack 0
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           postinc0	equ	0xFEE
  8229                           wreg	equ	0xFE8
  8230                           postdec1	equ	0xFE5
  8231                           fsr1l	equ	0xFE1
  8232                           indf2	equ	0xFDF
  8233                           postinc2	equ	0xFDE
  8234                           postdec2	equ	0xFDD
  8235                           fsr2h	equ	0xFDA
  8236                           fsr2l	equ	0xFD9
  8237                           status	equ	0xFD8
  8238                           
  8239 ;; *************** function __tdiv_to_l_ *****************
  8240 ;; Defined at:
  8241 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;  f1              3   38[COMRAM] float 
  8244 ;;  f2              3   41[COMRAM] float 
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;  quot            4    0[BANK0 ] unsigned long 
  8247 ;;  exp1            1    5[BANK0 ] unsigned char 
  8248 ;;  cntr            1    4[BANK0 ] unsigned char 
  8249 ;; Return value:  Size  Location     Type
  8250 ;;                  4   38[COMRAM] unsigned long 
  8251 ;; Registers used:
  8252 ;;		wreg, status,2, status,0
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8258 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;Total ram usage:       15 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    3
  8265 ;; This function calls:
  8266 ;;		Nothing
  8267 ;; This function is called by:
  8268 ;;		_printf
  8269 ;; This function uses a non-reentrant model
  8270 ;;
  8271                           
  8272                           	psect	text22
  8273  0022EA                     __ptext22:
  8274                           	opt stack 0
  8275  0022EA                     __tdiv_to_l_:
  8276                           	opt stack 25
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;incstack = 0
  8280  0022EA  C029  F02D         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8281  0022EE  6A2E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8282  0022F0  6A2F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8283  0022F2  3428               	rlcf	__tdiv_to_l_@f1+1,w,c
  8284  0022F4  362D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8285  0022F6  E301               	bnc	u5871
  8286  0022F8  802E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8287  0022FA                     u5871:
  8288  0022FA  502D               	movf	??__tdiv_to_l_,w,c
  8289  0022FC  0100               	movlb	0	; () banked
  8290  0022FE  6F85               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8291  002300  0100               	movlb	0	; () banked
  8292  002302  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8293  002304  A4D8               	btfss	status,2,c
  8294  002306  D009               	goto	l5863
  8295                           
  8296                           ; BSR set to: 0
  8297  002308  0E00               	movlw	0
  8298  00230A  6E27               	movwf	?__tdiv_to_l_,c
  8299  00230C  0E00               	movlw	0
  8300  00230E  6E28               	movwf	?__tdiv_to_l_+1,c
  8301  002310  0E00               	movlw	0
  8302  002312  6E29               	movwf	?__tdiv_to_l_+2,c
  8303  002314  0E00               	movlw	0
  8304  002316  6E2A               	movwf	?__tdiv_to_l_+3,c
  8305                           
  8306                           ; BSR set to: 0
  8307  002318  0012               	return	
  8308  00231A                     l5863:
  8309                           
  8310                           ; BSR set to: 0
  8311  00231A  C02C  F02D         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8312  00231E  6A2E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8313  002320  6A2F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8314  002322  342B               	rlcf	__tdiv_to_l_@f2+1,w,c
  8315  002324  362D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8316  002326  E301               	bnc	u5891
  8317  002328  802E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8318  00232A                     u5891:
  8319  00232A  502D               	movf	??__tdiv_to_l_,w,c
  8320  00232C  0100               	movlb	0	; () banked
  8321  00232E  6F84               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8322  002330  0100               	movlb	0	; () banked
  8323  002332  5184               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8324  002334  A4D8               	btfss	status,2,c
  8325  002336  D009               	goto	l5869
  8326                           
  8327                           ; BSR set to: 0
  8328  002338  0E00               	movlw	0
  8329  00233A  6E27               	movwf	?__tdiv_to_l_,c
  8330  00233C  0E00               	movlw	0
  8331  00233E  6E28               	movwf	?__tdiv_to_l_+1,c
  8332  002340  0E00               	movlw	0
  8333  002342  6E29               	movwf	?__tdiv_to_l_+2,c
  8334  002344  0E00               	movlw	0
  8335  002346  6E2A               	movwf	?__tdiv_to_l_+3,c
  8336                           
  8337                           ; BSR set to: 0
  8338  002348  0012               	return	
  8339  00234A                     l5869:
  8340                           
  8341                           ; BSR set to: 0
  8342  00234A  8E28               	bsf	__tdiv_to_l_@f1+1,7,c
  8343                           
  8344                           ; BSR set to: 0
  8345  00234C  0EFF               	movlw	255
  8346  00234E  1627               	andwf	__tdiv_to_l_@f1,f,c
  8347  002350  0EFF               	movlw	255
  8348  002352  1628               	andwf	__tdiv_to_l_@f1+1,f,c
  8349  002354  0E00               	movlw	0
  8350  002356  1629               	andwf	__tdiv_to_l_@f1+2,f,c
  8351  002358  8E2B               	bsf	__tdiv_to_l_@f2+1,7,c
  8352                           
  8353                           ; BSR set to: 0
  8354  00235A  0EFF               	movlw	255
  8355  00235C  162A               	andwf	__tdiv_to_l_@f2,f,c
  8356  00235E  0EFF               	movlw	255
  8357  002360  162B               	andwf	__tdiv_to_l_@f2+1,f,c
  8358  002362  0E00               	movlw	0
  8359  002364  162C               	andwf	__tdiv_to_l_@f2+2,f,c
  8360                           
  8361                           ; BSR set to: 0
  8362  002366  0E00               	movlw	0
  8363  002368  0100               	movlb	0	; () banked
  8364  00236A  6F80               	movwf	__tdiv_to_l_@quot& (0+255),b
  8365  00236C  0E00               	movlw	0
  8366  00236E  6F81               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8367  002370  0E00               	movlw	0
  8368  002372  6F82               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8369  002374  0E00               	movlw	0
  8370  002376  6F83               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8371                           
  8372                           ; BSR set to: 0
  8373  002378  0E7F               	movlw	127
  8374  00237A  0100               	movlb	0	; () banked
  8375  00237C  5F85               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8376                           
  8377                           ; BSR set to: 0
  8378  00237E  0100               	movlb	0	; () banked
  8379  002380  5184               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8380  002382  0F98               	addlw	152
  8381  002384  0100               	movlb	0	; () banked
  8382  002386  5F85               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8383                           
  8384                           ; BSR set to: 0
  8385  002388  0E18               	movlw	24
  8386  00238A  0100               	movlb	0	; () banked
  8387  00238C  6F84               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8388  00238E                     l1127:
  8389                           
  8390                           ; BSR set to: 0
  8391  00238E  0100               	movlb	0	; () banked
  8392  002390  90D8               	bcf	status,0,c
  8393  002392  3780               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8394  002394  3781               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8395  002396  3782               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8396  002398  3783               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8397                           
  8398                           ; BSR set to: 0
  8399  00239A  502A               	movf	__tdiv_to_l_@f2,w,c
  8400  00239C  5C27               	subwf	__tdiv_to_l_@f1,w,c
  8401  00239E  502B               	movf	__tdiv_to_l_@f2+1,w,c
  8402  0023A0  5828               	subwfb	__tdiv_to_l_@f1+1,w,c
  8403  0023A2  502C               	movf	__tdiv_to_l_@f2+2,w,c
  8404  0023A4  5829               	subwfb	__tdiv_to_l_@f1+2,w,c
  8405  0023A6  A0D8               	btfss	status,0,c
  8406  0023A8  D008               	goto	l1128
  8407                           
  8408                           ; BSR set to: 0
  8409  0023AA  502A               	movf	__tdiv_to_l_@f2,w,c
  8410  0023AC  5E27               	subwf	__tdiv_to_l_@f1,f,c
  8411  0023AE  502B               	movf	__tdiv_to_l_@f2+1,w,c
  8412  0023B0  5A28               	subwfb	__tdiv_to_l_@f1+1,f,c
  8413  0023B2  502C               	movf	__tdiv_to_l_@f2+2,w,c
  8414  0023B4  5A29               	subwfb	__tdiv_to_l_@f1+2,f,c
  8415                           
  8416                           ; BSR set to: 0
  8417  0023B6  0100               	movlb	0	; () banked
  8418  0023B8  8180               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8419  0023BA                     l1128:
  8420                           
  8421                           ; BSR set to: 0
  8422  0023BA  90D8               	bcf	status,0,c
  8423  0023BC  3627               	rlcf	__tdiv_to_l_@f1,f,c
  8424  0023BE  3628               	rlcf	__tdiv_to_l_@f1+1,f,c
  8425  0023C0  3629               	rlcf	__tdiv_to_l_@f1+2,f,c
  8426                           
  8427                           ; BSR set to: 0
  8428  0023C2  0100               	movlb	0	; () banked
  8429  0023C4  2F84               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8430  0023C6  D7E3               	goto	l1127
  8431                           
  8432                           ; BSR set to: 0
  8433                           
  8434                           ; BSR set to: 0
  8435  0023C8  0100               	movlb	0	; () banked
  8436  0023CA  AF85               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8437  0023CC  D019               	goto	l5903
  8438                           
  8439                           ; BSR set to: 0
  8440  0023CE  0100               	movlb	0	; () banked
  8441  0023D0  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8442  0023D2  0A80               	xorlw	128
  8443  0023D4  0F97               	addlw	151
  8444  0023D6  B0D8               	btfsc	status,0,c
  8445  0023D8  D009               	goto	l5899
  8446                           
  8447                           ; BSR set to: 0
  8448  0023DA  0E00               	movlw	0
  8449  0023DC  6E27               	movwf	?__tdiv_to_l_,c
  8450  0023DE  0E00               	movlw	0
  8451  0023E0  6E28               	movwf	?__tdiv_to_l_+1,c
  8452  0023E2  0E00               	movlw	0
  8453  0023E4  6E29               	movwf	?__tdiv_to_l_+2,c
  8454  0023E6  0E00               	movlw	0
  8455  0023E8  6E2A               	movwf	?__tdiv_to_l_+3,c
  8456                           
  8457                           ; BSR set to: 0
  8458  0023EA  0012               	return	
  8459  0023EC                     l5899:
  8460                           
  8461                           ; BSR set to: 0
  8462  0023EC  0100               	movlb	0	; () banked
  8463  0023EE  90D8               	bcf	status,0,c
  8464  0023F0  3383               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8465  0023F2  3382               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8466  0023F4  3381               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8467  0023F6  3380               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  8468                           
  8469                           ; BSR set to: 0
  8470  0023F8  0100               	movlb	0	; () banked
  8471  0023FA  3F85               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  8472  0023FC  D7F7               	goto	l5899
  8473                           
  8474                           ; BSR set to: 0
  8475  0023FE  D01A               	goto	l1134
  8476  002400                     l5903:
  8477                           
  8478                           ; BSR set to: 0
  8479  002400  0E17               	movlw	23
  8480  002402  0100               	movlb	0	; () banked
  8481  002404  6585               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  8482  002406  D011               	goto	l5911
  8483                           
  8484                           ; BSR set to: 0
  8485  002408  0E00               	movlw	0
  8486  00240A  6E27               	movwf	?__tdiv_to_l_,c
  8487  00240C  0E00               	movlw	0
  8488  00240E  6E28               	movwf	?__tdiv_to_l_+1,c
  8489  002410  0E00               	movlw	0
  8490  002412  6E29               	movwf	?__tdiv_to_l_+2,c
  8491  002414  0E00               	movlw	0
  8492  002416  6E2A               	movwf	?__tdiv_to_l_+3,c
  8493                           
  8494                           ; BSR set to: 0
  8495  002418  0012               	return	
  8496  00241A                     l5909:
  8497                           
  8498                           ; BSR set to: 0
  8499  00241A  0100               	movlb	0	; () banked
  8500  00241C  90D8               	bcf	status,0,c
  8501  00241E  3780               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8502  002420  3781               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8503  002422  3782               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8504  002424  3783               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8505  002426  0100               	movlb	0	; () banked
  8506  002428  0785               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  8507  00242A                     l5911:
  8508                           
  8509                           ; BSR set to: 0
  8510  00242A  0100               	movlb	0	; () banked
  8511  00242C  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8512  00242E  0100               	movlb	0	; () banked
  8513  002430  A4D8               	btfss	status,2,c
  8514  002432  D7F3               	goto	l5909
  8515  002434                     l1134:
  8516                           
  8517                           ; BSR set to: 0
  8518  002434  C080  F027         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8519  002438  C081  F028         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8520  00243C  C082  F029         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8521  002440  C083  F02A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8522                           
  8523                           ; BSR set to: 0
  8524  002444  0012               	return		;funcret
  8525  002446                     __end_of__tdiv_to_l_:
  8526                           	opt stack 0
  8527                           tblptru	equ	0xFF8
  8528                           tblptrh	equ	0xFF7
  8529                           tblptrl	equ	0xFF6
  8530                           tablat	equ	0xFF5
  8531                           prodh	equ	0xFF4
  8532                           prodl	equ	0xFF3
  8533                           postinc0	equ	0xFEE
  8534                           wreg	equ	0xFE8
  8535                           postdec1	equ	0xFE5
  8536                           fsr1l	equ	0xFE1
  8537                           indf2	equ	0xFDF
  8538                           postinc2	equ	0xFDE
  8539                           postdec2	equ	0xFDD
  8540                           fsr2h	equ	0xFDA
  8541                           fsr2l	equ	0xFD9
  8542                           status	equ	0xFD8
  8543                           
  8544 ;; *************** function __div_to_l_ *****************
  8545 ;; Defined at:
  8546 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8547 ;; Parameters:    Size  Location     Type
  8548 ;;  f1              3   38[COMRAM] unsigned long 
  8549 ;;  f2              3   41[COMRAM] unsigned long 
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;  quot            4   44[COMRAM] unsigned long 
  8552 ;;  exp1            1   49[COMRAM] unsigned char 
  8553 ;;  cntr            1   48[COMRAM] unsigned char 
  8554 ;; Return value:  Size  Location     Type
  8555 ;;                  4   38[COMRAM] unsigned long 
  8556 ;; Registers used:
  8557 ;;		wreg, status,2, status,0
  8558 ;; Tracked objects:
  8559 ;;		On entry : 0/0
  8560 ;;		On exit  : 0/0
  8561 ;;		Unchanged: 0/0
  8562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8563 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8564 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8566 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8567 ;;Total ram usage:       12 bytes
  8568 ;; Hardware stack levels used:    1
  8569 ;; Hardware stack levels required when called:    3
  8570 ;; This function calls:
  8571 ;;		Nothing
  8572 ;; This function is called by:
  8573 ;;		_printf
  8574 ;; This function uses a non-reentrant model
  8575 ;;
  8576                           
  8577                           	psect	text23
  8578  0026D6                     __ptext23:
  8579                           	opt stack 0
  8580  0026D6                     __div_to_l_:
  8581                           	opt stack 25
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;incstack = 0
  8585  0026D6  3429               	rlcf	__div_to_l_@f1+2,w,c
  8586  0026D8  342A               	rlcf	__div_to_l_@f1+3,w,c
  8587  0026DA  6E32               	movwf	__div_to_l_@exp1,c
  8588  0026DC  5032               	movf	__div_to_l_@exp1,w,c
  8589  0026DE  A4D8               	btfss	status,2,c
  8590  0026E0  D009               	goto	l5919
  8591  0026E2  0E00               	movlw	0
  8592  0026E4  6E27               	movwf	?__div_to_l_,c
  8593  0026E6  0E00               	movlw	0
  8594  0026E8  6E28               	movwf	?__div_to_l_+1,c
  8595  0026EA  0E00               	movlw	0
  8596  0026EC  6E29               	movwf	?__div_to_l_+2,c
  8597  0026EE  0E00               	movlw	0
  8598  0026F0  6E2A               	movwf	?__div_to_l_+3,c
  8599  0026F2  0012               	return	
  8600  0026F4                     l5919:
  8601  0026F4  342C               	rlcf	__div_to_l_@f2+2,w,c
  8602  0026F6  342D               	rlcf	__div_to_l_@f2+3,w,c
  8603  0026F8  6E31               	movwf	__div_to_l_@cntr,c
  8604  0026FA  5031               	movf	__div_to_l_@cntr,w,c
  8605  0026FC  A4D8               	btfss	status,2,c
  8606  0026FE  D009               	goto	l5925
  8607  002700  0E00               	movlw	0
  8608  002702  6E27               	movwf	?__div_to_l_,c
  8609  002704  0E00               	movlw	0
  8610  002706  6E28               	movwf	?__div_to_l_+1,c
  8611  002708  0E00               	movlw	0
  8612  00270A  6E29               	movwf	?__div_to_l_+2,c
  8613  00270C  0E00               	movlw	0
  8614  00270E  6E2A               	movwf	?__div_to_l_+3,c
  8615  002710  0012               	return	
  8616  002712                     l5925:
  8617  002712  8E29               	bsf	__div_to_l_@f1+2,7,c
  8618  002714  0EFF               	movlw	255
  8619  002716  1627               	andwf	__div_to_l_@f1,f,c
  8620  002718  0EFF               	movlw	255
  8621  00271A  1628               	andwf	__div_to_l_@f1+1,f,c
  8622  00271C  0EFF               	movlw	255
  8623  00271E  1629               	andwf	__div_to_l_@f1+2,f,c
  8624  002720  0E00               	movlw	0
  8625  002722  162A               	andwf	__div_to_l_@f1+3,f,c
  8626  002724  8E2C               	bsf	__div_to_l_@f2+2,7,c
  8627  002726  0EFF               	movlw	255
  8628  002728  162A               	andwf	__div_to_l_@f2,f,c
  8629  00272A  0EFF               	movlw	255
  8630  00272C  162B               	andwf	__div_to_l_@f2+1,f,c
  8631  00272E  0EFF               	movlw	255
  8632  002730  162C               	andwf	__div_to_l_@f2+2,f,c
  8633  002732  0E00               	movlw	0
  8634  002734  162D               	andwf	__div_to_l_@f2+3,f,c
  8635  002736  0E00               	movlw	0
  8636  002738  6E2D               	movwf	__div_to_l_@quot,c
  8637  00273A  0E00               	movlw	0
  8638  00273C  6E2E               	movwf	__div_to_l_@quot+1,c
  8639  00273E  0E00               	movlw	0
  8640  002740  6E2F               	movwf	__div_to_l_@quot+2,c
  8641  002742  0E00               	movlw	0
  8642  002744  6E30               	movwf	__div_to_l_@quot+3,c
  8643  002746  0E7F               	movlw	127
  8644  002748  5E32               	subwf	__div_to_l_@exp1,f,c
  8645  00274A  5031               	movf	__div_to_l_@cntr,w,c
  8646  00274C  0FA0               	addlw	160
  8647  00274E  5E32               	subwf	__div_to_l_@exp1,f,c
  8648  002750  0E20               	movlw	32
  8649  002752  6E31               	movwf	__div_to_l_@cntr,c
  8650  002754                     l5939:
  8651  002754  90D8               	bcf	status,0,c
  8652  002756  362D               	rlcf	__div_to_l_@quot,f,c
  8653  002758  362E               	rlcf	__div_to_l_@quot+1,f,c
  8654  00275A  362F               	rlcf	__div_to_l_@quot+2,f,c
  8655  00275C  3630               	rlcf	__div_to_l_@quot+3,f,c
  8656  00275E  502A               	movf	__div_to_l_@f2,w,c
  8657  002760  5C27               	subwf	__div_to_l_@f1,w,c
  8658  002762  502B               	movf	__div_to_l_@f2+1,w,c
  8659  002764  5828               	subwfb	__div_to_l_@f1+1,w,c
  8660  002766  502C               	movf	__div_to_l_@f2+2,w,c
  8661  002768  5829               	subwfb	__div_to_l_@f1+2,w,c
  8662  00276A  502D               	movf	__div_to_l_@f2+3,w,c
  8663  00276C  582A               	subwfb	__div_to_l_@f1+3,w,c
  8664  00276E  A0D8               	btfss	status,0,c
  8665  002770  D009               	goto	l5947
  8666  002772  502A               	movf	__div_to_l_@f2,w,c
  8667  002774  5E27               	subwf	__div_to_l_@f1,f,c
  8668  002776  502B               	movf	__div_to_l_@f2+1,w,c
  8669  002778  5A28               	subwfb	__div_to_l_@f1+1,f,c
  8670  00277A  502C               	movf	__div_to_l_@f2+2,w,c
  8671  00277C  5A29               	subwfb	__div_to_l_@f1+2,f,c
  8672  00277E  502D               	movf	__div_to_l_@f2+3,w,c
  8673  002780  5A2A               	subwfb	__div_to_l_@f1+3,f,c
  8674  002782  802D               	bsf	__div_to_l_@quot,0,c
  8675  002784                     l5947:
  8676  002784  90D8               	bcf	status,0,c
  8677  002786  3627               	rlcf	__div_to_l_@f1,f,c
  8678  002788  3628               	rlcf	__div_to_l_@f1+1,f,c
  8679  00278A  3629               	rlcf	__div_to_l_@f1+2,f,c
  8680  00278C  362A               	rlcf	__div_to_l_@f1+3,f,c
  8681  00278E  2E31               	decfsz	__div_to_l_@cntr,f,c
  8682  002790  D7E1               	goto	l5939
  8683  002792  AE32               	btfss	__div_to_l_@exp1,7,c
  8684  002794  D016               	goto	l5963
  8685  002796  5032               	movf	__div_to_l_@exp1,w,c
  8686  002798  0A80               	xorlw	128
  8687  00279A  0F9F               	addlw	159
  8688  00279C  B0D8               	btfsc	status,0,c
  8689  00279E  D009               	goto	l5959
  8690  0027A0  0E00               	movlw	0
  8691  0027A2  6E27               	movwf	?__div_to_l_,c
  8692  0027A4  0E00               	movlw	0
  8693  0027A6  6E28               	movwf	?__div_to_l_+1,c
  8694  0027A8  0E00               	movlw	0
  8695  0027AA  6E29               	movwf	?__div_to_l_+2,c
  8696  0027AC  0E00               	movlw	0
  8697  0027AE  6E2A               	movwf	?__div_to_l_+3,c
  8698  0027B0  0012               	return	
  8699  0027B2                     l5959:
  8700  0027B2  90D8               	bcf	status,0,c
  8701  0027B4  3230               	rrcf	__div_to_l_@quot+3,f,c
  8702  0027B6  322F               	rrcf	__div_to_l_@quot+2,f,c
  8703  0027B8  322E               	rrcf	__div_to_l_@quot+1,f,c
  8704  0027BA  322D               	rrcf	__div_to_l_@quot,f,c
  8705  0027BC  3E32               	incfsz	__div_to_l_@exp1,f,c
  8706  0027BE  D7F9               	goto	l5959
  8707  0027C0  D015               	goto	l1030
  8708  0027C2                     l5963:
  8709  0027C2  0E1F               	movlw	31
  8710  0027C4  6432               	cpfsgt	__div_to_l_@exp1,c
  8711  0027C6  D00F               	goto	l5971
  8712  0027C8  0E00               	movlw	0
  8713  0027CA  6E27               	movwf	?__div_to_l_,c
  8714  0027CC  0E00               	movlw	0
  8715  0027CE  6E28               	movwf	?__div_to_l_+1,c
  8716  0027D0  0E00               	movlw	0
  8717  0027D2  6E29               	movwf	?__div_to_l_+2,c
  8718  0027D4  0E00               	movlw	0
  8719  0027D6  6E2A               	movwf	?__div_to_l_+3,c
  8720  0027D8  0012               	return	
  8721  0027DA                     l5969:
  8722  0027DA  90D8               	bcf	status,0,c
  8723  0027DC  362D               	rlcf	__div_to_l_@quot,f,c
  8724  0027DE  362E               	rlcf	__div_to_l_@quot+1,f,c
  8725  0027E0  362F               	rlcf	__div_to_l_@quot+2,f,c
  8726  0027E2  3630               	rlcf	__div_to_l_@quot+3,f,c
  8727  0027E4  0632               	decf	__div_to_l_@exp1,f,c
  8728  0027E6                     l5971:
  8729  0027E6  5032               	movf	__div_to_l_@exp1,w,c
  8730  0027E8  A4D8               	btfss	status,2,c
  8731  0027EA  D7F7               	goto	l5969
  8732  0027EC                     l1030:
  8733  0027EC  C02D  F027         	movff	__div_to_l_@quot,?__div_to_l_
  8734  0027F0  C02E  F028         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8735  0027F4  C02F  F029         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8736  0027F8  C030  F02A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8737  0027FC  0012               	return		;funcret
  8738  0027FE                     __end_of__div_to_l_:
  8739                           	opt stack 0
  8740                           tblptru	equ	0xFF8
  8741                           tblptrh	equ	0xFF7
  8742                           tblptrl	equ	0xFF6
  8743                           tablat	equ	0xFF5
  8744                           prodh	equ	0xFF4
  8745                           prodl	equ	0xFF3
  8746                           postinc0	equ	0xFEE
  8747                           wreg	equ	0xFE8
  8748                           postdec1	equ	0xFE5
  8749                           fsr1l	equ	0xFE1
  8750                           indf2	equ	0xFDF
  8751                           postinc2	equ	0xFDE
  8752                           postdec2	equ	0xFDD
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           
  8757 ;; *************** function ___lltoft *****************
  8758 ;; Defined at:
  8759 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;  c               4   46[COMRAM] unsigned long 
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;  exp             1   50[COMRAM] unsigned char 
  8764 ;; Return value:  Size  Location     Type
  8765 ;;                  3   46[COMRAM] float 
  8766 ;; Registers used:
  8767 ;;		wreg, status,2, status,0, cstack
  8768 ;; Tracked objects:
  8769 ;;		On entry : 0/0
  8770 ;;		On exit  : 0/0
  8771 ;;		Unchanged: 0/0
  8772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8773 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;Total ram usage:        9 bytes
  8778 ;; Hardware stack levels used:    1
  8779 ;; Hardware stack levels required when called:    4
  8780 ;; This function calls:
  8781 ;;		___ftpack
  8782 ;; This function is called by:
  8783 ;;		_printf
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           	psect	text24
  8788  003520                     __ptext24:
  8789                           	opt stack 0
  8790  003520                     ___lltoft:
  8791                           	opt stack 24
  8792                           
  8793                           ;incstack = 0
  8794  003520  0E8E               	movlw	142
  8795  003522  6E33               	movwf	___lltoft@exp,c
  8796  003524  D006               	goto	l6165
  8797  003526                     l6163:
  8798  003526  90D8               	bcf	status,0,c
  8799  003528  3232               	rrcf	___lltoft@c+3,f,c
  8800  00352A  3231               	rrcf	___lltoft@c+2,f,c
  8801  00352C  3230               	rrcf	___lltoft@c+1,f,c
  8802  00352E  322F               	rrcf	___lltoft@c,f,c
  8803  003530  2A33               	incf	___lltoft@exp,f,c
  8804  003532                     l6165:
  8805  003532  0E00               	movlw	0
  8806  003534  142F               	andwf	___lltoft@c,w,c
  8807  003536  0100               	movlb	0	; () banked
  8808  003538  6F80               	movwf	??___lltoft& (0+255),b
  8809  00353A  0E00               	movlw	0
  8810  00353C  1430               	andwf	___lltoft@c+1,w,c
  8811  00353E  0100               	movlb	0	; () banked
  8812  003540  6F81               	movwf	(??___lltoft+1)& (0+255),b
  8813  003542  0E00               	movlw	0
  8814  003544  1431               	andwf	___lltoft@c+2,w,c
  8815  003546  0100               	movlb	0	; () banked
  8816  003548  6F82               	movwf	(??___lltoft+2)& (0+255),b
  8817  00354A  0EFF               	movlw	255
  8818  00354C  1432               	andwf	___lltoft@c+3,w,c
  8819  00354E  0100               	movlb	0	; () banked
  8820  003550  6F83               	movwf	(??___lltoft+3)& (0+255),b
  8821  003552  0100               	movlb	0	; () banked
  8822  003554  5180               	movf	??___lltoft& (0+255),w,b
  8823  003556  0100               	movlb	0	; () banked
  8824  003558  1181               	iorwf	(??___lltoft+1)& (0+255),w,b
  8825  00355A  0100               	movlb	0	; () banked
  8826  00355C  1182               	iorwf	(??___lltoft+2)& (0+255),w,b
  8827  00355E  0100               	movlb	0	; () banked
  8828  003560  1183               	iorwf	(??___lltoft+3)& (0+255),w,b
  8829  003562  A4D8               	btfss	status,2,c
  8830  003564  D7E0               	goto	l6163
  8831                           
  8832                           ; BSR set to: 0
  8833                           
  8834                           ; BSR set to: 0
  8835  003566  C02F  F027         	movff	___lltoft@c,___ftpack@arg
  8836  00356A  C030  F028         	movff	___lltoft@c+1,___ftpack@arg+1
  8837  00356E  C031  F029         	movff	___lltoft@c+2,___ftpack@arg+2
  8838  003572  C033  F02A         	movff	___lltoft@exp,___ftpack@exp
  8839  003576  0E00               	movlw	0
  8840  003578  6E2B               	movwf	___ftpack@sign,c
  8841  00357A  EC62  F018         	call	___ftpack	;wreg free
  8842  00357E  C027  F02F         	movff	?___ftpack,?___lltoft
  8843  003582  C028  F030         	movff	?___ftpack+1,?___lltoft+1
  8844  003586  C029  F031         	movff	?___ftpack+2,?___lltoft+2
  8845  00358A  0012               	return	
  8846  00358C                     __end_of___lltoft:
  8847                           	opt stack 0
  8848                           tblptru	equ	0xFF8
  8849                           tblptrh	equ	0xFF7
  8850                           tblptrl	equ	0xFF6
  8851                           tablat	equ	0xFF5
  8852                           prodh	equ	0xFF4
  8853                           prodl	equ	0xFF3
  8854                           postinc0	equ	0xFEE
  8855                           wreg	equ	0xFE8
  8856                           postdec1	equ	0xFE5
  8857                           fsr1l	equ	0xFE1
  8858                           indf2	equ	0xFDF
  8859                           postinc2	equ	0xFDE
  8860                           postdec2	equ	0xFDD
  8861                           fsr2h	equ	0xFDA
  8862                           fsr2l	equ	0xFD9
  8863                           status	equ	0xFD8
  8864                           
  8865 ;; *************** function ___llmod *****************
  8866 ;; Defined at:
  8867 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;  dividend        4    0[BANK0 ] unsigned long 
  8870 ;;  divisor         4    4[BANK0 ] unsigned long 
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;  counter         1    8[BANK0 ] unsigned char 
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  4    0[BANK0 ] unsigned long 
  8875 ;; Registers used:
  8876 ;;		wreg, status,2, status,0
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8882 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;Total ram usage:        9 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; Hardware stack levels required when called:    3
  8889 ;; This function calls:
  8890 ;;		Nothing
  8891 ;; This function is called by:
  8892 ;;		_printf
  8893 ;; This function uses a non-reentrant model
  8894 ;;
  8895                           
  8896                           	psect	text25
  8897  00320E                     __ptext25:
  8898                           	opt stack 0
  8899  00320E                     ___llmod:
  8900                           	opt stack 25
  8901                           
  8902                           ;incstack = 0
  8903  00320E  0100               	movlb	0	; () banked
  8904  003210  5184               	movf	___llmod@divisor& (0+255),w,b
  8905  003212  0100               	movlb	0	; () banked
  8906  003214  1185               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  8907  003216  0100               	movlb	0	; () banked
  8908  003218  1186               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  8909  00321A  0100               	movlb	0	; () banked
  8910  00321C  1187               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  8911  00321E  B4D8               	btfsc	status,2,c
  8912  003220  D03A               	goto	l1219
  8913                           
  8914                           ; BSR set to: 0
  8915  003222  0E01               	movlw	1
  8916  003224  0100               	movlb	0	; () banked
  8917  003226  6F88               	movwf	___llmod@counter& (0+255),b
  8918  003228  D008               	goto	l6151
  8919  00322A                     l6149:
  8920                           
  8921                           ; BSR set to: 0
  8922  00322A  0100               	movlb	0	; () banked
  8923  00322C  90D8               	bcf	status,0,c
  8924  00322E  3784               	rlcf	___llmod@divisor& (0+255),f,b
  8925  003230  3785               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  8926  003232  3786               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  8927  003234  3787               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  8928  003236  0100               	movlb	0	; () banked
  8929  003238  2B88               	incf	___llmod@counter& (0+255),f,b
  8930  00323A                     l6151:
  8931                           
  8932                           ; BSR set to: 0
  8933  00323A  0100               	movlb	0	; () banked
  8934  00323C  AF87               	btfss	(___llmod@divisor+3)& (0+255),7,b
  8935  00323E  D7F5               	goto	l6149
  8936  003240                     l6153:
  8937                           
  8938                           ; BSR set to: 0
  8939  003240  0100               	movlb	0	; () banked
  8940  003242  5184               	movf	___llmod@divisor& (0+255),w,b
  8941  003244  0100               	movlb	0	; () banked
  8942  003246  5D80               	subwf	___llmod@dividend& (0+255),w,b
  8943  003248  0100               	movlb	0	; () banked
  8944  00324A  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  8945  00324C  0100               	movlb	0	; () banked
  8946  00324E  5981               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  8947  003250  0100               	movlb	0	; () banked
  8948  003252  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  8949  003254  0100               	movlb	0	; () banked
  8950  003256  5982               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  8951  003258  0100               	movlb	0	; () banked
  8952  00325A  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  8953  00325C  0100               	movlb	0	; () banked
  8954  00325E  5983               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  8955  003260  A0D8               	btfss	status,0,c
  8956  003262  D010               	goto	l6157
  8957                           
  8958                           ; BSR set to: 0
  8959  003264  0100               	movlb	0	; () banked
  8960  003266  5184               	movf	___llmod@divisor& (0+255),w,b
  8961  003268  0100               	movlb	0	; () banked
  8962  00326A  5F80               	subwf	___llmod@dividend& (0+255),f,b
  8963  00326C  0100               	movlb	0	; () banked
  8964  00326E  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  8965  003270  0100               	movlb	0	; () banked
  8966  003272  5B81               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  8967  003274  0100               	movlb	0	; () banked
  8968  003276  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  8969  003278  0100               	movlb	0	; () banked
  8970  00327A  5B82               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  8971  00327C  0100               	movlb	0	; () banked
  8972  00327E  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  8973  003280  0100               	movlb	0	; () banked
  8974  003282  5B83               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  8975  003284                     l6157:
  8976                           
  8977                           ; BSR set to: 0
  8978  003284  0100               	movlb	0	; () banked
  8979  003286  90D8               	bcf	status,0,c
  8980  003288  3387               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  8981  00328A  3386               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  8982  00328C  3385               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  8983  00328E  3384               	rrcf	___llmod@divisor& (0+255),f,b
  8984                           
  8985                           ; BSR set to: 0
  8986  003290  0100               	movlb	0	; () banked
  8987  003292  2F88               	decfsz	___llmod@counter& (0+255),f,b
  8988  003294  D7D5               	goto	l6153
  8989  003296                     l1219:
  8990                           
  8991                           ; BSR set to: 0
  8992  003296  C080  F080         	movff	___llmod@dividend,?___llmod
  8993  00329A  C081  F081         	movff	___llmod@dividend+1,?___llmod+1
  8994  00329E  C082  F082         	movff	___llmod@dividend+2,?___llmod+2
  8995  0032A2  C083  F083         	movff	___llmod@dividend+3,?___llmod+3
  8996                           
  8997                           ; BSR set to: 0
  8998  0032A6  0012               	return		;funcret
  8999  0032A8                     __end_of___llmod:
  9000                           	opt stack 0
  9001                           tblptru	equ	0xFF8
  9002                           tblptrh	equ	0xFF7
  9003                           tblptrl	equ	0xFF6
  9004                           tablat	equ	0xFF5
  9005                           prodh	equ	0xFF4
  9006                           prodl	equ	0xFF3
  9007                           postinc0	equ	0xFEE
  9008                           wreg	equ	0xFE8
  9009                           postdec1	equ	0xFE5
  9010                           fsr1l	equ	0xFE1
  9011                           indf2	equ	0xFDF
  9012                           postinc2	equ	0xFDE
  9013                           postdec2	equ	0xFDD
  9014                           fsr2h	equ	0xFDA
  9015                           fsr2l	equ	0xFD9
  9016                           status	equ	0xFD8
  9017                           
  9018 ;; *************** function ___lldiv *****************
  9019 ;; Defined at:
  9020 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9021 ;; Parameters:    Size  Location     Type
  9022 ;;  dividend        4   38[COMRAM] unsigned long 
  9023 ;;  divisor         4   42[COMRAM] unsigned long 
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;  quotient        4   46[COMRAM] unsigned long 
  9026 ;;  counter         1   50[COMRAM] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  4   38[COMRAM] unsigned long 
  9029 ;; Registers used:
  9030 ;;		wreg, status,2, status,0
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9036 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9037 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9040 ;;Total ram usage:       13 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    3
  9043 ;; This function calls:
  9044 ;;		Nothing
  9045 ;; This function is called by:
  9046 ;;		_printf
  9047 ;;		_I2C_Master_Init
  9048 ;; This function uses a non-reentrant model
  9049 ;;
  9050                           
  9051                           	psect	text26
  9052  0033BE                     __ptext26:
  9053                           	opt stack 0
  9054  0033BE                     ___lldiv:
  9055                           	opt stack 25
  9056                           
  9057                           ; BSR set to: 0
  9058                           ;incstack = 0
  9059  0033BE  0E00               	movlw	0
  9060  0033C0  6E2F               	movwf	___lldiv@quotient,c
  9061  0033C2  0E00               	movlw	0
  9062  0033C4  6E30               	movwf	___lldiv@quotient+1,c
  9063  0033C6  0E00               	movlw	0
  9064  0033C8  6E31               	movwf	___lldiv@quotient+2,c
  9065  0033CA  0E00               	movlw	0
  9066  0033CC  6E32               	movwf	___lldiv@quotient+3,c
  9067  0033CE  502B               	movf	___lldiv@divisor,w,c
  9068  0033D0  102C               	iorwf	___lldiv@divisor+1,w,c
  9069  0033D2  102D               	iorwf	___lldiv@divisor+2,w,c
  9070  0033D4  102E               	iorwf	___lldiv@divisor+3,w,c
  9071  0033D6  B4D8               	btfsc	status,2,c
  9072  0033D8  D02A               	goto	l1209
  9073  0033DA  0E01               	movlw	1
  9074  0033DC  6E33               	movwf	___lldiv@counter,c
  9075  0033DE  D006               	goto	l6131
  9076  0033E0                     l6129:
  9077  0033E0  90D8               	bcf	status,0,c
  9078  0033E2  362B               	rlcf	___lldiv@divisor,f,c
  9079  0033E4  362C               	rlcf	___lldiv@divisor+1,f,c
  9080  0033E6  362D               	rlcf	___lldiv@divisor+2,f,c
  9081  0033E8  362E               	rlcf	___lldiv@divisor+3,f,c
  9082  0033EA  2A33               	incf	___lldiv@counter,f,c
  9083  0033EC                     l6131:
  9084  0033EC  AE2E               	btfss	___lldiv@divisor+3,7,c
  9085  0033EE  D7F8               	goto	l6129
  9086  0033F0                     l6133:
  9087  0033F0  90D8               	bcf	status,0,c
  9088  0033F2  362F               	rlcf	___lldiv@quotient,f,c
  9089  0033F4  3630               	rlcf	___lldiv@quotient+1,f,c
  9090  0033F6  3631               	rlcf	___lldiv@quotient+2,f,c
  9091  0033F8  3632               	rlcf	___lldiv@quotient+3,f,c
  9092  0033FA  502B               	movf	___lldiv@divisor,w,c
  9093  0033FC  5C27               	subwf	___lldiv@dividend,w,c
  9094  0033FE  502C               	movf	___lldiv@divisor+1,w,c
  9095  003400  5828               	subwfb	___lldiv@dividend+1,w,c
  9096  003402  502D               	movf	___lldiv@divisor+2,w,c
  9097  003404  5829               	subwfb	___lldiv@dividend+2,w,c
  9098  003406  502E               	movf	___lldiv@divisor+3,w,c
  9099  003408  582A               	subwfb	___lldiv@dividend+3,w,c
  9100  00340A  A0D8               	btfss	status,0,c
  9101  00340C  D009               	goto	l6141
  9102  00340E  502B               	movf	___lldiv@divisor,w,c
  9103  003410  5E27               	subwf	___lldiv@dividend,f,c
  9104  003412  502C               	movf	___lldiv@divisor+1,w,c
  9105  003414  5A28               	subwfb	___lldiv@dividend+1,f,c
  9106  003416  502D               	movf	___lldiv@divisor+2,w,c
  9107  003418  5A29               	subwfb	___lldiv@dividend+2,f,c
  9108  00341A  502E               	movf	___lldiv@divisor+3,w,c
  9109  00341C  5A2A               	subwfb	___lldiv@dividend+3,f,c
  9110  00341E  802F               	bsf	___lldiv@quotient,0,c
  9111  003420                     l6141:
  9112  003420  90D8               	bcf	status,0,c
  9113  003422  322E               	rrcf	___lldiv@divisor+3,f,c
  9114  003424  322D               	rrcf	___lldiv@divisor+2,f,c
  9115  003426  322C               	rrcf	___lldiv@divisor+1,f,c
  9116  003428  322B               	rrcf	___lldiv@divisor,f,c
  9117  00342A  2E33               	decfsz	___lldiv@counter,f,c
  9118  00342C  D7E1               	goto	l6133
  9119  00342E                     l1209:
  9120  00342E  C02F  F027         	movff	___lldiv@quotient,?___lldiv
  9121  003432  C030  F028         	movff	___lldiv@quotient+1,?___lldiv+1
  9122  003436  C031  F029         	movff	___lldiv@quotient+2,?___lldiv+2
  9123  00343A  C032  F02A         	movff	___lldiv@quotient+3,?___lldiv+3
  9124  00343E  0012               	return		;funcret
  9125  003440                     __end_of___lldiv:
  9126                           	opt stack 0
  9127                           tblptru	equ	0xFF8
  9128                           tblptrh	equ	0xFF7
  9129                           tblptrl	equ	0xFF6
  9130                           tablat	equ	0xFF5
  9131                           prodh	equ	0xFF4
  9132                           prodl	equ	0xFF3
  9133                           postinc0	equ	0xFEE
  9134                           wreg	equ	0xFE8
  9135                           postdec1	equ	0xFE5
  9136                           fsr1l	equ	0xFE1
  9137                           indf2	equ	0xFDF
  9138                           postinc2	equ	0xFDE
  9139                           postdec2	equ	0xFDD
  9140                           fsr2h	equ	0xFDA
  9141                           fsr2l	equ	0xFD9
  9142                           status	equ	0xFD8
  9143                           
  9144 ;; *************** function ___ftsub *****************
  9145 ;; Defined at:
  9146 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9147 ;; Parameters:    Size  Location     Type
  9148 ;;  f1              3   58[BANK0 ] float 
  9149 ;;  f2              3   61[BANK0 ] float 
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;		None
  9152 ;; Return value:  Size  Location     Type
  9153 ;;                  3   58[BANK0 ] float 
  9154 ;; Registers used:
  9155 ;;		wreg, status,2, status,0, cstack
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9161 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9164 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9165 ;;Total ram usage:        6 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    5
  9168 ;; This function calls:
  9169 ;;		___ftadd
  9170 ;; This function is called by:
  9171 ;;		_sortBattery
  9172 ;;		_printf
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           	psect	text27
  9177  003658                     __ptext27:
  9178                           	opt stack 0
  9179  003658                     ___ftsub:
  9180                           	opt stack 23
  9181                           
  9182                           ;incstack = 0
  9183  003658  0100               	movlb	0	; () banked
  9184  00365A  51BD               	movf	___ftsub@f2& (0+255),w,b
  9185  00365C  0100               	movlb	0	; () banked
  9186  00365E  11BE               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9187  003660  0100               	movlb	0	; () banked
  9188  003662  11BF               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9189  003664  B4D8               	btfsc	status,2,c
  9190  003666  D009               	goto	l6039
  9191                           
  9192                           ; BSR set to: 0
  9193  003668  0E00               	movlw	0
  9194  00366A  0100               	movlb	0	; () banked
  9195  00366C  1BBD               	xorwf	___ftsub@f2& (0+255),f,b
  9196  00366E  0E00               	movlw	0
  9197  003670  0100               	movlb	0	; () banked
  9198  003672  1BBE               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9199  003674  0E80               	movlw	128
  9200  003676  0100               	movlb	0	; () banked
  9201  003678  1BBF               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9202  00367A                     l6039:
  9203                           
  9204                           ; BSR set to: 0
  9205  00367A  C0BA  F0AE         	movff	___ftsub@f1,___ftadd@f1
  9206  00367E  C0BB  F0AF         	movff	___ftsub@f1+1,___ftadd@f1+1
  9207  003682  C0BC  F0B0         	movff	___ftsub@f1+2,___ftadd@f1+2
  9208  003686  C0BD  F0B1         	movff	___ftsub@f2,___ftadd@f2
  9209  00368A  C0BE  F0B2         	movff	___ftsub@f2+1,___ftadd@f2+1
  9210  00368E  C0BF  F0B3         	movff	___ftsub@f2+2,___ftadd@f2+2
  9211  003692  ECE3  F00E         	call	___ftadd	;wreg free
  9212  003696  C0AE  F0BA         	movff	?___ftadd,?___ftsub
  9213  00369A  C0AF  F0BB         	movff	?___ftadd+1,?___ftsub+1
  9214  00369E  C0B0  F0BC         	movff	?___ftadd+2,?___ftsub+2
  9215  0036A2  0012               	return	
  9216  0036A4                     __end_of___ftsub:
  9217                           	opt stack 0
  9218                           tblptru	equ	0xFF8
  9219                           tblptrh	equ	0xFF7
  9220                           tblptrl	equ	0xFF6
  9221                           tablat	equ	0xFF5
  9222                           prodh	equ	0xFF4
  9223                           prodl	equ	0xFF3
  9224                           postinc0	equ	0xFEE
  9225                           wreg	equ	0xFE8
  9226                           postdec1	equ	0xFE5
  9227                           fsr1l	equ	0xFE1
  9228                           indf2	equ	0xFDF
  9229                           postinc2	equ	0xFDE
  9230                           postdec2	equ	0xFDD
  9231                           fsr2h	equ	0xFDA
  9232                           fsr2l	equ	0xFD9
  9233                           status	equ	0xFD8
  9234                           
  9235 ;; *************** function ___ftneg *****************
  9236 ;; Defined at:
  9237 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9238 ;; Parameters:    Size  Location     Type
  9239 ;;  f1              3   38[COMRAM] float 
  9240 ;; Auto vars:     Size  Location     Type
  9241 ;;		None
  9242 ;; Return value:  Size  Location     Type
  9243 ;;                  3   38[COMRAM] float 
  9244 ;; Registers used:
  9245 ;;		wreg, status,2, status,0
  9246 ;; Tracked objects:
  9247 ;;		On entry : 0/0
  9248 ;;		On exit  : 0/0
  9249 ;;		Unchanged: 0/0
  9250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9251 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9254 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9255 ;;Total ram usage:        3 bytes
  9256 ;; Hardware stack levels used:    1
  9257 ;; Hardware stack levels required when called:    3
  9258 ;; This function calls:
  9259 ;;		Nothing
  9260 ;; This function is called by:
  9261 ;;		_printf
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           	psect	text28
  9266  0039F2                     __ptext28:
  9267                           	opt stack 0
  9268  0039F2                     ___ftneg:
  9269                           	opt stack 25
  9270                           
  9271                           ;incstack = 0
  9272  0039F2  5027               	movf	___ftneg@f1,w,c
  9273  0039F4  1028               	iorwf	___ftneg@f1+1,w,c
  9274  0039F6  1029               	iorwf	___ftneg@f1+2,w,c
  9275  0039F8  B4D8               	btfsc	status,2,c
  9276  0039FA  D006               	goto	l1159
  9277  0039FC  0E00               	movlw	0
  9278  0039FE  1A27               	xorwf	___ftneg@f1,f,c
  9279  003A00  0E00               	movlw	0
  9280  003A02  1A28               	xorwf	___ftneg@f1+1,f,c
  9281  003A04  0E80               	movlw	128
  9282  003A06  1A29               	xorwf	___ftneg@f1+2,f,c
  9283  003A08                     l1159:
  9284  003A08  C027  F027         	movff	___ftneg@f1,?___ftneg
  9285  003A0C  C028  F028         	movff	___ftneg@f1+1,?___ftneg+1
  9286  003A10  C029  F029         	movff	___ftneg@f1+2,?___ftneg+2
  9287  003A14  0012               	return		;funcret
  9288  003A16                     __end_of___ftneg:
  9289                           	opt stack 0
  9290                           tblptru	equ	0xFF8
  9291                           tblptrh	equ	0xFF7
  9292                           tblptrl	equ	0xFF6
  9293                           tablat	equ	0xFF5
  9294                           prodh	equ	0xFF4
  9295                           prodl	equ	0xFF3
  9296                           postinc0	equ	0xFEE
  9297                           wreg	equ	0xFE8
  9298                           postdec1	equ	0xFE5
  9299                           fsr1l	equ	0xFE1
  9300                           indf2	equ	0xFDF
  9301                           postinc2	equ	0xFDE
  9302                           postdec2	equ	0xFDD
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function ___ftge *****************
  9308 ;; Defined at:
  9309 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;  ff1             3    0[BANK0 ] float 
  9312 ;;  ff2             3    3[BANK0 ] float 
  9313 ;; Auto vars:     Size  Location     Type
  9314 ;;		None
  9315 ;; Return value:  Size  Location     Type
  9316 ;;		None               void
  9317 ;; Registers used:
  9318 ;;		wreg, status,2, status,0
  9319 ;; Tracked objects:
  9320 ;;		On entry : 0/0
  9321 ;;		On exit  : 0/0
  9322 ;;		Unchanged: 0/0
  9323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9324 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;Total ram usage:        9 bytes
  9329 ;; Hardware stack levels used:    1
  9330 ;; Hardware stack levels required when called:    3
  9331 ;; This function calls:
  9332 ;;		Nothing
  9333 ;; This function is called by:
  9334 ;;		_sortBattery
  9335 ;;		_printf
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           	psect	text29
  9340  002F34                     __ptext29:
  9341                           	opt stack 0
  9342  002F34                     ___ftge:
  9343                           	opt stack 25
  9344                           
  9345                           ;incstack = 0
  9346  002F34  0100               	movlb	0	; () banked
  9347  002F36  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9348  002F38  D01D               	goto	l6059
  9349                           
  9350                           ; BSR set to: 0
  9351  002F3A  C080  F086         	movff	___ftge@ff1,??___ftge
  9352  002F3E  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
  9353  002F42  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
  9354  002F46  0100               	movlb	0	; () banked
  9355  002F48  1F86               	comf	??___ftge& (0+255),f,b
  9356  002F4A  1F87               	comf	(??___ftge+1)& (0+255),f,b
  9357  002F4C  1F88               	comf	(??___ftge+2)& (0+255),f,b
  9358  002F4E  2B86               	incf	??___ftge& (0+255),f,b
  9359  002F50  0E00               	movlw	0
  9360  002F52  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  9361  002F54  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  9362  002F56  0E00               	movlw	0
  9363  002F58  0100               	movlb	0	; () banked
  9364  002F5A  2586               	addwf	??___ftge& (0+255),w,b
  9365  002F5C  0100               	movlb	0	; () banked
  9366  002F5E  6F80               	movwf	___ftge@ff1& (0+255),b
  9367  002F60  0E00               	movlw	0
  9368  002F62  0100               	movlb	0	; () banked
  9369  002F64  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  9370  002F66  0100               	movlb	0	; () banked
  9371  002F68  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  9372  002F6A  0E80               	movlw	128
  9373  002F6C  0100               	movlb	0	; () banked
  9374  002F6E  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  9375  002F70  0100               	movlb	0	; () banked
  9376  002F72  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  9377  002F74                     l6059:
  9378                           
  9379                           ; BSR set to: 0
  9380  002F74  0100               	movlb	0	; () banked
  9381  002F76  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9382  002F78  D01D               	goto	l6063
  9383                           
  9384                           ; BSR set to: 0
  9385  002F7A  C083  F086         	movff	___ftge@ff2,??___ftge
  9386  002F7E  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
  9387  002F82  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
  9388  002F86  0100               	movlb	0	; () banked
  9389  002F88  1F86               	comf	??___ftge& (0+255),f,b
  9390  002F8A  1F87               	comf	(??___ftge+1)& (0+255),f,b
  9391  002F8C  1F88               	comf	(??___ftge+2)& (0+255),f,b
  9392  002F8E  2B86               	incf	??___ftge& (0+255),f,b
  9393  002F90  0E00               	movlw	0
  9394  002F92  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  9395  002F94  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  9396  002F96  0E00               	movlw	0
  9397  002F98  0100               	movlb	0	; () banked
  9398  002F9A  2586               	addwf	??___ftge& (0+255),w,b
  9399  002F9C  0100               	movlb	0	; () banked
  9400  002F9E  6F83               	movwf	___ftge@ff2& (0+255),b
  9401  002FA0  0E00               	movlw	0
  9402  002FA2  0100               	movlb	0	; () banked
  9403  002FA4  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  9404  002FA6  0100               	movlb	0	; () banked
  9405  002FA8  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  9406  002FAA  0E80               	movlw	128
  9407  002FAC  0100               	movlb	0	; () banked
  9408  002FAE  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  9409  002FB0  0100               	movlb	0	; () banked
  9410  002FB2  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  9411  002FB4                     l6063:
  9412                           
  9413                           ; BSR set to: 0
  9414  002FB4  0E00               	movlw	0
  9415  002FB6  0100               	movlb	0	; () banked
  9416  002FB8  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  9417  002FBA  0E00               	movlw	0
  9418  002FBC  0100               	movlb	0	; () banked
  9419  002FBE  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9420  002FC0  0E80               	movlw	128
  9421  002FC2  0100               	movlb	0	; () banked
  9422  002FC4  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9423                           
  9424                           ; BSR set to: 0
  9425  002FC6  0E00               	movlw	0
  9426  002FC8  0100               	movlb	0	; () banked
  9427  002FCA  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  9428  002FCC  0E00               	movlw	0
  9429  002FCE  0100               	movlb	0	; () banked
  9430  002FD0  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9431  002FD2  0E80               	movlw	128
  9432  002FD4  0100               	movlb	0	; () banked
  9433  002FD6  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9434  002FD8  0100               	movlb	0	; () banked
  9435  002FDA  5183               	movf	___ftge@ff2& (0+255),w,b
  9436  002FDC  0100               	movlb	0	; () banked
  9437  002FDE  5D80               	subwf	___ftge@ff1& (0+255),w,b
  9438  002FE0  0100               	movlb	0	; () banked
  9439  002FE2  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  9440  002FE4  0100               	movlb	0	; () banked
  9441  002FE6  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9442  002FE8  0100               	movlb	0	; () banked
  9443  002FEA  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  9444  002FEC  0100               	movlb	0	; () banked
  9445  002FEE  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9446  002FF0  B0D8               	btfsc	status,0,c
  9447  002FF2  D002               	goto	l6069
  9448                           
  9449                           ; BSR set to: 0
  9450  002FF4  90D8               	bcf	status,0,c
  9451  002FF6  0012               	return	
  9452  002FF8                     l6069:
  9453                           
  9454                           ; BSR set to: 0
  9455  002FF8  80D8               	bsf	status,0,c
  9456                           
  9457                           ; BSR set to: 0
  9458  002FFA  0012               	return	
  9459  002FFC                     __end_of___ftge:
  9460                           	opt stack 0
  9461                           tblptru	equ	0xFF8
  9462                           tblptrh	equ	0xFF7
  9463                           tblptrl	equ	0xFF6
  9464                           tablat	equ	0xFF5
  9465                           prodh	equ	0xFF4
  9466                           prodl	equ	0xFF3
  9467                           postinc0	equ	0xFEE
  9468                           wreg	equ	0xFE8
  9469                           postdec1	equ	0xFE5
  9470                           fsr1l	equ	0xFE1
  9471                           indf2	equ	0xFDF
  9472                           postinc2	equ	0xFDE
  9473                           postdec2	equ	0xFDD
  9474                           fsr2h	equ	0xFDA
  9475                           fsr2l	equ	0xFD9
  9476                           status	equ	0xFD8
  9477                           
  9478 ;; *************** function _lcdClear *****************
  9479 ;; Defined at:
  9480 ;;		line 74 in file "lcd.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;                  1    wreg      void 
  9487 ;; Registers used:
  9488 ;;		wreg, status,2, status,0, cstack
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;Total ram usage:        0 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    5
  9501 ;; This function calls:
  9502 ;;		_lcdInst
  9503 ;; This function is called by:
  9504 ;;		_main
  9505 ;;		_sortBattery
  9506 ;;		_dateTime
  9507 ;;		_mainMenu
  9508 ;;		_runSelect
  9509 ;;		_runMenu
  9510 ;;		_runTime
  9511 ;;		_runStats
  9512 ;;		_pause
  9513 ;; This function uses a non-reentrant model
  9514 ;;
  9515                           
  9516                           	psect	text30
  9517  003A90                     __ptext30:
  9518                           	opt stack 0
  9519  003A90                     _lcdClear:
  9520                           	opt stack 24
  9521                           
  9522                           ;lcd.c: 75: lcdInst(0b00000001);
  9523                           
  9524                           ; BSR set to: 0
  9525                           ;incstack = 0
  9526  003A90  0E01               	movlw	1
  9527  003A92  EC1C  F01D         	call	_lcdInst
  9528  003A96  0012               	return		;funcret
  9529  003A98                     __end_of_lcdClear:
  9530                           	opt stack 0
  9531                           tblptru	equ	0xFF8
  9532                           tblptrh	equ	0xFF7
  9533                           tblptrl	equ	0xFF6
  9534                           tablat	equ	0xFF5
  9535                           prodh	equ	0xFF4
  9536                           prodl	equ	0xFF3
  9537                           postinc0	equ	0xFEE
  9538                           wreg	equ	0xFE8
  9539                           postdec1	equ	0xFE5
  9540                           fsr1l	equ	0xFE1
  9541                           indf2	equ	0xFDF
  9542                           postinc2	equ	0xFDE
  9543                           postdec2	equ	0xFDD
  9544                           fsr2h	equ	0xFDA
  9545                           fsr2l	equ	0xFD9
  9546                           status	equ	0xFD8
  9547                           
  9548 ;; *************** function _pinSetup *****************
  9549 ;; Defined at:
  9550 ;;		line 270 in file "main.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;		None
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;		None
  9555 ;; Return value:  Size  Location     Type
  9556 ;;                  1    wreg      void 
  9557 ;; Registers used:
  9558 ;;		wreg, status,2, status,0
  9559 ;; Tracked objects:
  9560 ;;		On entry : 0/0
  9561 ;;		On exit  : 0/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9568 ;;Total ram usage:        0 bytes
  9569 ;; Hardware stack levels used:    1
  9570 ;; Hardware stack levels required when called:    3
  9571 ;; This function calls:
  9572 ;;		Nothing
  9573 ;; This function is called by:
  9574 ;;		_main
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           	psect	text31
  9579  0037CC                     __ptext31:
  9580                           	opt stack 0
  9581  0037CC                     _pinSetup:
  9582                           	opt stack 27
  9583                           
  9584                           ;main.c: 276: TRISA = 0xFF;
  9585                           
  9586                           ;incstack = 0
  9587  0037CC  6892               	setf	3986,c	;volatile
  9588                           
  9589                           ;main.c: 277: TRISB = 0xFF;
  9590  0037CE  6893               	setf	3987,c	;volatile
  9591                           
  9592                           ;main.c: 278: TRISC = 0b11000000;
  9593  0037D0  0EC0               	movlw	192
  9594  0037D2  6E94               	movwf	3988,c	;volatile
  9595                           
  9596                           ;main.c: 279: TRISD = 0x00;
  9597  0037D4  0E00               	movlw	0
  9598  0037D6  6E95               	movwf	3989,c	;volatile
  9599                           
  9600                           ;main.c: 280: TRISE = 0x00;
  9601  0037D8  0E00               	movlw	0
  9602  0037DA  6E96               	movwf	3990,c	;volatile
  9603                           
  9604                           ;main.c: 282: LATA = 0x00;
  9605  0037DC  0E00               	movlw	0
  9606  0037DE  6E89               	movwf	3977,c	;volatile
  9607                           
  9608                           ;main.c: 283: LATB = 0x00;
  9609  0037E0  0E00               	movlw	0
  9610  0037E2  6E8A               	movwf	3978,c	;volatile
  9611                           
  9612                           ;main.c: 284: LATC = 0x00;
  9613  0037E4  0E00               	movlw	0
  9614  0037E6  6E8B               	movwf	3979,c	;volatile
  9615                           
  9616                           ;main.c: 285: LATD = 0x00;
  9617  0037E8  0E00               	movlw	0
  9618  0037EA  6E8C               	movwf	3980,c	;volatile
  9619                           
  9620                           ;main.c: 286: LATE = 0x00;
  9621  0037EC  0E00               	movlw	0
  9622  0037EE  6E8D               	movwf	3981,c	;volatile
  9623                           
  9624                           ;main.c: 288: ADCON0 = 0x00;
  9625  0037F0  0E00               	movlw	0
  9626  0037F2  6EC2               	movwf	4034,c	;volatile
  9627                           
  9628                           ;main.c: 290: ADCON1 |= 0x0B;
  9629  0037F4  0E0B               	movlw	11
  9630  0037F6  12C1               	iorwf	4033,f,c	;volatile
  9631                           
  9632                           ;main.c: 295: ADCON2 = 0;
  9633  0037F8  0E00               	movlw	0
  9634  0037FA  6EC0               	movwf	4032,c	;volatile
  9635                           
  9636                           ;main.c: 296: ADCON2 |= 0b010;
  9637  0037FC  82C0               	bsf	4032,1,c	;volatile
  9638                           
  9639                           ;main.c: 297: ADCON2 |= 0b110<<3;
  9640  0037FE  0E30               	movlw	48
  9641  003800  12C0               	iorwf	4032,f,c	;volatile
  9642                           
  9643                           ;main.c: 298: ADCON2 |= 1<<7;
  9644  003802  8EC0               	bsf	4032,7,c	;volatile
  9645                           
  9646                           ;main.c: 301: INT1IE = 1;
  9647  003804  86F0               	bsf	intcon3,3,c	;volatile
  9648                           
  9649                           ;main.c: 302: INT0IE = 1;
  9650  003806  88F2               	bsf	intcon,4,c	;volatile
  9651                           
  9652                           ;main.c: 303: (INTCONbits.GIE = 1);
  9653  003808  8EF2               	bsf	intcon,7,c	;volatile
  9654  00380A  0012               	return		;funcret
  9655  00380C                     __end_of_pinSetup:
  9656                           	opt stack 0
  9657                           tblptru	equ	0xFF8
  9658                           tblptrh	equ	0xFF7
  9659                           tblptrl	equ	0xFF6
  9660                           tablat	equ	0xFF5
  9661                           prodh	equ	0xFF4
  9662                           prodl	equ	0xFF3
  9663                           intcon	equ	0xFF2
  9664                           intcon3	equ	0xFF0
  9665                           postinc0	equ	0xFEE
  9666                           wreg	equ	0xFE8
  9667                           postdec1	equ	0xFE5
  9668                           fsr1l	equ	0xFE1
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           postdec2	equ	0xFDD
  9672                           fsr2h	equ	0xFDA
  9673                           fsr2l	equ	0xFD9
  9674                           status	equ	0xFD8
  9675                           
  9676 ;; *************** function _lcdHome *****************
  9677 ;; Defined at:
  9678 ;;		line 70 in file "lcd.c"
  9679 ;; Parameters:    Size  Location     Type
  9680 ;;		None
  9681 ;; Auto vars:     Size  Location     Type
  9682 ;;		None
  9683 ;; Return value:  Size  Location     Type
  9684 ;;                  2   20[None  ] int 
  9685 ;; Registers used:
  9686 ;;		wreg, status,2, status,0, cstack
  9687 ;; Tracked objects:
  9688 ;;		On entry : 0/0
  9689 ;;		On exit  : 0/0
  9690 ;;		Unchanged: 0/0
  9691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9696 ;;Total ram usage:        0 bytes
  9697 ;; Hardware stack levels used:    1
  9698 ;; Hardware stack levels required when called:    5
  9699 ;; This function calls:
  9700 ;;		_lcdInst
  9701 ;; This function is called by:
  9702 ;;		_main
  9703 ;; This function uses a non-reentrant model
  9704 ;;
  9705                           
  9706                           	psect	text32
  9707  003A98                     __ptext32:
  9708                           	opt stack 0
  9709  003A98                     _lcdHome:
  9710                           	opt stack 25
  9711                           
  9712                           ;lcd.c: 71: lcdInst(0b11000000);
  9713                           
  9714                           ;incstack = 0
  9715  003A98  0EC0               	movlw	192
  9716  003A9A  EC1C  F01D         	call	_lcdInst
  9717  003A9E  0012               	return		;funcret
  9718  003AA0                     __end_of_lcdHome:
  9719                           	opt stack 0
  9720                           tblptru	equ	0xFF8
  9721                           tblptrh	equ	0xFF7
  9722                           tblptrl	equ	0xFF6
  9723                           tablat	equ	0xFF5
  9724                           prodh	equ	0xFF4
  9725                           prodl	equ	0xFF3
  9726                           intcon	equ	0xFF2
  9727                           intcon3	equ	0xFF0
  9728                           postinc0	equ	0xFEE
  9729                           wreg	equ	0xFE8
  9730                           postdec1	equ	0xFE5
  9731                           fsr1l	equ	0xFE1
  9732                           indf2	equ	0xFDF
  9733                           postinc2	equ	0xFDE
  9734                           postdec2	equ	0xFDD
  9735                           fsr2h	equ	0xFDA
  9736                           fsr2l	equ	0xFD9
  9737                           status	equ	0xFD8
  9738                           
  9739 ;; *************** function _initServo *****************
  9740 ;; Defined at:
  9741 ;;		line 21 in file "servo.c"
  9742 ;; Parameters:    Size  Location     Type
  9743 ;;  motor           2  106[BANK0 ] PTR int 
  9744 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9745 ;;  angle           2  108[BANK0 ] int 
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;		None
  9748 ;; Return value:  Size  Location     Type
  9749 ;;                  1    wreg      void 
  9750 ;; Registers used:
  9751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9752 ;; Tracked objects:
  9753 ;;		On entry : 0/0
  9754 ;;		On exit  : 0/0
  9755 ;;		Unchanged: 0/0
  9756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9757 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9759 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9761 ;;Total ram usage:        8 bytes
  9762 ;; Hardware stack levels used:    1
  9763 ;; Hardware stack levels required when called:    7
  9764 ;; This function calls:
  9765 ;;		_initTimer
  9766 ;;		_setAngle
  9767 ;;		_startTimer
  9768 ;; This function is called by:
  9769 ;;		_main
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           	psect	text33
  9774  003338                     __ptext33:
  9775                           	opt stack 0
  9776  003338                     _initServo:
  9777                           	opt stack 23
  9778                           
  9779                           ;servo.c: 22: n++;
  9780                           
  9781                           ;incstack = 0
  9782  003338  4A3C               	infsnz	_n,f,c
  9783  00333A  2A3D               	incf	_n+1,f,c
  9784                           
  9785                           ;servo.c: 23: servos[n-1] = motor;
  9786  00333C  0EFE               	movlw	254
  9787  00333E  0100               	movlb	0	; () banked
  9788  003340  6FEE               	movwf	??_initServo& (0+255),b
  9789  003342  0EFF               	movlw	255
  9790  003344  0100               	movlb	0	; () banked
  9791  003346  6FEF               	movwf	(??_initServo+1)& (0+255),b
  9792  003348  C03C  F0F0         	movff	_n,??_initServo+2
  9793  00334C  C03D  F0F1         	movff	_n+1,??_initServo+3
  9794  003350  90D8               	bcf	status,0,c
  9795  003352  0100               	movlb	0	; () banked
  9796  003354  37F0               	rlcf	(??_initServo+2)& (0+255),f,b
  9797  003356  37F1               	rlcf	(??_initServo+3)& (0+255),f,b
  9798  003358  0100               	movlb	0	; () banked
  9799  00335A  51EE               	movf	??_initServo& (0+255),w,b
  9800  00335C  0100               	movlb	0	; () banked
  9801  00335E  27F0               	addwf	(??_initServo+2)& (0+255),f,b
  9802  003360  0100               	movlb	0	; () banked
  9803  003362  51EF               	movf	(??_initServo+1)& (0+255),w,b
  9804  003364  0100               	movlb	0	; () banked
  9805  003366  23F1               	addwfc	(??_initServo+3)& (0+255),f,b
  9806  003368  0E6D               	movlw	low _servos
  9807  00336A  0100               	movlb	0	; () banked
  9808  00336C  25F0               	addwf	(??_initServo+2)& (0+255),w,b
  9809  00336E  6ED9               	movwf	fsr2l,c
  9810  003370  0E01               	movlw	high _servos
  9811  003372  0100               	movlb	0	; () banked
  9812  003374  21F1               	addwfc	(??_initServo+3)& (0+255),w,b
  9813  003376  6EDA               	movwf	fsr2h,c
  9814  003378  C0EA  FFDE         	movff	initServo@motor,postinc2
  9815  00337C  C0EB  FFDD         	movff	initServo@motor+1,postdec2
  9816                           
  9817                           ; BSR set to: 0
  9818                           ;servo.c: 24: setAngle(motor, angle);
  9819  003380  C0EA  F0E0         	movff	initServo@motor,setAngle@motor
  9820  003384  C0EB  F0E1         	movff	initServo@motor+1,setAngle@motor+1
  9821  003388  C0EC  F0E2         	movff	initServo@angle,setAngle@angle
  9822  00338C  C0ED  F0E3         	movff	initServo@angle+1,setAngle@angle+1
  9823  003390  ECD0  F016         	call	_setAngle	;wreg free
  9824                           
  9825                           ;servo.c: 26: initTimer(0);
  9826  003394  0E00               	movlw	0
  9827  003396  6E28               	movwf	initTimer@timer+1,c
  9828  003398  0E00               	movlw	0
  9829  00339A  6E27               	movwf	initTimer@timer,c
  9830  00339C  EC9E  F01B         	call	_initTimer	;wreg free
  9831                           
  9832                           ;servo.c: 27: startTimer(0,0);
  9833  0033A0  0E00               	movlw	0
  9834  0033A2  6E28               	movwf	startTimer@timer+1,c
  9835  0033A4  0E00               	movlw	0
  9836  0033A6  6E27               	movwf	startTimer@timer,c
  9837  0033A8  0E00               	movlw	0
  9838  0033AA  6E29               	movwf	startTimer@val,c
  9839  0033AC  0E00               	movlw	0
  9840  0033AE  6E2A               	movwf	startTimer@val+1,c
  9841  0033B0  0E00               	movlw	0
  9842  0033B2  6E2B               	movwf	startTimer@val+2,c
  9843  0033B4  0E00               	movlw	0
  9844  0033B6  6E2C               	movwf	startTimer@val+3,c
  9845  0033B8  EC52  F01B         	call	_startTimer	;wreg free
  9846  0033BC  0012               	return		;funcret
  9847  0033BE                     __end_of_initServo:
  9848                           	opt stack 0
  9849                           tblptru	equ	0xFF8
  9850                           tblptrh	equ	0xFF7
  9851                           tblptrl	equ	0xFF6
  9852                           tablat	equ	0xFF5
  9853                           prodh	equ	0xFF4
  9854                           prodl	equ	0xFF3
  9855                           intcon	equ	0xFF2
  9856                           intcon3	equ	0xFF0
  9857                           postinc0	equ	0xFEE
  9858                           wreg	equ	0xFE8
  9859                           postdec1	equ	0xFE5
  9860                           fsr1l	equ	0xFE1
  9861                           indf2	equ	0xFDF
  9862                           postinc2	equ	0xFDE
  9863                           postdec2	equ	0xFDD
  9864                           fsr2h	equ	0xFDA
  9865                           fsr2l	equ	0xFD9
  9866                           status	equ	0xFD8
  9867                           
  9868 ;; *************** function _startTimer *****************
  9869 ;; Defined at:
  9870 ;;		line 76 in file "timer.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;  timer           2   38[COMRAM] int 
  9873 ;;  val             4   40[COMRAM] long 
  9874 ;; Auto vars:     Size  Location     Type
  9875 ;;		None
  9876 ;; Return value:  Size  Location     Type
  9877 ;;                  1    wreg      void 
  9878 ;; Registers used:
  9879 ;;		wreg, status,2, status,0
  9880 ;; Tracked objects:
  9881 ;;		On entry : 0/0
  9882 ;;		On exit  : 0/0
  9883 ;;		Unchanged: 0/0
  9884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9885 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9887 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9889 ;;Total ram usage:        8 bytes
  9890 ;; Hardware stack levels used:    1
  9891 ;; Hardware stack levels required when called:    3
  9892 ;; This function calls:
  9893 ;;		Nothing
  9894 ;; This function is called by:
  9895 ;;		_main
  9896 ;;		_initServo
  9897 ;;		_testFrequency
  9898 ;; This function uses a non-reentrant model
  9899 ;;
  9900                           
  9901                           	psect	text34
  9902  0036A4                     __ptext34:
  9903                           	opt stack 0
  9904  0036A4                     _startTimer:
  9905                           	opt stack 27
  9906                           
  9907                           ;timer.c: 77: switch(timer){
  9908                           
  9909                           ;incstack = 0
  9910  0036A4  D012               	goto	l6585
  9911  0036A6                     l426:
  9912                           
  9913                           ;timer.c: 79: TMR0H = val>>8;
  9914  0036A6  C02A  FFD7         	movff	startTimer@val+1,4055	;volatile
  9915                           
  9916                           ;timer.c: 80: TMR0L = val;
  9917  0036AA  C029  FFD6         	movff	startTimer@val,4054	;volatile
  9918                           
  9919                           ;timer.c: 81: T0CON |= 1<<7;
  9920  0036AE  8ED5               	bsf	4053,7,c	;volatile
  9921                           
  9922                           ;timer.c: 82: break;
  9923  0036B0  0012               	return	
  9924  0036B2                     l428:
  9925                           
  9926                           ;timer.c: 84: TMR1H = val>>8;
  9927  0036B2  C02A  FFCF         	movff	startTimer@val+1,4047	;volatile
  9928                           
  9929                           ;timer.c: 85: TMR1L = val;
  9930  0036B6  C029  FFCE         	movff	startTimer@val,4046	;volatile
  9931                           
  9932                           ;timer.c: 86: T1CON |= 1<<0;
  9933  0036BA  80CD               	bsf	4045,0,c	;volatile
  9934                           
  9935                           ;timer.c: 87: break;
  9936  0036BC  0012               	return	
  9937  0036BE                     l429:
  9938                           
  9939                           ;timer.c: 89: TMR3H = val>>8;
  9940  0036BE  C02A  FFB3         	movff	startTimer@val+1,4019	;volatile
  9941                           
  9942                           ;timer.c: 90: TMR3L = val;
  9943  0036C2  C029  FFB2         	movff	startTimer@val,4018	;volatile
  9944                           
  9945                           ;timer.c: 91: T3CON |= 1<<0;
  9946  0036C6  80B1               	bsf	4017,0,c	;volatile
  9947                           
  9948                           ;timer.c: 92: }
  9949  0036C8  0012               	return	
  9950  0036CA                     l6585:
  9951  0036CA  C027  F02D         	movff	startTimer@timer,??_startTimer
  9952  0036CE  C028  F02E         	movff	startTimer@timer+1,??_startTimer+1
  9953                           
  9954                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9955                           ; Switch size 1, requested type "space"
  9956                           ; Number of cases is 1, Range of values is 0 to 0
  9957                           ; switch strategies available:
  9958                           ; Name         Instructions Cycles
  9959                           ; simple_byte            4     3 (average)
  9960                           ;	Chosen strategy is simple_byte
  9961  0036D2  502E               	movf	??_startTimer+1,w,c
  9962  0036D4  0A00               	xorlw	0	; case 0
  9963  0036D6  A4D8               	btfss	status,2,c
  9964  0036D8  0012               	return	
  9965                           
  9966                           ; Switch size 1, requested type "space"
  9967                           ; Number of cases is 3, Range of values is 0 to 3
  9968                           ; switch strategies available:
  9969                           ; Name         Instructions Cycles
  9970                           ; simple_byte           10     6 (average)
  9971                           ;	Chosen strategy is simple_byte
  9972  0036DA  502D               	movf	??_startTimer,w,c
  9973  0036DC  0A00               	xorlw	0	; case 0
  9974  0036DE  B4D8               	btfsc	status,2,c
  9975  0036E0  D7E2               	goto	l426
  9976  0036E2  0A01               	xorlw	1	; case 1
  9977  0036E4  B4D8               	btfsc	status,2,c
  9978  0036E6  D7E5               	goto	l428
  9979  0036E8  0A02               	xorlw	2	; case 3
  9980  0036EA  A4D8               	btfss	status,2,c
  9981  0036EC  0012               	return	
  9982  0036EE  D7E7               	goto	l429
  9983  0036F0                     __end_of_startTimer:
  9984                           	opt stack 0
  9985                           tblptru	equ	0xFF8
  9986                           tblptrh	equ	0xFF7
  9987                           tblptrl	equ	0xFF6
  9988                           tablat	equ	0xFF5
  9989                           prodh	equ	0xFF4
  9990                           prodl	equ	0xFF3
  9991                           intcon	equ	0xFF2
  9992                           intcon3	equ	0xFF0
  9993                           postinc0	equ	0xFEE
  9994                           wreg	equ	0xFE8
  9995                           postdec1	equ	0xFE5
  9996                           fsr1l	equ	0xFE1
  9997                           indf2	equ	0xFDF
  9998                           postinc2	equ	0xFDE
  9999                           postdec2	equ	0xFDD
 10000                           fsr2h	equ	0xFDA
 10001                           fsr2l	equ	0xFD9
 10002                           status	equ	0xFD8
 10003                           
 10004 ;; *************** function _setAngle *****************
 10005 ;; Defined at:
 10006 ;;		line 41 in file "servo.c"
 10007 ;; Parameters:    Size  Location     Type
 10008 ;;  motor           2   96[BANK0 ] PTR int 
 10009 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 10010 ;;  angle           2   98[BANK0 ] int 
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;  i               2  104[BANK0 ] int 
 10013 ;;  period          2  102[BANK0 ] unsigned int 
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      void 
 10016 ;; Registers used:
 10017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10023 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10024 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;Total ram usage:       10 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:    6
 10030 ;; This function calls:
 10031 ;;		_angleToPulse
 10032 ;; This function is called by:
 10033 ;;		_sortBattery
 10034 ;;		_initServo
 10035 ;; This function uses a non-reentrant model
 10036 ;;
 10037                           
 10038                           	psect	text35
 10039  002DA0                     __ptext35:
 10040                           	opt stack 0
 10041  002DA0                     _setAngle:
 10042                           	opt stack 23
 10043                           
 10044                           ;servo.c: 42: unsigned int period = 50000;
 10045                           
 10046                           ;incstack = 0
 10047  002DA0  0EC3               	movlw	195
 10048  002DA2  0100               	movlb	0	; () banked
 10049  002DA4  6FE7               	movwf	(setAngle@period+1)& (0+255),b
 10050  002DA6  0E50               	movlw	80
 10051  002DA8  6FE6               	movwf	setAngle@period& (0+255),b
 10052                           
 10053                           ;servo.c: 43: for(int i = 0; i < n; i++){
 10054  002DAA  0E00               	movlw	0
 10055  002DAC  0100               	movlb	0	; () banked
 10056  002DAE  6FE9               	movwf	(setAngle@i+1)& (0+255),b
 10057  002DB0  0E00               	movlw	0
 10058  002DB2  6FE8               	movwf	setAngle@i& (0+255),b
 10059  002DB4  D03F               	goto	l6673
 10060  002DB6                     l6665:
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;servo.c: 44: if(servos[i] == motor){
 10064  002DB6  90D8               	bcf	status,0,c
 10065  002DB8  0100               	movlb	0	; () banked
 10066  002DBA  35E8               	rlcf	setAngle@i& (0+255),w,b
 10067  002DBC  6ED9               	movwf	fsr2l,c
 10068  002DBE  0100               	movlb	0	; () banked
 10069  002DC0  35E9               	rlcf	(setAngle@i+1)& (0+255),w,b
 10070  002DC2  6EDA               	movwf	fsr2h,c
 10071  002DC4  0E6D               	movlw	low _servos
 10072  002DC6  26D9               	addwf	fsr2l,f,c
 10073  002DC8  0E01               	movlw	high _servos
 10074  002DCA  22DA               	addwfc	fsr2h,f,c
 10075  002DCC  0100               	movlb	0	; () banked
 10076  002DCE  51E0               	movf	setAngle@motor& (0+255),w,b
 10077  002DD0  18DE               	xorwf	postinc2,w,c
 10078  002DD2  E11C               	bnz	l6669
 10079  002DD4  0100               	movlb	0	; () banked
 10080  002DD6  51E1               	movf	(setAngle@motor+1)& (0+255),w,b
 10081  002DD8  18DE               	xorwf	postinc2,w,c
 10082  002DDA  A4D8               	btfss	status,2,c
 10083  002DDC  D017               	goto	l6669
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
 10087  002DDE  C0E2  F0C9         	movff	setAngle@angle,angleToPulse@angle
 10088  002DE2  C0E3  F0CA         	movff	setAngle@angle+1,angleToPulse@angle+1
 10089  002DE6  EC17  F010         	call	_angleToPulse	;wreg free
 10090  002DEA  90D8               	bcf	status,0,c
 10091  002DEC  0100               	movlb	0	; () banked
 10092  002DEE  35E8               	rlcf	setAngle@i& (0+255),w,b
 10093  002DF0  6ED9               	movwf	fsr2l,c
 10094  002DF2  0100               	movlb	0	; () banked
 10095  002DF4  35E9               	rlcf	(setAngle@i+1)& (0+255),w,b
 10096  002DF6  6EDA               	movwf	fsr2h,c
 10097  002DF8  0E65               	movlw	low _pulse
 10098  002DFA  26D9               	addwf	fsr2l,f,c
 10099  002DFC  0E01               	movlw	high _pulse
 10100  002DFE  22DA               	addwfc	fsr2h,f,c
 10101  002E00  0100               	movlb	0	; () banked
 10102  002E02  C0C9  FFDE         	movff	?_angleToPulse,postinc2
 10103  002E06  0100               	movlb	0	; () banked
 10104  002E08  C0CA  FFDD         	movff	?_angleToPulse+1,postdec2
 10105  002E0C                     l6669:
 10106                           
 10107                           ; BSR set to: 0
 10108                           ;servo.c: 46: }
 10109                           ;servo.c: 47: period-=pulse[i];
 10110  002E0C  90D8               	bcf	status,0,c
 10111  002E0E  0100               	movlb	0	; () banked
 10112  002E10  35E8               	rlcf	setAngle@i& (0+255),w,b
 10113  002E12  6ED9               	movwf	fsr2l,c
 10114  002E14  0100               	movlb	0	; () banked
 10115  002E16  35E9               	rlcf	(setAngle@i+1)& (0+255),w,b
 10116  002E18  6EDA               	movwf	fsr2h,c
 10117  002E1A  0E65               	movlw	low _pulse
 10118  002E1C  26D9               	addwf	fsr2l,f,c
 10119  002E1E  0E01               	movlw	high _pulse
 10120  002E20  22DA               	addwfc	fsr2h,f,c
 10121  002E22  50DE               	movf	postinc2,w,c
 10122  002E24  0100               	movlb	0	; () banked
 10123  002E26  5FE6               	subwf	setAngle@period& (0+255),f,b
 10124  002E28  50DD               	movf	postdec2,w,c
 10125  002E2A  0100               	movlb	0	; () banked
 10126  002E2C  5BE7               	subwfb	(setAngle@period+1)& (0+255),f,b
 10127                           
 10128                           ; BSR set to: 0
 10129  002E2E  0100               	movlb	0	; () banked
 10130  002E30  4BE8               	infsnz	setAngle@i& (0+255),f,b
 10131  002E32  2BE9               	incf	(setAngle@i+1)& (0+255),f,b
 10132  002E34                     l6673:
 10133                           
 10134                           ; BSR set to: 0
 10135  002E34  503C               	movf	_n,w,c
 10136  002E36  0100               	movlb	0	; () banked
 10137  002E38  5DE8               	subwf	setAngle@i& (0+255),w,b
 10138  002E3A  0100               	movlb	0	; () banked
 10139  002E3C  51E9               	movf	(setAngle@i+1)& (0+255),w,b
 10140  002E3E  0A80               	xorlw	128
 10141  002E40  0100               	movlb	0	; () banked
 10142  002E42  6FE4               	movwf	??_setAngle& (0+255),b
 10143  002E44  503D               	movf	_n+1,w,c
 10144  002E46  0A80               	xorlw	128
 10145  002E48  0100               	movlb	0	; () banked
 10146  002E4A  59E4               	subwfb	??_setAngle& (0+255),w,b
 10147  002E4C  A0D8               	btfss	status,0,c
 10148  002E4E  D7B3               	goto	l6665
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;servo.c: 48: }
 10152                           ;servo.c: 49: pulse[n] = period;
 10153                           
 10154                           ; BSR set to: 0
 10155  002E50  90D8               	bcf	status,0,c
 10156  002E52  343C               	rlcf	_n,w,c
 10157  002E54  6ED9               	movwf	fsr2l,c
 10158  002E56  343D               	rlcf	_n+1,w,c
 10159  002E58  6EDA               	movwf	fsr2h,c
 10160  002E5A  0E65               	movlw	low _pulse
 10161  002E5C  26D9               	addwf	fsr2l,f,c
 10162  002E5E  0E01               	movlw	high _pulse
 10163  002E60  22DA               	addwfc	fsr2h,f,c
 10164  002E62  C0E6  FFDE         	movff	setAngle@period,postinc2
 10165  002E66  C0E7  FFDD         	movff	setAngle@period+1,postdec2
 10166                           
 10167                           ; BSR set to: 0
 10168  002E6A  0012               	return		;funcret
 10169  002E6C                     __end_of_setAngle:
 10170                           	opt stack 0
 10171                           tblptru	equ	0xFF8
 10172                           tblptrh	equ	0xFF7
 10173                           tblptrl	equ	0xFF6
 10174                           tablat	equ	0xFF5
 10175                           prodh	equ	0xFF4
 10176                           prodl	equ	0xFF3
 10177                           intcon	equ	0xFF2
 10178                           intcon3	equ	0xFF0
 10179                           postinc0	equ	0xFEE
 10180                           wreg	equ	0xFE8
 10181                           postdec1	equ	0xFE5
 10182                           fsr1l	equ	0xFE1
 10183                           indf2	equ	0xFDF
 10184                           postinc2	equ	0xFDE
 10185                           postdec2	equ	0xFDD
 10186                           fsr2h	equ	0xFDA
 10187                           fsr2l	equ	0xFD9
 10188                           status	equ	0xFD8
 10189                           
 10190 ;; *************** function _angleToPulse *****************
 10191 ;; Defined at:
 10192 ;;		line 33 in file "servo.c"
 10193 ;; Parameters:    Size  Location     Type
 10194 ;;  angle           2   73[BANK0 ] int 
 10195 ;; Auto vars:     Size  Location     Type
 10196 ;;  a000            4   92[BANK0 ] long 
 10197 ;;  a180            4   85[BANK0 ] long 
 10198 ;;  offset          4   81[BANK0 ] long 
 10199 ;; Return value:  Size  Location     Type
 10200 ;;                  4   73[BANK0 ] long 
 10201 ;; Registers used:
 10202 ;;		wreg, status,2, status,0, cstack
 10203 ;; Tracked objects:
 10204 ;;		On entry : 0/0
 10205 ;;		On exit  : 0/0
 10206 ;;		Unchanged: 0/0
 10207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10208 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10209 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10210 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10211 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10212 ;;Total ram usage:       23 bytes
 10213 ;; Hardware stack levels used:    1
 10214 ;; Hardware stack levels required when called:    5
 10215 ;; This function calls:
 10216 ;;		___altoft
 10217 ;;		___awtoft
 10218 ;;		___ftadd
 10219 ;;		___ftdiv
 10220 ;;		___ftmul
 10221 ;;		___fttol
 10222 ;; This function is called by:
 10223 ;;		_setAngle
 10224 ;; This function uses a non-reentrant model
 10225 ;;
 10226                           
 10227                           	psect	text36
 10228  00202E                     __ptext36:
 10229                           	opt stack 0
 10230  00202E                     _angleToPulse:
 10231                           	opt stack 23
 10232                           
 10233                           ;servo.c: 34: long offset = -600;
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;incstack = 0
 10237  00202E  0EA8               	movlw	168
 10238  002030  0100               	movlb	0	; () banked
 10239  002032  6FD1               	movwf	angleToPulse@offset& (0+255),b
 10240  002034  0EFD               	movlw	253
 10241  002036  6FD2               	movwf	(angleToPulse@offset+1)& (0+255),b
 10242  002038  0EFF               	movlw	255
 10243  00203A  6FD3               	movwf	(angleToPulse@offset+2)& (0+255),b
 10244  00203C  0EFF               	movlw	255
 10245  00203E  6FD4               	movwf	(angleToPulse@offset+3)& (0+255),b
 10246                           
 10247                           ;servo.c: 35: long a000 = 1250;
 10248  002040  0EE2               	movlw	226
 10249  002042  0100               	movlb	0	; () banked
 10250  002044  6FDC               	movwf	angleToPulse@a000& (0+255),b
 10251  002046  0E04               	movlw	4
 10252  002048  6FDD               	movwf	(angleToPulse@a000+1)& (0+255),b
 10253  00204A  0E00               	movlw	0
 10254  00204C  6FDE               	movwf	(angleToPulse@a000+2)& (0+255),b
 10255  00204E  0E00               	movlw	0
 10256  002050  6FDF               	movwf	(angleToPulse@a000+3)& (0+255),b
 10257                           
 10258                           ;servo.c: 36: long a180 = 6250;
 10259  002052  0E6A               	movlw	106
 10260  002054  0100               	movlb	0	; () banked
 10261  002056  6FD5               	movwf	angleToPulse@a180& (0+255),b
 10262  002058  0E18               	movlw	24
 10263  00205A  6FD6               	movwf	(angleToPulse@a180+1)& (0+255),b
 10264  00205C  0E00               	movlw	0
 10265  00205E  6FD7               	movwf	(angleToPulse@a180+2)& (0+255),b
 10266  002060  0E00               	movlw	0
 10267  002062  6FD8               	movwf	(angleToPulse@a180+3)& (0+255),b
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 10271  002064  C0DC  F0CD         	movff	angleToPulse@a000,??_angleToPulse
 10272  002068  C0DD  F0CE         	movff	angleToPulse@a000+1,??_angleToPulse+1
 10273  00206C  C0DE  F0CF         	movff	angleToPulse@a000+2,??_angleToPulse+2
 10274  002070  C0DF  F0D0         	movff	angleToPulse@a000+3,??_angleToPulse+3
 10275  002074  0100               	movlb	0	; () banked
 10276  002076  1FCD               	comf	??_angleToPulse& (0+255),f,b
 10277  002078  1FCE               	comf	(??_angleToPulse+1)& (0+255),f,b
 10278  00207A  1FCF               	comf	(??_angleToPulse+2)& (0+255),f,b
 10279  00207C  1FD0               	comf	(??_angleToPulse+3)& (0+255),f,b
 10280  00207E  2BCD               	incf	??_angleToPulse& (0+255),f,b
 10281  002080  0E00               	movlw	0
 10282  002082  23CE               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 10283  002084  23CF               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 10284  002086  23D0               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 10285  002088  0100               	movlb	0	; () banked
 10286  00208A  51D5               	movf	angleToPulse@a180& (0+255),w,b
 10287  00208C  0100               	movlb	0	; () banked
 10288  00208E  25CD               	addwf	??_angleToPulse& (0+255),w,b
 10289  002090  6E2F               	movwf	___altoft@c,c
 10290  002092  0100               	movlb	0	; () banked
 10291  002094  51D6               	movf	(angleToPulse@a180+1)& (0+255),w,b
 10292  002096  0100               	movlb	0	; () banked
 10293  002098  21CE               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 10294  00209A  6E30               	movwf	___altoft@c+1,c
 10295  00209C  0100               	movlb	0	; () banked
 10296  00209E  51D7               	movf	(angleToPulse@a180+2)& (0+255),w,b
 10297  0020A0  0100               	movlb	0	; () banked
 10298  0020A2  21CF               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 10299  0020A4  6E31               	movwf	___altoft@c+2,c
 10300  0020A6  0100               	movlb	0	; () banked
 10301  0020A8  51D8               	movf	(angleToPulse@a180+3)& (0+255),w,b
 10302  0020AA  0100               	movlb	0	; () banked
 10303  0020AC  21D0               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 10304  0020AE  6E32               	movwf	___altoft@c+3,c
 10305  0020B0  EC54  F019         	call	___altoft	;wreg free
 10306  0020B4  C02F  F098         	movff	?___altoft,___ftmul@f2
 10307  0020B8  C030  F099         	movff	?___altoft+1,___ftmul@f2+1
 10308  0020BC  C031  F09A         	movff	?___altoft+2,___ftmul@f2+2
 10309  0020C0  0E00               	movlw	0
 10310  0020C2  0100               	movlb	0	; () banked
 10311  0020C4  6F89               	movwf	___ftdiv@f2& (0+255),b
 10312  0020C6  0E34               	movlw	52
 10313  0020C8  0100               	movlb	0	; () banked
 10314  0020CA  6F8A               	movwf	(___ftdiv@f2+1)& (0+255),b
 10315  0020CC  0E43               	movlw	67
 10316  0020CE  0100               	movlb	0	; () banked
 10317  0020D0  6F8B               	movwf	(___ftdiv@f2+2)& (0+255),b
 10318  0020D2  C0C9  F02F         	movff	angleToPulse@angle,___awtoft@c
 10319  0020D6  C0CA  F030         	movff	angleToPulse@angle+1,___awtoft@c+1
 10320  0020DA  EC22  F01C         	call	___awtoft	;wreg free
 10321  0020DE  C02F  F086         	movff	?___awtoft,___ftdiv@f1
 10322  0020E2  C030  F087         	movff	?___awtoft+1,___ftdiv@f1+1
 10323  0020E6  C031  F088         	movff	?___awtoft+2,___ftdiv@f1+2
 10324  0020EA  EC23  F012         	call	___ftdiv	;wreg free
 10325  0020EE  C086  F095         	movff	?___ftdiv,___ftmul@f1
 10326  0020F2  C087  F096         	movff	?___ftdiv+1,___ftmul@f1+1
 10327  0020F6  C088  F097         	movff	?___ftdiv+2,___ftmul@f1+2
 10328  0020FA  ECC6  F010         	call	___ftmul	;wreg free
 10329  0020FE  C095  F0B1         	movff	?___ftmul,___ftadd@f2
 10330  002102  C096  F0B2         	movff	?___ftmul+1,___ftadd@f2+1
 10331  002106  C097  F0B3         	movff	?___ftmul+2,___ftadd@f2+2
 10332  00210A  C0DC  F02F         	movff	angleToPulse@a000,___altoft@c
 10333  00210E  C0DD  F030         	movff	angleToPulse@a000+1,___altoft@c+1
 10334  002112  C0DE  F031         	movff	angleToPulse@a000+2,___altoft@c+2
 10335  002116  C0DF  F032         	movff	angleToPulse@a000+3,___altoft@c+3
 10336  00211A  EC54  F019         	call	___altoft	;wreg free
 10337  00211E  C02F  F0AE         	movff	?___altoft,___ftadd@f1
 10338  002122  C030  F0AF         	movff	?___altoft+1,___ftadd@f1+1
 10339  002126  C031  F0B0         	movff	?___altoft+2,___ftadd@f1+2
 10340  00212A  ECE3  F00E         	call	___ftadd	;wreg free
 10341  00212E  C0AE  F0D9         	movff	?___ftadd,_angleToPulse$1348
 10342  002132  C0AF  F0DA         	movff	?___ftadd+1,_angleToPulse$1348+1
 10343  002136  C0B0  F0DB         	movff	?___ftadd+2,_angleToPulse$1348+2
 10344                           
 10345                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 10346  00213A  C0D1  F02F         	movff	angleToPulse@offset,___altoft@c
 10347  00213E  C0D2  F030         	movff	angleToPulse@offset+1,___altoft@c+1
 10348  002142  C0D3  F031         	movff	angleToPulse@offset+2,___altoft@c+2
 10349  002146  C0D4  F032         	movff	angleToPulse@offset+3,___altoft@c+3
 10350  00214A  EC54  F019         	call	___altoft	;wreg free
 10351  00214E  C02F  F0B1         	movff	?___altoft,___ftadd@f2
 10352  002152  C030  F0B2         	movff	?___altoft+1,___ftadd@f2+1
 10353  002156  C031  F0B3         	movff	?___altoft+2,___ftadd@f2+2
 10354  00215A  C0D9  F0AE         	movff	_angleToPulse$1348,___ftadd@f1
 10355  00215E  C0DA  F0AF         	movff	_angleToPulse$1348+1,___ftadd@f1+1
 10356  002162  C0DB  F0B0         	movff	_angleToPulse$1348+2,___ftadd@f1+2
 10357  002166  ECE3  F00E         	call	___ftadd	;wreg free
 10358  00216A  C0AE  F0BA         	movff	?___ftadd,___fttol@f1
 10359  00216E  C0AF  F0BB         	movff	?___ftadd+1,___fttol@f1+1
 10360  002172  C0B0  F0BC         	movff	?___ftadd+2,___fttol@f1+2
 10361  002176  ECC9  F012         	call	___fttol	;wreg free
 10362  00217A  C0BA  F0C9         	movff	?___fttol,?_angleToPulse
 10363  00217E  C0BB  F0CA         	movff	?___fttol+1,?_angleToPulse+1
 10364  002182  C0BC  F0CB         	movff	?___fttol+2,?_angleToPulse+2
 10365  002186  C0BD  F0CC         	movff	?___fttol+3,?_angleToPulse+3
 10366  00218A  0012               	return	
 10367  00218C                     __end_of_angleToPulse:
 10368                           	opt stack 0
 10369                           tblptru	equ	0xFF8
 10370                           tblptrh	equ	0xFF7
 10371                           tblptrl	equ	0xFF6
 10372                           tablat	equ	0xFF5
 10373                           prodh	equ	0xFF4
 10374                           prodl	equ	0xFF3
 10375                           intcon	equ	0xFF2
 10376                           intcon3	equ	0xFF0
 10377                           postinc0	equ	0xFEE
 10378                           wreg	equ	0xFE8
 10379                           postdec1	equ	0xFE5
 10380                           fsr1l	equ	0xFE1
 10381                           indf2	equ	0xFDF
 10382                           postinc2	equ	0xFDE
 10383                           postdec2	equ	0xFDD
 10384                           fsr2h	equ	0xFDA
 10385                           fsr2l	equ	0xFD9
 10386                           status	equ	0xFD8
 10387                           
 10388 ;; *************** function ___fttol *****************
 10389 ;; Defined at:
 10390 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10391 ;; Parameters:    Size  Location     Type
 10392 ;;  f1              3   58[BANK0 ] float 
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;  lval            4   68[BANK0 ] unsigned long 
 10395 ;;  exp1            1   72[BANK0 ] unsigned char 
 10396 ;;  sign1           1   67[BANK0 ] unsigned char 
 10397 ;; Return value:  Size  Location     Type
 10398 ;;                  4   58[BANK0 ] long 
 10399 ;; Registers used:
 10400 ;;		wreg, status,2, status,0
 10401 ;; Tracked objects:
 10402 ;;		On entry : 0/0
 10403 ;;		On exit  : 0/0
 10404 ;;		Unchanged: 0/0
 10405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10406 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10407 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10408 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;Total ram usage:       15 bytes
 10411 ;; Hardware stack levels used:    1
 10412 ;; Hardware stack levels required when called:    3
 10413 ;; This function calls:
 10414 ;;		Nothing
 10415 ;; This function is called by:
 10416 ;;		_sortBattery
 10417 ;;		_angleToPulse
 10418 ;;		_printf
 10419 ;; This function uses a non-reentrant model
 10420 ;;
 10421                           
 10422                           	psect	text37
 10423  002592                     __ptext37:
 10424                           	opt stack 0
 10425  002592                     ___fttol:
 10426                           	opt stack 24
 10427                           
 10428                           ;incstack = 0
 10429  002592  C0BC  F0BE         	movff	___fttol@f1+2,??___fttol
 10430  002596  0100               	movlb	0	; () banked
 10431  002598  6BBF               	clrf	(??___fttol+1)& (0+255),b
 10432  00259A  6BC0               	clrf	(??___fttol+2)& (0+255),b
 10433  00259C  0100               	movlb	0	; () banked
 10434  00259E  35BB               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10435  0025A0  0100               	movlb	0	; () banked
 10436  0025A2  37BE               	rlcf	??___fttol& (0+255),f,b
 10437  0025A4  E301               	bnc	u6161
 10438  0025A6  81BF               	bsf	(??___fttol+1)& (0+255),0,b
 10439  0025A8                     u6161:
 10440  0025A8  0100               	movlb	0	; () banked
 10441  0025AA  51BE               	movf	??___fttol& (0+255),w,b
 10442  0025AC  0100               	movlb	0	; () banked
 10443  0025AE  6FC8               	movwf	___fttol@exp1& (0+255),b
 10444  0025B0  0100               	movlb	0	; () banked
 10445  0025B2  51C8               	movf	___fttol@exp1& (0+255),w,b
 10446  0025B4  A4D8               	btfss	status,2,c
 10447  0025B6  D00A               	goto	l6083
 10448                           
 10449                           ; BSR set to: 0
 10450  0025B8  0E00               	movlw	0
 10451  0025BA  0100               	movlb	0	; () banked
 10452  0025BC  6FBA               	movwf	?___fttol& (0+255),b
 10453  0025BE  0E00               	movlw	0
 10454  0025C0  6FBB               	movwf	(?___fttol+1)& (0+255),b
 10455  0025C2  0E00               	movlw	0
 10456  0025C4  6FBC               	movwf	(?___fttol+2)& (0+255),b
 10457  0025C6  0E00               	movlw	0
 10458  0025C8  6FBD               	movwf	(?___fttol+3)& (0+255),b
 10459                           
 10460                           ; BSR set to: 0
 10461  0025CA  0012               	return	
 10462  0025CC                     l6083:
 10463                           
 10464                           ; BSR set to: 0
 10465  0025CC  0E17               	movlw	23
 10466  0025CE  0100               	movlb	0	; () banked
 10467  0025D0  6FBE               	movwf	??___fttol& (0+255),b
 10468  0025D2  C0BA  F0BF         	movff	___fttol@f1,??___fttol+1
 10469  0025D6  C0BB  F0C0         	movff	___fttol@f1+1,??___fttol+2
 10470  0025DA  C0BC  F0C1         	movff	___fttol@f1+2,??___fttol+3
 10471  0025DE  0100               	movlb	0	; () banked
 10472  0025E0  29BE               	incf	??___fttol& (0+255),w,b
 10473  0025E2  0100               	movlb	0	; () banked
 10474  0025E4  6FC2               	movwf	(??___fttol+4)& (0+255),b
 10475  0025E6  D005               	goto	u6180
 10476  0025E8                     u6185:
 10477  0025E8  0100               	movlb	0	; () banked
 10478  0025EA  90D8               	bcf	status,0,c
 10479  0025EC  33C1               	rrcf	(??___fttol+3)& (0+255),f,b
 10480  0025EE  33C0               	rrcf	(??___fttol+2)& (0+255),f,b
 10481  0025F0  33BF               	rrcf	(??___fttol+1)& (0+255),f,b
 10482  0025F2                     u6180:
 10483  0025F2  0100               	movlb	0	; () banked
 10484  0025F4  2FC2               	decfsz	(??___fttol+4)& (0+255),f,b
 10485  0025F6  D7F8               	goto	u6185
 10486  0025F8  0100               	movlb	0	; () banked
 10487  0025FA  51BF               	movf	(??___fttol+1)& (0+255),w,b
 10488  0025FC  0100               	movlb	0	; () banked
 10489  0025FE  6FC3               	movwf	___fttol@sign1& (0+255),b
 10490                           
 10491                           ; BSR set to: 0
 10492  002600  0100               	movlb	0	; () banked
 10493  002602  8FBB               	bsf	(___fttol@f1+1)& (0+255),7,b
 10494                           
 10495                           ; BSR set to: 0
 10496  002604  0EFF               	movlw	255
 10497  002606  0100               	movlb	0	; () banked
 10498  002608  17BA               	andwf	___fttol@f1& (0+255),f,b
 10499  00260A  0EFF               	movlw	255
 10500  00260C  0100               	movlb	0	; () banked
 10501  00260E  17BB               	andwf	(___fttol@f1+1)& (0+255),f,b
 10502  002610  0E00               	movlw	0
 10503  002612  0100               	movlb	0	; () banked
 10504  002614  17BC               	andwf	(___fttol@f1+2)& (0+255),f,b
 10505                           
 10506                           ; BSR set to: 0
 10507  002616  0100               	movlb	0	; () banked
 10508  002618  51BA               	movf	___fttol@f1& (0+255),w,b
 10509  00261A  0100               	movlb	0	; () banked
 10510  00261C  6FC4               	movwf	___fttol@lval& (0+255),b
 10511  00261E  0100               	movlb	0	; () banked
 10512  002620  51BB               	movf	(___fttol@f1+1)& (0+255),w,b
 10513  002622  0100               	movlb	0	; () banked
 10514  002624  6FC5               	movwf	(___fttol@lval+1)& (0+255),b
 10515  002626  0100               	movlb	0	; () banked
 10516  002628  51BC               	movf	(___fttol@f1+2)& (0+255),w,b
 10517  00262A  0100               	movlb	0	; () banked
 10518  00262C  6FC6               	movwf	(___fttol@lval+2)& (0+255),b
 10519  00262E  0100               	movlb	0	; () banked
 10520  002630  6BC7               	clrf	(___fttol@lval+3)& (0+255),b
 10521                           
 10522                           ; BSR set to: 0
 10523  002632  0E8E               	movlw	142
 10524  002634  0100               	movlb	0	; () banked
 10525  002636  5FC8               	subwf	___fttol@exp1& (0+255),f,b
 10526                           
 10527                           ; BSR set to: 0
 10528  002638  0100               	movlb	0	; () banked
 10529  00263A  AFC8               	btfss	___fttol@exp1& (0+255),7,b
 10530  00263C  D01A               	goto	l6105
 10531                           
 10532                           ; BSR set to: 0
 10533  00263E  0100               	movlb	0	; () banked
 10534  002640  51C8               	movf	___fttol@exp1& (0+255),w,b
 10535  002642  0A80               	xorlw	128
 10536  002644  0F8F               	addlw	143
 10537  002646  B0D8               	btfsc	status,0,c
 10538  002648  D00A               	goto	l6101
 10539                           
 10540                           ; BSR set to: 0
 10541  00264A  0E00               	movlw	0
 10542  00264C  0100               	movlb	0	; () banked
 10543  00264E  6FBA               	movwf	?___fttol& (0+255),b
 10544  002650  0E00               	movlw	0
 10545  002652  6FBB               	movwf	(?___fttol+1)& (0+255),b
 10546  002654  0E00               	movlw	0
 10547  002656  6FBC               	movwf	(?___fttol+2)& (0+255),b
 10548  002658  0E00               	movlw	0
 10549  00265A  6FBD               	movwf	(?___fttol+3)& (0+255),b
 10550                           
 10551                           ; BSR set to: 0
 10552  00265C  0012               	return	
 10553  00265E                     l6101:
 10554                           
 10555                           ; BSR set to: 0
 10556  00265E  0100               	movlb	0	; () banked
 10557  002660  90D8               	bcf	status,0,c
 10558  002662  33C7               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10559  002664  33C6               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10560  002666  33C5               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10561  002668  33C4               	rrcf	___fttol@lval& (0+255),f,b
 10562                           
 10563                           ; BSR set to: 0
 10564  00266A  0100               	movlb	0	; () banked
 10565  00266C  3FC8               	incfsz	___fttol@exp1& (0+255),f,b
 10566  00266E  D7F7               	goto	l6101
 10567                           
 10568                           ; BSR set to: 0
 10569  002670  D01B               	goto	l6115
 10570  002672                     l6105:
 10571                           
 10572                           ; BSR set to: 0
 10573  002672  0E17               	movlw	23
 10574  002674  0100               	movlb	0	; () banked
 10575  002676  65C8               	cpfsgt	___fttol@exp1& (0+255),b
 10576  002678  D012               	goto	l6113
 10577                           
 10578                           ; BSR set to: 0
 10579  00267A  0E00               	movlw	0
 10580  00267C  0100               	movlb	0	; () banked
 10581  00267E  6FBA               	movwf	?___fttol& (0+255),b
 10582  002680  0E00               	movlw	0
 10583  002682  6FBB               	movwf	(?___fttol+1)& (0+255),b
 10584  002684  0E00               	movlw	0
 10585  002686  6FBC               	movwf	(?___fttol+2)& (0+255),b
 10586  002688  0E00               	movlw	0
 10587  00268A  6FBD               	movwf	(?___fttol+3)& (0+255),b
 10588                           
 10589                           ; BSR set to: 0
 10590  00268C  0012               	return	
 10591  00268E                     l6111:
 10592                           
 10593                           ; BSR set to: 0
 10594  00268E  0100               	movlb	0	; () banked
 10595  002690  90D8               	bcf	status,0,c
 10596  002692  37C4               	rlcf	___fttol@lval& (0+255),f,b
 10597  002694  37C5               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10598  002696  37C6               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10599  002698  37C7               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10600  00269A  0100               	movlb	0	; () banked
 10601  00269C  07C8               	decf	___fttol@exp1& (0+255),f,b
 10602  00269E                     l6113:
 10603                           
 10604                           ; BSR set to: 0
 10605  00269E  0100               	movlb	0	; () banked
 10606  0026A0  51C8               	movf	___fttol@exp1& (0+255),w,b
 10607  0026A2  0100               	movlb	0	; () banked
 10608  0026A4  A4D8               	btfss	status,2,c
 10609  0026A6  D7F3               	goto	l6111
 10610  0026A8                     l6115:
 10611                           
 10612                           ; BSR set to: 0
 10613  0026A8  0100               	movlb	0	; () banked
 10614  0026AA  51C3               	movf	___fttol@sign1& (0+255),w,b
 10615  0026AC  0100               	movlb	0	; () banked
 10616  0026AE  B4D8               	btfsc	status,2,c
 10617  0026B0  D009               	goto	l6119
 10618                           
 10619                           ; BSR set to: 0
 10620  0026B2  0100               	movlb	0	; () banked
 10621  0026B4  1FC7               	comf	(___fttol@lval+3)& (0+255),f,b
 10622  0026B6  1FC6               	comf	(___fttol@lval+2)& (0+255),f,b
 10623  0026B8  1FC5               	comf	(___fttol@lval+1)& (0+255),f,b
 10624  0026BA  6DC4               	negf	___fttol@lval& (0+255),b
 10625  0026BC  0E00               	movlw	0
 10626  0026BE  23C5               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10627  0026C0  23C6               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10628  0026C2  23C7               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10629  0026C4                     l6119:
 10630                           
 10631                           ; BSR set to: 0
 10632  0026C4  C0C4  F0BA         	movff	___fttol@lval,?___fttol
 10633  0026C8  C0C5  F0BB         	movff	___fttol@lval+1,?___fttol+1
 10634  0026CC  C0C6  F0BC         	movff	___fttol@lval+2,?___fttol+2
 10635  0026D0  C0C7  F0BD         	movff	___fttol@lval+3,?___fttol+3
 10636  0026D4  0012               	return	
 10637  0026D6                     __end_of___fttol:
 10638                           	opt stack 0
 10639                           tblptru	equ	0xFF8
 10640                           tblptrh	equ	0xFF7
 10641                           tblptrl	equ	0xFF6
 10642                           tablat	equ	0xFF5
 10643                           prodh	equ	0xFF4
 10644                           prodl	equ	0xFF3
 10645                           intcon	equ	0xFF2
 10646                           intcon3	equ	0xFF0
 10647                           postinc0	equ	0xFEE
 10648                           wreg	equ	0xFE8
 10649                           postdec1	equ	0xFE5
 10650                           fsr1l	equ	0xFE1
 10651                           indf2	equ	0xFDF
 10652                           postinc2	equ	0xFDE
 10653                           postdec2	equ	0xFDD
 10654                           fsr2h	equ	0xFDA
 10655                           fsr2l	equ	0xFD9
 10656                           status	equ	0xFD8
 10657                           
 10658 ;; *************** function ___ftmul *****************
 10659 ;; Defined at:
 10660 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10661 ;; Parameters:    Size  Location     Type
 10662 ;;  f1              3   21[BANK0 ] float 
 10663 ;;  f2              3   24[BANK0 ] float 
 10664 ;; Auto vars:     Size  Location     Type
 10665 ;;  f3_as_produc    3   31[BANK0 ] unsigned um
 10666 ;;  sign            1   35[BANK0 ] unsigned char 
 10667 ;;  cntr            1   34[BANK0 ] unsigned char 
 10668 ;;  exp             1   30[BANK0 ] unsigned char 
 10669 ;; Return value:  Size  Location     Type
 10670 ;;                  3   21[BANK0 ] float 
 10671 ;; Registers used:
 10672 ;;		wreg, status,2, status,0, cstack
 10673 ;; Tracked objects:
 10674 ;;		On entry : 0/0
 10675 ;;		On exit  : 0/0
 10676 ;;		Unchanged: 0/0
 10677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10678 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10679 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10680 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10681 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10682 ;;Total ram usage:       15 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; Hardware stack levels required when called:    4
 10685 ;; This function calls:
 10686 ;;		___ftpack
 10687 ;; This function is called by:
 10688 ;;		_sortBattery
 10689 ;;		_angleToPulse
 10690 ;;		_fround
 10691 ;;		_scale
 10692 ;;		_printf
 10693 ;; This function uses a non-reentrant model
 10694 ;;
 10695                           
 10696                           	psect	text38
 10697  00218C                     __ptext38:
 10698                           	opt stack 0
 10699  00218C                     ___ftmul:
 10700                           	opt stack 23
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;incstack = 0
 10704  00218C  C097  F09B         	movff	___ftmul@f1+2,??___ftmul
 10705  002190  0100               	movlb	0	; () banked
 10706  002192  6B9C               	clrf	(??___ftmul+1)& (0+255),b
 10707  002194  6B9D               	clrf	(??___ftmul+2)& (0+255),b
 10708  002196  0100               	movlb	0	; () banked
 10709  002198  3596               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10710  00219A  0100               	movlb	0	; () banked
 10711  00219C  379B               	rlcf	??___ftmul& (0+255),f,b
 10712  00219E  E301               	bnc	u5591
 10713  0021A0  819C               	bsf	(??___ftmul+1)& (0+255),0,b
 10714  0021A2                     u5591:
 10715  0021A2  0100               	movlb	0	; () banked
 10716  0021A4  519B               	movf	??___ftmul& (0+255),w,b
 10717  0021A6  0100               	movlb	0	; () banked
 10718  0021A8  6F9E               	movwf	___ftmul@exp& (0+255),b
 10719  0021AA  0100               	movlb	0	; () banked
 10720  0021AC  519E               	movf	___ftmul@exp& (0+255),w,b
 10721  0021AE  A4D8               	btfss	status,2,c
 10722  0021B0  D00A               	goto	l5655
 10723                           
 10724                           ; BSR set to: 0
 10725  0021B2  0E00               	movlw	0
 10726  0021B4  0100               	movlb	0	; () banked
 10727  0021B6  6F95               	movwf	?___ftmul& (0+255),b
 10728  0021B8  0E00               	movlw	0
 10729  0021BA  0100               	movlb	0	; () banked
 10730  0021BC  6F96               	movwf	(?___ftmul+1)& (0+255),b
 10731  0021BE  0E00               	movlw	0
 10732  0021C0  0100               	movlb	0	; () banked
 10733  0021C2  6F97               	movwf	(?___ftmul+2)& (0+255),b
 10734                           
 10735                           ; BSR set to: 0
 10736  0021C4  0012               	return	
 10737  0021C6                     l5655:
 10738                           
 10739                           ; BSR set to: 0
 10740  0021C6  C09A  F09B         	movff	___ftmul@f2+2,??___ftmul
 10741  0021CA  0100               	movlb	0	; () banked
 10742  0021CC  6B9C               	clrf	(??___ftmul+1)& (0+255),b
 10743  0021CE  6B9D               	clrf	(??___ftmul+2)& (0+255),b
 10744  0021D0  0100               	movlb	0	; () banked
 10745  0021D2  3599               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10746  0021D4  0100               	movlb	0	; () banked
 10747  0021D6  379B               	rlcf	??___ftmul& (0+255),f,b
 10748  0021D8  E301               	bnc	u5611
 10749  0021DA  819C               	bsf	(??___ftmul+1)& (0+255),0,b
 10750  0021DC                     u5611:
 10751  0021DC  0100               	movlb	0	; () banked
 10752  0021DE  519B               	movf	??___ftmul& (0+255),w,b
 10753  0021E0  0100               	movlb	0	; () banked
 10754  0021E2  6FA3               	movwf	___ftmul@sign& (0+255),b
 10755  0021E4  0100               	movlb	0	; () banked
 10756  0021E6  51A3               	movf	___ftmul@sign& (0+255),w,b
 10757  0021E8  A4D8               	btfss	status,2,c
 10758  0021EA  D00A               	goto	l5661
 10759                           
 10760                           ; BSR set to: 0
 10761  0021EC  0E00               	movlw	0
 10762  0021EE  0100               	movlb	0	; () banked
 10763  0021F0  6F95               	movwf	?___ftmul& (0+255),b
 10764  0021F2  0E00               	movlw	0
 10765  0021F4  0100               	movlb	0	; () banked
 10766  0021F6  6F96               	movwf	(?___ftmul+1)& (0+255),b
 10767  0021F8  0E00               	movlw	0
 10768  0021FA  0100               	movlb	0	; () banked
 10769  0021FC  6F97               	movwf	(?___ftmul+2)& (0+255),b
 10770                           
 10771                           ; BSR set to: 0
 10772  0021FE  0012               	return	
 10773  002200                     l5661:
 10774                           
 10775                           ; BSR set to: 0
 10776  002200  0100               	movlb	0	; () banked
 10777  002202  51A3               	movf	___ftmul@sign& (0+255),w,b
 10778  002204  0F7B               	addlw	123
 10779  002206  0100               	movlb	0	; () banked
 10780  002208  279E               	addwf	___ftmul@exp& (0+255),f,b
 10781                           
 10782                           ; BSR set to: 0
 10783  00220A  C097  F0A3         	movff	___ftmul@f1+2,___ftmul@sign
 10784  00220E  0100               	movlb	0	; () banked
 10785  002210  519A               	movf	(___ftmul@f2+2)& (0+255),w,b
 10786  002212  0100               	movlb	0	; () banked
 10787  002214  1BA3               	xorwf	___ftmul@sign& (0+255),f,b
 10788  002216  0E80               	movlw	128
 10789  002218  0100               	movlb	0	; () banked
 10790  00221A  17A3               	andwf	___ftmul@sign& (0+255),f,b
 10791                           
 10792                           ; BSR set to: 0
 10793  00221C  0100               	movlb	0	; () banked
 10794  00221E  8F96               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10795                           
 10796                           ; BSR set to: 0
 10797  002220  0100               	movlb	0	; () banked
 10798  002222  8F99               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10799                           
 10800                           ; BSR set to: 0
 10801  002224  0EFF               	movlw	255
 10802  002226  0100               	movlb	0	; () banked
 10803  002228  1798               	andwf	___ftmul@f2& (0+255),f,b
 10804  00222A  0EFF               	movlw	255
 10805  00222C  0100               	movlb	0	; () banked
 10806  00222E  1799               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10807  002230  0E00               	movlw	0
 10808  002232  0100               	movlb	0	; () banked
 10809  002234  179A               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10810                           
 10811                           ; BSR set to: 0
 10812  002236  0E00               	movlw	0
 10813  002238  0100               	movlb	0	; () banked
 10814  00223A  6F9F               	movwf	___ftmul@f3_as_product& (0+255),b
 10815  00223C  0E00               	movlw	0
 10816  00223E  0100               	movlb	0	; () banked
 10817  002240  6FA0               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10818  002242  0E00               	movlw	0
 10819  002244  0100               	movlb	0	; () banked
 10820  002246  6FA1               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10821                           
 10822                           ; BSR set to: 0
 10823  002248  0E07               	movlw	7
 10824  00224A  0100               	movlb	0	; () banked
 10825  00224C  6FA2               	movwf	___ftmul@cntr& (0+255),b
 10826  00224E                     l5675:
 10827                           
 10828                           ; BSR set to: 0
 10829  00224E  0100               	movlb	0	; () banked
 10830  002250  A195               	btfss	___ftmul@f1& (0+255),0,b
 10831  002252  D00C               	goto	l5679
 10832                           
 10833                           ; BSR set to: 0
 10834  002254  0100               	movlb	0	; () banked
 10835  002256  5198               	movf	___ftmul@f2& (0+255),w,b
 10836  002258  0100               	movlb	0	; () banked
 10837  00225A  279F               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10838  00225C  0100               	movlb	0	; () banked
 10839  00225E  5199               	movf	(___ftmul@f2+1)& (0+255),w,b
 10840  002260  0100               	movlb	0	; () banked
 10841  002262  23A0               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10842  002264  0100               	movlb	0	; () banked
 10843  002266  519A               	movf	(___ftmul@f2+2)& (0+255),w,b
 10844  002268  0100               	movlb	0	; () banked
 10845  00226A  23A1               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10846  00226C                     l5679:
 10847                           
 10848                           ; BSR set to: 0
 10849  00226C  0100               	movlb	0	; () banked
 10850  00226E  90D8               	bcf	status,0,c
 10851  002270  3397               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10852  002272  3396               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10853  002274  3395               	rrcf	___ftmul@f1& (0+255),f,b
 10854  002276  0100               	movlb	0	; () banked
 10855  002278  90D8               	bcf	status,0,c
 10856  00227A  3798               	rlcf	___ftmul@f2& (0+255),f,b
 10857  00227C  3799               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10858  00227E  379A               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10859                           
 10860                           ; BSR set to: 0
 10861  002280  0100               	movlb	0	; () banked
 10862  002282  2FA2               	decfsz	___ftmul@cntr& (0+255),f,b
 10863  002284  D7E4               	goto	l5675
 10864                           
 10865                           ; BSR set to: 0
 10866                           
 10867                           ; BSR set to: 0
 10868  002286  0E09               	movlw	9
 10869  002288  0100               	movlb	0	; () banked
 10870  00228A  6FA2               	movwf	___ftmul@cntr& (0+255),b
 10871  00228C                     l5685:
 10872                           
 10873                           ; BSR set to: 0
 10874  00228C  0100               	movlb	0	; () banked
 10875  00228E  A195               	btfss	___ftmul@f1& (0+255),0,b
 10876  002290  D00C               	goto	l5689
 10877                           
 10878                           ; BSR set to: 0
 10879  002292  0100               	movlb	0	; () banked
 10880  002294  5198               	movf	___ftmul@f2& (0+255),w,b
 10881  002296  0100               	movlb	0	; () banked
 10882  002298  279F               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10883  00229A  0100               	movlb	0	; () banked
 10884  00229C  5199               	movf	(___ftmul@f2+1)& (0+255),w,b
 10885  00229E  0100               	movlb	0	; () banked
 10886  0022A0  23A0               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10887  0022A2  0100               	movlb	0	; () banked
 10888  0022A4  519A               	movf	(___ftmul@f2+2)& (0+255),w,b
 10889  0022A6  0100               	movlb	0	; () banked
 10890  0022A8  23A1               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10891  0022AA                     l5689:
 10892                           
 10893                           ; BSR set to: 0
 10894  0022AA  0100               	movlb	0	; () banked
 10895  0022AC  90D8               	bcf	status,0,c
 10896  0022AE  3397               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10897  0022B0  3396               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10898  0022B2  3395               	rrcf	___ftmul@f1& (0+255),f,b
 10899  0022B4  0100               	movlb	0	; () banked
 10900  0022B6  90D8               	bcf	status,0,c
 10901  0022B8  33A1               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10902  0022BA  33A0               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10903  0022BC  339F               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10904                           
 10905                           ; BSR set to: 0
 10906  0022BE  0100               	movlb	0	; () banked
 10907  0022C0  2FA2               	decfsz	___ftmul@cntr& (0+255),f,b
 10908  0022C2  D7E4               	goto	l5685
 10909                           
 10910                           ; BSR set to: 0
 10911                           
 10912                           ; BSR set to: 0
 10913  0022C4  C09F  F027         	movff	___ftmul@f3_as_product,___ftpack@arg
 10914  0022C8  C0A0  F028         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10915  0022CC  C0A1  F029         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10916  0022D0  C09E  F02A         	movff	___ftmul@exp,___ftpack@exp
 10917  0022D4  C0A3  F02B         	movff	___ftmul@sign,___ftpack@sign
 10918  0022D8  EC62  F018         	call	___ftpack	;wreg free
 10919  0022DC  C027  F095         	movff	?___ftpack,?___ftmul
 10920  0022E0  C028  F096         	movff	?___ftpack+1,?___ftmul+1
 10921  0022E4  C029  F097         	movff	?___ftpack+2,?___ftmul+2
 10922  0022E8  0012               	return	
 10923  0022EA                     __end_of___ftmul:
 10924                           	opt stack 0
 10925                           tblptru	equ	0xFF8
 10926                           tblptrh	equ	0xFF7
 10927                           tblptrl	equ	0xFF6
 10928                           tablat	equ	0xFF5
 10929                           prodh	equ	0xFF4
 10930                           prodl	equ	0xFF3
 10931                           intcon	equ	0xFF2
 10932                           intcon3	equ	0xFF0
 10933                           postinc0	equ	0xFEE
 10934                           wreg	equ	0xFE8
 10935                           postdec1	equ	0xFE5
 10936                           fsr1l	equ	0xFE1
 10937                           indf2	equ	0xFDF
 10938                           postinc2	equ	0xFDE
 10939                           postdec2	equ	0xFDD
 10940                           fsr2h	equ	0xFDA
 10941                           fsr2l	equ	0xFD9
 10942                           status	equ	0xFD8
 10943                           
 10944 ;; *************** function ___ftdiv *****************
 10945 ;; Defined at:
 10946 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10947 ;; Parameters:    Size  Location     Type
 10948 ;;  f1              3    6[BANK0 ] float 
 10949 ;;  f2              3    9[BANK0 ] float 
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;  f3              3   16[BANK0 ] float 
 10952 ;;  sign            1   20[BANK0 ] unsigned char 
 10953 ;;  exp             1   19[BANK0 ] unsigned char 
 10954 ;;  cntr            1   15[BANK0 ] unsigned char 
 10955 ;; Return value:  Size  Location     Type
 10956 ;;                  3    6[BANK0 ] float 
 10957 ;; Registers used:
 10958 ;;		wreg, status,2, status,0, cstack
 10959 ;; Tracked objects:
 10960 ;;		On entry : 0/0
 10961 ;;		On exit  : 0/0
 10962 ;;		Unchanged: 0/0
 10963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10964 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10965 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10966 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10967 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10968 ;;Total ram usage:       15 bytes
 10969 ;; Hardware stack levels used:    1
 10970 ;; Hardware stack levels required when called:    4
 10971 ;; This function calls:
 10972 ;;		___ftpack
 10973 ;; This function is called by:
 10974 ;;		_sortBattery
 10975 ;;		_angleToPulse
 10976 ;; This function uses a non-reentrant model
 10977 ;;
 10978                           
 10979                           	psect	text39
 10980  002446                     __ptext39:
 10981                           	opt stack 0
 10982  002446                     ___ftdiv:
 10983                           	opt stack 23
 10984                           
 10985                           ;incstack = 0
 10986  002446  C088  F08C         	movff	___ftdiv@f1+2,??___ftdiv
 10987  00244A  0100               	movlb	0	; () banked
 10988  00244C  6B8D               	clrf	(??___ftdiv+1)& (0+255),b
 10989  00244E  6B8E               	clrf	(??___ftdiv+2)& (0+255),b
 10990  002450  0100               	movlb	0	; () banked
 10991  002452  3587               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10992  002454  0100               	movlb	0	; () banked
 10993  002456  378C               	rlcf	??___ftdiv& (0+255),f,b
 10994  002458  E301               	bnc	u6051
 10995  00245A  818D               	bsf	(??___ftdiv+1)& (0+255),0,b
 10996  00245C                     u6051:
 10997  00245C  0100               	movlb	0	; () banked
 10998  00245E  518C               	movf	??___ftdiv& (0+255),w,b
 10999  002460  0100               	movlb	0	; () banked
 11000  002462  6F93               	movwf	___ftdiv@exp& (0+255),b
 11001  002464  0100               	movlb	0	; () banked
 11002  002466  5193               	movf	___ftdiv@exp& (0+255),w,b
 11003  002468  A4D8               	btfss	status,2,c
 11004  00246A  D00A               	goto	l5995
 11005                           
 11006                           ; BSR set to: 0
 11007  00246C  0E00               	movlw	0
 11008  00246E  0100               	movlb	0	; () banked
 11009  002470  6F86               	movwf	?___ftdiv& (0+255),b
 11010  002472  0E00               	movlw	0
 11011  002474  0100               	movlb	0	; () banked
 11012  002476  6F87               	movwf	(?___ftdiv+1)& (0+255),b
 11013  002478  0E00               	movlw	0
 11014  00247A  0100               	movlb	0	; () banked
 11015  00247C  6F88               	movwf	(?___ftdiv+2)& (0+255),b
 11016                           
 11017                           ; BSR set to: 0
 11018  00247E  0012               	return	
 11019  002480                     l5995:
 11020                           
 11021                           ; BSR set to: 0
 11022  002480  C08B  F08C         	movff	___ftdiv@f2+2,??___ftdiv
 11023  002484  0100               	movlb	0	; () banked
 11024  002486  6B8D               	clrf	(??___ftdiv+1)& (0+255),b
 11025  002488  6B8E               	clrf	(??___ftdiv+2)& (0+255),b
 11026  00248A  0100               	movlb	0	; () banked
 11027  00248C  358A               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 11028  00248E  0100               	movlb	0	; () banked
 11029  002490  378C               	rlcf	??___ftdiv& (0+255),f,b
 11030  002492  E301               	bnc	u6071
 11031  002494  818D               	bsf	(??___ftdiv+1)& (0+255),0,b
 11032  002496                     u6071:
 11033  002496  0100               	movlb	0	; () banked
 11034  002498  518C               	movf	??___ftdiv& (0+255),w,b
 11035  00249A  0100               	movlb	0	; () banked
 11036  00249C  6F94               	movwf	___ftdiv@sign& (0+255),b
 11037  00249E  0100               	movlb	0	; () banked
 11038  0024A0  5194               	movf	___ftdiv@sign& (0+255),w,b
 11039  0024A2  A4D8               	btfss	status,2,c
 11040  0024A4  D00A               	goto	l6001
 11041                           
 11042                           ; BSR set to: 0
 11043  0024A6  0E00               	movlw	0
 11044  0024A8  0100               	movlb	0	; () banked
 11045  0024AA  6F86               	movwf	?___ftdiv& (0+255),b
 11046  0024AC  0E00               	movlw	0
 11047  0024AE  0100               	movlb	0	; () banked
 11048  0024B0  6F87               	movwf	(?___ftdiv+1)& (0+255),b
 11049  0024B2  0E00               	movlw	0
 11050  0024B4  0100               	movlb	0	; () banked
 11051  0024B6  6F88               	movwf	(?___ftdiv+2)& (0+255),b
 11052                           
 11053                           ; BSR set to: 0
 11054  0024B8  0012               	return	
 11055  0024BA                     l6001:
 11056                           
 11057                           ; BSR set to: 0
 11058  0024BA  0E00               	movlw	0
 11059  0024BC  0100               	movlb	0	; () banked
 11060  0024BE  6F90               	movwf	___ftdiv@f3& (0+255),b
 11061  0024C0  0E00               	movlw	0
 11062  0024C2  0100               	movlb	0	; () banked
 11063  0024C4  6F91               	movwf	(___ftdiv@f3+1)& (0+255),b
 11064  0024C6  0E00               	movlw	0
 11065  0024C8  0100               	movlb	0	; () banked
 11066  0024CA  6F92               	movwf	(___ftdiv@f3+2)& (0+255),b
 11067                           
 11068                           ; BSR set to: 0
 11069  0024CC  0100               	movlb	0	; () banked
 11070  0024CE  5194               	movf	___ftdiv@sign& (0+255),w,b
 11071  0024D0  0F89               	addlw	137
 11072  0024D2  0100               	movlb	0	; () banked
 11073  0024D4  5F93               	subwf	___ftdiv@exp& (0+255),f,b
 11074                           
 11075                           ; BSR set to: 0
 11076  0024D6  C088  F094         	movff	___ftdiv@f1+2,___ftdiv@sign
 11077                           
 11078                           ; BSR set to: 0
 11079  0024DA  0100               	movlb	0	; () banked
 11080  0024DC  518B               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11081  0024DE  0100               	movlb	0	; () banked
 11082  0024E0  1B94               	xorwf	___ftdiv@sign& (0+255),f,b
 11083                           
 11084                           ; BSR set to: 0
 11085  0024E2  0E80               	movlw	128
 11086  0024E4  0100               	movlb	0	; () banked
 11087  0024E6  1794               	andwf	___ftdiv@sign& (0+255),f,b
 11088                           
 11089                           ; BSR set to: 0
 11090  0024E8  0100               	movlb	0	; () banked
 11091  0024EA  8F87               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 11092                           
 11093                           ; BSR set to: 0
 11094  0024EC  0EFF               	movlw	255
 11095  0024EE  0100               	movlb	0	; () banked
 11096  0024F0  1786               	andwf	___ftdiv@f1& (0+255),f,b
 11097  0024F2  0EFF               	movlw	255
 11098  0024F4  0100               	movlb	0	; () banked
 11099  0024F6  1787               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 11100  0024F8  0E00               	movlw	0
 11101  0024FA  0100               	movlb	0	; () banked
 11102  0024FC  1788               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 11103                           
 11104                           ; BSR set to: 0
 11105  0024FE  0100               	movlb	0	; () banked
 11106  002500  8F8A               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 11107                           
 11108                           ; BSR set to: 0
 11109  002502  0EFF               	movlw	255
 11110  002504  0100               	movlb	0	; () banked
 11111  002506  1789               	andwf	___ftdiv@f2& (0+255),f,b
 11112  002508  0EFF               	movlw	255
 11113  00250A  0100               	movlb	0	; () banked
 11114  00250C  178A               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 11115  00250E  0E00               	movlw	0
 11116  002510  0100               	movlb	0	; () banked
 11117  002512  178B               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 11118                           
 11119                           ; BSR set to: 0
 11120  002514  0E18               	movlw	24
 11121  002516  0100               	movlb	0	; () banked
 11122  002518  6F8F               	movwf	___ftdiv@cntr& (0+255),b
 11123  00251A                     l6021:
 11124                           
 11125                           ; BSR set to: 0
 11126  00251A  0100               	movlb	0	; () banked
 11127  00251C  90D8               	bcf	status,0,c
 11128  00251E  3790               	rlcf	___ftdiv@f3& (0+255),f,b
 11129  002520  3791               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 11130  002522  3792               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 11131                           
 11132                           ; BSR set to: 0
 11133  002524  0100               	movlb	0	; () banked
 11134  002526  5189               	movf	___ftdiv@f2& (0+255),w,b
 11135  002528  0100               	movlb	0	; () banked
 11136  00252A  5D86               	subwf	___ftdiv@f1& (0+255),w,b
 11137  00252C  0100               	movlb	0	; () banked
 11138  00252E  518A               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11139  002530  0100               	movlb	0	; () banked
 11140  002532  5987               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 11141  002534  0100               	movlb	0	; () banked
 11142  002536  518B               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11143  002538  0100               	movlb	0	; () banked
 11144  00253A  5988               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 11145  00253C  A0D8               	btfss	status,0,c
 11146  00253E  D00E               	goto	l1120
 11147                           
 11148                           ; BSR set to: 0
 11149  002540  0100               	movlb	0	; () banked
 11150  002542  5189               	movf	___ftdiv@f2& (0+255),w,b
 11151  002544  0100               	movlb	0	; () banked
 11152  002546  5F86               	subwf	___ftdiv@f1& (0+255),f,b
 11153  002548  0100               	movlb	0	; () banked
 11154  00254A  518A               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11155  00254C  0100               	movlb	0	; () banked
 11156  00254E  5B87               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 11157  002550  0100               	movlb	0	; () banked
 11158  002552  518B               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11159  002554  0100               	movlb	0	; () banked
 11160  002556  5B88               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 11161                           
 11162                           ; BSR set to: 0
 11163  002558  0100               	movlb	0	; () banked
 11164  00255A  8190               	bsf	___ftdiv@f3& (0+255),0,b
 11165  00255C                     l1120:
 11166                           
 11167                           ; BSR set to: 0
 11168  00255C  0100               	movlb	0	; () banked
 11169  00255E  90D8               	bcf	status,0,c
 11170  002560  3786               	rlcf	___ftdiv@f1& (0+255),f,b
 11171  002562  3787               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 11172  002564  3788               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 11173                           
 11174                           ; BSR set to: 0
 11175  002566  0100               	movlb	0	; () banked
 11176  002568  2F8F               	decfsz	___ftdiv@cntr& (0+255),f,b
 11177  00256A  D7D7               	goto	l6021
 11178                           
 11179                           ; BSR set to: 0
 11180                           
 11181                           ; BSR set to: 0
 11182  00256C  C090  F027         	movff	___ftdiv@f3,___ftpack@arg
 11183  002570  C091  F028         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11184  002574  C092  F029         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11185  002578  C093  F02A         	movff	___ftdiv@exp,___ftpack@exp
 11186  00257C  C094  F02B         	movff	___ftdiv@sign,___ftpack@sign
 11187  002580  EC62  F018         	call	___ftpack	;wreg free
 11188  002584  C027  F086         	movff	?___ftpack,?___ftdiv
 11189  002588  C028  F087         	movff	?___ftpack+1,?___ftdiv+1
 11190  00258C  C029  F088         	movff	?___ftpack+2,?___ftdiv+2
 11191  002590  0012               	return	
 11192  002592                     __end_of___ftdiv:
 11193                           	opt stack 0
 11194                           tblptru	equ	0xFF8
 11195                           tblptrh	equ	0xFF7
 11196                           tblptrl	equ	0xFF6
 11197                           tablat	equ	0xFF5
 11198                           prodh	equ	0xFF4
 11199                           prodl	equ	0xFF3
 11200                           intcon	equ	0xFF2
 11201                           intcon3	equ	0xFF0
 11202                           postinc0	equ	0xFEE
 11203                           wreg	equ	0xFE8
 11204                           postdec1	equ	0xFE5
 11205                           fsr1l	equ	0xFE1
 11206                           indf2	equ	0xFDF
 11207                           postinc2	equ	0xFDE
 11208                           postdec2	equ	0xFDD
 11209                           fsr2h	equ	0xFDA
 11210                           fsr2l	equ	0xFD9
 11211                           status	equ	0xFD8
 11212                           
 11213 ;; *************** function ___ftadd *****************
 11214 ;; Defined at:
 11215 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11216 ;; Parameters:    Size  Location     Type
 11217 ;;  f1              3   46[BANK0 ] float 
 11218 ;;  f2              3   49[BANK0 ] float 
 11219 ;; Auto vars:     Size  Location     Type
 11220 ;;  exp1            1   57[BANK0 ] unsigned char 
 11221 ;;  exp2            1   56[BANK0 ] unsigned char 
 11222 ;;  sign            1   55[BANK0 ] unsigned char 
 11223 ;; Return value:  Size  Location     Type
 11224 ;;                  3   46[BANK0 ] float 
 11225 ;; Registers used:
 11226 ;;		wreg, status,2, status,0, cstack
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11232 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11233 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11234 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11235 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11236 ;;Total ram usage:       12 bytes
 11237 ;; Hardware stack levels used:    1
 11238 ;; Hardware stack levels required when called:    4
 11239 ;; This function calls:
 11240 ;;		___ftpack
 11241 ;; This function is called by:
 11242 ;;		_angleToPulse
 11243 ;;		_printf
 11244 ;;		___ftsub
 11245 ;; This function uses a non-reentrant model
 11246 ;;
 11247                           
 11248                           	psect	text40
 11249  001DC6                     __ptext40:
 11250                           	opt stack 0
 11251  001DC6                     ___ftadd:
 11252                           	opt stack 23
 11253                           
 11254                           ;incstack = 0
 11255  001DC6  C0B0  F0B4         	movff	___ftadd@f1+2,??___ftadd
 11256  001DCA  0100               	movlb	0	; () banked
 11257  001DCC  6BB5               	clrf	(??___ftadd+1)& (0+255),b
 11258  001DCE  6BB6               	clrf	(??___ftadd+2)& (0+255),b
 11259  001DD0  0100               	movlb	0	; () banked
 11260  001DD2  35AF               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11261  001DD4  0100               	movlb	0	; () banked
 11262  001DD6  37B4               	rlcf	??___ftadd& (0+255),f,b
 11263  001DD8  E301               	bnc	u5381
 11264  001DDA  81B5               	bsf	(??___ftadd+1)& (0+255),0,b
 11265  001DDC                     u5381:
 11266  001DDC  0100               	movlb	0	; () banked
 11267  001DDE  51B4               	movf	??___ftadd& (0+255),w,b
 11268  001DE0  0100               	movlb	0	; () banked
 11269  001DE2  6FB9               	movwf	___ftadd@exp1& (0+255),b
 11270  001DE4  C0B3  F0B4         	movff	___ftadd@f2+2,??___ftadd
 11271  001DE8  0100               	movlb	0	; () banked
 11272  001DEA  6BB5               	clrf	(??___ftadd+1)& (0+255),b
 11273  001DEC  6BB6               	clrf	(??___ftadd+2)& (0+255),b
 11274  001DEE  0100               	movlb	0	; () banked
 11275  001DF0  35B2               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11276  001DF2  0100               	movlb	0	; () banked
 11277  001DF4  37B4               	rlcf	??___ftadd& (0+255),f,b
 11278  001DF6  E301               	bnc	u5391
 11279  001DF8  81B5               	bsf	(??___ftadd+1)& (0+255),0,b
 11280  001DFA                     u5391:
 11281  001DFA  0100               	movlb	0	; () banked
 11282  001DFC  51B4               	movf	??___ftadd& (0+255),w,b
 11283  001DFE  0100               	movlb	0	; () banked
 11284  001E00  6FB8               	movwf	___ftadd@exp2& (0+255),b
 11285                           
 11286                           ; BSR set to: 0
 11287  001E02  0100               	movlb	0	; () banked
 11288  001E04  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11289  001E06  0100               	movlb	0	; () banked
 11290  001E08  B4D8               	btfsc	status,2,c
 11291  001E0A  D011               	goto	l1085
 11292                           
 11293                           ; BSR set to: 0
 11294  001E0C  0100               	movlb	0	; () banked
 11295  001E0E  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11296  001E10  0100               	movlb	0	; () banked
 11297  001E12  5DB9               	subwf	___ftadd@exp1& (0+255),w,b
 11298  001E14  B0D8               	btfsc	status,0,c
 11299  001E16  D012               	goto	l5587
 11300                           
 11301                           ; BSR set to: 0
 11302  001E18  0100               	movlb	0	; () banked
 11303  001E1A  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11304  001E1C  0800               	sublw	0
 11305  001E1E  0100               	movlb	0	; () banked
 11306  001E20  25B8               	addwf	___ftadd@exp2& (0+255),w,b
 11307  001E22  0100               	movlb	0	; () banked
 11308  001E24  6FB4               	movwf	??___ftadd& (0+255),b
 11309  001E26  0E18               	movlw	24
 11310  001E28  0100               	movlb	0	; () banked
 11311  001E2A  65B4               	cpfsgt	??___ftadd& (0+255),b
 11312  001E2C  D007               	goto	l5587
 11313  001E2E                     l1085:
 11314                           
 11315                           ; BSR set to: 0
 11316  001E2E  C0B1  F0AE         	movff	___ftadd@f2,?___ftadd
 11317  001E32  C0B2  F0AF         	movff	___ftadd@f2+1,?___ftadd+1
 11318  001E36  C0B3  F0B0         	movff	___ftadd@f2+2,?___ftadd+2
 11319  001E3A  0012               	return	
 11320  001E3C                     l5587:
 11321                           
 11322                           ; BSR set to: 0
 11323  001E3C  0100               	movlb	0	; () banked
 11324  001E3E  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11325  001E40  0100               	movlb	0	; () banked
 11326  001E42  B4D8               	btfsc	status,2,c
 11327  001E44  D011               	goto	l1089
 11328                           
 11329                           ; BSR set to: 0
 11330  001E46  0100               	movlb	0	; () banked
 11331  001E48  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11332  001E4A  0100               	movlb	0	; () banked
 11333  001E4C  5DB8               	subwf	___ftadd@exp2& (0+255),w,b
 11334  001E4E  B0D8               	btfsc	status,0,c
 11335  001E50  D012               	goto	l5593
 11336                           
 11337                           ; BSR set to: 0
 11338  001E52  0100               	movlb	0	; () banked
 11339  001E54  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11340  001E56  0800               	sublw	0
 11341  001E58  0100               	movlb	0	; () banked
 11342  001E5A  25B9               	addwf	___ftadd@exp1& (0+255),w,b
 11343  001E5C  0100               	movlb	0	; () banked
 11344  001E5E  6FB4               	movwf	??___ftadd& (0+255),b
 11345  001E60  0E18               	movlw	24
 11346  001E62  0100               	movlb	0	; () banked
 11347  001E64  65B4               	cpfsgt	??___ftadd& (0+255),b
 11348  001E66  D007               	goto	l5593
 11349  001E68                     l1089:
 11350                           
 11351                           ; BSR set to: 0
 11352  001E68  C0AE  F0AE         	movff	___ftadd@f1,?___ftadd
 11353  001E6C  C0AF  F0AF         	movff	___ftadd@f1+1,?___ftadd+1
 11354  001E70  C0B0  F0B0         	movff	___ftadd@f1+2,?___ftadd+2
 11355  001E74  0012               	return	
 11356  001E76                     l5593:
 11357                           
 11358                           ; BSR set to: 0
 11359  001E76  0E06               	movlw	6
 11360  001E78  0100               	movlb	0	; () banked
 11361  001E7A  6FB7               	movwf	___ftadd@sign& (0+255),b
 11362                           
 11363                           ; BSR set to: 0
 11364  001E7C  0100               	movlb	0	; () banked
 11365  001E7E  AFB0               	btfss	(___ftadd@f1+2)& (0+255),7,b
 11366  001E80  D002               	goto	l5599
 11367                           
 11368                           ; BSR set to: 0
 11369  001E82  0100               	movlb	0	; () banked
 11370  001E84  8FB7               	bsf	___ftadd@sign& (0+255),7,b
 11371  001E86                     l5599:
 11372                           
 11373                           ; BSR set to: 0
 11374  001E86  0100               	movlb	0	; () banked
 11375  001E88  AFB3               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11376  001E8A  D002               	goto	l1091
 11377                           
 11378                           ; BSR set to: 0
 11379  001E8C  0100               	movlb	0	; () banked
 11380  001E8E  8DB7               	bsf	___ftadd@sign& (0+255),6,b
 11381  001E90                     l1091:
 11382                           
 11383                           ; BSR set to: 0
 11384  001E90  0100               	movlb	0	; () banked
 11385  001E92  8FAF               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11386                           
 11387                           ; BSR set to: 0
 11388  001E94  0EFF               	movlw	255
 11389  001E96  0100               	movlb	0	; () banked
 11390  001E98  17AE               	andwf	___ftadd@f1& (0+255),f,b
 11391  001E9A  0EFF               	movlw	255
 11392  001E9C  0100               	movlb	0	; () banked
 11393  001E9E  17AF               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11394  001EA0  0E00               	movlw	0
 11395  001EA2  0100               	movlb	0	; () banked
 11396  001EA4  17B0               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11397  001EA6  0100               	movlb	0	; () banked
 11398  001EA8  8FB2               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11399                           
 11400                           ; BSR set to: 0
 11401  001EAA  0EFF               	movlw	255
 11402  001EAC  0100               	movlb	0	; () banked
 11403  001EAE  17B1               	andwf	___ftadd@f2& (0+255),f,b
 11404  001EB0  0EFF               	movlw	255
 11405  001EB2  0100               	movlb	0	; () banked
 11406  001EB4  17B2               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11407  001EB6  0E00               	movlw	0
 11408  001EB8  0100               	movlb	0	; () banked
 11409  001EBA  17B3               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11410                           
 11411                           ; BSR set to: 0
 11412  001EBC  0100               	movlb	0	; () banked
 11413  001EBE  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11414  001EC0  0100               	movlb	0	; () banked
 11415  001EC2  5DB9               	subwf	___ftadd@exp1& (0+255),w,b
 11416  001EC4  B0D8               	btfsc	status,0,c
 11417  001EC6  D025               	goto	l5619
 11418  001EC8                     l5609:
 11419                           
 11420                           ; BSR set to: 0
 11421  001EC8  0100               	movlb	0	; () banked
 11422  001ECA  90D8               	bcf	status,0,c
 11423  001ECC  37B1               	rlcf	___ftadd@f2& (0+255),f,b
 11424  001ECE  37B2               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11425  001ED0  37B3               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11426  001ED2  0100               	movlb	0	; () banked
 11427  001ED4  07B8               	decf	___ftadd@exp2& (0+255),f,b
 11428                           
 11429                           ; BSR set to: 0
 11430  001ED6  0100               	movlb	0	; () banked
 11431  001ED8  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11432  001EDA  0100               	movlb	0	; () banked
 11433  001EDC  19B8               	xorwf	___ftadd@exp2& (0+255),w,b
 11434  001EDE  B4D8               	btfsc	status,2,c
 11435  001EE0  D011               	goto	l5617
 11436                           
 11437                           ; BSR set to: 0
 11438  001EE2  0100               	movlb	0	; () banked
 11439  001EE4  07B7               	decf	___ftadd@sign& (0+255),f,b
 11440  001EE6  C0B7  F0B4         	movff	___ftadd@sign,??___ftadd
 11441  001EEA  0E07               	movlw	7
 11442  001EEC  0100               	movlb	0	; () banked
 11443  001EEE  17B4               	andwf	??___ftadd& (0+255),f,b
 11444  001EF0  B4D8               	btfsc	status,2,c
 11445  001EF2  D008               	goto	l5617
 11446  001EF4  D7E9               	goto	l5609
 11447  001EF6                     l5615:
 11448                           
 11449                           ; BSR set to: 0
 11450  001EF6  0100               	movlb	0	; () banked
 11451  001EF8  90D8               	bcf	status,0,c
 11452  001EFA  33B0               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11453  001EFC  33AF               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11454  001EFE  33AE               	rrcf	___ftadd@f1& (0+255),f,b
 11455  001F00  0100               	movlb	0	; () banked
 11456  001F02  2BB9               	incf	___ftadd@exp1& (0+255),f,b
 11457  001F04                     l5617:
 11458                           
 11459                           ; BSR set to: 0
 11460  001F04  0100               	movlb	0	; () banked
 11461  001F06  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11462  001F08  0100               	movlb	0	; () banked
 11463  001F0A  19B9               	xorwf	___ftadd@exp1& (0+255),w,b
 11464  001F0C  B4D8               	btfsc	status,2,c
 11465  001F0E  D02B               	goto	l1100
 11466  001F10  D7F2               	goto	l5615
 11467  001F12                     l5619:
 11468                           
 11469                           ; BSR set to: 0
 11470  001F12  0100               	movlb	0	; () banked
 11471  001F14  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11472  001F16  0100               	movlb	0	; () banked
 11473  001F18  5DB8               	subwf	___ftadd@exp2& (0+255),w,b
 11474  001F1A  B0D8               	btfsc	status,0,c
 11475  001F1C  D024               	goto	l1100
 11476  001F1E                     l5621:
 11477                           
 11478                           ; BSR set to: 0
 11479  001F1E  0100               	movlb	0	; () banked
 11480  001F20  90D8               	bcf	status,0,c
 11481  001F22  37AE               	rlcf	___ftadd@f1& (0+255),f,b
 11482  001F24  37AF               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11483  001F26  37B0               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11484  001F28  0100               	movlb	0	; () banked
 11485  001F2A  07B9               	decf	___ftadd@exp1& (0+255),f,b
 11486                           
 11487                           ; BSR set to: 0
 11488  001F2C  0100               	movlb	0	; () banked
 11489  001F2E  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11490  001F30  0100               	movlb	0	; () banked
 11491  001F32  19B8               	xorwf	___ftadd@exp2& (0+255),w,b
 11492  001F34  B4D8               	btfsc	status,2,c
 11493  001F36  D011               	goto	l5629
 11494                           
 11495                           ; BSR set to: 0
 11496  001F38  0100               	movlb	0	; () banked
 11497  001F3A  07B7               	decf	___ftadd@sign& (0+255),f,b
 11498  001F3C  C0B7  F0B4         	movff	___ftadd@sign,??___ftadd
 11499  001F40  0E07               	movlw	7
 11500  001F42  0100               	movlb	0	; () banked
 11501  001F44  17B4               	andwf	??___ftadd& (0+255),f,b
 11502  001F46  B4D8               	btfsc	status,2,c
 11503  001F48  D008               	goto	l5629
 11504  001F4A  D7E9               	goto	l5621
 11505  001F4C                     l5627:
 11506                           
 11507                           ; BSR set to: 0
 11508  001F4C  0100               	movlb	0	; () banked
 11509  001F4E  90D8               	bcf	status,0,c
 11510  001F50  33B3               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11511  001F52  33B2               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11512  001F54  33B1               	rrcf	___ftadd@f2& (0+255),f,b
 11513  001F56  0100               	movlb	0	; () banked
 11514  001F58  2BB8               	incf	___ftadd@exp2& (0+255),f,b
 11515  001F5A                     l5629:
 11516                           
 11517                           ; BSR set to: 0
 11518  001F5A  0100               	movlb	0	; () banked
 11519  001F5C  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11520  001F5E  0100               	movlb	0	; () banked
 11521  001F60  19B9               	xorwf	___ftadd@exp1& (0+255),w,b
 11522  001F62  A4D8               	btfss	status,2,c
 11523  001F64  D7F3               	goto	l5627
 11524  001F66                     l1100:
 11525                           
 11526                           ; BSR set to: 0
 11527  001F66  0100               	movlb	0	; () banked
 11528  001F68  AFB7               	btfss	___ftadd@sign& (0+255),7,b
 11529  001F6A  D012               	goto	l1109
 11530                           
 11531                           ; BSR set to: 0
 11532  001F6C  0EFF               	movlw	255
 11533  001F6E  0100               	movlb	0	; () banked
 11534  001F70  1BAE               	xorwf	___ftadd@f1& (0+255),f,b
 11535  001F72  0EFF               	movlw	255
 11536  001F74  0100               	movlb	0	; () banked
 11537  001F76  1BAF               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11538  001F78  0EFF               	movlw	255
 11539  001F7A  0100               	movlb	0	; () banked
 11540  001F7C  1BB0               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11541  001F7E  0E01               	movlw	1
 11542  001F80  0100               	movlb	0	; () banked
 11543  001F82  27AE               	addwf	___ftadd@f1& (0+255),f,b
 11544  001F84  0E00               	movlw	0
 11545  001F86  0100               	movlb	0	; () banked
 11546  001F88  23AF               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11547  001F8A  0E00               	movlw	0
 11548  001F8C  0100               	movlb	0	; () banked
 11549  001F8E  23B0               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11550  001F90                     l1109:
 11551                           
 11552                           ; BSR set to: 0
 11553  001F90  0100               	movlb	0	; () banked
 11554  001F92  ADB7               	btfss	___ftadd@sign& (0+255),6,b
 11555  001F94  D012               	goto	l5635
 11556                           
 11557                           ; BSR set to: 0
 11558  001F96  0EFF               	movlw	255
 11559  001F98  0100               	movlb	0	; () banked
 11560  001F9A  1BB1               	xorwf	___ftadd@f2& (0+255),f,b
 11561  001F9C  0EFF               	movlw	255
 11562  001F9E  0100               	movlb	0	; () banked
 11563  001FA0  1BB2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11564  001FA2  0EFF               	movlw	255
 11565  001FA4  0100               	movlb	0	; () banked
 11566  001FA6  1BB3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11567  001FA8  0E01               	movlw	1
 11568  001FAA  0100               	movlb	0	; () banked
 11569  001FAC  27B1               	addwf	___ftadd@f2& (0+255),f,b
 11570  001FAE  0E00               	movlw	0
 11571  001FB0  0100               	movlb	0	; () banked
 11572  001FB2  23B2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11573  001FB4  0E00               	movlw	0
 11574  001FB6  0100               	movlb	0	; () banked
 11575  001FB8  23B3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11576  001FBA                     l5635:
 11577                           
 11578                           ; BSR set to: 0
 11579  001FBA  0E00               	movlw	0
 11580  001FBC  0100               	movlb	0	; () banked
 11581  001FBE  6FB7               	movwf	___ftadd@sign& (0+255),b
 11582                           
 11583                           ; BSR set to: 0
 11584  001FC0  0100               	movlb	0	; () banked
 11585  001FC2  51AE               	movf	___ftadd@f1& (0+255),w,b
 11586  001FC4  0100               	movlb	0	; () banked
 11587  001FC6  27B1               	addwf	___ftadd@f2& (0+255),f,b
 11588  001FC8  0100               	movlb	0	; () banked
 11589  001FCA  51AF               	movf	(___ftadd@f1+1)& (0+255),w,b
 11590  001FCC  0100               	movlb	0	; () banked
 11591  001FCE  23B2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11592  001FD0  0100               	movlb	0	; () banked
 11593  001FD2  51B0               	movf	(___ftadd@f1+2)& (0+255),w,b
 11594  001FD4  0100               	movlb	0	; () banked
 11595  001FD6  23B3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11596                           
 11597                           ; BSR set to: 0
 11598  001FD8  0100               	movlb	0	; () banked
 11599  001FDA  AFB3               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11600  001FDC  D015               	goto	l5645
 11601                           
 11602                           ; BSR set to: 0
 11603  001FDE  0EFF               	movlw	255
 11604  001FE0  0100               	movlb	0	; () banked
 11605  001FE2  1BB1               	xorwf	___ftadd@f2& (0+255),f,b
 11606  001FE4  0EFF               	movlw	255
 11607  001FE6  0100               	movlb	0	; () banked
 11608  001FE8  1BB2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11609  001FEA  0EFF               	movlw	255
 11610  001FEC  0100               	movlb	0	; () banked
 11611  001FEE  1BB3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11612  001FF0  0E01               	movlw	1
 11613  001FF2  0100               	movlb	0	; () banked
 11614  001FF4  27B1               	addwf	___ftadd@f2& (0+255),f,b
 11615  001FF6  0E00               	movlw	0
 11616  001FF8  0100               	movlb	0	; () banked
 11617  001FFA  23B2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11618  001FFC  0E00               	movlw	0
 11619  001FFE  0100               	movlb	0	; () banked
 11620  002000  23B3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11621                           
 11622                           ; BSR set to: 0
 11623  002002  0E01               	movlw	1
 11624  002004  0100               	movlb	0	; () banked
 11625  002006  6FB7               	movwf	___ftadd@sign& (0+255),b
 11626  002008                     l5645:
 11627                           
 11628                           ; BSR set to: 0
 11629  002008  C0B1  F027         	movff	___ftadd@f2,___ftpack@arg
 11630  00200C  C0B2  F028         	movff	___ftadd@f2+1,___ftpack@arg+1
 11631  002010  C0B3  F029         	movff	___ftadd@f2+2,___ftpack@arg+2
 11632  002014  C0B9  F02A         	movff	___ftadd@exp1,___ftpack@exp
 11633  002018  C0B7  F02B         	movff	___ftadd@sign,___ftpack@sign
 11634  00201C  EC62  F018         	call	___ftpack	;wreg free
 11635  002020  C027  F0AE         	movff	?___ftpack,?___ftadd
 11636  002024  C028  F0AF         	movff	?___ftpack+1,?___ftadd+1
 11637  002028  C029  F0B0         	movff	?___ftpack+2,?___ftadd+2
 11638  00202C  0012               	return	
 11639  00202E                     __end_of___ftadd:
 11640                           	opt stack 0
 11641                           tblptru	equ	0xFF8
 11642                           tblptrh	equ	0xFF7
 11643                           tblptrl	equ	0xFF6
 11644                           tablat	equ	0xFF5
 11645                           prodh	equ	0xFF4
 11646                           prodl	equ	0xFF3
 11647                           intcon	equ	0xFF2
 11648                           intcon3	equ	0xFF0
 11649                           postinc0	equ	0xFEE
 11650                           wreg	equ	0xFE8
 11651                           postdec1	equ	0xFE5
 11652                           fsr1l	equ	0xFE1
 11653                           indf2	equ	0xFDF
 11654                           postinc2	equ	0xFDE
 11655                           postdec2	equ	0xFDD
 11656                           fsr2h	equ	0xFDA
 11657                           fsr2l	equ	0xFD9
 11658                           status	equ	0xFD8
 11659                           
 11660 ;; *************** function ___awtoft *****************
 11661 ;; Defined at:
 11662 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;  c               2   46[COMRAM] int 
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;  sign            1   49[COMRAM] unsigned char 
 11667 ;; Return value:  Size  Location     Type
 11668 ;;                  3   46[COMRAM] float 
 11669 ;; Registers used:
 11670 ;;		wreg, status,2, status,0, cstack
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11676 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11679 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11680 ;;Total ram usage:        4 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; Hardware stack levels required when called:    4
 11683 ;; This function calls:
 11684 ;;		___ftpack
 11685 ;; This function is called by:
 11686 ;;		_sortBattery
 11687 ;;		_angleToPulse
 11688 ;;		_testFrequency
 11689 ;; This function uses a non-reentrant model
 11690 ;;
 11691                           
 11692                           	psect	text41
 11693  003844                     __ptext41:
 11694                           	opt stack 0
 11695  003844                     ___awtoft:
 11696                           	opt stack 23
 11697                           
 11698                           ;incstack = 0
 11699  003844  0E00               	movlw	0
 11700  003846  6E32               	movwf	___awtoft@sign,c
 11701  003848  AE30               	btfss	___awtoft@c+1,7,c
 11702  00384A  D006               	goto	l6051
 11703  00384C  6C2F               	negf	___awtoft@c,c
 11704  00384E  1E30               	comf	___awtoft@c+1,f,c
 11705  003850  B0D8               	btfsc	status,0,c
 11706  003852  2A30               	incf	___awtoft@c+1,f,c
 11707  003854  0E01               	movlw	1
 11708  003856  6E32               	movwf	___awtoft@sign,c
 11709  003858                     l6051:
 11710  003858  C02F  F027         	movff	___awtoft@c,___ftpack@arg
 11711  00385C  C030  F028         	movff	___awtoft@c+1,___ftpack@arg+1
 11712  003860  6A29               	clrf	___ftpack@arg+2,c
 11713  003862  0E8E               	movlw	142
 11714  003864  6E2A               	movwf	___ftpack@exp,c
 11715  003866  C032  F02B         	movff	___awtoft@sign,___ftpack@sign
 11716  00386A  EC62  F018         	call	___ftpack	;wreg free
 11717  00386E  C027  F02F         	movff	?___ftpack,?___awtoft
 11718  003872  C028  F030         	movff	?___ftpack+1,?___awtoft+1
 11719  003876  C029  F031         	movff	?___ftpack+2,?___awtoft+2
 11720  00387A  0012               	return	
 11721  00387C                     __end_of___awtoft:
 11722                           	opt stack 0
 11723                           tblptru	equ	0xFF8
 11724                           tblptrh	equ	0xFF7
 11725                           tblptrl	equ	0xFF6
 11726                           tablat	equ	0xFF5
 11727                           prodh	equ	0xFF4
 11728                           prodl	equ	0xFF3
 11729                           intcon	equ	0xFF2
 11730                           intcon3	equ	0xFF0
 11731                           postinc0	equ	0xFEE
 11732                           wreg	equ	0xFE8
 11733                           postdec1	equ	0xFE5
 11734                           fsr1l	equ	0xFE1
 11735                           indf2	equ	0xFDF
 11736                           postinc2	equ	0xFDE
 11737                           postdec2	equ	0xFDD
 11738                           fsr2h	equ	0xFDA
 11739                           fsr2l	equ	0xFD9
 11740                           status	equ	0xFD8
 11741                           
 11742 ;; *************** function ___altoft *****************
 11743 ;; Defined at:
 11744 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  c               4   46[COMRAM] long 
 11747 ;; Auto vars:     Size  Location     Type
 11748 ;;  sign            1    5[BANK0 ] unsigned char 
 11749 ;;  exp             1    4[BANK0 ] unsigned char 
 11750 ;; Return value:  Size  Location     Type
 11751 ;;                  3   46[COMRAM] float 
 11752 ;; Registers used:
 11753 ;;		wreg, status,2, status,0, cstack
 11754 ;; Tracked objects:
 11755 ;;		On entry : 0/0
 11756 ;;		On exit  : 0/0
 11757 ;;		Unchanged: 0/0
 11758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11759 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;Total ram usage:       10 bytes
 11764 ;; Hardware stack levels used:    1
 11765 ;; Hardware stack levels required when called:    4
 11766 ;; This function calls:
 11767 ;;		___ftpack
 11768 ;; This function is called by:
 11769 ;;		_sortBattery
 11770 ;;		_angleToPulse
 11771 ;; This function uses a non-reentrant model
 11772 ;;
 11773                           
 11774                           	psect	text42
 11775  0032A8                     __ptext42:
 11776                           	opt stack 0
 11777  0032A8                     ___altoft:
 11778                           	opt stack 23
 11779                           
 11780                           ;incstack = 0
 11781  0032A8  0E00               	movlw	0
 11782  0032AA  0100               	movlb	0	; () banked
 11783  0032AC  6F85               	movwf	___altoft@sign& (0+255),b
 11784  0032AE  0E8E               	movlw	142
 11785  0032B0  0100               	movlb	0	; () banked
 11786  0032B2  6F84               	movwf	___altoft@exp& (0+255),b
 11787                           
 11788                           ; BSR set to: 0
 11789  0032B4  AE32               	btfss	___altoft@c+3,7,c
 11790  0032B6  D013               	goto	l5983
 11791                           
 11792                           ; BSR set to: 0
 11793  0032B8  1E32               	comf	___altoft@c+3,f,c
 11794  0032BA  1E31               	comf	___altoft@c+2,f,c
 11795  0032BC  1E30               	comf	___altoft@c+1,f,c
 11796  0032BE  6C2F               	negf	___altoft@c,c
 11797  0032C0  0E00               	movlw	0
 11798  0032C2  2230               	addwfc	___altoft@c+1,f,c
 11799  0032C4  2231               	addwfc	___altoft@c+2,f,c
 11800  0032C6  2232               	addwfc	___altoft@c+3,f,c
 11801                           
 11802                           ; BSR set to: 0
 11803  0032C8  0E01               	movlw	1
 11804  0032CA  0100               	movlb	0	; () banked
 11805  0032CC  6F85               	movwf	___altoft@sign& (0+255),b
 11806                           
 11807                           ; BSR set to: 0
 11808  0032CE  D007               	goto	l5983
 11809  0032D0                     l5981:
 11810                           
 11811                           ; BSR set to: 0
 11812  0032D0  90D8               	bcf	status,0,c
 11813  0032D2  3232               	rrcf	___altoft@c+3,f,c
 11814  0032D4  3231               	rrcf	___altoft@c+2,f,c
 11815  0032D6  3230               	rrcf	___altoft@c+1,f,c
 11816  0032D8  322F               	rrcf	___altoft@c,f,c
 11817  0032DA  0100               	movlb	0	; () banked
 11818  0032DC  2B84               	incf	___altoft@exp& (0+255),f,b
 11819  0032DE                     l5983:
 11820                           
 11821                           ; BSR set to: 0
 11822  0032DE  0E00               	movlw	0
 11823  0032E0  142F               	andwf	___altoft@c,w,c
 11824  0032E2  0100               	movlb	0	; () banked
 11825  0032E4  6F80               	movwf	??___altoft& (0+255),b
 11826  0032E6  0E00               	movlw	0
 11827  0032E8  1430               	andwf	___altoft@c+1,w,c
 11828  0032EA  0100               	movlb	0	; () banked
 11829  0032EC  6F81               	movwf	(??___altoft+1)& (0+255),b
 11830  0032EE  0E00               	movlw	0
 11831  0032F0  1431               	andwf	___altoft@c+2,w,c
 11832  0032F2  0100               	movlb	0	; () banked
 11833  0032F4  6F82               	movwf	(??___altoft+2)& (0+255),b
 11834  0032F6  0EFF               	movlw	255
 11835  0032F8  1432               	andwf	___altoft@c+3,w,c
 11836  0032FA  0100               	movlb	0	; () banked
 11837  0032FC  6F83               	movwf	(??___altoft+3)& (0+255),b
 11838  0032FE  0100               	movlb	0	; () banked
 11839  003300  5180               	movf	??___altoft& (0+255),w,b
 11840  003302  0100               	movlb	0	; () banked
 11841  003304  1181               	iorwf	(??___altoft+1)& (0+255),w,b
 11842  003306  0100               	movlb	0	; () banked
 11843  003308  1182               	iorwf	(??___altoft+2)& (0+255),w,b
 11844  00330A  0100               	movlb	0	; () banked
 11845  00330C  1183               	iorwf	(??___altoft+3)& (0+255),w,b
 11846  00330E  A4D8               	btfss	status,2,c
 11847  003310  D7DF               	goto	l5981
 11848                           
 11849                           ; BSR set to: 0
 11850                           
 11851                           ; BSR set to: 0
 11852  003312  C02F  F027         	movff	___altoft@c,___ftpack@arg
 11853  003316  C030  F028         	movff	___altoft@c+1,___ftpack@arg+1
 11854  00331A  C031  F029         	movff	___altoft@c+2,___ftpack@arg+2
 11855  00331E  C084  F02A         	movff	___altoft@exp,___ftpack@exp
 11856  003322  C085  F02B         	movff	___altoft@sign,___ftpack@sign
 11857  003326  EC62  F018         	call	___ftpack	;wreg free
 11858  00332A  C027  F02F         	movff	?___ftpack,?___altoft
 11859  00332E  C028  F030         	movff	?___ftpack+1,?___altoft+1
 11860  003332  C029  F031         	movff	?___ftpack+2,?___altoft+2
 11861  003336  0012               	return	
 11862  003338                     __end_of___altoft:
 11863                           	opt stack 0
 11864                           tblptru	equ	0xFF8
 11865                           tblptrh	equ	0xFF7
 11866                           tblptrl	equ	0xFF6
 11867                           tablat	equ	0xFF5
 11868                           prodh	equ	0xFF4
 11869                           prodl	equ	0xFF3
 11870                           intcon	equ	0xFF2
 11871                           intcon3	equ	0xFF0
 11872                           postinc0	equ	0xFEE
 11873                           wreg	equ	0xFE8
 11874                           postdec1	equ	0xFE5
 11875                           fsr1l	equ	0xFE1
 11876                           indf2	equ	0xFDF
 11877                           postinc2	equ	0xFDE
 11878                           postdec2	equ	0xFDD
 11879                           fsr2h	equ	0xFDA
 11880                           fsr2l	equ	0xFD9
 11881                           status	equ	0xFD8
 11882                           
 11883 ;; *************** function ___ftpack *****************
 11884 ;; Defined at:
 11885 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;  arg             3   38[COMRAM] unsigned um
 11888 ;;  exp             1   41[COMRAM] unsigned char 
 11889 ;;  sign            1   42[COMRAM] unsigned char 
 11890 ;; Auto vars:     Size  Location     Type
 11891 ;;		None
 11892 ;; Return value:  Size  Location     Type
 11893 ;;                  3   38[COMRAM] float 
 11894 ;; Registers used:
 11895 ;;		wreg, status,2, status,0
 11896 ;; Tracked objects:
 11897 ;;		On entry : 0/0
 11898 ;;		On exit  : 0/0
 11899 ;;		Unchanged: 0/0
 11900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11901 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11903 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11904 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11905 ;;Total ram usage:        8 bytes
 11906 ;; Hardware stack levels used:    1
 11907 ;; Hardware stack levels required when called:    3
 11908 ;; This function calls:
 11909 ;;		Nothing
 11910 ;; This function is called by:
 11911 ;;		___altoft
 11912 ;;		___awtoft
 11913 ;;		___ftadd
 11914 ;;		___ftdiv
 11915 ;;		___ftmul
 11916 ;;		___lltoft
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           	psect	text43
 11921  0030C4                     __ptext43:
 11922                           	opt stack 0
 11923  0030C4                     ___ftpack:
 11924                           	opt stack 23
 11925                           
 11926                           ;incstack = 0
 11927  0030C4  502A               	movf	___ftpack@exp,w,c
 11928  0030C6  B4D8               	btfsc	status,2,c
 11929  0030C8  D005               	goto	l5539
 11930  0030CA  5027               	movf	___ftpack@arg,w,c
 11931  0030CC  1028               	iorwf	___ftpack@arg+1,w,c
 11932  0030CE  1029               	iorwf	___ftpack@arg+2,w,c
 11933  0030D0  A4D8               	btfss	status,2,c
 11934  0030D2  D00C               	goto	l5545
 11935  0030D4                     l5539:
 11936  0030D4  0E00               	movlw	0
 11937  0030D6  6E27               	movwf	?___ftpack,c
 11938  0030D8  0E00               	movlw	0
 11939  0030DA  6E28               	movwf	?___ftpack+1,c
 11940  0030DC  0E00               	movlw	0
 11941  0030DE  6E29               	movwf	?___ftpack+2,c
 11942  0030E0  0012               	return	
 11943  0030E2                     l5543:
 11944  0030E2  2A2A               	incf	___ftpack@exp,f,c
 11945  0030E4  90D8               	bcf	status,0,c
 11946  0030E6  3229               	rrcf	___ftpack@arg+2,f,c
 11947  0030E8  3228               	rrcf	___ftpack@arg+1,f,c
 11948  0030EA  3227               	rrcf	___ftpack@arg,f,c
 11949  0030EC                     l5545:
 11950  0030EC  0E00               	movlw	0
 11951  0030EE  1427               	andwf	___ftpack@arg,w,c
 11952  0030F0  6E2C               	movwf	??___ftpack& (0+255),c
 11953  0030F2  0E00               	movlw	0
 11954  0030F4  1428               	andwf	___ftpack@arg+1,w,c
 11955  0030F6  6E2D               	movwf	(??___ftpack+1)& (0+255),c
 11956  0030F8  0EFE               	movlw	254
 11957  0030FA  1429               	andwf	___ftpack@arg+2,w,c
 11958  0030FC  6E2E               	movwf	(??___ftpack+2)& (0+255),c
 11959  0030FE  502C               	movf	??___ftpack,w,c
 11960  003100  102D               	iorwf	??___ftpack+1,w,c
 11961  003102  102E               	iorwf	??___ftpack+2,w,c
 11962  003104  B4D8               	btfsc	status,2,c
 11963  003106  D00C               	goto	l5551
 11964  003108  D7EC               	goto	l5543
 11965  00310A                     l5547:
 11966  00310A  2A2A               	incf	___ftpack@exp,f,c
 11967  00310C  0E01               	movlw	1
 11968  00310E  2627               	addwf	___ftpack@arg,f,c
 11969  003110  0E00               	movlw	0
 11970  003112  2228               	addwfc	___ftpack@arg+1,f,c
 11971  003114  0E00               	movlw	0
 11972  003116  2229               	addwfc	___ftpack@arg+2,f,c
 11973  003118  90D8               	bcf	status,0,c
 11974  00311A  3229               	rrcf	___ftpack@arg+2,f,c
 11975  00311C  3228               	rrcf	___ftpack@arg+1,f,c
 11976  00311E  3227               	rrcf	___ftpack@arg,f,c
 11977  003120                     l5551:
 11978  003120  0E00               	movlw	0
 11979  003122  1427               	andwf	___ftpack@arg,w,c
 11980  003124  6E2C               	movwf	??___ftpack& (0+255),c
 11981  003126  0E00               	movlw	0
 11982  003128  1428               	andwf	___ftpack@arg+1,w,c
 11983  00312A  6E2D               	movwf	(??___ftpack+1)& (0+255),c
 11984  00312C  0EFF               	movlw	255
 11985  00312E  1429               	andwf	___ftpack@arg+2,w,c
 11986  003130  6E2E               	movwf	(??___ftpack+2)& (0+255),c
 11987  003132  502C               	movf	??___ftpack,w,c
 11988  003134  102D               	iorwf	??___ftpack+1,w,c
 11989  003136  102E               	iorwf	??___ftpack+2,w,c
 11990  003138  B4D8               	btfsc	status,2,c
 11991  00313A  D006               	goto	l5555
 11992  00313C  D7E6               	goto	l5547
 11993  00313E                     l5553:
 11994  00313E  062A               	decf	___ftpack@exp,f,c
 11995  003140  90D8               	bcf	status,0,c
 11996  003142  3627               	rlcf	___ftpack@arg,f,c
 11997  003144  3628               	rlcf	___ftpack@arg+1,f,c
 11998  003146  3629               	rlcf	___ftpack@arg+2,f,c
 11999  003148                     l5555:
 12000  003148  BE28               	btfsc	___ftpack@arg+1,7,c
 12001  00314A  D003               	goto	l1062
 12002  00314C  0E02               	movlw	2
 12003  00314E  602A               	cpfslt	___ftpack@exp,c
 12004  003150  D7F6               	goto	l5553
 12005  003152                     l1062:
 12006  003152  A02A               	btfss	___ftpack@exp,0,c
 12007  003154  9E28               	bcf	___ftpack@arg+1,7,c
 12008  003156  90D8               	bcf	status,0,c
 12009  003158  322A               	rrcf	___ftpack@exp,f,c
 12010  00315A  502A               	movf	___ftpack@exp,w,c
 12011  00315C  1229               	iorwf	___ftpack@arg+2,f,c
 12012  00315E  502B               	movf	___ftpack@sign,w,c
 12013  003160  A4D8               	btfss	status,2,c
 12014  003162  8E29               	bsf	___ftpack@arg+2,7,c
 12015  003164  C027  F027         	movff	___ftpack@arg,?___ftpack
 12016  003168  C028  F028         	movff	___ftpack@arg+1,?___ftpack+1
 12017  00316C  C029  F029         	movff	___ftpack@arg+2,?___ftpack+2
 12018  003170  0012               	return	
 12019  003172                     __end_of___ftpack:
 12020                           	opt stack 0
 12021                           tblptru	equ	0xFF8
 12022                           tblptrh	equ	0xFF7
 12023                           tblptrl	equ	0xFF6
 12024                           tablat	equ	0xFF5
 12025                           prodh	equ	0xFF4
 12026                           prodl	equ	0xFF3
 12027                           intcon	equ	0xFF2
 12028                           intcon3	equ	0xFF0
 12029                           postinc0	equ	0xFEE
 12030                           wreg	equ	0xFE8
 12031                           postdec1	equ	0xFE5
 12032                           fsr1l	equ	0xFE1
 12033                           indf2	equ	0xFDF
 12034                           postinc2	equ	0xFDE
 12035                           postdec2	equ	0xFDD
 12036                           fsr2h	equ	0xFDA
 12037                           fsr2l	equ	0xFD9
 12038                           status	equ	0xFD8
 12039                           
 12040 ;; *************** function _initTimer *****************
 12041 ;; Defined at:
 12042 ;;		line 52 in file "timer.c"
 12043 ;; Parameters:    Size  Location     Type
 12044 ;;  timer           2   38[COMRAM] int 
 12045 ;; Auto vars:     Size  Location     Type
 12046 ;;		None
 12047 ;; Return value:  Size  Location     Type
 12048 ;;                  1    wreg      void 
 12049 ;; Registers used:
 12050 ;;		wreg, status,2, status,0
 12051 ;; Tracked objects:
 12052 ;;		On entry : 0/0
 12053 ;;		On exit  : 0/0
 12054 ;;		Unchanged: 0/0
 12055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12056 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12058 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12059 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12060 ;;Total ram usage:        4 bytes
 12061 ;; Hardware stack levels used:    1
 12062 ;; Hardware stack levels required when called:    3
 12063 ;; This function calls:
 12064 ;;		Nothing
 12065 ;; This function is called by:
 12066 ;;		_main
 12067 ;;		_initServo
 12068 ;;		_testFrequency
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           	psect	text44
 12073  00373C                     __ptext44:
 12074                           	opt stack 0
 12075  00373C                     _initTimer:
 12076                           	opt stack 27
 12077                           
 12078                           ;timer.c: 53: switch(timer){
 12079                           
 12080                           ;incstack = 0
 12081  00373C  D00F               	goto	l6571
 12082  00373E                     l6553:
 12083                           
 12084                           ;timer.c: 55: T0CON = 0;
 12085  00373E  0E00               	movlw	0
 12086  003740  6ED5               	movwf	4053,c	;volatile
 12087                           
 12088                           ;timer.c: 56: T0CON |= 1<<3;
 12089  003742  86D5               	bsf	4053,3,c	;volatile
 12090                           
 12091                           ;timer.c: 58: TMR0IE = 1;
 12092  003744  8AF2               	bsf	intcon,5,c	;volatile
 12093                           
 12094                           ;timer.c: 59: break;
 12095  003746  D01C               	goto	l419
 12096  003748                     l6559:
 12097                           
 12098                           ;timer.c: 61: T1CON = 0;
 12099  003748  0E00               	movlw	0
 12100  00374A  6ECD               	movwf	4045,c	;volatile
 12101                           
 12102                           ;timer.c: 63: T1CON |= 0b11<<4;
 12103  00374C  0E30               	movlw	48
 12104  00374E  12CD               	iorwf	4045,f,c	;volatile
 12105                           
 12106                           ;timer.c: 64: TMR1IE = 1;
 12107  003750  809D               	bsf	3997,0,c	;volatile
 12108                           
 12109                           ;timer.c: 65: break;
 12110  003752  D016               	goto	l419
 12111  003754                     l6565:
 12112                           
 12113                           ;timer.c: 67: T3CON = 0;
 12114  003754  0E00               	movlw	0
 12115  003756  6EB1               	movwf	4017,c	;volatile
 12116                           
 12117                           ;timer.c: 68: TMR3IE = 1;
 12118  003758  82A0               	bsf	4000,1,c	;volatile
 12119                           
 12120                           ;timer.c: 70: }
 12121                           
 12122                           ;timer.c: 69: break;
 12123  00375A  D012               	goto	l419
 12124  00375C                     l6571:
 12125  00375C  C027  F029         	movff	initTimer@timer,??_initTimer
 12126  003760  C028  F02A         	movff	initTimer@timer+1,??_initTimer+1
 12127                           
 12128                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12129                           ; Switch size 1, requested type "space"
 12130                           ; Number of cases is 1, Range of values is 0 to 0
 12131                           ; switch strategies available:
 12132                           ; Name         Instructions Cycles
 12133                           ; simple_byte            4     3 (average)
 12134                           ;	Chosen strategy is simple_byte
 12135  003764  502A               	movf	??_initTimer+1,w,c
 12136  003766  0A00               	xorlw	0	; case 0
 12137  003768  A4D8               	btfss	status,2,c
 12138  00376A  D00A               	goto	l419
 12139                           
 12140                           ; Switch size 1, requested type "space"
 12141                           ; Number of cases is 3, Range of values is 0 to 3
 12142                           ; switch strategies available:
 12143                           ; Name         Instructions Cycles
 12144                           ; simple_byte           10     6 (average)
 12145                           ;	Chosen strategy is simple_byte
 12146  00376C  5029               	movf	??_initTimer,w,c
 12147  00376E  0A00               	xorlw	0	; case 0
 12148  003770  B4D8               	btfsc	status,2,c
 12149  003772  D7E5               	goto	l6553
 12150  003774  0A01               	xorlw	1	; case 1
 12151  003776  B4D8               	btfsc	status,2,c
 12152  003778  D7E7               	goto	l6559
 12153  00377A  0A02               	xorlw	2	; case 3
 12154  00377C  B4D8               	btfsc	status,2,c
 12155  00377E  D7EA               	goto	l6565
 12156  003780                     l419:
 12157                           
 12158                           ;timer.c: 71: PEIE = 1;
 12159  003780  8CF2               	bsf	intcon,6,c	;volatile
 12160                           
 12161                           ;timer.c: 72: (INTCONbits.GIE = 1);
 12162  003782  8EF2               	bsf	intcon,7,c	;volatile
 12163  003784  0012               	return		;funcret
 12164  003786                     __end_of_initTimer:
 12165                           	opt stack 0
 12166                           tblptru	equ	0xFF8
 12167                           tblptrh	equ	0xFF7
 12168                           tblptrl	equ	0xFF6
 12169                           tablat	equ	0xFF5
 12170                           prodh	equ	0xFF4
 12171                           prodl	equ	0xFF3
 12172                           intcon	equ	0xFF2
 12173                           intcon3	equ	0xFF0
 12174                           postinc0	equ	0xFEE
 12175                           wreg	equ	0xFE8
 12176                           postdec1	equ	0xFE5
 12177                           fsr1l	equ	0xFE1
 12178                           indf2	equ	0xFDF
 12179                           postinc2	equ	0xFDE
 12180                           postdec2	equ	0xFDD
 12181                           fsr2h	equ	0xFDA
 12182                           fsr2l	equ	0xFD9
 12183                           status	equ	0xFD8
 12184                           
 12185 ;; *************** function _initLCD *****************
 12186 ;; Defined at:
 12187 ;;		line 15 in file "lcd.c"
 12188 ;; Parameters:    Size  Location     Type
 12189 ;;		None
 12190 ;; Auto vars:     Size  Location     Type
 12191 ;;		None
 12192 ;; Return value:  Size  Location     Type
 12193 ;;                  1    wreg      void 
 12194 ;; Registers used:
 12195 ;;		wreg, status,2, status,0, cstack
 12196 ;; Tracked objects:
 12197 ;;		On entry : 0/0
 12198 ;;		On exit  : 0/0
 12199 ;;		Unchanged: 0/0
 12200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12204 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12205 ;;Total ram usage:        1 bytes
 12206 ;; Hardware stack levels used:    1
 12207 ;; Hardware stack levels required when called:    5
 12208 ;; This function calls:
 12209 ;;		_lcdInst
 12210 ;; This function is called by:
 12211 ;;		_main
 12212 ;; This function uses a non-reentrant model
 12213 ;;
 12214                           
 12215                           	psect	text45
 12216  003786                     __ptext45:
 12217                           	opt stack 0
 12218  003786                     _initLCD:
 12219                           	opt stack 25
 12220                           
 12221                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 12222                           
 12223                           ;incstack = 0
 12224  003786  0E31               	movlw	49
 12225  003788  6E2B               	movwf	??_initLCD& (0+255),c
 12226  00378A  0EB2               	movlw	178
 12227  00378C                     u7747:
 12228  00378C  2EE8               	decfsz	wreg,f,c
 12229  00378E  D7FE               	bra	u7747
 12230  003790  2E2B               	decfsz	??_initLCD& (0+255),f,c
 12231  003792  D7FC               	bra	u7747
 12232  003794  D000               	nop2	
 12233                           
 12234                           ;lcd.c: 18: lcdInst(0b00110011);
 12235  003796  0E33               	movlw	51
 12236  003798  EC1C  F01D         	call	_lcdInst
 12237                           
 12238                           ;lcd.c: 19: lcdInst(0b00110010);
 12239  00379C  0E32               	movlw	50
 12240  00379E  EC1C  F01D         	call	_lcdInst
 12241                           
 12242                           ;lcd.c: 20: lcdInst(0b00101000);
 12243  0037A2  0E28               	movlw	40
 12244  0037A4  EC1C  F01D         	call	_lcdInst
 12245                           
 12246                           ;lcd.c: 21: lcdInst(0b00001111);
 12247  0037A8  0E0F               	movlw	15
 12248  0037AA  EC1C  F01D         	call	_lcdInst
 12249                           
 12250                           ;lcd.c: 22: lcdInst(0b00000110);
 12251  0037AE  0E06               	movlw	6
 12252  0037B0  EC1C  F01D         	call	_lcdInst
 12253                           
 12254                           ;lcd.c: 23: lcdInst(0b00000001);
 12255  0037B4  0E01               	movlw	1
 12256  0037B6  EC1C  F01D         	call	_lcdInst
 12257                           
 12258                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 12259  0037BA  0E31               	movlw	49
 12260  0037BC  6E2B               	movwf	??_initLCD& (0+255),c
 12261  0037BE  0EB2               	movlw	178
 12262  0037C0                     u7757:
 12263  0037C0  2EE8               	decfsz	wreg,f,c
 12264  0037C2  D7FE               	bra	u7757
 12265  0037C4  2E2B               	decfsz	??_initLCD& (0+255),f,c
 12266  0037C6  D7FC               	bra	u7757
 12267  0037C8  D000               	nop2	
 12268  0037CA  0012               	return		;funcret
 12269  0037CC                     __end_of_initLCD:
 12270                           	opt stack 0
 12271                           tblptru	equ	0xFF8
 12272                           tblptrh	equ	0xFF7
 12273                           tblptrl	equ	0xFF6
 12274                           tablat	equ	0xFF5
 12275                           prodh	equ	0xFF4
 12276                           prodl	equ	0xFF3
 12277                           intcon	equ	0xFF2
 12278                           intcon3	equ	0xFF0
 12279                           postinc0	equ	0xFEE
 12280                           wreg	equ	0xFE8
 12281                           postdec1	equ	0xFE5
 12282                           fsr1l	equ	0xFE1
 12283                           indf2	equ	0xFDF
 12284                           postinc2	equ	0xFDE
 12285                           postdec2	equ	0xFDD
 12286                           fsr2h	equ	0xFDA
 12287                           fsr2l	equ	0xFD9
 12288                           status	equ	0xFD8
 12289                           
 12290 ;; *************** function _lcdInst *****************
 12291 ;; Defined at:
 12292 ;;		line 27 in file "lcd.c"
 12293 ;; Parameters:    Size  Location     Type
 12294 ;;  data            1    wreg     unsigned char 
 12295 ;; Auto vars:     Size  Location     Type
 12296 ;;  data            1   41[COMRAM] unsigned char 
 12297 ;; Return value:  Size  Location     Type
 12298 ;;                  1    wreg      void 
 12299 ;; Registers used:
 12300 ;;		wreg, status,2, status,0, cstack
 12301 ;; Tracked objects:
 12302 ;;		On entry : 0/0
 12303 ;;		On exit  : 0/0
 12304 ;;		Unchanged: 0/0
 12305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12309 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12310 ;;Total ram usage:        2 bytes
 12311 ;; Hardware stack levels used:    1
 12312 ;; Hardware stack levels required when called:    4
 12313 ;; This function calls:
 12314 ;;		_lcdNibble
 12315 ;; This function is called by:
 12316 ;;		_initLCD
 12317 ;;		_lcdHome
 12318 ;;		_lcdClear
 12319 ;;		_lcdNewline
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           	psect	text46
 12324  003A38                     __ptext46:
 12325                           	opt stack 0
 12326  003A38                     _lcdInst:
 12327                           	opt stack 22
 12328                           
 12329                           ;incstack = 0
 12330                           ;lcdInst@data stored from wreg
 12331  003A38  6E2A               	movwf	lcdInst@data,c
 12332                           
 12333                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 12334  003A3A  948C               	bcf	3980,2,c	;volatile
 12335                           
 12336                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 12337  003A3C  0E74               	movlw	116
 12338  003A3E                     u7767:
 12339  003A3E  2EE8               	decfsz	wreg,f,c
 12340  003A40  D7FE               	bra	u7767
 12341  003A42  D000               	nop2	
 12342                           
 12343                           ;lcd.c: 30: lcdNibble(data);
 12344  003A44  502A               	movf	lcdInst@data,w,c
 12345  003A46  ECF9  F01A         	call	_lcdNibble
 12346                           
 12347                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 12348  003A4A  0E04               	movlw	4
 12349  003A4C  6E29               	movwf	??_lcdInst& (0+255),c
 12350  003A4E  0E3E               	movlw	62
 12351  003A50                     u7777:
 12352  003A50  2EE8               	decfsz	wreg,f,c
 12353  003A52  D7FE               	bra	u7777
 12354  003A54  2E29               	decfsz	??_lcdInst& (0+255),f,c
 12355  003A56  D7FC               	bra	u7777
 12356  003A58  0012               	return		;funcret
 12357  003A5A                     __end_of_lcdInst:
 12358                           	opt stack 0
 12359                           tblptru	equ	0xFF8
 12360                           tblptrh	equ	0xFF7
 12361                           tblptrl	equ	0xFF6
 12362                           tablat	equ	0xFF5
 12363                           prodh	equ	0xFF4
 12364                           prodl	equ	0xFF3
 12365                           intcon	equ	0xFF2
 12366                           intcon3	equ	0xFF0
 12367                           postinc0	equ	0xFEE
 12368                           wreg	equ	0xFE8
 12369                           postdec1	equ	0xFE5
 12370                           fsr1l	equ	0xFE1
 12371                           indf2	equ	0xFDF
 12372                           postinc2	equ	0xFDE
 12373                           postdec2	equ	0xFDD
 12374                           fsr2h	equ	0xFDA
 12375                           fsr2l	equ	0xFD9
 12376                           status	equ	0xFD8
 12377                           
 12378 ;; *************** function _lcdNibble *****************
 12379 ;; Defined at:
 12380 ;;		line 46 in file "lcd.c"
 12381 ;; Parameters:    Size  Location     Type
 12382 ;;  data            1    wreg     unsigned char 
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;  data            1   39[COMRAM] unsigned char 
 12385 ;;  temp            1   38[COMRAM] unsigned char 
 12386 ;; Return value:  Size  Location     Type
 12387 ;;                  1    wreg      void 
 12388 ;; Registers used:
 12389 ;;		wreg, status,2, status,0
 12390 ;; Tracked objects:
 12391 ;;		On entry : 0/0
 12392 ;;		On exit  : 0/0
 12393 ;;		Unchanged: 0/0
 12394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12396 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12398 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12399 ;;Total ram usage:        2 bytes
 12400 ;; Hardware stack levels used:    1
 12401 ;; Hardware stack levels required when called:    3
 12402 ;; This function calls:
 12403 ;;		Nothing
 12404 ;; This function is called by:
 12405 ;;		_lcdInst
 12406 ;;		_putch
 12407 ;; This function uses a non-reentrant model
 12408 ;;
 12409                           
 12410                           	psect	text47
 12411  0035F2                     __ptext47:
 12412                           	opt stack 0
 12413  0035F2                     _lcdNibble:
 12414                           	opt stack 24
 12415                           
 12416                           ;incstack = 0
 12417                           ;lcdNibble@data stored from wreg
 12418  0035F2  6E28               	movwf	lcdNibble@data,c
 12419                           
 12420                           ;lcd.c: 48: char temp = data & 0xF0;
 12421  0035F4  5028               	movf	lcdNibble@data,w,c
 12422  0035F6  0BF0               	andlw	240
 12423  0035F8  6E27               	movwf	lcdNibble@temp,c
 12424                           
 12425                           ;lcd.c: 49: LATD = LATD & 0x0F;
 12426  0035FA  508C               	movf	3980,w,c	;volatile
 12427  0035FC  0B0F               	andlw	15
 12428  0035FE  6E8C               	movwf	3980,c	;volatile
 12429                           
 12430                           ;lcd.c: 50: LATD = temp | LATD;
 12431  003600  5027               	movf	lcdNibble@temp,w,c
 12432  003602  108C               	iorwf	3980,w,c	;volatile
 12433  003604  6E8C               	movwf	3980,c	;volatile
 12434                           
 12435                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 12436  003606  968C               	bcf	3980,3,c	;volatile
 12437                           
 12438                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12439  003608  0ED6               	movlw	214
 12440  00360A                     u7787:
 12441  00360A  D000               	nop2	
 12442  00360C  D000               	nop2	
 12443  00360E  2EE8               	decfsz	wreg,f,c
 12444  003610  D7FC               	bra	u7787
 12445  003612  D000               	nop2	
 12446                           
 12447                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 12448  003614  868C               	bsf	3980,3,c	;volatile
 12449                           
 12450                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12451  003616  0ED6               	movlw	214
 12452  003618                     u7797:
 12453  003618  D000               	nop2	
 12454  00361A  D000               	nop2	
 12455  00361C  2EE8               	decfsz	wreg,f,c
 12456  00361E  D7FC               	bra	u7797
 12457  003620  D000               	nop2	
 12458                           
 12459                           ;lcd.c: 58: data = data << 4;
 12460  003622  3828               	swapf	lcdNibble@data,w,c
 12461  003624  0BF0               	andlw	240
 12462  003626  6E28               	movwf	lcdNibble@data,c
 12463                           
 12464                           ;lcd.c: 60: temp = data & 0xF0;
 12465  003628  5028               	movf	lcdNibble@data,w,c
 12466  00362A  0BF0               	andlw	240
 12467  00362C  6E27               	movwf	lcdNibble@temp,c
 12468                           
 12469                           ;lcd.c: 61: LATD = LATD & 0x0F;
 12470  00362E  508C               	movf	3980,w,c	;volatile
 12471  003630  0B0F               	andlw	15
 12472  003632  6E8C               	movwf	3980,c	;volatile
 12473                           
 12474                           ;lcd.c: 62: LATD = temp | LATD;
 12475  003634  5027               	movf	lcdNibble@temp,w,c
 12476  003636  108C               	iorwf	3980,w,c	;volatile
 12477  003638  6E8C               	movwf	3980,c	;volatile
 12478                           
 12479                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 12480  00363A  968C               	bcf	3980,3,c	;volatile
 12481                           
 12482                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12483  00363C  0ED6               	movlw	214
 12484  00363E                     u7807:
 12485  00363E  D000               	nop2	
 12486  003640  D000               	nop2	
 12487  003642  2EE8               	decfsz	wreg,f,c
 12488  003644  D7FC               	bra	u7807
 12489  003646  D000               	nop2	
 12490                           
 12491                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 12492  003648  868C               	bsf	3980,3,c	;volatile
 12493                           
 12494                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12495  00364A  0ED6               	movlw	214
 12496  00364C                     u7817:
 12497  00364C  D000               	nop2	
 12498  00364E  D000               	nop2	
 12499  003650  2EE8               	decfsz	wreg,f,c
 12500  003652  D7FC               	bra	u7817
 12501  003654  D000               	nop2	
 12502  003656  0012               	return		;funcret
 12503  003658                     __end_of_lcdNibble:
 12504                           	opt stack 0
 12505                           tblptru	equ	0xFF8
 12506                           tblptrh	equ	0xFF7
 12507                           tblptrl	equ	0xFF6
 12508                           tablat	equ	0xFF5
 12509                           prodh	equ	0xFF4
 12510                           prodl	equ	0xFF3
 12511                           intcon	equ	0xFF2
 12512                           intcon3	equ	0xFF0
 12513                           postinc0	equ	0xFEE
 12514                           wreg	equ	0xFE8
 12515                           postdec1	equ	0xFE5
 12516                           fsr1l	equ	0xFE1
 12517                           indf2	equ	0xFDF
 12518                           postinc2	equ	0xFDE
 12519                           postdec2	equ	0xFDD
 12520                           fsr2h	equ	0xFDA
 12521                           fsr2l	equ	0xFD9
 12522                           status	equ	0xFD8
 12523                           
 12524 ;; *************** function ___almod *****************
 12525 ;; Defined at:
 12526 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 12527 ;; Parameters:    Size  Location     Type
 12528 ;;  dividend        4    6[BANK0 ] long 
 12529 ;;  divisor         4   10[BANK0 ] long 
 12530 ;; Auto vars:     Size  Location     Type
 12531 ;;  sign            1   47[COMRAM] unsigned char 
 12532 ;;  counter         1   46[COMRAM] unsigned char 
 12533 ;; Return value:  Size  Location     Type
 12534 ;;                  4    6[BANK0 ] long 
 12535 ;; Registers used:
 12536 ;;		wreg, status,2, status,0
 12537 ;; Tracked objects:
 12538 ;;		On entry : 0/0
 12539 ;;		On exit  : 0/0
 12540 ;;		Unchanged: 0/0
 12541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12542 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12543 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12545 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;Total ram usage:       10 bytes
 12547 ;; Hardware stack levels used:    1
 12548 ;; Hardware stack levels required when called:    3
 12549 ;; This function calls:
 12550 ;;		Nothing
 12551 ;; This function is called by:
 12552 ;;		_main
 12553 ;; This function uses a non-reentrant model
 12554 ;;
 12555                           
 12556                           	psect	text48
 12557  002BD8                     __ptext48:
 12558                           	opt stack 0
 12559  002BD8                     ___almod:
 12560                           	opt stack 27
 12561                           
 12562                           ;incstack = 0
 12563  002BD8  0E00               	movlw	0
 12564  002BDA  6E30               	movwf	___almod@sign,c
 12565  002BDC  0100               	movlb	0	; () banked
 12566  002BDE  AF89               	btfss	(___almod@dividend+3)& (0+255),7,b
 12567  002BE0  D00B               	goto	l7003
 12568                           
 12569                           ; BSR set to: 0
 12570  002BE2  0100               	movlb	0	; () banked
 12571  002BE4  1F89               	comf	(___almod@dividend+3)& (0+255),f,b
 12572  002BE6  1F88               	comf	(___almod@dividend+2)& (0+255),f,b
 12573  002BE8  1F87               	comf	(___almod@dividend+1)& (0+255),f,b
 12574  002BEA  6D86               	negf	___almod@dividend& (0+255),b
 12575  002BEC  0E00               	movlw	0
 12576  002BEE  2387               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12577  002BF0  2388               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12578  002BF2  2389               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12579                           
 12580                           ; BSR set to: 0
 12581  002BF4  0E01               	movlw	1
 12582  002BF6  6E30               	movwf	___almod@sign,c
 12583  002BF8                     l7003:
 12584                           
 12585                           ; BSR set to: 0
 12586  002BF8  0100               	movlb	0	; () banked
 12587  002BFA  AF8D               	btfss	(___almod@divisor+3)& (0+255),7,b
 12588  002BFC  D009               	goto	l7007
 12589                           
 12590                           ; BSR set to: 0
 12591  002BFE  0100               	movlb	0	; () banked
 12592  002C00  1F8D               	comf	(___almod@divisor+3)& (0+255),f,b
 12593  002C02  1F8C               	comf	(___almod@divisor+2)& (0+255),f,b
 12594  002C04  1F8B               	comf	(___almod@divisor+1)& (0+255),f,b
 12595  002C06  6D8A               	negf	___almod@divisor& (0+255),b
 12596  002C08  0E00               	movlw	0
 12597  002C0A  238B               	addwfc	(___almod@divisor+1)& (0+255),f,b
 12598  002C0C  238C               	addwfc	(___almod@divisor+2)& (0+255),f,b
 12599  002C0E  238D               	addwfc	(___almod@divisor+3)& (0+255),f,b
 12600  002C10                     l7007:
 12601                           
 12602                           ; BSR set to: 0
 12603  002C10  0100               	movlb	0	; () banked
 12604  002C12  518A               	movf	___almod@divisor& (0+255),w,b
 12605  002C14  0100               	movlb	0	; () banked
 12606  002C16  118B               	iorwf	(___almod@divisor+1)& (0+255),w,b
 12607  002C18  0100               	movlb	0	; () banked
 12608  002C1A  118C               	iorwf	(___almod@divisor+2)& (0+255),w,b
 12609  002C1C  0100               	movlb	0	; () banked
 12610  002C1E  118D               	iorwf	(___almod@divisor+3)& (0+255),w,b
 12611  002C20  B4D8               	btfsc	status,2,c
 12612  002C22  D037               	goto	l7023
 12613                           
 12614                           ; BSR set to: 0
 12615  002C24  0E01               	movlw	1
 12616  002C26  6E2F               	movwf	___almod@counter,c
 12617  002C28  D007               	goto	l7013
 12618  002C2A                     l7011:
 12619                           
 12620                           ; BSR set to: 0
 12621  002C2A  0100               	movlb	0	; () banked
 12622  002C2C  90D8               	bcf	status,0,c
 12623  002C2E  378A               	rlcf	___almod@divisor& (0+255),f,b
 12624  002C30  378B               	rlcf	(___almod@divisor+1)& (0+255),f,b
 12625  002C32  378C               	rlcf	(___almod@divisor+2)& (0+255),f,b
 12626  002C34  378D               	rlcf	(___almod@divisor+3)& (0+255),f,b
 12627  002C36  2A2F               	incf	___almod@counter,f,c
 12628  002C38                     l7013:
 12629                           
 12630                           ; BSR set to: 0
 12631  002C38  0100               	movlb	0	; () banked
 12632  002C3A  AF8D               	btfss	(___almod@divisor+3)& (0+255),7,b
 12633  002C3C  D7F6               	goto	l7011
 12634  002C3E                     l7015:
 12635                           
 12636                           ; BSR set to: 0
 12637  002C3E  0100               	movlb	0	; () banked
 12638  002C40  518A               	movf	___almod@divisor& (0+255),w,b
 12639  002C42  0100               	movlb	0	; () banked
 12640  002C44  5D86               	subwf	___almod@dividend& (0+255),w,b
 12641  002C46  0100               	movlb	0	; () banked
 12642  002C48  518B               	movf	(___almod@divisor+1)& (0+255),w,b
 12643  002C4A  0100               	movlb	0	; () banked
 12644  002C4C  5987               	subwfb	(___almod@dividend+1)& (0+255),w,b
 12645  002C4E  0100               	movlb	0	; () banked
 12646  002C50  518C               	movf	(___almod@divisor+2)& (0+255),w,b
 12647  002C52  0100               	movlb	0	; () banked
 12648  002C54  5988               	subwfb	(___almod@dividend+2)& (0+255),w,b
 12649  002C56  0100               	movlb	0	; () banked
 12650  002C58  518D               	movf	(___almod@divisor+3)& (0+255),w,b
 12651  002C5A  0100               	movlb	0	; () banked
 12652  002C5C  5989               	subwfb	(___almod@dividend+3)& (0+255),w,b
 12653  002C5E  A0D8               	btfss	status,0,c
 12654  002C60  D010               	goto	l7019
 12655                           
 12656                           ; BSR set to: 0
 12657  002C62  0100               	movlb	0	; () banked
 12658  002C64  518A               	movf	___almod@divisor& (0+255),w,b
 12659  002C66  0100               	movlb	0	; () banked
 12660  002C68  5F86               	subwf	___almod@dividend& (0+255),f,b
 12661  002C6A  0100               	movlb	0	; () banked
 12662  002C6C  518B               	movf	(___almod@divisor+1)& (0+255),w,b
 12663  002C6E  0100               	movlb	0	; () banked
 12664  002C70  5B87               	subwfb	(___almod@dividend+1)& (0+255),f,b
 12665  002C72  0100               	movlb	0	; () banked
 12666  002C74  518C               	movf	(___almod@divisor+2)& (0+255),w,b
 12667  002C76  0100               	movlb	0	; () banked
 12668  002C78  5B88               	subwfb	(___almod@dividend+2)& (0+255),f,b
 12669  002C7A  0100               	movlb	0	; () banked
 12670  002C7C  518D               	movf	(___almod@divisor+3)& (0+255),w,b
 12671  002C7E  0100               	movlb	0	; () banked
 12672  002C80  5B89               	subwfb	(___almod@dividend+3)& (0+255),f,b
 12673  002C82                     l7019:
 12674                           
 12675                           ; BSR set to: 0
 12676  002C82  0100               	movlb	0	; () banked
 12677  002C84  90D8               	bcf	status,0,c
 12678  002C86  338D               	rrcf	(___almod@divisor+3)& (0+255),f,b
 12679  002C88  338C               	rrcf	(___almod@divisor+2)& (0+255),f,b
 12680  002C8A  338B               	rrcf	(___almod@divisor+1)& (0+255),f,b
 12681  002C8C  338A               	rrcf	___almod@divisor& (0+255),f,b
 12682                           
 12683                           ; BSR set to: 0
 12684  002C8E  2E2F               	decfsz	___almod@counter,f,c
 12685  002C90  D7D6               	goto	l7015
 12686  002C92                     l7023:
 12687                           
 12688                           ; BSR set to: 0
 12689  002C92  5030               	movf	___almod@sign,w,c
 12690  002C94  B4D8               	btfsc	status,2,c
 12691  002C96  D009               	goto	l7027
 12692                           
 12693                           ; BSR set to: 0
 12694  002C98  0100               	movlb	0	; () banked
 12695  002C9A  1F89               	comf	(___almod@dividend+3)& (0+255),f,b
 12696  002C9C  1F88               	comf	(___almod@dividend+2)& (0+255),f,b
 12697  002C9E  1F87               	comf	(___almod@dividend+1)& (0+255),f,b
 12698  002CA0  6D86               	negf	___almod@dividend& (0+255),b
 12699  002CA2  0E00               	movlw	0
 12700  002CA4  2387               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12701  002CA6  2388               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12702  002CA8  2389               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12703  002CAA                     l7027:
 12704                           
 12705                           ; BSR set to: 0
 12706  002CAA  C086  F086         	movff	___almod@dividend,?___almod
 12707  002CAE  C087  F087         	movff	___almod@dividend+1,?___almod+1
 12708  002CB2  C088  F088         	movff	___almod@dividend+2,?___almod+2
 12709  002CB6  C089  F089         	movff	___almod@dividend+3,?___almod+3
 12710  002CBA  0012               	return	
 12711  002CBC                     __end_of___almod:
 12712                           	opt stack 0
 12713                           tblptru	equ	0xFF8
 12714                           tblptrh	equ	0xFF7
 12715                           tblptrl	equ	0xFF6
 12716                           tablat	equ	0xFF5
 12717                           prodh	equ	0xFF4
 12718                           prodl	equ	0xFF3
 12719                           intcon	equ	0xFF2
 12720                           intcon3	equ	0xFF0
 12721                           postinc0	equ	0xFEE
 12722                           wreg	equ	0xFE8
 12723                           postdec1	equ	0xFE5
 12724                           fsr1l	equ	0xFE1
 12725                           indf2	equ	0xFDF
 12726                           postinc2	equ	0xFDE
 12727                           postdec2	equ	0xFDD
 12728                           fsr2h	equ	0xFDA
 12729                           fsr2l	equ	0xFD9
 12730                           status	equ	0xFD8
 12731                           
 12732 ;; *************** function ___aldiv *****************
 12733 ;; Defined at:
 12734 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 12735 ;; Parameters:    Size  Location     Type
 12736 ;;  dividend        4   38[COMRAM] long 
 12737 ;;  divisor         4   42[COMRAM] long 
 12738 ;; Auto vars:     Size  Location     Type
 12739 ;;  quotient        4    2[BANK0 ] long 
 12740 ;;  sign            1    1[BANK0 ] unsigned char 
 12741 ;;  counter         1    0[BANK0 ] unsigned char 
 12742 ;; Return value:  Size  Location     Type
 12743 ;;                  4   38[COMRAM] long 
 12744 ;; Registers used:
 12745 ;;		wreg, status,2, status,0
 12746 ;; Tracked objects:
 12747 ;;		On entry : 0/0
 12748 ;;		On exit  : 0/0
 12749 ;;		Unchanged: 0/0
 12750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12751 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12752 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12754 ;;      Totals:         8       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12755 ;;Total ram usage:       14 bytes
 12756 ;; Hardware stack levels used:    1
 12757 ;; Hardware stack levels required when called:    3
 12758 ;; This function calls:
 12759 ;;		Nothing
 12760 ;; This function is called by:
 12761 ;;		_main
 12762 ;; This function uses a non-reentrant model
 12763 ;;
 12764                           
 12765                           	psect	text49
 12766  002CBC                     __ptext49:
 12767                           	opt stack 0
 12768  002CBC                     ___aldiv:
 12769                           	opt stack 27
 12770                           
 12771                           ; BSR set to: 0
 12772                           ;incstack = 0
 12773  002CBC  0E00               	movlw	0
 12774  002CBE  0100               	movlb	0	; () banked
 12775  002CC0  6F81               	movwf	___aldiv@sign& (0+255),b
 12776                           
 12777                           ; BSR set to: 0
 12778  002CC2  AE2E               	btfss	___aldiv@divisor+3,7,c
 12779  002CC4  D00B               	goto	l6959
 12780                           
 12781                           ; BSR set to: 0
 12782  002CC6  1E2E               	comf	___aldiv@divisor+3,f,c
 12783  002CC8  1E2D               	comf	___aldiv@divisor+2,f,c
 12784  002CCA  1E2C               	comf	___aldiv@divisor+1,f,c
 12785  002CCC  6C2B               	negf	___aldiv@divisor,c
 12786  002CCE  0E00               	movlw	0
 12787  002CD0  222C               	addwfc	___aldiv@divisor+1,f,c
 12788  002CD2  222D               	addwfc	___aldiv@divisor+2,f,c
 12789  002CD4  222E               	addwfc	___aldiv@divisor+3,f,c
 12790                           
 12791                           ; BSR set to: 0
 12792  002CD6  0E01               	movlw	1
 12793  002CD8  0100               	movlb	0	; () banked
 12794  002CDA  6F81               	movwf	___aldiv@sign& (0+255),b
 12795  002CDC                     l6959:
 12796                           
 12797                           ; BSR set to: 0
 12798  002CDC  AE2A               	btfss	___aldiv@dividend+3,7,c
 12799  002CDE  D00B               	goto	l6965
 12800                           
 12801                           ; BSR set to: 0
 12802  002CE0  1E2A               	comf	___aldiv@dividend+3,f,c
 12803  002CE2  1E29               	comf	___aldiv@dividend+2,f,c
 12804  002CE4  1E28               	comf	___aldiv@dividend+1,f,c
 12805  002CE6  6C27               	negf	___aldiv@dividend,c
 12806  002CE8  0E00               	movlw	0
 12807  002CEA  2228               	addwfc	___aldiv@dividend+1,f,c
 12808  002CEC  2229               	addwfc	___aldiv@dividend+2,f,c
 12809  002CEE  222A               	addwfc	___aldiv@dividend+3,f,c
 12810                           
 12811                           ; BSR set to: 0
 12812  002CF0  0E01               	movlw	1
 12813  002CF2  0100               	movlb	0	; () banked
 12814  002CF4  1B81               	xorwf	___aldiv@sign& (0+255),f,b
 12815  002CF6                     l6965:
 12816                           
 12817                           ; BSR set to: 0
 12818  002CF6  0E00               	movlw	0
 12819  002CF8  0100               	movlb	0	; () banked
 12820  002CFA  6F82               	movwf	___aldiv@quotient& (0+255),b
 12821  002CFC  0E00               	movlw	0
 12822  002CFE  6F83               	movwf	(___aldiv@quotient+1)& (0+255),b
 12823  002D00  0E00               	movlw	0
 12824  002D02  6F84               	movwf	(___aldiv@quotient+2)& (0+255),b
 12825  002D04  0E00               	movlw	0
 12826  002D06  6F85               	movwf	(___aldiv@quotient+3)& (0+255),b
 12827                           
 12828                           ; BSR set to: 0
 12829  002D08  502B               	movf	___aldiv@divisor,w,c
 12830  002D0A  102C               	iorwf	___aldiv@divisor+1,w,c
 12831  002D0C  102D               	iorwf	___aldiv@divisor+2,w,c
 12832  002D0E  102E               	iorwf	___aldiv@divisor+3,w,c
 12833  002D10  B4D8               	btfsc	status,2,c
 12834  002D12  D02F               	goto	l6987
 12835                           
 12836                           ; BSR set to: 0
 12837  002D14  0E01               	movlw	1
 12838  002D16  0100               	movlb	0	; () banked
 12839  002D18  6F80               	movwf	___aldiv@counter& (0+255),b
 12840  002D1A  D007               	goto	l6973
 12841  002D1C                     l6971:
 12842                           
 12843                           ; BSR set to: 0
 12844  002D1C  90D8               	bcf	status,0,c
 12845  002D1E  362B               	rlcf	___aldiv@divisor,f,c
 12846  002D20  362C               	rlcf	___aldiv@divisor+1,f,c
 12847  002D22  362D               	rlcf	___aldiv@divisor+2,f,c
 12848  002D24  362E               	rlcf	___aldiv@divisor+3,f,c
 12849  002D26  0100               	movlb	0	; () banked
 12850  002D28  2B80               	incf	___aldiv@counter& (0+255),f,b
 12851  002D2A                     l6973:
 12852                           
 12853                           ; BSR set to: 0
 12854  002D2A  AE2E               	btfss	___aldiv@divisor+3,7,c
 12855  002D2C  D7F7               	goto	l6971
 12856  002D2E                     l6975:
 12857                           
 12858                           ; BSR set to: 0
 12859  002D2E  0100               	movlb	0	; () banked
 12860  002D30  90D8               	bcf	status,0,c
 12861  002D32  3782               	rlcf	___aldiv@quotient& (0+255),f,b
 12862  002D34  3783               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 12863  002D36  3784               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 12864  002D38  3785               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 12865                           
 12866                           ; BSR set to: 0
 12867  002D3A  502B               	movf	___aldiv@divisor,w,c
 12868  002D3C  5C27               	subwf	___aldiv@dividend,w,c
 12869  002D3E  502C               	movf	___aldiv@divisor+1,w,c
 12870  002D40  5828               	subwfb	___aldiv@dividend+1,w,c
 12871  002D42  502D               	movf	___aldiv@divisor+2,w,c
 12872  002D44  5829               	subwfb	___aldiv@dividend+2,w,c
 12873  002D46  502E               	movf	___aldiv@divisor+3,w,c
 12874  002D48  582A               	subwfb	___aldiv@dividend+3,w,c
 12875  002D4A  A0D8               	btfss	status,0,c
 12876  002D4C  D00A               	goto	l6983
 12877                           
 12878                           ; BSR set to: 0
 12879  002D4E  502B               	movf	___aldiv@divisor,w,c
 12880  002D50  5E27               	subwf	___aldiv@dividend,f,c
 12881  002D52  502C               	movf	___aldiv@divisor+1,w,c
 12882  002D54  5A28               	subwfb	___aldiv@dividend+1,f,c
 12883  002D56  502D               	movf	___aldiv@divisor+2,w,c
 12884  002D58  5A29               	subwfb	___aldiv@dividend+2,f,c
 12885  002D5A  502E               	movf	___aldiv@divisor+3,w,c
 12886  002D5C  5A2A               	subwfb	___aldiv@dividend+3,f,c
 12887                           
 12888                           ; BSR set to: 0
 12889  002D5E  0100               	movlb	0	; () banked
 12890  002D60  8182               	bsf	___aldiv@quotient& (0+255),0,b
 12891  002D62                     l6983:
 12892                           
 12893                           ; BSR set to: 0
 12894  002D62  90D8               	bcf	status,0,c
 12895  002D64  322E               	rrcf	___aldiv@divisor+3,f,c
 12896  002D66  322D               	rrcf	___aldiv@divisor+2,f,c
 12897  002D68  322C               	rrcf	___aldiv@divisor+1,f,c
 12898  002D6A  322B               	rrcf	___aldiv@divisor,f,c
 12899                           
 12900                           ; BSR set to: 0
 12901  002D6C  0100               	movlb	0	; () banked
 12902  002D6E  2F80               	decfsz	___aldiv@counter& (0+255),f,b
 12903  002D70  D7DE               	goto	l6975
 12904  002D72                     l6987:
 12905                           
 12906                           ; BSR set to: 0
 12907  002D72  0100               	movlb	0	; () banked
 12908  002D74  5181               	movf	___aldiv@sign& (0+255),w,b
 12909  002D76  0100               	movlb	0	; () banked
 12910  002D78  B4D8               	btfsc	status,2,c
 12911  002D7A  D009               	goto	l6991
 12912                           
 12913                           ; BSR set to: 0
 12914  002D7C  0100               	movlb	0	; () banked
 12915  002D7E  1F85               	comf	(___aldiv@quotient+3)& (0+255),f,b
 12916  002D80  1F84               	comf	(___aldiv@quotient+2)& (0+255),f,b
 12917  002D82  1F83               	comf	(___aldiv@quotient+1)& (0+255),f,b
 12918  002D84  6D82               	negf	___aldiv@quotient& (0+255),b
 12919  002D86  0E00               	movlw	0
 12920  002D88  2383               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 12921  002D8A  2384               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 12922  002D8C  2385               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 12923  002D8E                     l6991:
 12924                           
 12925                           ; BSR set to: 0
 12926  002D8E  C082  F027         	movff	___aldiv@quotient,?___aldiv
 12927  002D92  C083  F028         	movff	___aldiv@quotient+1,?___aldiv+1
 12928  002D96  C084  F029         	movff	___aldiv@quotient+2,?___aldiv+2
 12929  002D9A  C085  F02A         	movff	___aldiv@quotient+3,?___aldiv+3
 12930  002D9E  0012               	return	
 12931  002DA0                     __end_of___aldiv:
 12932                           	opt stack 0
 12933                           tblptru	equ	0xFF8
 12934                           tblptrh	equ	0xFF7
 12935                           tblptrl	equ	0xFF6
 12936                           tablat	equ	0xFF5
 12937                           prodh	equ	0xFF4
 12938                           prodl	equ	0xFF3
 12939                           intcon	equ	0xFF2
 12940                           intcon3	equ	0xFF0
 12941                           postinc0	equ	0xFEE
 12942                           wreg	equ	0xFE8
 12943                           postdec1	equ	0xFE5
 12944                           fsr1l	equ	0xFE1
 12945                           indf2	equ	0xFDF
 12946                           postinc2	equ	0xFDE
 12947                           postdec2	equ	0xFDD
 12948                           fsr2h	equ	0xFDA
 12949                           fsr2l	equ	0xFD9
 12950                           status	equ	0xFD8
 12951                           
 12952 ;; *************** function _service *****************
 12953 ;; Defined at:
 12954 ;;		line 310 in file "main.c"
 12955 ;; Parameters:    Size  Location     Type
 12956 ;;		None
 12957 ;; Auto vars:     Size  Location     Type
 12958 ;;  key             1   37[COMRAM] unsigned char 
 12959 ;; Return value:  Size  Location     Type
 12960 ;;                  1    wreg      void 
 12961 ;; Registers used:
 12962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12963 ;; Tracked objects:
 12964 ;;		On entry : 0/0
 12965 ;;		On exit  : 0/0
 12966 ;;		Unchanged: 0/0
 12967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12970 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12971 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12972 ;;Total ram usage:       19 bytes
 12973 ;; Hardware stack levels used:    1
 12974 ;; Hardware stack levels required when called:    2
 12975 ;; This function calls:
 12976 ;;		_servoInterruptService
 12977 ;;		i2_startTimer
 12978 ;; This function is called by:
 12979 ;;		Interrupt level 2
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           	psect	intcode
 12984  000008                     __pintcode:
 12985                           	opt stack 0
 12986  000008                     _service:
 12987                           	opt stack 21
 12988                           
 12989                           ; BSR set to: 0
 12990                           ;incstack = 0
 12991  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12992  00000A  EDFE  F014         	call	int_func,f	;refresh shadow registers
 12993                           tblptru	equ	0xFF8
 12994                           tblptrh	equ	0xFF7
 12995                           tblptrl	equ	0xFF6
 12996                           tablat	equ	0xFF5
 12997                           prodh	equ	0xFF4
 12998                           prodl	equ	0xFF3
 12999                           intcon	equ	0xFF2
 13000                           intcon3	equ	0xFF0
 13001                           postinc0	equ	0xFEE
 13002                           wreg	equ	0xFE8
 13003                           postdec1	equ	0xFE5
 13004                           fsr1l	equ	0xFE1
 13005                           indf2	equ	0xFDF
 13006                           postinc2	equ	0xFDE
 13007                           postdec2	equ	0xFDD
 13008                           fsr2h	equ	0xFDA
 13009                           fsr2l	equ	0xFD9
 13010                           status	equ	0xFD8
 13011                           
 13012                           	psect	intcode_body
 13013  0029FC                     __pintcode_body:
 13014                           	opt stack 21
 13015  0029FC                     int_func:
 13016                           	opt stack 21
 13017  0029FC  0006               	pop		; remove dummy address from shadow register refresh
 13018  0029FE  CFFA F018          	movff	pclath,??_service+4
 13019  002A02  CFFB F019          	movff	pclatu,??_service+5
 13020  002A06  CFE9 F01A          	movff	fsr0l,??_service+6
 13021  002A0A  CFEA F01B          	movff	fsr0h,??_service+7
 13022  002A0E  CFE1 F01C          	movff	fsr1l,??_service+8
 13023  002A12  CFE2 F01D          	movff	fsr1h,??_service+9
 13024  002A16  CFD9 F01E          	movff	fsr2l,??_service+10
 13025  002A1A  CFDA F01F          	movff	fsr2h,??_service+11
 13026  002A1E  CFF3 F020          	movff	prodl,??_service+12
 13027  002A22  CFF4 F021          	movff	prodh,??_service+13
 13028  002A26  CFF6 F022          	movff	tblptrl,??_service+14
 13029  002A2A  CFF7 F023          	movff	tblptrh,??_service+15
 13030  002A2E  CFF8 F024          	movff	tblptru,??_service+16
 13031  002A32  CFF5 F025          	movff	tablat,??_service+17
 13032                           
 13033                           ;main.c: 312: servoInterruptService();
 13034  002A36  EC81  F014         	call	_servoInterruptService	;wreg free
 13035                           
 13036                           ;main.c: 314: if(TMR1IF){
 13037  002A3A  A09E               	btfss	3998,0,c	;volatile
 13038  002A3C  D023               	goto	i2l5297
 13039                           
 13040                           ;main.c: 315: startTimer(1,0xffff - period);
 13041  002A3E  0E00               	movlw	0
 13042  002A40  6E08               	movwf	i2startTimer@timer+1,c
 13043  002A42  0E01               	movlw	1
 13044  002A44  6E07               	movwf	i2startTimer@timer,c
 13045  002A46  0EFF               	movlw	255
 13046  002A48  6E14               	movwf	??_service& (0+255),c
 13047  002A4A  0EFF               	movlw	255
 13048  002A4C  6E15               	movwf	(??_service+1)& (0+255),c
 13049  002A4E  C143  F016         	movff	_period,??_service+2
 13050  002A52  C144  F017         	movff	_period+1,??_service+3
 13051  002A56  1E16               	comf	??_service+2,f,c
 13052  002A58  1E17               	comf	??_service+3,f,c
 13053  002A5A  4A16               	infsnz	??_service+2,f,c
 13054  002A5C  2A17               	incf	??_service+3,f,c
 13055  002A5E  5014               	movf	??_service,w,c
 13056  002A60  2616               	addwf	??_service+2,f,c
 13057  002A62  5015               	movf	??_service+1,w,c
 13058  002A64  2217               	addwfc	??_service+3,f,c
 13059  002A66  C016  F009         	movff	??_service+2,i2startTimer@val
 13060  002A6A  C017  F00A         	movff	??_service+3,i2startTimer@val+1
 13061  002A6E  6A0B               	clrf	i2startTimer@val+2,c
 13062  002A70  6A0C               	clrf	i2startTimer@val+3,c
 13063  002A72  EC78  F01B         	call	i2_startTimer	;wreg free
 13064                           
 13065                           ;main.c: 316: time+=1;
 13066  002A76  0E01               	movlw	1
 13067  002A78  2634               	addwf	_time,f,c
 13068  002A7A  0E00               	movlw	0
 13069  002A7C  2235               	addwfc	_time+1,f,c
 13070  002A7E  2236               	addwfc	_time+2,f,c
 13071  002A80  2237               	addwfc	_time+3,f,c
 13072                           
 13073                           ;main.c: 317: TMR1IF = 0;
 13074  002A82  909E               	bcf	3998,0,c	;volatile
 13075  002A84                     i2l5297:
 13076                           
 13077                           ;main.c: 318: }
 13078                           ;main.c: 321: if(INT0IF){ INT0IF = 0;
 13079  002A84  A2F2               	btfss	intcon,1,c	;volatile
 13080  002A86  D005               	goto	i2l5303
 13081  002A88  92F2               	bcf	intcon,1,c	;volatile
 13082                           
 13083                           ;main.c: 322: batteryDetected = 1;
 13084  002A8A  0E00               	movlw	0
 13085  002A8C  6E39               	movwf	_batteryDetected+1,c
 13086  002A8E  0E01               	movlw	1
 13087  002A90  6E38               	movwf	_batteryDetected,c
 13088  002A92                     i2l5303:
 13089                           
 13090                           ;main.c: 323: }
 13091                           ;main.c: 326: if(INT1IF && INT1IE){INT1IF = 0;
 13092  002A92  B0F0               	btfsc	intcon3,0,c	;volatile
 13093  002A94  A6F0               	btfss	intcon3,3,c	;volatile
 13094  002A96  D00D               	goto	i2l187
 13095  002A98  90F0               	bcf	intcon3,0,c	;volatile
 13096                           
 13097                           ;main.c: 327: char key = (PORTB & 0xF0) >> 4;
 13098  002A9A  3881               	swapf	3969,w,c	;volatile
 13099  002A9C  0B0F               	andlw	15
 13100  002A9E  0B0F               	andlw	15
 13101  002AA0  6E26               	movwf	service@key,c
 13102                           
 13103                           ;main.c: 328: if(key == 12)terminate = 1;
 13104  002AA2  0E0C               	movlw	12
 13105  002AA4  1826               	xorwf	service@key,w,c
 13106  002AA6  A4D8               	btfss	status,2,c
 13107  002AA8  D004               	goto	i2l187
 13108  002AAA  0E00               	movlw	0
 13109  002AAC  6E47               	movwf	_terminate+1,c
 13110  002AAE  0E01               	movlw	1
 13111  002AB0  6E46               	movwf	_terminate,c
 13112  002AB2                     i2l187:
 13113  002AB2  C025  FFF5         	movff	??_service+17,tablat
 13114  002AB6  C024  FFF8         	movff	??_service+16,tblptru
 13115  002ABA  C023  FFF7         	movff	??_service+15,tblptrh
 13116  002ABE  C022  FFF6         	movff	??_service+14,tblptrl
 13117  002AC2  C021  FFF4         	movff	??_service+13,prodh
 13118  002AC6  C020  FFF3         	movff	??_service+12,prodl
 13119  002ACA  C01F  FFDA         	movff	??_service+11,fsr2h
 13120  002ACE  C01E  FFD9         	movff	??_service+10,fsr2l
 13121  002AD2  C01D  FFE2         	movff	??_service+9,fsr1h
 13122  002AD6  C01C  FFE1         	movff	??_service+8,fsr1l
 13123  002ADA  C01B  FFEA         	movff	??_service+7,fsr0h
 13124  002ADE  C01A  FFE9         	movff	??_service+6,fsr0l
 13125  002AE2  C019  FFFB         	movff	??_service+5,pclatu
 13126  002AE6  C018  FFFA         	movff	??_service+4,pclath
 13127  002AEA  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13128  002AEC  0011               	retfie		f
 13129  002AEE                     __end_of_service:
 13130                           	opt stack 0
 13131                           pclatu	equ	0xFFB
 13132                           pclath	equ	0xFFA
 13133                           tblptru	equ	0xFF8
 13134                           tblptrh	equ	0xFF7
 13135                           tblptrl	equ	0xFF6
 13136                           tablat	equ	0xFF5
 13137                           prodh	equ	0xFF4
 13138                           prodl	equ	0xFF3
 13139                           intcon	equ	0xFF2
 13140                           intcon3	equ	0xFF0
 13141                           postinc0	equ	0xFEE
 13142                           fsr0h	equ	0xFEA
 13143                           fsr0l	equ	0xFE9
 13144                           wreg	equ	0xFE8
 13145                           postdec1	equ	0xFE5
 13146                           fsr1h	equ	0xFE2
 13147                           fsr1l	equ	0xFE1
 13148                           indf2	equ	0xFDF
 13149                           postinc2	equ	0xFDE
 13150                           postdec2	equ	0xFDD
 13151                           fsr2h	equ	0xFDA
 13152                           fsr2l	equ	0xFD9
 13153                           status	equ	0xFD8
 13154                           
 13155 ;; *************** function _servoInterruptService *****************
 13156 ;; Defined at:
 13157 ;;		line 52 in file "servo.c"
 13158 ;; Parameters:    Size  Location     Type
 13159 ;;		None
 13160 ;; Auto vars:     Size  Location     Type
 13161 ;;		None
 13162 ;; Return value:  Size  Location     Type
 13163 ;;                  1    wreg      void 
 13164 ;; Registers used:
 13165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13173 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13174 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13175 ;;Total ram usage:        4 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; Hardware stack levels required when called:    1
 13178 ;; This function calls:
 13179 ;;		i2___awmod
 13180 ;;		i2_digitalWrite
 13181 ;;		i2_startTimer
 13182 ;; This function is called by:
 13183 ;;		_service
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           	psect	text51
 13188  002902                     __ptext51:
 13189                           	opt stack 0
 13190  002902                     _servoInterruptService:
 13191                           	opt stack 21
 13192                           
 13193                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 13194                           
 13195                           ;incstack = 0
 13196  002902  A4F2               	btfss	intcon,2,c	;volatile
 13197  002904  0012               	return	
 13198  002906  94F2               	bcf	intcon,2,c	;volatile
 13199                           
 13200                           ;servo.c: 55: digitalWrite(servos[curr],0);
 13201  002908  90D8               	bcf	status,0,c
 13202  00290A  343A               	rlcf	_curr,w,c
 13203  00290C  6ED9               	movwf	fsr2l,c
 13204  00290E  343B               	rlcf	_curr+1,w,c
 13205  002910  6EDA               	movwf	fsr2h,c
 13206  002912  0E6D               	movlw	low _servos
 13207  002914  26D9               	addwf	fsr2l,f,c
 13208  002916  0E01               	movlw	high _servos
 13209  002918  22DA               	addwfc	fsr2h,f,c
 13210  00291A  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 13211  00291E  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 13212  002922  0E00               	movlw	0
 13213  002924  6E0A               	movwf	i2digitalWrite@val+1,c
 13214  002926  0E00               	movlw	0
 13215  002928  6E09               	movwf	i2digitalWrite@val,c
 13216  00292A  ECFE  F017         	call	i2_digitalWrite	;wreg free
 13217                           
 13218                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 13219  00292E  0E01               	movlw	1
 13220  002930  243A               	addwf	_curr,w,c
 13221  002932  6E01               	movwf	i2___awmod@dividend,c
 13222  002934  0E00               	movlw	0
 13223  002936  203B               	addwfc	_curr+1,w,c
 13224  002938  6E02               	movwf	i2___awmod@dividend+1,c
 13225  00293A  0E01               	movlw	1
 13226  00293C  243C               	addwf	_n,w,c
 13227  00293E  6E03               	movwf	i2___awmod@divisor,c
 13228  002940  0E00               	movlw	0
 13229  002942  203D               	addwfc	_n+1,w,c
 13230  002944  6E04               	movwf	i2___awmod@divisor+1,c
 13231  002946  EC58  F01A         	call	i2___awmod	;wreg free
 13232  00294A  90D8               	bcf	status,0,c
 13233  00294C  3601               	rlcf	?i2___awmod,f,c
 13234  00294E  3602               	rlcf	?i2___awmod+1,f,c
 13235  002950  0E6D               	movlw	low _servos
 13236  002952  2401               	addwf	?i2___awmod,w,c
 13237  002954  6ED9               	movwf	fsr2l,c
 13238  002956  0E01               	movlw	high _servos
 13239  002958  2002               	addwfc	?i2___awmod+1,w,c
 13240  00295A  6EDA               	movwf	fsr2h,c
 13241  00295C  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 13242  002960  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 13243  002964  0E00               	movlw	0
 13244  002966  6E0A               	movwf	i2digitalWrite@val+1,c
 13245  002968  0E01               	movlw	1
 13246  00296A  6E09               	movwf	i2digitalWrite@val,c
 13247  00296C  ECFE  F017         	call	i2_digitalWrite	;wreg free
 13248                           
 13249                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 13250  002970  0E00               	movlw	0
 13251  002972  6E08               	movwf	i2startTimer@timer+1,c
 13252  002974  0E00               	movlw	0
 13253  002976  6E07               	movwf	i2startTimer@timer,c
 13254  002978  0EFF               	movlw	255
 13255  00297A  6E10               	movwf	??_servoInterruptService& (0+255),c
 13256  00297C  0EFF               	movlw	255
 13257  00297E  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 13258  002980  0E01               	movlw	1
 13259  002982  243A               	addwf	_curr,w,c
 13260  002984  6E01               	movwf	i2___awmod@dividend,c
 13261  002986  0E00               	movlw	0
 13262  002988  203B               	addwfc	_curr+1,w,c
 13263  00298A  6E02               	movwf	i2___awmod@dividend+1,c
 13264  00298C  0E01               	movlw	1
 13265  00298E  243C               	addwf	_n,w,c
 13266  002990  6E03               	movwf	i2___awmod@divisor,c
 13267  002992  0E00               	movlw	0
 13268  002994  203D               	addwfc	_n+1,w,c
 13269  002996  6E04               	movwf	i2___awmod@divisor+1,c
 13270  002998  EC58  F01A         	call	i2___awmod	;wreg free
 13271  00299C  90D8               	bcf	status,0,c
 13272  00299E  3601               	rlcf	?i2___awmod,f,c
 13273  0029A0  3602               	rlcf	?i2___awmod+1,f,c
 13274  0029A2  0E65               	movlw	low _pulse
 13275  0029A4  2401               	addwf	?i2___awmod,w,c
 13276  0029A6  6ED9               	movwf	fsr2l,c
 13277  0029A8  0E01               	movlw	high _pulse
 13278  0029AA  2002               	addwfc	?i2___awmod+1,w,c
 13279  0029AC  6EDA               	movwf	fsr2h,c
 13280  0029AE  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 13281  0029B2  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 13282  0029B6  1E12               	comf	??_servoInterruptService+2,f,c
 13283  0029B8  1E13               	comf	??_servoInterruptService+3,f,c
 13284  0029BA  4A12               	infsnz	??_servoInterruptService+2,f,c
 13285  0029BC  2A13               	incf	??_servoInterruptService+3,f,c
 13286  0029BE  5010               	movf	??_servoInterruptService,w,c
 13287  0029C0  2612               	addwf	??_servoInterruptService+2,f,c
 13288  0029C2  5011               	movf	??_servoInterruptService+1,w,c
 13289  0029C4  2213               	addwfc	??_servoInterruptService+3,f,c
 13290  0029C6  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 13291  0029CA  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 13292  0029CE  6A0B               	clrf	i2startTimer@val+2,c
 13293  0029D0  6A0C               	clrf	i2startTimer@val+3,c
 13294  0029D2  EC78  F01B         	call	i2_startTimer	;wreg free
 13295                           
 13296                           ;servo.c: 59: curr = (curr+1)%(n+1);
 13297  0029D6  0E01               	movlw	1
 13298  0029D8  243A               	addwf	_curr,w,c
 13299  0029DA  6E01               	movwf	i2___awmod@dividend,c
 13300  0029DC  0E00               	movlw	0
 13301  0029DE  203B               	addwfc	_curr+1,w,c
 13302  0029E0  6E02               	movwf	i2___awmod@dividend+1,c
 13303  0029E2  0E01               	movlw	1
 13304  0029E4  243C               	addwf	_n,w,c
 13305  0029E6  6E03               	movwf	i2___awmod@divisor,c
 13306  0029E8  0E00               	movlw	0
 13307  0029EA  203D               	addwfc	_n+1,w,c
 13308  0029EC  6E04               	movwf	i2___awmod@divisor+1,c
 13309  0029EE  EC58  F01A         	call	i2___awmod	;wreg free
 13310  0029F2  C001  F03A         	movff	?i2___awmod,_curr
 13311  0029F6  C002  F03B         	movff	?i2___awmod+1,_curr+1
 13312  0029FA  0012               	return	
 13313  0029FC                     __end_of_servoInterruptService:
 13314                           	opt stack 0
 13315                           pclatu	equ	0xFFB
 13316                           pclath	equ	0xFFA
 13317                           tblptru	equ	0xFF8
 13318                           tblptrh	equ	0xFF7
 13319                           tblptrl	equ	0xFF6
 13320                           tablat	equ	0xFF5
 13321                           prodh	equ	0xFF4
 13322                           prodl	equ	0xFF3
 13323                           intcon	equ	0xFF2
 13324                           intcon3	equ	0xFF0
 13325                           postinc0	equ	0xFEE
 13326                           fsr0h	equ	0xFEA
 13327                           fsr0l	equ	0xFE9
 13328                           wreg	equ	0xFE8
 13329                           postdec1	equ	0xFE5
 13330                           fsr1h	equ	0xFE2
 13331                           fsr1l	equ	0xFE1
 13332                           indf2	equ	0xFDF
 13333                           postinc2	equ	0xFDE
 13334                           postdec2	equ	0xFDD
 13335                           fsr2h	equ	0xFDA
 13336                           fsr2l	equ	0xFD9
 13337                           status	equ	0xFD8
 13338                           
 13339 ;; *************** function i2_startTimer *****************
 13340 ;; Defined at:
 13341 ;;		line 76 in file "timer.c"
 13342 ;; Parameters:    Size  Location     Type
 13343 ;;  timer           2    6[COMRAM] int 
 13344 ;;  val             4    8[COMRAM] long 
 13345 ;; Auto vars:     Size  Location     Type
 13346 ;;		None
 13347 ;; Return value:  Size  Location     Type
 13348 ;;                  1    wreg      void 
 13349 ;; Registers used:
 13350 ;;		wreg, status,2, status,0
 13351 ;; Tracked objects:
 13352 ;;		On entry : 0/0
 13353 ;;		On exit  : 0/0
 13354 ;;		Unchanged: 0/0
 13355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13356 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13358 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13359 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13360 ;;Total ram usage:        8 bytes
 13361 ;; Hardware stack levels used:    1
 13362 ;; This function calls:
 13363 ;;		Nothing
 13364 ;; This function is called by:
 13365 ;;		_service
 13366 ;;		_servoInterruptService
 13367 ;; This function uses a non-reentrant model
 13368 ;;
 13369                           
 13370                           	psect	text52
 13371  0036F0                     __ptext52:
 13372                           	opt stack 0
 13373  0036F0                     i2_startTimer:
 13374                           	opt stack 22
 13375                           
 13376                           ;timer.c: 77: switch(timer){
 13377                           
 13378                           ;incstack = 0
 13379  0036F0  D012               	goto	i2l4861
 13380  0036F2                     i2l426:
 13381                           
 13382                           ;timer.c: 79: TMR0H = val>>8;
 13383  0036F2  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 13384                           
 13385                           ;timer.c: 80: TMR0L = val;
 13386  0036F6  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 13387                           
 13388                           ;timer.c: 81: T0CON |= 1<<7;
 13389  0036FA  8ED5               	bsf	4053,7,c	;volatile
 13390                           
 13391                           ;timer.c: 82: break;
 13392  0036FC  0012               	return	
 13393  0036FE                     i2l428:
 13394                           
 13395                           ;timer.c: 84: TMR1H = val>>8;
 13396  0036FE  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 13397                           
 13398                           ;timer.c: 85: TMR1L = val;
 13399  003702  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 13400                           
 13401                           ;timer.c: 86: T1CON |= 1<<0;
 13402  003706  80CD               	bsf	4045,0,c	;volatile
 13403                           
 13404                           ;timer.c: 87: break;
 13405  003708  0012               	return	
 13406  00370A                     i2l429:
 13407                           
 13408                           ;timer.c: 89: TMR3H = val>>8;
 13409  00370A  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 13410                           
 13411                           ;timer.c: 90: TMR3L = val;
 13412  00370E  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 13413                           
 13414                           ;timer.c: 91: T3CON |= 1<<0;
 13415  003712  80B1               	bsf	4017,0,c	;volatile
 13416                           
 13417                           ;timer.c: 92: }
 13418  003714  0012               	return	
 13419  003716                     i2l4861:
 13420  003716  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 13421  00371A  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 13422                           
 13423                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13424                           ; Switch size 1, requested type "space"
 13425                           ; Number of cases is 1, Range of values is 0 to 0
 13426                           ; switch strategies available:
 13427                           ; Name         Instructions Cycles
 13428                           ; simple_byte            4     3 (average)
 13429                           ;	Chosen strategy is simple_byte
 13430  00371E  500E               	movf	??i2_startTimer+1,w,c
 13431  003720  0A00               	xorlw	0	; case 0
 13432  003722  A4D8               	btfss	status,2,c
 13433  003724  0012               	return	
 13434                           
 13435                           ; Switch size 1, requested type "space"
 13436                           ; Number of cases is 3, Range of values is 0 to 3
 13437                           ; switch strategies available:
 13438                           ; Name         Instructions Cycles
 13439                           ; simple_byte           10     6 (average)
 13440                           ;	Chosen strategy is simple_byte
 13441  003726  500D               	movf	??i2_startTimer,w,c
 13442  003728  0A00               	xorlw	0	; case 0
 13443  00372A  B4D8               	btfsc	status,2,c
 13444  00372C  D7E2               	goto	i2l426
 13445  00372E  0A01               	xorlw	1	; case 1
 13446  003730  B4D8               	btfsc	status,2,c
 13447  003732  D7E5               	goto	i2l428
 13448  003734  0A02               	xorlw	2	; case 3
 13449  003736  A4D8               	btfss	status,2,c
 13450  003738  0012               	return	
 13451  00373A  D7E7               	goto	i2l429
 13452  00373C                     __end_ofi2_startTimer:
 13453                           	opt stack 0
 13454                           pclatu	equ	0xFFB
 13455                           pclath	equ	0xFFA
 13456                           tblptru	equ	0xFF8
 13457                           tblptrh	equ	0xFF7
 13458                           tblptrl	equ	0xFF6
 13459                           tablat	equ	0xFF5
 13460                           prodh	equ	0xFF4
 13461                           prodl	equ	0xFF3
 13462                           intcon	equ	0xFF2
 13463                           intcon3	equ	0xFF0
 13464                           postinc0	equ	0xFEE
 13465                           fsr0h	equ	0xFEA
 13466                           fsr0l	equ	0xFE9
 13467                           wreg	equ	0xFE8
 13468                           postdec1	equ	0xFE5
 13469                           fsr1h	equ	0xFE2
 13470                           fsr1l	equ	0xFE1
 13471                           indf2	equ	0xFDF
 13472                           postinc2	equ	0xFDE
 13473                           postdec2	equ	0xFDD
 13474                           fsr2h	equ	0xFDA
 13475                           fsr2l	equ	0xFD9
 13476                           status	equ	0xFD8
 13477                           
 13478 ;; *************** function i2_digitalWrite *****************
 13479 ;; Defined at:
 13480 ;;		line 53 in file "iopin.c"
 13481 ;; Parameters:    Size  Location     Type
 13482 ;;  pin             2    6[COMRAM] PTR int 
 13483 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
 13484 ;;		 -> conveyorServo(4), cylinderMotor(4), 
 13485 ;;  val             2    8[COMRAM] int 
 13486 ;; Auto vars:     Size  Location     Type
 13487 ;;  digitalWrite    2   13[COMRAM] int 
 13488 ;; Return value:  Size  Location     Type
 13489 ;;                  1    wreg      void 
 13490 ;; Registers used:
 13491 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13492 ;; Tracked objects:
 13493 ;;		On entry : 0/0
 13494 ;;		On exit  : 0/0
 13495 ;;		Unchanged: 0/0
 13496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13497 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13499 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13500 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13501 ;;Total ram usage:        9 bytes
 13502 ;; Hardware stack levels used:    1
 13503 ;; This function calls:
 13504 ;;		Nothing
 13505 ;; This function is called by:
 13506 ;;		_servoInterruptService
 13507 ;; This function uses a non-reentrant model
 13508 ;;
 13509                           
 13510                           	psect	text53
 13511  002FFC                     __ptext53:
 13512                           	opt stack 0
 13513  002FFC                     i2_digitalWrite:
 13514                           	opt stack 21
 13515                           
 13516                           ;iopin.c: 54: if(pin){
 13517                           
 13518                           ;incstack = 0
 13519  002FFC  5007               	movf	i2digitalWrite@pin,w,c
 13520  002FFE  1008               	iorwf	i2digitalWrite@pin+1,w,c
 13521  003000  B4D8               	btfsc	status,2,c
 13522  003002  0012               	return	
 13523                           
 13524                           ;iopin.c: 55: int p = 1 << pin[1];
 13525  003004  EE20 F002          	lfsr	2,2
 13526  003008  5007               	movf	i2digitalWrite@pin,w,c
 13527  00300A  26D9               	addwf	fsr2l,f,c
 13528  00300C  5008               	movf	i2digitalWrite@pin+1,w,c
 13529  00300E  22DA               	addwfc	fsr2h,f,c
 13530  003010  50DF               	movf	indf2,w,c
 13531  003012  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 13532  003014  0E01               	movlw	1
 13533  003016  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 13534  003018  0E00               	movlw	0
 13535  00301A  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 13536  00301C  2A0B               	incf	??i2_digitalWrite,f,c
 13537  00301E  D003               	goto	i2u461_44
 13538  003020                     i2u461_45:
 13539  003020  90D8               	bcf	status,0,c
 13540  003022  360C               	rlcf	??i2_digitalWrite+1,f,c
 13541  003024  360D               	rlcf	??i2_digitalWrite+2,f,c
 13542  003026                     i2u461_44:
 13543  003026  2E0B               	decfsz	??i2_digitalWrite,f,c
 13544  003028  D7FB               	goto	i2u461_45
 13545  00302A  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 13546  00302E  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 13547                           
 13548                           ;iopin.c: 56: if(val == 0){
 13549  003032  5009               	movf	i2digitalWrite@val,w,c
 13550  003034  100A               	iorwf	i2digitalWrite@val+1,w,c
 13551  003036  A4D8               	btfss	status,2,c
 13552  003038  D02B               	goto	i2l4847
 13553                           
 13554                           ;iopin.c: 57: p ^= 0xff;
 13555  00303A  0EFF               	movlw	255
 13556  00303C  1A0E               	xorwf	i2digitalWrite@p,f,c
 13557                           
 13558                           ;iopin.c: 58: }
 13559                           ;iopin.c: 60: switch(pin[0]){
 13560  00303E  D028               	goto	i2l4847
 13561  003040                     i2l4823:
 13562  003040  0409               	decf	i2digitalWrite@val,w,c
 13563  003042  100A               	iorwf	i2digitalWrite@val+1,w,c
 13564  003044  A4D8               	btfss	status,2,c
 13565  003046  D003               	goto	i2l4827
 13566  003048  500E               	movf	i2digitalWrite@p,w,c
 13567  00304A  1289               	iorwf	3977,f,c	;volatile
 13568  00304C  0012               	return	
 13569  00304E                     i2l4827:
 13570                           
 13571                           ;iopin.c: 62: else LATA &= p;
 13572  00304E  500E               	movf	i2digitalWrite@p,w,c
 13573  003050  1689               	andwf	3977,f,c	;volatile
 13574                           
 13575                           ;iopin.c: 63: break;
 13576  003052  0012               	return	
 13577  003054                     i2l4829:
 13578  003054  0409               	decf	i2digitalWrite@val,w,c
 13579  003056  100A               	iorwf	i2digitalWrite@val+1,w,c
 13580  003058  A4D8               	btfss	status,2,c
 13581  00305A  D003               	goto	i2l4833
 13582  00305C  500E               	movf	i2digitalWrite@p,w,c
 13583  00305E  128A               	iorwf	3978,f,c	;volatile
 13584  003060  0012               	return	
 13585  003062                     i2l4833:
 13586                           
 13587                           ;iopin.c: 65: else LATB &= p;
 13588  003062  500E               	movf	i2digitalWrite@p,w,c
 13589  003064  168A               	andwf	3978,f,c	;volatile
 13590                           
 13591                           ;iopin.c: 66: break;
 13592  003066  0012               	return	
 13593  003068                     i2l4835:
 13594  003068  0409               	decf	i2digitalWrite@val,w,c
 13595  00306A  100A               	iorwf	i2digitalWrite@val+1,w,c
 13596  00306C  A4D8               	btfss	status,2,c
 13597  00306E  D003               	goto	i2l4839
 13598  003070  500E               	movf	i2digitalWrite@p,w,c
 13599  003072  128B               	iorwf	3979,f,c	;volatile
 13600  003074  0012               	return	
 13601  003076                     i2l4839:
 13602                           
 13603                           ;iopin.c: 68: else LATC &= p;
 13604  003076  500E               	movf	i2digitalWrite@p,w,c
 13605  003078  168B               	andwf	3979,f,c	;volatile
 13606                           
 13607                           ;iopin.c: 69: break;
 13608  00307A  0012               	return	
 13609  00307C                     i2l4841:
 13610  00307C  0409               	decf	i2digitalWrite@val,w,c
 13611  00307E  100A               	iorwf	i2digitalWrite@val+1,w,c
 13612  003080  A4D8               	btfss	status,2,c
 13613  003082  D003               	goto	i2l4845
 13614  003084  500E               	movf	i2digitalWrite@p,w,c
 13615  003086  128C               	iorwf	3980,f,c	;volatile
 13616  003088  0012               	return	
 13617  00308A                     i2l4845:
 13618                           
 13619                           ;iopin.c: 71: else LATD &= p;
 13620  00308A  500E               	movf	i2digitalWrite@p,w,c
 13621  00308C  168C               	andwf	3980,f,c	;volatile
 13622                           
 13623                           ;iopin.c: 72: }
 13624  00308E  0012               	return	
 13625  003090                     i2l4847:
 13626  003090  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 13627  003094  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 13628  003098  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 13629  00309C  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 13630                           
 13631                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13632                           ; Switch size 1, requested type "space"
 13633                           ; Number of cases is 1, Range of values is 0 to 0
 13634                           ; switch strategies available:
 13635                           ; Name         Instructions Cycles
 13636                           ; simple_byte            4     3 (average)
 13637                           ;	Chosen strategy is simple_byte
 13638  0030A0  500C               	movf	??i2_digitalWrite+1,w,c
 13639  0030A2  0A00               	xorlw	0	; case 0
 13640  0030A4  A4D8               	btfss	status,2,c
 13641  0030A6  0012               	return	
 13642                           
 13643                           ; Switch size 1, requested type "space"
 13644                           ; Number of cases is 4, Range of values is 0 to 3
 13645                           ; switch strategies available:
 13646                           ; Name         Instructions Cycles
 13647                           ; simple_byte           13     7 (average)
 13648                           ;	Chosen strategy is simple_byte
 13649  0030A8  500B               	movf	??i2_digitalWrite,w,c
 13650  0030AA  0A00               	xorlw	0	; case 0
 13651  0030AC  B4D8               	btfsc	status,2,c
 13652  0030AE  D7C8               	goto	i2l4823
 13653  0030B0  0A01               	xorlw	1	; case 1
 13654  0030B2  B4D8               	btfsc	status,2,c
 13655  0030B4  D7CF               	goto	i2l4829
 13656  0030B6  0A03               	xorlw	3	; case 2
 13657  0030B8  B4D8               	btfsc	status,2,c
 13658  0030BA  D7D6               	goto	i2l4835
 13659  0030BC  0A01               	xorlw	1	; case 3
 13660  0030BE  A4D8               	btfss	status,2,c
 13661  0030C0  0012               	return	
 13662  0030C2  D7DC               	goto	i2l4841
 13663  0030C4                     __end_ofi2_digitalWrite:
 13664                           	opt stack 0
 13665                           pclatu	equ	0xFFB
 13666                           pclath	equ	0xFFA
 13667                           tblptru	equ	0xFF8
 13668                           tblptrh	equ	0xFF7
 13669                           tblptrl	equ	0xFF6
 13670                           tablat	equ	0xFF5
 13671                           prodh	equ	0xFF4
 13672                           prodl	equ	0xFF3
 13673                           intcon	equ	0xFF2
 13674                           intcon3	equ	0xFF0
 13675                           postinc0	equ	0xFEE
 13676                           fsr0h	equ	0xFEA
 13677                           fsr0l	equ	0xFE9
 13678                           wreg	equ	0xFE8
 13679                           postdec1	equ	0xFE5
 13680                           fsr1h	equ	0xFE2
 13681                           fsr1l	equ	0xFE1
 13682                           indf2	equ	0xFDF
 13683                           postinc2	equ	0xFDE
 13684                           postdec2	equ	0xFDD
 13685                           fsr2h	equ	0xFDA
 13686                           fsr2l	equ	0xFD9
 13687                           status	equ	0xFD8
 13688                           
 13689 ;; *************** function i2___awmod *****************
 13690 ;; Defined at:
 13691 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 13692 ;; Parameters:    Size  Location     Type
 13693 ;;  dividend        2    0[COMRAM] int 
 13694 ;;  divisor         2    2[COMRAM] int 
 13695 ;; Auto vars:     Size  Location     Type
 13696 ;;  __awmod         1    5[COMRAM] unsigned char 
 13697 ;;  __awmod         1    4[COMRAM] unsigned char 
 13698 ;; Return value:  Size  Location     Type
 13699 ;;                  2    0[COMRAM] int 
 13700 ;; Registers used:
 13701 ;;		wreg, status,2, status,0
 13702 ;; Tracked objects:
 13703 ;;		On entry : 0/0
 13704 ;;		On exit  : 0/0
 13705 ;;		Unchanged: 0/0
 13706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13707 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13708 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13710 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13711 ;;Total ram usage:        6 bytes
 13712 ;; Hardware stack levels used:    1
 13713 ;; This function calls:
 13714 ;;		Nothing
 13715 ;; This function is called by:
 13716 ;;		_servoInterruptService
 13717 ;; This function uses a non-reentrant model
 13718 ;;
 13719                           
 13720                           	psect	text54
 13721  0034B0                     __ptext54:
 13722                           	opt stack 0
 13723  0034B0                     i2___awmod:
 13724                           	opt stack 21
 13725                           
 13726                           ;incstack = 0
 13727  0034B0  0E00               	movlw	0
 13728  0034B2  6E06               	movwf	i2___awmod@sign,c
 13729  0034B4  AE02               	btfss	i2___awmod@dividend+1,7,c
 13730  0034B6  D006               	goto	i2l4875
 13731  0034B8  6C01               	negf	i2___awmod@dividend,c
 13732  0034BA  1E02               	comf	i2___awmod@dividend+1,f,c
 13733  0034BC  B0D8               	btfsc	status,0,c
 13734  0034BE  2A02               	incf	i2___awmod@dividend+1,f,c
 13735  0034C0  0E01               	movlw	1
 13736  0034C2  6E06               	movwf	i2___awmod@sign,c
 13737  0034C4                     i2l4875:
 13738  0034C4  AE04               	btfss	i2___awmod@divisor+1,7,c
 13739  0034C6  D004               	goto	i2l4879
 13740  0034C8  6C03               	negf	i2___awmod@divisor,c
 13741  0034CA  1E04               	comf	i2___awmod@divisor+1,f,c
 13742  0034CC  B0D8               	btfsc	status,0,c
 13743  0034CE  2A04               	incf	i2___awmod@divisor+1,f,c
 13744  0034D0                     i2l4879:
 13745  0034D0  5003               	movf	i2___awmod@divisor,w,c
 13746  0034D2  1004               	iorwf	i2___awmod@divisor+1,w,c
 13747  0034D4  B4D8               	btfsc	status,2,c
 13748  0034D6  D018               	goto	i2l4895
 13749  0034D8  0E01               	movlw	1
 13750  0034DA  6E05               	movwf	i2___awmod@counter,c
 13751  0034DC  D004               	goto	i2l4885
 13752  0034DE                     i2l4883:
 13753  0034DE  90D8               	bcf	status,0,c
 13754  0034E0  3603               	rlcf	i2___awmod@divisor,f,c
 13755  0034E2  3604               	rlcf	i2___awmod@divisor+1,f,c
 13756  0034E4  2A05               	incf	i2___awmod@counter,f,c
 13757  0034E6                     i2l4885:
 13758  0034E6  AE04               	btfss	i2___awmod@divisor+1,7,c
 13759  0034E8  D7FA               	goto	i2l4883
 13760  0034EA                     i2l4887:
 13761  0034EA  5003               	movf	i2___awmod@divisor,w,c
 13762  0034EC  5C01               	subwf	i2___awmod@dividend,w,c
 13763  0034EE  5004               	movf	i2___awmod@divisor+1,w,c
 13764  0034F0  5802               	subwfb	i2___awmod@dividend+1,w,c
 13765  0034F2  A0D8               	btfss	status,0,c
 13766  0034F4  D004               	goto	i2l4891
 13767  0034F6  5003               	movf	i2___awmod@divisor,w,c
 13768  0034F8  5E01               	subwf	i2___awmod@dividend,f,c
 13769  0034FA  5004               	movf	i2___awmod@divisor+1,w,c
 13770  0034FC  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13771  0034FE                     i2l4891:
 13772  0034FE  90D8               	bcf	status,0,c
 13773  003500  3204               	rrcf	i2___awmod@divisor+1,f,c
 13774  003502  3203               	rrcf	i2___awmod@divisor,f,c
 13775  003504  2E05               	decfsz	i2___awmod@counter,f,c
 13776  003506  D7F1               	goto	i2l4887
 13777  003508                     i2l4895:
 13778  003508  5006               	movf	i2___awmod@sign,w,c
 13779  00350A  B4D8               	btfsc	status,2,c
 13780  00350C  D004               	goto	i2l4899
 13781  00350E  6C01               	negf	i2___awmod@dividend,c
 13782  003510  1E02               	comf	i2___awmod@dividend+1,f,c
 13783  003512  B0D8               	btfsc	status,0,c
 13784  003514  2A02               	incf	i2___awmod@dividend+1,f,c
 13785  003516                     i2l4899:
 13786  003516  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13787  00351A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13788  00351E  0012               	return	
 13789  003520                     __end_ofi2___awmod:
 13790                           	opt stack 0
 13791                           pclatu	equ	0xFFB
 13792                           pclath	equ	0xFFA
 13793                           tblptru	equ	0xFF8
 13794                           tblptrh	equ	0xFF7
 13795                           tblptrl	equ	0xFF6
 13796                           tablat	equ	0xFF5
 13797                           prodh	equ	0xFF4
 13798                           prodl	equ	0xFF3
 13799                           intcon	equ	0xFF2
 13800                           intcon3	equ	0xFF0
 13801                           postinc0	equ	0xFEE
 13802                           fsr0h	equ	0xFEA
 13803                           fsr0l	equ	0xFE9
 13804                           wreg	equ	0xFE8
 13805                           postdec1	equ	0xFE5
 13806                           fsr1h	equ	0xFE2
 13807                           fsr1l	equ	0xFE1
 13808                           indf2	equ	0xFDF
 13809                           postinc2	equ	0xFDE
 13810                           postdec2	equ	0xFDD
 13811                           fsr2h	equ	0xFDA
 13812                           fsr2l	equ	0xFD9
 13813                           status	equ	0xFD8
 13814                           pclatu	equ	0xFFB
 13815                           pclath	equ	0xFFA
 13816                           tblptru	equ	0xFF8
 13817                           tblptrh	equ	0xFF7
 13818                           tblptrl	equ	0xFF6
 13819                           tablat	equ	0xFF5
 13820                           prodh	equ	0xFF4
 13821                           prodl	equ	0xFF3
 13822                           intcon	equ	0xFF2
 13823                           intcon3	equ	0xFF0
 13824                           postinc0	equ	0xFEE
 13825                           fsr0h	equ	0xFEA
 13826                           fsr0l	equ	0xFE9
 13827                           wreg	equ	0xFE8
 13828                           postdec1	equ	0xFE5
 13829                           fsr1h	equ	0xFE2
 13830                           fsr1l	equ	0xFE1
 13831                           indf2	equ	0xFDF
 13832                           postinc2	equ	0xFDE
 13833                           postdec2	equ	0xFDD
 13834                           fsr2h	equ	0xFDA
 13835                           fsr2l	equ	0xFD9
 13836                           status	equ	0xFD8
 13837                           
 13838                           	psect	rparam
 13839  0000                     pclatu	equ	0xFFB
 13840                           pclath	equ	0xFFA
 13841                           tblptru	equ	0xFF8
 13842                           tblptrh	equ	0xFF7
 13843                           tblptrl	equ	0xFF6
 13844                           tablat	equ	0xFF5
 13845                           prodh	equ	0xFF4
 13846                           prodl	equ	0xFF3
 13847                           intcon	equ	0xFF2
 13848                           intcon3	equ	0xFF0
 13849                           postinc0	equ	0xFEE
 13850                           fsr0h	equ	0xFEA
 13851                           fsr0l	equ	0xFE9
 13852                           wreg	equ	0xFE8
 13853                           postdec1	equ	0xFE5
 13854                           fsr1h	equ	0xFE2
 13855                           fsr1l	equ	0xFE1
 13856                           indf2	equ	0xFDF
 13857                           postinc2	equ	0xFDE
 13858                           postdec2	equ	0xFDD
 13859                           fsr2h	equ	0xFDA
 13860                           fsr2l	equ	0xFD9
 13861                           status	equ	0xFD8
 13862                           
 13863                           	psect	temp
 13864  000059                     btemp:
 13865                           	opt stack 0
 13866  000059                     	ds	1
 13867  0000                     int$flags	set	btemp
 13868                           pclatu	equ	0xFFB
 13869                           pclath	equ	0xFFA
 13870                           tblptru	equ	0xFF8
 13871                           tblptrh	equ	0xFF7
 13872                           tblptrl	equ	0xFF6
 13873                           tablat	equ	0xFF5
 13874                           prodh	equ	0xFF4
 13875                           prodl	equ	0xFF3
 13876                           intcon	equ	0xFF2
 13877                           intcon3	equ	0xFF0
 13878                           postinc0	equ	0xFEE
 13879                           fsr0h	equ	0xFEA
 13880                           fsr0l	equ	0xFE9
 13881                           wreg	equ	0xFE8
 13882                           postdec1	equ	0xFE5
 13883                           fsr1h	equ	0xFE2
 13884                           fsr1l	equ	0xFE1
 13885                           indf2	equ	0xFDF
 13886                           postinc2	equ	0xFDE
 13887                           postdec2	equ	0xFDD
 13888                           fsr2h	equ	0xFDA
 13889                           fsr2l	equ	0xFD9
 13890                           status	equ	0xFD8


Data Sizes:
    Strings     307
    Constant    174
    Data        61
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51      88
    BANK0           128    121     121
    BANK1           256     56     125
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_18(CODE[17]), STR_17(CODE[18]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[17]), STR_9(CODE[18]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[8]), STR_5(CODE[15]), STR_4(CODE[14]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), cylinderDir(BANK1[4]), 


Critical Paths under _main in COMRAM

    _printf->___lldiv
    _printf->___lltoft
    _scale->___wmul
    _lcdNewline->_lcdInst
    _fround->___wmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _angleToPulse->___altoft
    _angleToPulse->___awtoft
    ___fttol->___altoft
    ___fttol->___awtoft
    ___ftmul->___altoft
    ___ftmul->___awtoft
    ___ftmul->___wmul
    ___ftdiv->___altoft
    ___ftdiv->___awtoft
    ___ftadd->___altoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _main->_sortBattery
    _sortBattery->_printf
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftsub->___ftadd
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___almod->___aldiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  589122
                                             31 BANK1     25    25      0
                            ___aldiv
                            ___almod
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _readKeypad
                      _showInterface
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  112524
                                            119 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1748
                                             38 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     386
                                             38 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             38 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  383427
                                            120 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   63794
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   63794
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   63794
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   63825
                                            119 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             38 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   63794
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   63794
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   63599
                                             73 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   13901
                                             36 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             42 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             38 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   13622
                                             36 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3344
                                             48 COMRAM     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             38 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             44 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             38 COMRAM     9     3      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             38 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             46 COMRAM     5     1      4
                                              0 BANK0      4     4      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                              0 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             38 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             58 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             38 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                              0 BANK0      9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   24123
                                            106 BANK0      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     847
                                             38 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22459
                                             96 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21152
                                             73 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             58 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                             21 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                              6 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             46 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3025
                                             46 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             46 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             38 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     262
                                             38 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             42 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             40 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             38 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     587
                                             46 COMRAM     2     2      0
                                              6 BANK0      8     0      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     753
                                             38 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             19    19      0    1449
                                             19 COMRAM    19    19      0
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readKeypad
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     38      7D       7       48.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     79      79       5       94.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 27 17:23:47 2017

                  ___altoft@exp 0084                               _n 003C               main@cylinderStart 0132  
          main@cylinderBackward 012E                   ___altoft@sign 0085                     _sortBattery 0E38  
                  ___awdiv@sign 0081             ___wmul@multiplicand 0086                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000                _redirectingServo 0161  
                  ___ftadd@exp1 00B9                    ___ftadd@exp2 00B8             main@cylinderForward 012C  
                  ___ftadd@sign 00B7                             l211 3A26                             l320 2BD2  
                           l136 1A14                             l137 1A1C                             l250 398C  
                           l147 1B3A                             l247 3980                             l168 120E  
                           l345 3818                             l426 36A6                             l419 3780  
                           l428 36B2                             l429 36BE                             l726 09C0  
               ??_showInterface 0034                             l766 0840                             l775 0A2E  
                  __CFG_CPB$OFF 000000                             _PEN 007E2A                    __CFG_CPD$OFF 000000  
                           _SEN 007E28                             _n_C 0042                    ___awmod@sign 002C  
                           wreg 000FE8                    __CFG_LVP$OFF 000000                    ___ftdiv@cntr 008F  
                  ___ftdiv@sign 0094                    __CFG_WDT$OFF 000000                            l1100 1F66  
                          l1030 27EC                            l1120 255C                            l1109 1F90  
                          l1062 3152                            l1134 2434                            l1127 238E  
                          l1128 23BA                            l1209 342E                            l1091 1E90  
                          l1219 3296                            l1085 1E2E                            l1159 3A08  
                          l1089 1E68                            l6001 24BA                            l6021 251A  
                          l6101 265E                            l6111 268E                            l6113 269E  
                          l6105 2672                            l7011 2C2A                            l7003 2BF8  
                          l6051 3858                            l6115 26A8                            l6131 33EC  
                          l6211 0182                            l7013 2C38                            l6141 3420  
                          l6133 33F0                            l6301 0482                            l6221 01A4  
                          l6205 0126                            l7015 2C3E                            l7023 2C92  
                          l7007 2C10                            l6119 26C4                            l6063 2FB4  
                          l6039 367A                            l6151 323A                            l6311 0512  
                          l6303 04B2                            l6231 01F2                            l6215 0192  
                          l6129 33E0                            l6153 3240                            l6401 08BA  
                          l6305 04C8                            l6241 0230                            l6233 01FE  
                          l6217 0198                            l6209 016C                            l7033 17A4  
                          l7027 2CAA                            l7019 2C82                            l6083 25CC  
                          l6059 2F74                            l6163 3526                            l6331 060A  
                          l6315 0540                            l6243 024A                            l6235 0204  
                          l6227 01CC                            l6219 019E                            l5621 1F1E  
                          l6069 2FF8                            l6157 3284                            l6149 322A  
                          l6165 3532                            l6421 09E8                            l6413 09B2  
                          l6325 059E                            l6261 02D8                            l6237 021C  
                          l6253 027A                            l6181 004E                            l5551 3120  
                          l5543 30E2                            l5615 1EF6                            l5711 319C  
                          l6511 0C86                            l6503 0C50                            l6407 0996  
                          l6351 06C8                            l6343 0650                            l6271 031E  
                          l6247 0262                            l6255 02BE                            l6191 0088  
                          l6175 0022                            l7071 1A24                            l5553 313E  
                          l5545 30EC                            l5617 1F04                            l5609 1EC8  
                          l5721 31C4                            l5705 318A                            l6505 0C5A  
                          l6409 09A4                            l6361 0704                            l6329 0604  
                          l6185 0058                            l7057 1882                            l7049 183E  
                          l5555 3148                            l5547 310A                            l5539 30D4  
                          l5635 1FBA                            l5627 1F4C                            l5619 1F12  
                          l5803 1D7E                            l6523 0CC8                            l6435 0A50  
                          l6363 071A                            l6347 06A0                            l6179 0038  
                          l6611 2ED8                            l6603 2EBE                            l7075 1AAE  
                          l5645 2008                            l5629 1F5A                            l5661 2200  
                          l5717 31B6                            l5733 31F0                            l6517 0CA2  
                          l6461 0AF2                            l6445 0AA0                            l6381 0800  
                          l6373 0764                            l6357 06F6                            l6541 0E18  
                          l6621 2EFA                            l6605 2EC4                            l5655 21C6  
                          l5911 242A                            l5903 2400                            l5719 31C0  
                          l5823 1548                            l6527 0CF0                            l6535 0DE8  
                          l6519 0CAE                            l6447 0AA6                            l6439 0A78  
                          l6391 0844                            l6367 0728                            l6295 043E  
                          l6287 03CE                            l6199 00FE                            l6631 2AF0  
                          l6615 2EE6                            l6623 2F00                            l7079 1ABE  
                          l6553 373E                            l5593 1E76                            l5737 3204  
                          l5729 31E4                            l5761 347A                            l5753 3460  
                          l5841 1776                            l5817 148E                            l6529 0D74  
                          l6537 0DFA                            l6481 0B72                            l6385 080E  
                          l6369 073C                            l6617 2EEC                            l6609 2ED2  
                          l7089 1ADC                            l6571 375C                            l5587 1E3C  
                          l5675 224E                            l5835 16BC                            l5827 156E  
                          l6539 0E02                            l6491 0BD6                            l6459 0AEC  
                          l6475 0B38                            l6387 0822                            l6379 07F2  
                          l6299 046C                            l6811 28E0                            l6803 28C6  
                          l6643 2B74                            l6635 2B1C                            l6565 3754  
                          l5685 228C                            l5925 2712                            l5909 241A  
                          l5773 34A6                            l5765 348E                            l5757 346E  
                          l5749 3454                            l5853 3A70                            l6485 0BA2  
                          l6477 0B4A                            l6397 0868                            l6813 28EC  
                          l6559 3748                            l5599 1E86                            l5679 226C  
                          l5919 26F4                            l5863 231A                            l5759 3476  
                          l6807 28D6                            l6639 2B48                            l5689 22AA  
                          l6665 2DB6                            l6673 2E34                            l6585 36CA  
                          l5769 3498                            l6497 0C0E                            l6761 2810  
                          l6649 2BA0                            l6905 11DE                            l5971 27E6  
                          l5963 27C2                            l5947 2784                            l5939 2754  
                          l5795 1CA6                            l6499 0C18                            l6755 27FE  
                          l6923 1282                            l6915 121C                            l5981 32D0  
                          l6669 2E0C                            l5869 234A                            l6773 2844  
                          l6757 2802                            l6917 1244                            l6853 0EF8  
                          l5983 32DE                            l5959 27B2                            l6791 2890  
                          l6759 280C                            l6599 2EB0                            l5969 27DA  
                          l6785 287E                            l6769 2836                            l6929 12B2  
                          l6971 2D1C                            l5995 2480                            l5899 23EC  
                          l6867 0FD6                            l6973 2D2A                            l6965 2CF6  
                          l6789 2888                            l6877 10C0                            l6991 2D8E  
                          l6983 2D62                            l6975 2D2E                            l6959 2CDC  
                          l6799 28B6                            l6887 1156                            l6879 10EE  
                          l6897 11AE                            l6987 2D72                            _EEIF 007D0C  
                          STR_1 FFF6                            STR_2 FFC0                            STR_3 FFAF  
                          STR_4 FFE0                            STR_5 FFD1                            STR_6 FFEE  
                          STR_7 FEF0                            STR_8 FF9E                            STR_9 FEDE  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                    printf@tmpval 00E3  
                          u6051 245C                            _PEIE 007F96                            u7004 2E96  
                          u7005 2E90                            u6071 2496                            u6161 25A8  
                          u5611 21DC                            u6180 25F2                            _RCEN 007E2B  
                          u5381 1DDC                            u5391 1DFA                            u7064 2B0C  
                          u6185 25E8                            u7065 2B08                            u6450 0364  
                          u7074 2B38                            u7075 2B34                            u7084 2B64  
                          u7085 2B60                            u7094 2B90                            u5591 21A2  
                          u6455 0358                            u7095 2B8C                            u6670 0838  
                          u5871 22FA                            u7570 19F4                            u5891 232A  
                          u7707 126A                            u7580 19F6                            u7717 12A2  
                          u7807 363E                            u7727 12DC                            u7817 364C  
                          u7737 3A2A                            u7747 378C                            u7667 192C  
                          u7757 37C0                            u7677 0E74                            u7767 3A3E  
                          u7687 0F2A                            u7777 3A50                            u7697 1052  
                          u7787 360A                            u7797 3618                            _RSEN 007E29  
                          _n_AA 0040                            _n_9V 003E                            _main 179C  
                          _curr 003A                    ___ftpack@arg 0027                            _keys FEB3  
                  ___ftpack@exp 002A                            _time 0034                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 0059                            prodh 000FF4                            prodl 000FF3  
                          start 000E                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___ftmul@cntr 00A2                    ___param_bank 000000                    ___ftmul@sign 00A3  
                  ___fttol@exp1 00C8                    ___fttol@lval 00C4            __end_ofi2_startTimer 373C  
          __end_of_angleToPulse 218C                 __end_of___aldiv 2DA0                 __end_of___almod 2CBC  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
               __end_of___awdiv 320E                           _EEADR 000FA9                 __end_of___ftadd 202E  
                         STR_10 FF6B                           STR_11 FF02                           STR_12 FF5A  
                         STR_13 FECB                           STR_14 FF7C                           STR_15 FF14  
                         STR_16 FF49                           STR_17 FF26                           STR_18 FF8D  
                         STR_19 FF38                 __end_of___awmod 34B0                 __end_of___ftdiv 2592  
       ??_servoInterruptService 0010                 __end_of___ftneg 3A16                 __end_of___lldiv 3440  
               __end_of___ftmul 22EA                           _T0CON 000FD5                 ___awdiv@divisor 002F  
                         _T1CON 000FCD                 __end_of___llmod 32A8                 __end_of___ftsub 36A4  
               __end_of___fttol 26D6                           _T3CON 000FB1                           i2l426 36F2  
                         i2l187 2AB2                           i2l428 36FE                           i2l429 370A  
               ___awdiv@counter 0080                           _TMR0H 000FD7                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
               __end_of_lcdHome 3AA0                    ___lltoft@exp 0033                   _conveyorServo 0149  
               __end_of_lcdInst 3A5A                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
               __end_of_initLCD 37CC                  __CFG_EBTRB$OFF 000000                   ___awtoft@sign 0032  
                         _angle 0141                 __end_of_dpowers FE45                           _count 0179  
                         _scale 1332                 __end_of_isdigit 3A78                   ___ftpack@sign 002B  
                         _pulse 0165                           _putch 3A16                           pclath 000FFA  
                         tablat 000FF5                 __end_of_service 2AEE                 __end_of_runMenu 38AE  
               __end_of_runTime 3934                           status 000FD8              __size_ofi2___awmod 0070  
                __CFG_PBADEN$ON 000000            __end_of_digitalWrite 2F34                 __initialization 358C  
                  __end_of_main 1B3C                    __end_of_keys FEC4                          ??_main 011F  
                 ___fttol@sign1 00C3                   __activetblptr 000002            __size_of_digitalRead 00EA  
          __size_of__tdiv_to_l_ 015C                    _stoppingTime 0057                 i2digitalWrite@p 000E  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
              __end_of___altoft 3338                ___llmod@dividend 0080                          ?_scale 00A4  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          _EECON1 000FA6                          _EECON2 000FA7  
              ___awdiv@dividend 002D                __end_of___awtoft 387C                          ?_putch 0001  
              __end_of___ftpack 3172                __end_of___lltoft 358C                          _INT0IE 007F94  
                        _INT0IF 007F91                          _INT1IE 007F83                          _INT1IF 007F80  
                  sortBattery@V 0116                    sortBattery@i 0119                          i2l5303 2A92  
                        i2l4823 3040                          i2l4841 307C                          i2l4833 3062  
                        i2l5297 2A84                          i2l4835 3068                          i2l4827 304E  
                        i2l4845 308A                          i2l4829 3054                          i2l4861 3716  
                        i2l4839 3076                          i2l4847 3090                          i2l4891 34FE  
                        i2l4883 34DE                          i2l4875 34C4                          i2l4885 34E6  
                        i2l4887 34EA                          i2l4895 3508                          i2l4879 34D0  
                        i2l4899 3516                          _TMR0IE 007F95                          _TMR0IF 007F92  
                        _TMR1IE 007CE8                          _TMR1IF 007CF0                          _TMR3IE 007D01  
                        _SSPADD 000FC8                          _TRISC3 007CA3                          _TRISC4 007CA4  
                        _SSPBUF 000FC9                __end_of_dateTime 39F2                __end_of_lcdClear 3A98  
             _angleToPulse$1348 00D9                  __CFG_XINST$OFF 000000                __end_of__powers_ FE93  
                        ___ftge 2F34                __end_of_mainMenu 39CC                       ??___aldiv 002F  
                     ??___almod 002F                          ___wmul 38AE                       ??___awdiv 0031  
                     ??___ftadd 00B4                  __CFG_STVREN$ON 000000                       ??___awmod 002B  
                     ??___ftdiv 008C                       ??___ftneg 002A                       ??___lldiv 002F  
                     ??___ftmul 009B                       ??___llmod 0034                       ??___ftsub 0034  
                     ??___fttol 00BE                          _fround 1B3C                          clear_0 35D2  
                        clear_1 35DE                ___awdiv@quotient 0082                          _period 0143  
               ___awmod@divisor 0029                       ??_lcdHome 002B                 ___awmod@counter 002B  
                        _servos 016D                       ??_lcdInst 0029                          _printf 0012  
              __end_of_pinSetup 380C                __end_of_setAngle 2E6C               analogRead@channel 0027  
         ___ftmul@f3_as_product 009F                       ??_initLCD 002B                    __pdataCOMRAM 0049  
                     ??_isdigit 0027               __end_ofi2___awmod 3520                   setAngle@angle 00E2  
                  __mediumconst FE1C                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                   setAngle@motor 00E0                       ??_service 0014  
                     ??_runMenu 0034                __end_of_runStats 395A                       ??_runTime 0034  
                i2___awmod@sign 0006                      __accesstop 0080         __end_of__initialization 35E4  
                    ___altoft@c 002F                      ___ftadd@f1 00AE                      ___ftadd@f2 00B1  
                    ___ftge@ff1 0080                      ___ftge@ff2 0083                   ___rparam_used 000001  
                    ___ftdiv@f1 0086                      ___ftdiv@f2 0089                      ___ftdiv@f3 0090  
                    ___ftneg@f1 0027                      ___awtoft@c 002F           __size_ofi2_startTimer 004C  
                    ___ftmul@f1 0095                      ___ftmul@f2 0098                      ___ftsub@f1 00BA  
                    ___ftsub@f2 00BD                      ___fttol@f1 00BA            __end_of_happynewyear FECB  
                __pcstackCOMRAM 0001           __size_of_angleToPulse 015E                    __pidataBANK1 38E0  
                    ___lltoft@c 002F                   _cylinderMotor 0151                   __end_of_scale 179C  
                  ?_sortBattery 0001                   __end_of_putch 3A38              __size_of_lcdNibble 0066  
                    __div_to_l_ 26D6                 __div_to_l_@exp1 0032                 __div_to_l_@cntr 0031  
                       ??_scale 0033                 __div_to_l_@quot 002D                         ??_putch 002B  
                  i2_startTimer 36F0                      __pbssBANK1 0165                    _angleToPulse 202E  
         __size_of_digitalWrite 00C8              __size_of_initTimer 004A              __size_of_initServo 0086  
                    _analogRead 380C                   __div_to_l_@f1 0027                   __div_to_l_@f2 002A  
                       ?___ftge 0080                         ?___wmul 0084                _sortBattery$1347 0100  
         sortBattery@resolution 010C                       ?___altoft 002F                         ?_fround 00A4  
                    _lcdNewline 3A88                       ?___awtoft 002F                       ?___ftpack 0027  
                       ?_printf 00C9                       ?___lltoft 002F  __size_of_servoInterruptService 00FA  
 __end_of_servoInterruptService 29FC           __end_of_showInterface 2902                       ?_dateTime 0001  
             i2startTimer@timer 0007                       ?_lcdClear 0001              __size_of_runSelect 0026  
              angleToPulse@a000 00DC                angleToPulse@a180 00D5                    _digitalWrite 2E6C  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
                     ?_mainMenu 0001         __size_ofi2_digitalWrite 00C8                         _V_LIM_C 013E  
           main@lastBatteryTime 0130                       ?_pinSetup 0001                       ?_setAngle 00E0  
             __end_of_lcdNibble 3658               __end_of__npowers_ FE6C                         __Hparam 0000  
                    _scale$1351 00A7                         __Lparam 0000                         ___aldiv 2CBC  
                       ___almod 2BD8                 __size_of___ftge 00C8                         ___awdiv 3172  
                       ___ftadd 1DC6                         ___awmod 3440                      _readKeypad 3980  
                       ___ftdiv 2446                         ___ftneg 39F2                         ___lldiv 33BE  
               __size_of___wmul 0032                         ___ftmul 218C                         ___llmod 320E  
                       ___ftsub 3658                         ___fttol 2592                       ?_runStats 0001  
                       _n_OTHER 0044                      ??___altoft 0080                         __pcinit 358C  
                    ??___awtoft 0032                      ??___ftpack 002C                 __size_of_fround 028A  
                       __ramtop 1000                         _lcdHome 3A98                         _lcdInst 3A38  
                    ??___lltoft 0080                         __ptext0 179C                         __ptext1 0E38  
                       __ptext2 2E6C                         __ptext3 2AEE                         __ptext4 380C  
                       __ptext5 27FE                         __ptext6 390E                         __ptext7 3934  
                       __ptext8 395A                         __ptext9 387C                 __size_of_printf 0E26  
                       _padPin1 0155                         _padPin2 0159                         _padPin3 0175  
                 startTimer@val 0029                         _initLCD 3786               __end_of_hexpowers FEB3  
                   ?__div_to_l_ 0027                         _lastKey 0048               __end_of_initTimer 3786  
             __end_of_initServo 33BE                         _dpowers FE1D                         _isdigit 3A5A  
              ___awmod@dividend 0027                      ??_dateTime 0034                ___aldiv@dividend 0027  
                    ??_lcdClear 002B                         _service 0008                         _runMenu 387C  
                       _runTime 390E                  __pintcode_body 29FC            end_of_initialization 35E4  
                    ??_mainMenu 0034                   __Lmediumconst FE1C                         int_func 29FC  
                digitalRead@pin 0027                     ?_analogRead 0027                      ??_pinSetup 0027  
                    ??_setAngle 00E4                 ___lldiv@divisor 002B                 ___lldiv@counter 0033  
                setAngle@period 00E6               __end_of_runSelect 3980                         printf@c 00F6  
                       printf@f 00C9                ___aldiv@quotient 0082                         postdec1 000FE5  
                       postdec2 000FDD                 _batteryDetected 0038                         postinc0 000FEE  
                       postinc2 000FDE                      ??_runStats 0034                  __tdiv_to_l_@f1 0027  
                __tdiv_to_l_@f2 002A                   ??_digitalRead 0029                     ?_lcdNewline 0001  
                 ??__tdiv_to_l_ 002D                       _PORTBbits 000F81            __size_of_sortBattery 04FA  
              showInterface@key 00F8             _redirectAngle_OTHER 0055                    _happynewyear FEC4  
            angleToPulse@offset 00D1              sortBattery@V_float 0102                       i2___awmod 34B0  
                    _startTimer 36A4                     ___ftdiv@exp 0093                     printf@width 00F0  
           __size_of__div_to_l_ 0128                     ___ftmul@exp 009E                     ?_readKeypad 0001  
                __end_of___ftge 2FFC                  __end_of___wmul 38E0                   __pidataCOMRAM 3A78  
                __end_of_fround 1DC6                  __end_of_printf 0E38             __size_of_analogRead 0038  
           start_initialization 358C             __end_of_digitalRead 2BD8             __end_of__tdiv_to_l_ 2446  
                initServo@angle 00EC                  initTimer@timer 0027                  initServo@motor 00EA  
                    ?i2___awmod 0001                  i2_digitalWrite 2FFC             __size_of_lcdNewline 0008  
               ___llmod@divisor 0084                 ___llmod@counter 0088                        ??___ftge 0086  
                      ??___wmul 0031                     __pdataBANK1 0138                __CFG_LPT1OSC$OFF 000000  
                      ??_fround 0033                        ??_printf 00D3               __size_of___altoft 0090  
                    fround@prec 00AD               __size_of___awtoft 0038               __size_of___ftpack 00AE  
             __size_of___lltoft 006C                     __pbssCOMRAM 0034                   __pcstackBANK0 0080  
                 __pcstackBANK1 0100          __end_ofi2_digitalWrite 30C4          sortBattery@targetAngle 0114  
             __size_of_dateTime 0026                     ?_startTimer 0027               __size_of_lcdClear 0008  
           __size_of_readKeypad 0026               __size_of_mainMenu 0026               i2digitalWrite@pin 0007  
             i2digitalWrite@val 0009               __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 0040  
             __size_of_setAngle 00CC                       __pintcode 0008                   __pmediumconst FE1C  
                     _lcdNibble 35F2                        ?___aldiv 0027                        ?___almod 0086  
                      ?___awdiv 002D                        ?___ftadd 00AE                        ?___awmod 0027  
                      ?___ftdiv 0086                        ?___ftneg 0027                        ?___lldiv 0027  
                      ?___ftmul 0095                        ?___llmod 0080                        ?___ftsub 00BA  
                     __npowers_ FE45                        ?___fttol 00BA                     _digitalRead 2AEE  
              ___almod@dividend 0086                        ?_lcdHome 0001                        ?_lcdInst 0001  
                   __tdiv_to_l_ 22EA               __size_of_runStats 0026                    ??__div_to_l_ 002D  
                      ?_initLCD 0001                 startTimer@timer 0027                        ?_isdigit 0001  
                      ?_service 0001                       _hexpowers FE93                        ?_runMenu 0001  
                     _initTimer 373C                       _initServo 3338                        ?_runTime 0001  
               ?i2_digitalWrite 0007           _servoInterruptService 2902                     ??i2___awmod 0005  
                __size_of_scale 046A                  __size_of_putch 0022                        _AA_float 0145  
               ___aldiv@divisor 002B                 ___aldiv@counter 0080                  sortBattery@Vcc 0109  
                ___wmul@product 0031                        _LATDbits 000F8C                    ??_analogRead 002B  
            __end_of__div_to_l_ 27FE                        i2u461_44 3026                        i2u461_45 3020  
        __size_of_showInterface 0104                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                _padAngle_CLOSE 0049                       _terminate 0046                   digitalWrite@p 002E  
                    service@key 0026                    ??_lcdNewline 002B             __size_of_startTimer 004C  
                     _runSelect 395A               angleToPulse@angle 00C9                 main@cylinderDur 0134  
             ___wmul@multiplier 0084                   lcdNibble@data 0028                      printf@flag 00F2  
                 lcdNibble@temp 0027                      printf@fval 00E9                      printf@prec 00F4  
            __end_of_analogRead 3844                        _V_LIM_AA 013B                        _V_LIM_9V 0138  
                    runMenu@key 00F7                      ?_initTimer 0027                      ?_initServo 00EA  
             sortBattery@signal 0107        sortBattery@pos_v_counter 0105                       copy_data0 35A0  
                     copy_data1 35C0              i2___awmod@dividend 0001              __end_of_lcdNewline 3A90  
                 readKeypad@key 0027                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0027                   ??_sortBattery 00F7  
              __size_of___aldiv 00E4                __size_of___almod 00E4                __size_of___awdiv 009C  
              __size_of___ftadd 0268                __size_of___awmod 0070                __size_of___ftdiv 014C  
              __size_of___ftneg 0024                __size_of___lldiv 0082                        ___altoft 32A8  
              __size_of___ftmul 015E                __size_of___llmod 009A                __size_of___ftsub 004C  
              __size_of___fttol 0144                      ?_runSelect 0001                        ___awtoft 3844  
                      ___ftpack 30C4                     _fround$1350 00A7                     _cylinderDir 014D  
                   _fround$1349 00AA                        ___lltoft 3520                     _isdigit$977 0028  
              __size_of_lcdHome 0008                __size_of_lcdInst 0022                       setAngle@i 00E8  
              __size_of_initLCD 0046                        _dateTime 39CC                __size_of_isdigit 001E  
        ?_servoInterruptService 0001                   _showInterface 27FE                        _lcdClear 3A90  
                      __ptext10 3980                        __ptext11 39A6                        __ptext20 3440  
                      __ptext12 39CC                        __ptext21 3172                        __ptext13 0012  
                      __ptext30 3A90                        __ptext22 22EA                        __ptext14 1332  
                      __ptext31 37CC                        __ptext23 26D6                        __ptext15 3A16  
                      __ptext40 1DC6                        __ptext32 3A98                        __ptext24 3520  
                      __ptext16 3A88                        __ptext41 3844                        __ptext33 3338  
                      __ptext25 320E                        __ptext17 3A5A                        __ptext42 32A8  
                      __ptext34 36A4                        __ptext26 33BE                        __ptext18 1B3C  
                      __ptext51 2902                        __ptext43 30C4                        __ptext35 2DA0  
                      __ptext27 3658                        __ptext19 38AE                        __ptext52 36F0  
                      __ptext44 373C                        __ptext36 202E                        __ptext28 39F2  
                      __ptext53 2FFC                        __ptext45 3786                        __ptext37 2592  
                      __ptext29 2F34                        __ptext54 34B0                        __ptext46 3A38  
                      __ptext38 218C                        __ptext47 35F2                        __ptext39 2446  
                      __ptext48 2BD8                        __ptext49 2CBC                        __powers_ FE6C  
              __size_of_service 2AE6                __size_of_runMenu 0032                 i2startTimer@val 0009  
              __size_of_runTime 0026                 ___almod@divisor 008A                   ?i2_startTimer 0007  
                      _mainMenu 39A6                        _padServo 015D                 ___almod@counter 002F  
            __end_of_readKeypad 39A6                   ?_angleToPulse 00C9                   __size_of_main 03A0  
                      _pinSetup 37CC                        _setAngle 2DA0                        _prevTime 017B  
              sortBattery@V_219 011C                     ??_lcdNibble 0027                   _padAngle_OPEN 004D  
                      int$flags 0059                sortBattery@i_221 0112                        _runStats 3934  
              sortBattery@V_max 010F                       printf@idx 00DC                       printf@len 00DF  
                     printf@exp 00E7                       printf@val 00EC                        main@prev 0136  
             i2___awmod@divisor 0003                       putch@data 002B               i2___awmod@counter 0005  
           __end_of_sortBattery 1332                      _INTCONbits 000FF2                  ?_showInterface 0001  
                 ?_digitalWrite 0027                     ??_initTimer 0029                     ??_initServo 00EE  
                      isdigit@c 0029                        scale@scl 00AA                  ??i2_startTimer 000D  
                  ??_startTimer 002D                        intlevel2 0000                __tdiv_to_l_@exp1 0085  
              __tdiv_to_l_@cntr 0084                  ??_angleToPulse 00CD                __tdiv_to_l_@quot 0080  
              ___lldiv@dividend 0027                _redirectAngle_AA 0051                _redirectAngle_9V 004F  
                      printf@ap 00E1                        printf@cp 00DD                     lcdInst@data 002A  
                  ?_digitalRead 0027                     ??_runSelect 0034                    ?__tdiv_to_l_ 0027  
            __end_of_startTimer 36F0                     _printf$1352 00D9                ??i2_digitalWrite 000B  
              ___lldiv@quotient 002F                  ??_digitalWrite 002B                    ___aldiv@sign 0081  
               _redirectAngle_C 0053                _padAngle_NEUTRAL 004B                 digitalWrite@pin 0027  
               digitalWrite@val 0029                    ___almod@sign 0030  
