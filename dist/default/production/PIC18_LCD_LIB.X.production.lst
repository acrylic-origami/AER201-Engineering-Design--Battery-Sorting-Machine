

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 19 22:52:07 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 1.40
    71                           ; Generated 01/12/2016 GMT
    72                           ; 
    73                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4620 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataCOMRAM
   106  002B40                     __pidataCOMRAM:
   107                           	opt stack 0
   108                           
   109                           ;initializer for _redirectAngle_C
   110  002B40  0050               	dw	80
   111                           
   112                           ;initializer for _conveyorServo
   113  002B42  0002               	dw	2
   114  002B44  0001               	dw	1
   115  002B46  00                 	db	0
   116  002B47  00                 	db	0
   117                           
   118                           ;initializer for _padPin1
   119  002B48  0000               	dw	0
   120  002B4A  0001               	dw	1
   121                           
   122                           ;initializer for _padPin2
   123  002B4C  0000               	dw	0
   124  002B4E  0002               	dw	2
   125                           
   126                           	psect	idataBANK0
   127  002B10                     __pidataBANK0:
   128                           	opt stack 0
   129                           
   130                           ;initializer for _padAngle_CLOSE
   131  002B10  0046               	dw	70
   132                           
   133                           ;initializer for _padAngle_NEUTRAL
   134  002B12  005A               	dw	90
   135                           
   136                           ;initializer for _padAngle_OPEN
   137  002B14  00B4               	dw	180
   138                           
   139                           ;initializer for _redirectAngle_9V
   140  002B16  0064               	dw	100
   141                           
   142                           ;initializer for _redirectAngle_AA
   143  002B18  003C               	dw	60
   144                           
   145                           ;initializer for _redirectAngle_OTHER
   146  002B1A  0078               	dw	120
   147                           
   148                           ;initializer for _padServo
   149  002B1C  0002               	dw	2
   150  002B1E  0002               	dw	2
   151  002B20  00                 	db	0
   152  002B21  00                 	db	0
   153                           
   154                           ;initializer for _AA_float
   155  002B22  0000               	dw	0
   156  002B24  0003               	dw	3
   157                           
   158                           ;initializer for _cylinderMotor
   159  002B26  0002               	dw	2
   160  002B28  0000               	dw	0
   161                           
   162                           	psect	idataBANK1
   163  002B60                     __pidataBANK1:
   164                           	opt stack 0
   165                           
   166                           ;initializer for _redirectingServo
   167  002B60  0002               	dw	2
   168  002B62  0003               	dw	3
   169  002B64  00                 	db	0
   170  002B65  00                 	db	0
   171                           
   172                           	psect	mediumconst
   173  00FDCC                     __pmediumconst:
   174                           	opt stack 0
   175  00FDCC  00                 	db	0
   176  00FDCD                     _dpowers:
   177                           	opt stack 0
   178  00FDCD  0001               	dw	1
   179  00FDCF  0000               	dw	0
   180  00FDD1  000A               	dw	10
   181  00FDD3  0000               	dw	0
   182  00FDD5  0064               	dw	100
   183  00FDD7  0000               	dw	0
   184  00FDD9  03E8               	dw	1000
   185  00FDDB  0000               	dw	0
   186  00FDDD  2710               	dw	10000
   187  00FDDF  0000               	dw	0
   188  00FDE1  86A0               	dw	34464
   189  00FDE3  0001               	dw	1
   190  00FDE5  4240               	dw	16960
   191  00FDE7  000F               	dw	15
   192  00FDE9  9680               	dw	38528
   193  00FDEB  0098               	dw	152
   194  00FDED  E100               	dw	57600
   195  00FDEF  05F5               	dw	1525
   196  00FDF1  CA00               	dw	51712
   197  00FDF3  3B9A               	dw	15258
   198  00FDF5                     __end_of_dpowers:
   199                           	opt stack 0
   200  00FDF5                     __npowers_:
   201                           	opt stack 0
   202  00FDF5  00                 	db	0
   203  00FDF6  80                 	db	128
   204  00FDF7  3F                 	db	63
   205  00FDF8  CD                 	db	205
   206  00FDF9  CC                 	db	204
   207  00FDFA  3D                 	db	61
   208  00FDFB  D7                 	db	215
   209  00FDFC  23                 	db	35
   210  00FDFD  3C                 	db	60
   211  00FDFE  12                 	db	18
   212  00FDFF  83                 	db	131
   213  00FE00  3A                 	db	58
   214  00FE01  B7                 	db	183
   215  00FE02  D1                 	db	209
   216  00FE03  38                 	db	56
   217  00FE04  C6                 	db	198
   218  00FE05  27                 	db	39
   219  00FE06  37                 	db	55
   220  00FE07  38                 	db	56
   221  00FE08  86                 	db	134
   222  00FE09  35                 	db	53
   223  00FE0A  C0                 	db	192
   224  00FE0B  D6                 	db	214
   225  00FE0C  33                 	db	51
   226  00FE0D  CC                 	db	204
   227  00FE0E  2B                 	db	43
   228  00FE0F  32                 	db	50
   229  00FE10  70                 	db	112
   230  00FE11  89                 	db	137
   231  00FE12  30                 	db	48
   232  00FE13  E7                 	db	231
   233  00FE14  DB                 	db	219
   234  00FE15  2E                 	db	46
   235  00FE16  E5                 	db	229
   236  00FE17  3C                 	db	60
   237  00FE18  1E                 	db	30
   238  00FE19  42                 	db	66
   239  00FE1A  A2                 	db	162
   240  00FE1B  0D                 	db	13
   241  00FE1C                     __end_of__npowers_:
   242                           	opt stack 0
   243  00FE1C                     __powers_:
   244                           	opt stack 0
   245  00FE1C  00                 	db	0
   246  00FE1D  80                 	db	128
   247  00FE1E  3F                 	db	63
   248  00FE1F  00                 	db	0
   249  00FE20  20                 	db	32
   250  00FE21  41                 	db	65
   251  00FE22  00                 	db	0
   252  00FE23  C8                 	db	200
   253  00FE24  42                 	db	66
   254  00FE25  00                 	db	0
   255  00FE26  7A                 	db	122
   256  00FE27  44                 	db	68
   257  00FE28  40                 	db	64
   258  00FE29  1C                 	db	28
   259  00FE2A  46                 	db	70
   260  00FE2B  50                 	db	80
   261  00FE2C  C3                 	db	195
   262  00FE2D  47                 	db	71
   263  00FE2E  24                 	db	36
   264  00FE2F  74                 	db	116
   265  00FE30  49                 	db	73
   266  00FE31  97                 	db	151
   267  00FE32  18                 	db	24
   268  00FE33  4B                 	db	75
   269  00FE34  BC                 	db	188
   270  00FE35  BE                 	db	190
   271  00FE36  4C                 	db	76
   272  00FE37  6B                 	db	107
   273  00FE38  6E                 	db	110
   274  00FE39  4E                 	db	78
   275  00FE3A  03                 	db	3
   276  00FE3B  15                 	db	21
   277  00FE3C  50                 	db	80
   278  00FE3D  79                 	db	121
   279  00FE3E  AD                 	db	173
   280  00FE3F  60                 	db	96
   281  00FE40  F3                 	db	243
   282  00FE41  49                 	db	73
   283  00FE42  71                 	db	113
   284  00FE43                     __end_of__powers_:
   285                           	opt stack 0
   286  00FE43                     _hexpowers:
   287                           	opt stack 0
   288  00FE43  0001               	dw	1
   289  00FE45  0000               	dw	0
   290  00FE47  0010               	dw	16
   291  00FE49  0000               	dw	0
   292  00FE4B  0100               	dw	256
   293  00FE4D  0000               	dw	0
   294  00FE4F  1000               	dw	4096
   295  00FE51  0000               	dw	0
   296  00FE53  0000               	dw	0
   297  00FE55  0001               	dw	1
   298  00FE57  0000               	dw	0
   299  00FE59  0010               	dw	16
   300  00FE5B  0000               	dw	0
   301  00FE5D  0100               	dw	256
   302  00FE5F  0000               	dw	0
   303  00FE61  1000               	dw	4096
   304  00FE63                     __end_of_hexpowers:
   305                           	opt stack 0
   306  00FE63                     _keys:
   307                           	opt stack 0
   308  00FE63  31                 	db	49
   309  00FE64  32                 	db	50
   310  00FE65  33                 	db	51
   311  00FE66  41                 	db	65
   312  00FE67  34                 	db	52
   313  00FE68  35                 	db	53
   314  00FE69  36                 	db	54
   315  00FE6A  42                 	db	66
   316  00FE6B  37                 	db	55
   317  00FE6C  38                 	db	56
   318  00FE6D  39                 	db	57
   319  00FE6E  43                 	db	67
   320  00FE6F  2A                 	db	42
   321  00FE70  30                 	db	48
   322  00FE71  23                 	db	35
   323  00FE72  44                 	db	68
   324  00FE73  00                 	db	0
   325  00FE74                     __end_of_keys:
   326                           	opt stack 0
   327  00FE74                     _happynewyear:
   328                           	opt stack 0
   329  00FE74  00                 	db	0
   330  00FE75  59                 	db	89
   331  00FE76  03                 	db	3
   332  00FE77  01                 	db	1
   333  00FE78  13                 	db	19
   334  00FE79  04                 	db	4
   335  00FE7A  17                 	db	23
   336  00FE7B                     __end_of_happynewyear:
   337                           	opt stack 0
   338  0000                     _ADCON0	set	4034
   339  0000                     _ADCON1	set	4033
   340  0000                     _ADCON2	set	4032
   341  0000                     _ADRESH	set	4036
   342  0000                     _ADRESL	set	4035
   343  0000                     _EEADR	set	4009
   344  0000                     _EEADRH	set	4010
   345  0000                     _EECON1	set	4006
   346  0000                     _EECON2	set	4007
   347  0000                     _EEDATA	set	4008
   348  0000                     _INTCONbits	set	4082
   349  0000                     _LATA	set	3977
   350  0000                     _LATB	set	3978
   351  0000                     _LATC	set	3979
   352  0000                     _LATD	set	3980
   353  0000                     _LATDbits	set	3980
   354  0000                     _LATE	set	3981
   355  0000                     _PORTA	set	3968
   356  0000                     _PORTB	set	3969
   357  0000                     _PORTBbits	set	3969
   358  0000                     _PORTC	set	3970
   359  0000                     _PORTD	set	3971
   360  0000                     _SSPADD	set	4040
   361  0000                     _SSPBUF	set	4041
   362  0000                     _SSPCON1	set	4038
   363  0000                     _SSPCON2	set	4037
   364  0000                     _SSPSTAT	set	4039
   365  0000                     _T0CON	set	4053
   366  0000                     _T1CON	set	4045
   367  0000                     _T3CON	set	4017
   368  0000                     _TMR0H	set	4055
   369  0000                     _TMR0L	set	4054
   370  0000                     _TMR1H	set	4047
   371  0000                     _TMR1L	set	4046
   372  0000                     _TMR3H	set	4019
   373  0000                     _TMR3L	set	4018
   374  0000                     _TRISA	set	3986
   375  0000                     _TRISB	set	3987
   376  0000                     _TRISC	set	3988
   377  0000                     _TRISD	set	3989
   378  0000                     _TRISE	set	3990
   379  0000                     _ACKDT	set	32301
   380  0000                     _ACKEN	set	32300
   381  0000                     _EEIF	set	32012
   382  0000                     _INT0IE	set	32660
   383  0000                     _INT0IF	set	32657
   384  0000                     _INT1IE	set	32643
   385  0000                     _INT1IF	set	32640
   386  0000                     _PEIE	set	32662
   387  0000                     _PEN	set	32298
   388  0000                     _RCEN	set	32299
   389  0000                     _RSEN	set	32297
   390  0000                     _SEN	set	32296
   391  0000                     _TMR0IE	set	32661
   392  0000                     _TMR0IF	set	32658
   393  0000                     _TMR1IE	set	31976
   394  0000                     _TMR3IE	set	32001
   395  0000                     _TRISC3	set	31907
   396  0000                     _TRISC4	set	31908
   397  00FE7B                     STR_8:
   398  00FE7B  63                 	db	99	;'c'
   399  00FE7C  6F                 	db	111	;'o'
   400  00FE7D  6E                 	db	110	;'n'
   401  00FE7E  76                 	db	118	;'v'
   402  00FE7F  65                 	db	101	;'e'
   403  00FE80  79                 	db	121	;'y'
   404  00FE81  6F                 	db	111	;'o'
   405  00FE82  72                 	db	114	;'r'
   406  00FE83  20                 	db	32
   407  00FE84  26                 	db	38
   408  00FE85  20                 	db	32
   409  00FE86  0A                 	db	10
   410  00FE87  63                 	db	99	;'c'
   411  00FE88  79                 	db	121	;'y'
   412  00FE89  6C                 	db	108	;'l'
   413  00FE8A  69                 	db	105	;'i'
   414  00FE8B  6E                 	db	110	;'n'
   415  00FE8C  64                 	db	100	;'d'
   416  00FE8D  65                 	db	101	;'e'
   417  00FE8E  72                 	db	114	;'r'
   418  00FE8F  20                 	db	32
   419  00FE90  6F                 	db	111	;'o'
   420  00FE91  6E                 	db	110	;'n'
   421  00FE92  3F                 	db	63	;'?'
   422  00FE93  00                 	db	0
   423  00FE94                     STR_4:
   424  00FE94  73                 	db	115	;'s'
   425  00FE95  69                 	db	105	;'i'
   426  00FE96  67                 	db	103	;'g'
   427  00FE97  6E                 	db	110	;'n'
   428  00FE98  61                 	db	97	;'a'
   429  00FE99  6C                 	db	108	;'l'
   430  00FE9A  3A                 	db	58	;':'
   431  00FE9B  20                 	db	32
   432  00FE9C  25                 	db	37
   433  00FE9D  64                 	db	100	;'d'
   434  00FE9E  20                 	db	32
   435  00FE9F  0A                 	db	10
   436  00FEA0  56                 	db	86	;'V'
   437  00FEA1  6F                 	db	111	;'o'
   438  00FEA2  6C                 	db	108	;'l'
   439  00FEA3  74                 	db	116	;'t'
   440  00FEA4  61                 	db	97	;'a'
   441  00FEA5  67                 	db	103	;'g'
   442  00FEA6  65                 	db	101	;'e'
   443  00FEA7  3A                 	db	58	;':'
   444  00FEA8  20                 	db	32
   445  00FEA9  25                 	db	37
   446  00FEAA  66                 	db	102	;'f'
   447  00FEAB  00                 	db	0
   448  00FEAC                     STR_5:
   449  00FEAC  73                 	db	115	;'s'
   450  00FEAD  65                 	db	101	;'e'
   451  00FEAE  74                 	db	116	;'t'
   452  00FEAF  20                 	db	32
   453  00FEB0  72                 	db	114	;'r'
   454  00FEB1  65                 	db	101	;'e'
   455  00FEB2  64                 	db	100	;'d'
   456  00FEB3  69                 	db	105	;'i'
   457  00FEB4  72                 	db	114	;'r'
   458  00FEB5  65                 	db	101	;'e'
   459  00FEB6  63                 	db	99	;'c'
   460  00FEB7  74                 	db	116	;'t'
   461  00FEB8  20                 	db	32
   462  00FEB9  61                 	db	97	;'a'
   463  00FEBA  6E                 	db	110	;'n'
   464  00FEBB  67                 	db	103	;'g'
   465  00FEBC  6C                 	db	108	;'l'
   466  00FEBD  65                 	db	101	;'e'
   467  00FEBE  3F                 	db	63	;'?'
   468  00FEBF  00                 	db	0
   469  00FEC0                     STR_2:
   470  00FEC0  69                 	db	105	;'i'
   471  00FEC1  6E                 	db	110	;'n'
   472  00FEC2  74                 	db	116	;'t'
   473  00FEC3  65                 	db	101	;'e'
   474  00FEC4  72                 	db	114	;'r'
   475  00FEC5  72                 	db	114	;'r'
   476  00FEC6  75                 	db	117	;'u'
   477  00FEC7  70                 	db	112	;'p'
   478  00FEC8  74                 	db	116	;'t'
   479  00FEC9  21                 	db	33
   480  00FECA  21                 	db	33
   481  00FECB  21                 	db	33
   482  00FECC  0A                 	db	10
   483  00FECD  63                 	db	99	;'c'
   484  00FECE  6C                 	db	108	;'l'
   485  00FECF  6F                 	db	111	;'o'
   486  00FED0  73                 	db	115	;'s'
   487  00FED1  65                 	db	101	;'e'
   488  00FED2  3F                 	db	63	;'?'
   489  00FED3  00                 	db	0
   490  00FED4  25                 	db	37
   491  00FED5  63                 	db	99	;'c'
   492  00FED6  29                 	db	41
   493  00FED7  20                 	db	32
   494  00FED8  74                 	db	116	;'t'
   495  00FED9  69                 	db	105	;'i'
   496  00FEDA  6D                 	db	109	;'m'
   497  00FEDB  65                 	db	101	;'e'
   498  00FEDC  20                 	db	32
   499  00FEDD  20                 	db	32
   500  00FEDE  3C                 	db	60	;'<'
   501  00FEDF  41                 	db	65	;'A'
   502  00FEE0  20                 	db	32
   503  00FEE1  20                 	db	32
   504  00FEE2  20                 	db	32
   505  00FEE3  20                 	db	32
   506  00FEE4  20                 	db	32
   507  00FEE5  0A                 	db	10
   508  00FEE6  00                 	db	0
   509  00FEE7  73                 	db	115	;'s'
   510  00FEE8  74                 	db	116	;'t'
   511  00FEE9  61                 	db	97	;'a'
   512  00FEEA  72                 	db	114	;'r'
   513  00FEEB  74                 	db	116	;'t'
   514  00FEEC  20                 	db	32
   515  00FEED  20                 	db	32
   516  00FEEE  20                 	db	32
   517  00FEEF  3C                 	db	60	;'<'
   518  00FEF0  42                 	db	66	;'B'
   519  00FEF1  20                 	db	32
   520  00FEF2  20                 	db	32
   521  00FEF3  20                 	db	32
   522  00FEF4  20                 	db	32
   523  00FEF5  20                 	db	32
   524  00FEF6  20                 	db	32
   525  00FEF7  0A                 	db	10
   526  00FEF8  00                 	db	0
   527  00FEF9  20                 	db	32
   528  00FEFA  20                 	db	32
   529  00FEFB  68                 	db	104	;'h'
   530  00FEFC  68                 	db	104	;'h'
   531  00FEFD  3A                 	db	58	;':'
   532  00FEFE  6D                 	db	109	;'m'
   533  00FEFF  6D                 	db	109	;'m'
   534  00FF00  3A                 	db	58	;':'
   535  00FF01  73                 	db	115	;'s'
   536  00FF02  73                 	db	115	;'s'
   537  00FF03  20                 	db	32
   538  00FF04  20                 	db	32
   539  00FF05  20                 	db	32
   540  00FF06  20                 	db	32
   541  00FF07  20                 	db	32
   542  00FF08  20                 	db	32
   543  00FF09  0A                 	db	10
   544  00FF0A  00                 	db	0
   545  00FF0B  73                 	db	115	;'s'
   546  00FF0C  65                 	db	101	;'e'
   547  00FF0D  6C                 	db	108	;'l'
   548  00FF0E  65                 	db	101	;'e'
   549  00FF0F  63                 	db	99	;'c'
   550  00FF10  74                 	db	116	;'t'
   551  00FF11  20                 	db	32
   552  00FF12  72                 	db	114	;'r'
   553  00FF13  75                 	db	117	;'u'
   554  00FF14  6E                 	db	110	;'n'
   555  00FF15  3A                 	db	58	;':'
   556  00FF16  20                 	db	32
   557  00FF17  20                 	db	32
   558  00FF18  20                 	db	32
   559  00FF19  20                 	db	32
   560  00FF1A  20                 	db	32
   561  00FF1B  0A                 	db	10
   562  00FF1C  00                 	db	0
   563  00FF1D  74                 	db	116	;'t'
   564  00FF1E  69                 	db	105	;'i'
   565  00FF1F  6D                 	db	109	;'m'
   566  00FF20  65                 	db	101	;'e'
   567  00FF21  3A                 	db	58	;':'
   568  00FF22  20                 	db	32
   569  00FF23  6E                 	db	110	;'n'
   570  00FF24  6E                 	db	110	;'n'
   571  00FF25  6E                 	db	110	;'n'
   572  00FF26  20                 	db	32
   573  00FF27  73                 	db	115	;'s'
   574  00FF28  65                 	db	101	;'e'
   575  00FF29  63                 	db	99	;'c'
   576  00FF2A  20                 	db	32
   577  00FF2B  20                 	db	32
   578  00FF2C  20                 	db	32
   579  00FF2D  0A                 	db	10
   580  00FF2E  00                 	db	0
   581  00FF2F  5B                 	db	91	;'['
   582  00FF30  41                 	db	65	;'A'
   583  00FF31  41                 	db	65	;'A'
   584  00FF32  2C                 	db	44
   585  00FF33  39                 	db	57	;'9'
   586  00FF34  56                 	db	86	;'V'
   587  00FF35  2C                 	db	44
   588  00FF36  43                 	db	67	;'C'
   589  00FF37  2C                 	db	44
   590  00FF38  6F                 	db	111	;'o'
   591  00FF39  74                 	db	116	;'t'
   592  00FF3A  68                 	db	104	;'h'
   593  00FF3B  65                 	db	101	;'e'
   594  00FF3C  72                 	db	114	;'r'
   595  00FF3D  5D                 	db	93	;']'
   596  00FF3E  20                 	db	32
   597  00FF3F  0A                 	db	10
   598  00FF40  00                 	db	0
   599  00FF41                     STR_23:
   600  00FF41  30                 	db	48	;'0'
   601  00FF42  31                 	db	49	;'1'
   602  00FF43  32                 	db	50	;'2'
   603  00FF44  33                 	db	51	;'3'
   604  00FF45  34                 	db	52	;'4'
   605  00FF46  35                 	db	53	;'5'
   606  00FF47  36                 	db	54	;'6'
   607  00FF48  37                 	db	55	;'7'
   608  00FF49  38                 	db	56	;'8'
   609  00FF4A  39                 	db	57	;'9'
   610  00FF4B  61                 	db	97	;'a'
   611  00FF4C  62                 	db	98	;'b'
   612  00FF4D  63                 	db	99	;'c'
   613  00FF4E  64                 	db	100	;'d'
   614  00FF4F  65                 	db	101	;'e'
   615  00FF50  66                 	db	102	;'f'
   616  00FF51  00                 	db	0
   617  00FF52  20                 	db	32
   618  00FF53  20                 	db	32
   619  00FF54  20                 	db	32
   620  00FF55  20                 	db	32
   621  00FF56  20                 	db	32
   622  00FF57  20                 	db	32
   623  00FF58  20                 	db	32
   624  00FF59  20                 	db	32
   625  00FF5A  20                 	db	32
   626  00FF5B  20                 	db	32
   627  00FF5C  20                 	db	32
   628  00FF5D  20                 	db	32
   629  00FF5E  20                 	db	32
   630  00FF5F  20                 	db	32
   631  00FF60  2A                 	db	42
   632  00FF61  3E                 	db	62	;'>'
   633  00FF62  00                 	db	0
   634  00FF63  5B                 	db	91	;'['
   635  00FF64  31                 	db	49	;'1'
   636  00FF65  2C                 	db	44
   637  00FF66  32                 	db	50	;'2'
   638  00FF67  2C                 	db	44
   639  00FF68  33                 	db	51	;'3'
   640  00FF69  2C                 	db	44
   641  00FF6A  34                 	db	52	;'4'
   642  00FF6B  5D                 	db	93	;']'
   643  00FF6C  20                 	db	32
   644  00FF6D  20                 	db	32
   645  00FF6E  20                 	db	32
   646  00FF6F  20                 	db	32
   647  00FF70  20                 	db	32
   648  00FF71  2A                 	db	42
   649  00FF72  3E                 	db	62	;'>'
   650  00FF73  00                 	db	0
   651  00FF74  68                 	db	104	;'h'
   652  00FF75  69                 	db	105	;'i'
   653  00FF76  73                 	db	115	;'s'
   654  00FF77  74                 	db	116	;'t'
   655  00FF78  6F                 	db	111	;'o'
   656  00FF79  72                 	db	114	;'r'
   657  00FF7A  79                 	db	121	;'y'
   658  00FF7B  20                 	db	32
   659  00FF7C  3C                 	db	60	;'<'
   660  00FF7D  43                 	db	67	;'C'
   661  00FF7E  20                 	db	32
   662  00FF7F  20                 	db	32
   663  00FF80  20                 	db	32
   664  00FF81  20                 	db	32
   665  00FF82  2A                 	db	42
   666  00FF83  3E                 	db	62	;'>'
   667  00FF84  00                 	db	0
   668  00FF85  20                 	db	32
   669  00FF86  20                 	db	32
   670  00FF87  20                 	db	32
   671  00FF88  73                 	db	115	;'s'
   672  00FF89  74                 	db	116	;'t'
   673  00FF8A  61                 	db	97	;'a'
   674  00FF8B  74                 	db	116	;'t'
   675  00FF8C  73                 	db	115	;'s'
   676  00FF8D  20                 	db	32
   677  00FF8E  3C                 	db	60	;'<'
   678  00FF8F  42                 	db	66	;'B'
   679  00FF90  20                 	db	32
   680  00FF91  20                 	db	32
   681  00FF92  20                 	db	32
   682  00FF93  2A                 	db	42
   683  00FF94  3E                 	db	62	;'>'
   684  00FF95  00                 	db	0
   685  00FF96  5B                 	db	91	;'['
   686  00FF97  6E                 	db	110	;'n'
   687  00FF98  6E                 	db	110	;'n'
   688  00FF99  2C                 	db	44
   689  00FF9A  6E                 	db	110	;'n'
   690  00FF9B  2C                 	db	44
   691  00FF9C  6E                 	db	110	;'n'
   692  00FF9D  2C                 	db	44
   693  00FF9E  6E                 	db	110	;'n'
   694  00FF9F  6E                 	db	110	;'n'
   695  00FFA0  5D                 	db	93	;']'
   696  00FFA1  20                 	db	32
   697  00FFA2  20                 	db	32
   698  00FFA3  20                 	db	32
   699  00FFA4  2A                 	db	42
   700  00FFA5  3E                 	db	62	;'>'
   701  00FFA6  00                 	db	0
   702  00FFA7  20                 	db	32
   703  00FFA8  20                 	db	32
   704  00FFA9  6D                 	db	109	;'m'
   705  00FFAA  6D                 	db	109	;'m'
   706  00FFAB  3A                 	db	58	;':'
   707  00FFAC  64                 	db	100	;'d'
   708  00FFAD  64                 	db	100	;'d'
   709  00FFAE  3A                 	db	58	;':'
   710  00FFAF  79                 	db	121	;'y'
   711  00FFB0  79                 	db	121	;'y'
   712  00FFB1  20                 	db	32
   713  00FFB2  20                 	db	32
   714  00FFB3  20                 	db	32
   715  00FFB4  20                 	db	32
   716  00FFB5  41                 	db	65	;'A'
   717  00FFB6  3E                 	db	62	;'>'
   718  00FFB7  00                 	db	0
   719  00FFB8                     STR_6:
   720  00FFB8  72                 	db	114	;'r'
   721  00FFB9  65                 	db	101	;'e'
   722  00FFBA  6C                 	db	108	;'l'
   723  00FFBB  65                 	db	101	;'e'
   724  00FFBC  61                 	db	97	;'a'
   725  00FFBD  73                 	db	115	;'s'
   726  00FFBE  65                 	db	101	;'e'
   727  00FFBF  20                 	db	32
   728  00FFC0  62                 	db	98	;'b'
   729  00FFC1  61                 	db	97	;'a'
   730  00FFC2  74                 	db	116	;'t'
   731  00FFC3  74                 	db	116	;'t'
   732  00FFC4  65                 	db	101	;'e'
   733  00FFC5  72                 	db	114	;'r'
   734  00FFC6  79                 	db	121	;'y'
   735  00FFC7  3F                 	db	63	;'?'
   736  00FFC8  00                 	db	0
   737  00FFC9                     STR_7:
   738  00FFC9  72                 	db	114	;'r'
   739  00FFCA  65                 	db	101	;'e'
   740  00FFCB  73                 	db	115	;'s'
   741  00FFCC  65                 	db	101	;'e'
   742  00FFCD  74                 	db	116	;'t'
   743  00FFCE  20                 	db	32
   744  00FFCF  74                 	db	116	;'t'
   745  00FFD0  68                 	db	104	;'h'
   746  00FFD1  65                 	db	101	;'e'
   747  00FFD2  20                 	db	32
   748  00FFD3  70                 	db	112	;'p'
   749  00FFD4  61                 	db	97	;'a'
   750  00FFD5  64                 	db	100	;'d'
   751  00FFD6  3F                 	db	63	;'?'
   752  00FFD7  00                 	db	0
   753  00FFD8                     STR_3:
   754  00FFD8  72                 	db	114	;'r'
   755  00FFD9  65                 	db	101	;'e'
   756  00FFDA  61                 	db	97	;'a'
   757  00FFDB  64                 	db	100	;'d'
   758  00FFDC  20                 	db	32
   759  00FFDD  76                 	db	118	;'v'
   760  00FFDE  6F                 	db	111	;'o'
   761  00FFDF  6C                 	db	108	;'l'
   762  00FFE0  74                 	db	116	;'t'
   763  00FFE1  61                 	db	97	;'a'
   764  00FFE2  67                 	db	103	;'g'
   765  00FFE3  65                 	db	101	;'e'
   766  00FFE4  3F                 	db	63	;'?'
   767  00FFE5  00                 	db	0
   768  00FFE6  5B                 	db	91	;'['
   769  00FFE7  25                 	db	37
   770  00FFE8  78                 	db	120	;'x'
   771  00FFE9  20                 	db	32
   772  00FFEA  25                 	db	37
   773  00FFEB  78                 	db	120	;'x'
   774  00FFEC  5D                 	db	93	;']'
   775  00FFED  0A                 	db	10
   776  00FFEE  00                 	db	0
   777  00FFEF  74                 	db	116	;'t'
   778  00FFF0  31                 	db	49	;'1'
   779  00FFF1  3A                 	db	58	;':'
   780  00FFF2  20                 	db	32
   781  00FFF3  25                 	db	37
   782  00FFF4  78                 	db	120	;'x'
   783  00FFF5  20                 	db	32
   784  00FFF6  00                 	db	0
   785  00FFF7                     STR_1:
   786  00FFF7  72                 	db	114	;'r'
   787  00FFF8  75                 	db	117	;'u'
   788  00FFF9  6E                 	db	110	;'n'
   789  00FFFA  6E                 	db	110	;'n'
   790  00FFFB  69                 	db	105	;'i'
   791  00FFFC  6E                 	db	110	;'n'
   792  00FFFD  67                 	db	103	;'g'
   793  00FFFE  00                 	db	0
   794                           
   795                           ; #config settings
   796  00FFFF  00                 	db	0	; dummy byte at the end
   797  0000                     
   798                           	psect	cinit
   799  0022EC                     __pcinit:
   800                           	opt stack 0
   801  0022EC                     start_initialization:
   802                           	opt stack 0
   803  0022EC                     __initialization:
   804                           	opt stack 0
   805                           
   806                           ; Initialize objects allocated to BANK1 (6 bytes)
   807                           ; load TBLPTR registers with __pidataBANK1
   808  0022EC  0E60               	movlw	low __pidataBANK1
   809  0022EE  6EF6               	movwf	tblptrl,c
   810  0022F0  0E2B               	movlw	high __pidataBANK1
   811  0022F2  6EF7               	movwf	tblptrh,c
   812  0022F4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   813  0022F6  6EF8               	movwf	tblptru,c
   814  0022F8  EE01  F032         	lfsr	0,__pdataBANK1
   815  0022FC  EE10 F006          	lfsr	1,6
   816  002300                     copy_data0:
   817  002300  0009               	tblrd		*+
   818  002302  CFF5 FFEE          	movff	tablat,postinc0
   819  002306  50E5               	movf	postdec1,w,c
   820  002308  50E1               	movf	fsr1l,w,c
   821  00230A  E1FA               	bnz	copy_data0
   822                           
   823                           ; Initialize objects allocated to BANK0 (26 bytes)
   824                           ; load TBLPTR registers with __pidataBANK0
   825  00230C  0E10               	movlw	low __pidataBANK0
   826  00230E  6EF6               	movwf	tblptrl,c
   827  002310  0E2B               	movlw	high __pidataBANK0
   828  002312  6EF7               	movwf	tblptrh,c
   829  002314  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   830  002316  6EF8               	movwf	tblptru,c
   831  002318  EE00  F0D5         	lfsr	0,__pdataBANK0
   832  00231C  EE10 F01A          	lfsr	1,26
   833  002320                     copy_data1:
   834  002320  0009               	tblrd		*+
   835  002322  CFF5 FFEE          	movff	tablat,postinc0
   836  002326  50E5               	movf	postdec1,w,c
   837  002328  50E1               	movf	fsr1l,w,c
   838  00232A  E1FA               	bnz	copy_data1
   839                           
   840                           ; Initialize objects allocated to COMRAM (16 bytes)
   841                           ; load TBLPTR registers with __pidataCOMRAM
   842  00232C  0E40               	movlw	low __pidataCOMRAM
   843  00232E  6EF6               	movwf	tblptrl,c
   844  002330  0E2B               	movlw	high __pidataCOMRAM
   845  002332  6EF7               	movwf	tblptrh,c
   846  002334  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   847  002336  6EF8               	movwf	tblptru,c
   848  002338  EE00  F03F         	lfsr	0,__pdataCOMRAM
   849  00233C  EE10 F010          	lfsr	1,16
   850  002340                     copy_data2:
   851  002340  0009               	tblrd		*+
   852  002342  CFF5 FFEE          	movff	tablat,postinc0
   853  002346  50E5               	movf	postdec1,w,c
   854  002348  50E1               	movf	fsr1l,w,c
   855  00234A  E1FA               	bnz	copy_data2
   856                           
   857                           ; Clear objects allocated to BANK1 (8 bytes)
   858  00234C  EE01  F02A         	lfsr	0,__pbssBANK1
   859  002350  0E08               	movlw	8
   860  002352                     clear_0:
   861  002352  6AEE               	clrf	postinc0,c
   862  002354  06E8               	decf	wreg,f,c
   863  002356  E1FD               	bnz	clear_0
   864                           
   865                           ; Clear objects allocated to BANK0 (17 bytes)
   866  002358  EE00  F0EF         	lfsr	0,__pbssBANK0
   867  00235C  0E11               	movlw	17
   868  00235E                     clear_1:
   869  00235E  6AEE               	clrf	postinc0,c
   870  002360  06E8               	decf	wreg,f,c
   871  002362  E1FD               	bnz	clear_1
   872                           
   873                           ; Clear objects allocated to COMRAM (15 bytes)
   874  002364  EE00  F04F         	lfsr	0,__pbssCOMRAM
   875  002368  0E0F               	movlw	15
   876  00236A                     clear_2:
   877  00236A  6AEE               	clrf	postinc0,c
   878  00236C  06E8               	decf	wreg,f,c
   879  00236E  E1FD               	bnz	clear_2
   880  002370                     end_of_initialization:
   881                           	opt stack 0
   882  002370                     __end_of__initialization:
   883                           	opt stack 0
   884  002370  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   885  002372  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   886  002374  0E00               	movlw	low (__Lmediumconst shr (0+16))
   887  002376  6EF8               	movwf	tblptru,c
   888  002378  0100               	movlb	0
   889  00237A  EF2C  F011         	goto	_main	;jump to C main() function
   890                           tblptru	equ	0xFF8
   891                           tblptrh	equ	0xFF7
   892                           tblptrl	equ	0xFF6
   893                           tablat	equ	0xFF5
   894                           postinc0	equ	0xFEE
   895                           wreg	equ	0xFE8
   896                           postdec1	equ	0xFE5
   897                           fsr1l	equ	0xFE1
   898                           
   899                           	psect	bssCOMRAM
   900  00004F                     __pbssCOMRAM:
   901                           	opt stack 0
   902  00004F                     _servos:
   903                           	opt stack 0
   904  00004F                     	ds	8
   905  000057                     _count:
   906                           	opt stack 0
   907  000057                     	ds	2
   908  000059                     _curr:
   909                           	opt stack 0
   910  000059                     	ds	2
   911  00005B                     _prevTime:
   912                           	opt stack 0
   913  00005B                     	ds	2
   914  00005D                     _lastKey:
   915                           	opt stack 0
   916  00005D                     	ds	1
   917                           tblptru	equ	0xFF8
   918                           tblptrh	equ	0xFF7
   919                           tblptrl	equ	0xFF6
   920                           tablat	equ	0xFF5
   921                           postinc0	equ	0xFEE
   922                           wreg	equ	0xFE8
   923                           postdec1	equ	0xFE5
   924                           fsr1l	equ	0xFE1
   925                           
   926                           	psect	dataCOMRAM
   927  00003F                     __pdataCOMRAM:
   928                           	opt stack 0
   929  00003F                     _redirectAngle_C:
   930                           	opt stack 0
   931  00003F                     	ds	2
   932  000041                     _conveyorServo:
   933                           	opt stack 0
   934  000041                     	ds	6
   935  000047                     _padPin1:
   936                           	opt stack 0
   937  000047                     	ds	4
   938  00004B                     _padPin2:
   939                           	opt stack 0
   940  00004B                     	ds	4
   941                           tblptru	equ	0xFF8
   942                           tblptrh	equ	0xFF7
   943                           tblptrl	equ	0xFF6
   944                           tablat	equ	0xFF5
   945                           postinc0	equ	0xFEE
   946                           wreg	equ	0xFE8
   947                           postdec1	equ	0xFE5
   948                           fsr1l	equ	0xFE1
   949                           
   950                           	psect	bssBANK0
   951  0000EF                     __pbssBANK0:
   952                           	opt stack 0
   953  0000EF                     _padPin3:
   954                           	opt stack 0
   955  0000EF                     	ds	4
   956  0000F3                     _V_LIM_9V:
   957                           	opt stack 0
   958  0000F3                     	ds	3
   959  0000F6                     _V_LIM_AA:
   960                           	opt stack 0
   961  0000F6                     	ds	3
   962  0000F9                     _V_LIM_C:
   963                           	opt stack 0
   964  0000F9                     	ds	3
   965  0000FC                     _batteryDetected:
   966                           	opt stack 0
   967  0000FC                     	ds	2
   968  0000FE                     _n:
   969                           	opt stack 0
   970  0000FE                     	ds	2
   971                           tblptru	equ	0xFF8
   972                           tblptrh	equ	0xFF7
   973                           tblptrl	equ	0xFF6
   974                           tablat	equ	0xFF5
   975                           postinc0	equ	0xFEE
   976                           wreg	equ	0xFE8
   977                           postdec1	equ	0xFE5
   978                           fsr1l	equ	0xFE1
   979                           
   980                           	psect	dataBANK0
   981  0000D5                     __pdataBANK0:
   982                           	opt stack 0
   983  0000D5                     _padAngle_CLOSE:
   984                           	opt stack 0
   985  0000D5                     	ds	2
   986  0000D7                     _padAngle_NEUTRAL:
   987                           	opt stack 0
   988  0000D7                     	ds	2
   989  0000D9                     _padAngle_OPEN:
   990                           	opt stack 0
   991  0000D9                     	ds	2
   992  0000DB                     _redirectAngle_9V:
   993                           	opt stack 0
   994  0000DB                     	ds	2
   995  0000DD                     _redirectAngle_AA:
   996                           	opt stack 0
   997  0000DD                     	ds	2
   998  0000DF                     _redirectAngle_OTHER:
   999                           	opt stack 0
  1000  0000DF                     	ds	2
  1001  0000E1                     _padServo:
  1002                           	opt stack 0
  1003  0000E1                     	ds	6
  1004  0000E7                     _AA_float:
  1005                           	opt stack 0
  1006  0000E7                     	ds	4
  1007  0000EB                     _cylinderMotor:
  1008                           	opt stack 0
  1009  0000EB                     	ds	4
  1010                           tblptru	equ	0xFF8
  1011                           tblptrh	equ	0xFF7
  1012                           tblptrl	equ	0xFF6
  1013                           tablat	equ	0xFF5
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           postdec1	equ	0xFE5
  1017                           fsr1l	equ	0xFE1
  1018                           
  1019                           	psect	bssBANK1
  1020  00012A                     __pbssBANK1:
  1021                           	opt stack 0
  1022  00012A                     _pulse:
  1023                           	opt stack 0
  1024  00012A                     	ds	8
  1025                           tblptru	equ	0xFF8
  1026                           tblptrh	equ	0xFF7
  1027                           tblptrl	equ	0xFF6
  1028                           tablat	equ	0xFF5
  1029                           postinc0	equ	0xFEE
  1030                           wreg	equ	0xFE8
  1031                           postdec1	equ	0xFE5
  1032                           fsr1l	equ	0xFE1
  1033                           
  1034                           	psect	dataBANK1
  1035  000132                     __pdataBANK1:
  1036                           	opt stack 0
  1037  000132                     _redirectingServo:
  1038                           	opt stack 0
  1039  000132                     	ds	6
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           postinc0	equ	0xFEE
  1045                           wreg	equ	0xFE8
  1046                           postdec1	equ	0xFE5
  1047                           fsr1l	equ	0xFE1
  1048                           
  1049                           	psect	cstackBANK1
  1050  000100                     __pcstackBANK1:
  1051                           	opt stack 0
  1052  000100                     setAngle@period:
  1053                           	opt stack 0
  1054  000100                     _printf$1320:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x0
  1058  000100                     	ds	2
  1059  000102                     setAngle@i:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x2
  1063  000102                     	ds	1
  1064  000103                     printf@idx:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x3
  1068  000103                     	ds	1
  1069  000104                     initServo@motor:
  1070                           	opt stack 0
  1071  000104                     printf@ap:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x4
  1075  000104                     	ds	2
  1076  000106                     initServo@angle:
  1077                           	opt stack 0
  1078  000106                     printf@flag:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x6
  1082  000106                     	ds	2
  1083  000108                     ??_initServo:
  1084  000108                     printf@prec:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x8
  1088  000108                     	ds	2
  1089  00010A                     printf@exp:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0xA
  1093  00010A                     	ds	2
  1094  00010C                     printf@tmpval:
  1095                           	opt stack 0
  1096                           
  1097                           ; 4 bytes @ 0xC
  1098  00010C                     	ds	4
  1099  000110                     printf@val:
  1100                           	opt stack 0
  1101                           
  1102                           ; 4 bytes @ 0x10
  1103  000110                     	ds	4
  1104  000114                     printf@fval:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0x14
  1108  000114                     	ds	3
  1109  000117                     printf@c:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x17
  1113  000117                     	ds	1
  1114  000118                     ??_sortBattery:
  1115                           
  1116                           ; 1 bytes @ 0x18
  1117  000118                     	ds	2
  1118  00011A                     sortBattery@V_float:
  1119                           	opt stack 0
  1120                           
  1121                           ; 3 bytes @ 0x1A
  1122  00011A                     	ds	3
  1123  00011D                     sortBattery@Vcc:
  1124                           	opt stack 0
  1125                           
  1126                           ; 3 bytes @ 0x1D
  1127  00011D                     	ds	3
  1128  000120                     sortBattery@resolution:
  1129                           	opt stack 0
  1130                           
  1131                           ; 3 bytes @ 0x20
  1132  000120                     	ds	3
  1133  000123                     sortBattery@signal:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x23
  1137  000123                     	ds	2
  1138  000125                     sortBattery@targetAngle:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x25
  1142  000125                     	ds	2
  1143  000127                     sortBattery@V:
  1144                           	opt stack 0
  1145                           
  1146                           ; 3 bytes @ 0x27
  1147  000127                     	ds	3
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           postdec1	equ	0xFE5
  1155                           fsr1l	equ	0xFE1
  1156                           
  1157                           	psect	cstackBANK0
  1158  000080                     __pcstackBANK0:
  1159                           	opt stack 0
  1160  000080                     ___ftdiv@cntr:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x0
  1164  000080                     	ds	1
  1165  000081                     ___ftdiv@f3:
  1166                           	opt stack 0
  1167                           
  1168                           ; 3 bytes @ 0x1
  1169  000081                     	ds	3
  1170  000084                     ___ftdiv@exp:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x4
  1174  000084                     	ds	1
  1175  000085                     ___ftdiv@sign:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x5
  1179  000085                     	ds	1
  1180  000086                     ?___ftmul:
  1181                           	opt stack 0
  1182  000086                     ___ftmul@f1:
  1183                           	opt stack 0
  1184                           
  1185                           ; 3 bytes @ 0x6
  1186  000086                     	ds	3
  1187  000089                     ___ftmul@f2:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0x9
  1191  000089                     	ds	3
  1192  00008C                     ??___ftmul:
  1193                           
  1194                           ; 1 bytes @ 0xC
  1195  00008C                     	ds	3
  1196  00008F                     ___ftmul@exp:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0xF
  1200  00008F                     	ds	1
  1201  000090                     ___ftmul@f3_as_product:
  1202                           	opt stack 0
  1203                           
  1204                           ; 3 bytes @ 0x10
  1205  000090                     	ds	3
  1206  000093                     ___ftmul@cntr:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0x13
  1210  000093                     	ds	1
  1211  000094                     ___ftmul@sign:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0x14
  1215  000094                     	ds	1
  1216  000095                     ?_fround:
  1217                           	opt stack 0
  1218  000095                     ?_scale:
  1219                           	opt stack 0
  1220                           
  1221                           ; 3 bytes @ 0x15
  1222  000095                     	ds	3
  1223  000098                     _fround$1318:
  1224                           	opt stack 0
  1225  000098                     _scale$1319:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0x18
  1229  000098                     	ds	3
  1230  00009B                     scale@scl:
  1231                           	opt stack 0
  1232  00009B                     _fround$1317:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x1B
  1236  00009B                     	ds	3
  1237  00009E                     fround@prec:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x1E
  1241  00009E                     	ds	1
  1242  00009F                     ?___ftadd:
  1243                           	opt stack 0
  1244  00009F                     ___ftadd@f1:
  1245                           	opt stack 0
  1246                           
  1247                           ; 3 bytes @ 0x1F
  1248  00009F                     	ds	3
  1249  0000A2                     ___ftadd@f2:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x22
  1253  0000A2                     	ds	3
  1254  0000A5                     ??___ftadd:
  1255                           
  1256                           ; 1 bytes @ 0x25
  1257  0000A5                     	ds	3
  1258  0000A8                     ___ftadd@sign:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0x28
  1262  0000A8                     	ds	1
  1263  0000A9                     ___ftadd@exp2:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x29
  1267  0000A9                     	ds	1
  1268  0000AA                     ___ftadd@exp1:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x2A
  1272  0000AA                     	ds	1
  1273  0000AB                     ?___ftsub:
  1274                           	opt stack 0
  1275  0000AB                     ?___fttol:
  1276                           	opt stack 0
  1277  0000AB                     ___ftsub@f1:
  1278                           	opt stack 0
  1279  0000AB                     ___fttol@f1:
  1280                           	opt stack 0
  1281                           
  1282                           ; 3 bytes @ 0x2B
  1283  0000AB                     	ds	3
  1284  0000AE                     ___ftsub@f2:
  1285                           	opt stack 0
  1286                           
  1287                           ; 3 bytes @ 0x2E
  1288  0000AE                     	ds	1
  1289  0000AF                     ??___fttol:
  1290                           
  1291                           ; 1 bytes @ 0x2F
  1292  0000AF                     	ds	5
  1293  0000B4                     ___fttol@sign1:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x34
  1297  0000B4                     	ds	1
  1298  0000B5                     ___fttol@lval:
  1299                           	opt stack 0
  1300                           
  1301                           ; 4 bytes @ 0x35
  1302  0000B5                     	ds	4
  1303  0000B9                     ___fttol@exp1:
  1304                           	opt stack 0
  1305                           
  1306                           ; 1 bytes @ 0x39
  1307  0000B9                     	ds	1
  1308  0000BA                     ?_printf:
  1309                           	opt stack 0
  1310  0000BA                     ?_angleToPulse:
  1311                           	opt stack 0
  1312  0000BA                     angleToPulse@angle:
  1313                           	opt stack 0
  1314  0000BA                     printf@f:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x3A
  1318  0000BA                     	ds	4
  1319  0000BE                     ??_angleToPulse:
  1320                           
  1321                           ; 1 bytes @ 0x3E
  1322  0000BE                     	ds	3
  1323  0000C1                     ??_printf:
  1324                           
  1325                           ; 1 bytes @ 0x41
  1326  0000C1                     	ds	1
  1327  0000C2                     angleToPulse@offset:
  1328                           	opt stack 0
  1329                           
  1330                           ; 4 bytes @ 0x42
  1331  0000C2                     	ds	4
  1332  0000C6                     angleToPulse@a180:
  1333                           	opt stack 0
  1334                           
  1335                           ; 4 bytes @ 0x46
  1336  0000C6                     	ds	4
  1337  0000CA                     _angleToPulse$1316:
  1338                           	opt stack 0
  1339                           
  1340                           ; 3 bytes @ 0x4A
  1341  0000CA                     	ds	3
  1342  0000CD                     angleToPulse@a000:
  1343                           	opt stack 0
  1344                           
  1345                           ; 4 bytes @ 0x4D
  1346  0000CD                     	ds	4
  1347  0000D1                     setAngle@motor:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x51
  1351  0000D1                     	ds	2
  1352  0000D3                     setAngle@angle:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x53
  1356  0000D3                     	ds	2
  1357                           tblptru	equ	0xFF8
  1358                           tblptrh	equ	0xFF7
  1359                           tblptrl	equ	0xFF6
  1360                           tablat	equ	0xFF5
  1361                           postinc0	equ	0xFEE
  1362                           wreg	equ	0xFE8
  1363                           postdec1	equ	0xFE5
  1364                           fsr1l	equ	0xFE1
  1365                           
  1366                           	psect	cstackCOMRAM
  1367  000001                     __pcstackCOMRAM:
  1368                           	opt stack 0
  1369  000001                     ?i2___awmod:
  1370                           	opt stack 0
  1371  000001                     keyPressedInterruptService@key:
  1372                           	opt stack 0
  1373  000001                     i2___awmod@dividend:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x0
  1377  000001                     	ds	2
  1378  000003                     i2___awmod@divisor:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x2
  1382  000003                     	ds	2
  1383  000005                     i2___awmod@counter:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x4
  1387  000005                     	ds	1
  1388  000006                     i2___awmod@sign:
  1389                           	opt stack 0
  1390                           
  1391                           ; 1 bytes @ 0x5
  1392  000006                     	ds	1
  1393  000007                     i2digitalWrite@pin:
  1394                           	opt stack 0
  1395  000007                     i2startTimer@timer:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x6
  1399  000007                     	ds	2
  1400  000009                     i2digitalWrite@val:
  1401                           	opt stack 0
  1402  000009                     i2startTimer@val:
  1403                           	opt stack 0
  1404                           
  1405                           ; 4 bytes @ 0x8
  1406  000009                     	ds	2
  1407  00000B                     ??i2_digitalWrite:
  1408                           
  1409                           ; 1 bytes @ 0xA
  1410  00000B                     	ds	2
  1411  00000D                     ??i2_startTimer:
  1412                           
  1413                           ; 1 bytes @ 0xC
  1414  00000D                     	ds	1
  1415  00000E                     i2digitalWrite@p:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0xD
  1419  00000E                     	ds	2
  1420  000010                     ??_servoInterruptService:
  1421                           
  1422                           ; 1 bytes @ 0xF
  1423  000010                     	ds	4
  1424  000014                     ??_service:
  1425                           
  1426                           ; 1 bytes @ 0x13
  1427  000014                     	ds	14
  1428  000022                     ?_digitalRead:
  1429                           	opt stack 0
  1430  000022                     ?___awmod:
  1431                           	opt stack 0
  1432  000022                     ?___ftpack:
  1433                           	opt stack 0
  1434  000022                     ?___ftneg:
  1435                           	opt stack 0
  1436  000022                     ?_analogRead:
  1437                           	opt stack 0
  1438  000022                     ?__tdiv_to_l_:
  1439                           	opt stack 0
  1440  000022                     ?__div_to_l_:
  1441                           	opt stack 0
  1442  000022                     ?___lldiv:
  1443                           	opt stack 0
  1444  000022                     lcdNibble@temp:
  1445                           	opt stack 0
  1446  000022                     readKeypad@key:
  1447                           	opt stack 0
  1448  000022                     digitalRead@pin:
  1449                           	opt stack 0
  1450  000022                     digitalWrite@pin:
  1451                           	opt stack 0
  1452  000022                     analogRead@channel:
  1453                           	opt stack 0
  1454  000022                     initTimer@timer:
  1455                           	opt stack 0
  1456  000022                     startTimer@timer:
  1457                           	opt stack 0
  1458  000022                     ___awmod@dividend:
  1459                           	opt stack 0
  1460  000022                     __div_to_l_@f1:
  1461                           	opt stack 0
  1462  000022                     ___ftpack@arg:
  1463                           	opt stack 0
  1464  000022                     __tdiv_to_l_@f1:
  1465                           	opt stack 0
  1466  000022                     ___ftge@ff1:
  1467                           	opt stack 0
  1468  000022                     ___ftneg@f1:
  1469                           	opt stack 0
  1470  000022                     ___lldiv@dividend:
  1471                           	opt stack 0
  1472                           
  1473                           ; 4 bytes @ 0x21
  1474  000022                     	ds	1
  1475  000023                     lcdNibble@data:
  1476                           	opt stack 0
  1477                           
  1478                           ; 1 bytes @ 0x22
  1479  000023                     	ds	1
  1480  000024                     ??_digitalRead:
  1481  000024                     ??_lcdInst:
  1482  000024                     ??_initTimer:
  1483  000024                     digitalWrite@val:
  1484                           	opt stack 0
  1485  000024                     ___awmod@divisor:
  1486                           	opt stack 0
  1487  000024                     startTimer@val:
  1488                           	opt stack 0
  1489                           
  1490                           ; 4 bytes @ 0x23
  1491  000024                     	ds	1
  1492  000025                     lcdInst@data:
  1493                           	opt stack 0
  1494  000025                     ___ftpack@exp:
  1495                           	opt stack 0
  1496  000025                     __div_to_l_@f2:
  1497                           	opt stack 0
  1498  000025                     __tdiv_to_l_@f2:
  1499                           	opt stack 0
  1500  000025                     ___ftge@ff2:
  1501                           	opt stack 0
  1502                           
  1503                           ; 3 bytes @ 0x24
  1504  000025                     	ds	1
  1505  000026                     ??_initLCD:
  1506  000026                     ??_digitalWrite:
  1507  000026                     ??_analogRead:
  1508  000026                     putch@data:
  1509                           	opt stack 0
  1510  000026                     ___awmod@counter:
  1511                           	opt stack 0
  1512  000026                     ___ftpack@sign:
  1513                           	opt stack 0
  1514  000026                     ___lldiv@divisor:
  1515                           	opt stack 0
  1516                           
  1517                           ; 4 bytes @ 0x25
  1518  000026                     	ds	1
  1519  000027                     ??___ftpack:
  1520  000027                     ___awmod@sign:
  1521                           	opt stack 0
  1522                           
  1523                           ; 1 bytes @ 0x26
  1524  000027                     	ds	1
  1525  000028                     ??__tdiv_to_l_:
  1526  000028                     ??_startTimer:
  1527  000028                     ??___ftge:
  1528  000028                     ?___awdiv:
  1529                           	opt stack 0
  1530  000028                     ___awdiv@dividend:
  1531                           	opt stack 0
  1532  000028                     __div_to_l_@quot:
  1533                           	opt stack 0
  1534                           
  1535                           ; 4 bytes @ 0x27
  1536  000028                     	ds	1
  1537  000029                     digitalWrite@p:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x28
  1541  000029                     	ds	1
  1542  00002A                     ?___altoft:
  1543                           	opt stack 0
  1544  00002A                     ?___awtoft:
  1545                           	opt stack 0
  1546  00002A                     ?___lltoft:
  1547                           	opt stack 0
  1548  00002A                     ___awdiv@divisor:
  1549                           	opt stack 0
  1550  00002A                     ___awtoft@c:
  1551                           	opt stack 0
  1552  00002A                     ___altoft@c:
  1553                           	opt stack 0
  1554  00002A                     ___lldiv@quotient:
  1555                           	opt stack 0
  1556  00002A                     ___lltoft@c:
  1557                           	opt stack 0
  1558                           
  1559                           ; 4 bytes @ 0x29
  1560  00002A                     	ds	1
  1561  00002B                     __tdiv_to_l_@quot:
  1562                           	opt stack 0
  1563                           
  1564                           ; 4 bytes @ 0x2A
  1565  00002B                     	ds	1
  1566  00002C                     ___awdiv@counter:
  1567                           	opt stack 0
  1568  00002C                     __div_to_l_@cntr:
  1569                           	opt stack 0
  1570                           
  1571                           ; 1 bytes @ 0x2B
  1572  00002C                     	ds	1
  1573  00002D                     ___awdiv@sign:
  1574                           	opt stack 0
  1575  00002D                     ___awtoft@sign:
  1576                           	opt stack 0
  1577  00002D                     __div_to_l_@exp1:
  1578                           	opt stack 0
  1579                           
  1580                           ; 1 bytes @ 0x2C
  1581  00002D                     	ds	1
  1582  00002E                     ??___altoft:
  1583  00002E                     ??___lltoft:
  1584  00002E                     ___lldiv@counter:
  1585                           	opt stack 0
  1586  00002E                     ___awdiv@quotient:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0x2D
  1590  00002E                     	ds	1
  1591  00002F                     ?___llmod:
  1592                           	opt stack 0
  1593  00002F                     __tdiv_to_l_@cntr:
  1594                           	opt stack 0
  1595  00002F                     ___llmod@dividend:
  1596                           	opt stack 0
  1597                           
  1598                           ; 4 bytes @ 0x2E
  1599  00002F                     	ds	1
  1600  000030                     ?___wmul:
  1601                           	opt stack 0
  1602  000030                     __tdiv_to_l_@exp1:
  1603                           	opt stack 0
  1604  000030                     ___wmul@multiplier:
  1605                           	opt stack 0
  1606                           
  1607                           ; 2 bytes @ 0x2F
  1608  000030                     	ds	2
  1609  000032                     ___altoft@exp:
  1610                           	opt stack 0
  1611  000032                     ___lltoft@exp:
  1612                           	opt stack 0
  1613  000032                     ___wmul@multiplicand:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x31
  1617  000032                     	ds	1
  1618  000033                     ___altoft@sign:
  1619                           	opt stack 0
  1620  000033                     ___llmod@divisor:
  1621                           	opt stack 0
  1622                           
  1623                           ; 4 bytes @ 0x32
  1624  000033                     	ds	1
  1625  000034                     ?___ftdiv:
  1626                           	opt stack 0
  1627  000034                     ___wmul@product:
  1628                           	opt stack 0
  1629  000034                     ___ftdiv@f1:
  1630                           	opt stack 0
  1631                           
  1632                           ; 3 bytes @ 0x33
  1633  000034                     	ds	3
  1634  000037                     ___llmod@counter:
  1635                           	opt stack 0
  1636  000037                     ___ftdiv@f2:
  1637                           	opt stack 0
  1638                           
  1639                           ; 3 bytes @ 0x36
  1640  000037                     	ds	3
  1641  00003A                     ??___ftdiv:
  1642                           
  1643                           ; 1 bytes @ 0x39
  1644  00003A                     	ds	3
  1645  00003D                     ??_setAngle:
  1646  00003D                     pause@message:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x3C
  1650  00003D                     	ds	2
  1651  00003F                     tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1l	equ	0xFE1
  1659                           
  1660                           ; 1 bytes @ 0x3E
  1661 ;;
  1662 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1663 ;;
  1664 ;; *************** function _main *****************
  1665 ;; Defined at:
  1666 ;;		line 90 in file "main.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;Total ram usage:        0 bytes
  1685 ;; Hardware stack levels required when called:   10
  1686 ;; This function calls:
  1687 ;;		_digitalWrite
  1688 ;;		_initLCD
  1689 ;;		_initServo
  1690 ;;		_pinSetup
  1691 ;;		_printf
  1692 ;;		_sortBattery
  1693 ;; This function is called by:
  1694 ;;		Startup code after reset
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text0
  1699  002258                     __ptext0:
  1700                           	opt stack 0
  1701  002258                     _main:
  1702                           	opt stack 21
  1703                           
  1704                           ;main.c: 91: pinSetup();
  1705                           
  1706                           ;incstack = 0
  1707  002258  ECC6  F014         	call	_pinSetup	;wreg free
  1708                           
  1709                           ;main.c: 92: initLCD();
  1710  00225C  ECA3  F014         	call	_initLCD	;wreg free
  1711                           
  1712                           ;main.c: 98: digitalWrite(cylinderMotor, 1);
  1713                           
  1714                           ;main.c: 94: while(1){
  1715  002260  0EEB               	movlw	low _cylinderMotor
  1716  002262  6E22               	movwf	digitalWrite@pin,c
  1717  002264  0E00               	movlw	high _cylinderMotor
  1718  002266  6E23               	movwf	digitalWrite@pin+1,c
  1719  002268  0E00               	movlw	0
  1720  00226A  6E25               	movwf	digitalWrite@val+1,c
  1721  00226C  0E01               	movlw	1
  1722  00226E  6E24               	movwf	digitalWrite@val,c
  1723  002270  ECC2  F00F         	call	_digitalWrite	;wreg free
  1724                           
  1725                           ;main.c: 99: initServo(conveyorServo, 0);
  1726  002274  0E41               	movlw	low _conveyorServo
  1727  002276  0101               	movlb	1	; () banked
  1728  002278  6F04               	movwf	initServo@motor& (0+255),b
  1729  00227A  0E00               	movlw	high _conveyorServo
  1730  00227C  0101               	movlb	1	; () banked
  1731  00227E  6F05               	movwf	(initServo@motor+1)& (0+255),b
  1732  002280  0E00               	movlw	0
  1733  002282  0101               	movlb	1	; () banked
  1734  002284  6F07               	movwf	(initServo@angle+1)& (0+255),b
  1735  002286  0E00               	movlw	0
  1736  002288  6F06               	movwf	initServo@angle& (0+255),b
  1737  00228A  EC07  F012         	call	_initServo	;wreg free
  1738                           
  1739                           ;main.c: 100: initServo(padServo, padAngle_NEUTRAL);
  1740  00228E  0EE1               	movlw	low _padServo
  1741  002290  0101               	movlb	1	; () banked
  1742  002292  6F04               	movwf	initServo@motor& (0+255),b
  1743  002294  0E00               	movlw	high _padServo
  1744  002296  0101               	movlb	1	; () banked
  1745  002298  6F05               	movwf	(initServo@motor+1)& (0+255),b
  1746  00229A  C0D7  F106         	movff	_padAngle_NEUTRAL,initServo@angle
  1747  00229E  C0D8  F107         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1748  0022A2  EC07  F012         	call	_initServo	;wreg free
  1749                           
  1750                           ;main.c: 101: initServo(redirectingServo, 140);
  1751  0022A6  0E32               	movlw	low _redirectingServo
  1752  0022A8  0101               	movlb	1	; () banked
  1753  0022AA  6F04               	movwf	initServo@motor& (0+255),b
  1754  0022AC  0E01               	movlw	high _redirectingServo
  1755  0022AE  0101               	movlb	1	; () banked
  1756  0022B0  6F05               	movwf	(initServo@motor+1)& (0+255),b
  1757  0022B2  0E00               	movlw	0
  1758  0022B4  0101               	movlb	1	; () banked
  1759  0022B6  6F07               	movwf	(initServo@angle+1)& (0+255),b
  1760  0022B8  0E8C               	movlw	140
  1761  0022BA  6F06               	movwf	initServo@angle& (0+255),b
  1762  0022BC  EC07  F012         	call	_initServo	;wreg free
  1763  0022C0                     l5809:
  1764                           
  1765                           ;main.c: 106: printf("running");
  1766  0022C0  0EF7               	movlw	low STR_1
  1767  0022C2  0100               	movlb	0	; () banked
  1768  0022C4  6FBA               	movwf	printf@f& (0+255),b
  1769  0022C6  0EFF               	movlw	high STR_1
  1770  0022C8  0100               	movlb	0	; () banked
  1771  0022CA  6FBB               	movwf	(printf@f+1)& (0+255),b
  1772  0022CC  EC09  F000         	call	_printf	;wreg free
  1773  0022D0                     l5811:
  1774  0022D0  0100               	movlb	0	; () banked
  1775  0022D2  51FC               	movf	_batteryDetected& (0+255),w,b
  1776  0022D4  0100               	movlb	0	; () banked
  1777  0022D6  11FD               	iorwf	(_batteryDetected+1)& (0+255),w,b
  1778  0022D8  B4D8               	btfsc	status,2,c
  1779  0022DA  D7FA               	goto	l5811
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;main.c: 110: }
  1783                           ;main.c: 112: sortBattery();
  1784                           
  1785                           ; BSR set to: 0
  1786  0022DC  ECAA  F006         	call	_sortBattery	;wreg free
  1787                           
  1788                           ;main.c: 115: batteryDetected = 0;
  1789  0022E0  0E00               	movlw	0
  1790  0022E2  0100               	movlb	0	; () banked
  1791  0022E4  6FFD               	movwf	(_batteryDetected+1)& (0+255),b
  1792  0022E6  0E00               	movlw	0
  1793  0022E8  6FFC               	movwf	_batteryDetected& (0+255),b
  1794                           
  1795                           ; BSR set to: 0
  1796  0022EA  D7EA               	goto	l5809
  1797  0022EC                     __end_of_main:
  1798                           	opt stack 0
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1l	equ	0xFE1
  1807                           status	equ	0xFD8
  1808                           
  1809 ;; *************** function _sortBattery *****************
  1810 ;; Defined at:
  1811 ;;		line 124 in file "main.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  V_float         3   26[BANK1 ] float 
  1816 ;;  V               3   39[BANK1 ] float 
  1817 ;;  resolution      3   32[BANK1 ] float 
  1818 ;;  Vcc             3   29[BANK1 ] float 
  1819 ;;  targetAngle     2   37[BANK1 ] int 
  1820 ;;  signal          2   35[BANK1 ] int 
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;Total ram usage:       18 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    9
  1837 ;; This function calls:
  1838 ;;		___altoft
  1839 ;;		___ftdiv
  1840 ;;		___ftge
  1841 ;;		___ftmul
  1842 ;;		_analogRead
  1843 ;;		_digitalRead
  1844 ;;		_digitalWrite
  1845 ;;		_lcdClear
  1846 ;;		_pause
  1847 ;;		_printf
  1848 ;;		_readKeypad
  1849 ;;		_setAngle
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text1
  1856  000D54                     __ptext1:
  1857                           	opt stack 0
  1858  000D54                     _sortBattery:
  1859                           	opt stack 21
  1860                           
  1861                           ;main.c: 127: setAngle(conveyorServo, 90);
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;incstack = 0
  1865  000D54  0E41               	movlw	low _conveyorServo
  1866  000D56  0100               	movlb	0	; () banked
  1867  000D58  6FD1               	movwf	setAngle@motor& (0+255),b
  1868  000D5A  0E00               	movlw	high _conveyorServo
  1869  000D5C  0100               	movlb	0	; () banked
  1870  000D5E  6FD2               	movwf	(setAngle@motor+1)& (0+255),b
  1871  000D60  0E00               	movlw	0
  1872  000D62  0100               	movlb	0	; () banked
  1873  000D64  6FD4               	movwf	(setAngle@angle+1)& (0+255),b
  1874  000D66  0E5A               	movlw	90
  1875  000D68  6FD3               	movwf	setAngle@angle& (0+255),b
  1876  000D6A  EC5A  F00F         	call	_setAngle	;wreg free
  1877                           
  1878                           ;main.c: 128: digitalWrite(cylinderMotor, 0);
  1879  000D6E  0EEB               	movlw	low _cylinderMotor
  1880  000D70  6E22               	movwf	digitalWrite@pin,c
  1881  000D72  0E00               	movlw	high _cylinderMotor
  1882  000D74  6E23               	movwf	digitalWrite@pin+1,c
  1883  000D76  0E00               	movlw	0
  1884  000D78  6E25               	movwf	digitalWrite@val+1,c
  1885  000D7A  0E00               	movlw	0
  1886  000D7C  6E24               	movwf	digitalWrite@val,c
  1887  000D7E  ECC2  F00F         	call	_digitalWrite	;wreg free
  1888                           
  1889                           ;main.c: 134: pause("interrupt!!!\nclose?");
  1890  000D82  0EC0               	movlw	low STR_2
  1891  000D84  6E3D               	movwf	pause@message,c
  1892  000D86  0EFE               	movlw	high STR_2
  1893  000D88  6E3E               	movwf	pause@message+1,c
  1894  000D8A  EC95  F015         	call	_pause	;wreg free
  1895                           
  1896                           ;main.c: 135: setAngle(padServo, padAngle_CLOSE);
  1897  000D8E  0EE1               	movlw	low _padServo
  1898  000D90  0100               	movlb	0	; () banked
  1899  000D92  6FD1               	movwf	setAngle@motor& (0+255),b
  1900  000D94  0E00               	movlw	high _padServo
  1901  000D96  0100               	movlb	0	; () banked
  1902  000D98  6FD2               	movwf	(setAngle@motor+1)& (0+255),b
  1903  000D9A  C0D5  F0D3         	movff	_padAngle_CLOSE,setAngle@angle
  1904  000D9E  C0D6  F0D4         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  1905  000DA2  EC5A  F00F         	call	_setAngle	;wreg free
  1906                           
  1907                           ;main.c: 138: pause("read voltage?");
  1908  000DA6  0ED8               	movlw	low STR_3
  1909  000DA8  6E3D               	movwf	pause@message,c
  1910  000DAA  0EFF               	movlw	high STR_3
  1911  000DAC  6E3E               	movwf	pause@message+1,c
  1912  000DAE  EC95  F015         	call	_pause	;wreg free
  1913                           
  1914                           ;main.c: 139: float Vcc = 3.9;
  1915  000DB2  0E9A               	movlw	154
  1916  000DB4  0101               	movlb	1	; () banked
  1917  000DB6  6F1D               	movwf	sortBattery@Vcc& (0+255),b
  1918  000DB8  0E79               	movlw	121
  1919  000DBA  0101               	movlb	1	; () banked
  1920  000DBC  6F1E               	movwf	(sortBattery@Vcc+1)& (0+255),b
  1921  000DBE  0E40               	movlw	64
  1922  000DC0  0101               	movlb	1	; () banked
  1923  000DC2  6F1F               	movwf	(sortBattery@Vcc+2)& (0+255),b
  1924                           
  1925                           ; BSR set to: 1
  1926                           ;main.c: 140: float resolution = (1<<10) - 1;
  1927  000DC4  0EC0               	movlw	192
  1928  000DC6  0101               	movlb	1	; () banked
  1929  000DC8  6F20               	movwf	sortBattery@resolution& (0+255),b
  1930  000DCA  0E7F               	movlw	127
  1931  000DCC  0101               	movlb	1	; () banked
  1932  000DCE  6F21               	movwf	(sortBattery@resolution+1)& (0+255),b
  1933  000DD0  0E44               	movlw	68
  1934  000DD2  0101               	movlb	1	; () banked
  1935  000DD4  6F22               	movwf	(sortBattery@resolution+2)& (0+255),b
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;main.c: 142: int targetAngle;
  1939                           ;main.c: 143: int signal = digitalRead(padPin1)<<1;
  1940  000DD6  0E47               	movlw	low _padPin1
  1941  000DD8  6E22               	movwf	digitalRead@pin,c
  1942  000DDA  0E00               	movlw	high _padPin1
  1943  000DDC  6E23               	movwf	digitalRead@pin+1,c
  1944  000DDE  ECE5  F00E         	call	_digitalRead	;wreg free
  1945  000DE2  90D8               	bcf	status,0,c
  1946  000DE4  3422               	rlcf	?_digitalRead,w,c
  1947  000DE6  0101               	movlb	1	; () banked
  1948  000DE8  6F23               	movwf	sortBattery@signal& (0+255),b
  1949  000DEA  3423               	rlcf	?_digitalRead+1,w,c
  1950  000DEC  0101               	movlb	1	; () banked
  1951  000DEE  6F24               	movwf	(sortBattery@signal+1)& (0+255),b
  1952                           
  1953                           ; BSR set to: 1
  1954                           ;main.c: 144: signal |= digitalRead(padPin2);
  1955  000DF0  0E4B               	movlw	low _padPin2
  1956  000DF2  6E22               	movwf	digitalRead@pin,c
  1957  000DF4  0E00               	movlw	high _padPin2
  1958  000DF6  6E23               	movwf	digitalRead@pin+1,c
  1959  000DF8  ECE5  F00E         	call	_digitalRead	;wreg free
  1960  000DFC  5022               	movf	?_digitalRead,w,c
  1961  000DFE  0101               	movlb	1	; () banked
  1962  000E00  1323               	iorwf	sortBattery@signal& (0+255),f,b
  1963  000E02  5023               	movf	?_digitalRead+1,w,c
  1964  000E04  0101               	movlb	1	; () banked
  1965  000E06  1324               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  1966                           
  1967                           ; BSR set to: 1
  1968                           ;main.c: 146: digitalWrite(AA_float, 1);
  1969  000E08  0EE7               	movlw	low _AA_float
  1970  000E0A  6E22               	movwf	digitalWrite@pin,c
  1971  000E0C  0E00               	movlw	high _AA_float
  1972  000E0E  6E23               	movwf	digitalWrite@pin+1,c
  1973  000E10  0E00               	movlw	0
  1974  000E12  6E25               	movwf	digitalWrite@val+1,c
  1975  000E14  0E01               	movlw	1
  1976  000E16  6E24               	movwf	digitalWrite@val,c
  1977  000E18  ECC2  F00F         	call	_digitalWrite	;wreg free
  1978                           
  1979                           ;main.c: 147: float V = analogRead(padPin3[1]) / resolution * Vcc;
  1980  000E1C  C120  F037         	movff	sortBattery@resolution,___ftdiv@f2
  1981  000E20  C121  F038         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  1982  000E24  C122  F039         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  1983  000E28  C0F1  F022         	movff	_padPin3+2,analogRead@channel
  1984  000E2C  C0F2  F023         	movff	_padPin3+3,analogRead@channel+1
  1985  000E30  ECE6  F014         	call	_analogRead	;wreg free
  1986  000E34  C022  F02A         	movff	?_analogRead,___altoft@c
  1987  000E38  C023  F02B         	movff	?_analogRead+1,___altoft@c+1
  1988  000E3C  C024  F02C         	movff	?_analogRead+2,___altoft@c+2
  1989  000E40  C025  F02D         	movff	?_analogRead+3,___altoft@c+3
  1990  000E44  ECCE  F012         	call	___altoft	;wreg free
  1991  000E48  C02A  F034         	movff	?___altoft,___ftdiv@f1
  1992  000E4C  C02B  F035         	movff	?___altoft+1,___ftdiv@f1+1
  1993  000E50  C02C  F036         	movff	?___altoft+2,___ftdiv@f1+2
  1994  000E54  EC63  F00E         	call	___ftdiv	;wreg free
  1995  000E58  C034  F086         	movff	?___ftdiv,___ftmul@f1
  1996  000E5C  C035  F087         	movff	?___ftdiv+1,___ftmul@f1+1
  1997  000E60  C036  F088         	movff	?___ftdiv+2,___ftmul@f1+2
  1998  000E64  C11D  F089         	movff	sortBattery@Vcc,___ftmul@f2
  1999  000E68  C11E  F08A         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2000  000E6C  C11F  F08B         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2001  000E70  ECB6  F00A         	call	___ftmul	;wreg free
  2002  000E74  C086  F127         	movff	?___ftmul,sortBattery@V
  2003  000E78  C087  F128         	movff	?___ftmul+1,sortBattery@V+1
  2004  000E7C  C088  F129         	movff	?___ftmul+2,sortBattery@V+2
  2005                           
  2006                           ;main.c: 149: lcdClear();
  2007  000E80  ECAC  F015         	call	_lcdClear	;wreg free
  2008                           
  2009                           ;main.c: 150: printf("signal: %d \nVoltage: %f",signal,V);
  2010  000E84  0E94               	movlw	low STR_4
  2011  000E86  0100               	movlb	0	; () banked
  2012  000E88  6FBA               	movwf	printf@f& (0+255),b
  2013  000E8A  0EFE               	movlw	high STR_4
  2014  000E8C  0100               	movlb	0	; () banked
  2015  000E8E  6FBB               	movwf	(printf@f+1)& (0+255),b
  2016  000E90  C123  F0BC         	movff	sortBattery@signal,?_printf+2
  2017  000E94  C124  F0BD         	movff	sortBattery@signal+1,?_printf+3
  2018  000E98  C127  F0BE         	movff	sortBattery@V,?_printf+4
  2019  000E9C  C128  F0BF         	movff	sortBattery@V+1,?_printf+5
  2020  000EA0  C129  F0C0         	movff	sortBattery@V+2,?_printf+6
  2021  000EA4  EC09  F000         	call	_printf	;wreg free
  2022                           
  2023                           ;main.c: 151: readKeypad();
  2024  000EA8  EC1E  F015         	call	_readKeypad	;wreg free
  2025                           
  2026                           ;main.c: 154: pause("set redirect angle?");
  2027  000EAC  0EAC               	movlw	low STR_5
  2028  000EAE  6E3D               	movwf	pause@message,c
  2029  000EB0  0EFE               	movlw	high STR_5
  2030  000EB2  6E3E               	movwf	pause@message+1,c
  2031  000EB4  EC95  F015         	call	_pause	;wreg free
  2032                           
  2033                           ;main.c: 155: switch(signal){
  2034  000EB8  D093               	goto	l5775
  2035  000EBA                     l5753:
  2036                           
  2037                           ;main.c: 158: digitalWrite(AA_float, 0);
  2038  000EBA  0EE7               	movlw	low _AA_float
  2039  000EBC  6E22               	movwf	digitalWrite@pin,c
  2040  000EBE  0E00               	movlw	high _AA_float
  2041  000EC0  6E23               	movwf	digitalWrite@pin+1,c
  2042  000EC2  0E00               	movlw	0
  2043  000EC4  6E25               	movwf	digitalWrite@val+1,c
  2044  000EC6  0E00               	movlw	0
  2045  000EC8  6E24               	movwf	digitalWrite@val,c
  2046  000ECA  ECC2  F00F         	call	_digitalWrite	;wreg free
  2047                           
  2048                           ;main.c: 159: _delay((unsigned long)((1)*(10000000/4000.0)));
  2049  000ECE  0E04               	movlw	4
  2050  000ED0  0101               	movlb	1	; () banked
  2051  000ED2  6F18               	movwf	??_sortBattery& (0+255),b
  2052  000ED4  0E3D               	movlw	61
  2053  000ED6                     u5947:
  2054  000ED6  2EE8               	decfsz	wreg,f,c
  2055  000ED8  D7FE               	bra	u5947
  2056  000EDA  2F18               	decfsz	??_sortBattery& (0+255),f,b
  2057  000EDC  D7FC               	bra	u5947
  2058  000EDE  D000               	nop2	
  2059                           
  2060                           ;main.c: 160: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2061  000EE0  C120  F037         	movff	sortBattery@resolution,___ftdiv@f2
  2062  000EE4  C121  F038         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2063  000EE8  C122  F039         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2064  000EEC  C0F1  F022         	movff	_padPin3+2,analogRead@channel
  2065  000EF0  C0F2  F023         	movff	_padPin3+3,analogRead@channel+1
  2066  000EF4  ECE6  F014         	call	_analogRead	;wreg free
  2067  000EF8  C022  F02A         	movff	?_analogRead,___altoft@c
  2068  000EFC  C023  F02B         	movff	?_analogRead+1,___altoft@c+1
  2069  000F00  C024  F02C         	movff	?_analogRead+2,___altoft@c+2
  2070  000F04  C025  F02D         	movff	?_analogRead+3,___altoft@c+3
  2071  000F08  ECCE  F012         	call	___altoft	;wreg free
  2072  000F0C  C02A  F034         	movff	?___altoft,___ftdiv@f1
  2073  000F10  C02B  F035         	movff	?___altoft+1,___ftdiv@f1+1
  2074  000F14  C02C  F036         	movff	?___altoft+2,___ftdiv@f1+2
  2075  000F18  EC63  F00E         	call	___ftdiv	;wreg free
  2076  000F1C  C034  F086         	movff	?___ftdiv,___ftmul@f1
  2077  000F20  C035  F087         	movff	?___ftdiv+1,___ftmul@f1+1
  2078  000F24  C036  F088         	movff	?___ftdiv+2,___ftmul@f1+2
  2079  000F28  C11D  F089         	movff	sortBattery@Vcc,___ftmul@f2
  2080  000F2C  C11E  F08A         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2081  000F30  C11F  F08B         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2082  000F34  ECB6  F00A         	call	___ftmul	;wreg free
  2083  000F38  C086  F11A         	movff	?___ftmul,sortBattery@V_float
  2084  000F3C  C087  F11B         	movff	?___ftmul+1,sortBattery@V_float+1
  2085  000F40  C088  F11C         	movff	?___ftmul+2,sortBattery@V_float+2
  2086                           
  2087                           ;main.c: 161: if(V_float < 0.1){
  2088  000F44  C11A  F022         	movff	sortBattery@V_float,___ftge@ff1
  2089  000F48  C11B  F023         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2090  000F4C  C11C  F024         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2091  000F50  0ECD               	movlw	205
  2092  000F52  6E25               	movwf	___ftge@ff2,c
  2093  000F54  0ECC               	movlw	204
  2094  000F56  6E26               	movwf	___ftge@ff2+1,c
  2095  000F58  0E3D               	movlw	61
  2096  000F5A  6E27               	movwf	___ftge@ff2+2,c
  2097  000F5C  ECBF  F011         	call	___ftge	;wreg free
  2098  000F60  B0D8               	btfsc	status,0,c
  2099  000F62  D00F               	goto	l5765
  2100                           
  2101                           ;main.c: 162: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  2102  000F64  C0F6  F022         	movff	_V_LIM_AA,___ftge@ff1
  2103  000F68  C0F7  F023         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2104  000F6C  C0F8  F024         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2105  000F70  C127  F025         	movff	sortBattery@V,___ftge@ff2
  2106  000F74  C128  F026         	movff	sortBattery@V+1,___ftge@ff2+1
  2107  000F78  C129  F027         	movff	sortBattery@V+2,___ftge@ff2+2
  2108  000F7C  ECBF  F011         	call	___ftge	;wreg free
  2109  000F80  D023               	goto	L5
  2110  000F82                     l5765:
  2111                           
  2112                           ;main.c: 168: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  2113  000F82  C0F3  F022         	movff	_V_LIM_9V,___ftge@ff1
  2114  000F86  C0F4  F023         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2115  000F8A  C0F5  F024         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2116  000F8E  C127  F025         	movff	sortBattery@V,___ftge@ff2
  2117  000F92  C128  F026         	movff	sortBattery@V+1,___ftge@ff2+1
  2118  000F96  C129  F027         	movff	sortBattery@V+2,___ftge@ff2+2
  2119  000F9A  ECBF  F011         	call	___ftge	;wreg free
  2120  000F9E  B0D8               	btfsc	status,0,c
  2121  000FA0  D01A               	goto	l129
  2122  000FA2  C0DB  F125         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2123  000FA6  C0DC  F126         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2124  000FAA  D02E               	goto	l5777
  2125  000FAC                     l5769:
  2126                           
  2127                           ;main.c: 172: if(V > V_LIM_C) targetAngle = redirectAngle_AA;
  2128  000FAC  C0F9  F022         	movff	_V_LIM_C,___ftge@ff1
  2129  000FB0  C0FA  F023         	movff	_V_LIM_C+1,___ftge@ff1+1
  2130  000FB4  C0FB  F024         	movff	_V_LIM_C+2,___ftge@ff1+2
  2131  000FB8  C127  F025         	movff	sortBattery@V,___ftge@ff2
  2132  000FBC  C128  F026         	movff	sortBattery@V+1,___ftge@ff2+1
  2133  000FC0  C129  F027         	movff	sortBattery@V+2,___ftge@ff2+2
  2134  000FC4  ECBF  F011         	call	___ftge	;wreg free
  2135  000FC8                     L5:
  2136  000FC8  B0D8               	btfsc	status,0,c
  2137  000FCA  D005               	goto	l129
  2138  000FCC  C0DD  F125         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2139  000FD0  C0DE  F126         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2140  000FD4  D019               	goto	l5777
  2141  000FD6                     l129:
  2142                           
  2143                           ;main.c: 173: else targetAngle = redirectAngle_OTHER;
  2144  000FD6  C0DF  F125         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2145  000FDA  C0E0  F126         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2146                           
  2147                           ;main.c: 175: }
  2148                           
  2149                           ;main.c: 174: break;
  2150  000FDE  D014               	goto	l5777
  2151  000FE0                     l5775:
  2152  000FE0  C123  F118         	movff	sortBattery@signal,??_sortBattery
  2153  000FE4  C124  F119         	movff	sortBattery@signal+1,??_sortBattery+1
  2154                           
  2155                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2156                           ; Switch size 1, requested type "space"
  2157                           ; Number of cases is 1, Range of values is 0 to 0
  2158                           ; switch strategies available:
  2159                           ; Name         Instructions Cycles
  2160                           ; simple_byte            4     3 (average)
  2161                           ;	Chosen strategy is simple_byte
  2162  000FE8  0101               	movlb	1	; () banked
  2163  000FEA  5119               	movf	(??_sortBattery+1)& (0+255),w,b
  2164  000FEC  0A00               	xorlw	0	; case 0
  2165  000FEE  A4D8               	btfss	status,2,c
  2166  000FF0  D00B               	goto	l5777
  2167                           
  2168                           ; BSR set to: 1
  2169                           ; Switch size 1, requested type "space"
  2170                           ; Number of cases is 3, Range of values is 0 to 2
  2171                           ; switch strategies available:
  2172                           ; Name         Instructions Cycles
  2173                           ; simple_byte           10     6 (average)
  2174                           ;	Chosen strategy is simple_byte
  2175  000FF2  0101               	movlb	1	; () banked
  2176  000FF4  5118               	movf	??_sortBattery& (0+255),w,b
  2177  000FF6  0A00               	xorlw	0	; case 0
  2178  000FF8  B4D8               	btfsc	status,2,c
  2179  000FFA  D75F               	goto	l5753
  2180  000FFC  0A01               	xorlw	1	; case 1
  2181  000FFE  B4D8               	btfsc	status,2,c
  2182  001000  D7C0               	goto	l5765
  2183  001002  0A03               	xorlw	3	; case 2
  2184  001004  B4D8               	btfsc	status,2,c
  2185  001006  D7D2               	goto	l5769
  2186  001008                     l5777:
  2187                           
  2188                           ;main.c: 177: setAngle(redirectingServo, targetAngle);
  2189  001008  0E32               	movlw	low _redirectingServo
  2190  00100A  0100               	movlb	0	; () banked
  2191  00100C  6FD1               	movwf	setAngle@motor& (0+255),b
  2192  00100E  0E01               	movlw	high _redirectingServo
  2193  001010  0100               	movlb	0	; () banked
  2194  001012  6FD2               	movwf	(setAngle@motor+1)& (0+255),b
  2195  001014  C125  F0D3         	movff	sortBattery@targetAngle,setAngle@angle
  2196  001018  C126  F0D4         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2197  00101C  EC5A  F00F         	call	_setAngle	;wreg free
  2198                           
  2199                           ;main.c: 180: pause("release battery?");
  2200  001020  0EB8               	movlw	low STR_6
  2201  001022  6E3D               	movwf	pause@message,c
  2202  001024  0EFF               	movlw	high STR_6
  2203  001026  6E3E               	movwf	pause@message+1,c
  2204  001028  EC95  F015         	call	_pause	;wreg free
  2205                           
  2206                           ;main.c: 181: setAngle(padServo, padAngle_OPEN);
  2207  00102C  0EE1               	movlw	low _padServo
  2208  00102E  0100               	movlb	0	; () banked
  2209  001030  6FD1               	movwf	setAngle@motor& (0+255),b
  2210  001032  0E00               	movlw	high _padServo
  2211  001034  0100               	movlb	0	; () banked
  2212  001036  6FD2               	movwf	(setAngle@motor+1)& (0+255),b
  2213  001038  C0D9  F0D3         	movff	_padAngle_OPEN,setAngle@angle
  2214  00103C  C0DA  F0D4         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2215  001040  EC5A  F00F         	call	_setAngle	;wreg free
  2216                           
  2217                           ;main.c: 184: pause("reset the pad?");
  2218  001044  0EC9               	movlw	low STR_7
  2219  001046  6E3D               	movwf	pause@message,c
  2220  001048  0EFF               	movlw	high STR_7
  2221  00104A  6E3E               	movwf	pause@message+1,c
  2222  00104C  EC95  F015         	call	_pause	;wreg free
  2223                           
  2224                           ;main.c: 185: setAngle(padServo, padAngle_NEUTRAL);
  2225  001050  0EE1               	movlw	low _padServo
  2226  001052  0100               	movlb	0	; () banked
  2227  001054  6FD1               	movwf	setAngle@motor& (0+255),b
  2228  001056  0E00               	movlw	high _padServo
  2229  001058  0100               	movlb	0	; () banked
  2230  00105A  6FD2               	movwf	(setAngle@motor+1)& (0+255),b
  2231  00105C  C0D7  F0D3         	movff	_padAngle_NEUTRAL,setAngle@angle
  2232  001060  C0D8  F0D4         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2233  001064  EC5A  F00F         	call	_setAngle	;wreg free
  2234                           
  2235                           ;main.c: 188: pause("conveyor & \ncylinder on?");
  2236  001068  0E7B               	movlw	low STR_8
  2237  00106A  6E3D               	movwf	pause@message,c
  2238  00106C  0EFE               	movlw	high STR_8
  2239  00106E  6E3E               	movwf	pause@message+1,c
  2240  001070  EC95  F015         	call	_pause	;wreg free
  2241                           
  2242                           ;main.c: 189: setAngle(conveyorServo, 0);
  2243  001074  0E41               	movlw	low _conveyorServo
  2244  001076  0100               	movlb	0	; () banked
  2245  001078  6FD1               	movwf	setAngle@motor& (0+255),b
  2246  00107A  0E00               	movlw	high _conveyorServo
  2247  00107C  0100               	movlb	0	; () banked
  2248  00107E  6FD2               	movwf	(setAngle@motor+1)& (0+255),b
  2249  001080  0E00               	movlw	0
  2250  001082  0100               	movlb	0	; () banked
  2251  001084  6FD4               	movwf	(setAngle@angle+1)& (0+255),b
  2252  001086  0E00               	movlw	0
  2253  001088  6FD3               	movwf	setAngle@angle& (0+255),b
  2254  00108A  EC5A  F00F         	call	_setAngle	;wreg free
  2255                           
  2256                           ;main.c: 190: digitalWrite(cylinderMotor, 1);
  2257  00108E  0EEB               	movlw	low _cylinderMotor
  2258  001090  6E22               	movwf	digitalWrite@pin,c
  2259  001092  0E00               	movlw	high _cylinderMotor
  2260  001094  6E23               	movwf	digitalWrite@pin+1,c
  2261  001096  0E00               	movlw	0
  2262  001098  6E25               	movwf	digitalWrite@val+1,c
  2263  00109A  0E01               	movlw	1
  2264  00109C  6E24               	movwf	digitalWrite@val,c
  2265  00109E  ECC2  F00F         	call	_digitalWrite	;wreg free
  2266  0010A2  0012               	return		;funcret
  2267  0010A4                     __end_of_sortBattery:
  2268                           	opt stack 0
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           postinc0	equ	0xFEE
  2274                           wreg	equ	0xFE8
  2275                           postdec1	equ	0xFE5
  2276                           fsr1l	equ	0xFE1
  2277                           status	equ	0xFD8
  2278                           
  2279 ;; *************** function _pause *****************
  2280 ;; Defined at:
  2281 ;;		line 244 in file "main.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  message         2   60[COMRAM] PTR unsigned char 
  2284 ;;		 -> STR_8(25), STR_7(15), STR_6(17), STR_5(20), 
  2285 ;;		 -> STR_3(14), STR_2(20), 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;		None
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;Total ram usage:        2 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    8
  2304 ;; This function calls:
  2305 ;;		_lcdClear
  2306 ;;		_printf
  2307 ;;		_readKeypad
  2308 ;; This function is called by:
  2309 ;;		_sortBattery
  2310 ;; This function uses a non-reentrant model
  2311 ;;
  2312                           
  2313                           	psect	text2
  2314  002B2A                     __ptext2:
  2315                           	opt stack 0
  2316  002B2A                     _pause:
  2317                           	opt stack 21
  2318                           
  2319                           ;main.c: 245: lcdClear();
  2320                           
  2321                           ;incstack = 0
  2322  002B2A  ECAC  F015         	call	_lcdClear	;wreg free
  2323                           
  2324                           ;main.c: 246: printf(message);
  2325  002B2E  C03D  F0BA         	movff	pause@message,printf@f
  2326  002B32  C03E  F0BB         	movff	pause@message+1,printf@f+1
  2327  002B36  EC09  F000         	call	_printf	;wreg free
  2328                           
  2329                           ;main.c: 247: readKeypad();
  2330  002B3A  EC1E  F015         	call	_readKeypad	;wreg free
  2331  002B3E  0012               	return		;funcret
  2332  002B40                     __end_of_pause:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           tblptrh	equ	0xFF7
  2336                           tblptrl	equ	0xFF6
  2337                           tablat	equ	0xFF5
  2338                           postinc0	equ	0xFEE
  2339                           wreg	equ	0xFE8
  2340                           postdec1	equ	0xFE5
  2341                           fsr1l	equ	0xFE1
  2342                           status	equ	0xFD8
  2343                           
  2344 ;; *************** function _readKeypad *****************
  2345 ;; Defined at:
  2346 ;;		line 36 in file "keypad.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;		None
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  key             1   33[COMRAM] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      unsigned char 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2363 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;Total ram usage:        1 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    3
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_sortBattery
  2371 ;;		_pause
  2372 ;;		_showInterface
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text3
  2377  002A3C                     __ptext3:
  2378                           	opt stack 0
  2379  002A3C                     _readKeypad:
  2380                           	opt stack 26
  2381  002A3C                     l199:
  2382  002A3C  A281               	btfss	3969,1,c	;volatile
  2383  002A3E  D7FE               	goto	l199
  2384                           
  2385                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  2386  002A40  3881               	swapf	3969,w,c	;volatile
  2387  002A42  0B0F               	andlw	15
  2388  002A44  0B0F               	andlw	15
  2389  002A46  6E22               	movwf	readKeypad@key,c
  2390  002A48                     l202:
  2391  002A48  B281               	btfsc	3969,1,c	;volatile
  2392  002A4A  D7FE               	goto	l202
  2393                           
  2394                           ;keypad.c: 40: return keys[key];
  2395  002A4C  5022               	movf	readKeypad@key,w,c
  2396  002A4E  0D01               	mullw	1
  2397  002A50  0E63               	movlw	low _keys
  2398  002A52  24F3               	addwf	prodl,w,c
  2399  002A54  6EF6               	movwf	tblptrl,c
  2400  002A56  0EFE               	movlw	high _keys
  2401  002A58  20F4               	addwfc	prodh,w,c
  2402  002A5A  6EF7               	movwf	tblptrh,c
  2403  002A5C                     	if	0	;There are less than 3 active tblptr bytes
  2404  002A5C                     	endif
  2405  002A5C  0008               	tblrd		*
  2406  002A5E  50F5               	movf	tablat,w,c
  2407  002A60  0012               	return	
  2408  002A62                     __end_of_readKeypad:
  2409                           	opt stack 0
  2410                           tblptru	equ	0xFF8
  2411                           tblptrh	equ	0xFF7
  2412                           tblptrl	equ	0xFF6
  2413                           tablat	equ	0xFF5
  2414                           prodh	equ	0xFF4
  2415                           prodl	equ	0xFF3
  2416                           postinc0	equ	0xFEE
  2417                           wreg	equ	0xFE8
  2418                           postdec1	equ	0xFE5
  2419                           fsr1l	equ	0xFE1
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function _printf *****************
  2423 ;; Defined at:
  2424 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  f               2   58[BANK0 ] PTR const unsigned char 
  2427 ;;		 -> STR_22(17), STR_21(18), STR_20(17), STR_19(18), 
  2428 ;;		 -> STR_18(17), STR_17(19), STR_16(17), STR_15(18), 
  2429 ;;		 -> STR_14(17), STR_13(18), STR_12(17), STR_11(18), 
  2430 ;;		 -> STR_10(9), STR_9(8), STR_8(25), STR_7(15), 
  2431 ;;		 -> STR_6(17), STR_5(20), STR_4(24), STR_3(14), 
  2432 ;;		 -> STR_2(20), STR_1(8), 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;  idx             1    3[BANK1 ] unsigned char 
  2435 ;;  val             4   16[BANK1 ] unsigned long 
  2436 ;;  tmpval          4   12[BANK1 ] struct .
  2437 ;;  fval            3   20[BANK1 ] struct .
  2438 ;;  cp              3    0        PTR const unsigned char 
  2439 ;;  exp             2   10[BANK1 ] int 
  2440 ;;  prec            2    8[BANK1 ] int 
  2441 ;;  flag            2    6[BANK1 ] unsigned short 
  2442 ;;  ap              2    4[BANK1 ] PTR void [1]
  2443 ;;		 -> ?_printf(2), 
  2444 ;;  len             2    0        unsigned int 
  2445 ;;  width           2    0        int 
  2446 ;;  c               1   23[BANK1 ] char 
  2447 ;;  d               1    0        unsigned char 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  2   58[BANK0 ] int 
  2450 ;; Registers used:
  2451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2457 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Totals:         0      13      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;Total ram usage:       37 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    7
  2464 ;; This function calls:
  2465 ;;		___awdiv
  2466 ;;		___ftadd
  2467 ;;		___ftge
  2468 ;;		___ftmul
  2469 ;;		___ftneg
  2470 ;;		___ftsub
  2471 ;;		___fttol
  2472 ;;		___lldiv
  2473 ;;		___llmod
  2474 ;;		___lltoft
  2475 ;;		___wmul
  2476 ;;		__div_to_l_
  2477 ;;		__tdiv_to_l_
  2478 ;;		_fround
  2479 ;;		_putch
  2480 ;;		_scale
  2481 ;; This function is called by:
  2482 ;;		_main
  2483 ;;		_sortBattery
  2484 ;;		_pause
  2485 ;;		_testFrequency
  2486 ;;		_dateTime
  2487 ;;		_mainMenu
  2488 ;;		_runSelect
  2489 ;;		_runMenu
  2490 ;;		_runTime
  2491 ;;		_runStats
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text4
  2496  000012                     __ptext4:
  2497                           	opt stack 0
  2498  000012                     _printf:
  2499                           	opt stack 22
  2500                           
  2501                           ;doprnt.c: 466: va_list ap;
  2502                           ;doprnt.c: 499: signed char c;
  2503                           ;doprnt.c: 501: int width;
  2504                           ;doprnt.c: 504: int prec;
  2505                           ;doprnt.c: 508: unsigned short flag;
  2506                           ;doprnt.c: 515: char d;
  2507                           ;doprnt.c: 516: double fval;
  2508                           ;doprnt.c: 517: int exp;
  2509                           ;doprnt.c: 523: union {
  2510                           ;doprnt.c: 524: unsigned long vd;
  2511                           ;doprnt.c: 525: double integ;
  2512                           ;doprnt.c: 526: } tmpval;
  2513                           ;doprnt.c: 528: unsigned long val;
  2514                           ;doprnt.c: 529: unsigned len;
  2515                           ;doprnt.c: 530: const char * cp;
  2516                           ;doprnt.c: 533: *ap = __va_start();
  2517                           
  2518                           ;incstack = 0
  2519  000012  0EBC               	movlw	low (?_printf+2)
  2520  000014  0101               	movlb	1	; () banked
  2521  000016  6F04               	movwf	printf@ap& (0+255),b
  2522  000018  0E00               	movlw	high (?_printf+2)
  2523  00001A  0101               	movlb	1	; () banked
  2524  00001C  6F05               	movwf	(printf@ap+1)& (0+255),b
  2525                           
  2526                           ;doprnt.c: 536: while(c = *f++) {
  2527  00001E  EF8F  F004         	goto	l5589
  2528  000022                     l5371:
  2529                           
  2530                           ; BSR set to: 1
  2531                           ;doprnt.c: 538: if(c != '%')
  2532  000022  0E25               	movlw	37
  2533  000024  0101               	movlb	1	; () banked
  2534  000026  1917               	xorwf	printf@c& (0+255),w,b
  2535  000028  B4D8               	btfsc	status,2,c
  2536  00002A  D006               	goto	l5375
  2537                           
  2538                           ; BSR set to: 1
  2539                           ;doprnt.c: 540: {
  2540                           ;doprnt.c: 541: (putch(c) );
  2541  00002C  0101               	movlb	1	; () banked
  2542  00002E  5117               	movf	printf@c& (0+255),w,b
  2543  000030  EC56  F015         	call	_putch
  2544                           
  2545                           ;doprnt.c: 542: continue;
  2546  000034  EF8F  F004         	goto	l5589
  2547  000038                     l5375:
  2548                           
  2549                           ;doprnt.c: 543: }
  2550                           ;doprnt.c: 548: flag = 0;
  2551  000038  0E00               	movlw	0
  2552  00003A  0101               	movlb	1	; () banked
  2553  00003C  6F07               	movwf	(printf@flag+1)& (0+255),b
  2554  00003E  0E00               	movlw	0
  2555  000040  6F06               	movwf	printf@flag& (0+255),b
  2556                           
  2557                           ;doprnt.c: 635: switch(c = *f++) {
  2558  000042  D018               	goto	l5389
  2559  000044                     l5377:
  2560                           
  2561                           ; BSR set to: 1
  2562                           ;doprnt.c: 663: flag |= 0x400;
  2563  000044  0101               	movlb	1	; () banked
  2564  000046  8507               	bsf	(printf@flag+1)& (0+255),2,b
  2565                           
  2566                           ; BSR set to: 1
  2567                           ;doprnt.c: 698: case 'i':
  2568                           ;doprnt.c: 699: break;
  2569                           
  2570                           ; BSR set to: 1
  2571                           
  2572                           ;doprnt.c: 697: case 'd':
  2573                           
  2574                           ;doprnt.c: 664: break;
  2575  000048  D034               	goto	l5391
  2576  00004A                     l5379:
  2577                           
  2578                           ; BSR set to: 1
  2579                           ;doprnt.c: 721: flag |= 0x80;
  2580  00004A  0101               	movlb	1	; () banked
  2581  00004C  8F06               	bsf	printf@flag& (0+255),7,b
  2582                           
  2583                           ;doprnt.c: 723: break;
  2584  00004E  D031               	goto	l5391
  2585  000050                     l5381:
  2586                           
  2587                           ; BSR set to: 1
  2588                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2589  000050  C104  FFD9         	movff	printf@ap,fsr2l
  2590  000054  C105  FFDA         	movff	printf@ap+1,fsr2h
  2591  000058  50DF               	movf	indf2,w,c
  2592  00005A  0101               	movlb	1	; () banked
  2593  00005C  6F17               	movwf	printf@c& (0+255),b
  2594                           
  2595                           ; BSR set to: 1
  2596  00005E  0E02               	movlw	2
  2597  000060  0101               	movlb	1	; () banked
  2598  000062  2704               	addwf	printf@ap& (0+255),f,b
  2599  000064  0E00               	movlw	0
  2600  000066  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  2601  000068                     l5385:
  2602                           
  2603                           ; BSR set to: 1
  2604                           ;doprnt.c: 809: (putch(c) );
  2605  000068  0101               	movlb	1	; () banked
  2606  00006A  5117               	movf	printf@c& (0+255),w,b
  2607  00006C  EC56  F015         	call	_putch
  2608                           
  2609                           ;doprnt.c: 810: continue;
  2610  000070  EF8F  F004         	goto	l5589
  2611  000074                     l5389:
  2612  000074  C0BA  FFF6         	movff	printf@f,tblptrl
  2613  000078  C0BB  FFF7         	movff	printf@f+1,tblptrh
  2614  00007C  0100               	movlb	0	; () banked
  2615  00007E  4BBA               	infsnz	printf@f& (0+255),f,b
  2616  000080  2BBB               	incf	(printf@f+1)& (0+255),f,b
  2617  000082                     	if	0	;tblptru may be non-zero
  2618  000082                     	endif
  2619  000082                     	if	0	;tblptru may be non-zero
  2620  000082                     	endif
  2621  000082  0008               	tblrd		*
  2622  000084  CFF5 F117          	movff	tablat,printf@c
  2623  000088  0101               	movlb	1	; () banked
  2624  00008A  5117               	movf	printf@c& (0+255),w,b
  2625                           
  2626                           ; Switch size 1, requested type "space"
  2627                           ; Number of cases is 6, Range of values is 0 to 120
  2628                           ; switch strategies available:
  2629                           ; Name         Instructions Cycles
  2630                           ; simple_byte           19    10 (average)
  2631                           ;	Chosen strategy is simple_byte
  2632  00008C  0A00               	xorlw	0	; case 0
  2633  00008E  B4D8               	btfsc	status,2,c
  2634  000090  0012               	return	
  2635  000092  0A63               	xorlw	99	; case 99
  2636  000094  B4D8               	btfsc	status,2,c
  2637  000096  D7DC               	goto	l5381
  2638  000098  0A07               	xorlw	7	; case 100
  2639  00009A  B4D8               	btfsc	status,2,c
  2640  00009C  D00A               	goto	l5391
  2641  00009E  0A02               	xorlw	2	; case 102
  2642  0000A0  B4D8               	btfsc	status,2,c
  2643  0000A2  D7D0               	goto	l5377
  2644  0000A4  0A0F               	xorlw	15	; case 105
  2645  0000A6  B4D8               	btfsc	status,2,c
  2646  0000A8  D004               	goto	l5391
  2647  0000AA  0A11               	xorlw	17	; case 120
  2648  0000AC  B4D8               	btfsc	status,2,c
  2649  0000AE  D7CD               	goto	l5379
  2650  0000B0  D7DB               	goto	l5385
  2651  0000B2                     l5391:
  2652                           
  2653                           ;doprnt.c: 825: if(flag & (0x700)) {
  2654  0000B2  0E07               	movlw	7
  2655  0000B4  0101               	movlb	1	; () banked
  2656  0000B6  1507               	andwf	(printf@flag+1)& (0+255),w,b
  2657  0000B8  B4D8               	btfsc	status,2,c
  2658  0000BA  D2F4               	goto	l652
  2659                           
  2660                           ; BSR set to: 1
  2661                           ;doprnt.c: 829: prec = 6;
  2662  0000BC  0E00               	movlw	0
  2663  0000BE  0101               	movlb	1	; () banked
  2664  0000C0  6F09               	movwf	(printf@prec+1)& (0+255),b
  2665  0000C2  0E06               	movlw	6
  2666  0000C4  6F08               	movwf	printf@prec& (0+255),b
  2667                           
  2668                           ; BSR set to: 1
  2669                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2670  0000C6  C104  FFD9         	movff	printf@ap,fsr2l
  2671  0000CA  C105  FFDA         	movff	printf@ap+1,fsr2h
  2672  0000CE  CFDE F114          	movff	postinc2,printf@fval
  2673  0000D2  CFDE F115          	movff	postinc2,printf@fval+1
  2674  0000D6  CFDD F116          	movff	postdec2,printf@fval+2
  2675                           
  2676                           ; BSR set to: 1
  2677  0000DA  0E03               	movlw	3
  2678  0000DC  0101               	movlb	1	; () banked
  2679  0000DE  2704               	addwf	printf@ap& (0+255),f,b
  2680  0000E0  0E00               	movlw	0
  2681  0000E2  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  2682                           
  2683                           ; BSR set to: 1
  2684                           ;doprnt.c: 831: if(fval < 0.0) {
  2685  0000E4  0101               	movlb	1	; () banked
  2686  0000E6  AF16               	btfss	(printf@fval+2)& (0+255),7,b
  2687  0000E8  D011               	goto	l5405
  2688                           
  2689                           ; BSR set to: 1
  2690                           ;doprnt.c: 832: fval = -fval;
  2691  0000EA  C114  F022         	movff	printf@fval,___ftneg@f1
  2692  0000EE  C115  F023         	movff	printf@fval+1,___ftneg@f1+1
  2693  0000F2  C116  F024         	movff	printf@fval+2,___ftneg@f1+2
  2694  0000F6  EC44  F015         	call	___ftneg	;wreg free
  2695  0000FA  C022  F114         	movff	?___ftneg,printf@fval
  2696  0000FE  C023  F115         	movff	?___ftneg+1,printf@fval+1
  2697  000102  C024  F116         	movff	?___ftneg+2,printf@fval+2
  2698                           
  2699                           ;doprnt.c: 833: flag |= 0x03;
  2700  000106  0E03               	movlw	3
  2701  000108  0101               	movlb	1	; () banked
  2702  00010A  1306               	iorwf	printf@flag& (0+255),f,b
  2703  00010C                     l5405:
  2704                           
  2705                           ; BSR set to: 1
  2706                           ;doprnt.c: 834: }
  2707                           ;doprnt.c: 835: exp = 0;
  2708  00010C  0E00               	movlw	0
  2709  00010E  0101               	movlb	1	; () banked
  2710  000110  6F0B               	movwf	(printf@exp+1)& (0+255),b
  2711  000112  0E00               	movlw	0
  2712  000114  6F0A               	movwf	printf@exp& (0+255),b
  2713                           
  2714                           ; BSR set to: 1
  2715                           ;doprnt.c: 836: if( fval!=0) {
  2716  000116  0101               	movlb	1	; () banked
  2717  000118  5114               	movf	printf@fval& (0+255),w,b
  2718  00011A  0101               	movlb	1	; () banked
  2719  00011C  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  2720  00011E  0101               	movlb	1	; () banked
  2721  000120  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  2722  000122  B4D8               	btfsc	status,2,c
  2723  000124  D091               	goto	l5433
  2724                           
  2725                           ; BSR set to: 1
  2726                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2727  000126  0E82               	movlw	130
  2728  000128  0100               	movlb	0	; () banked
  2729  00012A  6FC1               	movwf	??_printf& (0+255),b
  2730  00012C  0EFF               	movlw	255
  2731  00012E  0100               	movlb	0	; () banked
  2732  000130  6FC2               	movwf	(??_printf+1)& (0+255),b
  2733  000132  C114  F0C3         	movff	printf@fval,??_printf+2
  2734  000136  C115  F0C4         	movff	printf@fval+1,??_printf+3
  2735  00013A  C116  F0C5         	movff	printf@fval+2,??_printf+4
  2736  00013E  C117  F0C6         	movff	printf@fval+3,??_printf+5
  2737  000142  0E10               	movlw	16
  2738  000144  D006               	goto	u5170
  2739  000146                     u5175:
  2740  000146  0100               	movlb	0	; () banked
  2741  000148  90D8               	bcf	status,0,c
  2742  00014A  33C6               	rrcf	(??_printf+5)& (0+255),f,b
  2743  00014C  33C5               	rrcf	(??_printf+4)& (0+255),f,b
  2744  00014E  33C4               	rrcf	(??_printf+3)& (0+255),f,b
  2745  000150  33C3               	rrcf	(??_printf+2)& (0+255),f,b
  2746  000152                     u5170:
  2747  000152  2EE8               	decfsz	wreg,f,c
  2748  000154  D7F8               	goto	u5175
  2749  000156  0100               	movlb	0	; () banked
  2750  000158  51C3               	movf	(??_printf+2)& (0+255),w,b
  2751  00015A  0100               	movlb	0	; () banked
  2752  00015C  25C1               	addwf	??_printf& (0+255),w,b
  2753  00015E  0101               	movlb	1	; () banked
  2754  000160  6F0A               	movwf	printf@exp& (0+255),b
  2755  000162  0E00               	movlw	0
  2756  000164  0100               	movlb	0	; () banked
  2757  000166  21C2               	addwfc	(??_printf+1)& (0+255),w,b
  2758  000168  0101               	movlb	1	; () banked
  2759  00016A  6F0B               	movwf	(printf@exp+1)& (0+255),b
  2760                           
  2761                           ; BSR set to: 1
  2762                           ;doprnt.c: 838: exp--;
  2763  00016C  0101               	movlb	1	; () banked
  2764  00016E  070A               	decf	printf@exp& (0+255),f,b
  2765  000170  A0D8               	btfss	status,0,c
  2766  000172  070B               	decf	(printf@exp+1)& (0+255),f,b
  2767                           
  2768                           ; BSR set to: 1
  2769                           ;doprnt.c: 839: exp *= 3;
  2770  000174  C10A  F030         	movff	printf@exp,___wmul@multiplier
  2771  000178  C10B  F031         	movff	printf@exp+1,___wmul@multiplier+1
  2772  00017C  0E00               	movlw	0
  2773  00017E  6E33               	movwf	___wmul@multiplicand+1,c
  2774  000180  0E03               	movlw	3
  2775  000182  6E32               	movwf	___wmul@multiplicand,c
  2776  000184  EC31  F015         	call	___wmul	;wreg free
  2777  000188  C030  F10A         	movff	?___wmul,printf@exp
  2778  00018C  C031  F10B         	movff	?___wmul+1,printf@exp+1
  2779                           
  2780                           ;doprnt.c: 840: exp /= 10;
  2781  000190  C10A  F028         	movff	printf@exp,___awdiv@dividend
  2782  000194  C10B  F029         	movff	printf@exp+1,___awdiv@dividend+1
  2783  000198  0E00               	movlw	0
  2784  00019A  6E2B               	movwf	___awdiv@divisor+1,c
  2785  00019C  0E0A               	movlw	10
  2786  00019E  6E2A               	movwf	___awdiv@divisor,c
  2787  0001A0  EC4B  F012         	call	___awdiv	;wreg free
  2788  0001A4  C028  F10A         	movff	?___awdiv,printf@exp
  2789  0001A8  C029  F10B         	movff	?___awdiv+1,printf@exp+1
  2790                           
  2791                           ;doprnt.c: 841: if(exp < 0)
  2792  0001AC  0101               	movlb	1	; () banked
  2793  0001AE  AF0B               	btfss	(printf@exp+1)& (0+255),7,b
  2794  0001B0  D004               	goto	l5421
  2795                           
  2796                           ; BSR set to: 1
  2797                           ;doprnt.c: 842: exp--;
  2798  0001B2  0101               	movlb	1	; () banked
  2799  0001B4  070A               	decf	printf@exp& (0+255),f,b
  2800  0001B6  A0D8               	btfss	status,0,c
  2801  0001B8  070B               	decf	(printf@exp+1)& (0+255),f,b
  2802  0001BA                     l5421:
  2803                           
  2804                           ; BSR set to: 1
  2805                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2806  0001BA  0101               	movlb	1	; () banked
  2807  0001BC  510A               	movf	printf@exp& (0+255),w,b
  2808  0001BE  0800               	sublw	0
  2809  0001C0  EC9F  F004         	call	_scale
  2810  0001C4  C095  F10C         	movff	?_scale,printf@tmpval
  2811  0001C8  C096  F10D         	movff	?_scale+1,printf@tmpval+1
  2812  0001CC  C097  F10E         	movff	?_scale+2,printf@tmpval+2
  2813                           
  2814                           ;doprnt.c: 847: tmpval.integ *= fval;
  2815  0001D0  C10C  F086         	movff	printf@tmpval,___ftmul@f1
  2816  0001D4  C10D  F087         	movff	printf@tmpval+1,___ftmul@f1+1
  2817  0001D8  C10E  F088         	movff	printf@tmpval+2,___ftmul@f1+2
  2818  0001DC  C114  F089         	movff	printf@fval,___ftmul@f2
  2819  0001E0  C115  F08A         	movff	printf@fval+1,___ftmul@f2+1
  2820  0001E4  C116  F08B         	movff	printf@fval+2,___ftmul@f2+2
  2821  0001E8  ECB6  F00A         	call	___ftmul	;wreg free
  2822  0001EC  C086  F10C         	movff	?___ftmul,printf@tmpval
  2823  0001F0  C087  F10D         	movff	?___ftmul+1,printf@tmpval+1
  2824  0001F4  C088  F10E         	movff	?___ftmul+2,printf@tmpval+2
  2825                           
  2826                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2827  0001F8  C10C  F022         	movff	printf@tmpval,___ftge@ff1
  2828  0001FC  C10D  F023         	movff	printf@tmpval+1,___ftge@ff1+1
  2829  000200  C10E  F024         	movff	printf@tmpval+2,___ftge@ff1+2
  2830  000204  0E00               	movlw	0
  2831  000206  6E25               	movwf	___ftge@ff2,c
  2832  000208  0E80               	movlw	128
  2833  00020A  6E26               	movwf	___ftge@ff2+1,c
  2834  00020C  0E3F               	movlw	63
  2835  00020E  6E27               	movwf	___ftge@ff2+2,c
  2836  000210  ECBF  F011         	call	___ftge	;wreg free
  2837  000214  B0D8               	btfsc	status,0,c
  2838  000216  D005               	goto	l5429
  2839                           
  2840                           ;doprnt.c: 849: exp--;
  2841  000218  0101               	movlb	1	; () banked
  2842  00021A  070A               	decf	printf@exp& (0+255),f,b
  2843  00021C  A0D8               	btfss	status,0,c
  2844  00021E  070B               	decf	(printf@exp+1)& (0+255),f,b
  2845  000220  D013               	goto	l5433
  2846  000222                     l5429:
  2847                           
  2848                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2849  000222  C10C  F022         	movff	printf@tmpval,___ftge@ff1
  2850  000226  C10D  F023         	movff	printf@tmpval+1,___ftge@ff1+1
  2851  00022A  C10E  F024         	movff	printf@tmpval+2,___ftge@ff1+2
  2852  00022E  0E00               	movlw	0
  2853  000230  6E25               	movwf	___ftge@ff2,c
  2854  000232  0E20               	movlw	32
  2855  000234  6E26               	movwf	___ftge@ff2+1,c
  2856  000236  0E41               	movlw	65
  2857  000238  6E27               	movwf	___ftge@ff2+2,c
  2858  00023A  ECBF  F011         	call	___ftge	;wreg free
  2859  00023E  A0D8               	btfss	status,0,c
  2860  000240  D003               	goto	l5433
  2861                           
  2862                           ;doprnt.c: 851: exp++;
  2863  000242  0101               	movlb	1	; () banked
  2864  000244  4B0A               	infsnz	printf@exp& (0+255),f,b
  2865  000246  2B0B               	incf	(printf@exp+1)& (0+255),f,b
  2866  000248                     l5433:
  2867                           
  2868                           ;doprnt.c: 852: }
  2869                           ;doprnt.c: 1112: if(prec <= 12)
  2870  000248  0101               	movlb	1	; () banked
  2871  00024A  BF09               	btfsc	(printf@prec+1)& (0+255),7,b
  2872  00024C  D008               	goto	l5435
  2873  00024E  0101               	movlb	1	; () banked
  2874  000250  5109               	movf	(printf@prec+1)& (0+255),w,b
  2875  000252  E11D               	bnz	l5437
  2876  000254  0E0D               	movlw	13
  2877  000256  0101               	movlb	1	; () banked
  2878  000258  5D08               	subwf	printf@prec& (0+255),w,b
  2879  00025A  B0D8               	btfsc	status,0,c
  2880  00025C  D018               	goto	l5437
  2881  00025E                     l5435:
  2882                           
  2883                           ; BSR set to: 1
  2884                           ;doprnt.c: 1113: fval += fround(prec);
  2885  00025E  C114  F09F         	movff	printf@fval,___ftadd@f1
  2886  000262  C115  F0A0         	movff	printf@fval+1,___ftadd@f1+1
  2887  000266  C116  F0A1         	movff	printf@fval+2,___ftadd@f1+2
  2888  00026A  0101               	movlb	1	; () banked
  2889  00026C  5108               	movf	printf@prec& (0+255),w,b
  2890  00026E  EC86  F009         	call	_fround
  2891  000272  C095  F0A2         	movff	?_fround,___ftadd@f2
  2892  000276  C096  F0A3         	movff	?_fround+1,___ftadd@f2+1
  2893  00027A  C097  F0A4         	movff	?_fround+2,___ftadd@f2+2
  2894  00027E  EC52  F008         	call	___ftadd	;wreg free
  2895  000282  C09F  F114         	movff	?___ftadd,printf@fval
  2896  000286  C0A0  F115         	movff	?___ftadd+1,printf@fval+1
  2897  00028A  C0A1  F116         	movff	?___ftadd+2,printf@fval+2
  2898  00028E                     l5437:
  2899                           
  2900                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2901  00028E  0101               	movlb	1	; () banked
  2902  000290  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  2903  000292  D008               	goto	l5439
  2904  000294  0101               	movlb	1	; () banked
  2905  000296  510B               	movf	(printf@exp+1)& (0+255),w,b
  2906  000298  E12A               	bnz	l5445
  2907  00029A  0E0A               	movlw	10
  2908  00029C  0101               	movlb	1	; () banked
  2909  00029E  5D0A               	subwf	printf@exp& (0+255),w,b
  2910  0002A0  B0D8               	btfsc	status,0,c
  2911  0002A2  D025               	goto	l5445
  2912  0002A4                     l5439:
  2913                           
  2914                           ; BSR set to: 1
  2915  0002A4  0101               	movlb	1	; () banked
  2916  0002A6  5114               	movf	printf@fval& (0+255),w,b
  2917  0002A8  0101               	movlb	1	; () banked
  2918  0002AA  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  2919  0002AC  0101               	movlb	1	; () banked
  2920  0002AE  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  2921  0002B0  B4D8               	btfsc	status,2,c
  2922  0002B2  D05F               	goto	l5459
  2923                           
  2924                           ; BSR set to: 1
  2925  0002B4  C114  F0AB         	movff	printf@fval,___fttol@f1
  2926  0002B8  C115  F0AC         	movff	printf@fval+1,___fttol@f1+1
  2927  0002BC  C116  F0AD         	movff	printf@fval+2,___fttol@f1+2
  2928  0002C0  EC11  F00C         	call	___fttol	;wreg free
  2929  0002C4  0100               	movlb	0	; () banked
  2930  0002C6  51AB               	movf	?___fttol& (0+255),w,b
  2931  0002C8  0100               	movlb	0	; () banked
  2932  0002CA  11AC               	iorwf	(?___fttol+1)& (0+255),w,b
  2933  0002CC  0100               	movlb	0	; () banked
  2934  0002CE  11AD               	iorwf	(?___fttol+2)& (0+255),w,b
  2935  0002D0  0100               	movlb	0	; () banked
  2936  0002D2  11AE               	iorwf	(?___fttol+3)& (0+255),w,b
  2937  0002D4  A4D8               	btfss	status,2,c
  2938  0002D6  D04D               	goto	l5459
  2939                           
  2940                           ; BSR set to: 0
  2941  0002D8  0101               	movlb	1	; () banked
  2942  0002DA  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  2943  0002DC  D04A               	goto	l5459
  2944  0002DE  0101               	movlb	1	; () banked
  2945  0002E0  510B               	movf	(printf@exp+1)& (0+255),w,b
  2946  0002E2  E105               	bnz	l5445
  2947  0002E4  0E02               	movlw	2
  2948  0002E6  0101               	movlb	1	; () banked
  2949  0002E8  5D0A               	subwf	printf@exp& (0+255),w,b
  2950  0002EA  A0D8               	btfss	status,0,c
  2951  0002EC  D042               	goto	l5459
  2952  0002EE                     l5445:
  2953                           
  2954                           ; BSR set to: 1
  2955                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2956  0002EE  C10C  F022         	movff	printf@tmpval,___ftge@ff1
  2957  0002F2  C10D  F023         	movff	printf@tmpval+1,___ftge@ff1+1
  2958  0002F6  C10E  F024         	movff	printf@tmpval+2,___ftge@ff1+2
  2959  0002FA  0E70               	movlw	112
  2960  0002FC  6E25               	movwf	___ftge@ff2,c
  2961  0002FE  0E89               	movlw	137
  2962  000300  6E26               	movwf	___ftge@ff2+1,c
  2963  000302  0E40               	movlw	64
  2964  000304  6E27               	movwf	___ftge@ff2+2,c
  2965  000306  ECBF  F011         	call	___ftge	;wreg free
  2966  00030A  B0D8               	btfsc	status,0,c
  2967  00030C  D003               	goto	l5449
  2968                           
  2969                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2970  00030E  0101               	movlb	1	; () banked
  2971  000310  0EF7               	movlw	247
  2972  000312  D002               	goto	L1
  2973  000314                     l5449:
  2974                           
  2975                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2976  000314  0101               	movlb	1	; () banked
  2977  000316  0EF8               	movlw	248
  2978  000318                     L1:
  2979  000318  270A               	addwf	printf@exp& (0+255),f,b
  2980  00031A  0EFF               	movlw	255
  2981  00031C  230B               	addwfc	(printf@exp+1)& (0+255),f,b
  2982                           
  2983                           ; BSR set to: 1
  2984                           ;doprnt.c: 1124: }
  2985                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2986                           
  2987                           ; BSR set to: 1
  2988  00031E  0101               	movlb	1	; () banked
  2989  000320  510A               	movf	printf@exp& (0+255),w,b
  2990  000322  EC9F  F004         	call	_scale
  2991  000326  C095  F10C         	movff	?_scale,printf@tmpval
  2992  00032A  C096  F10D         	movff	?_scale+1,printf@tmpval+1
  2993  00032E  C097  F10E         	movff	?_scale+2,printf@tmpval+2
  2994                           
  2995                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2996  000332  C114  F022         	movff	printf@fval,__tdiv_to_l_@f1
  2997  000336  C115  F023         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2998  00033A  C116  F024         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2999  00033E  C10C  F025         	movff	printf@tmpval,__tdiv_to_l_@f2
  3000  000342  C10D  F026         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3001  000346  C10E  F027         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3002  00034A  ECB3  F00C         	call	__tdiv_to_l_	;wreg free
  3003  00034E  C022  F110         	movff	?__tdiv_to_l_,printf@val
  3004  000352  C023  F111         	movff	?__tdiv_to_l_+1,printf@val+1
  3005  000356  C024  F112         	movff	?__tdiv_to_l_+2,printf@val+2
  3006  00035A  C025  F113         	movff	?__tdiv_to_l_+3,printf@val+3
  3007                           
  3008                           ;doprnt.c: 1129: fval = 0.0;
  3009  00035E  0E00               	movlw	0
  3010  000360  0101               	movlb	1	; () banked
  3011  000362  6F14               	movwf	printf@fval& (0+255),b
  3012  000364  0E00               	movlw	0
  3013  000366  0101               	movlb	1	; () banked
  3014  000368  6F15               	movwf	(printf@fval+1)& (0+255),b
  3015  00036A  0E00               	movlw	0
  3016  00036C  0101               	movlb	1	; () banked
  3017  00036E  6F16               	movwf	(printf@fval+2)& (0+255),b
  3018                           
  3019                           ;doprnt.c: 1130: } else {
  3020  000370  D033               	goto	l5463
  3021  000372                     l5459:
  3022                           
  3023                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3024  000372  C114  F0AB         	movff	printf@fval,___fttol@f1
  3025  000376  C115  F0AC         	movff	printf@fval+1,___fttol@f1+1
  3026  00037A  C116  F0AD         	movff	printf@fval+2,___fttol@f1+2
  3027  00037E  EC11  F00C         	call	___fttol	;wreg free
  3028  000382  C0AB  F110         	movff	?___fttol,printf@val
  3029  000386  C0AC  F111         	movff	?___fttol+1,printf@val+1
  3030  00038A  C0AD  F112         	movff	?___fttol+2,printf@val+2
  3031  00038E  C0AE  F113         	movff	?___fttol+3,printf@val+3
  3032                           
  3033                           ;doprnt.c: 1132: fval -= (double)val;
  3034  000392  C114  F0AB         	movff	printf@fval,___ftsub@f1
  3035  000396  C115  F0AC         	movff	printf@fval+1,___ftsub@f1+1
  3036  00039A  C116  F0AD         	movff	printf@fval+2,___ftsub@f1+2
  3037  00039E  C110  F02A         	movff	printf@val,___lltoft@c
  3038  0003A2  C111  F02B         	movff	printf@val+1,___lltoft@c+1
  3039  0003A6  C112  F02C         	movff	printf@val+2,___lltoft@c+2
  3040  0003AA  C113  F02D         	movff	printf@val+3,___lltoft@c+3
  3041  0003AE  ECE0  F013         	call	___lltoft	;wreg free
  3042  0003B2  C02A  F0AE         	movff	?___lltoft,___ftsub@f2
  3043  0003B6  C02B  F0AF         	movff	?___lltoft+1,___ftsub@f2+1
  3044  0003BA  C02C  F0B0         	movff	?___lltoft+2,___ftsub@f2+2
  3045  0003BE  EC0E  F014         	call	___ftsub	;wreg free
  3046  0003C2  C0AB  F114         	movff	?___ftsub,printf@fval
  3047  0003C6  C0AC  F115         	movff	?___ftsub+1,printf@fval+1
  3048  0003CA  C0AD  F116         	movff	?___ftsub+2,printf@fval+2
  3049                           
  3050                           ;doprnt.c: 1133: exp = 0;
  3051  0003CE  0E00               	movlw	0
  3052  0003D0  0101               	movlb	1	; () banked
  3053  0003D2  6F0B               	movwf	(printf@exp+1)& (0+255),b
  3054  0003D4  0E00               	movlw	0
  3055  0003D6  6F0A               	movwf	printf@exp& (0+255),b
  3056  0003D8                     l5463:
  3057                           
  3058                           ; BSR set to: 1
  3059                           ;doprnt.c: 1134: }
  3060                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3061  0003D8  0E01               	movlw	1
  3062  0003DA  0101               	movlb	1	; () banked
  3063  0003DC  6F17               	movwf	printf@c& (0+255),b
  3064  0003DE                     l5465:
  3065                           
  3066                           ; BSR set to: 1
  3067  0003DE  0E0A               	movlw	10
  3068  0003E0  0101               	movlb	1	; () banked
  3069  0003E2  1917               	xorwf	printf@c& (0+255),w,b
  3070  0003E4  B4D8               	btfsc	status,2,c
  3071  0003E6  D01E               	goto	l5477
  3072                           
  3073                           ; BSR set to: 1
  3074                           ;doprnt.c: 1137: if(val < dpowers[c])
  3075                           
  3076                           ; BSR set to: 1
  3077                           
  3078                           ; BSR set to: 1
  3079  0003E8  0101               	movlb	1	; () banked
  3080  0003EA  5117               	movf	printf@c& (0+255),w,b
  3081  0003EC  0D04               	mullw	4
  3082  0003EE  0ECD               	movlw	low _dpowers
  3083  0003F0  24F3               	addwf	prodl,w,c
  3084  0003F2  6EF6               	movwf	tblptrl,c
  3085  0003F4  0EFD               	movlw	high _dpowers
  3086  0003F6  20F4               	addwfc	prodh,w,c
  3087  0003F8  6EF7               	movwf	tblptrh,c
  3088  0003FA                     	if	0	;There are less than 3 active tblptr bytes
  3089  0003FA                     	endif
  3090  0003FA  0009               	tblrd		*+
  3091  0003FC  50F5               	movf	tablat,w,c
  3092  0003FE  0101               	movlb	1	; () banked
  3093  000400  5D10               	subwf	printf@val& (0+255),w,b
  3094  000402  0009               	tblrd		*+
  3095  000404  50F5               	movf	tablat,w,c
  3096  000406  0101               	movlb	1	; () banked
  3097  000408  5911               	subwfb	(printf@val+1)& (0+255),w,b
  3098  00040A  0009               	tblrd		*+
  3099  00040C  50F5               	movf	tablat,w,c
  3100  00040E  0101               	movlb	1	; () banked
  3101  000410  5912               	subwfb	(printf@val+2)& (0+255),w,b
  3102  000412  0009               	tblrd		*+
  3103  000414  50F5               	movf	tablat,w,c
  3104  000416  0101               	movlb	1	; () banked
  3105  000418  5913               	subwfb	(printf@val+3)& (0+255),w,b
  3106  00041A  A0D8               	btfss	status,0,c
  3107  00041C  D003               	goto	l5477
  3108                           
  3109                           ; BSR set to: 1
  3110                           
  3111                           ; BSR set to: 1
  3112                           
  3113                           ; BSR set to: 1
  3114                           ;doprnt.c: 1138: break;
  3115  00041E  0101               	movlb	1	; () banked
  3116  000420  2B17               	incf	printf@c& (0+255),f,b
  3117  000422  D7DD               	goto	l5465
  3118  000424                     l5477:
  3119                           
  3120                           ; BSR set to: 1
  3121                           ;doprnt.c: 1175: {
  3122                           ;doprnt.c: 1188: if(flag & 0x03)
  3123  000424  0E03               	movlw	3
  3124  000426  0101               	movlb	1	; () banked
  3125  000428  1506               	andwf	printf@flag& (0+255),w,b
  3126  00042A  0100               	movlb	0	; () banked
  3127  00042C  6FC1               	movwf	??_printf& (0+255),b
  3128  00042E  0E00               	movlw	0
  3129  000430  0101               	movlb	1	; () banked
  3130  000432  1507               	andwf	(printf@flag+1)& (0+255),w,b
  3131  000434  0100               	movlb	0	; () banked
  3132  000436  6FC2               	movwf	(??_printf+1)& (0+255),b
  3133  000438  0100               	movlb	0	; () banked
  3134  00043A  51C1               	movf	??_printf& (0+255),w,b
  3135  00043C  0100               	movlb	0	; () banked
  3136  00043E  11C2               	iorwf	(??_printf+1)& (0+255),w,b
  3137  000440  B4D8               	btfsc	status,2,c
  3138  000442  D04A               	goto	l5487
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;doprnt.c: 1190: (putch('-') );
  3142  000444  0E2D               	movlw	45
  3143  000446  EC56  F015         	call	_putch
  3144                           
  3145                           ;doprnt.c: 1195: }
  3146                           ;doprnt.c: 1196: while(c--) {
  3147  00044A  D046               	goto	l5487
  3148  00044C                     l5481:
  3149                           
  3150                           ;doprnt.c: 1200: {
  3151                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3152  00044C  C110  F022         	movff	printf@val,___lldiv@dividend
  3153  000450  C111  F023         	movff	printf@val+1,___lldiv@dividend+1
  3154  000454  C112  F024         	movff	printf@val+2,___lldiv@dividend+2
  3155  000458  C113  F025         	movff	printf@val+3,___lldiv@dividend+3
  3156  00045C  0101               	movlb	1	; () banked
  3157  00045E  5117               	movf	printf@c& (0+255),w,b
  3158  000460  0D04               	mullw	4
  3159  000462  0ECD               	movlw	low _dpowers
  3160  000464  24F3               	addwf	prodl,w,c
  3161  000466  6EF6               	movwf	tblptrl,c
  3162  000468  0EFD               	movlw	high _dpowers
  3163  00046A  20F4               	addwfc	prodh,w,c
  3164  00046C  6EF7               	movwf	tblptrh,c
  3165  00046E                     	if	0	;There are less than 3 active tblptr bytes
  3166  00046E                     	endif
  3167  00046E  0009               	tblrd		*+
  3168  000470  CFF5 F026          	movff	tablat,___lldiv@divisor
  3169  000474  0009               	tblrd		*+
  3170  000476  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  3171  00047A  0009               	tblrd		*+
  3172  00047C  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  3173  000480  000A               	tblrd		*-
  3174  000482  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  3175  000486  EC8D  F012         	call	___lldiv	;wreg free
  3176  00048A  C022  F10C         	movff	?___lldiv,printf@tmpval
  3177  00048E  C023  F10D         	movff	?___lldiv+1,printf@tmpval+1
  3178  000492  C024  F10E         	movff	?___lldiv+2,printf@tmpval+2
  3179  000496  C025  F10F         	movff	?___lldiv+3,printf@tmpval+3
  3180                           
  3181                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3182  00049A  C10C  F02F         	movff	printf@tmpval,___llmod@dividend
  3183  00049E  C10D  F030         	movff	printf@tmpval+1,___llmod@dividend+1
  3184  0004A2  C10E  F031         	movff	printf@tmpval+2,___llmod@dividend+2
  3185  0004A6  C10F  F032         	movff	printf@tmpval+3,___llmod@dividend+3
  3186  0004AA  0E0A               	movlw	10
  3187  0004AC  6E33               	movwf	___llmod@divisor,c
  3188  0004AE  0E00               	movlw	0
  3189  0004B0  6E34               	movwf	___llmod@divisor+1,c
  3190  0004B2  0E00               	movlw	0
  3191  0004B4  6E35               	movwf	___llmod@divisor+2,c
  3192  0004B6  0E00               	movlw	0
  3193  0004B8  6E36               	movwf	___llmod@divisor+3,c
  3194  0004BA  EC7A  F013         	call	___llmod	;wreg free
  3195  0004BE  C02F  F10C         	movff	?___llmod,printf@tmpval
  3196  0004C2  C030  F10D         	movff	?___llmod+1,printf@tmpval+1
  3197  0004C6  C031  F10E         	movff	?___llmod+2,printf@tmpval+2
  3198  0004CA  C032  F10F         	movff	?___llmod+3,printf@tmpval+3
  3199                           
  3200                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3201  0004CE  0101               	movlb	1	; () banked
  3202  0004D0  510C               	movf	printf@tmpval& (0+255),w,b
  3203  0004D2  0F30               	addlw	48
  3204  0004D4  EC56  F015         	call	_putch
  3205  0004D8                     l5487:
  3206  0004D8  0101               	movlb	1	; () banked
  3207  0004DA  0717               	decf	printf@c& (0+255),f,b
  3208  0004DC  0101               	movlb	1	; () banked
  3209  0004DE  2917               	incf	printf@c& (0+255),w,b
  3210  0004E0  B4D8               	btfsc	status,2,c
  3211  0004E2  D008               	goto	l5493
  3212  0004E4  D7B3               	goto	l5481
  3213  0004E6                     l5489:
  3214                           
  3215                           ; BSR set to: 1
  3216                           ;doprnt.c: 1208: (putch('0') );
  3217  0004E6  0E30               	movlw	48
  3218  0004E8  EC56  F015         	call	_putch
  3219                           
  3220                           ;doprnt.c: 1209: exp--;
  3221  0004EC  0101               	movlb	1	; () banked
  3222  0004EE  070A               	decf	printf@exp& (0+255),f,b
  3223  0004F0  A0D8               	btfss	status,0,c
  3224  0004F2  070B               	decf	(printf@exp+1)& (0+255),f,b
  3225  0004F4                     l5493:
  3226                           
  3227                           ; BSR set to: 1
  3228  0004F4  0101               	movlb	1	; () banked
  3229  0004F6  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  3230  0004F8  D007               	goto	l5495
  3231  0004FA  0101               	movlb	1	; () banked
  3232  0004FC  510B               	movf	(printf@exp+1)& (0+255),w,b
  3233  0004FE  E1F3               	bnz	l5489
  3234  000500  0101               	movlb	1	; () banked
  3235  000502  050A               	decf	printf@exp& (0+255),w,b
  3236  000504  B0D8               	btfsc	status,0,c
  3237  000506  D7EF               	goto	l5489
  3238  000508                     l5495:
  3239                           
  3240                           ; BSR set to: 1
  3241                           ;doprnt.c: 1210: }
  3242                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3243  000508  0101               	movlb	1	; () banked
  3244  00050A  BF09               	btfsc	(printf@prec+1)& (0+255),7,b
  3245  00050C  D00C               	goto	l680
  3246  00050E  0101               	movlb	1	; () banked
  3247  000510  5109               	movf	(printf@prec+1)& (0+255),w,b
  3248  000512  E105               	bnz	u5330
  3249  000514  0E09               	movlw	9
  3250  000516  0101               	movlb	1	; () banked
  3251  000518  5D08               	subwf	printf@prec& (0+255),w,b
  3252  00051A  A0D8               	btfss	status,0,c
  3253  00051C  D004               	goto	l680
  3254  00051E                     u5330:
  3255                           
  3256                           ; BSR set to: 1
  3257                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3258  00051E  0E08               	movlw	8
  3259  000520  0101               	movlb	1	; () banked
  3260  000522  6F17               	movwf	printf@c& (0+255),b
  3261  000524  D002               	goto	l5499
  3262  000526                     l680:
  3263                           
  3264                           ; BSR set to: 1
  3265                           ;doprnt.c: 1213: else
  3266                           ;doprnt.c: 1214: c = prec;
  3267  000526  C108  F117         	movff	printf@prec,printf@c
  3268  00052A                     l5499:
  3269                           
  3270                           ; BSR set to: 1
  3271                           ;doprnt.c: 1215: prec -= c;
  3272  00052A  0101               	movlb	1	; () banked
  3273  00052C  5117               	movf	printf@c& (0+255),w,b
  3274  00052E  0101               	movlb	1	; () banked
  3275  000530  5F08               	subwf	printf@prec& (0+255),f,b
  3276  000532  0E00               	movlw	0
  3277  000534  0101               	movlb	1	; () banked
  3278  000536  BF17               	btfsc	printf@c& (0+255),7,b
  3279  000538  0EFF               	movlw	255
  3280  00053A  0101               	movlb	1	; () banked
  3281  00053C  5B09               	subwfb	(printf@prec+1)& (0+255),f,b
  3282                           
  3283                           ; BSR set to: 1
  3284                           ;doprnt.c: 1219: if(c)
  3285  00053E  0101               	movlb	1	; () banked
  3286  000540  5117               	movf	printf@c& (0+255),w,b
  3287  000542  0101               	movlb	1	; () banked
  3288  000544  B4D8               	btfsc	status,2,c
  3289  000546  D003               	goto	l5505
  3290                           
  3291                           ; BSR set to: 1
  3292                           ;doprnt.c: 1221: (putch('.') );
  3293  000548  0E2E               	movlw	46
  3294  00054A  EC56  F015         	call	_putch
  3295  00054E                     l5505:
  3296                           
  3297                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3298  00054E  0101               	movlb	1	; () banked
  3299  000550  5117               	movf	printf@c& (0+255),w,b
  3300  000552  EC9F  F004         	call	_scale
  3301  000556  C095  F100         	movff	?_scale,_printf$1320
  3302  00055A  C096  F101         	movff	?_scale+1,_printf$1320+1
  3303  00055E  C097  F102         	movff	?_scale+2,_printf$1320+2
  3304                           
  3305                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3306  000562  C114  F089         	movff	printf@fval,___ftmul@f2
  3307  000566  C115  F08A         	movff	printf@fval+1,___ftmul@f2+1
  3308  00056A  C116  F08B         	movff	printf@fval+2,___ftmul@f2+2
  3309  00056E  C100  F086         	movff	_printf$1320,___ftmul@f1
  3310  000572  C101  F087         	movff	_printf$1320+1,___ftmul@f1+1
  3311  000576  C102  F088         	movff	_printf$1320+2,___ftmul@f1+2
  3312  00057A  ECB6  F00A         	call	___ftmul	;wreg free
  3313  00057E  C086  F0AB         	movff	?___ftmul,___fttol@f1
  3314  000582  C087  F0AC         	movff	?___ftmul+1,___fttol@f1+1
  3315  000586  C088  F0AD         	movff	?___ftmul+2,___fttol@f1+2
  3316  00058A  EC11  F00C         	call	___fttol	;wreg free
  3317  00058E  C0AB  F110         	movff	?___fttol,printf@val
  3318  000592  C0AC  F111         	movff	?___fttol+1,printf@val+1
  3319  000596  C0AD  F112         	movff	?___fttol+2,printf@val+2
  3320  00059A  C0AE  F113         	movff	?___fttol+3,printf@val+3
  3321                           
  3322                           ;doprnt.c: 1228: while(c--) {
  3323  00059E  D06D               	goto	l5515
  3324  0005A0                     l5509:
  3325                           
  3326                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3327  0005A0  C110  F022         	movff	printf@val,___lldiv@dividend
  3328  0005A4  C111  F023         	movff	printf@val+1,___lldiv@dividend+1
  3329  0005A8  C112  F024         	movff	printf@val+2,___lldiv@dividend+2
  3330  0005AC  C113  F025         	movff	printf@val+3,___lldiv@dividend+3
  3331  0005B0  0101               	movlb	1	; () banked
  3332  0005B2  5117               	movf	printf@c& (0+255),w,b
  3333  0005B4  0D04               	mullw	4
  3334  0005B6  0ECD               	movlw	low _dpowers
  3335  0005B8  24F3               	addwf	prodl,w,c
  3336  0005BA  6EF6               	movwf	tblptrl,c
  3337  0005BC  0EFD               	movlw	high _dpowers
  3338  0005BE  20F4               	addwfc	prodh,w,c
  3339  0005C0  6EF7               	movwf	tblptrh,c
  3340  0005C2                     	if	0	;There are less than 3 active tblptr bytes
  3341  0005C2                     	endif
  3342  0005C2  0009               	tblrd		*+
  3343  0005C4  CFF5 F026          	movff	tablat,___lldiv@divisor
  3344  0005C8  0009               	tblrd		*+
  3345  0005CA  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  3346  0005CE  0009               	tblrd		*+
  3347  0005D0  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  3348  0005D4  000A               	tblrd		*-
  3349  0005D6  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  3350  0005DA  EC8D  F012         	call	___lldiv	;wreg free
  3351  0005DE  C022  F10C         	movff	?___lldiv,printf@tmpval
  3352  0005E2  C023  F10D         	movff	?___lldiv+1,printf@tmpval+1
  3353  0005E6  C024  F10E         	movff	?___lldiv+2,printf@tmpval+2
  3354  0005EA  C025  F10F         	movff	?___lldiv+3,printf@tmpval+3
  3355                           
  3356                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3357  0005EE  C10C  F02F         	movff	printf@tmpval,___llmod@dividend
  3358  0005F2  C10D  F030         	movff	printf@tmpval+1,___llmod@dividend+1
  3359  0005F6  C10E  F031         	movff	printf@tmpval+2,___llmod@dividend+2
  3360  0005FA  C10F  F032         	movff	printf@tmpval+3,___llmod@dividend+3
  3361  0005FE  0E0A               	movlw	10
  3362  000600  6E33               	movwf	___llmod@divisor,c
  3363  000602  0E00               	movlw	0
  3364  000604  6E34               	movwf	___llmod@divisor+1,c
  3365  000606  0E00               	movlw	0
  3366  000608  6E35               	movwf	___llmod@divisor+2,c
  3367  00060A  0E00               	movlw	0
  3368  00060C  6E36               	movwf	___llmod@divisor+3,c
  3369  00060E  EC7A  F013         	call	___llmod	;wreg free
  3370  000612  C02F  F10C         	movff	?___llmod,printf@tmpval
  3371  000616  C030  F10D         	movff	?___llmod+1,printf@tmpval+1
  3372  00061A  C031  F10E         	movff	?___llmod+2,printf@tmpval+2
  3373  00061E  C032  F10F         	movff	?___llmod+3,printf@tmpval+3
  3374                           
  3375                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3376  000622  0101               	movlb	1	; () banked
  3377  000624  510C               	movf	printf@tmpval& (0+255),w,b
  3378  000626  0F30               	addlw	48
  3379  000628  EC56  F015         	call	_putch
  3380                           
  3381                           ;doprnt.c: 1232: val %= dpowers[c];
  3382  00062C  C110  F02F         	movff	printf@val,___llmod@dividend
  3383  000630  C111  F030         	movff	printf@val+1,___llmod@dividend+1
  3384  000634  C112  F031         	movff	printf@val+2,___llmod@dividend+2
  3385  000638  C113  F032         	movff	printf@val+3,___llmod@dividend+3
  3386  00063C  0101               	movlb	1	; () banked
  3387  00063E  5117               	movf	printf@c& (0+255),w,b
  3388  000640  0D04               	mullw	4
  3389  000642  0ECD               	movlw	low _dpowers
  3390  000644  24F3               	addwf	prodl,w,c
  3391  000646  6EF6               	movwf	tblptrl,c
  3392  000648  0EFD               	movlw	high _dpowers
  3393  00064A  20F4               	addwfc	prodh,w,c
  3394  00064C  6EF7               	movwf	tblptrh,c
  3395  00064E                     	if	0	;There are less than 3 active tblptr bytes
  3396  00064E                     	endif
  3397  00064E  0009               	tblrd		*+
  3398  000650  CFF5 F033          	movff	tablat,___llmod@divisor
  3399  000654  0009               	tblrd		*+
  3400  000656  CFF5 F034          	movff	tablat,___llmod@divisor+1
  3401  00065A  0009               	tblrd		*+
  3402  00065C  CFF5 F035          	movff	tablat,___llmod@divisor+2
  3403  000660  000A               	tblrd		*-
  3404  000662  CFF5 F036          	movff	tablat,___llmod@divisor+3
  3405  000666  EC7A  F013         	call	___llmod	;wreg free
  3406  00066A  C02F  F110         	movff	?___llmod,printf@val
  3407  00066E  C030  F111         	movff	?___llmod+1,printf@val+1
  3408  000672  C031  F112         	movff	?___llmod+2,printf@val+2
  3409  000676  C032  F113         	movff	?___llmod+3,printf@val+3
  3410  00067A                     l5515:
  3411  00067A  0101               	movlb	1	; () banked
  3412  00067C  0717               	decf	printf@c& (0+255),f,b
  3413  00067E  0101               	movlb	1	; () banked
  3414  000680  2917               	incf	printf@c& (0+255),w,b
  3415  000682  B4D8               	btfsc	status,2,c
  3416  000684  D008               	goto	l5521
  3417  000686  D78C               	goto	l5509
  3418  000688                     l5517:
  3419                           
  3420                           ; BSR set to: 1
  3421                           ;doprnt.c: 1236: (putch('0') );
  3422  000688  0E30               	movlw	48
  3423  00068A  EC56  F015         	call	_putch
  3424                           
  3425                           ;doprnt.c: 1237: prec--;
  3426  00068E  0101               	movlb	1	; () banked
  3427  000690  0708               	decf	printf@prec& (0+255),f,b
  3428  000692  A0D8               	btfss	status,0,c
  3429  000694  0709               	decf	(printf@prec+1)& (0+255),f,b
  3430  000696                     l5521:
  3431                           
  3432                           ; BSR set to: 1
  3433  000696  0101               	movlb	1	; () banked
  3434  000698  5108               	movf	printf@prec& (0+255),w,b
  3435  00069A  0101               	movlb	1	; () banked
  3436  00069C  1109               	iorwf	(printf@prec+1)& (0+255),w,b
  3437  00069E  B4D8               	btfsc	status,2,c
  3438  0006A0  D13E               	goto	l5589
  3439  0006A2  D7F2               	goto	l5517
  3440  0006A4                     l652:
  3441                           
  3442                           ; BSR set to: 1
  3443                           ;doprnt.c: 1246: }
  3444                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3445  0006A4  0101               	movlb	1	; () banked
  3446  0006A6  BF06               	btfsc	printf@flag& (0+255),7,b
  3447  0006A8  D023               	goto	l5533
  3448                           
  3449                           ; BSR set to: 1
  3450                           ;doprnt.c: 1253: {
  3451                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3452  0006AA  C104  FFD9         	movff	printf@ap,fsr2l
  3453  0006AE  C105  FFDA         	movff	printf@ap+1,fsr2h
  3454  0006B2  CFDE F110          	movff	postinc2,printf@val
  3455  0006B6  CFDD F111          	movff	postdec2,printf@val+1
  3456  0006BA  0101               	movlb	1	; () banked
  3457  0006BC  0E00               	movlw	0
  3458  0006BE  BF11               	btfsc	(printf@val+1)& (0+255),7,b
  3459  0006C0  0EFF               	movlw	-1
  3460  0006C2  6F12               	movwf	(printf@val+2)& (0+255),b
  3461  0006C4  6F13               	movwf	(printf@val+3)& (0+255),b
  3462                           
  3463                           ; BSR set to: 1
  3464  0006C6  0E02               	movlw	2
  3465  0006C8  0101               	movlb	1	; () banked
  3466  0006CA  2704               	addwf	printf@ap& (0+255),f,b
  3467  0006CC  0E00               	movlw	0
  3468  0006CE  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  3469                           
  3470                           ; BSR set to: 1
  3471                           ;doprnt.c: 1261: if((long)val < 0) {
  3472  0006D0  0101               	movlb	1	; () banked
  3473  0006D2  AF13               	btfss	(printf@val+3)& (0+255),7,b
  3474  0006D4  D06E               	goto	l5567
  3475                           
  3476                           ; BSR set to: 1
  3477                           ;doprnt.c: 1262: flag |= 0x03;
  3478  0006D6  0E03               	movlw	3
  3479  0006D8  0101               	movlb	1	; () banked
  3480  0006DA  1306               	iorwf	printf@flag& (0+255),f,b
  3481                           
  3482                           ; BSR set to: 1
  3483                           ;doprnt.c: 1263: val = -val;
  3484  0006DC  0101               	movlb	1	; () banked
  3485  0006DE  1F13               	comf	(printf@val+3)& (0+255),f,b
  3486  0006E0  1F12               	comf	(printf@val+2)& (0+255),f,b
  3487  0006E2  1F11               	comf	(printf@val+1)& (0+255),f,b
  3488  0006E4  6D10               	negf	printf@val& (0+255),b
  3489  0006E6  0E00               	movlw	0
  3490  0006E8  2311               	addwfc	(printf@val+1)& (0+255),f,b
  3491  0006EA  2312               	addwfc	(printf@val+2)& (0+255),f,b
  3492  0006EC  2313               	addwfc	(printf@val+3)& (0+255),f,b
  3493                           
  3494                           ; BSR set to: 1
  3495                           ;doprnt.c: 1264: }
  3496                           ;doprnt.c: 1266: }
  3497  0006EE  D061               	goto	l5567
  3498  0006F0                     l5533:
  3499                           
  3500                           ; BSR set to: 1
  3501                           ;doprnt.c: 1268: else
  3502                           ;doprnt.c: 1273: {
  3503                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3504  0006F0  C104  FFD9         	movff	printf@ap,fsr2l
  3505  0006F4  C105  FFDA         	movff	printf@ap+1,fsr2h
  3506  0006F8  CFDE F0C1          	movff	postinc2,??_printf
  3507  0006FC  CFDD F0C2          	movff	postdec2,??_printf+1
  3508  000700  C0C1  F110         	movff	??_printf,printf@val
  3509  000704  C0C2  F111         	movff	??_printf+1,printf@val+1
  3510  000708  0101               	movlb	1	; () banked
  3511  00070A  6B12               	clrf	(printf@val+2)& (0+255),b
  3512  00070C  6B13               	clrf	(printf@val+3)& (0+255),b
  3513                           
  3514                           ; BSR set to: 1
  3515  00070E  0E02               	movlw	2
  3516  000710  0101               	movlb	1	; () banked
  3517  000712  2704               	addwf	printf@ap& (0+255),f,b
  3518  000714  0E00               	movlw	0
  3519  000716  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  3520                           
  3521                           ; BSR set to: 1
  3522                           ;doprnt.c: 1287: }
  3523                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3524  000718  D04C               	goto	l5567
  3525  00071A                     l5537:
  3526                           
  3527                           ; BSR set to: 1
  3528                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3529  00071A  0E01               	movlw	1
  3530  00071C  0101               	movlb	1	; () banked
  3531  00071E  6F17               	movwf	printf@c& (0+255),b
  3532  000720                     l5539:
  3533                           
  3534                           ; BSR set to: 1
  3535  000720  0E0A               	movlw	10
  3536  000722  0101               	movlb	1	; () banked
  3537  000724  1917               	xorwf	printf@c& (0+255),w,b
  3538  000726  B4D8               	btfsc	status,2,c
  3539  000728  D04D               	goto	l5569
  3540                           
  3541                           ; BSR set to: 1
  3542                           ;doprnt.c: 1306: if(val < dpowers[c])
  3543                           
  3544                           ; BSR set to: 1
  3545                           
  3546                           ; BSR set to: 1
  3547  00072A  0101               	movlb	1	; () banked
  3548  00072C  5117               	movf	printf@c& (0+255),w,b
  3549  00072E  0D04               	mullw	4
  3550  000730  0ECD               	movlw	low _dpowers
  3551  000732  24F3               	addwf	prodl,w,c
  3552  000734  6EF6               	movwf	tblptrl,c
  3553  000736  0EFD               	movlw	high _dpowers
  3554  000738  20F4               	addwfc	prodh,w,c
  3555  00073A  6EF7               	movwf	tblptrh,c
  3556  00073C                     	if	0	;There are less than 3 active tblptr bytes
  3557  00073C                     	endif
  3558  00073C  0009               	tblrd		*+
  3559  00073E  50F5               	movf	tablat,w,c
  3560  000740  0101               	movlb	1	; () banked
  3561  000742  5D10               	subwf	printf@val& (0+255),w,b
  3562  000744  0009               	tblrd		*+
  3563  000746  50F5               	movf	tablat,w,c
  3564  000748  0101               	movlb	1	; () banked
  3565  00074A  5911               	subwfb	(printf@val+1)& (0+255),w,b
  3566  00074C  0009               	tblrd		*+
  3567  00074E  50F5               	movf	tablat,w,c
  3568  000750  0101               	movlb	1	; () banked
  3569  000752  5912               	subwfb	(printf@val+2)& (0+255),w,b
  3570  000754  0009               	tblrd		*+
  3571  000756  50F5               	movf	tablat,w,c
  3572  000758  0101               	movlb	1	; () banked
  3573  00075A  5913               	subwfb	(printf@val+3)& (0+255),w,b
  3574  00075C  A0D8               	btfss	status,0,c
  3575  00075E  D032               	goto	l5569
  3576                           
  3577                           ; BSR set to: 1
  3578                           
  3579                           ; BSR set to: 1
  3580                           
  3581                           ; BSR set to: 1
  3582                           ;doprnt.c: 1307: break;
  3583  000760  0101               	movlb	1	; () banked
  3584  000762  2B17               	incf	printf@c& (0+255),f,b
  3585  000764  D7DD               	goto	l5539
  3586  000766                     l5551:
  3587                           
  3588                           ; BSR set to: 1
  3589                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3590  000766  0E01               	movlw	1
  3591  000768  0101               	movlb	1	; () banked
  3592  00076A  6F17               	movwf	printf@c& (0+255),b
  3593  00076C                     l5553:
  3594                           
  3595                           ; BSR set to: 1
  3596  00076C  0E08               	movlw	8
  3597  00076E  0101               	movlb	1	; () banked
  3598  000770  1917               	xorwf	printf@c& (0+255),w,b
  3599  000772  B4D8               	btfsc	status,2,c
  3600  000774  D027               	goto	l5569
  3601                           
  3602                           ; BSR set to: 1
  3603                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3604                           
  3605                           ; BSR set to: 1
  3606                           
  3607                           ; BSR set to: 1
  3608  000776  0101               	movlb	1	; () banked
  3609  000778  5117               	movf	printf@c& (0+255),w,b
  3610  00077A  0D04               	mullw	4
  3611  00077C  0E43               	movlw	low _hexpowers
  3612  00077E  24F3               	addwf	prodl,w,c
  3613  000780  6EF6               	movwf	tblptrl,c
  3614  000782  0EFE               	movlw	high _hexpowers
  3615  000784  20F4               	addwfc	prodh,w,c
  3616  000786  6EF7               	movwf	tblptrh,c
  3617  000788                     	if	0	;There are less than 3 active tblptr bytes
  3618  000788                     	endif
  3619  000788  0009               	tblrd		*+
  3620  00078A  50F5               	movf	tablat,w,c
  3621  00078C  0101               	movlb	1	; () banked
  3622  00078E  5D10               	subwf	printf@val& (0+255),w,b
  3623  000790  0009               	tblrd		*+
  3624  000792  50F5               	movf	tablat,w,c
  3625  000794  0101               	movlb	1	; () banked
  3626  000796  5911               	subwfb	(printf@val+1)& (0+255),w,b
  3627  000798  0009               	tblrd		*+
  3628  00079A  50F5               	movf	tablat,w,c
  3629  00079C  0101               	movlb	1	; () banked
  3630  00079E  5912               	subwfb	(printf@val+2)& (0+255),w,b
  3631  0007A0  0009               	tblrd		*+
  3632  0007A2  50F5               	movf	tablat,w,c
  3633  0007A4  0101               	movlb	1	; () banked
  3634  0007A6  5913               	subwfb	(printf@val+3)& (0+255),w,b
  3635  0007A8  A0D8               	btfss	status,0,c
  3636  0007AA  D00C               	goto	l5569
  3637                           
  3638                           ; BSR set to: 1
  3639                           
  3640                           ; BSR set to: 1
  3641                           
  3642                           ; BSR set to: 1
  3643                           ;doprnt.c: 1318: break;
  3644  0007AC  0101               	movlb	1	; () banked
  3645  0007AE  2B17               	incf	printf@c& (0+255),f,b
  3646  0007B0  D7DD               	goto	l5553
  3647  0007B2                     l5567:
  3648                           
  3649                           ; BSR set to: 1
  3650  0007B2  0101               	movlb	1	; () banked
  3651  0007B4  5106               	movf	printf@flag& (0+255),w,b
  3652  0007B6  0B80               	andlw	128
  3653                           
  3654                           ; Switch size 1, requested type "space"
  3655                           ; Number of cases is 2, Range of values is 0 to 128
  3656                           ; switch strategies available:
  3657                           ; Name         Instructions Cycles
  3658                           ; simple_byte            7     4 (average)
  3659                           ;	Chosen strategy is simple_byte
  3660  0007B8  0A00               	xorlw	0	; case 0
  3661  0007BA  B4D8               	btfsc	status,2,c
  3662  0007BC  D7AE               	goto	l5537
  3663  0007BE  0A80               	xorlw	128	; case 128
  3664  0007C0  B4D8               	btfsc	status,2,c
  3665  0007C2  D7D1               	goto	l5551
  3666  0007C4                     l5569:
  3667                           
  3668                           ; BSR set to: 1
  3669                           ;doprnt.c: 1422: {
  3670                           ;doprnt.c: 1438: if(flag & 0x03)
  3671  0007C4  0E03               	movlw	3
  3672  0007C6  0101               	movlb	1	; () banked
  3673  0007C8  1506               	andwf	printf@flag& (0+255),w,b
  3674  0007CA  0100               	movlb	0	; () banked
  3675  0007CC  6FC1               	movwf	??_printf& (0+255),b
  3676  0007CE  0E00               	movlw	0
  3677  0007D0  0101               	movlb	1	; () banked
  3678  0007D2  1507               	andwf	(printf@flag+1)& (0+255),w,b
  3679  0007D4  0100               	movlb	0	; () banked
  3680  0007D6  6FC2               	movwf	(??_printf+1)& (0+255),b
  3681  0007D8  0100               	movlb	0	; () banked
  3682  0007DA  51C1               	movf	??_printf& (0+255),w,b
  3683  0007DC  0100               	movlb	0	; () banked
  3684  0007DE  11C2               	iorwf	(??_printf+1)& (0+255),w,b
  3685  0007E0  B4D8               	btfsc	status,2,c
  3686  0007E2  D003               	goto	l5573
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;doprnt.c: 1439: (putch('-') );
  3690  0007E4  0E2D               	movlw	45
  3691  0007E6  EC56  F015         	call	_putch
  3692  0007EA                     l5573:
  3693                           
  3694                           ;doprnt.c: 1469: }
  3695                           ;doprnt.c: 1472: prec = c;
  3696  0007EA  0101               	movlb	1	; () banked
  3697  0007EC  5117               	movf	printf@c& (0+255),w,b
  3698  0007EE  0101               	movlb	1	; () banked
  3699  0007F0  6F08               	movwf	printf@prec& (0+255),b
  3700  0007F2  6B09               	clrf	(printf@prec+1)& (0+255),b
  3701  0007F4  BF08               	btfsc	printf@prec& (0+255),7,b
  3702  0007F6  0709               	decf	(printf@prec+1)& (0+255),f,b
  3703                           
  3704                           ;doprnt.c: 1474: while(prec--) {
  3705  0007F8  D087               	goto	l5587
  3706  0007FA                     l5575:
  3707                           
  3708                           ; BSR set to: 1
  3709                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3710  0007FA  C108  F0C1         	movff	printf@prec,??_printf
  3711  0007FE  C109  F0C2         	movff	printf@prec+1,??_printf+1
  3712  000802  0100               	movlb	0	; () banked
  3713  000804  90D8               	bcf	status,0,c
  3714  000806  37C1               	rlcf	??_printf& (0+255),f,b
  3715  000808  37C2               	rlcf	(??_printf+1)& (0+255),f,b
  3716  00080A  0100               	movlb	0	; () banked
  3717  00080C  90D8               	bcf	status,0,c
  3718  00080E  37C1               	rlcf	??_printf& (0+255),f,b
  3719  000810  37C2               	rlcf	(??_printf+1)& (0+255),f,b
  3720  000812  0ECD               	movlw	low _dpowers
  3721  000814  0100               	movlb	0	; () banked
  3722  000816  25C1               	addwf	??_printf& (0+255),w,b
  3723  000818  6EF6               	movwf	tblptrl,c
  3724  00081A  0EFD               	movlw	high _dpowers
  3725  00081C  21C2               	addwfc	(??_printf+1)& (0+255),w,b
  3726  00081E  6EF7               	movwf	tblptrh,c
  3727  000820                     	if	0	;There are less than 3 active tblptr bytes
  3728  000820                     	endif
  3729  000820  0009               	tblrd		*+
  3730  000822  CFF5 F026          	movff	tablat,___lldiv@divisor
  3731  000826  0009               	tblrd		*+
  3732  000828  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  3733  00082C  0009               	tblrd		*+
  3734  00082E  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  3735  000832  000A               	tblrd		*-
  3736  000834  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  3737  000838  C110  F022         	movff	printf@val,___lldiv@dividend
  3738  00083C  C111  F023         	movff	printf@val+1,___lldiv@dividend+1
  3739  000840  C112  F024         	movff	printf@val+2,___lldiv@dividend+2
  3740  000844  C113  F025         	movff	printf@val+3,___lldiv@dividend+3
  3741  000848  EC8D  F012         	call	___lldiv	;wreg free
  3742  00084C  C022  F02F         	movff	?___lldiv,___llmod@dividend
  3743  000850  C023  F030         	movff	?___lldiv+1,___llmod@dividend+1
  3744  000854  C024  F031         	movff	?___lldiv+2,___llmod@dividend+2
  3745  000858  C025  F032         	movff	?___lldiv+3,___llmod@dividend+3
  3746  00085C  0E0A               	movlw	10
  3747  00085E  6E33               	movwf	___llmod@divisor,c
  3748  000860  0E00               	movlw	0
  3749  000862  6E34               	movwf	___llmod@divisor+1,c
  3750  000864  0E00               	movlw	0
  3751  000866  6E35               	movwf	___llmod@divisor+2,c
  3752  000868  0E00               	movlw	0
  3753  00086A  6E36               	movwf	___llmod@divisor+3,c
  3754  00086C  EC7A  F013         	call	___llmod	;wreg free
  3755  000870  502F               	movf	?___llmod,w,c
  3756  000872  0F30               	addlw	48
  3757  000874  0101               	movlb	1	; () banked
  3758  000876  6F17               	movwf	printf@c& (0+255),b
  3759                           
  3760                           ;doprnt.c: 1491: break;
  3761  000878  D043               	goto	l5585
  3762  00087A                     l5577:
  3763                           
  3764                           ; BSR set to: 1
  3765                           ;doprnt.c: 1499: {
  3766                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3767  00087A  C110  F022         	movff	printf@val,___lldiv@dividend
  3768  00087E  C111  F023         	movff	printf@val+1,___lldiv@dividend+1
  3769  000882  C112  F024         	movff	printf@val+2,___lldiv@dividend+2
  3770  000886  C113  F025         	movff	printf@val+3,___lldiv@dividend+3
  3771  00088A  C108  F0C1         	movff	printf@prec,??_printf
  3772  00088E  C109  F0C2         	movff	printf@prec+1,??_printf+1
  3773  000892  0100               	movlb	0	; () banked
  3774  000894  90D8               	bcf	status,0,c
  3775  000896  37C1               	rlcf	??_printf& (0+255),f,b
  3776  000898  37C2               	rlcf	(??_printf+1)& (0+255),f,b
  3777  00089A  0100               	movlb	0	; () banked
  3778  00089C  90D8               	bcf	status,0,c
  3779  00089E  37C1               	rlcf	??_printf& (0+255),f,b
  3780  0008A0  37C2               	rlcf	(??_printf+1)& (0+255),f,b
  3781  0008A2  0E43               	movlw	low _hexpowers
  3782  0008A4  0100               	movlb	0	; () banked
  3783  0008A6  25C1               	addwf	??_printf& (0+255),w,b
  3784  0008A8  6EF6               	movwf	tblptrl,c
  3785  0008AA  0EFE               	movlw	high _hexpowers
  3786  0008AC  21C2               	addwfc	(??_printf+1)& (0+255),w,b
  3787  0008AE  6EF7               	movwf	tblptrh,c
  3788  0008B0                     	if	0	;There are less than 3 active tblptr bytes
  3789  0008B0                     	endif
  3790  0008B0  0009               	tblrd		*+
  3791  0008B2  CFF5 F026          	movff	tablat,___lldiv@divisor
  3792  0008B6  0009               	tblrd		*+
  3793  0008B8  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  3794  0008BC  0009               	tblrd		*+
  3795  0008BE  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  3796  0008C2  000A               	tblrd		*-
  3797  0008C4  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  3798  0008C8  EC8D  F012         	call	___lldiv	;wreg free
  3799  0008CC  5022               	movf	?___lldiv,w,c
  3800  0008CE  0B0F               	andlw	15
  3801  0008D0  0101               	movlb	1	; () banked
  3802  0008D2  6F03               	movwf	printf@idx& (0+255),b
  3803                           
  3804                           ; BSR set to: 1
  3805                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3806  0008D4  0101               	movlb	1	; () banked
  3807  0008D6  5103               	movf	printf@idx& (0+255),w,b
  3808  0008D8  0D01               	mullw	1
  3809  0008DA  0E41               	movlw	low STR_23
  3810  0008DC  24F3               	addwf	prodl,w,c
  3811  0008DE  6EF6               	movwf	tblptrl,c
  3812  0008E0  0EFF               	movlw	high STR_23
  3813  0008E2  20F4               	addwfc	prodh,w,c
  3814  0008E4  6EF7               	movwf	tblptrh,c
  3815  0008E6                     	if	0	;There are less than 3 active tblptr bytes
  3816  0008E6                     	endif
  3817  0008E6  0008               	tblrd		*
  3818  0008E8  CFF5 F117          	movff	tablat,printf@c
  3819                           
  3820                           ; BSR set to: 1
  3821                           ;doprnt.c: 1523: }
  3822                           
  3823                           ;doprnt.c: 1508: }
  3824                           ;doprnt.c: 1510: break;
  3825  0008EC  D009               	goto	l5585
  3826  0008EE                     l5583:
  3827                           
  3828                           ; BSR set to: 1
  3829  0008EE  0101               	movlb	1	; () banked
  3830  0008F0  5106               	movf	printf@flag& (0+255),w,b
  3831  0008F2  0B80               	andlw	128
  3832                           
  3833                           ; Switch size 1, requested type "space"
  3834                           ; Number of cases is 2, Range of values is 0 to 128
  3835                           ; switch strategies available:
  3836                           ; Name         Instructions Cycles
  3837                           ; simple_byte            7     4 (average)
  3838                           ;	Chosen strategy is simple_byte
  3839  0008F4  0A00               	xorlw	0	; case 0
  3840  0008F6  B4D8               	btfsc	status,2,c
  3841  0008F8  D780               	goto	l5575
  3842  0008FA  0A80               	xorlw	128	; case 128
  3843  0008FC  B4D8               	btfsc	status,2,c
  3844  0008FE  D7BD               	goto	l5577
  3845  000900                     l5585:
  3846                           
  3847                           ; BSR set to: 1
  3848                           ;doprnt.c: 1524: (putch(c) );
  3849  000900  0101               	movlb	1	; () banked
  3850  000902  5117               	movf	printf@c& (0+255),w,b
  3851  000904  EC56  F015         	call	_putch
  3852  000908                     l5587:
  3853  000908  0101               	movlb	1	; () banked
  3854  00090A  0708               	decf	printf@prec& (0+255),f,b
  3855  00090C  A0D8               	btfss	status,0,c
  3856  00090E  0709               	decf	(printf@prec+1)& (0+255),f,b
  3857  000910  0101               	movlb	1	; () banked
  3858  000912  2908               	incf	printf@prec& (0+255),w,b
  3859  000914  E1EC               	bnz	l5583
  3860  000916  0101               	movlb	1	; () banked
  3861  000918  2909               	incf	(printf@prec+1)& (0+255),w,b
  3862  00091A  A4D8               	btfss	status,2,c
  3863  00091C  D7E8               	goto	l5583
  3864  00091E                     l5589:
  3865  00091E  C0BA  FFF6         	movff	printf@f,tblptrl
  3866  000922  C0BB  FFF7         	movff	printf@f+1,tblptrh
  3867  000926  0100               	movlb	0	; () banked
  3868  000928  4BBA               	infsnz	printf@f& (0+255),f,b
  3869  00092A  2BBB               	incf	(printf@f+1)& (0+255),f,b
  3870  00092C                     	if	0	;tblptru may be non-zero
  3871  00092C                     	endif
  3872  00092C                     	if	0	;tblptru may be non-zero
  3873  00092C                     	endif
  3874  00092C  0008               	tblrd		*
  3875  00092E  CFF5 F117          	movff	tablat,printf@c
  3876  000932  0101               	movlb	1	; () banked
  3877  000934  5117               	movf	printf@c& (0+255),w,b
  3878  000936  B4D8               	btfsc	status,2,c
  3879  000938  0012               	return	
  3880  00093A  EF11  F000         	goto	l5371
  3881  00093E                     __end_of_printf:
  3882                           	opt stack 0
  3883                           tblptru	equ	0xFF8
  3884                           tblptrh	equ	0xFF7
  3885                           tblptrl	equ	0xFF6
  3886                           tablat	equ	0xFF5
  3887                           prodh	equ	0xFF4
  3888                           prodl	equ	0xFF3
  3889                           postinc0	equ	0xFEE
  3890                           wreg	equ	0xFE8
  3891                           postdec1	equ	0xFE5
  3892                           fsr1l	equ	0xFE1
  3893                           indf2	equ	0xFDF
  3894                           postinc2	equ	0xFDE
  3895                           postdec2	equ	0xFDD
  3896                           fsr2h	equ	0xFDA
  3897                           fsr2l	equ	0xFD9
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function _scale *****************
  3901 ;; Defined at:
  3902 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;  scl             1    wreg     char 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  scl             1   27[BANK0 ] char 
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  3   21[BANK0 ] char 
  3909 ;; Registers used:
  3910 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3916 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;Total ram usage:        7 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    5
  3923 ;; This function calls:
  3924 ;;		___awdiv
  3925 ;;		___awmod
  3926 ;;		___ftmul
  3927 ;;		___wmul
  3928 ;; This function is called by:
  3929 ;;		_printf
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text5
  3934  00093E                     __ptext5:
  3935                           	opt stack 0
  3936  00093E                     _scale:
  3937                           	opt stack 23
  3938                           
  3939                           ; BSR set to: 1
  3940                           ;incstack = 0
  3941                           ;scale@scl stored from wreg
  3942  00093E  0100               	movlb	0	; () banked
  3943  000940  6F9B               	movwf	scale@scl& (0+255),b
  3944                           
  3945                           ;doprnt.c: 428: if(scl < 0) {
  3946  000942  0100               	movlb	0	; () banked
  3947  000944  AF9B               	btfss	scale@scl& (0+255),7,b
  3948  000946  D104               	goto	l5037
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;doprnt.c: 429: scl = -scl;
  3952  000948  0100               	movlb	0	; () banked
  3953  00094A  6D9B               	negf	scale@scl& (0+255),b
  3954                           
  3955                           ;doprnt.c: 430: if(scl>=110)
  3956  00094C  0100               	movlb	0	; () banked
  3957  00094E  519B               	movf	scale@scl& (0+255),w,b
  3958  000950  0A80               	xorlw	128
  3959  000952  0F12               	addlw	-238
  3960  000954  A0D8               	btfss	status,0,c
  3961  000956  D094               	goto	l5027
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3965  000958  0E00               	movlw	0
  3966  00095A  6E33               	movwf	___wmul@multiplicand+1,c
  3967  00095C  0E03               	movlw	3
  3968  00095E  6E32               	movwf	___wmul@multiplicand,c
  3969  000960  0E00               	movlw	0
  3970  000962  6E2B               	movwf	___awdiv@divisor+1,c
  3971  000964  0E0A               	movlw	10
  3972  000966  6E2A               	movwf	___awdiv@divisor,c
  3973  000968  0E00               	movlw	0
  3974  00096A  6E25               	movwf	___awmod@divisor+1,c
  3975  00096C  0E64               	movlw	100
  3976  00096E  6E24               	movwf	___awmod@divisor,c
  3977  000970  0100               	movlb	0	; () banked
  3978  000972  519B               	movf	scale@scl& (0+255),w,b
  3979  000974  6E22               	movwf	___awmod@dividend,c
  3980  000976  6A23               	clrf	___awmod@dividend+1,c
  3981  000978  BE22               	btfsc	___awmod@dividend,7,c
  3982  00097A  0623               	decf	___awmod@dividend+1,f,c
  3983  00097C  EC0A  F013         	call	___awmod	;wreg free
  3984  000980  C022  F028         	movff	?___awmod,___awdiv@dividend
  3985  000984  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  3986  000988  EC4B  F012         	call	___awdiv	;wreg free
  3987  00098C  0E09               	movlw	9
  3988  00098E  2428               	addwf	?___awdiv,w,c
  3989  000990  6E30               	movwf	___wmul@multiplier,c
  3990  000992  0E00               	movlw	0
  3991  000994  2029               	addwfc	?___awdiv+1,w,c
  3992  000996  6E31               	movwf	___wmul@multiplier+1,c
  3993  000998  EC31  F015         	call	___wmul	;wreg free
  3994  00099C  0EF5               	movlw	low __npowers_
  3995  00099E  2430               	addwf	?___wmul,w,c
  3996  0009A0  6EF6               	movwf	tblptrl,c
  3997  0009A2  0EFD               	movlw	high __npowers_
  3998  0009A4  2031               	addwfc	?___wmul+1,w,c
  3999  0009A6  6EF7               	movwf	tblptrh,c
  4000  0009A8                     	if	0	;There are less than 3 active tblptr bytes
  4001  0009A8                     	endif
  4002  0009A8  0009               	tblrd		*+
  4003  0009AA  CFF5 F089          	movff	tablat,___ftmul@f2
  4004  0009AE  0009               	tblrd		*+
  4005  0009B0  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  4006  0009B4  000A               	tblrd		*-
  4007  0009B6  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  4008  0009BA  0E00               	movlw	0
  4009  0009BC  6E2B               	movwf	___awdiv@divisor+1,c
  4010  0009BE  0E64               	movlw	100
  4011  0009C0  6E2A               	movwf	___awdiv@divisor,c
  4012  0009C2  0100               	movlb	0	; () banked
  4013  0009C4  519B               	movf	scale@scl& (0+255),w,b
  4014  0009C6  6E28               	movwf	___awdiv@dividend,c
  4015  0009C8  6A29               	clrf	___awdiv@dividend+1,c
  4016  0009CA  BE28               	btfsc	___awdiv@dividend,7,c
  4017  0009CC  0629               	decf	___awdiv@dividend+1,f,c
  4018  0009CE  EC4B  F012         	call	___awdiv	;wreg free
  4019  0009D2  0E12               	movlw	18
  4020  0009D4  2428               	addwf	?___awdiv,w,c
  4021  0009D6  6E30               	movwf	___wmul@multiplier,c
  4022  0009D8  0E00               	movlw	0
  4023  0009DA  2029               	addwfc	?___awdiv+1,w,c
  4024  0009DC  6E31               	movwf	___wmul@multiplier+1,c
  4025  0009DE  0E00               	movlw	0
  4026  0009E0  6E33               	movwf	___wmul@multiplicand+1,c
  4027  0009E2  0E03               	movlw	3
  4028  0009E4  6E32               	movwf	___wmul@multiplicand,c
  4029  0009E6  EC31  F015         	call	___wmul	;wreg free
  4030  0009EA  0EF5               	movlw	low __npowers_
  4031  0009EC  2430               	addwf	?___wmul,w,c
  4032  0009EE  6EF6               	movwf	tblptrl,c
  4033  0009F0  0EFD               	movlw	high __npowers_
  4034  0009F2  2031               	addwfc	?___wmul+1,w,c
  4035  0009F4  6EF7               	movwf	tblptrh,c
  4036  0009F6                     	if	0	;There are less than 3 active tblptr bytes
  4037  0009F6                     	endif
  4038  0009F6  0009               	tblrd		*+
  4039  0009F8  CFF5 F086          	movff	tablat,___ftmul@f1
  4040  0009FC  0009               	tblrd		*+
  4041  0009FE  CFF5 F087          	movff	tablat,___ftmul@f1+1
  4042  000A02  000A               	tblrd		*-
  4043  000A04  CFF5 F088          	movff	tablat,___ftmul@f1+2
  4044  000A08  ECB6  F00A         	call	___ftmul	;wreg free
  4045  000A0C  C086  F098         	movff	?___ftmul,_scale$1319
  4046  000A10  C087  F099         	movff	?___ftmul+1,_scale$1319+1
  4047  000A14  C088  F09A         	movff	?___ftmul+2,_scale$1319+2
  4048                           
  4049                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4050  000A18  C098  F086         	movff	_scale$1319,___ftmul@f1
  4051  000A1C  C099  F087         	movff	_scale$1319+1,___ftmul@f1+1
  4052  000A20  C09A  F088         	movff	_scale$1319+2,___ftmul@f1+2
  4053  000A24  0E00               	movlw	0
  4054  000A26  6E33               	movwf	___wmul@multiplicand+1,c
  4055  000A28  0E03               	movlw	3
  4056  000A2A  6E32               	movwf	___wmul@multiplicand,c
  4057  000A2C  0E00               	movlw	0
  4058  000A2E  6E25               	movwf	___awmod@divisor+1,c
  4059  000A30  0E0A               	movlw	10
  4060  000A32  6E24               	movwf	___awmod@divisor,c
  4061  000A34  0100               	movlb	0	; () banked
  4062  000A36  519B               	movf	scale@scl& (0+255),w,b
  4063  000A38  6E22               	movwf	___awmod@dividend,c
  4064  000A3A  6A23               	clrf	___awmod@dividend+1,c
  4065  000A3C  BE22               	btfsc	___awmod@dividend,7,c
  4066  000A3E  0623               	decf	___awmod@dividend+1,f,c
  4067  000A40  EC0A  F013         	call	___awmod	;wreg free
  4068  000A44  C022  F030         	movff	?___awmod,___wmul@multiplier
  4069  000A48  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  4070  000A4C  EC31  F015         	call	___wmul	;wreg free
  4071  000A50  0EF5               	movlw	low __npowers_
  4072  000A52  2430               	addwf	?___wmul,w,c
  4073  000A54  6EF6               	movwf	tblptrl,c
  4074  000A56  0EFD               	movlw	high __npowers_
  4075  000A58  2031               	addwfc	?___wmul+1,w,c
  4076  000A5A  6EF7               	movwf	tblptrh,c
  4077  000A5C                     	if	0	;There are less than 3 active tblptr bytes
  4078  000A5C                     	endif
  4079  000A5C  0009               	tblrd		*+
  4080  000A5E  CFF5 F089          	movff	tablat,___ftmul@f2
  4081  000A62  0009               	tblrd		*+
  4082  000A64  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  4083  000A68  000A               	tblrd		*-
  4084  000A6A  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  4085  000A6E  ECB6  F00A         	call	___ftmul	;wreg free
  4086  000A72  C086  F095         	movff	?___ftmul,?_scale
  4087  000A76  C087  F096         	movff	?___ftmul+1,?_scale+1
  4088  000A7A  C088  F097         	movff	?___ftmul+2,?_scale+2
  4089  000A7E  0012               	return	
  4090  000A80                     l5027:
  4091                           
  4092                           ;doprnt.c: 432: else if(scl > 10)
  4093  000A80  0100               	movlb	0	; () banked
  4094  000A82  519B               	movf	scale@scl& (0+255),w,b
  4095  000A84  0A80               	xorlw	128
  4096  000A86  0F75               	addlw	-139
  4097  000A88  A0D8               	btfss	status,0,c
  4098  000A8A  D04F               	goto	l5033
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4102  000A8C  0E00               	movlw	0
  4103  000A8E  6E2B               	movwf	___awdiv@divisor+1,c
  4104  000A90  0E0A               	movlw	10
  4105  000A92  6E2A               	movwf	___awdiv@divisor,c
  4106  000A94  0100               	movlb	0	; () banked
  4107  000A96  519B               	movf	scale@scl& (0+255),w,b
  4108  000A98  6E28               	movwf	___awdiv@dividend,c
  4109  000A9A  6A29               	clrf	___awdiv@dividend+1,c
  4110  000A9C  BE28               	btfsc	___awdiv@dividend,7,c
  4111  000A9E  0629               	decf	___awdiv@dividend+1,f,c
  4112  000AA0  EC4B  F012         	call	___awdiv	;wreg free
  4113  000AA4  0E09               	movlw	9
  4114  000AA6  2428               	addwf	?___awdiv,w,c
  4115  000AA8  6E30               	movwf	___wmul@multiplier,c
  4116  000AAA  0E00               	movlw	0
  4117  000AAC  2029               	addwfc	?___awdiv+1,w,c
  4118  000AAE  6E31               	movwf	___wmul@multiplier+1,c
  4119  000AB0  0E00               	movlw	0
  4120  000AB2  6E33               	movwf	___wmul@multiplicand+1,c
  4121  000AB4  0E03               	movlw	3
  4122  000AB6  6E32               	movwf	___wmul@multiplicand,c
  4123  000AB8  EC31  F015         	call	___wmul	;wreg free
  4124  000ABC  0EF5               	movlw	low __npowers_
  4125  000ABE  2430               	addwf	?___wmul,w,c
  4126  000AC0  6EF6               	movwf	tblptrl,c
  4127  000AC2  0EFD               	movlw	high __npowers_
  4128  000AC4  2031               	addwfc	?___wmul+1,w,c
  4129  000AC6  6EF7               	movwf	tblptrh,c
  4130  000AC8                     	if	0	;There are less than 3 active tblptr bytes
  4131  000AC8                     	endif
  4132  000AC8  0009               	tblrd		*+
  4133  000ACA  CFF5 F086          	movff	tablat,___ftmul@f1
  4134  000ACE  0009               	tblrd		*+
  4135  000AD0  CFF5 F087          	movff	tablat,___ftmul@f1+1
  4136  000AD4  000A               	tblrd		*-
  4137  000AD6  CFF5 F088          	movff	tablat,___ftmul@f1+2
  4138  000ADA  0E00               	movlw	0
  4139  000ADC  6E33               	movwf	___wmul@multiplicand+1,c
  4140  000ADE  0E03               	movlw	3
  4141  000AE0  6E32               	movwf	___wmul@multiplicand,c
  4142  000AE2  0E00               	movlw	0
  4143  000AE4  6E25               	movwf	___awmod@divisor+1,c
  4144  000AE6  0E0A               	movlw	10
  4145  000AE8  6E24               	movwf	___awmod@divisor,c
  4146  000AEA  0100               	movlb	0	; () banked
  4147  000AEC  519B               	movf	scale@scl& (0+255),w,b
  4148  000AEE  6E22               	movwf	___awmod@dividend,c
  4149  000AF0  6A23               	clrf	___awmod@dividend+1,c
  4150  000AF2  BE22               	btfsc	___awmod@dividend,7,c
  4151  000AF4  0623               	decf	___awmod@dividend+1,f,c
  4152  000AF6  EC0A  F013         	call	___awmod	;wreg free
  4153  000AFA  C022  F030         	movff	?___awmod,___wmul@multiplier
  4154  000AFE  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  4155  000B02  EC31  F015         	call	___wmul	;wreg free
  4156  000B06  0EF5               	movlw	low __npowers_
  4157  000B08  2430               	addwf	?___wmul,w,c
  4158  000B0A  6EF6               	movwf	tblptrl,c
  4159  000B0C  0EFD               	movlw	high __npowers_
  4160  000B0E  2031               	addwfc	?___wmul+1,w,c
  4161  000B10  6EF7               	movwf	tblptrh,c
  4162  000B12                     	if	0	;There are less than 3 active tblptr bytes
  4163  000B12                     	endif
  4164  000B12  0009               	tblrd		*+
  4165  000B14  CFF5 F089          	movff	tablat,___ftmul@f2
  4166  000B18  0009               	tblrd		*+
  4167  000B1A  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  4168  000B1E  000A               	tblrd		*-
  4169  000B20  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  4170  000B24  ECB6  F00A         	call	___ftmul	;wreg free
  4171  000B28  D7A4               	goto	L2
  4172  000B2A                     l5033:
  4173                           
  4174                           ;doprnt.c: 434: return _npowers_[scl];
  4175  000B2A  0100               	movlb	0	; () banked
  4176  000B2C  519B               	movf	scale@scl& (0+255),w,b
  4177  000B2E  0D03               	mullw	3
  4178  000B30  0EF5               	movlw	low __npowers_
  4179  000B32  24F3               	addwf	prodl,w,c
  4180  000B34  6EF6               	movwf	tblptrl,c
  4181  000B36  0EFD               	movlw	high __npowers_
  4182  000B38  20F4               	addwfc	prodh,w,c
  4183  000B3A  6EF7               	movwf	tblptrh,c
  4184  000B3C                     	if	0	;There are less than 3 active tblptr bytes
  4185  000B3C                     	endif
  4186  000B3C  0009               	tblrd		*+
  4187  000B3E  CFF5 F095          	movff	tablat,?_scale
  4188  000B42  0009               	tblrd		*+
  4189  000B44  CFF5 F096          	movff	tablat,?_scale+1
  4190  000B48  000A               	tblrd		*-
  4191  000B4A  CFF5 F097          	movff	tablat,?_scale+2
  4192                           
  4193                           ; BSR set to: 0
  4194  000B4E  0012               	return	
  4195  000B50                     l5037:
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;doprnt.c: 435: }
  4199                           ;doprnt.c: 436: if(scl>=110)
  4200  000B50  0100               	movlb	0	; () banked
  4201  000B52  519B               	movf	scale@scl& (0+255),w,b
  4202  000B54  0A80               	xorlw	128
  4203  000B56  0F12               	addlw	-238
  4204  000B58  A0D8               	btfss	status,0,c
  4205  000B5A  D094               	goto	l5045
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4209  000B5C  0E00               	movlw	0
  4210  000B5E  6E33               	movwf	___wmul@multiplicand+1,c
  4211  000B60  0E03               	movlw	3
  4212  000B62  6E32               	movwf	___wmul@multiplicand,c
  4213  000B64  0E00               	movlw	0
  4214  000B66  6E2B               	movwf	___awdiv@divisor+1,c
  4215  000B68  0E0A               	movlw	10
  4216  000B6A  6E2A               	movwf	___awdiv@divisor,c
  4217  000B6C  0E00               	movlw	0
  4218  000B6E  6E25               	movwf	___awmod@divisor+1,c
  4219  000B70  0E64               	movlw	100
  4220  000B72  6E24               	movwf	___awmod@divisor,c
  4221  000B74  0100               	movlb	0	; () banked
  4222  000B76  519B               	movf	scale@scl& (0+255),w,b
  4223  000B78  6E22               	movwf	___awmod@dividend,c
  4224  000B7A  6A23               	clrf	___awmod@dividend+1,c
  4225  000B7C  BE22               	btfsc	___awmod@dividend,7,c
  4226  000B7E  0623               	decf	___awmod@dividend+1,f,c
  4227  000B80  EC0A  F013         	call	___awmod	;wreg free
  4228  000B84  C022  F028         	movff	?___awmod,___awdiv@dividend
  4229  000B88  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  4230  000B8C  EC4B  F012         	call	___awdiv	;wreg free
  4231  000B90  0E09               	movlw	9
  4232  000B92  2428               	addwf	?___awdiv,w,c
  4233  000B94  6E30               	movwf	___wmul@multiplier,c
  4234  000B96  0E00               	movlw	0
  4235  000B98  2029               	addwfc	?___awdiv+1,w,c
  4236  000B9A  6E31               	movwf	___wmul@multiplier+1,c
  4237  000B9C  EC31  F015         	call	___wmul	;wreg free
  4238  000BA0  0E1C               	movlw	low __powers_
  4239  000BA2  2430               	addwf	?___wmul,w,c
  4240  000BA4  6EF6               	movwf	tblptrl,c
  4241  000BA6  0EFE               	movlw	high __powers_
  4242  000BA8  2031               	addwfc	?___wmul+1,w,c
  4243  000BAA  6EF7               	movwf	tblptrh,c
  4244  000BAC                     	if	0	;There are less than 3 active tblptr bytes
  4245  000BAC                     	endif
  4246  000BAC  0009               	tblrd		*+
  4247  000BAE  CFF5 F089          	movff	tablat,___ftmul@f2
  4248  000BB2  0009               	tblrd		*+
  4249  000BB4  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  4250  000BB8  000A               	tblrd		*-
  4251  000BBA  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  4252  000BBE  0E00               	movlw	0
  4253  000BC0  6E2B               	movwf	___awdiv@divisor+1,c
  4254  000BC2  0E64               	movlw	100
  4255  000BC4  6E2A               	movwf	___awdiv@divisor,c
  4256  000BC6  0100               	movlb	0	; () banked
  4257  000BC8  519B               	movf	scale@scl& (0+255),w,b
  4258  000BCA  6E28               	movwf	___awdiv@dividend,c
  4259  000BCC  6A29               	clrf	___awdiv@dividend+1,c
  4260  000BCE  BE28               	btfsc	___awdiv@dividend,7,c
  4261  000BD0  0629               	decf	___awdiv@dividend+1,f,c
  4262  000BD2  EC4B  F012         	call	___awdiv	;wreg free
  4263  000BD6  0E12               	movlw	18
  4264  000BD8  2428               	addwf	?___awdiv,w,c
  4265  000BDA  6E30               	movwf	___wmul@multiplier,c
  4266  000BDC  0E00               	movlw	0
  4267  000BDE  2029               	addwfc	?___awdiv+1,w,c
  4268  000BE0  6E31               	movwf	___wmul@multiplier+1,c
  4269  000BE2  0E00               	movlw	0
  4270  000BE4  6E33               	movwf	___wmul@multiplicand+1,c
  4271  000BE6  0E03               	movlw	3
  4272  000BE8  6E32               	movwf	___wmul@multiplicand,c
  4273  000BEA  EC31  F015         	call	___wmul	;wreg free
  4274  000BEE  0E1C               	movlw	low __powers_
  4275  000BF0  2430               	addwf	?___wmul,w,c
  4276  000BF2  6EF6               	movwf	tblptrl,c
  4277  000BF4  0EFE               	movlw	high __powers_
  4278  000BF6  2031               	addwfc	?___wmul+1,w,c
  4279  000BF8  6EF7               	movwf	tblptrh,c
  4280  000BFA                     	if	0	;There are less than 3 active tblptr bytes
  4281  000BFA                     	endif
  4282  000BFA  0009               	tblrd		*+
  4283  000BFC  CFF5 F086          	movff	tablat,___ftmul@f1
  4284  000C00  0009               	tblrd		*+
  4285  000C02  CFF5 F087          	movff	tablat,___ftmul@f1+1
  4286  000C06  000A               	tblrd		*-
  4287  000C08  CFF5 F088          	movff	tablat,___ftmul@f1+2
  4288  000C0C  ECB6  F00A         	call	___ftmul	;wreg free
  4289  000C10  C086  F098         	movff	?___ftmul,_scale$1319
  4290  000C14  C087  F099         	movff	?___ftmul+1,_scale$1319+1
  4291  000C18  C088  F09A         	movff	?___ftmul+2,_scale$1319+2
  4292                           
  4293                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4294  000C1C  C098  F086         	movff	_scale$1319,___ftmul@f1
  4295  000C20  C099  F087         	movff	_scale$1319+1,___ftmul@f1+1
  4296  000C24  C09A  F088         	movff	_scale$1319+2,___ftmul@f1+2
  4297  000C28  0E00               	movlw	0
  4298  000C2A  6E33               	movwf	___wmul@multiplicand+1,c
  4299  000C2C  0E03               	movlw	3
  4300  000C2E  6E32               	movwf	___wmul@multiplicand,c
  4301  000C30  0E00               	movlw	0
  4302  000C32  6E25               	movwf	___awmod@divisor+1,c
  4303  000C34  0E0A               	movlw	10
  4304  000C36  6E24               	movwf	___awmod@divisor,c
  4305  000C38  0100               	movlb	0	; () banked
  4306  000C3A  519B               	movf	scale@scl& (0+255),w,b
  4307  000C3C  6E22               	movwf	___awmod@dividend,c
  4308  000C3E  6A23               	clrf	___awmod@dividend+1,c
  4309  000C40  BE22               	btfsc	___awmod@dividend,7,c
  4310  000C42  0623               	decf	___awmod@dividend+1,f,c
  4311  000C44  EC0A  F013         	call	___awmod	;wreg free
  4312  000C48  C022  F030         	movff	?___awmod,___wmul@multiplier
  4313  000C4C  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  4314  000C50  EC31  F015         	call	___wmul	;wreg free
  4315  000C54  0E1C               	movlw	low __powers_
  4316  000C56  2430               	addwf	?___wmul,w,c
  4317  000C58  6EF6               	movwf	tblptrl,c
  4318  000C5A  0EFE               	movlw	high __powers_
  4319  000C5C  2031               	addwfc	?___wmul+1,w,c
  4320  000C5E  6EF7               	movwf	tblptrh,c
  4321  000C60                     	if	0	;There are less than 3 active tblptr bytes
  4322  000C60                     	endif
  4323  000C60  0009               	tblrd		*+
  4324  000C62  CFF5 F089          	movff	tablat,___ftmul@f2
  4325  000C66  0009               	tblrd		*+
  4326  000C68  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  4327  000C6C  000A               	tblrd		*-
  4328  000C6E  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  4329  000C72  ECB6  F00A         	call	___ftmul	;wreg free
  4330  000C76  C086  F095         	movff	?___ftmul,?_scale
  4331  000C7A  C087  F096         	movff	?___ftmul+1,?_scale+1
  4332  000C7E  C088  F097         	movff	?___ftmul+2,?_scale+2
  4333  000C82  0012               	return	
  4334  000C84                     l5045:
  4335                           
  4336                           ;doprnt.c: 438: else if(scl > 10)
  4337  000C84  0100               	movlb	0	; () banked
  4338  000C86  519B               	movf	scale@scl& (0+255),w,b
  4339  000C88  0A80               	xorlw	128
  4340  000C8A  0F75               	addlw	-139
  4341  000C8C  A0D8               	btfss	status,0,c
  4342  000C8E  D04F               	goto	l5051
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4346  000C90  0E00               	movlw	0
  4347  000C92  6E2B               	movwf	___awdiv@divisor+1,c
  4348  000C94  0E0A               	movlw	10
  4349  000C96  6E2A               	movwf	___awdiv@divisor,c
  4350  000C98  0100               	movlb	0	; () banked
  4351  000C9A  519B               	movf	scale@scl& (0+255),w,b
  4352  000C9C  6E28               	movwf	___awdiv@dividend,c
  4353  000C9E  6A29               	clrf	___awdiv@dividend+1,c
  4354  000CA0  BE28               	btfsc	___awdiv@dividend,7,c
  4355  000CA2  0629               	decf	___awdiv@dividend+1,f,c
  4356  000CA4  EC4B  F012         	call	___awdiv	;wreg free
  4357  000CA8  0E09               	movlw	9
  4358  000CAA  2428               	addwf	?___awdiv,w,c
  4359  000CAC  6E30               	movwf	___wmul@multiplier,c
  4360  000CAE  0E00               	movlw	0
  4361  000CB0  2029               	addwfc	?___awdiv+1,w,c
  4362  000CB2  6E31               	movwf	___wmul@multiplier+1,c
  4363  000CB4  0E00               	movlw	0
  4364  000CB6  6E33               	movwf	___wmul@multiplicand+1,c
  4365  000CB8  0E03               	movlw	3
  4366  000CBA  6E32               	movwf	___wmul@multiplicand,c
  4367  000CBC  EC31  F015         	call	___wmul	;wreg free
  4368  000CC0  0E1C               	movlw	low __powers_
  4369  000CC2  2430               	addwf	?___wmul,w,c
  4370  000CC4  6EF6               	movwf	tblptrl,c
  4371  000CC6  0EFE               	movlw	high __powers_
  4372  000CC8  2031               	addwfc	?___wmul+1,w,c
  4373  000CCA  6EF7               	movwf	tblptrh,c
  4374  000CCC                     	if	0	;There are less than 3 active tblptr bytes
  4375  000CCC                     	endif
  4376  000CCC  0009               	tblrd		*+
  4377  000CCE  CFF5 F086          	movff	tablat,___ftmul@f1
  4378  000CD2  0009               	tblrd		*+
  4379  000CD4  CFF5 F087          	movff	tablat,___ftmul@f1+1
  4380  000CD8  000A               	tblrd		*-
  4381  000CDA  CFF5 F088          	movff	tablat,___ftmul@f1+2
  4382  000CDE  0E00               	movlw	0
  4383  000CE0  6E33               	movwf	___wmul@multiplicand+1,c
  4384  000CE2  0E03               	movlw	3
  4385  000CE4  6E32               	movwf	___wmul@multiplicand,c
  4386  000CE6  0E00               	movlw	0
  4387  000CE8  6E25               	movwf	___awmod@divisor+1,c
  4388  000CEA  0E0A               	movlw	10
  4389  000CEC  6E24               	movwf	___awmod@divisor,c
  4390  000CEE  0100               	movlb	0	; () banked
  4391  000CF0  519B               	movf	scale@scl& (0+255),w,b
  4392  000CF2  6E22               	movwf	___awmod@dividend,c
  4393  000CF4  6A23               	clrf	___awmod@dividend+1,c
  4394  000CF6  BE22               	btfsc	___awmod@dividend,7,c
  4395  000CF8  0623               	decf	___awmod@dividend+1,f,c
  4396  000CFA  EC0A  F013         	call	___awmod	;wreg free
  4397  000CFE  C022  F030         	movff	?___awmod,___wmul@multiplier
  4398  000D02  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  4399  000D06  EC31  F015         	call	___wmul	;wreg free
  4400  000D0A  0E1C               	movlw	low __powers_
  4401  000D0C  2430               	addwf	?___wmul,w,c
  4402  000D0E  6EF6               	movwf	tblptrl,c
  4403  000D10  0EFE               	movlw	high __powers_
  4404  000D12  2031               	addwfc	?___wmul+1,w,c
  4405  000D14  6EF7               	movwf	tblptrh,c
  4406  000D16                     	if	0	;There are less than 3 active tblptr bytes
  4407  000D16                     	endif
  4408  000D16  0009               	tblrd		*+
  4409  000D18  CFF5 F089          	movff	tablat,___ftmul@f2
  4410  000D1C  0009               	tblrd		*+
  4411  000D1E  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  4412  000D22  000A               	tblrd		*-
  4413  000D24  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  4414  000D28  ECB6  F00A         	call	___ftmul	;wreg free
  4415  000D2C  D7A4               	goto	L3
  4416  000D2E                     l5051:
  4417                           
  4418                           ;doprnt.c: 440: return _powers_[scl];
  4419  000D2E  0100               	movlb	0	; () banked
  4420  000D30  519B               	movf	scale@scl& (0+255),w,b
  4421  000D32  0D03               	mullw	3
  4422  000D34  0E1C               	movlw	low __powers_
  4423  000D36  24F3               	addwf	prodl,w,c
  4424  000D38  6EF6               	movwf	tblptrl,c
  4425  000D3A  0EFE               	movlw	high __powers_
  4426  000D3C  20F4               	addwfc	prodh,w,c
  4427  000D3E  6EF7               	movwf	tblptrh,c
  4428  000D40                     	if	0	;There are less than 3 active tblptr bytes
  4429  000D40                     	endif
  4430  000D40  0009               	tblrd		*+
  4431  000D42  CFF5 F095          	movff	tablat,?_scale
  4432  000D46  0009               	tblrd		*+
  4433  000D48  CFF5 F096          	movff	tablat,?_scale+1
  4434  000D4C  000A               	tblrd		*-
  4435  000D4E  CFF5 F097          	movff	tablat,?_scale+2
  4436  000D52  0012               	return	
  4437  000D54                     __end_of_scale:
  4438                           	opt stack 0
  4439                           tblptru	equ	0xFF8
  4440                           tblptrh	equ	0xFF7
  4441                           tblptrl	equ	0xFF6
  4442                           tablat	equ	0xFF5
  4443                           prodh	equ	0xFF4
  4444                           prodl	equ	0xFF3
  4445                           postinc0	equ	0xFEE
  4446                           wreg	equ	0xFE8
  4447                           postdec1	equ	0xFE5
  4448                           fsr1l	equ	0xFE1
  4449                           indf2	equ	0xFDF
  4450                           postinc2	equ	0xFDE
  4451                           postdec2	equ	0xFDD
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456 ;; *************** function _putch *****************
  4457 ;; Defined at:
  4458 ;;		line 35 in file "lcd.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  data            1    wreg     unsigned char 
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;  data            1   37[COMRAM] unsigned char 
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, status,2, status,0, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;Total ram usage:        1 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    6
  4479 ;; This function calls:
  4480 ;;		_lcdNewline
  4481 ;;		_lcdNibble
  4482 ;; This function is called by:
  4483 ;;		_printf
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text6
  4488  002AAC                     __ptext6:
  4489                           	opt stack 0
  4490  002AAC                     _putch:
  4491                           	opt stack 22
  4492                           
  4493                           ;incstack = 0
  4494                           ;putch@data stored from wreg
  4495  002AAC  6E26               	movwf	putch@data,c
  4496                           
  4497                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  4498  002AAE  0E0A               	movlw	10
  4499  002AB0  1826               	xorwf	putch@data,w,c
  4500  002AB2  A4D8               	btfss	status,2,c
  4501  002AB4  D003               	goto	l163
  4502  002AB6  ECA8  F015         	call	_lcdNewline	;wreg free
  4503  002ABA  0012               	return	
  4504  002ABC                     l163:
  4505                           
  4506                           ;lcd.c: 37: else
  4507                           ;lcd.c: 38: {
  4508                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  4509  002ABC  848C               	bsf	3980,2,c	;volatile
  4510                           
  4511                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  4512  002ABE  0E74               	movlw	116
  4513  002AC0                     u5957:
  4514  002AC0  2EE8               	decfsz	wreg,f,c
  4515  002AC2  D7FE               	bra	u5957
  4516  002AC4  D000               	nop2	
  4517                           
  4518                           ;lcd.c: 41: lcdNibble(data);
  4519  002AC6  5026               	movf	putch@data,w,c
  4520  002AC8  ECAD  F013         	call	_lcdNibble
  4521  002ACC  0012               	return	
  4522  002ACE                     __end_of_putch:
  4523                           	opt stack 0
  4524                           tblptru	equ	0xFF8
  4525                           tblptrh	equ	0xFF7
  4526                           tblptrl	equ	0xFF6
  4527                           tablat	equ	0xFF5
  4528                           prodh	equ	0xFF4
  4529                           prodl	equ	0xFF3
  4530                           postinc0	equ	0xFEE
  4531                           wreg	equ	0xFE8
  4532                           postdec1	equ	0xFE5
  4533                           fsr1l	equ	0xFE1
  4534                           indf2	equ	0xFDF
  4535                           postinc2	equ	0xFDE
  4536                           postdec2	equ	0xFDD
  4537                           fsr2h	equ	0xFDA
  4538                           fsr2l	equ	0xFD9
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function _lcdNewline *****************
  4542 ;; Defined at:
  4543 ;;		line 78 in file "lcd.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;		None
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;		None
  4548 ;; Return value:  Size  Location     Type
  4549 ;;                  1    wreg      void 
  4550 ;; Registers used:
  4551 ;;		wreg, status,2, status,0, cstack
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;Total ram usage:        0 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; Hardware stack levels required when called:    5
  4564 ;; This function calls:
  4565 ;;		_lcdInst
  4566 ;; This function is called by:
  4567 ;;		_putch
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text7
  4572  002B50                     __ptext7:
  4573                           	opt stack 0
  4574  002B50                     _lcdNewline:
  4575                           	opt stack 22
  4576                           
  4577                           ;lcd.c: 79: lcdInst(0b11000000);
  4578                           
  4579                           ;incstack = 0
  4580  002B50  0EC0               	movlw	192
  4581  002B52  EC67  F015         	call	_lcdInst
  4582  002B56  0012               	return		;funcret
  4583  002B58                     __end_of_lcdNewline:
  4584                           	opt stack 0
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           postinc0	equ	0xFEE
  4592                           wreg	equ	0xFE8
  4593                           postdec1	equ	0xFE5
  4594                           fsr1l	equ	0xFE1
  4595                           indf2	equ	0xFDF
  4596                           postinc2	equ	0xFDE
  4597                           postdec2	equ	0xFDD
  4598                           fsr2h	equ	0xFDA
  4599                           fsr2l	equ	0xFD9
  4600                           status	equ	0xFD8
  4601                           
  4602 ;; *************** function _fround *****************
  4603 ;; Defined at:
  4604 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  prec            1    wreg     unsigned char 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  prec            1   30[BANK0 ] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  3   21[BANK0 ] unsigned char 
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4618 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;Total ram usage:       10 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    5
  4625 ;; This function calls:
  4626 ;;		___awdiv
  4627 ;;		___awmod
  4628 ;;		___ftmul
  4629 ;;		___wmul
  4630 ;; This function is called by:
  4631 ;;		_printf
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text8
  4636  00130C                     __ptext8:
  4637                           	opt stack 0
  4638  00130C                     _fround:
  4639                           	opt stack 23
  4640                           
  4641                           ;incstack = 0
  4642                           ;fround@prec stored from wreg
  4643  00130C  0100               	movlb	0	; () banked
  4644  00130E  6F9E               	movwf	fround@prec& (0+255),b
  4645                           
  4646                           ;doprnt.c: 413: if(prec>=110)
  4647  001310  0E6D               	movlw	109
  4648  001312  0100               	movlb	0	; () banked
  4649  001314  659E               	cpfsgt	fround@prec& (0+255),b
  4650  001316  D0A2               	goto	l5005
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4654  001318  0E00               	movlw	0
  4655  00131A  6E33               	movwf	___wmul@multiplicand+1,c
  4656  00131C  0E03               	movlw	3
  4657  00131E  6E32               	movwf	___wmul@multiplicand,c
  4658  001320  0E00               	movlw	0
  4659  001322  6E2B               	movwf	___awdiv@divisor+1,c
  4660  001324  0E0A               	movlw	10
  4661  001326  6E2A               	movwf	___awdiv@divisor,c
  4662  001328  0E00               	movlw	0
  4663  00132A  6E25               	movwf	___awmod@divisor+1,c
  4664  00132C  0E64               	movlw	100
  4665  00132E  6E24               	movwf	___awmod@divisor,c
  4666  001330  C09E  F022         	movff	fround@prec,___awmod@dividend
  4667  001334  6A23               	clrf	___awmod@dividend+1,c
  4668  001336  EC0A  F013         	call	___awmod	;wreg free
  4669  00133A  C022  F028         	movff	?___awmod,___awdiv@dividend
  4670  00133E  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  4671  001342  EC4B  F012         	call	___awdiv	;wreg free
  4672  001346  0E09               	movlw	9
  4673  001348  2428               	addwf	?___awdiv,w,c
  4674  00134A  6E30               	movwf	___wmul@multiplier,c
  4675  00134C  0E00               	movlw	0
  4676  00134E  2029               	addwfc	?___awdiv+1,w,c
  4677  001350  6E31               	movwf	___wmul@multiplier+1,c
  4678  001352  EC31  F015         	call	___wmul	;wreg free
  4679  001356  0EF5               	movlw	low __npowers_
  4680  001358  2430               	addwf	?___wmul,w,c
  4681  00135A  6EF6               	movwf	tblptrl,c
  4682  00135C  0EFD               	movlw	high __npowers_
  4683  00135E  2031               	addwfc	?___wmul+1,w,c
  4684  001360  6EF7               	movwf	tblptrh,c
  4685  001362                     	if	0	;There are less than 3 active tblptr bytes
  4686  001362                     	endif
  4687  001362  0009               	tblrd		*+
  4688  001364  CFF5 F089          	movff	tablat,___ftmul@f2
  4689  001368  0009               	tblrd		*+
  4690  00136A  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  4691  00136E  000A               	tblrd		*-
  4692  001370  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  4693  001374  0E00               	movlw	0
  4694  001376  6E2B               	movwf	___awdiv@divisor+1,c
  4695  001378  0E64               	movlw	100
  4696  00137A  6E2A               	movwf	___awdiv@divisor,c
  4697  00137C  C09E  F028         	movff	fround@prec,___awdiv@dividend
  4698  001380  6A29               	clrf	___awdiv@dividend+1,c
  4699  001382  EC4B  F012         	call	___awdiv	;wreg free
  4700  001386  0E12               	movlw	18
  4701  001388  2428               	addwf	?___awdiv,w,c
  4702  00138A  6E30               	movwf	___wmul@multiplier,c
  4703  00138C  0E00               	movlw	0
  4704  00138E  2029               	addwfc	?___awdiv+1,w,c
  4705  001390  6E31               	movwf	___wmul@multiplier+1,c
  4706  001392  0E00               	movlw	0
  4707  001394  6E33               	movwf	___wmul@multiplicand+1,c
  4708  001396  0E03               	movlw	3
  4709  001398  6E32               	movwf	___wmul@multiplicand,c
  4710  00139A  EC31  F015         	call	___wmul	;wreg free
  4711  00139E  0EF5               	movlw	low __npowers_
  4712  0013A0  2430               	addwf	?___wmul,w,c
  4713  0013A2  6EF6               	movwf	tblptrl,c
  4714  0013A4  0EFD               	movlw	high __npowers_
  4715  0013A6  2031               	addwfc	?___wmul+1,w,c
  4716  0013A8  6EF7               	movwf	tblptrh,c
  4717  0013AA                     	if	0	;There are less than 3 active tblptr bytes
  4718  0013AA                     	endif
  4719  0013AA  0009               	tblrd		*+
  4720  0013AC  CFF5 F086          	movff	tablat,___ftmul@f1
  4721  0013B0  0009               	tblrd		*+
  4722  0013B2  CFF5 F087          	movff	tablat,___ftmul@f1+1
  4723  0013B6  000A               	tblrd		*-
  4724  0013B8  CFF5 F088          	movff	tablat,___ftmul@f1+2
  4725  0013BC  ECB6  F00A         	call	___ftmul	;wreg free
  4726  0013C0  C086  F09B         	movff	?___ftmul,_fround$1317
  4727  0013C4  C087  F09C         	movff	?___ftmul+1,_fround$1317+1
  4728  0013C8  C088  F09D         	movff	?___ftmul+2,_fround$1317+2
  4729                           
  4730                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4731  0013CC  0E00               	movlw	0
  4732  0013CE  6E33               	movwf	___wmul@multiplicand+1,c
  4733  0013D0  0E03               	movlw	3
  4734  0013D2  6E32               	movwf	___wmul@multiplicand,c
  4735  0013D4  0E00               	movlw	0
  4736  0013D6  6E25               	movwf	___awmod@divisor+1,c
  4737  0013D8  0E0A               	movlw	10
  4738  0013DA  6E24               	movwf	___awmod@divisor,c
  4739  0013DC  C09E  F022         	movff	fround@prec,___awmod@dividend
  4740  0013E0  6A23               	clrf	___awmod@dividend+1,c
  4741  0013E2  EC0A  F013         	call	___awmod	;wreg free
  4742  0013E6  C022  F030         	movff	?___awmod,___wmul@multiplier
  4743  0013EA  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  4744  0013EE  EC31  F015         	call	___wmul	;wreg free
  4745  0013F2  0EF5               	movlw	low __npowers_
  4746  0013F4  2430               	addwf	?___wmul,w,c
  4747  0013F6  6EF6               	movwf	tblptrl,c
  4748  0013F8  0EFD               	movlw	high __npowers_
  4749  0013FA  2031               	addwfc	?___wmul+1,w,c
  4750  0013FC  6EF7               	movwf	tblptrh,c
  4751  0013FE                     	if	0	;There are less than 3 active tblptr bytes
  4752  0013FE                     	endif
  4753  0013FE  0009               	tblrd		*+
  4754  001400  CFF5 F089          	movff	tablat,___ftmul@f2
  4755  001404  0009               	tblrd		*+
  4756  001406  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  4757  00140A  000A               	tblrd		*-
  4758  00140C  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  4759  001410  C09B  F086         	movff	_fround$1317,___ftmul@f1
  4760  001414  C09C  F087         	movff	_fround$1317+1,___ftmul@f1+1
  4761  001418  C09D  F088         	movff	_fround$1317+2,___ftmul@f1+2
  4762  00141C  ECB6  F00A         	call	___ftmul	;wreg free
  4763  001420  C086  F098         	movff	?___ftmul,_fround$1318
  4764  001424  C087  F099         	movff	?___ftmul+1,_fround$1318+1
  4765  001428  C088  F09A         	movff	?___ftmul+2,_fround$1318+2
  4766                           
  4767                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4768  00142C  C098  F086         	movff	_fround$1318,___ftmul@f1
  4769  001430  C099  F087         	movff	_fround$1318+1,___ftmul@f1+1
  4770  001434  C09A  F088         	movff	_fround$1318+2,___ftmul@f1+2
  4771  001438  0E00               	movlw	0
  4772  00143A  0100               	movlb	0	; () banked
  4773  00143C  6F89               	movwf	___ftmul@f2& (0+255),b
  4774  00143E  0E00               	movlw	0
  4775  001440  0100               	movlb	0	; () banked
  4776  001442  6F8A               	movwf	(___ftmul@f2+1)& (0+255),b
  4777  001444  0E3F               	movlw	63
  4778  001446  0100               	movlb	0	; () banked
  4779  001448  6F8B               	movwf	(___ftmul@f2+2)& (0+255),b
  4780  00144A  ECB6  F00A         	call	___ftmul	;wreg free
  4781  00144E  C086  F095         	movff	?___ftmul,?_fround
  4782  001452  C087  F096         	movff	?___ftmul+1,?_fround+1
  4783  001456  C088  F097         	movff	?___ftmul+2,?_fround+2
  4784  00145A  0012               	return	
  4785  00145C                     l5005:
  4786                           
  4787                           ;doprnt.c: 415: else if(prec > 10)
  4788  00145C  0E0A               	movlw	10
  4789  00145E  0100               	movlb	0	; () banked
  4790  001460  659E               	cpfsgt	fround@prec& (0+255),b
  4791  001462  D060               	goto	l5013
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4795  001464  0E00               	movlw	0
  4796  001466  6E33               	movwf	___wmul@multiplicand+1,c
  4797  001468  0E03               	movlw	3
  4798  00146A  6E32               	movwf	___wmul@multiplicand,c
  4799  00146C  0E00               	movlw	0
  4800  00146E  6E25               	movwf	___awmod@divisor+1,c
  4801  001470  0E0A               	movlw	10
  4802  001472  6E24               	movwf	___awmod@divisor,c
  4803  001474  C09E  F022         	movff	fround@prec,___awmod@dividend
  4804  001478  6A23               	clrf	___awmod@dividend+1,c
  4805  00147A  EC0A  F013         	call	___awmod	;wreg free
  4806  00147E  C022  F030         	movff	?___awmod,___wmul@multiplier
  4807  001482  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  4808  001486  EC31  F015         	call	___wmul	;wreg free
  4809  00148A  0EF5               	movlw	low __npowers_
  4810  00148C  2430               	addwf	?___wmul,w,c
  4811  00148E  6EF6               	movwf	tblptrl,c
  4812  001490  0EFD               	movlw	high __npowers_
  4813  001492  2031               	addwfc	?___wmul+1,w,c
  4814  001494  6EF7               	movwf	tblptrh,c
  4815  001496                     	if	0	;There are less than 3 active tblptr bytes
  4816  001496                     	endif
  4817  001496  0009               	tblrd		*+
  4818  001498  CFF5 F089          	movff	tablat,___ftmul@f2
  4819  00149C  0009               	tblrd		*+
  4820  00149E  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  4821  0014A2  000A               	tblrd		*-
  4822  0014A4  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  4823  0014A8  0E00               	movlw	0
  4824  0014AA  6E2B               	movwf	___awdiv@divisor+1,c
  4825  0014AC  0E0A               	movlw	10
  4826  0014AE  6E2A               	movwf	___awdiv@divisor,c
  4827  0014B0  C09E  F028         	movff	fround@prec,___awdiv@dividend
  4828  0014B4  6A29               	clrf	___awdiv@dividend+1,c
  4829  0014B6  EC4B  F012         	call	___awdiv	;wreg free
  4830  0014BA  0E09               	movlw	9
  4831  0014BC  2428               	addwf	?___awdiv,w,c
  4832  0014BE  6E30               	movwf	___wmul@multiplier,c
  4833  0014C0  0E00               	movlw	0
  4834  0014C2  2029               	addwfc	?___awdiv+1,w,c
  4835  0014C4  6E31               	movwf	___wmul@multiplier+1,c
  4836  0014C6  0E00               	movlw	0
  4837  0014C8  6E33               	movwf	___wmul@multiplicand+1,c
  4838  0014CA  0E03               	movlw	3
  4839  0014CC  6E32               	movwf	___wmul@multiplicand,c
  4840  0014CE  EC31  F015         	call	___wmul	;wreg free
  4841  0014D2  0EF5               	movlw	low __npowers_
  4842  0014D4  2430               	addwf	?___wmul,w,c
  4843  0014D6  6EF6               	movwf	tblptrl,c
  4844  0014D8  0EFD               	movlw	high __npowers_
  4845  0014DA  2031               	addwfc	?___wmul+1,w,c
  4846  0014DC  6EF7               	movwf	tblptrh,c
  4847  0014DE                     	if	0	;There are less than 3 active tblptr bytes
  4848  0014DE                     	endif
  4849  0014DE  0009               	tblrd		*+
  4850  0014E0  CFF5 F086          	movff	tablat,___ftmul@f1
  4851  0014E4  0009               	tblrd		*+
  4852  0014E6  CFF5 F087          	movff	tablat,___ftmul@f1+1
  4853  0014EA  000A               	tblrd		*-
  4854  0014EC  CFF5 F088          	movff	tablat,___ftmul@f1+2
  4855  0014F0  ECB6  F00A         	call	___ftmul	;wreg free
  4856  0014F4  C086  F09B         	movff	?___ftmul,_fround$1317
  4857  0014F8  C087  F09C         	movff	?___ftmul+1,_fround$1317+1
  4858  0014FC  C088  F09D         	movff	?___ftmul+2,_fround$1317+2
  4859                           
  4860                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4861  001500  C09B  F086         	movff	_fround$1317,___ftmul@f1
  4862  001504  C09C  F087         	movff	_fround$1317+1,___ftmul@f1+1
  4863  001508  C09D  F088         	movff	_fround$1317+2,___ftmul@f1+2
  4864  00150C  0E00               	movlw	0
  4865  00150E  0100               	movlb	0	; () banked
  4866  001510  6F89               	movwf	___ftmul@f2& (0+255),b
  4867  001512  0E00               	movlw	0
  4868  001514  0100               	movlb	0	; () banked
  4869  001516  6F8A               	movwf	(___ftmul@f2+1)& (0+255),b
  4870  001518  0E3F               	movlw	63
  4871  00151A  0100               	movlb	0	; () banked
  4872  00151C  6F8B               	movwf	(___ftmul@f2+2)& (0+255),b
  4873  00151E  ECB6  F00A         	call	___ftmul	;wreg free
  4874  001522  D795               	goto	L4
  4875  001524                     l5013:
  4876                           
  4877                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4878  001524  0100               	movlb	0	; () banked
  4879  001526  519E               	movf	fround@prec& (0+255),w,b
  4880  001528  0D03               	mullw	3
  4881  00152A  0EF5               	movlw	low __npowers_
  4882  00152C  24F3               	addwf	prodl,w,c
  4883  00152E  6EF6               	movwf	tblptrl,c
  4884  001530  0EFD               	movlw	high __npowers_
  4885  001532  20F4               	addwfc	prodh,w,c
  4886  001534  6EF7               	movwf	tblptrh,c
  4887  001536                     	if	0	;There are less than 3 active tblptr bytes
  4888  001536                     	endif
  4889  001536  0009               	tblrd		*+
  4890  001538  CFF5 F086          	movff	tablat,___ftmul@f1
  4891  00153C  0009               	tblrd		*+
  4892  00153E  CFF5 F087          	movff	tablat,___ftmul@f1+1
  4893  001542  000A               	tblrd		*-
  4894  001544  CFF5 F088          	movff	tablat,___ftmul@f1+2
  4895  001548  0E00               	movlw	0
  4896  00154A  0100               	movlb	0	; () banked
  4897  00154C  6F89               	movwf	___ftmul@f2& (0+255),b
  4898  00154E  0E00               	movlw	0
  4899  001550  0100               	movlb	0	; () banked
  4900  001552  6F8A               	movwf	(___ftmul@f2+1)& (0+255),b
  4901  001554  0E3F               	movlw	63
  4902  001556  0100               	movlb	0	; () banked
  4903  001558  6F8B               	movwf	(___ftmul@f2+2)& (0+255),b
  4904  00155A  ECB6  F00A         	call	___ftmul	;wreg free
  4905  00155E  C086  F095         	movff	?___ftmul,?_fround
  4906  001562  C087  F096         	movff	?___ftmul+1,?_fround+1
  4907  001566  C088  F097         	movff	?___ftmul+2,?_fround+2
  4908  00156A  0012               	return	
  4909  00156C                     __end_of_fround:
  4910                           	opt stack 0
  4911                           tblptru	equ	0xFF8
  4912                           tblptrh	equ	0xFF7
  4913                           tblptrl	equ	0xFF6
  4914                           tablat	equ	0xFF5
  4915                           prodh	equ	0xFF4
  4916                           prodl	equ	0xFF3
  4917                           postinc0	equ	0xFEE
  4918                           wreg	equ	0xFE8
  4919                           postdec1	equ	0xFE5
  4920                           fsr1l	equ	0xFE1
  4921                           indf2	equ	0xFDF
  4922                           postinc2	equ	0xFDE
  4923                           postdec2	equ	0xFDD
  4924                           fsr2h	equ	0xFDA
  4925                           fsr2l	equ	0xFD9
  4926                           status	equ	0xFD8
  4927                           
  4928 ;; *************** function ___wmul *****************
  4929 ;; Defined at:
  4930 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  multiplier      2   47[COMRAM] unsigned int 
  4933 ;;  multiplicand    2   49[COMRAM] unsigned int 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  product         2   51[COMRAM] unsigned int 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  2   47[COMRAM] unsigned int 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0, prodl, prodh
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4945 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4948 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4949 ;;Total ram usage:        6 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    3
  4952 ;; This function calls:
  4953 ;;		Nothing
  4954 ;; This function is called by:
  4955 ;;		_fround
  4956 ;;		_scale
  4957 ;;		_printf
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text9
  4962  002A62                     __ptext9:
  4963                           	opt stack 0
  4964  002A62                     ___wmul:
  4965                           	opt stack 24
  4966                           
  4967                           ;incstack = 0
  4968  002A62  5030               	movf	___wmul@multiplier,w,c
  4969  002A64  0232               	mulwf	___wmul@multiplicand,c
  4970  002A66  CFF3 F034          	movff	prodl,___wmul@product
  4971  002A6A  CFF4 F035          	movff	prodh,___wmul@product+1
  4972  002A6E  5030               	movf	___wmul@multiplier,w,c
  4973  002A70  0233               	mulwf	___wmul@multiplicand+1,c
  4974  002A72  50F3               	movf	prodl,w,c
  4975  002A74  2635               	addwf	___wmul@product+1,f,c
  4976  002A76  5031               	movf	___wmul@multiplier+1,w,c
  4977  002A78  0232               	mulwf	___wmul@multiplicand,c
  4978  002A7A  50F3               	movf	prodl,w,c
  4979  002A7C  2635               	addwf	___wmul@product+1,f,c
  4980  002A7E  C034  F030         	movff	___wmul@product,?___wmul
  4981  002A82  C035  F031         	movff	___wmul@product+1,?___wmul+1
  4982  002A86  0012               	return	
  4983  002A88                     __end_of___wmul:
  4984                           	opt stack 0
  4985                           tblptru	equ	0xFF8
  4986                           tblptrh	equ	0xFF7
  4987                           tblptrl	equ	0xFF6
  4988                           tablat	equ	0xFF5
  4989                           prodh	equ	0xFF4
  4990                           prodl	equ	0xFF3
  4991                           postinc0	equ	0xFEE
  4992                           wreg	equ	0xFE8
  4993                           postdec1	equ	0xFE5
  4994                           fsr1l	equ	0xFE1
  4995                           indf2	equ	0xFDF
  4996                           postinc2	equ	0xFDE
  4997                           postdec2	equ	0xFDD
  4998                           fsr2h	equ	0xFDA
  4999                           fsr2l	equ	0xFD9
  5000                           status	equ	0xFD8
  5001                           
  5002 ;; *************** function ___awmod *****************
  5003 ;; Defined at:
  5004 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;  dividend        2   33[COMRAM] int 
  5007 ;;  divisor         2   35[COMRAM] int 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  sign            1   38[COMRAM] unsigned char 
  5010 ;;  counter         1   37[COMRAM] unsigned char 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  2   33[COMRAM] int 
  5013 ;; Registers used:
  5014 ;;		wreg, status,2, status,0
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5020 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;Total ram usage:        6 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    3
  5027 ;; This function calls:
  5028 ;;		Nothing
  5029 ;; This function is called by:
  5030 ;;		_fround
  5031 ;;		_scale
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text10
  5036  002614                     __ptext10:
  5037                           	opt stack 0
  5038  002614                     ___awmod:
  5039                           	opt stack 24
  5040                           
  5041                           ;incstack = 0
  5042  002614  0E00               	movlw	0
  5043  002616  6E27               	movwf	___awmod@sign,c
  5044  002618  AE23               	btfss	___awmod@dividend+1,7,c
  5045  00261A  D006               	goto	l4959
  5046  00261C  6C22               	negf	___awmod@dividend,c
  5047  00261E  1E23               	comf	___awmod@dividend+1,f,c
  5048  002620  B0D8               	btfsc	status,0,c
  5049  002622  2A23               	incf	___awmod@dividend+1,f,c
  5050  002624  0E01               	movlw	1
  5051  002626  6E27               	movwf	___awmod@sign,c
  5052  002628                     l4959:
  5053  002628  AE25               	btfss	___awmod@divisor+1,7,c
  5054  00262A  D004               	goto	l4963
  5055  00262C  6C24               	negf	___awmod@divisor,c
  5056  00262E  1E25               	comf	___awmod@divisor+1,f,c
  5057  002630  B0D8               	btfsc	status,0,c
  5058  002632  2A25               	incf	___awmod@divisor+1,f,c
  5059  002634                     l4963:
  5060  002634  5024               	movf	___awmod@divisor,w,c
  5061  002636  1025               	iorwf	___awmod@divisor+1,w,c
  5062  002638  B4D8               	btfsc	status,2,c
  5063  00263A  D018               	goto	l4979
  5064  00263C  0E01               	movlw	1
  5065  00263E  6E26               	movwf	___awmod@counter,c
  5066  002640  D004               	goto	l4969
  5067  002642                     l4967:
  5068  002642  90D8               	bcf	status,0,c
  5069  002644  3624               	rlcf	___awmod@divisor,f,c
  5070  002646  3625               	rlcf	___awmod@divisor+1,f,c
  5071  002648  2A26               	incf	___awmod@counter,f,c
  5072  00264A                     l4969:
  5073  00264A  AE25               	btfss	___awmod@divisor+1,7,c
  5074  00264C  D7FA               	goto	l4967
  5075  00264E                     l4971:
  5076  00264E  5024               	movf	___awmod@divisor,w,c
  5077  002650  5C22               	subwf	___awmod@dividend,w,c
  5078  002652  5025               	movf	___awmod@divisor+1,w,c
  5079  002654  5823               	subwfb	___awmod@dividend+1,w,c
  5080  002656  A0D8               	btfss	status,0,c
  5081  002658  D004               	goto	l4975
  5082  00265A  5024               	movf	___awmod@divisor,w,c
  5083  00265C  5E22               	subwf	___awmod@dividend,f,c
  5084  00265E  5025               	movf	___awmod@divisor+1,w,c
  5085  002660  5A23               	subwfb	___awmod@dividend+1,f,c
  5086  002662                     l4975:
  5087  002662  90D8               	bcf	status,0,c
  5088  002664  3225               	rrcf	___awmod@divisor+1,f,c
  5089  002666  3224               	rrcf	___awmod@divisor,f,c
  5090  002668  2E26               	decfsz	___awmod@counter,f,c
  5091  00266A  D7F1               	goto	l4971
  5092  00266C                     l4979:
  5093  00266C  5027               	movf	___awmod@sign,w,c
  5094  00266E  B4D8               	btfsc	status,2,c
  5095  002670  D004               	goto	l4983
  5096  002672  6C22               	negf	___awmod@dividend,c
  5097  002674  1E23               	comf	___awmod@dividend+1,f,c
  5098  002676  B0D8               	btfsc	status,0,c
  5099  002678  2A23               	incf	___awmod@dividend+1,f,c
  5100  00267A                     l4983:
  5101  00267A  C022  F022         	movff	___awmod@dividend,?___awmod
  5102  00267E  C023  F023         	movff	___awmod@dividend+1,?___awmod+1
  5103  002682  0012               	return	
  5104  002684                     __end_of___awmod:
  5105                           	opt stack 0
  5106                           tblptru	equ	0xFF8
  5107                           tblptrh	equ	0xFF7
  5108                           tblptrl	equ	0xFF6
  5109                           tablat	equ	0xFF5
  5110                           prodh	equ	0xFF4
  5111                           prodl	equ	0xFF3
  5112                           postinc0	equ	0xFEE
  5113                           wreg	equ	0xFE8
  5114                           postdec1	equ	0xFE5
  5115                           fsr1l	equ	0xFE1
  5116                           indf2	equ	0xFDF
  5117                           postinc2	equ	0xFDE
  5118                           postdec2	equ	0xFDD
  5119                           fsr2h	equ	0xFDA
  5120                           fsr2l	equ	0xFD9
  5121                           status	equ	0xFD8
  5122                           
  5123 ;; *************** function ___awdiv *****************
  5124 ;; Defined at:
  5125 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;  dividend        2   39[COMRAM] int 
  5128 ;;  divisor         2   41[COMRAM] int 
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;  quotient        2   45[COMRAM] int 
  5131 ;;  sign            1   44[COMRAM] unsigned char 
  5132 ;;  counter         1   43[COMRAM] unsigned char 
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  2   39[COMRAM] int 
  5135 ;; Registers used:
  5136 ;;		wreg, status,2, status,0
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5145 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5146 ;;Total ram usage:        8 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    3
  5149 ;; This function calls:
  5150 ;;		Nothing
  5151 ;; This function is called by:
  5152 ;;		_fround
  5153 ;;		_scale
  5154 ;;		_printf
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text11
  5159  002496                     __ptext11:
  5160                           	opt stack 0
  5161  002496                     ___awdiv:
  5162                           	opt stack 24
  5163                           
  5164                           ;incstack = 0
  5165  002496  0E00               	movlw	0
  5166  002498  6E2D               	movwf	___awdiv@sign,c
  5167  00249A  AE2B               	btfss	___awdiv@divisor+1,7,c
  5168  00249C  D006               	goto	l4915
  5169  00249E  6C2A               	negf	___awdiv@divisor,c
  5170  0024A0  1E2B               	comf	___awdiv@divisor+1,f,c
  5171  0024A2  B0D8               	btfsc	status,0,c
  5172  0024A4  2A2B               	incf	___awdiv@divisor+1,f,c
  5173  0024A6  0E01               	movlw	1
  5174  0024A8  6E2D               	movwf	___awdiv@sign,c
  5175  0024AA                     l4915:
  5176  0024AA  AE29               	btfss	___awdiv@dividend+1,7,c
  5177  0024AC  D006               	goto	l4921
  5178  0024AE  6C28               	negf	___awdiv@dividend,c
  5179  0024B0  1E29               	comf	___awdiv@dividend+1,f,c
  5180  0024B2  B0D8               	btfsc	status,0,c
  5181  0024B4  2A29               	incf	___awdiv@dividend+1,f,c
  5182  0024B6  0E01               	movlw	1
  5183  0024B8  1A2D               	xorwf	___awdiv@sign,f,c
  5184  0024BA                     l4921:
  5185  0024BA  0E00               	movlw	0
  5186  0024BC  6E2F               	movwf	___awdiv@quotient+1,c
  5187  0024BE  0E00               	movlw	0
  5188  0024C0  6E2E               	movwf	___awdiv@quotient,c
  5189  0024C2  502A               	movf	___awdiv@divisor,w,c
  5190  0024C4  102B               	iorwf	___awdiv@divisor+1,w,c
  5191  0024C6  B4D8               	btfsc	status,2,c
  5192  0024C8  D01C               	goto	l4943
  5193  0024CA  0E01               	movlw	1
  5194  0024CC  6E2C               	movwf	___awdiv@counter,c
  5195  0024CE  D004               	goto	l4929
  5196  0024D0                     l4927:
  5197  0024D0  90D8               	bcf	status,0,c
  5198  0024D2  362A               	rlcf	___awdiv@divisor,f,c
  5199  0024D4  362B               	rlcf	___awdiv@divisor+1,f,c
  5200  0024D6  2A2C               	incf	___awdiv@counter,f,c
  5201  0024D8                     l4929:
  5202  0024D8  AE2B               	btfss	___awdiv@divisor+1,7,c
  5203  0024DA  D7FA               	goto	l4927
  5204  0024DC                     l4931:
  5205  0024DC  90D8               	bcf	status,0,c
  5206  0024DE  362E               	rlcf	___awdiv@quotient,f,c
  5207  0024E0  362F               	rlcf	___awdiv@quotient+1,f,c
  5208  0024E2  502A               	movf	___awdiv@divisor,w,c
  5209  0024E4  5C28               	subwf	___awdiv@dividend,w,c
  5210  0024E6  502B               	movf	___awdiv@divisor+1,w,c
  5211  0024E8  5829               	subwfb	___awdiv@dividend+1,w,c
  5212  0024EA  A0D8               	btfss	status,0,c
  5213  0024EC  D005               	goto	l4939
  5214  0024EE  502A               	movf	___awdiv@divisor,w,c
  5215  0024F0  5E28               	subwf	___awdiv@dividend,f,c
  5216  0024F2  502B               	movf	___awdiv@divisor+1,w,c
  5217  0024F4  5A29               	subwfb	___awdiv@dividend+1,f,c
  5218  0024F6  802E               	bsf	___awdiv@quotient,0,c
  5219  0024F8                     l4939:
  5220  0024F8  90D8               	bcf	status,0,c
  5221  0024FA  322B               	rrcf	___awdiv@divisor+1,f,c
  5222  0024FC  322A               	rrcf	___awdiv@divisor,f,c
  5223  0024FE  2E2C               	decfsz	___awdiv@counter,f,c
  5224  002500  D7ED               	goto	l4931
  5225  002502                     l4943:
  5226  002502  502D               	movf	___awdiv@sign,w,c
  5227  002504  B4D8               	btfsc	status,2,c
  5228  002506  D004               	goto	l4947
  5229  002508  6C2E               	negf	___awdiv@quotient,c
  5230  00250A  1E2F               	comf	___awdiv@quotient+1,f,c
  5231  00250C  B0D8               	btfsc	status,0,c
  5232  00250E  2A2F               	incf	___awdiv@quotient+1,f,c
  5233  002510                     l4947:
  5234  002510  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  5235  002514  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  5236  002518  0012               	return	
  5237  00251A                     __end_of___awdiv:
  5238                           	opt stack 0
  5239                           tblptru	equ	0xFF8
  5240                           tblptrh	equ	0xFF7
  5241                           tblptrl	equ	0xFF6
  5242                           tablat	equ	0xFF5
  5243                           prodh	equ	0xFF4
  5244                           prodl	equ	0xFF3
  5245                           postinc0	equ	0xFEE
  5246                           wreg	equ	0xFE8
  5247                           postdec1	equ	0xFE5
  5248                           fsr1l	equ	0xFE1
  5249                           indf2	equ	0xFDF
  5250                           postinc2	equ	0xFDE
  5251                           postdec2	equ	0xFDD
  5252                           fsr2h	equ	0xFDA
  5253                           fsr2l	equ	0xFD9
  5254                           status	equ	0xFD8
  5255                           
  5256 ;; *************** function __tdiv_to_l_ *****************
  5257 ;; Defined at:
  5258 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;  f1              3   33[COMRAM] float 
  5261 ;;  f2              3   36[COMRAM] float 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;  quot            4   42[COMRAM] unsigned long 
  5264 ;;  exp1            1   47[COMRAM] unsigned char 
  5265 ;;  cntr            1   46[COMRAM] unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  4   33[COMRAM] unsigned long 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5275 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;Total ram usage:       15 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    3
  5282 ;; This function calls:
  5283 ;;		Nothing
  5284 ;; This function is called by:
  5285 ;;		_printf
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text12
  5290  001966                     __ptext12:
  5291                           	opt stack 0
  5292  001966                     __tdiv_to_l_:
  5293                           	opt stack 25
  5294                           
  5295                           ;incstack = 0
  5296  001966  C024  F028         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5297  00196A  6A29               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5298  00196C  6A2A               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5299  00196E  3423               	rlcf	__tdiv_to_l_@f1+1,w,c
  5300  001970  3628               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5301  001972  E301               	bnc	u4691
  5302  001974  8029               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5303  001976                     u4691:
  5304  001976  5028               	movf	??__tdiv_to_l_,w,c
  5305  001978  6E30               	movwf	__tdiv_to_l_@exp1,c
  5306  00197A  5030               	movf	__tdiv_to_l_@exp1,w,c
  5307  00197C  A4D8               	btfss	status,2,c
  5308  00197E  D009               	goto	l5061
  5309  001980  0E00               	movlw	0
  5310  001982  6E22               	movwf	?__tdiv_to_l_,c
  5311  001984  0E00               	movlw	0
  5312  001986  6E23               	movwf	?__tdiv_to_l_+1,c
  5313  001988  0E00               	movlw	0
  5314  00198A  6E24               	movwf	?__tdiv_to_l_+2,c
  5315  00198C  0E00               	movlw	0
  5316  00198E  6E25               	movwf	?__tdiv_to_l_+3,c
  5317  001990  0012               	return	
  5318  001992                     l5061:
  5319  001992  C027  F028         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5320  001996  6A29               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5321  001998  6A2A               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5322  00199A  3426               	rlcf	__tdiv_to_l_@f2+1,w,c
  5323  00199C  3628               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5324  00199E  E301               	bnc	u4711
  5325  0019A0  8029               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5326  0019A2                     u4711:
  5327  0019A2  5028               	movf	??__tdiv_to_l_,w,c
  5328  0019A4  6E2F               	movwf	__tdiv_to_l_@cntr,c
  5329  0019A6  502F               	movf	__tdiv_to_l_@cntr,w,c
  5330  0019A8  A4D8               	btfss	status,2,c
  5331  0019AA  D009               	goto	l5067
  5332  0019AC  0E00               	movlw	0
  5333  0019AE  6E22               	movwf	?__tdiv_to_l_,c
  5334  0019B0  0E00               	movlw	0
  5335  0019B2  6E23               	movwf	?__tdiv_to_l_+1,c
  5336  0019B4  0E00               	movlw	0
  5337  0019B6  6E24               	movwf	?__tdiv_to_l_+2,c
  5338  0019B8  0E00               	movlw	0
  5339  0019BA  6E25               	movwf	?__tdiv_to_l_+3,c
  5340  0019BC  0012               	return	
  5341  0019BE                     l5067:
  5342  0019BE  8E23               	bsf	__tdiv_to_l_@f1+1,7,c
  5343  0019C0  0EFF               	movlw	255
  5344  0019C2  1622               	andwf	__tdiv_to_l_@f1,f,c
  5345  0019C4  0EFF               	movlw	255
  5346  0019C6  1623               	andwf	__tdiv_to_l_@f1+1,f,c
  5347  0019C8  0E00               	movlw	0
  5348  0019CA  1624               	andwf	__tdiv_to_l_@f1+2,f,c
  5349  0019CC  8E26               	bsf	__tdiv_to_l_@f2+1,7,c
  5350  0019CE  0EFF               	movlw	255
  5351  0019D0  1625               	andwf	__tdiv_to_l_@f2,f,c
  5352  0019D2  0EFF               	movlw	255
  5353  0019D4  1626               	andwf	__tdiv_to_l_@f2+1,f,c
  5354  0019D6  0E00               	movlw	0
  5355  0019D8  1627               	andwf	__tdiv_to_l_@f2+2,f,c
  5356  0019DA  0E00               	movlw	0
  5357  0019DC  6E2B               	movwf	__tdiv_to_l_@quot,c
  5358  0019DE  0E00               	movlw	0
  5359  0019E0  6E2C               	movwf	__tdiv_to_l_@quot+1,c
  5360  0019E2  0E00               	movlw	0
  5361  0019E4  6E2D               	movwf	__tdiv_to_l_@quot+2,c
  5362  0019E6  0E00               	movlw	0
  5363  0019E8  6E2E               	movwf	__tdiv_to_l_@quot+3,c
  5364  0019EA  0E7F               	movlw	127
  5365  0019EC  5E30               	subwf	__tdiv_to_l_@exp1,f,c
  5366  0019EE  502F               	movf	__tdiv_to_l_@cntr,w,c
  5367  0019F0  0F98               	addlw	152
  5368  0019F2  5E30               	subwf	__tdiv_to_l_@exp1,f,c
  5369  0019F4  0E18               	movlw	24
  5370  0019F6  6E2F               	movwf	__tdiv_to_l_@cntr,c
  5371  0019F8                     l1018:
  5372  0019F8  90D8               	bcf	status,0,c
  5373  0019FA  362B               	rlcf	__tdiv_to_l_@quot,f,c
  5374  0019FC  362C               	rlcf	__tdiv_to_l_@quot+1,f,c
  5375  0019FE  362D               	rlcf	__tdiv_to_l_@quot+2,f,c
  5376  001A00  362E               	rlcf	__tdiv_to_l_@quot+3,f,c
  5377  001A02  5025               	movf	__tdiv_to_l_@f2,w,c
  5378  001A04  5C22               	subwf	__tdiv_to_l_@f1,w,c
  5379  001A06  5026               	movf	__tdiv_to_l_@f2+1,w,c
  5380  001A08  5823               	subwfb	__tdiv_to_l_@f1+1,w,c
  5381  001A0A  5027               	movf	__tdiv_to_l_@f2+2,w,c
  5382  001A0C  5824               	subwfb	__tdiv_to_l_@f1+2,w,c
  5383  001A0E  A0D8               	btfss	status,0,c
  5384  001A10  D007               	goto	l1019
  5385  001A12  5025               	movf	__tdiv_to_l_@f2,w,c
  5386  001A14  5E22               	subwf	__tdiv_to_l_@f1,f,c
  5387  001A16  5026               	movf	__tdiv_to_l_@f2+1,w,c
  5388  001A18  5A23               	subwfb	__tdiv_to_l_@f1+1,f,c
  5389  001A1A  5027               	movf	__tdiv_to_l_@f2+2,w,c
  5390  001A1C  5A24               	subwfb	__tdiv_to_l_@f1+2,f,c
  5391  001A1E  802B               	bsf	__tdiv_to_l_@quot,0,c
  5392  001A20                     l1019:
  5393  001A20  90D8               	bcf	status,0,c
  5394  001A22  3622               	rlcf	__tdiv_to_l_@f1,f,c
  5395  001A24  3623               	rlcf	__tdiv_to_l_@f1+1,f,c
  5396  001A26  3624               	rlcf	__tdiv_to_l_@f1+2,f,c
  5397  001A28  2E2F               	decfsz	__tdiv_to_l_@cntr,f,c
  5398  001A2A  D7E6               	goto	l1018
  5399  001A2C  AE30               	btfss	__tdiv_to_l_@exp1,7,c
  5400  001A2E  D016               	goto	l5101
  5401  001A30  5030               	movf	__tdiv_to_l_@exp1,w,c
  5402  001A32  0A80               	xorlw	128
  5403  001A34  0F97               	addlw	151
  5404  001A36  B0D8               	btfsc	status,0,c
  5405  001A38  D009               	goto	l5097
  5406  001A3A  0E00               	movlw	0
  5407  001A3C  6E22               	movwf	?__tdiv_to_l_,c
  5408  001A3E  0E00               	movlw	0
  5409  001A40  6E23               	movwf	?__tdiv_to_l_+1,c
  5410  001A42  0E00               	movlw	0
  5411  001A44  6E24               	movwf	?__tdiv_to_l_+2,c
  5412  001A46  0E00               	movlw	0
  5413  001A48  6E25               	movwf	?__tdiv_to_l_+3,c
  5414  001A4A  0012               	return	
  5415  001A4C                     l5097:
  5416  001A4C  90D8               	bcf	status,0,c
  5417  001A4E  322E               	rrcf	__tdiv_to_l_@quot+3,f,c
  5418  001A50  322D               	rrcf	__tdiv_to_l_@quot+2,f,c
  5419  001A52  322C               	rrcf	__tdiv_to_l_@quot+1,f,c
  5420  001A54  322B               	rrcf	__tdiv_to_l_@quot,f,c
  5421  001A56  3E30               	incfsz	__tdiv_to_l_@exp1,f,c
  5422  001A58  D7F9               	goto	l5097
  5423  001A5A  D015               	goto	l1025
  5424  001A5C                     l5101:
  5425  001A5C  0E17               	movlw	23
  5426  001A5E  6430               	cpfsgt	__tdiv_to_l_@exp1,c
  5427  001A60  D00F               	goto	l5109
  5428  001A62  0E00               	movlw	0
  5429  001A64  6E22               	movwf	?__tdiv_to_l_,c
  5430  001A66  0E00               	movlw	0
  5431  001A68  6E23               	movwf	?__tdiv_to_l_+1,c
  5432  001A6A  0E00               	movlw	0
  5433  001A6C  6E24               	movwf	?__tdiv_to_l_+2,c
  5434  001A6E  0E00               	movlw	0
  5435  001A70  6E25               	movwf	?__tdiv_to_l_+3,c
  5436  001A72  0012               	return	
  5437  001A74                     l5107:
  5438  001A74  90D8               	bcf	status,0,c
  5439  001A76  362B               	rlcf	__tdiv_to_l_@quot,f,c
  5440  001A78  362C               	rlcf	__tdiv_to_l_@quot+1,f,c
  5441  001A7A  362D               	rlcf	__tdiv_to_l_@quot+2,f,c
  5442  001A7C  362E               	rlcf	__tdiv_to_l_@quot+3,f,c
  5443  001A7E  0630               	decf	__tdiv_to_l_@exp1,f,c
  5444  001A80                     l5109:
  5445  001A80  5030               	movf	__tdiv_to_l_@exp1,w,c
  5446  001A82  A4D8               	btfss	status,2,c
  5447  001A84  D7F7               	goto	l5107
  5448  001A86                     l1025:
  5449  001A86  C02B  F022         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5450  001A8A  C02C  F023         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5451  001A8E  C02D  F024         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5452  001A92  C02E  F025         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5453  001A96  0012               	return		;funcret
  5454  001A98                     __end_of__tdiv_to_l_:
  5455                           	opt stack 0
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           postinc0	equ	0xFEE
  5463                           wreg	equ	0xFE8
  5464                           postdec1	equ	0xFE5
  5465                           fsr1l	equ	0xFE1
  5466                           indf2	equ	0xFDF
  5467                           postinc2	equ	0xFDE
  5468                           postdec2	equ	0xFDD
  5469                           fsr2h	equ	0xFDA
  5470                           fsr2l	equ	0xFD9
  5471                           status	equ	0xFD8
  5472                           
  5473 ;; *************** function __div_to_l_ *****************
  5474 ;; Defined at:
  5475 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  f1              3   33[COMRAM] unsigned long 
  5478 ;;  f2              3   36[COMRAM] unsigned long 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;  quot            4   39[COMRAM] unsigned long 
  5481 ;;  exp1            1   44[COMRAM] unsigned char 
  5482 ;;  cntr            1   43[COMRAM] unsigned char 
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  4   33[COMRAM] unsigned long 
  5485 ;; Registers used:
  5486 ;;		wreg, status,2, status,0
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5492 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;Total ram usage:       12 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    3
  5499 ;; This function calls:
  5500 ;;		Nothing
  5501 ;; This function is called by:
  5502 ;;		_printf
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text13
  5507  001A98                     __ptext13:
  5508                           	opt stack 0
  5509  001A98                     __div_to_l_:
  5510                           	opt stack 25
  5511                           
  5512                           ;incstack = 0
  5513  001A98  3424               	rlcf	__div_to_l_@f1+2,w,c
  5514  001A9A  3425               	rlcf	__div_to_l_@f1+3,w,c
  5515  001A9C  6E2D               	movwf	__div_to_l_@exp1,c
  5516  001A9E  502D               	movf	__div_to_l_@exp1,w,c
  5517  001AA0  A4D8               	btfss	status,2,c
  5518  001AA2  D009               	goto	l5117
  5519  001AA4  0E00               	movlw	0
  5520  001AA6  6E22               	movwf	?__div_to_l_,c
  5521  001AA8  0E00               	movlw	0
  5522  001AAA  6E23               	movwf	?__div_to_l_+1,c
  5523  001AAC  0E00               	movlw	0
  5524  001AAE  6E24               	movwf	?__div_to_l_+2,c
  5525  001AB0  0E00               	movlw	0
  5526  001AB2  6E25               	movwf	?__div_to_l_+3,c
  5527  001AB4  0012               	return	
  5528  001AB6                     l5117:
  5529  001AB6  3427               	rlcf	__div_to_l_@f2+2,w,c
  5530  001AB8  3428               	rlcf	__div_to_l_@f2+3,w,c
  5531  001ABA  6E2C               	movwf	__div_to_l_@cntr,c
  5532  001ABC  502C               	movf	__div_to_l_@cntr,w,c
  5533  001ABE  A4D8               	btfss	status,2,c
  5534  001AC0  D009               	goto	l5123
  5535  001AC2  0E00               	movlw	0
  5536  001AC4  6E22               	movwf	?__div_to_l_,c
  5537  001AC6  0E00               	movlw	0
  5538  001AC8  6E23               	movwf	?__div_to_l_+1,c
  5539  001ACA  0E00               	movlw	0
  5540  001ACC  6E24               	movwf	?__div_to_l_+2,c
  5541  001ACE  0E00               	movlw	0
  5542  001AD0  6E25               	movwf	?__div_to_l_+3,c
  5543  001AD2  0012               	return	
  5544  001AD4                     l5123:
  5545  001AD4  8E24               	bsf	__div_to_l_@f1+2,7,c
  5546  001AD6  0EFF               	movlw	255
  5547  001AD8  1622               	andwf	__div_to_l_@f1,f,c
  5548  001ADA  0EFF               	movlw	255
  5549  001ADC  1623               	andwf	__div_to_l_@f1+1,f,c
  5550  001ADE  0EFF               	movlw	255
  5551  001AE0  1624               	andwf	__div_to_l_@f1+2,f,c
  5552  001AE2  0E00               	movlw	0
  5553  001AE4  1625               	andwf	__div_to_l_@f1+3,f,c
  5554  001AE6  8E27               	bsf	__div_to_l_@f2+2,7,c
  5555  001AE8  0EFF               	movlw	255
  5556  001AEA  1625               	andwf	__div_to_l_@f2,f,c
  5557  001AEC  0EFF               	movlw	255
  5558  001AEE  1626               	andwf	__div_to_l_@f2+1,f,c
  5559  001AF0  0EFF               	movlw	255
  5560  001AF2  1627               	andwf	__div_to_l_@f2+2,f,c
  5561  001AF4  0E00               	movlw	0
  5562  001AF6  1628               	andwf	__div_to_l_@f2+3,f,c
  5563  001AF8  0E00               	movlw	0
  5564  001AFA  6E28               	movwf	__div_to_l_@quot,c
  5565  001AFC  0E00               	movlw	0
  5566  001AFE  6E29               	movwf	__div_to_l_@quot+1,c
  5567  001B00  0E00               	movlw	0
  5568  001B02  6E2A               	movwf	__div_to_l_@quot+2,c
  5569  001B04  0E00               	movlw	0
  5570  001B06  6E2B               	movwf	__div_to_l_@quot+3,c
  5571  001B08  0E7F               	movlw	127
  5572  001B0A  5E2D               	subwf	__div_to_l_@exp1,f,c
  5573  001B0C  502C               	movf	__div_to_l_@cntr,w,c
  5574  001B0E  0FA0               	addlw	160
  5575  001B10  5E2D               	subwf	__div_to_l_@exp1,f,c
  5576  001B12  0E20               	movlw	32
  5577  001B14  6E2C               	movwf	__div_to_l_@cntr,c
  5578  001B16                     l5137:
  5579  001B16  90D8               	bcf	status,0,c
  5580  001B18  3628               	rlcf	__div_to_l_@quot,f,c
  5581  001B1A  3629               	rlcf	__div_to_l_@quot+1,f,c
  5582  001B1C  362A               	rlcf	__div_to_l_@quot+2,f,c
  5583  001B1E  362B               	rlcf	__div_to_l_@quot+3,f,c
  5584  001B20  5025               	movf	__div_to_l_@f2,w,c
  5585  001B22  5C22               	subwf	__div_to_l_@f1,w,c
  5586  001B24  5026               	movf	__div_to_l_@f2+1,w,c
  5587  001B26  5823               	subwfb	__div_to_l_@f1+1,w,c
  5588  001B28  5027               	movf	__div_to_l_@f2+2,w,c
  5589  001B2A  5824               	subwfb	__div_to_l_@f1+2,w,c
  5590  001B2C  5028               	movf	__div_to_l_@f2+3,w,c
  5591  001B2E  5825               	subwfb	__div_to_l_@f1+3,w,c
  5592  001B30  A0D8               	btfss	status,0,c
  5593  001B32  D009               	goto	l5145
  5594  001B34  5025               	movf	__div_to_l_@f2,w,c
  5595  001B36  5E22               	subwf	__div_to_l_@f1,f,c
  5596  001B38  5026               	movf	__div_to_l_@f2+1,w,c
  5597  001B3A  5A23               	subwfb	__div_to_l_@f1+1,f,c
  5598  001B3C  5027               	movf	__div_to_l_@f2+2,w,c
  5599  001B3E  5A24               	subwfb	__div_to_l_@f1+2,f,c
  5600  001B40  5028               	movf	__div_to_l_@f2+3,w,c
  5601  001B42  5A25               	subwfb	__div_to_l_@f1+3,f,c
  5602  001B44  8028               	bsf	__div_to_l_@quot,0,c
  5603  001B46                     l5145:
  5604  001B46  90D8               	bcf	status,0,c
  5605  001B48  3622               	rlcf	__div_to_l_@f1,f,c
  5606  001B4A  3623               	rlcf	__div_to_l_@f1+1,f,c
  5607  001B4C  3624               	rlcf	__div_to_l_@f1+2,f,c
  5608  001B4E  3625               	rlcf	__div_to_l_@f1+3,f,c
  5609  001B50  2E2C               	decfsz	__div_to_l_@cntr,f,c
  5610  001B52  D7E1               	goto	l5137
  5611  001B54  AE2D               	btfss	__div_to_l_@exp1,7,c
  5612  001B56  D016               	goto	l5161
  5613  001B58  502D               	movf	__div_to_l_@exp1,w,c
  5614  001B5A  0A80               	xorlw	128
  5615  001B5C  0F9F               	addlw	159
  5616  001B5E  B0D8               	btfsc	status,0,c
  5617  001B60  D009               	goto	l5157
  5618  001B62  0E00               	movlw	0
  5619  001B64  6E22               	movwf	?__div_to_l_,c
  5620  001B66  0E00               	movlw	0
  5621  001B68  6E23               	movwf	?__div_to_l_+1,c
  5622  001B6A  0E00               	movlw	0
  5623  001B6C  6E24               	movwf	?__div_to_l_+2,c
  5624  001B6E  0E00               	movlw	0
  5625  001B70  6E25               	movwf	?__div_to_l_+3,c
  5626  001B72  0012               	return	
  5627  001B74                     l5157:
  5628  001B74  90D8               	bcf	status,0,c
  5629  001B76  322B               	rrcf	__div_to_l_@quot+3,f,c
  5630  001B78  322A               	rrcf	__div_to_l_@quot+2,f,c
  5631  001B7A  3229               	rrcf	__div_to_l_@quot+1,f,c
  5632  001B7C  3228               	rrcf	__div_to_l_@quot,f,c
  5633  001B7E  3E2D               	incfsz	__div_to_l_@exp1,f,c
  5634  001B80  D7F9               	goto	l5157
  5635  001B82  D015               	goto	l921
  5636  001B84                     l5161:
  5637  001B84  0E1F               	movlw	31
  5638  001B86  642D               	cpfsgt	__div_to_l_@exp1,c
  5639  001B88  D00F               	goto	l5169
  5640  001B8A  0E00               	movlw	0
  5641  001B8C  6E22               	movwf	?__div_to_l_,c
  5642  001B8E  0E00               	movlw	0
  5643  001B90  6E23               	movwf	?__div_to_l_+1,c
  5644  001B92  0E00               	movlw	0
  5645  001B94  6E24               	movwf	?__div_to_l_+2,c
  5646  001B96  0E00               	movlw	0
  5647  001B98  6E25               	movwf	?__div_to_l_+3,c
  5648  001B9A  0012               	return	
  5649  001B9C                     l5167:
  5650  001B9C  90D8               	bcf	status,0,c
  5651  001B9E  3628               	rlcf	__div_to_l_@quot,f,c
  5652  001BA0  3629               	rlcf	__div_to_l_@quot+1,f,c
  5653  001BA2  362A               	rlcf	__div_to_l_@quot+2,f,c
  5654  001BA4  362B               	rlcf	__div_to_l_@quot+3,f,c
  5655  001BA6  062D               	decf	__div_to_l_@exp1,f,c
  5656  001BA8                     l5169:
  5657  001BA8  502D               	movf	__div_to_l_@exp1,w,c
  5658  001BAA  A4D8               	btfss	status,2,c
  5659  001BAC  D7F7               	goto	l5167
  5660  001BAE                     l921:
  5661  001BAE  C028  F022         	movff	__div_to_l_@quot,?__div_to_l_
  5662  001BB2  C029  F023         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5663  001BB6  C02A  F024         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5664  001BBA  C02B  F025         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5665  001BBE  0012               	return		;funcret
  5666  001BC0                     __end_of__div_to_l_:
  5667                           	opt stack 0
  5668                           tblptru	equ	0xFF8
  5669                           tblptrh	equ	0xFF7
  5670                           tblptrl	equ	0xFF6
  5671                           tablat	equ	0xFF5
  5672                           prodh	equ	0xFF4
  5673                           prodl	equ	0xFF3
  5674                           postinc0	equ	0xFEE
  5675                           wreg	equ	0xFE8
  5676                           postdec1	equ	0xFE5
  5677                           fsr1l	equ	0xFE1
  5678                           indf2	equ	0xFDF
  5679                           postinc2	equ	0xFDE
  5680                           postdec2	equ	0xFDD
  5681                           fsr2h	equ	0xFDA
  5682                           fsr2l	equ	0xFD9
  5683                           status	equ	0xFD8
  5684                           
  5685 ;; *************** function ___lltoft *****************
  5686 ;; Defined at:
  5687 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;  c               4   41[COMRAM] unsigned long 
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;  exp             1   49[COMRAM] unsigned char 
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  3   41[COMRAM] float 
  5694 ;; Registers used:
  5695 ;;		wreg, status,2, status,0, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5701 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;Total ram usage:        9 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    4
  5708 ;; This function calls:
  5709 ;;		___ftpack
  5710 ;; This function is called by:
  5711 ;;		_printf
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text14
  5716  0027C0                     __ptext14:
  5717                           	opt stack 0
  5718  0027C0                     ___lltoft:
  5719                           	opt stack 24
  5720                           
  5721                           ;incstack = 0
  5722  0027C0  0E8E               	movlw	142
  5723  0027C2  6E32               	movwf	___lltoft@exp,c
  5724  0027C4  D006               	goto	l5363
  5725  0027C6                     l5361:
  5726  0027C6  90D8               	bcf	status,0,c
  5727  0027C8  322D               	rrcf	___lltoft@c+3,f,c
  5728  0027CA  322C               	rrcf	___lltoft@c+2,f,c
  5729  0027CC  322B               	rrcf	___lltoft@c+1,f,c
  5730  0027CE  322A               	rrcf	___lltoft@c,f,c
  5731  0027D0  2A32               	incf	___lltoft@exp,f,c
  5732  0027D2                     l5363:
  5733  0027D2  0E00               	movlw	0
  5734  0027D4  142A               	andwf	___lltoft@c,w,c
  5735  0027D6  6E2E               	movwf	??___lltoft& (0+255),c
  5736  0027D8  0E00               	movlw	0
  5737  0027DA  142B               	andwf	___lltoft@c+1,w,c
  5738  0027DC  6E2F               	movwf	(??___lltoft+1)& (0+255),c
  5739  0027DE  0E00               	movlw	0
  5740  0027E0  142C               	andwf	___lltoft@c+2,w,c
  5741  0027E2  6E30               	movwf	(??___lltoft+2)& (0+255),c
  5742  0027E4  0EFF               	movlw	255
  5743  0027E6  142D               	andwf	___lltoft@c+3,w,c
  5744  0027E8  6E31               	movwf	(??___lltoft+3)& (0+255),c
  5745  0027EA  502E               	movf	??___lltoft,w,c
  5746  0027EC  102F               	iorwf	??___lltoft+1,w,c
  5747  0027EE  1030               	iorwf	??___lltoft+2,w,c
  5748  0027F0  1031               	iorwf	??___lltoft+3,w,c
  5749  0027F2  A4D8               	btfss	status,2,c
  5750  0027F4  D7E8               	goto	l5361
  5751  0027F6  C02A  F022         	movff	___lltoft@c,___ftpack@arg
  5752  0027FA  C02B  F023         	movff	___lltoft@c+1,___ftpack@arg+1
  5753  0027FE  C02C  F024         	movff	___lltoft@c+2,___ftpack@arg+2
  5754  002802  C032  F025         	movff	___lltoft@exp,___ftpack@exp
  5755  002806  0E00               	movlw	0
  5756  002808  6E26               	movwf	___ftpack@sign,c
  5757  00280A  EC8A  F010         	call	___ftpack	;wreg free
  5758  00280E  C022  F02A         	movff	?___ftpack,?___lltoft
  5759  002812  C023  F02B         	movff	?___ftpack+1,?___lltoft+1
  5760  002816  C024  F02C         	movff	?___ftpack+2,?___lltoft+2
  5761  00281A  0012               	return	
  5762  00281C                     __end_of___lltoft:
  5763                           	opt stack 0
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           prodh	equ	0xFF4
  5769                           prodl	equ	0xFF3
  5770                           postinc0	equ	0xFEE
  5771                           wreg	equ	0xFE8
  5772                           postdec1	equ	0xFE5
  5773                           fsr1l	equ	0xFE1
  5774                           indf2	equ	0xFDF
  5775                           postinc2	equ	0xFDE
  5776                           postdec2	equ	0xFDD
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function ___llmod *****************
  5782 ;; Defined at:
  5783 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  dividend        4   46[COMRAM] unsigned long 
  5786 ;;  divisor         4   50[COMRAM] unsigned long 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;  counter         1   54[COMRAM] unsigned char 
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  4   46[COMRAM] unsigned long 
  5791 ;; Registers used:
  5792 ;;		wreg, status,2, status,0
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5798 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;Total ram usage:        9 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; Hardware stack levels required when called:    3
  5805 ;; This function calls:
  5806 ;;		Nothing
  5807 ;; This function is called by:
  5808 ;;		_printf
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text15
  5813  0026F4                     __ptext15:
  5814                           	opt stack 0
  5815  0026F4                     ___llmod:
  5816                           	opt stack 25
  5817                           
  5818                           ;incstack = 0
  5819  0026F4  5033               	movf	___llmod@divisor,w,c
  5820  0026F6  1034               	iorwf	___llmod@divisor+1,w,c
  5821  0026F8  1035               	iorwf	___llmod@divisor+2,w,c
  5822  0026FA  1036               	iorwf	___llmod@divisor+3,w,c
  5823  0026FC  B4D8               	btfsc	status,2,c
  5824  0026FE  D024               	goto	l1105
  5825  002700  0E01               	movlw	1
  5826  002702  6E37               	movwf	___llmod@counter,c
  5827  002704  D006               	goto	l5349
  5828  002706                     l5347:
  5829  002706  90D8               	bcf	status,0,c
  5830  002708  3633               	rlcf	___llmod@divisor,f,c
  5831  00270A  3634               	rlcf	___llmod@divisor+1,f,c
  5832  00270C  3635               	rlcf	___llmod@divisor+2,f,c
  5833  00270E  3636               	rlcf	___llmod@divisor+3,f,c
  5834  002710  2A37               	incf	___llmod@counter,f,c
  5835  002712                     l5349:
  5836  002712  AE36               	btfss	___llmod@divisor+3,7,c
  5837  002714  D7F8               	goto	l5347
  5838  002716                     l5351:
  5839  002716  5033               	movf	___llmod@divisor,w,c
  5840  002718  5C2F               	subwf	___llmod@dividend,w,c
  5841  00271A  5034               	movf	___llmod@divisor+1,w,c
  5842  00271C  5830               	subwfb	___llmod@dividend+1,w,c
  5843  00271E  5035               	movf	___llmod@divisor+2,w,c
  5844  002720  5831               	subwfb	___llmod@dividend+2,w,c
  5845  002722  5036               	movf	___llmod@divisor+3,w,c
  5846  002724  5832               	subwfb	___llmod@dividend+3,w,c
  5847  002726  A0D8               	btfss	status,0,c
  5848  002728  D008               	goto	l5355
  5849  00272A  5033               	movf	___llmod@divisor,w,c
  5850  00272C  5E2F               	subwf	___llmod@dividend,f,c
  5851  00272E  5034               	movf	___llmod@divisor+1,w,c
  5852  002730  5A30               	subwfb	___llmod@dividend+1,f,c
  5853  002732  5035               	movf	___llmod@divisor+2,w,c
  5854  002734  5A31               	subwfb	___llmod@dividend+2,f,c
  5855  002736  5036               	movf	___llmod@divisor+3,w,c
  5856  002738  5A32               	subwfb	___llmod@dividend+3,f,c
  5857  00273A                     l5355:
  5858  00273A  90D8               	bcf	status,0,c
  5859  00273C  3236               	rrcf	___llmod@divisor+3,f,c
  5860  00273E  3235               	rrcf	___llmod@divisor+2,f,c
  5861  002740  3234               	rrcf	___llmod@divisor+1,f,c
  5862  002742  3233               	rrcf	___llmod@divisor,f,c
  5863  002744  2E37               	decfsz	___llmod@counter,f,c
  5864  002746  D7E7               	goto	l5351
  5865  002748                     l1105:
  5866  002748  C02F  F02F         	movff	___llmod@dividend,?___llmod
  5867  00274C  C030  F030         	movff	___llmod@dividend+1,?___llmod+1
  5868  002750  C031  F031         	movff	___llmod@dividend+2,?___llmod+2
  5869  002754  C032  F032         	movff	___llmod@dividend+3,?___llmod+3
  5870  002758  0012               	return		;funcret
  5871  00275A                     __end_of___llmod:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           postinc0	equ	0xFEE
  5880                           wreg	equ	0xFE8
  5881                           postdec1	equ	0xFE5
  5882                           fsr1l	equ	0xFE1
  5883                           indf2	equ	0xFDF
  5884                           postinc2	equ	0xFDE
  5885                           postdec2	equ	0xFDD
  5886                           fsr2h	equ	0xFDA
  5887                           fsr2l	equ	0xFD9
  5888                           status	equ	0xFD8
  5889                           
  5890 ;; *************** function ___lldiv *****************
  5891 ;; Defined at:
  5892 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  dividend        4   33[COMRAM] unsigned long 
  5895 ;;  divisor         4   37[COMRAM] unsigned long 
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;  quotient        4   41[COMRAM] unsigned long 
  5898 ;;  counter         1   45[COMRAM] unsigned char 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  4   33[COMRAM] unsigned long 
  5901 ;; Registers used:
  5902 ;;		wreg, status,2, status,0
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5908 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;Total ram usage:       13 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    3
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_printf
  5919 ;;		_I2C_Master_Init
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text16
  5924  00251A                     __ptext16:
  5925                           	opt stack 0
  5926  00251A                     ___lldiv:
  5927                           	opt stack 25
  5928                           
  5929                           ;incstack = 0
  5930  00251A  0E00               	movlw	0
  5931  00251C  6E2A               	movwf	___lldiv@quotient,c
  5932  00251E  0E00               	movlw	0
  5933  002520  6E2B               	movwf	___lldiv@quotient+1,c
  5934  002522  0E00               	movlw	0
  5935  002524  6E2C               	movwf	___lldiv@quotient+2,c
  5936  002526  0E00               	movlw	0
  5937  002528  6E2D               	movwf	___lldiv@quotient+3,c
  5938  00252A  5026               	movf	___lldiv@divisor,w,c
  5939  00252C  1027               	iorwf	___lldiv@divisor+1,w,c
  5940  00252E  1028               	iorwf	___lldiv@divisor+2,w,c
  5941  002530  1029               	iorwf	___lldiv@divisor+3,w,c
  5942  002532  B4D8               	btfsc	status,2,c
  5943  002534  D02A               	goto	l1095
  5944  002536  0E01               	movlw	1
  5945  002538  6E2E               	movwf	___lldiv@counter,c
  5946  00253A  D006               	goto	l5329
  5947  00253C                     l5327:
  5948  00253C  90D8               	bcf	status,0,c
  5949  00253E  3626               	rlcf	___lldiv@divisor,f,c
  5950  002540  3627               	rlcf	___lldiv@divisor+1,f,c
  5951  002542  3628               	rlcf	___lldiv@divisor+2,f,c
  5952  002544  3629               	rlcf	___lldiv@divisor+3,f,c
  5953  002546  2A2E               	incf	___lldiv@counter,f,c
  5954  002548                     l5329:
  5955  002548  AE29               	btfss	___lldiv@divisor+3,7,c
  5956  00254A  D7F8               	goto	l5327
  5957  00254C                     l5331:
  5958  00254C  90D8               	bcf	status,0,c
  5959  00254E  362A               	rlcf	___lldiv@quotient,f,c
  5960  002550  362B               	rlcf	___lldiv@quotient+1,f,c
  5961  002552  362C               	rlcf	___lldiv@quotient+2,f,c
  5962  002554  362D               	rlcf	___lldiv@quotient+3,f,c
  5963  002556  5026               	movf	___lldiv@divisor,w,c
  5964  002558  5C22               	subwf	___lldiv@dividend,w,c
  5965  00255A  5027               	movf	___lldiv@divisor+1,w,c
  5966  00255C  5823               	subwfb	___lldiv@dividend+1,w,c
  5967  00255E  5028               	movf	___lldiv@divisor+2,w,c
  5968  002560  5824               	subwfb	___lldiv@dividend+2,w,c
  5969  002562  5029               	movf	___lldiv@divisor+3,w,c
  5970  002564  5825               	subwfb	___lldiv@dividend+3,w,c
  5971  002566  A0D8               	btfss	status,0,c
  5972  002568  D009               	goto	l5339
  5973  00256A  5026               	movf	___lldiv@divisor,w,c
  5974  00256C  5E22               	subwf	___lldiv@dividend,f,c
  5975  00256E  5027               	movf	___lldiv@divisor+1,w,c
  5976  002570  5A23               	subwfb	___lldiv@dividend+1,f,c
  5977  002572  5028               	movf	___lldiv@divisor+2,w,c
  5978  002574  5A24               	subwfb	___lldiv@dividend+2,f,c
  5979  002576  5029               	movf	___lldiv@divisor+3,w,c
  5980  002578  5A25               	subwfb	___lldiv@dividend+3,f,c
  5981  00257A  802A               	bsf	___lldiv@quotient,0,c
  5982  00257C                     l5339:
  5983  00257C  90D8               	bcf	status,0,c
  5984  00257E  3229               	rrcf	___lldiv@divisor+3,f,c
  5985  002580  3228               	rrcf	___lldiv@divisor+2,f,c
  5986  002582  3227               	rrcf	___lldiv@divisor+1,f,c
  5987  002584  3226               	rrcf	___lldiv@divisor,f,c
  5988  002586  2E2E               	decfsz	___lldiv@counter,f,c
  5989  002588  D7E1               	goto	l5331
  5990  00258A                     l1095:
  5991  00258A  C02A  F022         	movff	___lldiv@quotient,?___lldiv
  5992  00258E  C02B  F023         	movff	___lldiv@quotient+1,?___lldiv+1
  5993  002592  C02C  F024         	movff	___lldiv@quotient+2,?___lldiv+2
  5994  002596  C02D  F025         	movff	___lldiv@quotient+3,?___lldiv+3
  5995  00259A  0012               	return		;funcret
  5996  00259C                     __end_of___lldiv:
  5997                           	opt stack 0
  5998                           tblptru	equ	0xFF8
  5999                           tblptrh	equ	0xFF7
  6000                           tblptrl	equ	0xFF6
  6001                           tablat	equ	0xFF5
  6002                           prodh	equ	0xFF4
  6003                           prodl	equ	0xFF3
  6004                           postinc0	equ	0xFEE
  6005                           wreg	equ	0xFE8
  6006                           postdec1	equ	0xFE5
  6007                           fsr1l	equ	0xFE1
  6008                           indf2	equ	0xFDF
  6009                           postinc2	equ	0xFDE
  6010                           postdec2	equ	0xFDD
  6011                           fsr2h	equ	0xFDA
  6012                           fsr2l	equ	0xFD9
  6013                           status	equ	0xFD8
  6014                           
  6015 ;; *************** function ___ftsub *****************
  6016 ;; Defined at:
  6017 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;  f1              3   43[BANK0 ] float 
  6020 ;;  f2              3   46[BANK0 ] float 
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;		None
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  3   43[BANK0 ] float 
  6025 ;; Registers used:
  6026 ;;		wreg, status,2, status,0, cstack
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6032 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;Total ram usage:        6 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:    5
  6039 ;; This function calls:
  6040 ;;		___ftadd
  6041 ;; This function is called by:
  6042 ;;		_printf
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           	psect	text17
  6047  00281C                     __ptext17:
  6048                           	opt stack 0
  6049  00281C                     ___ftsub:
  6050                           	opt stack 23
  6051                           
  6052                           ;incstack = 0
  6053  00281C  0100               	movlb	0	; () banked
  6054  00281E  51AE               	movf	___ftsub@f2& (0+255),w,b
  6055  002820  0100               	movlb	0	; () banked
  6056  002822  11AF               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6057  002824  0100               	movlb	0	; () banked
  6058  002826  11B0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6059  002828  B4D8               	btfsc	status,2,c
  6060  00282A  D009               	goto	l5237
  6061                           
  6062                           ; BSR set to: 0
  6063  00282C  0E00               	movlw	0
  6064  00282E  0100               	movlb	0	; () banked
  6065  002830  1BAE               	xorwf	___ftsub@f2& (0+255),f,b
  6066  002832  0E00               	movlw	0
  6067  002834  0100               	movlb	0	; () banked
  6068  002836  1BAF               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6069  002838  0E80               	movlw	128
  6070  00283A  0100               	movlb	0	; () banked
  6071  00283C  1BB0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6072  00283E                     l5237:
  6073                           
  6074                           ; BSR set to: 0
  6075  00283E  C0AB  F09F         	movff	___ftsub@f1,___ftadd@f1
  6076  002842  C0AC  F0A0         	movff	___ftsub@f1+1,___ftadd@f1+1
  6077  002846  C0AD  F0A1         	movff	___ftsub@f1+2,___ftadd@f1+2
  6078  00284A  C0AE  F0A2         	movff	___ftsub@f2,___ftadd@f2
  6079  00284E  C0AF  F0A3         	movff	___ftsub@f2+1,___ftadd@f2+1
  6080  002852  C0B0  F0A4         	movff	___ftsub@f2+2,___ftadd@f2+2
  6081  002856  EC52  F008         	call	___ftadd	;wreg free
  6082  00285A  C09F  F0AB         	movff	?___ftadd,?___ftsub
  6083  00285E  C0A0  F0AC         	movff	?___ftadd+1,?___ftsub+1
  6084  002862  C0A1  F0AD         	movff	?___ftadd+2,?___ftsub+2
  6085  002866  0012               	return	
  6086  002868                     __end_of___ftsub:
  6087                           	opt stack 0
  6088                           tblptru	equ	0xFF8
  6089                           tblptrh	equ	0xFF7
  6090                           tblptrl	equ	0xFF6
  6091                           tablat	equ	0xFF5
  6092                           prodh	equ	0xFF4
  6093                           prodl	equ	0xFF3
  6094                           postinc0	equ	0xFEE
  6095                           wreg	equ	0xFE8
  6096                           postdec1	equ	0xFE5
  6097                           fsr1l	equ	0xFE1
  6098                           indf2	equ	0xFDF
  6099                           postinc2	equ	0xFDE
  6100                           postdec2	equ	0xFDD
  6101                           fsr2h	equ	0xFDA
  6102                           fsr2l	equ	0xFD9
  6103                           status	equ	0xFD8
  6104                           
  6105 ;; *************** function ___ftneg *****************
  6106 ;; Defined at:
  6107 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;  f1              3   33[COMRAM] float 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;		None
  6112 ;; Return value:  Size  Location     Type
  6113 ;;                  3   33[COMRAM] float 
  6114 ;; Registers used:
  6115 ;;		wreg, status,2, status,0
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6121 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6125 ;;Total ram usage:        3 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:    3
  6128 ;; This function calls:
  6129 ;;		Nothing
  6130 ;; This function is called by:
  6131 ;;		_printf
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           	psect	text18
  6136  002A88                     __ptext18:
  6137                           	opt stack 0
  6138  002A88                     ___ftneg:
  6139                           	opt stack 25
  6140                           
  6141                           ;incstack = 0
  6142  002A88  5022               	movf	___ftneg@f1,w,c
  6143  002A8A  1023               	iorwf	___ftneg@f1+1,w,c
  6144  002A8C  1024               	iorwf	___ftneg@f1+2,w,c
  6145  002A8E  B4D8               	btfsc	status,2,c
  6146  002A90  D006               	goto	l1050
  6147  002A92  0E00               	movlw	0
  6148  002A94  1A22               	xorwf	___ftneg@f1,f,c
  6149  002A96  0E00               	movlw	0
  6150  002A98  1A23               	xorwf	___ftneg@f1+1,f,c
  6151  002A9A  0E80               	movlw	128
  6152  002A9C  1A24               	xorwf	___ftneg@f1+2,f,c
  6153  002A9E                     l1050:
  6154  002A9E  C022  F022         	movff	___ftneg@f1,?___ftneg
  6155  002AA2  C023  F023         	movff	___ftneg@f1+1,?___ftneg+1
  6156  002AA6  C024  F024         	movff	___ftneg@f1+2,?___ftneg+2
  6157  002AAA  0012               	return		;funcret
  6158  002AAC                     __end_of___ftneg:
  6159                           	opt stack 0
  6160                           tblptru	equ	0xFF8
  6161                           tblptrh	equ	0xFF7
  6162                           tblptrl	equ	0xFF6
  6163                           tablat	equ	0xFF5
  6164                           prodh	equ	0xFF4
  6165                           prodl	equ	0xFF3
  6166                           postinc0	equ	0xFEE
  6167                           wreg	equ	0xFE8
  6168                           postdec1	equ	0xFE5
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           fsr2h	equ	0xFDA
  6174                           fsr2l	equ	0xFD9
  6175                           status	equ	0xFD8
  6176                           
  6177 ;; *************** function ___ftge *****************
  6178 ;; Defined at:
  6179 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  ff1             3   33[COMRAM] float 
  6182 ;;  ff2             3   36[COMRAM] float 
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;		None
  6185 ;; Return value:  Size  Location     Type
  6186 ;;		None               void
  6187 ;; Registers used:
  6188 ;;		wreg, status,2, status,0
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6194 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;Total ram usage:        9 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    3
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_sortBattery
  6205 ;;		_printf
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text19
  6210  00237E                     __ptext19:
  6211                           	opt stack 0
  6212  00237E                     ___ftge:
  6213                           	opt stack 25
  6214                           
  6215                           ;incstack = 0
  6216  00237E  AE24               	btfss	___ftge@ff1+2,7,c
  6217  002380  D016               	goto	l5257
  6218  002382  C022  F028         	movff	___ftge@ff1,??___ftge
  6219  002386  C023  F029         	movff	___ftge@ff1+1,??___ftge+1
  6220  00238A  C024  F02A         	movff	___ftge@ff1+2,??___ftge+2
  6221  00238E  1E28               	comf	??___ftge,f,c
  6222  002390  1E29               	comf	??___ftge+1,f,c
  6223  002392  1E2A               	comf	??___ftge+2,f,c
  6224  002394  2A28               	incf	??___ftge,f,c
  6225  002396  0E00               	movlw	0
  6226  002398  2229               	addwfc	??___ftge+1,f,c
  6227  00239A  222A               	addwfc	??___ftge+2,f,c
  6228  00239C  0E00               	movlw	0
  6229  00239E  2428               	addwf	??___ftge,w,c
  6230  0023A0  6E22               	movwf	___ftge@ff1,c
  6231  0023A2  0E00               	movlw	0
  6232  0023A4  2029               	addwfc	??___ftge+1,w,c
  6233  0023A6  6E23               	movwf	___ftge@ff1+1,c
  6234  0023A8  0E80               	movlw	128
  6235  0023AA  202A               	addwfc	??___ftge+2,w,c
  6236  0023AC  6E24               	movwf	___ftge@ff1+2,c
  6237  0023AE                     l5257:
  6238  0023AE  AE27               	btfss	___ftge@ff2+2,7,c
  6239  0023B0  D016               	goto	l5261
  6240  0023B2  C025  F028         	movff	___ftge@ff2,??___ftge
  6241  0023B6  C026  F029         	movff	___ftge@ff2+1,??___ftge+1
  6242  0023BA  C027  F02A         	movff	___ftge@ff2+2,??___ftge+2
  6243  0023BE  1E28               	comf	??___ftge,f,c
  6244  0023C0  1E29               	comf	??___ftge+1,f,c
  6245  0023C2  1E2A               	comf	??___ftge+2,f,c
  6246  0023C4  2A28               	incf	??___ftge,f,c
  6247  0023C6  0E00               	movlw	0
  6248  0023C8  2229               	addwfc	??___ftge+1,f,c
  6249  0023CA  222A               	addwfc	??___ftge+2,f,c
  6250  0023CC  0E00               	movlw	0
  6251  0023CE  2428               	addwf	??___ftge,w,c
  6252  0023D0  6E25               	movwf	___ftge@ff2,c
  6253  0023D2  0E00               	movlw	0
  6254  0023D4  2029               	addwfc	??___ftge+1,w,c
  6255  0023D6  6E26               	movwf	___ftge@ff2+1,c
  6256  0023D8  0E80               	movlw	128
  6257  0023DA  202A               	addwfc	??___ftge+2,w,c
  6258  0023DC  6E27               	movwf	___ftge@ff2+2,c
  6259  0023DE                     l5261:
  6260  0023DE  0E00               	movlw	0
  6261  0023E0  1A22               	xorwf	___ftge@ff1,f,c
  6262  0023E2  0E00               	movlw	0
  6263  0023E4  1A23               	xorwf	___ftge@ff1+1,f,c
  6264  0023E6  0E80               	movlw	128
  6265  0023E8  1A24               	xorwf	___ftge@ff1+2,f,c
  6266  0023EA  0E00               	movlw	0
  6267  0023EC  1A25               	xorwf	___ftge@ff2,f,c
  6268  0023EE  0E00               	movlw	0
  6269  0023F0  1A26               	xorwf	___ftge@ff2+1,f,c
  6270  0023F2  0E80               	movlw	128
  6271  0023F4  1A27               	xorwf	___ftge@ff2+2,f,c
  6272  0023F6  5025               	movf	___ftge@ff2,w,c
  6273  0023F8  5C22               	subwf	___ftge@ff1,w,c
  6274  0023FA  5026               	movf	___ftge@ff2+1,w,c
  6275  0023FC  5823               	subwfb	___ftge@ff1+1,w,c
  6276  0023FE  5027               	movf	___ftge@ff2+2,w,c
  6277  002400  5824               	subwfb	___ftge@ff1+2,w,c
  6278  002402  B0D8               	btfsc	status,0,c
  6279  002404  D002               	goto	l5267
  6280  002406  90D8               	bcf	status,0,c
  6281  002408  0012               	return	
  6282  00240A                     l5267:
  6283  00240A  80D8               	bsf	status,0,c
  6284  00240C  0012               	return	
  6285  00240E                     __end_of___ftge:
  6286                           	opt stack 0
  6287                           tblptru	equ	0xFF8
  6288                           tblptrh	equ	0xFF7
  6289                           tblptrl	equ	0xFF6
  6290                           tablat	equ	0xFF5
  6291                           prodh	equ	0xFF4
  6292                           prodl	equ	0xFF3
  6293                           postinc0	equ	0xFEE
  6294                           wreg	equ	0xFE8
  6295                           postdec1	equ	0xFE5
  6296                           fsr1l	equ	0xFE1
  6297                           indf2	equ	0xFDF
  6298                           postinc2	equ	0xFDE
  6299                           postdec2	equ	0xFDD
  6300                           fsr2h	equ	0xFDA
  6301                           fsr2l	equ	0xFD9
  6302                           status	equ	0xFD8
  6303                           
  6304 ;; *************** function _lcdClear *****************
  6305 ;; Defined at:
  6306 ;;		line 74 in file "lcd.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;		None
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;		None
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  1    wreg      void 
  6313 ;; Registers used:
  6314 ;;		wreg, status,2, status,0, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6324 ;;Total ram usage:        0 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    5
  6327 ;; This function calls:
  6328 ;;		_lcdInst
  6329 ;; This function is called by:
  6330 ;;		_sortBattery
  6331 ;;		_pause
  6332 ;;		_dateTime
  6333 ;;		_mainMenu
  6334 ;;		_runSelect
  6335 ;;		_runMenu
  6336 ;;		_runTime
  6337 ;;		_runStats
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           	psect	text20
  6342  002B58                     __ptext20:
  6343                           	opt stack 0
  6344  002B58                     _lcdClear:
  6345                           	opt stack 23
  6346                           
  6347                           ;lcd.c: 75: lcdInst(0b00000001);
  6348                           
  6349                           ;incstack = 0
  6350  002B58  0E01               	movlw	1
  6351  002B5A  EC67  F015         	call	_lcdInst
  6352  002B5E  0012               	return		;funcret
  6353  002B60                     __end_of_lcdClear:
  6354                           	opt stack 0
  6355                           tblptru	equ	0xFF8
  6356                           tblptrh	equ	0xFF7
  6357                           tblptrl	equ	0xFF6
  6358                           tablat	equ	0xFF5
  6359                           prodh	equ	0xFF4
  6360                           prodl	equ	0xFF3
  6361                           postinc0	equ	0xFEE
  6362                           wreg	equ	0xFE8
  6363                           postdec1	equ	0xFE5
  6364                           fsr1l	equ	0xFE1
  6365                           indf2	equ	0xFDF
  6366                           postinc2	equ	0xFDE
  6367                           postdec2	equ	0xFDD
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function _digitalWrite *****************
  6373 ;; Defined at:
  6374 ;;		line 53 in file "iopin.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  pin             2   33[COMRAM] PTR int 
  6377 ;;		 -> AA_float(4), redirectingServo(6), padServo(6), conveyorServo(6), 
  6378 ;;		 -> cylinderMotor(4), 
  6379 ;;  val             2   35[COMRAM] int 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;  p               2   40[COMRAM] int 
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  1    wreg      void 
  6384 ;; Registers used:
  6385 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6391 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;Total ram usage:        9 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    3
  6398 ;; This function calls:
  6399 ;;		Nothing
  6400 ;; This function is called by:
  6401 ;;		_main
  6402 ;;		_sortBattery
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text21
  6407  001F84                     __ptext21:
  6408                           	opt stack 0
  6409  001F84                     _digitalWrite:
  6410                           	opt stack 26
  6411                           
  6412                           ;iopin.c: 54: if(pin){
  6413                           
  6414                           ;incstack = 0
  6415  001F84  5022               	movf	digitalWrite@pin,w,c
  6416  001F86  1023               	iorwf	digitalWrite@pin+1,w,c
  6417  001F88  B4D8               	btfsc	status,2,c
  6418  001F8A  0012               	return	
  6419                           
  6420                           ;iopin.c: 55: int p = 1 << pin[1];
  6421  001F8C  EE20 F002          	lfsr	2,2
  6422  001F90  5022               	movf	digitalWrite@pin,w,c
  6423  001F92  26D9               	addwf	fsr2l,f,c
  6424  001F94  5023               	movf	digitalWrite@pin+1,w,c
  6425  001F96  22DA               	addwfc	fsr2h,f,c
  6426  001F98  50DF               	movf	indf2,w,c
  6427  001F9A  6E26               	movwf	??_digitalWrite& (0+255),c
  6428  001F9C  0E01               	movlw	1
  6429  001F9E  6E27               	movwf	(??_digitalWrite+1)& (0+255),c
  6430  001FA0  0E00               	movlw	0
  6431  001FA2  6E28               	movwf	(??_digitalWrite+2)& (0+255),c
  6432  001FA4  2A26               	incf	??_digitalWrite,f,c
  6433  001FA6  D003               	goto	u5514
  6434  001FA8                     u5515:
  6435  001FA8  90D8               	bcf	status,0,c
  6436  001FAA  3627               	rlcf	??_digitalWrite+1,f,c
  6437  001FAC  3628               	rlcf	??_digitalWrite+2,f,c
  6438  001FAE                     u5514:
  6439  001FAE  2E26               	decfsz	??_digitalWrite,f,c
  6440  001FB0  D7FB               	goto	u5515
  6441  001FB2  C027  F029         	movff	??_digitalWrite+1,digitalWrite@p
  6442  001FB6  C028  F02A         	movff	??_digitalWrite+2,digitalWrite@p+1
  6443                           
  6444                           ;iopin.c: 56: if(val == 0){
  6445  001FBA  5024               	movf	digitalWrite@val,w,c
  6446  001FBC  1025               	iorwf	digitalWrite@val+1,w,c
  6447  001FBE  A4D8               	btfss	status,2,c
  6448  001FC0  D02B               	goto	l5641
  6449                           
  6450                           ;iopin.c: 57: p ^= 0xff;
  6451  001FC2  0EFF               	movlw	255
  6452  001FC4  1A29               	xorwf	digitalWrite@p,f,c
  6453                           
  6454                           ;iopin.c: 58: }
  6455                           ;iopin.c: 60: switch(pin[0]){
  6456  001FC6  D028               	goto	l5641
  6457  001FC8                     l5617:
  6458  001FC8  0424               	decf	digitalWrite@val,w,c
  6459  001FCA  1025               	iorwf	digitalWrite@val+1,w,c
  6460  001FCC  A4D8               	btfss	status,2,c
  6461  001FCE  D003               	goto	l5621
  6462  001FD0  5029               	movf	digitalWrite@p,w,c
  6463  001FD2  1289               	iorwf	3977,f,c	;volatile
  6464  001FD4  0012               	return	
  6465  001FD6                     l5621:
  6466                           
  6467                           ;iopin.c: 62: else LATA &= p;
  6468  001FD6  5029               	movf	digitalWrite@p,w,c
  6469  001FD8  1689               	andwf	3977,f,c	;volatile
  6470                           
  6471                           ;iopin.c: 63: break;
  6472  001FDA  0012               	return	
  6473  001FDC                     l5623:
  6474  001FDC  0424               	decf	digitalWrite@val,w,c
  6475  001FDE  1025               	iorwf	digitalWrite@val+1,w,c
  6476  001FE0  A4D8               	btfss	status,2,c
  6477  001FE2  D003               	goto	l5627
  6478  001FE4  5029               	movf	digitalWrite@p,w,c
  6479  001FE6  128A               	iorwf	3978,f,c	;volatile
  6480  001FE8  0012               	return	
  6481  001FEA                     l5627:
  6482                           
  6483                           ;iopin.c: 65: else LATB &= p;
  6484  001FEA  5029               	movf	digitalWrite@p,w,c
  6485  001FEC  168A               	andwf	3978,f,c	;volatile
  6486                           
  6487                           ;iopin.c: 66: break;
  6488  001FEE  0012               	return	
  6489  001FF0                     l5629:
  6490  001FF0  0424               	decf	digitalWrite@val,w,c
  6491  001FF2  1025               	iorwf	digitalWrite@val+1,w,c
  6492  001FF4  A4D8               	btfss	status,2,c
  6493  001FF6  D003               	goto	l5633
  6494  001FF8  5029               	movf	digitalWrite@p,w,c
  6495  001FFA  128B               	iorwf	3979,f,c	;volatile
  6496  001FFC  0012               	return	
  6497  001FFE                     l5633:
  6498                           
  6499                           ;iopin.c: 68: else LATC &= p;
  6500  001FFE  5029               	movf	digitalWrite@p,w,c
  6501  002000  168B               	andwf	3979,f,c	;volatile
  6502                           
  6503                           ;iopin.c: 69: break;
  6504  002002  0012               	return	
  6505  002004                     l5635:
  6506  002004  0424               	decf	digitalWrite@val,w,c
  6507  002006  1025               	iorwf	digitalWrite@val+1,w,c
  6508  002008  A4D8               	btfss	status,2,c
  6509  00200A  D003               	goto	l5639
  6510  00200C  5029               	movf	digitalWrite@p,w,c
  6511  00200E  128C               	iorwf	3980,f,c	;volatile
  6512  002010  0012               	return	
  6513  002012                     l5639:
  6514                           
  6515                           ;iopin.c: 71: else LATD &= p;
  6516  002012  5029               	movf	digitalWrite@p,w,c
  6517  002014  168C               	andwf	3980,f,c	;volatile
  6518                           
  6519                           ;iopin.c: 72: }
  6520  002016  0012               	return	
  6521  002018                     l5641:
  6522  002018  C022  FFD9         	movff	digitalWrite@pin,fsr2l
  6523  00201C  C023  FFDA         	movff	digitalWrite@pin+1,fsr2h
  6524  002020  CFDE F026          	movff	postinc2,??_digitalWrite
  6525  002024  CFDD F027          	movff	postdec2,??_digitalWrite+1
  6526                           
  6527                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6528                           ; Switch size 1, requested type "space"
  6529                           ; Number of cases is 1, Range of values is 0 to 0
  6530                           ; switch strategies available:
  6531                           ; Name         Instructions Cycles
  6532                           ; simple_byte            4     3 (average)
  6533                           ;	Chosen strategy is simple_byte
  6534  002028  5027               	movf	??_digitalWrite+1,w,c
  6535  00202A  0A00               	xorlw	0	; case 0
  6536  00202C  A4D8               	btfss	status,2,c
  6537  00202E  0012               	return	
  6538                           
  6539                           ; Switch size 1, requested type "space"
  6540                           ; Number of cases is 4, Range of values is 0 to 3
  6541                           ; switch strategies available:
  6542                           ; Name         Instructions Cycles
  6543                           ; simple_byte           13     7 (average)
  6544                           ;	Chosen strategy is simple_byte
  6545  002030  5026               	movf	??_digitalWrite,w,c
  6546  002032  0A00               	xorlw	0	; case 0
  6547  002034  B4D8               	btfsc	status,2,c
  6548  002036  D7C8               	goto	l5617
  6549  002038  0A01               	xorlw	1	; case 1
  6550  00203A  B4D8               	btfsc	status,2,c
  6551  00203C  D7CF               	goto	l5623
  6552  00203E  0A03               	xorlw	3	; case 2
  6553  002040  B4D8               	btfsc	status,2,c
  6554  002042  D7D6               	goto	l5629
  6555  002044  0A01               	xorlw	1	; case 3
  6556  002046  A4D8               	btfss	status,2,c
  6557  002048  0012               	return	
  6558  00204A  D7DC               	goto	l5635
  6559  00204C                     __end_of_digitalWrite:
  6560                           	opt stack 0
  6561                           tblptru	equ	0xFF8
  6562                           tblptrh	equ	0xFF7
  6563                           tblptrl	equ	0xFF6
  6564                           tablat	equ	0xFF5
  6565                           prodh	equ	0xFF4
  6566                           prodl	equ	0xFF3
  6567                           postinc0	equ	0xFEE
  6568                           wreg	equ	0xFE8
  6569                           postdec1	equ	0xFE5
  6570                           fsr1l	equ	0xFE1
  6571                           indf2	equ	0xFDF
  6572                           postinc2	equ	0xFDE
  6573                           postdec2	equ	0xFDD
  6574                           fsr2h	equ	0xFDA
  6575                           fsr2l	equ	0xFD9
  6576                           status	equ	0xFD8
  6577                           
  6578 ;; *************** function _digitalRead *****************
  6579 ;; Defined at:
  6580 ;;		line 43 in file "iopin.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;  pin             2   33[COMRAM] PTR int 
  6583 ;;		 -> padPin2(4), padPin1(4), 
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;		None
  6586 ;; Return value:  Size  Location     Type
  6587 ;;                  2   33[COMRAM] int 
  6588 ;; Registers used:
  6589 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;Total ram usage:        4 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    3
  6602 ;; This function calls:
  6603 ;;		Nothing
  6604 ;; This function is called by:
  6605 ;;		_sortBattery
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           	psect	text22
  6610  001DCA                     __ptext22:
  6611                           	opt stack 0
  6612  001DCA                     _digitalRead:
  6613                           	opt stack 26
  6614                           
  6615                           ;iopin.c: 44: switch(pin[0]){
  6616                           
  6617                           ;incstack = 0
  6618  001DCA  D058               	goto	l5687
  6619  001DCC                     l5669:
  6620  001DCC  EE20 F002          	lfsr	2,2
  6621  001DD0  5022               	movf	digitalRead@pin,w,c
  6622  001DD2  26D9               	addwf	fsr2l,f,c
  6623  001DD4  5023               	movf	digitalRead@pin+1,w,c
  6624  001DD6  22DA               	addwfc	fsr2h,f,c
  6625  001DD8  50DF               	movf	indf2,w,c
  6626  001DDA  6E24               	movwf	??_digitalRead& (0+255),c
  6627  001DDC  CF80 F025          	movff	3968,??_digitalRead+1	;volatile
  6628  001DE0  2A24               	incf	??_digitalRead,f,c
  6629  001DE2  D002               	goto	u5594
  6630  001DE4                     u5595:
  6631  001DE4  90D8               	bcf	status,0,c
  6632  001DE6  3225               	rrcf	??_digitalRead+1,f,c
  6633  001DE8                     u5594:
  6634  001DE8  2E24               	decfsz	??_digitalRead,f,c
  6635  001DEA  D7FC               	goto	u5595
  6636  001DEC  0E01               	movlw	1
  6637  001DEE  1625               	andwf	??_digitalRead+1,f,c
  6638  001DF0  5025               	movf	??_digitalRead+1,w,c
  6639  001DF2  6E22               	movwf	?_digitalRead,c
  6640  001DF4  6A23               	clrf	?_digitalRead+1,c
  6641  001DF6  0012               	return	
  6642  001DF8                     l5673:
  6643  001DF8  EE20 F002          	lfsr	2,2
  6644  001DFC  5022               	movf	digitalRead@pin,w,c
  6645  001DFE  26D9               	addwf	fsr2l,f,c
  6646  001E00  5023               	movf	digitalRead@pin+1,w,c
  6647  001E02  22DA               	addwfc	fsr2h,f,c
  6648  001E04  50DF               	movf	indf2,w,c
  6649  001E06  6E24               	movwf	??_digitalRead& (0+255),c
  6650  001E08  CF81 F025          	movff	3969,??_digitalRead+1	;volatile
  6651  001E0C  2A24               	incf	??_digitalRead,f,c
  6652  001E0E  D002               	goto	u5604
  6653  001E10                     u5605:
  6654  001E10  90D8               	bcf	status,0,c
  6655  001E12  3225               	rrcf	??_digitalRead+1,f,c
  6656  001E14                     u5604:
  6657  001E14  2E24               	decfsz	??_digitalRead,f,c
  6658  001E16  D7FC               	goto	u5605
  6659  001E18  0E01               	movlw	1
  6660  001E1A  1625               	andwf	??_digitalRead+1,f,c
  6661  001E1C  5025               	movf	??_digitalRead+1,w,c
  6662  001E1E  6E22               	movwf	?_digitalRead,c
  6663  001E20  6A23               	clrf	?_digitalRead+1,c
  6664  001E22  0012               	return	
  6665  001E24                     l5677:
  6666  001E24  EE20 F002          	lfsr	2,2
  6667  001E28  5022               	movf	digitalRead@pin,w,c
  6668  001E2A  26D9               	addwf	fsr2l,f,c
  6669  001E2C  5023               	movf	digitalRead@pin+1,w,c
  6670  001E2E  22DA               	addwfc	fsr2h,f,c
  6671  001E30  50DF               	movf	indf2,w,c
  6672  001E32  6E24               	movwf	??_digitalRead& (0+255),c
  6673  001E34  CF82 F025          	movff	3970,??_digitalRead+1	;volatile
  6674  001E38  2A24               	incf	??_digitalRead,f,c
  6675  001E3A  D002               	goto	u5614
  6676  001E3C                     u5615:
  6677  001E3C  90D8               	bcf	status,0,c
  6678  001E3E  3225               	rrcf	??_digitalRead+1,f,c
  6679  001E40                     u5614:
  6680  001E40  2E24               	decfsz	??_digitalRead,f,c
  6681  001E42  D7FC               	goto	u5615
  6682  001E44  0E01               	movlw	1
  6683  001E46  1625               	andwf	??_digitalRead+1,f,c
  6684  001E48  5025               	movf	??_digitalRead+1,w,c
  6685  001E4A  6E22               	movwf	?_digitalRead,c
  6686  001E4C  6A23               	clrf	?_digitalRead+1,c
  6687  001E4E  0012               	return	
  6688  001E50                     l5681:
  6689  001E50  EE20 F002          	lfsr	2,2
  6690  001E54  5022               	movf	digitalRead@pin,w,c
  6691  001E56  26D9               	addwf	fsr2l,f,c
  6692  001E58  5023               	movf	digitalRead@pin+1,w,c
  6693  001E5A  22DA               	addwfc	fsr2h,f,c
  6694  001E5C  50DF               	movf	indf2,w,c
  6695  001E5E  6E24               	movwf	??_digitalRead& (0+255),c
  6696  001E60  CF83 F025          	movff	3971,??_digitalRead+1	;volatile
  6697  001E64  2A24               	incf	??_digitalRead,f,c
  6698  001E66  D002               	goto	u5624
  6699  001E68                     u5625:
  6700  001E68  90D8               	bcf	status,0,c
  6701  001E6A  3225               	rrcf	??_digitalRead+1,f,c
  6702  001E6C                     u5624:
  6703  001E6C  2E24               	decfsz	??_digitalRead,f,c
  6704  001E6E  D7FC               	goto	u5625
  6705  001E70  0E01               	movlw	1
  6706  001E72  1625               	andwf	??_digitalRead+1,f,c
  6707  001E74  5025               	movf	??_digitalRead+1,w,c
  6708  001E76  6E22               	movwf	?_digitalRead,c
  6709  001E78  6A23               	clrf	?_digitalRead+1,c
  6710  001E7A  0012               	return	
  6711  001E7C                     l5687:
  6712  001E7C  C022  FFD9         	movff	digitalRead@pin,fsr2l
  6713  001E80  C023  FFDA         	movff	digitalRead@pin+1,fsr2h
  6714  001E84  CFDE F024          	movff	postinc2,??_digitalRead
  6715  001E88  CFDD F025          	movff	postdec2,??_digitalRead+1
  6716                           
  6717                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6718                           ; Switch size 1, requested type "space"
  6719                           ; Number of cases is 1, Range of values is 0 to 0
  6720                           ; switch strategies available:
  6721                           ; Name         Instructions Cycles
  6722                           ; simple_byte            4     3 (average)
  6723                           ;	Chosen strategy is simple_byte
  6724  001E8C  5025               	movf	??_digitalRead+1,w,c
  6725  001E8E  0A00               	xorlw	0	; case 0
  6726  001E90  A4D8               	btfss	status,2,c
  6727  001E92  D00D               	goto	l272
  6728                           
  6729                           ; Switch size 1, requested type "space"
  6730                           ; Number of cases is 4, Range of values is 0 to 3
  6731                           ; switch strategies available:
  6732                           ; Name         Instructions Cycles
  6733                           ; simple_byte           13     7 (average)
  6734                           ;	Chosen strategy is simple_byte
  6735  001E94  5024               	movf	??_digitalRead,w,c
  6736  001E96  0A00               	xorlw	0	; case 0
  6737  001E98  B4D8               	btfsc	status,2,c
  6738  001E9A  D798               	goto	l5669
  6739  001E9C  0A01               	xorlw	1	; case 1
  6740  001E9E  B4D8               	btfsc	status,2,c
  6741  001EA0  D7AB               	goto	l5673
  6742  001EA2  0A03               	xorlw	3	; case 2
  6743  001EA4  B4D8               	btfsc	status,2,c
  6744  001EA6  D7BE               	goto	l5677
  6745  001EA8  0A01               	xorlw	1	; case 3
  6746  001EAA  B4D8               	btfsc	status,2,c
  6747  001EAC  D7D1               	goto	l5681
  6748  001EAE                     l272:
  6749                           
  6750                           ;iopin.c: 50: return -1;
  6751  001EAE  6822               	setf	?_digitalRead,c
  6752  001EB0  6823               	setf	?_digitalRead+1,c
  6753  001EB2  0012               	return		;funcret
  6754  001EB4                     __end_of_digitalRead:
  6755                           	opt stack 0
  6756                           tblptru	equ	0xFF8
  6757                           tblptrh	equ	0xFF7
  6758                           tblptrl	equ	0xFF6
  6759                           tablat	equ	0xFF5
  6760                           prodh	equ	0xFF4
  6761                           prodl	equ	0xFF3
  6762                           postinc0	equ	0xFEE
  6763                           wreg	equ	0xFE8
  6764                           postdec1	equ	0xFE5
  6765                           fsr1l	equ	0xFE1
  6766                           indf2	equ	0xFDF
  6767                           postinc2	equ	0xFDE
  6768                           postdec2	equ	0xFDD
  6769                           fsr2h	equ	0xFDA
  6770                           fsr2l	equ	0xFD9
  6771                           status	equ	0xFD8
  6772                           
  6773 ;; *************** function _analogRead *****************
  6774 ;; Defined at:
  6775 ;;		line 90 in file "iopin.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  channel         2   33[COMRAM] int 
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;		None
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  4   33[COMRAM] long 
  6782 ;; Registers used:
  6783 ;;		wreg, status,2, status,0
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6789 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;Total ram usage:        6 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:    3
  6796 ;; This function calls:
  6797 ;;		Nothing
  6798 ;; This function is called by:
  6799 ;;		_sortBattery
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           	psect	text23
  6804  0029CC                     __ptext23:
  6805                           	opt stack 0
  6806  0029CC                     _analogRead:
  6807                           	opt stack 26
  6808                           
  6809                           ;iopin.c: 91: ADCON0 = channel<<2;
  6810                           
  6811                           ;incstack = 0
  6812  0029CC  4422               	rlncf	analogRead@channel,w,c
  6813  0029CE  46E8               	rlncf	wreg,f,c
  6814  0029D0  0BFC               	andlw	252
  6815  0029D2  6EC2               	movwf	4034,c	;volatile
  6816                           
  6817                           ;iopin.c: 92: ADCON0 |= 1<<0;
  6818  0029D4  80C2               	bsf	4034,0,c	;volatile
  6819                           
  6820                           ;iopin.c: 93: ADCON0 |= 1<<1;
  6821  0029D6  82C2               	bsf	4034,1,c	;volatile
  6822  0029D8                     l297:
  6823  0029D8  B2C2               	btfsc	4034,1,c	;volatile
  6824  0029DA  D7FE               	goto	l297
  6825                           
  6826                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  6827  0029DC  50C3               	movf	4035,w,c	;volatile
  6828  0029DE  CFC4 F026          	movff	4036,??_analogRead	;volatile
  6829  0029E2  6A27               	clrf	(??_analogRead+1)& (0+255),c
  6830  0029E4  C026  F027         	movff	??_analogRead,??_analogRead+1
  6831  0029E8  6A26               	clrf	??_analogRead,c
  6832  0029EA  2626               	addwf	??_analogRead,f,c
  6833  0029EC  0E00               	movlw	0
  6834  0029EE  2227               	addwfc	??_analogRead+1,f,c
  6835  0029F0  C026  F022         	movff	??_analogRead,?_analogRead
  6836  0029F4  C027  F023         	movff	??_analogRead+1,?_analogRead+1
  6837  0029F8  0E00               	movlw	0
  6838  0029FA  BE23               	btfsc	?_analogRead+1,7,c
  6839  0029FC  0EFF               	movlw	-1
  6840  0029FE  6E24               	movwf	?_analogRead+2,c
  6841  002A00  6E25               	movwf	?_analogRead+3,c
  6842  002A02  0012               	return	
  6843  002A04                     __end_of_analogRead:
  6844                           	opt stack 0
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           prodh	equ	0xFF4
  6850                           prodl	equ	0xFF3
  6851                           postinc0	equ	0xFEE
  6852                           wreg	equ	0xFE8
  6853                           postdec1	equ	0xFE5
  6854                           fsr1l	equ	0xFE1
  6855                           indf2	equ	0xFDF
  6856                           postinc2	equ	0xFDE
  6857                           postdec2	equ	0xFDD
  6858                           fsr2h	equ	0xFDA
  6859                           fsr2l	equ	0xFD9
  6860                           status	equ	0xFD8
  6861                           
  6862 ;; *************** function _pinSetup *****************
  6863 ;; Defined at:
  6864 ;;		line 193 in file "main.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;		None
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;		None
  6869 ;; Return value:  Size  Location     Type
  6870 ;;                  1    wreg      void 
  6871 ;; Registers used:
  6872 ;;		wreg, status,2, status,0
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6882 ;;Total ram usage:        0 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    3
  6885 ;; This function calls:
  6886 ;;		Nothing
  6887 ;; This function is called by:
  6888 ;;		_main
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           	psect	text24
  6893  00298C                     __ptext24:
  6894                           	opt stack 0
  6895  00298C                     _pinSetup:
  6896                           	opt stack 27
  6897                           
  6898                           ;main.c: 199: TRISA = 0xFF;
  6899                           
  6900                           ;incstack = 0
  6901  00298C  6892               	setf	3986,c	;volatile
  6902                           
  6903                           ;main.c: 200: TRISB = 0xFF;
  6904  00298E  6893               	setf	3987,c	;volatile
  6905                           
  6906                           ;main.c: 201: TRISC = 0x00;
  6907  002990  0E00               	movlw	0
  6908  002992  6E94               	movwf	3988,c	;volatile
  6909                           
  6910                           ;main.c: 202: TRISD = 0x00;
  6911  002994  0E00               	movlw	0
  6912  002996  6E95               	movwf	3989,c	;volatile
  6913                           
  6914                           ;main.c: 203: TRISE = 0x00;
  6915  002998  0E00               	movlw	0
  6916  00299A  6E96               	movwf	3990,c	;volatile
  6917                           
  6918                           ;main.c: 205: LATA = 0x00;
  6919  00299C  0E00               	movlw	0
  6920  00299E  6E89               	movwf	3977,c	;volatile
  6921                           
  6922                           ;main.c: 206: LATB = 0x00;
  6923  0029A0  0E00               	movlw	0
  6924  0029A2  6E8A               	movwf	3978,c	;volatile
  6925                           
  6926                           ;main.c: 207: LATC = 0x00;
  6927  0029A4  0E00               	movlw	0
  6928  0029A6  6E8B               	movwf	3979,c	;volatile
  6929                           
  6930                           ;main.c: 208: LATD = 0x00;
  6931  0029A8  0E00               	movlw	0
  6932  0029AA  6E8C               	movwf	3980,c	;volatile
  6933                           
  6934                           ;main.c: 209: LATE = 0x00;
  6935  0029AC  0E00               	movlw	0
  6936  0029AE  6E8D               	movwf	3981,c	;volatile
  6937                           
  6938                           ;main.c: 211: ADCON0 = 0x00;
  6939  0029B0  0E00               	movlw	0
  6940  0029B2  6EC2               	movwf	4034,c	;volatile
  6941                           
  6942                           ;main.c: 212: ADCON1 |= 0x10;
  6943  0029B4  88C1               	bsf	4033,4,c	;volatile
  6944                           
  6945                           ;main.c: 213: ADCON1 |= 0x0B;
  6946  0029B6  0E0B               	movlw	11
  6947  0029B8  12C1               	iorwf	4033,f,c	;volatile
  6948                           
  6949                           ;main.c: 218: ADCON2 = 0;
  6950  0029BA  0E00               	movlw	0
  6951  0029BC  6EC0               	movwf	4032,c	;volatile
  6952                           
  6953                           ;main.c: 219: ADCON2 |= 0b010;
  6954  0029BE  82C0               	bsf	4032,1,c	;volatile
  6955                           
  6956                           ;main.c: 220: ADCON2 |= 0b110<<3;
  6957  0029C0  0E30               	movlw	48
  6958  0029C2  12C0               	iorwf	4032,f,c	;volatile
  6959                           
  6960                           ;main.c: 221: ADCON2 |= 1<<7;
  6961  0029C4  8EC0               	bsf	4032,7,c	;volatile
  6962                           
  6963                           ;main.c: 225: INT0IE = 1;
  6964  0029C6  88F2               	bsf	intcon,4,c	;volatile
  6965                           
  6966                           ;main.c: 226: (INTCONbits.GIE = 1);
  6967  0029C8  8EF2               	bsf	intcon,7,c	;volatile
  6968  0029CA  0012               	return		;funcret
  6969  0029CC                     __end_of_pinSetup:
  6970                           	opt stack 0
  6971                           tblptru	equ	0xFF8
  6972                           tblptrh	equ	0xFF7
  6973                           tblptrl	equ	0xFF6
  6974                           tablat	equ	0xFF5
  6975                           prodh	equ	0xFF4
  6976                           prodl	equ	0xFF3
  6977                           intcon	equ	0xFF2
  6978                           postinc0	equ	0xFEE
  6979                           wreg	equ	0xFE8
  6980                           postdec1	equ	0xFE5
  6981                           fsr1l	equ	0xFE1
  6982                           indf2	equ	0xFDF
  6983                           postinc2	equ	0xFDE
  6984                           postdec2	equ	0xFDD
  6985                           fsr2h	equ	0xFDA
  6986                           fsr2l	equ	0xFD9
  6987                           status	equ	0xFD8
  6988                           
  6989 ;; *************** function _initServo *****************
  6990 ;; Defined at:
  6991 ;;		line 21 in file "servo.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  motor           2    4[BANK1 ] PTR int 
  6994 ;;		 -> redirectingServo(6), padServo(6), conveyorServo(6), 
  6995 ;;  angle           2    6[BANK1 ] int 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  1    wreg      void 
  7000 ;; Registers used:
  7001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7007 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;Total ram usage:        8 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    7
  7014 ;; This function calls:
  7015 ;;		_initTimer
  7016 ;;		_setAngle
  7017 ;;		_startTimer
  7018 ;; This function is called by:
  7019 ;;		_main
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           	psect	text25
  7024  00240E                     __ptext25:
  7025                           	opt stack 0
  7026  00240E                     _initServo:
  7027                           	opt stack 23
  7028                           
  7029                           ;servo.c: 22: n++;
  7030                           
  7031                           ;incstack = 0
  7032  00240E  0100               	movlb	0	; () banked
  7033  002410  4BFE               	infsnz	_n& (0+255),f,b
  7034  002412  2BFF               	incf	(_n+1)& (0+255),f,b
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;servo.c: 23: servos[n-1] = motor;
  7038  002414  0EFE               	movlw	254
  7039  002416  0101               	movlb	1	; () banked
  7040  002418  6F08               	movwf	??_initServo& (0+255),b
  7041  00241A  0EFF               	movlw	255
  7042  00241C  0101               	movlb	1	; () banked
  7043  00241E  6F09               	movwf	(??_initServo+1)& (0+255),b
  7044  002420  C0FE  F10A         	movff	_n,??_initServo+2
  7045  002424  C0FF  F10B         	movff	_n+1,??_initServo+3
  7046  002428  90D8               	bcf	status,0,c
  7047  00242A  0101               	movlb	1	; () banked
  7048  00242C  370A               	rlcf	(??_initServo+2)& (0+255),f,b
  7049  00242E  370B               	rlcf	(??_initServo+3)& (0+255),f,b
  7050  002430  0101               	movlb	1	; () banked
  7051  002432  5108               	movf	??_initServo& (0+255),w,b
  7052  002434  0101               	movlb	1	; () banked
  7053  002436  270A               	addwf	(??_initServo+2)& (0+255),f,b
  7054  002438  0101               	movlb	1	; () banked
  7055  00243A  5109               	movf	(??_initServo+1)& (0+255),w,b
  7056  00243C  0101               	movlb	1	; () banked
  7057  00243E  230B               	addwfc	(??_initServo+3)& (0+255),f,b
  7058  002440  0E4F               	movlw	low _servos
  7059  002442  0101               	movlb	1	; () banked
  7060  002444  250A               	addwf	(??_initServo+2)& (0+255),w,b
  7061  002446  6ED9               	movwf	fsr2l,c
  7062  002448  0E00               	movlw	high _servos
  7063  00244A  0101               	movlb	1	; () banked
  7064  00244C  210B               	addwfc	(??_initServo+3)& (0+255),w,b
  7065  00244E  6EDA               	movwf	fsr2h,c
  7066  002450  C104  FFDE         	movff	initServo@motor,postinc2
  7067  002454  C105  FFDD         	movff	initServo@motor+1,postdec2
  7068                           
  7069                           ; BSR set to: 1
  7070                           ;servo.c: 24: setAngle(motor, angle);
  7071  002458  C104  F0D1         	movff	initServo@motor,setAngle@motor
  7072  00245C  C105  F0D2         	movff	initServo@motor+1,setAngle@motor+1
  7073  002460  C106  F0D3         	movff	initServo@angle,setAngle@angle
  7074  002464  C107  F0D4         	movff	initServo@angle+1,setAngle@angle+1
  7075  002468  EC5A  F00F         	call	_setAngle	;wreg free
  7076                           
  7077                           ;servo.c: 26: initTimer(0);
  7078  00246C  0E00               	movlw	0
  7079  00246E  6E23               	movwf	initTimer@timer+1,c
  7080  002470  0E00               	movlw	0
  7081  002472  6E22               	movwf	initTimer@timer,c
  7082  002474  EC80  F014         	call	_initTimer	;wreg free
  7083                           
  7084                           ;servo.c: 27: startTimer(0,0);
  7085  002478  0E00               	movlw	0
  7086  00247A  6E23               	movwf	startTimer@timer+1,c
  7087  00247C  0E00               	movlw	0
  7088  00247E  6E22               	movwf	startTimer@timer,c
  7089  002480  0E00               	movlw	0
  7090  002482  6E24               	movwf	startTimer@val,c
  7091  002484  0E00               	movlw	0
  7092  002486  6E25               	movwf	startTimer@val+1,c
  7093  002488  0E00               	movlw	0
  7094  00248A  6E26               	movwf	startTimer@val+2,c
  7095  00248C  0E00               	movlw	0
  7096  00248E  6E27               	movwf	startTimer@val+3,c
  7097  002490  EC34  F014         	call	_startTimer	;wreg free
  7098  002494  0012               	return		;funcret
  7099  002496                     __end_of_initServo:
  7100                           	opt stack 0
  7101                           tblptru	equ	0xFF8
  7102                           tblptrh	equ	0xFF7
  7103                           tblptrl	equ	0xFF6
  7104                           tablat	equ	0xFF5
  7105                           prodh	equ	0xFF4
  7106                           prodl	equ	0xFF3
  7107                           intcon	equ	0xFF2
  7108                           postinc0	equ	0xFEE
  7109                           wreg	equ	0xFE8
  7110                           postdec1	equ	0xFE5
  7111                           fsr1l	equ	0xFE1
  7112                           indf2	equ	0xFDF
  7113                           postinc2	equ	0xFDE
  7114                           postdec2	equ	0xFDD
  7115                           fsr2h	equ	0xFDA
  7116                           fsr2l	equ	0xFD9
  7117                           status	equ	0xFD8
  7118                           
  7119 ;; *************** function _startTimer *****************
  7120 ;; Defined at:
  7121 ;;		line 75 in file "timer.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;  timer           2   33[COMRAM] int 
  7124 ;;  val             4   35[COMRAM] long 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;		None
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		wreg, status,2, status,0
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7136 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;Total ram usage:        8 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    3
  7143 ;; This function calls:
  7144 ;;		Nothing
  7145 ;; This function is called by:
  7146 ;;		_initServo
  7147 ;;		_testFrequency
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text26
  7152  002868                     __ptext26:
  7153                           	opt stack 0
  7154  002868                     _startTimer:
  7155                           	opt stack 26
  7156                           
  7157                           ;timer.c: 76: switch(timer){
  7158                           
  7159                           ;incstack = 0
  7160  002868  D012               	goto	l4163
  7161  00286A                     l378:
  7162                           
  7163                           ;timer.c: 78: TMR0H = val>>8;
  7164  00286A  C025  FFD7         	movff	startTimer@val+1,4055	;volatile
  7165                           
  7166                           ;timer.c: 79: TMR0L = val;
  7167  00286E  C024  FFD6         	movff	startTimer@val,4054	;volatile
  7168                           
  7169                           ;timer.c: 80: T0CON |= 1<<7;
  7170  002872  8ED5               	bsf	4053,7,c	;volatile
  7171                           
  7172                           ;timer.c: 81: break;
  7173  002874  0012               	return	
  7174  002876                     l380:
  7175                           
  7176                           ;timer.c: 83: TMR1H = val>>8;
  7177  002876  C025  FFCF         	movff	startTimer@val+1,4047	;volatile
  7178                           
  7179                           ;timer.c: 84: TMR1L = val;
  7180  00287A  C024  FFCE         	movff	startTimer@val,4046	;volatile
  7181                           
  7182                           ;timer.c: 85: T1CON |= 1<<0;
  7183  00287E  80CD               	bsf	4045,0,c	;volatile
  7184                           
  7185                           ;timer.c: 86: break;
  7186  002880  0012               	return	
  7187  002882                     l381:
  7188                           
  7189                           ;timer.c: 88: TMR3H = val>>8;
  7190  002882  C025  FFB3         	movff	startTimer@val+1,4019	;volatile
  7191                           
  7192                           ;timer.c: 89: TMR3L = val;
  7193  002886  C024  FFB2         	movff	startTimer@val,4018	;volatile
  7194                           
  7195                           ;timer.c: 90: T3CON |= 1<<0;
  7196  00288A  80B1               	bsf	4017,0,c	;volatile
  7197                           
  7198                           ;timer.c: 91: }
  7199  00288C  0012               	return	
  7200  00288E                     l4163:
  7201  00288E  C022  F028         	movff	startTimer@timer,??_startTimer
  7202  002892  C023  F029         	movff	startTimer@timer+1,??_startTimer+1
  7203                           
  7204                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7205                           ; Switch size 1, requested type "space"
  7206                           ; Number of cases is 1, Range of values is 0 to 0
  7207                           ; switch strategies available:
  7208                           ; Name         Instructions Cycles
  7209                           ; simple_byte            4     3 (average)
  7210                           ;	Chosen strategy is simple_byte
  7211  002896  5029               	movf	??_startTimer+1,w,c
  7212  002898  0A00               	xorlw	0	; case 0
  7213  00289A  A4D8               	btfss	status,2,c
  7214  00289C  0012               	return	
  7215                           
  7216                           ; Switch size 1, requested type "space"
  7217                           ; Number of cases is 3, Range of values is 0 to 3
  7218                           ; switch strategies available:
  7219                           ; Name         Instructions Cycles
  7220                           ; simple_byte           10     6 (average)
  7221                           ;	Chosen strategy is simple_byte
  7222  00289E  5028               	movf	??_startTimer,w,c
  7223  0028A0  0A00               	xorlw	0	; case 0
  7224  0028A2  B4D8               	btfsc	status,2,c
  7225  0028A4  D7E2               	goto	l378
  7226  0028A6  0A01               	xorlw	1	; case 1
  7227  0028A8  B4D8               	btfsc	status,2,c
  7228  0028AA  D7E5               	goto	l380
  7229  0028AC  0A02               	xorlw	2	; case 3
  7230  0028AE  A4D8               	btfss	status,2,c
  7231  0028B0  0012               	return	
  7232  0028B2  D7E7               	goto	l381
  7233  0028B4                     __end_of_startTimer:
  7234                           	opt stack 0
  7235                           tblptru	equ	0xFF8
  7236                           tblptrh	equ	0xFF7
  7237                           tblptrl	equ	0xFF6
  7238                           tablat	equ	0xFF5
  7239                           prodh	equ	0xFF4
  7240                           prodl	equ	0xFF3
  7241                           intcon	equ	0xFF2
  7242                           postinc0	equ	0xFEE
  7243                           wreg	equ	0xFE8
  7244                           postdec1	equ	0xFE5
  7245                           fsr1l	equ	0xFE1
  7246                           indf2	equ	0xFDF
  7247                           postinc2	equ	0xFDE
  7248                           postdec2	equ	0xFDD
  7249                           fsr2h	equ	0xFDA
  7250                           fsr2l	equ	0xFD9
  7251                           status	equ	0xFD8
  7252                           
  7253 ;; *************** function _setAngle *****************
  7254 ;; Defined at:
  7255 ;;		line 41 in file "servo.c"
  7256 ;; Parameters:    Size  Location     Type
  7257 ;;  motor           2   81[BANK0 ] PTR int 
  7258 ;;		 -> redirectingServo(6), padServo(6), conveyorServo(6), 
  7259 ;;  angle           2   83[BANK0 ] int 
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;  i               2    2[BANK1 ] int 
  7262 ;;  period          2    0[BANK1 ] unsigned int 
  7263 ;; Return value:  Size  Location     Type
  7264 ;;                  1    wreg      void 
  7265 ;; Registers used:
  7266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7272 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7273 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;      Totals:         2       4       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7276 ;;Total ram usage:       10 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    6
  7279 ;; This function calls:
  7280 ;;		_angleToPulse
  7281 ;; This function is called by:
  7282 ;;		_sortBattery
  7283 ;;		_initServo
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           	psect	text27
  7288  001EB4                     __ptext27:
  7289                           	opt stack 0
  7290  001EB4                     _setAngle:
  7291                           	opt stack 23
  7292                           
  7293                           ;servo.c: 42: unsigned int period = 50000;
  7294                           
  7295                           ;incstack = 0
  7296  001EB4  0EC3               	movlw	195
  7297  001EB6  0101               	movlb	1	; () banked
  7298  001EB8  6F01               	movwf	(setAngle@period+1)& (0+255),b
  7299  001EBA  0E50               	movlw	80
  7300  001EBC  6F00               	movwf	setAngle@period& (0+255),b
  7301                           
  7302                           ;servo.c: 43: for(int i = 0; i < n; i++){
  7303  001EBE  0E00               	movlw	0
  7304  001EC0  0101               	movlb	1	; () banked
  7305  001EC2  6F03               	movwf	(setAngle@i+1)& (0+255),b
  7306  001EC4  0E00               	movlw	0
  7307  001EC6  6F02               	movwf	setAngle@i& (0+255),b
  7308  001EC8  D03F               	goto	l5657
  7309  001ECA                     l5649:
  7310                           
  7311                           ;servo.c: 44: if(servos[i] == motor){
  7312  001ECA  90D8               	bcf	status,0,c
  7313  001ECC  0101               	movlb	1	; () banked
  7314  001ECE  3502               	rlcf	setAngle@i& (0+255),w,b
  7315  001ED0  6ED9               	movwf	fsr2l,c
  7316  001ED2  0101               	movlb	1	; () banked
  7317  001ED4  3503               	rlcf	(setAngle@i+1)& (0+255),w,b
  7318  001ED6  6EDA               	movwf	fsr2h,c
  7319  001ED8  0E4F               	movlw	low _servos
  7320  001EDA  26D9               	addwf	fsr2l,f,c
  7321  001EDC  0E00               	movlw	high _servos
  7322  001EDE  22DA               	addwfc	fsr2h,f,c
  7323  001EE0  0100               	movlb	0	; () banked
  7324  001EE2  51D1               	movf	setAngle@motor& (0+255),w,b
  7325  001EE4  18DE               	xorwf	postinc2,w,c
  7326  001EE6  E11C               	bnz	l5653
  7327  001EE8  0100               	movlb	0	; () banked
  7328  001EEA  51D2               	movf	(setAngle@motor+1)& (0+255),w,b
  7329  001EEC  18DE               	xorwf	postinc2,w,c
  7330  001EEE  A4D8               	btfss	status,2,c
  7331  001EF0  D017               	goto	l5653
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
  7335  001EF2  C0D3  F0BA         	movff	setAngle@angle,angleToPulse@angle
  7336  001EF6  C0D4  F0BB         	movff	setAngle@angle+1,angleToPulse@angle+1
  7337  001EFA  EC65  F00B         	call	_angleToPulse	;wreg free
  7338  001EFE  90D8               	bcf	status,0,c
  7339  001F00  0101               	movlb	1	; () banked
  7340  001F02  3502               	rlcf	setAngle@i& (0+255),w,b
  7341  001F04  6ED9               	movwf	fsr2l,c
  7342  001F06  0101               	movlb	1	; () banked
  7343  001F08  3503               	rlcf	(setAngle@i+1)& (0+255),w,b
  7344  001F0A  6EDA               	movwf	fsr2h,c
  7345  001F0C  0E2A               	movlw	low _pulse
  7346  001F0E  26D9               	addwf	fsr2l,f,c
  7347  001F10  0E01               	movlw	high _pulse
  7348  001F12  22DA               	addwfc	fsr2h,f,c
  7349  001F14  0100               	movlb	0	; () banked
  7350  001F16  C0BA  FFDE         	movff	?_angleToPulse,postinc2
  7351  001F1A  0100               	movlb	0	; () banked
  7352  001F1C  C0BB  FFDD         	movff	?_angleToPulse+1,postdec2
  7353  001F20                     l5653:
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;servo.c: 46: }
  7357                           ;servo.c: 47: period-=pulse[i];
  7358  001F20  90D8               	bcf	status,0,c
  7359  001F22  0101               	movlb	1	; () banked
  7360  001F24  3502               	rlcf	setAngle@i& (0+255),w,b
  7361  001F26  6ED9               	movwf	fsr2l,c
  7362  001F28  0101               	movlb	1	; () banked
  7363  001F2A  3503               	rlcf	(setAngle@i+1)& (0+255),w,b
  7364  001F2C  6EDA               	movwf	fsr2h,c
  7365  001F2E  0E2A               	movlw	low _pulse
  7366  001F30  26D9               	addwf	fsr2l,f,c
  7367  001F32  0E01               	movlw	high _pulse
  7368  001F34  22DA               	addwfc	fsr2h,f,c
  7369  001F36  50DE               	movf	postinc2,w,c
  7370  001F38  0101               	movlb	1	; () banked
  7371  001F3A  5F00               	subwf	setAngle@period& (0+255),f,b
  7372  001F3C  50DD               	movf	postdec2,w,c
  7373  001F3E  0101               	movlb	1	; () banked
  7374  001F40  5B01               	subwfb	(setAngle@period+1)& (0+255),f,b
  7375                           
  7376                           ; BSR set to: 1
  7377  001F42  0101               	movlb	1	; () banked
  7378  001F44  4B02               	infsnz	setAngle@i& (0+255),f,b
  7379  001F46  2B03               	incf	(setAngle@i+1)& (0+255),f,b
  7380  001F48                     l5657:
  7381                           
  7382                           ; BSR set to: 1
  7383  001F48  0100               	movlb	0	; () banked
  7384  001F4A  51FE               	movf	_n& (0+255),w,b
  7385  001F4C  0101               	movlb	1	; () banked
  7386  001F4E  5D02               	subwf	setAngle@i& (0+255),w,b
  7387  001F50  0101               	movlb	1	; () banked
  7388  001F52  5103               	movf	(setAngle@i+1)& (0+255),w,b
  7389  001F54  0A80               	xorlw	128
  7390  001F56  6E3D               	movwf	??_setAngle& (0+255),c
  7391  001F58  0100               	movlb	0	; () banked
  7392  001F5A  51FF               	movf	(_n+1)& (0+255),w,b
  7393  001F5C  0A80               	xorlw	128
  7394  001F5E  583D               	subwfb	??_setAngle& (0+255),w,c
  7395  001F60  A0D8               	btfss	status,0,c
  7396  001F62  D7B3               	goto	l5649
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;servo.c: 48: }
  7400                           ;servo.c: 49: pulse[n] = period;
  7401                           
  7402                           ; BSR set to: 0
  7403  001F64  90D8               	bcf	status,0,c
  7404  001F66  0100               	movlb	0	; () banked
  7405  001F68  35FE               	rlcf	_n& (0+255),w,b
  7406  001F6A  6ED9               	movwf	fsr2l,c
  7407  001F6C  0100               	movlb	0	; () banked
  7408  001F6E  35FF               	rlcf	(_n+1)& (0+255),w,b
  7409  001F70  6EDA               	movwf	fsr2h,c
  7410  001F72  0E2A               	movlw	low _pulse
  7411  001F74  26D9               	addwf	fsr2l,f,c
  7412  001F76  0E01               	movlw	high _pulse
  7413  001F78  22DA               	addwfc	fsr2h,f,c
  7414  001F7A  C100  FFDE         	movff	setAngle@period,postinc2
  7415  001F7E  C101  FFDD         	movff	setAngle@period+1,postdec2
  7416                           
  7417                           ; BSR set to: 0
  7418  001F82  0012               	return		;funcret
  7419  001F84                     __end_of_setAngle:
  7420                           	opt stack 0
  7421                           tblptru	equ	0xFF8
  7422                           tblptrh	equ	0xFF7
  7423                           tblptrl	equ	0xFF6
  7424                           tablat	equ	0xFF5
  7425                           prodh	equ	0xFF4
  7426                           prodl	equ	0xFF3
  7427                           intcon	equ	0xFF2
  7428                           postinc0	equ	0xFEE
  7429                           wreg	equ	0xFE8
  7430                           postdec1	equ	0xFE5
  7431                           fsr1l	equ	0xFE1
  7432                           indf2	equ	0xFDF
  7433                           postinc2	equ	0xFDE
  7434                           postdec2	equ	0xFDD
  7435                           fsr2h	equ	0xFDA
  7436                           fsr2l	equ	0xFD9
  7437                           status	equ	0xFD8
  7438                           
  7439 ;; *************** function _angleToPulse *****************
  7440 ;; Defined at:
  7441 ;;		line 33 in file "servo.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  angle           2   58[BANK0 ] int 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  a000            4   77[BANK0 ] long 
  7446 ;;  a180            4   70[BANK0 ] long 
  7447 ;;  offset          4   66[BANK0 ] long 
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  4   58[BANK0 ] long 
  7450 ;; Registers used:
  7451 ;;		wreg, status,2, status,0, cstack
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7457 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;Total ram usage:       23 bytes
  7462 ;; Hardware stack levels used:    1
  7463 ;; Hardware stack levels required when called:    5
  7464 ;; This function calls:
  7465 ;;		___altoft
  7466 ;;		___awtoft
  7467 ;;		___ftadd
  7468 ;;		___ftdiv
  7469 ;;		___ftmul
  7470 ;;		___fttol
  7471 ;; This function is called by:
  7472 ;;		_setAngle
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           	psect	text28
  7477  0016CA                     __ptext28:
  7478                           	opt stack 0
  7479  0016CA                     _angleToPulse:
  7480                           	opt stack 23
  7481                           
  7482                           ;servo.c: 34: long offset = -600;
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;incstack = 0
  7486  0016CA  0EA8               	movlw	168
  7487  0016CC  0100               	movlb	0	; () banked
  7488  0016CE  6FC2               	movwf	angleToPulse@offset& (0+255),b
  7489  0016D0  0EFD               	movlw	253
  7490  0016D2  6FC3               	movwf	(angleToPulse@offset+1)& (0+255),b
  7491  0016D4  0EFF               	movlw	255
  7492  0016D6  6FC4               	movwf	(angleToPulse@offset+2)& (0+255),b
  7493  0016D8  0EFF               	movlw	255
  7494  0016DA  6FC5               	movwf	(angleToPulse@offset+3)& (0+255),b
  7495                           
  7496                           ;servo.c: 35: long a000 = 1250;
  7497  0016DC  0EE2               	movlw	226
  7498  0016DE  0100               	movlb	0	; () banked
  7499  0016E0  6FCD               	movwf	angleToPulse@a000& (0+255),b
  7500  0016E2  0E04               	movlw	4
  7501  0016E4  6FCE               	movwf	(angleToPulse@a000+1)& (0+255),b
  7502  0016E6  0E00               	movlw	0
  7503  0016E8  6FCF               	movwf	(angleToPulse@a000+2)& (0+255),b
  7504  0016EA  0E00               	movlw	0
  7505  0016EC  6FD0               	movwf	(angleToPulse@a000+3)& (0+255),b
  7506                           
  7507                           ;servo.c: 36: long a180 = 6250;
  7508  0016EE  0E6A               	movlw	106
  7509  0016F0  0100               	movlb	0	; () banked
  7510  0016F2  6FC6               	movwf	angleToPulse@a180& (0+255),b
  7511  0016F4  0E18               	movlw	24
  7512  0016F6  6FC7               	movwf	(angleToPulse@a180+1)& (0+255),b
  7513  0016F8  0E00               	movlw	0
  7514  0016FA  6FC8               	movwf	(angleToPulse@a180+2)& (0+255),b
  7515  0016FC  0E00               	movlw	0
  7516  0016FE  6FC9               	movwf	(angleToPulse@a180+3)& (0+255),b
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  7520  001700  C0CD  F0BE         	movff	angleToPulse@a000,??_angleToPulse
  7521  001704  C0CE  F0BF         	movff	angleToPulse@a000+1,??_angleToPulse+1
  7522  001708  C0CF  F0C0         	movff	angleToPulse@a000+2,??_angleToPulse+2
  7523  00170C  C0D0  F0C1         	movff	angleToPulse@a000+3,??_angleToPulse+3
  7524  001710  0100               	movlb	0	; () banked
  7525  001712  1FBE               	comf	??_angleToPulse& (0+255),f,b
  7526  001714  1FBF               	comf	(??_angleToPulse+1)& (0+255),f,b
  7527  001716  1FC0               	comf	(??_angleToPulse+2)& (0+255),f,b
  7528  001718  1FC1               	comf	(??_angleToPulse+3)& (0+255),f,b
  7529  00171A  2BBE               	incf	??_angleToPulse& (0+255),f,b
  7530  00171C  0E00               	movlw	0
  7531  00171E  23BF               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  7532  001720  23C0               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  7533  001722  23C1               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  7534  001724  0100               	movlb	0	; () banked
  7535  001726  51C6               	movf	angleToPulse@a180& (0+255),w,b
  7536  001728  0100               	movlb	0	; () banked
  7537  00172A  25BE               	addwf	??_angleToPulse& (0+255),w,b
  7538  00172C  6E2A               	movwf	___altoft@c,c
  7539  00172E  0100               	movlb	0	; () banked
  7540  001730  51C7               	movf	(angleToPulse@a180+1)& (0+255),w,b
  7541  001732  0100               	movlb	0	; () banked
  7542  001734  21BF               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  7543  001736  6E2B               	movwf	___altoft@c+1,c
  7544  001738  0100               	movlb	0	; () banked
  7545  00173A  51C8               	movf	(angleToPulse@a180+2)& (0+255),w,b
  7546  00173C  0100               	movlb	0	; () banked
  7547  00173E  21C0               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  7548  001740  6E2C               	movwf	___altoft@c+2,c
  7549  001742  0100               	movlb	0	; () banked
  7550  001744  51C9               	movf	(angleToPulse@a180+3)& (0+255),w,b
  7551  001746  0100               	movlb	0	; () banked
  7552  001748  21C1               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  7553  00174A  6E2D               	movwf	___altoft@c+3,c
  7554  00174C  ECCE  F012         	call	___altoft	;wreg free
  7555  001750  C02A  F089         	movff	?___altoft,___ftmul@f2
  7556  001754  C02B  F08A         	movff	?___altoft+1,___ftmul@f2+1
  7557  001758  C02C  F08B         	movff	?___altoft+2,___ftmul@f2+2
  7558  00175C  0E00               	movlw	0
  7559  00175E  6E37               	movwf	___ftdiv@f2,c
  7560  001760  0E34               	movlw	52
  7561  001762  6E38               	movwf	___ftdiv@f2+1,c
  7562  001764  0E43               	movlw	67
  7563  001766  6E39               	movwf	___ftdiv@f2+2,c
  7564  001768  C0BA  F02A         	movff	angleToPulse@angle,___awtoft@c
  7565  00176C  C0BB  F02B         	movff	angleToPulse@angle+1,___awtoft@c+1
  7566  001770  EC02  F015         	call	___awtoft	;wreg free
  7567  001774  C02A  F034         	movff	?___awtoft,___ftdiv@f1
  7568  001778  C02B  F035         	movff	?___awtoft+1,___ftdiv@f1+1
  7569  00177C  C02C  F036         	movff	?___awtoft+2,___ftdiv@f1+2
  7570  001780  EC63  F00E         	call	___ftdiv	;wreg free
  7571  001784  C034  F086         	movff	?___ftdiv,___ftmul@f1
  7572  001788  C035  F087         	movff	?___ftdiv+1,___ftmul@f1+1
  7573  00178C  C036  F088         	movff	?___ftdiv+2,___ftmul@f1+2
  7574  001790  ECB6  F00A         	call	___ftmul	;wreg free
  7575  001794  C086  F0A2         	movff	?___ftmul,___ftadd@f2
  7576  001798  C087  F0A3         	movff	?___ftmul+1,___ftadd@f2+1
  7577  00179C  C088  F0A4         	movff	?___ftmul+2,___ftadd@f2+2
  7578  0017A0  C0CD  F02A         	movff	angleToPulse@a000,___altoft@c
  7579  0017A4  C0CE  F02B         	movff	angleToPulse@a000+1,___altoft@c+1
  7580  0017A8  C0CF  F02C         	movff	angleToPulse@a000+2,___altoft@c+2
  7581  0017AC  C0D0  F02D         	movff	angleToPulse@a000+3,___altoft@c+3
  7582  0017B0  ECCE  F012         	call	___altoft	;wreg free
  7583  0017B4  C02A  F09F         	movff	?___altoft,___ftadd@f1
  7584  0017B8  C02B  F0A0         	movff	?___altoft+1,___ftadd@f1+1
  7585  0017BC  C02C  F0A1         	movff	?___altoft+2,___ftadd@f1+2
  7586  0017C0  EC52  F008         	call	___ftadd	;wreg free
  7587  0017C4  C09F  F0CA         	movff	?___ftadd,_angleToPulse$1316
  7588  0017C8  C0A0  F0CB         	movff	?___ftadd+1,_angleToPulse$1316+1
  7589  0017CC  C0A1  F0CC         	movff	?___ftadd+2,_angleToPulse$1316+2
  7590                           
  7591                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  7592  0017D0  C0C2  F02A         	movff	angleToPulse@offset,___altoft@c
  7593  0017D4  C0C3  F02B         	movff	angleToPulse@offset+1,___altoft@c+1
  7594  0017D8  C0C4  F02C         	movff	angleToPulse@offset+2,___altoft@c+2
  7595  0017DC  C0C5  F02D         	movff	angleToPulse@offset+3,___altoft@c+3
  7596  0017E0  ECCE  F012         	call	___altoft	;wreg free
  7597  0017E4  C02A  F0A2         	movff	?___altoft,___ftadd@f2
  7598  0017E8  C02B  F0A3         	movff	?___altoft+1,___ftadd@f2+1
  7599  0017EC  C02C  F0A4         	movff	?___altoft+2,___ftadd@f2+2
  7600  0017F0  C0CA  F09F         	movff	_angleToPulse$1316,___ftadd@f1
  7601  0017F4  C0CB  F0A0         	movff	_angleToPulse$1316+1,___ftadd@f1+1
  7602  0017F8  C0CC  F0A1         	movff	_angleToPulse$1316+2,___ftadd@f1+2
  7603  0017FC  EC52  F008         	call	___ftadd	;wreg free
  7604  001800  C09F  F0AB         	movff	?___ftadd,___fttol@f1
  7605  001804  C0A0  F0AC         	movff	?___ftadd+1,___fttol@f1+1
  7606  001808  C0A1  F0AD         	movff	?___ftadd+2,___fttol@f1+2
  7607  00180C  EC11  F00C         	call	___fttol	;wreg free
  7608  001810  C0AB  F0BA         	movff	?___fttol,?_angleToPulse
  7609  001814  C0AC  F0BB         	movff	?___fttol+1,?_angleToPulse+1
  7610  001818  C0AD  F0BC         	movff	?___fttol+2,?_angleToPulse+2
  7611  00181C  C0AE  F0BD         	movff	?___fttol+3,?_angleToPulse+3
  7612  001820  0012               	return	
  7613  001822                     __end_of_angleToPulse:
  7614                           	opt stack 0
  7615                           tblptru	equ	0xFF8
  7616                           tblptrh	equ	0xFF7
  7617                           tblptrl	equ	0xFF6
  7618                           tablat	equ	0xFF5
  7619                           prodh	equ	0xFF4
  7620                           prodl	equ	0xFF3
  7621                           intcon	equ	0xFF2
  7622                           postinc0	equ	0xFEE
  7623                           wreg	equ	0xFE8
  7624                           postdec1	equ	0xFE5
  7625                           fsr1l	equ	0xFE1
  7626                           indf2	equ	0xFDF
  7627                           postinc2	equ	0xFDE
  7628                           postdec2	equ	0xFDD
  7629                           fsr2h	equ	0xFDA
  7630                           fsr2l	equ	0xFD9
  7631                           status	equ	0xFD8
  7632                           
  7633 ;; *************** function ___fttol *****************
  7634 ;; Defined at:
  7635 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  f1              3   43[BANK0 ] float 
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  lval            4   53[BANK0 ] unsigned long 
  7640 ;;  exp1            1   57[BANK0 ] unsigned char 
  7641 ;;  sign1           1   52[BANK0 ] unsigned char 
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  4   43[BANK0 ] long 
  7644 ;; Registers used:
  7645 ;;		wreg, status,2, status,0
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7651 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7652 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7653 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;Total ram usage:       15 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    3
  7658 ;; This function calls:
  7659 ;;		Nothing
  7660 ;; This function is called by:
  7661 ;;		_angleToPulse
  7662 ;;		_printf
  7663 ;; This function uses a non-reentrant model
  7664 ;;
  7665                           
  7666                           	psect	text29
  7667  001822                     __ptext29:
  7668                           	opt stack 0
  7669  001822                     ___fttol:
  7670                           	opt stack 24
  7671                           
  7672                           ;incstack = 0
  7673  001822  C0AD  F0AF         	movff	___fttol@f1+2,??___fttol
  7674  001826  0100               	movlb	0	; () banked
  7675  001828  6BB0               	clrf	(??___fttol+1)& (0+255),b
  7676  00182A  6BB1               	clrf	(??___fttol+2)& (0+255),b
  7677  00182C  0100               	movlb	0	; () banked
  7678  00182E  35AC               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7679  001830  0100               	movlb	0	; () banked
  7680  001832  37AF               	rlcf	??___fttol& (0+255),f,b
  7681  001834  E301               	bnc	u4981
  7682  001836  81B0               	bsf	(??___fttol+1)& (0+255),0,b
  7683  001838                     u4981:
  7684  001838  0100               	movlb	0	; () banked
  7685  00183A  51AF               	movf	??___fttol& (0+255),w,b
  7686  00183C  0100               	movlb	0	; () banked
  7687  00183E  6FB9               	movwf	___fttol@exp1& (0+255),b
  7688  001840  0100               	movlb	0	; () banked
  7689  001842  51B9               	movf	___fttol@exp1& (0+255),w,b
  7690  001844  A4D8               	btfss	status,2,c
  7691  001846  D00A               	goto	l5281
  7692                           
  7693                           ; BSR set to: 0
  7694  001848  0E00               	movlw	0
  7695  00184A  0100               	movlb	0	; () banked
  7696  00184C  6FAB               	movwf	?___fttol& (0+255),b
  7697  00184E  0E00               	movlw	0
  7698  001850  6FAC               	movwf	(?___fttol+1)& (0+255),b
  7699  001852  0E00               	movlw	0
  7700  001854  6FAD               	movwf	(?___fttol+2)& (0+255),b
  7701  001856  0E00               	movlw	0
  7702  001858  6FAE               	movwf	(?___fttol+3)& (0+255),b
  7703                           
  7704                           ; BSR set to: 0
  7705  00185A  0012               	return	
  7706  00185C                     l5281:
  7707                           
  7708                           ; BSR set to: 0
  7709  00185C  0E17               	movlw	23
  7710  00185E  0100               	movlb	0	; () banked
  7711  001860  6FAF               	movwf	??___fttol& (0+255),b
  7712  001862  C0AB  F0B0         	movff	___fttol@f1,??___fttol+1
  7713  001866  C0AC  F0B1         	movff	___fttol@f1+1,??___fttol+2
  7714  00186A  C0AD  F0B2         	movff	___fttol@f1+2,??___fttol+3
  7715  00186E  0100               	movlb	0	; () banked
  7716  001870  29AF               	incf	??___fttol& (0+255),w,b
  7717  001872  0100               	movlb	0	; () banked
  7718  001874  6FB3               	movwf	(??___fttol+4)& (0+255),b
  7719  001876  D005               	goto	u5000
  7720  001878                     u5005:
  7721  001878  0100               	movlb	0	; () banked
  7722  00187A  90D8               	bcf	status,0,c
  7723  00187C  33B2               	rrcf	(??___fttol+3)& (0+255),f,b
  7724  00187E  33B1               	rrcf	(??___fttol+2)& (0+255),f,b
  7725  001880  33B0               	rrcf	(??___fttol+1)& (0+255),f,b
  7726  001882                     u5000:
  7727  001882  0100               	movlb	0	; () banked
  7728  001884  2FB3               	decfsz	(??___fttol+4)& (0+255),f,b
  7729  001886  D7F8               	goto	u5005
  7730  001888  0100               	movlb	0	; () banked
  7731  00188A  51B0               	movf	(??___fttol+1)& (0+255),w,b
  7732  00188C  0100               	movlb	0	; () banked
  7733  00188E  6FB4               	movwf	___fttol@sign1& (0+255),b
  7734                           
  7735                           ; BSR set to: 0
  7736  001890  0100               	movlb	0	; () banked
  7737  001892  8FAC               	bsf	(___fttol@f1+1)& (0+255),7,b
  7738                           
  7739                           ; BSR set to: 0
  7740  001894  0EFF               	movlw	255
  7741  001896  0100               	movlb	0	; () banked
  7742  001898  17AB               	andwf	___fttol@f1& (0+255),f,b
  7743  00189A  0EFF               	movlw	255
  7744  00189C  0100               	movlb	0	; () banked
  7745  00189E  17AC               	andwf	(___fttol@f1+1)& (0+255),f,b
  7746  0018A0  0E00               	movlw	0
  7747  0018A2  0100               	movlb	0	; () banked
  7748  0018A4  17AD               	andwf	(___fttol@f1+2)& (0+255),f,b
  7749                           
  7750                           ; BSR set to: 0
  7751  0018A6  0100               	movlb	0	; () banked
  7752  0018A8  51AB               	movf	___fttol@f1& (0+255),w,b
  7753  0018AA  0100               	movlb	0	; () banked
  7754  0018AC  6FB5               	movwf	___fttol@lval& (0+255),b
  7755  0018AE  0100               	movlb	0	; () banked
  7756  0018B0  51AC               	movf	(___fttol@f1+1)& (0+255),w,b
  7757  0018B2  0100               	movlb	0	; () banked
  7758  0018B4  6FB6               	movwf	(___fttol@lval+1)& (0+255),b
  7759  0018B6  0100               	movlb	0	; () banked
  7760  0018B8  51AD               	movf	(___fttol@f1+2)& (0+255),w,b
  7761  0018BA  0100               	movlb	0	; () banked
  7762  0018BC  6FB7               	movwf	(___fttol@lval+2)& (0+255),b
  7763  0018BE  0100               	movlb	0	; () banked
  7764  0018C0  6BB8               	clrf	(___fttol@lval+3)& (0+255),b
  7765                           
  7766                           ; BSR set to: 0
  7767  0018C2  0E8E               	movlw	142
  7768  0018C4  0100               	movlb	0	; () banked
  7769  0018C6  5FB9               	subwf	___fttol@exp1& (0+255),f,b
  7770                           
  7771                           ; BSR set to: 0
  7772  0018C8  0100               	movlb	0	; () banked
  7773  0018CA  AFB9               	btfss	___fttol@exp1& (0+255),7,b
  7774  0018CC  D01A               	goto	l5303
  7775                           
  7776                           ; BSR set to: 0
  7777  0018CE  0100               	movlb	0	; () banked
  7778  0018D0  51B9               	movf	___fttol@exp1& (0+255),w,b
  7779  0018D2  0A80               	xorlw	128
  7780  0018D4  0F8F               	addlw	143
  7781  0018D6  B0D8               	btfsc	status,0,c
  7782  0018D8  D00A               	goto	l5299
  7783                           
  7784                           ; BSR set to: 0
  7785  0018DA  0E00               	movlw	0
  7786  0018DC  0100               	movlb	0	; () banked
  7787  0018DE  6FAB               	movwf	?___fttol& (0+255),b
  7788  0018E0  0E00               	movlw	0
  7789  0018E2  6FAC               	movwf	(?___fttol+1)& (0+255),b
  7790  0018E4  0E00               	movlw	0
  7791  0018E6  6FAD               	movwf	(?___fttol+2)& (0+255),b
  7792  0018E8  0E00               	movlw	0
  7793  0018EA  6FAE               	movwf	(?___fttol+3)& (0+255),b
  7794                           
  7795                           ; BSR set to: 0
  7796  0018EC  0012               	return	
  7797  0018EE                     l5299:
  7798                           
  7799                           ; BSR set to: 0
  7800  0018EE  0100               	movlb	0	; () banked
  7801  0018F0  90D8               	bcf	status,0,c
  7802  0018F2  33B8               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7803  0018F4  33B7               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7804  0018F6  33B6               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7805  0018F8  33B5               	rrcf	___fttol@lval& (0+255),f,b
  7806                           
  7807                           ; BSR set to: 0
  7808  0018FA  0100               	movlb	0	; () banked
  7809  0018FC  3FB9               	incfsz	___fttol@exp1& (0+255),f,b
  7810  0018FE  D7F7               	goto	l5299
  7811                           
  7812                           ; BSR set to: 0
  7813  001900  D01B               	goto	l5313
  7814  001902                     l5303:
  7815                           
  7816                           ; BSR set to: 0
  7817  001902  0E17               	movlw	23
  7818  001904  0100               	movlb	0	; () banked
  7819  001906  65B9               	cpfsgt	___fttol@exp1& (0+255),b
  7820  001908  D012               	goto	l5311
  7821                           
  7822                           ; BSR set to: 0
  7823  00190A  0E00               	movlw	0
  7824  00190C  0100               	movlb	0	; () banked
  7825  00190E  6FAB               	movwf	?___fttol& (0+255),b
  7826  001910  0E00               	movlw	0
  7827  001912  6FAC               	movwf	(?___fttol+1)& (0+255),b
  7828  001914  0E00               	movlw	0
  7829  001916  6FAD               	movwf	(?___fttol+2)& (0+255),b
  7830  001918  0E00               	movlw	0
  7831  00191A  6FAE               	movwf	(?___fttol+3)& (0+255),b
  7832                           
  7833                           ; BSR set to: 0
  7834  00191C  0012               	return	
  7835  00191E                     l5309:
  7836                           
  7837                           ; BSR set to: 0
  7838  00191E  0100               	movlb	0	; () banked
  7839  001920  90D8               	bcf	status,0,c
  7840  001922  37B5               	rlcf	___fttol@lval& (0+255),f,b
  7841  001924  37B6               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7842  001926  37B7               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7843  001928  37B8               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7844  00192A  0100               	movlb	0	; () banked
  7845  00192C  07B9               	decf	___fttol@exp1& (0+255),f,b
  7846  00192E                     l5311:
  7847                           
  7848                           ; BSR set to: 0
  7849  00192E  0100               	movlb	0	; () banked
  7850  001930  51B9               	movf	___fttol@exp1& (0+255),w,b
  7851  001932  0100               	movlb	0	; () banked
  7852  001934  A4D8               	btfss	status,2,c
  7853  001936  D7F3               	goto	l5309
  7854  001938                     l5313:
  7855                           
  7856                           ; BSR set to: 0
  7857  001938  0100               	movlb	0	; () banked
  7858  00193A  51B4               	movf	___fttol@sign1& (0+255),w,b
  7859  00193C  0100               	movlb	0	; () banked
  7860  00193E  B4D8               	btfsc	status,2,c
  7861  001940  D009               	goto	l5317
  7862                           
  7863                           ; BSR set to: 0
  7864  001942  0100               	movlb	0	; () banked
  7865  001944  1FB8               	comf	(___fttol@lval+3)& (0+255),f,b
  7866  001946  1FB7               	comf	(___fttol@lval+2)& (0+255),f,b
  7867  001948  1FB6               	comf	(___fttol@lval+1)& (0+255),f,b
  7868  00194A  6DB5               	negf	___fttol@lval& (0+255),b
  7869  00194C  0E00               	movlw	0
  7870  00194E  23B6               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7871  001950  23B7               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7872  001952  23B8               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7873  001954                     l5317:
  7874                           
  7875                           ; BSR set to: 0
  7876  001954  C0B5  F0AB         	movff	___fttol@lval,?___fttol
  7877  001958  C0B6  F0AC         	movff	___fttol@lval+1,?___fttol+1
  7878  00195C  C0B7  F0AD         	movff	___fttol@lval+2,?___fttol+2
  7879  001960  C0B8  F0AE         	movff	___fttol@lval+3,?___fttol+3
  7880  001964  0012               	return	
  7881  001966                     __end_of___fttol:
  7882                           	opt stack 0
  7883                           tblptru	equ	0xFF8
  7884                           tblptrh	equ	0xFF7
  7885                           tblptrl	equ	0xFF6
  7886                           tablat	equ	0xFF5
  7887                           prodh	equ	0xFF4
  7888                           prodl	equ	0xFF3
  7889                           intcon	equ	0xFF2
  7890                           postinc0	equ	0xFEE
  7891                           wreg	equ	0xFE8
  7892                           postdec1	equ	0xFE5
  7893                           fsr1l	equ	0xFE1
  7894                           indf2	equ	0xFDF
  7895                           postinc2	equ	0xFDE
  7896                           postdec2	equ	0xFDD
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           
  7901 ;; *************** function ___ftmul *****************
  7902 ;; Defined at:
  7903 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;  f1              3    6[BANK0 ] float 
  7906 ;;  f2              3    9[BANK0 ] float 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  f3_as_produc    3   16[BANK0 ] unsigned um
  7909 ;;  sign            1   20[BANK0 ] unsigned char 
  7910 ;;  cntr            1   19[BANK0 ] unsigned char 
  7911 ;;  exp             1   15[BANK0 ] unsigned char 
  7912 ;; Return value:  Size  Location     Type
  7913 ;;                  3    6[BANK0 ] float 
  7914 ;; Registers used:
  7915 ;;		wreg, status,2, status,0, cstack
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7921 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7922 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7923 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7924 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;Total ram usage:       15 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; Hardware stack levels required when called:    4
  7928 ;; This function calls:
  7929 ;;		___ftpack
  7930 ;; This function is called by:
  7931 ;;		_sortBattery
  7932 ;;		_angleToPulse
  7933 ;;		_fround
  7934 ;;		_scale
  7935 ;;		_printf
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text30
  7940  00156C                     __ptext30:
  7941                           	opt stack 0
  7942  00156C                     ___ftmul:
  7943                           	opt stack 23
  7944                           
  7945                           ; BSR set to: 0
  7946                           ;incstack = 0
  7947  00156C  C088  F08C         	movff	___ftmul@f1+2,??___ftmul
  7948  001570  0100               	movlb	0	; () banked
  7949  001572  6B8D               	clrf	(??___ftmul+1)& (0+255),b
  7950  001574  6B8E               	clrf	(??___ftmul+2)& (0+255),b
  7951  001576  0100               	movlb	0	; () banked
  7952  001578  3587               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7953  00157A  0100               	movlb	0	; () banked
  7954  00157C  378C               	rlcf	??___ftmul& (0+255),f,b
  7955  00157E  E301               	bnc	u4431
  7956  001580  818D               	bsf	(??___ftmul+1)& (0+255),0,b
  7957  001582                     u4431:
  7958  001582  0100               	movlb	0	; () banked
  7959  001584  518C               	movf	??___ftmul& (0+255),w,b
  7960  001586  0100               	movlb	0	; () banked
  7961  001588  6F8F               	movwf	___ftmul@exp& (0+255),b
  7962  00158A  0100               	movlb	0	; () banked
  7963  00158C  518F               	movf	___ftmul@exp& (0+255),w,b
  7964  00158E  A4D8               	btfss	status,2,c
  7965  001590  D00A               	goto	l4865
  7966                           
  7967                           ; BSR set to: 0
  7968  001592  0E00               	movlw	0
  7969  001594  0100               	movlb	0	; () banked
  7970  001596  6F86               	movwf	?___ftmul& (0+255),b
  7971  001598  0E00               	movlw	0
  7972  00159A  0100               	movlb	0	; () banked
  7973  00159C  6F87               	movwf	(?___ftmul+1)& (0+255),b
  7974  00159E  0E00               	movlw	0
  7975  0015A0  0100               	movlb	0	; () banked
  7976  0015A2  6F88               	movwf	(?___ftmul+2)& (0+255),b
  7977                           
  7978                           ; BSR set to: 0
  7979  0015A4  0012               	return	
  7980  0015A6                     l4865:
  7981                           
  7982                           ; BSR set to: 0
  7983  0015A6  C08B  F08C         	movff	___ftmul@f2+2,??___ftmul
  7984  0015AA  0100               	movlb	0	; () banked
  7985  0015AC  6B8D               	clrf	(??___ftmul+1)& (0+255),b
  7986  0015AE  6B8E               	clrf	(??___ftmul+2)& (0+255),b
  7987  0015B0  0100               	movlb	0	; () banked
  7988  0015B2  358A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7989  0015B4  0100               	movlb	0	; () banked
  7990  0015B6  378C               	rlcf	??___ftmul& (0+255),f,b
  7991  0015B8  E301               	bnc	u4451
  7992  0015BA  818D               	bsf	(??___ftmul+1)& (0+255),0,b
  7993  0015BC                     u4451:
  7994  0015BC  0100               	movlb	0	; () banked
  7995  0015BE  518C               	movf	??___ftmul& (0+255),w,b
  7996  0015C0  0100               	movlb	0	; () banked
  7997  0015C2  6F94               	movwf	___ftmul@sign& (0+255),b
  7998  0015C4  0100               	movlb	0	; () banked
  7999  0015C6  5194               	movf	___ftmul@sign& (0+255),w,b
  8000  0015C8  A4D8               	btfss	status,2,c
  8001  0015CA  D00A               	goto	l4871
  8002                           
  8003                           ; BSR set to: 0
  8004  0015CC  0E00               	movlw	0
  8005  0015CE  0100               	movlb	0	; () banked
  8006  0015D0  6F86               	movwf	?___ftmul& (0+255),b
  8007  0015D2  0E00               	movlw	0
  8008  0015D4  0100               	movlb	0	; () banked
  8009  0015D6  6F87               	movwf	(?___ftmul+1)& (0+255),b
  8010  0015D8  0E00               	movlw	0
  8011  0015DA  0100               	movlb	0	; () banked
  8012  0015DC  6F88               	movwf	(?___ftmul+2)& (0+255),b
  8013                           
  8014                           ; BSR set to: 0
  8015  0015DE  0012               	return	
  8016  0015E0                     l4871:
  8017                           
  8018                           ; BSR set to: 0
  8019  0015E0  0100               	movlb	0	; () banked
  8020  0015E2  5194               	movf	___ftmul@sign& (0+255),w,b
  8021  0015E4  0F7B               	addlw	123
  8022  0015E6  0100               	movlb	0	; () banked
  8023  0015E8  278F               	addwf	___ftmul@exp& (0+255),f,b
  8024                           
  8025                           ; BSR set to: 0
  8026  0015EA  C088  F094         	movff	___ftmul@f1+2,___ftmul@sign
  8027  0015EE  0100               	movlb	0	; () banked
  8028  0015F0  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
  8029  0015F2  0100               	movlb	0	; () banked
  8030  0015F4  1B94               	xorwf	___ftmul@sign& (0+255),f,b
  8031  0015F6  0E80               	movlw	128
  8032  0015F8  0100               	movlb	0	; () banked
  8033  0015FA  1794               	andwf	___ftmul@sign& (0+255),f,b
  8034                           
  8035                           ; BSR set to: 0
  8036  0015FC  0100               	movlb	0	; () banked
  8037  0015FE  8F87               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8038                           
  8039                           ; BSR set to: 0
  8040  001600  0100               	movlb	0	; () banked
  8041  001602  8F8A               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8042                           
  8043                           ; BSR set to: 0
  8044  001604  0EFF               	movlw	255
  8045  001606  0100               	movlb	0	; () banked
  8046  001608  1789               	andwf	___ftmul@f2& (0+255),f,b
  8047  00160A  0EFF               	movlw	255
  8048  00160C  0100               	movlb	0	; () banked
  8049  00160E  178A               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8050  001610  0E00               	movlw	0
  8051  001612  0100               	movlb	0	; () banked
  8052  001614  178B               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8053                           
  8054                           ; BSR set to: 0
  8055  001616  0E00               	movlw	0
  8056  001618  0100               	movlb	0	; () banked
  8057  00161A  6F90               	movwf	___ftmul@f3_as_product& (0+255),b
  8058  00161C  0E00               	movlw	0
  8059  00161E  0100               	movlb	0	; () banked
  8060  001620  6F91               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8061  001622  0E00               	movlw	0
  8062  001624  0100               	movlb	0	; () banked
  8063  001626  6F92               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8064                           
  8065                           ; BSR set to: 0
  8066  001628  0E07               	movlw	7
  8067  00162A  0100               	movlb	0	; () banked
  8068  00162C  6F93               	movwf	___ftmul@cntr& (0+255),b
  8069  00162E                     l4885:
  8070                           
  8071                           ; BSR set to: 0
  8072  00162E  0100               	movlb	0	; () banked
  8073  001630  A186               	btfss	___ftmul@f1& (0+255),0,b
  8074  001632  D00C               	goto	l4889
  8075                           
  8076                           ; BSR set to: 0
  8077  001634  0100               	movlb	0	; () banked
  8078  001636  5189               	movf	___ftmul@f2& (0+255),w,b
  8079  001638  0100               	movlb	0	; () banked
  8080  00163A  2790               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8081  00163C  0100               	movlb	0	; () banked
  8082  00163E  518A               	movf	(___ftmul@f2+1)& (0+255),w,b
  8083  001640  0100               	movlb	0	; () banked
  8084  001642  2391               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8085  001644  0100               	movlb	0	; () banked
  8086  001646  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
  8087  001648  0100               	movlb	0	; () banked
  8088  00164A  2392               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8089  00164C                     l4889:
  8090                           
  8091                           ; BSR set to: 0
  8092  00164C  0100               	movlb	0	; () banked
  8093  00164E  90D8               	bcf	status,0,c
  8094  001650  3388               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8095  001652  3387               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8096  001654  3386               	rrcf	___ftmul@f1& (0+255),f,b
  8097  001656  0100               	movlb	0	; () banked
  8098  001658  90D8               	bcf	status,0,c
  8099  00165A  3789               	rlcf	___ftmul@f2& (0+255),f,b
  8100  00165C  378A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8101  00165E  378B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8102                           
  8103                           ; BSR set to: 0
  8104  001660  0100               	movlb	0	; () banked
  8105  001662  2F93               	decfsz	___ftmul@cntr& (0+255),f,b
  8106  001664  D7E4               	goto	l4885
  8107                           
  8108                           ; BSR set to: 0
  8109                           
  8110                           ; BSR set to: 0
  8111  001666  0E09               	movlw	9
  8112  001668  0100               	movlb	0	; () banked
  8113  00166A  6F93               	movwf	___ftmul@cntr& (0+255),b
  8114  00166C                     l4895:
  8115                           
  8116                           ; BSR set to: 0
  8117  00166C  0100               	movlb	0	; () banked
  8118  00166E  A186               	btfss	___ftmul@f1& (0+255),0,b
  8119  001670  D00C               	goto	l4899
  8120                           
  8121                           ; BSR set to: 0
  8122  001672  0100               	movlb	0	; () banked
  8123  001674  5189               	movf	___ftmul@f2& (0+255),w,b
  8124  001676  0100               	movlb	0	; () banked
  8125  001678  2790               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8126  00167A  0100               	movlb	0	; () banked
  8127  00167C  518A               	movf	(___ftmul@f2+1)& (0+255),w,b
  8128  00167E  0100               	movlb	0	; () banked
  8129  001680  2391               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8130  001682  0100               	movlb	0	; () banked
  8131  001684  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
  8132  001686  0100               	movlb	0	; () banked
  8133  001688  2392               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8134  00168A                     l4899:
  8135                           
  8136                           ; BSR set to: 0
  8137  00168A  0100               	movlb	0	; () banked
  8138  00168C  90D8               	bcf	status,0,c
  8139  00168E  3388               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8140  001690  3387               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8141  001692  3386               	rrcf	___ftmul@f1& (0+255),f,b
  8142  001694  0100               	movlb	0	; () banked
  8143  001696  90D8               	bcf	status,0,c
  8144  001698  3392               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8145  00169A  3391               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8146  00169C  3390               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8147                           
  8148                           ; BSR set to: 0
  8149  00169E  0100               	movlb	0	; () banked
  8150  0016A0  2F93               	decfsz	___ftmul@cntr& (0+255),f,b
  8151  0016A2  D7E4               	goto	l4895
  8152                           
  8153                           ; BSR set to: 0
  8154                           
  8155                           ; BSR set to: 0
  8156  0016A4  C090  F022         	movff	___ftmul@f3_as_product,___ftpack@arg
  8157  0016A8  C091  F023         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8158  0016AC  C092  F024         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8159  0016B0  C08F  F025         	movff	___ftmul@exp,___ftpack@exp
  8160  0016B4  C094  F026         	movff	___ftmul@sign,___ftpack@sign
  8161  0016B8  EC8A  F010         	call	___ftpack	;wreg free
  8162  0016BC  C022  F086         	movff	?___ftpack,?___ftmul
  8163  0016C0  C023  F087         	movff	?___ftpack+1,?___ftmul+1
  8164  0016C4  C024  F088         	movff	?___ftpack+2,?___ftmul+2
  8165  0016C8  0012               	return	
  8166  0016CA                     __end_of___ftmul:
  8167                           	opt stack 0
  8168                           tblptru	equ	0xFF8
  8169                           tblptrh	equ	0xFF7
  8170                           tblptrl	equ	0xFF6
  8171                           tablat	equ	0xFF5
  8172                           prodh	equ	0xFF4
  8173                           prodl	equ	0xFF3
  8174                           intcon	equ	0xFF2
  8175                           postinc0	equ	0xFEE
  8176                           wreg	equ	0xFE8
  8177                           postdec1	equ	0xFE5
  8178                           fsr1l	equ	0xFE1
  8179                           indf2	equ	0xFDF
  8180                           postinc2	equ	0xFDE
  8181                           postdec2	equ	0xFDD
  8182                           fsr2h	equ	0xFDA
  8183                           fsr2l	equ	0xFD9
  8184                           status	equ	0xFD8
  8185                           
  8186 ;; *************** function ___ftdiv *****************
  8187 ;; Defined at:
  8188 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  f1              3   51[COMRAM] float 
  8191 ;;  f2              3   54[COMRAM] float 
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;  f3              3    1[BANK0 ] float 
  8194 ;;  sign            1    5[BANK0 ] unsigned char 
  8195 ;;  exp             1    4[BANK0 ] unsigned char 
  8196 ;;  cntr            1    0[BANK0 ] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  3   51[COMRAM] float 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0, cstack
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8206 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;Total ram usage:       15 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    4
  8213 ;; This function calls:
  8214 ;;		___ftpack
  8215 ;; This function is called by:
  8216 ;;		_sortBattery
  8217 ;;		_angleToPulse
  8218 ;;		_testFrequency
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text31
  8223  001CC6                     __ptext31:
  8224                           	opt stack 0
  8225  001CC6                     ___ftdiv:
  8226                           	opt stack 23
  8227                           
  8228                           ;incstack = 0
  8229  001CC6  C036  F03A         	movff	___ftdiv@f1+2,??___ftdiv
  8230  001CCA  6A3B               	clrf	(??___ftdiv+1)& (0+255),c
  8231  001CCC  6A3C               	clrf	(??___ftdiv+2)& (0+255),c
  8232  001CCE  3435               	rlcf	___ftdiv@f1+1,w,c
  8233  001CD0  363A               	rlcf	??___ftdiv& (0+255),f,c
  8234  001CD2  E301               	bnc	u4871
  8235  001CD4  803B               	bsf	(??___ftdiv+1)& (0+255),0,c
  8236  001CD6                     u4871:
  8237  001CD6  503A               	movf	??___ftdiv,w,c
  8238  001CD8  0100               	movlb	0	; () banked
  8239  001CDA  6F84               	movwf	___ftdiv@exp& (0+255),b
  8240  001CDC  0100               	movlb	0	; () banked
  8241  001CDE  5184               	movf	___ftdiv@exp& (0+255),w,b
  8242  001CE0  A4D8               	btfss	status,2,c
  8243  001CE2  D007               	goto	l5193
  8244                           
  8245                           ; BSR set to: 0
  8246  001CE4  0E00               	movlw	0
  8247  001CE6  6E34               	movwf	?___ftdiv,c
  8248  001CE8  0E00               	movlw	0
  8249  001CEA  6E35               	movwf	?___ftdiv+1,c
  8250  001CEC  0E00               	movlw	0
  8251  001CEE  6E36               	movwf	?___ftdiv+2,c
  8252                           
  8253                           ; BSR set to: 0
  8254  001CF0  0012               	return	
  8255  001CF2                     l5193:
  8256                           
  8257                           ; BSR set to: 0
  8258  001CF2  C039  F03A         	movff	___ftdiv@f2+2,??___ftdiv
  8259  001CF6  6A3B               	clrf	(??___ftdiv+1)& (0+255),c
  8260  001CF8  6A3C               	clrf	(??___ftdiv+2)& (0+255),c
  8261  001CFA  3438               	rlcf	___ftdiv@f2+1,w,c
  8262  001CFC  363A               	rlcf	??___ftdiv& (0+255),f,c
  8263  001CFE  E301               	bnc	u4891
  8264  001D00  803B               	bsf	(??___ftdiv+1)& (0+255),0,c
  8265  001D02                     u4891:
  8266  001D02  503A               	movf	??___ftdiv,w,c
  8267  001D04  0100               	movlb	0	; () banked
  8268  001D06  6F85               	movwf	___ftdiv@sign& (0+255),b
  8269  001D08  0100               	movlb	0	; () banked
  8270  001D0A  5185               	movf	___ftdiv@sign& (0+255),w,b
  8271  001D0C  A4D8               	btfss	status,2,c
  8272  001D0E  D007               	goto	l5199
  8273                           
  8274                           ; BSR set to: 0
  8275  001D10  0E00               	movlw	0
  8276  001D12  6E34               	movwf	?___ftdiv,c
  8277  001D14  0E00               	movlw	0
  8278  001D16  6E35               	movwf	?___ftdiv+1,c
  8279  001D18  0E00               	movlw	0
  8280  001D1A  6E36               	movwf	?___ftdiv+2,c
  8281                           
  8282                           ; BSR set to: 0
  8283  001D1C  0012               	return	
  8284  001D1E                     l5199:
  8285                           
  8286                           ; BSR set to: 0
  8287  001D1E  0E00               	movlw	0
  8288  001D20  0100               	movlb	0	; () banked
  8289  001D22  6F81               	movwf	___ftdiv@f3& (0+255),b
  8290  001D24  0E00               	movlw	0
  8291  001D26  0100               	movlb	0	; () banked
  8292  001D28  6F82               	movwf	(___ftdiv@f3+1)& (0+255),b
  8293  001D2A  0E00               	movlw	0
  8294  001D2C  0100               	movlb	0	; () banked
  8295  001D2E  6F83               	movwf	(___ftdiv@f3+2)& (0+255),b
  8296                           
  8297                           ; BSR set to: 0
  8298  001D30  0100               	movlb	0	; () banked
  8299  001D32  5185               	movf	___ftdiv@sign& (0+255),w,b
  8300  001D34  0F89               	addlw	137
  8301  001D36  0100               	movlb	0	; () banked
  8302  001D38  5F84               	subwf	___ftdiv@exp& (0+255),f,b
  8303                           
  8304                           ; BSR set to: 0
  8305  001D3A  C036  F085         	movff	___ftdiv@f1+2,___ftdiv@sign
  8306                           
  8307                           ; BSR set to: 0
  8308  001D3E  5039               	movf	___ftdiv@f2+2,w,c
  8309  001D40  0100               	movlb	0	; () banked
  8310  001D42  1B85               	xorwf	___ftdiv@sign& (0+255),f,b
  8311                           
  8312                           ; BSR set to: 0
  8313  001D44  0E80               	movlw	128
  8314  001D46  0100               	movlb	0	; () banked
  8315  001D48  1785               	andwf	___ftdiv@sign& (0+255),f,b
  8316                           
  8317                           ; BSR set to: 0
  8318  001D4A  8E35               	bsf	___ftdiv@f1+1,7,c
  8319                           
  8320                           ; BSR set to: 0
  8321  001D4C  0EFF               	movlw	255
  8322  001D4E  1634               	andwf	___ftdiv@f1,f,c
  8323  001D50  0EFF               	movlw	255
  8324  001D52  1635               	andwf	___ftdiv@f1+1,f,c
  8325  001D54  0E00               	movlw	0
  8326  001D56  1636               	andwf	___ftdiv@f1+2,f,c
  8327                           
  8328                           ; BSR set to: 0
  8329  001D58  8E38               	bsf	___ftdiv@f2+1,7,c
  8330                           
  8331                           ; BSR set to: 0
  8332  001D5A  0EFF               	movlw	255
  8333  001D5C  1637               	andwf	___ftdiv@f2,f,c
  8334  001D5E  0EFF               	movlw	255
  8335  001D60  1638               	andwf	___ftdiv@f2+1,f,c
  8336  001D62  0E00               	movlw	0
  8337  001D64  1639               	andwf	___ftdiv@f2+2,f,c
  8338                           
  8339                           ; BSR set to: 0
  8340  001D66  0E18               	movlw	24
  8341  001D68  0100               	movlb	0	; () banked
  8342  001D6A  6F80               	movwf	___ftdiv@cntr& (0+255),b
  8343  001D6C                     l5219:
  8344                           
  8345                           ; BSR set to: 0
  8346  001D6C  0100               	movlb	0	; () banked
  8347  001D6E  90D8               	bcf	status,0,c
  8348  001D70  3781               	rlcf	___ftdiv@f3& (0+255),f,b
  8349  001D72  3782               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  8350  001D74  3783               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  8351                           
  8352                           ; BSR set to: 0
  8353  001D76  5037               	movf	___ftdiv@f2,w,c
  8354  001D78  5C34               	subwf	___ftdiv@f1,w,c
  8355  001D7A  5038               	movf	___ftdiv@f2+1,w,c
  8356  001D7C  5835               	subwfb	___ftdiv@f1+1,w,c
  8357  001D7E  5039               	movf	___ftdiv@f2+2,w,c
  8358  001D80  5836               	subwfb	___ftdiv@f1+2,w,c
  8359  001D82  A0D8               	btfss	status,0,c
  8360  001D84  D008               	goto	l1011
  8361                           
  8362                           ; BSR set to: 0
  8363  001D86  5037               	movf	___ftdiv@f2,w,c
  8364  001D88  5E34               	subwf	___ftdiv@f1,f,c
  8365  001D8A  5038               	movf	___ftdiv@f2+1,w,c
  8366  001D8C  5A35               	subwfb	___ftdiv@f1+1,f,c
  8367  001D8E  5039               	movf	___ftdiv@f2+2,w,c
  8368  001D90  5A36               	subwfb	___ftdiv@f1+2,f,c
  8369                           
  8370                           ; BSR set to: 0
  8371  001D92  0100               	movlb	0	; () banked
  8372  001D94  8181               	bsf	___ftdiv@f3& (0+255),0,b
  8373  001D96                     l1011:
  8374                           
  8375                           ; BSR set to: 0
  8376  001D96  90D8               	bcf	status,0,c
  8377  001D98  3634               	rlcf	___ftdiv@f1,f,c
  8378  001D9A  3635               	rlcf	___ftdiv@f1+1,f,c
  8379  001D9C  3636               	rlcf	___ftdiv@f1+2,f,c
  8380                           
  8381                           ; BSR set to: 0
  8382  001D9E  0100               	movlb	0	; () banked
  8383  001DA0  2F80               	decfsz	___ftdiv@cntr& (0+255),f,b
  8384  001DA2  D7E4               	goto	l5219
  8385                           
  8386                           ; BSR set to: 0
  8387                           
  8388                           ; BSR set to: 0
  8389  001DA4  C081  F022         	movff	___ftdiv@f3,___ftpack@arg
  8390  001DA8  C082  F023         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8391  001DAC  C083  F024         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8392  001DB0  C084  F025         	movff	___ftdiv@exp,___ftpack@exp
  8393  001DB4  C085  F026         	movff	___ftdiv@sign,___ftpack@sign
  8394  001DB8  EC8A  F010         	call	___ftpack	;wreg free
  8395  001DBC  C022  F034         	movff	?___ftpack,?___ftdiv
  8396  001DC0  C023  F035         	movff	?___ftpack+1,?___ftdiv+1
  8397  001DC4  C024  F036         	movff	?___ftpack+2,?___ftdiv+2
  8398  001DC8  0012               	return	
  8399  001DCA                     __end_of___ftdiv:
  8400                           	opt stack 0
  8401                           tblptru	equ	0xFF8
  8402                           tblptrh	equ	0xFF7
  8403                           tblptrl	equ	0xFF6
  8404                           tablat	equ	0xFF5
  8405                           prodh	equ	0xFF4
  8406                           prodl	equ	0xFF3
  8407                           intcon	equ	0xFF2
  8408                           postinc0	equ	0xFEE
  8409                           wreg	equ	0xFE8
  8410                           postdec1	equ	0xFE5
  8411                           fsr1l	equ	0xFE1
  8412                           indf2	equ	0xFDF
  8413                           postinc2	equ	0xFDE
  8414                           postdec2	equ	0xFDD
  8415                           fsr2h	equ	0xFDA
  8416                           fsr2l	equ	0xFD9
  8417                           status	equ	0xFD8
  8418                           
  8419 ;; *************** function ___ftadd *****************
  8420 ;; Defined at:
  8421 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;  f1              3   31[BANK0 ] float 
  8424 ;;  f2              3   34[BANK0 ] float 
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  exp1            1   42[BANK0 ] unsigned char 
  8427 ;;  exp2            1   41[BANK0 ] unsigned char 
  8428 ;;  sign            1   40[BANK0 ] unsigned char 
  8429 ;; Return value:  Size  Location     Type
  8430 ;;                  3   31[BANK0 ] float 
  8431 ;; Registers used:
  8432 ;;		wreg, status,2, status,0, cstack
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8438 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;Total ram usage:       12 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; Hardware stack levels required when called:    4
  8445 ;; This function calls:
  8446 ;;		___ftpack
  8447 ;; This function is called by:
  8448 ;;		_angleToPulse
  8449 ;;		_printf
  8450 ;;		___ftsub
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           	psect	text32
  8455  0010A4                     __ptext32:
  8456                           	opt stack 0
  8457  0010A4                     ___ftadd:
  8458                           	opt stack 23
  8459                           
  8460                           ;incstack = 0
  8461  0010A4  C0A1  F0A5         	movff	___ftadd@f1+2,??___ftadd
  8462  0010A8  0100               	movlb	0	; () banked
  8463  0010AA  6BA6               	clrf	(??___ftadd+1)& (0+255),b
  8464  0010AC  6BA7               	clrf	(??___ftadd+2)& (0+255),b
  8465  0010AE  0100               	movlb	0	; () banked
  8466  0010B0  35A0               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8467  0010B2  0100               	movlb	0	; () banked
  8468  0010B4  37A5               	rlcf	??___ftadd& (0+255),f,b
  8469  0010B6  E301               	bnc	u4221
  8470  0010B8  81A6               	bsf	(??___ftadd+1)& (0+255),0,b
  8471  0010BA                     u4221:
  8472  0010BA  0100               	movlb	0	; () banked
  8473  0010BC  51A5               	movf	??___ftadd& (0+255),w,b
  8474  0010BE  0100               	movlb	0	; () banked
  8475  0010C0  6FAA               	movwf	___ftadd@exp1& (0+255),b
  8476  0010C2  C0A4  F0A5         	movff	___ftadd@f2+2,??___ftadd
  8477  0010C6  0100               	movlb	0	; () banked
  8478  0010C8  6BA6               	clrf	(??___ftadd+1)& (0+255),b
  8479  0010CA  6BA7               	clrf	(??___ftadd+2)& (0+255),b
  8480  0010CC  0100               	movlb	0	; () banked
  8481  0010CE  35A3               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8482  0010D0  0100               	movlb	0	; () banked
  8483  0010D2  37A5               	rlcf	??___ftadd& (0+255),f,b
  8484  0010D4  E301               	bnc	u4231
  8485  0010D6  81A6               	bsf	(??___ftadd+1)& (0+255),0,b
  8486  0010D8                     u4231:
  8487  0010D8  0100               	movlb	0	; () banked
  8488  0010DA  51A5               	movf	??___ftadd& (0+255),w,b
  8489  0010DC  0100               	movlb	0	; () banked
  8490  0010DE  6FA9               	movwf	___ftadd@exp2& (0+255),b
  8491                           
  8492                           ; BSR set to: 0
  8493  0010E0  0100               	movlb	0	; () banked
  8494  0010E2  51AA               	movf	___ftadd@exp1& (0+255),w,b
  8495  0010E4  0100               	movlb	0	; () banked
  8496  0010E6  B4D8               	btfsc	status,2,c
  8497  0010E8  D011               	goto	l976
  8498                           
  8499                           ; BSR set to: 0
  8500  0010EA  0100               	movlb	0	; () banked
  8501  0010EC  51A9               	movf	___ftadd@exp2& (0+255),w,b
  8502  0010EE  0100               	movlb	0	; () banked
  8503  0010F0  5DAA               	subwf	___ftadd@exp1& (0+255),w,b
  8504  0010F2  B0D8               	btfsc	status,0,c
  8505  0010F4  D012               	goto	l4797
  8506                           
  8507                           ; BSR set to: 0
  8508  0010F6  0100               	movlb	0	; () banked
  8509  0010F8  51AA               	movf	___ftadd@exp1& (0+255),w,b
  8510  0010FA  0800               	sublw	0
  8511  0010FC  0100               	movlb	0	; () banked
  8512  0010FE  25A9               	addwf	___ftadd@exp2& (0+255),w,b
  8513  001100  0100               	movlb	0	; () banked
  8514  001102  6FA5               	movwf	??___ftadd& (0+255),b
  8515  001104  0E18               	movlw	24
  8516  001106  0100               	movlb	0	; () banked
  8517  001108  65A5               	cpfsgt	??___ftadd& (0+255),b
  8518  00110A  D007               	goto	l4797
  8519  00110C                     l976:
  8520                           
  8521                           ; BSR set to: 0
  8522  00110C  C0A2  F09F         	movff	___ftadd@f2,?___ftadd
  8523  001110  C0A3  F0A0         	movff	___ftadd@f2+1,?___ftadd+1
  8524  001114  C0A4  F0A1         	movff	___ftadd@f2+2,?___ftadd+2
  8525  001118  0012               	return	
  8526  00111A                     l4797:
  8527                           
  8528                           ; BSR set to: 0
  8529  00111A  0100               	movlb	0	; () banked
  8530  00111C  51A9               	movf	___ftadd@exp2& (0+255),w,b
  8531  00111E  0100               	movlb	0	; () banked
  8532  001120  B4D8               	btfsc	status,2,c
  8533  001122  D011               	goto	l980
  8534                           
  8535                           ; BSR set to: 0
  8536  001124  0100               	movlb	0	; () banked
  8537  001126  51AA               	movf	___ftadd@exp1& (0+255),w,b
  8538  001128  0100               	movlb	0	; () banked
  8539  00112A  5DA9               	subwf	___ftadd@exp2& (0+255),w,b
  8540  00112C  B0D8               	btfsc	status,0,c
  8541  00112E  D012               	goto	l4803
  8542                           
  8543                           ; BSR set to: 0
  8544  001130  0100               	movlb	0	; () banked
  8545  001132  51A9               	movf	___ftadd@exp2& (0+255),w,b
  8546  001134  0800               	sublw	0
  8547  001136  0100               	movlb	0	; () banked
  8548  001138  25AA               	addwf	___ftadd@exp1& (0+255),w,b
  8549  00113A  0100               	movlb	0	; () banked
  8550  00113C  6FA5               	movwf	??___ftadd& (0+255),b
  8551  00113E  0E18               	movlw	24
  8552  001140  0100               	movlb	0	; () banked
  8553  001142  65A5               	cpfsgt	??___ftadd& (0+255),b
  8554  001144  D007               	goto	l4803
  8555  001146                     l980:
  8556                           
  8557                           ; BSR set to: 0
  8558  001146  C09F  F09F         	movff	___ftadd@f1,?___ftadd
  8559  00114A  C0A0  F0A0         	movff	___ftadd@f1+1,?___ftadd+1
  8560  00114E  C0A1  F0A1         	movff	___ftadd@f1+2,?___ftadd+2
  8561  001152  0012               	return	
  8562  001154                     l4803:
  8563                           
  8564                           ; BSR set to: 0
  8565  001154  0E06               	movlw	6
  8566  001156  0100               	movlb	0	; () banked
  8567  001158  6FA8               	movwf	___ftadd@sign& (0+255),b
  8568                           
  8569                           ; BSR set to: 0
  8570  00115A  0100               	movlb	0	; () banked
  8571  00115C  AFA1               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8572  00115E  D002               	goto	l4809
  8573                           
  8574                           ; BSR set to: 0
  8575  001160  0100               	movlb	0	; () banked
  8576  001162  8FA8               	bsf	___ftadd@sign& (0+255),7,b
  8577  001164                     l4809:
  8578                           
  8579                           ; BSR set to: 0
  8580  001164  0100               	movlb	0	; () banked
  8581  001166  AFA4               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8582  001168  D002               	goto	l982
  8583                           
  8584                           ; BSR set to: 0
  8585  00116A  0100               	movlb	0	; () banked
  8586  00116C  8DA8               	bsf	___ftadd@sign& (0+255),6,b
  8587  00116E                     l982:
  8588                           
  8589                           ; BSR set to: 0
  8590  00116E  0100               	movlb	0	; () banked
  8591  001170  8FA0               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8592                           
  8593                           ; BSR set to: 0
  8594  001172  0EFF               	movlw	255
  8595  001174  0100               	movlb	0	; () banked
  8596  001176  179F               	andwf	___ftadd@f1& (0+255),f,b
  8597  001178  0EFF               	movlw	255
  8598  00117A  0100               	movlb	0	; () banked
  8599  00117C  17A0               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8600  00117E  0E00               	movlw	0
  8601  001180  0100               	movlb	0	; () banked
  8602  001182  17A1               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8603  001184  0100               	movlb	0	; () banked
  8604  001186  8FA3               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8605                           
  8606                           ; BSR set to: 0
  8607  001188  0EFF               	movlw	255
  8608  00118A  0100               	movlb	0	; () banked
  8609  00118C  17A2               	andwf	___ftadd@f2& (0+255),f,b
  8610  00118E  0EFF               	movlw	255
  8611  001190  0100               	movlb	0	; () banked
  8612  001192  17A3               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8613  001194  0E00               	movlw	0
  8614  001196  0100               	movlb	0	; () banked
  8615  001198  17A4               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8616                           
  8617                           ; BSR set to: 0
  8618  00119A  0100               	movlb	0	; () banked
  8619  00119C  51A9               	movf	___ftadd@exp2& (0+255),w,b
  8620  00119E  0100               	movlb	0	; () banked
  8621  0011A0  5DAA               	subwf	___ftadd@exp1& (0+255),w,b
  8622  0011A2  B0D8               	btfsc	status,0,c
  8623  0011A4  D025               	goto	l4829
  8624  0011A6                     l4819:
  8625                           
  8626                           ; BSR set to: 0
  8627  0011A6  0100               	movlb	0	; () banked
  8628  0011A8  90D8               	bcf	status,0,c
  8629  0011AA  37A2               	rlcf	___ftadd@f2& (0+255),f,b
  8630  0011AC  37A3               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8631  0011AE  37A4               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8632  0011B0  0100               	movlb	0	; () banked
  8633  0011B2  07A9               	decf	___ftadd@exp2& (0+255),f,b
  8634                           
  8635                           ; BSR set to: 0
  8636  0011B4  0100               	movlb	0	; () banked
  8637  0011B6  51AA               	movf	___ftadd@exp1& (0+255),w,b
  8638  0011B8  0100               	movlb	0	; () banked
  8639  0011BA  19A9               	xorwf	___ftadd@exp2& (0+255),w,b
  8640  0011BC  B4D8               	btfsc	status,2,c
  8641  0011BE  D011               	goto	l4827
  8642                           
  8643                           ; BSR set to: 0
  8644  0011C0  0100               	movlb	0	; () banked
  8645  0011C2  07A8               	decf	___ftadd@sign& (0+255),f,b
  8646  0011C4  C0A8  F0A5         	movff	___ftadd@sign,??___ftadd
  8647  0011C8  0E07               	movlw	7
  8648  0011CA  0100               	movlb	0	; () banked
  8649  0011CC  17A5               	andwf	??___ftadd& (0+255),f,b
  8650  0011CE  B4D8               	btfsc	status,2,c
  8651  0011D0  D008               	goto	l4827
  8652  0011D2  D7E9               	goto	l4819
  8653  0011D4                     l4825:
  8654                           
  8655                           ; BSR set to: 0
  8656  0011D4  0100               	movlb	0	; () banked
  8657  0011D6  90D8               	bcf	status,0,c
  8658  0011D8  33A1               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8659  0011DA  33A0               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8660  0011DC  339F               	rrcf	___ftadd@f1& (0+255),f,b
  8661  0011DE  0100               	movlb	0	; () banked
  8662  0011E0  2BAA               	incf	___ftadd@exp1& (0+255),f,b
  8663  0011E2                     l4827:
  8664                           
  8665                           ; BSR set to: 0
  8666  0011E2  0100               	movlb	0	; () banked
  8667  0011E4  51A9               	movf	___ftadd@exp2& (0+255),w,b
  8668  0011E6  0100               	movlb	0	; () banked
  8669  0011E8  19AA               	xorwf	___ftadd@exp1& (0+255),w,b
  8670  0011EA  B4D8               	btfsc	status,2,c
  8671  0011EC  D02B               	goto	l991
  8672  0011EE  D7F2               	goto	l4825
  8673  0011F0                     l4829:
  8674                           
  8675                           ; BSR set to: 0
  8676  0011F0  0100               	movlb	0	; () banked
  8677  0011F2  51AA               	movf	___ftadd@exp1& (0+255),w,b
  8678  0011F4  0100               	movlb	0	; () banked
  8679  0011F6  5DA9               	subwf	___ftadd@exp2& (0+255),w,b
  8680  0011F8  B0D8               	btfsc	status,0,c
  8681  0011FA  D024               	goto	l991
  8682  0011FC                     l4831:
  8683                           
  8684                           ; BSR set to: 0
  8685  0011FC  0100               	movlb	0	; () banked
  8686  0011FE  90D8               	bcf	status,0,c
  8687  001200  379F               	rlcf	___ftadd@f1& (0+255),f,b
  8688  001202  37A0               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8689  001204  37A1               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8690  001206  0100               	movlb	0	; () banked
  8691  001208  07AA               	decf	___ftadd@exp1& (0+255),f,b
  8692                           
  8693                           ; BSR set to: 0
  8694  00120A  0100               	movlb	0	; () banked
  8695  00120C  51AA               	movf	___ftadd@exp1& (0+255),w,b
  8696  00120E  0100               	movlb	0	; () banked
  8697  001210  19A9               	xorwf	___ftadd@exp2& (0+255),w,b
  8698  001212  B4D8               	btfsc	status,2,c
  8699  001214  D011               	goto	l4839
  8700                           
  8701                           ; BSR set to: 0
  8702  001216  0100               	movlb	0	; () banked
  8703  001218  07A8               	decf	___ftadd@sign& (0+255),f,b
  8704  00121A  C0A8  F0A5         	movff	___ftadd@sign,??___ftadd
  8705  00121E  0E07               	movlw	7
  8706  001220  0100               	movlb	0	; () banked
  8707  001222  17A5               	andwf	??___ftadd& (0+255),f,b
  8708  001224  B4D8               	btfsc	status,2,c
  8709  001226  D008               	goto	l4839
  8710  001228  D7E9               	goto	l4831
  8711  00122A                     l4837:
  8712                           
  8713                           ; BSR set to: 0
  8714  00122A  0100               	movlb	0	; () banked
  8715  00122C  90D8               	bcf	status,0,c
  8716  00122E  33A4               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8717  001230  33A3               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8718  001232  33A2               	rrcf	___ftadd@f2& (0+255),f,b
  8719  001234  0100               	movlb	0	; () banked
  8720  001236  2BA9               	incf	___ftadd@exp2& (0+255),f,b
  8721  001238                     l4839:
  8722                           
  8723                           ; BSR set to: 0
  8724  001238  0100               	movlb	0	; () banked
  8725  00123A  51A9               	movf	___ftadd@exp2& (0+255),w,b
  8726  00123C  0100               	movlb	0	; () banked
  8727  00123E  19AA               	xorwf	___ftadd@exp1& (0+255),w,b
  8728  001240  A4D8               	btfss	status,2,c
  8729  001242  D7F3               	goto	l4837
  8730  001244                     l991:
  8731                           
  8732                           ; BSR set to: 0
  8733  001244  0100               	movlb	0	; () banked
  8734  001246  AFA8               	btfss	___ftadd@sign& (0+255),7,b
  8735  001248  D012               	goto	l1000
  8736                           
  8737                           ; BSR set to: 0
  8738  00124A  0EFF               	movlw	255
  8739  00124C  0100               	movlb	0	; () banked
  8740  00124E  1B9F               	xorwf	___ftadd@f1& (0+255),f,b
  8741  001250  0EFF               	movlw	255
  8742  001252  0100               	movlb	0	; () banked
  8743  001254  1BA0               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8744  001256  0EFF               	movlw	255
  8745  001258  0100               	movlb	0	; () banked
  8746  00125A  1BA1               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8747  00125C  0E01               	movlw	1
  8748  00125E  0100               	movlb	0	; () banked
  8749  001260  279F               	addwf	___ftadd@f1& (0+255),f,b
  8750  001262  0E00               	movlw	0
  8751  001264  0100               	movlb	0	; () banked
  8752  001266  23A0               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8753  001268  0E00               	movlw	0
  8754  00126A  0100               	movlb	0	; () banked
  8755  00126C  23A1               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8756  00126E                     l1000:
  8757                           
  8758                           ; BSR set to: 0
  8759  00126E  0100               	movlb	0	; () banked
  8760  001270  ADA8               	btfss	___ftadd@sign& (0+255),6,b
  8761  001272  D012               	goto	l4845
  8762                           
  8763                           ; BSR set to: 0
  8764  001274  0EFF               	movlw	255
  8765  001276  0100               	movlb	0	; () banked
  8766  001278  1BA2               	xorwf	___ftadd@f2& (0+255),f,b
  8767  00127A  0EFF               	movlw	255
  8768  00127C  0100               	movlb	0	; () banked
  8769  00127E  1BA3               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8770  001280  0EFF               	movlw	255
  8771  001282  0100               	movlb	0	; () banked
  8772  001284  1BA4               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8773  001286  0E01               	movlw	1
  8774  001288  0100               	movlb	0	; () banked
  8775  00128A  27A2               	addwf	___ftadd@f2& (0+255),f,b
  8776  00128C  0E00               	movlw	0
  8777  00128E  0100               	movlb	0	; () banked
  8778  001290  23A3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8779  001292  0E00               	movlw	0
  8780  001294  0100               	movlb	0	; () banked
  8781  001296  23A4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8782  001298                     l4845:
  8783                           
  8784                           ; BSR set to: 0
  8785  001298  0E00               	movlw	0
  8786  00129A  0100               	movlb	0	; () banked
  8787  00129C  6FA8               	movwf	___ftadd@sign& (0+255),b
  8788                           
  8789                           ; BSR set to: 0
  8790  00129E  0100               	movlb	0	; () banked
  8791  0012A0  519F               	movf	___ftadd@f1& (0+255),w,b
  8792  0012A2  0100               	movlb	0	; () banked
  8793  0012A4  27A2               	addwf	___ftadd@f2& (0+255),f,b
  8794  0012A6  0100               	movlb	0	; () banked
  8795  0012A8  51A0               	movf	(___ftadd@f1+1)& (0+255),w,b
  8796  0012AA  0100               	movlb	0	; () banked
  8797  0012AC  23A3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8798  0012AE  0100               	movlb	0	; () banked
  8799  0012B0  51A1               	movf	(___ftadd@f1+2)& (0+255),w,b
  8800  0012B2  0100               	movlb	0	; () banked
  8801  0012B4  23A4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8802                           
  8803                           ; BSR set to: 0
  8804  0012B6  0100               	movlb	0	; () banked
  8805  0012B8  AFA4               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8806  0012BA  D015               	goto	l4855
  8807                           
  8808                           ; BSR set to: 0
  8809  0012BC  0EFF               	movlw	255
  8810  0012BE  0100               	movlb	0	; () banked
  8811  0012C0  1BA2               	xorwf	___ftadd@f2& (0+255),f,b
  8812  0012C2  0EFF               	movlw	255
  8813  0012C4  0100               	movlb	0	; () banked
  8814  0012C6  1BA3               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8815  0012C8  0EFF               	movlw	255
  8816  0012CA  0100               	movlb	0	; () banked
  8817  0012CC  1BA4               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8818  0012CE  0E01               	movlw	1
  8819  0012D0  0100               	movlb	0	; () banked
  8820  0012D2  27A2               	addwf	___ftadd@f2& (0+255),f,b
  8821  0012D4  0E00               	movlw	0
  8822  0012D6  0100               	movlb	0	; () banked
  8823  0012D8  23A3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8824  0012DA  0E00               	movlw	0
  8825  0012DC  0100               	movlb	0	; () banked
  8826  0012DE  23A4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8827                           
  8828                           ; BSR set to: 0
  8829  0012E0  0E01               	movlw	1
  8830  0012E2  0100               	movlb	0	; () banked
  8831  0012E4  6FA8               	movwf	___ftadd@sign& (0+255),b
  8832  0012E6                     l4855:
  8833                           
  8834                           ; BSR set to: 0
  8835  0012E6  C0A2  F022         	movff	___ftadd@f2,___ftpack@arg
  8836  0012EA  C0A3  F023         	movff	___ftadd@f2+1,___ftpack@arg+1
  8837  0012EE  C0A4  F024         	movff	___ftadd@f2+2,___ftpack@arg+2
  8838  0012F2  C0AA  F025         	movff	___ftadd@exp1,___ftpack@exp
  8839  0012F6  C0A8  F026         	movff	___ftadd@sign,___ftpack@sign
  8840  0012FA  EC8A  F010         	call	___ftpack	;wreg free
  8841  0012FE  C022  F09F         	movff	?___ftpack,?___ftadd
  8842  001302  C023  F0A0         	movff	?___ftpack+1,?___ftadd+1
  8843  001306  C024  F0A1         	movff	?___ftpack+2,?___ftadd+2
  8844  00130A  0012               	return	
  8845  00130C                     __end_of___ftadd:
  8846                           	opt stack 0
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           prodh	equ	0xFF4
  8852                           prodl	equ	0xFF3
  8853                           intcon	equ	0xFF2
  8854                           postinc0	equ	0xFEE
  8855                           wreg	equ	0xFE8
  8856                           postdec1	equ	0xFE5
  8857                           fsr1l	equ	0xFE1
  8858                           indf2	equ	0xFDF
  8859                           postinc2	equ	0xFDE
  8860                           postdec2	equ	0xFDD
  8861                           fsr2h	equ	0xFDA
  8862                           fsr2l	equ	0xFD9
  8863                           status	equ	0xFD8
  8864                           
  8865 ;; *************** function ___awtoft *****************
  8866 ;; Defined at:
  8867 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;  c               2   41[COMRAM] int 
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;  sign            1   44[COMRAM] unsigned char 
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  3   41[COMRAM] float 
  8874 ;; Registers used:
  8875 ;;		wreg, status,2, status,0, cstack
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8881 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8884 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;Total ram usage:        4 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    4
  8888 ;; This function calls:
  8889 ;;		___ftpack
  8890 ;; This function is called by:
  8891 ;;		_angleToPulse
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           	psect	text33
  8896  002A04                     __ptext33:
  8897                           	opt stack 0
  8898  002A04                     ___awtoft:
  8899                           	opt stack 23
  8900                           
  8901                           ;incstack = 0
  8902  002A04  0E00               	movlw	0
  8903  002A06  6E2D               	movwf	___awtoft@sign,c
  8904  002A08  AE2B               	btfss	___awtoft@c+1,7,c
  8905  002A0A  D006               	goto	l5249
  8906  002A0C  6C2A               	negf	___awtoft@c,c
  8907  002A0E  1E2B               	comf	___awtoft@c+1,f,c
  8908  002A10  B0D8               	btfsc	status,0,c
  8909  002A12  2A2B               	incf	___awtoft@c+1,f,c
  8910  002A14  0E01               	movlw	1
  8911  002A16  6E2D               	movwf	___awtoft@sign,c
  8912  002A18                     l5249:
  8913  002A18  C02A  F022         	movff	___awtoft@c,___ftpack@arg
  8914  002A1C  C02B  F023         	movff	___awtoft@c+1,___ftpack@arg+1
  8915  002A20  6A24               	clrf	___ftpack@arg+2,c
  8916  002A22  0E8E               	movlw	142
  8917  002A24  6E25               	movwf	___ftpack@exp,c
  8918  002A26  C02D  F026         	movff	___awtoft@sign,___ftpack@sign
  8919  002A2A  EC8A  F010         	call	___ftpack	;wreg free
  8920  002A2E  C022  F02A         	movff	?___ftpack,?___awtoft
  8921  002A32  C023  F02B         	movff	?___ftpack+1,?___awtoft+1
  8922  002A36  C024  F02C         	movff	?___ftpack+2,?___awtoft+2
  8923  002A3A  0012               	return	
  8924  002A3C                     __end_of___awtoft:
  8925                           	opt stack 0
  8926                           tblptru	equ	0xFF8
  8927                           tblptrh	equ	0xFF7
  8928                           tblptrl	equ	0xFF6
  8929                           tablat	equ	0xFF5
  8930                           prodh	equ	0xFF4
  8931                           prodl	equ	0xFF3
  8932                           intcon	equ	0xFF2
  8933                           postinc0	equ	0xFEE
  8934                           wreg	equ	0xFE8
  8935                           postdec1	equ	0xFE5
  8936                           fsr1l	equ	0xFE1
  8937                           indf2	equ	0xFDF
  8938                           postinc2	equ	0xFDE
  8939                           postdec2	equ	0xFDD
  8940                           fsr2h	equ	0xFDA
  8941                           fsr2l	equ	0xFD9
  8942                           status	equ	0xFD8
  8943                           
  8944 ;; *************** function ___altoft *****************
  8945 ;; Defined at:
  8946 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;  c               4   41[COMRAM] long 
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;  sign            1   50[COMRAM] unsigned char 
  8951 ;;  exp             1   49[COMRAM] unsigned char 
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  3   41[COMRAM] float 
  8954 ;; Registers used:
  8955 ;;		wreg, status,2, status,0, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8961 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8963 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8964 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8965 ;;Total ram usage:       10 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:    4
  8968 ;; This function calls:
  8969 ;;		___ftpack
  8970 ;; This function is called by:
  8971 ;;		_sortBattery
  8972 ;;		_angleToPulse
  8973 ;;		_testFrequency
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           	psect	text34
  8978  00259C                     __ptext34:
  8979                           	opt stack 0
  8980  00259C                     ___altoft:
  8981                           	opt stack 23
  8982                           
  8983                           ;incstack = 0
  8984  00259C  0E00               	movlw	0
  8985  00259E  6E33               	movwf	___altoft@sign,c
  8986  0025A0  0E8E               	movlw	142
  8987  0025A2  6E32               	movwf	___altoft@exp,c
  8988  0025A4  AE2D               	btfss	___altoft@c+3,7,c
  8989  0025A6  D011               	goto	l5181
  8990  0025A8  1E2D               	comf	___altoft@c+3,f,c
  8991  0025AA  1E2C               	comf	___altoft@c+2,f,c
  8992  0025AC  1E2B               	comf	___altoft@c+1,f,c
  8993  0025AE  6C2A               	negf	___altoft@c,c
  8994  0025B0  0E00               	movlw	0
  8995  0025B2  222B               	addwfc	___altoft@c+1,f,c
  8996  0025B4  222C               	addwfc	___altoft@c+2,f,c
  8997  0025B6  222D               	addwfc	___altoft@c+3,f,c
  8998  0025B8  0E01               	movlw	1
  8999  0025BA  6E33               	movwf	___altoft@sign,c
  9000  0025BC  D006               	goto	l5181
  9001  0025BE                     l5179:
  9002  0025BE  90D8               	bcf	status,0,c
  9003  0025C0  322D               	rrcf	___altoft@c+3,f,c
  9004  0025C2  322C               	rrcf	___altoft@c+2,f,c
  9005  0025C4  322B               	rrcf	___altoft@c+1,f,c
  9006  0025C6  322A               	rrcf	___altoft@c,f,c
  9007  0025C8  2A32               	incf	___altoft@exp,f,c
  9008  0025CA                     l5181:
  9009  0025CA  0E00               	movlw	0
  9010  0025CC  142A               	andwf	___altoft@c,w,c
  9011  0025CE  6E2E               	movwf	??___altoft& (0+255),c
  9012  0025D0  0E00               	movlw	0
  9013  0025D2  142B               	andwf	___altoft@c+1,w,c
  9014  0025D4  6E2F               	movwf	(??___altoft+1)& (0+255),c
  9015  0025D6  0E00               	movlw	0
  9016  0025D8  142C               	andwf	___altoft@c+2,w,c
  9017  0025DA  6E30               	movwf	(??___altoft+2)& (0+255),c
  9018  0025DC  0EFF               	movlw	255
  9019  0025DE  142D               	andwf	___altoft@c+3,w,c
  9020  0025E0  6E31               	movwf	(??___altoft+3)& (0+255),c
  9021  0025E2  502E               	movf	??___altoft,w,c
  9022  0025E4  102F               	iorwf	??___altoft+1,w,c
  9023  0025E6  1030               	iorwf	??___altoft+2,w,c
  9024  0025E8  1031               	iorwf	??___altoft+3,w,c
  9025  0025EA  A4D8               	btfss	status,2,c
  9026  0025EC  D7E8               	goto	l5179
  9027  0025EE  C02A  F022         	movff	___altoft@c,___ftpack@arg
  9028  0025F2  C02B  F023         	movff	___altoft@c+1,___ftpack@arg+1
  9029  0025F6  C02C  F024         	movff	___altoft@c+2,___ftpack@arg+2
  9030  0025FA  C032  F025         	movff	___altoft@exp,___ftpack@exp
  9031  0025FE  C033  F026         	movff	___altoft@sign,___ftpack@sign
  9032  002602  EC8A  F010         	call	___ftpack	;wreg free
  9033  002606  C022  F02A         	movff	?___ftpack,?___altoft
  9034  00260A  C023  F02B         	movff	?___ftpack+1,?___altoft+1
  9035  00260E  C024  F02C         	movff	?___ftpack+2,?___altoft+2
  9036  002612  0012               	return	
  9037  002614                     __end_of___altoft:
  9038                           	opt stack 0
  9039                           tblptru	equ	0xFF8
  9040                           tblptrh	equ	0xFF7
  9041                           tblptrl	equ	0xFF6
  9042                           tablat	equ	0xFF5
  9043                           prodh	equ	0xFF4
  9044                           prodl	equ	0xFF3
  9045                           intcon	equ	0xFF2
  9046                           postinc0	equ	0xFEE
  9047                           wreg	equ	0xFE8
  9048                           postdec1	equ	0xFE5
  9049                           fsr1l	equ	0xFE1
  9050                           indf2	equ	0xFDF
  9051                           postinc2	equ	0xFDE
  9052                           postdec2	equ	0xFDD
  9053                           fsr2h	equ	0xFDA
  9054                           fsr2l	equ	0xFD9
  9055                           status	equ	0xFD8
  9056                           
  9057 ;; *************** function ___ftpack *****************
  9058 ;; Defined at:
  9059 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  9060 ;; Parameters:    Size  Location     Type
  9061 ;;  arg             3   33[COMRAM] unsigned um
  9062 ;;  exp             1   36[COMRAM] unsigned char 
  9063 ;;  sign            1   37[COMRAM] unsigned char 
  9064 ;; Auto vars:     Size  Location     Type
  9065 ;;		None
  9066 ;; Return value:  Size  Location     Type
  9067 ;;                  3   33[COMRAM] float 
  9068 ;; Registers used:
  9069 ;;		wreg, status,2, status,0
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9075 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9077 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9078 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9079 ;;Total ram usage:        8 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; Hardware stack levels required when called:    3
  9082 ;; This function calls:
  9083 ;;		Nothing
  9084 ;; This function is called by:
  9085 ;;		___altoft
  9086 ;;		___awtoft
  9087 ;;		___ftadd
  9088 ;;		___ftdiv
  9089 ;;		___ftmul
  9090 ;;		___lltoft
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           	psect	text35
  9095  002114                     __ptext35:
  9096                           	opt stack 0
  9097  002114                     ___ftpack:
  9098                           	opt stack 23
  9099                           
  9100                           ;incstack = 0
  9101  002114  5025               	movf	___ftpack@exp,w,c
  9102  002116  B4D8               	btfsc	status,2,c
  9103  002118  D005               	goto	l4749
  9104  00211A  5022               	movf	___ftpack@arg,w,c
  9105  00211C  1023               	iorwf	___ftpack@arg+1,w,c
  9106  00211E  1024               	iorwf	___ftpack@arg+2,w,c
  9107  002120  A4D8               	btfss	status,2,c
  9108  002122  D00C               	goto	l4755
  9109  002124                     l4749:
  9110  002124  0E00               	movlw	0
  9111  002126  6E22               	movwf	?___ftpack,c
  9112  002128  0E00               	movlw	0
  9113  00212A  6E23               	movwf	?___ftpack+1,c
  9114  00212C  0E00               	movlw	0
  9115  00212E  6E24               	movwf	?___ftpack+2,c
  9116  002130  0012               	return	
  9117  002132                     l4753:
  9118  002132  2A25               	incf	___ftpack@exp,f,c
  9119  002134  90D8               	bcf	status,0,c
  9120  002136  3224               	rrcf	___ftpack@arg+2,f,c
  9121  002138  3223               	rrcf	___ftpack@arg+1,f,c
  9122  00213A  3222               	rrcf	___ftpack@arg,f,c
  9123  00213C                     l4755:
  9124  00213C  0E00               	movlw	0
  9125  00213E  1422               	andwf	___ftpack@arg,w,c
  9126  002140  6E27               	movwf	??___ftpack& (0+255),c
  9127  002142  0E00               	movlw	0
  9128  002144  1423               	andwf	___ftpack@arg+1,w,c
  9129  002146  6E28               	movwf	(??___ftpack+1)& (0+255),c
  9130  002148  0EFE               	movlw	254
  9131  00214A  1424               	andwf	___ftpack@arg+2,w,c
  9132  00214C  6E29               	movwf	(??___ftpack+2)& (0+255),c
  9133  00214E  5027               	movf	??___ftpack,w,c
  9134  002150  1028               	iorwf	??___ftpack+1,w,c
  9135  002152  1029               	iorwf	??___ftpack+2,w,c
  9136  002154  B4D8               	btfsc	status,2,c
  9137  002156  D00C               	goto	l4761
  9138  002158  D7EC               	goto	l4753
  9139  00215A                     l4757:
  9140  00215A  2A25               	incf	___ftpack@exp,f,c
  9141  00215C  0E01               	movlw	1
  9142  00215E  2622               	addwf	___ftpack@arg,f,c
  9143  002160  0E00               	movlw	0
  9144  002162  2223               	addwfc	___ftpack@arg+1,f,c
  9145  002164  0E00               	movlw	0
  9146  002166  2224               	addwfc	___ftpack@arg+2,f,c
  9147  002168  90D8               	bcf	status,0,c
  9148  00216A  3224               	rrcf	___ftpack@arg+2,f,c
  9149  00216C  3223               	rrcf	___ftpack@arg+1,f,c
  9150  00216E  3222               	rrcf	___ftpack@arg,f,c
  9151  002170                     l4761:
  9152  002170  0E00               	movlw	0
  9153  002172  1422               	andwf	___ftpack@arg,w,c
  9154  002174  6E27               	movwf	??___ftpack& (0+255),c
  9155  002176  0E00               	movlw	0
  9156  002178  1423               	andwf	___ftpack@arg+1,w,c
  9157  00217A  6E28               	movwf	(??___ftpack+1)& (0+255),c
  9158  00217C  0EFF               	movlw	255
  9159  00217E  1424               	andwf	___ftpack@arg+2,w,c
  9160  002180  6E29               	movwf	(??___ftpack+2)& (0+255),c
  9161  002182  5027               	movf	??___ftpack,w,c
  9162  002184  1028               	iorwf	??___ftpack+1,w,c
  9163  002186  1029               	iorwf	??___ftpack+2,w,c
  9164  002188  B4D8               	btfsc	status,2,c
  9165  00218A  D006               	goto	l4765
  9166  00218C  D7E6               	goto	l4757
  9167  00218E                     l4763:
  9168  00218E  0625               	decf	___ftpack@exp,f,c
  9169  002190  90D8               	bcf	status,0,c
  9170  002192  3622               	rlcf	___ftpack@arg,f,c
  9171  002194  3623               	rlcf	___ftpack@arg+1,f,c
  9172  002196  3624               	rlcf	___ftpack@arg+2,f,c
  9173  002198                     l4765:
  9174  002198  BE23               	btfsc	___ftpack@arg+1,7,c
  9175  00219A  D003               	goto	l953
  9176  00219C  0E02               	movlw	2
  9177  00219E  6025               	cpfslt	___ftpack@exp,c
  9178  0021A0  D7F6               	goto	l4763
  9179  0021A2                     l953:
  9180  0021A2  A025               	btfss	___ftpack@exp,0,c
  9181  0021A4  9E23               	bcf	___ftpack@arg+1,7,c
  9182  0021A6  90D8               	bcf	status,0,c
  9183  0021A8  3225               	rrcf	___ftpack@exp,f,c
  9184  0021AA  5025               	movf	___ftpack@exp,w,c
  9185  0021AC  1224               	iorwf	___ftpack@arg+2,f,c
  9186  0021AE  5026               	movf	___ftpack@sign,w,c
  9187  0021B0  A4D8               	btfss	status,2,c
  9188  0021B2  8E24               	bsf	___ftpack@arg+2,7,c
  9189  0021B4  C022  F022         	movff	___ftpack@arg,?___ftpack
  9190  0021B8  C023  F023         	movff	___ftpack@arg+1,?___ftpack+1
  9191  0021BC  C024  F024         	movff	___ftpack@arg+2,?___ftpack+2
  9192  0021C0  0012               	return	
  9193  0021C2                     __end_of___ftpack:
  9194                           	opt stack 0
  9195                           tblptru	equ	0xFF8
  9196                           tblptrh	equ	0xFF7
  9197                           tblptrl	equ	0xFF6
  9198                           tablat	equ	0xFF5
  9199                           prodh	equ	0xFF4
  9200                           prodl	equ	0xFF3
  9201                           intcon	equ	0xFF2
  9202                           postinc0	equ	0xFEE
  9203                           wreg	equ	0xFE8
  9204                           postdec1	equ	0xFE5
  9205                           fsr1l	equ	0xFE1
  9206                           indf2	equ	0xFDF
  9207                           postinc2	equ	0xFDE
  9208                           postdec2	equ	0xFDD
  9209                           fsr2h	equ	0xFDA
  9210                           fsr2l	equ	0xFD9
  9211                           status	equ	0xFD8
  9212                           
  9213 ;; *************** function _initTimer *****************
  9214 ;; Defined at:
  9215 ;;		line 52 in file "timer.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;  timer           2   33[COMRAM] int 
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;		None
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  1    wreg      void 
  9222 ;; Registers used:
  9223 ;;		wreg, status,2, status,0
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9229 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;Total ram usage:        4 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    3
  9236 ;; This function calls:
  9237 ;;		Nothing
  9238 ;; This function is called by:
  9239 ;;		_initServo
  9240 ;;		_testFrequency
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           	psect	text36
  9245  002900                     __ptext36:
  9246                           	opt stack 0
  9247  002900                     _initTimer:
  9248                           	opt stack 26
  9249                           
  9250                           ;timer.c: 53: switch(timer){
  9251                           
  9252                           ;incstack = 0
  9253  002900  D00D               	goto	l4149
  9254  002902                     l4133:
  9255                           
  9256                           ;timer.c: 55: T0CON = 0;
  9257  002902  0E00               	movlw	0
  9258  002904  6ED5               	movwf	4053,c	;volatile
  9259                           
  9260                           ;timer.c: 56: T0CON |= 1<<3;
  9261  002906  86D5               	bsf	4053,3,c	;volatile
  9262                           
  9263                           ;timer.c: 58: TMR0IE = 1;
  9264  002908  8AF2               	bsf	intcon,5,c	;volatile
  9265                           
  9266                           ;timer.c: 59: break;
  9267  00290A  D01A               	goto	l371
  9268  00290C                     l4139:
  9269                           
  9270                           ;timer.c: 61: T1CON = 0;
  9271  00290C  0E00               	movlw	0
  9272  00290E  6ECD               	movwf	4045,c	;volatile
  9273                           
  9274                           ;timer.c: 63: TMR1IE = 1;
  9275  002910  809D               	bsf	3997,0,c	;volatile
  9276                           
  9277                           ;timer.c: 64: break;
  9278  002912  D016               	goto	l371
  9279  002914                     l4143:
  9280                           
  9281                           ;timer.c: 66: T3CON = 0;
  9282  002914  0E00               	movlw	0
  9283  002916  6EB1               	movwf	4017,c	;volatile
  9284                           
  9285                           ;timer.c: 67: TMR3IE = 1;
  9286  002918  82A0               	bsf	4000,1,c	;volatile
  9287                           
  9288                           ;timer.c: 69: }
  9289                           
  9290                           ;timer.c: 68: break;
  9291  00291A  D012               	goto	l371
  9292  00291C                     l4149:
  9293  00291C  C022  F024         	movff	initTimer@timer,??_initTimer
  9294  002920  C023  F025         	movff	initTimer@timer+1,??_initTimer+1
  9295                           
  9296                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9297                           ; Switch size 1, requested type "space"
  9298                           ; Number of cases is 1, Range of values is 0 to 0
  9299                           ; switch strategies available:
  9300                           ; Name         Instructions Cycles
  9301                           ; simple_byte            4     3 (average)
  9302                           ;	Chosen strategy is simple_byte
  9303  002924  5025               	movf	??_initTimer+1,w,c
  9304  002926  0A00               	xorlw	0	; case 0
  9305  002928  A4D8               	btfss	status,2,c
  9306  00292A  D00A               	goto	l371
  9307                           
  9308                           ; Switch size 1, requested type "space"
  9309                           ; Number of cases is 3, Range of values is 0 to 3
  9310                           ; switch strategies available:
  9311                           ; Name         Instructions Cycles
  9312                           ; simple_byte           10     6 (average)
  9313                           ;	Chosen strategy is simple_byte
  9314  00292C  5024               	movf	??_initTimer,w,c
  9315  00292E  0A00               	xorlw	0	; case 0
  9316  002930  B4D8               	btfsc	status,2,c
  9317  002932  D7E7               	goto	l4133
  9318  002934  0A01               	xorlw	1	; case 1
  9319  002936  B4D8               	btfsc	status,2,c
  9320  002938  D7E9               	goto	l4139
  9321  00293A  0A02               	xorlw	2	; case 3
  9322  00293C  B4D8               	btfsc	status,2,c
  9323  00293E  D7EA               	goto	l4143
  9324  002940                     l371:
  9325                           
  9326                           ;timer.c: 70: PEIE = 1;
  9327  002940  8CF2               	bsf	intcon,6,c	;volatile
  9328                           
  9329                           ;timer.c: 71: (INTCONbits.GIE = 1);
  9330  002942  8EF2               	bsf	intcon,7,c	;volatile
  9331  002944  0012               	return		;funcret
  9332  002946                     __end_of_initTimer:
  9333                           	opt stack 0
  9334                           tblptru	equ	0xFF8
  9335                           tblptrh	equ	0xFF7
  9336                           tblptrl	equ	0xFF6
  9337                           tablat	equ	0xFF5
  9338                           prodh	equ	0xFF4
  9339                           prodl	equ	0xFF3
  9340                           intcon	equ	0xFF2
  9341                           postinc0	equ	0xFEE
  9342                           wreg	equ	0xFE8
  9343                           postdec1	equ	0xFE5
  9344                           fsr1l	equ	0xFE1
  9345                           indf2	equ	0xFDF
  9346                           postinc2	equ	0xFDE
  9347                           postdec2	equ	0xFDD
  9348                           fsr2h	equ	0xFDA
  9349                           fsr2l	equ	0xFD9
  9350                           status	equ	0xFD8
  9351                           
  9352 ;; *************** function _initLCD *****************
  9353 ;; Defined at:
  9354 ;;		line 15 in file "lcd.c"
  9355 ;; Parameters:    Size  Location     Type
  9356 ;;		None
  9357 ;; Auto vars:     Size  Location     Type
  9358 ;;		None
  9359 ;; Return value:  Size  Location     Type
  9360 ;;                  1    wreg      void 
  9361 ;; Registers used:
  9362 ;;		wreg, status,2, status,0, cstack
  9363 ;; Tracked objects:
  9364 ;;		On entry : 0/0
  9365 ;;		On exit  : 0/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9370 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9371 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9372 ;;Total ram usage:        1 bytes
  9373 ;; Hardware stack levels used:    1
  9374 ;; Hardware stack levels required when called:    5
  9375 ;; This function calls:
  9376 ;;		_lcdInst
  9377 ;; This function is called by:
  9378 ;;		_main
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           	psect	text37
  9383  002946                     __ptext37:
  9384                           	opt stack 0
  9385  002946                     _initLCD:
  9386                           	opt stack 25
  9387                           
  9388                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  9389                           
  9390                           ;incstack = 0
  9391  002946  0E31               	movlw	49
  9392  002948  6E26               	movwf	??_initLCD& (0+255),c
  9393  00294A  0EB2               	movlw	178
  9394  00294C                     u5967:
  9395  00294C  2EE8               	decfsz	wreg,f,c
  9396  00294E  D7FE               	bra	u5967
  9397  002950  2E26               	decfsz	??_initLCD& (0+255),f,c
  9398  002952  D7FC               	bra	u5967
  9399  002954  D000               	nop2	
  9400                           
  9401                           ;lcd.c: 18: lcdInst(0b00110011);
  9402  002956  0E33               	movlw	51
  9403  002958  EC67  F015         	call	_lcdInst
  9404                           
  9405                           ;lcd.c: 19: lcdInst(0b00110010);
  9406  00295C  0E32               	movlw	50
  9407  00295E  EC67  F015         	call	_lcdInst
  9408                           
  9409                           ;lcd.c: 20: lcdInst(0b00101000);
  9410  002962  0E28               	movlw	40
  9411  002964  EC67  F015         	call	_lcdInst
  9412                           
  9413                           ;lcd.c: 21: lcdInst(0b00001111);
  9414  002968  0E0F               	movlw	15
  9415  00296A  EC67  F015         	call	_lcdInst
  9416                           
  9417                           ;lcd.c: 22: lcdInst(0b00000110);
  9418  00296E  0E06               	movlw	6
  9419  002970  EC67  F015         	call	_lcdInst
  9420                           
  9421                           ;lcd.c: 23: lcdInst(0b00000001);
  9422  002974  0E01               	movlw	1
  9423  002976  EC67  F015         	call	_lcdInst
  9424                           
  9425                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  9426  00297A  0E31               	movlw	49
  9427  00297C  6E26               	movwf	??_initLCD& (0+255),c
  9428  00297E  0EB2               	movlw	178
  9429  002980                     u5977:
  9430  002980  2EE8               	decfsz	wreg,f,c
  9431  002982  D7FE               	bra	u5977
  9432  002984  2E26               	decfsz	??_initLCD& (0+255),f,c
  9433  002986  D7FC               	bra	u5977
  9434  002988  D000               	nop2	
  9435  00298A  0012               	return		;funcret
  9436  00298C                     __end_of_initLCD:
  9437                           	opt stack 0
  9438                           tblptru	equ	0xFF8
  9439                           tblptrh	equ	0xFF7
  9440                           tblptrl	equ	0xFF6
  9441                           tablat	equ	0xFF5
  9442                           prodh	equ	0xFF4
  9443                           prodl	equ	0xFF3
  9444                           intcon	equ	0xFF2
  9445                           postinc0	equ	0xFEE
  9446                           wreg	equ	0xFE8
  9447                           postdec1	equ	0xFE5
  9448                           fsr1l	equ	0xFE1
  9449                           indf2	equ	0xFDF
  9450                           postinc2	equ	0xFDE
  9451                           postdec2	equ	0xFDD
  9452                           fsr2h	equ	0xFDA
  9453                           fsr2l	equ	0xFD9
  9454                           status	equ	0xFD8
  9455                           
  9456 ;; *************** function _lcdInst *****************
  9457 ;; Defined at:
  9458 ;;		line 27 in file "lcd.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;  data            1    wreg     unsigned char 
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;  data            1   36[COMRAM] unsigned char 
  9463 ;; Return value:  Size  Location     Type
  9464 ;;                  1    wreg      void 
  9465 ;; Registers used:
  9466 ;;		wreg, status,2, status,0, cstack
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9474 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9475 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;Total ram usage:        2 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    4
  9479 ;; This function calls:
  9480 ;;		_lcdNibble
  9481 ;; This function is called by:
  9482 ;;		_initLCD
  9483 ;;		_lcdClear
  9484 ;;		_lcdNewline
  9485 ;;		_lcdHome
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text38
  9490  002ACE                     __ptext38:
  9491                           	opt stack 0
  9492  002ACE                     _lcdInst:
  9493                           	opt stack 22
  9494                           
  9495                           ;incstack = 0
  9496                           ;lcdInst@data stored from wreg
  9497  002ACE  6E25               	movwf	lcdInst@data,c
  9498                           
  9499                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  9500  002AD0  948C               	bcf	3980,2,c	;volatile
  9501                           
  9502                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  9503  002AD2  0E74               	movlw	116
  9504  002AD4                     u5987:
  9505  002AD4  2EE8               	decfsz	wreg,f,c
  9506  002AD6  D7FE               	bra	u5987
  9507  002AD8  D000               	nop2	
  9508                           
  9509                           ;lcd.c: 30: lcdNibble(data);
  9510  002ADA  5025               	movf	lcdInst@data,w,c
  9511  002ADC  ECAD  F013         	call	_lcdNibble
  9512                           
  9513                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  9514  002AE0  0E04               	movlw	4
  9515  002AE2  6E24               	movwf	??_lcdInst& (0+255),c
  9516  002AE4  0E3E               	movlw	62
  9517  002AE6                     u5997:
  9518  002AE6  2EE8               	decfsz	wreg,f,c
  9519  002AE8  D7FE               	bra	u5997
  9520  002AEA  2E24               	decfsz	??_lcdInst& (0+255),f,c
  9521  002AEC  D7FC               	bra	u5997
  9522  002AEE  0012               	return		;funcret
  9523  002AF0                     __end_of_lcdInst:
  9524                           	opt stack 0
  9525                           tblptru	equ	0xFF8
  9526                           tblptrh	equ	0xFF7
  9527                           tblptrl	equ	0xFF6
  9528                           tablat	equ	0xFF5
  9529                           prodh	equ	0xFF4
  9530                           prodl	equ	0xFF3
  9531                           intcon	equ	0xFF2
  9532                           postinc0	equ	0xFEE
  9533                           wreg	equ	0xFE8
  9534                           postdec1	equ	0xFE5
  9535                           fsr1l	equ	0xFE1
  9536                           indf2	equ	0xFDF
  9537                           postinc2	equ	0xFDE
  9538                           postdec2	equ	0xFDD
  9539                           fsr2h	equ	0xFDA
  9540                           fsr2l	equ	0xFD9
  9541                           status	equ	0xFD8
  9542                           
  9543 ;; *************** function _lcdNibble *****************
  9544 ;; Defined at:
  9545 ;;		line 46 in file "lcd.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;  data            1    wreg     unsigned char 
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;  data            1   34[COMRAM] unsigned char 
  9550 ;;  temp            1   33[COMRAM] unsigned char 
  9551 ;; Return value:  Size  Location     Type
  9552 ;;                  1    wreg      void 
  9553 ;; Registers used:
  9554 ;;		wreg, status,2, status,0
  9555 ;; Tracked objects:
  9556 ;;		On entry : 0/0
  9557 ;;		On exit  : 0/0
  9558 ;;		Unchanged: 0/0
  9559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;Total ram usage:        2 bytes
  9565 ;; Hardware stack levels used:    1
  9566 ;; Hardware stack levels required when called:    3
  9567 ;; This function calls:
  9568 ;;		Nothing
  9569 ;; This function is called by:
  9570 ;;		_lcdInst
  9571 ;;		_putch
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text39
  9576  00275A                     __ptext39:
  9577                           	opt stack 0
  9578  00275A                     _lcdNibble:
  9579                           	opt stack 24
  9580                           
  9581                           ;incstack = 0
  9582                           ;lcdNibble@data stored from wreg
  9583  00275A  6E23               	movwf	lcdNibble@data,c
  9584                           
  9585                           ;lcd.c: 48: char temp = data & 0xF0;
  9586  00275C  5023               	movf	lcdNibble@data,w,c
  9587  00275E  0BF0               	andlw	240
  9588  002760  6E22               	movwf	lcdNibble@temp,c
  9589                           
  9590                           ;lcd.c: 49: LATD = LATD & 0x0F;
  9591  002762  508C               	movf	3980,w,c	;volatile
  9592  002764  0B0F               	andlw	15
  9593  002766  6E8C               	movwf	3980,c	;volatile
  9594                           
  9595                           ;lcd.c: 50: LATD = temp | LATD;
  9596  002768  5022               	movf	lcdNibble@temp,w,c
  9597  00276A  108C               	iorwf	3980,w,c	;volatile
  9598  00276C  6E8C               	movwf	3980,c	;volatile
  9599                           
  9600                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  9601  00276E  968C               	bcf	3980,3,c	;volatile
  9602                           
  9603                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  9604  002770  0ED6               	movlw	214
  9605  002772                     u6007:
  9606  002772  D000               	nop2	
  9607  002774  D000               	nop2	
  9608  002776  2EE8               	decfsz	wreg,f,c
  9609  002778  D7FC               	bra	u6007
  9610  00277A  D000               	nop2	
  9611                           
  9612                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  9613  00277C  868C               	bsf	3980,3,c	;volatile
  9614                           
  9615                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  9616  00277E  0ED6               	movlw	214
  9617  002780                     u6017:
  9618  002780  D000               	nop2	
  9619  002782  D000               	nop2	
  9620  002784  2EE8               	decfsz	wreg,f,c
  9621  002786  D7FC               	bra	u6017
  9622  002788  D000               	nop2	
  9623                           
  9624                           ;lcd.c: 58: data = data << 4;
  9625  00278A  3823               	swapf	lcdNibble@data,w,c
  9626  00278C  0BF0               	andlw	240
  9627  00278E  6E23               	movwf	lcdNibble@data,c
  9628                           
  9629                           ;lcd.c: 60: temp = data & 0xF0;
  9630  002790  5023               	movf	lcdNibble@data,w,c
  9631  002792  0BF0               	andlw	240
  9632  002794  6E22               	movwf	lcdNibble@temp,c
  9633                           
  9634                           ;lcd.c: 61: LATD = LATD & 0x0F;
  9635  002796  508C               	movf	3980,w,c	;volatile
  9636  002798  0B0F               	andlw	15
  9637  00279A  6E8C               	movwf	3980,c	;volatile
  9638                           
  9639                           ;lcd.c: 62: LATD = temp | LATD;
  9640  00279C  5022               	movf	lcdNibble@temp,w,c
  9641  00279E  108C               	iorwf	3980,w,c	;volatile
  9642  0027A0  6E8C               	movwf	3980,c	;volatile
  9643                           
  9644                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  9645  0027A2  968C               	bcf	3980,3,c	;volatile
  9646                           
  9647                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  9648  0027A4  0ED6               	movlw	214
  9649  0027A6                     u6027:
  9650  0027A6  D000               	nop2	
  9651  0027A8  D000               	nop2	
  9652  0027AA  2EE8               	decfsz	wreg,f,c
  9653  0027AC  D7FC               	bra	u6027
  9654  0027AE  D000               	nop2	
  9655                           
  9656                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  9657  0027B0  868C               	bsf	3980,3,c	;volatile
  9658                           
  9659                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  9660  0027B2  0ED6               	movlw	214
  9661  0027B4                     u6037:
  9662  0027B4  D000               	nop2	
  9663  0027B6  D000               	nop2	
  9664  0027B8  2EE8               	decfsz	wreg,f,c
  9665  0027BA  D7FC               	bra	u6037
  9666  0027BC  D000               	nop2	
  9667  0027BE  0012               	return		;funcret
  9668  0027C0                     __end_of_lcdNibble:
  9669                           	opt stack 0
  9670                           tblptru	equ	0xFF8
  9671                           tblptrh	equ	0xFF7
  9672                           tblptrl	equ	0xFF6
  9673                           tablat	equ	0xFF5
  9674                           prodh	equ	0xFF4
  9675                           prodl	equ	0xFF3
  9676                           intcon	equ	0xFF2
  9677                           postinc0	equ	0xFEE
  9678                           wreg	equ	0xFE8
  9679                           postdec1	equ	0xFE5
  9680                           fsr1l	equ	0xFE1
  9681                           indf2	equ	0xFDF
  9682                           postinc2	equ	0xFDE
  9683                           postdec2	equ	0xFDD
  9684                           fsr2h	equ	0xFDA
  9685                           fsr2l	equ	0xFD9
  9686                           status	equ	0xFD8
  9687                           
  9688 ;; *************** function _service *****************
  9689 ;; Defined at:
  9690 ;;		line 229 in file "main.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;		None
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;		None
  9695 ;; Return value:  Size  Location     Type
  9696 ;;                  1    wreg      void 
  9697 ;; Registers used:
  9698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;Total ram usage:       14 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    2
  9711 ;; This function calls:
  9712 ;;		_keyPressedInterruptService
  9713 ;;		_servoInterruptService
  9714 ;; This function is called by:
  9715 ;;		Interrupt level 2
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           	psect	intcode
  9720  000008                     __pintcode:
  9721                           	opt stack 0
  9722  000008                     _service:
  9723                           	opt stack 21
  9724                           
  9725                           ;incstack = 0
  9726  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9727  00000A  EDE1  F010         	call	int_func,f	;refresh shadow registers
  9728                           tblptru	equ	0xFF8
  9729                           tblptrh	equ	0xFF7
  9730                           tblptrl	equ	0xFF6
  9731                           tablat	equ	0xFF5
  9732                           prodh	equ	0xFF4
  9733                           prodl	equ	0xFF3
  9734                           intcon	equ	0xFF2
  9735                           postinc0	equ	0xFEE
  9736                           wreg	equ	0xFE8
  9737                           postdec1	equ	0xFE5
  9738                           fsr1l	equ	0xFE1
  9739                           indf2	equ	0xFDF
  9740                           postinc2	equ	0xFDE
  9741                           postdec2	equ	0xFDD
  9742                           fsr2h	equ	0xFDA
  9743                           fsr2l	equ	0xFD9
  9744                           status	equ	0xFD8
  9745                           
  9746                           	psect	intcode_body
  9747  0021C2                     __pintcode_body:
  9748                           	opt stack 21
  9749  0021C2                     int_func:
  9750                           	opt stack 21
  9751  0021C2  0006               	pop		; remove dummy address from shadow register refresh
  9752  0021C4  CFFA F014          	movff	pclath,??_service
  9753  0021C8  CFFB F015          	movff	pclatu,??_service+1
  9754  0021CC  CFE9 F016          	movff	fsr0l,??_service+2
  9755  0021D0  CFEA F017          	movff	fsr0h,??_service+3
  9756  0021D4  CFE1 F018          	movff	fsr1l,??_service+4
  9757  0021D8  CFE2 F019          	movff	fsr1h,??_service+5
  9758  0021DC  CFD9 F01A          	movff	fsr2l,??_service+6
  9759  0021E0  CFDA F01B          	movff	fsr2h,??_service+7
  9760  0021E4  CFF3 F01C          	movff	prodl,??_service+8
  9761  0021E8  CFF4 F01D          	movff	prodh,??_service+9
  9762  0021EC  CFF6 F01E          	movff	tblptrl,??_service+10
  9763  0021F0  CFF7 F01F          	movff	tblptrh,??_service+11
  9764  0021F4  CFF8 F020          	movff	tblptru,??_service+12
  9765  0021F8  CFF5 F021          	movff	tablat,??_service+13
  9766                           
  9767                           ;main.c: 231: servoInterruptService();
  9768  0021FC  ECE0  F00D         	call	_servoInterruptService	;wreg free
  9769                           
  9770                           ;main.c: 234: if(INT0IF){ INT0IF = 0;
  9771  002200  A2F2               	btfss	intcon,1,c	;volatile
  9772  002202  D006               	goto	i2l4409
  9773  002204  92F2               	bcf	intcon,1,c	;volatile
  9774                           
  9775                           ;main.c: 235: batteryDetected = 1;
  9776  002206  0E00               	movlw	0
  9777  002208  0100               	movlb	0	; () banked
  9778  00220A  6FFD               	movwf	(_batteryDetected+1)& (0+255),b
  9779  00220C  0E01               	movlw	1
  9780  00220E  6FFC               	movwf	_batteryDetected& (0+255),b
  9781  002210                     i2l4409:
  9782                           
  9783                           ;main.c: 236: }
  9784                           ;main.c: 239: if(INT1IF && INT1IE){INT1IF = 0;
  9785  002210  B0F0               	btfsc	intcon3,0,c	;volatile
  9786  002212  A6F0               	btfss	intcon3,3,c	;volatile
  9787  002214  D003               	goto	i2l139
  9788  002216  90F0               	bcf	intcon3,0,c	;volatile
  9789                           
  9790                           ;main.c: 240: keyPressedInterruptService();
  9791  002218  EC78  F015         	call	_keyPressedInterruptService	;wreg free
  9792  00221C                     i2l139:
  9793  00221C  C021  FFF5         	movff	??_service+13,tablat
  9794  002220  C020  FFF8         	movff	??_service+12,tblptru
  9795  002224  C01F  FFF7         	movff	??_service+11,tblptrh
  9796  002228  C01E  FFF6         	movff	??_service+10,tblptrl
  9797  00222C  C01D  FFF4         	movff	??_service+9,prodh
  9798  002230  C01C  FFF3         	movff	??_service+8,prodl
  9799  002234  C01B  FFDA         	movff	??_service+7,fsr2h
  9800  002238  C01A  FFD9         	movff	??_service+6,fsr2l
  9801  00223C  C019  FFE2         	movff	??_service+5,fsr1h
  9802  002240  C018  FFE1         	movff	??_service+4,fsr1l
  9803  002244  C017  FFEA         	movff	??_service+3,fsr0h
  9804  002248  C016  FFE9         	movff	??_service+2,fsr0l
  9805  00224C  C015  FFFB         	movff	??_service+1,pclatu
  9806  002250  C014  FFFA         	movff	??_service,pclath
  9807  002254  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9808  002256  0011               	retfie		f
  9809  002258                     __end_of_service:
  9810                           	opt stack 0
  9811                           pclatu	equ	0xFFB
  9812                           pclath	equ	0xFFA
  9813                           tblptru	equ	0xFF8
  9814                           tblptrh	equ	0xFF7
  9815                           tblptrl	equ	0xFF6
  9816                           tablat	equ	0xFF5
  9817                           prodh	equ	0xFF4
  9818                           prodl	equ	0xFF3
  9819                           intcon	equ	0xFF2
  9820                           intcon3	equ	0xFF0
  9821                           postinc0	equ	0xFEE
  9822                           fsr0h	equ	0xFEA
  9823                           fsr0l	equ	0xFE9
  9824                           wreg	equ	0xFE8
  9825                           postdec1	equ	0xFE5
  9826                           fsr1h	equ	0xFE2
  9827                           fsr1l	equ	0xFE1
  9828                           indf2	equ	0xFDF
  9829                           postinc2	equ	0xFDE
  9830                           postdec2	equ	0xFDD
  9831                           fsr2h	equ	0xFDA
  9832                           fsr2l	equ	0xFD9
  9833                           status	equ	0xFD8
  9834                           
  9835 ;; *************** function _servoInterruptService *****************
  9836 ;; Defined at:
  9837 ;;		line 52 in file "servo.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;		None
  9840 ;; Auto vars:     Size  Location     Type
  9841 ;;		None
  9842 ;; Return value:  Size  Location     Type
  9843 ;;                  1    wreg      void 
  9844 ;; Registers used:
  9845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9846 ;; Tracked objects:
  9847 ;;		On entry : 0/0
  9848 ;;		On exit  : 0/0
  9849 ;;		Unchanged: 0/0
  9850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9853 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;Total ram usage:        4 bytes
  9856 ;; Hardware stack levels used:    1
  9857 ;; Hardware stack levels required when called:    1
  9858 ;; This function calls:
  9859 ;;		i2___awmod
  9860 ;;		i2_digitalWrite
  9861 ;;		i2_startTimer
  9862 ;; This function is called by:
  9863 ;;		_service
  9864 ;; This function uses a non-reentrant model
  9865 ;;
  9866                           
  9867                           	psect	text41
  9868  001BC0                     __ptext41:
  9869                           	opt stack 0
  9870  001BC0                     _servoInterruptService:
  9871                           	opt stack 21
  9872                           
  9873                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
  9874                           
  9875                           ;incstack = 0
  9876  001BC0  A4F2               	btfss	intcon,2,c	;volatile
  9877  001BC2  0012               	return	
  9878  001BC4  94F2               	bcf	intcon,2,c	;volatile
  9879                           
  9880                           ;servo.c: 55: digitalWrite(servos[curr],0);
  9881  001BC6  90D8               	bcf	status,0,c
  9882  001BC8  3459               	rlcf	_curr,w,c
  9883  001BCA  6ED9               	movwf	fsr2l,c
  9884  001BCC  345A               	rlcf	_curr+1,w,c
  9885  001BCE  6EDA               	movwf	fsr2h,c
  9886  001BD0  0E4F               	movlw	low _servos
  9887  001BD2  26D9               	addwf	fsr2l,f,c
  9888  001BD4  0E00               	movlw	high _servos
  9889  001BD6  22DA               	addwfc	fsr2h,f,c
  9890  001BD8  CFDE F007          	movff	postinc2,i2digitalWrite@pin
  9891  001BDC  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
  9892  001BE0  0E00               	movlw	0
  9893  001BE2  6E0A               	movwf	i2digitalWrite@val+1,c
  9894  001BE4  0E00               	movlw	0
  9895  001BE6  6E09               	movwf	i2digitalWrite@val,c
  9896  001BE8  EC26  F010         	call	i2_digitalWrite	;wreg free
  9897                           
  9898                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
  9899  001BEC  0E01               	movlw	1
  9900  001BEE  2459               	addwf	_curr,w,c
  9901  001BF0  6E01               	movwf	i2___awmod@dividend,c
  9902  001BF2  0E00               	movlw	0
  9903  001BF4  205A               	addwfc	_curr+1,w,c
  9904  001BF6  6E02               	movwf	i2___awmod@dividend+1,c
  9905  001BF8  0E01               	movlw	1
  9906  001BFA  0100               	movlb	0	; () banked
  9907  001BFC  25FE               	addwf	_n& (0+255),w,b
  9908  001BFE  6E03               	movwf	i2___awmod@divisor,c
  9909  001C00  0E00               	movlw	0
  9910  001C02  0100               	movlb	0	; () banked
  9911  001C04  21FF               	addwfc	(_n+1)& (0+255),w,b
  9912  001C06  6E04               	movwf	i2___awmod@divisor+1,c
  9913  001C08  EC42  F013         	call	i2___awmod	;wreg free
  9914  001C0C  90D8               	bcf	status,0,c
  9915  001C0E  3601               	rlcf	?i2___awmod,f,c
  9916  001C10  3602               	rlcf	?i2___awmod+1,f,c
  9917  001C12  0E4F               	movlw	low _servos
  9918  001C14  2401               	addwf	?i2___awmod,w,c
  9919  001C16  6ED9               	movwf	fsr2l,c
  9920  001C18  0E00               	movlw	high _servos
  9921  001C1A  2002               	addwfc	?i2___awmod+1,w,c
  9922  001C1C  6EDA               	movwf	fsr2h,c
  9923  001C1E  CFDE F007          	movff	postinc2,i2digitalWrite@pin
  9924  001C22  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
  9925  001C26  0E00               	movlw	0
  9926  001C28  6E0A               	movwf	i2digitalWrite@val+1,c
  9927  001C2A  0E01               	movlw	1
  9928  001C2C  6E09               	movwf	i2digitalWrite@val,c
  9929  001C2E  EC26  F010         	call	i2_digitalWrite	;wreg free
  9930                           
  9931                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
  9932  001C32  0E00               	movlw	0
  9933  001C34  6E08               	movwf	i2startTimer@timer+1,c
  9934  001C36  0E00               	movlw	0
  9935  001C38  6E07               	movwf	i2startTimer@timer,c
  9936  001C3A  0EFF               	movlw	255
  9937  001C3C  6E10               	movwf	??_servoInterruptService& (0+255),c
  9938  001C3E  0EFF               	movlw	255
  9939  001C40  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
  9940  001C42  0E01               	movlw	1
  9941  001C44  2459               	addwf	_curr,w,c
  9942  001C46  6E01               	movwf	i2___awmod@dividend,c
  9943  001C48  0E00               	movlw	0
  9944  001C4A  205A               	addwfc	_curr+1,w,c
  9945  001C4C  6E02               	movwf	i2___awmod@dividend+1,c
  9946  001C4E  0E01               	movlw	1
  9947  001C50  0100               	movlb	0	; () banked
  9948  001C52  25FE               	addwf	_n& (0+255),w,b
  9949  001C54  6E03               	movwf	i2___awmod@divisor,c
  9950  001C56  0E00               	movlw	0
  9951  001C58  0100               	movlb	0	; () banked
  9952  001C5A  21FF               	addwfc	(_n+1)& (0+255),w,b
  9953  001C5C  6E04               	movwf	i2___awmod@divisor+1,c
  9954  001C5E  EC42  F013         	call	i2___awmod	;wreg free
  9955  001C62  90D8               	bcf	status,0,c
  9956  001C64  3601               	rlcf	?i2___awmod,f,c
  9957  001C66  3602               	rlcf	?i2___awmod+1,f,c
  9958  001C68  0E2A               	movlw	low _pulse
  9959  001C6A  2401               	addwf	?i2___awmod,w,c
  9960  001C6C  6ED9               	movwf	fsr2l,c
  9961  001C6E  0E01               	movlw	high _pulse
  9962  001C70  2002               	addwfc	?i2___awmod+1,w,c
  9963  001C72  6EDA               	movwf	fsr2h,c
  9964  001C74  CFDE F012          	movff	postinc2,??_servoInterruptService+2
  9965  001C78  CFDD F013          	movff	postdec2,??_servoInterruptService+3
  9966  001C7C  1E12               	comf	??_servoInterruptService+2,f,c
  9967  001C7E  1E13               	comf	??_servoInterruptService+3,f,c
  9968  001C80  4A12               	infsnz	??_servoInterruptService+2,f,c
  9969  001C82  2A13               	incf	??_servoInterruptService+3,f,c
  9970  001C84  5010               	movf	??_servoInterruptService,w,c
  9971  001C86  2612               	addwf	??_servoInterruptService+2,f,c
  9972  001C88  5011               	movf	??_servoInterruptService+1,w,c
  9973  001C8A  2213               	addwfc	??_servoInterruptService+3,f,c
  9974  001C8C  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
  9975  001C90  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
  9976  001C94  6A0B               	clrf	i2startTimer@val+2,c
  9977  001C96  6A0C               	clrf	i2startTimer@val+3,c
  9978  001C98  EC5A  F014         	call	i2_startTimer	;wreg free
  9979                           
  9980                           ;servo.c: 59: curr = (curr+1)%(n+1);
  9981  001C9C  0E01               	movlw	1
  9982  001C9E  2459               	addwf	_curr,w,c
  9983  001CA0  6E01               	movwf	i2___awmod@dividend,c
  9984  001CA2  0E00               	movlw	0
  9985  001CA4  205A               	addwfc	_curr+1,w,c
  9986  001CA6  6E02               	movwf	i2___awmod@dividend+1,c
  9987  001CA8  0E01               	movlw	1
  9988  001CAA  0100               	movlb	0	; () banked
  9989  001CAC  25FE               	addwf	_n& (0+255),w,b
  9990  001CAE  6E03               	movwf	i2___awmod@divisor,c
  9991  001CB0  0E00               	movlw	0
  9992  001CB2  0100               	movlb	0	; () banked
  9993  001CB4  21FF               	addwfc	(_n+1)& (0+255),w,b
  9994  001CB6  6E04               	movwf	i2___awmod@divisor+1,c
  9995  001CB8  EC42  F013         	call	i2___awmod	;wreg free
  9996  001CBC  C001  F059         	movff	?i2___awmod,_curr
  9997  001CC0  C002  F05A         	movff	?i2___awmod+1,_curr+1
  9998  001CC4  0012               	return	
  9999  001CC6                     __end_of_servoInterruptService:
 10000                           	opt stack 0
 10001                           pclatu	equ	0xFFB
 10002                           pclath	equ	0xFFA
 10003                           tblptru	equ	0xFF8
 10004                           tblptrh	equ	0xFF7
 10005                           tblptrl	equ	0xFF6
 10006                           tablat	equ	0xFF5
 10007                           prodh	equ	0xFF4
 10008                           prodl	equ	0xFF3
 10009                           intcon	equ	0xFF2
 10010                           intcon3	equ	0xFF0
 10011                           postinc0	equ	0xFEE
 10012                           fsr0h	equ	0xFEA
 10013                           fsr0l	equ	0xFE9
 10014                           wreg	equ	0xFE8
 10015                           postdec1	equ	0xFE5
 10016                           fsr1h	equ	0xFE2
 10017                           fsr1l	equ	0xFE1
 10018                           indf2	equ	0xFDF
 10019                           postinc2	equ	0xFDE
 10020                           postdec2	equ	0xFDD
 10021                           fsr2h	equ	0xFDA
 10022                           fsr2l	equ	0xFD9
 10023                           status	equ	0xFD8
 10024                           
 10025 ;; *************** function i2_startTimer *****************
 10026 ;; Defined at:
 10027 ;;		line 75 in file "timer.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;  timer           2    6[COMRAM] int 
 10030 ;;  val             4    8[COMRAM] long 
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;		None
 10033 ;; Return value:  Size  Location     Type
 10034 ;;                  1    wreg      void 
 10035 ;; Registers used:
 10036 ;;		wreg, status,2, status,0
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10042 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10044 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10045 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10046 ;;Total ram usage:        8 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; This function calls:
 10049 ;;		Nothing
 10050 ;; This function is called by:
 10051 ;;		_servoInterruptService
 10052 ;; This function uses a non-reentrant model
 10053 ;;
 10054                           
 10055                           	psect	text42
 10056  0028B4                     __ptext42:
 10057                           	opt stack 0
 10058  0028B4                     i2_startTimer:
 10059                           	opt stack 21
 10060                           
 10061                           ;timer.c: 76: switch(timer){
 10062                           
 10063                           ;incstack = 0
 10064  0028B4  D012               	goto	i2l4215
 10065  0028B6                     i2l378:
 10066                           
 10067                           ;timer.c: 78: TMR0H = val>>8;
 10068  0028B6  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 10069                           
 10070                           ;timer.c: 79: TMR0L = val;
 10071  0028BA  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 10072                           
 10073                           ;timer.c: 80: T0CON |= 1<<7;
 10074  0028BE  8ED5               	bsf	4053,7,c	;volatile
 10075                           
 10076                           ;timer.c: 81: break;
 10077  0028C0  0012               	return	
 10078  0028C2                     i2l380:
 10079                           
 10080                           ;timer.c: 83: TMR1H = val>>8;
 10081  0028C2  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 10082                           
 10083                           ;timer.c: 84: TMR1L = val;
 10084  0028C6  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 10085                           
 10086                           ;timer.c: 85: T1CON |= 1<<0;
 10087  0028CA  80CD               	bsf	4045,0,c	;volatile
 10088                           
 10089                           ;timer.c: 86: break;
 10090  0028CC  0012               	return	
 10091  0028CE                     i2l381:
 10092                           
 10093                           ;timer.c: 88: TMR3H = val>>8;
 10094  0028CE  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 10095                           
 10096                           ;timer.c: 89: TMR3L = val;
 10097  0028D2  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 10098                           
 10099                           ;timer.c: 90: T3CON |= 1<<0;
 10100  0028D6  80B1               	bsf	4017,0,c	;volatile
 10101                           
 10102                           ;timer.c: 91: }
 10103  0028D8  0012               	return	
 10104  0028DA                     i2l4215:
 10105  0028DA  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 10106  0028DE  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 10107                           
 10108                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10109                           ; Switch size 1, requested type "space"
 10110                           ; Number of cases is 1, Range of values is 0 to 0
 10111                           ; switch strategies available:
 10112                           ; Name         Instructions Cycles
 10113                           ; simple_byte            4     3 (average)
 10114                           ;	Chosen strategy is simple_byte
 10115  0028E2  500E               	movf	??i2_startTimer+1,w,c
 10116  0028E4  0A00               	xorlw	0	; case 0
 10117  0028E6  A4D8               	btfss	status,2,c
 10118  0028E8  0012               	return	
 10119                           
 10120                           ; Switch size 1, requested type "space"
 10121                           ; Number of cases is 3, Range of values is 0 to 3
 10122                           ; switch strategies available:
 10123                           ; Name         Instructions Cycles
 10124                           ; simple_byte           10     6 (average)
 10125                           ;	Chosen strategy is simple_byte
 10126  0028EA  500D               	movf	??i2_startTimer,w,c
 10127  0028EC  0A00               	xorlw	0	; case 0
 10128  0028EE  B4D8               	btfsc	status,2,c
 10129  0028F0  D7E2               	goto	i2l378
 10130  0028F2  0A01               	xorlw	1	; case 1
 10131  0028F4  B4D8               	btfsc	status,2,c
 10132  0028F6  D7E5               	goto	i2l380
 10133  0028F8  0A02               	xorlw	2	; case 3
 10134  0028FA  A4D8               	btfss	status,2,c
 10135  0028FC  0012               	return	
 10136  0028FE  D7E7               	goto	i2l381
 10137  002900                     __end_ofi2_startTimer:
 10138                           	opt stack 0
 10139                           pclatu	equ	0xFFB
 10140                           pclath	equ	0xFFA
 10141                           tblptru	equ	0xFF8
 10142                           tblptrh	equ	0xFF7
 10143                           tblptrl	equ	0xFF6
 10144                           tablat	equ	0xFF5
 10145                           prodh	equ	0xFF4
 10146                           prodl	equ	0xFF3
 10147                           intcon	equ	0xFF2
 10148                           intcon3	equ	0xFF0
 10149                           postinc0	equ	0xFEE
 10150                           fsr0h	equ	0xFEA
 10151                           fsr0l	equ	0xFE9
 10152                           wreg	equ	0xFE8
 10153                           postdec1	equ	0xFE5
 10154                           fsr1h	equ	0xFE2
 10155                           fsr1l	equ	0xFE1
 10156                           indf2	equ	0xFDF
 10157                           postinc2	equ	0xFDE
 10158                           postdec2	equ	0xFDD
 10159                           fsr2h	equ	0xFDA
 10160                           fsr2l	equ	0xFD9
 10161                           status	equ	0xFD8
 10162                           
 10163 ;; *************** function i2_digitalWrite *****************
 10164 ;; Defined at:
 10165 ;;		line 53 in file "iopin.c"
 10166 ;; Parameters:    Size  Location     Type
 10167 ;;  pin             2    6[COMRAM] PTR int 
 10168 ;;		 -> AA_float(4), redirectingServo(6), padServo(6), conveyorServo(6), 
 10169 ;;		 -> cylinderMotor(4), 
 10170 ;;  val             2    8[COMRAM] int 
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;  digitalWrite    2   13[COMRAM] int 
 10173 ;; Return value:  Size  Location     Type
 10174 ;;                  1    wreg      void 
 10175 ;; Registers used:
 10176 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10182 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10183 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10184 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10185 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;Total ram usage:        9 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; This function calls:
 10189 ;;		Nothing
 10190 ;; This function is called by:
 10191 ;;		_servoInterruptService
 10192 ;; This function uses a non-reentrant model
 10193 ;;
 10194                           
 10195                           	psect	text43
 10196  00204C                     __ptext43:
 10197                           	opt stack 0
 10198  00204C                     i2_digitalWrite:
 10199                           	opt stack 21
 10200                           
 10201                           ;iopin.c: 54: if(pin){
 10202                           
 10203                           ;incstack = 0
 10204  00204C  5007               	movf	i2digitalWrite@pin,w,c
 10205  00204E  1008               	iorwf	i2digitalWrite@pin+1,w,c
 10206  002050  B4D8               	btfsc	status,2,c
 10207  002052  0012               	return	
 10208                           
 10209                           ;iopin.c: 55: int p = 1 << pin[1];
 10210  002054  EE20 F002          	lfsr	2,2
 10211  002058  5007               	movf	i2digitalWrite@pin,w,c
 10212  00205A  26D9               	addwf	fsr2l,f,c
 10213  00205C  5008               	movf	i2digitalWrite@pin+1,w,c
 10214  00205E  22DA               	addwfc	fsr2h,f,c
 10215  002060  50DF               	movf	indf2,w,c
 10216  002062  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 10217  002064  0E01               	movlw	1
 10218  002066  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 10219  002068  0E00               	movlw	0
 10220  00206A  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 10221  00206C  2A0B               	incf	??i2_digitalWrite,f,c
 10222  00206E  D003               	goto	i2u368_44
 10223  002070                     i2u368_45:
 10224  002070  90D8               	bcf	status,0,c
 10225  002072  360C               	rlcf	??i2_digitalWrite+1,f,c
 10226  002074  360D               	rlcf	??i2_digitalWrite+2,f,c
 10227  002076                     i2u368_44:
 10228  002076  2E0B               	decfsz	??i2_digitalWrite,f,c
 10229  002078  D7FB               	goto	i2u368_45
 10230  00207A  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 10231  00207E  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 10232                           
 10233                           ;iopin.c: 56: if(val == 0){
 10234  002082  5009               	movf	i2digitalWrite@val,w,c
 10235  002084  100A               	iorwf	i2digitalWrite@val+1,w,c
 10236  002086  A4D8               	btfss	status,2,c
 10237  002088  D02B               	goto	i2l4201
 10238                           
 10239                           ;iopin.c: 57: p ^= 0xff;
 10240  00208A  0EFF               	movlw	255
 10241  00208C  1A0E               	xorwf	i2digitalWrite@p,f,c
 10242                           
 10243                           ;iopin.c: 58: }
 10244                           ;iopin.c: 60: switch(pin[0]){
 10245  00208E  D028               	goto	i2l4201
 10246  002090                     i2l4177:
 10247  002090  0409               	decf	i2digitalWrite@val,w,c
 10248  002092  100A               	iorwf	i2digitalWrite@val+1,w,c
 10249  002094  A4D8               	btfss	status,2,c
 10250  002096  D003               	goto	i2l4181
 10251  002098  500E               	movf	i2digitalWrite@p,w,c
 10252  00209A  1289               	iorwf	3977,f,c	;volatile
 10253  00209C  0012               	return	
 10254  00209E                     i2l4181:
 10255                           
 10256                           ;iopin.c: 62: else LATA &= p;
 10257  00209E  500E               	movf	i2digitalWrite@p,w,c
 10258  0020A0  1689               	andwf	3977,f,c	;volatile
 10259                           
 10260                           ;iopin.c: 63: break;
 10261  0020A2  0012               	return	
 10262  0020A4                     i2l4183:
 10263  0020A4  0409               	decf	i2digitalWrite@val,w,c
 10264  0020A6  100A               	iorwf	i2digitalWrite@val+1,w,c
 10265  0020A8  A4D8               	btfss	status,2,c
 10266  0020AA  D003               	goto	i2l4187
 10267  0020AC  500E               	movf	i2digitalWrite@p,w,c
 10268  0020AE  128A               	iorwf	3978,f,c	;volatile
 10269  0020B0  0012               	return	
 10270  0020B2                     i2l4187:
 10271                           
 10272                           ;iopin.c: 65: else LATB &= p;
 10273  0020B2  500E               	movf	i2digitalWrite@p,w,c
 10274  0020B4  168A               	andwf	3978,f,c	;volatile
 10275                           
 10276                           ;iopin.c: 66: break;
 10277  0020B6  0012               	return	
 10278  0020B8                     i2l4189:
 10279  0020B8  0409               	decf	i2digitalWrite@val,w,c
 10280  0020BA  100A               	iorwf	i2digitalWrite@val+1,w,c
 10281  0020BC  A4D8               	btfss	status,2,c
 10282  0020BE  D003               	goto	i2l4193
 10283  0020C0  500E               	movf	i2digitalWrite@p,w,c
 10284  0020C2  128B               	iorwf	3979,f,c	;volatile
 10285  0020C4  0012               	return	
 10286  0020C6                     i2l4193:
 10287                           
 10288                           ;iopin.c: 68: else LATC &= p;
 10289  0020C6  500E               	movf	i2digitalWrite@p,w,c
 10290  0020C8  168B               	andwf	3979,f,c	;volatile
 10291                           
 10292                           ;iopin.c: 69: break;
 10293  0020CA  0012               	return	
 10294  0020CC                     i2l4195:
 10295  0020CC  0409               	decf	i2digitalWrite@val,w,c
 10296  0020CE  100A               	iorwf	i2digitalWrite@val+1,w,c
 10297  0020D0  A4D8               	btfss	status,2,c
 10298  0020D2  D003               	goto	i2l4199
 10299  0020D4  500E               	movf	i2digitalWrite@p,w,c
 10300  0020D6  128C               	iorwf	3980,f,c	;volatile
 10301  0020D8  0012               	return	
 10302  0020DA                     i2l4199:
 10303                           
 10304                           ;iopin.c: 71: else LATD &= p;
 10305  0020DA  500E               	movf	i2digitalWrite@p,w,c
 10306  0020DC  168C               	andwf	3980,f,c	;volatile
 10307                           
 10308                           ;iopin.c: 72: }
 10309  0020DE  0012               	return	
 10310  0020E0                     i2l4201:
 10311  0020E0  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 10312  0020E4  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 10313  0020E8  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 10314  0020EC  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 10315                           
 10316                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10317                           ; Switch size 1, requested type "space"
 10318                           ; Number of cases is 1, Range of values is 0 to 0
 10319                           ; switch strategies available:
 10320                           ; Name         Instructions Cycles
 10321                           ; simple_byte            4     3 (average)
 10322                           ;	Chosen strategy is simple_byte
 10323  0020F0  500C               	movf	??i2_digitalWrite+1,w,c
 10324  0020F2  0A00               	xorlw	0	; case 0
 10325  0020F4  A4D8               	btfss	status,2,c
 10326  0020F6  0012               	return	
 10327                           
 10328                           ; Switch size 1, requested type "space"
 10329                           ; Number of cases is 4, Range of values is 0 to 3
 10330                           ; switch strategies available:
 10331                           ; Name         Instructions Cycles
 10332                           ; simple_byte           13     7 (average)
 10333                           ;	Chosen strategy is simple_byte
 10334  0020F8  500B               	movf	??i2_digitalWrite,w,c
 10335  0020FA  0A00               	xorlw	0	; case 0
 10336  0020FC  B4D8               	btfsc	status,2,c
 10337  0020FE  D7C8               	goto	i2l4177
 10338  002100  0A01               	xorlw	1	; case 1
 10339  002102  B4D8               	btfsc	status,2,c
 10340  002104  D7CF               	goto	i2l4183
 10341  002106  0A03               	xorlw	3	; case 2
 10342  002108  B4D8               	btfsc	status,2,c
 10343  00210A  D7D6               	goto	i2l4189
 10344  00210C  0A01               	xorlw	1	; case 3
 10345  00210E  A4D8               	btfss	status,2,c
 10346  002110  0012               	return	
 10347  002112  D7DC               	goto	i2l4195
 10348  002114                     __end_ofi2_digitalWrite:
 10349                           	opt stack 0
 10350                           pclatu	equ	0xFFB
 10351                           pclath	equ	0xFFA
 10352                           tblptru	equ	0xFF8
 10353                           tblptrh	equ	0xFF7
 10354                           tblptrl	equ	0xFF6
 10355                           tablat	equ	0xFF5
 10356                           prodh	equ	0xFF4
 10357                           prodl	equ	0xFF3
 10358                           intcon	equ	0xFF2
 10359                           intcon3	equ	0xFF0
 10360                           postinc0	equ	0xFEE
 10361                           fsr0h	equ	0xFEA
 10362                           fsr0l	equ	0xFE9
 10363                           wreg	equ	0xFE8
 10364                           postdec1	equ	0xFE5
 10365                           fsr1h	equ	0xFE2
 10366                           fsr1l	equ	0xFE1
 10367                           indf2	equ	0xFDF
 10368                           postinc2	equ	0xFDE
 10369                           postdec2	equ	0xFDD
 10370                           fsr2h	equ	0xFDA
 10371                           fsr2l	equ	0xFD9
 10372                           status	equ	0xFD8
 10373                           
 10374 ;; *************** function i2___awmod *****************
 10375 ;; Defined at:
 10376 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10377 ;; Parameters:    Size  Location     Type
 10378 ;;  dividend        2    0[COMRAM] int 
 10379 ;;  divisor         2    2[COMRAM] int 
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;  __awmod         1    5[COMRAM] unsigned char 
 10382 ;;  __awmod         1    4[COMRAM] unsigned char 
 10383 ;; Return value:  Size  Location     Type
 10384 ;;                  2    0[COMRAM] int 
 10385 ;; Registers used:
 10386 ;;		wreg, status,2, status,0
 10387 ;; Tracked objects:
 10388 ;;		On entry : 0/0
 10389 ;;		On exit  : 0/0
 10390 ;;		Unchanged: 0/0
 10391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;Total ram usage:        6 bytes
 10397 ;; Hardware stack levels used:    1
 10398 ;; This function calls:
 10399 ;;		Nothing
 10400 ;; This function is called by:
 10401 ;;		_servoInterruptService
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           	psect	text44
 10406  002684                     __ptext44:
 10407                           	opt stack 0
 10408  002684                     i2___awmod:
 10409                           	opt stack 21
 10410                           
 10411                           ;incstack = 0
 10412  002684  0E00               	movlw	0
 10413  002686  6E06               	movwf	i2___awmod@sign,c
 10414  002688  AE02               	btfss	i2___awmod@dividend+1,7,c
 10415  00268A  D006               	goto	i2l4229
 10416  00268C  6C01               	negf	i2___awmod@dividend,c
 10417  00268E  1E02               	comf	i2___awmod@dividend+1,f,c
 10418  002690  B0D8               	btfsc	status,0,c
 10419  002692  2A02               	incf	i2___awmod@dividend+1,f,c
 10420  002694  0E01               	movlw	1
 10421  002696  6E06               	movwf	i2___awmod@sign,c
 10422  002698                     i2l4229:
 10423  002698  AE04               	btfss	i2___awmod@divisor+1,7,c
 10424  00269A  D004               	goto	i2l4233
 10425  00269C  6C03               	negf	i2___awmod@divisor,c
 10426  00269E  1E04               	comf	i2___awmod@divisor+1,f,c
 10427  0026A0  B0D8               	btfsc	status,0,c
 10428  0026A2  2A04               	incf	i2___awmod@divisor+1,f,c
 10429  0026A4                     i2l4233:
 10430  0026A4  5003               	movf	i2___awmod@divisor,w,c
 10431  0026A6  1004               	iorwf	i2___awmod@divisor+1,w,c
 10432  0026A8  B4D8               	btfsc	status,2,c
 10433  0026AA  D018               	goto	i2l4249
 10434  0026AC  0E01               	movlw	1
 10435  0026AE  6E05               	movwf	i2___awmod@counter,c
 10436  0026B0  D004               	goto	i2l4239
 10437  0026B2                     i2l4237:
 10438  0026B2  90D8               	bcf	status,0,c
 10439  0026B4  3603               	rlcf	i2___awmod@divisor,f,c
 10440  0026B6  3604               	rlcf	i2___awmod@divisor+1,f,c
 10441  0026B8  2A05               	incf	i2___awmod@counter,f,c
 10442  0026BA                     i2l4239:
 10443  0026BA  AE04               	btfss	i2___awmod@divisor+1,7,c
 10444  0026BC  D7FA               	goto	i2l4237
 10445  0026BE                     i2l4241:
 10446  0026BE  5003               	movf	i2___awmod@divisor,w,c
 10447  0026C0  5C01               	subwf	i2___awmod@dividend,w,c
 10448  0026C2  5004               	movf	i2___awmod@divisor+1,w,c
 10449  0026C4  5802               	subwfb	i2___awmod@dividend+1,w,c
 10450  0026C6  A0D8               	btfss	status,0,c
 10451  0026C8  D004               	goto	i2l4245
 10452  0026CA  5003               	movf	i2___awmod@divisor,w,c
 10453  0026CC  5E01               	subwf	i2___awmod@dividend,f,c
 10454  0026CE  5004               	movf	i2___awmod@divisor+1,w,c
 10455  0026D0  5A02               	subwfb	i2___awmod@dividend+1,f,c
 10456  0026D2                     i2l4245:
 10457  0026D2  90D8               	bcf	status,0,c
 10458  0026D4  3204               	rrcf	i2___awmod@divisor+1,f,c
 10459  0026D6  3203               	rrcf	i2___awmod@divisor,f,c
 10460  0026D8  2E05               	decfsz	i2___awmod@counter,f,c
 10461  0026DA  D7F1               	goto	i2l4241
 10462  0026DC                     i2l4249:
 10463  0026DC  5006               	movf	i2___awmod@sign,w,c
 10464  0026DE  B4D8               	btfsc	status,2,c
 10465  0026E0  D004               	goto	i2l4253
 10466  0026E2  6C01               	negf	i2___awmod@dividend,c
 10467  0026E4  1E02               	comf	i2___awmod@dividend+1,f,c
 10468  0026E6  B0D8               	btfsc	status,0,c
 10469  0026E8  2A02               	incf	i2___awmod@dividend+1,f,c
 10470  0026EA                     i2l4253:
 10471  0026EA  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 10472  0026EE  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 10473  0026F2  0012               	return	
 10474  0026F4                     __end_ofi2___awmod:
 10475                           	opt stack 0
 10476                           pclatu	equ	0xFFB
 10477                           pclath	equ	0xFFA
 10478                           tblptru	equ	0xFF8
 10479                           tblptrh	equ	0xFF7
 10480                           tblptrl	equ	0xFF6
 10481                           tablat	equ	0xFF5
 10482                           prodh	equ	0xFF4
 10483                           prodl	equ	0xFF3
 10484                           intcon	equ	0xFF2
 10485                           intcon3	equ	0xFF0
 10486                           postinc0	equ	0xFEE
 10487                           fsr0h	equ	0xFEA
 10488                           fsr0l	equ	0xFE9
 10489                           wreg	equ	0xFE8
 10490                           postdec1	equ	0xFE5
 10491                           fsr1h	equ	0xFE2
 10492                           fsr1l	equ	0xFE1
 10493                           indf2	equ	0xFDF
 10494                           postinc2	equ	0xFDE
 10495                           postdec2	equ	0xFDD
 10496                           fsr2h	equ	0xFDA
 10497                           fsr2l	equ	0xFD9
 10498                           status	equ	0xFD8
 10499                           
 10500 ;; *************** function _keyPressedInterruptService *****************
 10501 ;; Defined at:
 10502 ;;		line 49 in file "keypad.c"
 10503 ;; Parameters:    Size  Location     Type
 10504 ;;		None
 10505 ;; Auto vars:     Size  Location     Type
 10506 ;;  key             1    0[COMRAM] unsigned char 
 10507 ;; Return value:  Size  Location     Type
 10508 ;;                  1    wreg      void 
 10509 ;; Registers used:
 10510 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 10511 ;; Tracked objects:
 10512 ;;		On entry : 0/0
 10513 ;;		On exit  : 0/0
 10514 ;;		Unchanged: 0/0
 10515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10520 ;;Total ram usage:        1 bytes
 10521 ;; Hardware stack levels used:    1
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_service
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           	psect	text45
 10530  002AF0                     __ptext45:
 10531                           	opt stack 0
 10532  002AF0                     _keyPressedInterruptService:
 10533                           	opt stack 22
 10534                           
 10535                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 10536                           
 10537                           ;incstack = 0
 10538  002AF0  3881               	swapf	3969,w,c	;volatile
 10539  002AF2  0B0F               	andlw	15
 10540  002AF4  0B0F               	andlw	15
 10541  002AF6  6E01               	movwf	keyPressedInterruptService@key,c
 10542                           
 10543                           ;keypad.c: 51: lastKey = keys[key];
 10544  002AF8  5001               	movf	keyPressedInterruptService@key,w,c
 10545  002AFA  0D01               	mullw	1
 10546  002AFC  0E63               	movlw	low _keys
 10547  002AFE  24F3               	addwf	prodl,w,c
 10548  002B00  6EF6               	movwf	tblptrl,c
 10549  002B02  0EFE               	movlw	high _keys
 10550  002B04  20F4               	addwfc	prodh,w,c
 10551  002B06  6EF7               	movwf	tblptrh,c
 10552  002B08                     	if	0	;There are less than 3 active tblptr bytes
 10553  002B08                     	endif
 10554  002B08  0008               	tblrd		*
 10555  002B0A  CFF5 F05D          	movff	tablat,_lastKey
 10556  002B0E  0012               	return		;funcret
 10557  002B10                     __end_of_keyPressedInterruptService:
 10558                           	opt stack 0
 10559                           pclatu	equ	0xFFB
 10560                           pclath	equ	0xFFA
 10561                           tblptru	equ	0xFF8
 10562                           tblptrh	equ	0xFF7
 10563                           tblptrl	equ	0xFF6
 10564                           tablat	equ	0xFF5
 10565                           prodh	equ	0xFF4
 10566                           prodl	equ	0xFF3
 10567                           intcon	equ	0xFF2
 10568                           intcon3	equ	0xFF0
 10569                           postinc0	equ	0xFEE
 10570                           fsr0h	equ	0xFEA
 10571                           fsr0l	equ	0xFE9
 10572                           wreg	equ	0xFE8
 10573                           postdec1	equ	0xFE5
 10574                           fsr1h	equ	0xFE2
 10575                           fsr1l	equ	0xFE1
 10576                           indf2	equ	0xFDF
 10577                           postinc2	equ	0xFDE
 10578                           postdec2	equ	0xFDD
 10579                           fsr2h	equ	0xFDA
 10580                           fsr2l	equ	0xFD9
 10581                           status	equ	0xFD8
 10582                           pclatu	equ	0xFFB
 10583                           pclath	equ	0xFFA
 10584                           tblptru	equ	0xFF8
 10585                           tblptrh	equ	0xFF7
 10586                           tblptrl	equ	0xFF6
 10587                           tablat	equ	0xFF5
 10588                           prodh	equ	0xFF4
 10589                           prodl	equ	0xFF3
 10590                           intcon	equ	0xFF2
 10591                           intcon3	equ	0xFF0
 10592                           postinc0	equ	0xFEE
 10593                           fsr0h	equ	0xFEA
 10594                           fsr0l	equ	0xFE9
 10595                           wreg	equ	0xFE8
 10596                           postdec1	equ	0xFE5
 10597                           fsr1h	equ	0xFE2
 10598                           fsr1l	equ	0xFE1
 10599                           indf2	equ	0xFDF
 10600                           postinc2	equ	0xFDE
 10601                           postdec2	equ	0xFDD
 10602                           fsr2h	equ	0xFDA
 10603                           fsr2l	equ	0xFD9
 10604                           status	equ	0xFD8
 10605                           
 10606                           	psect	rparam
 10607  0000                     pclatu	equ	0xFFB
 10608                           pclath	equ	0xFFA
 10609                           tblptru	equ	0xFF8
 10610                           tblptrh	equ	0xFF7
 10611                           tblptrl	equ	0xFF6
 10612                           tablat	equ	0xFF5
 10613                           prodh	equ	0xFF4
 10614                           prodl	equ	0xFF3
 10615                           intcon	equ	0xFF2
 10616                           intcon3	equ	0xFF0
 10617                           postinc0	equ	0xFEE
 10618                           fsr0h	equ	0xFEA
 10619                           fsr0l	equ	0xFE9
 10620                           wreg	equ	0xFE8
 10621                           postdec1	equ	0xFE5
 10622                           fsr1h	equ	0xFE2
 10623                           fsr1l	equ	0xFE1
 10624                           indf2	equ	0xFDF
 10625                           postinc2	equ	0xFDE
 10626                           postdec2	equ	0xFDD
 10627                           fsr2h	equ	0xFDA
 10628                           fsr2l	equ	0xFD9
 10629                           status	equ	0xFD8
 10630                           
 10631                           	psect	temp
 10632  00005E                     btemp:
 10633                           	opt stack 0
 10634  00005E                     	ds	1
 10635  0000                     int$flags	set	btemp
 10636                           pclatu	equ	0xFFB
 10637                           pclath	equ	0xFFA
 10638                           tblptru	equ	0xFF8
 10639                           tblptrh	equ	0xFF7
 10640                           tblptrl	equ	0xFF6
 10641                           tablat	equ	0xFF5
 10642                           prodh	equ	0xFF4
 10643                           prodl	equ	0xFF3
 10644                           intcon	equ	0xFF2
 10645                           intcon3	equ	0xFF0
 10646                           postinc0	equ	0xFEE
 10647                           fsr0h	equ	0xFEA
 10648                           fsr0l	equ	0xFE9
 10649                           wreg	equ	0xFE8
 10650                           postdec1	equ	0xFE5
 10651                           fsr1h	equ	0xFE2
 10652                           fsr1l	equ	0xFE1
 10653                           indf2	equ	0xFDF
 10654                           postinc2	equ	0xFDE
 10655                           postdec2	equ	0xFDD
 10656                           fsr2h	equ	0xFDA
 10657                           fsr2l	equ	0xFD9
 10658                           status	equ	0xFD8


Data Sizes:
    Strings     388
    Constant    174
    Data        48
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62      93
    BANK0           128     85     128
    BANK1           256     42      56
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_22(CODE[17]), STR_21(CODE[18]), STR_20(CODE[17]), STR_19(CODE[18]), 
		 -> STR_18(CODE[17]), STR_17(CODE[19]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[9]), STR_9(CODE[8]), STR_8(CODE[25]), STR_7(CODE[15]), 
		 -> STR_6(CODE[17]), STR_5(CODE[20]), STR_4(CODE[24]), STR_3(CODE[14]), 
		 -> STR_2(CODE[20]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 6
		 -> redirectingServo(BANK1[6]), padServo(BANK0[6]), conveyorServo(COMRAM[6]), 

    initServo@motor	PTR int  size(2) Largest target is 6
		 -> redirectingServo(BANK1[6]), padServo(BANK0[6]), conveyorServo(COMRAM[6]), 

    servos	PTR int [4] size(2) Largest target is 6
		 -> redirectingServo(BANK1[6]), padServo(BANK0[6]), conveyorServo(COMRAM[6]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 6
		 -> AA_float(BANK0[4]), redirectingServo(BANK1[6]), padServo(BANK0[6]), conveyorServo(COMRAM[6]), 
		 -> cylinderMotor(BANK0[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(COMRAM[4]), padPin1(COMRAM[4]), 

    pause@message	PTR unsigned char  size(2) Largest target is 25
		 -> STR_8(CODE[25]), STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[20]), 
		 -> STR_3(CODE[14]), STR_2(CODE[20]), 


Critical Paths under _main in COMRAM

    _sortBattery->_pause
    _sortBattery->_setAngle
    _lcdNewline->_lcdInst
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _lcdClear->_lcdInst
    _initServo->_setAngle
    _angleToPulse->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _sortBattery->_setAngle
    _pause->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf
    _pause->_printf
    _initServo->_setAngle

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  244677
                       _digitalWrite
                            _initLCD
                          _initServo
                           _pinSetup
                             _printf
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         18    18      0  159559
                                             24 BANK1     18    18      0
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                              _pause
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2   60632
                                             60 COMRAM     2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              45    38      7   59910
                                             58 BANK0     13     6      7
                                              0 BANK1     24    24      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   13593
                                             21 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             37 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   13314
                                             21 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3036
                                             47 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             39 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             33 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             33 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             41 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             46 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             33 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4903
                                             43 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             33 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1276
                                             33 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1440
                                             33 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     309
                                             33 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   23573
                                              4 BANK1      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           8     2      6     486
                                             33 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22382
                                             60 COMRAM     2     2      0
                                             81 BANK0      4     0      4
                                              0 BANK1      4     4      0
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21075
                                             58 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     679
                                             43 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              6 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3734
                                             51 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             31 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2794
                                             41 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3250
                                             41 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             33 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _initTimer                                            4     2      2     150
                                             33 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             37 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             35 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             33 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             14    14      0    1139
                                             19 COMRAM    14    14      0
         _keyPressedInterruptService
              _servoInterruptService
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1116
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     206
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _pinSetup
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2A      38       7       21.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     55      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3E      5D       1       73.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     115      34        0.0%
DATA                 0      0     115       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 19 22:52:07 2017

                       ___altoft@exp 0032                                    _n 00FE  
                      ___altoft@sign 0033                          _sortBattery 0D54  
                       ___awdiv@sign 002D                  ___wmul@multiplicand 0032  
                        __CFG_BORV$3 000000                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                          __CFG_OSC$HS 000000  
                   _redirectingServo 0132                         ___ftadd@exp1 00AA  
                       ___ftadd@exp2 00A9                         ___ftadd@sign 00A8  
                                l202 2A48                                  l129 0FD6  
                                l163 2ABC                                  l272 1EAE  
                                l371 2940                                  l380 2876  
                                l381 2882                                  l199 2A3C  
                                l297 29D8                                  l378 286A  
                                l652 06A4                                  l680 0526  
                                l921 1BAE                                  l953 21A2  
                                l980 1146                                  l982 116E  
                                l991 1244                                  l976 110C  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                       ___awmod@sign 0027                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                         ___ftdiv@cntr 0080  
                       ___ftdiv@sign 0085                         __CFG_WDT$OFF 000000  
                               l1000 126E                                 l1011 1D96  
                               l1105 2748                                 l1025 1A86  
                               l1050 2A9E                                 l1018 19F8  
                               l1019 1A20                                 l1095 258A  
                               l4133 2902                                 l5101 1A5C  
                               l5013 1524                                 l5005 145C  
                               l4143 2914                                 l5033 0B2A  
                               l4139 290C                                 l4163 288E  
                               l5123 1AD4                                 l5107 1A74  
                               l5051 0D2E                                 l5027 0A80  
                               l4149 291C                                 l5117 1AB6  
                               l5109 1A80                                 l5061 1992  
                               l5045 0C84                                 l5037 0B50  
                               l5311 192E                                 l5303 1902  
                               l5313 1938                                 l5161 1B84  
                               l5145 1B46                                 l5137 1B16  
                               l5219 1D6C                                 l5331 254C  
                               l5067 19BE                                 l5181 25CA  
                               l5317 1954                                 l5309 191E  
                               l5261 23DE                                 l5237 283E  
                               l5157 1B74                                 l5421 01BA  
                               l5405 010C                                 l5327 253C  
                               l5351 2716                                 l5167 1B9C  
                               l5249 2A18                                 l5193 1CF2  
                               l5281 185C                                 l5257 23AE  
                               l5329 2548                                 l5361 27C6  
                               l5169 1BA8                                 l5097 1A4C  
                               l5521 0696                                 l5505 054E  
                               l5433 0248                                 l5179 25BE  
                               l4803 1154                                 l5267 240A  
                               l5339 257C                                 l5355 273A  
                               l5347 2706                                 l5363 27D2  
                               l5515 067A                                 l5435 025E  
                               l5371 0022                                 l5621 1FD6  
                               l5349 2712                                 l5533 06F0  
                               l5517 0688                                 l5509 05A0  
                               l5445 02EE                                 l5437 028E  
                               l5429 0222                                 l5381 0050  
                               l4831 11FC                                 l5199 1D1E  
                               l5623 1FDC                                 l5551 0766  
                               l5463 03D8                                 l5439 02A4  
                               l5391 00B2                                 l5375 0038  
                               l4761 2170                                 l4753 2132  
                               l4825 11D4                                 l4809 1164  
                               l5633 1FFE                                 l5617 1FC8  
                               l5641 2018                                 l4921 24BA  
                               l5553 076C                                 l5537 071A  
                               l5481 044C                                 l5465 03DE  
                               l5449 0314                                 l5385 0068  
                               l5377 0044                                 l4763 218E  
                               l4755 213C                                 l4827 11E2  
                               l4819 11A6                                 l5299 18EE  
                               l5635 2004                                 l5627 1FEA  
                               l4931 24DC                                 l4915 24AA  
                               l5539 0720                                 l5459 0372  
                               l5379 004A                                 l5811 22D0  
                               l4765 2198                                 l4757 215A  
                               l4749 2124                                 l4845 1298  
                               l4837 122A                                 l4829 11F0  
                               l5653 1F20                                 l5629 1FF0  
                               l5573 07EA                                 l5493 04F4  
                               l5477 0424                                 l5389 0074  
                               l4855 12E6                                 l4839 1238  
                               l4871 15E0                                 l5639 2012  
                               l4927 24D0                                 l4943 2502  
                               l5575 07FA                                 l5583 08EE  
                               l5567 07B2                                 l5495 0508  
                               l5487 04D8                                 l4865 15A6  
                               l5649 1ECA                                 l5657 1F48  
                               l5681 1E50                                 l5673 1DF8  
                               l4929 24D8                                 l5577 087A  
                               l5585 0900                                 l5569 07C4  
                               l5489 04E6                                 l5753 0EBA  
                               l5809 22C0                                 l4947 2510  
                               l4939 24F8                                 l4971 264E  
                               l4963 2634                                 l5587 0908  
                               l5499 052A                                 l4797 111A  
                               l4885 162E                                 l5677 1E24  
                               l5669 1DCC                                 l5589 091E  
                               l5765 0F82                                 l4895 166C  
                               l5687 1E7C                                 l4983 267A  
                               l4975 2662                                 l4967 2642  
                               l4959 2628                                 l5775 0FE0  
                               l4889 164C                                 l4969 264A  
                               l5769 0FAC                                 l5777 1008  
                               l4899 168A                                 l4979 266C  
                               _EEIF 007D0C                                 STR_1 FFF7  
                               STR_2 FEC0                                 STR_3 FFD8  
                               STR_4 FE94                                 STR_5 FEAC  
                               STR_6 FFB8                                 STR_7 FFC9  
                               STR_8 FE7B                                 STR_9 FFEF  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u5000 1882  
                               u4221 10BA                                 u5005 1878  
                               u4231 10D8                         printf@tmpval 010C  
                               u6007 2772                                 u4431 1582  
                               u6017 2780                                 u5330 051E  
                               u5170 0152                                 u6027 27A6  
                               u4451 15BC                                 _PEIE 007F96  
                               u6037 27B4                                 u4711 19A2  
                               u5175 0146                                 u5514 1FAE  
                               u5515 1FA8                                 u5604 1E14  
                               _RCEN 007E2B                                 u5605 1E10  
                               u5614 1E40                                 u5615 1E3C  
                               u5624 1E6C                                 u5625 1E68  
                               u4691 1976                                 u4871 1CD6  
                               u5594 1DE8                                 u4891 1D02  
                               u5595 1DE4                                 u4981 1838  
                               u5947 0ED6                                 u5957 2AC0  
                               u5967 294C                                 u5977 2980  
                               u5987 2AD4                                 u5997 2AE6  
                               _RSEN 007E29                                 _main 2258  
                               _curr 0059                         ___ftpack@arg 0022  
                               _keys FE63                         ___ftpack@exp 0025  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 005E  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                        __CFG_IESO$OFF 000000  
                      __CFG_MCLRE$ON 000000                         ___ftmul@cntr 0093  
                       ___param_bank 000000                         ___ftmul@sign 0094  
                       ___fttol@exp1 00B9                         ___fttol@lval 00B5  
               __end_ofi2_startTimer 2900                 __end_of_angleToPulse 1822  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___awdiv 251A  
                              _EEADR 000FA9                      __end_of___ftadd 130C  
                              STR_10 FFE6                                STR_11 FEF9  
                              STR_12 FFA7                                STR_20 FF52  
                              STR_21 FF2F                                STR_13 FEE7  
                              STR_22 FF96                                STR_14 FF74  
                              STR_23 FF41                                STR_15 FF0B  
                              STR_16 FF63                                STR_17 FED4  
                              STR_18 FF85                                STR_19 FF1D  
                    __end_of___awmod 2684                      __end_of___ftdiv 1DCA  
            ??_servoInterruptService 0010                      __end_of___ftneg 2AAC  
                    __end_of___lldiv 259C                      __end_of___ftmul 16CA  
                              _T0CON 000FD5                      ___awdiv@divisor 002A  
                              _T1CON 000FCD                      __end_of___llmod 275A  
                    __end_of___ftsub 2868                      __end_of___fttol 1966  
                              _T3CON 000FB1                                i2l139 221C  
                              i2l380 28C2                                i2l381 28CE  
                              i2l378 28B6                      ___awdiv@counter 002C  
                              _TMR0H 000FD7                                _TMR1H 000FCF  
                              _TMR0L 000FD6                                _TMR3H 000FB3  
                              _TMR1L 000FCE                                _TMR3L 000FB2  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _PORTD 000F83  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_PWRT$OFF 000000  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                       ___lltoft@exp 0032                        _conveyorServo 0041  
                    __end_of_lcdInst 2AF0                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      __end_of_initLCD 298C  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 002D  
                    __end_of_dpowers FDF5                                _count 0057  
                              _scale 093E                                _pause 2B2A  
                      ___ftpack@sign 0026                                _pulse 012A  
                              _putch 2AAC                                pclath 000FFA  
                              tablat 000FF5                      __end_of_service 2258  
                              status 000FD8                   __size_ofi2___awmod 0070  
                     __CFG_PBADEN$ON 000000                 __end_of_digitalWrite 204C  
                    __initialization 22EC                         __end_of_main 22EC  
                       __end_of_keys FE74                               ??_main 003F  
                      ___fttol@sign1 00B4                        __activetblptr 000002  
               __size_of_digitalRead 00EA                 __size_of__tdiv_to_l_ 0132  
                    i2digitalWrite@p 000E                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                   __end_of___altoft 2614                     ___llmod@dividend 002F  
                             ?_scale 0095                               _ADRESH 000FC4  
                             _EEADRH 000FAA                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               ?_pause 003D  
                             _EECON1 000FA6                               _EECON2 000FA7  
      keyPressedInterruptService@key 0001                     ___awdiv@dividend 0028  
                   __end_of___awtoft 2A3C                               ?_putch 0001  
                   __end_of___ftpack 21C2                     __end_of___lltoft 281C  
                             _INT0IE 007F94                               _INT0IF 007F91  
                             _INT1IE 007F83                               _INT1IF 007F80  
                       sortBattery@V 0127                               i2l4201 20E0  
                             i2l4215 28DA                               i2l4241 26BE  
                             i2l4233 26A4                               i2l4253 26EA  
                             i2l4245 26D2                               i2l4237 26B2  
                             i2l4229 2698                               i2l4181 209E  
                             i2l4239 26BA                               i2l4183 20A4  
                             i2l4249 26DC                               i2l4193 20C6  
                             i2l4177 2090                               i2l4409 2210  
                             i2l4195 20CC                               i2l4187 20B2  
                             i2l4189 20B8                               i2l4199 20DA  
                             _TMR0IE 007F95                               _TMR0IF 007F92  
                             _TMR1IE 007CE8                               _TMR3IE 007D01  
                             _SSPADD 000FC8                               _TRISC3 007CA3  
                             _TRISC4 007CA4                               _SSPBUF 000FC9  
                  _angleToPulse$1316 00CA                     __end_of_lcdClear 2B60  
                     __CFG_XINST$OFF 000000                     __end_of__powers_ FE43  
                             ___ftge 237E                               ___wmul 2A62  
                          ??___awdiv 002C                            ??___ftadd 00A5  
                     __CFG_STVREN$ON 000000                            ??___awmod 0026  
                          ??___ftdiv 003A                            ??___ftneg 0025  
                          ??___lldiv 002A                            ??___ftmul 008C  
                          ??___llmod 0037                            ??___ftsub 003D  
                          ??___fttol 00AF                               _fround 130C  
                             clear_0 2352                               clear_1 235E  
                             clear_2 236A                     ___awdiv@quotient 002E  
                    ___awmod@divisor 0024                      ___awmod@counter 0026  
                             _servos 004F                            ??_lcdInst 0024  
                             _printf 0012                     __end_of_pinSetup 29CC  
                   __end_of_setAngle 1F84                    analogRead@channel 0022  
              ___ftmul@f3_as_product 0090                            ??_initLCD 0026  
                       __pdataCOMRAM 003F                    __end_ofi2___awmod 26F4  
                      setAngle@angle 00D3                         __mediumconst FDCC  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                        setAngle@motor 00D1  
                          ??_service 0014                       i2___awmod@sign 0006  
                         __accesstop 0080              __end_of__initialization 2370  
                         ___altoft@c 002A                           ___ftadd@f1 009F  
                         ___ftadd@f2 00A2                           ___ftge@ff1 0022  
                         ___ftge@ff2 0025                        ___rparam_used 000001  
                         ___ftdiv@f1 0034                           ___ftdiv@f2 0037  
                         ___ftdiv@f3 0081                           ___ftneg@f1 0022  
                         ___awtoft@c 002A                __size_ofi2_startTimer 004C  
                         ___ftmul@f1 0086                           ___ftmul@f2 0089  
                         ___ftsub@f1 00AB                           ___ftsub@f2 00AE  
                         ___fttol@f1 00AB                 __end_of_happynewyear FE7B  
                     __pcstackCOMRAM 0001                __size_of_angleToPulse 0158  
                       __pidataBANK0 2B10                         __pidataBANK1 2B60  
                         ___lltoft@c 002A                        _cylinderMotor 00EB  
                      __end_of_scale 0D54                         ?_sortBattery 0001  
                      __end_of_pause 2B40                        __end_of_putch 2ACE  
                 __size_of_lcdNibble 0066                           __div_to_l_ 1A98  
                    __div_to_l_@exp1 002D                      __div_to_l_@cntr 002C  
                            ??_scale 003D                              ??_pause 003F  
                    __div_to_l_@quot 0028                              ??_putch 0026  
                       i2_startTimer 28B4                           __pbssBANK0 00EF  
                         __pbssBANK1 012A                         _angleToPulse 16CA  
              __size_of_digitalWrite 00C8                   __size_of_initTimer 0046  
                 __size_of_initServo 0088                           _analogRead 29CC  
                      __div_to_l_@f1 0022                        __div_to_l_@f2 0025  
                            ?___ftge 0022                              ?___wmul 0030  
              sortBattery@resolution 0120                            ?___altoft 002A  
                            ?_fround 0095                           _lcdNewline 2B50  
                          ?___awtoft 002A                            ?___ftpack 0022  
                            ?_printf 00BA                            ?___lltoft 002A  
     __size_of_servoInterruptService 0106        __end_of_servoInterruptService 1CC6  
                  i2startTimer@timer 0007                            ?_lcdClear 0001  
                   angleToPulse@a000 00CD                     angleToPulse@a180 00C6  
                       _digitalWrite 1F84                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
            __size_ofi2_digitalWrite 00C8                              _V_LIM_C 00F9  
                          ?_pinSetup 0001                            ?_setAngle 00D1  
                  __end_of_lcdNibble 27C0                    __end_of__npowers_ FE1C  
                            __Hparam 0000                           _scale$1319 0098  
                            __Lparam 0000                      __size_of___ftge 0090  
                            ___awdiv 2496                              ___ftadd 10A4  
                            ___awmod 2614                           _readKeypad 2A3C  
                            ___ftdiv 1CC6                              ___ftneg 2A88  
                            ___lldiv 251A                      __size_of___wmul 0026  
                            ___ftmul 156C                              ___llmod 26F4  
                            ___ftsub 281C                              ___fttol 1822  
                         ??___altoft 002E                              __pcinit 22EC  
                         ??___awtoft 002D                           ??___ftpack 0027  
                    __size_of_fround 0260                              __ramtop 1000  
                            _lcdInst 2ACE                           ??___lltoft 002E  
                            __ptext0 2258                              __ptext1 0D54  
                            __ptext2 2B2A                              __ptext3 2A3C  
                            __ptext4 0012                              __ptext5 093E  
                            __ptext6 2AAC                              __ptext7 2B50  
                            __ptext8 130C                              __ptext9 2A62  
                    __size_of_printf 092C                              _padPin1 0047  
                            _padPin2 004B                              _padPin3 00EF  
                      startTimer@val 0024                              _initLCD 2946  
                  __end_of_hexpowers FE63                          ?__div_to_l_ 0022  
                            _lastKey 005D                    __end_of_initTimer 2946  
                  __end_of_initServo 2496                              _dpowers FDCD  
                   ___awmod@dividend 0022                           ??_lcdClear 0026  
                            _service 0008                       __pintcode_body 21C2  
               end_of_initialization 2370                        __Lmediumconst FDCC  
                            int_func 21C2                       digitalRead@pin 0022  
                        ?_analogRead 0022                           ??_pinSetup 0022  
                         ??_setAngle 003D                      ___lldiv@divisor 0026  
                    ___lldiv@counter 002E                       setAngle@period 0100  
                            printf@c 0117                              printf@f 00BA  
                            postdec1 000FE5                              postdec2 000FDD  
                    _batteryDetected 00FC                              postinc0 000FEE  
                            postinc2 000FDE                       __tdiv_to_l_@f1 0022  
                     __tdiv_to_l_@f2 0025                        ??_digitalRead 0024  
                        ?_lcdNewline 0001                        ??__tdiv_to_l_ 0028  
                          _PORTBbits 000F81                 __size_of_sortBattery 0350  
       ??_keyPressedInterruptService 0001                  _redirectAngle_OTHER 00DF  
                       _happynewyear FE74                   angleToPulse@offset 00C2  
                 sortBattery@V_float 011A                            i2___awmod 2684  
                         _startTimer 2868                          ___ftdiv@exp 0084  
                __size_of__div_to_l_ 0128                          ___ftmul@exp 008F  
                        ?_readKeypad 0001                       __end_of___ftge 240E  
                     __end_of___wmul 2A88                        __pidataCOMRAM 2B40  
__size_of_keyPressedInterruptService 0020                       __end_of_fround 156C  
                     __end_of_printf 093E                  __size_of_analogRead 0038  
                start_initialization 22EC                  __end_of_digitalRead 1EB4  
                __end_of__tdiv_to_l_ 1A98                       initServo@angle 0106  
                     initTimer@timer 0022                       initServo@motor 0104  
                         ?i2___awmod 0001                       i2_digitalWrite 204C  
                __size_of_lcdNewline 0008                      ___llmod@divisor 0033  
                    ___llmod@counter 0037                             ??___ftge 0028  
                           ??___wmul 0034                          __pdataBANK0 00D5  
                        __pdataBANK1 0132                         pause@message 003D  
                   __CFG_LPT1OSC$OFF 000000                             ??_fround 003D  
                           ??_printf 00C1                    __size_of___altoft 0078  
                         fround@prec 009E                    __size_of___awtoft 0038  
                  __size_of___ftpack 00AE                    __size_of___lltoft 005C  
                        __pbssCOMRAM 004F                        __pcstackBANK0 0080  
                      __pcstackBANK1 0100               __end_ofi2_digitalWrite 2114  
             sortBattery@targetAngle 0125                          ?_startTimer 0022  
                  __size_of_lcdClear 0008                  __size_of_readKeypad 0026  
                  i2digitalWrite@pin 0007                    i2digitalWrite@val 0009  
                  __CFG_CCP2MX$PORTC 000000                    __size_of_pinSetup 0040  
                  __size_of_setAngle 00D0                            __pintcode 0008  
                      __pmediumconst FDCC                            _lcdNibble 275A  
                           ?___awdiv 0028                             ?___ftadd 009F  
                           ?___awmod 0022                             ?___ftdiv 0034  
                           ?___ftneg 0022                             ?___lldiv 0022  
                           ?___ftmul 0086                             ?___llmod 002F  
                           ?___ftsub 00AB                            __npowers_ FDF5  
                           ?___fttol 00AB                          _digitalRead 1DCA  
                           ?_lcdInst 0001                          __tdiv_to_l_ 1966  
                       ??__div_to_l_ 0028                             ?_initLCD 0001  
                    startTimer@timer 0022   __end_of_keyPressedInterruptService 2B10  
         _keyPressedInterruptService 2AF0                             ?_service 0001  
                          _hexpowers FE43                            _initTimer 2900  
                          _initServo 240E                      ?i2_digitalWrite 0007  
              _servoInterruptService 1BC0                          ??i2___awmod 0005  
                     __size_of_scale 0416                       __size_of_pause 0016  
                     __size_of_putch 0022                             _AA_float 00E7  
                     sortBattery@Vcc 011D                       ___wmul@product 0034  
                           _LATDbits 000F8C                         ??_analogRead 0026  
                 __end_of__div_to_l_ 1BC0                             i2u368_44 2076  
                           i2u368_45 2070                     __CFG_WDTPS$32768 000000  
                         ?_lcdNibble 0001                       _padAngle_CLOSE 00D5  
                      digitalWrite@p 0029                         ??_lcdNewline 0026  
                __size_of_startTimer 004C                    angleToPulse@angle 00BA  
                  ___wmul@multiplier 0030                        lcdNibble@data 0023  
                         printf@flag 0106                        lcdNibble@temp 0022  
                         printf@fval 0114                           printf@prec 0108  
                 __end_of_analogRead 2A04                             _V_LIM_AA 00F6  
                           _V_LIM_9V 00F3                           ?_initTimer 0022  
                         ?_initServo 0104                    sortBattery@signal 0123  
                          copy_data0 2300                            copy_data1 2320  
                          copy_data2 2340                   i2___awmod@dividend 0001  
                 __end_of_lcdNewline 2B58                        readKeypad@key 0022  
                           __Hrparam 0000                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                         ??_readKeypad 0022  
                      ??_sortBattery 0118                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 0104                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 259C  
                   __size_of___ftmul 015E                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                           ___awtoft 2A04                             ___ftpack 2114  
                        _fround$1317 009B                          _fround$1318 0098  
                           ___lltoft 27C0                     __size_of_lcdInst 0022  
                          setAngle@i 0102                     __size_of_initLCD 0046  
             ?_servoInterruptService 0001                             _lcdClear 2B58  
                           __ptext10 2614                             __ptext11 2496  
                           __ptext20 2B58                             __ptext12 1966  
                           __ptext21 1F84                             __ptext13 1A98  
                           __ptext30 156C                             __ptext22 1DCA  
                           __ptext14 27C0                             __ptext31 1CC6  
                           __ptext23 29CC                             __ptext15 26F4  
                           __ptext32 10A4                             __ptext24 298C  
                           __ptext16 251A                             __ptext41 1BC0  
                           __ptext33 2A04                             __ptext25 240E  
                           __ptext17 281C                             __ptext42 28B4  
                           __ptext34 259C                             __ptext26 2868  
                           __ptext18 2A88                             __ptext43 204C  
                           __ptext35 2114                             __ptext27 1EB4  
                           __ptext19 237E                             __ptext44 2684  
                           __ptext36 2900                             __ptext28 16CA  
                           __ptext45 2AF0                             __ptext37 2946  
                           __ptext29 1822                             __ptext38 2ACE  
                           __ptext39 275A                             __powers_ FE1C  
                   __size_of_service 2250                      i2startTimer@val 0009  
                      ?i2_startTimer 0007                             _padServo 00E1  
                 __end_of_readKeypad 2A62                        ?_angleToPulse 00BA  
                      __size_of_main 0094                             _pinSetup 298C  
                           _setAngle 1EB4                             _prevTime 005B  
                        ??_lcdNibble 0022                        _padAngle_OPEN 00D9  
                           int$flags 005E                            printf@idx 0103  
                          printf@exp 010A                            printf@val 0110  
                  i2___awmod@divisor 0003                            putch@data 0026  
                  i2___awmod@counter 0005                  __end_of_sortBattery 10A4  
                         _INTCONbits 000FF2                        ?_digitalWrite 0022  
                        ??_initTimer 0024                          ??_initServo 0108  
                           scale@scl 009B                       ??i2_startTimer 000D  
                       ??_startTimer 0028                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0030                     __tdiv_to_l_@cntr 002F  
                     ??_angleToPulse 00BE                     __tdiv_to_l_@quot 002B  
                   ___lldiv@dividend 0022                     _redirectAngle_AA 00DD  
                   _redirectAngle_9V 00DB                             printf@ap 0104  
                        lcdInst@data 0025                         ?_digitalRead 0022  
                       ?__tdiv_to_l_ 0022                   __end_of_startTimer 28B4  
                        _printf$1320 0100                     ??i2_digitalWrite 000B  
                   ___lldiv@quotient 002A                       ??_digitalWrite 0026  
        ?_keyPressedInterruptService 0001                      _redirectAngle_C 003F  
                   _padAngle_NEUTRAL 00D7                      digitalWrite@pin 0022  
                    digitalWrite@val 0024  
