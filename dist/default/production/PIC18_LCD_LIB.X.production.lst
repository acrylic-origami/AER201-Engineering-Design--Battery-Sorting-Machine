

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 27 15:48:23 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           ; Version 1.40
    93                           ; Generated 01/12/2016 GMT
    94                           ; 
    95                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC18F4620 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126  0000                     
   127                           	psect	idataBANK1
   128  0056D0                     __pidataBANK1:
   129                           	opt stack 0
   130                           
   131                           ;initializer for _V_LIM_9V
   132  0056D0  77                 	db	119
   133  0056D1  EE                 	db	238
   134  0056D2  3F                 	db	63
   135                           
   136                           ;initializer for _V_LIM_AA
   137  0056D3  C1                 	db	193
   138  0056D4  4A                 	db	74
   139  0056D5  3E                 	db	62
   140                           
   141                           ;initializer for _V_LIM_C
   142  0056D6  A7                 	db	167
   143  0056D7  A9                 	db	169
   144  0056D8  3F                 	db	63
   145                           
   146                           ;initializer for _angle
   147  0056D9  005A               	dw	90
   148                           
   149                           ;initializer for _padAngle_CLOSE
   150  0056DB  001E               	dw	30
   151                           
   152                           ;initializer for _padAngle_NEUTRAL
   153  0056DD  004C               	dw	76
   154                           
   155                           ;initializer for _padAngle_OPEN
   156  0056DF  00B4               	dw	180
   157                           
   158                           ;initializer for _period
   159  0056E1  797C               	dw	31100
   160                           
   161                           ;initializer for _redirectAngle_9V
   162  0056E3  0076               	dw	118
   163                           
   164                           ;initializer for _redirectAngle_AA
   165  0056E5  008A               	dw	138
   166                           
   167                           ;initializer for _redirectAngle_C
   168  0056E7  00A6               	dw	166
   169                           
   170                           ;initializer for _redirectAngle_OTHER
   171  0056E9  0099               	dw	153
   172                           
   173                           ;initializer for _stoppingTime
   174  0056EB  0064               	dw	100
   175                           
   176                           ;initializer for _AA_float
   177  0056ED  0002               	dw	2
   178  0056EF  0005               	dw	5
   179                           
   180                           ;initializer for _conveyorServo
   181  0056F1  0002               	dw	2
   182  0056F3  0002               	dw	2
   183                           
   184                           ;initializer for _cylinderDir
   185  0056F5  0003               	dw	3
   186  0056F7  0001               	dw	1
   187                           
   188                           ;initializer for _cylinderMotor
   189  0056F9  0002               	dw	2
   190  0056FB  0000               	dw	0
   191                           
   192                           ;initializer for _padPin1
   193  0056FD  0002               	dw	2
   194  0056FF  0006               	dw	6
   195                           
   196                           ;initializer for _padPin2
   197  005701  0002               	dw	2
   198  005703  0007               	dw	7
   199                           
   200                           ;initializer for _padServo
   201  005705  0002               	dw	2
   202  005707  0001               	dw	1
   203                           
   204                           ;initializer for _redirectingServo
   205  005709  0003               	dw	3
   206  00570B  0000               	dw	0
   207                           
   208                           	psect	mediumconst
   209  00FE1C                     __pmediumconst:
   210                           	opt stack 0
   211  00FE1C  00                 	db	0
   212  00FE1D                     _dpowers:
   213                           	opt stack 0
   214  00FE1D  0001               	dw	1
   215  00FE1F  0000               	dw	0
   216  00FE21  000A               	dw	10
   217  00FE23  0000               	dw	0
   218  00FE25  0064               	dw	100
   219  00FE27  0000               	dw	0
   220  00FE29  03E8               	dw	1000
   221  00FE2B  0000               	dw	0
   222  00FE2D  2710               	dw	10000
   223  00FE2F  0000               	dw	0
   224  00FE31  86A0               	dw	34464
   225  00FE33  0001               	dw	1
   226  00FE35  4240               	dw	16960
   227  00FE37  000F               	dw	15
   228  00FE39  9680               	dw	38528
   229  00FE3B  0098               	dw	152
   230  00FE3D  E100               	dw	57600
   231  00FE3F  05F5               	dw	1525
   232  00FE41  CA00               	dw	51712
   233  00FE43  3B9A               	dw	15258
   234  00FE45                     __end_of_dpowers:
   235                           	opt stack 0
   236  00FE45                     __npowers_:
   237                           	opt stack 0
   238  00FE45  00                 	db	0
   239  00FE46  80                 	db	128
   240  00FE47  3F                 	db	63
   241  00FE48  CD                 	db	205
   242  00FE49  CC                 	db	204
   243  00FE4A  3D                 	db	61
   244  00FE4B  D7                 	db	215
   245  00FE4C  23                 	db	35
   246  00FE4D  3C                 	db	60
   247  00FE4E  12                 	db	18
   248  00FE4F  83                 	db	131
   249  00FE50  3A                 	db	58
   250  00FE51  B7                 	db	183
   251  00FE52  D1                 	db	209
   252  00FE53  38                 	db	56
   253  00FE54  C6                 	db	198
   254  00FE55  27                 	db	39
   255  00FE56  37                 	db	55
   256  00FE57  38                 	db	56
   257  00FE58  86                 	db	134
   258  00FE59  35                 	db	53
   259  00FE5A  C0                 	db	192
   260  00FE5B  D6                 	db	214
   261  00FE5C  33                 	db	51
   262  00FE5D  CC                 	db	204
   263  00FE5E  2B                 	db	43
   264  00FE5F  32                 	db	50
   265  00FE60  70                 	db	112
   266  00FE61  89                 	db	137
   267  00FE62  30                 	db	48
   268  00FE63  E7                 	db	231
   269  00FE64  DB                 	db	219
   270  00FE65  2E                 	db	46
   271  00FE66  E5                 	db	229
   272  00FE67  3C                 	db	60
   273  00FE68  1E                 	db	30
   274  00FE69  42                 	db	66
   275  00FE6A  A2                 	db	162
   276  00FE6B  0D                 	db	13
   277  00FE6C                     __end_of__npowers_:
   278                           	opt stack 0
   279  00FE6C                     __powers_:
   280                           	opt stack 0
   281  00FE6C  00                 	db	0
   282  00FE6D  80                 	db	128
   283  00FE6E  3F                 	db	63
   284  00FE6F  00                 	db	0
   285  00FE70  20                 	db	32
   286  00FE71  41                 	db	65
   287  00FE72  00                 	db	0
   288  00FE73  C8                 	db	200
   289  00FE74  42                 	db	66
   290  00FE75  00                 	db	0
   291  00FE76  7A                 	db	122
   292  00FE77  44                 	db	68
   293  00FE78  40                 	db	64
   294  00FE79  1C                 	db	28
   295  00FE7A  46                 	db	70
   296  00FE7B  50                 	db	80
   297  00FE7C  C3                 	db	195
   298  00FE7D  47                 	db	71
   299  00FE7E  24                 	db	36
   300  00FE7F  74                 	db	116
   301  00FE80  49                 	db	73
   302  00FE81  97                 	db	151
   303  00FE82  18                 	db	24
   304  00FE83  4B                 	db	75
   305  00FE84  BC                 	db	188
   306  00FE85  BE                 	db	190
   307  00FE86  4C                 	db	76
   308  00FE87  6B                 	db	107
   309  00FE88  6E                 	db	110
   310  00FE89  4E                 	db	78
   311  00FE8A  03                 	db	3
   312  00FE8B  15                 	db	21
   313  00FE8C  50                 	db	80
   314  00FE8D  79                 	db	121
   315  00FE8E  AD                 	db	173
   316  00FE8F  60                 	db	96
   317  00FE90  F3                 	db	243
   318  00FE91  49                 	db	73
   319  00FE92  71                 	db	113
   320  00FE93                     __end_of__powers_:
   321                           	opt stack 0
   322  00FE93                     _hexpowers:
   323                           	opt stack 0
   324  00FE93  0001               	dw	1
   325  00FE95  0000               	dw	0
   326  00FE97  0010               	dw	16
   327  00FE99  0000               	dw	0
   328  00FE9B  0100               	dw	256
   329  00FE9D  0000               	dw	0
   330  00FE9F  1000               	dw	4096
   331  00FEA1  0000               	dw	0
   332  00FEA3  0000               	dw	0
   333  00FEA5  0001               	dw	1
   334  00FEA7  0000               	dw	0
   335  00FEA9  0010               	dw	16
   336  00FEAB  0000               	dw	0
   337  00FEAD  0100               	dw	256
   338  00FEAF  0000               	dw	0
   339  00FEB1  1000               	dw	4096
   340  00FEB3                     __end_of_hexpowers:
   341                           	opt stack 0
   342  00FEB3                     _keys:
   343                           	opt stack 0
   344  00FEB3  31                 	db	49
   345  00FEB4  32                 	db	50
   346  00FEB5  33                 	db	51
   347  00FEB6  41                 	db	65
   348  00FEB7  34                 	db	52
   349  00FEB8  35                 	db	53
   350  00FEB9  36                 	db	54
   351  00FEBA  42                 	db	66
   352  00FEBB  37                 	db	55
   353  00FEBC  38                 	db	56
   354  00FEBD  39                 	db	57
   355  00FEBE  43                 	db	67
   356  00FEBF  2A                 	db	42
   357  00FEC0  30                 	db	48
   358  00FEC1  23                 	db	35
   359  00FEC2  44                 	db	68
   360  00FEC3  00                 	db	0
   361  00FEC4                     __end_of_keys:
   362                           	opt stack 0
   363  00FEC4                     _happynewyear:
   364                           	opt stack 0
   365  00FEC4  00                 	db	0
   366  00FEC5  59                 	db	89
   367  00FEC6  03                 	db	3
   368  00FEC7  01                 	db	1
   369  00FEC8  13                 	db	19
   370  00FEC9  04                 	db	4
   371  00FECA  17                 	db	23
   372  00FECB                     __end_of_happynewyear:
   373                           	opt stack 0
   374  0000                     _ADCON0	set	4034
   375  0000                     _ADCON1	set	4033
   376  0000                     _ADCON2	set	4032
   377  0000                     _ADRESH	set	4036
   378  0000                     _ADRESL	set	4035
   379  0000                     _EEADR	set	4009
   380  0000                     _EEADRH	set	4010
   381  0000                     _EECON1	set	4006
   382  0000                     _EECON2	set	4007
   383  0000                     _EEDATA	set	4008
   384  0000                     _INTCONbits	set	4082
   385  0000                     _LATA	set	3977
   386  0000                     _LATB	set	3978
   387  0000                     _LATC	set	3979
   388  0000                     _LATD	set	3980
   389  0000                     _LATDbits	set	3980
   390  0000                     _LATE	set	3981
   391  0000                     _PORTA	set	3968
   392  0000                     _PORTB	set	3969
   393  0000                     _PORTBbits	set	3969
   394  0000                     _PORTC	set	3970
   395  0000                     _PORTD	set	3971
   396  0000                     _SSPADD	set	4040
   397  0000                     _SSPBUF	set	4041
   398  0000                     _SSPCON1	set	4038
   399  0000                     _SSPCON2	set	4037
   400  0000                     _SSPSTAT	set	4039
   401  0000                     _T0CON	set	4053
   402  0000                     _T1CON	set	4045
   403  0000                     _T3CON	set	4017
   404  0000                     _TMR0H	set	4055
   405  0000                     _TMR0L	set	4054
   406  0000                     _TMR1H	set	4047
   407  0000                     _TMR1L	set	4046
   408  0000                     _TMR3H	set	4019
   409  0000                     _TMR3L	set	4018
   410  0000                     _TRISA	set	3986
   411  0000                     _TRISB	set	3987
   412  0000                     _TRISC	set	3988
   413  0000                     _TRISD	set	3989
   414  0000                     _TRISE	set	3990
   415  0000                     _ACKDT	set	32301
   416  0000                     _ACKEN	set	32300
   417  0000                     _EEIF	set	32012
   418  0000                     _INT0IE	set	32660
   419  0000                     _INT0IF	set	32657
   420  0000                     _INT1IE	set	32643
   421  0000                     _INT1IF	set	32640
   422  0000                     _PEIE	set	32662
   423  0000                     _PEN	set	32298
   424  0000                     _RCEN	set	32299
   425  0000                     _RSEN	set	32297
   426  0000                     _SEN	set	32296
   427  0000                     _TMR0IE	set	32661
   428  0000                     _TMR0IF	set	32658
   429  0000                     _TMR1IE	set	31976
   430  0000                     _TMR1IF	set	31984
   431  0000                     _TMR3IE	set	32001
   432  0000                     _TRISC3	set	31907
   433  0000                     _TRISC4	set	31908
   434  00FECB                     STR_4:
   435  00FECB  4E                 	db	78	;'N'
   436  00FECC  3A                 	db	58	;':'
   437  00FECD  20                 	db	32
   438  00FECE  25                 	db	37
   439  00FECF  64                 	db	100	;'d'
   440  00FED0  2C                 	db	44
   441  00FED1  20                 	db	32
   442  00FED2  56                 	db	86	;'V'
   443  00FED3  5F                 	db	95	;'_'
   444  00FED4  66                 	db	102	;'f'
   445  00FED5  3A                 	db	58	;':'
   446  00FED6  20                 	db	32
   447  00FED7  25                 	db	37
   448  00FED8  2E                 	db	46
   449  00FED9  33                 	db	51	;'3'
   450  00FEDA  66                 	db	102	;'f'
   451  00FEDB  20                 	db	32
   452  00FEDC  0A                 	db	10
   453  00FEDD  56                 	db	86	;'V'
   454  00FEDE  3A                 	db	58	;':'
   455  00FEDF  20                 	db	32
   456  00FEE0  25                 	db	37
   457  00FEE1  2E                 	db	46
   458  00FEE2  33                 	db	51	;'3'
   459  00FEE3  66                 	db	102	;'f'
   460  00FEE4  00                 	db	0
   461  00FEE5  25                 	db	37
   462  00FEE6  63                 	db	99	;'c'
   463  00FEE7  29                 	db	41
   464  00FEE8  20                 	db	32
   465  00FEE9  74                 	db	116	;'t'
   466  00FEEA  69                 	db	105	;'i'
   467  00FEEB  6D                 	db	109	;'m'
   468  00FEEC  65                 	db	101	;'e'
   469  00FEED  20                 	db	32
   470  00FEEE  20                 	db	32
   471  00FEEF  3C                 	db	60	;'<'
   472  00FEF0  41                 	db	65	;'A'
   473  00FEF1  20                 	db	32
   474  00FEF2  20                 	db	32
   475  00FEF3  20                 	db	32
   476  00FEF4  20                 	db	32
   477  00FEF5  20                 	db	32
   478  00FEF6  0A                 	db	10
   479  00FEF7  00                 	db	0
   480  00FEF8  73                 	db	115	;'s'
   481  00FEF9  74                 	db	116	;'t'
   482  00FEFA  61                 	db	97	;'a'
   483  00FEFB  72                 	db	114	;'r'
   484  00FEFC  74                 	db	116	;'t'
   485  00FEFD  20                 	db	32
   486  00FEFE  20                 	db	32
   487  00FEFF  20                 	db	32
   488  00FF00  3C                 	db	60	;'<'
   489  00FF01  42                 	db	66	;'B'
   490  00FF02  20                 	db	32
   491  00FF03  20                 	db	32
   492  00FF04  20                 	db	32
   493  00FF05  20                 	db	32
   494  00FF06  20                 	db	32
   495  00FF07  20                 	db	32
   496  00FF08  0A                 	db	10
   497  00FF09  00                 	db	0
   498  00FF0A  20                 	db	32
   499  00FF0B  20                 	db	32
   500  00FF0C  68                 	db	104	;'h'
   501  00FF0D  68                 	db	104	;'h'
   502  00FF0E  3A                 	db	58	;':'
   503  00FF0F  6D                 	db	109	;'m'
   504  00FF10  6D                 	db	109	;'m'
   505  00FF11  3A                 	db	58	;':'
   506  00FF12  73                 	db	115	;'s'
   507  00FF13  73                 	db	115	;'s'
   508  00FF14  20                 	db	32
   509  00FF15  20                 	db	32
   510  00FF16  20                 	db	32
   511  00FF17  20                 	db	32
   512  00FF18  20                 	db	32
   513  00FF19  20                 	db	32
   514  00FF1A  0A                 	db	10
   515  00FF1B  00                 	db	0
   516  00FF1C  73                 	db	115	;'s'
   517  00FF1D  65                 	db	101	;'e'
   518  00FF1E  6C                 	db	108	;'l'
   519  00FF1F  65                 	db	101	;'e'
   520  00FF20  63                 	db	99	;'c'
   521  00FF21  74                 	db	116	;'t'
   522  00FF22  20                 	db	32
   523  00FF23  72                 	db	114	;'r'
   524  00FF24  75                 	db	117	;'u'
   525  00FF25  6E                 	db	110	;'n'
   526  00FF26  3A                 	db	58	;':'
   527  00FF27  20                 	db	32
   528  00FF28  20                 	db	32
   529  00FF29  20                 	db	32
   530  00FF2A  20                 	db	32
   531  00FF2B  20                 	db	32
   532  00FF2C  0A                 	db	10
   533  00FF2D  00                 	db	0
   534  00FF2E  74                 	db	116	;'t'
   535  00FF2F  69                 	db	105	;'i'
   536  00FF30  6D                 	db	109	;'m'
   537  00FF31  65                 	db	101	;'e'
   538  00FF32  3A                 	db	58	;':'
   539  00FF33  20                 	db	32
   540  00FF34  6E                 	db	110	;'n'
   541  00FF35  6E                 	db	110	;'n'
   542  00FF36  6E                 	db	110	;'n'
   543  00FF37  20                 	db	32
   544  00FF38  73                 	db	115	;'s'
   545  00FF39  65                 	db	101	;'e'
   546  00FF3A  63                 	db	99	;'c'
   547  00FF3B  20                 	db	32
   548  00FF3C  20                 	db	32
   549  00FF3D  20                 	db	32
   550  00FF3E  0A                 	db	10
   551  00FF3F  00                 	db	0
   552  00FF40  5B                 	db	91	;'['
   553  00FF41  41                 	db	65	;'A'
   554  00FF42  41                 	db	65	;'A'
   555  00FF43  2C                 	db	44
   556  00FF44  39                 	db	57	;'9'
   557  00FF45  56                 	db	86	;'V'
   558  00FF46  2C                 	db	44
   559  00FF47  43                 	db	67	;'C'
   560  00FF48  2C                 	db	44
   561  00FF49  6F                 	db	111	;'o'
   562  00FF4A  74                 	db	116	;'t'
   563  00FF4B  68                 	db	104	;'h'
   564  00FF4C  65                 	db	101	;'e'
   565  00FF4D  72                 	db	114	;'r'
   566  00FF4E  5D                 	db	93	;']'
   567  00FF4F  20                 	db	32
   568  00FF50  0A                 	db	10
   569  00FF51  00                 	db	0
   570  00FF52                     STR_19:
   571  00FF52  30                 	db	48	;'0'
   572  00FF53  31                 	db	49	;'1'
   573  00FF54  32                 	db	50	;'2'
   574  00FF55  33                 	db	51	;'3'
   575  00FF56  34                 	db	52	;'4'
   576  00FF57  35                 	db	53	;'5'
   577  00FF58  36                 	db	54	;'6'
   578  00FF59  37                 	db	55	;'7'
   579  00FF5A  38                 	db	56	;'8'
   580  00FF5B  39                 	db	57	;'9'
   581  00FF5C  61                 	db	97	;'a'
   582  00FF5D  62                 	db	98	;'b'
   583  00FF5E  63                 	db	99	;'c'
   584  00FF5F  64                 	db	100	;'d'
   585  00FF60  65                 	db	101	;'e'
   586  00FF61  66                 	db	102	;'f'
   587  00FF62  00                 	db	0
   588  00FF63  20                 	db	32
   589  00FF64  20                 	db	32
   590  00FF65  20                 	db	32
   591  00FF66  20                 	db	32
   592  00FF67  20                 	db	32
   593  00FF68  20                 	db	32
   594  00FF69  20                 	db	32
   595  00FF6A  20                 	db	32
   596  00FF6B  20                 	db	32
   597  00FF6C  20                 	db	32
   598  00FF6D  20                 	db	32
   599  00FF6E  20                 	db	32
   600  00FF6F  20                 	db	32
   601  00FF70  20                 	db	32
   602  00FF71  2A                 	db	42
   603  00FF72  3E                 	db	62	;'>'
   604  00FF73  00                 	db	0
   605  00FF74  5B                 	db	91	;'['
   606  00FF75  31                 	db	49	;'1'
   607  00FF76  2C                 	db	44
   608  00FF77  32                 	db	50	;'2'
   609  00FF78  2C                 	db	44
   610  00FF79  33                 	db	51	;'3'
   611  00FF7A  2C                 	db	44
   612  00FF7B  34                 	db	52	;'4'
   613  00FF7C  5D                 	db	93	;']'
   614  00FF7D  20                 	db	32
   615  00FF7E  20                 	db	32
   616  00FF7F  20                 	db	32
   617  00FF80  20                 	db	32
   618  00FF81  20                 	db	32
   619  00FF82  2A                 	db	42
   620  00FF83  3E                 	db	62	;'>'
   621  00FF84  00                 	db	0
   622  00FF85  68                 	db	104	;'h'
   623  00FF86  69                 	db	105	;'i'
   624  00FF87  73                 	db	115	;'s'
   625  00FF88  74                 	db	116	;'t'
   626  00FF89  6F                 	db	111	;'o'
   627  00FF8A  72                 	db	114	;'r'
   628  00FF8B  79                 	db	121	;'y'
   629  00FF8C  20                 	db	32
   630  00FF8D  3C                 	db	60	;'<'
   631  00FF8E  43                 	db	67	;'C'
   632  00FF8F  20                 	db	32
   633  00FF90  20                 	db	32
   634  00FF91  20                 	db	32
   635  00FF92  20                 	db	32
   636  00FF93  2A                 	db	42
   637  00FF94  3E                 	db	62	;'>'
   638  00FF95  00                 	db	0
   639  00FF96  20                 	db	32
   640  00FF97  20                 	db	32
   641  00FF98  20                 	db	32
   642  00FF99  73                 	db	115	;'s'
   643  00FF9A  74                 	db	116	;'t'
   644  00FF9B  61                 	db	97	;'a'
   645  00FF9C  74                 	db	116	;'t'
   646  00FF9D  73                 	db	115	;'s'
   647  00FF9E  20                 	db	32
   648  00FF9F  3C                 	db	60	;'<'
   649  00FFA0  42                 	db	66	;'B'
   650  00FFA1  20                 	db	32
   651  00FFA2  20                 	db	32
   652  00FFA3  20                 	db	32
   653  00FFA4  2A                 	db	42
   654  00FFA5  3E                 	db	62	;'>'
   655  00FFA6  00                 	db	0
   656  00FFA7  5B                 	db	91	;'['
   657  00FFA8  6E                 	db	110	;'n'
   658  00FFA9  6E                 	db	110	;'n'
   659  00FFAA  2C                 	db	44
   660  00FFAB  6E                 	db	110	;'n'
   661  00FFAC  2C                 	db	44
   662  00FFAD  6E                 	db	110	;'n'
   663  00FFAE  2C                 	db	44
   664  00FFAF  6E                 	db	110	;'n'
   665  00FFB0  6E                 	db	110	;'n'
   666  00FFB1  5D                 	db	93	;']'
   667  00FFB2  20                 	db	32
   668  00FFB3  20                 	db	32
   669  00FFB4  20                 	db	32
   670  00FFB5  2A                 	db	42
   671  00FFB6  3E                 	db	62	;'>'
   672  00FFB7  00                 	db	0
   673  00FFB8  20                 	db	32
   674  00FFB9  20                 	db	32
   675  00FFBA  6D                 	db	109	;'m'
   676  00FFBB  6D                 	db	109	;'m'
   677  00FFBC  3A                 	db	58	;':'
   678  00FFBD  64                 	db	100	;'d'
   679  00FFBE  64                 	db	100	;'d'
   680  00FFBF  3A                 	db	58	;':'
   681  00FFC0  79                 	db	121	;'y'
   682  00FFC1  79                 	db	121	;'y'
   683  00FFC2  20                 	db	32
   684  00FFC3  20                 	db	32
   685  00FFC4  20                 	db	32
   686  00FFC5  20                 	db	32
   687  00FFC6  41                 	db	65	;'A'
   688  00FFC7  3E                 	db	62	;'>'
   689  00FFC8  00                 	db	0
   690  00FFC9                     STR_2:
   691  00FFC9  74                 	db	116	;'t'
   692  00FFCA  69                 	db	105	;'i'
   693  00FFCB  6D                 	db	109	;'m'
   694  00FFCC  65                 	db	101	;'e'
   695  00FFCD  20                 	db	32
   696  00FFCE  25                 	db	37
   697  00FFCF  30                 	db	48	;'0'
   698  00FFD0  32                 	db	50	;'2'
   699  00FFD1  6C                 	db	108	;'l'
   700  00FFD2  64                 	db	100	;'d'
   701  00FFD3  3A                 	db	58	;':'
   702  00FFD4  25                 	db	37
   703  00FFD5  30                 	db	48	;'0'
   704  00FFD6  32                 	db	50	;'2'
   705  00FFD7  6C                 	db	108	;'l'
   706  00FFD8  64                 	db	100	;'d'
   707  00FFD9  00                 	db	0
   708  00FFDA                     STR_5:
   709  00FFDA  70                 	db	112	;'p'
   710  00FFDB  65                 	db	101	;'e'
   711  00FFDC  72                 	db	114	;'r'
   712  00FFDD  69                 	db	105	;'i'
   713  00FFDE  6F                 	db	111	;'o'
   714  00FFDF  64                 	db	100	;'d'
   715  00FFE0  20                 	db	32
   716  00FFE1  25                 	db	37
   717  00FFE2  6C                 	db	108	;'l'
   718  00FFE3  64                 	db	100	;'d'
   719  00FFE4  00                 	db	0
   720  00FFE5                     STR_3:
   721  00FFE5  66                 	db	102	;'f'
   722  00FFE6  69                 	db	105	;'i'
   723  00FFE7  6E                 	db	110	;'n'
   724  00FFE8  69                 	db	105	;'i'
   725  00FFE9  73                 	db	115	;'s'
   726  00FFEA  68                 	db	104	;'h'
   727  00FFEB  65                 	db	101	;'e'
   728  00FFEC  64                 	db	100	;'d'
   729  00FFED  00                 	db	0
   730  00FFEE  74                 	db	116	;'t'
   731  00FFEF  31                 	db	49	;'1'
   732  00FFF0  3A                 	db	58	;':'
   733  00FFF1  20                 	db	32
   734  00FFF2  25                 	db	37
   735  00FFF3  78                 	db	120	;'x'
   736  00FFF4  20                 	db	32
   737  00FFF5  00                 	db	0
   738  00FFF6                     STR_1:
   739  00FFF6  72                 	db	114	;'r'
   740  00FFF7  75                 	db	117	;'u'
   741  00FFF8  6E                 	db	110	;'n'
   742  00FFF9  6E                 	db	110	;'n'
   743  00FFFA  69                 	db	105	;'i'
   744  00FFFB  6E                 	db	110	;'n'
   745  00FFFC  67                 	db	103	;'g'
   746  00FFFD  00                 	db	0
   747                           
   748                           ; #config settings
   749  00FFFE  00                 	db	0	; dummy byte at the end
   750  0000                     
   751                           	psect	cinit
   752  005586                     __pcinit:
   753                           	opt stack 0
   754  005586                     start_initialization:
   755                           	opt stack 0
   756  005586                     __initialization:
   757                           	opt stack 0
   758                           
   759                           ; Initialize objects allocated to BANK1 (61 bytes)
   760                           ; load TBLPTR registers with __pidataBANK1
   761  005586  0ED0               	movlw	low __pidataBANK1
   762  005588  6EF6               	movwf	tblptrl,c
   763  00558A  0E56               	movlw	high __pidataBANK1
   764  00558C  6EF7               	movwf	tblptrh,c
   765  00558E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   766  005590  6EF8               	movwf	tblptru,c
   767  005592  EE01  F05B         	lfsr	0,__pdataBANK1
   768  005596  EE10 F03D          	lfsr	1,61
   769  00559A                     copy_data0:
   770  00559A  0009               	tblrd		*+
   771  00559C  CFF5 FFEE          	movff	tablat,postinc0
   772  0055A0  50E5               	movf	postdec1,w,c
   773  0055A2  50E1               	movf	fsr1l,w,c
   774  0055A4  E1FA               	bnz	copy_data0
   775                           
   776                           ; Clear objects allocated to BANK1 (32 bytes)
   777  0055A6  EE01  F098         	lfsr	0,__pbssBANK1
   778  0055AA  0E20               	movlw	32
   779  0055AC                     clear_0:
   780  0055AC  6AEE               	clrf	postinc0,c
   781  0055AE  06E8               	decf	wreg,f,c
   782  0055B0  E1FD               	bnz	clear_0
   783                           
   784                           ; Clear objects allocated to BANK0 (2 bytes)
   785  0055B2  0100               	movlb	0
   786  0055B4  6BFF               	clrf	(__pbssBANK0+1)& (0+255),b
   787  0055B6  6BFE               	clrf	__pbssBANK0& (0+255),b
   788                           
   789                           ; Clear objects allocated to COMRAM (3 bytes)
   790  0055B8  6A7D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   791  0055BA  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   792  0055BC  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   793  0055BE                     end_of_initialization:
   794                           	opt stack 0
   795  0055BE                     __end_of__initialization:
   796                           	opt stack 0
   797  0055BE  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   798  0055C0  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   799  0055C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   800  0055C4  6EF8               	movwf	tblptru,c
   801  0055C6  0100               	movlb	0
   802  0055C8  EF0E  F014         	goto	_main	;jump to C main() function
   803                           tblptru	equ	0xFF8
   804                           tblptrh	equ	0xFF7
   805                           tblptrl	equ	0xFF6
   806                           tablat	equ	0xFF5
   807                           postinc0	equ	0xFEE
   808                           wreg	equ	0xFE8
   809                           postdec1	equ	0xFE5
   810                           fsr1l	equ	0xFE1
   811                           
   812                           	psect	bssCOMRAM
   813  00007B                     __pbssCOMRAM:
   814                           	opt stack 0
   815  00007B                     _curr:
   816                           	opt stack 0
   817  00007B                     	ds	2
   818  00007D                     _lastKey:
   819                           	opt stack 0
   820  00007D                     	ds	1
   821                           tblptru	equ	0xFF8
   822                           tblptrh	equ	0xFF7
   823                           tblptrl	equ	0xFF6
   824                           tablat	equ	0xFF5
   825                           postinc0	equ	0xFEE
   826                           wreg	equ	0xFE8
   827                           postdec1	equ	0xFE5
   828                           fsr1l	equ	0xFE1
   829                           
   830                           	psect	bssBANK0
   831  0000FE                     __pbssBANK0:
   832                           	opt stack 0
   833  0000FE                     _n:
   834                           	opt stack 0
   835  0000FE                     	ds	2
   836                           tblptru	equ	0xFF8
   837                           tblptrh	equ	0xFF7
   838                           tblptrl	equ	0xFF6
   839                           tablat	equ	0xFF5
   840                           postinc0	equ	0xFEE
   841                           wreg	equ	0xFE8
   842                           postdec1	equ	0xFE5
   843                           fsr1l	equ	0xFE1
   844                           
   845                           	psect	bssBANK1
   846  000198                     __pbssBANK1:
   847                           	opt stack 0
   848  000198                     _pulse:
   849                           	opt stack 0
   850  000198                     	ds	8
   851  0001A0                     _servos:
   852                           	opt stack 0
   853  0001A0                     	ds	8
   854  0001A8                     _padPin3:
   855                           	opt stack 0
   856  0001A8                     	ds	4
   857  0001AC                     _time:
   858                           	opt stack 0
   859  0001AC                     	ds	4
   860  0001B0                     _batteryDetected:
   861                           	opt stack 0
   862  0001B0                     	ds	2
   863  0001B2                     _count:
   864                           	opt stack 0
   865  0001B2                     	ds	2
   866  0001B4                     _prevTime:
   867                           	opt stack 0
   868  0001B4                     	ds	2
   869  0001B6                     _terminate:
   870                           	opt stack 0
   871  0001B6                     	ds	2
   872                           tblptru	equ	0xFF8
   873                           tblptrh	equ	0xFF7
   874                           tblptrl	equ	0xFF6
   875                           tablat	equ	0xFF5
   876                           postinc0	equ	0xFEE
   877                           wreg	equ	0xFE8
   878                           postdec1	equ	0xFE5
   879                           fsr1l	equ	0xFE1
   880                           
   881                           	psect	dataBANK1
   882  00015B                     __pdataBANK1:
   883                           	opt stack 0
   884  00015B                     _V_LIM_9V:
   885                           	opt stack 0
   886  00015B                     	ds	3
   887  00015E                     _V_LIM_AA:
   888                           	opt stack 0
   889  00015E                     	ds	3
   890  000161                     _V_LIM_C:
   891                           	opt stack 0
   892  000161                     	ds	3
   893  000164                     _angle:
   894                           	opt stack 0
   895  000164                     	ds	2
   896  000166                     _padAngle_CLOSE:
   897                           	opt stack 0
   898  000166                     	ds	2
   899  000168                     _padAngle_NEUTRAL:
   900                           	opt stack 0
   901  000168                     	ds	2
   902  00016A                     _padAngle_OPEN:
   903                           	opt stack 0
   904  00016A                     	ds	2
   905  00016C                     _period:
   906                           	opt stack 0
   907  00016C                     	ds	2
   908  00016E                     _redirectAngle_9V:
   909                           	opt stack 0
   910  00016E                     	ds	2
   911  000170                     _redirectAngle_AA:
   912                           	opt stack 0
   913  000170                     	ds	2
   914  000172                     _redirectAngle_C:
   915                           	opt stack 0
   916  000172                     	ds	2
   917  000174                     _redirectAngle_OTHER:
   918                           	opt stack 0
   919  000174                     	ds	2
   920  000176                     _stoppingTime:
   921                           	opt stack 0
   922  000176                     	ds	2
   923  000178                     _AA_float:
   924                           	opt stack 0
   925  000178                     	ds	4
   926  00017C                     _conveyorServo:
   927                           	opt stack 0
   928  00017C                     	ds	4
   929  000180                     _cylinderDir:
   930                           	opt stack 0
   931  000180                     	ds	4
   932  000184                     _cylinderMotor:
   933                           	opt stack 0
   934  000184                     	ds	4
   935  000188                     _padPin1:
   936                           	opt stack 0
   937  000188                     	ds	4
   938  00018C                     _padPin2:
   939                           	opt stack 0
   940  00018C                     	ds	4
   941  000190                     _padServo:
   942                           	opt stack 0
   943  000190                     	ds	4
   944  000194                     _redirectingServo:
   945                           	opt stack 0
   946  000194                     	ds	4
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           postdec1	equ	0xFE5
   954                           fsr1l	equ	0xFE1
   955                           
   956                           	psect	cstackBANK1
   957  000100                     __pcstackBANK1:
   958                           	opt stack 0
   959  000100                     _printf$1351:
   960                           	opt stack 0
   961                           
   962                           ; 3 bytes @ 0x0
   963  000100                     	ds	3
   964  000103                     printf@cp:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x3
   968  000103                     	ds	2
   969  000105                     printf@idx:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x5
   973  000105                     	ds	1
   974  000106                     printf@len:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x6
   978  000106                     	ds	2
   979  000108                     printf@ap:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x8
   983  000108                     	ds	2
   984  00010A                     printf@tmpval:
   985                           	opt stack 0
   986                           
   987                           ; 4 bytes @ 0xA
   988  00010A                     	ds	4
   989  00010E                     printf@exp:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0xE
   993  00010E                     	ds	2
   994  000110                     printf@val:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0x10
   998  000110                     	ds	4
   999  000114                     printf@fval:
  1000                           	opt stack 0
  1001                           
  1002                           ; 3 bytes @ 0x14
  1003  000114                     	ds	3
  1004  000117                     printf@width:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x17
  1008  000117                     	ds	2
  1009  000119                     printf@flag:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x19
  1013  000119                     	ds	2
  1014  00011B                     printf@prec:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x1B
  1018  00011B                     	ds	2
  1019  00011D                     printf@c:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x1D
  1023  00011D                     	ds	1
  1024  00011E                     sortBattery@Vs:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x1E
  1028  00011E                     	ds	3
  1029  000121                     sortBattery@V_float:
  1030                           	opt stack 0
  1031                           
  1032                           ; 3 bytes @ 0x21
  1033  000121                     	ds	3
  1034  000124                     sortBattery@pos_v_counter:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x24
  1038  000124                     	ds	2
  1039  000126                     _sortBattery$1346:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x26
  1043  000126                     	ds	2
  1044  000128                     sortBattery@V:
  1045                           	opt stack 0
  1046                           
  1047                           ; 3 bytes @ 0x28
  1048  000128                     	ds	3
  1049  00012B                     sortBattery@V_max:
  1050                           	opt stack 0
  1051                           
  1052                           ; 3 bytes @ 0x2B
  1053  00012B                     	ds	3
  1054  00012E                     sortBattery@targetAngle:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x2E
  1058  00012E                     	ds	2
  1059  000130                     sortBattery@i_219:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x30
  1063  000130                     	ds	2
  1064  000132                     sortBattery@signal:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x32
  1068  000132                     	ds	1
  1069  000133                     sortBattery@Vcc:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x33
  1073  000133                     	ds	3
  1074  000136                     sortBattery@resolution:
  1075                           	opt stack 0
  1076                           
  1077                           ; 3 bytes @ 0x36
  1078  000136                     	ds	3
  1079  000139                     sortBattery@Vf:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x39
  1083  000139                     	ds	3
  1084  00013C                     sortBattery@i:
  1085                           	opt stack 0
  1086                           
  1087                           ; 3 bytes @ 0x3C
  1088  00013C                     	ds	3
  1089  00013F                     sortBattery@V_216:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0x3F
  1093  00013F                     	ds	3
  1094  000142                     ??_main:
  1095                           
  1096                           ; 1 bytes @ 0x42
  1097  000142                     	ds	13
  1098  00014F                     main@cylinderForward:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x4F
  1102  00014F                     	ds	2
  1103  000151                     main@cylinderBackward:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x51
  1107  000151                     	ds	2
  1108  000153                     main@lastBatteryTime:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x53
  1112  000153                     	ds	2
  1113  000155                     main@cylinderStart:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x55
  1117  000155                     	ds	2
  1118  000157                     main@cylinderDur:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x57
  1122  000157                     	ds	2
  1123  000159                     main@prev:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x59
  1127  000159                     	ds	2
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           postinc0	equ	0xFEE
  1133                           wreg	equ	0xFE8
  1134                           postdec1	equ	0xFE5
  1135                           fsr1l	equ	0xFE1
  1136                           
  1137                           	psect	cstackBANK0
  1138  000080                     __pcstackBANK0:
  1139                           	opt stack 0
  1140  000080                     ??_isdigit:
  1141  000080                     ?_digitalRead:
  1142                           	opt stack 0
  1143  000080                     ?___awmod:
  1144                           	opt stack 0
  1145  000080                     ?___ftpack:
  1146                           	opt stack 0
  1147  000080                     ?___ftneg:
  1148                           	opt stack 0
  1149  000080                     ?_analogRead:
  1150                           	opt stack 0
  1151  000080                     ?__tdiv_to_l_:
  1152                           	opt stack 0
  1153  000080                     ?__div_to_l_:
  1154                           	opt stack 0
  1155  000080                     ?___aldiv:
  1156                           	opt stack 0
  1157  000080                     ?___lldiv:
  1158                           	opt stack 0
  1159  000080                     lcdNibble@temp:
  1160                           	opt stack 0
  1161  000080                     readKeypad@key:
  1162                           	opt stack 0
  1163  000080                     digitalRead@pin:
  1164                           	opt stack 0
  1165  000080                     digitalWrite@pin:
  1166                           	opt stack 0
  1167  000080                     analogRead@channel:
  1168                           	opt stack 0
  1169  000080                     initTimer@timer:
  1170                           	opt stack 0
  1171  000080                     startTimer@timer:
  1172                           	opt stack 0
  1173  000080                     ___awmod@dividend:
  1174                           	opt stack 0
  1175  000080                     __div_to_l_@f1:
  1176                           	opt stack 0
  1177  000080                     ___ftpack@arg:
  1178                           	opt stack 0
  1179  000080                     __tdiv_to_l_@f1:
  1180                           	opt stack 0
  1181  000080                     ___ftneg@f1:
  1182                           	opt stack 0
  1183  000080                     ___aldiv@dividend:
  1184                           	opt stack 0
  1185  000080                     ___lldiv@dividend:
  1186                           	opt stack 0
  1187                           
  1188                           ; 4 bytes @ 0x0
  1189  000080                     	ds	1
  1190  000081                     lcdNibble@data:
  1191                           	opt stack 0
  1192  000081                     _isdigit$976:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x1
  1196  000081                     	ds	1
  1197  000082                     ??_initTimer:
  1198  000082                     ??_digitalRead:
  1199  000082                     ??_lcdInst:
  1200  000082                     isdigit@c:
  1201                           	opt stack 0
  1202  000082                     digitalWrite@val:
  1203                           	opt stack 0
  1204  000082                     ___awmod@divisor:
  1205                           	opt stack 0
  1206  000082                     startTimer@val:
  1207                           	opt stack 0
  1208                           
  1209                           ; 4 bytes @ 0x2
  1210  000082                     	ds	1
  1211  000083                     lcdInst@data:
  1212                           	opt stack 0
  1213  000083                     ___ftpack@exp:
  1214                           	opt stack 0
  1215  000083                     __div_to_l_@f2:
  1216                           	opt stack 0
  1217  000083                     __tdiv_to_l_@f2:
  1218                           	opt stack 0
  1219                           
  1220                           ; 3 bytes @ 0x3
  1221  000083                     	ds	1
  1222  000084                     ??_initLCD:
  1223  000084                     ??_digitalWrite:
  1224  000084                     ??_analogRead:
  1225  000084                     putch@data:
  1226                           	opt stack 0
  1227  000084                     ___awmod@counter:
  1228                           	opt stack 0
  1229  000084                     ___ftpack@sign:
  1230                           	opt stack 0
  1231  000084                     ___aldiv@divisor:
  1232                           	opt stack 0
  1233  000084                     ___lldiv@divisor:
  1234                           	opt stack 0
  1235                           
  1236                           ; 4 bytes @ 0x4
  1237  000084                     	ds	1
  1238  000085                     ??___ftpack:
  1239  000085                     ___awmod@sign:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x5
  1243  000085                     	ds	1
  1244  000086                     ??_startTimer:
  1245  000086                     ??__tdiv_to_l_:
  1246  000086                     ?___awdiv:
  1247                           	opt stack 0
  1248  000086                     ___awdiv@dividend:
  1249                           	opt stack 0
  1250  000086                     __div_to_l_@quot:
  1251                           	opt stack 0
  1252                           
  1253                           ; 4 bytes @ 0x6
  1254  000086                     	ds	1
  1255  000087                     digitalWrite@p:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x7
  1259  000087                     	ds	1
  1260  000088                     ?___altoft:
  1261                           	opt stack 0
  1262  000088                     ?___awtoft:
  1263                           	opt stack 0
  1264  000088                     ?___lltoft:
  1265                           	opt stack 0
  1266  000088                     ___aldiv@counter:
  1267                           	opt stack 0
  1268  000088                     ___awdiv@divisor:
  1269                           	opt stack 0
  1270  000088                     ___awtoft@c:
  1271                           	opt stack 0
  1272  000088                     ___altoft@c:
  1273                           	opt stack 0
  1274  000088                     ___lldiv@quotient:
  1275                           	opt stack 0
  1276  000088                     ___lltoft@c:
  1277                           	opt stack 0
  1278                           
  1279                           ; 4 bytes @ 0x8
  1280  000088                     	ds	1
  1281  000089                     ___aldiv@sign:
  1282                           	opt stack 0
  1283  000089                     __tdiv_to_l_@quot:
  1284                           	opt stack 0
  1285                           
  1286                           ; 4 bytes @ 0x9
  1287  000089                     	ds	1
  1288  00008A                     ___awdiv@counter:
  1289                           	opt stack 0
  1290  00008A                     __div_to_l_@cntr:
  1291                           	opt stack 0
  1292  00008A                     ___aldiv@quotient:
  1293                           	opt stack 0
  1294                           
  1295                           ; 4 bytes @ 0xA
  1296  00008A                     	ds	1
  1297  00008B                     ___awdiv@sign:
  1298                           	opt stack 0
  1299  00008B                     ___awtoft@sign:
  1300                           	opt stack 0
  1301  00008B                     __div_to_l_@exp1:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0xB
  1305  00008B                     	ds	1
  1306  00008C                     ??___altoft:
  1307  00008C                     ??___lltoft:
  1308  00008C                     ___lldiv@counter:
  1309                           	opt stack 0
  1310  00008C                     ___awdiv@quotient:
  1311                           	opt stack 0
  1312  00008C                     ___ftge@ff1:
  1313                           	opt stack 0
  1314                           
  1315                           ; 3 bytes @ 0xC
  1316  00008C                     	ds	1
  1317  00008D                     ?___llmod:
  1318                           	opt stack 0
  1319  00008D                     __tdiv_to_l_@cntr:
  1320                           	opt stack 0
  1321  00008D                     ___llmod@dividend:
  1322                           	opt stack 0
  1323                           
  1324                           ; 4 bytes @ 0xD
  1325  00008D                     	ds	1
  1326  00008E                     ?___wmul:
  1327                           	opt stack 0
  1328  00008E                     ?___almod:
  1329                           	opt stack 0
  1330  00008E                     __tdiv_to_l_@exp1:
  1331                           	opt stack 0
  1332  00008E                     ___wmul@multiplier:
  1333                           	opt stack 0
  1334  00008E                     ___almod@dividend:
  1335                           	opt stack 0
  1336                           
  1337                           ; 4 bytes @ 0xE
  1338  00008E                     	ds	1
  1339  00008F                     ___ftge@ff2:
  1340                           	opt stack 0
  1341                           
  1342                           ; 3 bytes @ 0xF
  1343  00008F                     	ds	1
  1344  000090                     ___altoft@exp:
  1345                           	opt stack 0
  1346  000090                     ___lltoft@exp:
  1347                           	opt stack 0
  1348  000090                     ___wmul@multiplicand:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0x10
  1352  000090                     	ds	1
  1353  000091                     ___altoft@sign:
  1354                           	opt stack 0
  1355  000091                     ___llmod@divisor:
  1356                           	opt stack 0
  1357                           
  1358                           ; 4 bytes @ 0x11
  1359  000091                     	ds	1
  1360  000092                     ??___ftge:
  1361  000092                     ?___ftdiv:
  1362                           	opt stack 0
  1363  000092                     ___wmul@product:
  1364                           	opt stack 0
  1365  000092                     ___ftdiv@f1:
  1366                           	opt stack 0
  1367  000092                     ___almod@divisor:
  1368                           	opt stack 0
  1369                           
  1370                           ; 4 bytes @ 0x12
  1371  000092                     	ds	3
  1372  000095                     ___llmod@counter:
  1373                           	opt stack 0
  1374  000095                     ___ftdiv@f2:
  1375                           	opt stack 0
  1376                           
  1377                           ; 3 bytes @ 0x15
  1378  000095                     	ds	1
  1379  000096                     ___almod@counter:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x16
  1383  000096                     	ds	1
  1384  000097                     ___almod@sign:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x17
  1388  000097                     	ds	1
  1389  000098                     ??___ftdiv:
  1390                           
  1391                           ; 1 bytes @ 0x18
  1392  000098                     	ds	3
  1393  00009B                     ___ftdiv@cntr:
  1394                           	opt stack 0
  1395                           
  1396                           ; 1 bytes @ 0x1B
  1397  00009B                     	ds	1
  1398  00009C                     ___ftdiv@f3:
  1399                           	opt stack 0
  1400                           
  1401                           ; 3 bytes @ 0x1C
  1402  00009C                     	ds	3
  1403  00009F                     ___ftdiv@exp:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x1F
  1407  00009F                     	ds	1
  1408  0000A0                     ___ftdiv@sign:
  1409                           	opt stack 0
  1410                           
  1411                           ; 1 bytes @ 0x20
  1412  0000A0                     	ds	1
  1413  0000A1                     ?___ftmul:
  1414                           	opt stack 0
  1415  0000A1                     ___ftmul@f1:
  1416                           	opt stack 0
  1417                           
  1418                           ; 3 bytes @ 0x21
  1419  0000A1                     	ds	3
  1420  0000A4                     ___ftmul@f2:
  1421                           	opt stack 0
  1422                           
  1423                           ; 3 bytes @ 0x24
  1424  0000A4                     	ds	3
  1425  0000A7                     ??___ftmul:
  1426                           
  1427                           ; 1 bytes @ 0x27
  1428  0000A7                     	ds	3
  1429  0000AA                     ___ftmul@exp:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x2A
  1433  0000AA                     	ds	1
  1434  0000AB                     ___ftmul@f3_as_product:
  1435                           	opt stack 0
  1436                           
  1437                           ; 3 bytes @ 0x2B
  1438  0000AB                     	ds	3
  1439  0000AE                     ___ftmul@cntr:
  1440                           	opt stack 0
  1441                           
  1442                           ; 1 bytes @ 0x2E
  1443  0000AE                     	ds	1
  1444  0000AF                     ___ftmul@sign:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x2F
  1448  0000AF                     	ds	1
  1449  0000B0                     ?_fround:
  1450                           	opt stack 0
  1451  0000B0                     ?_scale:
  1452                           	opt stack 0
  1453                           
  1454                           ; 3 bytes @ 0x30
  1455  0000B0                     	ds	3
  1456  0000B3                     _fround$1349:
  1457                           	opt stack 0
  1458  0000B3                     _scale$1350:
  1459                           	opt stack 0
  1460                           
  1461                           ; 3 bytes @ 0x33
  1462  0000B3                     	ds	3
  1463  0000B6                     scale@scl:
  1464                           	opt stack 0
  1465  0000B6                     _fround$1348:
  1466                           	opt stack 0
  1467                           
  1468                           ; 3 bytes @ 0x36
  1469  0000B6                     	ds	3
  1470  0000B9                     fround@prec:
  1471                           	opt stack 0
  1472                           
  1473                           ; 1 bytes @ 0x39
  1474  0000B9                     	ds	1
  1475  0000BA                     ?___ftadd:
  1476                           	opt stack 0
  1477  0000BA                     ___ftadd@f1:
  1478                           	opt stack 0
  1479                           
  1480                           ; 3 bytes @ 0x3A
  1481  0000BA                     	ds	3
  1482  0000BD                     ___ftadd@f2:
  1483                           	opt stack 0
  1484                           
  1485                           ; 3 bytes @ 0x3D
  1486  0000BD                     	ds	3
  1487  0000C0                     ??___ftadd:
  1488                           
  1489                           ; 1 bytes @ 0x40
  1490  0000C0                     	ds	3
  1491  0000C3                     ___ftadd@sign:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x43
  1495  0000C3                     	ds	1
  1496  0000C4                     ___ftadd@exp2:
  1497                           	opt stack 0
  1498                           
  1499                           ; 1 bytes @ 0x44
  1500  0000C4                     	ds	1
  1501  0000C5                     ___ftadd@exp1:
  1502                           	opt stack 0
  1503                           
  1504                           ; 1 bytes @ 0x45
  1505  0000C5                     	ds	1
  1506  0000C6                     ?___ftsub:
  1507                           	opt stack 0
  1508  0000C6                     ?___fttol:
  1509                           	opt stack 0
  1510  0000C6                     ___ftsub@f1:
  1511                           	opt stack 0
  1512  0000C6                     ___fttol@f1:
  1513                           	opt stack 0
  1514                           
  1515                           ; 3 bytes @ 0x46
  1516  0000C6                     	ds	3
  1517  0000C9                     ___ftsub@f2:
  1518                           	opt stack 0
  1519                           
  1520                           ; 3 bytes @ 0x49
  1521  0000C9                     	ds	1
  1522  0000CA                     ??___fttol:
  1523                           
  1524                           ; 1 bytes @ 0x4A
  1525  0000CA                     	ds	2
  1526  0000CC                     
  1527                           ; 1 bytes @ 0x4C
  1528  0000CC                     	ds	3
  1529  0000CF                     ___fttol@sign1:
  1530                           	opt stack 0
  1531                           
  1532                           ; 1 bytes @ 0x4F
  1533  0000CF                     	ds	1
  1534  0000D0                     ___fttol@lval:
  1535                           	opt stack 0
  1536                           
  1537                           ; 4 bytes @ 0x50
  1538  0000D0                     	ds	4
  1539  0000D4                     ___fttol@exp1:
  1540                           	opt stack 0
  1541                           
  1542                           ; 1 bytes @ 0x54
  1543  0000D4                     	ds	1
  1544  0000D5                     ?_printf:
  1545                           	opt stack 0
  1546  0000D5                     ?_angleToPulse:
  1547                           	opt stack 0
  1548  0000D5                     angleToPulse@angle:
  1549                           	opt stack 0
  1550  0000D5                     printf@f:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x55
  1554  0000D5                     	ds	4
  1555  0000D9                     ??_angleToPulse:
  1556                           
  1557                           ; 1 bytes @ 0x59
  1558  0000D9                     	ds	4
  1559  0000DD                     angleToPulse@offset:
  1560                           	opt stack 0
  1561                           
  1562                           ; 4 bytes @ 0x5D
  1563  0000DD                     	ds	2
  1564  0000DF                     ??_printf:
  1565                           
  1566                           ; 1 bytes @ 0x5F
  1567  0000DF                     	ds	2
  1568  0000E1                     angleToPulse@a180:
  1569                           	opt stack 0
  1570                           
  1571                           ; 4 bytes @ 0x61
  1572  0000E1                     	ds	4
  1573  0000E5                     pause@message:
  1574                           	opt stack 0
  1575  0000E5                     _angleToPulse$1347:
  1576                           	opt stack 0
  1577                           
  1578                           ; 3 bytes @ 0x65
  1579  0000E5                     	ds	2
  1580  0000E7                     
  1581                           ; 1 bytes @ 0x67
  1582  0000E7                     	ds	1
  1583  0000E8                     angleToPulse@a000:
  1584                           	opt stack 0
  1585                           
  1586                           ; 4 bytes @ 0x68
  1587  0000E8                     	ds	4
  1588  0000EC                     setAngle@motor:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x6C
  1592  0000EC                     	ds	2
  1593  0000EE                     setAngle@angle:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x6E
  1597  0000EE                     	ds	2
  1598  0000F0                     ??_setAngle:
  1599                           
  1600                           ; 1 bytes @ 0x70
  1601  0000F0                     	ds	2
  1602  0000F2                     setAngle@period:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x72
  1606  0000F2                     	ds	2
  1607  0000F4                     setAngle@i:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x74
  1611  0000F4                     	ds	2
  1612  0000F6                     ??_sortBattery:
  1613  0000F6                     initServo@motor:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x76
  1617  0000F6                     	ds	2
  1618  0000F8                     initServo@angle:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x78
  1622  0000F8                     	ds	2
  1623  0000FA                     ??_initServo:
  1624                           
  1625                           ; 1 bytes @ 0x7A
  1626  0000FA                     	ds	4
  1627                           tblptru	equ	0xFF8
  1628                           tblptrh	equ	0xFF7
  1629                           tblptrl	equ	0xFF6
  1630                           tablat	equ	0xFF5
  1631                           postinc0	equ	0xFEE
  1632                           wreg	equ	0xFE8
  1633                           postdec1	equ	0xFE5
  1634                           fsr1l	equ	0xFE1
  1635                           
  1636                           	psect	cstackCOMRAM
  1637  000001                     __pcstackCOMRAM:
  1638                           	opt stack 0
  1639  000001                     ??i2_isdigit:
  1640  000001                     ?i2___awmod:
  1641                           	opt stack 0
  1642  000001                     ?i2___ftpack:
  1643                           	opt stack 0
  1644  000001                     ?i2___ftneg:
  1645                           	opt stack 0
  1646  000001                     ?i2__div_to_l_:
  1647                           	opt stack 0
  1648  000001                     ?i2__tdiv_to_l_:
  1649                           	opt stack 0
  1650  000001                     ?i2___lldiv:
  1651                           	opt stack 0
  1652  000001                     i2lcdNibble@temp:
  1653                           	opt stack 0
  1654  000001                     i2___awmod@dividend:
  1655                           	opt stack 0
  1656  000001                     i2__div_to_l_@f1:
  1657                           	opt stack 0
  1658  000001                     i2___ftpack@arg:
  1659                           	opt stack 0
  1660  000001                     i2__tdiv_to_l_@f1:
  1661                           	opt stack 0
  1662  000001                     i2___ftge@ff1:
  1663                           	opt stack 0
  1664  000001                     i2___ftneg@f1:
  1665                           	opt stack 0
  1666  000001                     i2___lldiv@dividend:
  1667                           	opt stack 0
  1668                           
  1669                           ; 4 bytes @ 0x0
  1670  000001                     	ds	1
  1671  000002                     i2lcdNibble@data:
  1672                           	opt stack 0
  1673  000002                     i2_isdigit$976:
  1674                           	opt stack 0
  1675                           
  1676                           ; 1 bytes @ 0x1
  1677  000002                     	ds	1
  1678  000003                     ??i2_lcdInst:
  1679  000003                     i2isdigit@c:
  1680                           	opt stack 0
  1681  000003                     i2___awmod@divisor:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x2
  1685  000003                     	ds	1
  1686  000004                     i2lcdInst@data:
  1687                           	opt stack 0
  1688  000004                     i2___ftpack@exp:
  1689                           	opt stack 0
  1690  000004                     i2__div_to_l_@f2:
  1691                           	opt stack 0
  1692  000004                     i2__tdiv_to_l_@f2:
  1693                           	opt stack 0
  1694  000004                     i2___ftge@ff2:
  1695                           	opt stack 0
  1696                           
  1697                           ; 3 bytes @ 0x3
  1698  000004                     	ds	1
  1699  000005                     i2putch@data:
  1700                           	opt stack 0
  1701  000005                     i2___awmod@counter:
  1702                           	opt stack 0
  1703  000005                     i2___ftpack@sign:
  1704                           	opt stack 0
  1705  000005                     i2___lldiv@divisor:
  1706                           	opt stack 0
  1707                           
  1708                           ; 4 bytes @ 0x4
  1709  000005                     	ds	1
  1710  000006                     ??i2___ftpack:
  1711  000006                     i2___awmod@sign:
  1712                           	opt stack 0
  1713                           
  1714                           ; 1 bytes @ 0x5
  1715  000006                     	ds	1
  1716  000007                     ??i2__tdiv_to_l_:
  1717  000007                     ??i2___ftge:
  1718  000007                     ?i2___awdiv:
  1719                           	opt stack 0
  1720  000007                     i2digitalWrite@pin:
  1721                           	opt stack 0
  1722  000007                     i2startTimer@timer:
  1723                           	opt stack 0
  1724  000007                     i2___awdiv@dividend:
  1725                           	opt stack 0
  1726  000007                     i2__div_to_l_@quot:
  1727                           	opt stack 0
  1728                           
  1729                           ; 4 bytes @ 0x6
  1730  000007                     	ds	2
  1731  000009                     ?i2___lltoft:
  1732                           	opt stack 0
  1733  000009                     i2digitalWrite@val:
  1734                           	opt stack 0
  1735  000009                     i2___awdiv@divisor:
  1736                           	opt stack 0
  1737  000009                     i2startTimer@val:
  1738                           	opt stack 0
  1739  000009                     i2___lldiv@quotient:
  1740                           	opt stack 0
  1741  000009                     i2___lltoft@c:
  1742                           	opt stack 0
  1743                           
  1744                           ; 4 bytes @ 0x8
  1745  000009                     	ds	1
  1746  00000A                     i2__tdiv_to_l_@quot:
  1747                           	opt stack 0
  1748                           
  1749                           ; 4 bytes @ 0x9
  1750  00000A                     	ds	1
  1751  00000B                     ??i2_digitalWrite:
  1752  00000B                     i2___awdiv@counter:
  1753                           	opt stack 0
  1754  00000B                     i2__div_to_l_@cntr:
  1755                           	opt stack 0
  1756                           
  1757                           ; 1 bytes @ 0xA
  1758  00000B                     	ds	1
  1759  00000C                     i2___awdiv@sign:
  1760                           	opt stack 0
  1761  00000C                     i2__div_to_l_@exp1:
  1762                           	opt stack 0
  1763                           
  1764                           ; 1 bytes @ 0xB
  1765  00000C                     	ds	1
  1766  00000D                     ??i2_startTimer:
  1767  00000D                     ??i2___lltoft:
  1768  00000D                     i2___lldiv@counter:
  1769                           	opt stack 0
  1770  00000D                     i2___awdiv@quotient:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0xC
  1774  00000D                     	ds	1
  1775  00000E                     ?i2___llmod:
  1776                           	opt stack 0
  1777  00000E                     i2__tdiv_to_l_@cntr:
  1778                           	opt stack 0
  1779  00000E                     i2digitalWrite@p:
  1780                           	opt stack 0
  1781  00000E                     i2___llmod@dividend:
  1782                           	opt stack 0
  1783                           
  1784                           ; 4 bytes @ 0xD
  1785  00000E                     	ds	1
  1786  00000F                     ?i2___wmul:
  1787                           	opt stack 0
  1788  00000F                     i2__tdiv_to_l_@exp1:
  1789                           	opt stack 0
  1790  00000F                     i2___wmul@multiplier:
  1791                           	opt stack 0
  1792                           
  1793                           ; 2 bytes @ 0xE
  1794  00000F                     	ds	1
  1795  000010                     ??_servoInterruptService:
  1796                           
  1797                           ; 1 bytes @ 0xF
  1798  000010                     	ds	1
  1799  000011                     i2___lltoft@exp:
  1800                           	opt stack 0
  1801  000011                     i2___wmul@multiplicand:
  1802                           	opt stack 0
  1803                           
  1804                           ; 2 bytes @ 0x10
  1805  000011                     	ds	1
  1806  000012                     i2___llmod@divisor:
  1807                           	opt stack 0
  1808                           
  1809                           ; 4 bytes @ 0x11
  1810  000012                     	ds	1
  1811  000013                     i2___wmul@product:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0x12
  1815  000013                     	ds	2
  1816  000015                     ?i2___ftmul:
  1817                           	opt stack 0
  1818  000015                     i2___ftmul@f1:
  1819                           	opt stack 0
  1820                           
  1821                           ; 3 bytes @ 0x14
  1822  000015                     	ds	1
  1823  000016                     i2___llmod@counter:
  1824                           	opt stack 0
  1825                           
  1826                           ; 1 bytes @ 0x15
  1827  000016                     	ds	2
  1828  000018                     i2___ftmul@f2:
  1829                           	opt stack 0
  1830                           
  1831                           ; 3 bytes @ 0x17
  1832  000018                     	ds	3
  1833  00001B                     ??i2___ftmul:
  1834                           
  1835                           ; 1 bytes @ 0x1A
  1836  00001B                     	ds	3
  1837  00001E                     i2___ftmul@exp:
  1838                           	opt stack 0
  1839                           
  1840                           ; 1 bytes @ 0x1D
  1841  00001E                     	ds	1
  1842  00001F                     i2___ftmul@f3_as_product:
  1843                           	opt stack 0
  1844                           
  1845                           ; 3 bytes @ 0x1E
  1846  00001F                     	ds	3
  1847  000022                     i2___ftmul@cntr:
  1848                           	opt stack 0
  1849                           
  1850                           ; 1 bytes @ 0x21
  1851  000022                     	ds	1
  1852  000023                     i2___ftmul@sign:
  1853                           	opt stack 0
  1854                           
  1855                           ; 1 bytes @ 0x22
  1856  000023                     	ds	1
  1857  000024                     ?i2_fround:
  1858                           	opt stack 0
  1859  000024                     ?i2_scale:
  1860                           	opt stack 0
  1861                           
  1862                           ; 3 bytes @ 0x23
  1863  000024                     	ds	3
  1864  000027                     i2_fround$1544:
  1865                           	opt stack 0
  1866  000027                     i2_scale$1545:
  1867                           	opt stack 0
  1868                           
  1869                           ; 3 bytes @ 0x26
  1870  000027                     	ds	3
  1871  00002A                     i2scale@scl:
  1872                           	opt stack 0
  1873  00002A                     i2_fround$1543:
  1874                           	opt stack 0
  1875                           
  1876                           ; 3 bytes @ 0x29
  1877  00002A                     	ds	1
  1878  00002B                     ?i2___fttol:
  1879                           	opt stack 0
  1880  00002B                     i2___fttol@f1:
  1881                           	opt stack 0
  1882                           
  1883                           ; 3 bytes @ 0x2A
  1884  00002B                     	ds	2
  1885  00002D                     i2fround@prec:
  1886                           	opt stack 0
  1887                           
  1888                           ; 1 bytes @ 0x2C
  1889  00002D                     	ds	1
  1890  00002E                     ?i2___ftadd:
  1891                           	opt stack 0
  1892  00002E                     i2___ftadd@f1:
  1893                           	opt stack 0
  1894                           
  1895                           ; 3 bytes @ 0x2D
  1896  00002E                     	ds	1
  1897  00002F                     ??i2___fttol:
  1898                           
  1899                           ; 1 bytes @ 0x2E
  1900  00002F                     	ds	2
  1901  000031                     i2___ftadd@f2:
  1902                           	opt stack 0
  1903                           
  1904                           ; 3 bytes @ 0x30
  1905  000031                     	ds	3
  1906  000034                     ??i2___ftadd:
  1907  000034                     i2___fttol@sign1:
  1908                           	opt stack 0
  1909                           
  1910                           ; 1 bytes @ 0x33
  1911  000034                     	ds	1
  1912  000035                     i2___fttol@lval:
  1913                           	opt stack 0
  1914                           
  1915                           ; 4 bytes @ 0x34
  1916  000035                     	ds	2
  1917  000037                     i2___ftadd@sign:
  1918                           	opt stack 0
  1919                           
  1920                           ; 1 bytes @ 0x36
  1921  000037                     	ds	1
  1922  000038                     i2___ftadd@exp2:
  1923                           	opt stack 0
  1924                           
  1925                           ; 1 bytes @ 0x37
  1926  000038                     	ds	1
  1927  000039                     i2___ftadd@exp1:
  1928                           	opt stack 0
  1929  000039                     i2___fttol@exp1:
  1930                           	opt stack 0
  1931                           
  1932                           ; 1 bytes @ 0x38
  1933  000039                     	ds	1
  1934  00003A                     ?i2___ftsub:
  1935                           	opt stack 0
  1936  00003A                     i2___ftsub@f1:
  1937                           	opt stack 0
  1938                           
  1939                           ; 3 bytes @ 0x39
  1940  00003A                     	ds	3
  1941  00003D                     i2___ftsub@f2:
  1942                           	opt stack 0
  1943                           
  1944                           ; 3 bytes @ 0x3C
  1945  00003D                     	ds	3
  1946  000040                     ?i2_printf:
  1947                           	opt stack 0
  1948  000040                     i2printf@f:
  1949                           	opt stack 0
  1950                           
  1951                           ; 2 bytes @ 0x3F
  1952  000040                     	ds	4
  1953  000044                     ??i2_printf:
  1954                           
  1955                           ; 1 bytes @ 0x43
  1956  000044                     	ds	6
  1957  00004A                     i2_printf$1546:
  1958                           	opt stack 0
  1959                           
  1960                           ; 3 bytes @ 0x49
  1961  00004A                     	ds	3
  1962  00004D                     i2printf@idx:
  1963                           	opt stack 0
  1964                           
  1965                           ; 1 bytes @ 0x4C
  1966  00004D                     	ds	1
  1967  00004E                     i2printf@cp:
  1968                           	opt stack 0
  1969                           
  1970                           ; 2 bytes @ 0x4D
  1971  00004E                     	ds	2
  1972  000050                     i2printf@len:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0x4F
  1976  000050                     	ds	2
  1977  000052                     i2printf@ap:
  1978                           	opt stack 0
  1979                           
  1980                           ; 2 bytes @ 0x51
  1981  000052                     	ds	2
  1982  000054                     i2printf@tmpval:
  1983                           	opt stack 0
  1984                           
  1985                           ; 4 bytes @ 0x53
  1986  000054                     	ds	4
  1987  000058                     i2printf@exp:
  1988                           	opt stack 0
  1989                           
  1990                           ; 2 bytes @ 0x57
  1991  000058                     	ds	2
  1992  00005A                     i2printf@fval:
  1993                           	opt stack 0
  1994                           
  1995                           ; 3 bytes @ 0x59
  1996  00005A                     	ds	3
  1997  00005D                     i2printf@val:
  1998                           	opt stack 0
  1999                           
  2000                           ; 4 bytes @ 0x5C
  2001  00005D                     	ds	4
  2002  000061                     i2printf@width:
  2003                           	opt stack 0
  2004                           
  2005                           ; 2 bytes @ 0x60
  2006  000061                     	ds	2
  2007  000063                     i2printf@flag:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x62
  2011  000063                     	ds	2
  2012  000065                     i2printf@prec:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x64
  2016  000065                     	ds	2
  2017  000067                     i2printf@c:
  2018                           	opt stack 0
  2019                           
  2020                           ; 1 bytes @ 0x66
  2021  000067                     	ds	1
  2022  000068                     ??_service:
  2023                           
  2024                           ; 1 bytes @ 0x67
  2025  000068                     	ds	18
  2026  00007A                     service@key:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0x79
  2030  00007A                     	ds	1
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           postinc0	equ	0xFEE
  2036                           wreg	equ	0xFE8
  2037                           postdec1	equ	0xFE5
  2038                           fsr1l	equ	0xFE1
  2039                           
  2040 ;;
  2041 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  2042 ;;
  2043 ;; *************** function _main *****************
  2044 ;; Defined at:
  2045 ;;		line 96 in file "main.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  prev            2   89[BANK1 ] int 
  2050 ;;  cylinderDur     2   87[BANK1 ] int 
  2051 ;;  cylinderStar    2   85[BANK1 ] int 
  2052 ;;  lastBatteryT    2   83[BANK1 ] int 
  2053 ;;  cylinderBack    2   81[BANK1 ] int 
  2054 ;;  cylinderForw    2   79[BANK1 ] int 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      void 
  2057 ;; Registers used:
  2058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;Total ram usage:       25 bytes
  2069 ;; Hardware stack levels required when called:   12
  2070 ;; This function calls:
  2071 ;;		___aldiv
  2072 ;;		___almod
  2073 ;;		_digitalRead
  2074 ;;		_digitalWrite
  2075 ;;		_initLCD
  2076 ;;		_initServo
  2077 ;;		_initTimer
  2078 ;;		_lcdClear
  2079 ;;		_lcdHome
  2080 ;;		_pause
  2081 ;;		_pinSetup
  2082 ;;		_printf
  2083 ;;		_sortBattery
  2084 ;;		_startTimer
  2085 ;; This function is called by:
  2086 ;;		Startup code after reset
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text0
  2091  00281C                     __ptext0:
  2092                           	opt stack 0
  2093  00281C                     _main:
  2094                           	opt stack 19
  2095                           
  2096                           ;main.c: 97: pinSetup();
  2097                           
  2098                           ;incstack = 0
  2099  00281C  EC49  F02B         	call	_pinSetup	;wreg free
  2100                           
  2101                           ;main.c: 98: initLCD();
  2102  002820  EC9E  F02A         	call	_initLCD	;wreg free
  2103  002824                     l6965:
  2104                           
  2105                           ;main.c: 106: time = 0;
  2106  002824  0E00               	movlw	0
  2107  002826  0101               	movlb	1	; () banked
  2108  002828  6FAC               	movwf	_time& (0+255),b
  2109  00282A  0E00               	movlw	0
  2110  00282C  6FAD               	movwf	(_time+1)& (0+255),b
  2111  00282E  0E00               	movlw	0
  2112  002830  6FAE               	movwf	(_time+2)& (0+255),b
  2113  002832  0E00               	movlw	0
  2114  002834  6FAF               	movwf	(_time+3)& (0+255),b
  2115                           
  2116                           ; BSR set to: 1
  2117                           ;main.c: 107: initTimer(1);
  2118  002836  0E00               	movlw	0
  2119  002838  0100               	movlb	0	; () banked
  2120  00283A  6F81               	movwf	(initTimer@timer+1)& (0+255),b
  2121  00283C  0E01               	movlw	1
  2122  00283E  6F80               	movwf	initTimer@timer& (0+255),b
  2123  002840  EC2B  F02A         	call	_initTimer	;wreg free
  2124                           
  2125                           ;main.c: 108: startTimer(1,0);
  2126  002844  0E00               	movlw	0
  2127  002846  0100               	movlb	0	; () banked
  2128  002848  6F81               	movwf	(startTimer@timer+1)& (0+255),b
  2129  00284A  0E01               	movlw	1
  2130  00284C  6F80               	movwf	startTimer@timer& (0+255),b
  2131  00284E  0E00               	movlw	0
  2132  002850  0100               	movlb	0	; () banked
  2133  002852  6F82               	movwf	startTimer@val& (0+255),b
  2134  002854  0E00               	movlw	0
  2135  002856  6F83               	movwf	(startTimer@val+1)& (0+255),b
  2136  002858  0E00               	movlw	0
  2137  00285A  6F84               	movwf	(startTimer@val+2)& (0+255),b
  2138  00285C  0E00               	movlw	0
  2139  00285E  6F85               	movwf	(startTimer@val+3)& (0+255),b
  2140  002860  EC03  F02A         	call	_startTimer	;wreg free
  2141                           
  2142                           ;main.c: 111: digitalWrite(cylinderMotor, 1);
  2143  002864  0E84               	movlw	low _cylinderMotor
  2144  002866  0100               	movlb	0	; () banked
  2145  002868  6F80               	movwf	digitalWrite@pin& (0+255),b
  2146  00286A  0E01               	movlw	high _cylinderMotor
  2147  00286C  0100               	movlb	0	; () banked
  2148  00286E  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2149  002870  0E00               	movlw	0
  2150  002872  0100               	movlb	0	; () banked
  2151  002874  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2152  002876  0E01               	movlw	1
  2153  002878  6F82               	movwf	digitalWrite@val& (0+255),b
  2154  00287A  EC89  F022         	call	_digitalWrite	;wreg free
  2155                           
  2156                           ;main.c: 112: initServo(conveyorServo, 130);
  2157  00287E  0E7C               	movlw	low _conveyorServo
  2158  002880  0100               	movlb	0	; () banked
  2159  002882  6FF6               	movwf	initServo@motor& (0+255),b
  2160  002884  0E01               	movlw	high _conveyorServo
  2161  002886  0100               	movlb	0	; () banked
  2162  002888  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2163  00288A  0E00               	movlw	0
  2164  00288C  0100               	movlb	0	; () banked
  2165  00288E  6FF9               	movwf	(initServo@angle+1)& (0+255),b
  2166  002890  0E82               	movlw	130
  2167  002892  6FF8               	movwf	initServo@angle& (0+255),b
  2168  002894  ECF3  F027         	call	_initServo	;wreg free
  2169                           
  2170                           ;main.c: 113: initServo(padServo, padAngle_NEUTRAL);
  2171  002898  0E90               	movlw	low _padServo
  2172  00289A  0100               	movlb	0	; () banked
  2173  00289C  6FF6               	movwf	initServo@motor& (0+255),b
  2174  00289E  0E01               	movlw	high _padServo
  2175  0028A0  0100               	movlb	0	; () banked
  2176  0028A2  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2177  0028A4  C168  F0F8         	movff	_padAngle_NEUTRAL,initServo@angle
  2178  0028A8  C169  F0F9         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2179  0028AC  ECF3  F027         	call	_initServo	;wreg free
  2180                           
  2181                           ;main.c: 114: initServo(redirectingServo, redirectAngle_AA);
  2182  0028B0  0E94               	movlw	low _redirectingServo
  2183  0028B2  0100               	movlb	0	; () banked
  2184  0028B4  6FF6               	movwf	initServo@motor& (0+255),b
  2185  0028B6  0E01               	movlw	high _redirectingServo
  2186  0028B8  0100               	movlb	0	; () banked
  2187  0028BA  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2188  0028BC  C170  F0F8         	movff	_redirectAngle_AA,initServo@angle
  2189  0028C0  C171  F0F9         	movff	_redirectAngle_AA+1,initServo@angle+1
  2190  0028C4  ECF3  F027         	call	_initServo	;wreg free
  2191  0028C8                     l6979:
  2192                           
  2193                           ;main.c: 118: lcdClear();
  2194  0028C8  EC72  F02C         	call	_lcdClear	;wreg free
  2195                           
  2196                           ;main.c: 119: printf("running");
  2197  0028CC  0EF6               	movlw	low STR_1
  2198  0028CE  0100               	movlb	0	; () banked
  2199  0028D0  6FD5               	movwf	printf@f& (0+255),b
  2200  0028D2  0EFF               	movlw	high STR_1
  2201  0028D4  0100               	movlb	0	; () banked
  2202  0028D6  6FD6               	movwf	(printf@f+1)& (0+255),b
  2203  0028D8  EC09  F000         	call	_printf	;wreg free
  2204                           
  2205                           ;main.c: 121: int lastBatteryTime = time;
  2206  0028DC  C1AC  F153         	movff	_time,main@lastBatteryTime
  2207  0028E0  C1AD  F154         	movff	_time+1,main@lastBatteryTime+1
  2208                           
  2209                           ;main.c: 123: int cylinderStart = time;
  2210  0028E4  C1AC  F155         	movff	_time,main@cylinderStart
  2211  0028E8  C1AD  F156         	movff	_time+1,main@cylinderStart+1
  2212                           
  2213                           ;main.c: 124: int cylinderDur = 0;
  2214  0028EC  0E00               	movlw	0
  2215  0028EE  0101               	movlb	1	; () banked
  2216  0028F0  6F58               	movwf	(main@cylinderDur+1)& (0+255),b
  2217  0028F2  0E00               	movlw	0
  2218  0028F4  6F57               	movwf	main@cylinderDur& (0+255),b
  2219                           
  2220                           ; BSR set to: 1
  2221                           ;main.c: 125: int cylinderForward = 10;
  2222  0028F6  0E00               	movlw	0
  2223  0028F8  0101               	movlb	1	; () banked
  2224  0028FA  6F50               	movwf	(main@cylinderForward+1)& (0+255),b
  2225  0028FC  0E0A               	movlw	10
  2226  0028FE  6F4F               	movwf	main@cylinderForward& (0+255),b
  2227                           
  2228                           ; BSR set to: 1
  2229                           ;main.c: 126: int cylinderBackward = 10;
  2230  002900  0E00               	movlw	0
  2231  002902  0101               	movlb	1	; () banked
  2232  002904  6F52               	movwf	(main@cylinderBackward+1)& (0+255),b
  2233  002906  0E0A               	movlw	10
  2234  002908  6F51               	movwf	main@cylinderBackward& (0+255),b
  2235                           
  2236                           ;main.c: 128: while(!batteryDetected){
  2237  00290A  D129               	goto	l7011
  2238  00290C                     l6993:
  2239                           
  2240                           ; BSR set to: 1
  2241                           ;main.c: 130: lcdHome();
  2242  00290C  EC76  F02C         	call	_lcdHome	;wreg free
  2243                           
  2244                           ;main.c: 131: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2245  002910  0EC9               	movlw	low STR_2
  2246  002912  0100               	movlb	0	; () banked
  2247  002914  6FD5               	movwf	printf@f& (0+255),b
  2248  002916  0EFF               	movlw	high STR_2
  2249  002918  0100               	movlb	0	; () banked
  2250  00291A  6FD6               	movwf	(printf@f+1)& (0+255),b
  2251  00291C  C1AC  F080         	movff	_time,___aldiv@dividend
  2252  002920  C1AD  F081         	movff	_time+1,___aldiv@dividend+1
  2253  002924  C1AE  F082         	movff	_time+2,___aldiv@dividend+2
  2254  002928  C1AF  F083         	movff	_time+3,___aldiv@dividend+3
  2255  00292C  0E58               	movlw	88
  2256  00292E  0100               	movlb	0	; () banked
  2257  002930  6F84               	movwf	___aldiv@divisor& (0+255),b
  2258  002932  0E02               	movlw	2
  2259  002934  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2260  002936  0E00               	movlw	0
  2261  002938  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2262  00293A  0E00               	movlw	0
  2263  00293C  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2264  00293E  ECF3  F020         	call	___aldiv	;wreg free
  2265  002942  C080  F0D7         	movff	?___aldiv,?_printf+2
  2266  002946  C081  F0D8         	movff	?___aldiv+1,?_printf+3
  2267  00294A  C082  F0D9         	movff	?___aldiv+2,?_printf+4
  2268  00294E  C083  F0DA         	movff	?___aldiv+3,?_printf+5
  2269  002952  0E0A               	movlw	10
  2270  002954  0100               	movlb	0	; () banked
  2271  002956  6F84               	movwf	___aldiv@divisor& (0+255),b
  2272  002958  0E00               	movlw	0
  2273  00295A  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2274  00295C  0E00               	movlw	0
  2275  00295E  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2276  002960  0E00               	movlw	0
  2277  002962  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2278  002964  C1AC  F080         	movff	_time,___aldiv@dividend
  2279  002968  C1AD  F081         	movff	_time+1,___aldiv@dividend+1
  2280  00296C  C1AE  F082         	movff	_time+2,___aldiv@dividend+2
  2281  002970  C1AF  F083         	movff	_time+3,___aldiv@dividend+3
  2282  002974  ECF3  F020         	call	___aldiv	;wreg free
  2283  002978  C080  F08E         	movff	?___aldiv,___almod@dividend
  2284  00297C  C081  F08F         	movff	?___aldiv+1,___almod@dividend+1
  2285  002980  C082  F090         	movff	?___aldiv+2,___almod@dividend+2
  2286  002984  C083  F091         	movff	?___aldiv+3,___almod@dividend+3
  2287  002988  0E3C               	movlw	60
  2288  00298A  0100               	movlb	0	; () banked
  2289  00298C  6F92               	movwf	___almod@divisor& (0+255),b
  2290  00298E  0E00               	movlw	0
  2291  002990  6F93               	movwf	(___almod@divisor+1)& (0+255),b
  2292  002992  0E00               	movlw	0
  2293  002994  6F94               	movwf	(___almod@divisor+2)& (0+255),b
  2294  002996  0E00               	movlw	0
  2295  002998  6F95               	movwf	(___almod@divisor+3)& (0+255),b
  2296  00299A  ECFF  F023         	call	___almod	;wreg free
  2297  00299E  C08E  F0DB         	movff	?___almod,?_printf+6
  2298  0029A2  C08F  F0DC         	movff	?___almod+1,?_printf+7
  2299  0029A6  C090  F0DD         	movff	?___almod+2,?_printf+8
  2300  0029AA  C091  F0DE         	movff	?___almod+3,?_printf+9
  2301  0029AE  EC09  F000         	call	_printf	;wreg free
  2302                           
  2303                           ;main.c: 132: _delay((unsigned long)((77)*(10000000/4000.0)));
  2304  0029B2  0EFA               	movlw	250
  2305  0029B4  0101               	movlb	1	; () banked
  2306  0029B6  6F42               	movwf	??_main& (0+255),b
  2307  0029B8  0EFF               	movlw	255
  2308  0029BA                     u8427:
  2309  0029BA  2EE8               	decfsz	wreg,f,c
  2310  0029BC  D7FE               	bra	u8427
  2311  0029BE  2F42               	decfsz	??_main& (0+255),f,b
  2312  0029C0  D7FC               	bra	u8427
  2313                           
  2314                           ;main.c: 135: if(time - cylinderStart >= cylinderDur)
  2315  0029C2  C157  F142         	movff	main@cylinderDur,??_main
  2316  0029C6  C158  F143         	movff	main@cylinderDur+1,??_main+1
  2317  0029CA  0E00               	movlw	0
  2318  0029CC  0101               	movlb	1	; () banked
  2319  0029CE  BF43               	btfsc	(??_main+1)& (0+255),7,b
  2320  0029D0  0EFF               	movlw	255
  2321  0029D2  6F44               	movwf	(??_main+2)& (0+255),b
  2322  0029D4  6F45               	movwf	(??_main+3)& (0+255),b
  2323  0029D6  C155  F146         	movff	main@cylinderStart,??_main+4
  2324  0029DA  C156  F147         	movff	main@cylinderStart+1,??_main+5
  2325  0029DE  0E00               	movlw	0
  2326  0029E0  0101               	movlb	1	; () banked
  2327  0029E2  BF47               	btfsc	(??_main+5)& (0+255),7,b
  2328  0029E4  0EFF               	movlw	255
  2329  0029E6  6F48               	movwf	(??_main+6)& (0+255),b
  2330  0029E8  6F49               	movwf	(??_main+7)& (0+255),b
  2331  0029EA  0101               	movlb	1	; () banked
  2332  0029EC  1F46               	comf	(??_main+4)& (0+255),f,b
  2333  0029EE  1F47               	comf	(??_main+5)& (0+255),f,b
  2334  0029F0  1F48               	comf	(??_main+6)& (0+255),f,b
  2335  0029F2  1F49               	comf	(??_main+7)& (0+255),f,b
  2336  0029F4  2B46               	incf	(??_main+4)& (0+255),f,b
  2337  0029F6  0E00               	movlw	0
  2338  0029F8  2347               	addwfc	(??_main+5)& (0+255),f,b
  2339  0029FA  2348               	addwfc	(??_main+6)& (0+255),f,b
  2340  0029FC  2349               	addwfc	(??_main+7)& (0+255),f,b
  2341  0029FE  0101               	movlb	1	; () banked
  2342  002A00  51AC               	movf	_time& (0+255),w,b
  2343  002A02  0101               	movlb	1	; () banked
  2344  002A04  2546               	addwf	(??_main+4)& (0+255),w,b
  2345  002A06  0101               	movlb	1	; () banked
  2346  002A08  6F4A               	movwf	(??_main+8)& (0+255),b
  2347  002A0A  0101               	movlb	1	; () banked
  2348  002A0C  51AD               	movf	(_time+1)& (0+255),w,b
  2349  002A0E  0101               	movlb	1	; () banked
  2350  002A10  2147               	addwfc	(??_main+5)& (0+255),w,b
  2351  002A12  0101               	movlb	1	; () banked
  2352  002A14  6F4B               	movwf	(??_main+9)& (0+255),b
  2353  002A16  0101               	movlb	1	; () banked
  2354  002A18  51AE               	movf	(_time+2)& (0+255),w,b
  2355  002A1A  0101               	movlb	1	; () banked
  2356  002A1C  2148               	addwfc	(??_main+6)& (0+255),w,b
  2357  002A1E  0101               	movlb	1	; () banked
  2358  002A20  6F4C               	movwf	(??_main+10)& (0+255),b
  2359  002A22  0101               	movlb	1	; () banked
  2360  002A24  51AF               	movf	(_time+3)& (0+255),w,b
  2361  002A26  0101               	movlb	1	; () banked
  2362  002A28  2149               	addwfc	(??_main+7)& (0+255),w,b
  2363  002A2A  0101               	movlb	1	; () banked
  2364  002A2C  6F4D               	movwf	(??_main+11)& (0+255),b
  2365  002A2E  0101               	movlb	1	; () banked
  2366  002A30  5142               	movf	??_main& (0+255),w,b
  2367  002A32  0101               	movlb	1	; () banked
  2368  002A34  5D4A               	subwf	(??_main+8)& (0+255),w,b
  2369  002A36  0101               	movlb	1	; () banked
  2370  002A38  5143               	movf	(??_main+1)& (0+255),w,b
  2371  002A3A  0101               	movlb	1	; () banked
  2372  002A3C  594B               	subwfb	(??_main+9)& (0+255),w,b
  2373  002A3E  0101               	movlb	1	; () banked
  2374  002A40  5144               	movf	(??_main+2)& (0+255),w,b
  2375  002A42  0101               	movlb	1	; () banked
  2376  002A44  594C               	subwfb	(??_main+10)& (0+255),w,b
  2377  002A46  0101               	movlb	1	; () banked
  2378  002A48  514D               	movf	(??_main+11)& (0+255),w,b
  2379  002A4A  0A80               	xorlw	128
  2380  002A4C  0101               	movlb	1	; () banked
  2381  002A4E  6F4E               	movwf	(??_main+12)& (0+255),b
  2382  002A50  0101               	movlb	1	; () banked
  2383  002A52  5145               	movf	(??_main+3)& (0+255),w,b
  2384  002A54  0A80               	xorlw	128
  2385  002A56  0101               	movlb	1	; () banked
  2386  002A58  594E               	subwfb	(??_main+12)& (0+255),w,b
  2387  002A5A  A0D8               	btfss	status,0,c
  2388  002A5C  D033               	goto	l7007
  2389                           
  2390                           ; BSR set to: 1
  2391                           ;main.c: 136: {
  2392                           ;main.c: 137: int prev = digitalRead(cylinderDir);
  2393  002A5E  0E80               	movlw	low _cylinderDir
  2394  002A60  0100               	movlb	0	; () banked
  2395  002A62  6F80               	movwf	digitalRead@pin& (0+255),b
  2396  002A64  0E01               	movlw	high _cylinderDir
  2397  002A66  0100               	movlb	0	; () banked
  2398  002A68  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2399  002A6A  ECC7  F01F         	call	_digitalRead	;wreg free
  2400  002A6E  C080  F159         	movff	?_digitalRead,main@prev
  2401  002A72  C081  F15A         	movff	?_digitalRead+1,main@prev+1
  2402                           
  2403                           ;main.c: 138: digitalWrite(cylinderDir, !prev);
  2404  002A76  0E80               	movlw	low _cylinderDir
  2405  002A78  0100               	movlb	0	; () banked
  2406  002A7A  6F80               	movwf	digitalWrite@pin& (0+255),b
  2407  002A7C  0E01               	movlw	high _cylinderDir
  2408  002A7E  0100               	movlb	0	; () banked
  2409  002A80  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2410  002A82  0101               	movlb	1	; () banked
  2411  002A84  5159               	movf	main@prev& (0+255),w,b
  2412  002A86  0101               	movlb	1	; () banked
  2413  002A88  115A               	iorwf	(main@prev+1)& (0+255),w,b
  2414  002A8A  A4D8               	btfss	status,2,c
  2415  002A8C  D002               	goto	u8070
  2416  002A8E  0E01               	movlw	1
  2417  002A90  D001               	goto	u8080
  2418  002A92                     u8070:
  2419  002A92  0E00               	movlw	0
  2420  002A94                     u8080:
  2421  002A94  0100               	movlb	0	; () banked
  2422  002A96  6F82               	movwf	digitalWrite@val& (0+255),b
  2423  002A98  6B83               	clrf	(digitalWrite@val+1)& (0+255),b
  2424  002A9A  EC89  F022         	call	_digitalWrite	;wreg free
  2425                           
  2426                           ;main.c: 139: if(prev)cylinderDur = cylinderBackward;
  2427  002A9E  0101               	movlb	1	; () banked
  2428  002AA0  5159               	movf	main@prev& (0+255),w,b
  2429  002AA2  0101               	movlb	1	; () banked
  2430  002AA4  115A               	iorwf	(main@prev+1)& (0+255),w,b
  2431  002AA6  B4D8               	btfsc	status,2,c
  2432  002AA8  D005               	goto	l128
  2433                           
  2434                           ; BSR set to: 1
  2435  002AAA  C151  F157         	movff	main@cylinderBackward,main@cylinderDur
  2436  002AAE  C152  F158         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2437  002AB2  D004               	goto	l129
  2438  002AB4                     l128:
  2439                           
  2440                           ; BSR set to: 1
  2441                           ;main.c: 140: else cylinderDur = cylinderForward;
  2442  002AB4  C14F  F157         	movff	main@cylinderForward,main@cylinderDur
  2443  002AB8  C150  F158         	movff	main@cylinderForward+1,main@cylinderDur+1
  2444  002ABC                     l129:
  2445                           
  2446                           ; BSR set to: 1
  2447                           ;main.c: 141: cylinderStart = time;
  2448  002ABC  C1AC  F155         	movff	_time,main@cylinderStart
  2449  002AC0  C1AD  F156         	movff	_time+1,main@cylinderStart+1
  2450  002AC4                     l7007:
  2451                           
  2452                           ; BSR set to: 1
  2453                           ;main.c: 142: }
  2454                           ;main.c: 144: if(time - lastBatteryTime > stoppingTime)
  2455  002AC4  C153  F142         	movff	main@lastBatteryTime,??_main
  2456  002AC8  C154  F143         	movff	main@lastBatteryTime+1,??_main+1
  2457  002ACC  0E00               	movlw	0
  2458  002ACE  0101               	movlb	1	; () banked
  2459  002AD0  BF43               	btfsc	(??_main+1)& (0+255),7,b
  2460  002AD2  0EFF               	movlw	255
  2461  002AD4  6F44               	movwf	(??_main+2)& (0+255),b
  2462  002AD6  6F45               	movwf	(??_main+3)& (0+255),b
  2463  002AD8  0101               	movlb	1	; () banked
  2464  002ADA  1F42               	comf	??_main& (0+255),f,b
  2465  002ADC  1F43               	comf	(??_main+1)& (0+255),f,b
  2466  002ADE  1F44               	comf	(??_main+2)& (0+255),f,b
  2467  002AE0  1F45               	comf	(??_main+3)& (0+255),f,b
  2468  002AE2  2B42               	incf	??_main& (0+255),f,b
  2469  002AE4  0E00               	movlw	0
  2470  002AE6  2343               	addwfc	(??_main+1)& (0+255),f,b
  2471  002AE8  2344               	addwfc	(??_main+2)& (0+255),f,b
  2472  002AEA  2345               	addwfc	(??_main+3)& (0+255),f,b
  2473  002AEC  0101               	movlb	1	; () banked
  2474  002AEE  51AC               	movf	_time& (0+255),w,b
  2475  002AF0  0101               	movlb	1	; () banked
  2476  002AF2  2542               	addwf	??_main& (0+255),w,b
  2477  002AF4  0101               	movlb	1	; () banked
  2478  002AF6  6F46               	movwf	(??_main+4)& (0+255),b
  2479  002AF8  0101               	movlb	1	; () banked
  2480  002AFA  51AD               	movf	(_time+1)& (0+255),w,b
  2481  002AFC  0101               	movlb	1	; () banked
  2482  002AFE  2143               	addwfc	(??_main+1)& (0+255),w,b
  2483  002B00  0101               	movlb	1	; () banked
  2484  002B02  6F47               	movwf	(??_main+5)& (0+255),b
  2485  002B04  0101               	movlb	1	; () banked
  2486  002B06  51AE               	movf	(_time+2)& (0+255),w,b
  2487  002B08  0101               	movlb	1	; () banked
  2488  002B0A  2144               	addwfc	(??_main+2)& (0+255),w,b
  2489  002B0C  0101               	movlb	1	; () banked
  2490  002B0E  6F48               	movwf	(??_main+6)& (0+255),b
  2491  002B10  0101               	movlb	1	; () banked
  2492  002B12  51AF               	movf	(_time+3)& (0+255),w,b
  2493  002B14  0101               	movlb	1	; () banked
  2494  002B16  2145               	addwfc	(??_main+3)& (0+255),w,b
  2495  002B18  0101               	movlb	1	; () banked
  2496  002B1A  6F49               	movwf	(??_main+7)& (0+255),b
  2497  002B1C  0E00               	movlw	0
  2498  002B1E  0101               	movlb	1	; () banked
  2499  002B20  BF77               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2500  002B22  0EFF               	movlw	255
  2501  002B24  0101               	movlb	1	; () banked
  2502  002B26  6F4B               	movwf	(??_main+9)& (0+255),b
  2503  002B28  0A80               	xorlw	128
  2504  002B2A  6F4A               	movwf	(??_main+8)& (0+255),b
  2505  002B2C  0101               	movlb	1	; () banked
  2506  002B2E  5146               	movf	(??_main+4)& (0+255),w,b
  2507  002B30  0101               	movlb	1	; () banked
  2508  002B32  5D76               	subwf	_stoppingTime& (0+255),w,b
  2509  002B34  0101               	movlb	1	; () banked
  2510  002B36  5147               	movf	(??_main+5)& (0+255),w,b
  2511  002B38  0101               	movlb	1	; () banked
  2512  002B3A  5977               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2513  002B3C  0101               	movlb	1	; () banked
  2514  002B3E  5148               	movf	(??_main+6)& (0+255),w,b
  2515  002B40  0101               	movlb	1	; () banked
  2516  002B42  594B               	subwfb	(??_main+9)& (0+255),w,b
  2517  002B44  0101               	movlb	1	; () banked
  2518  002B46  5149               	movf	(??_main+7)& (0+255),w,b
  2519  002B48  0A80               	xorlw	128
  2520  002B4A  0101               	movlb	1	; () banked
  2521  002B4C  594A               	subwfb	(??_main+8)& (0+255),w,b
  2522  002B4E  B0D8               	btfsc	status,0,c
  2523  002B50  D006               	goto	l7011
  2524                           
  2525                           ; BSR set to: 1
  2526                           ;main.c: 145: {
  2527                           ;main.c: 146: terminate = 1;
  2528  002B52  0E00               	movlw	0
  2529  002B54  0101               	movlb	1	; () banked
  2530  002B56  6FB7               	movwf	(_terminate+1)& (0+255),b
  2531  002B58  0E01               	movlw	1
  2532  002B5A  6FB6               	movwf	_terminate& (0+255),b
  2533                           
  2534                           ;main.c: 147: break;
  2535  002B5C  D006               	goto	l7013
  2536  002B5E                     l7011:
  2537                           
  2538                           ; BSR set to: 1
  2539  002B5E  0101               	movlb	1	; () banked
  2540  002B60  51B0               	movf	_batteryDetected& (0+255),w,b
  2541  002B62  0101               	movlb	1	; () banked
  2542  002B64  11B1               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2543  002B66  B4D8               	btfsc	status,2,c
  2544  002B68  D6D1               	goto	l6993
  2545  002B6A                     l7013:
  2546                           
  2547                           ; BSR set to: 1
  2548                           ;main.c: 148: }
  2549                           ;main.c: 149: }
  2550                           ;main.c: 151: if(terminate)break;
  2551  002B6A  0101               	movlb	1	; () banked
  2552  002B6C  51B6               	movf	_terminate& (0+255),w,b
  2553  002B6E  0101               	movlb	1	; () banked
  2554  002B70  11B7               	iorwf	(_terminate+1)& (0+255),w,b
  2555  002B72  A4D8               	btfss	status,2,c
  2556  002B74  D00C               	goto	l7023
  2557                           
  2558                           ; BSR set to: 1
  2559                           ;main.c: 153: sortBattery();
  2560                           
  2561                           ; BSR set to: 1
  2562                           
  2563                           ; BSR set to: 1
  2564  002B76  ECE8  F00C         	call	_sortBattery	;wreg free
  2565                           
  2566                           ;main.c: 156: lastBatteryTime = time;
  2567  002B7A  C1AC  F153         	movff	_time,main@lastBatteryTime
  2568  002B7E  C1AD  F154         	movff	_time+1,main@lastBatteryTime+1
  2569                           
  2570                           ;main.c: 157: batteryDetected = 0;
  2571  002B82  0E00               	movlw	0
  2572  002B84  0101               	movlb	1	; () banked
  2573  002B86  6FB1               	movwf	(_batteryDetected+1)& (0+255),b
  2574  002B88  0E00               	movlw	0
  2575  002B8A  6FB0               	movwf	_batteryDetected& (0+255),b
  2576                           
  2577                           ; BSR set to: 1
  2578  002B8C  D69D               	goto	l6979
  2579  002B8E                     l7023:
  2580                           
  2581                           ; BSR set to: 1
  2582                           ;main.c: 158: }
  2583                           ;main.c: 161: pause("finished");
  2584  002B8E  0EE5               	movlw	low STR_3
  2585  002B90  0100               	movlb	0	; () banked
  2586  002B92  6FE5               	movwf	pause@message& (0+255),b
  2587  002B94  0EFF               	movlw	high STR_3
  2588  002B96  0100               	movlb	0	; () banked
  2589  002B98  6FE6               	movwf	(pause@message+1)& (0+255),b
  2590  002B9A  EC63  F02C         	call	_pause	;wreg free
  2591  002B9E  D642               	goto	l6965
  2592  002BA0                     l137:
  2593  002BA0  D7FF               	goto	l137
  2594  002BA2                     __end_of_main:
  2595                           	opt stack 0
  2596                           tblptru	equ	0xFF8
  2597                           tblptrh	equ	0xFF7
  2598                           tblptrl	equ	0xFF6
  2599                           tablat	equ	0xFF5
  2600                           postinc0	equ	0xFEE
  2601                           wreg	equ	0xFE8
  2602                           postdec1	equ	0xFE5
  2603                           fsr1l	equ	0xFE1
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _sortBattery *****************
  2607 ;; Defined at:
  2608 ;;		line 169 in file "main.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  V               3   40[BANK1 ] float 
  2613 ;;  i               2   48[BANK1 ] int 
  2614 ;;  V_float         3   33[BANK1 ] float 
  2615 ;;  i               3   60[BANK1 ] float 
  2616 ;;  V               3   63[BANK1 ] float 
  2617 ;;  Vf              3   57[BANK1 ] float 
  2618 ;;  resolution      3   54[BANK1 ] float 
  2619 ;;  Vcc             3   51[BANK1 ] float 
  2620 ;;  V_max           3   43[BANK1 ] float 
  2621 ;;  Vs              3   30[BANK1 ] float 
  2622 ;;  targetAngle     2   46[BANK1 ] int 
  2623 ;;  pos_v_counte    2   36[BANK1 ] int 
  2624 ;;  signal          1   50[BANK1 ] unsigned char 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      void 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2636 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Totals:         0       2      36       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;Total ram usage:       38 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:   11
  2641 ;; This function calls:
  2642 ;;		___altoft
  2643 ;;		___awtoft
  2644 ;;		___ftdiv
  2645 ;;		___ftge
  2646 ;;		___ftmul
  2647 ;;		___ftsub
  2648 ;;		___fttol
  2649 ;;		_analogRead
  2650 ;;		_digitalRead
  2651 ;;		_digitalWrite
  2652 ;;		_lcdClear
  2653 ;;		_printf
  2654 ;;		_readKeypad
  2655 ;;		_setAngle
  2656 ;; This function is called by:
  2657 ;;		_main
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text1
  2662  0019D0                     __ptext1:
  2663                           	opt stack 0
  2664  0019D0                     _sortBattery:
  2665                           	opt stack 19
  2666                           
  2667                           ;main.c: 172: setAngle(conveyorServo, 90);
  2668                           
  2669                           ;incstack = 0
  2670  0019D0  0E7C               	movlw	low _conveyorServo
  2671  0019D2  0100               	movlb	0	; () banked
  2672  0019D4  6FEC               	movwf	setAngle@motor& (0+255),b
  2673  0019D6  0E01               	movlw	high _conveyorServo
  2674  0019D8  0100               	movlb	0	; () banked
  2675  0019DA  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2676  0019DC  0E00               	movlw	0
  2677  0019DE  0100               	movlb	0	; () banked
  2678  0019E0  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  2679  0019E2  0E5A               	movlw	90
  2680  0019E4  6FEE               	movwf	setAngle@angle& (0+255),b
  2681  0019E6  EC78  F024         	call	_setAngle	;wreg free
  2682                           
  2683                           ;main.c: 173: digitalWrite(cylinderMotor, 0);
  2684  0019EA  0E84               	movlw	low _cylinderMotor
  2685  0019EC  0100               	movlb	0	; () banked
  2686  0019EE  6F80               	movwf	digitalWrite@pin& (0+255),b
  2687  0019F0  0E01               	movlw	high _cylinderMotor
  2688  0019F2  0100               	movlb	0	; () banked
  2689  0019F4  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2690  0019F6  0E00               	movlw	0
  2691  0019F8  0100               	movlb	0	; () banked
  2692  0019FA  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2693  0019FC  0E00               	movlw	0
  2694  0019FE  6F82               	movwf	digitalWrite@val& (0+255),b
  2695  001A00  EC89  F022         	call	_digitalWrite	;wreg free
  2696                           
  2697                           ;main.c: 176: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2698  001A04  0E0D               	movlw	13
  2699  001A06  0100               	movlb	0	; () banked
  2700  001A08  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  2701  001A0A  0EAF               	movlw	175
  2702  001A0C  0100               	movlb	0	; () banked
  2703  001A0E  6FF6               	movwf	??_sortBattery& (0+255),b
  2704  001A10  0EB6               	movlw	182
  2705  001A12                     u8437:
  2706  001A12  2EE8               	decfsz	wreg,f,c
  2707  001A14  D7FE               	bra	u8437
  2708  001A16  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2709  001A18  D7FC               	bra	u8437
  2710  001A1A  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2711  001A1C  D7FA               	bra	u8437
  2712  001A1E  F000               	nop	
  2713                           
  2714                           ;main.c: 178: float Vcc = 5.00;
  2715  001A20  0E00               	movlw	0
  2716  001A22  0101               	movlb	1	; () banked
  2717  001A24  6F33               	movwf	sortBattery@Vcc& (0+255),b
  2718  001A26  0EA0               	movlw	160
  2719  001A28  0101               	movlb	1	; () banked
  2720  001A2A  6F34               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2721  001A2C  0E40               	movlw	64
  2722  001A2E  0101               	movlb	1	; () banked
  2723  001A30  6F35               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2724                           
  2725                           ; BSR set to: 1
  2726                           ;main.c: 179: float resolution = (1<<10) - 1;
  2727  001A32  0EC0               	movlw	192
  2728  001A34  0101               	movlb	1	; () banked
  2729  001A36  6F36               	movwf	sortBattery@resolution& (0+255),b
  2730  001A38  0E7F               	movlw	127
  2731  001A3A  0101               	movlb	1	; () banked
  2732  001A3C  6F37               	movwf	(sortBattery@resolution+1)& (0+255),b
  2733  001A3E  0E44               	movlw	68
  2734  001A40  0101               	movlb	1	; () banked
  2735  001A42  6F38               	movwf	(sortBattery@resolution+2)& (0+255),b
  2736                           
  2737                           ; BSR set to: 1
  2738                           ;main.c: 180: float Vs = 0.0f;
  2739  001A44  0E00               	movlw	0
  2740  001A46  0101               	movlb	1	; () banked
  2741  001A48  6F1E               	movwf	sortBattery@Vs& (0+255),b
  2742  001A4A  0E00               	movlw	0
  2743  001A4C  0101               	movlb	1	; () banked
  2744  001A4E  6F1F               	movwf	(sortBattery@Vs+1)& (0+255),b
  2745  001A50  0E00               	movlw	0
  2746  001A52  0101               	movlb	1	; () banked
  2747  001A54  6F20               	movwf	(sortBattery@Vs+2)& (0+255),b
  2748                           
  2749                           ; BSR set to: 1
  2750                           ;main.c: 181: float V_max = 0.0f;
  2751  001A56  0E00               	movlw	0
  2752  001A58  0101               	movlb	1	; () banked
  2753  001A5A  6F2B               	movwf	sortBattery@V_max& (0+255),b
  2754  001A5C  0E00               	movlw	0
  2755  001A5E  0101               	movlb	1	; () banked
  2756  001A60  6F2C               	movwf	(sortBattery@V_max+1)& (0+255),b
  2757  001A62  0E00               	movlw	0
  2758  001A64  0101               	movlb	1	; () banked
  2759  001A66  6F2D               	movwf	(sortBattery@V_max+2)& (0+255),b
  2760                           
  2761                           ; BSR set to: 1
  2762                           ;main.c: 182: int pos_v_counter = 1;
  2763  001A68  0E00               	movlw	0
  2764  001A6A  0101               	movlb	1	; () banked
  2765  001A6C  6F25               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2766  001A6E  0E01               	movlw	1
  2767  001A70  6F24               	movwf	sortBattery@pos_v_counter& (0+255),b
  2768                           
  2769                           ; BSR set to: 1
  2770                           ;main.c: 183: unsigned char signal = 0;
  2771  001A72  0E00               	movlw	0
  2772  001A74  0101               	movlb	1	; () banked
  2773  001A76  6F32               	movwf	sortBattery@signal& (0+255),b
  2774                           
  2775                           ; BSR set to: 1
  2776                           ;main.c: 187: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2777  001A78  C168  F088         	movff	_padAngle_NEUTRAL,___awtoft@c
  2778  001A7C  C169  F089         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2779  001A80  ECE6  F02A         	call	___awtoft	;wreg free
  2780  001A84  C088  F13C         	movff	?___awtoft,sortBattery@i
  2781  001A88  C089  F13D         	movff	?___awtoft+1,sortBattery@i+1
  2782  001A8C  C08A  F13E         	movff	?___awtoft+2,sortBattery@i+2
  2783  001A90  D09A               	goto	l6423
  2784  001A92                     l6407:
  2785                           
  2786                           ;main.c: 188: setAngle(padServo, (int)i);
  2787  001A92  C13C  F0C6         	movff	sortBattery@i,___fttol@f1
  2788  001A96  C13D  F0C7         	movff	sortBattery@i+1,___fttol@f1+1
  2789  001A9A  C13E  F0C8         	movff	sortBattery@i+2,___fttol@f1+2
  2790  001A9E  ECEF  F01D         	call	___fttol	;wreg free
  2791  001AA2  C0C6  F126         	movff	?___fttol,_sortBattery$1346
  2792  001AA6  C0C7  F127         	movff	?___fttol+1,_sortBattery$1346+1
  2793                           
  2794                           ;main.c: 188: setAngle(padServo, (int)i);
  2795  001AAA  0E90               	movlw	low _padServo
  2796  001AAC  0100               	movlb	0	; () banked
  2797  001AAE  6FEC               	movwf	setAngle@motor& (0+255),b
  2798  001AB0  0E01               	movlw	high _padServo
  2799  001AB2  0100               	movlb	0	; () banked
  2800  001AB4  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2801  001AB6  C126  F0EE         	movff	_sortBattery$1346,setAngle@angle
  2802  001ABA  C127  F0EF         	movff	_sortBattery$1346+1,setAngle@angle+1
  2803  001ABE  EC78  F024         	call	_setAngle	;wreg free
  2804                           
  2805                           ;main.c: 189: _delay((unsigned long)((1)*(10000000/4000.0)));
  2806  001AC2  0E04               	movlw	4
  2807  001AC4  0100               	movlb	0	; () banked
  2808  001AC6  6FF6               	movwf	??_sortBattery& (0+255),b
  2809  001AC8  0E3D               	movlw	61
  2810  001ACA                     u8447:
  2811  001ACA  2EE8               	decfsz	wreg,f,c
  2812  001ACC  D7FE               	bra	u8447
  2813  001ACE  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2814  001AD0  D7FC               	bra	u8447
  2815  001AD2  D000               	nop2	
  2816                           
  2817                           ;main.c: 190: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2818  001AD4  C136  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2819  001AD8  C137  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2820  001ADC  C138  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2821  001AE0  C1AA  F080         	movff	_padPin3+2,analogRead@channel
  2822  001AE4  C1AB  F081         	movff	_padPin3+3,analogRead@channel+1
  2823  001AE8  EC08  F02B         	call	_analogRead	;wreg free
  2824  001AEC  C080  F088         	movff	?_analogRead,___altoft@c
  2825  001AF0  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2826  001AF4  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2827  001AF8  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2828  001AFC  EC0F  F027         	call	___altoft	;wreg free
  2829  001B00  C088  F092         	movff	?___altoft,___ftdiv@f1
  2830  001B04  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2831  001B08  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2832  001B0C  EC49  F01D         	call	___ftdiv	;wreg free
  2833  001B10  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2834  001B14  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2835  001B18  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2836  001B1C  C133  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2837  001B20  C134  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2838  001B24  C135  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2839  001B28  EC9A  F01C         	call	___ftmul	;wreg free
  2840  001B2C  C0A1  F128         	movff	?___ftmul,sortBattery@V
  2841  001B30  C0A2  F129         	movff	?___ftmul+1,sortBattery@V+1
  2842  001B34  C0A3  F12A         	movff	?___ftmul+2,sortBattery@V+2
  2843                           
  2844                           ;main.c: 194: if(V > V_max) {
  2845  001B38  C12B  F08C         	movff	sortBattery@V_max,___ftge@ff1
  2846  001B3C  C12C  F08D         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2847  001B40  C12D  F08E         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2848  001B44  C128  F08F         	movff	sortBattery@V,___ftge@ff2
  2849  001B48  C129  F090         	movff	sortBattery@V+1,___ftge@ff2+1
  2850  001B4C  C12A  F091         	movff	sortBattery@V+2,___ftge@ff2+2
  2851  001B50  ECE2  F024         	call	___ftge	;wreg free
  2852  001B54  0100               	movlb	0	; () banked
  2853  001B56  B0D8               	btfsc	status,0,c
  2854  001B58  D01F               	goto	l6421
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;main.c: 195: signal = digitalRead(padPin1)<<1;
  2858  001B5A  0E88               	movlw	low _padPin1
  2859  001B5C  0100               	movlb	0	; () banked
  2860  001B5E  6F80               	movwf	digitalRead@pin& (0+255),b
  2861  001B60  0E01               	movlw	high _padPin1
  2862  001B62  0100               	movlb	0	; () banked
  2863  001B64  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2864  001B66  ECC7  F01F         	call	_digitalRead	;wreg free
  2865  001B6A  0100               	movlb	0	; () banked
  2866  001B6C  90D8               	bcf	status,0,c
  2867  001B6E  3580               	rlcf	?_digitalRead& (0+255),w,b
  2868  001B70  0101               	movlb	1	; () banked
  2869  001B72  6F32               	movwf	sortBattery@signal& (0+255),b
  2870                           
  2871                           ;main.c: 196: signal |= digitalRead(padPin2);
  2872  001B74  0E8C               	movlw	low _padPin2
  2873  001B76  0100               	movlb	0	; () banked
  2874  001B78  6F80               	movwf	digitalRead@pin& (0+255),b
  2875  001B7A  0E01               	movlw	high _padPin2
  2876  001B7C  0100               	movlb	0	; () banked
  2877  001B7E  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2878  001B80  ECC7  F01F         	call	_digitalRead	;wreg free
  2879  001B84  0100               	movlb	0	; () banked
  2880  001B86  5180               	movf	?_digitalRead& (0+255),w,b
  2881  001B88  0101               	movlb	1	; () banked
  2882  001B8A  1332               	iorwf	sortBattery@signal& (0+255),f,b
  2883                           
  2884                           ; BSR set to: 1
  2885                           ;main.c: 197: V_max = V;
  2886  001B8C  C128  F12B         	movff	sortBattery@V,sortBattery@V_max
  2887  001B90  C129  F12C         	movff	sortBattery@V+1,sortBattery@V_max+1
  2888  001B94  C12A  F12D         	movff	sortBattery@V+2,sortBattery@V_max+2
  2889  001B98                     l6421:
  2890  001B98  C13C  F0C6         	movff	sortBattery@i,___ftsub@f1
  2891  001B9C  C13D  F0C7         	movff	sortBattery@i+1,___ftsub@f1+1
  2892  001BA0  C13E  F0C8         	movff	sortBattery@i+2,___ftsub@f1+2
  2893  001BA4  0ECD               	movlw	205
  2894  001BA6  0100               	movlb	0	; () banked
  2895  001BA8  6FC9               	movwf	___ftsub@f2& (0+255),b
  2896  001BAA  0ECC               	movlw	204
  2897  001BAC  0100               	movlb	0	; () banked
  2898  001BAE  6FCA               	movwf	(___ftsub@f2+1)& (0+255),b
  2899  001BB0  0E3D               	movlw	61
  2900  001BB2  0100               	movlb	0	; () banked
  2901  001BB4  6FCB               	movwf	(___ftsub@f2+2)& (0+255),b
  2902  001BB6  EC52  F02A         	call	___ftsub	;wreg free
  2903  001BBA  C0C6  F13C         	movff	?___ftsub,sortBattery@i
  2904  001BBE  C0C7  F13D         	movff	?___ftsub+1,sortBattery@i+1
  2905  001BC2  C0C8  F13E         	movff	?___ftsub+2,sortBattery@i+2
  2906  001BC6                     l6423:
  2907  001BC6  C166  F088         	movff	_padAngle_CLOSE,___awtoft@c
  2908  001BCA  C167  F089         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2909  001BCE  ECE6  F02A         	call	___awtoft	;wreg free
  2910  001BD2  C088  F08C         	movff	?___awtoft,___ftge@ff1
  2911  001BD6  C089  F08D         	movff	?___awtoft+1,___ftge@ff1+1
  2912  001BDA  C08A  F08E         	movff	?___awtoft+2,___ftge@ff1+2
  2913  001BDE  C13C  F08F         	movff	sortBattery@i,___ftge@ff2
  2914  001BE2  C13D  F090         	movff	sortBattery@i+1,___ftge@ff2+1
  2915  001BE6  C13E  F091         	movff	sortBattery@i+2,___ftge@ff2+2
  2916  001BEA  ECE2  F024         	call	___ftge	;wreg free
  2917  001BEE  0100               	movlb	0	; () banked
  2918  001BF0  A0D8               	btfss	status,0,c
  2919  001BF2  D74F               	goto	l6407
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;main.c: 198: }
  2923                           ;main.c: 200: }
  2924                           ;main.c: 201: _delay((unsigned long)((20)*(10000000/4000.0)));
  2925                           
  2926                           ; BSR set to: 0
  2927  001BF4  0E41               	movlw	65
  2928  001BF6  0100               	movlb	0	; () banked
  2929  001BF8  6FF6               	movwf	??_sortBattery& (0+255),b
  2930  001BFA  0EEE               	movlw	238
  2931  001BFC                     u8457:
  2932  001BFC  2EE8               	decfsz	wreg,f,c
  2933  001BFE  D7FE               	bra	u8457
  2934  001C00  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2935  001C02  D7FC               	bra	u8457
  2936  001C04  F000               	nop	
  2937                           
  2938                           ;main.c: 207: int targetAngle;
  2939                           ;main.c: 209: digitalWrite(AA_float, 1);
  2940  001C06  0E78               	movlw	low _AA_float
  2941  001C08  0100               	movlb	0	; () banked
  2942  001C0A  6F80               	movwf	digitalWrite@pin& (0+255),b
  2943  001C0C  0E01               	movlw	high _AA_float
  2944  001C0E  0100               	movlb	0	; () banked
  2945  001C10  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2946  001C12  0E00               	movlw	0
  2947  001C14  0100               	movlb	0	; () banked
  2948  001C16  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2949  001C18  0E01               	movlw	1
  2950  001C1A  6F82               	movwf	digitalWrite@val& (0+255),b
  2951  001C1C  EC89  F022         	call	_digitalWrite	;wreg free
  2952                           
  2953                           ;main.c: 210: float Vf = (analogRead(padPin3[1]) / resolution * Vcc);
  2954  001C20  C136  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2955  001C24  C137  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2956  001C28  C138  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2957  001C2C  C1AA  F080         	movff	_padPin3+2,analogRead@channel
  2958  001C30  C1AB  F081         	movff	_padPin3+3,analogRead@channel+1
  2959  001C34  EC08  F02B         	call	_analogRead	;wreg free
  2960  001C38  C080  F088         	movff	?_analogRead,___altoft@c
  2961  001C3C  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2962  001C40  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2963  001C44  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2964  001C48  EC0F  F027         	call	___altoft	;wreg free
  2965  001C4C  C088  F092         	movff	?___altoft,___ftdiv@f1
  2966  001C50  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2967  001C54  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2968  001C58  EC49  F01D         	call	___ftdiv	;wreg free
  2969  001C5C  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2970  001C60  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2971  001C64  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2972  001C68  C133  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2973  001C6C  C134  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2974  001C70  C135  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2975  001C74  EC9A  F01C         	call	___ftmul	;wreg free
  2976  001C78  C0A1  F139         	movff	?___ftmul,sortBattery@Vf
  2977  001C7C  C0A2  F13A         	movff	?___ftmul+1,sortBattery@Vf+1
  2978  001C80  C0A3  F13B         	movff	?___ftmul+2,sortBattery@Vf+2
  2979                           
  2980                           ;main.c: 211: float V = V_max;
  2981  001C84  C12B  F13F         	movff	sortBattery@V_max,sortBattery@V_216
  2982  001C88  C12C  F140         	movff	sortBattery@V_max+1,sortBattery@V_216+1
  2983  001C8C  C12D  F141         	movff	sortBattery@V_max+2,sortBattery@V_216+2
  2984                           
  2985                           ;main.c: 212: if(Vf > V) {
  2986  001C90  C13F  F08C         	movff	sortBattery@V_216,___ftge@ff1
  2987  001C94  C140  F08D         	movff	sortBattery@V_216+1,___ftge@ff1+1
  2988  001C98  C141  F08E         	movff	sortBattery@V_216+2,___ftge@ff1+2
  2989  001C9C  C139  F08F         	movff	sortBattery@Vf,___ftge@ff2
  2990  001CA0  C13A  F090         	movff	sortBattery@Vf+1,___ftge@ff2+1
  2991  001CA4  C13B  F091         	movff	sortBattery@Vf+2,___ftge@ff2+2
  2992  001CA8  ECE2  F024         	call	___ftge	;wreg free
  2993  001CAC  0100               	movlb	0	; () banked
  2994  001CAE  B0D8               	btfsc	status,0,c
  2995  001CB0  D01F               	goto	l6439
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;main.c: 213: V = Vf;
  2999  001CB2  C139  F13F         	movff	sortBattery@Vf,sortBattery@V_216
  3000  001CB6  C13A  F140         	movff	sortBattery@Vf+1,sortBattery@V_216+1
  3001  001CBA  C13B  F141         	movff	sortBattery@Vf+2,sortBattery@V_216+2
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;main.c: 214: signal = digitalRead(padPin1)<<1;
  3005  001CBE  0E88               	movlw	low _padPin1
  3006  001CC0  0100               	movlb	0	; () banked
  3007  001CC2  6F80               	movwf	digitalRead@pin& (0+255),b
  3008  001CC4  0E01               	movlw	high _padPin1
  3009  001CC6  0100               	movlb	0	; () banked
  3010  001CC8  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  3011  001CCA  ECC7  F01F         	call	_digitalRead	;wreg free
  3012  001CCE  0100               	movlb	0	; () banked
  3013  001CD0  90D8               	bcf	status,0,c
  3014  001CD2  3580               	rlcf	?_digitalRead& (0+255),w,b
  3015  001CD4  0101               	movlb	1	; () banked
  3016  001CD6  6F32               	movwf	sortBattery@signal& (0+255),b
  3017                           
  3018                           ;main.c: 215: signal |= digitalRead(padPin2);
  3019  001CD8  0E8C               	movlw	low _padPin2
  3020  001CDA  0100               	movlb	0	; () banked
  3021  001CDC  6F80               	movwf	digitalRead@pin& (0+255),b
  3022  001CDE  0E01               	movlw	high _padPin2
  3023  001CE0  0100               	movlb	0	; () banked
  3024  001CE2  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  3025  001CE4  ECC7  F01F         	call	_digitalRead	;wreg free
  3026  001CE8  0100               	movlb	0	; () banked
  3027  001CEA  5180               	movf	?_digitalRead& (0+255),w,b
  3028  001CEC  0101               	movlb	1	; () banked
  3029  001CEE  1332               	iorwf	sortBattery@signal& (0+255),f,b
  3030  001CF0                     l6439:
  3031                           
  3032                           ;main.c: 216: }
  3033                           ;main.c: 218: lcdClear();
  3034  001CF0  EC72  F02C         	call	_lcdClear	;wreg free
  3035                           
  3036                           ;main.c: 219: printf("N: %d, V_f: %.3f \nV: %.3f",pos_v_counter,Vf, V);
  3037  001CF4  0ECB               	movlw	low STR_4
  3038  001CF6  0100               	movlb	0	; () banked
  3039  001CF8  6FD5               	movwf	printf@f& (0+255),b
  3040  001CFA  0EFE               	movlw	high STR_4
  3041  001CFC  0100               	movlb	0	; () banked
  3042  001CFE  6FD6               	movwf	(printf@f+1)& (0+255),b
  3043  001D00  C124  F0D7         	movff	sortBattery@pos_v_counter,?_printf+2
  3044  001D04  C125  F0D8         	movff	sortBattery@pos_v_counter+1,?_printf+3
  3045  001D08  C139  F0D9         	movff	sortBattery@Vf,?_printf+4
  3046  001D0C  C13A  F0DA         	movff	sortBattery@Vf+1,?_printf+5
  3047  001D10  C13B  F0DB         	movff	sortBattery@Vf+2,?_printf+6
  3048  001D14  C13F  F0DC         	movff	sortBattery@V_216,?_printf+7
  3049  001D18  C140  F0DD         	movff	sortBattery@V_216+1,?_printf+8
  3050  001D1C  C141  F0DE         	movff	sortBattery@V_216+2,?_printf+9
  3051  001D20  EC09  F000         	call	_printf	;wreg free
  3052                           
  3053                           ;main.c: 221: readKeypad();
  3054  001D24  ECBA  F02B         	call	_readKeypad	;wreg free
  3055                           
  3056                           ;main.c: 225: switch(signal){
  3057  001D28  D0A3               	goto	l6465
  3058  001D2A                     l6443:
  3059                           
  3060                           ;main.c: 228: digitalWrite(AA_float, 0);
  3061  001D2A  0E78               	movlw	low _AA_float
  3062  001D2C  0100               	movlb	0	; () banked
  3063  001D2E  6F80               	movwf	digitalWrite@pin& (0+255),b
  3064  001D30  0E01               	movlw	high _AA_float
  3065  001D32  0100               	movlb	0	; () banked
  3066  001D34  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  3067  001D36  0E00               	movlw	0
  3068  001D38  0100               	movlb	0	; () banked
  3069  001D3A  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  3070  001D3C  0E00               	movlw	0
  3071  001D3E  6F82               	movwf	digitalWrite@val& (0+255),b
  3072  001D40  EC89  F022         	call	_digitalWrite	;wreg free
  3073                           
  3074                           ;main.c: 229: _delay((unsigned long)((1)*(10000000/4000.0)));
  3075  001D44  0E04               	movlw	4
  3076  001D46  0100               	movlb	0	; () banked
  3077  001D48  6FF6               	movwf	??_sortBattery& (0+255),b
  3078  001D4A  0E3D               	movlw	61
  3079  001D4C                     u8467:
  3080  001D4C  2EE8               	decfsz	wreg,f,c
  3081  001D4E  D7FE               	bra	u8467
  3082  001D50  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  3083  001D52  D7FC               	bra	u8467
  3084  001D54  D000               	nop2	
  3085                           
  3086                           ;main.c: 230: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  3087  001D56  C136  F095         	movff	sortBattery@resolution,___ftdiv@f2
  3088  001D5A  C137  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  3089  001D5E  C138  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  3090  001D62  C1AA  F080         	movff	_padPin3+2,analogRead@channel
  3091  001D66  C1AB  F081         	movff	_padPin3+3,analogRead@channel+1
  3092  001D6A  EC08  F02B         	call	_analogRead	;wreg free
  3093  001D6E  C080  F088         	movff	?_analogRead,___altoft@c
  3094  001D72  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  3095  001D76  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  3096  001D7A  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  3097  001D7E  EC0F  F027         	call	___altoft	;wreg free
  3098  001D82  C088  F092         	movff	?___altoft,___ftdiv@f1
  3099  001D86  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  3100  001D8A  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  3101  001D8E  EC49  F01D         	call	___ftdiv	;wreg free
  3102  001D92  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  3103  001D96  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  3104  001D9A  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  3105  001D9E  C133  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  3106  001DA2  C134  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  3107  001DA6  C135  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  3108  001DAA  EC9A  F01C         	call	___ftmul	;wreg free
  3109  001DAE  C0A1  F121         	movff	?___ftmul,sortBattery@V_float
  3110  001DB2  C0A2  F122         	movff	?___ftmul+1,sortBattery@V_float+1
  3111  001DB6  C0A3  F123         	movff	?___ftmul+2,sortBattery@V_float+2
  3112                           
  3113                           ;main.c: 231: if(V_float < 0.1){
  3114  001DBA  C121  F08C         	movff	sortBattery@V_float,___ftge@ff1
  3115  001DBE  C122  F08D         	movff	sortBattery@V_float+1,___ftge@ff1+1
  3116  001DC2  C123  F08E         	movff	sortBattery@V_float+2,___ftge@ff1+2
  3117  001DC6  0ECD               	movlw	205
  3118  001DC8  0100               	movlb	0	; () banked
  3119  001DCA  6F8F               	movwf	___ftge@ff2& (0+255),b
  3120  001DCC  0ECC               	movlw	204
  3121  001DCE  0100               	movlb	0	; () banked
  3122  001DD0  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  3123  001DD2  0E3D               	movlw	61
  3124  001DD4  0100               	movlb	0	; () banked
  3125  001DD6  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  3126  001DD8  ECE2  F024         	call	___ftge	;wreg free
  3127  001DDC  0100               	movlb	0	; () banked
  3128  001DDE  B0D8               	btfsc	status,0,c
  3129  001DE0  D016               	goto	l6455
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;main.c: 232: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  3133  001DE2  C15E  F08C         	movff	_V_LIM_AA,___ftge@ff1
  3134  001DE6  C15F  F08D         	movff	_V_LIM_AA+1,___ftge@ff1+1
  3135  001DEA  C160  F08E         	movff	_V_LIM_AA+2,___ftge@ff1+2
  3136  001DEE  C13F  F08F         	movff	sortBattery@V_216,___ftge@ff2
  3137  001DF2  C140  F090         	movff	sortBattery@V_216+1,___ftge@ff2+1
  3138  001DF6  C141  F091         	movff	sortBattery@V_216+2,___ftge@ff2+2
  3139  001DFA  ECE2  F024         	call	___ftge	;wreg free
  3140  001DFE  0100               	movlb	0	; () banked
  3141  001E00  B0D8               	btfsc	status,0,c
  3142  001E02  D031               	goto	l158
  3143                           
  3144                           ; BSR set to: 0
  3145  001E04  C170  F12E         	movff	_redirectAngle_AA,sortBattery@targetAngle
  3146  001E08  C171  F12F         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  3147  001E0C  D03C               	goto	l6467
  3148  001E0E                     l6455:
  3149                           
  3150                           ;main.c: 238: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  3151  001E0E  C15B  F08C         	movff	_V_LIM_9V,___ftge@ff1
  3152  001E12  C15C  F08D         	movff	_V_LIM_9V+1,___ftge@ff1+1
  3153  001E16  C15D  F08E         	movff	_V_LIM_9V+2,___ftge@ff1+2
  3154  001E1A  C13F  F08F         	movff	sortBattery@V_216,___ftge@ff2
  3155  001E1E  C140  F090         	movff	sortBattery@V_216+1,___ftge@ff2+1
  3156  001E22  C141  F091         	movff	sortBattery@V_216+2,___ftge@ff2+2
  3157  001E26  ECE2  F024         	call	___ftge	;wreg free
  3158  001E2A  0100               	movlb	0	; () banked
  3159  001E2C  B0D8               	btfsc	status,0,c
  3160  001E2E  D01B               	goto	l158
  3161                           
  3162                           ; BSR set to: 0
  3163  001E30  C16E  F12E         	movff	_redirectAngle_9V,sortBattery@targetAngle
  3164  001E34  C16F  F12F         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  3165  001E38  D026               	goto	l6467
  3166  001E3A                     l6459:
  3167                           
  3168                           ;main.c: 242: if(V > V_LIM_C) targetAngle = redirectAngle_C;
  3169  001E3A  C161  F08C         	movff	_V_LIM_C,___ftge@ff1
  3170  001E3E  C162  F08D         	movff	_V_LIM_C+1,___ftge@ff1+1
  3171  001E42  C163  F08E         	movff	_V_LIM_C+2,___ftge@ff1+2
  3172  001E46  C13F  F08F         	movff	sortBattery@V_216,___ftge@ff2
  3173  001E4A  C140  F090         	movff	sortBattery@V_216+1,___ftge@ff2+1
  3174  001E4E  C141  F091         	movff	sortBattery@V_216+2,___ftge@ff2+2
  3175  001E52  ECE2  F024         	call	___ftge	;wreg free
  3176  001E56  0100               	movlb	0	; () banked
  3177  001E58  B0D8               	btfsc	status,0,c
  3178  001E5A  D005               	goto	l158
  3179                           
  3180                           ; BSR set to: 0
  3181  001E5C  C172  F12E         	movff	_redirectAngle_C,sortBattery@targetAngle
  3182  001E60  C173  F12F         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  3183  001E64  D010               	goto	l6467
  3184  001E66                     l158:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 243: else targetAngle = redirectAngle_OTHER;
  3188  001E66  C174  F12E         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3189  001E6A  C175  F12F         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;main.c: 245: }
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;main.c: 244: break;
  3196  001E6E  D00B               	goto	l6467
  3197  001E70                     l6465:
  3198  001E70  0101               	movlb	1	; () banked
  3199  001E72  5132               	movf	sortBattery@signal& (0+255),w,b
  3200                           
  3201                           ; Switch size 1, requested type "space"
  3202                           ; Number of cases is 3, Range of values is 0 to 2
  3203                           ; switch strategies available:
  3204                           ; Name         Instructions Cycles
  3205                           ; simple_byte           10     6 (average)
  3206                           ;	Chosen strategy is simple_byte
  3207  001E74  0A00               	xorlw	0	; case 0
  3208  001E76  B4D8               	btfsc	status,2,c
  3209  001E78  D758               	goto	l6443
  3210  001E7A  0A01               	xorlw	1	; case 1
  3211  001E7C  B4D8               	btfsc	status,2,c
  3212  001E7E  D7DD               	goto	l6459
  3213  001E80  0A03               	xorlw	3	; case 2
  3214  001E82  B4D8               	btfsc	status,2,c
  3215  001E84  D7C4               	goto	l6455
  3216  001E86                     l6467:
  3217                           
  3218                           ;main.c: 247: setAngle(redirectingServo, targetAngle);
  3219  001E86  0E94               	movlw	low _redirectingServo
  3220  001E88  0100               	movlb	0	; () banked
  3221  001E8A  6FEC               	movwf	setAngle@motor& (0+255),b
  3222  001E8C  0E01               	movlw	high _redirectingServo
  3223  001E8E  0100               	movlb	0	; () banked
  3224  001E90  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  3225  001E92  C12E  F0EE         	movff	sortBattery@targetAngle,setAngle@angle
  3226  001E96  C12F  F0EF         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  3227  001E9A  EC78  F024         	call	_setAngle	;wreg free
  3228                           
  3229                           ;main.c: 248: _delay((unsigned long)((500)*(10000000/4000.0)));
  3230  001E9E  0E07               	movlw	7
  3231  001EA0  0100               	movlb	0	; () banked
  3232  001EA2  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  3233  001EA4  0E58               	movlw	88
  3234  001EA6  0100               	movlb	0	; () banked
  3235  001EA8  6FF6               	movwf	??_sortBattery& (0+255),b
  3236  001EAA  0E59               	movlw	89
  3237  001EAC                     u8477:
  3238  001EAC  2EE8               	decfsz	wreg,f,c
  3239  001EAE  D7FE               	bra	u8477
  3240  001EB0  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  3241  001EB2  D7FC               	bra	u8477
  3242  001EB4  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3243  001EB6  D7FA               	bra	u8477
  3244  001EB8  D000               	nop2	
  3245                           
  3246                           ;main.c: 252: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  3247  001EBA  C166  F130         	movff	_padAngle_CLOSE,sortBattery@i_219
  3248  001EBE  C167  F131         	movff	_padAngle_CLOSE+1,sortBattery@i_219+1
  3249  001EC2  D018               	goto	l6479
  3250  001EC4                     l6473:
  3251                           
  3252                           ;main.c: 253: setAngle(padServo, i);
  3253  001EC4  0E90               	movlw	low _padServo
  3254  001EC6  0100               	movlb	0	; () banked
  3255  001EC8  6FEC               	movwf	setAngle@motor& (0+255),b
  3256  001ECA  0E01               	movlw	high _padServo
  3257  001ECC  0100               	movlb	0	; () banked
  3258  001ECE  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  3259  001ED0  C130  F0EE         	movff	sortBattery@i_219,setAngle@angle
  3260  001ED4  C131  F0EF         	movff	sortBattery@i_219+1,setAngle@angle+1
  3261  001ED8  EC78  F024         	call	_setAngle	;wreg free
  3262                           
  3263                           ;main.c: 254: _delay((unsigned long)((3)*(10000000/4000.0)));
  3264  001EDC  0E0A               	movlw	10
  3265  001EDE  0100               	movlb	0	; () banked
  3266  001EE0  6FF6               	movwf	??_sortBattery& (0+255),b
  3267  001EE2  0EBC               	movlw	188
  3268  001EE4                     u8487:
  3269  001EE4  2EE8               	decfsz	wreg,f,c
  3270  001EE6  D7FE               	bra	u8487
  3271  001EE8  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  3272  001EEA  D7FC               	bra	u8487
  3273  001EEC  F000               	nop	
  3274  001EEE  0101               	movlb	1	; () banked
  3275  001EF0  4B30               	infsnz	sortBattery@i_219& (0+255),f,b
  3276  001EF2  2B31               	incf	(sortBattery@i_219+1)& (0+255),f,b
  3277  001EF4                     l6479:
  3278  001EF4  0101               	movlb	1	; () banked
  3279  001EF6  516A               	movf	_padAngle_OPEN& (0+255),w,b
  3280  001EF8  0101               	movlb	1	; () banked
  3281  001EFA  5D30               	subwf	sortBattery@i_219& (0+255),w,b
  3282  001EFC  0101               	movlb	1	; () banked
  3283  001EFE  5131               	movf	(sortBattery@i_219+1)& (0+255),w,b
  3284  001F00  0A80               	xorlw	128
  3285  001F02  0100               	movlb	0	; () banked
  3286  001F04  6FF6               	movwf	??_sortBattery& (0+255),b
  3287  001F06  0101               	movlb	1	; () banked
  3288  001F08  516B               	movf	(_padAngle_OPEN+1)& (0+255),w,b
  3289  001F0A  0A80               	xorlw	128
  3290  001F0C  0100               	movlb	0	; () banked
  3291  001F0E  59F6               	subwfb	??_sortBattery& (0+255),w,b
  3292  001F10  A0D8               	btfss	status,0,c
  3293  001F12  D7D8               	goto	l6473
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;main.c: 255: }
  3297                           ;main.c: 257: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3298                           
  3299                           ; BSR set to: 0
  3300  001F14  0E0D               	movlw	13
  3301  001F16  0100               	movlb	0	; () banked
  3302  001F18  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  3303  001F1A  0EAF               	movlw	175
  3304  001F1C  0100               	movlb	0	; () banked
  3305  001F1E  6FF6               	movwf	??_sortBattery& (0+255),b
  3306  001F20  0EB6               	movlw	182
  3307  001F22                     u8497:
  3308  001F22  2EE8               	decfsz	wreg,f,c
  3309  001F24  D7FE               	bra	u8497
  3310  001F26  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  3311  001F28  D7FC               	bra	u8497
  3312  001F2A  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3313  001F2C  D7FA               	bra	u8497
  3314  001F2E  F000               	nop	
  3315                           
  3316                           ;main.c: 261: setAngle(padServo, padAngle_NEUTRAL);
  3317  001F30  0E90               	movlw	low _padServo
  3318  001F32  0100               	movlb	0	; () banked
  3319  001F34  6FEC               	movwf	setAngle@motor& (0+255),b
  3320  001F36  0E01               	movlw	high _padServo
  3321  001F38  0100               	movlb	0	; () banked
  3322  001F3A  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  3323  001F3C  C168  F0EE         	movff	_padAngle_NEUTRAL,setAngle@angle
  3324  001F40  C169  F0EF         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3325  001F44  EC78  F024         	call	_setAngle	;wreg free
  3326                           
  3327                           ;main.c: 265: setAngle(conveyorServo, 130);
  3328  001F48  0E7C               	movlw	low _conveyorServo
  3329  001F4A  0100               	movlb	0	; () banked
  3330  001F4C  6FEC               	movwf	setAngle@motor& (0+255),b
  3331  001F4E  0E01               	movlw	high _conveyorServo
  3332  001F50  0100               	movlb	0	; () banked
  3333  001F52  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  3334  001F54  0E00               	movlw	0
  3335  001F56  0100               	movlb	0	; () banked
  3336  001F58  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  3337  001F5A  0E82               	movlw	130
  3338  001F5C  6FEE               	movwf	setAngle@angle& (0+255),b
  3339  001F5E  EC78  F024         	call	_setAngle	;wreg free
  3340                           
  3341                           ;main.c: 266: digitalWrite(cylinderMotor, 1);
  3342  001F62  0E84               	movlw	low _cylinderMotor
  3343  001F64  0100               	movlb	0	; () banked
  3344  001F66  6F80               	movwf	digitalWrite@pin& (0+255),b
  3345  001F68  0E01               	movlw	high _cylinderMotor
  3346  001F6A  0100               	movlb	0	; () banked
  3347  001F6C  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  3348  001F6E  0E00               	movlw	0
  3349  001F70  0100               	movlb	0	; () banked
  3350  001F72  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  3351  001F74  0E01               	movlw	1
  3352  001F76  6F82               	movwf	digitalWrite@val& (0+255),b
  3353  001F78  EC89  F022         	call	_digitalWrite	;wreg free
  3354  001F7C  0012               	return		;funcret
  3355  001F7E                     __end_of_sortBattery:
  3356                           	opt stack 0
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           postinc0	equ	0xFEE
  3362                           wreg	equ	0xFE8
  3363                           postdec1	equ	0xFE5
  3364                           fsr1l	equ	0xFE1
  3365                           status	equ	0xFD8
  3366                           
  3367 ;; *************** function _digitalWrite *****************
  3368 ;; Defined at:
  3369 ;;		line 53 in file "iopin.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  pin             2    0[BANK0 ] PTR int 
  3372 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
  3373 ;;		 -> conveyorServo(4), cylinderMotor(4), 
  3374 ;;  val             2    2[BANK0 ] int 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  p               2    7[BANK0 ] int 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3386 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;Total ram usage:        9 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    6
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_main
  3397 ;;		_sortBattery
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text2
  3402  004512                     __ptext2:
  3403                           	opt stack 0
  3404  004512                     _digitalWrite:
  3405                           	opt stack 23
  3406                           
  3407                           ;iopin.c: 54: if(pin){
  3408                           
  3409                           ;incstack = 0
  3410  004512  0100               	movlb	0	; () banked
  3411  004514  5180               	movf	digitalWrite@pin& (0+255),w,b
  3412  004516  0100               	movlb	0	; () banked
  3413  004518  1181               	iorwf	(digitalWrite@pin+1)& (0+255),w,b
  3414  00451A  B4D8               	btfsc	status,2,c
  3415  00451C  0012               	return	
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;iopin.c: 55: int p = 1 << pin[1];
  3419  00451E  0100               	movlb	0	; () banked
  3420  004520  EE20 F002          	lfsr	2,2
  3421  004524  5180               	movf	digitalWrite@pin& (0+255),w,b
  3422  004526  26D9               	addwf	fsr2l,f,c
  3423  004528  5181               	movf	(digitalWrite@pin+1)& (0+255),w,b
  3424  00452A  22DA               	addwfc	fsr2h,f,c
  3425  00452C  50DF               	movf	indf2,w,c
  3426  00452E  0100               	movlb	0	; () banked
  3427  004530  6F84               	movwf	??_digitalWrite& (0+255),b
  3428  004532  0E01               	movlw	1
  3429  004534  0100               	movlb	0	; () banked
  3430  004536  6F85               	movwf	(??_digitalWrite+1)& (0+255),b
  3431  004538  0E00               	movlw	0
  3432  00453A  0100               	movlb	0	; () banked
  3433  00453C  6F86               	movwf	(??_digitalWrite+2)& (0+255),b
  3434  00453E  0100               	movlb	0	; () banked
  3435  004540  2B84               	incf	??_digitalWrite& (0+255),f,b
  3436  004542  D004               	goto	u5804
  3437  004544                     u5805:
  3438  004544  90D8               	bcf	status,0,c
  3439  004546  0100               	movlb	0	; () banked
  3440  004548  3785               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  3441  00454A  3786               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  3442  00454C                     u5804:
  3443  00454C  0100               	movlb	0	; () banked
  3444  00454E  2F84               	decfsz	??_digitalWrite& (0+255),f,b
  3445  004550  D7F9               	goto	u5805
  3446  004552  C085  F087         	movff	??_digitalWrite+1,digitalWrite@p
  3447  004556  C086  F088         	movff	??_digitalWrite+2,digitalWrite@p+1
  3448                           
  3449                           ;iopin.c: 56: if(val == 0){
  3450  00455A  0100               	movlb	0	; () banked
  3451  00455C  5182               	movf	digitalWrite@val& (0+255),w,b
  3452  00455E  0100               	movlb	0	; () banked
  3453  004560  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3454  004562  A4D8               	btfss	status,2,c
  3455  004564  D03C               	goto	l5539
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;iopin.c: 57: p ^= 0xff;
  3459  004566  0EFF               	movlw	255
  3460  004568  0100               	movlb	0	; () banked
  3461  00456A  1B87               	xorwf	digitalWrite@p& (0+255),f,b
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;iopin.c: 58: }
  3465                           ;iopin.c: 60: switch(pin[0]){
  3466  00456C  D038               	goto	l5539
  3467  00456E                     l5515:
  3468                           
  3469                           ; BSR set to: 0
  3470  00456E  0100               	movlb	0	; () banked
  3471  004570  0582               	decf	digitalWrite@val& (0+255),w,b
  3472  004572  0100               	movlb	0	; () banked
  3473  004574  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3474  004576  A4D8               	btfss	status,2,c
  3475  004578  D004               	goto	l5519
  3476                           
  3477                           ; BSR set to: 0
  3478  00457A  0100               	movlb	0	; () banked
  3479  00457C  5187               	movf	digitalWrite@p& (0+255),w,b
  3480  00457E  1289               	iorwf	3977,f,c	;volatile
  3481  004580  0012               	return	
  3482  004582                     l5519:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;iopin.c: 62: else LATA &= p;
  3486  004582  0100               	movlb	0	; () banked
  3487  004584  5187               	movf	digitalWrite@p& (0+255),w,b
  3488  004586  1689               	andwf	3977,f,c	;volatile
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;iopin.c: 63: break;
  3492  004588  0012               	return	
  3493  00458A                     l5521:
  3494                           
  3495                           ; BSR set to: 0
  3496  00458A  0100               	movlb	0	; () banked
  3497  00458C  0582               	decf	digitalWrite@val& (0+255),w,b
  3498  00458E  0100               	movlb	0	; () banked
  3499  004590  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3500  004592  A4D8               	btfss	status,2,c
  3501  004594  D004               	goto	l5525
  3502                           
  3503                           ; BSR set to: 0
  3504  004596  0100               	movlb	0	; () banked
  3505  004598  5187               	movf	digitalWrite@p& (0+255),w,b
  3506  00459A  128A               	iorwf	3978,f,c	;volatile
  3507  00459C  0012               	return	
  3508  00459E                     l5525:
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;iopin.c: 65: else LATB &= p;
  3512  00459E  0100               	movlb	0	; () banked
  3513  0045A0  5187               	movf	digitalWrite@p& (0+255),w,b
  3514  0045A2  168A               	andwf	3978,f,c	;volatile
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;iopin.c: 66: break;
  3518  0045A4  0012               	return	
  3519  0045A6                     l5527:
  3520                           
  3521                           ; BSR set to: 0
  3522  0045A6  0100               	movlb	0	; () banked
  3523  0045A8  0582               	decf	digitalWrite@val& (0+255),w,b
  3524  0045AA  0100               	movlb	0	; () banked
  3525  0045AC  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3526  0045AE  A4D8               	btfss	status,2,c
  3527  0045B0  D004               	goto	l5531
  3528                           
  3529                           ; BSR set to: 0
  3530  0045B2  0100               	movlb	0	; () banked
  3531  0045B4  5187               	movf	digitalWrite@p& (0+255),w,b
  3532  0045B6  128B               	iorwf	3979,f,c	;volatile
  3533  0045B8  0012               	return	
  3534  0045BA                     l5531:
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;iopin.c: 68: else LATC &= p;
  3538  0045BA  0100               	movlb	0	; () banked
  3539  0045BC  5187               	movf	digitalWrite@p& (0+255),w,b
  3540  0045BE  168B               	andwf	3979,f,c	;volatile
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;iopin.c: 69: break;
  3544  0045C0  0012               	return	
  3545  0045C2                     l5533:
  3546                           
  3547                           ; BSR set to: 0
  3548  0045C2  0100               	movlb	0	; () banked
  3549  0045C4  0582               	decf	digitalWrite@val& (0+255),w,b
  3550  0045C6  0100               	movlb	0	; () banked
  3551  0045C8  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  3552  0045CA  A4D8               	btfss	status,2,c
  3553  0045CC  D004               	goto	l5537
  3554                           
  3555                           ; BSR set to: 0
  3556  0045CE  0100               	movlb	0	; () banked
  3557  0045D0  5187               	movf	digitalWrite@p& (0+255),w,b
  3558  0045D2  128C               	iorwf	3980,f,c	;volatile
  3559  0045D4  0012               	return	
  3560  0045D6                     l5537:
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;iopin.c: 71: else LATD &= p;
  3564  0045D6  0100               	movlb	0	; () banked
  3565  0045D8  5187               	movf	digitalWrite@p& (0+255),w,b
  3566  0045DA  168C               	andwf	3980,f,c	;volatile
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;iopin.c: 72: }
  3570  0045DC  0012               	return	
  3571  0045DE                     l5539:
  3572                           
  3573                           ; BSR set to: 0
  3574  0045DE  C080  FFD9         	movff	digitalWrite@pin,fsr2l
  3575  0045E2  C081  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3576  0045E6  CFDE F084          	movff	postinc2,??_digitalWrite
  3577  0045EA  CFDD F085          	movff	postdec2,??_digitalWrite+1
  3578                           
  3579                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3580                           ; Switch size 1, requested type "space"
  3581                           ; Number of cases is 1, Range of values is 0 to 0
  3582                           ; switch strategies available:
  3583                           ; Name         Instructions Cycles
  3584                           ; simple_byte            4     3 (average)
  3585                           ;	Chosen strategy is simple_byte
  3586  0045EE  0100               	movlb	0	; () banked
  3587  0045F0  5185               	movf	(??_digitalWrite+1)& (0+255),w,b
  3588  0045F2  0A00               	xorlw	0	; case 0
  3589  0045F4  A4D8               	btfss	status,2,c
  3590  0045F6  0012               	return	
  3591                           
  3592                           ; BSR set to: 0
  3593                           ; Switch size 1, requested type "space"
  3594                           ; Number of cases is 4, Range of values is 0 to 3
  3595                           ; switch strategies available:
  3596                           ; Name         Instructions Cycles
  3597                           ; simple_byte           13     7 (average)
  3598                           ;	Chosen strategy is simple_byte
  3599  0045F8  0100               	movlb	0	; () banked
  3600  0045FA  5184               	movf	??_digitalWrite& (0+255),w,b
  3601  0045FC  0A00               	xorlw	0	; case 0
  3602  0045FE  B4D8               	btfsc	status,2,c
  3603  004600  D7B6               	goto	l5515
  3604  004602  0A01               	xorlw	1	; case 1
  3605  004604  B4D8               	btfsc	status,2,c
  3606  004606  D7C1               	goto	l5521
  3607  004608  0A03               	xorlw	3	; case 2
  3608  00460A  B4D8               	btfsc	status,2,c
  3609  00460C  D7CC               	goto	l5527
  3610  00460E  0A01               	xorlw	1	; case 3
  3611  004610  A4D8               	btfss	status,2,c
  3612                           
  3613                           ; BSR set to: 0
  3614  004612  0012               	return	
  3615  004614  D7D6               	goto	l5533
  3616  004616                     __end_of_digitalWrite:
  3617                           	opt stack 0
  3618                           tblptru	equ	0xFF8
  3619                           tblptrh	equ	0xFF7
  3620                           tblptrl	equ	0xFF6
  3621                           tablat	equ	0xFF5
  3622                           postinc0	equ	0xFEE
  3623                           wreg	equ	0xFE8
  3624                           postdec1	equ	0xFE5
  3625                           fsr1l	equ	0xFE1
  3626                           indf2	equ	0xFDF
  3627                           postinc2	equ	0xFDE
  3628                           postdec2	equ	0xFDD
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           
  3633 ;; *************** function _digitalRead *****************
  3634 ;; Defined at:
  3635 ;;		line 43 in file "iopin.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  pin             2    0[BANK0 ] PTR int 
  3638 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  2    0[BANK0 ] int 
  3643 ;; Registers used:
  3644 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3650 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;Total ram usage:        4 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    6
  3657 ;; This function calls:
  3658 ;;		Nothing
  3659 ;; This function is called by:
  3660 ;;		_main
  3661 ;;		_sortBattery
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text3
  3666  003F8E                     __ptext3:
  3667                           	opt stack 0
  3668  003F8E                     _digitalRead:
  3669                           	opt stack 23
  3670                           
  3671                           ;iopin.c: 44: switch(pin[0]){
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;incstack = 0
  3675  003F8E  D078               	goto	l5937
  3676  003F90                     l5919:
  3677  003F90  0100               	movlb	0	; () banked
  3678  003F92  EE20 F002          	lfsr	2,2
  3679  003F96  5180               	movf	digitalRead@pin& (0+255),w,b
  3680  003F98  26D9               	addwf	fsr2l,f,c
  3681  003F9A  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  3682  003F9C  22DA               	addwfc	fsr2h,f,c
  3683  003F9E  50DF               	movf	indf2,w,c
  3684  003FA0  0100               	movlb	0	; () banked
  3685  003FA2  6F82               	movwf	??_digitalRead& (0+255),b
  3686  003FA4  CF80 F083          	movff	3968,??_digitalRead+1	;volatile
  3687  003FA8  0100               	movlb	0	; () banked
  3688  003FAA  2B82               	incf	??_digitalRead& (0+255),f,b
  3689  003FAC  D003               	goto	u6544
  3690  003FAE                     u6545:
  3691  003FAE  0100               	movlb	0	; () banked
  3692  003FB0  90D8               	bcf	status,0,c
  3693  003FB2  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  3694  003FB4                     u6544:
  3695  003FB4  0100               	movlb	0	; () banked
  3696  003FB6  2F82               	decfsz	??_digitalRead& (0+255),f,b
  3697  003FB8  D7FA               	goto	u6545
  3698  003FBA  0E01               	movlw	1
  3699  003FBC  0100               	movlb	0	; () banked
  3700  003FBE  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  3701  003FC0  0100               	movlb	0	; () banked
  3702  003FC2  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  3703  003FC4  0100               	movlb	0	; () banked
  3704  003FC6  6F80               	movwf	?_digitalRead& (0+255),b
  3705  003FC8  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  3706                           
  3707                           ; BSR set to: 0
  3708  003FCA  0012               	return	
  3709  003FCC                     l5923:
  3710                           
  3711                           ; BSR set to: 0
  3712  003FCC  0100               	movlb	0	; () banked
  3713  003FCE  EE20 F002          	lfsr	2,2
  3714  003FD2  5180               	movf	digitalRead@pin& (0+255),w,b
  3715  003FD4  26D9               	addwf	fsr2l,f,c
  3716  003FD6  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  3717  003FD8  22DA               	addwfc	fsr2h,f,c
  3718  003FDA  50DF               	movf	indf2,w,c
  3719  003FDC  0100               	movlb	0	; () banked
  3720  003FDE  6F82               	movwf	??_digitalRead& (0+255),b
  3721  003FE0  CF81 F083          	movff	3969,??_digitalRead+1	;volatile
  3722  003FE4  0100               	movlb	0	; () banked
  3723  003FE6  2B82               	incf	??_digitalRead& (0+255),f,b
  3724  003FE8  D003               	goto	u6554
  3725  003FEA                     u6555:
  3726  003FEA  0100               	movlb	0	; () banked
  3727  003FEC  90D8               	bcf	status,0,c
  3728  003FEE  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  3729  003FF0                     u6554:
  3730  003FF0  0100               	movlb	0	; () banked
  3731  003FF2  2F82               	decfsz	??_digitalRead& (0+255),f,b
  3732  003FF4  D7FA               	goto	u6555
  3733  003FF6  0E01               	movlw	1
  3734  003FF8  0100               	movlb	0	; () banked
  3735  003FFA  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  3736  003FFC  0100               	movlb	0	; () banked
  3737  003FFE  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  3738  004000  0100               	movlb	0	; () banked
  3739  004002  6F80               	movwf	?_digitalRead& (0+255),b
  3740  004004  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  3741                           
  3742                           ; BSR set to: 0
  3743  004006  0012               	return	
  3744  004008                     l5927:
  3745                           
  3746                           ; BSR set to: 0
  3747  004008  0100               	movlb	0	; () banked
  3748  00400A  EE20 F002          	lfsr	2,2
  3749  00400E  5180               	movf	digitalRead@pin& (0+255),w,b
  3750  004010  26D9               	addwf	fsr2l,f,c
  3751  004012  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  3752  004014  22DA               	addwfc	fsr2h,f,c
  3753  004016  50DF               	movf	indf2,w,c
  3754  004018  0100               	movlb	0	; () banked
  3755  00401A  6F82               	movwf	??_digitalRead& (0+255),b
  3756  00401C  CF82 F083          	movff	3970,??_digitalRead+1	;volatile
  3757  004020  0100               	movlb	0	; () banked
  3758  004022  2B82               	incf	??_digitalRead& (0+255),f,b
  3759  004024  D003               	goto	u6564
  3760  004026                     u6565:
  3761  004026  0100               	movlb	0	; () banked
  3762  004028  90D8               	bcf	status,0,c
  3763  00402A  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  3764  00402C                     u6564:
  3765  00402C  0100               	movlb	0	; () banked
  3766  00402E  2F82               	decfsz	??_digitalRead& (0+255),f,b
  3767  004030  D7FA               	goto	u6565
  3768  004032  0E01               	movlw	1
  3769  004034  0100               	movlb	0	; () banked
  3770  004036  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  3771  004038  0100               	movlb	0	; () banked
  3772  00403A  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  3773  00403C  0100               	movlb	0	; () banked
  3774  00403E  6F80               	movwf	?_digitalRead& (0+255),b
  3775  004040  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  3776                           
  3777                           ; BSR set to: 0
  3778  004042  0012               	return	
  3779  004044                     l5931:
  3780                           
  3781                           ; BSR set to: 0
  3782  004044  0100               	movlb	0	; () banked
  3783  004046  EE20 F002          	lfsr	2,2
  3784  00404A  5180               	movf	digitalRead@pin& (0+255),w,b
  3785  00404C  26D9               	addwf	fsr2l,f,c
  3786  00404E  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  3787  004050  22DA               	addwfc	fsr2h,f,c
  3788  004052  50DF               	movf	indf2,w,c
  3789  004054  0100               	movlb	0	; () banked
  3790  004056  6F82               	movwf	??_digitalRead& (0+255),b
  3791  004058  CF83 F083          	movff	3971,??_digitalRead+1	;volatile
  3792  00405C  0100               	movlb	0	; () banked
  3793  00405E  2B82               	incf	??_digitalRead& (0+255),f,b
  3794  004060  D003               	goto	u6574
  3795  004062                     u6575:
  3796  004062  0100               	movlb	0	; () banked
  3797  004064  90D8               	bcf	status,0,c
  3798  004066  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  3799  004068                     u6574:
  3800  004068  0100               	movlb	0	; () banked
  3801  00406A  2F82               	decfsz	??_digitalRead& (0+255),f,b
  3802  00406C  D7FA               	goto	u6575
  3803  00406E  0E01               	movlw	1
  3804  004070  0100               	movlb	0	; () banked
  3805  004072  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  3806  004074  0100               	movlb	0	; () banked
  3807  004076  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  3808  004078  0100               	movlb	0	; () banked
  3809  00407A  6F80               	movwf	?_digitalRead& (0+255),b
  3810  00407C  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  3811                           
  3812                           ; BSR set to: 0
  3813  00407E  0012               	return	
  3814  004080                     l5937:
  3815  004080  C080  FFD9         	movff	digitalRead@pin,fsr2l
  3816  004084  C081  FFDA         	movff	digitalRead@pin+1,fsr2h
  3817  004088  CFDE F082          	movff	postinc2,??_digitalRead
  3818  00408C  CFDD F083          	movff	postdec2,??_digitalRead+1
  3819                           
  3820                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3821                           ; Switch size 1, requested type "space"
  3822                           ; Number of cases is 1, Range of values is 0 to 0
  3823                           ; switch strategies available:
  3824                           ; Name         Instructions Cycles
  3825                           ; simple_byte            4     3 (average)
  3826                           ;	Chosen strategy is simple_byte
  3827  004090  0100               	movlb	0	; () banked
  3828  004092  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  3829  004094  0A00               	xorlw	0	; case 0
  3830  004096  A4D8               	btfss	status,2,c
  3831  004098  D00E               	goto	l314
  3832                           
  3833                           ; BSR set to: 0
  3834                           ; Switch size 1, requested type "space"
  3835                           ; Number of cases is 4, Range of values is 0 to 3
  3836                           ; switch strategies available:
  3837                           ; Name         Instructions Cycles
  3838                           ; simple_byte           13     7 (average)
  3839                           ;	Chosen strategy is simple_byte
  3840  00409A  0100               	movlb	0	; () banked
  3841  00409C  5182               	movf	??_digitalRead& (0+255),w,b
  3842  00409E  0A00               	xorlw	0	; case 0
  3843  0040A0  B4D8               	btfsc	status,2,c
  3844  0040A2  D776               	goto	l5919
  3845  0040A4  0A01               	xorlw	1	; case 1
  3846  0040A6  B4D8               	btfsc	status,2,c
  3847  0040A8  D791               	goto	l5923
  3848  0040AA  0A03               	xorlw	3	; case 2
  3849  0040AC  B4D8               	btfsc	status,2,c
  3850  0040AE  D7AC               	goto	l5927
  3851  0040B0  0A01               	xorlw	1	; case 3
  3852  0040B2  B4D8               	btfsc	status,2,c
  3853  0040B4  D7C7               	goto	l5931
  3854  0040B6                     l314:
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;iopin.c: 50: return -1;
  3858  0040B6  0100               	movlb	0	; () banked
  3859  0040B8  6980               	setf	?_digitalRead& (0+255),b
  3860  0040BA  6981               	setf	(?_digitalRead+1)& (0+255),b
  3861                           
  3862                           ; BSR set to: 0
  3863  0040BC  0012               	return		;funcret
  3864  0040BE                     __end_of_digitalRead:
  3865                           	opt stack 0
  3866                           tblptru	equ	0xFF8
  3867                           tblptrh	equ	0xFF7
  3868                           tblptrl	equ	0xFF6
  3869                           tablat	equ	0xFF5
  3870                           postinc0	equ	0xFEE
  3871                           wreg	equ	0xFE8
  3872                           postdec1	equ	0xFE5
  3873                           fsr1l	equ	0xFE1
  3874                           indf2	equ	0xFDF
  3875                           postinc2	equ	0xFDE
  3876                           postdec2	equ	0xFDD
  3877                           fsr2h	equ	0xFDA
  3878                           fsr2l	equ	0xFD9
  3879                           status	equ	0xFD8
  3880                           
  3881 ;; *************** function _analogRead *****************
  3882 ;; Defined at:
  3883 ;;		line 90 in file "iopin.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  channel         2    0[BANK0 ] int 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;		None
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  4    0[BANK0 ] long 
  3890 ;; Registers used:
  3891 ;;		wreg, status,2, status,0
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3897 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;Total ram usage:        6 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    6
  3904 ;; This function calls:
  3905 ;;		Nothing
  3906 ;; This function is called by:
  3907 ;;		_sortBattery
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text4
  3912  005610                     __ptext4:
  3913                           	opt stack 0
  3914  005610                     _analogRead:
  3915                           	opt stack 23
  3916                           
  3917                           ;iopin.c: 91: ADCON0 = channel<<2;
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;incstack = 0
  3921  005610  0100               	movlb	0	; () banked
  3922  005612  4580               	rlncf	analogRead@channel& (0+255),w,b
  3923  005614  46E8               	rlncf	wreg,f,c
  3924  005616  0BFC               	andlw	252
  3925  005618  6EC2               	movwf	4034,c	;volatile
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3929  00561A  80C2               	bsf	4034,0,c	;volatile
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3933  00561C  82C2               	bsf	4034,1,c	;volatile
  3934  00561E                     l339:
  3935  00561E  B2C2               	btfsc	4034,1,c	;volatile
  3936  005620  D7FE               	goto	l339
  3937                           
  3938                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3939  005622  50C3               	movf	4035,w,c	;volatile
  3940  005624  CFC4 F084          	movff	4036,??_analogRead	;volatile
  3941  005628  0100               	movlb	0	; () banked
  3942  00562A  6B85               	clrf	(??_analogRead+1)& (0+255),b
  3943  00562C  C084  F085         	movff	??_analogRead,??_analogRead+1
  3944  005630  0100               	movlb	0	; () banked
  3945  005632  6B84               	clrf	??_analogRead& (0+255),b
  3946  005634  0100               	movlb	0	; () banked
  3947  005636  2784               	addwf	??_analogRead& (0+255),f,b
  3948  005638  0E00               	movlw	0
  3949  00563A  2385               	addwfc	(??_analogRead+1)& (0+255),f,b
  3950  00563C  C084  F080         	movff	??_analogRead,?_analogRead
  3951  005640  C085  F081         	movff	??_analogRead+1,?_analogRead+1
  3952  005644  0100               	movlb	0	; () banked
  3953  005646  0E00               	movlw	0
  3954  005648  BF81               	btfsc	(?_analogRead+1)& (0+255),7,b
  3955  00564A  0EFF               	movlw	-1
  3956  00564C  6F82               	movwf	(?_analogRead+2)& (0+255),b
  3957  00564E  6F83               	movwf	(?_analogRead+3)& (0+255),b
  3958  005650  0012               	return	
  3959  005652                     __end_of_analogRead:
  3960                           	opt stack 0
  3961                           tblptru	equ	0xFF8
  3962                           tblptrh	equ	0xFF7
  3963                           tblptrl	equ	0xFF6
  3964                           tablat	equ	0xFF5
  3965                           postinc0	equ	0xFEE
  3966                           wreg	equ	0xFE8
  3967                           postdec1	equ	0xFE5
  3968                           fsr1l	equ	0xFE1
  3969                           indf2	equ	0xFDF
  3970                           postinc2	equ	0xFDE
  3971                           postdec2	equ	0xFDD
  3972                           fsr2h	equ	0xFDA
  3973                           fsr2l	equ	0xFD9
  3974                           status	equ	0xFD8
  3975                           
  3976 ;; *************** function _pinSetup *****************
  3977 ;; Defined at:
  3978 ;;		line 269 in file "main.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;		None
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;Total ram usage:        0 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    6
  3999 ;; This function calls:
  4000 ;;		Nothing
  4001 ;; This function is called by:
  4002 ;;		_main
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text5
  4007  005692                     __ptext5:
  4008                           	opt stack 0
  4009  005692                     _pinSetup:
  4010                           	opt stack 24
  4011                           
  4012                           ;main.c: 275: TRISA = 0xFF;
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;incstack = 0
  4016  005692  6892               	setf	3986,c	;volatile
  4017                           
  4018                           ;main.c: 276: TRISB = 0xFF;
  4019  005694  6893               	setf	3987,c	;volatile
  4020                           
  4021                           ;main.c: 277: TRISC = 0b11000000;
  4022  005696  0EC0               	movlw	192
  4023  005698  6E94               	movwf	3988,c	;volatile
  4024                           
  4025                           ;main.c: 278: TRISD = 0x00;
  4026  00569A  0E00               	movlw	0
  4027  00569C  6E95               	movwf	3989,c	;volatile
  4028                           
  4029                           ;main.c: 279: TRISE = 0x00;
  4030  00569E  0E00               	movlw	0
  4031  0056A0  6E96               	movwf	3990,c	;volatile
  4032                           
  4033                           ;main.c: 281: LATA = 0x00;
  4034  0056A2  0E00               	movlw	0
  4035  0056A4  6E89               	movwf	3977,c	;volatile
  4036                           
  4037                           ;main.c: 282: LATB = 0x00;
  4038  0056A6  0E00               	movlw	0
  4039  0056A8  6E8A               	movwf	3978,c	;volatile
  4040                           
  4041                           ;main.c: 283: LATC = 0x00;
  4042  0056AA  0E00               	movlw	0
  4043  0056AC  6E8B               	movwf	3979,c	;volatile
  4044                           
  4045                           ;main.c: 284: LATD = 0x00;
  4046  0056AE  0E00               	movlw	0
  4047  0056B0  6E8C               	movwf	3980,c	;volatile
  4048                           
  4049                           ;main.c: 285: LATE = 0x00;
  4050  0056B2  0E00               	movlw	0
  4051  0056B4  6E8D               	movwf	3981,c	;volatile
  4052                           
  4053                           ;main.c: 287: ADCON0 = 0x00;
  4054  0056B6  0E00               	movlw	0
  4055  0056B8  6EC2               	movwf	4034,c	;volatile
  4056                           
  4057                           ;main.c: 289: ADCON1 |= 0x0B;
  4058  0056BA  0E0B               	movlw	11
  4059  0056BC  12C1               	iorwf	4033,f,c	;volatile
  4060                           
  4061                           ;main.c: 294: ADCON2 = 0;
  4062  0056BE  0E00               	movlw	0
  4063  0056C0  6EC0               	movwf	4032,c	;volatile
  4064                           
  4065                           ;main.c: 295: ADCON2 |= 0b010;
  4066  0056C2  82C0               	bsf	4032,1,c	;volatile
  4067                           
  4068                           ;main.c: 296: ADCON2 |= 0b110<<3;
  4069  0056C4  0E30               	movlw	48
  4070  0056C6  12C0               	iorwf	4032,f,c	;volatile
  4071                           
  4072                           ;main.c: 297: ADCON2 |= 1<<7;
  4073  0056C8  8EC0               	bsf	4032,7,c	;volatile
  4074                           
  4075                           ;main.c: 301: INT0IE = 1;
  4076  0056CA  88F2               	bsf	intcon,4,c	;volatile
  4077                           
  4078                           ;main.c: 302: (INTCONbits.GIE = 1);
  4079  0056CC  8EF2               	bsf	intcon,7,c	;volatile
  4080  0056CE  0012               	return		;funcret
  4081  0056D0                     __end_of_pinSetup:
  4082                           	opt stack 0
  4083                           tblptru	equ	0xFF8
  4084                           tblptrh	equ	0xFF7
  4085                           tblptrl	equ	0xFF6
  4086                           tablat	equ	0xFF5
  4087                           intcon	equ	0xFF2
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           postdec1	equ	0xFE5
  4091                           fsr1l	equ	0xFE1
  4092                           indf2	equ	0xFDF
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _pause *****************
  4100 ;; Defined at:
  4101 ;;		line 337 in file "main.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  message         2  101[BANK0 ] PTR unsigned char 
  4104 ;;		 -> STR_3(9), 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;		None
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  1    wreg      void 
  4109 ;; Registers used:
  4110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4116 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;Total ram usage:        2 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:   11
  4123 ;; This function calls:
  4124 ;;		_lcdClear
  4125 ;;		_printf
  4126 ;;		_readKeypad
  4127 ;; This function is called by:
  4128 ;;		_main
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text6
  4133  0058C6                     __ptext6:
  4134                           	opt stack 0
  4135  0058C6                     _pause:
  4136                           	opt stack 19
  4137                           
  4138                           ;main.c: 338: lcdClear();
  4139                           
  4140                           ;incstack = 0
  4141  0058C6  EC72  F02C         	call	_lcdClear	;wreg free
  4142                           
  4143                           ;main.c: 339: printf(message);
  4144  0058CA  C0E5  F0D5         	movff	pause@message,printf@f
  4145  0058CE  C0E6  F0D6         	movff	pause@message+1,printf@f+1
  4146  0058D2  EC09  F000         	call	_printf	;wreg free
  4147                           
  4148                           ;main.c: 340: readKeypad();
  4149  0058D6  ECBA  F02B         	call	_readKeypad	;wreg free
  4150  0058DA  0012               	return		;funcret
  4151  0058DC                     __end_of_pause:
  4152                           	opt stack 0
  4153                           tblptru	equ	0xFF8
  4154                           tblptrh	equ	0xFF7
  4155                           tblptrl	equ	0xFF6
  4156                           tablat	equ	0xFF5
  4157                           intcon	equ	0xFF2
  4158                           postinc0	equ	0xFEE
  4159                           wreg	equ	0xFE8
  4160                           postdec1	equ	0xFE5
  4161                           fsr1l	equ	0xFE1
  4162                           indf2	equ	0xFDF
  4163                           postinc2	equ	0xFDE
  4164                           postdec2	equ	0xFDD
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _readKeypad *****************
  4170 ;; Defined at:
  4171 ;;		line 36 in file "keypad.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;		None
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  key             1    0[BANK0 ] unsigned char 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      unsigned char 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;Total ram usage:        1 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    6
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_sortBattery
  4196 ;;		_pause
  4197 ;;		_showInterface
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text7
  4202  005774                     __ptext7:
  4203                           	opt stack 0
  4204  005774                     _readKeypad:
  4205                           	opt stack 23
  4206  005774                     l241:
  4207  005774  A281               	btfss	3969,1,c	;volatile
  4208  005776  D7FE               	goto	l241
  4209                           
  4210                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4211  005778  3881               	swapf	3969,w,c	;volatile
  4212  00577A  0B0F               	andlw	15
  4213  00577C  0B0F               	andlw	15
  4214  00577E  0100               	movlb	0	; () banked
  4215  005780  6F80               	movwf	readKeypad@key& (0+255),b
  4216  005782                     l244:
  4217  005782  B281               	btfsc	3969,1,c	;volatile
  4218  005784  D7FE               	goto	l244
  4219                           
  4220                           ;keypad.c: 40: return keys[key];
  4221  005786  0100               	movlb	0	; () banked
  4222  005788  5180               	movf	readKeypad@key& (0+255),w,b
  4223  00578A  0D01               	mullw	1
  4224  00578C  0EB3               	movlw	low _keys
  4225  00578E  24F3               	addwf	prodl,w,c
  4226  005790  6EF6               	movwf	tblptrl,c
  4227  005792  0EFE               	movlw	high _keys
  4228  005794  20F4               	addwfc	prodh,w,c
  4229  005796  6EF7               	movwf	tblptrh,c
  4230  005798                     	if	0	;There are less than 3 active tblptr bytes
  4231  005798                     	endif
  4232  005798  0008               	tblrd		*
  4233  00579A  50F5               	movf	tablat,w,c
  4234  00579C  0012               	return	
  4235  00579E                     __end_of_readKeypad:
  4236                           	opt stack 0
  4237                           tblptru	equ	0xFF8
  4238                           tblptrh	equ	0xFF7
  4239                           tblptrl	equ	0xFF6
  4240                           tablat	equ	0xFF5
  4241                           prodh	equ	0xFF4
  4242                           prodl	equ	0xFF3
  4243                           intcon	equ	0xFF2
  4244                           postinc0	equ	0xFEE
  4245                           wreg	equ	0xFE8
  4246                           postdec1	equ	0xFE5
  4247                           fsr1l	equ	0xFE1
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _printf *****************
  4256 ;; Defined at:
  4257 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  f               2   85[BANK0 ] PTR const unsigned char 
  4260 ;;		 -> STR_18(17), STR_17(18), STR_16(17), STR_15(18), 
  4261 ;;		 -> STR_14(17), STR_13(19), STR_12(17), STR_11(18), 
  4262 ;;		 -> STR_10(17), STR_9(18), STR_8(17), STR_7(18), 
  4263 ;;		 -> STR_6(8), STR_5(11), STR_4(26), STR_3(9), 
  4264 ;;		 -> STR_2(17), STR_1(8), 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  idx             1    5[BANK1 ] unsigned char 
  4267 ;;  val             4   16[BANK1 ] unsigned long 
  4268 ;;  tmpval          4   10[BANK1 ] struct .
  4269 ;;  fval            3   20[BANK1 ] struct .
  4270 ;;  prec            2   27[BANK1 ] int 
  4271 ;;  flag            2   25[BANK1 ] unsigned short 
  4272 ;;  width           2   23[BANK1 ] int 
  4273 ;;  exp             2   14[BANK1 ] int 
  4274 ;;  ap              2    8[BANK1 ] PTR void [1]
  4275 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4276 ;;  len             2    6[BANK1 ] unsigned int 
  4277 ;;  cp              2    3[BANK1 ] PTR const unsigned char 
  4278 ;;		 -> printf@c(1), 
  4279 ;;  c               1   29[BANK1 ] char 
  4280 ;;  d               1    0        unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  2   85[BANK0 ] int 
  4283 ;; Registers used:
  4284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4290 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;      Totals:         0      16      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;Total ram usage:       46 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:   10
  4297 ;; This function calls:
  4298 ;;		___awdiv
  4299 ;;		___ftadd
  4300 ;;		___ftge
  4301 ;;		___ftmul
  4302 ;;		___ftneg
  4303 ;;		___ftsub
  4304 ;;		___fttol
  4305 ;;		___lldiv
  4306 ;;		___llmod
  4307 ;;		___lltoft
  4308 ;;		___wmul
  4309 ;;		__div_to_l_
  4310 ;;		__tdiv_to_l_
  4311 ;;		_fround
  4312 ;;		_isdigit
  4313 ;;		_putch
  4314 ;;		_scale
  4315 ;; This function is called by:
  4316 ;;		_main
  4317 ;;		_sortBattery
  4318 ;;		_pause
  4319 ;;		_testFrequency
  4320 ;;		_dateTime
  4321 ;;		_mainMenu
  4322 ;;		_runSelect
  4323 ;;		_runMenu
  4324 ;;		_runTime
  4325 ;;		_runStats
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text8
  4330  000012                     __ptext8:
  4331                           	opt stack 0
  4332  000012                     _printf:
  4333                           	opt stack 19
  4334                           
  4335                           ;doprnt.c: 466: va_list ap;
  4336                           ;doprnt.c: 499: signed char c;
  4337                           ;doprnt.c: 501: int width;
  4338                           ;doprnt.c: 504: int prec;
  4339                           ;doprnt.c: 508: unsigned short flag;
  4340                           ;doprnt.c: 515: char d;
  4341                           ;doprnt.c: 516: double fval;
  4342                           ;doprnt.c: 517: int exp;
  4343                           ;doprnt.c: 523: union {
  4344                           ;doprnt.c: 524: unsigned long vd;
  4345                           ;doprnt.c: 525: double integ;
  4346                           ;doprnt.c: 526: } tmpval;
  4347                           ;doprnt.c: 528: unsigned long val;
  4348                           ;doprnt.c: 529: unsigned len;
  4349                           ;doprnt.c: 530: const char * cp;
  4350                           ;doprnt.c: 533: *ap = __va_start();
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;incstack = 0
  4354  000012  0ED7               	movlw	low (?_printf+2)
  4355  000014  0101               	movlb	1	; () banked
  4356  000016  6F08               	movwf	printf@ap& (0+255),b
  4357  000018  0E00               	movlw	high (?_printf+2)
  4358  00001A  0101               	movlb	1	; () banked
  4359  00001C  6F09               	movwf	(printf@ap+1)& (0+255),b
  4360                           
  4361                           ;doprnt.c: 536: while(c = *f++) {
  4362  00001E  EF0E  F007         	goto	l5915
  4363  000022                     l5549:
  4364                           
  4365                           ; BSR set to: 1
  4366                           ;doprnt.c: 538: if(c != '%')
  4367  000022  0E25               	movlw	37
  4368  000024  0101               	movlb	1	; () banked
  4369  000026  191D               	xorwf	printf@c& (0+255),w,b
  4370  000028  B4D8               	btfsc	status,2,c
  4371  00002A  D006               	goto	l5553
  4372                           
  4373                           ; BSR set to: 1
  4374                           ;doprnt.c: 540: {
  4375                           ;doprnt.c: 541: (putch(c) );
  4376  00002C  0101               	movlb	1	; () banked
  4377  00002E  511D               	movf	printf@c& (0+255),w,b
  4378  000030  ECF9  F02B         	call	_putch
  4379                           
  4380                           ;doprnt.c: 542: continue;
  4381  000034  EF0E  F007         	goto	l5915
  4382  000038                     l5553:
  4383                           
  4384                           ;doprnt.c: 543: }
  4385                           ;doprnt.c: 546: width = 0;
  4386  000038  0E00               	movlw	0
  4387  00003A  0101               	movlb	1	; () banked
  4388  00003C  6F18               	movwf	(printf@width+1)& (0+255),b
  4389  00003E  0E00               	movlw	0
  4390  000040  6F17               	movwf	printf@width& (0+255),b
  4391                           
  4392                           ;doprnt.c: 548: flag = 0;
  4393  000042  0E00               	movlw	0
  4394  000044  0101               	movlb	1	; () banked
  4395  000046  6F1A               	movwf	(printf@flag+1)& (0+255),b
  4396  000048  0E00               	movlw	0
  4397  00004A  6F19               	movwf	printf@flag& (0+255),b
  4398                           
  4399                           ; BSR set to: 1
  4400                           ;doprnt.c: 551: switch(*f) {
  4401                           
  4402                           ;doprnt.c: 550: for(;;) {
  4403  00004C  D005               	goto	l5559
  4404  00004E                     l5555:
  4405                           
  4406                           ;doprnt.c: 580: flag |= 0x04;
  4407  00004E  0101               	movlb	1	; () banked
  4408  000050  8519               	bsf	printf@flag& (0+255),2,b
  4409                           
  4410                           ;doprnt.c: 581: f++;
  4411  000052  0100               	movlb	0	; () banked
  4412  000054  4BD5               	infsnz	printf@f& (0+255),f,b
  4413  000056  2BD6               	incf	(printf@f+1)& (0+255),f,b
  4414  000058                     l5559:
  4415  000058  C0D5  FFF6         	movff	printf@f,tblptrl
  4416  00005C  C0D6  FFF7         	movff	printf@f+1,tblptrh
  4417  000060                     	if	0	;tblptru may be non-zero
  4418  000060                     	endif
  4419  000060                     	if	0	;tblptru may be non-zero
  4420  000060                     	endif
  4421  000060  0008               	tblrd		*
  4422  000062  50F5               	movf	tablat,w,c
  4423                           
  4424                           ; Switch size 1, requested type "space"
  4425                           ; Number of cases is 1, Range of values is 48 to 48
  4426                           ; switch strategies available:
  4427                           ; Name         Instructions Cycles
  4428                           ; simple_byte            4     3 (average)
  4429                           ;	Chosen strategy is simple_byte
  4430  000064  0A30               	xorlw	48	; case 48
  4431  000066  B4D8               	btfsc	status,2,c
  4432  000068  D7F2               	goto	l5555
  4433                           
  4434                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4435                           
  4436                           ;doprnt.c: 586: }
  4437                           
  4438                           ;doprnt.c: 585: break;
  4439  00006A  C0D5  FFF6         	movff	printf@f,tblptrl
  4440  00006E  C0D6  FFF7         	movff	printf@f+1,tblptrh
  4441  000072                     	if	0	;tblptru may be non-zero
  4442  000072                     	endif
  4443  000072                     	if	0	;tblptru may be non-zero
  4444  000072                     	endif
  4445  000072  0008               	tblrd		*
  4446  000074  50F5               	movf	tablat,w,c
  4447  000076  ECCF  F02B         	call	_isdigit
  4448  00007A  A0D8               	btfss	status,0,c
  4449  00007C  D040               	goto	l5573
  4450                           
  4451                           ;doprnt.c: 598: width = 0;
  4452  00007E  0E00               	movlw	0
  4453  000080  0101               	movlb	1	; () banked
  4454  000082  6F18               	movwf	(printf@width+1)& (0+255),b
  4455  000084  0E00               	movlw	0
  4456  000086  6F17               	movwf	printf@width& (0+255),b
  4457  000088                     l5565:
  4458                           
  4459                           ;doprnt.c: 600: width *= 10;
  4460  000088  C117  F08E         	movff	printf@width,___wmul@multiplier
  4461  00008C  C118  F08F         	movff	printf@width+1,___wmul@multiplier+1
  4462  000090  0E00               	movlw	0
  4463  000092  0100               	movlb	0	; () banked
  4464  000094  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4465  000096  0E0A               	movlw	10
  4466  000098  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4467  00009A  EC87  F02B         	call	___wmul	;wreg free
  4468  00009E  C08E  F117         	movff	?___wmul,printf@width
  4469  0000A2  C08F  F118         	movff	?___wmul+1,printf@width+1
  4470                           
  4471                           ;doprnt.c: 601: width += *f++ - '0';
  4472  0000A6  0ED0               	movlw	208
  4473  0000A8  0100               	movlb	0	; () banked
  4474  0000AA  6FDF               	movwf	??_printf& (0+255),b
  4475  0000AC  0EFF               	movlw	255
  4476  0000AE  0100               	movlb	0	; () banked
  4477  0000B0  6FE0               	movwf	(??_printf+1)& (0+255),b
  4478  0000B2  C0D5  FFF6         	movff	printf@f,tblptrl
  4479  0000B6  C0D6  FFF7         	movff	printf@f+1,tblptrh
  4480  0000BA                     	if	0	;tblptru may be non-zero
  4481  0000BA                     	endif
  4482  0000BA                     	if	0	;tblptru may be non-zero
  4483  0000BA                     	endif
  4484  0000BA  0008               	tblrd		*
  4485  0000BC  50F5               	movf	tablat,w,c
  4486  0000BE  0100               	movlb	0	; () banked
  4487  0000C0  6FE1               	movwf	(??_printf+2)& (0+255),b
  4488  0000C2  6BE2               	clrf	(??_printf+3)& (0+255),b
  4489  0000C4  0100               	movlb	0	; () banked
  4490  0000C6  51DF               	movf	??_printf& (0+255),w,b
  4491  0000C8  0100               	movlb	0	; () banked
  4492  0000CA  27E1               	addwf	(??_printf+2)& (0+255),f,b
  4493  0000CC  0100               	movlb	0	; () banked
  4494  0000CE  51E0               	movf	(??_printf+1)& (0+255),w,b
  4495  0000D0  0100               	movlb	0	; () banked
  4496  0000D2  23E2               	addwfc	(??_printf+3)& (0+255),f,b
  4497  0000D4  0100               	movlb	0	; () banked
  4498  0000D6  51E1               	movf	(??_printf+2)& (0+255),w,b
  4499  0000D8  0101               	movlb	1	; () banked
  4500  0000DA  2717               	addwf	printf@width& (0+255),f,b
  4501  0000DC  0100               	movlb	0	; () banked
  4502  0000DE  51E2               	movf	(??_printf+3)& (0+255),w,b
  4503  0000E0  0101               	movlb	1	; () banked
  4504  0000E2  2318               	addwfc	(printf@width+1)& (0+255),f,b
  4505                           
  4506                           ; BSR set to: 1
  4507  0000E4  0100               	movlb	0	; () banked
  4508  0000E6  4BD5               	infsnz	printf@f& (0+255),f,b
  4509  0000E8  2BD6               	incf	(printf@f+1)& (0+255),f,b
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4513  0000EA  C0D5  FFF6         	movff	printf@f,tblptrl
  4514  0000EE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  4515  0000F2                     	if	0	;tblptru may be non-zero
  4516  0000F2                     	endif
  4517  0000F2                     	if	0	;tblptru may be non-zero
  4518  0000F2                     	endif
  4519  0000F2  0008               	tblrd		*
  4520  0000F4  50F5               	movf	tablat,w,c
  4521  0000F6  ECCF  F02B         	call	_isdigit
  4522  0000FA  B0D8               	btfsc	status,0,c
  4523  0000FC  D7C5               	goto	l5565
  4524  0000FE                     l5573:
  4525                           
  4526                           ;doprnt.c: 608: }
  4527                           ;doprnt.c: 611: if(*f == '.') {
  4528  0000FE  C0D5  FFF6         	movff	printf@f,tblptrl
  4529  000102  C0D6  FFF7         	movff	printf@f+1,tblptrh
  4530  000106                     	if	0	;tblptru may be non-zero
  4531  000106                     	endif
  4532  000106                     	if	0	;tblptru may be non-zero
  4533  000106                     	endif
  4534  000106  0008               	tblrd		*
  4535  000108  50F5               	movf	tablat,w,c
  4536  00010A  0A2E               	xorlw	46
  4537  00010C  A4D8               	btfss	status,2,c
  4538  00010E  D039               	goto	l5585
  4539                           
  4540                           ;doprnt.c: 612: flag |= 0x4000;
  4541  000110  0101               	movlb	1	; () banked
  4542  000112  8D1A               	bsf	(printf@flag+1)& (0+255),6,b
  4543                           
  4544                           ;doprnt.c: 613: f++;
  4545  000114  0100               	movlb	0	; () banked
  4546  000116  4BD5               	infsnz	printf@f& (0+255),f,b
  4547  000118  2BD6               	incf	(printf@f+1)& (0+255),f,b
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;doprnt.c: 620: {
  4551                           ;doprnt.c: 621: prec = 0;
  4552  00011A  0E00               	movlw	0
  4553  00011C  0101               	movlb	1	; () banked
  4554  00011E  6F1C               	movwf	(printf@prec+1)& (0+255),b
  4555  000120  0E00               	movlw	0
  4556  000122  6F1B               	movwf	printf@prec& (0+255),b
  4557                           
  4558                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4559  000124  D023               	goto	l5583
  4560  000126                     l5579:
  4561                           
  4562                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4563  000126  C11B  F08E         	movff	printf@prec,___wmul@multiplier
  4564  00012A  C11C  F08F         	movff	printf@prec+1,___wmul@multiplier+1
  4565  00012E  0E00               	movlw	0
  4566  000130  0100               	movlb	0	; () banked
  4567  000132  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4568  000134  0E0A               	movlw	10
  4569  000136  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4570  000138  EC87  F02B         	call	___wmul	;wreg free
  4571  00013C  C0D5  FFF6         	movff	printf@f,tblptrl
  4572  000140  C0D6  FFF7         	movff	printf@f+1,tblptrh
  4573  000144                     	if	0	;tblptru may be non-zero
  4574  000144                     	endif
  4575  000144                     	if	0	;tblptru may be non-zero
  4576  000144                     	endif
  4577  000144  0008               	tblrd		*
  4578  000146  50F5               	movf	tablat,w,c
  4579  000148  0100               	movlb	0	; () banked
  4580  00014A  278E               	addwf	?___wmul& (0+255),f,b
  4581  00014C  0E00               	movlw	0
  4582  00014E  0100               	movlb	0	; () banked
  4583  000150  238F               	addwfc	(?___wmul+1)& (0+255),f,b
  4584  000152  0ED0               	movlw	208
  4585  000154  0100               	movlb	0	; () banked
  4586  000156  258E               	addwf	?___wmul& (0+255),w,b
  4587  000158  0101               	movlb	1	; () banked
  4588  00015A  6F1B               	movwf	printf@prec& (0+255),b
  4589  00015C  0EFF               	movlw	255
  4590  00015E  0100               	movlb	0	; () banked
  4591  000160  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4592  000162  0101               	movlb	1	; () banked
  4593  000164  6F1C               	movwf	(printf@prec+1)& (0+255),b
  4594                           
  4595                           ; BSR set to: 1
  4596  000166  0100               	movlb	0	; () banked
  4597  000168  4BD5               	infsnz	printf@f& (0+255),f,b
  4598  00016A  2BD6               	incf	(printf@f+1)& (0+255),f,b
  4599  00016C                     l5583:
  4600  00016C  C0D5  FFF6         	movff	printf@f,tblptrl
  4601  000170  C0D6  FFF7         	movff	printf@f+1,tblptrh
  4602  000174                     	if	0	;tblptru may be non-zero
  4603  000174                     	endif
  4604  000174                     	if	0	;tblptru may be non-zero
  4605  000174                     	endif
  4606  000174  0008               	tblrd		*
  4607  000176  50F5               	movf	tablat,w,c
  4608  000178  ECCF  F02B         	call	_isdigit
  4609  00017C  A0D8               	btfss	status,0,c
  4610  00017E  D07D               	goto	l5627
  4611  000180  D7D2               	goto	l5579
  4612  000182                     l5585:
  4613                           
  4614                           ;doprnt.c: 626: prec = 0;
  4615  000182  0E00               	movlw	0
  4616  000184  0101               	movlb	1	; () banked
  4617  000186  6F1C               	movwf	(printf@prec+1)& (0+255),b
  4618  000188  0E00               	movlw	0
  4619  00018A  6F1B               	movwf	printf@prec& (0+255),b
  4620                           
  4621                           ; BSR set to: 1
  4622                           ;doprnt.c: 628: flag |= 0x1000;
  4623  00018C  0101               	movlb	1	; () banked
  4624  00018E  891A               	bsf	(printf@flag+1)& (0+255),4,b
  4625                           
  4626                           ; BSR set to: 1
  4627                           ;doprnt.c: 635: switch(c = *f++) {
  4628                           
  4629                           ;doprnt.c: 630: }
  4630                           ;doprnt.c: 633: loop:
  4631                           
  4632                           ; BSR set to: 1
  4633  000190  D074               	goto	l5627
  4634  000192                     l5589:
  4635                           
  4636                           ; BSR set to: 1
  4637                           ;doprnt.c: 643: flag |= 0x10;
  4638  000192  0101               	movlb	1	; () banked
  4639  000194  8919               	bsf	printf@flag& (0+255),4,b
  4640                           
  4641                           ;doprnt.c: 644: goto loop;
  4642  000196  D071               	goto	l5627
  4643  000198                     l5591:
  4644                           
  4645                           ; BSR set to: 1
  4646                           ;doprnt.c: 663: flag |= 0x400;
  4647  000198  0101               	movlb	1	; () banked
  4648  00019A  851A               	bsf	(printf@flag+1)& (0+255),2,b
  4649                           
  4650                           ; BSR set to: 1
  4651                           ;doprnt.c: 698: case 'i':
  4652                           ;doprnt.c: 699: break;
  4653                           
  4654                           ; BSR set to: 1
  4655                           
  4656                           ;doprnt.c: 697: case 'd':
  4657                           
  4658                           ;doprnt.c: 664: break;
  4659  00019C  D090               	goto	l5629
  4660  00019E                     l5593:
  4661                           
  4662                           ; BSR set to: 1
  4663                           ;doprnt.c: 721: flag |= 0x80;
  4664  00019E  0101               	movlb	1	; () banked
  4665  0001A0  8F19               	bsf	printf@flag& (0+255),7,b
  4666                           
  4667                           ;doprnt.c: 723: break;
  4668  0001A2  D08D               	goto	l5629
  4669  0001A4                     l5595:
  4670                           
  4671                           ; BSR set to: 1
  4672                           ;doprnt.c: 753: if(prec && prec < len)
  4673  0001A4  0101               	movlb	1	; () banked
  4674  0001A6  511B               	movf	printf@prec& (0+255),w,b
  4675  0001A8  0101               	movlb	1	; () banked
  4676  0001AA  111C               	iorwf	(printf@prec+1)& (0+255),w,b
  4677  0001AC  B4D8               	btfsc	status,2,c
  4678  0001AE  D00E               	goto	l5601
  4679                           
  4680                           ; BSR set to: 1
  4681  0001B0  0101               	movlb	1	; () banked
  4682  0001B2  5106               	movf	printf@len& (0+255),w,b
  4683  0001B4  0101               	movlb	1	; () banked
  4684  0001B6  5D1B               	subwf	printf@prec& (0+255),w,b
  4685  0001B8  0101               	movlb	1	; () banked
  4686  0001BA  5107               	movf	(printf@len+1)& (0+255),w,b
  4687  0001BC  0101               	movlb	1	; () banked
  4688  0001BE  591C               	subwfb	(printf@prec+1)& (0+255),w,b
  4689  0001C0  B0D8               	btfsc	status,0,c
  4690  0001C2  D004               	goto	l5601
  4691                           
  4692                           ; BSR set to: 1
  4693                           ;doprnt.c: 754: len = prec;
  4694  0001C4  C11B  F106         	movff	printf@prec,printf@len
  4695  0001C8  C11C  F107         	movff	printf@prec+1,printf@len+1
  4696  0001CC                     l5601:
  4697                           
  4698                           ; BSR set to: 1
  4699                           ;doprnt.c: 757: if(width > len)
  4700  0001CC  0101               	movlb	1	; () banked
  4701  0001CE  5117               	movf	printf@width& (0+255),w,b
  4702  0001D0  0101               	movlb	1	; () banked
  4703  0001D2  5D06               	subwf	printf@len& (0+255),w,b
  4704  0001D4  0101               	movlb	1	; () banked
  4705  0001D6  5118               	movf	(printf@width+1)& (0+255),w,b
  4706  0001D8  0101               	movlb	1	; () banked
  4707  0001DA  5907               	subwfb	(printf@len+1)& (0+255),w,b
  4708  0001DC  B0D8               	btfsc	status,0,c
  4709  0001DE  D009               	goto	l5605
  4710                           
  4711                           ; BSR set to: 1
  4712                           ;doprnt.c: 758: width -= len;
  4713  0001E0  0101               	movlb	1	; () banked
  4714  0001E2  5106               	movf	printf@len& (0+255),w,b
  4715  0001E4  0101               	movlb	1	; () banked
  4716  0001E6  5F17               	subwf	printf@width& (0+255),f,b
  4717  0001E8  0101               	movlb	1	; () banked
  4718  0001EA  5107               	movf	(printf@len+1)& (0+255),w,b
  4719  0001EC  0101               	movlb	1	; () banked
  4720  0001EE  5B18               	subwfb	(printf@width+1)& (0+255),f,b
  4721  0001F0  D009               	goto	l5609
  4722  0001F2                     l5605:
  4723                           
  4724                           ; BSR set to: 1
  4725                           ;doprnt.c: 759: else
  4726                           ;doprnt.c: 760: width = 0;
  4727  0001F2  0E00               	movlw	0
  4728  0001F4  0101               	movlb	1	; () banked
  4729  0001F6  6F18               	movwf	(printf@width+1)& (0+255),b
  4730  0001F8  0E00               	movlw	0
  4731  0001FA  6F17               	movwf	printf@width& (0+255),b
  4732                           
  4733                           ; BSR set to: 1
  4734                           ;doprnt.c: 764: while(width--)
  4735  0001FC  D003               	goto	l5609
  4736  0001FE                     l5607:
  4737                           
  4738                           ; BSR set to: 1
  4739                           ;doprnt.c: 765: (putch(' ') );
  4740  0001FE  0E20               	movlw	32
  4741  000200  ECF9  F02B         	call	_putch
  4742  000204                     l5609:
  4743  000204  0101               	movlb	1	; () banked
  4744  000206  0717               	decf	printf@width& (0+255),f,b
  4745  000208  A0D8               	btfss	status,0,c
  4746  00020A  0718               	decf	(printf@width+1)& (0+255),f,b
  4747  00020C  0101               	movlb	1	; () banked
  4748  00020E  2917               	incf	printf@width& (0+255),w,b
  4749  000210  E1F6               	bnz	l5607
  4750  000212  0101               	movlb	1	; () banked
  4751  000214  2918               	incf	(printf@width+1)& (0+255),w,b
  4752  000216  B4D8               	btfsc	status,2,c
  4753  000218  D00B               	goto	l5615
  4754  00021A  D7F1               	goto	l5607
  4755  00021C                     l5611:
  4756                           
  4757                           ; BSR set to: 1
  4758                           ;doprnt.c: 768: (putch(*cp++) );
  4759  00021C  C103  FFD9         	movff	printf@cp,fsr2l
  4760  000220  C104  FFDA         	movff	printf@cp+1,fsr2h
  4761  000224  50DF               	movf	indf2,w,c
  4762  000226  ECF9  F02B         	call	_putch
  4763  00022A  0101               	movlb	1	; () banked
  4764  00022C  4B03               	infsnz	printf@cp& (0+255),f,b
  4765  00022E  2B04               	incf	(printf@cp+1)& (0+255),f,b
  4766  000230                     l5615:
  4767                           
  4768                           ; BSR set to: 1
  4769  000230  0101               	movlb	1	; () banked
  4770  000232  0706               	decf	printf@len& (0+255),f,b
  4771  000234  A0D8               	btfss	status,0,c
  4772  000236  0707               	decf	(printf@len+1)& (0+255),f,b
  4773  000238  0101               	movlb	1	; () banked
  4774  00023A  2906               	incf	printf@len& (0+255),w,b
  4775  00023C  E1EF               	bnz	l5611
  4776  00023E  0101               	movlb	1	; () banked
  4777  000240  2907               	incf	(printf@len+1)& (0+255),w,b
  4778  000242  B4D8               	btfsc	status,2,c
  4779  000244  EF0E  F007         	goto	l5915
  4780  000248  D7E9               	goto	l5611
  4781  00024A                     l5617:
  4782                           
  4783                           ; BSR set to: 1
  4784                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4785  00024A  C108  FFD9         	movff	printf@ap,fsr2l
  4786  00024E  C109  FFDA         	movff	printf@ap+1,fsr2h
  4787  000252  50DF               	movf	indf2,w,c
  4788  000254  0101               	movlb	1	; () banked
  4789  000256  6F1D               	movwf	printf@c& (0+255),b
  4790                           
  4791                           ; BSR set to: 1
  4792  000258  0E02               	movlw	2
  4793  00025A  0101               	movlb	1	; () banked
  4794  00025C  2708               	addwf	printf@ap& (0+255),f,b
  4795  00025E  0E00               	movlw	0
  4796  000260  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  4797  000262                     l5621:
  4798                           
  4799                           ; BSR set to: 1
  4800                           ;doprnt.c: 805: cp = (char *)&c;
  4801  000262  0E1D               	movlw	low printf@c
  4802  000264  0101               	movlb	1	; () banked
  4803  000266  6F03               	movwf	printf@cp& (0+255),b
  4804  000268  0E01               	movlw	high printf@c
  4805  00026A  0101               	movlb	1	; () banked
  4806  00026C  6F04               	movwf	(printf@cp+1)& (0+255),b
  4807                           
  4808                           ; BSR set to: 1
  4809                           ;doprnt.c: 806: len = 1;
  4810  00026E  0E00               	movlw	0
  4811  000270  0101               	movlb	1	; () banked
  4812  000272  6F07               	movwf	(printf@len+1)& (0+255),b
  4813  000274  0E01               	movlw	1
  4814  000276  6F06               	movwf	printf@len& (0+255),b
  4815                           
  4816                           ;doprnt.c: 807: goto dostring;
  4817  000278  D795               	goto	l5595
  4818  00027A                     l5627:
  4819  00027A  C0D5  FFF6         	movff	printf@f,tblptrl
  4820  00027E  C0D6  FFF7         	movff	printf@f+1,tblptrh
  4821  000282  0100               	movlb	0	; () banked
  4822  000284  4BD5               	infsnz	printf@f& (0+255),f,b
  4823  000286  2BD6               	incf	(printf@f+1)& (0+255),f,b
  4824  000288                     	if	0	;tblptru may be non-zero
  4825  000288                     	endif
  4826  000288                     	if	0	;tblptru may be non-zero
  4827  000288                     	endif
  4828  000288  0008               	tblrd		*
  4829  00028A  CFF5 F11D          	movff	tablat,printf@c
  4830  00028E  0101               	movlb	1	; () banked
  4831  000290  511D               	movf	printf@c& (0+255),w,b
  4832                           
  4833                           ; Switch size 1, requested type "space"
  4834                           ; Number of cases is 7, Range of values is 0 to 120
  4835                           ; switch strategies available:
  4836                           ; Name         Instructions Cycles
  4837                           ; simple_byte           22    12 (average)
  4838                           ;	Chosen strategy is simple_byte
  4839  000292  0A00               	xorlw	0	; case 0
  4840  000294  B4D8               	btfsc	status,2,c
  4841  000296  0012               	return	
  4842  000298  0A63               	xorlw	99	; case 99
  4843  00029A  B4D8               	btfsc	status,2,c
  4844  00029C  D7D6               	goto	l5617
  4845  00029E  0A07               	xorlw	7	; case 100
  4846  0002A0  B4D8               	btfsc	status,2,c
  4847  0002A2  D00D               	goto	l5629
  4848  0002A4  0A02               	xorlw	2	; case 102
  4849  0002A6  B4D8               	btfsc	status,2,c
  4850  0002A8  D777               	goto	l5591
  4851  0002AA  0A0F               	xorlw	15	; case 105
  4852  0002AC  B4D8               	btfsc	status,2,c
  4853  0002AE  D007               	goto	l5629
  4854  0002B0  0A05               	xorlw	5	; case 108
  4855  0002B2  B4D8               	btfsc	status,2,c
  4856  0002B4  D76E               	goto	l5589
  4857  0002B6  0A14               	xorlw	20	; case 120
  4858  0002B8  B4D8               	btfsc	status,2,c
  4859  0002BA  D771               	goto	l5593
  4860  0002BC  D7D2               	goto	l5621
  4861  0002BE                     l5629:
  4862                           
  4863                           ; BSR set to: 1
  4864                           ;doprnt.c: 825: if(flag & (0x700)) {
  4865  0002BE  0E07               	movlw	7
  4866  0002C0  0101               	movlb	1	; () banked
  4867  0002C2  151A               	andwf	(printf@flag+1)& (0+255),w,b
  4868  0002C4  B4D8               	btfsc	status,2,c
  4869  0002C6  D37D               	goto	l720
  4870                           
  4871                           ; BSR set to: 1
  4872                           ;doprnt.c: 827: if(flag & 0x1000)
  4873  0002C8  0101               	movlb	1	; () banked
  4874  0002CA  A91A               	btfss	(printf@flag+1)& (0+255),4,b
  4875  0002CC  D005               	goto	l5635
  4876                           
  4877                           ; BSR set to: 1
  4878                           ;doprnt.c: 829: prec = 6;
  4879  0002CE  0E00               	movlw	0
  4880  0002D0  0101               	movlb	1	; () banked
  4881  0002D2  6F1C               	movwf	(printf@prec+1)& (0+255),b
  4882  0002D4  0E06               	movlw	6
  4883  0002D6  6F1B               	movwf	printf@prec& (0+255),b
  4884  0002D8                     l5635:
  4885                           
  4886                           ; BSR set to: 1
  4887                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4888  0002D8  C108  FFD9         	movff	printf@ap,fsr2l
  4889  0002DC  C109  FFDA         	movff	printf@ap+1,fsr2h
  4890  0002E0  CFDE F114          	movff	postinc2,printf@fval
  4891  0002E4  CFDE F115          	movff	postinc2,printf@fval+1
  4892  0002E8  CFDD F116          	movff	postdec2,printf@fval+2
  4893                           
  4894                           ; BSR set to: 1
  4895  0002EC  0E03               	movlw	3
  4896  0002EE  0101               	movlb	1	; () banked
  4897  0002F0  2708               	addwf	printf@ap& (0+255),f,b
  4898  0002F2  0E00               	movlw	0
  4899  0002F4  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  4900                           
  4901                           ; BSR set to: 1
  4902                           ;doprnt.c: 831: if(fval < 0.0) {
  4903  0002F6  0101               	movlb	1	; () banked
  4904  0002F8  AF16               	btfss	(printf@fval+2)& (0+255),7,b
  4905  0002FA  D011               	goto	l5645
  4906                           
  4907                           ; BSR set to: 1
  4908                           ;doprnt.c: 832: fval = -fval;
  4909  0002FC  C114  F080         	movff	printf@fval,___ftneg@f1
  4910  000300  C115  F081         	movff	printf@fval+1,___ftneg@f1+1
  4911  000304  C116  F082         	movff	printf@fval+2,___ftneg@f1+2
  4912  000308  ECA2  F02B         	call	___ftneg	;wreg free
  4913  00030C  C080  F114         	movff	?___ftneg,printf@fval
  4914  000310  C081  F115         	movff	?___ftneg+1,printf@fval+1
  4915  000314  C082  F116         	movff	?___ftneg+2,printf@fval+2
  4916                           
  4917                           ;doprnt.c: 833: flag |= 0x03;
  4918  000318  0E03               	movlw	3
  4919  00031A  0101               	movlb	1	; () banked
  4920  00031C  1319               	iorwf	printf@flag& (0+255),f,b
  4921  00031E                     l5645:
  4922                           
  4923                           ; BSR set to: 1
  4924                           ;doprnt.c: 834: }
  4925                           ;doprnt.c: 835: exp = 0;
  4926  00031E  0E00               	movlw	0
  4927  000320  0101               	movlb	1	; () banked
  4928  000322  6F0F               	movwf	(printf@exp+1)& (0+255),b
  4929  000324  0E00               	movlw	0
  4930  000326  6F0E               	movwf	printf@exp& (0+255),b
  4931                           
  4932                           ; BSR set to: 1
  4933                           ;doprnt.c: 836: if( fval!=0) {
  4934  000328  0101               	movlb	1	; () banked
  4935  00032A  5114               	movf	printf@fval& (0+255),w,b
  4936  00032C  0101               	movlb	1	; () banked
  4937  00032E  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  4938  000330  0101               	movlb	1	; () banked
  4939  000332  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  4940  000334  B4D8               	btfsc	status,2,c
  4941  000336  D09B               	goto	l5673
  4942                           
  4943                           ; BSR set to: 1
  4944                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4945  000338  0E82               	movlw	130
  4946  00033A  0100               	movlb	0	; () banked
  4947  00033C  6FDF               	movwf	??_printf& (0+255),b
  4948  00033E  0EFF               	movlw	255
  4949  000340  0100               	movlb	0	; () banked
  4950  000342  6FE0               	movwf	(??_printf+1)& (0+255),b
  4951  000344  C114  F0E1         	movff	printf@fval,??_printf+2
  4952  000348  C115  F0E2         	movff	printf@fval+1,??_printf+3
  4953  00034C  C116  F0E3         	movff	printf@fval+2,??_printf+4
  4954  000350  C117  F0E4         	movff	printf@fval+3,??_printf+5
  4955  000354  0E10               	movlw	16
  4956  000356  D006               	goto	u6000
  4957  000358                     u6005:
  4958  000358  0100               	movlb	0	; () banked
  4959  00035A  90D8               	bcf	status,0,c
  4960  00035C  33E4               	rrcf	(??_printf+5)& (0+255),f,b
  4961  00035E  33E3               	rrcf	(??_printf+4)& (0+255),f,b
  4962  000360  33E2               	rrcf	(??_printf+3)& (0+255),f,b
  4963  000362  33E1               	rrcf	(??_printf+2)& (0+255),f,b
  4964  000364                     u6000:
  4965  000364  2EE8               	decfsz	wreg,f,c
  4966  000366  D7F8               	goto	u6005
  4967  000368  0100               	movlb	0	; () banked
  4968  00036A  51E1               	movf	(??_printf+2)& (0+255),w,b
  4969  00036C  0100               	movlb	0	; () banked
  4970  00036E  25DF               	addwf	??_printf& (0+255),w,b
  4971  000370  0101               	movlb	1	; () banked
  4972  000372  6F0E               	movwf	printf@exp& (0+255),b
  4973  000374  0E00               	movlw	0
  4974  000376  0100               	movlb	0	; () banked
  4975  000378  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  4976  00037A  0101               	movlb	1	; () banked
  4977  00037C  6F0F               	movwf	(printf@exp+1)& (0+255),b
  4978                           
  4979                           ; BSR set to: 1
  4980                           ;doprnt.c: 838: exp--;
  4981  00037E  0101               	movlb	1	; () banked
  4982  000380  070E               	decf	printf@exp& (0+255),f,b
  4983  000382  A0D8               	btfss	status,0,c
  4984  000384  070F               	decf	(printf@exp+1)& (0+255),f,b
  4985                           
  4986                           ; BSR set to: 1
  4987                           ;doprnt.c: 839: exp *= 3;
  4988  000386  C10E  F08E         	movff	printf@exp,___wmul@multiplier
  4989  00038A  C10F  F08F         	movff	printf@exp+1,___wmul@multiplier+1
  4990  00038E  0E00               	movlw	0
  4991  000390  0100               	movlb	0	; () banked
  4992  000392  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4993  000394  0E03               	movlw	3
  4994  000396  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4995  000398  EC87  F02B         	call	___wmul	;wreg free
  4996  00039C  C08E  F10E         	movff	?___wmul,printf@exp
  4997  0003A0  C08F  F10F         	movff	?___wmul+1,printf@exp+1
  4998                           
  4999                           ;doprnt.c: 840: exp /= 10;
  5000  0003A4  C10E  F086         	movff	printf@exp,___awdiv@dividend
  5001  0003A8  C10F  F087         	movff	printf@exp+1,___awdiv@dividend+1
  5002  0003AC  0E00               	movlw	0
  5003  0003AE  0100               	movlb	0	; () banked
  5004  0003B0  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5005  0003B2  0E0A               	movlw	10
  5006  0003B4  6F88               	movwf	___awdiv@divisor& (0+255),b
  5007  0003B6  ECAA  F025         	call	___awdiv	;wreg free
  5008  0003BA  C086  F10E         	movff	?___awdiv,printf@exp
  5009  0003BE  C087  F10F         	movff	?___awdiv+1,printf@exp+1
  5010                           
  5011                           ;doprnt.c: 841: if(exp < 0)
  5012  0003C2  0101               	movlb	1	; () banked
  5013  0003C4  AF0F               	btfss	(printf@exp+1)& (0+255),7,b
  5014  0003C6  D004               	goto	l5661
  5015                           
  5016                           ; BSR set to: 1
  5017                           ;doprnt.c: 842: exp--;
  5018  0003C8  0101               	movlb	1	; () banked
  5019  0003CA  070E               	decf	printf@exp& (0+255),f,b
  5020  0003CC  A0D8               	btfss	status,0,c
  5021  0003CE  070F               	decf	(printf@exp+1)& (0+255),f,b
  5022  0003D0                     l5661:
  5023                           
  5024                           ; BSR set to: 1
  5025                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5026  0003D0  0101               	movlb	1	; () banked
  5027  0003D2  510E               	movf	printf@exp& (0+255),w,b
  5028  0003D4  0800               	sublw	0
  5029  0003D6  ECBF  F00F         	call	_scale
  5030  0003DA  C0B0  F10A         	movff	?_scale,printf@tmpval
  5031  0003DE  C0B1  F10B         	movff	?_scale+1,printf@tmpval+1
  5032  0003E2  C0B2  F10C         	movff	?_scale+2,printf@tmpval+2
  5033                           
  5034                           ;doprnt.c: 847: tmpval.integ *= fval;
  5035  0003E6  C10A  F0A1         	movff	printf@tmpval,___ftmul@f1
  5036  0003EA  C10B  F0A2         	movff	printf@tmpval+1,___ftmul@f1+1
  5037  0003EE  C10C  F0A3         	movff	printf@tmpval+2,___ftmul@f1+2
  5038  0003F2  C114  F0A4         	movff	printf@fval,___ftmul@f2
  5039  0003F6  C115  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  5040  0003FA  C116  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  5041  0003FE  EC9A  F01C         	call	___ftmul	;wreg free
  5042  000402  C0A1  F10A         	movff	?___ftmul,printf@tmpval
  5043  000406  C0A2  F10B         	movff	?___ftmul+1,printf@tmpval+1
  5044  00040A  C0A3  F10C         	movff	?___ftmul+2,printf@tmpval+2
  5045                           
  5046                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5047  00040E  C10A  F08C         	movff	printf@tmpval,___ftge@ff1
  5048  000412  C10B  F08D         	movff	printf@tmpval+1,___ftge@ff1+1
  5049  000416  C10C  F08E         	movff	printf@tmpval+2,___ftge@ff1+2
  5050  00041A  0E00               	movlw	0
  5051  00041C  0100               	movlb	0	; () banked
  5052  00041E  6F8F               	movwf	___ftge@ff2& (0+255),b
  5053  000420  0E80               	movlw	128
  5054  000422  0100               	movlb	0	; () banked
  5055  000424  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  5056  000426  0E3F               	movlw	63
  5057  000428  0100               	movlb	0	; () banked
  5058  00042A  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  5059  00042C  ECE2  F024         	call	___ftge	;wreg free
  5060  000430  0100               	movlb	0	; () banked
  5061  000432  B0D8               	btfsc	status,0,c
  5062  000434  D005               	goto	l5669
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;doprnt.c: 849: exp--;
  5066  000436  0101               	movlb	1	; () banked
  5067  000438  070E               	decf	printf@exp& (0+255),f,b
  5068  00043A  A0D8               	btfss	status,0,c
  5069  00043C  070F               	decf	(printf@exp+1)& (0+255),f,b
  5070  00043E  D017               	goto	l5673
  5071  000440                     l5669:
  5072                           
  5073                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5074  000440  C10A  F08C         	movff	printf@tmpval,___ftge@ff1
  5075  000444  C10B  F08D         	movff	printf@tmpval+1,___ftge@ff1+1
  5076  000448  C10C  F08E         	movff	printf@tmpval+2,___ftge@ff1+2
  5077  00044C  0E00               	movlw	0
  5078  00044E  0100               	movlb	0	; () banked
  5079  000450  6F8F               	movwf	___ftge@ff2& (0+255),b
  5080  000452  0E20               	movlw	32
  5081  000454  0100               	movlb	0	; () banked
  5082  000456  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  5083  000458  0E41               	movlw	65
  5084  00045A  0100               	movlb	0	; () banked
  5085  00045C  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  5086  00045E  ECE2  F024         	call	___ftge	;wreg free
  5087  000462  0100               	movlb	0	; () banked
  5088  000464  A0D8               	btfss	status,0,c
  5089  000466  D003               	goto	l5673
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;doprnt.c: 851: exp++;
  5093  000468  0101               	movlb	1	; () banked
  5094  00046A  4B0E               	infsnz	printf@exp& (0+255),f,b
  5095  00046C  2B0F               	incf	(printf@exp+1)& (0+255),f,b
  5096  00046E                     l5673:
  5097                           
  5098                           ;doprnt.c: 852: }
  5099                           ;doprnt.c: 1112: if(prec <= 12)
  5100  00046E  0101               	movlb	1	; () banked
  5101  000470  BF1C               	btfsc	(printf@prec+1)& (0+255),7,b
  5102  000472  D008               	goto	l5675
  5103  000474  0101               	movlb	1	; () banked
  5104  000476  511C               	movf	(printf@prec+1)& (0+255),w,b
  5105  000478  E11D               	bnz	l5677
  5106  00047A  0E0D               	movlw	13
  5107  00047C  0101               	movlb	1	; () banked
  5108  00047E  5D1B               	subwf	printf@prec& (0+255),w,b
  5109  000480  B0D8               	btfsc	status,0,c
  5110  000482  D018               	goto	l5677
  5111  000484                     l5675:
  5112                           
  5113                           ; BSR set to: 1
  5114                           ;doprnt.c: 1113: fval += fround(prec);
  5115  000484  C114  F0BA         	movff	printf@fval,___ftadd@f1
  5116  000488  C115  F0BB         	movff	printf@fval+1,___ftadd@f1+1
  5117  00048C  C116  F0BC         	movff	printf@fval+2,___ftadd@f1+2
  5118  000490  0101               	movlb	1	; () banked
  5119  000492  511B               	movf	printf@prec& (0+255),w,b
  5120  000494  ECD1  F015         	call	_fround
  5121  000498  C0B0  F0BD         	movff	?_fround,___ftadd@f2
  5122  00049C  C0B1  F0BE         	movff	?_fround+1,___ftadd@f2+1
  5123  0004A0  C0B2  F0BF         	movff	?_fround+2,___ftadd@f2+2
  5124  0004A4  EC27  F017         	call	___ftadd	;wreg free
  5125  0004A8  C0BA  F114         	movff	?___ftadd,printf@fval
  5126  0004AC  C0BB  F115         	movff	?___ftadd+1,printf@fval+1
  5127  0004B0  C0BC  F116         	movff	?___ftadd+2,printf@fval+2
  5128  0004B4                     l5677:
  5129                           
  5130                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5131  0004B4  0101               	movlb	1	; () banked
  5132  0004B6  BF0F               	btfsc	(printf@exp+1)& (0+255),7,b
  5133  0004B8  D008               	goto	l5679
  5134  0004BA  0101               	movlb	1	; () banked
  5135  0004BC  510F               	movf	(printf@exp+1)& (0+255),w,b
  5136  0004BE  E12A               	bnz	l5685
  5137  0004C0  0E0A               	movlw	10
  5138  0004C2  0101               	movlb	1	; () banked
  5139  0004C4  5D0E               	subwf	printf@exp& (0+255),w,b
  5140  0004C6  B0D8               	btfsc	status,0,c
  5141  0004C8  D025               	goto	l5685
  5142  0004CA                     l5679:
  5143                           
  5144                           ; BSR set to: 1
  5145  0004CA  0101               	movlb	1	; () banked
  5146  0004CC  5114               	movf	printf@fval& (0+255),w,b
  5147  0004CE  0101               	movlb	1	; () banked
  5148  0004D0  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  5149  0004D2  0101               	movlb	1	; () banked
  5150  0004D4  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  5151  0004D6  B4D8               	btfsc	status,2,c
  5152  0004D8  D063               	goto	l5699
  5153                           
  5154                           ; BSR set to: 1
  5155  0004DA  C114  F0C6         	movff	printf@fval,___fttol@f1
  5156  0004DE  C115  F0C7         	movff	printf@fval+1,___fttol@f1+1
  5157  0004E2  C116  F0C8         	movff	printf@fval+2,___fttol@f1+2
  5158  0004E6  ECEF  F01D         	call	___fttol	;wreg free
  5159  0004EA  0100               	movlb	0	; () banked
  5160  0004EC  51C6               	movf	?___fttol& (0+255),w,b
  5161  0004EE  0100               	movlb	0	; () banked
  5162  0004F0  11C7               	iorwf	(?___fttol+1)& (0+255),w,b
  5163  0004F2  0100               	movlb	0	; () banked
  5164  0004F4  11C8               	iorwf	(?___fttol+2)& (0+255),w,b
  5165  0004F6  0100               	movlb	0	; () banked
  5166  0004F8  11C9               	iorwf	(?___fttol+3)& (0+255),w,b
  5167  0004FA  A4D8               	btfss	status,2,c
  5168  0004FC  D051               	goto	l5699
  5169                           
  5170                           ; BSR set to: 0
  5171  0004FE  0101               	movlb	1	; () banked
  5172  000500  BF0F               	btfsc	(printf@exp+1)& (0+255),7,b
  5173  000502  D04E               	goto	l5699
  5174  000504  0101               	movlb	1	; () banked
  5175  000506  510F               	movf	(printf@exp+1)& (0+255),w,b
  5176  000508  E105               	bnz	l5685
  5177  00050A  0E02               	movlw	2
  5178  00050C  0101               	movlb	1	; () banked
  5179  00050E  5D0E               	subwf	printf@exp& (0+255),w,b
  5180  000510  A0D8               	btfss	status,0,c
  5181  000512  D046               	goto	l5699
  5182  000514                     l5685:
  5183                           
  5184                           ; BSR set to: 1
  5185                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5186  000514  C10A  F08C         	movff	printf@tmpval,___ftge@ff1
  5187  000518  C10B  F08D         	movff	printf@tmpval+1,___ftge@ff1+1
  5188  00051C  C10C  F08E         	movff	printf@tmpval+2,___ftge@ff1+2
  5189  000520  0E70               	movlw	112
  5190  000522  0100               	movlb	0	; () banked
  5191  000524  6F8F               	movwf	___ftge@ff2& (0+255),b
  5192  000526  0E89               	movlw	137
  5193  000528  0100               	movlb	0	; () banked
  5194  00052A  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  5195  00052C  0E40               	movlw	64
  5196  00052E  0100               	movlb	0	; () banked
  5197  000530  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  5198  000532  ECE2  F024         	call	___ftge	;wreg free
  5199  000536  0100               	movlb	0	; () banked
  5200  000538  B0D8               	btfsc	status,0,c
  5201  00053A  D003               	goto	l5689
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5205  00053C  0101               	movlb	1	; () banked
  5206  00053E  0EF7               	movlw	247
  5207  000540  D002               	goto	L1
  5208  000542                     l5689:
  5209                           
  5210                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5211  000542  0101               	movlb	1	; () banked
  5212  000544  0EF8               	movlw	248
  5213  000546                     L1:
  5214  000546  270E               	addwf	printf@exp& (0+255),f,b
  5215  000548  0EFF               	movlw	255
  5216  00054A  230F               	addwfc	(printf@exp+1)& (0+255),f,b
  5217                           
  5218                           ; BSR set to: 1
  5219                           ;doprnt.c: 1124: }
  5220                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5221                           
  5222                           ; BSR set to: 1
  5223  00054C  0101               	movlb	1	; () banked
  5224  00054E  510E               	movf	printf@exp& (0+255),w,b
  5225  000550  ECBF  F00F         	call	_scale
  5226  000554  C0B0  F10A         	movff	?_scale,printf@tmpval
  5227  000558  C0B1  F10B         	movff	?_scale+1,printf@tmpval+1
  5228  00055C  C0B2  F10C         	movff	?_scale+2,printf@tmpval+2
  5229                           
  5230                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5231  000560  C114  F080         	movff	printf@fval,__tdiv_to_l_@f1
  5232  000564  C115  F081         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5233  000568  C116  F082         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5234  00056C  C10A  F083         	movff	printf@tmpval,__tdiv_to_l_@f2
  5235  000570  C10B  F084         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5236  000574  C10C  F085         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5237  000578  EC54  F01A         	call	__tdiv_to_l_	;wreg free
  5238  00057C  C080  F110         	movff	?__tdiv_to_l_,printf@val
  5239  000580  C081  F111         	movff	?__tdiv_to_l_+1,printf@val+1
  5240  000584  C082  F112         	movff	?__tdiv_to_l_+2,printf@val+2
  5241  000588  C083  F113         	movff	?__tdiv_to_l_+3,printf@val+3
  5242                           
  5243                           ;doprnt.c: 1129: fval = 0.0;
  5244  00058C  0E00               	movlw	0
  5245  00058E  0101               	movlb	1	; () banked
  5246  000590  6F14               	movwf	printf@fval& (0+255),b
  5247  000592  0E00               	movlw	0
  5248  000594  0101               	movlb	1	; () banked
  5249  000596  6F15               	movwf	(printf@fval+1)& (0+255),b
  5250  000598  0E00               	movlw	0
  5251  00059A  0101               	movlb	1	; () banked
  5252  00059C  6F16               	movwf	(printf@fval+2)& (0+255),b
  5253                           
  5254                           ;doprnt.c: 1130: } else {
  5255  00059E  D033               	goto	l5703
  5256  0005A0                     l5699:
  5257                           
  5258                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5259  0005A0  C114  F0C6         	movff	printf@fval,___fttol@f1
  5260  0005A4  C115  F0C7         	movff	printf@fval+1,___fttol@f1+1
  5261  0005A8  C116  F0C8         	movff	printf@fval+2,___fttol@f1+2
  5262  0005AC  ECEF  F01D         	call	___fttol	;wreg free
  5263  0005B0  C0C6  F110         	movff	?___fttol,printf@val
  5264  0005B4  C0C7  F111         	movff	?___fttol+1,printf@val+1
  5265  0005B8  C0C8  F112         	movff	?___fttol+2,printf@val+2
  5266  0005BC  C0C9  F113         	movff	?___fttol+3,printf@val+3
  5267                           
  5268                           ;doprnt.c: 1132: fval -= (double)val;
  5269  0005C0  C114  F0C6         	movff	printf@fval,___ftsub@f1
  5270  0005C4  C115  F0C7         	movff	printf@fval+1,___ftsub@f1+1
  5271  0005C8  C116  F0C8         	movff	printf@fval+2,___ftsub@f1+2
  5272  0005CC  C110  F088         	movff	printf@val,___lltoft@c
  5273  0005D0  C111  F089         	movff	printf@val+1,___lltoft@c+1
  5274  0005D4  C112  F08A         	movff	printf@val+2,___lltoft@c+2
  5275  0005D8  C113  F08B         	movff	printf@val+3,___lltoft@c+3
  5276  0005DC  ECBD  F028         	call	___lltoft	;wreg free
  5277  0005E0  C088  F0C9         	movff	?___lltoft,___ftsub@f2
  5278  0005E4  C089  F0CA         	movff	?___lltoft+1,___ftsub@f2+1
  5279  0005E8  C08A  F0CB         	movff	?___lltoft+2,___ftsub@f2+2
  5280  0005EC  EC52  F02A         	call	___ftsub	;wreg free
  5281  0005F0  C0C6  F114         	movff	?___ftsub,printf@fval
  5282  0005F4  C0C7  F115         	movff	?___ftsub+1,printf@fval+1
  5283  0005F8  C0C8  F116         	movff	?___ftsub+2,printf@fval+2
  5284                           
  5285                           ;doprnt.c: 1133: exp = 0;
  5286  0005FC  0E00               	movlw	0
  5287  0005FE  0101               	movlb	1	; () banked
  5288  000600  6F0F               	movwf	(printf@exp+1)& (0+255),b
  5289  000602  0E00               	movlw	0
  5290  000604  6F0E               	movwf	printf@exp& (0+255),b
  5291  000606                     l5703:
  5292                           
  5293                           ; BSR set to: 1
  5294                           ;doprnt.c: 1134: }
  5295                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5296  000606  0E01               	movlw	1
  5297  000608  0101               	movlb	1	; () banked
  5298  00060A  6F1D               	movwf	printf@c& (0+255),b
  5299  00060C                     l5705:
  5300                           
  5301                           ; BSR set to: 1
  5302  00060C  0E0A               	movlw	10
  5303  00060E  0101               	movlb	1	; () banked
  5304  000610  191D               	xorwf	printf@c& (0+255),w,b
  5305  000612  B4D8               	btfsc	status,2,c
  5306  000614  D01E               	goto	l5717
  5307                           
  5308                           ; BSR set to: 1
  5309                           ;doprnt.c: 1137: if(val < dpowers[c])
  5310                           
  5311                           ; BSR set to: 1
  5312                           
  5313                           ; BSR set to: 1
  5314  000616  0101               	movlb	1	; () banked
  5315  000618  511D               	movf	printf@c& (0+255),w,b
  5316  00061A  0D04               	mullw	4
  5317  00061C  0E1D               	movlw	low _dpowers
  5318  00061E  24F3               	addwf	prodl,w,c
  5319  000620  6EF6               	movwf	tblptrl,c
  5320  000622  0EFE               	movlw	high _dpowers
  5321  000624  20F4               	addwfc	prodh,w,c
  5322  000626  6EF7               	movwf	tblptrh,c
  5323  000628                     	if	0	;There are less than 3 active tblptr bytes
  5324  000628                     	endif
  5325  000628  0009               	tblrd		*+
  5326  00062A  50F5               	movf	tablat,w,c
  5327  00062C  0101               	movlb	1	; () banked
  5328  00062E  5D10               	subwf	printf@val& (0+255),w,b
  5329  000630  0009               	tblrd		*+
  5330  000632  50F5               	movf	tablat,w,c
  5331  000634  0101               	movlb	1	; () banked
  5332  000636  5911               	subwfb	(printf@val+1)& (0+255),w,b
  5333  000638  0009               	tblrd		*+
  5334  00063A  50F5               	movf	tablat,w,c
  5335  00063C  0101               	movlb	1	; () banked
  5336  00063E  5912               	subwfb	(printf@val+2)& (0+255),w,b
  5337  000640  0009               	tblrd		*+
  5338  000642  50F5               	movf	tablat,w,c
  5339  000644  0101               	movlb	1	; () banked
  5340  000646  5913               	subwfb	(printf@val+3)& (0+255),w,b
  5341  000648  A0D8               	btfss	status,0,c
  5342  00064A  D003               	goto	l5717
  5343                           
  5344                           ; BSR set to: 1
  5345                           
  5346                           ; BSR set to: 1
  5347                           
  5348                           ; BSR set to: 1
  5349                           ;doprnt.c: 1138: break;
  5350  00064C  0101               	movlb	1	; () banked
  5351  00064E  2B1D               	incf	printf@c& (0+255),f,b
  5352  000650  D7DD               	goto	l5705
  5353  000652                     l5717:
  5354                           
  5355                           ; BSR set to: 1
  5356                           ;doprnt.c: 1142: width -= prec + c + exp;
  5357  000652  C11D  F0DF         	movff	printf@c,??_printf
  5358  000656  0100               	movlb	0	; () banked
  5359  000658  6BE0               	clrf	(??_printf+1)& (0+255),b
  5360  00065A  BFDF               	btfsc	??_printf& (0+255),7,b
  5361  00065C  07E0               	decf	(??_printf+1)& (0+255),f,b
  5362  00065E  0101               	movlb	1	; () banked
  5363  000660  511B               	movf	printf@prec& (0+255),w,b
  5364  000662  0100               	movlb	0	; () banked
  5365  000664  27DF               	addwf	??_printf& (0+255),f,b
  5366  000666  0101               	movlb	1	; () banked
  5367  000668  511C               	movf	(printf@prec+1)& (0+255),w,b
  5368  00066A  0100               	movlb	0	; () banked
  5369  00066C  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  5370  00066E  0101               	movlb	1	; () banked
  5371  000670  510E               	movf	printf@exp& (0+255),w,b
  5372  000672  0100               	movlb	0	; () banked
  5373  000674  27DF               	addwf	??_printf& (0+255),f,b
  5374  000676  0101               	movlb	1	; () banked
  5375  000678  510F               	movf	(printf@exp+1)& (0+255),w,b
  5376  00067A  0100               	movlb	0	; () banked
  5377  00067C  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  5378  00067E  0100               	movlb	0	; () banked
  5379  000680  51DF               	movf	??_printf& (0+255),w,b
  5380  000682  0101               	movlb	1	; () banked
  5381  000684  5F17               	subwf	printf@width& (0+255),f,b
  5382  000686  0100               	movlb	0	; () banked
  5383  000688  51E0               	movf	(??_printf+1)& (0+255),w,b
  5384  00068A  0101               	movlb	1	; () banked
  5385  00068C  5B18               	subwfb	(printf@width+1)& (0+255),f,b
  5386                           
  5387                           ;doprnt.c: 1143: if(
  5388                           ;doprnt.c: 1147: prec)
  5389  00068E  0101               	movlb	1	; () banked
  5390  000690  511B               	movf	printf@prec& (0+255),w,b
  5391  000692  0101               	movlb	1	; () banked
  5392  000694  111C               	iorwf	(printf@prec+1)& (0+255),w,b
  5393  000696  B4D8               	btfsc	status,2,c
  5394  000698  D004               	goto	l5721
  5395                           
  5396                           ; BSR set to: 1
  5397                           ;doprnt.c: 1148: width--;
  5398  00069A  0101               	movlb	1	; () banked
  5399  00069C  0717               	decf	printf@width& (0+255),f,b
  5400  00069E  A0D8               	btfss	status,0,c
  5401  0006A0  0718               	decf	(printf@width+1)& (0+255),f,b
  5402  0006A2                     l5721:
  5403                           
  5404                           ; BSR set to: 1
  5405                           ;doprnt.c: 1149: if(flag & 0x03)
  5406  0006A2  0E03               	movlw	3
  5407  0006A4  0101               	movlb	1	; () banked
  5408  0006A6  1519               	andwf	printf@flag& (0+255),w,b
  5409  0006A8  0100               	movlb	0	; () banked
  5410  0006AA  6FDF               	movwf	??_printf& (0+255),b
  5411  0006AC  0E00               	movlw	0
  5412  0006AE  0101               	movlb	1	; () banked
  5413  0006B0  151A               	andwf	(printf@flag+1)& (0+255),w,b
  5414  0006B2  0100               	movlb	0	; () banked
  5415  0006B4  6FE0               	movwf	(??_printf+1)& (0+255),b
  5416  0006B6  0100               	movlb	0	; () banked
  5417  0006B8  51DF               	movf	??_printf& (0+255),w,b
  5418  0006BA  0100               	movlb	0	; () banked
  5419  0006BC  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  5420  0006BE  B4D8               	btfsc	status,2,c
  5421  0006C0  D004               	goto	l5725
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;doprnt.c: 1150: width--;
  5425  0006C2  0101               	movlb	1	; () banked
  5426  0006C4  0717               	decf	printf@width& (0+255),f,b
  5427  0006C6  A0D8               	btfss	status,0,c
  5428  0006C8  0718               	decf	(printf@width+1)& (0+255),f,b
  5429  0006CA                     l5725:
  5430                           
  5431                           ;doprnt.c: 1153: if(flag & 0x04) {
  5432  0006CA  0101               	movlb	1	; () banked
  5433  0006CC  A519               	btfss	printf@flag& (0+255),2,b
  5434  0006CE  D02D               	goto	l5741
  5435                           
  5436                           ; BSR set to: 1
  5437                           ;doprnt.c: 1157: if(flag & 0x03)
  5438  0006D0  0E03               	movlw	3
  5439  0006D2  0101               	movlb	1	; () banked
  5440  0006D4  1519               	andwf	printf@flag& (0+255),w,b
  5441  0006D6  0100               	movlb	0	; () banked
  5442  0006D8  6FDF               	movwf	??_printf& (0+255),b
  5443  0006DA  0E00               	movlw	0
  5444  0006DC  0101               	movlb	1	; () banked
  5445  0006DE  151A               	andwf	(printf@flag+1)& (0+255),w,b
  5446  0006E0  0100               	movlb	0	; () banked
  5447  0006E2  6FE0               	movwf	(??_printf+1)& (0+255),b
  5448  0006E4  0100               	movlb	0	; () banked
  5449  0006E6  51DF               	movf	??_printf& (0+255),w,b
  5450  0006E8  0100               	movlb	0	; () banked
  5451  0006EA  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  5452  0006EC  B4D8               	btfsc	status,2,c
  5453  0006EE  D00B               	goto	l5735
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;doprnt.c: 1159: (putch('-') );
  5457  0006F0  0E2D               	movlw	45
  5458  0006F2  ECF9  F02B         	call	_putch
  5459                           
  5460                           ;doprnt.c: 1168: while(width > 0) {
  5461  0006F6  D007               	goto	l5735
  5462  0006F8                     l5731:
  5463                           
  5464                           ;doprnt.c: 1169: (putch('0') );
  5465  0006F8  0E30               	movlw	48
  5466  0006FA  ECF9  F02B         	call	_putch
  5467                           
  5468                           ;doprnt.c: 1170: width--;
  5469  0006FE  0101               	movlb	1	; () banked
  5470  000700  0717               	decf	printf@width& (0+255),f,b
  5471  000702  A0D8               	btfss	status,0,c
  5472  000704  0718               	decf	(printf@width+1)& (0+255),f,b
  5473  000706                     l5735:
  5474  000706  0101               	movlb	1	; () banked
  5475  000708  BF18               	btfsc	(printf@width+1)& (0+255),7,b
  5476  00070A  D074               	goto	l5753
  5477  00070C  0101               	movlb	1	; () banked
  5478  00070E  5118               	movf	(printf@width+1)& (0+255),w,b
  5479  000710  E1F3               	bnz	l5731
  5480  000712  0101               	movlb	1	; () banked
  5481  000714  0517               	decf	printf@width& (0+255),w,b
  5482  000716  A0D8               	btfss	status,0,c
  5483  000718  D06D               	goto	l5753
  5484  00071A  D7EE               	goto	l5731
  5485  00071C                     l5737:
  5486                           
  5487                           ; BSR set to: 1
  5488                           ;doprnt.c: 1181: (putch(' ') );
  5489  00071C  0E20               	movlw	32
  5490  00071E  ECF9  F02B         	call	_putch
  5491                           
  5492                           ;doprnt.c: 1182: width--;
  5493  000722  0101               	movlb	1	; () banked
  5494  000724  0717               	decf	printf@width& (0+255),f,b
  5495  000726  A0D8               	btfss	status,0,c
  5496  000728  0718               	decf	(printf@width+1)& (0+255),f,b
  5497  00072A                     l5741:
  5498                           
  5499                           ; BSR set to: 1
  5500  00072A  0101               	movlb	1	; () banked
  5501  00072C  BF18               	btfsc	(printf@width+1)& (0+255),7,b
  5502  00072E  D007               	goto	l5743
  5503  000730  0101               	movlb	1	; () banked
  5504  000732  5118               	movf	(printf@width+1)& (0+255),w,b
  5505  000734  E1F3               	bnz	l5737
  5506  000736  0101               	movlb	1	; () banked
  5507  000738  0517               	decf	printf@width& (0+255),w,b
  5508  00073A  B0D8               	btfsc	status,0,c
  5509  00073C  D7EF               	goto	l5737
  5510  00073E                     l5743:
  5511                           
  5512                           ; BSR set to: 1
  5513                           ;doprnt.c: 1183: }
  5514                           ;doprnt.c: 1188: if(flag & 0x03)
  5515  00073E  0E03               	movlw	3
  5516  000740  0101               	movlb	1	; () banked
  5517  000742  1519               	andwf	printf@flag& (0+255),w,b
  5518  000744  0100               	movlb	0	; () banked
  5519  000746  6FDF               	movwf	??_printf& (0+255),b
  5520  000748  0E00               	movlw	0
  5521  00074A  0101               	movlb	1	; () banked
  5522  00074C  151A               	andwf	(printf@flag+1)& (0+255),w,b
  5523  00074E  0100               	movlb	0	; () banked
  5524  000750  6FE0               	movwf	(??_printf+1)& (0+255),b
  5525  000752  0100               	movlb	0	; () banked
  5526  000754  51DF               	movf	??_printf& (0+255),w,b
  5527  000756  0100               	movlb	0	; () banked
  5528  000758  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  5529  00075A  B4D8               	btfsc	status,2,c
  5530  00075C  D04B               	goto	l5753
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;doprnt.c: 1190: (putch('-') );
  5534  00075E  0E2D               	movlw	45
  5535  000760  ECF9  F02B         	call	_putch
  5536                           
  5537                           ;doprnt.c: 1195: }
  5538                           ;doprnt.c: 1196: while(c--) {
  5539  000764  D047               	goto	l5753
  5540  000766                     l5747:
  5541                           
  5542                           ;doprnt.c: 1200: {
  5543                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5544  000766  C110  F080         	movff	printf@val,___lldiv@dividend
  5545  00076A  C111  F081         	movff	printf@val+1,___lldiv@dividend+1
  5546  00076E  C112  F082         	movff	printf@val+2,___lldiv@dividend+2
  5547  000772  C113  F083         	movff	printf@val+3,___lldiv@dividend+3
  5548  000776  0101               	movlb	1	; () banked
  5549  000778  511D               	movf	printf@c& (0+255),w,b
  5550  00077A  0D04               	mullw	4
  5551  00077C  0E1D               	movlw	low _dpowers
  5552  00077E  24F3               	addwf	prodl,w,c
  5553  000780  6EF6               	movwf	tblptrl,c
  5554  000782  0EFE               	movlw	high _dpowers
  5555  000784  20F4               	addwfc	prodh,w,c
  5556  000786  6EF7               	movwf	tblptrh,c
  5557  000788                     	if	0	;There are less than 3 active tblptr bytes
  5558  000788                     	endif
  5559  000788  0009               	tblrd		*+
  5560  00078A  CFF5 F084          	movff	tablat,___lldiv@divisor
  5561  00078E  0009               	tblrd		*+
  5562  000790  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  5563  000794  0009               	tblrd		*+
  5564  000796  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  5565  00079A  000A               	tblrd		*-
  5566  00079C  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  5567  0007A0  EC09  F026         	call	___lldiv	;wreg free
  5568  0007A4  C080  F10A         	movff	?___lldiv,printf@tmpval
  5569  0007A8  C081  F10B         	movff	?___lldiv+1,printf@tmpval+1
  5570  0007AC  C082  F10C         	movff	?___lldiv+2,printf@tmpval+2
  5571  0007B0  C083  F10D         	movff	?___lldiv+3,printf@tmpval+3
  5572                           
  5573                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5574  0007B4  C10A  F08D         	movff	printf@tmpval,___llmod@dividend
  5575  0007B8  C10B  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  5576  0007BC  C10C  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  5577  0007C0  C10D  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  5578  0007C4  0E0A               	movlw	10
  5579  0007C6  0100               	movlb	0	; () banked
  5580  0007C8  6F91               	movwf	___llmod@divisor& (0+255),b
  5581  0007CA  0E00               	movlw	0
  5582  0007CC  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  5583  0007CE  0E00               	movlw	0
  5584  0007D0  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  5585  0007D2  0E00               	movlw	0
  5586  0007D4  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  5587  0007D6  EC5E  F027         	call	___llmod	;wreg free
  5588  0007DA  C08D  F10A         	movff	?___llmod,printf@tmpval
  5589  0007DE  C08E  F10B         	movff	?___llmod+1,printf@tmpval+1
  5590  0007E2  C08F  F10C         	movff	?___llmod+2,printf@tmpval+2
  5591  0007E6  C090  F10D         	movff	?___llmod+3,printf@tmpval+3
  5592                           
  5593                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5594  0007EA  0101               	movlb	1	; () banked
  5595  0007EC  510A               	movf	printf@tmpval& (0+255),w,b
  5596  0007EE  0F30               	addlw	48
  5597  0007F0  ECF9  F02B         	call	_putch
  5598  0007F4                     l5753:
  5599  0007F4  0101               	movlb	1	; () banked
  5600  0007F6  071D               	decf	printf@c& (0+255),f,b
  5601  0007F8  0101               	movlb	1	; () banked
  5602  0007FA  291D               	incf	printf@c& (0+255),w,b
  5603  0007FC  B4D8               	btfsc	status,2,c
  5604  0007FE  D008               	goto	l5759
  5605  000800  D7B2               	goto	l5747
  5606  000802                     l5755:
  5607                           
  5608                           ; BSR set to: 1
  5609                           ;doprnt.c: 1208: (putch('0') );
  5610  000802  0E30               	movlw	48
  5611  000804  ECF9  F02B         	call	_putch
  5612                           
  5613                           ;doprnt.c: 1209: exp--;
  5614  000808  0101               	movlb	1	; () banked
  5615  00080A  070E               	decf	printf@exp& (0+255),f,b
  5616  00080C  A0D8               	btfss	status,0,c
  5617  00080E  070F               	decf	(printf@exp+1)& (0+255),f,b
  5618  000810                     l5759:
  5619                           
  5620                           ; BSR set to: 1
  5621  000810  0101               	movlb	1	; () banked
  5622  000812  BF0F               	btfsc	(printf@exp+1)& (0+255),7,b
  5623  000814  D007               	goto	l5761
  5624  000816  0101               	movlb	1	; () banked
  5625  000818  510F               	movf	(printf@exp+1)& (0+255),w,b
  5626  00081A  E1F3               	bnz	l5755
  5627  00081C  0101               	movlb	1	; () banked
  5628  00081E  050E               	decf	printf@exp& (0+255),w,b
  5629  000820  B0D8               	btfsc	status,0,c
  5630  000822  D7EF               	goto	l5755
  5631  000824                     l5761:
  5632                           
  5633                           ; BSR set to: 1
  5634                           ;doprnt.c: 1210: }
  5635                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5636  000824  0101               	movlb	1	; () banked
  5637  000826  BF1C               	btfsc	(printf@prec+1)& (0+255),7,b
  5638  000828  D00C               	goto	l760
  5639  00082A  0101               	movlb	1	; () banked
  5640  00082C  511C               	movf	(printf@prec+1)& (0+255),w,b
  5641  00082E  E105               	bnz	u6220
  5642  000830  0E09               	movlw	9
  5643  000832  0101               	movlb	1	; () banked
  5644  000834  5D1B               	subwf	printf@prec& (0+255),w,b
  5645  000836  A0D8               	btfss	status,0,c
  5646  000838  D004               	goto	l760
  5647  00083A                     u6220:
  5648                           
  5649                           ; BSR set to: 1
  5650                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5651  00083A  0E08               	movlw	8
  5652  00083C  0101               	movlb	1	; () banked
  5653  00083E  6F1D               	movwf	printf@c& (0+255),b
  5654  000840  D002               	goto	l5765
  5655  000842                     l760:
  5656                           
  5657                           ; BSR set to: 1
  5658                           ;doprnt.c: 1213: else
  5659                           ;doprnt.c: 1214: c = prec;
  5660  000842  C11B  F11D         	movff	printf@prec,printf@c
  5661  000846                     l5765:
  5662                           
  5663                           ; BSR set to: 1
  5664                           ;doprnt.c: 1215: prec -= c;
  5665  000846  0101               	movlb	1	; () banked
  5666  000848  511D               	movf	printf@c& (0+255),w,b
  5667  00084A  0101               	movlb	1	; () banked
  5668  00084C  5F1B               	subwf	printf@prec& (0+255),f,b
  5669  00084E  0E00               	movlw	0
  5670  000850  0101               	movlb	1	; () banked
  5671  000852  BF1D               	btfsc	printf@c& (0+255),7,b
  5672  000854  0EFF               	movlw	255
  5673  000856  0101               	movlb	1	; () banked
  5674  000858  5B1C               	subwfb	(printf@prec+1)& (0+255),f,b
  5675                           
  5676                           ; BSR set to: 1
  5677                           ;doprnt.c: 1219: if(c)
  5678  00085A  0101               	movlb	1	; () banked
  5679  00085C  511D               	movf	printf@c& (0+255),w,b
  5680  00085E  0101               	movlb	1	; () banked
  5681  000860  B4D8               	btfsc	status,2,c
  5682  000862  D003               	goto	l5771
  5683                           
  5684                           ; BSR set to: 1
  5685                           ;doprnt.c: 1221: (putch('.') );
  5686  000864  0E2E               	movlw	46
  5687  000866  ECF9  F02B         	call	_putch
  5688  00086A                     l5771:
  5689                           
  5690                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5691  00086A  0101               	movlb	1	; () banked
  5692  00086C  511D               	movf	printf@c& (0+255),w,b
  5693  00086E  ECBF  F00F         	call	_scale
  5694  000872  C0B0  F100         	movff	?_scale,_printf$1351
  5695  000876  C0B1  F101         	movff	?_scale+1,_printf$1351+1
  5696  00087A  C0B2  F102         	movff	?_scale+2,_printf$1351+2
  5697                           
  5698                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5699  00087E  C114  F0A4         	movff	printf@fval,___ftmul@f2
  5700  000882  C115  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  5701  000886  C116  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  5702  00088A  C100  F0A1         	movff	_printf$1351,___ftmul@f1
  5703  00088E  C101  F0A2         	movff	_printf$1351+1,___ftmul@f1+1
  5704  000892  C102  F0A3         	movff	_printf$1351+2,___ftmul@f1+2
  5705  000896  EC9A  F01C         	call	___ftmul	;wreg free
  5706  00089A  C0A1  F0C6         	movff	?___ftmul,___fttol@f1
  5707  00089E  C0A2  F0C7         	movff	?___ftmul+1,___fttol@f1+1
  5708  0008A2  C0A3  F0C8         	movff	?___ftmul+2,___fttol@f1+2
  5709  0008A6  ECEF  F01D         	call	___fttol	;wreg free
  5710  0008AA  C0C6  F110         	movff	?___fttol,printf@val
  5711  0008AE  C0C7  F111         	movff	?___fttol+1,printf@val+1
  5712  0008B2  C0C8  F112         	movff	?___fttol+2,printf@val+2
  5713  0008B6  C0C9  F113         	movff	?___fttol+3,printf@val+3
  5714                           
  5715                           ;doprnt.c: 1228: while(c--) {
  5716  0008BA  D06E               	goto	l5781
  5717  0008BC                     l5775:
  5718                           
  5719                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5720  0008BC  C110  F080         	movff	printf@val,___lldiv@dividend
  5721  0008C0  C111  F081         	movff	printf@val+1,___lldiv@dividend+1
  5722  0008C4  C112  F082         	movff	printf@val+2,___lldiv@dividend+2
  5723  0008C8  C113  F083         	movff	printf@val+3,___lldiv@dividend+3
  5724  0008CC  0101               	movlb	1	; () banked
  5725  0008CE  511D               	movf	printf@c& (0+255),w,b
  5726  0008D0  0D04               	mullw	4
  5727  0008D2  0E1D               	movlw	low _dpowers
  5728  0008D4  24F3               	addwf	prodl,w,c
  5729  0008D6  6EF6               	movwf	tblptrl,c
  5730  0008D8  0EFE               	movlw	high _dpowers
  5731  0008DA  20F4               	addwfc	prodh,w,c
  5732  0008DC  6EF7               	movwf	tblptrh,c
  5733  0008DE                     	if	0	;There are less than 3 active tblptr bytes
  5734  0008DE                     	endif
  5735  0008DE  0009               	tblrd		*+
  5736  0008E0  CFF5 F084          	movff	tablat,___lldiv@divisor
  5737  0008E4  0009               	tblrd		*+
  5738  0008E6  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  5739  0008EA  0009               	tblrd		*+
  5740  0008EC  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  5741  0008F0  000A               	tblrd		*-
  5742  0008F2  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  5743  0008F6  EC09  F026         	call	___lldiv	;wreg free
  5744  0008FA  C080  F10A         	movff	?___lldiv,printf@tmpval
  5745  0008FE  C081  F10B         	movff	?___lldiv+1,printf@tmpval+1
  5746  000902  C082  F10C         	movff	?___lldiv+2,printf@tmpval+2
  5747  000906  C083  F10D         	movff	?___lldiv+3,printf@tmpval+3
  5748                           
  5749                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5750  00090A  C10A  F08D         	movff	printf@tmpval,___llmod@dividend
  5751  00090E  C10B  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  5752  000912  C10C  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  5753  000916  C10D  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  5754  00091A  0E0A               	movlw	10
  5755  00091C  0100               	movlb	0	; () banked
  5756  00091E  6F91               	movwf	___llmod@divisor& (0+255),b
  5757  000920  0E00               	movlw	0
  5758  000922  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  5759  000924  0E00               	movlw	0
  5760  000926  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  5761  000928  0E00               	movlw	0
  5762  00092A  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  5763  00092C  EC5E  F027         	call	___llmod	;wreg free
  5764  000930  C08D  F10A         	movff	?___llmod,printf@tmpval
  5765  000934  C08E  F10B         	movff	?___llmod+1,printf@tmpval+1
  5766  000938  C08F  F10C         	movff	?___llmod+2,printf@tmpval+2
  5767  00093C  C090  F10D         	movff	?___llmod+3,printf@tmpval+3
  5768                           
  5769                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5770  000940  0101               	movlb	1	; () banked
  5771  000942  510A               	movf	printf@tmpval& (0+255),w,b
  5772  000944  0F30               	addlw	48
  5773  000946  ECF9  F02B         	call	_putch
  5774                           
  5775                           ;doprnt.c: 1232: val %= dpowers[c];
  5776  00094A  C110  F08D         	movff	printf@val,___llmod@dividend
  5777  00094E  C111  F08E         	movff	printf@val+1,___llmod@dividend+1
  5778  000952  C112  F08F         	movff	printf@val+2,___llmod@dividend+2
  5779  000956  C113  F090         	movff	printf@val+3,___llmod@dividend+3
  5780  00095A  0101               	movlb	1	; () banked
  5781  00095C  511D               	movf	printf@c& (0+255),w,b
  5782  00095E  0D04               	mullw	4
  5783  000960  0E1D               	movlw	low _dpowers
  5784  000962  24F3               	addwf	prodl,w,c
  5785  000964  6EF6               	movwf	tblptrl,c
  5786  000966  0EFE               	movlw	high _dpowers
  5787  000968  20F4               	addwfc	prodh,w,c
  5788  00096A  6EF7               	movwf	tblptrh,c
  5789  00096C                     	if	0	;There are less than 3 active tblptr bytes
  5790  00096C                     	endif
  5791  00096C  0009               	tblrd		*+
  5792  00096E  CFF5 F091          	movff	tablat,___llmod@divisor
  5793  000972  0009               	tblrd		*+
  5794  000974  CFF5 F092          	movff	tablat,___llmod@divisor+1
  5795  000978  0009               	tblrd		*+
  5796  00097A  CFF5 F093          	movff	tablat,___llmod@divisor+2
  5797  00097E  000A               	tblrd		*-
  5798  000980  CFF5 F094          	movff	tablat,___llmod@divisor+3
  5799  000984  EC5E  F027         	call	___llmod	;wreg free
  5800  000988  C08D  F110         	movff	?___llmod,printf@val
  5801  00098C  C08E  F111         	movff	?___llmod+1,printf@val+1
  5802  000990  C08F  F112         	movff	?___llmod+2,printf@val+2
  5803  000994  C090  F113         	movff	?___llmod+3,printf@val+3
  5804  000998                     l5781:
  5805  000998  0101               	movlb	1	; () banked
  5806  00099A  071D               	decf	printf@c& (0+255),f,b
  5807  00099C  0101               	movlb	1	; () banked
  5808  00099E  291D               	incf	printf@c& (0+255),w,b
  5809  0009A0  B4D8               	btfsc	status,2,c
  5810  0009A2  D008               	goto	l5787
  5811  0009A4  D78B               	goto	l5775
  5812  0009A6                     l5783:
  5813                           
  5814                           ; BSR set to: 1
  5815                           ;doprnt.c: 1236: (putch('0') );
  5816  0009A6  0E30               	movlw	48
  5817  0009A8  ECF9  F02B         	call	_putch
  5818                           
  5819                           ;doprnt.c: 1237: prec--;
  5820  0009AC  0101               	movlb	1	; () banked
  5821  0009AE  071B               	decf	printf@prec& (0+255),f,b
  5822  0009B0  A0D8               	btfss	status,0,c
  5823  0009B2  071C               	decf	(printf@prec+1)& (0+255),f,b
  5824  0009B4                     l5787:
  5825                           
  5826                           ; BSR set to: 1
  5827  0009B4  0101               	movlb	1	; () banked
  5828  0009B6  511B               	movf	printf@prec& (0+255),w,b
  5829  0009B8  0101               	movlb	1	; () banked
  5830  0009BA  111C               	iorwf	(printf@prec+1)& (0+255),w,b
  5831  0009BC  B4D8               	btfsc	status,2,c
  5832  0009BE  D22E               	goto	l5915
  5833  0009C0  D7F2               	goto	l5783
  5834  0009C2                     l720:
  5835                           
  5836                           ; BSR set to: 1
  5837                           ;doprnt.c: 1246: }
  5838                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5839  0009C2  0101               	movlb	1	; () banked
  5840  0009C4  BF19               	btfsc	printf@flag& (0+255),7,b
  5841  0009C6  D034               	goto	l769
  5842                           
  5843                           ; BSR set to: 1
  5844                           ;doprnt.c: 1253: {
  5845                           ;doprnt.c: 1255: if(flag & 0x10)
  5846  0009C8  0101               	movlb	1	; () banked
  5847  0009CA  A919               	btfss	printf@flag& (0+255),4,b
  5848  0009CC  D00E               	goto	l5795
  5849                           
  5850                           ; BSR set to: 1
  5851                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5852  0009CE  C108  FFD9         	movff	printf@ap,fsr2l
  5853  0009D2  C109  FFDA         	movff	printf@ap+1,fsr2h
  5854  0009D6  CFDE F110          	movff	postinc2,printf@val
  5855  0009DA  CFDE F111          	movff	postinc2,printf@val+1
  5856  0009DE  CFDE F112          	movff	postinc2,printf@val+2
  5857  0009E2  CFDE F113          	movff	postinc2,printf@val+3
  5858                           
  5859                           ; BSR set to: 1
  5860  0009E6  0E04               	movlw	4
  5861  0009E8  D00F               	goto	L2
  5862  0009EA                     l5795:
  5863                           
  5864                           ; BSR set to: 1
  5865                           ;doprnt.c: 1257: else
  5866                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5867  0009EA  C108  FFD9         	movff	printf@ap,fsr2l
  5868  0009EE  C109  FFDA         	movff	printf@ap+1,fsr2h
  5869  0009F2  CFDE F110          	movff	postinc2,printf@val
  5870  0009F6  CFDD F111          	movff	postdec2,printf@val+1
  5871  0009FA  0101               	movlb	1	; () banked
  5872  0009FC  0E00               	movlw	0
  5873  0009FE  BF11               	btfsc	(printf@val+1)& (0+255),7,b
  5874  000A00  0EFF               	movlw	-1
  5875  000A02  6F12               	movwf	(printf@val+2)& (0+255),b
  5876  000A04  6F13               	movwf	(printf@val+3)& (0+255),b
  5877                           
  5878                           ; BSR set to: 1
  5879  000A06  0E02               	movlw	2
  5880  000A08                     L2:
  5881  000A08  0101               	movlb	1	; () banked
  5882  000A0A  2708               	addwf	printf@ap& (0+255),f,b
  5883  000A0C  0E00               	movlw	0
  5884  000A0E  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  5885                           
  5886                           ; BSR set to: 1
  5887                           ;doprnt.c: 1261: if((long)val < 0) {
  5888                           
  5889                           ; BSR set to: 1
  5890  000A10  0101               	movlb	1	; () banked
  5891  000A12  AF13               	btfss	(printf@val+3)& (0+255),7,b
  5892  000A14  D032               	goto	l5813
  5893                           
  5894                           ; BSR set to: 1
  5895                           ;doprnt.c: 1262: flag |= 0x03;
  5896  000A16  0E03               	movlw	3
  5897  000A18  0101               	movlb	1	; () banked
  5898  000A1A  1319               	iorwf	printf@flag& (0+255),f,b
  5899                           
  5900                           ; BSR set to: 1
  5901                           ;doprnt.c: 1263: val = -val;
  5902  000A1C  0101               	movlb	1	; () banked
  5903  000A1E  1F13               	comf	(printf@val+3)& (0+255),f,b
  5904  000A20  1F12               	comf	(printf@val+2)& (0+255),f,b
  5905  000A22  1F11               	comf	(printf@val+1)& (0+255),f,b
  5906  000A24  6D10               	negf	printf@val& (0+255),b
  5907  000A26  0E00               	movlw	0
  5908  000A28  2311               	addwfc	(printf@val+1)& (0+255),f,b
  5909  000A2A  2312               	addwfc	(printf@val+2)& (0+255),f,b
  5910  000A2C  2313               	addwfc	(printf@val+3)& (0+255),f,b
  5911                           
  5912                           ; BSR set to: 1
  5913                           ;doprnt.c: 1264: }
  5914                           ;doprnt.c: 1266: }
  5915  000A2E  D025               	goto	l5813
  5916  000A30                     l769:
  5917                           
  5918                           ; BSR set to: 1
  5919                           ;doprnt.c: 1268: else
  5920                           ;doprnt.c: 1273: {
  5921                           ;doprnt.c: 1281: if(flag & 0x10)
  5922  000A30  0101               	movlb	1	; () banked
  5923  000A32  A919               	btfss	printf@flag& (0+255),4,b
  5924  000A34  D00E               	goto	l5809
  5925                           
  5926                           ; BSR set to: 1
  5927                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5928  000A36  C108  FFD9         	movff	printf@ap,fsr2l
  5929  000A3A  C109  FFDA         	movff	printf@ap+1,fsr2h
  5930  000A3E  CFDE F110          	movff	postinc2,printf@val
  5931  000A42  CFDE F111          	movff	postinc2,printf@val+1
  5932  000A46  CFDE F112          	movff	postinc2,printf@val+2
  5933  000A4A  CFDE F113          	movff	postinc2,printf@val+3
  5934                           
  5935                           ; BSR set to: 1
  5936  000A4E  0E04               	movlw	4
  5937  000A50  D010               	goto	L3
  5938  000A52                     l5809:
  5939                           
  5940                           ; BSR set to: 1
  5941                           ;doprnt.c: 1283: else
  5942                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5943  000A52  C108  FFD9         	movff	printf@ap,fsr2l
  5944  000A56  C109  FFDA         	movff	printf@ap+1,fsr2h
  5945  000A5A  CFDE F0DF          	movff	postinc2,??_printf
  5946  000A5E  CFDD F0E0          	movff	postdec2,??_printf+1
  5947  000A62  C0DF  F110         	movff	??_printf,printf@val
  5948  000A66  C0E0  F111         	movff	??_printf+1,printf@val+1
  5949  000A6A  0101               	movlb	1	; () banked
  5950  000A6C  6B12               	clrf	(printf@val+2)& (0+255),b
  5951  000A6E  6B13               	clrf	(printf@val+3)& (0+255),b
  5952                           
  5953                           ; BSR set to: 1
  5954  000A70  0E02               	movlw	2
  5955  000A72                     L3:
  5956  000A72  0101               	movlb	1	; () banked
  5957  000A74  2708               	addwf	printf@ap& (0+255),f,b
  5958  000A76  0E00               	movlw	0
  5959  000A78  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  5960  000A7A                     l5813:
  5961                           
  5962                           ; BSR set to: 1
  5963                           ;doprnt.c: 1287: }
  5964                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5965  000A7A  0101               	movlb	1	; () banked
  5966  000A7C  511B               	movf	printf@prec& (0+255),w,b
  5967  000A7E  0101               	movlb	1	; () banked
  5968  000A80  111C               	iorwf	(printf@prec+1)& (0+255),w,b
  5969  000A82  A4D8               	btfss	status,2,c
  5970  000A84  D05A               	goto	l5849
  5971                           
  5972                           ; BSR set to: 1
  5973  000A86  0101               	movlb	1	; () banked
  5974  000A88  5110               	movf	printf@val& (0+255),w,b
  5975  000A8A  0101               	movlb	1	; () banked
  5976  000A8C  1111               	iorwf	(printf@val+1)& (0+255),w,b
  5977  000A8E  0101               	movlb	1	; () banked
  5978  000A90  1112               	iorwf	(printf@val+2)& (0+255),w,b
  5979  000A92  0101               	movlb	1	; () banked
  5980  000A94  1113               	iorwf	(printf@val+3)& (0+255),w,b
  5981  000A96  A4D8               	btfss	status,2,c
  5982  000A98  D050               	goto	l5849
  5983                           
  5984                           ; BSR set to: 1
  5985                           ;doprnt.c: 1291: prec++;
  5986  000A9A  0101               	movlb	1	; () banked
  5987  000A9C  4B1B               	infsnz	printf@prec& (0+255),f,b
  5988  000A9E  2B1C               	incf	(printf@prec+1)& (0+255),f,b
  5989                           
  5990                           ; BSR set to: 1
  5991                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5992  000AA0  D04C               	goto	l5849
  5993  000AA2                     l5819:
  5994                           
  5995                           ; BSR set to: 1
  5996                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5997  000AA2  0E01               	movlw	1
  5998  000AA4  0101               	movlb	1	; () banked
  5999  000AA6  6F1D               	movwf	printf@c& (0+255),b
  6000  000AA8                     l5821:
  6001                           
  6002                           ; BSR set to: 1
  6003  000AA8  0E0A               	movlw	10
  6004  000AAA  0101               	movlb	1	; () banked
  6005  000AAC  191D               	xorwf	printf@c& (0+255),w,b
  6006  000AAE  B4D8               	btfsc	status,2,c
  6007  000AB0  D04D               	goto	l5851
  6008                           
  6009                           ; BSR set to: 1
  6010                           ;doprnt.c: 1306: if(val < dpowers[c])
  6011                           
  6012                           ; BSR set to: 1
  6013                           
  6014                           ; BSR set to: 1
  6015  000AB2  0101               	movlb	1	; () banked
  6016  000AB4  511D               	movf	printf@c& (0+255),w,b
  6017  000AB6  0D04               	mullw	4
  6018  000AB8  0E1D               	movlw	low _dpowers
  6019  000ABA  24F3               	addwf	prodl,w,c
  6020  000ABC  6EF6               	movwf	tblptrl,c
  6021  000ABE  0EFE               	movlw	high _dpowers
  6022  000AC0  20F4               	addwfc	prodh,w,c
  6023  000AC2  6EF7               	movwf	tblptrh,c
  6024  000AC4                     	if	0	;There are less than 3 active tblptr bytes
  6025  000AC4                     	endif
  6026  000AC4  0009               	tblrd		*+
  6027  000AC6  50F5               	movf	tablat,w,c
  6028  000AC8  0101               	movlb	1	; () banked
  6029  000ACA  5D10               	subwf	printf@val& (0+255),w,b
  6030  000ACC  0009               	tblrd		*+
  6031  000ACE  50F5               	movf	tablat,w,c
  6032  000AD0  0101               	movlb	1	; () banked
  6033  000AD2  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6034  000AD4  0009               	tblrd		*+
  6035  000AD6  50F5               	movf	tablat,w,c
  6036  000AD8  0101               	movlb	1	; () banked
  6037  000ADA  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6038  000ADC  0009               	tblrd		*+
  6039  000ADE  50F5               	movf	tablat,w,c
  6040  000AE0  0101               	movlb	1	; () banked
  6041  000AE2  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6042  000AE4  A0D8               	btfss	status,0,c
  6043  000AE6  D032               	goto	l5851
  6044                           
  6045                           ; BSR set to: 1
  6046                           
  6047                           ; BSR set to: 1
  6048                           
  6049                           ; BSR set to: 1
  6050                           ;doprnt.c: 1307: break;
  6051  000AE8  0101               	movlb	1	; () banked
  6052  000AEA  2B1D               	incf	printf@c& (0+255),f,b
  6053  000AEC  D7DD               	goto	l5821
  6054  000AEE                     l5833:
  6055                           
  6056                           ; BSR set to: 1
  6057                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6058  000AEE  0E01               	movlw	1
  6059  000AF0  0101               	movlb	1	; () banked
  6060  000AF2  6F1D               	movwf	printf@c& (0+255),b
  6061  000AF4                     l5835:
  6062                           
  6063                           ; BSR set to: 1
  6064  000AF4  0E08               	movlw	8
  6065  000AF6  0101               	movlb	1	; () banked
  6066  000AF8  191D               	xorwf	printf@c& (0+255),w,b
  6067  000AFA  B4D8               	btfsc	status,2,c
  6068  000AFC  D027               	goto	l5851
  6069                           
  6070                           ; BSR set to: 1
  6071                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6072                           
  6073                           ; BSR set to: 1
  6074                           
  6075                           ; BSR set to: 1
  6076  000AFE  0101               	movlb	1	; () banked
  6077  000B00  511D               	movf	printf@c& (0+255),w,b
  6078  000B02  0D04               	mullw	4
  6079  000B04  0E93               	movlw	low _hexpowers
  6080  000B06  24F3               	addwf	prodl,w,c
  6081  000B08  6EF6               	movwf	tblptrl,c
  6082  000B0A  0EFE               	movlw	high _hexpowers
  6083  000B0C  20F4               	addwfc	prodh,w,c
  6084  000B0E  6EF7               	movwf	tblptrh,c
  6085  000B10                     	if	0	;There are less than 3 active tblptr bytes
  6086  000B10                     	endif
  6087  000B10  0009               	tblrd		*+
  6088  000B12  50F5               	movf	tablat,w,c
  6089  000B14  0101               	movlb	1	; () banked
  6090  000B16  5D10               	subwf	printf@val& (0+255),w,b
  6091  000B18  0009               	tblrd		*+
  6092  000B1A  50F5               	movf	tablat,w,c
  6093  000B1C  0101               	movlb	1	; () banked
  6094  000B1E  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6095  000B20  0009               	tblrd		*+
  6096  000B22  50F5               	movf	tablat,w,c
  6097  000B24  0101               	movlb	1	; () banked
  6098  000B26  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6099  000B28  0009               	tblrd		*+
  6100  000B2A  50F5               	movf	tablat,w,c
  6101  000B2C  0101               	movlb	1	; () banked
  6102  000B2E  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6103  000B30  A0D8               	btfss	status,0,c
  6104  000B32  D00C               	goto	l5851
  6105                           
  6106                           ; BSR set to: 1
  6107                           
  6108                           ; BSR set to: 1
  6109                           
  6110                           ; BSR set to: 1
  6111                           ;doprnt.c: 1318: break;
  6112  000B34  0101               	movlb	1	; () banked
  6113  000B36  2B1D               	incf	printf@c& (0+255),f,b
  6114  000B38  D7DD               	goto	l5835
  6115  000B3A                     l5849:
  6116                           
  6117                           ; BSR set to: 1
  6118  000B3A  0101               	movlb	1	; () banked
  6119  000B3C  5119               	movf	printf@flag& (0+255),w,b
  6120  000B3E  0B80               	andlw	128
  6121                           
  6122                           ; Switch size 1, requested type "space"
  6123                           ; Number of cases is 2, Range of values is 0 to 128
  6124                           ; switch strategies available:
  6125                           ; Name         Instructions Cycles
  6126                           ; simple_byte            7     4 (average)
  6127                           ;	Chosen strategy is simple_byte
  6128  000B40  0A00               	xorlw	0	; case 0
  6129  000B42  B4D8               	btfsc	status,2,c
  6130  000B44  D7AE               	goto	l5819
  6131  000B46  0A80               	xorlw	128	; case 128
  6132  000B48  B4D8               	btfsc	status,2,c
  6133  000B4A  D7D1               	goto	l5833
  6134  000B4C                     l5851:
  6135                           
  6136                           ; BSR set to: 1
  6137                           ;doprnt.c: 1339: if(c < prec)
  6138  000B4C  0E80               	movlw	128
  6139  000B4E  0101               	movlb	1	; () banked
  6140  000B50  BF1D               	btfsc	printf@c& (0+255),7,b
  6141  000B52  0E7F               	movlw	127
  6142  000B54  0100               	movlb	0	; () banked
  6143  000B56  6FDF               	movwf	??_printf& (0+255),b
  6144  000B58  0101               	movlb	1	; () banked
  6145  000B5A  511B               	movf	printf@prec& (0+255),w,b
  6146  000B5C  0101               	movlb	1	; () banked
  6147  000B5E  5D1D               	subwf	printf@c& (0+255),w,b
  6148  000B60  0101               	movlb	1	; () banked
  6149  000B62  511C               	movf	(printf@prec+1)& (0+255),w,b
  6150  000B64  0A80               	xorlw	128
  6151  000B66  0100               	movlb	0	; () banked
  6152  000B68  59DF               	subwfb	??_printf& (0+255),w,b
  6153  000B6A  B0D8               	btfsc	status,0,c
  6154  000B6C  D003               	goto	l5855
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;doprnt.c: 1340: c = prec;
  6158  000B6E  C11B  F11D         	movff	printf@prec,printf@c
  6159  000B72  D018               	goto	l5859
  6160  000B74                     l5855:
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;doprnt.c: 1341: else if(prec < c)
  6164  000B74  0101               	movlb	1	; () banked
  6165  000B76  511C               	movf	(printf@prec+1)& (0+255),w,b
  6166  000B78  0A80               	xorlw	128
  6167  000B7A  0100               	movlb	0	; () banked
  6168  000B7C  6FDF               	movwf	??_printf& (0+255),b
  6169  000B7E  0101               	movlb	1	; () banked
  6170  000B80  511D               	movf	printf@c& (0+255),w,b
  6171  000B82  0101               	movlb	1	; () banked
  6172  000B84  5D1B               	subwf	printf@prec& (0+255),w,b
  6173  000B86  0E80               	movlw	128
  6174  000B88  0101               	movlb	1	; () banked
  6175  000B8A  BF1D               	btfsc	printf@c& (0+255),7,b
  6176  000B8C  0E7F               	movlw	127
  6177  000B8E  0100               	movlb	0	; () banked
  6178  000B90  59DF               	subwfb	??_printf& (0+255),w,b
  6179  000B92  B0D8               	btfsc	status,0,c
  6180  000B94  D007               	goto	l5859
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;doprnt.c: 1342: prec = c;
  6184  000B96  0101               	movlb	1	; () banked
  6185  000B98  511D               	movf	printf@c& (0+255),w,b
  6186  000B9A  0101               	movlb	1	; () banked
  6187  000B9C  6F1B               	movwf	printf@prec& (0+255),b
  6188  000B9E  6B1C               	clrf	(printf@prec+1)& (0+255),b
  6189  000BA0  BF1B               	btfsc	printf@prec& (0+255),7,b
  6190  000BA2  071C               	decf	(printf@prec+1)& (0+255),f,b
  6191  000BA4                     l5859:
  6192                           
  6193                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6194  000BA4  0101               	movlb	1	; () banked
  6195  000BA6  5117               	movf	printf@width& (0+255),w,b
  6196  000BA8  0101               	movlb	1	; () banked
  6197  000BAA  1118               	iorwf	(printf@width+1)& (0+255),w,b
  6198  000BAC  B4D8               	btfsc	status,2,c
  6199  000BAE  D014               	goto	l5865
  6200                           
  6201                           ; BSR set to: 1
  6202  000BB0  0E03               	movlw	3
  6203  000BB2  0101               	movlb	1	; () banked
  6204  000BB4  1519               	andwf	printf@flag& (0+255),w,b
  6205  000BB6  0100               	movlb	0	; () banked
  6206  000BB8  6FDF               	movwf	??_printf& (0+255),b
  6207  000BBA  0E00               	movlw	0
  6208  000BBC  0101               	movlb	1	; () banked
  6209  000BBE  151A               	andwf	(printf@flag+1)& (0+255),w,b
  6210  000BC0  0100               	movlb	0	; () banked
  6211  000BC2  6FE0               	movwf	(??_printf+1)& (0+255),b
  6212  000BC4  0100               	movlb	0	; () banked
  6213  000BC6  51DF               	movf	??_printf& (0+255),w,b
  6214  000BC8  0100               	movlb	0	; () banked
  6215  000BCA  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  6216  000BCC  B4D8               	btfsc	status,2,c
  6217  000BCE  D004               	goto	l5865
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;doprnt.c: 1346: width--;
  6221  000BD0  0101               	movlb	1	; () banked
  6222  000BD2  0717               	decf	printf@width& (0+255),f,b
  6223  000BD4  A0D8               	btfss	status,0,c
  6224  000BD6  0718               	decf	(printf@width+1)& (0+255),f,b
  6225  000BD8                     l5865:
  6226                           
  6227                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6228  000BD8  0101               	movlb	1	; () banked
  6229  000BDA  AD1A               	btfss	(printf@flag+1)& (0+255),6,b
  6230  000BDC  D01E               	goto	l5873
  6231                           
  6232                           ; BSR set to: 1
  6233                           ;doprnt.c: 1349: if(width > prec)
  6234  000BDE  0101               	movlb	1	; () banked
  6235  000BE0  5117               	movf	printf@width& (0+255),w,b
  6236  000BE2  0101               	movlb	1	; () banked
  6237  000BE4  5D1B               	subwf	printf@prec& (0+255),w,b
  6238  000BE6  0101               	movlb	1	; () banked
  6239  000BE8  511C               	movf	(printf@prec+1)& (0+255),w,b
  6240  000BEA  0A80               	xorlw	128
  6241  000BEC  0100               	movlb	0	; () banked
  6242  000BEE  6FDF               	movwf	??_printf& (0+255),b
  6243  000BF0  0101               	movlb	1	; () banked
  6244  000BF2  5118               	movf	(printf@width+1)& (0+255),w,b
  6245  000BF4  0A80               	xorlw	128
  6246  000BF6  0100               	movlb	0	; () banked
  6247  000BF8  59DF               	subwfb	??_printf& (0+255),w,b
  6248  000BFA  B0D8               	btfsc	status,0,c
  6249  000BFC  D009               	goto	l5871
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;doprnt.c: 1350: width -= prec;
  6253  000BFE  0101               	movlb	1	; () banked
  6254  000C00  511B               	movf	printf@prec& (0+255),w,b
  6255  000C02  0101               	movlb	1	; () banked
  6256  000C04  5F17               	subwf	printf@width& (0+255),f,b
  6257  000C06  0101               	movlb	1	; () banked
  6258  000C08  511C               	movf	(printf@prec+1)& (0+255),w,b
  6259  000C0A  0101               	movlb	1	; () banked
  6260  000C0C  5B18               	subwfb	(printf@width+1)& (0+255),f,b
  6261  000C0E  D005               	goto	l5873
  6262  000C10                     l5871:
  6263                           
  6264                           ;doprnt.c: 1351: else
  6265                           ;doprnt.c: 1352: width = 0;
  6266  000C10  0E00               	movlw	0
  6267  000C12  0101               	movlb	1	; () banked
  6268  000C14  6F18               	movwf	(printf@width+1)& (0+255),b
  6269  000C16  0E00               	movlw	0
  6270  000C18  6F17               	movwf	printf@width& (0+255),b
  6271  000C1A                     l5873:
  6272                           
  6273                           ; BSR set to: 1
  6274                           ;doprnt.c: 1353: }
  6275                           ;doprnt.c: 1381: if(width > c)
  6276  000C1A  0E80               	movlw	128
  6277  000C1C  0101               	movlb	1	; () banked
  6278  000C1E  BF1D               	btfsc	printf@c& (0+255),7,b
  6279  000C20  0E7F               	movlw	127
  6280  000C22  0100               	movlb	0	; () banked
  6281  000C24  6FDF               	movwf	??_printf& (0+255),b
  6282  000C26  0101               	movlb	1	; () banked
  6283  000C28  5117               	movf	printf@width& (0+255),w,b
  6284  000C2A  0101               	movlb	1	; () banked
  6285  000C2C  5D1D               	subwf	printf@c& (0+255),w,b
  6286  000C2E  0101               	movlb	1	; () banked
  6287  000C30  5118               	movf	(printf@width+1)& (0+255),w,b
  6288  000C32  0A80               	xorlw	128
  6289  000C34  0100               	movlb	0	; () banked
  6290  000C36  59DF               	subwfb	??_printf& (0+255),w,b
  6291  000C38  B0D8               	btfsc	status,0,c
  6292  000C3A  D00B               	goto	l5877
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;doprnt.c: 1382: width -= c;
  6296  000C3C  0101               	movlb	1	; () banked
  6297  000C3E  511D               	movf	printf@c& (0+255),w,b
  6298  000C40  0101               	movlb	1	; () banked
  6299  000C42  5F17               	subwf	printf@width& (0+255),f,b
  6300  000C44  0E00               	movlw	0
  6301  000C46  0101               	movlb	1	; () banked
  6302  000C48  BF1D               	btfsc	printf@c& (0+255),7,b
  6303  000C4A  0EFF               	movlw	255
  6304  000C4C  0101               	movlb	1	; () banked
  6305  000C4E  5B18               	subwfb	(printf@width+1)& (0+255),f,b
  6306  000C50  D005               	goto	l5879
  6307  000C52                     l5877:
  6308                           
  6309                           ;doprnt.c: 1383: else
  6310                           ;doprnt.c: 1384: width = 0;
  6311  000C52  0E00               	movlw	0
  6312  000C54  0101               	movlb	1	; () banked
  6313  000C56  6F18               	movwf	(printf@width+1)& (0+255),b
  6314  000C58  0E00               	movlw	0
  6315  000C5A  6F17               	movwf	printf@width& (0+255),b
  6316  000C5C                     l5879:
  6317                           
  6318                           ; BSR set to: 1
  6319                           ;doprnt.c: 1387: if(flag & 0x04) {
  6320  000C5C  0101               	movlb	1	; () banked
  6321  000C5E  A519               	btfss	printf@flag& (0+255),2,b
  6322  000C60  D021               	goto	l5891
  6323                           
  6324                           ; BSR set to: 1
  6325                           ;doprnt.c: 1392: if(flag & 0x03)
  6326  000C62  0E03               	movlw	3
  6327  000C64  0101               	movlb	1	; () banked
  6328  000C66  1519               	andwf	printf@flag& (0+255),w,b
  6329  000C68  0100               	movlb	0	; () banked
  6330  000C6A  6FDF               	movwf	??_printf& (0+255),b
  6331  000C6C  0E00               	movlw	0
  6332  000C6E  0101               	movlb	1	; () banked
  6333  000C70  151A               	andwf	(printf@flag+1)& (0+255),w,b
  6334  000C72  0100               	movlb	0	; () banked
  6335  000C74  6FE0               	movwf	(??_printf+1)& (0+255),b
  6336  000C76  0100               	movlb	0	; () banked
  6337  000C78  51DF               	movf	??_printf& (0+255),w,b
  6338  000C7A  0100               	movlb	0	; () banked
  6339  000C7C  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  6340  000C7E  B4D8               	btfsc	status,2,c
  6341  000C80  D003               	goto	l5885
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;doprnt.c: 1393: (putch('-') );
  6345  000C82  0E2D               	movlw	45
  6346  000C84  ECF9  F02B         	call	_putch
  6347  000C88                     l5885:
  6348                           
  6349                           ;doprnt.c: 1415: if(width)
  6350  000C88  0101               	movlb	1	; () banked
  6351  000C8A  5117               	movf	printf@width& (0+255),w,b
  6352  000C8C  0101               	movlb	1	; () banked
  6353  000C8E  1118               	iorwf	(printf@width+1)& (0+255),w,b
  6354  000C90  B4D8               	btfsc	status,2,c
  6355  000C92  D0B9               	goto	l5913
  6356                           
  6357                           ; BSR set to: 1
  6358                           ;doprnt.c: 1417: (putch('0') );
  6359                           
  6360                           ; BSR set to: 1
  6361                           
  6362                           ;doprnt.c: 1416: do
  6363  000C94  0E30               	movlw	48
  6364  000C96  ECF9  F02B         	call	_putch
  6365                           
  6366                           ;doprnt.c: 1418: while(--width);
  6367  000C9A  0101               	movlb	1	; () banked
  6368  000C9C  0717               	decf	printf@width& (0+255),f,b
  6369  000C9E  A0D8               	btfss	status,0,c
  6370  000CA0  0718               	decf	(printf@width+1)& (0+255),f,b
  6371  000CA2  D7F2               	goto	l5885
  6372  000CA4                     l5891:
  6373                           
  6374                           ; BSR set to: 1
  6375                           ;doprnt.c: 1422: {
  6376                           ;doprnt.c: 1424: if(width
  6377                           ;doprnt.c: 1428: )
  6378  000CA4  0101               	movlb	1	; () banked
  6379  000CA6  5117               	movf	printf@width& (0+255),w,b
  6380  000CA8  0101               	movlb	1	; () banked
  6381  000CAA  1118               	iorwf	(printf@width+1)& (0+255),w,b
  6382  000CAC  B4D8               	btfsc	status,2,c
  6383  000CAE  D00D               	goto	l5897
  6384  000CB0                     l5893:
  6385                           
  6386                           ; BSR set to: 1
  6387                           ;doprnt.c: 1430: (putch(' ') );
  6388  000CB0  0E20               	movlw	32
  6389  000CB2  ECF9  F02B         	call	_putch
  6390                           
  6391                           ;doprnt.c: 1431: while(--width);
  6392  000CB6  0101               	movlb	1	; () banked
  6393  000CB8  0717               	decf	printf@width& (0+255),f,b
  6394  000CBA  A0D8               	btfss	status,0,c
  6395  000CBC  0718               	decf	(printf@width+1)& (0+255),f,b
  6396  000CBE  0101               	movlb	1	; () banked
  6397  000CC0  5117               	movf	printf@width& (0+255),w,b
  6398  000CC2  0101               	movlb	1	; () banked
  6399  000CC4  1118               	iorwf	(printf@width+1)& (0+255),w,b
  6400  000CC6  A4D8               	btfss	status,2,c
  6401  000CC8  D7F3               	goto	l5893
  6402  000CCA                     l5897:
  6403                           
  6404                           ; BSR set to: 1
  6405                           ;doprnt.c: 1438: if(flag & 0x03)
  6406  000CCA  0E03               	movlw	3
  6407  000CCC  0101               	movlb	1	; () banked
  6408  000CCE  1519               	andwf	printf@flag& (0+255),w,b
  6409  000CD0  0100               	movlb	0	; () banked
  6410  000CD2  6FDF               	movwf	??_printf& (0+255),b
  6411  000CD4  0E00               	movlw	0
  6412  000CD6  0101               	movlb	1	; () banked
  6413  000CD8  151A               	andwf	(printf@flag+1)& (0+255),w,b
  6414  000CDA  0100               	movlb	0	; () banked
  6415  000CDC  6FE0               	movwf	(??_printf+1)& (0+255),b
  6416  000CDE  0100               	movlb	0	; () banked
  6417  000CE0  51DF               	movf	??_printf& (0+255),w,b
  6418  000CE2  0100               	movlb	0	; () banked
  6419  000CE4  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  6420  000CE6  B4D8               	btfsc	status,2,c
  6421  000CE8  D08E               	goto	l5913
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;doprnt.c: 1439: (putch('-') );
  6425  000CEA  0E2D               	movlw	45
  6426  000CEC  ECF9  F02B         	call	_putch
  6427                           
  6428                           ;doprnt.c: 1469: }
  6429                           ;doprnt.c: 1474: while(prec--) {
  6430  000CF0  D08A               	goto	l5913
  6431  000CF2                     l5901:
  6432                           
  6433                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6434  000CF2  C11B  F0DF         	movff	printf@prec,??_printf
  6435  000CF6  C11C  F0E0         	movff	printf@prec+1,??_printf+1
  6436  000CFA  0100               	movlb	0	; () banked
  6437  000CFC  90D8               	bcf	status,0,c
  6438  000CFE  37DF               	rlcf	??_printf& (0+255),f,b
  6439  000D00  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  6440  000D02  0100               	movlb	0	; () banked
  6441  000D04  90D8               	bcf	status,0,c
  6442  000D06  37DF               	rlcf	??_printf& (0+255),f,b
  6443  000D08  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  6444  000D0A  0E1D               	movlw	low _dpowers
  6445  000D0C  0100               	movlb	0	; () banked
  6446  000D0E  25DF               	addwf	??_printf& (0+255),w,b
  6447  000D10  6EF6               	movwf	tblptrl,c
  6448  000D12  0EFE               	movlw	high _dpowers
  6449  000D14  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  6450  000D16  6EF7               	movwf	tblptrh,c
  6451  000D18                     	if	0	;There are less than 3 active tblptr bytes
  6452  000D18                     	endif
  6453  000D18  0009               	tblrd		*+
  6454  000D1A  CFF5 F084          	movff	tablat,___lldiv@divisor
  6455  000D1E  0009               	tblrd		*+
  6456  000D20  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  6457  000D24  0009               	tblrd		*+
  6458  000D26  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  6459  000D2A  000A               	tblrd		*-
  6460  000D2C  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  6461  000D30  C110  F080         	movff	printf@val,___lldiv@dividend
  6462  000D34  C111  F081         	movff	printf@val+1,___lldiv@dividend+1
  6463  000D38  C112  F082         	movff	printf@val+2,___lldiv@dividend+2
  6464  000D3C  C113  F083         	movff	printf@val+3,___lldiv@dividend+3
  6465  000D40  EC09  F026         	call	___lldiv	;wreg free
  6466  000D44  C080  F08D         	movff	?___lldiv,___llmod@dividend
  6467  000D48  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  6468  000D4C  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  6469  000D50  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  6470  000D54  0E0A               	movlw	10
  6471  000D56  0100               	movlb	0	; () banked
  6472  000D58  6F91               	movwf	___llmod@divisor& (0+255),b
  6473  000D5A  0E00               	movlw	0
  6474  000D5C  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  6475  000D5E  0E00               	movlw	0
  6476  000D60  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  6477  000D62  0E00               	movlw	0
  6478  000D64  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  6479  000D66  EC5E  F027         	call	___llmod	;wreg free
  6480  000D6A  0100               	movlb	0	; () banked
  6481  000D6C  518D               	movf	?___llmod& (0+255),w,b
  6482  000D6E  0F30               	addlw	48
  6483  000D70  0101               	movlb	1	; () banked
  6484  000D72  6F1D               	movwf	printf@c& (0+255),b
  6485                           
  6486                           ;doprnt.c: 1491: break;
  6487  000D74  D044               	goto	l5911
  6488  000D76                     l5903:
  6489                           
  6490                           ; BSR set to: 1
  6491                           ;doprnt.c: 1499: {
  6492                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6493  000D76  C110  F080         	movff	printf@val,___lldiv@dividend
  6494  000D7A  C111  F081         	movff	printf@val+1,___lldiv@dividend+1
  6495  000D7E  C112  F082         	movff	printf@val+2,___lldiv@dividend+2
  6496  000D82  C113  F083         	movff	printf@val+3,___lldiv@dividend+3
  6497  000D86  C11B  F0DF         	movff	printf@prec,??_printf
  6498  000D8A  C11C  F0E0         	movff	printf@prec+1,??_printf+1
  6499  000D8E  0100               	movlb	0	; () banked
  6500  000D90  90D8               	bcf	status,0,c
  6501  000D92  37DF               	rlcf	??_printf& (0+255),f,b
  6502  000D94  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  6503  000D96  0100               	movlb	0	; () banked
  6504  000D98  90D8               	bcf	status,0,c
  6505  000D9A  37DF               	rlcf	??_printf& (0+255),f,b
  6506  000D9C  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  6507  000D9E  0E93               	movlw	low _hexpowers
  6508  000DA0  0100               	movlb	0	; () banked
  6509  000DA2  25DF               	addwf	??_printf& (0+255),w,b
  6510  000DA4  6EF6               	movwf	tblptrl,c
  6511  000DA6  0EFE               	movlw	high _hexpowers
  6512  000DA8  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  6513  000DAA  6EF7               	movwf	tblptrh,c
  6514  000DAC                     	if	0	;There are less than 3 active tblptr bytes
  6515  000DAC                     	endif
  6516  000DAC  0009               	tblrd		*+
  6517  000DAE  CFF5 F084          	movff	tablat,___lldiv@divisor
  6518  000DB2  0009               	tblrd		*+
  6519  000DB4  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  6520  000DB8  0009               	tblrd		*+
  6521  000DBA  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  6522  000DBE  000A               	tblrd		*-
  6523  000DC0  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  6524  000DC4  EC09  F026         	call	___lldiv	;wreg free
  6525  000DC8  0100               	movlb	0	; () banked
  6526  000DCA  5180               	movf	?___lldiv& (0+255),w,b
  6527  000DCC  0B0F               	andlw	15
  6528  000DCE  0101               	movlb	1	; () banked
  6529  000DD0  6F05               	movwf	printf@idx& (0+255),b
  6530                           
  6531                           ; BSR set to: 1
  6532                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6533  000DD2  0101               	movlb	1	; () banked
  6534  000DD4  5105               	movf	printf@idx& (0+255),w,b
  6535  000DD6  0D01               	mullw	1
  6536  000DD8  0E52               	movlw	low STR_19
  6537  000DDA  24F3               	addwf	prodl,w,c
  6538  000DDC  6EF6               	movwf	tblptrl,c
  6539  000DDE  0EFF               	movlw	high STR_19
  6540  000DE0  20F4               	addwfc	prodh,w,c
  6541  000DE2  6EF7               	movwf	tblptrh,c
  6542  000DE4                     	if	0	;There are less than 3 active tblptr bytes
  6543  000DE4                     	endif
  6544  000DE4  0008               	tblrd		*
  6545  000DE6  CFF5 F11D          	movff	tablat,printf@c
  6546                           
  6547                           ; BSR set to: 1
  6548                           ;doprnt.c: 1523: }
  6549                           
  6550                           ;doprnt.c: 1508: }
  6551                           ;doprnt.c: 1510: break;
  6552  000DEA  D009               	goto	l5911
  6553  000DEC                     l5909:
  6554  000DEC  0101               	movlb	1	; () banked
  6555  000DEE  5119               	movf	printf@flag& (0+255),w,b
  6556  000DF0  0B80               	andlw	128
  6557                           
  6558                           ; Switch size 1, requested type "space"
  6559                           ; Number of cases is 2, Range of values is 0 to 128
  6560                           ; switch strategies available:
  6561                           ; Name         Instructions Cycles
  6562                           ; simple_byte            7     4 (average)
  6563                           ;	Chosen strategy is simple_byte
  6564  000DF2  0A00               	xorlw	0	; case 0
  6565  000DF4  B4D8               	btfsc	status,2,c
  6566  000DF6  D77D               	goto	l5901
  6567  000DF8  0A80               	xorlw	128	; case 128
  6568  000DFA  B4D8               	btfsc	status,2,c
  6569  000DFC  D7BC               	goto	l5903
  6570  000DFE                     l5911:
  6571                           
  6572                           ; BSR set to: 1
  6573                           ;doprnt.c: 1524: (putch(c) );
  6574  000DFE  0101               	movlb	1	; () banked
  6575  000E00  511D               	movf	printf@c& (0+255),w,b
  6576  000E02  ECF9  F02B         	call	_putch
  6577  000E06                     l5913:
  6578  000E06  0101               	movlb	1	; () banked
  6579  000E08  071B               	decf	printf@prec& (0+255),f,b
  6580  000E0A  A0D8               	btfss	status,0,c
  6581  000E0C  071C               	decf	(printf@prec+1)& (0+255),f,b
  6582  000E0E  0101               	movlb	1	; () banked
  6583  000E10  291B               	incf	printf@prec& (0+255),w,b
  6584  000E12  E1EC               	bnz	l5909
  6585  000E14  0101               	movlb	1	; () banked
  6586  000E16  291C               	incf	(printf@prec+1)& (0+255),w,b
  6587  000E18  A4D8               	btfss	status,2,c
  6588  000E1A  D7E8               	goto	l5909
  6589  000E1C                     l5915:
  6590  000E1C  C0D5  FFF6         	movff	printf@f,tblptrl
  6591  000E20  C0D6  FFF7         	movff	printf@f+1,tblptrh
  6592  000E24  0100               	movlb	0	; () banked
  6593  000E26  4BD5               	infsnz	printf@f& (0+255),f,b
  6594  000E28  2BD6               	incf	(printf@f+1)& (0+255),f,b
  6595  000E2A                     	if	0	;tblptru may be non-zero
  6596  000E2A                     	endif
  6597  000E2A                     	if	0	;tblptru may be non-zero
  6598  000E2A                     	endif
  6599  000E2A  0008               	tblrd		*
  6600  000E2C  CFF5 F11D          	movff	tablat,printf@c
  6601  000E30  0101               	movlb	1	; () banked
  6602  000E32  511D               	movf	printf@c& (0+255),w,b
  6603  000E34  B4D8               	btfsc	status,2,c
  6604  000E36  0012               	return	
  6605  000E38  EF11  F000         	goto	l5549
  6606  000E3C                     __end_of_printf:
  6607                           	opt stack 0
  6608                           tblptru	equ	0xFF8
  6609                           tblptrh	equ	0xFF7
  6610                           tblptrl	equ	0xFF6
  6611                           tablat	equ	0xFF5
  6612                           prodh	equ	0xFF4
  6613                           prodl	equ	0xFF3
  6614                           intcon	equ	0xFF2
  6615                           postinc0	equ	0xFEE
  6616                           wreg	equ	0xFE8
  6617                           postdec1	equ	0xFE5
  6618                           fsr1l	equ	0xFE1
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           fsr2h	equ	0xFDA
  6623                           fsr2l	equ	0xFD9
  6624                           status	equ	0xFD8
  6625                           
  6626 ;; *************** function _scale *****************
  6627 ;; Defined at:
  6628 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;  scl             1    wreg     char 
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;  scl             1   54[BANK0 ] char 
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  3   48[BANK0 ] char 
  6635 ;; Registers used:
  6636 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6642 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;Total ram usage:        7 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    8
  6649 ;; This function calls:
  6650 ;;		___awdiv
  6651 ;;		___awmod
  6652 ;;		___ftmul
  6653 ;;		___wmul
  6654 ;; This function is called by:
  6655 ;;		_printf
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           	psect	text9
  6660  001F7E                     __ptext9:
  6661                           	opt stack 0
  6662  001F7E                     _scale:
  6663                           	opt stack 20
  6664                           
  6665                           ; BSR set to: 1
  6666                           ;incstack = 0
  6667                           ;scale@scl stored from wreg
  6668  001F7E  0100               	movlb	0	; () banked
  6669  001F80  6FB6               	movwf	scale@scl& (0+255),b
  6670                           
  6671                           ;doprnt.c: 428: if(scl < 0) {
  6672  001F82  0100               	movlb	0	; () banked
  6673  001F84  AFB6               	btfss	scale@scl& (0+255),7,b
  6674  001F86  D12A               	goto	l5035
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;doprnt.c: 429: scl = -scl;
  6678  001F88  0100               	movlb	0	; () banked
  6679  001F8A  6DB6               	negf	scale@scl& (0+255),b
  6680                           
  6681                           ;doprnt.c: 430: if(scl>=110)
  6682  001F8C  0100               	movlb	0	; () banked
  6683  001F8E  51B6               	movf	scale@scl& (0+255),w,b
  6684  001F90  0A80               	xorlw	128
  6685  001F92  0F12               	addlw	-238
  6686  001F94  A0D8               	btfss	status,0,c
  6687  001F96  D0AC               	goto	l5025
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6691  001F98  0E00               	movlw	0
  6692  001F9A  0100               	movlb	0	; () banked
  6693  001F9C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6694  001F9E  0E03               	movlw	3
  6695  001FA0  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6696  001FA2  0E00               	movlw	0
  6697  001FA4  0100               	movlb	0	; () banked
  6698  001FA6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6699  001FA8  0E0A               	movlw	10
  6700  001FAA  6F88               	movwf	___awdiv@divisor& (0+255),b
  6701  001FAC  0E00               	movlw	0
  6702  001FAE  0100               	movlb	0	; () banked
  6703  001FB0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6704  001FB2  0E64               	movlw	100
  6705  001FB4  6F82               	movwf	___awmod@divisor& (0+255),b
  6706  001FB6  0100               	movlb	0	; () banked
  6707  001FB8  51B6               	movf	scale@scl& (0+255),w,b
  6708  001FBA  0100               	movlb	0	; () banked
  6709  001FBC  6F80               	movwf	___awmod@dividend& (0+255),b
  6710  001FBE  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6711  001FC0  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  6712  001FC2  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  6713  001FC4  ECBE  F026         	call	___awmod	;wreg free
  6714  001FC8  C080  F086         	movff	?___awmod,___awdiv@dividend
  6715  001FCC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6716  001FD0  ECAA  F025         	call	___awdiv	;wreg free
  6717  001FD4  0E09               	movlw	9
  6718  001FD6  0100               	movlb	0	; () banked
  6719  001FD8  2586               	addwf	?___awdiv& (0+255),w,b
  6720  001FDA  0100               	movlb	0	; () banked
  6721  001FDC  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6722  001FDE  0E00               	movlw	0
  6723  001FE0  0100               	movlb	0	; () banked
  6724  001FE2  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6725  001FE4  0100               	movlb	0	; () banked
  6726  001FE6  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6727  001FE8  EC87  F02B         	call	___wmul	;wreg free
  6728  001FEC  0E45               	movlw	low __npowers_
  6729  001FEE  0100               	movlb	0	; () banked
  6730  001FF0  258E               	addwf	?___wmul& (0+255),w,b
  6731  001FF2  6EF6               	movwf	tblptrl,c
  6732  001FF4  0EFE               	movlw	high __npowers_
  6733  001FF6  0100               	movlb	0	; () banked
  6734  001FF8  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6735  001FFA  6EF7               	movwf	tblptrh,c
  6736  001FFC                     	if	0	;There are less than 3 active tblptr bytes
  6737  001FFC                     	endif
  6738  001FFC  0009               	tblrd		*+
  6739  001FFE  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6740  002002  0009               	tblrd		*+
  6741  002004  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6742  002008  000A               	tblrd		*-
  6743  00200A  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6744  00200E  0E00               	movlw	0
  6745  002010  0100               	movlb	0	; () banked
  6746  002012  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6747  002014  0E64               	movlw	100
  6748  002016  6F88               	movwf	___awdiv@divisor& (0+255),b
  6749  002018  0100               	movlb	0	; () banked
  6750  00201A  51B6               	movf	scale@scl& (0+255),w,b
  6751  00201C  0100               	movlb	0	; () banked
  6752  00201E  6F86               	movwf	___awdiv@dividend& (0+255),b
  6753  002020  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6754  002022  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  6755  002024  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6756  002026  ECAA  F025         	call	___awdiv	;wreg free
  6757  00202A  0E12               	movlw	18
  6758  00202C  0100               	movlb	0	; () banked
  6759  00202E  2586               	addwf	?___awdiv& (0+255),w,b
  6760  002030  0100               	movlb	0	; () banked
  6761  002032  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6762  002034  0E00               	movlw	0
  6763  002036  0100               	movlb	0	; () banked
  6764  002038  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6765  00203A  0100               	movlb	0	; () banked
  6766  00203C  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6767  00203E  0E00               	movlw	0
  6768  002040  0100               	movlb	0	; () banked
  6769  002042  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6770  002044  0E03               	movlw	3
  6771  002046  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6772  002048  EC87  F02B         	call	___wmul	;wreg free
  6773  00204C  0E45               	movlw	low __npowers_
  6774  00204E  0100               	movlb	0	; () banked
  6775  002050  258E               	addwf	?___wmul& (0+255),w,b
  6776  002052  6EF6               	movwf	tblptrl,c
  6777  002054  0EFE               	movlw	high __npowers_
  6778  002056  0100               	movlb	0	; () banked
  6779  002058  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6780  00205A  6EF7               	movwf	tblptrh,c
  6781  00205C                     	if	0	;There are less than 3 active tblptr bytes
  6782  00205C                     	endif
  6783  00205C  0009               	tblrd		*+
  6784  00205E  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6785  002062  0009               	tblrd		*+
  6786  002064  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6787  002068  000A               	tblrd		*-
  6788  00206A  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6789  00206E  EC9A  F01C         	call	___ftmul	;wreg free
  6790  002072  C0A1  F0B3         	movff	?___ftmul,_scale$1350
  6791  002076  C0A2  F0B4         	movff	?___ftmul+1,_scale$1350+1
  6792  00207A  C0A3  F0B5         	movff	?___ftmul+2,_scale$1350+2
  6793                           
  6794                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6795  00207E  C0B3  F0A1         	movff	_scale$1350,___ftmul@f1
  6796  002082  C0B4  F0A2         	movff	_scale$1350+1,___ftmul@f1+1
  6797  002086  C0B5  F0A3         	movff	_scale$1350+2,___ftmul@f1+2
  6798  00208A  0E00               	movlw	0
  6799  00208C  0100               	movlb	0	; () banked
  6800  00208E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6801  002090  0E03               	movlw	3
  6802  002092  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6803  002094  0E00               	movlw	0
  6804  002096  0100               	movlb	0	; () banked
  6805  002098  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6806  00209A  0E0A               	movlw	10
  6807  00209C  6F82               	movwf	___awmod@divisor& (0+255),b
  6808  00209E  0100               	movlb	0	; () banked
  6809  0020A0  51B6               	movf	scale@scl& (0+255),w,b
  6810  0020A2  0100               	movlb	0	; () banked
  6811  0020A4  6F80               	movwf	___awmod@dividend& (0+255),b
  6812  0020A6  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6813  0020A8  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  6814  0020AA  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  6815  0020AC  ECBE  F026         	call	___awmod	;wreg free
  6816  0020B0  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6817  0020B4  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6818  0020B8  EC87  F02B         	call	___wmul	;wreg free
  6819  0020BC  0E45               	movlw	low __npowers_
  6820  0020BE  0100               	movlb	0	; () banked
  6821  0020C0  258E               	addwf	?___wmul& (0+255),w,b
  6822  0020C2  6EF6               	movwf	tblptrl,c
  6823  0020C4  0EFE               	movlw	high __npowers_
  6824  0020C6  0100               	movlb	0	; () banked
  6825  0020C8  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6826  0020CA  6EF7               	movwf	tblptrh,c
  6827  0020CC                     	if	0	;There are less than 3 active tblptr bytes
  6828  0020CC                     	endif
  6829  0020CC  0009               	tblrd		*+
  6830  0020CE  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6831  0020D2  0009               	tblrd		*+
  6832  0020D4  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6833  0020D8  000A               	tblrd		*-
  6834  0020DA  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6835  0020DE  EC9A  F01C         	call	___ftmul	;wreg free
  6836  0020E2  C0A1  F0B0         	movff	?___ftmul,?_scale
  6837  0020E6  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  6838  0020EA  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  6839  0020EE  0012               	return	
  6840  0020F0                     l5025:
  6841                           
  6842                           ;doprnt.c: 432: else if(scl > 10)
  6843  0020F0  0100               	movlb	0	; () banked
  6844  0020F2  51B6               	movf	scale@scl& (0+255),w,b
  6845  0020F4  0A80               	xorlw	128
  6846  0020F6  0F75               	addlw	-139
  6847  0020F8  A0D8               	btfss	status,0,c
  6848  0020FA  D05D               	goto	l5031
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6852  0020FC  0E00               	movlw	0
  6853  0020FE  0100               	movlb	0	; () banked
  6854  002100  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6855  002102  0E0A               	movlw	10
  6856  002104  6F88               	movwf	___awdiv@divisor& (0+255),b
  6857  002106  0100               	movlb	0	; () banked
  6858  002108  51B6               	movf	scale@scl& (0+255),w,b
  6859  00210A  0100               	movlb	0	; () banked
  6860  00210C  6F86               	movwf	___awdiv@dividend& (0+255),b
  6861  00210E  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6862  002110  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  6863  002112  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6864  002114  ECAA  F025         	call	___awdiv	;wreg free
  6865  002118  0E09               	movlw	9
  6866  00211A  0100               	movlb	0	; () banked
  6867  00211C  2586               	addwf	?___awdiv& (0+255),w,b
  6868  00211E  0100               	movlb	0	; () banked
  6869  002120  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6870  002122  0E00               	movlw	0
  6871  002124  0100               	movlb	0	; () banked
  6872  002126  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6873  002128  0100               	movlb	0	; () banked
  6874  00212A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6875  00212C  0E00               	movlw	0
  6876  00212E  0100               	movlb	0	; () banked
  6877  002130  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6878  002132  0E03               	movlw	3
  6879  002134  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6880  002136  EC87  F02B         	call	___wmul	;wreg free
  6881  00213A  0E45               	movlw	low __npowers_
  6882  00213C  0100               	movlb	0	; () banked
  6883  00213E  258E               	addwf	?___wmul& (0+255),w,b
  6884  002140  6EF6               	movwf	tblptrl,c
  6885  002142  0EFE               	movlw	high __npowers_
  6886  002144  0100               	movlb	0	; () banked
  6887  002146  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6888  002148  6EF7               	movwf	tblptrh,c
  6889  00214A                     	if	0	;There are less than 3 active tblptr bytes
  6890  00214A                     	endif
  6891  00214A  0009               	tblrd		*+
  6892  00214C  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6893  002150  0009               	tblrd		*+
  6894  002152  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6895  002156  000A               	tblrd		*-
  6896  002158  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6897  00215C  0E00               	movlw	0
  6898  00215E  0100               	movlb	0	; () banked
  6899  002160  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6900  002162  0E03               	movlw	3
  6901  002164  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6902  002166  0E00               	movlw	0
  6903  002168  0100               	movlb	0	; () banked
  6904  00216A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6905  00216C  0E0A               	movlw	10
  6906  00216E  6F82               	movwf	___awmod@divisor& (0+255),b
  6907  002170  0100               	movlb	0	; () banked
  6908  002172  51B6               	movf	scale@scl& (0+255),w,b
  6909  002174  0100               	movlb	0	; () banked
  6910  002176  6F80               	movwf	___awmod@dividend& (0+255),b
  6911  002178  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6912  00217A  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  6913  00217C  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  6914  00217E  ECBE  F026         	call	___awmod	;wreg free
  6915  002182  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6916  002186  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6917  00218A  EC87  F02B         	call	___wmul	;wreg free
  6918  00218E  0E45               	movlw	low __npowers_
  6919  002190  0100               	movlb	0	; () banked
  6920  002192  258E               	addwf	?___wmul& (0+255),w,b
  6921  002194  6EF6               	movwf	tblptrl,c
  6922  002196  0EFE               	movlw	high __npowers_
  6923  002198  0100               	movlb	0	; () banked
  6924  00219A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6925  00219C  6EF7               	movwf	tblptrh,c
  6926  00219E                     	if	0	;There are less than 3 active tblptr bytes
  6927  00219E                     	endif
  6928  00219E  0009               	tblrd		*+
  6929  0021A0  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6930  0021A4  0009               	tblrd		*+
  6931  0021A6  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6932  0021AA  000A               	tblrd		*-
  6933  0021AC  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6934  0021B0  EC9A  F01C         	call	___ftmul	;wreg free
  6935  0021B4  D796               	goto	L4
  6936  0021B6                     l5031:
  6937                           
  6938                           ;doprnt.c: 434: return _npowers_[scl];
  6939  0021B6  0100               	movlb	0	; () banked
  6940  0021B8  51B6               	movf	scale@scl& (0+255),w,b
  6941  0021BA  0D03               	mullw	3
  6942  0021BC  0E45               	movlw	low __npowers_
  6943  0021BE  24F3               	addwf	prodl,w,c
  6944  0021C0  6EF6               	movwf	tblptrl,c
  6945  0021C2  0EFE               	movlw	high __npowers_
  6946  0021C4  20F4               	addwfc	prodh,w,c
  6947  0021C6  6EF7               	movwf	tblptrh,c
  6948  0021C8                     	if	0	;There are less than 3 active tblptr bytes
  6949  0021C8                     	endif
  6950  0021C8  0009               	tblrd		*+
  6951  0021CA  CFF5 F0B0          	movff	tablat,?_scale
  6952  0021CE  0009               	tblrd		*+
  6953  0021D0  CFF5 F0B1          	movff	tablat,?_scale+1
  6954  0021D4  000A               	tblrd		*-
  6955  0021D6  CFF5 F0B2          	movff	tablat,?_scale+2
  6956                           
  6957                           ; BSR set to: 0
  6958  0021DA  0012               	return	
  6959  0021DC                     l5035:
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;doprnt.c: 435: }
  6963                           ;doprnt.c: 436: if(scl>=110)
  6964  0021DC  0100               	movlb	0	; () banked
  6965  0021DE  51B6               	movf	scale@scl& (0+255),w,b
  6966  0021E0  0A80               	xorlw	128
  6967  0021E2  0F12               	addlw	-238
  6968  0021E4  A0D8               	btfss	status,0,c
  6969  0021E6  D0AC               	goto	l5043
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6973  0021E8  0E00               	movlw	0
  6974  0021EA  0100               	movlb	0	; () banked
  6975  0021EC  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6976  0021EE  0E03               	movlw	3
  6977  0021F0  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6978  0021F2  0E00               	movlw	0
  6979  0021F4  0100               	movlb	0	; () banked
  6980  0021F6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6981  0021F8  0E0A               	movlw	10
  6982  0021FA  6F88               	movwf	___awdiv@divisor& (0+255),b
  6983  0021FC  0E00               	movlw	0
  6984  0021FE  0100               	movlb	0	; () banked
  6985  002200  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6986  002202  0E64               	movlw	100
  6987  002204  6F82               	movwf	___awmod@divisor& (0+255),b
  6988  002206  0100               	movlb	0	; () banked
  6989  002208  51B6               	movf	scale@scl& (0+255),w,b
  6990  00220A  0100               	movlb	0	; () banked
  6991  00220C  6F80               	movwf	___awmod@dividend& (0+255),b
  6992  00220E  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6993  002210  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  6994  002212  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  6995  002214  ECBE  F026         	call	___awmod	;wreg free
  6996  002218  C080  F086         	movff	?___awmod,___awdiv@dividend
  6997  00221C  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6998  002220  ECAA  F025         	call	___awdiv	;wreg free
  6999  002224  0E09               	movlw	9
  7000  002226  0100               	movlb	0	; () banked
  7001  002228  2586               	addwf	?___awdiv& (0+255),w,b
  7002  00222A  0100               	movlb	0	; () banked
  7003  00222C  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7004  00222E  0E00               	movlw	0
  7005  002230  0100               	movlb	0	; () banked
  7006  002232  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7007  002234  0100               	movlb	0	; () banked
  7008  002236  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7009  002238  EC87  F02B         	call	___wmul	;wreg free
  7010  00223C  0E6C               	movlw	low __powers_
  7011  00223E  0100               	movlb	0	; () banked
  7012  002240  258E               	addwf	?___wmul& (0+255),w,b
  7013  002242  6EF6               	movwf	tblptrl,c
  7014  002244  0EFE               	movlw	high __powers_
  7015  002246  0100               	movlb	0	; () banked
  7016  002248  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7017  00224A  6EF7               	movwf	tblptrh,c
  7018  00224C                     	if	0	;There are less than 3 active tblptr bytes
  7019  00224C                     	endif
  7020  00224C  0009               	tblrd		*+
  7021  00224E  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7022  002252  0009               	tblrd		*+
  7023  002254  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7024  002258  000A               	tblrd		*-
  7025  00225A  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7026  00225E  0E00               	movlw	0
  7027  002260  0100               	movlb	0	; () banked
  7028  002262  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7029  002264  0E64               	movlw	100
  7030  002266  6F88               	movwf	___awdiv@divisor& (0+255),b
  7031  002268  0100               	movlb	0	; () banked
  7032  00226A  51B6               	movf	scale@scl& (0+255),w,b
  7033  00226C  0100               	movlb	0	; () banked
  7034  00226E  6F86               	movwf	___awdiv@dividend& (0+255),b
  7035  002270  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7036  002272  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7037  002274  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7038  002276  ECAA  F025         	call	___awdiv	;wreg free
  7039  00227A  0E12               	movlw	18
  7040  00227C  0100               	movlb	0	; () banked
  7041  00227E  2586               	addwf	?___awdiv& (0+255),w,b
  7042  002280  0100               	movlb	0	; () banked
  7043  002282  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7044  002284  0E00               	movlw	0
  7045  002286  0100               	movlb	0	; () banked
  7046  002288  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7047  00228A  0100               	movlb	0	; () banked
  7048  00228C  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7049  00228E  0E00               	movlw	0
  7050  002290  0100               	movlb	0	; () banked
  7051  002292  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7052  002294  0E03               	movlw	3
  7053  002296  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7054  002298  EC87  F02B         	call	___wmul	;wreg free
  7055  00229C  0E6C               	movlw	low __powers_
  7056  00229E  0100               	movlb	0	; () banked
  7057  0022A0  258E               	addwf	?___wmul& (0+255),w,b
  7058  0022A2  6EF6               	movwf	tblptrl,c
  7059  0022A4  0EFE               	movlw	high __powers_
  7060  0022A6  0100               	movlb	0	; () banked
  7061  0022A8  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7062  0022AA  6EF7               	movwf	tblptrh,c
  7063  0022AC                     	if	0	;There are less than 3 active tblptr bytes
  7064  0022AC                     	endif
  7065  0022AC  0009               	tblrd		*+
  7066  0022AE  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7067  0022B2  0009               	tblrd		*+
  7068  0022B4  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7069  0022B8  000A               	tblrd		*-
  7070  0022BA  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7071  0022BE  EC9A  F01C         	call	___ftmul	;wreg free
  7072  0022C2  C0A1  F0B3         	movff	?___ftmul,_scale$1350
  7073  0022C6  C0A2  F0B4         	movff	?___ftmul+1,_scale$1350+1
  7074  0022CA  C0A3  F0B5         	movff	?___ftmul+2,_scale$1350+2
  7075                           
  7076                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7077  0022CE  C0B3  F0A1         	movff	_scale$1350,___ftmul@f1
  7078  0022D2  C0B4  F0A2         	movff	_scale$1350+1,___ftmul@f1+1
  7079  0022D6  C0B5  F0A3         	movff	_scale$1350+2,___ftmul@f1+2
  7080  0022DA  0E00               	movlw	0
  7081  0022DC  0100               	movlb	0	; () banked
  7082  0022DE  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7083  0022E0  0E03               	movlw	3
  7084  0022E2  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7085  0022E4  0E00               	movlw	0
  7086  0022E6  0100               	movlb	0	; () banked
  7087  0022E8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7088  0022EA  0E0A               	movlw	10
  7089  0022EC  6F82               	movwf	___awmod@divisor& (0+255),b
  7090  0022EE  0100               	movlb	0	; () banked
  7091  0022F0  51B6               	movf	scale@scl& (0+255),w,b
  7092  0022F2  0100               	movlb	0	; () banked
  7093  0022F4  6F80               	movwf	___awmod@dividend& (0+255),b
  7094  0022F6  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7095  0022F8  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7096  0022FA  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7097  0022FC  ECBE  F026         	call	___awmod	;wreg free
  7098  002300  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7099  002304  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7100  002308  EC87  F02B         	call	___wmul	;wreg free
  7101  00230C  0E6C               	movlw	low __powers_
  7102  00230E  0100               	movlb	0	; () banked
  7103  002310  258E               	addwf	?___wmul& (0+255),w,b
  7104  002312  6EF6               	movwf	tblptrl,c
  7105  002314  0EFE               	movlw	high __powers_
  7106  002316  0100               	movlb	0	; () banked
  7107  002318  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7108  00231A  6EF7               	movwf	tblptrh,c
  7109  00231C                     	if	0	;There are less than 3 active tblptr bytes
  7110  00231C                     	endif
  7111  00231C  0009               	tblrd		*+
  7112  00231E  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7113  002322  0009               	tblrd		*+
  7114  002324  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7115  002328  000A               	tblrd		*-
  7116  00232A  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7117  00232E  EC9A  F01C         	call	___ftmul	;wreg free
  7118  002332  C0A1  F0B0         	movff	?___ftmul,?_scale
  7119  002336  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  7120  00233A  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  7121  00233E  0012               	return	
  7122  002340                     l5043:
  7123                           
  7124                           ;doprnt.c: 438: else if(scl > 10)
  7125  002340  0100               	movlb	0	; () banked
  7126  002342  51B6               	movf	scale@scl& (0+255),w,b
  7127  002344  0A80               	xorlw	128
  7128  002346  0F75               	addlw	-139
  7129  002348  A0D8               	btfss	status,0,c
  7130  00234A  D05D               	goto	l5049
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7134  00234C  0E00               	movlw	0
  7135  00234E  0100               	movlb	0	; () banked
  7136  002350  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7137  002352  0E0A               	movlw	10
  7138  002354  6F88               	movwf	___awdiv@divisor& (0+255),b
  7139  002356  0100               	movlb	0	; () banked
  7140  002358  51B6               	movf	scale@scl& (0+255),w,b
  7141  00235A  0100               	movlb	0	; () banked
  7142  00235C  6F86               	movwf	___awdiv@dividend& (0+255),b
  7143  00235E  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7144  002360  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  7145  002362  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7146  002364  ECAA  F025         	call	___awdiv	;wreg free
  7147  002368  0E09               	movlw	9
  7148  00236A  0100               	movlb	0	; () banked
  7149  00236C  2586               	addwf	?___awdiv& (0+255),w,b
  7150  00236E  0100               	movlb	0	; () banked
  7151  002370  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7152  002372  0E00               	movlw	0
  7153  002374  0100               	movlb	0	; () banked
  7154  002376  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7155  002378  0100               	movlb	0	; () banked
  7156  00237A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7157  00237C  0E00               	movlw	0
  7158  00237E  0100               	movlb	0	; () banked
  7159  002380  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7160  002382  0E03               	movlw	3
  7161  002384  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7162  002386  EC87  F02B         	call	___wmul	;wreg free
  7163  00238A  0E6C               	movlw	low __powers_
  7164  00238C  0100               	movlb	0	; () banked
  7165  00238E  258E               	addwf	?___wmul& (0+255),w,b
  7166  002390  6EF6               	movwf	tblptrl,c
  7167  002392  0EFE               	movlw	high __powers_
  7168  002394  0100               	movlb	0	; () banked
  7169  002396  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7170  002398  6EF7               	movwf	tblptrh,c
  7171  00239A                     	if	0	;There are less than 3 active tblptr bytes
  7172  00239A                     	endif
  7173  00239A  0009               	tblrd		*+
  7174  00239C  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7175  0023A0  0009               	tblrd		*+
  7176  0023A2  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7177  0023A6  000A               	tblrd		*-
  7178  0023A8  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7179  0023AC  0E00               	movlw	0
  7180  0023AE  0100               	movlb	0	; () banked
  7181  0023B0  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7182  0023B2  0E03               	movlw	3
  7183  0023B4  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7184  0023B6  0E00               	movlw	0
  7185  0023B8  0100               	movlb	0	; () banked
  7186  0023BA  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7187  0023BC  0E0A               	movlw	10
  7188  0023BE  6F82               	movwf	___awmod@divisor& (0+255),b
  7189  0023C0  0100               	movlb	0	; () banked
  7190  0023C2  51B6               	movf	scale@scl& (0+255),w,b
  7191  0023C4  0100               	movlb	0	; () banked
  7192  0023C6  6F80               	movwf	___awmod@dividend& (0+255),b
  7193  0023C8  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7194  0023CA  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  7195  0023CC  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  7196  0023CE  ECBE  F026         	call	___awmod	;wreg free
  7197  0023D2  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7198  0023D6  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7199  0023DA  EC87  F02B         	call	___wmul	;wreg free
  7200  0023DE  0E6C               	movlw	low __powers_
  7201  0023E0  0100               	movlb	0	; () banked
  7202  0023E2  258E               	addwf	?___wmul& (0+255),w,b
  7203  0023E4  6EF6               	movwf	tblptrl,c
  7204  0023E6  0EFE               	movlw	high __powers_
  7205  0023E8  0100               	movlb	0	; () banked
  7206  0023EA  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7207  0023EC  6EF7               	movwf	tblptrh,c
  7208  0023EE                     	if	0	;There are less than 3 active tblptr bytes
  7209  0023EE                     	endif
  7210  0023EE  0009               	tblrd		*+
  7211  0023F0  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7212  0023F4  0009               	tblrd		*+
  7213  0023F6  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7214  0023FA  000A               	tblrd		*-
  7215  0023FC  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7216  002400  EC9A  F01C         	call	___ftmul	;wreg free
  7217  002404  D796               	goto	L5
  7218  002406                     l5049:
  7219                           
  7220                           ;doprnt.c: 440: return _powers_[scl];
  7221  002406  0100               	movlb	0	; () banked
  7222  002408  51B6               	movf	scale@scl& (0+255),w,b
  7223  00240A  0D03               	mullw	3
  7224  00240C  0E6C               	movlw	low __powers_
  7225  00240E  24F3               	addwf	prodl,w,c
  7226  002410  6EF6               	movwf	tblptrl,c
  7227  002412  0EFE               	movlw	high __powers_
  7228  002414  20F4               	addwfc	prodh,w,c
  7229  002416  6EF7               	movwf	tblptrh,c
  7230  002418                     	if	0	;There are less than 3 active tblptr bytes
  7231  002418                     	endif
  7232  002418  0009               	tblrd		*+
  7233  00241A  CFF5 F0B0          	movff	tablat,?_scale
  7234  00241E  0009               	tblrd		*+
  7235  002420  CFF5 F0B1          	movff	tablat,?_scale+1
  7236  002424  000A               	tblrd		*-
  7237  002426  CFF5 F0B2          	movff	tablat,?_scale+2
  7238  00242A  0012               	return	
  7239  00242C                     __end_of_scale:
  7240                           	opt stack 0
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           prodh	equ	0xFF4
  7246                           prodl	equ	0xFF3
  7247                           intcon	equ	0xFF2
  7248                           postinc0	equ	0xFEE
  7249                           wreg	equ	0xFE8
  7250                           postdec1	equ	0xFE5
  7251                           fsr1l	equ	0xFE1
  7252                           indf2	equ	0xFDF
  7253                           postinc2	equ	0xFDE
  7254                           postdec2	equ	0xFDD
  7255                           fsr2h	equ	0xFDA
  7256                           fsr2l	equ	0xFD9
  7257                           status	equ	0xFD8
  7258                           
  7259 ;; *************** function _putch *****************
  7260 ;; Defined at:
  7261 ;;		line 35 in file "lcd.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;  data            1    wreg     unsigned char 
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;  data            1    4[BANK0 ] unsigned char 
  7266 ;; Return value:  Size  Location     Type
  7267 ;;                  1    wreg      void 
  7268 ;; Registers used:
  7269 ;;		wreg, status,2, status,0, cstack
  7270 ;; Tracked objects:
  7271 ;;		On entry : 0/0
  7272 ;;		On exit  : 0/0
  7273 ;;		Unchanged: 0/0
  7274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7278 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7279 ;;Total ram usage:        1 bytes
  7280 ;; Hardware stack levels used:    1
  7281 ;; Hardware stack levels required when called:    9
  7282 ;; This function calls:
  7283 ;;		_lcdNewline
  7284 ;;		_lcdNibble
  7285 ;; This function is called by:
  7286 ;;		_printf
  7287 ;; This function uses a non-reentrant model
  7288 ;;
  7289                           
  7290                           	psect	text10
  7291  0057F2                     __ptext10:
  7292                           	opt stack 0
  7293  0057F2                     _putch:
  7294                           	opt stack 19
  7295                           
  7296                           ;incstack = 0
  7297                           ;putch@data stored from wreg
  7298  0057F2  0100               	movlb	0	; () banked
  7299  0057F4  6F84               	movwf	putch@data& (0+255),b
  7300                           
  7301                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7302  0057F6  0E0A               	movlw	10
  7303  0057F8  0100               	movlb	0	; () banked
  7304  0057FA  1984               	xorwf	putch@data& (0+255),w,b
  7305  0057FC  A4D8               	btfss	status,2,c
  7306  0057FE  D003               	goto	l205
  7307                           
  7308                           ; BSR set to: 0
  7309  005800  EC6E  F02C         	call	_lcdNewline	;wreg free
  7310  005804  0012               	return	
  7311  005806                     l205:
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;lcd.c: 37: else
  7315                           ;lcd.c: 38: {
  7316                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7317  005806  848C               	bsf	3980,2,c	;volatile
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7321  005808  0E74               	movlw	116
  7322  00580A                     u8507:
  7323  00580A  2EE8               	decfsz	wreg,f,c
  7324  00580C  D7FE               	bra	u8507
  7325  00580E  D000               	nop2	
  7326                           
  7327                           ;lcd.c: 41: lcdNibble(data);
  7328  005810  0100               	movlb	0	; () banked
  7329  005812  5184               	movf	putch@data& (0+255),w,b
  7330  005814  ECFB  F028         	call	_lcdNibble
  7331  005818  0012               	return	
  7332  00581A                     __end_of_putch:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           intcon	equ	0xFF2
  7341                           postinc0	equ	0xFEE
  7342                           wreg	equ	0xFE8
  7343                           postdec1	equ	0xFE5
  7344                           fsr1l	equ	0xFE1
  7345                           indf2	equ	0xFDF
  7346                           postinc2	equ	0xFDE
  7347                           postdec2	equ	0xFDD
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352 ;; *************** function _lcdNewline *****************
  7353 ;; Defined at:
  7354 ;;		line 78 in file "lcd.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;		None
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;		None
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  1    wreg      void 
  7361 ;; Registers used:
  7362 ;;		wreg, status,2, status,0, cstack
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;Total ram usage:        0 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:    8
  7375 ;; This function calls:
  7376 ;;		_lcdInst
  7377 ;; This function is called by:
  7378 ;;		_putch
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           	psect	text11
  7383  0058DC                     __ptext11:
  7384                           	opt stack 0
  7385  0058DC                     _lcdNewline:
  7386                           	opt stack 19
  7387                           
  7388                           ;lcd.c: 79: lcdInst(0b11000000);
  7389                           
  7390                           ;incstack = 0
  7391  0058DC  0EC0               	movlw	192
  7392  0058DE  ECE4  F02B         	call	_lcdInst
  7393  0058E2  0012               	return		;funcret
  7394  0058E4                     __end_of_lcdNewline:
  7395                           	opt stack 0
  7396                           tblptru	equ	0xFF8
  7397                           tblptrh	equ	0xFF7
  7398                           tblptrl	equ	0xFF6
  7399                           tablat	equ	0xFF5
  7400                           prodh	equ	0xFF4
  7401                           prodl	equ	0xFF3
  7402                           intcon	equ	0xFF2
  7403                           postinc0	equ	0xFEE
  7404                           wreg	equ	0xFE8
  7405                           postdec1	equ	0xFE5
  7406                           fsr1l	equ	0xFE1
  7407                           indf2	equ	0xFDF
  7408                           postinc2	equ	0xFDE
  7409                           postdec2	equ	0xFDD
  7410                           fsr2h	equ	0xFDA
  7411                           fsr2l	equ	0xFD9
  7412                           status	equ	0xFD8
  7413                           
  7414 ;; *************** function _isdigit *****************
  7415 ;; Defined at:
  7416 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;  c               1    wreg     unsigned char 
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;  c               1    2[BANK0 ] unsigned char 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;		None               void
  7423 ;; Registers used:
  7424 ;;		wreg, status,2, status,0
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;Total ram usage:        3 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    6
  7437 ;; This function calls:
  7438 ;;		Nothing
  7439 ;; This function is called by:
  7440 ;;		_printf
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           	psect	text12
  7445  00579E                     __ptext12:
  7446                           	opt stack 0
  7447  00579E                     _isdigit:
  7448                           	opt stack 22
  7449                           
  7450                           ;incstack = 0
  7451                           ;isdigit@c stored from wreg
  7452  00579E  0100               	movlb	0	; () banked
  7453  0057A0  6F82               	movwf	isdigit@c& (0+255),b
  7454  0057A2  0E00               	movlw	0
  7455  0057A4  0100               	movlb	0	; () banked
  7456  0057A6  6F81               	movwf	_isdigit$976& (0+255),b
  7457                           
  7458                           ; BSR set to: 0
  7459  0057A8  0E3A               	movlw	58
  7460  0057AA  0100               	movlb	0	; () banked
  7461  0057AC  6182               	cpfslt	isdigit@c& (0+255),b
  7462  0057AE  D007               	goto	l5061
  7463                           
  7464                           ; BSR set to: 0
  7465  0057B0  0E2F               	movlw	47
  7466  0057B2  0100               	movlb	0	; () banked
  7467  0057B4  6582               	cpfsgt	isdigit@c& (0+255),b
  7468  0057B6  D003               	goto	l5061
  7469                           
  7470                           ; BSR set to: 0
  7471  0057B8  0E01               	movlw	1
  7472  0057BA  0100               	movlb	0	; () banked
  7473  0057BC  6F81               	movwf	_isdigit$976& (0+255),b
  7474  0057BE                     l5061:
  7475                           
  7476                           ; BSR set to: 0
  7477  0057BE  C081  F080         	movff	_isdigit$976,??_isdigit
  7478  0057C2  0100               	movlb	0	; () banked
  7479  0057C4  3180               	rrcf	??_isdigit& (0+255),w,b
  7480  0057C6  0012               	return	
  7481  0057C8                     __end_of_isdigit:
  7482                           	opt stack 0
  7483                           tblptru	equ	0xFF8
  7484                           tblptrh	equ	0xFF7
  7485                           tblptrl	equ	0xFF6
  7486                           tablat	equ	0xFF5
  7487                           prodh	equ	0xFF4
  7488                           prodl	equ	0xFF3
  7489                           intcon	equ	0xFF2
  7490                           postinc0	equ	0xFEE
  7491                           wreg	equ	0xFE8
  7492                           postdec1	equ	0xFE5
  7493                           fsr1l	equ	0xFE1
  7494                           indf2	equ	0xFDF
  7495                           postinc2	equ	0xFDE
  7496                           postdec2	equ	0xFDD
  7497                           fsr2h	equ	0xFDA
  7498                           fsr2l	equ	0xFD9
  7499                           status	equ	0xFD8
  7500                           
  7501 ;; *************** function _fround *****************
  7502 ;; Defined at:
  7503 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;  prec            1    wreg     unsigned char 
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;  prec            1   57[BANK0 ] unsigned char 
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  3   48[BANK0 ] unsigned char 
  7510 ;; Registers used:
  7511 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7517 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7521 ;;Total ram usage:       10 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    8
  7524 ;; This function calls:
  7525 ;;		___awdiv
  7526 ;;		___awmod
  7527 ;;		___ftmul
  7528 ;;		___wmul
  7529 ;; This function is called by:
  7530 ;;		_printf
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           	psect	text13
  7535  002BA2                     __ptext13:
  7536                           	opt stack 0
  7537  002BA2                     _fround:
  7538                           	opt stack 20
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;incstack = 0
  7542                           ;fround@prec stored from wreg
  7543  002BA2  0100               	movlb	0	; () banked
  7544  002BA4  6FB9               	movwf	fround@prec& (0+255),b
  7545                           
  7546                           ;doprnt.c: 413: if(prec>=110)
  7547  002BA6  0E6D               	movlw	109
  7548  002BA8  0100               	movlb	0	; () banked
  7549  002BAA  65B9               	cpfsgt	fround@prec& (0+255),b
  7550  002BAC  D0BA               	goto	l5003
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7554  002BAE  0E00               	movlw	0
  7555  002BB0  0100               	movlb	0	; () banked
  7556  002BB2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7557  002BB4  0E03               	movlw	3
  7558  002BB6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7559  002BB8  0E00               	movlw	0
  7560  002BBA  0100               	movlb	0	; () banked
  7561  002BBC  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7562  002BBE  0E0A               	movlw	10
  7563  002BC0  6F88               	movwf	___awdiv@divisor& (0+255),b
  7564  002BC2  0E00               	movlw	0
  7565  002BC4  0100               	movlb	0	; () banked
  7566  002BC6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7567  002BC8  0E64               	movlw	100
  7568  002BCA  6F82               	movwf	___awmod@divisor& (0+255),b
  7569  002BCC  C0B9  F080         	movff	fround@prec,___awmod@dividend
  7570  002BD0  0100               	movlb	0	; () banked
  7571  002BD2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7572  002BD4  ECBE  F026         	call	___awmod	;wreg free
  7573  002BD8  C080  F086         	movff	?___awmod,___awdiv@dividend
  7574  002BDC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7575  002BE0  ECAA  F025         	call	___awdiv	;wreg free
  7576  002BE4  0E09               	movlw	9
  7577  002BE6  0100               	movlb	0	; () banked
  7578  002BE8  2586               	addwf	?___awdiv& (0+255),w,b
  7579  002BEA  0100               	movlb	0	; () banked
  7580  002BEC  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7581  002BEE  0E00               	movlw	0
  7582  002BF0  0100               	movlb	0	; () banked
  7583  002BF2  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7584  002BF4  0100               	movlb	0	; () banked
  7585  002BF6  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7586  002BF8  EC87  F02B         	call	___wmul	;wreg free
  7587  002BFC  0E45               	movlw	low __npowers_
  7588  002BFE  0100               	movlb	0	; () banked
  7589  002C00  258E               	addwf	?___wmul& (0+255),w,b
  7590  002C02  6EF6               	movwf	tblptrl,c
  7591  002C04  0EFE               	movlw	high __npowers_
  7592  002C06  0100               	movlb	0	; () banked
  7593  002C08  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7594  002C0A  6EF7               	movwf	tblptrh,c
  7595  002C0C                     	if	0	;There are less than 3 active tblptr bytes
  7596  002C0C                     	endif
  7597  002C0C  0009               	tblrd		*+
  7598  002C0E  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7599  002C12  0009               	tblrd		*+
  7600  002C14  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7601  002C18  000A               	tblrd		*-
  7602  002C1A  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7603  002C1E  0E00               	movlw	0
  7604  002C20  0100               	movlb	0	; () banked
  7605  002C22  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7606  002C24  0E64               	movlw	100
  7607  002C26  6F88               	movwf	___awdiv@divisor& (0+255),b
  7608  002C28  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  7609  002C2C  0100               	movlb	0	; () banked
  7610  002C2E  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7611  002C30  ECAA  F025         	call	___awdiv	;wreg free
  7612  002C34  0E12               	movlw	18
  7613  002C36  0100               	movlb	0	; () banked
  7614  002C38  2586               	addwf	?___awdiv& (0+255),w,b
  7615  002C3A  0100               	movlb	0	; () banked
  7616  002C3C  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7617  002C3E  0E00               	movlw	0
  7618  002C40  0100               	movlb	0	; () banked
  7619  002C42  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7620  002C44  0100               	movlb	0	; () banked
  7621  002C46  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7622  002C48  0E00               	movlw	0
  7623  002C4A  0100               	movlb	0	; () banked
  7624  002C4C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7625  002C4E  0E03               	movlw	3
  7626  002C50  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7627  002C52  EC87  F02B         	call	___wmul	;wreg free
  7628  002C56  0E45               	movlw	low __npowers_
  7629  002C58  0100               	movlb	0	; () banked
  7630  002C5A  258E               	addwf	?___wmul& (0+255),w,b
  7631  002C5C  6EF6               	movwf	tblptrl,c
  7632  002C5E  0EFE               	movlw	high __npowers_
  7633  002C60  0100               	movlb	0	; () banked
  7634  002C62  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7635  002C64  6EF7               	movwf	tblptrh,c
  7636  002C66                     	if	0	;There are less than 3 active tblptr bytes
  7637  002C66                     	endif
  7638  002C66  0009               	tblrd		*+
  7639  002C68  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7640  002C6C  0009               	tblrd		*+
  7641  002C6E  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7642  002C72  000A               	tblrd		*-
  7643  002C74  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7644  002C78  EC9A  F01C         	call	___ftmul	;wreg free
  7645  002C7C  C0A1  F0B6         	movff	?___ftmul,_fround$1348
  7646  002C80  C0A2  F0B7         	movff	?___ftmul+1,_fround$1348+1
  7647  002C84  C0A3  F0B8         	movff	?___ftmul+2,_fround$1348+2
  7648                           
  7649                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7650  002C88  0E00               	movlw	0
  7651  002C8A  0100               	movlb	0	; () banked
  7652  002C8C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7653  002C8E  0E03               	movlw	3
  7654  002C90  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7655  002C92  0E00               	movlw	0
  7656  002C94  0100               	movlb	0	; () banked
  7657  002C96  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7658  002C98  0E0A               	movlw	10
  7659  002C9A  6F82               	movwf	___awmod@divisor& (0+255),b
  7660  002C9C  C0B9  F080         	movff	fround@prec,___awmod@dividend
  7661  002CA0  0100               	movlb	0	; () banked
  7662  002CA2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7663  002CA4  ECBE  F026         	call	___awmod	;wreg free
  7664  002CA8  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7665  002CAC  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7666  002CB0  EC87  F02B         	call	___wmul	;wreg free
  7667  002CB4  0E45               	movlw	low __npowers_
  7668  002CB6  0100               	movlb	0	; () banked
  7669  002CB8  258E               	addwf	?___wmul& (0+255),w,b
  7670  002CBA  6EF6               	movwf	tblptrl,c
  7671  002CBC  0EFE               	movlw	high __npowers_
  7672  002CBE  0100               	movlb	0	; () banked
  7673  002CC0  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7674  002CC2  6EF7               	movwf	tblptrh,c
  7675  002CC4                     	if	0	;There are less than 3 active tblptr bytes
  7676  002CC4                     	endif
  7677  002CC4  0009               	tblrd		*+
  7678  002CC6  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7679  002CCA  0009               	tblrd		*+
  7680  002CCC  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7681  002CD0  000A               	tblrd		*-
  7682  002CD2  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7683  002CD6  C0B6  F0A1         	movff	_fround$1348,___ftmul@f1
  7684  002CDA  C0B7  F0A2         	movff	_fround$1348+1,___ftmul@f1+1
  7685  002CDE  C0B8  F0A3         	movff	_fround$1348+2,___ftmul@f1+2
  7686  002CE2  EC9A  F01C         	call	___ftmul	;wreg free
  7687  002CE6  C0A1  F0B3         	movff	?___ftmul,_fround$1349
  7688  002CEA  C0A2  F0B4         	movff	?___ftmul+1,_fround$1349+1
  7689  002CEE  C0A3  F0B5         	movff	?___ftmul+2,_fround$1349+2
  7690                           
  7691                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7692  002CF2  C0B3  F0A1         	movff	_fround$1349,___ftmul@f1
  7693  002CF6  C0B4  F0A2         	movff	_fround$1349+1,___ftmul@f1+1
  7694  002CFA  C0B5  F0A3         	movff	_fround$1349+2,___ftmul@f1+2
  7695  002CFE  0E00               	movlw	0
  7696  002D00  0100               	movlb	0	; () banked
  7697  002D02  6FA4               	movwf	___ftmul@f2& (0+255),b
  7698  002D04  0E00               	movlw	0
  7699  002D06  0100               	movlb	0	; () banked
  7700  002D08  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  7701  002D0A  0E3F               	movlw	63
  7702  002D0C  0100               	movlb	0	; () banked
  7703  002D0E  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  7704  002D10  EC9A  F01C         	call	___ftmul	;wreg free
  7705  002D14  C0A1  F0B0         	movff	?___ftmul,?_fround
  7706  002D18  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  7707  002D1C  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  7708  002D20  0012               	return	
  7709  002D22                     l5003:
  7710                           
  7711                           ;doprnt.c: 415: else if(prec > 10)
  7712  002D22  0E0A               	movlw	10
  7713  002D24  0100               	movlb	0	; () banked
  7714  002D26  65B9               	cpfsgt	fround@prec& (0+255),b
  7715  002D28  D06E               	goto	l5011
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7719  002D2A  0E00               	movlw	0
  7720  002D2C  0100               	movlb	0	; () banked
  7721  002D2E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7722  002D30  0E03               	movlw	3
  7723  002D32  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7724  002D34  0E00               	movlw	0
  7725  002D36  0100               	movlb	0	; () banked
  7726  002D38  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7727  002D3A  0E0A               	movlw	10
  7728  002D3C  6F82               	movwf	___awmod@divisor& (0+255),b
  7729  002D3E  C0B9  F080         	movff	fround@prec,___awmod@dividend
  7730  002D42  0100               	movlb	0	; () banked
  7731  002D44  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  7732  002D46  ECBE  F026         	call	___awmod	;wreg free
  7733  002D4A  C080  F08E         	movff	?___awmod,___wmul@multiplier
  7734  002D4E  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  7735  002D52  EC87  F02B         	call	___wmul	;wreg free
  7736  002D56  0E45               	movlw	low __npowers_
  7737  002D58  0100               	movlb	0	; () banked
  7738  002D5A  258E               	addwf	?___wmul& (0+255),w,b
  7739  002D5C  6EF6               	movwf	tblptrl,c
  7740  002D5E  0EFE               	movlw	high __npowers_
  7741  002D60  0100               	movlb	0	; () banked
  7742  002D62  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7743  002D64  6EF7               	movwf	tblptrh,c
  7744  002D66                     	if	0	;There are less than 3 active tblptr bytes
  7745  002D66                     	endif
  7746  002D66  0009               	tblrd		*+
  7747  002D68  CFF5 F0A4          	movff	tablat,___ftmul@f2
  7748  002D6C  0009               	tblrd		*+
  7749  002D6E  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  7750  002D72  000A               	tblrd		*-
  7751  002D74  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  7752  002D78  0E00               	movlw	0
  7753  002D7A  0100               	movlb	0	; () banked
  7754  002D7C  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7755  002D7E  0E0A               	movlw	10
  7756  002D80  6F88               	movwf	___awdiv@divisor& (0+255),b
  7757  002D82  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  7758  002D86  0100               	movlb	0	; () banked
  7759  002D88  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  7760  002D8A  ECAA  F025         	call	___awdiv	;wreg free
  7761  002D8E  0E09               	movlw	9
  7762  002D90  0100               	movlb	0	; () banked
  7763  002D92  2586               	addwf	?___awdiv& (0+255),w,b
  7764  002D94  0100               	movlb	0	; () banked
  7765  002D96  6F8E               	movwf	___wmul@multiplier& (0+255),b
  7766  002D98  0E00               	movlw	0
  7767  002D9A  0100               	movlb	0	; () banked
  7768  002D9C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  7769  002D9E  0100               	movlb	0	; () banked
  7770  002DA0  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7771  002DA2  0E00               	movlw	0
  7772  002DA4  0100               	movlb	0	; () banked
  7773  002DA6  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7774  002DA8  0E03               	movlw	3
  7775  002DAA  6F90               	movwf	___wmul@multiplicand& (0+255),b
  7776  002DAC  EC87  F02B         	call	___wmul	;wreg free
  7777  002DB0  0E45               	movlw	low __npowers_
  7778  002DB2  0100               	movlb	0	; () banked
  7779  002DB4  258E               	addwf	?___wmul& (0+255),w,b
  7780  002DB6  6EF6               	movwf	tblptrl,c
  7781  002DB8  0EFE               	movlw	high __npowers_
  7782  002DBA  0100               	movlb	0	; () banked
  7783  002DBC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  7784  002DBE  6EF7               	movwf	tblptrh,c
  7785  002DC0                     	if	0	;There are less than 3 active tblptr bytes
  7786  002DC0                     	endif
  7787  002DC0  0009               	tblrd		*+
  7788  002DC2  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7789  002DC6  0009               	tblrd		*+
  7790  002DC8  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7791  002DCC  000A               	tblrd		*-
  7792  002DCE  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7793  002DD2  EC9A  F01C         	call	___ftmul	;wreg free
  7794  002DD6  C0A1  F0B6         	movff	?___ftmul,_fround$1348
  7795  002DDA  C0A2  F0B7         	movff	?___ftmul+1,_fround$1348+1
  7796  002DDE  C0A3  F0B8         	movff	?___ftmul+2,_fround$1348+2
  7797                           
  7798                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7799  002DE2  C0B6  F0A1         	movff	_fround$1348,___ftmul@f1
  7800  002DE6  C0B7  F0A2         	movff	_fround$1348+1,___ftmul@f1+1
  7801  002DEA  C0B8  F0A3         	movff	_fround$1348+2,___ftmul@f1+2
  7802  002DEE  0E00               	movlw	0
  7803  002DF0  0100               	movlb	0	; () banked
  7804  002DF2  6FA4               	movwf	___ftmul@f2& (0+255),b
  7805  002DF4  0E00               	movlw	0
  7806  002DF6  0100               	movlb	0	; () banked
  7807  002DF8  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  7808  002DFA  0E3F               	movlw	63
  7809  002DFC  0100               	movlb	0	; () banked
  7810  002DFE  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  7811  002E00  EC9A  F01C         	call	___ftmul	;wreg free
  7812  002E04  D787               	goto	L6
  7813  002E06                     l5011:
  7814                           
  7815                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7816  002E06  0100               	movlb	0	; () banked
  7817  002E08  51B9               	movf	fround@prec& (0+255),w,b
  7818  002E0A  0D03               	mullw	3
  7819  002E0C  0E45               	movlw	low __npowers_
  7820  002E0E  24F3               	addwf	prodl,w,c
  7821  002E10  6EF6               	movwf	tblptrl,c
  7822  002E12  0EFE               	movlw	high __npowers_
  7823  002E14  20F4               	addwfc	prodh,w,c
  7824  002E16  6EF7               	movwf	tblptrh,c
  7825  002E18                     	if	0	;There are less than 3 active tblptr bytes
  7826  002E18                     	endif
  7827  002E18  0009               	tblrd		*+
  7828  002E1A  CFF5 F0A1          	movff	tablat,___ftmul@f1
  7829  002E1E  0009               	tblrd		*+
  7830  002E20  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  7831  002E24  000A               	tblrd		*-
  7832  002E26  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  7833  002E2A  0E00               	movlw	0
  7834  002E2C  0100               	movlb	0	; () banked
  7835  002E2E  6FA4               	movwf	___ftmul@f2& (0+255),b
  7836  002E30  0E00               	movlw	0
  7837  002E32  0100               	movlb	0	; () banked
  7838  002E34  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  7839  002E36  0E3F               	movlw	63
  7840  002E38  0100               	movlb	0	; () banked
  7841  002E3A  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  7842  002E3C  EC9A  F01C         	call	___ftmul	;wreg free
  7843  002E40  C0A1  F0B0         	movff	?___ftmul,?_fround
  7844  002E44  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  7845  002E48  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  7846  002E4C  0012               	return	
  7847  002E4E                     __end_of_fround:
  7848                           	opt stack 0
  7849                           tblptru	equ	0xFF8
  7850                           tblptrh	equ	0xFF7
  7851                           tblptrl	equ	0xFF6
  7852                           tablat	equ	0xFF5
  7853                           prodh	equ	0xFF4
  7854                           prodl	equ	0xFF3
  7855                           intcon	equ	0xFF2
  7856                           postinc0	equ	0xFEE
  7857                           wreg	equ	0xFE8
  7858                           postdec1	equ	0xFE5
  7859                           fsr1l	equ	0xFE1
  7860                           indf2	equ	0xFDF
  7861                           postinc2	equ	0xFDE
  7862                           postdec2	equ	0xFDD
  7863                           fsr2h	equ	0xFDA
  7864                           fsr2l	equ	0xFD9
  7865                           status	equ	0xFD8
  7866                           
  7867 ;; *************** function ___wmul *****************
  7868 ;; Defined at:
  7869 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  multiplier      2   14[BANK0 ] unsigned int 
  7872 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;  product         2   18[BANK0 ] unsigned int 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  2   14[BANK0 ] unsigned int 
  7877 ;; Registers used:
  7878 ;;		wreg, status,2, status,0, prodl, prodh
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7884 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7885 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7887 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7888 ;;Total ram usage:        6 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    6
  7891 ;; This function calls:
  7892 ;;		Nothing
  7893 ;; This function is called by:
  7894 ;;		_fround
  7895 ;;		_scale
  7896 ;;		_printf
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           	psect	text14
  7901  00570E                     __ptext14:
  7902                           	opt stack 0
  7903  00570E                     ___wmul:
  7904                           	opt stack 21
  7905                           
  7906                           ;incstack = 0
  7907  00570E  0100               	movlb	0	; () banked
  7908  005710  518E               	movf	___wmul@multiplier& (0+255),w,b
  7909  005712  0100               	movlb	0	; () banked
  7910  005714  0390               	mulwf	___wmul@multiplicand& (0+255),b
  7911  005716  CFF3 F092          	movff	prodl,___wmul@product
  7912  00571A  CFF4 F093          	movff	prodh,___wmul@product+1
  7913  00571E  0100               	movlb	0	; () banked
  7914  005720  518E               	movf	___wmul@multiplier& (0+255),w,b
  7915  005722  0100               	movlb	0	; () banked
  7916  005724  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7917  005726  50F3               	movf	prodl,w,c
  7918  005728  0100               	movlb	0	; () banked
  7919  00572A  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  7920  00572C  0100               	movlb	0	; () banked
  7921  00572E  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7922  005730  0100               	movlb	0	; () banked
  7923  005732  0390               	mulwf	___wmul@multiplicand& (0+255),b
  7924  005734  50F3               	movf	prodl,w,c
  7925  005736  0100               	movlb	0	; () banked
  7926  005738  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  7927                           
  7928                           ; BSR set to: 0
  7929  00573A  C092  F08E         	movff	___wmul@product,?___wmul
  7930  00573E  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  7931  005742  0012               	return	
  7932  005744                     __end_of___wmul:
  7933                           	opt stack 0
  7934                           tblptru	equ	0xFF8
  7935                           tblptrh	equ	0xFF7
  7936                           tblptrl	equ	0xFF6
  7937                           tablat	equ	0xFF5
  7938                           prodh	equ	0xFF4
  7939                           prodl	equ	0xFF3
  7940                           intcon	equ	0xFF2
  7941                           postinc0	equ	0xFEE
  7942                           wreg	equ	0xFE8
  7943                           postdec1	equ	0xFE5
  7944                           fsr1l	equ	0xFE1
  7945                           indf2	equ	0xFDF
  7946                           postinc2	equ	0xFDE
  7947                           postdec2	equ	0xFDD
  7948                           fsr2h	equ	0xFDA
  7949                           fsr2l	equ	0xFD9
  7950                           status	equ	0xFD8
  7951                           
  7952 ;; *************** function ___awmod *****************
  7953 ;; Defined at:
  7954 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;  dividend        2    0[BANK0 ] int 
  7957 ;;  divisor         2    2[BANK0 ] int 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;  sign            1    5[BANK0 ] unsigned char 
  7960 ;;  counter         1    4[BANK0 ] unsigned char 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  2    0[BANK0 ] int 
  7963 ;; Registers used:
  7964 ;;		wreg, status,2, status,0
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7970 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;Total ram usage:        6 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    6
  7977 ;; This function calls:
  7978 ;;		Nothing
  7979 ;; This function is called by:
  7980 ;;		_fround
  7981 ;;		_scale
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           	psect	text15
  7986  004D7C                     __ptext15:
  7987                           	opt stack 0
  7988  004D7C                     ___awmod:
  7989                           	opt stack 21
  7990                           
  7991                           ; BSR set to: 0
  7992                           ;incstack = 0
  7993  004D7C  0E00               	movlw	0
  7994  004D7E  0100               	movlb	0	; () banked
  7995  004D80  6F85               	movwf	___awmod@sign& (0+255),b
  7996                           
  7997                           ; BSR set to: 0
  7998  004D82  0100               	movlb	0	; () banked
  7999  004D84  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8000  004D86  D008               	goto	l4847
  8001                           
  8002                           ; BSR set to: 0
  8003  004D88  0100               	movlb	0	; () banked
  8004  004D8A  6D80               	negf	___awmod@dividend& (0+255),b
  8005  004D8C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8006  004D8E  B0D8               	btfsc	status,0,c
  8007  004D90  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8008                           
  8009                           ; BSR set to: 0
  8010  004D92  0E01               	movlw	1
  8011  004D94  0100               	movlb	0	; () banked
  8012  004D96  6F85               	movwf	___awmod@sign& (0+255),b
  8013  004D98                     l4847:
  8014                           
  8015                           ; BSR set to: 0
  8016  004D98  0100               	movlb	0	; () banked
  8017  004D9A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8018  004D9C  D005               	goto	l4851
  8019                           
  8020                           ; BSR set to: 0
  8021  004D9E  0100               	movlb	0	; () banked
  8022  004DA0  6D82               	negf	___awmod@divisor& (0+255),b
  8023  004DA2  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8024  004DA4  B0D8               	btfsc	status,0,c
  8025  004DA6  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8026  004DA8                     l4851:
  8027                           
  8028                           ; BSR set to: 0
  8029  004DA8  0100               	movlb	0	; () banked
  8030  004DAA  5182               	movf	___awmod@divisor& (0+255),w,b
  8031  004DAC  0100               	movlb	0	; () banked
  8032  004DAE  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8033  004DB0  B4D8               	btfsc	status,2,c
  8034  004DB2  D026               	goto	l4867
  8035                           
  8036                           ; BSR set to: 0
  8037  004DB4  0E01               	movlw	1
  8038  004DB6  0100               	movlb	0	; () banked
  8039  004DB8  6F84               	movwf	___awmod@counter& (0+255),b
  8040  004DBA  D006               	goto	l4857
  8041  004DBC                     l4855:
  8042                           
  8043                           ; BSR set to: 0
  8044  004DBC  0100               	movlb	0	; () banked
  8045  004DBE  90D8               	bcf	status,0,c
  8046  004DC0  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8047  004DC2  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8048  004DC4  0100               	movlb	0	; () banked
  8049  004DC6  2B84               	incf	___awmod@counter& (0+255),f,b
  8050  004DC8                     l4857:
  8051                           
  8052                           ; BSR set to: 0
  8053  004DC8  0100               	movlb	0	; () banked
  8054  004DCA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8055  004DCC  D7F7               	goto	l4855
  8056  004DCE                     l4859:
  8057                           
  8058                           ; BSR set to: 0
  8059  004DCE  0100               	movlb	0	; () banked
  8060  004DD0  5182               	movf	___awmod@divisor& (0+255),w,b
  8061  004DD2  0100               	movlb	0	; () banked
  8062  004DD4  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8063  004DD6  0100               	movlb	0	; () banked
  8064  004DD8  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8065  004DDA  0100               	movlb	0	; () banked
  8066  004DDC  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8067  004DDE  A0D8               	btfss	status,0,c
  8068  004DE0  D008               	goto	l4863
  8069                           
  8070                           ; BSR set to: 0
  8071  004DE2  0100               	movlb	0	; () banked
  8072  004DE4  5182               	movf	___awmod@divisor& (0+255),w,b
  8073  004DE6  0100               	movlb	0	; () banked
  8074  004DE8  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8075  004DEA  0100               	movlb	0	; () banked
  8076  004DEC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8077  004DEE  0100               	movlb	0	; () banked
  8078  004DF0  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8079  004DF2                     l4863:
  8080                           
  8081                           ; BSR set to: 0
  8082  004DF2  0100               	movlb	0	; () banked
  8083  004DF4  90D8               	bcf	status,0,c
  8084  004DF6  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8085  004DF8  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8086                           
  8087                           ; BSR set to: 0
  8088  004DFA  0100               	movlb	0	; () banked
  8089  004DFC  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8090  004DFE  D7E7               	goto	l4859
  8091  004E00                     l4867:
  8092                           
  8093                           ; BSR set to: 0
  8094  004E00  0100               	movlb	0	; () banked
  8095  004E02  5185               	movf	___awmod@sign& (0+255),w,b
  8096  004E04  0100               	movlb	0	; () banked
  8097  004E06  B4D8               	btfsc	status,2,c
  8098  004E08  D005               	goto	l4871
  8099                           
  8100                           ; BSR set to: 0
  8101  004E0A  0100               	movlb	0	; () banked
  8102  004E0C  6D80               	negf	___awmod@dividend& (0+255),b
  8103  004E0E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8104  004E10  B0D8               	btfsc	status,0,c
  8105  004E12  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8106  004E14                     l4871:
  8107                           
  8108                           ; BSR set to: 0
  8109  004E14  C080  F080         	movff	___awmod@dividend,?___awmod
  8110  004E18  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8111  004E1C  0012               	return	
  8112  004E1E                     __end_of___awmod:
  8113                           	opt stack 0
  8114                           tblptru	equ	0xFF8
  8115                           tblptrh	equ	0xFF7
  8116                           tblptrl	equ	0xFF6
  8117                           tablat	equ	0xFF5
  8118                           prodh	equ	0xFF4
  8119                           prodl	equ	0xFF3
  8120                           intcon	equ	0xFF2
  8121                           postinc0	equ	0xFEE
  8122                           wreg	equ	0xFE8
  8123                           postdec1	equ	0xFE5
  8124                           fsr1l	equ	0xFE1
  8125                           indf2	equ	0xFDF
  8126                           postinc2	equ	0xFDE
  8127                           postdec2	equ	0xFDD
  8128                           fsr2h	equ	0xFDA
  8129                           fsr2l	equ	0xFD9
  8130                           status	equ	0xFD8
  8131                           
  8132 ;; *************** function ___awdiv *****************
  8133 ;; Defined at:
  8134 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8135 ;; Parameters:    Size  Location     Type
  8136 ;;  dividend        2    6[BANK0 ] int 
  8137 ;;  divisor         2    8[BANK0 ] int 
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;  quotient        2   12[BANK0 ] int 
  8140 ;;  sign            1   11[BANK0 ] unsigned char 
  8141 ;;  counter         1   10[BANK0 ] unsigned char 
  8142 ;; Return value:  Size  Location     Type
  8143 ;;                  2    6[BANK0 ] int 
  8144 ;; Registers used:
  8145 ;;		wreg, status,2, status,0
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8151 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;Total ram usage:        8 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; Hardware stack levels required when called:    6
  8158 ;; This function calls:
  8159 ;;		Nothing
  8160 ;; This function is called by:
  8161 ;;		_fround
  8162 ;;		_scale
  8163 ;;		_printf
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           	psect	text16
  8168  004B54                     __ptext16:
  8169                           	opt stack 0
  8170  004B54                     ___awdiv:
  8171                           	opt stack 21
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;incstack = 0
  8175  004B54  0E00               	movlw	0
  8176  004B56  0100               	movlb	0	; () banked
  8177  004B58  6F8B               	movwf	___awdiv@sign& (0+255),b
  8178                           
  8179                           ; BSR set to: 0
  8180  004B5A  0100               	movlb	0	; () banked
  8181  004B5C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8182  004B5E  D008               	goto	l4803
  8183                           
  8184                           ; BSR set to: 0
  8185  004B60  0100               	movlb	0	; () banked
  8186  004B62  6D88               	negf	___awdiv@divisor& (0+255),b
  8187  004B64  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8188  004B66  B0D8               	btfsc	status,0,c
  8189  004B68  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8190                           
  8191                           ; BSR set to: 0
  8192  004B6A  0E01               	movlw	1
  8193  004B6C  0100               	movlb	0	; () banked
  8194  004B6E  6F8B               	movwf	___awdiv@sign& (0+255),b
  8195  004B70                     l4803:
  8196                           
  8197                           ; BSR set to: 0
  8198  004B70  0100               	movlb	0	; () banked
  8199  004B72  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8200  004B74  D008               	goto	l4809
  8201                           
  8202                           ; BSR set to: 0
  8203  004B76  0100               	movlb	0	; () banked
  8204  004B78  6D86               	negf	___awdiv@dividend& (0+255),b
  8205  004B7A  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8206  004B7C  B0D8               	btfsc	status,0,c
  8207  004B7E  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8208                           
  8209                           ; BSR set to: 0
  8210  004B80  0E01               	movlw	1
  8211  004B82  0100               	movlb	0	; () banked
  8212  004B84  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8213  004B86                     l4809:
  8214                           
  8215                           ; BSR set to: 0
  8216  004B86  0E00               	movlw	0
  8217  004B88  0100               	movlb	0	; () banked
  8218  004B8A  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8219  004B8C  0E00               	movlw	0
  8220  004B8E  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8221                           
  8222                           ; BSR set to: 0
  8223  004B90  0100               	movlb	0	; () banked
  8224  004B92  5188               	movf	___awdiv@divisor& (0+255),w,b
  8225  004B94  0100               	movlb	0	; () banked
  8226  004B96  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8227  004B98  B4D8               	btfsc	status,2,c
  8228  004B9A  D02C               	goto	l4831
  8229                           
  8230                           ; BSR set to: 0
  8231  004B9C  0E01               	movlw	1
  8232  004B9E  0100               	movlb	0	; () banked
  8233  004BA0  6F8A               	movwf	___awdiv@counter& (0+255),b
  8234  004BA2  D006               	goto	l4817
  8235  004BA4                     l4815:
  8236                           
  8237                           ; BSR set to: 0
  8238  004BA4  0100               	movlb	0	; () banked
  8239  004BA6  90D8               	bcf	status,0,c
  8240  004BA8  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8241  004BAA  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8242  004BAC  0100               	movlb	0	; () banked
  8243  004BAE  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8244  004BB0                     l4817:
  8245                           
  8246                           ; BSR set to: 0
  8247  004BB0  0100               	movlb	0	; () banked
  8248  004BB2  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8249  004BB4  D7F7               	goto	l4815
  8250  004BB6                     l4819:
  8251                           
  8252                           ; BSR set to: 0
  8253  004BB6  0100               	movlb	0	; () banked
  8254  004BB8  90D8               	bcf	status,0,c
  8255  004BBA  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8256  004BBC  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8257                           
  8258                           ; BSR set to: 0
  8259  004BBE  0100               	movlb	0	; () banked
  8260  004BC0  5188               	movf	___awdiv@divisor& (0+255),w,b
  8261  004BC2  0100               	movlb	0	; () banked
  8262  004BC4  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8263  004BC6  0100               	movlb	0	; () banked
  8264  004BC8  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8265  004BCA  0100               	movlb	0	; () banked
  8266  004BCC  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8267  004BCE  A0D8               	btfss	status,0,c
  8268  004BD0  D00A               	goto	l4827
  8269                           
  8270                           ; BSR set to: 0
  8271  004BD2  0100               	movlb	0	; () banked
  8272  004BD4  5188               	movf	___awdiv@divisor& (0+255),w,b
  8273  004BD6  0100               	movlb	0	; () banked
  8274  004BD8  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8275  004BDA  0100               	movlb	0	; () banked
  8276  004BDC  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8277  004BDE  0100               	movlb	0	; () banked
  8278  004BE0  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8279                           
  8280                           ; BSR set to: 0
  8281  004BE2  0100               	movlb	0	; () banked
  8282  004BE4  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8283  004BE6                     l4827:
  8284                           
  8285                           ; BSR set to: 0
  8286  004BE6  0100               	movlb	0	; () banked
  8287  004BE8  90D8               	bcf	status,0,c
  8288  004BEA  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8289  004BEC  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8290                           
  8291                           ; BSR set to: 0
  8292  004BEE  0100               	movlb	0	; () banked
  8293  004BF0  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8294  004BF2  D7E1               	goto	l4819
  8295  004BF4                     l4831:
  8296                           
  8297                           ; BSR set to: 0
  8298  004BF4  0100               	movlb	0	; () banked
  8299  004BF6  518B               	movf	___awdiv@sign& (0+255),w,b
  8300  004BF8  0100               	movlb	0	; () banked
  8301  004BFA  B4D8               	btfsc	status,2,c
  8302  004BFC  D005               	goto	l4835
  8303                           
  8304                           ; BSR set to: 0
  8305  004BFE  0100               	movlb	0	; () banked
  8306  004C00  6D8C               	negf	___awdiv@quotient& (0+255),b
  8307  004C02  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8308  004C04  B0D8               	btfsc	status,0,c
  8309  004C06  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8310  004C08                     l4835:
  8311                           
  8312                           ; BSR set to: 0
  8313  004C08  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8314  004C0C  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8315  004C10  0012               	return	
  8316  004C12                     __end_of___awdiv:
  8317                           	opt stack 0
  8318                           tblptru	equ	0xFF8
  8319                           tblptrh	equ	0xFF7
  8320                           tblptrl	equ	0xFF6
  8321                           tablat	equ	0xFF5
  8322                           prodh	equ	0xFF4
  8323                           prodl	equ	0xFF3
  8324                           intcon	equ	0xFF2
  8325                           postinc0	equ	0xFEE
  8326                           wreg	equ	0xFE8
  8327                           postdec1	equ	0xFE5
  8328                           fsr1l	equ	0xFE1
  8329                           indf2	equ	0xFDF
  8330                           postinc2	equ	0xFDE
  8331                           postdec2	equ	0xFDD
  8332                           fsr2h	equ	0xFDA
  8333                           fsr2l	equ	0xFD9
  8334                           status	equ	0xFD8
  8335                           
  8336 ;; *************** function __tdiv_to_l_ *****************
  8337 ;; Defined at:
  8338 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;  f1              3    0[BANK0 ] float 
  8341 ;;  f2              3    3[BANK0 ] float 
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;  quot            4    9[BANK0 ] unsigned long 
  8344 ;;  exp1            1   14[BANK0 ] unsigned char 
  8345 ;;  cntr            1   13[BANK0 ] unsigned char 
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  4    0[BANK0 ] unsigned long 
  8348 ;; Registers used:
  8349 ;;		wreg, status,2, status,0
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8355 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8359 ;;Total ram usage:       15 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    6
  8362 ;; This function calls:
  8363 ;;		Nothing
  8364 ;; This function is called by:
  8365 ;;		_printf
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           	psect	text17
  8370  0034A8                     __ptext17:
  8371                           	opt stack 0
  8372  0034A8                     __tdiv_to_l_:
  8373                           	opt stack 22
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;incstack = 0
  8377  0034A8  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8378  0034AC  0100               	movlb	0	; () banked
  8379  0034AE  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8380  0034B0  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8381  0034B2  0100               	movlb	0	; () banked
  8382  0034B4  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8383  0034B6  0100               	movlb	0	; () banked
  8384  0034B8  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8385  0034BA  E301               	bnc	u5121
  8386  0034BC  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8387  0034BE                     u5121:
  8388  0034BE  0100               	movlb	0	; () banked
  8389  0034C0  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  8390  0034C2  0100               	movlb	0	; () banked
  8391  0034C4  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8392  0034C6  0100               	movlb	0	; () banked
  8393  0034C8  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8394  0034CA  A4D8               	btfss	status,2,c
  8395  0034CC  D00A               	goto	l5071
  8396                           
  8397                           ; BSR set to: 0
  8398  0034CE  0E00               	movlw	0
  8399  0034D0  0100               	movlb	0	; () banked
  8400  0034D2  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  8401  0034D4  0E00               	movlw	0
  8402  0034D6  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8403  0034D8  0E00               	movlw	0
  8404  0034DA  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8405  0034DC  0E00               	movlw	0
  8406  0034DE  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8407                           
  8408                           ; BSR set to: 0
  8409  0034E0  0012               	return	
  8410  0034E2                     l5071:
  8411                           
  8412                           ; BSR set to: 0
  8413  0034E2  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8414  0034E6  0100               	movlb	0	; () banked
  8415  0034E8  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8416  0034EA  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8417  0034EC  0100               	movlb	0	; () banked
  8418  0034EE  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8419  0034F0  0100               	movlb	0	; () banked
  8420  0034F2  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8421  0034F4  E301               	bnc	u5141
  8422  0034F6  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8423  0034F8                     u5141:
  8424  0034F8  0100               	movlb	0	; () banked
  8425  0034FA  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  8426  0034FC  0100               	movlb	0	; () banked
  8427  0034FE  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8428  003500  0100               	movlb	0	; () banked
  8429  003502  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8430  003504  A4D8               	btfss	status,2,c
  8431  003506  D00A               	goto	l5077
  8432                           
  8433                           ; BSR set to: 0
  8434  003508  0E00               	movlw	0
  8435  00350A  0100               	movlb	0	; () banked
  8436  00350C  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  8437  00350E  0E00               	movlw	0
  8438  003510  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8439  003512  0E00               	movlw	0
  8440  003514  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8441  003516  0E00               	movlw	0
  8442  003518  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8443                           
  8444                           ; BSR set to: 0
  8445  00351A  0012               	return	
  8446  00351C                     l5077:
  8447                           
  8448                           ; BSR set to: 0
  8449  00351C  0100               	movlb	0	; () banked
  8450  00351E  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  8451                           
  8452                           ; BSR set to: 0
  8453  003520  0EFF               	movlw	255
  8454  003522  0100               	movlb	0	; () banked
  8455  003524  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  8456  003526  0EFF               	movlw	255
  8457  003528  0100               	movlb	0	; () banked
  8458  00352A  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8459  00352C  0E00               	movlw	0
  8460  00352E  0100               	movlb	0	; () banked
  8461  003530  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8462  003532  0100               	movlb	0	; () banked
  8463  003534  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  8464                           
  8465                           ; BSR set to: 0
  8466  003536  0EFF               	movlw	255
  8467  003538  0100               	movlb	0	; () banked
  8468  00353A  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  8469  00353C  0EFF               	movlw	255
  8470  00353E  0100               	movlb	0	; () banked
  8471  003540  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  8472  003542  0E00               	movlw	0
  8473  003544  0100               	movlb	0	; () banked
  8474  003546  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  8475                           
  8476                           ; BSR set to: 0
  8477  003548  0E00               	movlw	0
  8478  00354A  0100               	movlb	0	; () banked
  8479  00354C  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  8480  00354E  0E00               	movlw	0
  8481  003550  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8482  003552  0E00               	movlw	0
  8483  003554  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8484  003556  0E00               	movlw	0
  8485  003558  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8486                           
  8487                           ; BSR set to: 0
  8488  00355A  0E7F               	movlw	127
  8489  00355C  0100               	movlb	0	; () banked
  8490  00355E  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8491                           
  8492                           ; BSR set to: 0
  8493  003560  0100               	movlb	0	; () banked
  8494  003562  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8495  003564  0F98               	addlw	152
  8496  003566  0100               	movlb	0	; () banked
  8497  003568  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8498                           
  8499                           ; BSR set to: 0
  8500  00356A  0E18               	movlw	24
  8501  00356C  0100               	movlb	0	; () banked
  8502  00356E  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8503  003570                     l1121:
  8504                           
  8505                           ; BSR set to: 0
  8506  003570  0100               	movlb	0	; () banked
  8507  003572  90D8               	bcf	status,0,c
  8508  003574  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8509  003576  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8510  003578  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8511  00357A  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8512                           
  8513                           ; BSR set to: 0
  8514  00357C  0100               	movlb	0	; () banked
  8515  00357E  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8516  003580  0100               	movlb	0	; () banked
  8517  003582  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  8518  003584  0100               	movlb	0	; () banked
  8519  003586  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8520  003588  0100               	movlb	0	; () banked
  8521  00358A  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8522  00358C  0100               	movlb	0	; () banked
  8523  00358E  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8524  003590  0100               	movlb	0	; () banked
  8525  003592  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  8526  003594  A0D8               	btfss	status,0,c
  8527  003596  D00E               	goto	l1122
  8528                           
  8529                           ; BSR set to: 0
  8530  003598  0100               	movlb	0	; () banked
  8531  00359A  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8532  00359C  0100               	movlb	0	; () banked
  8533  00359E  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  8534  0035A0  0100               	movlb	0	; () banked
  8535  0035A2  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8536  0035A4  0100               	movlb	0	; () banked
  8537  0035A6  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8538  0035A8  0100               	movlb	0	; () banked
  8539  0035AA  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8540  0035AC  0100               	movlb	0	; () banked
  8541  0035AE  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8542                           
  8543                           ; BSR set to: 0
  8544  0035B0  0100               	movlb	0	; () banked
  8545  0035B2  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8546  0035B4                     l1122:
  8547                           
  8548                           ; BSR set to: 0
  8549  0035B4  0100               	movlb	0	; () banked
  8550  0035B6  90D8               	bcf	status,0,c
  8551  0035B8  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  8552  0035BA  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8553  0035BC  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8554                           
  8555                           ; BSR set to: 0
  8556  0035BE  0100               	movlb	0	; () banked
  8557  0035C0  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8558  0035C2  D7D6               	goto	l1121
  8559                           
  8560                           ; BSR set to: 0
  8561                           
  8562                           ; BSR set to: 0
  8563  0035C4  0100               	movlb	0	; () banked
  8564  0035C6  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8565  0035C8  D01A               	goto	l5111
  8566                           
  8567                           ; BSR set to: 0
  8568  0035CA  0100               	movlb	0	; () banked
  8569  0035CC  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8570  0035CE  0A80               	xorlw	128
  8571  0035D0  0F97               	addlw	151
  8572  0035D2  B0D8               	btfsc	status,0,c
  8573  0035D4  D00A               	goto	l5107
  8574                           
  8575                           ; BSR set to: 0
  8576  0035D6  0E00               	movlw	0
  8577  0035D8  0100               	movlb	0	; () banked
  8578  0035DA  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  8579  0035DC  0E00               	movlw	0
  8580  0035DE  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8581  0035E0  0E00               	movlw	0
  8582  0035E2  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8583  0035E4  0E00               	movlw	0
  8584  0035E6  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8585                           
  8586                           ; BSR set to: 0
  8587  0035E8  0012               	return	
  8588  0035EA                     l5107:
  8589                           
  8590                           ; BSR set to: 0
  8591  0035EA  0100               	movlb	0	; () banked
  8592  0035EC  90D8               	bcf	status,0,c
  8593  0035EE  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8594  0035F0  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8595  0035F2  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8596  0035F4  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  8597                           
  8598                           ; BSR set to: 0
  8599  0035F6  0100               	movlb	0	; () banked
  8600  0035F8  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  8601  0035FA  D7F7               	goto	l5107
  8602                           
  8603                           ; BSR set to: 0
  8604  0035FC  D01B               	goto	l1128
  8605  0035FE                     l5111:
  8606                           
  8607                           ; BSR set to: 0
  8608  0035FE  0E17               	movlw	23
  8609  003600  0100               	movlb	0	; () banked
  8610  003602  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  8611  003604  D012               	goto	l5119
  8612                           
  8613                           ; BSR set to: 0
  8614  003606  0E00               	movlw	0
  8615  003608  0100               	movlb	0	; () banked
  8616  00360A  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  8617  00360C  0E00               	movlw	0
  8618  00360E  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8619  003610  0E00               	movlw	0
  8620  003612  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8621  003614  0E00               	movlw	0
  8622  003616  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8623                           
  8624                           ; BSR set to: 0
  8625  003618  0012               	return	
  8626  00361A                     l5117:
  8627                           
  8628                           ; BSR set to: 0
  8629  00361A  0100               	movlb	0	; () banked
  8630  00361C  90D8               	bcf	status,0,c
  8631  00361E  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8632  003620  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8633  003622  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8634  003624  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8635  003626  0100               	movlb	0	; () banked
  8636  003628  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  8637  00362A                     l5119:
  8638                           
  8639                           ; BSR set to: 0
  8640  00362A  0100               	movlb	0	; () banked
  8641  00362C  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8642  00362E  0100               	movlb	0	; () banked
  8643  003630  A4D8               	btfss	status,2,c
  8644  003632  D7F3               	goto	l5117
  8645  003634                     l1128:
  8646                           
  8647                           ; BSR set to: 0
  8648  003634  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8649  003638  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8650  00363C  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8651  003640  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8652                           
  8653                           ; BSR set to: 0
  8654  003644  0012               	return		;funcret
  8655  003646                     __end_of__tdiv_to_l_:
  8656                           	opt stack 0
  8657                           tblptru	equ	0xFF8
  8658                           tblptrh	equ	0xFF7
  8659                           tblptrl	equ	0xFF6
  8660                           tablat	equ	0xFF5
  8661                           prodh	equ	0xFF4
  8662                           prodl	equ	0xFF3
  8663                           intcon	equ	0xFF2
  8664                           postinc0	equ	0xFEE
  8665                           wreg	equ	0xFE8
  8666                           postdec1	equ	0xFE5
  8667                           fsr1l	equ	0xFE1
  8668                           indf2	equ	0xFDF
  8669                           postinc2	equ	0xFDE
  8670                           postdec2	equ	0xFDD
  8671                           fsr2h	equ	0xFDA
  8672                           fsr2l	equ	0xFD9
  8673                           status	equ	0xFD8
  8674                           
  8675 ;; *************** function __div_to_l_ *****************
  8676 ;; Defined at:
  8677 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;  f1              3    0[BANK0 ] unsigned long 
  8680 ;;  f2              3    3[BANK0 ] unsigned long 
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;  quot            4    6[BANK0 ] unsigned long 
  8683 ;;  exp1            1   11[BANK0 ] unsigned char 
  8684 ;;  cntr            1   10[BANK0 ] unsigned char 
  8685 ;; Return value:  Size  Location     Type
  8686 ;;                  4    0[BANK0 ] unsigned long 
  8687 ;; Registers used:
  8688 ;;		wreg, status,2, status,0
  8689 ;; Tracked objects:
  8690 ;;		On entry : 0/0
  8691 ;;		On exit  : 0/0
  8692 ;;		Unchanged: 0/0
  8693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8694 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8698 ;;Total ram usage:       12 bytes
  8699 ;; Hardware stack levels used:    1
  8700 ;; Hardware stack levels required when called:    6
  8701 ;; This function calls:
  8702 ;;		Nothing
  8703 ;; This function is called by:
  8704 ;;		_printf
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           	psect	text18
  8709  003646                     __ptext18:
  8710                           	opt stack 0
  8711  003646                     __div_to_l_:
  8712                           	opt stack 22
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;incstack = 0
  8716  003646  0100               	movlb	0	; () banked
  8717  003648  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  8718  00364A  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  8719  00364C  0100               	movlb	0	; () banked
  8720  00364E  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  8721  003650  0100               	movlb	0	; () banked
  8722  003652  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  8723  003654  A4D8               	btfss	status,2,c
  8724  003656  D00A               	goto	l5127
  8725                           
  8726                           ; BSR set to: 0
  8727  003658  0E00               	movlw	0
  8728  00365A  0100               	movlb	0	; () banked
  8729  00365C  6F80               	movwf	?__div_to_l_& (0+255),b
  8730  00365E  0E00               	movlw	0
  8731  003660  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  8732  003662  0E00               	movlw	0
  8733  003664  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  8734  003666  0E00               	movlw	0
  8735  003668  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  8736                           
  8737                           ; BSR set to: 0
  8738  00366A  0012               	return	
  8739  00366C                     l5127:
  8740                           
  8741                           ; BSR set to: 0
  8742  00366C  0100               	movlb	0	; () banked
  8743  00366E  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  8744  003670  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  8745  003672  0100               	movlb	0	; () banked
  8746  003674  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  8747  003676  0100               	movlb	0	; () banked
  8748  003678  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  8749  00367A  A4D8               	btfss	status,2,c
  8750  00367C  D00A               	goto	l5133
  8751                           
  8752                           ; BSR set to: 0
  8753  00367E  0E00               	movlw	0
  8754  003680  0100               	movlb	0	; () banked
  8755  003682  6F80               	movwf	?__div_to_l_& (0+255),b
  8756  003684  0E00               	movlw	0
  8757  003686  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  8758  003688  0E00               	movlw	0
  8759  00368A  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  8760  00368C  0E00               	movlw	0
  8761  00368E  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  8762                           
  8763                           ; BSR set to: 0
  8764  003690  0012               	return	
  8765  003692                     l5133:
  8766                           
  8767                           ; BSR set to: 0
  8768  003692  0100               	movlb	0	; () banked
  8769  003694  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  8770                           
  8771                           ; BSR set to: 0
  8772  003696  0EFF               	movlw	255
  8773  003698  0100               	movlb	0	; () banked
  8774  00369A  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  8775  00369C  0EFF               	movlw	255
  8776  00369E  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  8777  0036A0  0EFF               	movlw	255
  8778  0036A2  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  8779  0036A4  0E00               	movlw	0
  8780  0036A6  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  8781                           
  8782                           ; BSR set to: 0
  8783  0036A8  0100               	movlb	0	; () banked
  8784  0036AA  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  8785  0036AC  0EFF               	movlw	255
  8786  0036AE  0100               	movlb	0	; () banked
  8787  0036B0  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  8788  0036B2  0EFF               	movlw	255
  8789  0036B4  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  8790  0036B6  0EFF               	movlw	255
  8791  0036B8  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  8792  0036BA  0E00               	movlw	0
  8793  0036BC  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  8794                           
  8795                           ; BSR set to: 0
  8796  0036BE  0E00               	movlw	0
  8797  0036C0  0100               	movlb	0	; () banked
  8798  0036C2  6F86               	movwf	__div_to_l_@quot& (0+255),b
  8799  0036C4  0E00               	movlw	0
  8800  0036C6  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  8801  0036C8  0E00               	movlw	0
  8802  0036CA  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  8803  0036CC  0E00               	movlw	0
  8804  0036CE  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  8805                           
  8806                           ; BSR set to: 0
  8807  0036D0  0E7F               	movlw	127
  8808  0036D2  0100               	movlb	0	; () banked
  8809  0036D4  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  8810                           
  8811                           ; BSR set to: 0
  8812  0036D6  0100               	movlb	0	; () banked
  8813  0036D8  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  8814  0036DA  0FA0               	addlw	160
  8815  0036DC  0100               	movlb	0	; () banked
  8816  0036DE  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  8817                           
  8818                           ; BSR set to: 0
  8819  0036E0  0E20               	movlw	32
  8820  0036E2  0100               	movlb	0	; () banked
  8821  0036E4  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  8822  0036E6                     l5147:
  8823                           
  8824                           ; BSR set to: 0
  8825  0036E6  0100               	movlb	0	; () banked
  8826  0036E8  90D8               	bcf	status,0,c
  8827  0036EA  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  8828  0036EC  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  8829  0036EE  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  8830  0036F0  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  8831                           
  8832                           ; BSR set to: 0
  8833  0036F2  0100               	movlb	0	; () banked
  8834  0036F4  5183               	movf	__div_to_l_@f2& (0+255),w,b
  8835  0036F6  0100               	movlb	0	; () banked
  8836  0036F8  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  8837  0036FA  0100               	movlb	0	; () banked
  8838  0036FC  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  8839  0036FE  0100               	movlb	0	; () banked
  8840  003700  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  8841  003702  0100               	movlb	0	; () banked
  8842  003704  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  8843  003706  0100               	movlb	0	; () banked
  8844  003708  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  8845  00370A  0100               	movlb	0	; () banked
  8846  00370C  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  8847  00370E  0100               	movlb	0	; () banked
  8848  003710  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  8849  003712  A0D8               	btfss	status,0,c
  8850  003714  D012               	goto	l5155
  8851                           
  8852                           ; BSR set to: 0
  8853  003716  0100               	movlb	0	; () banked
  8854  003718  5183               	movf	__div_to_l_@f2& (0+255),w,b
  8855  00371A  0100               	movlb	0	; () banked
  8856  00371C  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  8857  00371E  0100               	movlb	0	; () banked
  8858  003720  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  8859  003722  0100               	movlb	0	; () banked
  8860  003724  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  8861  003726  0100               	movlb	0	; () banked
  8862  003728  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  8863  00372A  0100               	movlb	0	; () banked
  8864  00372C  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  8865  00372E  0100               	movlb	0	; () banked
  8866  003730  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  8867  003732  0100               	movlb	0	; () banked
  8868  003734  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  8869                           
  8870                           ; BSR set to: 0
  8871  003736  0100               	movlb	0	; () banked
  8872  003738  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  8873  00373A                     l5155:
  8874                           
  8875                           ; BSR set to: 0
  8876  00373A  0100               	movlb	0	; () banked
  8877  00373C  90D8               	bcf	status,0,c
  8878  00373E  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  8879  003740  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  8880  003742  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  8881  003744  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  8882                           
  8883                           ; BSR set to: 0
  8884  003746  0100               	movlb	0	; () banked
  8885  003748  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  8886  00374A  D7CD               	goto	l5147
  8887                           
  8888                           ; BSR set to: 0
  8889                           
  8890                           ; BSR set to: 0
  8891  00374C  0100               	movlb	0	; () banked
  8892  00374E  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  8893  003750  D01A               	goto	l5171
  8894                           
  8895                           ; BSR set to: 0
  8896  003752  0100               	movlb	0	; () banked
  8897  003754  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  8898  003756  0A80               	xorlw	128
  8899  003758  0F9F               	addlw	159
  8900  00375A  B0D8               	btfsc	status,0,c
  8901  00375C  D00A               	goto	l5167
  8902                           
  8903                           ; BSR set to: 0
  8904  00375E  0E00               	movlw	0
  8905  003760  0100               	movlb	0	; () banked
  8906  003762  6F80               	movwf	?__div_to_l_& (0+255),b
  8907  003764  0E00               	movlw	0
  8908  003766  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  8909  003768  0E00               	movlw	0
  8910  00376A  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  8911  00376C  0E00               	movlw	0
  8912  00376E  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  8913                           
  8914                           ; BSR set to: 0
  8915  003770  0012               	return	
  8916  003772                     l5167:
  8917                           
  8918                           ; BSR set to: 0
  8919  003772  0100               	movlb	0	; () banked
  8920  003774  90D8               	bcf	status,0,c
  8921  003776  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  8922  003778  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  8923  00377A  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  8924  00377C  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  8925                           
  8926                           ; BSR set to: 0
  8927  00377E  0100               	movlb	0	; () banked
  8928  003780  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  8929  003782  D7F7               	goto	l5167
  8930                           
  8931                           ; BSR set to: 0
  8932  003784  D01B               	goto	l1024
  8933  003786                     l5171:
  8934                           
  8935                           ; BSR set to: 0
  8936  003786  0E1F               	movlw	31
  8937  003788  0100               	movlb	0	; () banked
  8938  00378A  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  8939  00378C  D012               	goto	l5179
  8940                           
  8941                           ; BSR set to: 0
  8942  00378E  0E00               	movlw	0
  8943  003790  0100               	movlb	0	; () banked
  8944  003792  6F80               	movwf	?__div_to_l_& (0+255),b
  8945  003794  0E00               	movlw	0
  8946  003796  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  8947  003798  0E00               	movlw	0
  8948  00379A  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  8949  00379C  0E00               	movlw	0
  8950  00379E  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  8951                           
  8952                           ; BSR set to: 0
  8953  0037A0  0012               	return	
  8954  0037A2                     l5177:
  8955                           
  8956                           ; BSR set to: 0
  8957  0037A2  0100               	movlb	0	; () banked
  8958  0037A4  90D8               	bcf	status,0,c
  8959  0037A6  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  8960  0037A8  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  8961  0037AA  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  8962  0037AC  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  8963  0037AE  0100               	movlb	0	; () banked
  8964  0037B0  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  8965  0037B2                     l5179:
  8966                           
  8967                           ; BSR set to: 0
  8968  0037B2  0100               	movlb	0	; () banked
  8969  0037B4  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  8970  0037B6  0100               	movlb	0	; () banked
  8971  0037B8  A4D8               	btfss	status,2,c
  8972  0037BA  D7F3               	goto	l5177
  8973  0037BC                     l1024:
  8974                           
  8975                           ; BSR set to: 0
  8976  0037BC  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  8977  0037C0  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8978  0037C4  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8979  0037C8  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8980                           
  8981                           ; BSR set to: 0
  8982  0037CC  0012               	return		;funcret
  8983  0037CE                     __end_of__div_to_l_:
  8984                           	opt stack 0
  8985                           tblptru	equ	0xFF8
  8986                           tblptrh	equ	0xFF7
  8987                           tblptrl	equ	0xFF6
  8988                           tablat	equ	0xFF5
  8989                           prodh	equ	0xFF4
  8990                           prodl	equ	0xFF3
  8991                           intcon	equ	0xFF2
  8992                           postinc0	equ	0xFEE
  8993                           wreg	equ	0xFE8
  8994                           postdec1	equ	0xFE5
  8995                           fsr1l	equ	0xFE1
  8996                           indf2	equ	0xFDF
  8997                           postinc2	equ	0xFDE
  8998                           postdec2	equ	0xFDD
  8999                           fsr2h	equ	0xFDA
  9000                           fsr2l	equ	0xFD9
  9001                           status	equ	0xFD8
  9002                           
  9003 ;; *************** function ___lltoft *****************
  9004 ;; Defined at:
  9005 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;  c               4    8[BANK0 ] unsigned long 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  exp             1   16[BANK0 ] unsigned char 
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  3    8[BANK0 ] float 
  9012 ;; Registers used:
  9013 ;;		wreg, status,2, status,0, cstack
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9019 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;Total ram usage:        9 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; Hardware stack levels required when called:    7
  9026 ;; This function calls:
  9027 ;;		___ftpack
  9028 ;; This function is called by:
  9029 ;;		_printf
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           	psect	text19
  9034  00517A                     __ptext19:
  9035                           	opt stack 0
  9036  00517A                     ___lltoft:
  9037                           	opt stack 21
  9038                           
  9039                           ; BSR set to: 0
  9040                           ;incstack = 0
  9041  00517A  0E8E               	movlw	142
  9042  00517C  0100               	movlb	0	; () banked
  9043  00517E  6F90               	movwf	___lltoft@exp& (0+255),b
  9044  005180  D008               	goto	l5253
  9045  005182                     l5251:
  9046                           
  9047                           ; BSR set to: 0
  9048  005182  0100               	movlb	0	; () banked
  9049  005184  90D8               	bcf	status,0,c
  9050  005186  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  9051  005188  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  9052  00518A  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
  9053  00518C  3388               	rrcf	___lltoft@c& (0+255),f,b
  9054  00518E  0100               	movlb	0	; () banked
  9055  005190  2B90               	incf	___lltoft@exp& (0+255),f,b
  9056  005192                     l5253:
  9057                           
  9058                           ; BSR set to: 0
  9059  005192  0E00               	movlw	0
  9060  005194  0100               	movlb	0	; () banked
  9061  005196  1588               	andwf	___lltoft@c& (0+255),w,b
  9062  005198  0100               	movlb	0	; () banked
  9063  00519A  6F8C               	movwf	??___lltoft& (0+255),b
  9064  00519C  0E00               	movlw	0
  9065  00519E  0100               	movlb	0	; () banked
  9066  0051A0  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
  9067  0051A2  0100               	movlb	0	; () banked
  9068  0051A4  6F8D               	movwf	(??___lltoft+1)& (0+255),b
  9069  0051A6  0E00               	movlw	0
  9070  0051A8  0100               	movlb	0	; () banked
  9071  0051AA  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
  9072  0051AC  0100               	movlb	0	; () banked
  9073  0051AE  6F8E               	movwf	(??___lltoft+2)& (0+255),b
  9074  0051B0  0EFF               	movlw	255
  9075  0051B2  0100               	movlb	0	; () banked
  9076  0051B4  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
  9077  0051B6  0100               	movlb	0	; () banked
  9078  0051B8  6F8F               	movwf	(??___lltoft+3)& (0+255),b
  9079  0051BA  0100               	movlb	0	; () banked
  9080  0051BC  518C               	movf	??___lltoft& (0+255),w,b
  9081  0051BE  0100               	movlb	0	; () banked
  9082  0051C0  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
  9083  0051C2  0100               	movlb	0	; () banked
  9084  0051C4  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
  9085  0051C6  0100               	movlb	0	; () banked
  9086  0051C8  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
  9087  0051CA  A4D8               	btfss	status,2,c
  9088  0051CC  D7DA               	goto	l5251
  9089                           
  9090                           ; BSR set to: 0
  9091                           
  9092                           ; BSR set to: 0
  9093  0051CE  C088  F080         	movff	___lltoft@c,___ftpack@arg
  9094  0051D2  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
  9095  0051D6  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
  9096  0051DA  C090  F083         	movff	___lltoft@exp,___ftpack@exp
  9097  0051DE  0E00               	movlw	0
  9098  0051E0  0100               	movlb	0	; () banked
  9099  0051E2  6F84               	movwf	___ftpack@sign& (0+255),b
  9100  0051E4  EC80  F021         	call	___ftpack	;wreg free
  9101  0051E8  C080  F088         	movff	?___ftpack,?___lltoft
  9102  0051EC  C081  F089         	movff	?___ftpack+1,?___lltoft+1
  9103  0051F0  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
  9104  0051F4  0012               	return	
  9105  0051F6                     __end_of___lltoft:
  9106                           	opt stack 0
  9107                           tblptru	equ	0xFF8
  9108                           tblptrh	equ	0xFF7
  9109                           tblptrl	equ	0xFF6
  9110                           tablat	equ	0xFF5
  9111                           prodh	equ	0xFF4
  9112                           prodl	equ	0xFF3
  9113                           intcon	equ	0xFF2
  9114                           postinc0	equ	0xFEE
  9115                           wreg	equ	0xFE8
  9116                           postdec1	equ	0xFE5
  9117                           fsr1l	equ	0xFE1
  9118                           indf2	equ	0xFDF
  9119                           postinc2	equ	0xFDE
  9120                           postdec2	equ	0xFDD
  9121                           fsr2h	equ	0xFDA
  9122                           fsr2l	equ	0xFD9
  9123                           status	equ	0xFD8
  9124                           
  9125 ;; *************** function ___llmod *****************
  9126 ;; Defined at:
  9127 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9128 ;; Parameters:    Size  Location     Type
  9129 ;;  dividend        4   13[BANK0 ] unsigned long 
  9130 ;;  divisor         4   17[BANK0 ] unsigned long 
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;  counter         1   21[BANK0 ] unsigned char 
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  4   13[BANK0 ] unsigned long 
  9135 ;; Registers used:
  9136 ;;		wreg, status,2, status,0
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9142 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;Total ram usage:        9 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; Hardware stack levels required when called:    6
  9149 ;; This function calls:
  9150 ;;		Nothing
  9151 ;; This function is called by:
  9152 ;;		_printf
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           	psect	text20
  9157  004EBC                     __ptext20:
  9158                           	opt stack 0
  9159  004EBC                     ___llmod:
  9160                           	opt stack 22
  9161                           
  9162                           ;incstack = 0
  9163  004EBC  0100               	movlb	0	; () banked
  9164  004EBE  5191               	movf	___llmod@divisor& (0+255),w,b
  9165  004EC0  0100               	movlb	0	; () banked
  9166  004EC2  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9167  004EC4  0100               	movlb	0	; () banked
  9168  004EC6  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9169  004EC8  0100               	movlb	0	; () banked
  9170  004ECA  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  9171  004ECC  B4D8               	btfsc	status,2,c
  9172  004ECE  D03A               	goto	l1213
  9173                           
  9174                           ; BSR set to: 0
  9175  004ED0  0E01               	movlw	1
  9176  004ED2  0100               	movlb	0	; () banked
  9177  004ED4  6F95               	movwf	___llmod@counter& (0+255),b
  9178  004ED6  D008               	goto	l5239
  9179  004ED8                     l5237:
  9180                           
  9181                           ; BSR set to: 0
  9182  004ED8  0100               	movlb	0	; () banked
  9183  004EDA  90D8               	bcf	status,0,c
  9184  004EDC  3791               	rlcf	___llmod@divisor& (0+255),f,b
  9185  004EDE  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9186  004EE0  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9187  004EE2  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9188  004EE4  0100               	movlb	0	; () banked
  9189  004EE6  2B95               	incf	___llmod@counter& (0+255),f,b
  9190  004EE8                     l5239:
  9191                           
  9192                           ; BSR set to: 0
  9193  004EE8  0100               	movlb	0	; () banked
  9194  004EEA  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9195  004EEC  D7F5               	goto	l5237
  9196  004EEE                     l5241:
  9197                           
  9198                           ; BSR set to: 0
  9199  004EEE  0100               	movlb	0	; () banked
  9200  004EF0  5191               	movf	___llmod@divisor& (0+255),w,b
  9201  004EF2  0100               	movlb	0	; () banked
  9202  004EF4  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  9203  004EF6  0100               	movlb	0	; () banked
  9204  004EF8  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  9205  004EFA  0100               	movlb	0	; () banked
  9206  004EFC  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9207  004EFE  0100               	movlb	0	; () banked
  9208  004F00  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  9209  004F02  0100               	movlb	0	; () banked
  9210  004F04  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9211  004F06  0100               	movlb	0	; () banked
  9212  004F08  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  9213  004F0A  0100               	movlb	0	; () banked
  9214  004F0C  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9215  004F0E  A0D8               	btfss	status,0,c
  9216  004F10  D010               	goto	l5245
  9217                           
  9218                           ; BSR set to: 0
  9219  004F12  0100               	movlb	0	; () banked
  9220  004F14  5191               	movf	___llmod@divisor& (0+255),w,b
  9221  004F16  0100               	movlb	0	; () banked
  9222  004F18  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  9223  004F1A  0100               	movlb	0	; () banked
  9224  004F1C  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  9225  004F1E  0100               	movlb	0	; () banked
  9226  004F20  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9227  004F22  0100               	movlb	0	; () banked
  9228  004F24  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  9229  004F26  0100               	movlb	0	; () banked
  9230  004F28  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9231  004F2A  0100               	movlb	0	; () banked
  9232  004F2C  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  9233  004F2E  0100               	movlb	0	; () banked
  9234  004F30  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9235  004F32                     l5245:
  9236                           
  9237                           ; BSR set to: 0
  9238  004F32  0100               	movlb	0	; () banked
  9239  004F34  90D8               	bcf	status,0,c
  9240  004F36  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9241  004F38  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9242  004F3A  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9243  004F3C  3391               	rrcf	___llmod@divisor& (0+255),f,b
  9244                           
  9245                           ; BSR set to: 0
  9246  004F3E  0100               	movlb	0	; () banked
  9247  004F40  2F95               	decfsz	___llmod@counter& (0+255),f,b
  9248  004F42  D7D5               	goto	l5241
  9249  004F44                     l1213:
  9250                           
  9251                           ; BSR set to: 0
  9252  004F44  C08D  F08D         	movff	___llmod@dividend,?___llmod
  9253  004F48  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  9254  004F4C  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  9255  004F50  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  9256                           
  9257                           ; BSR set to: 0
  9258  004F54  0012               	return		;funcret
  9259  004F56                     __end_of___llmod:
  9260                           	opt stack 0
  9261                           tblptru	equ	0xFF8
  9262                           tblptrh	equ	0xFF7
  9263                           tblptrl	equ	0xFF6
  9264                           tablat	equ	0xFF5
  9265                           prodh	equ	0xFF4
  9266                           prodl	equ	0xFF3
  9267                           intcon	equ	0xFF2
  9268                           postinc0	equ	0xFEE
  9269                           wreg	equ	0xFE8
  9270                           postdec1	equ	0xFE5
  9271                           fsr1l	equ	0xFE1
  9272                           indf2	equ	0xFDF
  9273                           postinc2	equ	0xFDE
  9274                           postdec2	equ	0xFDD
  9275                           fsr2h	equ	0xFDA
  9276                           fsr2l	equ	0xFD9
  9277                           status	equ	0xFD8
  9278                           
  9279 ;; *************** function ___lldiv *****************
  9280 ;; Defined at:
  9281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9282 ;; Parameters:    Size  Location     Type
  9283 ;;  dividend        4    0[BANK0 ] unsigned long 
  9284 ;;  divisor         4    4[BANK0 ] unsigned long 
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;  quotient        4    8[BANK0 ] unsigned long 
  9287 ;;  counter         1   12[BANK0 ] unsigned char 
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  4    0[BANK0 ] unsigned long 
  9290 ;; Registers used:
  9291 ;;		wreg, status,2, status,0
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9297 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9301 ;;Total ram usage:       13 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    6
  9304 ;; This function calls:
  9305 ;;		Nothing
  9306 ;; This function is called by:
  9307 ;;		_printf
  9308 ;;		_I2C_Master_Init
  9309 ;; This function uses a non-reentrant model
  9310 ;;
  9311                           
  9312                           	psect	text21
  9313  004C12                     __ptext21:
  9314                           	opt stack 0
  9315  004C12                     ___lldiv:
  9316                           	opt stack 22
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;incstack = 0
  9320  004C12  0E00               	movlw	0
  9321  004C14  0100               	movlb	0	; () banked
  9322  004C16  6F88               	movwf	___lldiv@quotient& (0+255),b
  9323  004C18  0E00               	movlw	0
  9324  004C1A  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  9325  004C1C  0E00               	movlw	0
  9326  004C1E  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  9327  004C20  0E00               	movlw	0
  9328  004C22  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  9329                           
  9330                           ; BSR set to: 0
  9331  004C24  0100               	movlb	0	; () banked
  9332  004C26  5184               	movf	___lldiv@divisor& (0+255),w,b
  9333  004C28  0100               	movlb	0	; () banked
  9334  004C2A  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  9335  004C2C  0100               	movlb	0	; () banked
  9336  004C2E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  9337  004C30  0100               	movlb	0	; () banked
  9338  004C32  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  9339  004C34  B4D8               	btfsc	status,2,c
  9340  004C36  D042               	goto	l1203
  9341                           
  9342                           ; BSR set to: 0
  9343  004C38  0E01               	movlw	1
  9344  004C3A  0100               	movlb	0	; () banked
  9345  004C3C  6F8C               	movwf	___lldiv@counter& (0+255),b
  9346  004C3E  D008               	goto	l5219
  9347  004C40                     l5217:
  9348                           
  9349                           ; BSR set to: 0
  9350  004C40  0100               	movlb	0	; () banked
  9351  004C42  90D8               	bcf	status,0,c
  9352  004C44  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  9353  004C46  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  9354  004C48  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  9355  004C4A  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  9356  004C4C  0100               	movlb	0	; () banked
  9357  004C4E  2B8C               	incf	___lldiv@counter& (0+255),f,b
  9358  004C50                     l5219:
  9359                           
  9360                           ; BSR set to: 0
  9361  004C50  0100               	movlb	0	; () banked
  9362  004C52  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  9363  004C54  D7F5               	goto	l5217
  9364  004C56                     l5221:
  9365                           
  9366                           ; BSR set to: 0
  9367  004C56  0100               	movlb	0	; () banked
  9368  004C58  90D8               	bcf	status,0,c
  9369  004C5A  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  9370  004C5C  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  9371  004C5E  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  9372  004C60  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  9373                           
  9374                           ; BSR set to: 0
  9375  004C62  0100               	movlb	0	; () banked
  9376  004C64  5184               	movf	___lldiv@divisor& (0+255),w,b
  9377  004C66  0100               	movlb	0	; () banked
  9378  004C68  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  9379  004C6A  0100               	movlb	0	; () banked
  9380  004C6C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9381  004C6E  0100               	movlb	0	; () banked
  9382  004C70  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  9383  004C72  0100               	movlb	0	; () banked
  9384  004C74  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9385  004C76  0100               	movlb	0	; () banked
  9386  004C78  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  9387  004C7A  0100               	movlb	0	; () banked
  9388  004C7C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9389  004C7E  0100               	movlb	0	; () banked
  9390  004C80  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  9391  004C82  A0D8               	btfss	status,0,c
  9392  004C84  D012               	goto	l5229
  9393                           
  9394                           ; BSR set to: 0
  9395  004C86  0100               	movlb	0	; () banked
  9396  004C88  5184               	movf	___lldiv@divisor& (0+255),w,b
  9397  004C8A  0100               	movlb	0	; () banked
  9398  004C8C  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  9399  004C8E  0100               	movlb	0	; () banked
  9400  004C90  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9401  004C92  0100               	movlb	0	; () banked
  9402  004C94  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  9403  004C96  0100               	movlb	0	; () banked
  9404  004C98  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9405  004C9A  0100               	movlb	0	; () banked
  9406  004C9C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  9407  004C9E  0100               	movlb	0	; () banked
  9408  004CA0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9409  004CA2  0100               	movlb	0	; () banked
  9410  004CA4  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  9411                           
  9412                           ; BSR set to: 0
  9413  004CA6  0100               	movlb	0	; () banked
  9414  004CA8  8188               	bsf	___lldiv@quotient& (0+255),0,b
  9415  004CAA                     l5229:
  9416                           
  9417                           ; BSR set to: 0
  9418  004CAA  0100               	movlb	0	; () banked
  9419  004CAC  90D8               	bcf	status,0,c
  9420  004CAE  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  9421  004CB0  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  9422  004CB2  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  9423  004CB4  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  9424                           
  9425                           ; BSR set to: 0
  9426  004CB6  0100               	movlb	0	; () banked
  9427  004CB8  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  9428  004CBA  D7CD               	goto	l5221
  9429  004CBC                     l1203:
  9430                           
  9431                           ; BSR set to: 0
  9432  004CBC  C088  F080         	movff	___lldiv@quotient,?___lldiv
  9433  004CC0  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  9434  004CC4  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  9435  004CC8  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  9436                           
  9437                           ; BSR set to: 0
  9438  004CCC  0012               	return		;funcret
  9439  004CCE                     __end_of___lldiv:
  9440                           	opt stack 0
  9441                           tblptru	equ	0xFF8
  9442                           tblptrh	equ	0xFF7
  9443                           tblptrl	equ	0xFF6
  9444                           tablat	equ	0xFF5
  9445                           prodh	equ	0xFF4
  9446                           prodl	equ	0xFF3
  9447                           intcon	equ	0xFF2
  9448                           postinc0	equ	0xFEE
  9449                           wreg	equ	0xFE8
  9450                           postdec1	equ	0xFE5
  9451                           fsr1l	equ	0xFE1
  9452                           indf2	equ	0xFDF
  9453                           postinc2	equ	0xFDE
  9454                           postdec2	equ	0xFDD
  9455                           fsr2h	equ	0xFDA
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function ___ftsub *****************
  9460 ;; Defined at:
  9461 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;  f1              3   70[BANK0 ] float 
  9464 ;;  f2              3   73[BANK0 ] float 
  9465 ;; Auto vars:     Size  Location     Type
  9466 ;;		None
  9467 ;; Return value:  Size  Location     Type
  9468 ;;                  3   70[BANK0 ] float 
  9469 ;; Registers used:
  9470 ;;		wreg, status,2, status,0, cstack
  9471 ;; Tracked objects:
  9472 ;;		On entry : 0/0
  9473 ;;		On exit  : 0/0
  9474 ;;		Unchanged: 0/0
  9475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9476 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9480 ;;Total ram usage:        6 bytes
  9481 ;; Hardware stack levels used:    1
  9482 ;; Hardware stack levels required when called:    8
  9483 ;; This function calls:
  9484 ;;		___ftadd
  9485 ;; This function is called by:
  9486 ;;		_sortBattery
  9487 ;;		_printf
  9488 ;; This function uses a non-reentrant model
  9489 ;;
  9490                           
  9491                           	psect	text22
  9492  0054A4                     __ptext22:
  9493                           	opt stack 0
  9494  0054A4                     ___ftsub:
  9495                           	opt stack 20
  9496                           
  9497                           ; BSR set to: 0
  9498                           ;incstack = 0
  9499  0054A4  0100               	movlb	0	; () banked
  9500  0054A6  51C9               	movf	___ftsub@f2& (0+255),w,b
  9501  0054A8  0100               	movlb	0	; () banked
  9502  0054AA  11CA               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9503  0054AC  0100               	movlb	0	; () banked
  9504  0054AE  11CB               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9505  0054B0  B4D8               	btfsc	status,2,c
  9506  0054B2  D009               	goto	l5185
  9507                           
  9508                           ; BSR set to: 0
  9509  0054B4  0E00               	movlw	0
  9510  0054B6  0100               	movlb	0	; () banked
  9511  0054B8  1BC9               	xorwf	___ftsub@f2& (0+255),f,b
  9512  0054BA  0E00               	movlw	0
  9513  0054BC  0100               	movlb	0	; () banked
  9514  0054BE  1BCA               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9515  0054C0  0E80               	movlw	128
  9516  0054C2  0100               	movlb	0	; () banked
  9517  0054C4  1BCB               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9518  0054C6                     l5185:
  9519                           
  9520                           ; BSR set to: 0
  9521  0054C6  C0C6  F0BA         	movff	___ftsub@f1,___ftadd@f1
  9522  0054CA  C0C7  F0BB         	movff	___ftsub@f1+1,___ftadd@f1+1
  9523  0054CE  C0C8  F0BC         	movff	___ftsub@f1+2,___ftadd@f1+2
  9524  0054D2  C0C9  F0BD         	movff	___ftsub@f2,___ftadd@f2
  9525  0054D6  C0CA  F0BE         	movff	___ftsub@f2+1,___ftadd@f2+1
  9526  0054DA  C0CB  F0BF         	movff	___ftsub@f2+2,___ftadd@f2+2
  9527  0054DE  EC27  F017         	call	___ftadd	;wreg free
  9528  0054E2  C0BA  F0C6         	movff	?___ftadd,?___ftsub
  9529  0054E6  C0BB  F0C7         	movff	?___ftadd+1,?___ftsub+1
  9530  0054EA  C0BC  F0C8         	movff	?___ftadd+2,?___ftsub+2
  9531  0054EE  0012               	return	
  9532  0054F0                     __end_of___ftsub:
  9533                           	opt stack 0
  9534                           tblptru	equ	0xFF8
  9535                           tblptrh	equ	0xFF7
  9536                           tblptrl	equ	0xFF6
  9537                           tablat	equ	0xFF5
  9538                           prodh	equ	0xFF4
  9539                           prodl	equ	0xFF3
  9540                           intcon	equ	0xFF2
  9541                           postinc0	equ	0xFEE
  9542                           wreg	equ	0xFE8
  9543                           postdec1	equ	0xFE5
  9544                           fsr1l	equ	0xFE1
  9545                           indf2	equ	0xFDF
  9546                           postinc2	equ	0xFDE
  9547                           postdec2	equ	0xFDD
  9548                           fsr2h	equ	0xFDA
  9549                           fsr2l	equ	0xFD9
  9550                           status	equ	0xFD8
  9551                           
  9552 ;; *************** function ___ftneg *****************
  9553 ;; Defined at:
  9554 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9555 ;; Parameters:    Size  Location     Type
  9556 ;;  f1              3    0[BANK0 ] float 
  9557 ;; Auto vars:     Size  Location     Type
  9558 ;;		None
  9559 ;; Return value:  Size  Location     Type
  9560 ;;                  3    0[BANK0 ] float 
  9561 ;; Registers used:
  9562 ;;		wreg, status,2, status,0
  9563 ;; Tracked objects:
  9564 ;;		On entry : 0/0
  9565 ;;		On exit  : 0/0
  9566 ;;		Unchanged: 0/0
  9567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9568 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9571 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9572 ;;Total ram usage:        3 bytes
  9573 ;; Hardware stack levels used:    1
  9574 ;; Hardware stack levels required when called:    6
  9575 ;; This function calls:
  9576 ;;		Nothing
  9577 ;; This function is called by:
  9578 ;;		_printf
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           	psect	text23
  9583  005744                     __ptext23:
  9584                           	opt stack 0
  9585  005744                     ___ftneg:
  9586                           	opt stack 22
  9587                           
  9588                           ;incstack = 0
  9589  005744  0100               	movlb	0	; () banked
  9590  005746  5180               	movf	___ftneg@f1& (0+255),w,b
  9591  005748  0100               	movlb	0	; () banked
  9592  00574A  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  9593  00574C  0100               	movlb	0	; () banked
  9594  00574E  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  9595  005750  B4D8               	btfsc	status,2,c
  9596  005752  D009               	goto	l1153
  9597                           
  9598                           ; BSR set to: 0
  9599  005754  0E00               	movlw	0
  9600  005756  0100               	movlb	0	; () banked
  9601  005758  1B80               	xorwf	___ftneg@f1& (0+255),f,b
  9602  00575A  0E00               	movlw	0
  9603  00575C  0100               	movlb	0	; () banked
  9604  00575E  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  9605  005760  0E80               	movlw	128
  9606  005762  0100               	movlb	0	; () banked
  9607  005764  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  9608  005766                     l1153:
  9609                           
  9610                           ; BSR set to: 0
  9611  005766  C080  F080         	movff	___ftneg@f1,?___ftneg
  9612  00576A  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
  9613  00576E  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
  9614                           
  9615                           ; BSR set to: 0
  9616  005772  0012               	return		;funcret
  9617  005774                     __end_of___ftneg:
  9618                           	opt stack 0
  9619                           tblptru	equ	0xFF8
  9620                           tblptrh	equ	0xFF7
  9621                           tblptrl	equ	0xFF6
  9622                           tablat	equ	0xFF5
  9623                           prodh	equ	0xFF4
  9624                           prodl	equ	0xFF3
  9625                           intcon	equ	0xFF2
  9626                           postinc0	equ	0xFEE
  9627                           wreg	equ	0xFE8
  9628                           postdec1	equ	0xFE5
  9629                           fsr1l	equ	0xFE1
  9630                           indf2	equ	0xFDF
  9631                           postinc2	equ	0xFDE
  9632                           postdec2	equ	0xFDD
  9633                           fsr2h	equ	0xFDA
  9634                           fsr2l	equ	0xFD9
  9635                           status	equ	0xFD8
  9636                           
  9637 ;; *************** function ___ftge *****************
  9638 ;; Defined at:
  9639 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9640 ;; Parameters:    Size  Location     Type
  9641 ;;  ff1             3   12[BANK0 ] float 
  9642 ;;  ff2             3   15[BANK0 ] float 
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;		None
  9645 ;; Return value:  Size  Location     Type
  9646 ;;		None               void
  9647 ;; Registers used:
  9648 ;;		wreg, status,2, status,0
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9654 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9656 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9657 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9658 ;;Total ram usage:        9 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; Hardware stack levels required when called:    6
  9661 ;; This function calls:
  9662 ;;		Nothing
  9663 ;; This function is called by:
  9664 ;;		_sortBattery
  9665 ;;		_printf
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           	psect	text24
  9670  0049C4                     __ptext24:
  9671                           	opt stack 0
  9672  0049C4                     ___ftge:
  9673                           	opt stack 22
  9674                           
  9675                           ; BSR set to: 0
  9676                           ;incstack = 0
  9677  0049C4  0100               	movlb	0	; () banked
  9678  0049C6  AF8E               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9679  0049C8  D01D               	goto	l5193
  9680                           
  9681                           ; BSR set to: 0
  9682  0049CA  C08C  F092         	movff	___ftge@ff1,??___ftge
  9683  0049CE  C08D  F093         	movff	___ftge@ff1+1,??___ftge+1
  9684  0049D2  C08E  F094         	movff	___ftge@ff1+2,??___ftge+2
  9685  0049D6  0100               	movlb	0	; () banked
  9686  0049D8  1F92               	comf	??___ftge& (0+255),f,b
  9687  0049DA  1F93               	comf	(??___ftge+1)& (0+255),f,b
  9688  0049DC  1F94               	comf	(??___ftge+2)& (0+255),f,b
  9689  0049DE  2B92               	incf	??___ftge& (0+255),f,b
  9690  0049E0  0E00               	movlw	0
  9691  0049E2  2393               	addwfc	(??___ftge+1)& (0+255),f,b
  9692  0049E4  2394               	addwfc	(??___ftge+2)& (0+255),f,b
  9693  0049E6  0E00               	movlw	0
  9694  0049E8  0100               	movlb	0	; () banked
  9695  0049EA  2592               	addwf	??___ftge& (0+255),w,b
  9696  0049EC  0100               	movlb	0	; () banked
  9697  0049EE  6F8C               	movwf	___ftge@ff1& (0+255),b
  9698  0049F0  0E00               	movlw	0
  9699  0049F2  0100               	movlb	0	; () banked
  9700  0049F4  2193               	addwfc	(??___ftge+1)& (0+255),w,b
  9701  0049F6  0100               	movlb	0	; () banked
  9702  0049F8  6F8D               	movwf	(___ftge@ff1+1)& (0+255),b
  9703  0049FA  0E80               	movlw	128
  9704  0049FC  0100               	movlb	0	; () banked
  9705  0049FE  2194               	addwfc	(??___ftge+2)& (0+255),w,b
  9706  004A00  0100               	movlb	0	; () banked
  9707  004A02  6F8E               	movwf	(___ftge@ff1+2)& (0+255),b
  9708  004A04                     l5193:
  9709                           
  9710                           ; BSR set to: 0
  9711  004A04  0100               	movlb	0	; () banked
  9712  004A06  AF91               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9713  004A08  D01D               	goto	l5197
  9714                           
  9715                           ; BSR set to: 0
  9716  004A0A  C08F  F092         	movff	___ftge@ff2,??___ftge
  9717  004A0E  C090  F093         	movff	___ftge@ff2+1,??___ftge+1
  9718  004A12  C091  F094         	movff	___ftge@ff2+2,??___ftge+2
  9719  004A16  0100               	movlb	0	; () banked
  9720  004A18  1F92               	comf	??___ftge& (0+255),f,b
  9721  004A1A  1F93               	comf	(??___ftge+1)& (0+255),f,b
  9722  004A1C  1F94               	comf	(??___ftge+2)& (0+255),f,b
  9723  004A1E  2B92               	incf	??___ftge& (0+255),f,b
  9724  004A20  0E00               	movlw	0
  9725  004A22  2393               	addwfc	(??___ftge+1)& (0+255),f,b
  9726  004A24  2394               	addwfc	(??___ftge+2)& (0+255),f,b
  9727  004A26  0E00               	movlw	0
  9728  004A28  0100               	movlb	0	; () banked
  9729  004A2A  2592               	addwf	??___ftge& (0+255),w,b
  9730  004A2C  0100               	movlb	0	; () banked
  9731  004A2E  6F8F               	movwf	___ftge@ff2& (0+255),b
  9732  004A30  0E00               	movlw	0
  9733  004A32  0100               	movlb	0	; () banked
  9734  004A34  2193               	addwfc	(??___ftge+1)& (0+255),w,b
  9735  004A36  0100               	movlb	0	; () banked
  9736  004A38  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  9737  004A3A  0E80               	movlw	128
  9738  004A3C  0100               	movlb	0	; () banked
  9739  004A3E  2194               	addwfc	(??___ftge+2)& (0+255),w,b
  9740  004A40  0100               	movlb	0	; () banked
  9741  004A42  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  9742  004A44                     l5197:
  9743                           
  9744                           ; BSR set to: 0
  9745  004A44  0E00               	movlw	0
  9746  004A46  0100               	movlb	0	; () banked
  9747  004A48  1B8C               	xorwf	___ftge@ff1& (0+255),f,b
  9748  004A4A  0E00               	movlw	0
  9749  004A4C  0100               	movlb	0	; () banked
  9750  004A4E  1B8D               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9751  004A50  0E80               	movlw	128
  9752  004A52  0100               	movlb	0	; () banked
  9753  004A54  1B8E               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9754                           
  9755                           ; BSR set to: 0
  9756  004A56  0E00               	movlw	0
  9757  004A58  0100               	movlb	0	; () banked
  9758  004A5A  1B8F               	xorwf	___ftge@ff2& (0+255),f,b
  9759  004A5C  0E00               	movlw	0
  9760  004A5E  0100               	movlb	0	; () banked
  9761  004A60  1B90               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9762  004A62  0E80               	movlw	128
  9763  004A64  0100               	movlb	0	; () banked
  9764  004A66  1B91               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9765  004A68  0100               	movlb	0	; () banked
  9766  004A6A  518F               	movf	___ftge@ff2& (0+255),w,b
  9767  004A6C  0100               	movlb	0	; () banked
  9768  004A6E  5D8C               	subwf	___ftge@ff1& (0+255),w,b
  9769  004A70  0100               	movlb	0	; () banked
  9770  004A72  5190               	movf	(___ftge@ff2+1)& (0+255),w,b
  9771  004A74  0100               	movlb	0	; () banked
  9772  004A76  598D               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9773  004A78  0100               	movlb	0	; () banked
  9774  004A7A  5191               	movf	(___ftge@ff2+2)& (0+255),w,b
  9775  004A7C  0100               	movlb	0	; () banked
  9776  004A7E  598E               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9777  004A80  B0D8               	btfsc	status,0,c
  9778  004A82  D002               	goto	l5203
  9779                           
  9780                           ; BSR set to: 0
  9781  004A84  90D8               	bcf	status,0,c
  9782  004A86  0012               	return	
  9783  004A88                     l5203:
  9784                           
  9785                           ; BSR set to: 0
  9786  004A88  80D8               	bsf	status,0,c
  9787                           
  9788                           ; BSR set to: 0
  9789  004A8A  0012               	return	
  9790  004A8C                     __end_of___ftge:
  9791                           	opt stack 0
  9792                           tblptru	equ	0xFF8
  9793                           tblptrh	equ	0xFF7
  9794                           tblptrl	equ	0xFF6
  9795                           tablat	equ	0xFF5
  9796                           prodh	equ	0xFF4
  9797                           prodl	equ	0xFF3
  9798                           intcon	equ	0xFF2
  9799                           postinc0	equ	0xFEE
  9800                           wreg	equ	0xFE8
  9801                           postdec1	equ	0xFE5
  9802                           fsr1l	equ	0xFE1
  9803                           indf2	equ	0xFDF
  9804                           postinc2	equ	0xFDE
  9805                           postdec2	equ	0xFDD
  9806                           fsr2h	equ	0xFDA
  9807                           fsr2l	equ	0xFD9
  9808                           status	equ	0xFD8
  9809                           
  9810 ;; *************** function _lcdClear *****************
  9811 ;; Defined at:
  9812 ;;		line 74 in file "lcd.c"
  9813 ;; Parameters:    Size  Location     Type
  9814 ;;		None
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;		None
  9817 ;; Return value:  Size  Location     Type
  9818 ;;                  1    wreg      void 
  9819 ;; Registers used:
  9820 ;;		wreg, status,2, status,0, cstack
  9821 ;; Tracked objects:
  9822 ;;		On entry : 0/0
  9823 ;;		On exit  : 0/0
  9824 ;;		Unchanged: 0/0
  9825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9830 ;;Total ram usage:        0 bytes
  9831 ;; Hardware stack levels used:    1
  9832 ;; Hardware stack levels required when called:    8
  9833 ;; This function calls:
  9834 ;;		_lcdInst
  9835 ;; This function is called by:
  9836 ;;		_main
  9837 ;;		_sortBattery
  9838 ;;		_pause
  9839 ;;		_dateTime
  9840 ;;		_mainMenu
  9841 ;;		_runSelect
  9842 ;;		_runMenu
  9843 ;;		_runTime
  9844 ;;		_runStats
  9845 ;; This function uses a non-reentrant model
  9846 ;;
  9847                           
  9848                           	psect	text25
  9849  0058E4                     __ptext25:
  9850                           	opt stack 0
  9851  0058E4                     _lcdClear:
  9852                           	opt stack 21
  9853                           
  9854                           ;lcd.c: 75: lcdInst(0b00000001);
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;incstack = 0
  9858  0058E4  0E01               	movlw	1
  9859  0058E6  ECE4  F02B         	call	_lcdInst
  9860  0058EA  0012               	return		;funcret
  9861  0058EC                     __end_of_lcdClear:
  9862                           	opt stack 0
  9863                           tblptru	equ	0xFF8
  9864                           tblptrh	equ	0xFF7
  9865                           tblptrl	equ	0xFF6
  9866                           tablat	equ	0xFF5
  9867                           prodh	equ	0xFF4
  9868                           prodl	equ	0xFF3
  9869                           intcon	equ	0xFF2
  9870                           postinc0	equ	0xFEE
  9871                           wreg	equ	0xFE8
  9872                           postdec1	equ	0xFE5
  9873                           fsr1l	equ	0xFE1
  9874                           indf2	equ	0xFDF
  9875                           postinc2	equ	0xFDE
  9876                           postdec2	equ	0xFDD
  9877                           fsr2h	equ	0xFDA
  9878                           fsr2l	equ	0xFD9
  9879                           status	equ	0xFD8
  9880                           
  9881 ;; *************** function _lcdHome *****************
  9882 ;; Defined at:
  9883 ;;		line 70 in file "lcd.c"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;		None
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;                  2   18[None  ] int 
  9890 ;; Registers used:
  9891 ;;		wreg, status,2, status,0, cstack
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9901 ;;Total ram usage:        0 bytes
  9902 ;; Hardware stack levels used:    1
  9903 ;; Hardware stack levels required when called:    8
  9904 ;; This function calls:
  9905 ;;		_lcdInst
  9906 ;; This function is called by:
  9907 ;;		_main
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911                           	psect	text26
  9912  0058EC                     __ptext26:
  9913                           	opt stack 0
  9914  0058EC                     _lcdHome:
  9915                           	opt stack 22
  9916                           
  9917                           ;lcd.c: 71: lcdInst(0b11000000);
  9918                           
  9919                           ;incstack = 0
  9920  0058EC  0EC0               	movlw	192
  9921  0058EE  ECE4  F02B         	call	_lcdInst
  9922  0058F2  0012               	return		;funcret
  9923  0058F4                     __end_of_lcdHome:
  9924                           	opt stack 0
  9925                           tblptru	equ	0xFF8
  9926                           tblptrh	equ	0xFF7
  9927                           tblptrl	equ	0xFF6
  9928                           tablat	equ	0xFF5
  9929                           prodh	equ	0xFF4
  9930                           prodl	equ	0xFF3
  9931                           intcon	equ	0xFF2
  9932                           postinc0	equ	0xFEE
  9933                           wreg	equ	0xFE8
  9934                           postdec1	equ	0xFE5
  9935                           fsr1l	equ	0xFE1
  9936                           indf2	equ	0xFDF
  9937                           postinc2	equ	0xFDE
  9938                           postdec2	equ	0xFDD
  9939                           fsr2h	equ	0xFDA
  9940                           fsr2l	equ	0xFD9
  9941                           status	equ	0xFD8
  9942                           
  9943 ;; *************** function _initServo *****************
  9944 ;; Defined at:
  9945 ;;		line 21 in file "servo.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;  motor           2  118[BANK0 ] PTR int 
  9948 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9949 ;;  angle           2  120[BANK0 ] int 
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;		None
  9952 ;; Return value:  Size  Location     Type
  9953 ;;                  1    wreg      void 
  9954 ;; Registers used:
  9955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9956 ;; Tracked objects:
  9957 ;;		On entry : 0/0
  9958 ;;		On exit  : 0/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9961 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;Total ram usage:        8 bytes
  9966 ;; Hardware stack levels used:    1
  9967 ;; Hardware stack levels required when called:   10
  9968 ;; This function calls:
  9969 ;;		_initTimer
  9970 ;;		_setAngle
  9971 ;;		_startTimer
  9972 ;; This function is called by:
  9973 ;;		_main
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           	psect	text27
  9978  004FE6                     __ptext27:
  9979                           	opt stack 0
  9980  004FE6                     _initServo:
  9981                           	opt stack 20
  9982                           
  9983                           ;servo.c: 22: n++;
  9984                           
  9985                           ;incstack = 0
  9986  004FE6  0100               	movlb	0	; () banked
  9987  004FE8  4BFE               	infsnz	_n& (0+255),f,b
  9988  004FEA  2BFF               	incf	(_n+1)& (0+255),f,b
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;servo.c: 23: servos[n-1] = motor;
  9992  004FEC  0EFE               	movlw	254
  9993  004FEE  0100               	movlb	0	; () banked
  9994  004FF0  6FFA               	movwf	??_initServo& (0+255),b
  9995  004FF2  0EFF               	movlw	255
  9996  004FF4  0100               	movlb	0	; () banked
  9997  004FF6  6FFB               	movwf	(??_initServo+1)& (0+255),b
  9998  004FF8  C0FE  F0FC         	movff	_n,??_initServo+2
  9999  004FFC  C0FF  F0FD         	movff	_n+1,??_initServo+3
 10000  005000  90D8               	bcf	status,0,c
 10001  005002  0100               	movlb	0	; () banked
 10002  005004  37FC               	rlcf	(??_initServo+2)& (0+255),f,b
 10003  005006  37FD               	rlcf	(??_initServo+3)& (0+255),f,b
 10004  005008  0100               	movlb	0	; () banked
 10005  00500A  51FA               	movf	??_initServo& (0+255),w,b
 10006  00500C  0100               	movlb	0	; () banked
 10007  00500E  27FC               	addwf	(??_initServo+2)& (0+255),f,b
 10008  005010  0100               	movlb	0	; () banked
 10009  005012  51FB               	movf	(??_initServo+1)& (0+255),w,b
 10010  005014  0100               	movlb	0	; () banked
 10011  005016  23FD               	addwfc	(??_initServo+3)& (0+255),f,b
 10012  005018  0EA0               	movlw	low _servos
 10013  00501A  0100               	movlb	0	; () banked
 10014  00501C  25FC               	addwf	(??_initServo+2)& (0+255),w,b
 10015  00501E  6ED9               	movwf	fsr2l,c
 10016  005020  0E01               	movlw	high _servos
 10017  005022  0100               	movlb	0	; () banked
 10018  005024  21FD               	addwfc	(??_initServo+3)& (0+255),w,b
 10019  005026  6EDA               	movwf	fsr2h,c
 10020  005028  C0F6  FFDE         	movff	initServo@motor,postinc2
 10021  00502C  C0F7  FFDD         	movff	initServo@motor+1,postdec2
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;servo.c: 24: setAngle(motor, angle);
 10025  005030  C0F6  F0EC         	movff	initServo@motor,setAngle@motor
 10026  005034  C0F7  F0ED         	movff	initServo@motor+1,setAngle@motor+1
 10027  005038  C0F8  F0EE         	movff	initServo@angle,setAngle@angle
 10028  00503C  C0F9  F0EF         	movff	initServo@angle+1,setAngle@angle+1
 10029  005040  EC78  F024         	call	_setAngle	;wreg free
 10030                           
 10031                           ;servo.c: 26: initTimer(0);
 10032  005044  0E00               	movlw	0
 10033  005046  0100               	movlb	0	; () banked
 10034  005048  6F81               	movwf	(initTimer@timer+1)& (0+255),b
 10035  00504A  0E00               	movlw	0
 10036  00504C  6F80               	movwf	initTimer@timer& (0+255),b
 10037  00504E  EC2B  F02A         	call	_initTimer	;wreg free
 10038                           
 10039                           ;servo.c: 27: startTimer(0,0);
 10040  005052  0E00               	movlw	0
 10041  005054  0100               	movlb	0	; () banked
 10042  005056  6F81               	movwf	(startTimer@timer+1)& (0+255),b
 10043  005058  0E00               	movlw	0
 10044  00505A  6F80               	movwf	startTimer@timer& (0+255),b
 10045  00505C  0E00               	movlw	0
 10046  00505E  0100               	movlb	0	; () banked
 10047  005060  6F82               	movwf	startTimer@val& (0+255),b
 10048  005062  0E00               	movlw	0
 10049  005064  6F83               	movwf	(startTimer@val+1)& (0+255),b
 10050  005066  0E00               	movlw	0
 10051  005068  6F84               	movwf	(startTimer@val+2)& (0+255),b
 10052  00506A  0E00               	movlw	0
 10053  00506C  6F85               	movwf	(startTimer@val+3)& (0+255),b
 10054  00506E  EC03  F02A         	call	_startTimer	;wreg free
 10055  005072  0012               	return		;funcret
 10056  005074                     __end_of_initServo:
 10057                           	opt stack 0
 10058                           tblptru	equ	0xFF8
 10059                           tblptrh	equ	0xFF7
 10060                           tblptrl	equ	0xFF6
 10061                           tablat	equ	0xFF5
 10062                           prodh	equ	0xFF4
 10063                           prodl	equ	0xFF3
 10064                           intcon	equ	0xFF2
 10065                           postinc0	equ	0xFEE
 10066                           wreg	equ	0xFE8
 10067                           postdec1	equ	0xFE5
 10068                           fsr1l	equ	0xFE1
 10069                           indf2	equ	0xFDF
 10070                           postinc2	equ	0xFDE
 10071                           postdec2	equ	0xFDD
 10072                           fsr2h	equ	0xFDA
 10073                           fsr2l	equ	0xFD9
 10074                           status	equ	0xFD8
 10075                           
 10076 ;; *************** function _startTimer *****************
 10077 ;; Defined at:
 10078 ;;		line 76 in file "timer.c"
 10079 ;; Parameters:    Size  Location     Type
 10080 ;;  timer           2    0[BANK0 ] int 
 10081 ;;  val             4    2[BANK0 ] long 
 10082 ;; Auto vars:     Size  Location     Type
 10083 ;;		None
 10084 ;; Return value:  Size  Location     Type
 10085 ;;                  1    wreg      void 
 10086 ;; Registers used:
 10087 ;;		wreg, status,2, status,0
 10088 ;; Tracked objects:
 10089 ;;		On entry : 0/0
 10090 ;;		On exit  : 0/0
 10091 ;;		Unchanged: 0/0
 10092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10093 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10096 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10097 ;;Total ram usage:        8 bytes
 10098 ;; Hardware stack levels used:    1
 10099 ;; Hardware stack levels required when called:    6
 10100 ;; This function calls:
 10101 ;;		Nothing
 10102 ;; This function is called by:
 10103 ;;		_main
 10104 ;;		_initServo
 10105 ;;		_testFrequency
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           	psect	text28
 10110  005406                     __ptext28:
 10111                           	opt stack 0
 10112  005406                     _startTimer:
 10113                           	opt stack 24
 10114                           
 10115                           ;timer.c: 77: switch(timer){
 10116                           
 10117                           ;incstack = 0
 10118  005406  D012               	goto	l5499
 10119  005408                     l420:
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;timer.c: 79: TMR0H = val>>8;
 10123  005408  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
 10124                           
 10125                           ;timer.c: 80: TMR0L = val;
 10126  00540C  C082  FFD6         	movff	startTimer@val,4054	;volatile
 10127                           
 10128                           ; BSR set to: 0
 10129                           ;timer.c: 81: T0CON |= 1<<7;
 10130  005410  8ED5               	bsf	4053,7,c	;volatile
 10131                           
 10132                           ;timer.c: 82: break;
 10133  005412  0012               	return	
 10134  005414                     l422:
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;timer.c: 84: TMR1H = val>>8;
 10138  005414  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
 10139                           
 10140                           ;timer.c: 85: TMR1L = val;
 10141  005418  C082  FFCE         	movff	startTimer@val,4046	;volatile
 10142                           
 10143                           ; BSR set to: 0
 10144                           ;timer.c: 86: T1CON |= 1<<0;
 10145  00541C  80CD               	bsf	4045,0,c	;volatile
 10146                           
 10147                           ;timer.c: 87: break;
 10148  00541E  0012               	return	
 10149  005420                     l423:
 10150                           
 10151                           ; BSR set to: 0
 10152                           ;timer.c: 89: TMR3H = val>>8;
 10153  005420  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
 10154                           
 10155                           ;timer.c: 90: TMR3L = val;
 10156  005424  C082  FFB2         	movff	startTimer@val,4018	;volatile
 10157                           
 10158                           ; BSR set to: 0
 10159                           ;timer.c: 91: T3CON |= 1<<0;
 10160  005428  80B1               	bsf	4017,0,c	;volatile
 10161                           
 10162                           ;timer.c: 92: }
 10163  00542A  0012               	return	
 10164  00542C                     l5499:
 10165  00542C  C080  F086         	movff	startTimer@timer,??_startTimer
 10166  005430  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
 10167                           
 10168                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10169                           ; Switch size 1, requested type "space"
 10170                           ; Number of cases is 1, Range of values is 0 to 0
 10171                           ; switch strategies available:
 10172                           ; Name         Instructions Cycles
 10173                           ; simple_byte            4     3 (average)
 10174                           ;	Chosen strategy is simple_byte
 10175  005434  0100               	movlb	0	; () banked
 10176  005436  5187               	movf	(??_startTimer+1)& (0+255),w,b
 10177  005438  0A00               	xorlw	0	; case 0
 10178  00543A  A4D8               	btfss	status,2,c
 10179  00543C  0012               	return	
 10180                           
 10181                           ; BSR set to: 0
 10182                           ; Switch size 1, requested type "space"
 10183                           ; Number of cases is 3, Range of values is 0 to 3
 10184                           ; switch strategies available:
 10185                           ; Name         Instructions Cycles
 10186                           ; simple_byte           10     6 (average)
 10187                           ;	Chosen strategy is simple_byte
 10188  00543E  0100               	movlb	0	; () banked
 10189  005440  5186               	movf	??_startTimer& (0+255),w,b
 10190  005442  0A00               	xorlw	0	; case 0
 10191  005444  B4D8               	btfsc	status,2,c
 10192  005446  D7E0               	goto	l420
 10193  005448  0A01               	xorlw	1	; case 1
 10194  00544A  B4D8               	btfsc	status,2,c
 10195  00544C  D7E3               	goto	l422
 10196  00544E  0A02               	xorlw	2	; case 3
 10197  005450  A4D8               	btfss	status,2,c
 10198  005452  0012               	return	
 10199  005454  D7E5               	goto	l423
 10200  005456                     __end_of_startTimer:
 10201                           	opt stack 0
 10202                           tblptru	equ	0xFF8
 10203                           tblptrh	equ	0xFF7
 10204                           tblptrl	equ	0xFF6
 10205                           tablat	equ	0xFF5
 10206                           prodh	equ	0xFF4
 10207                           prodl	equ	0xFF3
 10208                           intcon	equ	0xFF2
 10209                           postinc0	equ	0xFEE
 10210                           wreg	equ	0xFE8
 10211                           postdec1	equ	0xFE5
 10212                           fsr1l	equ	0xFE1
 10213                           indf2	equ	0xFDF
 10214                           postinc2	equ	0xFDE
 10215                           postdec2	equ	0xFDD
 10216                           fsr2h	equ	0xFDA
 10217                           fsr2l	equ	0xFD9
 10218                           status	equ	0xFD8
 10219                           
 10220 ;; *************** function _setAngle *****************
 10221 ;; Defined at:
 10222 ;;		line 41 in file "servo.c"
 10223 ;; Parameters:    Size  Location     Type
 10224 ;;  motor           2  108[BANK0 ] PTR int 
 10225 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 10226 ;;  angle           2  110[BANK0 ] int 
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;  i               2  116[BANK0 ] int 
 10229 ;;  period          2  114[BANK0 ] unsigned int 
 10230 ;; Return value:  Size  Location     Type
 10231 ;;                  1    wreg      void 
 10232 ;; Registers used:
 10233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10234 ;; Tracked objects:
 10235 ;;		On entry : 0/0
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10239 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10240 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10242 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10243 ;;Total ram usage:       10 bytes
 10244 ;; Hardware stack levels used:    1
 10245 ;; Hardware stack levels required when called:    9
 10246 ;; This function calls:
 10247 ;;		_angleToPulse
 10248 ;; This function is called by:
 10249 ;;		_sortBattery
 10250 ;;		_initServo
 10251 ;; This function uses a non-reentrant model
 10252 ;;
 10253                           
 10254                           	psect	text29
 10255  0048F0                     __ptext29:
 10256                           	opt stack 0
 10257  0048F0                     _setAngle:
 10258                           	opt stack 20
 10259                           
 10260                           ;servo.c: 42: unsigned int period = 50000;
 10261                           
 10262                           ; BSR set to: 0
 10263                           ;incstack = 0
 10264  0048F0  0EC3               	movlw	195
 10265  0048F2  0100               	movlb	0	; () banked
 10266  0048F4  6FF3               	movwf	(setAngle@period+1)& (0+255),b
 10267  0048F6  0E50               	movlw	80
 10268  0048F8  6FF2               	movwf	setAngle@period& (0+255),b
 10269                           
 10270                           ;servo.c: 43: for(int i = 0; i < n; i++){
 10271  0048FA  0E00               	movlw	0
 10272  0048FC  0100               	movlb	0	; () banked
 10273  0048FE  6FF5               	movwf	(setAngle@i+1)& (0+255),b
 10274  004900  0E00               	movlw	0
 10275  004902  6FF4               	movwf	setAngle@i& (0+255),b
 10276  004904  D03F               	goto	l5953
 10277  004906                     l5945:
 10278                           
 10279                           ; BSR set to: 0
 10280                           ;servo.c: 44: if(servos[i] == motor){
 10281  004906  90D8               	bcf	status,0,c
 10282  004908  0100               	movlb	0	; () banked
 10283  00490A  35F4               	rlcf	setAngle@i& (0+255),w,b
 10284  00490C  6ED9               	movwf	fsr2l,c
 10285  00490E  0100               	movlb	0	; () banked
 10286  004910  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
 10287  004912  6EDA               	movwf	fsr2h,c
 10288  004914  0EA0               	movlw	low _servos
 10289  004916  26D9               	addwf	fsr2l,f,c
 10290  004918  0E01               	movlw	high _servos
 10291  00491A  22DA               	addwfc	fsr2h,f,c
 10292  00491C  0100               	movlb	0	; () banked
 10293  00491E  51EC               	movf	setAngle@motor& (0+255),w,b
 10294  004920  18DE               	xorwf	postinc2,w,c
 10295  004922  E11C               	bnz	l5949
 10296  004924  0100               	movlb	0	; () banked
 10297  004926  51ED               	movf	(setAngle@motor+1)& (0+255),w,b
 10298  004928  18DE               	xorwf	postinc2,w,c
 10299  00492A  A4D8               	btfss	status,2,c
 10300  00492C  D017               	goto	l5949
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
 10304  00492E  C0EE  F0D5         	movff	setAngle@angle,angleToPulse@angle
 10305  004932  C0EF  F0D6         	movff	setAngle@angle+1,angleToPulse@angle+1
 10306  004936  ECE7  F01B         	call	_angleToPulse	;wreg free
 10307  00493A  90D8               	bcf	status,0,c
 10308  00493C  0100               	movlb	0	; () banked
 10309  00493E  35F4               	rlcf	setAngle@i& (0+255),w,b
 10310  004940  6ED9               	movwf	fsr2l,c
 10311  004942  0100               	movlb	0	; () banked
 10312  004944  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
 10313  004946  6EDA               	movwf	fsr2h,c
 10314  004948  0E98               	movlw	low _pulse
 10315  00494A  26D9               	addwf	fsr2l,f,c
 10316  00494C  0E01               	movlw	high _pulse
 10317  00494E  22DA               	addwfc	fsr2h,f,c
 10318  004950  0100               	movlb	0	; () banked
 10319  004952  C0D5  FFDE         	movff	?_angleToPulse,postinc2
 10320  004956  0100               	movlb	0	; () banked
 10321  004958  C0D6  FFDD         	movff	?_angleToPulse+1,postdec2
 10322  00495C                     l5949:
 10323                           
 10324                           ; BSR set to: 0
 10325                           ;servo.c: 46: }
 10326                           ;servo.c: 47: period-=pulse[i];
 10327  00495C  90D8               	bcf	status,0,c
 10328  00495E  0100               	movlb	0	; () banked
 10329  004960  35F4               	rlcf	setAngle@i& (0+255),w,b
 10330  004962  6ED9               	movwf	fsr2l,c
 10331  004964  0100               	movlb	0	; () banked
 10332  004966  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
 10333  004968  6EDA               	movwf	fsr2h,c
 10334  00496A  0E98               	movlw	low _pulse
 10335  00496C  26D9               	addwf	fsr2l,f,c
 10336  00496E  0E01               	movlw	high _pulse
 10337  004970  22DA               	addwfc	fsr2h,f,c
 10338  004972  50DE               	movf	postinc2,w,c
 10339  004974  0100               	movlb	0	; () banked
 10340  004976  5FF2               	subwf	setAngle@period& (0+255),f,b
 10341  004978  50DD               	movf	postdec2,w,c
 10342  00497A  0100               	movlb	0	; () banked
 10343  00497C  5BF3               	subwfb	(setAngle@period+1)& (0+255),f,b
 10344                           
 10345                           ; BSR set to: 0
 10346  00497E  0100               	movlb	0	; () banked
 10347  004980  4BF4               	infsnz	setAngle@i& (0+255),f,b
 10348  004982  2BF5               	incf	(setAngle@i+1)& (0+255),f,b
 10349  004984                     l5953:
 10350                           
 10351                           ; BSR set to: 0
 10352  004984  0100               	movlb	0	; () banked
 10353  004986  51FE               	movf	_n& (0+255),w,b
 10354  004988  0100               	movlb	0	; () banked
 10355  00498A  5DF4               	subwf	setAngle@i& (0+255),w,b
 10356  00498C  0100               	movlb	0	; () banked
 10357  00498E  51F5               	movf	(setAngle@i+1)& (0+255),w,b
 10358  004990  0A80               	xorlw	128
 10359  004992  0100               	movlb	0	; () banked
 10360  004994  6FF0               	movwf	??_setAngle& (0+255),b
 10361  004996  0100               	movlb	0	; () banked
 10362  004998  51FF               	movf	(_n+1)& (0+255),w,b
 10363  00499A  0A80               	xorlw	128
 10364  00499C  0100               	movlb	0	; () banked
 10365  00499E  59F0               	subwfb	??_setAngle& (0+255),w,b
 10366  0049A0  A0D8               	btfss	status,0,c
 10367  0049A2  D7B1               	goto	l5945
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;servo.c: 48: }
 10371                           ;servo.c: 49: pulse[n] = period;
 10372                           
 10373                           ; BSR set to: 0
 10374  0049A4  90D8               	bcf	status,0,c
 10375  0049A6  0100               	movlb	0	; () banked
 10376  0049A8  35FE               	rlcf	_n& (0+255),w,b
 10377  0049AA  6ED9               	movwf	fsr2l,c
 10378  0049AC  0100               	movlb	0	; () banked
 10379  0049AE  35FF               	rlcf	(_n+1)& (0+255),w,b
 10380  0049B0  6EDA               	movwf	fsr2h,c
 10381  0049B2  0E98               	movlw	low _pulse
 10382  0049B4  26D9               	addwf	fsr2l,f,c
 10383  0049B6  0E01               	movlw	high _pulse
 10384  0049B8  22DA               	addwfc	fsr2h,f,c
 10385  0049BA  C0F2  FFDE         	movff	setAngle@period,postinc2
 10386  0049BE  C0F3  FFDD         	movff	setAngle@period+1,postdec2
 10387                           
 10388                           ; BSR set to: 0
 10389  0049C2  0012               	return		;funcret
 10390  0049C4                     __end_of_setAngle:
 10391                           	opt stack 0
 10392                           tblptru	equ	0xFF8
 10393                           tblptrh	equ	0xFF7
 10394                           tblptrl	equ	0xFF6
 10395                           tablat	equ	0xFF5
 10396                           prodh	equ	0xFF4
 10397                           prodl	equ	0xFF3
 10398                           intcon	equ	0xFF2
 10399                           postinc0	equ	0xFEE
 10400                           wreg	equ	0xFE8
 10401                           postdec1	equ	0xFE5
 10402                           fsr1l	equ	0xFE1
 10403                           indf2	equ	0xFDF
 10404                           postinc2	equ	0xFDE
 10405                           postdec2	equ	0xFDD
 10406                           fsr2h	equ	0xFDA
 10407                           fsr2l	equ	0xFD9
 10408                           status	equ	0xFD8
 10409                           
 10410 ;; *************** function _angleToPulse *****************
 10411 ;; Defined at:
 10412 ;;		line 33 in file "servo.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;  angle           2   85[BANK0 ] int 
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;  a000            4  104[BANK0 ] long 
 10417 ;;  a180            4   97[BANK0 ] long 
 10418 ;;  offset          4   93[BANK0 ] long 
 10419 ;; Return value:  Size  Location     Type
 10420 ;;                  4   85[BANK0 ] long 
 10421 ;; Registers used:
 10422 ;;		wreg, status,2, status,0, cstack
 10423 ;; Tracked objects:
 10424 ;;		On entry : 0/0
 10425 ;;		On exit  : 0/0
 10426 ;;		Unchanged: 0/0
 10427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10428 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10432 ;;Total ram usage:       23 bytes
 10433 ;; Hardware stack levels used:    1
 10434 ;; Hardware stack levels required when called:    8
 10435 ;; This function calls:
 10436 ;;		___altoft
 10437 ;;		___awtoft
 10438 ;;		___ftadd
 10439 ;;		___ftdiv
 10440 ;;		___ftmul
 10441 ;;		___fttol
 10442 ;; This function is called by:
 10443 ;;		_setAngle
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           	psect	text30
 10448  0037CE                     __ptext30:
 10449                           	opt stack 0
 10450  0037CE                     _angleToPulse:
 10451                           	opt stack 20
 10452                           
 10453                           ;servo.c: 34: long offset = -600;
 10454                           
 10455                           ; BSR set to: 0
 10456                           ;incstack = 0
 10457  0037CE  0EA8               	movlw	168
 10458  0037D0  0100               	movlb	0	; () banked
 10459  0037D2  6FDD               	movwf	angleToPulse@offset& (0+255),b
 10460  0037D4  0EFD               	movlw	253
 10461  0037D6  6FDE               	movwf	(angleToPulse@offset+1)& (0+255),b
 10462  0037D8  0EFF               	movlw	255
 10463  0037DA  6FDF               	movwf	(angleToPulse@offset+2)& (0+255),b
 10464  0037DC  0EFF               	movlw	255
 10465  0037DE  6FE0               	movwf	(angleToPulse@offset+3)& (0+255),b
 10466                           
 10467                           ;servo.c: 35: long a000 = 1250;
 10468  0037E0  0EE2               	movlw	226
 10469  0037E2  0100               	movlb	0	; () banked
 10470  0037E4  6FE8               	movwf	angleToPulse@a000& (0+255),b
 10471  0037E6  0E04               	movlw	4
 10472  0037E8  6FE9               	movwf	(angleToPulse@a000+1)& (0+255),b
 10473  0037EA  0E00               	movlw	0
 10474  0037EC  6FEA               	movwf	(angleToPulse@a000+2)& (0+255),b
 10475  0037EE  0E00               	movlw	0
 10476  0037F0  6FEB               	movwf	(angleToPulse@a000+3)& (0+255),b
 10477                           
 10478                           ;servo.c: 36: long a180 = 6250;
 10479  0037F2  0E6A               	movlw	106
 10480  0037F4  0100               	movlb	0	; () banked
 10481  0037F6  6FE1               	movwf	angleToPulse@a180& (0+255),b
 10482  0037F8  0E18               	movlw	24
 10483  0037FA  6FE2               	movwf	(angleToPulse@a180+1)& (0+255),b
 10484  0037FC  0E00               	movlw	0
 10485  0037FE  6FE3               	movwf	(angleToPulse@a180+2)& (0+255),b
 10486  003800  0E00               	movlw	0
 10487  003802  6FE4               	movwf	(angleToPulse@a180+3)& (0+255),b
 10488                           
 10489                           ; BSR set to: 0
 10490                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 10491  003804  C0E8  F0D9         	movff	angleToPulse@a000,??_angleToPulse
 10492  003808  C0E9  F0DA         	movff	angleToPulse@a000+1,??_angleToPulse+1
 10493  00380C  C0EA  F0DB         	movff	angleToPulse@a000+2,??_angleToPulse+2
 10494  003810  C0EB  F0DC         	movff	angleToPulse@a000+3,??_angleToPulse+3
 10495  003814  0100               	movlb	0	; () banked
 10496  003816  1FD9               	comf	??_angleToPulse& (0+255),f,b
 10497  003818  1FDA               	comf	(??_angleToPulse+1)& (0+255),f,b
 10498  00381A  1FDB               	comf	(??_angleToPulse+2)& (0+255),f,b
 10499  00381C  1FDC               	comf	(??_angleToPulse+3)& (0+255),f,b
 10500  00381E  2BD9               	incf	??_angleToPulse& (0+255),f,b
 10501  003820  0E00               	movlw	0
 10502  003822  23DA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 10503  003824  23DB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 10504  003826  23DC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 10505  003828  0100               	movlb	0	; () banked
 10506  00382A  51E1               	movf	angleToPulse@a180& (0+255),w,b
 10507  00382C  0100               	movlb	0	; () banked
 10508  00382E  25D9               	addwf	??_angleToPulse& (0+255),w,b
 10509  003830  0100               	movlb	0	; () banked
 10510  003832  6F88               	movwf	___altoft@c& (0+255),b
 10511  003834  0100               	movlb	0	; () banked
 10512  003836  51E2               	movf	(angleToPulse@a180+1)& (0+255),w,b
 10513  003838  0100               	movlb	0	; () banked
 10514  00383A  21DA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 10515  00383C  0100               	movlb	0	; () banked
 10516  00383E  6F89               	movwf	(___altoft@c+1)& (0+255),b
 10517  003840  0100               	movlb	0	; () banked
 10518  003842  51E3               	movf	(angleToPulse@a180+2)& (0+255),w,b
 10519  003844  0100               	movlb	0	; () banked
 10520  003846  21DB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 10521  003848  0100               	movlb	0	; () banked
 10522  00384A  6F8A               	movwf	(___altoft@c+2)& (0+255),b
 10523  00384C  0100               	movlb	0	; () banked
 10524  00384E  51E4               	movf	(angleToPulse@a180+3)& (0+255),w,b
 10525  003850  0100               	movlb	0	; () banked
 10526  003852  21DC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 10527  003854  0100               	movlb	0	; () banked
 10528  003856  6F8B               	movwf	(___altoft@c+3)& (0+255),b
 10529  003858  EC0F  F027         	call	___altoft	;wreg free
 10530  00385C  C088  F0A4         	movff	?___altoft,___ftmul@f2
 10531  003860  C089  F0A5         	movff	?___altoft+1,___ftmul@f2+1
 10532  003864  C08A  F0A6         	movff	?___altoft+2,___ftmul@f2+2
 10533  003868  0E00               	movlw	0
 10534  00386A  0100               	movlb	0	; () banked
 10535  00386C  6F95               	movwf	___ftdiv@f2& (0+255),b
 10536  00386E  0E34               	movlw	52
 10537  003870  0100               	movlb	0	; () banked
 10538  003872  6F96               	movwf	(___ftdiv@f2+1)& (0+255),b
 10539  003874  0E43               	movlw	67
 10540  003876  0100               	movlb	0	; () banked
 10541  003878  6F97               	movwf	(___ftdiv@f2+2)& (0+255),b
 10542  00387A  C0D5  F088         	movff	angleToPulse@angle,___awtoft@c
 10543  00387E  C0D6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
 10544  003882  ECE6  F02A         	call	___awtoft	;wreg free
 10545  003886  C088  F092         	movff	?___awtoft,___ftdiv@f1
 10546  00388A  C089  F093         	movff	?___awtoft+1,___ftdiv@f1+1
 10547  00388E  C08A  F094         	movff	?___awtoft+2,___ftdiv@f1+2
 10548  003892  EC49  F01D         	call	___ftdiv	;wreg free
 10549  003896  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
 10550  00389A  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
 10551  00389E  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
 10552  0038A2  EC9A  F01C         	call	___ftmul	;wreg free
 10553  0038A6  C0A1  F0BD         	movff	?___ftmul,___ftadd@f2
 10554  0038AA  C0A2  F0BE         	movff	?___ftmul+1,___ftadd@f2+1
 10555  0038AE  C0A3  F0BF         	movff	?___ftmul+2,___ftadd@f2+2
 10556  0038B2  C0E8  F088         	movff	angleToPulse@a000,___altoft@c
 10557  0038B6  C0E9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
 10558  0038BA  C0EA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
 10559  0038BE  C0EB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
 10560  0038C2  EC0F  F027         	call	___altoft	;wreg free
 10561  0038C6  C088  F0BA         	movff	?___altoft,___ftadd@f1
 10562  0038CA  C089  F0BB         	movff	?___altoft+1,___ftadd@f1+1
 10563  0038CE  C08A  F0BC         	movff	?___altoft+2,___ftadd@f1+2
 10564  0038D2  EC27  F017         	call	___ftadd	;wreg free
 10565  0038D6  C0BA  F0E5         	movff	?___ftadd,_angleToPulse$1347
 10566  0038DA  C0BB  F0E6         	movff	?___ftadd+1,_angleToPulse$1347+1
 10567  0038DE  C0BC  F0E7         	movff	?___ftadd+2,_angleToPulse$1347+2
 10568                           
 10569                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 10570  0038E2  C0DD  F088         	movff	angleToPulse@offset,___altoft@c
 10571  0038E6  C0DE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
 10572  0038EA  C0DF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
 10573  0038EE  C0E0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
 10574  0038F2  EC0F  F027         	call	___altoft	;wreg free
 10575  0038F6  C088  F0BD         	movff	?___altoft,___ftadd@f2
 10576  0038FA  C089  F0BE         	movff	?___altoft+1,___ftadd@f2+1
 10577  0038FE  C08A  F0BF         	movff	?___altoft+2,___ftadd@f2+2
 10578  003902  C0E5  F0BA         	movff	_angleToPulse$1347,___ftadd@f1
 10579  003906  C0E6  F0BB         	movff	_angleToPulse$1347+1,___ftadd@f1+1
 10580  00390A  C0E7  F0BC         	movff	_angleToPulse$1347+2,___ftadd@f1+2
 10581  00390E  EC27  F017         	call	___ftadd	;wreg free
 10582  003912  C0BA  F0C6         	movff	?___ftadd,___fttol@f1
 10583  003916  C0BB  F0C7         	movff	?___ftadd+1,___fttol@f1+1
 10584  00391A  C0BC  F0C8         	movff	?___ftadd+2,___fttol@f1+2
 10585  00391E  ECEF  F01D         	call	___fttol	;wreg free
 10586  003922  C0C6  F0D5         	movff	?___fttol,?_angleToPulse
 10587  003926  C0C7  F0D6         	movff	?___fttol+1,?_angleToPulse+1
 10588  00392A  C0C8  F0D7         	movff	?___fttol+2,?_angleToPulse+2
 10589  00392E  C0C9  F0D8         	movff	?___fttol+3,?_angleToPulse+3
 10590  003932  0012               	return	
 10591  003934                     __end_of_angleToPulse:
 10592                           	opt stack 0
 10593                           tblptru	equ	0xFF8
 10594                           tblptrh	equ	0xFF7
 10595                           tblptrl	equ	0xFF6
 10596                           tablat	equ	0xFF5
 10597                           prodh	equ	0xFF4
 10598                           prodl	equ	0xFF3
 10599                           intcon	equ	0xFF2
 10600                           postinc0	equ	0xFEE
 10601                           wreg	equ	0xFE8
 10602                           postdec1	equ	0xFE5
 10603                           fsr1l	equ	0xFE1
 10604                           indf2	equ	0xFDF
 10605                           postinc2	equ	0xFDE
 10606                           postdec2	equ	0xFDD
 10607                           fsr2h	equ	0xFDA
 10608                           fsr2l	equ	0xFD9
 10609                           status	equ	0xFD8
 10610                           
 10611 ;; *************** function ___fttol *****************
 10612 ;; Defined at:
 10613 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;  f1              3   70[BANK0 ] float 
 10616 ;; Auto vars:     Size  Location     Type
 10617 ;;  lval            4   80[BANK0 ] unsigned long 
 10618 ;;  exp1            1   84[BANK0 ] unsigned char 
 10619 ;;  sign1           1   79[BANK0 ] unsigned char 
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  4   70[BANK0 ] long 
 10622 ;; Registers used:
 10623 ;;		wreg, status,2, status,0
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10629 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10630 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10631 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10632 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10633 ;;Total ram usage:       15 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; Hardware stack levels required when called:    6
 10636 ;; This function calls:
 10637 ;;		Nothing
 10638 ;; This function is called by:
 10639 ;;		_sortBattery
 10640 ;;		_angleToPulse
 10641 ;;		_printf
 10642 ;; This function uses a non-reentrant model
 10643 ;;
 10644                           
 10645                           	psect	text31
 10646  003BDE                     __ptext31:
 10647                           	opt stack 0
 10648  003BDE                     ___fttol:
 10649                           	opt stack 21
 10650                           
 10651                           ;incstack = 0
 10652  003BDE  C0C8  F0CA         	movff	___fttol@f1+2,??___fttol
 10653  003BE2  0100               	movlb	0	; () banked
 10654  003BE4  6BCB               	clrf	(??___fttol+1)& (0+255),b
 10655  003BE6  6BCC               	clrf	(??___fttol+2)& (0+255),b
 10656  003BE8  0100               	movlb	0	; () banked
 10657  003BEA  35C7               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10658  003BEC  0100               	movlb	0	; () banked
 10659  003BEE  37CA               	rlcf	??___fttol& (0+255),f,b
 10660  003BF0  E301               	bnc	u4861
 10661  003BF2  81CB               	bsf	(??___fttol+1)& (0+255),0,b
 10662  003BF4                     u4861:
 10663  003BF4  0100               	movlb	0	; () banked
 10664  003BF6  51CA               	movf	??___fttol& (0+255),w,b
 10665  003BF8  0100               	movlb	0	; () banked
 10666  003BFA  6FD4               	movwf	___fttol@exp1& (0+255),b
 10667  003BFC  0100               	movlb	0	; () banked
 10668  003BFE  51D4               	movf	___fttol@exp1& (0+255),w,b
 10669  003C00  A4D8               	btfss	status,2,c
 10670  003C02  D00A               	goto	l4893
 10671                           
 10672                           ; BSR set to: 0
 10673  003C04  0E00               	movlw	0
 10674  003C06  0100               	movlb	0	; () banked
 10675  003C08  6FC6               	movwf	?___fttol& (0+255),b
 10676  003C0A  0E00               	movlw	0
 10677  003C0C  6FC7               	movwf	(?___fttol+1)& (0+255),b
 10678  003C0E  0E00               	movlw	0
 10679  003C10  6FC8               	movwf	(?___fttol+2)& (0+255),b
 10680  003C12  0E00               	movlw	0
 10681  003C14  6FC9               	movwf	(?___fttol+3)& (0+255),b
 10682                           
 10683                           ; BSR set to: 0
 10684  003C16  0012               	return	
 10685  003C18                     l4893:
 10686                           
 10687                           ; BSR set to: 0
 10688  003C18  0E17               	movlw	23
 10689  003C1A  0100               	movlb	0	; () banked
 10690  003C1C  6FCA               	movwf	??___fttol& (0+255),b
 10691  003C1E  C0C6  F0CB         	movff	___fttol@f1,??___fttol+1
 10692  003C22  C0C7  F0CC         	movff	___fttol@f1+1,??___fttol+2
 10693  003C26  C0C8  F0CD         	movff	___fttol@f1+2,??___fttol+3
 10694  003C2A  0100               	movlb	0	; () banked
 10695  003C2C  29CA               	incf	??___fttol& (0+255),w,b
 10696  003C2E  0100               	movlb	0	; () banked
 10697  003C30  6FCE               	movwf	(??___fttol+4)& (0+255),b
 10698  003C32  D005               	goto	u4880
 10699  003C34                     u4885:
 10700  003C34  0100               	movlb	0	; () banked
 10701  003C36  90D8               	bcf	status,0,c
 10702  003C38  33CD               	rrcf	(??___fttol+3)& (0+255),f,b
 10703  003C3A  33CC               	rrcf	(??___fttol+2)& (0+255),f,b
 10704  003C3C  33CB               	rrcf	(??___fttol+1)& (0+255),f,b
 10705  003C3E                     u4880:
 10706  003C3E  0100               	movlb	0	; () banked
 10707  003C40  2FCE               	decfsz	(??___fttol+4)& (0+255),f,b
 10708  003C42  D7F8               	goto	u4885
 10709  003C44  0100               	movlb	0	; () banked
 10710  003C46  51CB               	movf	(??___fttol+1)& (0+255),w,b
 10711  003C48  0100               	movlb	0	; () banked
 10712  003C4A  6FCF               	movwf	___fttol@sign1& (0+255),b
 10713                           
 10714                           ; BSR set to: 0
 10715  003C4C  0100               	movlb	0	; () banked
 10716  003C4E  8FC7               	bsf	(___fttol@f1+1)& (0+255),7,b
 10717                           
 10718                           ; BSR set to: 0
 10719  003C50  0EFF               	movlw	255
 10720  003C52  0100               	movlb	0	; () banked
 10721  003C54  17C6               	andwf	___fttol@f1& (0+255),f,b
 10722  003C56  0EFF               	movlw	255
 10723  003C58  0100               	movlb	0	; () banked
 10724  003C5A  17C7               	andwf	(___fttol@f1+1)& (0+255),f,b
 10725  003C5C  0E00               	movlw	0
 10726  003C5E  0100               	movlb	0	; () banked
 10727  003C60  17C8               	andwf	(___fttol@f1+2)& (0+255),f,b
 10728                           
 10729                           ; BSR set to: 0
 10730  003C62  0100               	movlb	0	; () banked
 10731  003C64  51C6               	movf	___fttol@f1& (0+255),w,b
 10732  003C66  0100               	movlb	0	; () banked
 10733  003C68  6FD0               	movwf	___fttol@lval& (0+255),b
 10734  003C6A  0100               	movlb	0	; () banked
 10735  003C6C  51C7               	movf	(___fttol@f1+1)& (0+255),w,b
 10736  003C6E  0100               	movlb	0	; () banked
 10737  003C70  6FD1               	movwf	(___fttol@lval+1)& (0+255),b
 10738  003C72  0100               	movlb	0	; () banked
 10739  003C74  51C8               	movf	(___fttol@f1+2)& (0+255),w,b
 10740  003C76  0100               	movlb	0	; () banked
 10741  003C78  6FD2               	movwf	(___fttol@lval+2)& (0+255),b
 10742  003C7A  0100               	movlb	0	; () banked
 10743  003C7C  6BD3               	clrf	(___fttol@lval+3)& (0+255),b
 10744                           
 10745                           ; BSR set to: 0
 10746  003C7E  0E8E               	movlw	142
 10747  003C80  0100               	movlb	0	; () banked
 10748  003C82  5FD4               	subwf	___fttol@exp1& (0+255),f,b
 10749                           
 10750                           ; BSR set to: 0
 10751  003C84  0100               	movlb	0	; () banked
 10752  003C86  AFD4               	btfss	___fttol@exp1& (0+255),7,b
 10753  003C88  D01A               	goto	l4915
 10754                           
 10755                           ; BSR set to: 0
 10756  003C8A  0100               	movlb	0	; () banked
 10757  003C8C  51D4               	movf	___fttol@exp1& (0+255),w,b
 10758  003C8E  0A80               	xorlw	128
 10759  003C90  0F8F               	addlw	143
 10760  003C92  B0D8               	btfsc	status,0,c
 10761  003C94  D00A               	goto	l4911
 10762                           
 10763                           ; BSR set to: 0
 10764  003C96  0E00               	movlw	0
 10765  003C98  0100               	movlb	0	; () banked
 10766  003C9A  6FC6               	movwf	?___fttol& (0+255),b
 10767  003C9C  0E00               	movlw	0
 10768  003C9E  6FC7               	movwf	(?___fttol+1)& (0+255),b
 10769  003CA0  0E00               	movlw	0
 10770  003CA2  6FC8               	movwf	(?___fttol+2)& (0+255),b
 10771  003CA4  0E00               	movlw	0
 10772  003CA6  6FC9               	movwf	(?___fttol+3)& (0+255),b
 10773                           
 10774                           ; BSR set to: 0
 10775  003CA8  0012               	return	
 10776  003CAA                     l4911:
 10777                           
 10778                           ; BSR set to: 0
 10779  003CAA  0100               	movlb	0	; () banked
 10780  003CAC  90D8               	bcf	status,0,c
 10781  003CAE  33D3               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10782  003CB0  33D2               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10783  003CB2  33D1               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10784  003CB4  33D0               	rrcf	___fttol@lval& (0+255),f,b
 10785                           
 10786                           ; BSR set to: 0
 10787  003CB6  0100               	movlb	0	; () banked
 10788  003CB8  3FD4               	incfsz	___fttol@exp1& (0+255),f,b
 10789  003CBA  D7F7               	goto	l4911
 10790                           
 10791                           ; BSR set to: 0
 10792  003CBC  D01B               	goto	l4925
 10793  003CBE                     l4915:
 10794                           
 10795                           ; BSR set to: 0
 10796  003CBE  0E17               	movlw	23
 10797  003CC0  0100               	movlb	0	; () banked
 10798  003CC2  65D4               	cpfsgt	___fttol@exp1& (0+255),b
 10799  003CC4  D012               	goto	l4923
 10800                           
 10801                           ; BSR set to: 0
 10802  003CC6  0E00               	movlw	0
 10803  003CC8  0100               	movlb	0	; () banked
 10804  003CCA  6FC6               	movwf	?___fttol& (0+255),b
 10805  003CCC  0E00               	movlw	0
 10806  003CCE  6FC7               	movwf	(?___fttol+1)& (0+255),b
 10807  003CD0  0E00               	movlw	0
 10808  003CD2  6FC8               	movwf	(?___fttol+2)& (0+255),b
 10809  003CD4  0E00               	movlw	0
 10810  003CD6  6FC9               	movwf	(?___fttol+3)& (0+255),b
 10811                           
 10812                           ; BSR set to: 0
 10813  003CD8  0012               	return	
 10814  003CDA                     l4921:
 10815                           
 10816                           ; BSR set to: 0
 10817  003CDA  0100               	movlb	0	; () banked
 10818  003CDC  90D8               	bcf	status,0,c
 10819  003CDE  37D0               	rlcf	___fttol@lval& (0+255),f,b
 10820  003CE0  37D1               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10821  003CE2  37D2               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10822  003CE4  37D3               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10823  003CE6  0100               	movlb	0	; () banked
 10824  003CE8  07D4               	decf	___fttol@exp1& (0+255),f,b
 10825  003CEA                     l4923:
 10826                           
 10827                           ; BSR set to: 0
 10828  003CEA  0100               	movlb	0	; () banked
 10829  003CEC  51D4               	movf	___fttol@exp1& (0+255),w,b
 10830  003CEE  0100               	movlb	0	; () banked
 10831  003CF0  A4D8               	btfss	status,2,c
 10832  003CF2  D7F3               	goto	l4921
 10833  003CF4                     l4925:
 10834                           
 10835                           ; BSR set to: 0
 10836  003CF4  0100               	movlb	0	; () banked
 10837  003CF6  51CF               	movf	___fttol@sign1& (0+255),w,b
 10838  003CF8  0100               	movlb	0	; () banked
 10839  003CFA  B4D8               	btfsc	status,2,c
 10840  003CFC  D009               	goto	l4929
 10841                           
 10842                           ; BSR set to: 0
 10843  003CFE  0100               	movlb	0	; () banked
 10844  003D00  1FD3               	comf	(___fttol@lval+3)& (0+255),f,b
 10845  003D02  1FD2               	comf	(___fttol@lval+2)& (0+255),f,b
 10846  003D04  1FD1               	comf	(___fttol@lval+1)& (0+255),f,b
 10847  003D06  6DD0               	negf	___fttol@lval& (0+255),b
 10848  003D08  0E00               	movlw	0
 10849  003D0A  23D1               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10850  003D0C  23D2               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10851  003D0E  23D3               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10852  003D10                     l4929:
 10853                           
 10854                           ; BSR set to: 0
 10855  003D10  C0D0  F0C6         	movff	___fttol@lval,?___fttol
 10856  003D14  C0D1  F0C7         	movff	___fttol@lval+1,?___fttol+1
 10857  003D18  C0D2  F0C8         	movff	___fttol@lval+2,?___fttol+2
 10858  003D1C  C0D3  F0C9         	movff	___fttol@lval+3,?___fttol+3
 10859  003D20  0012               	return	
 10860  003D22                     __end_of___fttol:
 10861                           	opt stack 0
 10862                           tblptru	equ	0xFF8
 10863                           tblptrh	equ	0xFF7
 10864                           tblptrl	equ	0xFF6
 10865                           tablat	equ	0xFF5
 10866                           prodh	equ	0xFF4
 10867                           prodl	equ	0xFF3
 10868                           intcon	equ	0xFF2
 10869                           postinc0	equ	0xFEE
 10870                           wreg	equ	0xFE8
 10871                           postdec1	equ	0xFE5
 10872                           fsr1l	equ	0xFE1
 10873                           indf2	equ	0xFDF
 10874                           postinc2	equ	0xFDE
 10875                           postdec2	equ	0xFDD
 10876                           fsr2h	equ	0xFDA
 10877                           fsr2l	equ	0xFD9
 10878                           status	equ	0xFD8
 10879                           
 10880 ;; *************** function ___ftmul *****************
 10881 ;; Defined at:
 10882 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10883 ;; Parameters:    Size  Location     Type
 10884 ;;  f1              3   33[BANK0 ] float 
 10885 ;;  f2              3   36[BANK0 ] float 
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;  f3_as_produc    3   43[BANK0 ] unsigned um
 10888 ;;  sign            1   47[BANK0 ] unsigned char 
 10889 ;;  cntr            1   46[BANK0 ] unsigned char 
 10890 ;;  exp             1   42[BANK0 ] unsigned char 
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  3   33[BANK0 ] float 
 10893 ;; Registers used:
 10894 ;;		wreg, status,2, status,0, cstack
 10895 ;; Tracked objects:
 10896 ;;		On entry : 0/0
 10897 ;;		On exit  : 0/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10900 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;Total ram usage:       15 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; Hardware stack levels required when called:    7
 10907 ;; This function calls:
 10908 ;;		___ftpack
 10909 ;; This function is called by:
 10910 ;;		_sortBattery
 10911 ;;		_angleToPulse
 10912 ;;		_fround
 10913 ;;		_scale
 10914 ;;		_printf
 10915 ;; This function uses a non-reentrant model
 10916 ;;
 10917                           
 10918                           	psect	text32
 10919  003934                     __ptext32:
 10920                           	opt stack 0
 10921  003934                     ___ftmul:
 10922                           	opt stack 20
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;incstack = 0
 10926  003934  C0A3  F0A7         	movff	___ftmul@f1+2,??___ftmul
 10927  003938  0100               	movlb	0	; () banked
 10928  00393A  6BA8               	clrf	(??___ftmul+1)& (0+255),b
 10929  00393C  6BA9               	clrf	(??___ftmul+2)& (0+255),b
 10930  00393E  0100               	movlb	0	; () banked
 10931  003940  35A2               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10932  003942  0100               	movlb	0	; () banked
 10933  003944  37A7               	rlcf	??___ftmul& (0+255),f,b
 10934  003946  E301               	bnc	u4671
 10935  003948  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 10936  00394A                     u4671:
 10937  00394A  0100               	movlb	0	; () banked
 10938  00394C  51A7               	movf	??___ftmul& (0+255),w,b
 10939  00394E  0100               	movlb	0	; () banked
 10940  003950  6FAA               	movwf	___ftmul@exp& (0+255),b
 10941  003952  0100               	movlb	0	; () banked
 10942  003954  51AA               	movf	___ftmul@exp& (0+255),w,b
 10943  003956  A4D8               	btfss	status,2,c
 10944  003958  D00A               	goto	l4753
 10945                           
 10946                           ; BSR set to: 0
 10947  00395A  0E00               	movlw	0
 10948  00395C  0100               	movlb	0	; () banked
 10949  00395E  6FA1               	movwf	?___ftmul& (0+255),b
 10950  003960  0E00               	movlw	0
 10951  003962  0100               	movlb	0	; () banked
 10952  003964  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 10953  003966  0E00               	movlw	0
 10954  003968  0100               	movlb	0	; () banked
 10955  00396A  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 10956                           
 10957                           ; BSR set to: 0
 10958  00396C  0012               	return	
 10959  00396E                     l4753:
 10960                           
 10961                           ; BSR set to: 0
 10962  00396E  C0A6  F0A7         	movff	___ftmul@f2+2,??___ftmul
 10963  003972  0100               	movlb	0	; () banked
 10964  003974  6BA8               	clrf	(??___ftmul+1)& (0+255),b
 10965  003976  6BA9               	clrf	(??___ftmul+2)& (0+255),b
 10966  003978  0100               	movlb	0	; () banked
 10967  00397A  35A5               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10968  00397C  0100               	movlb	0	; () banked
 10969  00397E  37A7               	rlcf	??___ftmul& (0+255),f,b
 10970  003980  E301               	bnc	u4691
 10971  003982  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 10972  003984                     u4691:
 10973  003984  0100               	movlb	0	; () banked
 10974  003986  51A7               	movf	??___ftmul& (0+255),w,b
 10975  003988  0100               	movlb	0	; () banked
 10976  00398A  6FAF               	movwf	___ftmul@sign& (0+255),b
 10977  00398C  0100               	movlb	0	; () banked
 10978  00398E  51AF               	movf	___ftmul@sign& (0+255),w,b
 10979  003990  A4D8               	btfss	status,2,c
 10980  003992  D00A               	goto	l4759
 10981                           
 10982                           ; BSR set to: 0
 10983  003994  0E00               	movlw	0
 10984  003996  0100               	movlb	0	; () banked
 10985  003998  6FA1               	movwf	?___ftmul& (0+255),b
 10986  00399A  0E00               	movlw	0
 10987  00399C  0100               	movlb	0	; () banked
 10988  00399E  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 10989  0039A0  0E00               	movlw	0
 10990  0039A2  0100               	movlb	0	; () banked
 10991  0039A4  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 10992                           
 10993                           ; BSR set to: 0
 10994  0039A6  0012               	return	
 10995  0039A8                     l4759:
 10996                           
 10997                           ; BSR set to: 0
 10998  0039A8  0100               	movlb	0	; () banked
 10999  0039AA  51AF               	movf	___ftmul@sign& (0+255),w,b
 11000  0039AC  0F7B               	addlw	123
 11001  0039AE  0100               	movlb	0	; () banked
 11002  0039B0  27AA               	addwf	___ftmul@exp& (0+255),f,b
 11003                           
 11004                           ; BSR set to: 0
 11005  0039B2  C0A3  F0AF         	movff	___ftmul@f1+2,___ftmul@sign
 11006  0039B6  0100               	movlb	0	; () banked
 11007  0039B8  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 11008  0039BA  0100               	movlb	0	; () banked
 11009  0039BC  1BAF               	xorwf	___ftmul@sign& (0+255),f,b
 11010  0039BE  0E80               	movlw	128
 11011  0039C0  0100               	movlb	0	; () banked
 11012  0039C2  17AF               	andwf	___ftmul@sign& (0+255),f,b
 11013                           
 11014                           ; BSR set to: 0
 11015  0039C4  0100               	movlb	0	; () banked
 11016  0039C6  8FA2               	bsf	(___ftmul@f1+1)& (0+255),7,b
 11017                           
 11018                           ; BSR set to: 0
 11019  0039C8  0100               	movlb	0	; () banked
 11020  0039CA  8FA5               	bsf	(___ftmul@f2+1)& (0+255),7,b
 11021                           
 11022                           ; BSR set to: 0
 11023  0039CC  0EFF               	movlw	255
 11024  0039CE  0100               	movlb	0	; () banked
 11025  0039D0  17A4               	andwf	___ftmul@f2& (0+255),f,b
 11026  0039D2  0EFF               	movlw	255
 11027  0039D4  0100               	movlb	0	; () banked
 11028  0039D6  17A5               	andwf	(___ftmul@f2+1)& (0+255),f,b
 11029  0039D8  0E00               	movlw	0
 11030  0039DA  0100               	movlb	0	; () banked
 11031  0039DC  17A6               	andwf	(___ftmul@f2+2)& (0+255),f,b
 11032                           
 11033                           ; BSR set to: 0
 11034  0039DE  0E00               	movlw	0
 11035  0039E0  0100               	movlb	0	; () banked
 11036  0039E2  6FAB               	movwf	___ftmul@f3_as_product& (0+255),b
 11037  0039E4  0E00               	movlw	0
 11038  0039E6  0100               	movlb	0	; () banked
 11039  0039E8  6FAC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 11040  0039EA  0E00               	movlw	0
 11041  0039EC  0100               	movlb	0	; () banked
 11042  0039EE  6FAD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 11043                           
 11044                           ; BSR set to: 0
 11045  0039F0  0E07               	movlw	7
 11046  0039F2  0100               	movlb	0	; () banked
 11047  0039F4  6FAE               	movwf	___ftmul@cntr& (0+255),b
 11048  0039F6                     l4773:
 11049                           
 11050                           ; BSR set to: 0
 11051  0039F6  0100               	movlb	0	; () banked
 11052  0039F8  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 11053  0039FA  D00C               	goto	l4777
 11054                           
 11055                           ; BSR set to: 0
 11056  0039FC  0100               	movlb	0	; () banked
 11057  0039FE  51A4               	movf	___ftmul@f2& (0+255),w,b
 11058  003A00  0100               	movlb	0	; () banked
 11059  003A02  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11060  003A04  0100               	movlb	0	; () banked
 11061  003A06  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 11062  003A08  0100               	movlb	0	; () banked
 11063  003A0A  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11064  003A0C  0100               	movlb	0	; () banked
 11065  003A0E  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 11066  003A10  0100               	movlb	0	; () banked
 11067  003A12  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11068  003A14                     l4777:
 11069                           
 11070                           ; BSR set to: 0
 11071  003A14  0100               	movlb	0	; () banked
 11072  003A16  90D8               	bcf	status,0,c
 11073  003A18  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11074  003A1A  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11075  003A1C  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 11076  003A1E  0100               	movlb	0	; () banked
 11077  003A20  90D8               	bcf	status,0,c
 11078  003A22  37A4               	rlcf	___ftmul@f2& (0+255),f,b
 11079  003A24  37A5               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 11080  003A26  37A6               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 11081                           
 11082                           ; BSR set to: 0
 11083  003A28  0100               	movlb	0	; () banked
 11084  003A2A  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 11085  003A2C  D7E4               	goto	l4773
 11086                           
 11087                           ; BSR set to: 0
 11088                           
 11089                           ; BSR set to: 0
 11090  003A2E  0E09               	movlw	9
 11091  003A30  0100               	movlb	0	; () banked
 11092  003A32  6FAE               	movwf	___ftmul@cntr& (0+255),b
 11093  003A34                     l4783:
 11094                           
 11095                           ; BSR set to: 0
 11096  003A34  0100               	movlb	0	; () banked
 11097  003A36  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 11098  003A38  D00C               	goto	l4787
 11099                           
 11100                           ; BSR set to: 0
 11101  003A3A  0100               	movlb	0	; () banked
 11102  003A3C  51A4               	movf	___ftmul@f2& (0+255),w,b
 11103  003A3E  0100               	movlb	0	; () banked
 11104  003A40  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11105  003A42  0100               	movlb	0	; () banked
 11106  003A44  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 11107  003A46  0100               	movlb	0	; () banked
 11108  003A48  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11109  003A4A  0100               	movlb	0	; () banked
 11110  003A4C  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 11111  003A4E  0100               	movlb	0	; () banked
 11112  003A50  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11113  003A52                     l4787:
 11114                           
 11115                           ; BSR set to: 0
 11116  003A52  0100               	movlb	0	; () banked
 11117  003A54  90D8               	bcf	status,0,c
 11118  003A56  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11119  003A58  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11120  003A5A  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 11121  003A5C  0100               	movlb	0	; () banked
 11122  003A5E  90D8               	bcf	status,0,c
 11123  003A60  33AD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 11124  003A62  33AC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 11125  003A64  33AB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 11126                           
 11127                           ; BSR set to: 0
 11128  003A66  0100               	movlb	0	; () banked
 11129  003A68  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 11130  003A6A  D7E4               	goto	l4783
 11131                           
 11132                           ; BSR set to: 0
 11133                           
 11134                           ; BSR set to: 0
 11135  003A6C  C0AB  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
 11136  003A70  C0AC  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11137  003A74  C0AD  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11138  003A78  C0AA  F083         	movff	___ftmul@exp,___ftpack@exp
 11139  003A7C  C0AF  F084         	movff	___ftmul@sign,___ftpack@sign
 11140  003A80  EC80  F021         	call	___ftpack	;wreg free
 11141  003A84  C080  F0A1         	movff	?___ftpack,?___ftmul
 11142  003A88  C081  F0A2         	movff	?___ftpack+1,?___ftmul+1
 11143  003A8C  C082  F0A3         	movff	?___ftpack+2,?___ftmul+2
 11144  003A90  0012               	return	
 11145  003A92                     __end_of___ftmul:
 11146                           	opt stack 0
 11147                           tblptru	equ	0xFF8
 11148                           tblptrh	equ	0xFF7
 11149                           tblptrl	equ	0xFF6
 11150                           tablat	equ	0xFF5
 11151                           prodh	equ	0xFF4
 11152                           prodl	equ	0xFF3
 11153                           intcon	equ	0xFF2
 11154                           postinc0	equ	0xFEE
 11155                           wreg	equ	0xFE8
 11156                           postdec1	equ	0xFE5
 11157                           fsr1l	equ	0xFE1
 11158                           indf2	equ	0xFDF
 11159                           postinc2	equ	0xFDE
 11160                           postdec2	equ	0xFDD
 11161                           fsr2h	equ	0xFDA
 11162                           fsr2l	equ	0xFD9
 11163                           status	equ	0xFD8
 11164                           
 11165 ;; *************** function ___ftdiv *****************
 11166 ;; Defined at:
 11167 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;  f1              3   18[BANK0 ] float 
 11170 ;;  f2              3   21[BANK0 ] float 
 11171 ;; Auto vars:     Size  Location     Type
 11172 ;;  f3              3   28[BANK0 ] float 
 11173 ;;  sign            1   32[BANK0 ] unsigned char 
 11174 ;;  exp             1   31[BANK0 ] unsigned char 
 11175 ;;  cntr            1   27[BANK0 ] unsigned char 
 11176 ;; Return value:  Size  Location     Type
 11177 ;;                  3   18[BANK0 ] float 
 11178 ;; Registers used:
 11179 ;;		wreg, status,2, status,0, cstack
 11180 ;; Tracked objects:
 11181 ;;		On entry : 0/0
 11182 ;;		On exit  : 0/0
 11183 ;;		Unchanged: 0/0
 11184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11185 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11186 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11187 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11188 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11189 ;;Total ram usage:       15 bytes
 11190 ;; Hardware stack levels used:    1
 11191 ;; Hardware stack levels required when called:    7
 11192 ;; This function calls:
 11193 ;;		___ftpack
 11194 ;; This function is called by:
 11195 ;;		_sortBattery
 11196 ;;		_angleToPulse
 11197 ;; This function uses a non-reentrant model
 11198 ;;
 11199                           
 11200                           	psect	text33
 11201  003A92                     __ptext33:
 11202                           	opt stack 0
 11203  003A92                     ___ftdiv:
 11204                           	opt stack 20
 11205                           
 11206                           ;incstack = 0
 11207  003A92  C094  F098         	movff	___ftdiv@f1+2,??___ftdiv
 11208  003A96  0100               	movlb	0	; () banked
 11209  003A98  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 11210  003A9A  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 11211  003A9C  0100               	movlb	0	; () banked
 11212  003A9E  3593               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 11213  003AA0  0100               	movlb	0	; () banked
 11214  003AA2  3798               	rlcf	??___ftdiv& (0+255),f,b
 11215  003AA4  E301               	bnc	u4621
 11216  003AA6  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 11217  003AA8                     u4621:
 11218  003AA8  0100               	movlb	0	; () banked
 11219  003AAA  5198               	movf	??___ftdiv& (0+255),w,b
 11220  003AAC  0100               	movlb	0	; () banked
 11221  003AAE  6F9F               	movwf	___ftdiv@exp& (0+255),b
 11222  003AB0  0100               	movlb	0	; () banked
 11223  003AB2  519F               	movf	___ftdiv@exp& (0+255),w,b
 11224  003AB4  A4D8               	btfss	status,2,c
 11225  003AB6  D00A               	goto	l4707
 11226                           
 11227                           ; BSR set to: 0
 11228  003AB8  0E00               	movlw	0
 11229  003ABA  0100               	movlb	0	; () banked
 11230  003ABC  6F92               	movwf	?___ftdiv& (0+255),b
 11231  003ABE  0E00               	movlw	0
 11232  003AC0  0100               	movlb	0	; () banked
 11233  003AC2  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 11234  003AC4  0E00               	movlw	0
 11235  003AC6  0100               	movlb	0	; () banked
 11236  003AC8  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 11237                           
 11238                           ; BSR set to: 0
 11239  003ACA  0012               	return	
 11240  003ACC                     l4707:
 11241                           
 11242                           ; BSR set to: 0
 11243  003ACC  C097  F098         	movff	___ftdiv@f2+2,??___ftdiv
 11244  003AD0  0100               	movlb	0	; () banked
 11245  003AD2  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 11246  003AD4  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 11247  003AD6  0100               	movlb	0	; () banked
 11248  003AD8  3596               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 11249  003ADA  0100               	movlb	0	; () banked
 11250  003ADC  3798               	rlcf	??___ftdiv& (0+255),f,b
 11251  003ADE  E301               	bnc	u4641
 11252  003AE0  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 11253  003AE2                     u4641:
 11254  003AE2  0100               	movlb	0	; () banked
 11255  003AE4  5198               	movf	??___ftdiv& (0+255),w,b
 11256  003AE6  0100               	movlb	0	; () banked
 11257  003AE8  6FA0               	movwf	___ftdiv@sign& (0+255),b
 11258  003AEA  0100               	movlb	0	; () banked
 11259  003AEC  51A0               	movf	___ftdiv@sign& (0+255),w,b
 11260  003AEE  A4D8               	btfss	status,2,c
 11261  003AF0  D00A               	goto	l4713
 11262                           
 11263                           ; BSR set to: 0
 11264  003AF2  0E00               	movlw	0
 11265  003AF4  0100               	movlb	0	; () banked
 11266  003AF6  6F92               	movwf	?___ftdiv& (0+255),b
 11267  003AF8  0E00               	movlw	0
 11268  003AFA  0100               	movlb	0	; () banked
 11269  003AFC  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 11270  003AFE  0E00               	movlw	0
 11271  003B00  0100               	movlb	0	; () banked
 11272  003B02  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 11273                           
 11274                           ; BSR set to: 0
 11275  003B04  0012               	return	
 11276  003B06                     l4713:
 11277                           
 11278                           ; BSR set to: 0
 11279  003B06  0E00               	movlw	0
 11280  003B08  0100               	movlb	0	; () banked
 11281  003B0A  6F9C               	movwf	___ftdiv@f3& (0+255),b
 11282  003B0C  0E00               	movlw	0
 11283  003B0E  0100               	movlb	0	; () banked
 11284  003B10  6F9D               	movwf	(___ftdiv@f3+1)& (0+255),b
 11285  003B12  0E00               	movlw	0
 11286  003B14  0100               	movlb	0	; () banked
 11287  003B16  6F9E               	movwf	(___ftdiv@f3+2)& (0+255),b
 11288                           
 11289                           ; BSR set to: 0
 11290  003B18  0100               	movlb	0	; () banked
 11291  003B1A  51A0               	movf	___ftdiv@sign& (0+255),w,b
 11292  003B1C  0F89               	addlw	137
 11293  003B1E  0100               	movlb	0	; () banked
 11294  003B20  5F9F               	subwf	___ftdiv@exp& (0+255),f,b
 11295                           
 11296                           ; BSR set to: 0
 11297  003B22  C094  F0A0         	movff	___ftdiv@f1+2,___ftdiv@sign
 11298                           
 11299                           ; BSR set to: 0
 11300  003B26  0100               	movlb	0	; () banked
 11301  003B28  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11302  003B2A  0100               	movlb	0	; () banked
 11303  003B2C  1BA0               	xorwf	___ftdiv@sign& (0+255),f,b
 11304                           
 11305                           ; BSR set to: 0
 11306  003B2E  0E80               	movlw	128
 11307  003B30  0100               	movlb	0	; () banked
 11308  003B32  17A0               	andwf	___ftdiv@sign& (0+255),f,b
 11309                           
 11310                           ; BSR set to: 0
 11311  003B34  0100               	movlb	0	; () banked
 11312  003B36  8F93               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 11313                           
 11314                           ; BSR set to: 0
 11315  003B38  0EFF               	movlw	255
 11316  003B3A  0100               	movlb	0	; () banked
 11317  003B3C  1792               	andwf	___ftdiv@f1& (0+255),f,b
 11318  003B3E  0EFF               	movlw	255
 11319  003B40  0100               	movlb	0	; () banked
 11320  003B42  1793               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 11321  003B44  0E00               	movlw	0
 11322  003B46  0100               	movlb	0	; () banked
 11323  003B48  1794               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 11324                           
 11325                           ; BSR set to: 0
 11326  003B4A  0100               	movlb	0	; () banked
 11327  003B4C  8F96               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 11328                           
 11329                           ; BSR set to: 0
 11330  003B4E  0EFF               	movlw	255
 11331  003B50  0100               	movlb	0	; () banked
 11332  003B52  1795               	andwf	___ftdiv@f2& (0+255),f,b
 11333  003B54  0EFF               	movlw	255
 11334  003B56  0100               	movlb	0	; () banked
 11335  003B58  1796               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 11336  003B5A  0E00               	movlw	0
 11337  003B5C  0100               	movlb	0	; () banked
 11338  003B5E  1797               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 11339                           
 11340                           ; BSR set to: 0
 11341  003B60  0E18               	movlw	24
 11342  003B62  0100               	movlb	0	; () banked
 11343  003B64  6F9B               	movwf	___ftdiv@cntr& (0+255),b
 11344  003B66                     l4733:
 11345                           
 11346                           ; BSR set to: 0
 11347  003B66  0100               	movlb	0	; () banked
 11348  003B68  90D8               	bcf	status,0,c
 11349  003B6A  379C               	rlcf	___ftdiv@f3& (0+255),f,b
 11350  003B6C  379D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 11351  003B6E  379E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 11352                           
 11353                           ; BSR set to: 0
 11354  003B70  0100               	movlb	0	; () banked
 11355  003B72  5195               	movf	___ftdiv@f2& (0+255),w,b
 11356  003B74  0100               	movlb	0	; () banked
 11357  003B76  5D92               	subwf	___ftdiv@f1& (0+255),w,b
 11358  003B78  0100               	movlb	0	; () banked
 11359  003B7A  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11360  003B7C  0100               	movlb	0	; () banked
 11361  003B7E  5993               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 11362  003B80  0100               	movlb	0	; () banked
 11363  003B82  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11364  003B84  0100               	movlb	0	; () banked
 11365  003B86  5994               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 11366  003B88  A0D8               	btfss	status,0,c
 11367  003B8A  D00E               	goto	l1114
 11368                           
 11369                           ; BSR set to: 0
 11370  003B8C  0100               	movlb	0	; () banked
 11371  003B8E  5195               	movf	___ftdiv@f2& (0+255),w,b
 11372  003B90  0100               	movlb	0	; () banked
 11373  003B92  5F92               	subwf	___ftdiv@f1& (0+255),f,b
 11374  003B94  0100               	movlb	0	; () banked
 11375  003B96  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11376  003B98  0100               	movlb	0	; () banked
 11377  003B9A  5B93               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 11378  003B9C  0100               	movlb	0	; () banked
 11379  003B9E  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11380  003BA0  0100               	movlb	0	; () banked
 11381  003BA2  5B94               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 11382                           
 11383                           ; BSR set to: 0
 11384  003BA4  0100               	movlb	0	; () banked
 11385  003BA6  819C               	bsf	___ftdiv@f3& (0+255),0,b
 11386  003BA8                     l1114:
 11387                           
 11388                           ; BSR set to: 0
 11389  003BA8  0100               	movlb	0	; () banked
 11390  003BAA  90D8               	bcf	status,0,c
 11391  003BAC  3792               	rlcf	___ftdiv@f1& (0+255),f,b
 11392  003BAE  3793               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 11393  003BB0  3794               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 11394                           
 11395                           ; BSR set to: 0
 11396  003BB2  0100               	movlb	0	; () banked
 11397  003BB4  2F9B               	decfsz	___ftdiv@cntr& (0+255),f,b
 11398  003BB6  D7D7               	goto	l4733
 11399                           
 11400                           ; BSR set to: 0
 11401                           
 11402                           ; BSR set to: 0
 11403  003BB8  C09C  F080         	movff	___ftdiv@f3,___ftpack@arg
 11404  003BBC  C09D  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11405  003BC0  C09E  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11406  003BC4  C09F  F083         	movff	___ftdiv@exp,___ftpack@exp
 11407  003BC8  C0A0  F084         	movff	___ftdiv@sign,___ftpack@sign
 11408  003BCC  EC80  F021         	call	___ftpack	;wreg free
 11409  003BD0  C080  F092         	movff	?___ftpack,?___ftdiv
 11410  003BD4  C081  F093         	movff	?___ftpack+1,?___ftdiv+1
 11411  003BD8  C082  F094         	movff	?___ftpack+2,?___ftdiv+2
 11412  003BDC  0012               	return	
 11413  003BDE                     __end_of___ftdiv:
 11414                           	opt stack 0
 11415                           tblptru	equ	0xFF8
 11416                           tblptrh	equ	0xFF7
 11417                           tblptrl	equ	0xFF6
 11418                           tablat	equ	0xFF5
 11419                           prodh	equ	0xFF4
 11420                           prodl	equ	0xFF3
 11421                           intcon	equ	0xFF2
 11422                           postinc0	equ	0xFEE
 11423                           wreg	equ	0xFE8
 11424                           postdec1	equ	0xFE5
 11425                           fsr1l	equ	0xFE1
 11426                           indf2	equ	0xFDF
 11427                           postinc2	equ	0xFDE
 11428                           postdec2	equ	0xFDD
 11429                           fsr2h	equ	0xFDA
 11430                           fsr2l	equ	0xFD9
 11431                           status	equ	0xFD8
 11432                           
 11433 ;; *************** function ___ftadd *****************
 11434 ;; Defined at:
 11435 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11436 ;; Parameters:    Size  Location     Type
 11437 ;;  f1              3   58[BANK0 ] float 
 11438 ;;  f2              3   61[BANK0 ] float 
 11439 ;; Auto vars:     Size  Location     Type
 11440 ;;  exp1            1   69[BANK0 ] unsigned char 
 11441 ;;  exp2            1   68[BANK0 ] unsigned char 
 11442 ;;  sign            1   67[BANK0 ] unsigned char 
 11443 ;; Return value:  Size  Location     Type
 11444 ;;                  3   58[BANK0 ] float 
 11445 ;; Registers used:
 11446 ;;		wreg, status,2, status,0, cstack
 11447 ;; Tracked objects:
 11448 ;;		On entry : 0/0
 11449 ;;		On exit  : 0/0
 11450 ;;		Unchanged: 0/0
 11451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11452 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11453 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11454 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;Total ram usage:       12 bytes
 11457 ;; Hardware stack levels used:    1
 11458 ;; Hardware stack levels required when called:    7
 11459 ;; This function calls:
 11460 ;;		___ftpack
 11461 ;; This function is called by:
 11462 ;;		_angleToPulse
 11463 ;;		_printf
 11464 ;;		___ftsub
 11465 ;; This function uses a non-reentrant model
 11466 ;;
 11467                           
 11468                           	psect	text34
 11469  002E4E                     __ptext34:
 11470                           	opt stack 0
 11471  002E4E                     ___ftadd:
 11472                           	opt stack 20
 11473                           
 11474                           ;incstack = 0
 11475  002E4E  C0BC  F0C0         	movff	___ftadd@f1+2,??___ftadd
 11476  002E52  0100               	movlb	0	; () banked
 11477  002E54  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 11478  002E56  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 11479  002E58  0100               	movlb	0	; () banked
 11480  002E5A  35BB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11481  002E5C  0100               	movlb	0	; () banked
 11482  002E5E  37C0               	rlcf	??___ftadd& (0+255),f,b
 11483  002E60  E301               	bnc	u4411
 11484  002E62  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 11485  002E64                     u4411:
 11486  002E64  0100               	movlb	0	; () banked
 11487  002E66  51C0               	movf	??___ftadd& (0+255),w,b
 11488  002E68  0100               	movlb	0	; () banked
 11489  002E6A  6FC5               	movwf	___ftadd@exp1& (0+255),b
 11490  002E6C  C0BF  F0C0         	movff	___ftadd@f2+2,??___ftadd
 11491  002E70  0100               	movlb	0	; () banked
 11492  002E72  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 11493  002E74  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 11494  002E76  0100               	movlb	0	; () banked
 11495  002E78  35BE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11496  002E7A  0100               	movlb	0	; () banked
 11497  002E7C  37C0               	rlcf	??___ftadd& (0+255),f,b
 11498  002E7E  E301               	bnc	u4421
 11499  002E80  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 11500  002E82                     u4421:
 11501  002E82  0100               	movlb	0	; () banked
 11502  002E84  51C0               	movf	??___ftadd& (0+255),w,b
 11503  002E86  0100               	movlb	0	; () banked
 11504  002E88  6FC4               	movwf	___ftadd@exp2& (0+255),b
 11505                           
 11506                           ; BSR set to: 0
 11507  002E8A  0100               	movlb	0	; () banked
 11508  002E8C  51C5               	movf	___ftadd@exp1& (0+255),w,b
 11509  002E8E  0100               	movlb	0	; () banked
 11510  002E90  B4D8               	btfsc	status,2,c
 11511  002E92  D011               	goto	l1079
 11512                           
 11513                           ; BSR set to: 0
 11514  002E94  0100               	movlb	0	; () banked
 11515  002E96  51C4               	movf	___ftadd@exp2& (0+255),w,b
 11516  002E98  0100               	movlb	0	; () banked
 11517  002E9A  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 11518  002E9C  B0D8               	btfsc	status,0,c
 11519  002E9E  D012               	goto	l4639
 11520                           
 11521                           ; BSR set to: 0
 11522  002EA0  0100               	movlb	0	; () banked
 11523  002EA2  51C5               	movf	___ftadd@exp1& (0+255),w,b
 11524  002EA4  0800               	sublw	0
 11525  002EA6  0100               	movlb	0	; () banked
 11526  002EA8  25C4               	addwf	___ftadd@exp2& (0+255),w,b
 11527  002EAA  0100               	movlb	0	; () banked
 11528  002EAC  6FC0               	movwf	??___ftadd& (0+255),b
 11529  002EAE  0E18               	movlw	24
 11530  002EB0  0100               	movlb	0	; () banked
 11531  002EB2  65C0               	cpfsgt	??___ftadd& (0+255),b
 11532  002EB4  D007               	goto	l4639
 11533  002EB6                     l1079:
 11534                           
 11535                           ; BSR set to: 0
 11536  002EB6  C0BD  F0BA         	movff	___ftadd@f2,?___ftadd
 11537  002EBA  C0BE  F0BB         	movff	___ftadd@f2+1,?___ftadd+1
 11538  002EBE  C0BF  F0BC         	movff	___ftadd@f2+2,?___ftadd+2
 11539  002EC2  0012               	return	
 11540  002EC4                     l4639:
 11541                           
 11542                           ; BSR set to: 0
 11543  002EC4  0100               	movlb	0	; () banked
 11544  002EC6  51C4               	movf	___ftadd@exp2& (0+255),w,b
 11545  002EC8  0100               	movlb	0	; () banked
 11546  002ECA  B4D8               	btfsc	status,2,c
 11547  002ECC  D011               	goto	l1083
 11548                           
 11549                           ; BSR set to: 0
 11550  002ECE  0100               	movlb	0	; () banked
 11551  002ED0  51C5               	movf	___ftadd@exp1& (0+255),w,b
 11552  002ED2  0100               	movlb	0	; () banked
 11553  002ED4  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 11554  002ED6  B0D8               	btfsc	status,0,c
 11555  002ED8  D012               	goto	l4645
 11556                           
 11557                           ; BSR set to: 0
 11558  002EDA  0100               	movlb	0	; () banked
 11559  002EDC  51C4               	movf	___ftadd@exp2& (0+255),w,b
 11560  002EDE  0800               	sublw	0
 11561  002EE0  0100               	movlb	0	; () banked
 11562  002EE2  25C5               	addwf	___ftadd@exp1& (0+255),w,b
 11563  002EE4  0100               	movlb	0	; () banked
 11564  002EE6  6FC0               	movwf	??___ftadd& (0+255),b
 11565  002EE8  0E18               	movlw	24
 11566  002EEA  0100               	movlb	0	; () banked
 11567  002EEC  65C0               	cpfsgt	??___ftadd& (0+255),b
 11568  002EEE  D007               	goto	l4645
 11569  002EF0                     l1083:
 11570                           
 11571                           ; BSR set to: 0
 11572  002EF0  C0BA  F0BA         	movff	___ftadd@f1,?___ftadd
 11573  002EF4  C0BB  F0BB         	movff	___ftadd@f1+1,?___ftadd+1
 11574  002EF8  C0BC  F0BC         	movff	___ftadd@f1+2,?___ftadd+2
 11575  002EFC  0012               	return	
 11576  002EFE                     l4645:
 11577                           
 11578                           ; BSR set to: 0
 11579  002EFE  0E06               	movlw	6
 11580  002F00  0100               	movlb	0	; () banked
 11581  002F02  6FC3               	movwf	___ftadd@sign& (0+255),b
 11582                           
 11583                           ; BSR set to: 0
 11584  002F04  0100               	movlb	0	; () banked
 11585  002F06  AFBC               	btfss	(___ftadd@f1+2)& (0+255),7,b
 11586  002F08  D002               	goto	l4651
 11587                           
 11588                           ; BSR set to: 0
 11589  002F0A  0100               	movlb	0	; () banked
 11590  002F0C  8FC3               	bsf	___ftadd@sign& (0+255),7,b
 11591  002F0E                     l4651:
 11592                           
 11593                           ; BSR set to: 0
 11594  002F0E  0100               	movlb	0	; () banked
 11595  002F10  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11596  002F12  D002               	goto	l1085
 11597                           
 11598                           ; BSR set to: 0
 11599  002F14  0100               	movlb	0	; () banked
 11600  002F16  8DC3               	bsf	___ftadd@sign& (0+255),6,b
 11601  002F18                     l1085:
 11602                           
 11603                           ; BSR set to: 0
 11604  002F18  0100               	movlb	0	; () banked
 11605  002F1A  8FBB               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11606                           
 11607                           ; BSR set to: 0
 11608  002F1C  0EFF               	movlw	255
 11609  002F1E  0100               	movlb	0	; () banked
 11610  002F20  17BA               	andwf	___ftadd@f1& (0+255),f,b
 11611  002F22  0EFF               	movlw	255
 11612  002F24  0100               	movlb	0	; () banked
 11613  002F26  17BB               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11614  002F28  0E00               	movlw	0
 11615  002F2A  0100               	movlb	0	; () banked
 11616  002F2C  17BC               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11617  002F2E  0100               	movlb	0	; () banked
 11618  002F30  8FBE               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11619                           
 11620                           ; BSR set to: 0
 11621  002F32  0EFF               	movlw	255
 11622  002F34  0100               	movlb	0	; () banked
 11623  002F36  17BD               	andwf	___ftadd@f2& (0+255),f,b
 11624  002F38  0EFF               	movlw	255
 11625  002F3A  0100               	movlb	0	; () banked
 11626  002F3C  17BE               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11627  002F3E  0E00               	movlw	0
 11628  002F40  0100               	movlb	0	; () banked
 11629  002F42  17BF               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11630                           
 11631                           ; BSR set to: 0
 11632  002F44  0100               	movlb	0	; () banked
 11633  002F46  51C4               	movf	___ftadd@exp2& (0+255),w,b
 11634  002F48  0100               	movlb	0	; () banked
 11635  002F4A  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 11636  002F4C  B0D8               	btfsc	status,0,c
 11637  002F4E  D025               	goto	l4671
 11638  002F50                     l4661:
 11639                           
 11640                           ; BSR set to: 0
 11641  002F50  0100               	movlb	0	; () banked
 11642  002F52  90D8               	bcf	status,0,c
 11643  002F54  37BD               	rlcf	___ftadd@f2& (0+255),f,b
 11644  002F56  37BE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11645  002F58  37BF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11646  002F5A  0100               	movlb	0	; () banked
 11647  002F5C  07C4               	decf	___ftadd@exp2& (0+255),f,b
 11648                           
 11649                           ; BSR set to: 0
 11650  002F5E  0100               	movlb	0	; () banked
 11651  002F60  51C5               	movf	___ftadd@exp1& (0+255),w,b
 11652  002F62  0100               	movlb	0	; () banked
 11653  002F64  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 11654  002F66  B4D8               	btfsc	status,2,c
 11655  002F68  D011               	goto	l4669
 11656                           
 11657                           ; BSR set to: 0
 11658  002F6A  0100               	movlb	0	; () banked
 11659  002F6C  07C3               	decf	___ftadd@sign& (0+255),f,b
 11660  002F6E  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 11661  002F72  0E07               	movlw	7
 11662  002F74  0100               	movlb	0	; () banked
 11663  002F76  17C0               	andwf	??___ftadd& (0+255),f,b
 11664  002F78  B4D8               	btfsc	status,2,c
 11665  002F7A  D008               	goto	l4669
 11666  002F7C  D7E9               	goto	l4661
 11667  002F7E                     l4667:
 11668                           
 11669                           ; BSR set to: 0
 11670  002F7E  0100               	movlb	0	; () banked
 11671  002F80  90D8               	bcf	status,0,c
 11672  002F82  33BC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11673  002F84  33BB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11674  002F86  33BA               	rrcf	___ftadd@f1& (0+255),f,b
 11675  002F88  0100               	movlb	0	; () banked
 11676  002F8A  2BC5               	incf	___ftadd@exp1& (0+255),f,b
 11677  002F8C                     l4669:
 11678                           
 11679                           ; BSR set to: 0
 11680  002F8C  0100               	movlb	0	; () banked
 11681  002F8E  51C4               	movf	___ftadd@exp2& (0+255),w,b
 11682  002F90  0100               	movlb	0	; () banked
 11683  002F92  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 11684  002F94  B4D8               	btfsc	status,2,c
 11685  002F96  D02B               	goto	l1094
 11686  002F98  D7F2               	goto	l4667
 11687  002F9A                     l4671:
 11688                           
 11689                           ; BSR set to: 0
 11690  002F9A  0100               	movlb	0	; () banked
 11691  002F9C  51C5               	movf	___ftadd@exp1& (0+255),w,b
 11692  002F9E  0100               	movlb	0	; () banked
 11693  002FA0  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 11694  002FA2  B0D8               	btfsc	status,0,c
 11695  002FA4  D024               	goto	l1094
 11696  002FA6                     l4673:
 11697                           
 11698                           ; BSR set to: 0
 11699  002FA6  0100               	movlb	0	; () banked
 11700  002FA8  90D8               	bcf	status,0,c
 11701  002FAA  37BA               	rlcf	___ftadd@f1& (0+255),f,b
 11702  002FAC  37BB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11703  002FAE  37BC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11704  002FB0  0100               	movlb	0	; () banked
 11705  002FB2  07C5               	decf	___ftadd@exp1& (0+255),f,b
 11706                           
 11707                           ; BSR set to: 0
 11708  002FB4  0100               	movlb	0	; () banked
 11709  002FB6  51C5               	movf	___ftadd@exp1& (0+255),w,b
 11710  002FB8  0100               	movlb	0	; () banked
 11711  002FBA  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 11712  002FBC  B4D8               	btfsc	status,2,c
 11713  002FBE  D011               	goto	l4681
 11714                           
 11715                           ; BSR set to: 0
 11716  002FC0  0100               	movlb	0	; () banked
 11717  002FC2  07C3               	decf	___ftadd@sign& (0+255),f,b
 11718  002FC4  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 11719  002FC8  0E07               	movlw	7
 11720  002FCA  0100               	movlb	0	; () banked
 11721  002FCC  17C0               	andwf	??___ftadd& (0+255),f,b
 11722  002FCE  B4D8               	btfsc	status,2,c
 11723  002FD0  D008               	goto	l4681
 11724  002FD2  D7E9               	goto	l4673
 11725  002FD4                     l4679:
 11726                           
 11727                           ; BSR set to: 0
 11728  002FD4  0100               	movlb	0	; () banked
 11729  002FD6  90D8               	bcf	status,0,c
 11730  002FD8  33BF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11731  002FDA  33BE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11732  002FDC  33BD               	rrcf	___ftadd@f2& (0+255),f,b
 11733  002FDE  0100               	movlb	0	; () banked
 11734  002FE0  2BC4               	incf	___ftadd@exp2& (0+255),f,b
 11735  002FE2                     l4681:
 11736                           
 11737                           ; BSR set to: 0
 11738  002FE2  0100               	movlb	0	; () banked
 11739  002FE4  51C4               	movf	___ftadd@exp2& (0+255),w,b
 11740  002FE6  0100               	movlb	0	; () banked
 11741  002FE8  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 11742  002FEA  A4D8               	btfss	status,2,c
 11743  002FEC  D7F3               	goto	l4679
 11744  002FEE                     l1094:
 11745                           
 11746                           ; BSR set to: 0
 11747  002FEE  0100               	movlb	0	; () banked
 11748  002FF0  AFC3               	btfss	___ftadd@sign& (0+255),7,b
 11749  002FF2  D012               	goto	l1103
 11750                           
 11751                           ; BSR set to: 0
 11752  002FF4  0EFF               	movlw	255
 11753  002FF6  0100               	movlb	0	; () banked
 11754  002FF8  1BBA               	xorwf	___ftadd@f1& (0+255),f,b
 11755  002FFA  0EFF               	movlw	255
 11756  002FFC  0100               	movlb	0	; () banked
 11757  002FFE  1BBB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11758  003000  0EFF               	movlw	255
 11759  003002  0100               	movlb	0	; () banked
 11760  003004  1BBC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11761  003006  0E01               	movlw	1
 11762  003008  0100               	movlb	0	; () banked
 11763  00300A  27BA               	addwf	___ftadd@f1& (0+255),f,b
 11764  00300C  0E00               	movlw	0
 11765  00300E  0100               	movlb	0	; () banked
 11766  003010  23BB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11767  003012  0E00               	movlw	0
 11768  003014  0100               	movlb	0	; () banked
 11769  003016  23BC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11770  003018                     l1103:
 11771                           
 11772                           ; BSR set to: 0
 11773  003018  0100               	movlb	0	; () banked
 11774  00301A  ADC3               	btfss	___ftadd@sign& (0+255),6,b
 11775  00301C  D012               	goto	l4687
 11776                           
 11777                           ; BSR set to: 0
 11778  00301E  0EFF               	movlw	255
 11779  003020  0100               	movlb	0	; () banked
 11780  003022  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 11781  003024  0EFF               	movlw	255
 11782  003026  0100               	movlb	0	; () banked
 11783  003028  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11784  00302A  0EFF               	movlw	255
 11785  00302C  0100               	movlb	0	; () banked
 11786  00302E  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11787  003030  0E01               	movlw	1
 11788  003032  0100               	movlb	0	; () banked
 11789  003034  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11790  003036  0E00               	movlw	0
 11791  003038  0100               	movlb	0	; () banked
 11792  00303A  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11793  00303C  0E00               	movlw	0
 11794  00303E  0100               	movlb	0	; () banked
 11795  003040  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11796  003042                     l4687:
 11797                           
 11798                           ; BSR set to: 0
 11799  003042  0E00               	movlw	0
 11800  003044  0100               	movlb	0	; () banked
 11801  003046  6FC3               	movwf	___ftadd@sign& (0+255),b
 11802                           
 11803                           ; BSR set to: 0
 11804  003048  0100               	movlb	0	; () banked
 11805  00304A  51BA               	movf	___ftadd@f1& (0+255),w,b
 11806  00304C  0100               	movlb	0	; () banked
 11807  00304E  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11808  003050  0100               	movlb	0	; () banked
 11809  003052  51BB               	movf	(___ftadd@f1+1)& (0+255),w,b
 11810  003054  0100               	movlb	0	; () banked
 11811  003056  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11812  003058  0100               	movlb	0	; () banked
 11813  00305A  51BC               	movf	(___ftadd@f1+2)& (0+255),w,b
 11814  00305C  0100               	movlb	0	; () banked
 11815  00305E  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11816                           
 11817                           ; BSR set to: 0
 11818  003060  0100               	movlb	0	; () banked
 11819  003062  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11820  003064  D015               	goto	l4697
 11821                           
 11822                           ; BSR set to: 0
 11823  003066  0EFF               	movlw	255
 11824  003068  0100               	movlb	0	; () banked
 11825  00306A  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 11826  00306C  0EFF               	movlw	255
 11827  00306E  0100               	movlb	0	; () banked
 11828  003070  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11829  003072  0EFF               	movlw	255
 11830  003074  0100               	movlb	0	; () banked
 11831  003076  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11832  003078  0E01               	movlw	1
 11833  00307A  0100               	movlb	0	; () banked
 11834  00307C  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11835  00307E  0E00               	movlw	0
 11836  003080  0100               	movlb	0	; () banked
 11837  003082  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11838  003084  0E00               	movlw	0
 11839  003086  0100               	movlb	0	; () banked
 11840  003088  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11841                           
 11842                           ; BSR set to: 0
 11843  00308A  0E01               	movlw	1
 11844  00308C  0100               	movlb	0	; () banked
 11845  00308E  6FC3               	movwf	___ftadd@sign& (0+255),b
 11846  003090                     l4697:
 11847                           
 11848                           ; BSR set to: 0
 11849  003090  C0BD  F080         	movff	___ftadd@f2,___ftpack@arg
 11850  003094  C0BE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 11851  003098  C0BF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 11852  00309C  C0C5  F083         	movff	___ftadd@exp1,___ftpack@exp
 11853  0030A0  C0C3  F084         	movff	___ftadd@sign,___ftpack@sign
 11854  0030A4  EC80  F021         	call	___ftpack	;wreg free
 11855  0030A8  C080  F0BA         	movff	?___ftpack,?___ftadd
 11856  0030AC  C081  F0BB         	movff	?___ftpack+1,?___ftadd+1
 11857  0030B0  C082  F0BC         	movff	?___ftpack+2,?___ftadd+2
 11858  0030B4  0012               	return	
 11859  0030B6                     __end_of___ftadd:
 11860                           	opt stack 0
 11861                           tblptru	equ	0xFF8
 11862                           tblptrh	equ	0xFF7
 11863                           tblptrl	equ	0xFF6
 11864                           tablat	equ	0xFF5
 11865                           prodh	equ	0xFF4
 11866                           prodl	equ	0xFF3
 11867                           intcon	equ	0xFF2
 11868                           postinc0	equ	0xFEE
 11869                           wreg	equ	0xFE8
 11870                           postdec1	equ	0xFE5
 11871                           fsr1l	equ	0xFE1
 11872                           indf2	equ	0xFDF
 11873                           postinc2	equ	0xFDE
 11874                           postdec2	equ	0xFDD
 11875                           fsr2h	equ	0xFDA
 11876                           fsr2l	equ	0xFD9
 11877                           status	equ	0xFD8
 11878                           
 11879 ;; *************** function ___awtoft *****************
 11880 ;; Defined at:
 11881 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;  c               2    8[BANK0 ] int 
 11884 ;; Auto vars:     Size  Location     Type
 11885 ;;  sign            1   11[BANK0 ] unsigned char 
 11886 ;; Return value:  Size  Location     Type
 11887 ;;                  3    8[BANK0 ] float 
 11888 ;; Registers used:
 11889 ;;		wreg, status,2, status,0, cstack
 11890 ;; Tracked objects:
 11891 ;;		On entry : 0/0
 11892 ;;		On exit  : 0/0
 11893 ;;		Unchanged: 0/0
 11894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11895 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;Total ram usage:        4 bytes
 11900 ;; Hardware stack levels used:    1
 11901 ;; Hardware stack levels required when called:    7
 11902 ;; This function calls:
 11903 ;;		___ftpack
 11904 ;; This function is called by:
 11905 ;;		_sortBattery
 11906 ;;		_angleToPulse
 11907 ;;		_testFrequency
 11908 ;; This function uses a non-reentrant model
 11909 ;;
 11910                           
 11911                           	psect	text35
 11912  0055CC                     __ptext35:
 11913                           	opt stack 0
 11914  0055CC                     ___awtoft:
 11915                           	opt stack 20
 11916                           
 11917                           ;incstack = 0
 11918  0055CC  0E00               	movlw	0
 11919  0055CE  0100               	movlb	0	; () banked
 11920  0055D0  6F8B               	movwf	___awtoft@sign& (0+255),b
 11921                           
 11922                           ; BSR set to: 0
 11923  0055D2  0100               	movlb	0	; () banked
 11924  0055D4  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
 11925  0055D6  D008               	goto	l4883
 11926                           
 11927                           ; BSR set to: 0
 11928  0055D8  0100               	movlb	0	; () banked
 11929  0055DA  6D88               	negf	___awtoft@c& (0+255),b
 11930  0055DC  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
 11931  0055DE  B0D8               	btfsc	status,0,c
 11932  0055E0  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
 11933                           
 11934                           ; BSR set to: 0
 11935  0055E2  0E01               	movlw	1
 11936  0055E4  0100               	movlb	0	; () banked
 11937  0055E6  6F8B               	movwf	___awtoft@sign& (0+255),b
 11938  0055E8                     l4883:
 11939                           
 11940                           ; BSR set to: 0
 11941  0055E8  C088  F080         	movff	___awtoft@c,___ftpack@arg
 11942  0055EC  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
 11943  0055F0  0100               	movlb	0	; () banked
 11944  0055F2  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
 11945  0055F4  0E8E               	movlw	142
 11946  0055F6  0100               	movlb	0	; () banked
 11947  0055F8  6F83               	movwf	___ftpack@exp& (0+255),b
 11948  0055FA  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
 11949  0055FE  EC80  F021         	call	___ftpack	;wreg free
 11950  005602  C080  F088         	movff	?___ftpack,?___awtoft
 11951  005606  C081  F089         	movff	?___ftpack+1,?___awtoft+1
 11952  00560A  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
 11953  00560E  0012               	return	
 11954  005610                     __end_of___awtoft:
 11955                           	opt stack 0
 11956                           tblptru	equ	0xFF8
 11957                           tblptrh	equ	0xFF7
 11958                           tblptrl	equ	0xFF6
 11959                           tablat	equ	0xFF5
 11960                           prodh	equ	0xFF4
 11961                           prodl	equ	0xFF3
 11962                           intcon	equ	0xFF2
 11963                           postinc0	equ	0xFEE
 11964                           wreg	equ	0xFE8
 11965                           postdec1	equ	0xFE5
 11966                           fsr1l	equ	0xFE1
 11967                           indf2	equ	0xFDF
 11968                           postinc2	equ	0xFDE
 11969                           postdec2	equ	0xFDD
 11970                           fsr2h	equ	0xFDA
 11971                           fsr2l	equ	0xFD9
 11972                           status	equ	0xFD8
 11973                           
 11974 ;; *************** function ___altoft *****************
 11975 ;; Defined at:
 11976 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11977 ;; Parameters:    Size  Location     Type
 11978 ;;  c               4    8[BANK0 ] long 
 11979 ;; Auto vars:     Size  Location     Type
 11980 ;;  sign            1   17[BANK0 ] unsigned char 
 11981 ;;  exp             1   16[BANK0 ] unsigned char 
 11982 ;; Return value:  Size  Location     Type
 11983 ;;                  3    8[BANK0 ] float 
 11984 ;; Registers used:
 11985 ;;		wreg, status,2, status,0, cstack
 11986 ;; Tracked objects:
 11987 ;;		On entry : 0/0
 11988 ;;		On exit  : 0/0
 11989 ;;		Unchanged: 0/0
 11990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11991 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11992 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11995 ;;Total ram usage:       10 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; Hardware stack levels required when called:    7
 11998 ;; This function calls:
 11999 ;;		___ftpack
 12000 ;; This function is called by:
 12001 ;;		_sortBattery
 12002 ;;		_angleToPulse
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005                           
 12006                           	psect	text36
 12007  004E1E                     __ptext36:
 12008                           	opt stack 0
 12009  004E1E                     ___altoft:
 12010                           	opt stack 20
 12011                           
 12012                           ;incstack = 0
 12013  004E1E  0E00               	movlw	0
 12014  004E20  0100               	movlb	0	; () banked
 12015  004E22  6F91               	movwf	___altoft@sign& (0+255),b
 12016  004E24  0E8E               	movlw	142
 12017  004E26  0100               	movlb	0	; () banked
 12018  004E28  6F90               	movwf	___altoft@exp& (0+255),b
 12019                           
 12020                           ; BSR set to: 0
 12021  004E2A  0100               	movlb	0	; () banked
 12022  004E2C  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
 12023  004E2E  D015               	goto	l4625
 12024                           
 12025                           ; BSR set to: 0
 12026  004E30  0100               	movlb	0	; () banked
 12027  004E32  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
 12028  004E34  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
 12029  004E36  1F89               	comf	(___altoft@c+1)& (0+255),f,b
 12030  004E38  6D88               	negf	___altoft@c& (0+255),b
 12031  004E3A  0E00               	movlw	0
 12032  004E3C  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
 12033  004E3E  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
 12034  004E40  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
 12035                           
 12036                           ; BSR set to: 0
 12037  004E42  0E01               	movlw	1
 12038  004E44  0100               	movlb	0	; () banked
 12039  004E46  6F91               	movwf	___altoft@sign& (0+255),b
 12040                           
 12041                           ; BSR set to: 0
 12042  004E48  D008               	goto	l4625
 12043  004E4A                     l4623:
 12044                           
 12045                           ; BSR set to: 0
 12046  004E4A  0100               	movlb	0	; () banked
 12047  004E4C  90D8               	bcf	status,0,c
 12048  004E4E  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
 12049  004E50  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
 12050  004E52  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
 12051  004E54  3388               	rrcf	___altoft@c& (0+255),f,b
 12052  004E56  0100               	movlb	0	; () banked
 12053  004E58  2B90               	incf	___altoft@exp& (0+255),f,b
 12054  004E5A                     l4625:
 12055                           
 12056                           ; BSR set to: 0
 12057  004E5A  0E00               	movlw	0
 12058  004E5C  0100               	movlb	0	; () banked
 12059  004E5E  1588               	andwf	___altoft@c& (0+255),w,b
 12060  004E60  0100               	movlb	0	; () banked
 12061  004E62  6F8C               	movwf	??___altoft& (0+255),b
 12062  004E64  0E00               	movlw	0
 12063  004E66  0100               	movlb	0	; () banked
 12064  004E68  1589               	andwf	(___altoft@c+1)& (0+255),w,b
 12065  004E6A  0100               	movlb	0	; () banked
 12066  004E6C  6F8D               	movwf	(??___altoft+1)& (0+255),b
 12067  004E6E  0E00               	movlw	0
 12068  004E70  0100               	movlb	0	; () banked
 12069  004E72  158A               	andwf	(___altoft@c+2)& (0+255),w,b
 12070  004E74  0100               	movlb	0	; () banked
 12071  004E76  6F8E               	movwf	(??___altoft+2)& (0+255),b
 12072  004E78  0EFF               	movlw	255
 12073  004E7A  0100               	movlb	0	; () banked
 12074  004E7C  158B               	andwf	(___altoft@c+3)& (0+255),w,b
 12075  004E7E  0100               	movlb	0	; () banked
 12076  004E80  6F8F               	movwf	(??___altoft+3)& (0+255),b
 12077  004E82  0100               	movlb	0	; () banked
 12078  004E84  518C               	movf	??___altoft& (0+255),w,b
 12079  004E86  0100               	movlb	0	; () banked
 12080  004E88  118D               	iorwf	(??___altoft+1)& (0+255),w,b
 12081  004E8A  0100               	movlb	0	; () banked
 12082  004E8C  118E               	iorwf	(??___altoft+2)& (0+255),w,b
 12083  004E8E  0100               	movlb	0	; () banked
 12084  004E90  118F               	iorwf	(??___altoft+3)& (0+255),w,b
 12085  004E92  A4D8               	btfss	status,2,c
 12086  004E94  D7DA               	goto	l4623
 12087                           
 12088                           ; BSR set to: 0
 12089                           
 12090                           ; BSR set to: 0
 12091  004E96  C088  F080         	movff	___altoft@c,___ftpack@arg
 12092  004E9A  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
 12093  004E9E  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
 12094  004EA2  C090  F083         	movff	___altoft@exp,___ftpack@exp
 12095  004EA6  C091  F084         	movff	___altoft@sign,___ftpack@sign
 12096  004EAA  EC80  F021         	call	___ftpack	;wreg free
 12097  004EAE  C080  F088         	movff	?___ftpack,?___altoft
 12098  004EB2  C081  F089         	movff	?___ftpack+1,?___altoft+1
 12099  004EB6  C082  F08A         	movff	?___ftpack+2,?___altoft+2
 12100  004EBA  0012               	return	
 12101  004EBC                     __end_of___altoft:
 12102                           	opt stack 0
 12103                           tblptru	equ	0xFF8
 12104                           tblptrh	equ	0xFF7
 12105                           tblptrl	equ	0xFF6
 12106                           tablat	equ	0xFF5
 12107                           prodh	equ	0xFF4
 12108                           prodl	equ	0xFF3
 12109                           intcon	equ	0xFF2
 12110                           postinc0	equ	0xFEE
 12111                           wreg	equ	0xFE8
 12112                           postdec1	equ	0xFE5
 12113                           fsr1l	equ	0xFE1
 12114                           indf2	equ	0xFDF
 12115                           postinc2	equ	0xFDE
 12116                           postdec2	equ	0xFDD
 12117                           fsr2h	equ	0xFDA
 12118                           fsr2l	equ	0xFD9
 12119                           status	equ	0xFD8
 12120                           
 12121 ;; *************** function ___ftpack *****************
 12122 ;; Defined at:
 12123 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;  arg             3    0[BANK0 ] unsigned um
 12126 ;;  exp             1    3[BANK0 ] unsigned char 
 12127 ;;  sign            1    4[BANK0 ] unsigned char 
 12128 ;; Auto vars:     Size  Location     Type
 12129 ;;		None
 12130 ;; Return value:  Size  Location     Type
 12131 ;;                  3    0[BANK0 ] float 
 12132 ;; Registers used:
 12133 ;;		wreg, status,2, status,0
 12134 ;; Tracked objects:
 12135 ;;		On entry : 0/0
 12136 ;;		On exit  : 0/0
 12137 ;;		Unchanged: 0/0
 12138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12139 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12141 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12142 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12143 ;;Total ram usage:        8 bytes
 12144 ;; Hardware stack levels used:    1
 12145 ;; Hardware stack levels required when called:    6
 12146 ;; This function calls:
 12147 ;;		Nothing
 12148 ;; This function is called by:
 12149 ;;		___altoft
 12150 ;;		___awtoft
 12151 ;;		___ftadd
 12152 ;;		___ftdiv
 12153 ;;		___ftmul
 12154 ;;		___lltoft
 12155 ;; This function uses a non-reentrant model
 12156 ;;
 12157                           
 12158                           	psect	text37
 12159  004300                     __ptext37:
 12160                           	opt stack 0
 12161  004300                     ___ftpack:
 12162                           	opt stack 20
 12163                           
 12164                           ;incstack = 0
 12165  004300  0100               	movlb	0	; () banked
 12166  004302  5183               	movf	___ftpack@exp& (0+255),w,b
 12167  004304  0100               	movlb	0	; () banked
 12168  004306  B4D8               	btfsc	status,2,c
 12169  004308  D008               	goto	l4557
 12170                           
 12171                           ; BSR set to: 0
 12172  00430A  0100               	movlb	0	; () banked
 12173  00430C  5180               	movf	___ftpack@arg& (0+255),w,b
 12174  00430E  0100               	movlb	0	; () banked
 12175  004310  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 12176  004312  0100               	movlb	0	; () banked
 12177  004314  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 12178  004316  A4D8               	btfss	status,2,c
 12179  004318  D011               	goto	l4563
 12180  00431A                     l4557:
 12181                           
 12182                           ; BSR set to: 0
 12183  00431A  0E00               	movlw	0
 12184  00431C  0100               	movlb	0	; () banked
 12185  00431E  6F80               	movwf	?___ftpack& (0+255),b
 12186  004320  0E00               	movlw	0
 12187  004322  0100               	movlb	0	; () banked
 12188  004324  6F81               	movwf	(?___ftpack+1)& (0+255),b
 12189  004326  0E00               	movlw	0
 12190  004328  0100               	movlb	0	; () banked
 12191  00432A  6F82               	movwf	(?___ftpack+2)& (0+255),b
 12192                           
 12193                           ; BSR set to: 0
 12194  00432C  0012               	return	
 12195  00432E                     l4561:
 12196                           
 12197                           ; BSR set to: 0
 12198  00432E  0100               	movlb	0	; () banked
 12199  004330  2B83               	incf	___ftpack@exp& (0+255),f,b
 12200  004332  0100               	movlb	0	; () banked
 12201  004334  90D8               	bcf	status,0,c
 12202  004336  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 12203  004338  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 12204  00433A  3380               	rrcf	___ftpack@arg& (0+255),f,b
 12205  00433C                     l4563:
 12206                           
 12207                           ; BSR set to: 0
 12208  00433C  0E00               	movlw	0
 12209  00433E  0100               	movlb	0	; () banked
 12210  004340  1580               	andwf	___ftpack@arg& (0+255),w,b
 12211  004342  0100               	movlb	0	; () banked
 12212  004344  6F85               	movwf	??___ftpack& (0+255),b
 12213  004346  0E00               	movlw	0
 12214  004348  0100               	movlb	0	; () banked
 12215  00434A  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 12216  00434C  0100               	movlb	0	; () banked
 12217  00434E  6F86               	movwf	(??___ftpack+1)& (0+255),b
 12218  004350  0EFE               	movlw	254
 12219  004352  0100               	movlb	0	; () banked
 12220  004354  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 12221  004356  0100               	movlb	0	; () banked
 12222  004358  6F87               	movwf	(??___ftpack+2)& (0+255),b
 12223  00435A  0100               	movlb	0	; () banked
 12224  00435C  5185               	movf	??___ftpack& (0+255),w,b
 12225  00435E  0100               	movlb	0	; () banked
 12226  004360  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 12227  004362  0100               	movlb	0	; () banked
 12228  004364  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 12229  004366  B4D8               	btfsc	status,2,c
 12230  004368  D011               	goto	l4569
 12231  00436A  D7E1               	goto	l4561
 12232  00436C                     l4565:
 12233                           
 12234                           ; BSR set to: 0
 12235  00436C  0100               	movlb	0	; () banked
 12236  00436E  2B83               	incf	___ftpack@exp& (0+255),f,b
 12237                           
 12238                           ; BSR set to: 0
 12239  004370  0E01               	movlw	1
 12240  004372  0100               	movlb	0	; () banked
 12241  004374  2780               	addwf	___ftpack@arg& (0+255),f,b
 12242  004376  0E00               	movlw	0
 12243  004378  0100               	movlb	0	; () banked
 12244  00437A  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 12245  00437C  0E00               	movlw	0
 12246  00437E  0100               	movlb	0	; () banked
 12247  004380  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 12248  004382  0100               	movlb	0	; () banked
 12249  004384  90D8               	bcf	status,0,c
 12250  004386  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 12251  004388  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 12252  00438A  3380               	rrcf	___ftpack@arg& (0+255),f,b
 12253  00438C                     l4569:
 12254                           
 12255                           ; BSR set to: 0
 12256  00438C  0E00               	movlw	0
 12257  00438E  0100               	movlb	0	; () banked
 12258  004390  1580               	andwf	___ftpack@arg& (0+255),w,b
 12259  004392  0100               	movlb	0	; () banked
 12260  004394  6F85               	movwf	??___ftpack& (0+255),b
 12261  004396  0E00               	movlw	0
 12262  004398  0100               	movlb	0	; () banked
 12263  00439A  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 12264  00439C  0100               	movlb	0	; () banked
 12265  00439E  6F86               	movwf	(??___ftpack+1)& (0+255),b
 12266  0043A0  0EFF               	movlw	255
 12267  0043A2  0100               	movlb	0	; () banked
 12268  0043A4  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 12269  0043A6  0100               	movlb	0	; () banked
 12270  0043A8  6F87               	movwf	(??___ftpack+2)& (0+255),b
 12271  0043AA  0100               	movlb	0	; () banked
 12272  0043AC  5185               	movf	??___ftpack& (0+255),w,b
 12273  0043AE  0100               	movlb	0	; () banked
 12274  0043B0  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 12275  0043B2  0100               	movlb	0	; () banked
 12276  0043B4  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 12277  0043B6  B4D8               	btfsc	status,2,c
 12278  0043B8  D008               	goto	l4573
 12279  0043BA  D7D8               	goto	l4565
 12280  0043BC                     l4571:
 12281                           
 12282                           ; BSR set to: 0
 12283  0043BC  0100               	movlb	0	; () banked
 12284  0043BE  0783               	decf	___ftpack@exp& (0+255),f,b
 12285  0043C0  0100               	movlb	0	; () banked
 12286  0043C2  90D8               	bcf	status,0,c
 12287  0043C4  3780               	rlcf	___ftpack@arg& (0+255),f,b
 12288  0043C6  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 12289  0043C8  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 12290  0043CA                     l4573:
 12291                           
 12292                           ; BSR set to: 0
 12293  0043CA  0100               	movlb	0	; () banked
 12294  0043CC  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 12295  0043CE  D004               	goto	l1056
 12296                           
 12297                           ; BSR set to: 0
 12298  0043D0  0E02               	movlw	2
 12299  0043D2  0100               	movlb	0	; () banked
 12300  0043D4  6183               	cpfslt	___ftpack@exp& (0+255),b
 12301  0043D6  D7F2               	goto	l4571
 12302  0043D8                     l1056:
 12303                           
 12304                           ; BSR set to: 0
 12305  0043D8  0100               	movlb	0	; () banked
 12306  0043DA  B183               	btfsc	___ftpack@exp& (0+255),0,b
 12307  0043DC  D002               	goto	l4579
 12308                           
 12309                           ; BSR set to: 0
 12310  0043DE  0100               	movlb	0	; () banked
 12311  0043E0  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 12312  0043E2                     l4579:
 12313                           
 12314                           ; BSR set to: 0
 12315  0043E2  0100               	movlb	0	; () banked
 12316  0043E4  90D8               	bcf	status,0,c
 12317  0043E6  3383               	rrcf	___ftpack@exp& (0+255),f,b
 12318  0043E8  0100               	movlb	0	; () banked
 12319  0043EA  5183               	movf	___ftpack@exp& (0+255),w,b
 12320  0043EC  0100               	movlb	0	; () banked
 12321  0043EE  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 12322                           
 12323                           ; BSR set to: 0
 12324  0043F0  0100               	movlb	0	; () banked
 12325  0043F2  5184               	movf	___ftpack@sign& (0+255),w,b
 12326  0043F4  0100               	movlb	0	; () banked
 12327  0043F6  B4D8               	btfsc	status,2,c
 12328  0043F8  D002               	goto	l4585
 12329                           
 12330                           ; BSR set to: 0
 12331  0043FA  0100               	movlb	0	; () banked
 12332  0043FC  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 12333  0043FE                     l4585:
 12334                           
 12335                           ; BSR set to: 0
 12336  0043FE  C080  F080         	movff	___ftpack@arg,?___ftpack
 12337  004402  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 12338  004406  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 12339  00440A  0012               	return	
 12340  00440C                     __end_of___ftpack:
 12341                           	opt stack 0
 12342                           tblptru	equ	0xFF8
 12343                           tblptrh	equ	0xFF7
 12344                           tblptrl	equ	0xFF6
 12345                           tablat	equ	0xFF5
 12346                           prodh	equ	0xFF4
 12347                           prodl	equ	0xFF3
 12348                           intcon	equ	0xFF2
 12349                           postinc0	equ	0xFEE
 12350                           wreg	equ	0xFE8
 12351                           postdec1	equ	0xFE5
 12352                           fsr1l	equ	0xFE1
 12353                           indf2	equ	0xFDF
 12354                           postinc2	equ	0xFDE
 12355                           postdec2	equ	0xFDD
 12356                           fsr2h	equ	0xFDA
 12357                           fsr2l	equ	0xFD9
 12358                           status	equ	0xFD8
 12359                           
 12360 ;; *************** function _initTimer *****************
 12361 ;; Defined at:
 12362 ;;		line 52 in file "timer.c"
 12363 ;; Parameters:    Size  Location     Type
 12364 ;;  timer           2    0[BANK0 ] int 
 12365 ;; Auto vars:     Size  Location     Type
 12366 ;;		None
 12367 ;; Return value:  Size  Location     Type
 12368 ;;                  1    wreg      void 
 12369 ;; Registers used:
 12370 ;;		wreg, status,2, status,0
 12371 ;; Tracked objects:
 12372 ;;		On entry : 0/0
 12373 ;;		On exit  : 0/0
 12374 ;;		Unchanged: 0/0
 12375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12379 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12380 ;;Total ram usage:        4 bytes
 12381 ;; Hardware stack levels used:    1
 12382 ;; Hardware stack levels required when called:    6
 12383 ;; This function calls:
 12384 ;;		Nothing
 12385 ;; This function is called by:
 12386 ;;		_main
 12387 ;;		_initServo
 12388 ;;		_testFrequency
 12389 ;; This function uses a non-reentrant model
 12390 ;;
 12391                           
 12392                           	psect	text38
 12393  005456                     __ptext38:
 12394                           	opt stack 0
 12395  005456                     _initTimer:
 12396                           	opt stack 24
 12397                           
 12398                           ;timer.c: 53: switch(timer){
 12399                           
 12400                           ; BSR set to: 0
 12401                           ;incstack = 0
 12402  005456  D00F               	goto	l5485
 12403  005458                     l5467:
 12404                           
 12405                           ;timer.c: 55: T0CON = 0;
 12406  005458  0E00               	movlw	0
 12407  00545A  6ED5               	movwf	4053,c	;volatile
 12408                           
 12409                           ;timer.c: 56: T0CON |= 1<<3;
 12410  00545C  86D5               	bsf	4053,3,c	;volatile
 12411                           
 12412                           ;timer.c: 58: TMR0IE = 1;
 12413  00545E  8AF2               	bsf	intcon,5,c	;volatile
 12414                           
 12415                           ;timer.c: 59: break;
 12416  005460  D01E               	goto	l413
 12417  005462                     l5473:
 12418                           
 12419                           ;timer.c: 61: T1CON = 0;
 12420  005462  0E00               	movlw	0
 12421  005464  6ECD               	movwf	4045,c	;volatile
 12422                           
 12423                           ;timer.c: 63: T1CON |= 0b11<<4;
 12424  005466  0E30               	movlw	48
 12425  005468  12CD               	iorwf	4045,f,c	;volatile
 12426                           
 12427                           ;timer.c: 64: TMR1IE = 1;
 12428  00546A  809D               	bsf	3997,0,c	;volatile
 12429                           
 12430                           ;timer.c: 65: break;
 12431  00546C  D018               	goto	l413
 12432  00546E                     l5479:
 12433                           
 12434                           ;timer.c: 67: T3CON = 0;
 12435  00546E  0E00               	movlw	0
 12436  005470  6EB1               	movwf	4017,c	;volatile
 12437                           
 12438                           ;timer.c: 68: TMR3IE = 1;
 12439  005472  82A0               	bsf	4000,1,c	;volatile
 12440                           
 12441                           ;timer.c: 70: }
 12442                           
 12443                           ;timer.c: 69: break;
 12444  005474  D014               	goto	l413
 12445  005476                     l5485:
 12446  005476  C080  F082         	movff	initTimer@timer,??_initTimer
 12447  00547A  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
 12448                           
 12449                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12450                           ; Switch size 1, requested type "space"
 12451                           ; Number of cases is 1, Range of values is 0 to 0
 12452                           ; switch strategies available:
 12453                           ; Name         Instructions Cycles
 12454                           ; simple_byte            4     3 (average)
 12455                           ;	Chosen strategy is simple_byte
 12456  00547E  0100               	movlb	0	; () banked
 12457  005480  5183               	movf	(??_initTimer+1)& (0+255),w,b
 12458  005482  0A00               	xorlw	0	; case 0
 12459  005484  A4D8               	btfss	status,2,c
 12460  005486  D00B               	goto	l413
 12461                           
 12462                           ; BSR set to: 0
 12463                           ; Switch size 1, requested type "space"
 12464                           ; Number of cases is 3, Range of values is 0 to 3
 12465                           ; switch strategies available:
 12466                           ; Name         Instructions Cycles
 12467                           ; simple_byte           10     6 (average)
 12468                           ;	Chosen strategy is simple_byte
 12469  005488  0100               	movlb	0	; () banked
 12470  00548A  5182               	movf	??_initTimer& (0+255),w,b
 12471  00548C  0A00               	xorlw	0	; case 0
 12472  00548E  B4D8               	btfsc	status,2,c
 12473  005490  D7E3               	goto	l5467
 12474  005492  0A01               	xorlw	1	; case 1
 12475  005494  B4D8               	btfsc	status,2,c
 12476  005496  D7E5               	goto	l5473
 12477  005498  0A02               	xorlw	2	; case 3
 12478  00549A  B4D8               	btfsc	status,2,c
 12479  00549C  D7E8               	goto	l5479
 12480  00549E                     l413:
 12481                           
 12482                           ;timer.c: 71: PEIE = 1;
 12483  00549E  8CF2               	bsf	intcon,6,c	;volatile
 12484                           
 12485                           ;timer.c: 72: (INTCONbits.GIE = 1);
 12486  0054A0  8EF2               	bsf	intcon,7,c	;volatile
 12487  0054A2  0012               	return		;funcret
 12488  0054A4                     __end_of_initTimer:
 12489                           	opt stack 0
 12490                           tblptru	equ	0xFF8
 12491                           tblptrh	equ	0xFF7
 12492                           tblptrl	equ	0xFF6
 12493                           tablat	equ	0xFF5
 12494                           prodh	equ	0xFF4
 12495                           prodl	equ	0xFF3
 12496                           intcon	equ	0xFF2
 12497                           postinc0	equ	0xFEE
 12498                           wreg	equ	0xFE8
 12499                           postdec1	equ	0xFE5
 12500                           fsr1l	equ	0xFE1
 12501                           indf2	equ	0xFDF
 12502                           postinc2	equ	0xFDE
 12503                           postdec2	equ	0xFDD
 12504                           fsr2h	equ	0xFDA
 12505                           fsr2l	equ	0xFD9
 12506                           status	equ	0xFD8
 12507                           
 12508 ;; *************** function _initLCD *****************
 12509 ;; Defined at:
 12510 ;;		line 15 in file "lcd.c"
 12511 ;; Parameters:    Size  Location     Type
 12512 ;;		None
 12513 ;; Auto vars:     Size  Location     Type
 12514 ;;		None
 12515 ;; Return value:  Size  Location     Type
 12516 ;;                  1    wreg      void 
 12517 ;; Registers used:
 12518 ;;		wreg, status,2, status,0, cstack
 12519 ;; Tracked objects:
 12520 ;;		On entry : 0/0
 12521 ;;		On exit  : 0/0
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12527 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12528 ;;Total ram usage:        1 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:    8
 12531 ;; This function calls:
 12532 ;;		_lcdInst
 12533 ;; This function is called by:
 12534 ;;		_main
 12535 ;; This function uses a non-reentrant model
 12536 ;;
 12537                           
 12538                           	psect	text39
 12539  00553C                     __ptext39:
 12540                           	opt stack 0
 12541  00553C                     _initLCD:
 12542                           	opt stack 22
 12543                           
 12544                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 12545                           
 12546                           ;incstack = 0
 12547  00553C  0E31               	movlw	49
 12548  00553E  0100               	movlb	0	; () banked
 12549  005540  6F84               	movwf	??_initLCD& (0+255),b
 12550  005542  0EB2               	movlw	178
 12551  005544                     u8517:
 12552  005544  2EE8               	decfsz	wreg,f,c
 12553  005546  D7FE               	bra	u8517
 12554  005548  2F84               	decfsz	??_initLCD& (0+255),f,b
 12555  00554A  D7FC               	bra	u8517
 12556  00554C  F000               	nop	
 12557                           
 12558                           ;lcd.c: 18: lcdInst(0b00110011);
 12559  00554E  0E33               	movlw	51
 12560  005550  ECE4  F02B         	call	_lcdInst
 12561                           
 12562                           ;lcd.c: 19: lcdInst(0b00110010);
 12563  005554  0E32               	movlw	50
 12564  005556  ECE4  F02B         	call	_lcdInst
 12565                           
 12566                           ;lcd.c: 20: lcdInst(0b00101000);
 12567  00555A  0E28               	movlw	40
 12568  00555C  ECE4  F02B         	call	_lcdInst
 12569                           
 12570                           ;lcd.c: 21: lcdInst(0b00001111);
 12571  005560  0E0F               	movlw	15
 12572  005562  ECE4  F02B         	call	_lcdInst
 12573                           
 12574                           ;lcd.c: 22: lcdInst(0b00000110);
 12575  005566  0E06               	movlw	6
 12576  005568  ECE4  F02B         	call	_lcdInst
 12577                           
 12578                           ;lcd.c: 23: lcdInst(0b00000001);
 12579  00556C  0E01               	movlw	1
 12580  00556E  ECE4  F02B         	call	_lcdInst
 12581                           
 12582                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 12583  005572  0E31               	movlw	49
 12584  005574  0100               	movlb	0	; () banked
 12585  005576  6F84               	movwf	??_initLCD& (0+255),b
 12586  005578  0EB2               	movlw	178
 12587  00557A                     u8527:
 12588  00557A  2EE8               	decfsz	wreg,f,c
 12589  00557C  D7FE               	bra	u8527
 12590  00557E  2F84               	decfsz	??_initLCD& (0+255),f,b
 12591  005580  D7FC               	bra	u8527
 12592  005582  F000               	nop	
 12593  005584  0012               	return		;funcret
 12594  005586                     __end_of_initLCD:
 12595                           	opt stack 0
 12596                           tblptru	equ	0xFF8
 12597                           tblptrh	equ	0xFF7
 12598                           tblptrl	equ	0xFF6
 12599                           tablat	equ	0xFF5
 12600                           prodh	equ	0xFF4
 12601                           prodl	equ	0xFF3
 12602                           intcon	equ	0xFF2
 12603                           postinc0	equ	0xFEE
 12604                           wreg	equ	0xFE8
 12605                           postdec1	equ	0xFE5
 12606                           fsr1l	equ	0xFE1
 12607                           indf2	equ	0xFDF
 12608                           postinc2	equ	0xFDE
 12609                           postdec2	equ	0xFDD
 12610                           fsr2h	equ	0xFDA
 12611                           fsr2l	equ	0xFD9
 12612                           status	equ	0xFD8
 12613                           
 12614 ;; *************** function _lcdInst *****************
 12615 ;; Defined at:
 12616 ;;		line 27 in file "lcd.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;  data            1    wreg     unsigned char 
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;  data            1    3[BANK0 ] unsigned char 
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  1    wreg      void 
 12623 ;; Registers used:
 12624 ;;		wreg, status,2, status,0, cstack
 12625 ;; Tracked objects:
 12626 ;;		On entry : 0/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12633 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12634 ;;Total ram usage:        2 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:    7
 12637 ;; This function calls:
 12638 ;;		_lcdNibble
 12639 ;; This function is called by:
 12640 ;;		_initLCD
 12641 ;;		_lcdHome
 12642 ;;		_lcdClear
 12643 ;;		_lcdNewline
 12644 ;; This function uses a non-reentrant model
 12645 ;;
 12646                           
 12647                           	psect	text40
 12648  0057C8                     __ptext40:
 12649                           	opt stack 0
 12650  0057C8                     _lcdInst:
 12651                           	opt stack 19
 12652                           
 12653                           ;incstack = 0
 12654                           ;lcdInst@data stored from wreg
 12655  0057C8  0100               	movlb	0	; () banked
 12656  0057CA  6F83               	movwf	lcdInst@data& (0+255),b
 12657                           
 12658                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 12659  0057CC  948C               	bcf	3980,2,c	;volatile
 12660                           
 12661                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 12662  0057CE  0E74               	movlw	116
 12663  0057D0                     u8537:
 12664  0057D0  2EE8               	decfsz	wreg,f,c
 12665  0057D2  D7FE               	bra	u8537
 12666  0057D4  D000               	nop2	
 12667                           
 12668                           ;lcd.c: 30: lcdNibble(data);
 12669  0057D6  0100               	movlb	0	; () banked
 12670  0057D8  5183               	movf	lcdInst@data& (0+255),w,b
 12671  0057DA  ECFB  F028         	call	_lcdNibble
 12672                           
 12673                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 12674  0057DE  0E04               	movlw	4
 12675  0057E0  0100               	movlb	0	; () banked
 12676  0057E2  6F82               	movwf	??_lcdInst& (0+255),b
 12677  0057E4  0E3D               	movlw	61
 12678  0057E6                     u8547:
 12679  0057E6  2EE8               	decfsz	wreg,f,c
 12680  0057E8  D7FE               	bra	u8547
 12681  0057EA  2F82               	decfsz	??_lcdInst& (0+255),f,b
 12682  0057EC  D7FC               	bra	u8547
 12683  0057EE  D000               	nop2	
 12684  0057F0  0012               	return		;funcret
 12685  0057F2                     __end_of_lcdInst:
 12686                           	opt stack 0
 12687                           tblptru	equ	0xFF8
 12688                           tblptrh	equ	0xFF7
 12689                           tblptrl	equ	0xFF6
 12690                           tablat	equ	0xFF5
 12691                           prodh	equ	0xFF4
 12692                           prodl	equ	0xFF3
 12693                           intcon	equ	0xFF2
 12694                           postinc0	equ	0xFEE
 12695                           wreg	equ	0xFE8
 12696                           postdec1	equ	0xFE5
 12697                           fsr1l	equ	0xFE1
 12698                           indf2	equ	0xFDF
 12699                           postinc2	equ	0xFDE
 12700                           postdec2	equ	0xFDD
 12701                           fsr2h	equ	0xFDA
 12702                           fsr2l	equ	0xFD9
 12703                           status	equ	0xFD8
 12704                           
 12705 ;; *************** function _lcdNibble *****************
 12706 ;; Defined at:
 12707 ;;		line 46 in file "lcd.c"
 12708 ;; Parameters:    Size  Location     Type
 12709 ;;  data            1    wreg     unsigned char 
 12710 ;; Auto vars:     Size  Location     Type
 12711 ;;  data            1    1[BANK0 ] unsigned char 
 12712 ;;  temp            1    0[BANK0 ] unsigned char 
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      void 
 12715 ;; Registers used:
 12716 ;;		wreg, status,2, status,0
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12723 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12726 ;;Total ram usage:        2 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    6
 12729 ;; This function calls:
 12730 ;;		Nothing
 12731 ;; This function is called by:
 12732 ;;		_lcdInst
 12733 ;;		_putch
 12734 ;; This function uses a non-reentrant model
 12735 ;;
 12736                           
 12737                           	psect	text41
 12738  0051F6                     __ptext41:
 12739                           	opt stack 0
 12740  0051F6                     _lcdNibble:
 12741                           	opt stack 21
 12742                           
 12743                           ;incstack = 0
 12744                           ;lcdNibble@data stored from wreg
 12745  0051F6  0100               	movlb	0	; () banked
 12746  0051F8  6F81               	movwf	lcdNibble@data& (0+255),b
 12747                           
 12748                           ;lcd.c: 48: char temp = data & 0xF0;
 12749  0051FA  0100               	movlb	0	; () banked
 12750  0051FC  5181               	movf	lcdNibble@data& (0+255),w,b
 12751  0051FE  0BF0               	andlw	240
 12752  005200  0100               	movlb	0	; () banked
 12753  005202  6F80               	movwf	lcdNibble@temp& (0+255),b
 12754                           
 12755                           ;lcd.c: 49: LATD = LATD & 0x0F;
 12756  005204  508C               	movf	3980,w,c	;volatile
 12757  005206  0B0F               	andlw	15
 12758  005208  6E8C               	movwf	3980,c	;volatile
 12759                           
 12760                           ;lcd.c: 50: LATD = temp | LATD;
 12761  00520A  0100               	movlb	0	; () banked
 12762  00520C  5180               	movf	lcdNibble@temp& (0+255),w,b
 12763  00520E  108C               	iorwf	3980,w,c	;volatile
 12764  005210  6E8C               	movwf	3980,c	;volatile
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 12768  005212  968C               	bcf	3980,3,c	;volatile
 12769                           
 12770                           ; BSR set to: 0
 12771                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12772  005214  0ED6               	movlw	214
 12773  005216                     u8557:
 12774  005216  D000               	nop2	
 12775  005218  D000               	nop2	
 12776  00521A  2EE8               	decfsz	wreg,f,c
 12777  00521C  D7FC               	bra	u8557
 12778  00521E  D000               	nop2	
 12779                           
 12780                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 12781  005220  868C               	bsf	3980,3,c	;volatile
 12782                           
 12783                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12784  005222  0ED6               	movlw	214
 12785  005224                     u8567:
 12786  005224  D000               	nop2	
 12787  005226  D000               	nop2	
 12788  005228  2EE8               	decfsz	wreg,f,c
 12789  00522A  D7FC               	bra	u8567
 12790  00522C  D000               	nop2	
 12791                           
 12792                           ;lcd.c: 58: data = data << 4;
 12793  00522E  0100               	movlb	0	; () banked
 12794  005230  3981               	swapf	lcdNibble@data& (0+255),w,b
 12795  005232  0BF0               	andlw	240
 12796  005234  0100               	movlb	0	; () banked
 12797  005236  6F81               	movwf	lcdNibble@data& (0+255),b
 12798                           
 12799                           ;lcd.c: 60: temp = data & 0xF0;
 12800  005238  0100               	movlb	0	; () banked
 12801  00523A  5181               	movf	lcdNibble@data& (0+255),w,b
 12802  00523C  0BF0               	andlw	240
 12803  00523E  0100               	movlb	0	; () banked
 12804  005240  6F80               	movwf	lcdNibble@temp& (0+255),b
 12805                           
 12806                           ;lcd.c: 61: LATD = LATD & 0x0F;
 12807  005242  508C               	movf	3980,w,c	;volatile
 12808  005244  0B0F               	andlw	15
 12809  005246  6E8C               	movwf	3980,c	;volatile
 12810                           
 12811                           ;lcd.c: 62: LATD = temp | LATD;
 12812  005248  0100               	movlb	0	; () banked
 12813  00524A  5180               	movf	lcdNibble@temp& (0+255),w,b
 12814  00524C  108C               	iorwf	3980,w,c	;volatile
 12815  00524E  6E8C               	movwf	3980,c	;volatile
 12816                           
 12817                           ; BSR set to: 0
 12818                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 12819  005250  968C               	bcf	3980,3,c	;volatile
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12823  005252  0ED6               	movlw	214
 12824  005254                     u8577:
 12825  005254  D000               	nop2	
 12826  005256  D000               	nop2	
 12827  005258  2EE8               	decfsz	wreg,f,c
 12828  00525A  D7FC               	bra	u8577
 12829  00525C  D000               	nop2	
 12830                           
 12831                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 12832  00525E  868C               	bsf	3980,3,c	;volatile
 12833                           
 12834                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12835  005260  0ED6               	movlw	214
 12836  005262                     u8587:
 12837  005262  D000               	nop2	
 12838  005264  D000               	nop2	
 12839  005266  2EE8               	decfsz	wreg,f,c
 12840  005268  D7FC               	bra	u8587
 12841  00526A  D000               	nop2	
 12842  00526C  0012               	return		;funcret
 12843  00526E                     __end_of_lcdNibble:
 12844                           	opt stack 0
 12845                           tblptru	equ	0xFF8
 12846                           tblptrh	equ	0xFF7
 12847                           tblptrl	equ	0xFF6
 12848                           tablat	equ	0xFF5
 12849                           prodh	equ	0xFF4
 12850                           prodl	equ	0xFF3
 12851                           intcon	equ	0xFF2
 12852                           postinc0	equ	0xFEE
 12853                           wreg	equ	0xFE8
 12854                           postdec1	equ	0xFE5
 12855                           fsr1l	equ	0xFE1
 12856                           indf2	equ	0xFDF
 12857                           postinc2	equ	0xFDE
 12858                           postdec2	equ	0xFDD
 12859                           fsr2h	equ	0xFDA
 12860                           fsr2l	equ	0xFD9
 12861                           status	equ	0xFD8
 12862                           
 12863 ;; *************** function ___almod *****************
 12864 ;; Defined at:
 12865 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 12866 ;; Parameters:    Size  Location     Type
 12867 ;;  dividend        4   14[BANK0 ] long 
 12868 ;;  divisor         4   18[BANK0 ] long 
 12869 ;; Auto vars:     Size  Location     Type
 12870 ;;  sign            1   23[BANK0 ] unsigned char 
 12871 ;;  counter         1   22[BANK0 ] unsigned char 
 12872 ;; Return value:  Size  Location     Type
 12873 ;;                  4   14[BANK0 ] long 
 12874 ;; Registers used:
 12875 ;;		wreg, status,2, status,0
 12876 ;; Tracked objects:
 12877 ;;		On entry : 0/0
 12878 ;;		On exit  : 0/0
 12879 ;;		Unchanged: 0/0
 12880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12881 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12882 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12884 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12885 ;;Total ram usage:       10 bytes
 12886 ;; Hardware stack levels used:    1
 12887 ;; Hardware stack levels required when called:    6
 12888 ;; This function calls:
 12889 ;;		Nothing
 12890 ;; This function is called by:
 12891 ;;		_main
 12892 ;; This function uses a non-reentrant model
 12893 ;;
 12894                           
 12895                           	psect	text42
 12896  0047FE                     __ptext42:
 12897                           	opt stack 0
 12898  0047FE                     ___almod:
 12899                           	opt stack 24
 12900                           
 12901                           ;incstack = 0
 12902  0047FE  0E00               	movlw	0
 12903  004800  0100               	movlb	0	; () banked
 12904  004802  6F97               	movwf	___almod@sign& (0+255),b
 12905                           
 12906                           ; BSR set to: 0
 12907  004804  0100               	movlb	0	; () banked
 12908  004806  AF91               	btfss	(___almod@dividend+3)& (0+255),7,b
 12909  004808  D00C               	goto	l6563
 12910                           
 12911                           ; BSR set to: 0
 12912  00480A  0100               	movlb	0	; () banked
 12913  00480C  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 12914  00480E  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 12915  004810  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 12916  004812  6D8E               	negf	___almod@dividend& (0+255),b
 12917  004814  0E00               	movlw	0
 12918  004816  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12919  004818  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12920  00481A  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12921                           
 12922                           ; BSR set to: 0
 12923  00481C  0E01               	movlw	1
 12924  00481E  0100               	movlb	0	; () banked
 12925  004820  6F97               	movwf	___almod@sign& (0+255),b
 12926  004822                     l6563:
 12927                           
 12928                           ; BSR set to: 0
 12929  004822  0100               	movlb	0	; () banked
 12930  004824  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 12931  004826  D009               	goto	l6567
 12932                           
 12933                           ; BSR set to: 0
 12934  004828  0100               	movlb	0	; () banked
 12935  00482A  1F95               	comf	(___almod@divisor+3)& (0+255),f,b
 12936  00482C  1F94               	comf	(___almod@divisor+2)& (0+255),f,b
 12937  00482E  1F93               	comf	(___almod@divisor+1)& (0+255),f,b
 12938  004830  6D92               	negf	___almod@divisor& (0+255),b
 12939  004832  0E00               	movlw	0
 12940  004834  2393               	addwfc	(___almod@divisor+1)& (0+255),f,b
 12941  004836  2394               	addwfc	(___almod@divisor+2)& (0+255),f,b
 12942  004838  2395               	addwfc	(___almod@divisor+3)& (0+255),f,b
 12943  00483A                     l6567:
 12944                           
 12945                           ; BSR set to: 0
 12946  00483A  0100               	movlb	0	; () banked
 12947  00483C  5192               	movf	___almod@divisor& (0+255),w,b
 12948  00483E  0100               	movlb	0	; () banked
 12949  004840  1193               	iorwf	(___almod@divisor+1)& (0+255),w,b
 12950  004842  0100               	movlb	0	; () banked
 12951  004844  1194               	iorwf	(___almod@divisor+2)& (0+255),w,b
 12952  004846  0100               	movlb	0	; () banked
 12953  004848  1195               	iorwf	(___almod@divisor+3)& (0+255),w,b
 12954  00484A  B4D8               	btfsc	status,2,c
 12955  00484C  D03A               	goto	l6583
 12956                           
 12957                           ; BSR set to: 0
 12958  00484E  0E01               	movlw	1
 12959  004850  0100               	movlb	0	; () banked
 12960  004852  6F96               	movwf	___almod@counter& (0+255),b
 12961  004854  D008               	goto	l6573
 12962  004856                     l6571:
 12963                           
 12964                           ; BSR set to: 0
 12965  004856  0100               	movlb	0	; () banked
 12966  004858  90D8               	bcf	status,0,c
 12967  00485A  3792               	rlcf	___almod@divisor& (0+255),f,b
 12968  00485C  3793               	rlcf	(___almod@divisor+1)& (0+255),f,b
 12969  00485E  3794               	rlcf	(___almod@divisor+2)& (0+255),f,b
 12970  004860  3795               	rlcf	(___almod@divisor+3)& (0+255),f,b
 12971  004862  0100               	movlb	0	; () banked
 12972  004864  2B96               	incf	___almod@counter& (0+255),f,b
 12973  004866                     l6573:
 12974                           
 12975                           ; BSR set to: 0
 12976  004866  0100               	movlb	0	; () banked
 12977  004868  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 12978  00486A  D7F5               	goto	l6571
 12979  00486C                     l6575:
 12980                           
 12981                           ; BSR set to: 0
 12982  00486C  0100               	movlb	0	; () banked
 12983  00486E  5192               	movf	___almod@divisor& (0+255),w,b
 12984  004870  0100               	movlb	0	; () banked
 12985  004872  5D8E               	subwf	___almod@dividend& (0+255),w,b
 12986  004874  0100               	movlb	0	; () banked
 12987  004876  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 12988  004878  0100               	movlb	0	; () banked
 12989  00487A  598F               	subwfb	(___almod@dividend+1)& (0+255),w,b
 12990  00487C  0100               	movlb	0	; () banked
 12991  00487E  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 12992  004880  0100               	movlb	0	; () banked
 12993  004882  5990               	subwfb	(___almod@dividend+2)& (0+255),w,b
 12994  004884  0100               	movlb	0	; () banked
 12995  004886  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 12996  004888  0100               	movlb	0	; () banked
 12997  00488A  5991               	subwfb	(___almod@dividend+3)& (0+255),w,b
 12998  00488C  A0D8               	btfss	status,0,c
 12999  00488E  D010               	goto	l6579
 13000                           
 13001                           ; BSR set to: 0
 13002  004890  0100               	movlb	0	; () banked
 13003  004892  5192               	movf	___almod@divisor& (0+255),w,b
 13004  004894  0100               	movlb	0	; () banked
 13005  004896  5F8E               	subwf	___almod@dividend& (0+255),f,b
 13006  004898  0100               	movlb	0	; () banked
 13007  00489A  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 13008  00489C  0100               	movlb	0	; () banked
 13009  00489E  5B8F               	subwfb	(___almod@dividend+1)& (0+255),f,b
 13010  0048A0  0100               	movlb	0	; () banked
 13011  0048A2  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 13012  0048A4  0100               	movlb	0	; () banked
 13013  0048A6  5B90               	subwfb	(___almod@dividend+2)& (0+255),f,b
 13014  0048A8  0100               	movlb	0	; () banked
 13015  0048AA  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 13016  0048AC  0100               	movlb	0	; () banked
 13017  0048AE  5B91               	subwfb	(___almod@dividend+3)& (0+255),f,b
 13018  0048B0                     l6579:
 13019                           
 13020                           ; BSR set to: 0
 13021  0048B0  0100               	movlb	0	; () banked
 13022  0048B2  90D8               	bcf	status,0,c
 13023  0048B4  3395               	rrcf	(___almod@divisor+3)& (0+255),f,b
 13024  0048B6  3394               	rrcf	(___almod@divisor+2)& (0+255),f,b
 13025  0048B8  3393               	rrcf	(___almod@divisor+1)& (0+255),f,b
 13026  0048BA  3392               	rrcf	___almod@divisor& (0+255),f,b
 13027                           
 13028                           ; BSR set to: 0
 13029  0048BC  0100               	movlb	0	; () banked
 13030  0048BE  2F96               	decfsz	___almod@counter& (0+255),f,b
 13031  0048C0  D7D5               	goto	l6575
 13032  0048C2                     l6583:
 13033                           
 13034                           ; BSR set to: 0
 13035  0048C2  0100               	movlb	0	; () banked
 13036  0048C4  5197               	movf	___almod@sign& (0+255),w,b
 13037  0048C6  0100               	movlb	0	; () banked
 13038  0048C8  B4D8               	btfsc	status,2,c
 13039  0048CA  D009               	goto	l6587
 13040                           
 13041                           ; BSR set to: 0
 13042  0048CC  0100               	movlb	0	; () banked
 13043  0048CE  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 13044  0048D0  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 13045  0048D2  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 13046  0048D4  6D8E               	negf	___almod@dividend& (0+255),b
 13047  0048D6  0E00               	movlw	0
 13048  0048D8  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 13049  0048DA  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 13050  0048DC  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 13051  0048DE                     l6587:
 13052                           
 13053                           ; BSR set to: 0
 13054  0048DE  C08E  F08E         	movff	___almod@dividend,?___almod
 13055  0048E2  C08F  F08F         	movff	___almod@dividend+1,?___almod+1
 13056  0048E6  C090  F090         	movff	___almod@dividend+2,?___almod+2
 13057  0048EA  C091  F091         	movff	___almod@dividend+3,?___almod+3
 13058  0048EE  0012               	return	
 13059  0048F0                     __end_of___almod:
 13060                           	opt stack 0
 13061                           tblptru	equ	0xFF8
 13062                           tblptrh	equ	0xFF7
 13063                           tblptrl	equ	0xFF6
 13064                           tablat	equ	0xFF5
 13065                           prodh	equ	0xFF4
 13066                           prodl	equ	0xFF3
 13067                           intcon	equ	0xFF2
 13068                           postinc0	equ	0xFEE
 13069                           wreg	equ	0xFE8
 13070                           postdec1	equ	0xFE5
 13071                           fsr1l	equ	0xFE1
 13072                           indf2	equ	0xFDF
 13073                           postinc2	equ	0xFDE
 13074                           postdec2	equ	0xFDD
 13075                           fsr2h	equ	0xFDA
 13076                           fsr2l	equ	0xFD9
 13077                           status	equ	0xFD8
 13078                           
 13079 ;; *************** function ___aldiv *****************
 13080 ;; Defined at:
 13081 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 13082 ;; Parameters:    Size  Location     Type
 13083 ;;  dividend        4    0[BANK0 ] long 
 13084 ;;  divisor         4    4[BANK0 ] long 
 13085 ;; Auto vars:     Size  Location     Type
 13086 ;;  quotient        4   10[BANK0 ] long 
 13087 ;;  sign            1    9[BANK0 ] unsigned char 
 13088 ;;  counter         1    8[BANK0 ] unsigned char 
 13089 ;; Return value:  Size  Location     Type
 13090 ;;                  4    0[BANK0 ] long 
 13091 ;; Registers used:
 13092 ;;		wreg, status,2, status,0
 13093 ;; Tracked objects:
 13094 ;;		On entry : 0/0
 13095 ;;		On exit  : 0/0
 13096 ;;		Unchanged: 0/0
 13097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13098 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13099 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;Total ram usage:       14 bytes
 13103 ;; Hardware stack levels used:    1
 13104 ;; Hardware stack levels required when called:    6
 13105 ;; This function calls:
 13106 ;;		Nothing
 13107 ;; This function is called by:
 13108 ;;		_main
 13109 ;; This function uses a non-reentrant model
 13110 ;;
 13111                           
 13112                           	psect	text43
 13113  0041E6                     __ptext43:
 13114                           	opt stack 0
 13115  0041E6                     ___aldiv:
 13116                           	opt stack 24
 13117                           
 13118                           ; BSR set to: 0
 13119                           ;incstack = 0
 13120  0041E6  0E00               	movlw	0
 13121  0041E8  0100               	movlb	0	; () banked
 13122  0041EA  6F89               	movwf	___aldiv@sign& (0+255),b
 13123                           
 13124                           ; BSR set to: 0
 13125  0041EC  0100               	movlb	0	; () banked
 13126  0041EE  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 13127  0041F0  D00C               	goto	l6519
 13128                           
 13129                           ; BSR set to: 0
 13130  0041F2  0100               	movlb	0	; () banked
 13131  0041F4  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
 13132  0041F6  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
 13133  0041F8  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
 13134  0041FA  6D84               	negf	___aldiv@divisor& (0+255),b
 13135  0041FC  0E00               	movlw	0
 13136  0041FE  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 13137  004200  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 13138  004202  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 13139                           
 13140                           ; BSR set to: 0
 13141  004204  0E01               	movlw	1
 13142  004206  0100               	movlb	0	; () banked
 13143  004208  6F89               	movwf	___aldiv@sign& (0+255),b
 13144  00420A                     l6519:
 13145                           
 13146                           ; BSR set to: 0
 13147  00420A  0100               	movlb	0	; () banked
 13148  00420C  AF83               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 13149  00420E  D00C               	goto	l6525
 13150                           
 13151                           ; BSR set to: 0
 13152  004210  0100               	movlb	0	; () banked
 13153  004212  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
 13154  004214  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
 13155  004216  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
 13156  004218  6D80               	negf	___aldiv@dividend& (0+255),b
 13157  00421A  0E00               	movlw	0
 13158  00421C  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 13159  00421E  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 13160  004220  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 13161                           
 13162                           ; BSR set to: 0
 13163  004222  0E01               	movlw	1
 13164  004224  0100               	movlb	0	; () banked
 13165  004226  1B89               	xorwf	___aldiv@sign& (0+255),f,b
 13166  004228                     l6525:
 13167                           
 13168                           ; BSR set to: 0
 13169  004228  0E00               	movlw	0
 13170  00422A  0100               	movlb	0	; () banked
 13171  00422C  6F8A               	movwf	___aldiv@quotient& (0+255),b
 13172  00422E  0E00               	movlw	0
 13173  004230  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
 13174  004232  0E00               	movlw	0
 13175  004234  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
 13176  004236  0E00               	movlw	0
 13177  004238  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
 13178                           
 13179                           ; BSR set to: 0
 13180  00423A  0100               	movlb	0	; () banked
 13181  00423C  5184               	movf	___aldiv@divisor& (0+255),w,b
 13182  00423E  0100               	movlb	0	; () banked
 13183  004240  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 13184  004242  0100               	movlb	0	; () banked
 13185  004244  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 13186  004246  0100               	movlb	0	; () banked
 13187  004248  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 13188  00424A  B4D8               	btfsc	status,2,c
 13189  00424C  D042               	goto	l6547
 13190                           
 13191                           ; BSR set to: 0
 13192  00424E  0E01               	movlw	1
 13193  004250  0100               	movlb	0	; () banked
 13194  004252  6F88               	movwf	___aldiv@counter& (0+255),b
 13195  004254  D008               	goto	l6533
 13196  004256                     l6531:
 13197                           
 13198                           ; BSR set to: 0
 13199  004256  0100               	movlb	0	; () banked
 13200  004258  90D8               	bcf	status,0,c
 13201  00425A  3784               	rlcf	___aldiv@divisor& (0+255),f,b
 13202  00425C  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 13203  00425E  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 13204  004260  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 13205  004262  0100               	movlb	0	; () banked
 13206  004264  2B88               	incf	___aldiv@counter& (0+255),f,b
 13207  004266                     l6533:
 13208                           
 13209                           ; BSR set to: 0
 13210  004266  0100               	movlb	0	; () banked
 13211  004268  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 13212  00426A  D7F5               	goto	l6531
 13213  00426C                     l6535:
 13214                           
 13215                           ; BSR set to: 0
 13216  00426C  0100               	movlb	0	; () banked
 13217  00426E  90D8               	bcf	status,0,c
 13218  004270  378A               	rlcf	___aldiv@quotient& (0+255),f,b
 13219  004272  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 13220  004274  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 13221  004276  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 13222                           
 13223                           ; BSR set to: 0
 13224  004278  0100               	movlb	0	; () banked
 13225  00427A  5184               	movf	___aldiv@divisor& (0+255),w,b
 13226  00427C  0100               	movlb	0	; () banked
 13227  00427E  5D80               	subwf	___aldiv@dividend& (0+255),w,b
 13228  004280  0100               	movlb	0	; () banked
 13229  004282  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 13230  004284  0100               	movlb	0	; () banked
 13231  004286  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 13232  004288  0100               	movlb	0	; () banked
 13233  00428A  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 13234  00428C  0100               	movlb	0	; () banked
 13235  00428E  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 13236  004290  0100               	movlb	0	; () banked
 13237  004292  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 13238  004294  0100               	movlb	0	; () banked
 13239  004296  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 13240  004298  A0D8               	btfss	status,0,c
 13241  00429A  D012               	goto	l6543
 13242                           
 13243                           ; BSR set to: 0
 13244  00429C  0100               	movlb	0	; () banked
 13245  00429E  5184               	movf	___aldiv@divisor& (0+255),w,b
 13246  0042A0  0100               	movlb	0	; () banked
 13247  0042A2  5F80               	subwf	___aldiv@dividend& (0+255),f,b
 13248  0042A4  0100               	movlb	0	; () banked
 13249  0042A6  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 13250  0042A8  0100               	movlb	0	; () banked
 13251  0042AA  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 13252  0042AC  0100               	movlb	0	; () banked
 13253  0042AE  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 13254  0042B0  0100               	movlb	0	; () banked
 13255  0042B2  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 13256  0042B4  0100               	movlb	0	; () banked
 13257  0042B6  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 13258  0042B8  0100               	movlb	0	; () banked
 13259  0042BA  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 13260                           
 13261                           ; BSR set to: 0
 13262  0042BC  0100               	movlb	0	; () banked
 13263  0042BE  818A               	bsf	___aldiv@quotient& (0+255),0,b
 13264  0042C0                     l6543:
 13265                           
 13266                           ; BSR set to: 0
 13267  0042C0  0100               	movlb	0	; () banked
 13268  0042C2  90D8               	bcf	status,0,c
 13269  0042C4  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 13270  0042C6  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 13271  0042C8  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 13272  0042CA  3384               	rrcf	___aldiv@divisor& (0+255),f,b
 13273                           
 13274                           ; BSR set to: 0
 13275  0042CC  0100               	movlb	0	; () banked
 13276  0042CE  2F88               	decfsz	___aldiv@counter& (0+255),f,b
 13277  0042D0  D7CD               	goto	l6535
 13278  0042D2                     l6547:
 13279                           
 13280                           ; BSR set to: 0
 13281  0042D2  0100               	movlb	0	; () banked
 13282  0042D4  5189               	movf	___aldiv@sign& (0+255),w,b
 13283  0042D6  0100               	movlb	0	; () banked
 13284  0042D8  B4D8               	btfsc	status,2,c
 13285  0042DA  D009               	goto	l6551
 13286                           
 13287                           ; BSR set to: 0
 13288  0042DC  0100               	movlb	0	; () banked
 13289  0042DE  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 13290  0042E0  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 13291  0042E2  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 13292  0042E4  6D8A               	negf	___aldiv@quotient& (0+255),b
 13293  0042E6  0E00               	movlw	0
 13294  0042E8  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 13295  0042EA  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 13296  0042EC  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 13297  0042EE                     l6551:
 13298                           
 13299                           ; BSR set to: 0
 13300  0042EE  C08A  F080         	movff	___aldiv@quotient,?___aldiv
 13301  0042F2  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
 13302  0042F6  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
 13303  0042FA  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
 13304  0042FE  0012               	return	
 13305  004300                     __end_of___aldiv:
 13306                           	opt stack 0
 13307                           tblptru	equ	0xFF8
 13308                           tblptrh	equ	0xFF7
 13309                           tblptrl	equ	0xFF6
 13310                           tablat	equ	0xFF5
 13311                           prodh	equ	0xFF4
 13312                           prodl	equ	0xFF3
 13313                           intcon	equ	0xFF2
 13314                           postinc0	equ	0xFEE
 13315                           wreg	equ	0xFE8
 13316                           postdec1	equ	0xFE5
 13317                           fsr1l	equ	0xFE1
 13318                           indf2	equ	0xFDF
 13319                           postinc2	equ	0xFDE
 13320                           postdec2	equ	0xFDD
 13321                           fsr2h	equ	0xFDA
 13322                           fsr2l	equ	0xFD9
 13323                           status	equ	0xFD8
 13324                           
 13325 ;; *************** function _service *****************
 13326 ;; Defined at:
 13327 ;;		line 309 in file "main.c"
 13328 ;; Parameters:    Size  Location     Type
 13329 ;;		None
 13330 ;; Auto vars:     Size  Location     Type
 13331 ;;  key             1  121[COMRAM] unsigned char 
 13332 ;; Return value:  Size  Location     Type
 13333 ;;                  1    wreg      void 
 13334 ;; Registers used:
 13335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13336 ;; Tracked objects:
 13337 ;;		On entry : 0/0
 13338 ;;		On exit  : 0/0
 13339 ;;		Unchanged: 0/0
 13340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13343 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13344 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13345 ;;Total ram usage:       19 bytes
 13346 ;; Hardware stack levels used:    1
 13347 ;; Hardware stack levels required when called:    5
 13348 ;; This function calls:
 13349 ;;		_servoInterruptService
 13350 ;;		i2_lcdClear
 13351 ;;		i2_printf
 13352 ;;		i2_startTimer
 13353 ;; This function is called by:
 13354 ;;		Interrupt level 2
 13355 ;; This function uses a non-reentrant model
 13356 ;;
 13357                           
 13358                           	psect	intcode
 13359  000008                     __pintcode:
 13360                           	opt stack 0
 13361  000008                     _service:
 13362                           	opt stack 19
 13363                           
 13364                           ; BSR set to: 0
 13365                           ;incstack = 0
 13366  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13367  00000A  ED91  F01E         	call	int_func,f	;refresh shadow registers
 13368                           tblptru	equ	0xFF8
 13369                           tblptrh	equ	0xFF7
 13370                           tblptrl	equ	0xFF6
 13371                           tablat	equ	0xFF5
 13372                           prodh	equ	0xFF4
 13373                           prodl	equ	0xFF3
 13374                           intcon	equ	0xFF2
 13375                           postinc0	equ	0xFEE
 13376                           wreg	equ	0xFE8
 13377                           postdec1	equ	0xFE5
 13378                           fsr1l	equ	0xFE1
 13379                           indf2	equ	0xFDF
 13380                           postinc2	equ	0xFDE
 13381                           postdec2	equ	0xFDD
 13382                           fsr2h	equ	0xFDA
 13383                           fsr2l	equ	0xFD9
 13384                           status	equ	0xFD8
 13385                           
 13386                           	psect	intcode_body
 13387  003D22                     __pintcode_body:
 13388                           	opt stack 19
 13389  003D22                     int_func:
 13390                           	opt stack 19
 13391  003D22  0006               	pop		; remove dummy address from shadow register refresh
 13392  003D24  CFFA F06C          	movff	pclath,??_service+4
 13393  003D28  CFFB F06D          	movff	pclatu,??_service+5
 13394  003D2C  CFE9 F06E          	movff	fsr0l,??_service+6
 13395  003D30  CFEA F06F          	movff	fsr0h,??_service+7
 13396  003D34  CFE1 F070          	movff	fsr1l,??_service+8
 13397  003D38  CFE2 F071          	movff	fsr1h,??_service+9
 13398  003D3C  CFD9 F072          	movff	fsr2l,??_service+10
 13399  003D40  CFDA F073          	movff	fsr2h,??_service+11
 13400  003D44  CFF3 F074          	movff	prodl,??_service+12
 13401  003D48  CFF4 F075          	movff	prodh,??_service+13
 13402  003D4C  CFF6 F076          	movff	tblptrl,??_service+14
 13403  003D50  CFF7 F077          	movff	tblptrh,??_service+15
 13404  003D54  CFF8 F078          	movff	tblptru,??_service+16
 13405  003D58  CFF5 F079          	movff	tablat,??_service+17
 13406                           
 13407                           ;main.c: 311: servoInterruptService();
 13408  003D5C  EC06  F022         	call	_servoInterruptService	;wreg free
 13409                           
 13410                           ;main.c: 313: if(TMR1IF){
 13411  003D60  A09E               	btfss	3998,0,c	;volatile
 13412  003D62  D024               	goto	i2l7035
 13413                           
 13414                           ;main.c: 314: startTimer(1,0xffff - period);
 13415  003D64  0E00               	movlw	0
 13416  003D66  6E08               	movwf	i2startTimer@timer+1,c
 13417  003D68  0E01               	movlw	1
 13418  003D6A  6E07               	movwf	i2startTimer@timer,c
 13419  003D6C  0EFF               	movlw	255
 13420  003D6E  6E68               	movwf	??_service& (0+255),c
 13421  003D70  0EFF               	movlw	255
 13422  003D72  6E69               	movwf	(??_service+1)& (0+255),c
 13423  003D74  C16C  F06A         	movff	_period,??_service+2
 13424  003D78  C16D  F06B         	movff	_period+1,??_service+3
 13425  003D7C  1E6A               	comf	??_service+2,f,c
 13426  003D7E  1E6B               	comf	??_service+3,f,c
 13427  003D80  4A6A               	infsnz	??_service+2,f,c
 13428  003D82  2A6B               	incf	??_service+3,f,c
 13429  003D84  5068               	movf	??_service,w,c
 13430  003D86  266A               	addwf	??_service+2,f,c
 13431  003D88  5069               	movf	??_service+1,w,c
 13432  003D8A  226B               	addwfc	??_service+3,f,c
 13433  003D8C  C06A  F009         	movff	??_service+2,i2startTimer@val
 13434  003D90  C06B  F00A         	movff	??_service+3,i2startTimer@val+1
 13435  003D94  6A0B               	clrf	i2startTimer@val+2,c
 13436  003D96  6A0C               	clrf	i2startTimer@val+3,c
 13437  003D98  EC78  F02A         	call	i2_startTimer	;wreg free
 13438                           
 13439                           ;main.c: 315: time+=1;
 13440  003D9C  0E01               	movlw	1
 13441  003D9E  0101               	movlb	1	; () banked
 13442  003DA0  27AC               	addwf	_time& (0+255),f,b
 13443  003DA2  0E00               	movlw	0
 13444  003DA4  23AD               	addwfc	(_time+1)& (0+255),f,b
 13445  003DA6  23AE               	addwfc	(_time+2)& (0+255),f,b
 13446  003DA8  23AF               	addwfc	(_time+3)& (0+255),f,b
 13447                           
 13448                           ; BSR set to: 1
 13449                           ;main.c: 316: TMR1IF = 0;
 13450  003DAA  909E               	bcf	3998,0,c	;volatile
 13451  003DAC                     i2l7035:
 13452                           
 13453                           ;main.c: 317: }
 13454                           ;main.c: 320: if(INT0IF){ INT0IF = 0;
 13455  003DAC  A2F2               	btfss	intcon,1,c	;volatile
 13456  003DAE  D006               	goto	i2l7041
 13457  003DB0  92F2               	bcf	intcon,1,c	;volatile
 13458                           
 13459                           ;main.c: 321: batteryDetected = 1;
 13460  003DB2  0E00               	movlw	0
 13461  003DB4  0101               	movlb	1	; () banked
 13462  003DB6  6FB1               	movwf	(_batteryDetected+1)& (0+255),b
 13463  003DB8  0E01               	movlw	1
 13464  003DBA  6FB0               	movwf	_batteryDetected& (0+255),b
 13465  003DBC                     i2l7041:
 13466                           
 13467                           ;main.c: 322: }
 13468                           ;main.c: 325: if(INT1IF && INT1IE){INT1IF = 0;
 13469  003DBC  B0F0               	btfsc	intcon3,0,c	;volatile
 13470  003DBE  A6F0               	btfss	intcon3,3,c	;volatile
 13471  003DC0  D02F               	goto	i2l181
 13472  003DC2  90F0               	bcf	intcon3,0,c	;volatile
 13473                           
 13474                           ;main.c: 328: char key = (PORTB & 0xF0) >> 4;
 13475  003DC4  3881               	swapf	3969,w,c	;volatile
 13476  003DC6  0B0F               	andlw	15
 13477  003DC8  0B0F               	andlw	15
 13478  003DCA  6E7A               	movwf	service@key,c
 13479                           
 13480                           ;main.c: 329: if(key == 0)time = 0;
 13481  003DCC  507A               	movf	service@key,w,c
 13482  003DCE  A4D8               	btfss	status,2,c
 13483  003DD0  D00A               	goto	i2l7053
 13484  003DD2  0E00               	movlw	0
 13485  003DD4  0101               	movlb	1	; () banked
 13486  003DD6  6FAC               	movwf	_time& (0+255),b
 13487  003DD8  0E00               	movlw	0
 13488  003DDA  6FAD               	movwf	(_time+1)& (0+255),b
 13489  003DDC  0E00               	movlw	0
 13490  003DDE  6FAE               	movwf	(_time+2)& (0+255),b
 13491  003DE0  0E00               	movlw	0
 13492  003DE2  6FAF               	movwf	(_time+3)& (0+255),b
 13493  003DE4  D011               	goto	i2l7061
 13494  003DE6                     i2l7053:
 13495                           
 13496                           ;main.c: 330: else if(key == 1)period+=100;
 13497  003DE6  047A               	decf	service@key,w,c
 13498  003DE8  A4D8               	btfss	status,2,c
 13499  003DEA  D005               	goto	i2l7057
 13500  003DEC  0E64               	movlw	100
 13501  003DEE  0101               	movlb	1	; () banked
 13502  003DF0  276C               	addwf	_period& (0+255),f,b
 13503  003DF2  0E00               	movlw	0
 13504  003DF4  D008               	goto	L7
 13505  003DF6                     i2l7057:
 13506                           
 13507                           ;main.c: 331: else if(key == 2)period-=100;
 13508  003DF6  0E02               	movlw	2
 13509  003DF8  187A               	xorwf	service@key,w,c
 13510  003DFA  A4D8               	btfss	status,2,c
 13511  003DFC  D005               	goto	i2l7061
 13512  003DFE  0101               	movlb	1	; () banked
 13513  003E00  0E9C               	movlw	156
 13514  003E02  276C               	addwf	_period& (0+255),f,b
 13515  003E04  0EFF               	movlw	255
 13516  003E06                     L7:
 13517  003E06  236D               	addwfc	(_period+1)& (0+255),f,b
 13518  003E08                     i2l7061:
 13519                           
 13520                           ;main.c: 332: lcdClear();
 13521  003E08  EC7E  F02C         	call	i2_lcdClear	;wreg free
 13522                           
 13523                           ;main.c: 333: printf("period %ld",period);
 13524  003E0C  0EDA               	movlw	low STR_5
 13525  003E0E  6E40               	movwf	i2printf@f,c
 13526  003E10  0EFF               	movlw	high STR_5
 13527  003E12  6E41               	movwf	i2printf@f+1,c
 13528  003E14  C16C  F042         	movff	_period,?i2_printf+2
 13529  003E18  C16D  F043         	movff	_period+1,?i2_printf+3
 13530  003E1C  EC1E  F007         	call	i2_printf	;wreg free
 13531  003E20                     i2l181:
 13532  003E20  C079  FFF5         	movff	??_service+17,tablat
 13533  003E24  C078  FFF8         	movff	??_service+16,tblptru
 13534  003E28  C077  FFF7         	movff	??_service+15,tblptrh
 13535  003E2C  C076  FFF6         	movff	??_service+14,tblptrl
 13536  003E30  C075  FFF4         	movff	??_service+13,prodh
 13537  003E34  C074  FFF3         	movff	??_service+12,prodl
 13538  003E38  C073  FFDA         	movff	??_service+11,fsr2h
 13539  003E3C  C072  FFD9         	movff	??_service+10,fsr2l
 13540  003E40  C071  FFE2         	movff	??_service+9,fsr1h
 13541  003E44  C070  FFE1         	movff	??_service+8,fsr1l
 13542  003E48  C06F  FFEA         	movff	??_service+7,fsr0h
 13543  003E4C  C06E  FFE9         	movff	??_service+6,fsr0l
 13544  003E50  C06D  FFFB         	movff	??_service+5,pclatu
 13545  003E54  C06C  FFFA         	movff	??_service+4,pclath
 13546  003E58  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13547  003E5A  0011               	retfie		f
 13548  003E5C                     __end_of_service:
 13549                           	opt stack 0
 13550                           pclatu	equ	0xFFB
 13551                           pclath	equ	0xFFA
 13552                           tblptru	equ	0xFF8
 13553                           tblptrh	equ	0xFF7
 13554                           tblptrl	equ	0xFF6
 13555                           tablat	equ	0xFF5
 13556                           prodh	equ	0xFF4
 13557                           prodl	equ	0xFF3
 13558                           intcon	equ	0xFF2
 13559                           intcon3	equ	0xFF0
 13560                           postinc0	equ	0xFEE
 13561                           fsr0h	equ	0xFEA
 13562                           fsr0l	equ	0xFE9
 13563                           wreg	equ	0xFE8
 13564                           postdec1	equ	0xFE5
 13565                           fsr1h	equ	0xFE2
 13566                           fsr1l	equ	0xFE1
 13567                           indf2	equ	0xFDF
 13568                           postinc2	equ	0xFDE
 13569                           postdec2	equ	0xFDD
 13570                           fsr2h	equ	0xFDA
 13571                           fsr2l	equ	0xFD9
 13572                           status	equ	0xFD8
 13573                           
 13574 ;; *************** function i2_printf *****************
 13575 ;; Defined at:
 13576 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13577 ;; Parameters:    Size  Location     Type
 13578 ;;  f               2   63[COMRAM] PTR const unsigned char 
 13579 ;;		 -> STR_18(17), STR_17(18), STR_16(17), STR_15(18), 
 13580 ;;		 -> STR_14(17), STR_13(19), STR_12(17), STR_11(18), 
 13581 ;;		 -> STR_10(17), STR_9(18), STR_8(17), STR_7(18), 
 13582 ;;		 -> STR_6(8), STR_5(11), STR_4(26), STR_3(9), 
 13583 ;;		 -> STR_2(17), STR_1(8), 
 13584 ;; Auto vars:     Size  Location     Type
 13585 ;;  printf          4   92[COMRAM] unsigned long 
 13586 ;;  printf          4   83[COMRAM] struct .
 13587 ;;  printf          3   89[COMRAM] struct .
 13588 ;;  printf          2  100[COMRAM] int 
 13589 ;;  printf          2   98[COMRAM] unsigned short 
 13590 ;;  printf          2   96[COMRAM] int 
 13591 ;;  printf          2   87[COMRAM] int 
 13592 ;;  printf          2   81[COMRAM] PTR void [1]
 13593 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13594 ;;  printf          2   79[COMRAM] unsigned int 
 13595 ;;  printf          2   77[COMRAM] PTR const unsigned char 
 13596 ;;		 -> printf@c(1), 
 13597 ;;  printf          1  102[COMRAM] char 
 13598 ;;  printf          1   76[COMRAM] unsigned char 
 13599 ;;  printf          1    0        unsigned char 
 13600 ;; Return value:  Size  Location     Type
 13601 ;;                  2   63[COMRAM] int 
 13602 ;; Registers used:
 13603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13604 ;; Tracked objects:
 13605 ;;		On entry : 0/0
 13606 ;;		On exit  : 0/0
 13607 ;;		Unchanged: 0/0
 13608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13610 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13611 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13612 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13613 ;;Total ram usage:       40 bytes
 13614 ;; Hardware stack levels used:    1
 13615 ;; Hardware stack levels required when called:    4
 13616 ;; This function calls:
 13617 ;;		i2___awdiv
 13618 ;;		i2___ftadd
 13619 ;;		i2___ftge
 13620 ;;		i2___ftmul
 13621 ;;		i2___ftneg
 13622 ;;		i2___ftsub
 13623 ;;		i2___fttol
 13624 ;;		i2___lldiv
 13625 ;;		i2___llmod
 13626 ;;		i2___lltoft
 13627 ;;		i2___wmul
 13628 ;;		i2__div_to_l_
 13629 ;;		i2__tdiv_to_l_
 13630 ;;		i2_fround
 13631 ;;		i2_isdigit
 13632 ;;		i2_putch
 13633 ;;		i2_scale
 13634 ;; This function is called by:
 13635 ;;		_service
 13636 ;; This function uses a non-reentrant model
 13637 ;;
 13638                           
 13639                           	psect	text45
 13640  000E3C                     __ptext45:
 13641                           	opt stack 0
 13642  000E3C                     i2_printf:
 13643                           	opt stack 19
 13644                           
 13645                           ;doprnt.c: 466: va_list ap;
 13646                           ;doprnt.c: 499: signed char c;
 13647                           ;doprnt.c: 501: int width;
 13648                           ;doprnt.c: 504: int prec;
 13649                           ;doprnt.c: 508: unsigned short flag;
 13650                           ;doprnt.c: 515: char d;
 13651                           ;doprnt.c: 516: double fval;
 13652                           ;doprnt.c: 517: int exp;
 13653                           ;doprnt.c: 523: union {
 13654                           ;doprnt.c: 524: unsigned long vd;
 13655                           ;doprnt.c: 525: double integ;
 13656                           ;doprnt.c: 526: } tmpval;
 13657                           ;doprnt.c: 528: unsigned long val;
 13658                           ;doprnt.c: 529: unsigned len;
 13659                           ;doprnt.c: 530: const char * cp;
 13660                           ;doprnt.c: 533: *ap = __va_start();
 13661                           
 13662                           ;incstack = 0
 13663  000E3C  0E42               	movlw	low (?i2_printf+2)
 13664  000E3E  6E52               	movwf	i2printf@ap,c
 13665  000E40  0E00               	movlw	high (?i2_printf+2)
 13666  000E42  6E53               	movwf	i2printf@ap+1,c
 13667                           
 13668                           ;doprnt.c: 536: while(c = *f++) {
 13669  000E44  EFDA  F00C         	goto	i2l6961
 13670  000E48                     i2l6595:
 13671                           
 13672                           ;doprnt.c: 538: if(c != '%')
 13673  000E48  0E25               	movlw	37
 13674  000E4A  1867               	xorwf	i2printf@c,w,c
 13675  000E4C  B4D8               	btfsc	status,2,c
 13676  000E4E  D005               	goto	i2l6599
 13677                           
 13678                           ;doprnt.c: 540: {
 13679                           ;doprnt.c: 541: (putch(c) );
 13680  000E50  5067               	movf	i2printf@c,w,c
 13681  000E52  EC32  F02C         	call	i2_putch
 13682                           
 13683                           ;doprnt.c: 542: continue;
 13684  000E56  EFDA  F00C         	goto	i2l6961
 13685  000E5A                     i2l6599:
 13686                           
 13687                           ;doprnt.c: 543: }
 13688                           ;doprnt.c: 546: width = 0;
 13689  000E5A  0E00               	movlw	0
 13690  000E5C  6E62               	movwf	i2printf@width+1,c
 13691  000E5E  0E00               	movlw	0
 13692  000E60  6E61               	movwf	i2printf@width,c
 13693                           
 13694                           ;doprnt.c: 548: flag = 0;
 13695  000E62  0E00               	movlw	0
 13696  000E64  6E64               	movwf	i2printf@flag+1,c
 13697  000E66  0E00               	movlw	0
 13698  000E68  6E63               	movwf	i2printf@flag,c
 13699                           
 13700                           ;doprnt.c: 551: switch(*f) {
 13701                           
 13702                           ;doprnt.c: 550: for(;;) {
 13703  000E6A  D003               	goto	i2l6605
 13704  000E6C                     i2l6601:
 13705                           
 13706                           ;doprnt.c: 580: flag |= 0x04;
 13707  000E6C  8463               	bsf	i2printf@flag,2,c
 13708                           
 13709                           ;doprnt.c: 581: f++;
 13710  000E6E  4A40               	infsnz	i2printf@f,f,c
 13711  000E70  2A41               	incf	i2printf@f+1,f,c
 13712  000E72                     i2l6605:
 13713  000E72  C040  FFF6         	movff	i2printf@f,tblptrl
 13714  000E76  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13715  000E7A                     	if	0	;tblptru may be non-zero
 13716  000E7A                     	endif
 13717  000E7A                     	if	0	;tblptru may be non-zero
 13718  000E7A                     	endif
 13719  000E7A  0008               	tblrd		*
 13720  000E7C  50F5               	movf	tablat,w,c
 13721                           
 13722                           ; Switch size 1, requested type "space"
 13723                           ; Number of cases is 1, Range of values is 48 to 48
 13724                           ; switch strategies available:
 13725                           ; Name         Instructions Cycles
 13726                           ; simple_byte            4     3 (average)
 13727                           ;	Chosen strategy is simple_byte
 13728  000E7E  0A30               	xorlw	48	; case 48
 13729  000E80  B4D8               	btfsc	status,2,c
 13730  000E82  D7F4               	goto	i2l6601
 13731                           
 13732                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13733                           
 13734                           ;doprnt.c: 586: }
 13735                           
 13736                           ;doprnt.c: 585: break;
 13737  000E84  C040  FFF6         	movff	i2printf@f,tblptrl
 13738  000E88  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13739  000E8C                     	if	0	;tblptru may be non-zero
 13740  000E8C                     	endif
 13741  000E8C                     	if	0	;tblptru may be non-zero
 13742  000E8C                     	endif
 13743  000E8C  0008               	tblrd		*
 13744  000E8E  50F5               	movf	tablat,w,c
 13745  000E90  EC54  F02C         	call	i2_isdigit
 13746  000E94  A0D8               	btfss	status,0,c
 13747  000E96  D032               	goto	i2l6619
 13748                           
 13749                           ;doprnt.c: 598: width = 0;
 13750  000E98  0E00               	movlw	0
 13751  000E9A  6E62               	movwf	i2printf@width+1,c
 13752  000E9C  0E00               	movlw	0
 13753  000E9E  6E61               	movwf	i2printf@width,c
 13754  000EA0                     i2l6611:
 13755                           
 13756                           ;doprnt.c: 600: width *= 10;
 13757  000EA0  C061  F00F         	movff	i2printf@width,i2___wmul@multiplier
 13758  000EA4  C062  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 13759  000EA8  0E00               	movlw	0
 13760  000EAA  6E12               	movwf	i2___wmul@multiplicand+1,c
 13761  000EAC  0E0A               	movlw	10
 13762  000EAE  6E11               	movwf	i2___wmul@multiplicand,c
 13763  000EB0  EC0D  F02C         	call	i2___wmul	;wreg free
 13764  000EB4  C00F  F061         	movff	?i2___wmul,i2printf@width
 13765  000EB8  C010  F062         	movff	?i2___wmul+1,i2printf@width+1
 13766                           
 13767                           ;doprnt.c: 601: width += *f++ - '0';
 13768  000EBC  0ED0               	movlw	208
 13769  000EBE  6E44               	movwf	??i2_printf& (0+255),c
 13770  000EC0  0EFF               	movlw	255
 13771  000EC2  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13772  000EC4  C040  FFF6         	movff	i2printf@f,tblptrl
 13773  000EC8  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13774  000ECC                     	if	0	;tblptru may be non-zero
 13775  000ECC                     	endif
 13776  000ECC                     	if	0	;tblptru may be non-zero
 13777  000ECC                     	endif
 13778  000ECC  0008               	tblrd		*
 13779  000ECE  50F5               	movf	tablat,w,c
 13780  000ED0  6E46               	movwf	(??i2_printf+2)& (0+255),c
 13781  000ED2  6A47               	clrf	(??i2_printf+3)& (0+255),c
 13782  000ED4  5044               	movf	??i2_printf,w,c
 13783  000ED6  2646               	addwf	??i2_printf+2,f,c
 13784  000ED8  5045               	movf	??i2_printf+1,w,c
 13785  000EDA  2247               	addwfc	??i2_printf+3,f,c
 13786  000EDC  5046               	movf	??i2_printf+2,w,c
 13787  000EDE  2661               	addwf	i2printf@width,f,c
 13788  000EE0  5047               	movf	??i2_printf+3,w,c
 13789  000EE2  2262               	addwfc	i2printf@width+1,f,c
 13790  000EE4  4A40               	infsnz	i2printf@f,f,c
 13791  000EE6  2A41               	incf	i2printf@f+1,f,c
 13792                           
 13793                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13794  000EE8  C040  FFF6         	movff	i2printf@f,tblptrl
 13795  000EEC  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13796  000EF0                     	if	0	;tblptru may be non-zero
 13797  000EF0                     	endif
 13798  000EF0                     	if	0	;tblptru may be non-zero
 13799  000EF0                     	endif
 13800  000EF0  0008               	tblrd		*
 13801  000EF2  50F5               	movf	tablat,w,c
 13802  000EF4  EC54  F02C         	call	i2_isdigit
 13803  000EF8  B0D8               	btfsc	status,0,c
 13804  000EFA  D7D2               	goto	i2l6611
 13805  000EFC                     i2l6619:
 13806                           
 13807                           ;doprnt.c: 608: }
 13808                           ;doprnt.c: 611: if(*f == '.') {
 13809  000EFC  C040  FFF6         	movff	i2printf@f,tblptrl
 13810  000F00  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13811  000F04                     	if	0	;tblptru may be non-zero
 13812  000F04                     	endif
 13813  000F04                     	if	0	;tblptru may be non-zero
 13814  000F04                     	endif
 13815  000F04  0008               	tblrd		*
 13816  000F06  50F5               	movf	tablat,w,c
 13817  000F08  0A2E               	xorlw	46
 13818  000F0A  A4D8               	btfss	status,2,c
 13819  000F0C  D02E               	goto	i2l6631
 13820                           
 13821                           ;doprnt.c: 612: flag |= 0x4000;
 13822  000F0E  8C64               	bsf	i2printf@flag+1,6,c
 13823                           
 13824                           ;doprnt.c: 613: f++;
 13825  000F10  4A40               	infsnz	i2printf@f,f,c
 13826  000F12  2A41               	incf	i2printf@f+1,f,c
 13827                           
 13828                           ;doprnt.c: 620: {
 13829                           ;doprnt.c: 621: prec = 0;
 13830  000F14  0E00               	movlw	0
 13831  000F16  6E66               	movwf	i2printf@prec+1,c
 13832  000F18  0E00               	movlw	0
 13833  000F1A  6E65               	movwf	i2printf@prec,c
 13834                           
 13835                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 13836  000F1C  D01B               	goto	i2l6629
 13837  000F1E                     i2l6625:
 13838                           
 13839                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 13840  000F1E  C065  F00F         	movff	i2printf@prec,i2___wmul@multiplier
 13841  000F22  C066  F010         	movff	i2printf@prec+1,i2___wmul@multiplier+1
 13842  000F26  0E00               	movlw	0
 13843  000F28  6E12               	movwf	i2___wmul@multiplicand+1,c
 13844  000F2A  0E0A               	movlw	10
 13845  000F2C  6E11               	movwf	i2___wmul@multiplicand,c
 13846  000F2E  EC0D  F02C         	call	i2___wmul	;wreg free
 13847  000F32  C040  FFF6         	movff	i2printf@f,tblptrl
 13848  000F36  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13849  000F3A                     	if	0	;tblptru may be non-zero
 13850  000F3A                     	endif
 13851  000F3A                     	if	0	;tblptru may be non-zero
 13852  000F3A                     	endif
 13853  000F3A  0008               	tblrd		*
 13854  000F3C  50F5               	movf	tablat,w,c
 13855  000F3E  260F               	addwf	?i2___wmul,f,c
 13856  000F40  0E00               	movlw	0
 13857  000F42  2210               	addwfc	?i2___wmul+1,f,c
 13858  000F44  0ED0               	movlw	208
 13859  000F46  240F               	addwf	?i2___wmul,w,c
 13860  000F48  6E65               	movwf	i2printf@prec,c
 13861  000F4A  0EFF               	movlw	255
 13862  000F4C  2010               	addwfc	?i2___wmul+1,w,c
 13863  000F4E  6E66               	movwf	i2printf@prec+1,c
 13864  000F50  4A40               	infsnz	i2printf@f,f,c
 13865  000F52  2A41               	incf	i2printf@f+1,f,c
 13866  000F54                     i2l6629:
 13867  000F54  C040  FFF6         	movff	i2printf@f,tblptrl
 13868  000F58  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13869  000F5C                     	if	0	;tblptru may be non-zero
 13870  000F5C                     	endif
 13871  000F5C                     	if	0	;tblptru may be non-zero
 13872  000F5C                     	endif
 13873  000F5C  0008               	tblrd		*
 13874  000F5E  50F5               	movf	tablat,w,c
 13875  000F60  EC54  F02C         	call	i2_isdigit
 13876  000F64  A0D8               	btfss	status,0,c
 13877  000F66  D05D               	goto	i2l6673
 13878  000F68  D7DA               	goto	i2l6625
 13879  000F6A                     i2l6631:
 13880                           
 13881                           ;doprnt.c: 626: prec = 0;
 13882  000F6A  0E00               	movlw	0
 13883  000F6C  6E66               	movwf	i2printf@prec+1,c
 13884  000F6E  0E00               	movlw	0
 13885  000F70  6E65               	movwf	i2printf@prec,c
 13886                           
 13887                           ;doprnt.c: 628: flag |= 0x1000;
 13888  000F72  8864               	bsf	i2printf@flag+1,4,c
 13889                           
 13890                           ;doprnt.c: 635: switch(c = *f++) {
 13891                           
 13892                           ;doprnt.c: 630: }
 13893                           ;doprnt.c: 633: loop:
 13894  000F74  D056               	goto	i2l6673
 13895  000F76                     i2l6635:
 13896                           
 13897                           ;doprnt.c: 643: flag |= 0x10;
 13898  000F76  8863               	bsf	i2printf@flag,4,c
 13899                           
 13900                           ;doprnt.c: 644: goto loop;
 13901  000F78  D054               	goto	i2l6673
 13902  000F7A                     i2l6637:
 13903                           
 13904                           ;doprnt.c: 663: flag |= 0x400;
 13905  000F7A  8464               	bsf	i2printf@flag+1,2,c
 13906                           
 13907                           ;doprnt.c: 698: case 'i':
 13908                           ;doprnt.c: 699: break;
 13909                           
 13910                           ;doprnt.c: 697: case 'd':
 13911                           
 13912                           ;doprnt.c: 664: break;
 13913  000F7C  D072               	goto	i2l6675
 13914  000F7E                     i2l6639:
 13915                           
 13916                           ;doprnt.c: 721: flag |= 0x80;
 13917  000F7E  8E63               	bsf	i2printf@flag,7,c
 13918                           
 13919                           ;doprnt.c: 723: break;
 13920  000F80  D070               	goto	i2l6675
 13921  000F82                     i2l6641:
 13922                           
 13923                           ;doprnt.c: 753: if(prec && prec < len)
 13924  000F82  5065               	movf	i2printf@prec,w,c
 13925  000F84  1066               	iorwf	i2printf@prec+1,w,c
 13926  000F86  B4D8               	btfsc	status,2,c
 13927  000F88  D00A               	goto	i2l6647
 13928  000F8A  5050               	movf	i2printf@len,w,c
 13929  000F8C  5C65               	subwf	i2printf@prec,w,c
 13930  000F8E  5051               	movf	i2printf@len+1,w,c
 13931  000F90  5866               	subwfb	i2printf@prec+1,w,c
 13932  000F92  B0D8               	btfsc	status,0,c
 13933  000F94  D004               	goto	i2l6647
 13934                           
 13935                           ;doprnt.c: 754: len = prec;
 13936  000F96  C065  F050         	movff	i2printf@prec,i2printf@len
 13937  000F9A  C066  F051         	movff	i2printf@prec+1,i2printf@len+1
 13938  000F9E                     i2l6647:
 13939                           
 13940                           ;doprnt.c: 757: if(width > len)
 13941  000F9E  5061               	movf	i2printf@width,w,c
 13942  000FA0  5C50               	subwf	i2printf@len,w,c
 13943  000FA2  5062               	movf	i2printf@width+1,w,c
 13944  000FA4  5851               	subwfb	i2printf@len+1,w,c
 13945  000FA6  B0D8               	btfsc	status,0,c
 13946  000FA8  D005               	goto	i2l6651
 13947                           
 13948                           ;doprnt.c: 758: width -= len;
 13949  000FAA  5050               	movf	i2printf@len,w,c
 13950  000FAC  5E61               	subwf	i2printf@width,f,c
 13951  000FAE  5051               	movf	i2printf@len+1,w,c
 13952  000FB0  5A62               	subwfb	i2printf@width+1,f,c
 13953  000FB2  D008               	goto	i2l6655
 13954  000FB4                     i2l6651:
 13955                           
 13956                           ;doprnt.c: 759: else
 13957                           ;doprnt.c: 760: width = 0;
 13958  000FB4  0E00               	movlw	0
 13959  000FB6  6E62               	movwf	i2printf@width+1,c
 13960  000FB8  0E00               	movlw	0
 13961  000FBA  6E61               	movwf	i2printf@width,c
 13962                           
 13963                           ;doprnt.c: 764: while(width--)
 13964  000FBC  D003               	goto	i2l6655
 13965  000FBE                     i2l6653:
 13966                           
 13967                           ;doprnt.c: 765: (putch(' ') );
 13968  000FBE  0E20               	movlw	32
 13969  000FC0  EC32  F02C         	call	i2_putch
 13970  000FC4                     i2l6655:
 13971  000FC4  0661               	decf	i2printf@width,f,c
 13972  000FC6  A0D8               	btfss	status,0,c
 13973  000FC8  0662               	decf	i2printf@width+1,f,c
 13974  000FCA  2861               	incf	i2printf@width,w,c
 13975  000FCC  E1F8               	bnz	i2l6653
 13976  000FCE  2862               	incf	i2printf@width+1,w,c
 13977  000FD0  B4D8               	btfsc	status,2,c
 13978  000FD2  D00A               	goto	i2l6661
 13979  000FD4  D7F4               	goto	i2l6653
 13980  000FD6                     i2l6657:
 13981                           
 13982                           ;doprnt.c: 768: (putch(*cp++) );
 13983  000FD6  C04E  FFD9         	movff	i2printf@cp,fsr2l
 13984  000FDA  C04F  FFDA         	movff	i2printf@cp+1,fsr2h
 13985  000FDE  50DF               	movf	indf2,w,c
 13986  000FE0  EC32  F02C         	call	i2_putch
 13987  000FE4  4A4E               	infsnz	i2printf@cp,f,c
 13988  000FE6  2A4F               	incf	i2printf@cp+1,f,c
 13989  000FE8                     i2l6661:
 13990  000FE8  0650               	decf	i2printf@len,f,c
 13991  000FEA  A0D8               	btfss	status,0,c
 13992  000FEC  0651               	decf	i2printf@len+1,f,c
 13993  000FEE  2850               	incf	i2printf@len,w,c
 13994  000FF0  E1F2               	bnz	i2l6657
 13995  000FF2  2851               	incf	i2printf@len+1,w,c
 13996  000FF4  B4D8               	btfsc	status,2,c
 13997  000FF6  EFDA  F00C         	goto	i2l6961
 13998  000FFA  D7ED               	goto	i2l6657
 13999  000FFC                     i2l6663:
 14000                           
 14001                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 14002  000FFC  C052  FFD9         	movff	i2printf@ap,fsr2l
 14003  001000  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 14004  001004  50DF               	movf	indf2,w,c
 14005  001006  6E67               	movwf	i2printf@c,c
 14006  001008  0E02               	movlw	2
 14007  00100A  2652               	addwf	i2printf@ap,f,c
 14008  00100C  0E00               	movlw	0
 14009  00100E  2253               	addwfc	i2printf@ap+1,f,c
 14010  001010                     i2l6667:
 14011                           
 14012                           ;doprnt.c: 805: cp = (char *)&c;
 14013  001010  0E67               	movlw	low i2printf@c
 14014  001012  6E4E               	movwf	i2printf@cp,c
 14015  001014  0E00               	movlw	high i2printf@c
 14016  001016  6E4F               	movwf	i2printf@cp+1,c
 14017                           
 14018                           ;doprnt.c: 806: len = 1;
 14019  001018  0E00               	movlw	0
 14020  00101A  6E51               	movwf	i2printf@len+1,c
 14021  00101C  0E01               	movlw	1
 14022  00101E  6E50               	movwf	i2printf@len,c
 14023                           
 14024                           ;doprnt.c: 807: goto dostring;
 14025  001020  D7B0               	goto	i2l6641
 14026  001022                     i2l6673:
 14027  001022  C040  FFF6         	movff	i2printf@f,tblptrl
 14028  001026  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14029  00102A  4A40               	infsnz	i2printf@f,f,c
 14030  00102C  2A41               	incf	i2printf@f+1,f,c
 14031  00102E                     	if	0	;tblptru may be non-zero
 14032  00102E                     	endif
 14033  00102E                     	if	0	;tblptru may be non-zero
 14034  00102E                     	endif
 14035  00102E  0008               	tblrd		*
 14036  001030  CFF5 F067          	movff	tablat,i2printf@c
 14037  001034  5067               	movf	i2printf@c,w,c
 14038                           
 14039                           ; Switch size 1, requested type "space"
 14040                           ; Number of cases is 7, Range of values is 0 to 120
 14041                           ; switch strategies available:
 14042                           ; Name         Instructions Cycles
 14043                           ; simple_byte           22    12 (average)
 14044                           ;	Chosen strategy is simple_byte
 14045  001036  0A00               	xorlw	0	; case 0
 14046  001038  B4D8               	btfsc	status,2,c
 14047  00103A  0012               	return	
 14048  00103C  0A63               	xorlw	99	; case 99
 14049  00103E  B4D8               	btfsc	status,2,c
 14050  001040  D7DD               	goto	i2l6663
 14051  001042  0A07               	xorlw	7	; case 100
 14052  001044  B4D8               	btfsc	status,2,c
 14053  001046  D00D               	goto	i2l6675
 14054  001048  0A02               	xorlw	2	; case 102
 14055  00104A  B4D8               	btfsc	status,2,c
 14056  00104C  D796               	goto	i2l6637
 14057  00104E  0A0F               	xorlw	15	; case 105
 14058  001050  B4D8               	btfsc	status,2,c
 14059  001052  D007               	goto	i2l6675
 14060  001054  0A05               	xorlw	5	; case 108
 14061  001056  B4D8               	btfsc	status,2,c
 14062  001058  D78E               	goto	i2l6635
 14063  00105A  0A14               	xorlw	20	; case 120
 14064  00105C  B4D8               	btfsc	status,2,c
 14065  00105E  D78F               	goto	i2l6639
 14066  001060  D7D7               	goto	i2l6667
 14067  001062                     i2l6675:
 14068                           
 14069                           ;doprnt.c: 825: if(flag & (0x700)) {
 14070  001062  0E07               	movlw	7
 14071  001064  1464               	andwf	i2printf@flag+1,w,c
 14072  001066  B4D8               	btfsc	status,2,c
 14073  001068  D2EE               	goto	i2l720
 14074                           
 14075                           ;doprnt.c: 827: if(flag & 0x1000)
 14076  00106A  A864               	btfss	i2printf@flag+1,4,c
 14077  00106C  D004               	goto	i2l6681
 14078                           
 14079                           ;doprnt.c: 829: prec = 6;
 14080  00106E  0E00               	movlw	0
 14081  001070  6E66               	movwf	i2printf@prec+1,c
 14082  001072  0E06               	movlw	6
 14083  001074  6E65               	movwf	i2printf@prec,c
 14084  001076                     i2l6681:
 14085                           
 14086                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 14087  001076  C052  FFD9         	movff	i2printf@ap,fsr2l
 14088  00107A  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 14089  00107E  CFDE F05A          	movff	postinc2,i2printf@fval
 14090  001082  CFDE F05B          	movff	postinc2,i2printf@fval+1
 14091  001086  CFDD F05C          	movff	postdec2,i2printf@fval+2
 14092  00108A  0E03               	movlw	3
 14093  00108C  2652               	addwf	i2printf@ap,f,c
 14094  00108E  0E00               	movlw	0
 14095  001090  2253               	addwfc	i2printf@ap+1,f,c
 14096                           
 14097                           ;doprnt.c: 831: if(fval < 0.0) {
 14098  001092  AE5C               	btfss	i2printf@fval+2,7,c
 14099  001094  D010               	goto	i2l6691
 14100                           
 14101                           ;doprnt.c: 832: fval = -fval;
 14102  001096  C05A  F001         	movff	i2printf@fval,i2___ftneg@f1
 14103  00109A  C05B  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 14104  00109E  C05C  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 14105  0010A2  EC20  F02C         	call	i2___ftneg	;wreg free
 14106  0010A6  C001  F05A         	movff	?i2___ftneg,i2printf@fval
 14107  0010AA  C002  F05B         	movff	?i2___ftneg+1,i2printf@fval+1
 14108  0010AE  C003  F05C         	movff	?i2___ftneg+2,i2printf@fval+2
 14109                           
 14110                           ;doprnt.c: 833: flag |= 0x03;
 14111  0010B2  0E03               	movlw	3
 14112  0010B4  1263               	iorwf	i2printf@flag,f,c
 14113  0010B6                     i2l6691:
 14114                           
 14115                           ;doprnt.c: 834: }
 14116                           ;doprnt.c: 835: exp = 0;
 14117  0010B6  0E00               	movlw	0
 14118  0010B8  6E59               	movwf	i2printf@exp+1,c
 14119  0010BA  0E00               	movlw	0
 14120  0010BC  6E58               	movwf	i2printf@exp,c
 14121                           
 14122                           ;doprnt.c: 836: if( fval!=0) {
 14123  0010BE  505A               	movf	i2printf@fval,w,c
 14124  0010C0  105B               	iorwf	i2printf@fval+1,w,c
 14125  0010C2  105C               	iorwf	i2printf@fval+2,w,c
 14126  0010C4  B4D8               	btfsc	status,2,c
 14127  0010C6  D083               	goto	i2l6719
 14128                           
 14129                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 14130  0010C8  0E82               	movlw	130
 14131  0010CA  6E44               	movwf	??i2_printf& (0+255),c
 14132  0010CC  0EFF               	movlw	255
 14133  0010CE  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14134  0010D0  C05A  F046         	movff	i2printf@fval,??i2_printf+2
 14135  0010D4  C05B  F047         	movff	i2printf@fval+1,??i2_printf+3
 14136  0010D8  C05C  F048         	movff	i2printf@fval+2,??i2_printf+4
 14137  0010DC  C05D  F049         	movff	i2printf@fval+3,??i2_printf+5
 14138  0010E0  0E10               	movlw	16
 14139  0010E2  D005               	goto	i2u752_40
 14140  0010E4                     i2u752_45:
 14141  0010E4  90D8               	bcf	status,0,c
 14142  0010E6  3249               	rrcf	??i2_printf+5,f,c
 14143  0010E8  3248               	rrcf	??i2_printf+4,f,c
 14144  0010EA  3247               	rrcf	??i2_printf+3,f,c
 14145  0010EC  3246               	rrcf	??i2_printf+2,f,c
 14146  0010EE                     i2u752_40:
 14147  0010EE  2EE8               	decfsz	wreg,f,c
 14148  0010F0  D7F9               	goto	i2u752_45
 14149  0010F2  5046               	movf	??i2_printf+2,w,c
 14150  0010F4  2444               	addwf	??i2_printf,w,c
 14151  0010F6  6E58               	movwf	i2printf@exp,c
 14152  0010F8  0E00               	movlw	0
 14153  0010FA  2045               	addwfc	??i2_printf+1,w,c
 14154  0010FC  6E59               	movwf	i2printf@exp+1,c
 14155                           
 14156                           ;doprnt.c: 838: exp--;
 14157  0010FE  0658               	decf	i2printf@exp,f,c
 14158  001100  A0D8               	btfss	status,0,c
 14159  001102  0659               	decf	i2printf@exp+1,f,c
 14160                           
 14161                           ;doprnt.c: 839: exp *= 3;
 14162  001104  C058  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 14163  001108  C059  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 14164  00110C  0E00               	movlw	0
 14165  00110E  6E12               	movwf	i2___wmul@multiplicand+1,c
 14166  001110  0E03               	movlw	3
 14167  001112  6E11               	movwf	i2___wmul@multiplicand,c
 14168  001114  EC0D  F02C         	call	i2___wmul	;wreg free
 14169  001118  C00F  F058         	movff	?i2___wmul,i2printf@exp
 14170  00111C  C010  F059         	movff	?i2___wmul+1,i2printf@exp+1
 14171                           
 14172                           ;doprnt.c: 840: exp /= 10;
 14173  001120  C058  F007         	movff	i2printf@exp,i2___awdiv@dividend
 14174  001124  C059  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 14175  001128  0E00               	movlw	0
 14176  00112A  6E0A               	movwf	i2___awdiv@divisor+1,c
 14177  00112C  0E0A               	movlw	10
 14178  00112E  6E09               	movwf	i2___awdiv@divisor,c
 14179  001130  EC3A  F028         	call	i2___awdiv	;wreg free
 14180  001134  C007  F058         	movff	?i2___awdiv,i2printf@exp
 14181  001138  C008  F059         	movff	?i2___awdiv+1,i2printf@exp+1
 14182                           
 14183                           ;doprnt.c: 841: if(exp < 0)
 14184  00113C  AE59               	btfss	i2printf@exp+1,7,c
 14185  00113E  D003               	goto	i2l6707
 14186                           
 14187                           ;doprnt.c: 842: exp--;
 14188  001140  0658               	decf	i2printf@exp,f,c
 14189  001142  A0D8               	btfss	status,0,c
 14190  001144  0659               	decf	i2printf@exp+1,f,c
 14191  001146                     i2l6707:
 14192                           
 14193                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 14194  001146  5058               	movf	i2printf@exp,w,c
 14195  001148  0800               	sublw	0
 14196  00114A  EC16  F012         	call	i2_scale
 14197  00114E  C024  F054         	movff	?i2_scale,i2printf@tmpval
 14198  001152  C025  F055         	movff	?i2_scale+1,i2printf@tmpval+1
 14199  001156  C026  F056         	movff	?i2_scale+2,i2printf@tmpval+2
 14200                           
 14201                           ;doprnt.c: 847: tmpval.integ *= fval;
 14202  00115A  C054  F015         	movff	i2printf@tmpval,i2___ftmul@f1
 14203  00115E  C055  F016         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 14204  001162  C056  F017         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 14205  001166  C05A  F018         	movff	i2printf@fval,i2___ftmul@f2
 14206  00116A  C05B  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 14207  00116E  C05C  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 14208  001172  EC0B  F023         	call	i2___ftmul	;wreg free
 14209  001176  C015  F054         	movff	?i2___ftmul,i2printf@tmpval
 14210  00117A  C016  F055         	movff	?i2___ftmul+1,i2printf@tmpval+1
 14211  00117E  C017  F056         	movff	?i2___ftmul+2,i2printf@tmpval+2
 14212                           
 14213                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 14214  001182  C054  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 14215  001186  C055  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 14216  00118A  C056  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 14217  00118E  0E00               	movlw	0
 14218  001190  6E04               	movwf	i2___ftge@ff2,c
 14219  001192  0E80               	movlw	128
 14220  001194  6E05               	movwf	i2___ftge@ff2+1,c
 14221  001196  0E3F               	movlw	63
 14222  001198  6E06               	movwf	i2___ftge@ff2+2,c
 14223  00119A  ECAB  F027         	call	i2___ftge	;wreg free
 14224  00119E  B0D8               	btfsc	status,0,c
 14225  0011A0  D004               	goto	i2l6715
 14226                           
 14227                           ;doprnt.c: 849: exp--;
 14228  0011A2  0658               	decf	i2printf@exp,f,c
 14229  0011A4  A0D8               	btfss	status,0,c
 14230  0011A6  0659               	decf	i2printf@exp+1,f,c
 14231  0011A8  D012               	goto	i2l6719
 14232  0011AA                     i2l6715:
 14233                           
 14234                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 14235  0011AA  C054  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 14236  0011AE  C055  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 14237  0011B2  C056  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 14238  0011B6  0E00               	movlw	0
 14239  0011B8  6E04               	movwf	i2___ftge@ff2,c
 14240  0011BA  0E20               	movlw	32
 14241  0011BC  6E05               	movwf	i2___ftge@ff2+1,c
 14242  0011BE  0E41               	movlw	65
 14243  0011C0  6E06               	movwf	i2___ftge@ff2+2,c
 14244  0011C2  ECAB  F027         	call	i2___ftge	;wreg free
 14245  0011C6  A0D8               	btfss	status,0,c
 14246  0011C8  D002               	goto	i2l6719
 14247                           
 14248                           ;doprnt.c: 851: exp++;
 14249  0011CA  4A58               	infsnz	i2printf@exp,f,c
 14250  0011CC  2A59               	incf	i2printf@exp+1,f,c
 14251  0011CE                     i2l6719:
 14252                           
 14253                           ;doprnt.c: 852: }
 14254                           ;doprnt.c: 1112: if(prec <= 12)
 14255  0011CE  BE66               	btfsc	i2printf@prec+1,7,c
 14256  0011D0  D006               	goto	i2l6721
 14257  0011D2  5066               	movf	i2printf@prec+1,w,c
 14258  0011D4  E11B               	bnz	i2l6723
 14259  0011D6  0E0D               	movlw	13
 14260  0011D8  5C65               	subwf	i2printf@prec,w,c
 14261  0011DA  B0D8               	btfsc	status,0,c
 14262  0011DC  D017               	goto	i2l6723
 14263  0011DE                     i2l6721:
 14264                           
 14265                           ;doprnt.c: 1113: fval += fround(prec);
 14266  0011DE  C05A  F02E         	movff	i2printf@fval,i2___ftadd@f1
 14267  0011E2  C05B  F02F         	movff	i2printf@fval+1,i2___ftadd@f1+1
 14268  0011E6  C05C  F030         	movff	i2printf@fval+2,i2___ftadd@f1+2
 14269  0011EA  5065               	movf	i2printf@prec,w,c
 14270  0011EC  EC5B  F018         	call	i2_fround
 14271  0011F0  C024  F031         	movff	?i2_fround,i2___ftadd@f2
 14272  0011F4  C025  F032         	movff	?i2_fround+1,i2___ftadd@f2+1
 14273  0011F8  C026  F033         	movff	?i2_fround+2,i2___ftadd@f2+2
 14274  0011FC  EC7E  F019         	call	i2___ftadd	;wreg free
 14275  001200  C02E  F05A         	movff	?i2___ftadd,i2printf@fval
 14276  001204  C02F  F05B         	movff	?i2___ftadd+1,i2printf@fval+1
 14277  001208  C030  F05C         	movff	?i2___ftadd+2,i2printf@fval+2
 14278  00120C                     i2l6723:
 14279                           
 14280                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 14281  00120C  BE59               	btfsc	i2printf@exp+1,7,c
 14282  00120E  D006               	goto	i2l6725
 14283  001210  5059               	movf	i2printf@exp+1,w,c
 14284  001212  E11E               	bnz	i2l6731
 14285  001214  0E0A               	movlw	10
 14286  001216  5C58               	subwf	i2printf@exp,w,c
 14287  001218  B0D8               	btfsc	status,0,c
 14288  00121A  D01A               	goto	i2l6731
 14289  00121C                     i2l6725:
 14290  00121C  505A               	movf	i2printf@fval,w,c
 14291  00121E  105B               	iorwf	i2printf@fval+1,w,c
 14292  001220  105C               	iorwf	i2printf@fval+2,w,c
 14293  001222  B4D8               	btfsc	status,2,c
 14294  001224  D051               	goto	i2l6745
 14295  001226  C05A  F02B         	movff	i2printf@fval,i2___fttol@f1
 14296  00122A  C05B  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 14297  00122E  C05C  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 14298  001232  EC85  F023         	call	i2___fttol	;wreg free
 14299  001236  502B               	movf	?i2___fttol,w,c
 14300  001238  102C               	iorwf	?i2___fttol+1,w,c
 14301  00123A  102D               	iorwf	?i2___fttol+2,w,c
 14302  00123C  102E               	iorwf	?i2___fttol+3,w,c
 14303  00123E  B4D8               	btfsc	status,2,c
 14304  001240  BE59               	btfsc	i2printf@exp+1,7,c
 14305  001242  D042               	goto	i2l6745
 14306  001244  5059               	movf	i2printf@exp+1,w,c
 14307  001246  E104               	bnz	i2l6731
 14308  001248  0E02               	movlw	2
 14309  00124A  5C58               	subwf	i2printf@exp,w,c
 14310  00124C  A0D8               	btfss	status,0,c
 14311  00124E  D03C               	goto	i2l6745
 14312  001250                     i2l6731:
 14313                           
 14314                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 14315  001250  C054  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 14316  001254  C055  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 14317  001258  C056  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 14318  00125C  0E70               	movlw	112
 14319  00125E  6E04               	movwf	i2___ftge@ff2,c
 14320  001260  0E89               	movlw	137
 14321  001262  6E05               	movwf	i2___ftge@ff2+1,c
 14322  001264  0E40               	movlw	64
 14323  001266  6E06               	movwf	i2___ftge@ff2+2,c
 14324  001268  ECAB  F027         	call	i2___ftge	;wreg free
 14325  00126C  B0D8               	btfsc	status,0,c
 14326  00126E  D002               	goto	i2l6735
 14327                           
 14328                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 14329  001270  0EF7               	movlw	247
 14330  001272  D001               	goto	L8
 14331  001274                     i2l6735:
 14332                           
 14333                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 14334  001274  0EF8               	movlw	248
 14335  001276                     L8:
 14336  001276  2658               	addwf	i2printf@exp,f,c
 14337  001278  0EFF               	movlw	255
 14338  00127A  2259               	addwfc	i2printf@exp+1,f,c
 14339                           
 14340                           ;doprnt.c: 1124: }
 14341                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 14342  00127C  5058               	movf	i2printf@exp,w,c
 14343  00127E  EC16  F012         	call	i2_scale
 14344  001282  C024  F054         	movff	?i2_scale,i2printf@tmpval
 14345  001286  C025  F055         	movff	?i2_scale+1,i2printf@tmpval+1
 14346  00128A  C026  F056         	movff	?i2_scale+2,i2printf@tmpval+2
 14347                           
 14348                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 14349  00128E  C05A  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 14350  001292  C05B  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 14351  001296  C05C  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 14352  00129A  C054  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 14353  00129E  C055  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 14354  0012A2  C056  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 14355  0012A6  EC2E  F01F         	call	i2__tdiv_to_l_	;wreg free
 14356  0012AA  C001  F05D         	movff	?i2__tdiv_to_l_,i2printf@val
 14357  0012AE  C002  F05E         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 14358  0012B2  C003  F05F         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 14359  0012B6  C004  F060         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 14360                           
 14361                           ;doprnt.c: 1129: fval = 0.0;
 14362  0012BA  0E00               	movlw	0
 14363  0012BC  6E5A               	movwf	i2printf@fval,c
 14364  0012BE  0E00               	movlw	0
 14365  0012C0  6E5B               	movwf	i2printf@fval+1,c
 14366  0012C2  0E00               	movlw	0
 14367  0012C4  6E5C               	movwf	i2printf@fval+2,c
 14368                           
 14369                           ;doprnt.c: 1130: } else {
 14370  0012C6  D032               	goto	i2l6749
 14371  0012C8                     i2l6745:
 14372                           
 14373                           ;doprnt.c: 1131: val = (unsigned long)fval;
 14374  0012C8  C05A  F02B         	movff	i2printf@fval,i2___fttol@f1
 14375  0012CC  C05B  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 14376  0012D0  C05C  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 14377  0012D4  EC85  F023         	call	i2___fttol	;wreg free
 14378  0012D8  C02B  F05D         	movff	?i2___fttol,i2printf@val
 14379  0012DC  C02C  F05E         	movff	?i2___fttol+1,i2printf@val+1
 14380  0012E0  C02D  F05F         	movff	?i2___fttol+2,i2printf@val+2
 14381  0012E4  C02E  F060         	movff	?i2___fttol+3,i2printf@val+3
 14382                           
 14383                           ;doprnt.c: 1132: fval -= (double)val;
 14384  0012E8  C05A  F03A         	movff	i2printf@fval,i2___ftsub@f1
 14385  0012EC  C05B  F03B         	movff	i2printf@fval+1,i2___ftsub@f1+1
 14386  0012F0  C05C  F03C         	movff	i2printf@fval+2,i2___ftsub@f1+2
 14387  0012F4  C05D  F009         	movff	i2printf@val,i2___lltoft@c
 14388  0012F8  C05E  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 14389  0012FC  C05F  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 14390  001300  C060  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 14391  001304  ECD5  F029         	call	i2___lltoft	;wreg free
 14392  001308  C009  F03D         	movff	?i2___lltoft,i2___ftsub@f2
 14393  00130C  C00A  F03E         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 14394  001310  C00B  F03F         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 14395  001314  EC29  F02B         	call	i2___ftsub	;wreg free
 14396  001318  C03A  F05A         	movff	?i2___ftsub,i2printf@fval
 14397  00131C  C03B  F05B         	movff	?i2___ftsub+1,i2printf@fval+1
 14398  001320  C03C  F05C         	movff	?i2___ftsub+2,i2printf@fval+2
 14399                           
 14400                           ;doprnt.c: 1133: exp = 0;
 14401  001324  0E00               	movlw	0
 14402  001326  6E59               	movwf	i2printf@exp+1,c
 14403  001328  0E00               	movlw	0
 14404  00132A  6E58               	movwf	i2printf@exp,c
 14405  00132C                     i2l6749:
 14406                           
 14407                           ;doprnt.c: 1134: }
 14408                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 14409  00132C  0E01               	movlw	1
 14410  00132E  6E67               	movwf	i2printf@c,c
 14411  001330                     i2l6751:
 14412  001330  0E0A               	movlw	10
 14413  001332  1867               	xorwf	i2printf@c,w,c
 14414  001334  B4D8               	btfsc	status,2,c
 14415  001336  D018               	goto	i2l6763
 14416                           
 14417                           ;doprnt.c: 1137: if(val < dpowers[c])
 14418  001338  5067               	movf	i2printf@c,w,c
 14419  00133A  0D04               	mullw	4
 14420  00133C  0E1D               	movlw	low _dpowers
 14421  00133E  24F3               	addwf	prodl,w,c
 14422  001340  6EF6               	movwf	tblptrl,c
 14423  001342  0EFE               	movlw	high _dpowers
 14424  001344  20F4               	addwfc	prodh,w,c
 14425  001346  6EF7               	movwf	tblptrh,c
 14426  001348                     	if	0	;There are less than 3 active tblptr bytes
 14427  001348                     	endif
 14428  001348  0009               	tblrd		*+
 14429  00134A  50F5               	movf	tablat,w,c
 14430  00134C  5C5D               	subwf	i2printf@val,w,c
 14431  00134E  0009               	tblrd		*+
 14432  001350  50F5               	movf	tablat,w,c
 14433  001352  585E               	subwfb	i2printf@val+1,w,c
 14434  001354  0009               	tblrd		*+
 14435  001356  50F5               	movf	tablat,w,c
 14436  001358  585F               	subwfb	i2printf@val+2,w,c
 14437  00135A  0009               	tblrd		*+
 14438  00135C  50F5               	movf	tablat,w,c
 14439  00135E  5860               	subwfb	i2printf@val+3,w,c
 14440  001360  A0D8               	btfss	status,0,c
 14441  001362  D002               	goto	i2l6763
 14442                           
 14443                           ;doprnt.c: 1138: break;
 14444  001364  2A67               	incf	i2printf@c,f,c
 14445  001366  D7E4               	goto	i2l6751
 14446  001368                     i2l6763:
 14447                           
 14448                           ;doprnt.c: 1142: width -= prec + c + exp;
 14449  001368  C067  F044         	movff	i2printf@c,??i2_printf
 14450  00136C  6A45               	clrf	(??i2_printf+1)& (0+255),c
 14451  00136E  BE44               	btfsc	??i2_printf& (0+255),7,c
 14452  001370  0645               	decf	(??i2_printf+1)& (0+255),f,c
 14453  001372  5065               	movf	i2printf@prec,w,c
 14454  001374  2644               	addwf	??i2_printf,f,c
 14455  001376  5066               	movf	i2printf@prec+1,w,c
 14456  001378  2245               	addwfc	??i2_printf+1,f,c
 14457  00137A  5058               	movf	i2printf@exp,w,c
 14458  00137C  2644               	addwf	??i2_printf,f,c
 14459  00137E  5059               	movf	i2printf@exp+1,w,c
 14460  001380  2245               	addwfc	??i2_printf+1,f,c
 14461  001382  5044               	movf	??i2_printf,w,c
 14462  001384  5E61               	subwf	i2printf@width,f,c
 14463  001386  5045               	movf	??i2_printf+1,w,c
 14464  001388  5A62               	subwfb	i2printf@width+1,f,c
 14465                           
 14466                           ;doprnt.c: 1143: if(
 14467                           ;doprnt.c: 1147: prec)
 14468  00138A  5065               	movf	i2printf@prec,w,c
 14469  00138C  1066               	iorwf	i2printf@prec+1,w,c
 14470  00138E  B4D8               	btfsc	status,2,c
 14471  001390  D003               	goto	i2l6767
 14472                           
 14473                           ;doprnt.c: 1148: width--;
 14474  001392  0661               	decf	i2printf@width,f,c
 14475  001394  A0D8               	btfss	status,0,c
 14476  001396  0662               	decf	i2printf@width+1,f,c
 14477  001398                     i2l6767:
 14478                           
 14479                           ;doprnt.c: 1149: if(flag & 0x03)
 14480  001398  0E03               	movlw	3
 14481  00139A  1463               	andwf	i2printf@flag,w,c
 14482  00139C  6E44               	movwf	??i2_printf& (0+255),c
 14483  00139E  0E00               	movlw	0
 14484  0013A0  1464               	andwf	i2printf@flag+1,w,c
 14485  0013A2  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14486  0013A4  5044               	movf	??i2_printf,w,c
 14487  0013A6  1045               	iorwf	??i2_printf+1,w,c
 14488  0013A8  B4D8               	btfsc	status,2,c
 14489  0013AA  D003               	goto	i2l6771
 14490                           
 14491                           ;doprnt.c: 1150: width--;
 14492  0013AC  0661               	decf	i2printf@width,f,c
 14493  0013AE  A0D8               	btfss	status,0,c
 14494  0013B0  0662               	decf	i2printf@width+1,f,c
 14495  0013B2                     i2l6771:
 14496                           
 14497                           ;doprnt.c: 1153: if(flag & 0x04) {
 14498  0013B2  A463               	btfss	i2printf@flag,2,c
 14499  0013B4  D022               	goto	i2l6787
 14500                           
 14501                           ;doprnt.c: 1157: if(flag & 0x03)
 14502  0013B6  0E03               	movlw	3
 14503  0013B8  1463               	andwf	i2printf@flag,w,c
 14504  0013BA  6E44               	movwf	??i2_printf& (0+255),c
 14505  0013BC  0E00               	movlw	0
 14506  0013BE  1464               	andwf	i2printf@flag+1,w,c
 14507  0013C0  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14508  0013C2  5044               	movf	??i2_printf,w,c
 14509  0013C4  1045               	iorwf	??i2_printf+1,w,c
 14510  0013C6  B4D8               	btfsc	status,2,c
 14511  0013C8  D00A               	goto	i2l6781
 14512                           
 14513                           ;doprnt.c: 1159: (putch('-') );
 14514  0013CA  0E2D               	movlw	45
 14515  0013CC  EC32  F02C         	call	i2_putch
 14516                           
 14517                           ;doprnt.c: 1168: while(width > 0) {
 14518  0013D0  D006               	goto	i2l6781
 14519  0013D2                     i2l6777:
 14520                           
 14521                           ;doprnt.c: 1169: (putch('0') );
 14522  0013D2  0E30               	movlw	48
 14523  0013D4  EC32  F02C         	call	i2_putch
 14524                           
 14525                           ;doprnt.c: 1170: width--;
 14526  0013D8  0661               	decf	i2printf@width,f,c
 14527  0013DA  A0D8               	btfss	status,0,c
 14528  0013DC  0662               	decf	i2printf@width+1,f,c
 14529  0013DE                     i2l6781:
 14530  0013DE  BE62               	btfsc	i2printf@width+1,7,c
 14531  0013E0  D065               	goto	i2l6799
 14532  0013E2  5062               	movf	i2printf@width+1,w,c
 14533  0013E4  E1F6               	bnz	i2l6777
 14534  0013E6  0461               	decf	i2printf@width,w,c
 14535  0013E8  A0D8               	btfss	status,0,c
 14536  0013EA  D060               	goto	i2l6799
 14537  0013EC  D7F2               	goto	i2l6777
 14538  0013EE                     i2l6783:
 14539                           
 14540                           ;doprnt.c: 1181: (putch(' ') );
 14541  0013EE  0E20               	movlw	32
 14542  0013F0  EC32  F02C         	call	i2_putch
 14543                           
 14544                           ;doprnt.c: 1182: width--;
 14545  0013F4  0661               	decf	i2printf@width,f,c
 14546  0013F6  A0D8               	btfss	status,0,c
 14547  0013F8  0662               	decf	i2printf@width+1,f,c
 14548  0013FA                     i2l6787:
 14549  0013FA  BE62               	btfsc	i2printf@width+1,7,c
 14550  0013FC  D005               	goto	i2l6789
 14551  0013FE  5062               	movf	i2printf@width+1,w,c
 14552  001400  E1F6               	bnz	i2l6783
 14553  001402  0461               	decf	i2printf@width,w,c
 14554  001404  B0D8               	btfsc	status,0,c
 14555  001406  D7F3               	goto	i2l6783
 14556  001408                     i2l6789:
 14557                           
 14558                           ;doprnt.c: 1183: }
 14559                           ;doprnt.c: 1188: if(flag & 0x03)
 14560  001408  0E03               	movlw	3
 14561  00140A  1463               	andwf	i2printf@flag,w,c
 14562  00140C  6E44               	movwf	??i2_printf& (0+255),c
 14563  00140E  0E00               	movlw	0
 14564  001410  1464               	andwf	i2printf@flag+1,w,c
 14565  001412  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14566  001414  5044               	movf	??i2_printf,w,c
 14567  001416  1045               	iorwf	??i2_printf+1,w,c
 14568  001418  B4D8               	btfsc	status,2,c
 14569  00141A  D048               	goto	i2l6799
 14570                           
 14571                           ;doprnt.c: 1190: (putch('-') );
 14572  00141C  0E2D               	movlw	45
 14573  00141E  EC32  F02C         	call	i2_putch
 14574                           
 14575                           ;doprnt.c: 1195: }
 14576                           ;doprnt.c: 1196: while(c--) {
 14577  001422  D044               	goto	i2l6799
 14578  001424                     i2l6793:
 14579                           
 14580                           ;doprnt.c: 1200: {
 14581                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 14582  001424  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 14583  001428  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14584  00142C  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14585  001430  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14586  001434  5067               	movf	i2printf@c,w,c
 14587  001436  0D04               	mullw	4
 14588  001438  0E1D               	movlw	low _dpowers
 14589  00143A  24F3               	addwf	prodl,w,c
 14590  00143C  6EF6               	movwf	tblptrl,c
 14591  00143E  0EFE               	movlw	high _dpowers
 14592  001440  20F4               	addwfc	prodh,w,c
 14593  001442  6EF7               	movwf	tblptrh,c
 14594  001444                     	if	0	;There are less than 3 active tblptr bytes
 14595  001444                     	endif
 14596  001444  0009               	tblrd		*+
 14597  001446  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14598  00144A  0009               	tblrd		*+
 14599  00144C  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14600  001450  0009               	tblrd		*+
 14601  001452  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14602  001456  000A               	tblrd		*-
 14603  001458  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14604  00145C  EC7C  F028         	call	i2___lldiv	;wreg free
 14605  001460  C001  F054         	movff	?i2___lldiv,i2printf@tmpval
 14606  001464  C002  F055         	movff	?i2___lldiv+1,i2printf@tmpval+1
 14607  001468  C003  F056         	movff	?i2___lldiv+2,i2printf@tmpval+2
 14608  00146C  C004  F057         	movff	?i2___lldiv+3,i2printf@tmpval+3
 14609                           
 14610                           ;doprnt.c: 1202: tmpval.vd %= 10;
 14611  001470  C054  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 14612  001474  C055  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 14613  001478  C056  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 14614  00147C  C057  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 14615  001480  0E0A               	movlw	10
 14616  001482  6E12               	movwf	i2___llmod@divisor,c
 14617  001484  0E00               	movlw	0
 14618  001486  6E13               	movwf	i2___llmod@divisor+1,c
 14619  001488  0E00               	movlw	0
 14620  00148A  6E14               	movwf	i2___llmod@divisor+2,c
 14621  00148C  0E00               	movlw	0
 14622  00148E  6E15               	movwf	i2___llmod@divisor+3,c
 14623  001490  EC6F  F029         	call	i2___llmod	;wreg free
 14624  001494  C00E  F054         	movff	?i2___llmod,i2printf@tmpval
 14625  001498  C00F  F055         	movff	?i2___llmod+1,i2printf@tmpval+1
 14626  00149C  C010  F056         	movff	?i2___llmod+2,i2printf@tmpval+2
 14627  0014A0  C011  F057         	movff	?i2___llmod+3,i2printf@tmpval+3
 14628                           
 14629                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 14630  0014A4  5054               	movf	i2printf@tmpval,w,c
 14631  0014A6  0F30               	addlw	48
 14632  0014A8  EC32  F02C         	call	i2_putch
 14633  0014AC                     i2l6799:
 14634  0014AC  0667               	decf	i2printf@c,f,c
 14635  0014AE  2867               	incf	i2printf@c,w,c
 14636  0014B0  B4D8               	btfsc	status,2,c
 14637  0014B2  D007               	goto	i2l6805
 14638  0014B4  D7B7               	goto	i2l6793
 14639  0014B6                     i2l6801:
 14640                           
 14641                           ;doprnt.c: 1208: (putch('0') );
 14642  0014B6  0E30               	movlw	48
 14643  0014B8  EC32  F02C         	call	i2_putch
 14644                           
 14645                           ;doprnt.c: 1209: exp--;
 14646  0014BC  0658               	decf	i2printf@exp,f,c
 14647  0014BE  A0D8               	btfss	status,0,c
 14648  0014C0  0659               	decf	i2printf@exp+1,f,c
 14649  0014C2                     i2l6805:
 14650  0014C2  BE59               	btfsc	i2printf@exp+1,7,c
 14651  0014C4  D005               	goto	i2l6807
 14652  0014C6  5059               	movf	i2printf@exp+1,w,c
 14653  0014C8  E1F6               	bnz	i2l6801
 14654  0014CA  0458               	decf	i2printf@exp,w,c
 14655  0014CC  B0D8               	btfsc	status,0,c
 14656  0014CE  D7F3               	goto	i2l6801
 14657  0014D0                     i2l6807:
 14658                           
 14659                           ;doprnt.c: 1210: }
 14660                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 14661  0014D0  BE66               	btfsc	i2printf@prec+1,7,c
 14662  0014D2  D009               	goto	i2l760
 14663  0014D4  5066               	movf	i2printf@prec+1,w,c
 14664  0014D6  E104               	bnz	i2u774_40
 14665  0014D8  0E09               	movlw	9
 14666  0014DA  5C65               	subwf	i2printf@prec,w,c
 14667  0014DC  A0D8               	btfss	status,0,c
 14668  0014DE  D003               	goto	i2l760
 14669  0014E0                     i2u774_40:
 14670                           
 14671                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 14672  0014E0  0E08               	movlw	8
 14673  0014E2  6E67               	movwf	i2printf@c,c
 14674  0014E4  D002               	goto	i2l6811
 14675  0014E6                     i2l760:
 14676                           
 14677                           ;doprnt.c: 1213: else
 14678                           ;doprnt.c: 1214: c = prec;
 14679  0014E6  C065  F067         	movff	i2printf@prec,i2printf@c
 14680  0014EA                     i2l6811:
 14681                           
 14682                           ;doprnt.c: 1215: prec -= c;
 14683  0014EA  5067               	movf	i2printf@c,w,c
 14684  0014EC  5E65               	subwf	i2printf@prec,f,c
 14685  0014EE  0E00               	movlw	0
 14686  0014F0  BE67               	btfsc	i2printf@c,7,c
 14687  0014F2  0EFF               	movlw	255
 14688  0014F4  5A66               	subwfb	i2printf@prec+1,f,c
 14689                           
 14690                           ;doprnt.c: 1219: if(c)
 14691  0014F6  5067               	movf	i2printf@c,w,c
 14692  0014F8  B4D8               	btfsc	status,2,c
 14693  0014FA  D003               	goto	i2l6817
 14694                           
 14695                           ;doprnt.c: 1221: (putch('.') );
 14696  0014FC  0E2E               	movlw	46
 14697  0014FE  EC32  F02C         	call	i2_putch
 14698  001502                     i2l6817:
 14699                           
 14700                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14701  001502  5067               	movf	i2printf@c,w,c
 14702  001504  EC16  F012         	call	i2_scale
 14703  001508  C024  F04A         	movff	?i2_scale,i2_printf$1546
 14704  00150C  C025  F04B         	movff	?i2_scale+1,i2_printf$1546+1
 14705  001510  C026  F04C         	movff	?i2_scale+2,i2_printf$1546+2
 14706                           
 14707                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14708  001514  C05A  F018         	movff	i2printf@fval,i2___ftmul@f2
 14709  001518  C05B  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 14710  00151C  C05C  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 14711  001520  C04A  F015         	movff	i2_printf$1546,i2___ftmul@f1
 14712  001524  C04B  F016         	movff	i2_printf$1546+1,i2___ftmul@f1+1
 14713  001528  C04C  F017         	movff	i2_printf$1546+2,i2___ftmul@f1+2
 14714  00152C  EC0B  F023         	call	i2___ftmul	;wreg free
 14715  001530  C015  F02B         	movff	?i2___ftmul,i2___fttol@f1
 14716  001534  C016  F02C         	movff	?i2___ftmul+1,i2___fttol@f1+1
 14717  001538  C017  F02D         	movff	?i2___ftmul+2,i2___fttol@f1+2
 14718  00153C  EC85  F023         	call	i2___fttol	;wreg free
 14719  001540  C02B  F05D         	movff	?i2___fttol,i2printf@val
 14720  001544  C02C  F05E         	movff	?i2___fttol+1,i2printf@val+1
 14721  001548  C02D  F05F         	movff	?i2___fttol+2,i2printf@val+2
 14722  00154C  C02E  F060         	movff	?i2___fttol+3,i2printf@val+3
 14723                           
 14724                           ;doprnt.c: 1228: while(c--) {
 14725  001550  D06A               	goto	i2l6827
 14726  001552                     i2l6821:
 14727                           
 14728                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 14729  001552  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 14730  001556  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14731  00155A  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14732  00155E  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14733  001562  5067               	movf	i2printf@c,w,c
 14734  001564  0D04               	mullw	4
 14735  001566  0E1D               	movlw	low _dpowers
 14736  001568  24F3               	addwf	prodl,w,c
 14737  00156A  6EF6               	movwf	tblptrl,c
 14738  00156C  0EFE               	movlw	high _dpowers
 14739  00156E  20F4               	addwfc	prodh,w,c
 14740  001570  6EF7               	movwf	tblptrh,c
 14741  001572                     	if	0	;There are less than 3 active tblptr bytes
 14742  001572                     	endif
 14743  001572  0009               	tblrd		*+
 14744  001574  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14745  001578  0009               	tblrd		*+
 14746  00157A  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14747  00157E  0009               	tblrd		*+
 14748  001580  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14749  001584  000A               	tblrd		*-
 14750  001586  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14751  00158A  EC7C  F028         	call	i2___lldiv	;wreg free
 14752  00158E  C001  F054         	movff	?i2___lldiv,i2printf@tmpval
 14753  001592  C002  F055         	movff	?i2___lldiv+1,i2printf@tmpval+1
 14754  001596  C003  F056         	movff	?i2___lldiv+2,i2printf@tmpval+2
 14755  00159A  C004  F057         	movff	?i2___lldiv+3,i2printf@tmpval+3
 14756                           
 14757                           ;doprnt.c: 1230: tmpval.vd %= 10;
 14758  00159E  C054  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 14759  0015A2  C055  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 14760  0015A6  C056  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 14761  0015AA  C057  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 14762  0015AE  0E0A               	movlw	10
 14763  0015B0  6E12               	movwf	i2___llmod@divisor,c
 14764  0015B2  0E00               	movlw	0
 14765  0015B4  6E13               	movwf	i2___llmod@divisor+1,c
 14766  0015B6  0E00               	movlw	0
 14767  0015B8  6E14               	movwf	i2___llmod@divisor+2,c
 14768  0015BA  0E00               	movlw	0
 14769  0015BC  6E15               	movwf	i2___llmod@divisor+3,c
 14770  0015BE  EC6F  F029         	call	i2___llmod	;wreg free
 14771  0015C2  C00E  F054         	movff	?i2___llmod,i2printf@tmpval
 14772  0015C6  C00F  F055         	movff	?i2___llmod+1,i2printf@tmpval+1
 14773  0015CA  C010  F056         	movff	?i2___llmod+2,i2printf@tmpval+2
 14774  0015CE  C011  F057         	movff	?i2___llmod+3,i2printf@tmpval+3
 14775                           
 14776                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 14777  0015D2  5054               	movf	i2printf@tmpval,w,c
 14778  0015D4  0F30               	addlw	48
 14779  0015D6  EC32  F02C         	call	i2_putch
 14780                           
 14781                           ;doprnt.c: 1232: val %= dpowers[c];
 14782  0015DA  C05D  F00E         	movff	i2printf@val,i2___llmod@dividend
 14783  0015DE  C05E  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 14784  0015E2  C05F  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 14785  0015E6  C060  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 14786  0015EA  5067               	movf	i2printf@c,w,c
 14787  0015EC  0D04               	mullw	4
 14788  0015EE  0E1D               	movlw	low _dpowers
 14789  0015F0  24F3               	addwf	prodl,w,c
 14790  0015F2  6EF6               	movwf	tblptrl,c
 14791  0015F4  0EFE               	movlw	high _dpowers
 14792  0015F6  20F4               	addwfc	prodh,w,c
 14793  0015F8  6EF7               	movwf	tblptrh,c
 14794  0015FA                     	if	0	;There are less than 3 active tblptr bytes
 14795  0015FA                     	endif
 14796  0015FA  0009               	tblrd		*+
 14797  0015FC  CFF5 F012          	movff	tablat,i2___llmod@divisor
 14798  001600  0009               	tblrd		*+
 14799  001602  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 14800  001606  0009               	tblrd		*+
 14801  001608  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 14802  00160C  000A               	tblrd		*-
 14803  00160E  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 14804  001612  EC6F  F029         	call	i2___llmod	;wreg free
 14805  001616  C00E  F05D         	movff	?i2___llmod,i2printf@val
 14806  00161A  C00F  F05E         	movff	?i2___llmod+1,i2printf@val+1
 14807  00161E  C010  F05F         	movff	?i2___llmod+2,i2printf@val+2
 14808  001622  C011  F060         	movff	?i2___llmod+3,i2printf@val+3
 14809  001626                     i2l6827:
 14810  001626  0667               	decf	i2printf@c,f,c
 14811  001628  2867               	incf	i2printf@c,w,c
 14812  00162A  B4D8               	btfsc	status,2,c
 14813  00162C  D007               	goto	i2l6833
 14814  00162E  D791               	goto	i2l6821
 14815  001630                     i2l6829:
 14816                           
 14817                           ;doprnt.c: 1236: (putch('0') );
 14818  001630  0E30               	movlw	48
 14819  001632  EC32  F02C         	call	i2_putch
 14820                           
 14821                           ;doprnt.c: 1237: prec--;
 14822  001636  0665               	decf	i2printf@prec,f,c
 14823  001638  A0D8               	btfss	status,0,c
 14824  00163A  0666               	decf	i2printf@prec+1,f,c
 14825  00163C                     i2l6833:
 14826  00163C  5065               	movf	i2printf@prec,w,c
 14827  00163E  1066               	iorwf	i2printf@prec+1,w,c
 14828  001640  B4D8               	btfsc	status,2,c
 14829  001642  D1B8               	goto	i2l6961
 14830  001644  D7F5               	goto	i2l6829
 14831  001646                     i2l720:
 14832                           
 14833                           ;doprnt.c: 1246: }
 14834                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14835  001646  BE63               	btfsc	i2printf@flag,7,c
 14836  001648  D02E               	goto	i2l769
 14837                           
 14838                           ;doprnt.c: 1253: {
 14839                           ;doprnt.c: 1255: if(flag & 0x10)
 14840  00164A  A863               	btfss	i2printf@flag,4,c
 14841  00164C  D00E               	goto	i2l6841
 14842                           
 14843                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
 14844  00164E  C052  FFD9         	movff	i2printf@ap,fsr2l
 14845  001652  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 14846  001656  CFDE F05D          	movff	postinc2,i2printf@val
 14847  00165A  CFDE F05E          	movff	postinc2,i2printf@val+1
 14848  00165E  CFDE F05F          	movff	postinc2,i2printf@val+2
 14849  001662  CFDE F060          	movff	postinc2,i2printf@val+3
 14850  001666  0E04               	movlw	4
 14851  001668  D00E               	goto	L9
 14852  00166A                     i2l6841:
 14853                           
 14854                           ;doprnt.c: 1257: else
 14855                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 14856  00166A  C052  FFD9         	movff	i2printf@ap,fsr2l
 14857  00166E  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 14858  001672  CFDE F05D          	movff	postinc2,i2printf@val
 14859  001676  CFDD F05E          	movff	postdec2,i2printf@val+1
 14860  00167A  0E00               	movlw	0
 14861  00167C  BE5E               	btfsc	i2printf@val+1,7,c
 14862  00167E  0EFF               	movlw	-1
 14863  001680  6E5F               	movwf	i2printf@val+2,c
 14864  001682  6E60               	movwf	i2printf@val+3,c
 14865  001684  0E02               	movlw	2
 14866  001686                     L9:
 14867  001686  2652               	addwf	i2printf@ap,f,c
 14868  001688  0E00               	movlw	0
 14869  00168A  2253               	addwfc	i2printf@ap+1,f,c
 14870                           
 14871                           ;doprnt.c: 1261: if((long)val < 0) {
 14872  00168C  AE60               	btfss	i2printf@val+3,7,c
 14873  00168E  D02D               	goto	i2l6859
 14874                           
 14875                           ;doprnt.c: 1262: flag |= 0x03;
 14876  001690  0E03               	movlw	3
 14877  001692  1263               	iorwf	i2printf@flag,f,c
 14878                           
 14879                           ;doprnt.c: 1263: val = -val;
 14880  001694  1E60               	comf	i2printf@val+3,f,c
 14881  001696  1E5F               	comf	i2printf@val+2,f,c
 14882  001698  1E5E               	comf	i2printf@val+1,f,c
 14883  00169A  6C5D               	negf	i2printf@val,c
 14884  00169C  0E00               	movlw	0
 14885  00169E  225E               	addwfc	i2printf@val+1,f,c
 14886  0016A0  225F               	addwfc	i2printf@val+2,f,c
 14887  0016A2  2260               	addwfc	i2printf@val+3,f,c
 14888                           
 14889                           ;doprnt.c: 1264: }
 14890                           ;doprnt.c: 1266: }
 14891  0016A4  D022               	goto	i2l6859
 14892  0016A6                     i2l769:
 14893                           
 14894                           ;doprnt.c: 1268: else
 14895                           ;doprnt.c: 1273: {
 14896                           ;doprnt.c: 1281: if(flag & 0x10)
 14897  0016A6  A863               	btfss	i2printf@flag,4,c
 14898  0016A8  D00E               	goto	i2l6855
 14899                           
 14900                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 14901  0016AA  C052  FFD9         	movff	i2printf@ap,fsr2l
 14902  0016AE  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 14903  0016B2  CFDE F05D          	movff	postinc2,i2printf@val
 14904  0016B6  CFDE F05E          	movff	postinc2,i2printf@val+1
 14905  0016BA  CFDE F05F          	movff	postinc2,i2printf@val+2
 14906  0016BE  CFDE F060          	movff	postinc2,i2printf@val+3
 14907  0016C2  0E04               	movlw	4
 14908  0016C4  D00F               	goto	L10
 14909  0016C6                     i2l6855:
 14910                           
 14911                           ;doprnt.c: 1283: else
 14912                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14913  0016C6  C052  FFD9         	movff	i2printf@ap,fsr2l
 14914  0016CA  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 14915  0016CE  CFDE F044          	movff	postinc2,??i2_printf
 14916  0016D2  CFDD F045          	movff	postdec2,??i2_printf+1
 14917  0016D6  C044  F05D         	movff	??i2_printf,i2printf@val
 14918  0016DA  C045  F05E         	movff	??i2_printf+1,i2printf@val+1
 14919  0016DE  6A5F               	clrf	i2printf@val+2,c
 14920  0016E0  6A60               	clrf	i2printf@val+3,c
 14921  0016E2  0E02               	movlw	2
 14922  0016E4                     L10:
 14923  0016E4  2652               	addwf	i2printf@ap,f,c
 14924  0016E6  0E00               	movlw	0
 14925  0016E8  2253               	addwfc	i2printf@ap+1,f,c
 14926  0016EA                     i2l6859:
 14927                           
 14928                           ;doprnt.c: 1287: }
 14929                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 14930  0016EA  5065               	movf	i2printf@prec,w,c
 14931  0016EC  1066               	iorwf	i2printf@prec+1,w,c
 14932  0016EE  A4D8               	btfss	status,2,c
 14933  0016F0  D045               	goto	i2l6895
 14934  0016F2  505D               	movf	i2printf@val,w,c
 14935  0016F4  105E               	iorwf	i2printf@val+1,w,c
 14936  0016F6  105F               	iorwf	i2printf@val+2,w,c
 14937  0016F8  1060               	iorwf	i2printf@val+3,w,c
 14938  0016FA  A4D8               	btfss	status,2,c
 14939  0016FC  D03F               	goto	i2l6895
 14940                           
 14941                           ;doprnt.c: 1291: prec++;
 14942  0016FE  4A65               	infsnz	i2printf@prec,f,c
 14943  001700  2A66               	incf	i2printf@prec+1,f,c
 14944                           
 14945                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14946  001702  D03C               	goto	i2l6895
 14947  001704                     i2l6865:
 14948                           
 14949                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14950  001704  0E01               	movlw	1
 14951  001706  6E67               	movwf	i2printf@c,c
 14952  001708                     i2l6867:
 14953  001708  0E0A               	movlw	10
 14954  00170A  1867               	xorwf	i2printf@c,w,c
 14955  00170C  B4D8               	btfsc	status,2,c
 14956  00170E  D03E               	goto	i2l6897
 14957                           
 14958                           ;doprnt.c: 1306: if(val < dpowers[c])
 14959  001710  5067               	movf	i2printf@c,w,c
 14960  001712  0D04               	mullw	4
 14961  001714  0E1D               	movlw	low _dpowers
 14962  001716  24F3               	addwf	prodl,w,c
 14963  001718  6EF6               	movwf	tblptrl,c
 14964  00171A  0EFE               	movlw	high _dpowers
 14965  00171C  20F4               	addwfc	prodh,w,c
 14966  00171E  6EF7               	movwf	tblptrh,c
 14967  001720                     	if	0	;There are less than 3 active tblptr bytes
 14968  001720                     	endif
 14969  001720  0009               	tblrd		*+
 14970  001722  50F5               	movf	tablat,w,c
 14971  001724  5C5D               	subwf	i2printf@val,w,c
 14972  001726  0009               	tblrd		*+
 14973  001728  50F5               	movf	tablat,w,c
 14974  00172A  585E               	subwfb	i2printf@val+1,w,c
 14975  00172C  0009               	tblrd		*+
 14976  00172E  50F5               	movf	tablat,w,c
 14977  001730  585F               	subwfb	i2printf@val+2,w,c
 14978  001732  0009               	tblrd		*+
 14979  001734  50F5               	movf	tablat,w,c
 14980  001736  5860               	subwfb	i2printf@val+3,w,c
 14981  001738  A0D8               	btfss	status,0,c
 14982  00173A  D028               	goto	i2l6897
 14983                           
 14984                           ;doprnt.c: 1307: break;
 14985  00173C  2A67               	incf	i2printf@c,f,c
 14986  00173E  D7E4               	goto	i2l6867
 14987  001740                     i2l6879:
 14988                           
 14989                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14990  001740  0E01               	movlw	1
 14991  001742  6E67               	movwf	i2printf@c,c
 14992  001744                     i2l6881:
 14993  001744  0E08               	movlw	8
 14994  001746  1867               	xorwf	i2printf@c,w,c
 14995  001748  B4D8               	btfsc	status,2,c
 14996  00174A  D020               	goto	i2l6897
 14997                           
 14998                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14999  00174C  5067               	movf	i2printf@c,w,c
 15000  00174E  0D04               	mullw	4
 15001  001750  0E93               	movlw	low _hexpowers
 15002  001752  24F3               	addwf	prodl,w,c
 15003  001754  6EF6               	movwf	tblptrl,c
 15004  001756  0EFE               	movlw	high _hexpowers
 15005  001758  20F4               	addwfc	prodh,w,c
 15006  00175A  6EF7               	movwf	tblptrh,c
 15007  00175C                     	if	0	;There are less than 3 active tblptr bytes
 15008  00175C                     	endif
 15009  00175C  0009               	tblrd		*+
 15010  00175E  50F5               	movf	tablat,w,c
 15011  001760  5C5D               	subwf	i2printf@val,w,c
 15012  001762  0009               	tblrd		*+
 15013  001764  50F5               	movf	tablat,w,c
 15014  001766  585E               	subwfb	i2printf@val+1,w,c
 15015  001768  0009               	tblrd		*+
 15016  00176A  50F5               	movf	tablat,w,c
 15017  00176C  585F               	subwfb	i2printf@val+2,w,c
 15018  00176E  0009               	tblrd		*+
 15019  001770  50F5               	movf	tablat,w,c
 15020  001772  5860               	subwfb	i2printf@val+3,w,c
 15021  001774  A0D8               	btfss	status,0,c
 15022  001776  D00A               	goto	i2l6897
 15023                           
 15024                           ;doprnt.c: 1318: break;
 15025  001778  2A67               	incf	i2printf@c,f,c
 15026  00177A  D7E4               	goto	i2l6881
 15027  00177C                     i2l6895:
 15028  00177C  5063               	movf	i2printf@flag,w,c
 15029  00177E  0B80               	andlw	128
 15030                           
 15031                           ; Switch size 1, requested type "space"
 15032                           ; Number of cases is 2, Range of values is 0 to 128
 15033                           ; switch strategies available:
 15034                           ; Name         Instructions Cycles
 15035                           ; simple_byte            7     4 (average)
 15036                           ;	Chosen strategy is simple_byte
 15037  001780  0A00               	xorlw	0	; case 0
 15038  001782  B4D8               	btfsc	status,2,c
 15039  001784  D7BF               	goto	i2l6865
 15040  001786  0A80               	xorlw	128	; case 128
 15041  001788  B4D8               	btfsc	status,2,c
 15042  00178A  D7DA               	goto	i2l6879
 15043  00178C                     i2l6897:
 15044                           
 15045                           ;doprnt.c: 1339: if(c < prec)
 15046  00178C  0E80               	movlw	128
 15047  00178E  BE67               	btfsc	i2printf@c,7,c
 15048  001790  0E7F               	movlw	127
 15049  001792  6E44               	movwf	??i2_printf& (0+255),c
 15050  001794  5065               	movf	i2printf@prec,w,c
 15051  001796  5C67               	subwf	i2printf@c,w,c
 15052  001798  5066               	movf	i2printf@prec+1,w,c
 15053  00179A  0A80               	xorlw	128
 15054  00179C  5844               	subwfb	??i2_printf& (0+255),w,c
 15055  00179E  B0D8               	btfsc	status,0,c
 15056  0017A0  D003               	goto	i2l6901
 15057                           
 15058                           ;doprnt.c: 1340: c = prec;
 15059  0017A2  C065  F067         	movff	i2printf@prec,i2printf@c
 15060  0017A6  D010               	goto	i2l6905
 15061  0017A8                     i2l6901:
 15062                           
 15063                           ;doprnt.c: 1341: else if(prec < c)
 15064  0017A8  5066               	movf	i2printf@prec+1,w,c
 15065  0017AA  0A80               	xorlw	128
 15066  0017AC  6E44               	movwf	??i2_printf& (0+255),c
 15067  0017AE  5067               	movf	i2printf@c,w,c
 15068  0017B0  5C65               	subwf	i2printf@prec,w,c
 15069  0017B2  0E80               	movlw	128
 15070  0017B4  BE67               	btfsc	i2printf@c,7,c
 15071  0017B6  0E7F               	movlw	127
 15072  0017B8  5844               	subwfb	??i2_printf& (0+255),w,c
 15073  0017BA  B0D8               	btfsc	status,0,c
 15074  0017BC  D005               	goto	i2l6905
 15075                           
 15076                           ;doprnt.c: 1342: prec = c;
 15077  0017BE  5067               	movf	i2printf@c,w,c
 15078  0017C0  6E65               	movwf	i2printf@prec,c
 15079  0017C2  6A66               	clrf	i2printf@prec+1,c
 15080  0017C4  BE65               	btfsc	i2printf@prec,7,c
 15081  0017C6  0666               	decf	i2printf@prec+1,f,c
 15082  0017C8                     i2l6905:
 15083                           
 15084                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15085  0017C8  5061               	movf	i2printf@width,w,c
 15086  0017CA  1062               	iorwf	i2printf@width+1,w,c
 15087  0017CC  B4D8               	btfsc	status,2,c
 15088  0017CE  D00D               	goto	i2l6911
 15089  0017D0  0E03               	movlw	3
 15090  0017D2  1463               	andwf	i2printf@flag,w,c
 15091  0017D4  6E44               	movwf	??i2_printf& (0+255),c
 15092  0017D6  0E00               	movlw	0
 15093  0017D8  1464               	andwf	i2printf@flag+1,w,c
 15094  0017DA  6E45               	movwf	(??i2_printf+1)& (0+255),c
 15095  0017DC  5044               	movf	??i2_printf,w,c
 15096  0017DE  1045               	iorwf	??i2_printf+1,w,c
 15097  0017E0  B4D8               	btfsc	status,2,c
 15098  0017E2  D003               	goto	i2l6911
 15099                           
 15100                           ;doprnt.c: 1346: width--;
 15101  0017E4  0661               	decf	i2printf@width,f,c
 15102  0017E6  A0D8               	btfss	status,0,c
 15103  0017E8  0662               	decf	i2printf@width+1,f,c
 15104  0017EA                     i2l6911:
 15105                           
 15106                           ;doprnt.c: 1348: if(flag & 0x4000) {
 15107  0017EA  AC64               	btfss	i2printf@flag+1,6,c
 15108  0017EC  D013               	goto	i2l6919
 15109                           
 15110                           ;doprnt.c: 1349: if(width > prec)
 15111  0017EE  5061               	movf	i2printf@width,w,c
 15112  0017F0  5C65               	subwf	i2printf@prec,w,c
 15113  0017F2  5066               	movf	i2printf@prec+1,w,c
 15114  0017F4  0A80               	xorlw	128
 15115  0017F6  6E44               	movwf	??i2_printf& (0+255),c
 15116  0017F8  5062               	movf	i2printf@width+1,w,c
 15117  0017FA  0A80               	xorlw	128
 15118  0017FC  5844               	subwfb	??i2_printf& (0+255),w,c
 15119  0017FE  B0D8               	btfsc	status,0,c
 15120  001800  D005               	goto	i2l6917
 15121                           
 15122                           ;doprnt.c: 1350: width -= prec;
 15123  001802  5065               	movf	i2printf@prec,w,c
 15124  001804  5E61               	subwf	i2printf@width,f,c
 15125  001806  5066               	movf	i2printf@prec+1,w,c
 15126  001808  5A62               	subwfb	i2printf@width+1,f,c
 15127  00180A  D004               	goto	i2l6919
 15128  00180C                     i2l6917:
 15129                           
 15130                           ;doprnt.c: 1351: else
 15131                           ;doprnt.c: 1352: width = 0;
 15132  00180C  0E00               	movlw	0
 15133  00180E  6E62               	movwf	i2printf@width+1,c
 15134  001810  0E00               	movlw	0
 15135  001812  6E61               	movwf	i2printf@width,c
 15136  001814                     i2l6919:
 15137                           
 15138                           ;doprnt.c: 1353: }
 15139                           ;doprnt.c: 1381: if(width > c)
 15140  001814  0E80               	movlw	128
 15141  001816  BE67               	btfsc	i2printf@c,7,c
 15142  001818  0E7F               	movlw	127
 15143  00181A  6E44               	movwf	??i2_printf& (0+255),c
 15144  00181C  5061               	movf	i2printf@width,w,c
 15145  00181E  5C67               	subwf	i2printf@c,w,c
 15146  001820  5062               	movf	i2printf@width+1,w,c
 15147  001822  0A80               	xorlw	128
 15148  001824  5844               	subwfb	??i2_printf& (0+255),w,c
 15149  001826  B0D8               	btfsc	status,0,c
 15150  001828  D007               	goto	i2l6923
 15151                           
 15152                           ;doprnt.c: 1382: width -= c;
 15153  00182A  5067               	movf	i2printf@c,w,c
 15154  00182C  5E61               	subwf	i2printf@width,f,c
 15155  00182E  0E00               	movlw	0
 15156  001830  BE67               	btfsc	i2printf@c,7,c
 15157  001832  0EFF               	movlw	255
 15158  001834  5A62               	subwfb	i2printf@width+1,f,c
 15159  001836  D004               	goto	i2l6925
 15160  001838                     i2l6923:
 15161                           
 15162                           ;doprnt.c: 1383: else
 15163                           ;doprnt.c: 1384: width = 0;
 15164  001838  0E00               	movlw	0
 15165  00183A  6E62               	movwf	i2printf@width+1,c
 15166  00183C  0E00               	movlw	0
 15167  00183E  6E61               	movwf	i2printf@width,c
 15168  001840                     i2l6925:
 15169                           
 15170                           ;doprnt.c: 1387: if(flag & 0x04) {
 15171  001840  A463               	btfss	i2printf@flag,2,c
 15172  001842  D018               	goto	i2l6937
 15173                           
 15174                           ;doprnt.c: 1392: if(flag & 0x03)
 15175  001844  0E03               	movlw	3
 15176  001846  1463               	andwf	i2printf@flag,w,c
 15177  001848  6E44               	movwf	??i2_printf& (0+255),c
 15178  00184A  0E00               	movlw	0
 15179  00184C  1464               	andwf	i2printf@flag+1,w,c
 15180  00184E  6E45               	movwf	(??i2_printf+1)& (0+255),c
 15181  001850  5044               	movf	??i2_printf,w,c
 15182  001852  1045               	iorwf	??i2_printf+1,w,c
 15183  001854  B4D8               	btfsc	status,2,c
 15184  001856  D003               	goto	i2l6931
 15185                           
 15186                           ;doprnt.c: 1393: (putch('-') );
 15187  001858  0E2D               	movlw	45
 15188  00185A  EC32  F02C         	call	i2_putch
 15189  00185E                     i2l6931:
 15190                           
 15191                           ;doprnt.c: 1415: if(width)
 15192  00185E  5061               	movf	i2printf@width,w,c
 15193  001860  1062               	iorwf	i2printf@width+1,w,c
 15194  001862  B4D8               	btfsc	status,2,c
 15195  001864  D09F               	goto	i2l6959
 15196                           
 15197                           ;doprnt.c: 1417: (putch('0') );
 15198                           
 15199                           ;doprnt.c: 1416: do
 15200  001866  0E30               	movlw	48
 15201  001868  EC32  F02C         	call	i2_putch
 15202                           
 15203                           ;doprnt.c: 1418: while(--width);
 15204  00186C  0661               	decf	i2printf@width,f,c
 15205  00186E  A0D8               	btfss	status,0,c
 15206  001870  0662               	decf	i2printf@width+1,f,c
 15207  001872  D7F5               	goto	i2l6931
 15208  001874                     i2l6937:
 15209                           
 15210                           ;doprnt.c: 1422: {
 15211                           ;doprnt.c: 1424: if(width
 15212                           ;doprnt.c: 1428: )
 15213  001874  5061               	movf	i2printf@width,w,c
 15214  001876  1062               	iorwf	i2printf@width+1,w,c
 15215  001878  B4D8               	btfsc	status,2,c
 15216  00187A  D00A               	goto	i2l6943
 15217  00187C                     i2l6939:
 15218                           
 15219                           ;doprnt.c: 1430: (putch(' ') );
 15220  00187C  0E20               	movlw	32
 15221  00187E  EC32  F02C         	call	i2_putch
 15222                           
 15223                           ;doprnt.c: 1431: while(--width);
 15224  001882  0661               	decf	i2printf@width,f,c
 15225  001884  A0D8               	btfss	status,0,c
 15226  001886  0662               	decf	i2printf@width+1,f,c
 15227  001888  5061               	movf	i2printf@width,w,c
 15228  00188A  1062               	iorwf	i2printf@width+1,w,c
 15229  00188C  A4D8               	btfss	status,2,c
 15230  00188E  D7F6               	goto	i2l6939
 15231  001890                     i2l6943:
 15232                           
 15233                           ;doprnt.c: 1438: if(flag & 0x03)
 15234  001890  0E03               	movlw	3
 15235  001892  1463               	andwf	i2printf@flag,w,c
 15236  001894  6E44               	movwf	??i2_printf& (0+255),c
 15237  001896  0E00               	movlw	0
 15238  001898  1464               	andwf	i2printf@flag+1,w,c
 15239  00189A  6E45               	movwf	(??i2_printf+1)& (0+255),c
 15240  00189C  5044               	movf	??i2_printf,w,c
 15241  00189E  1045               	iorwf	??i2_printf+1,w,c
 15242  0018A0  B4D8               	btfsc	status,2,c
 15243  0018A2  D080               	goto	i2l6959
 15244                           
 15245                           ;doprnt.c: 1439: (putch('-') );
 15246  0018A4  0E2D               	movlw	45
 15247  0018A6  EC32  F02C         	call	i2_putch
 15248                           
 15249                           ;doprnt.c: 1469: }
 15250                           ;doprnt.c: 1474: while(prec--) {
 15251  0018AA  D07C               	goto	i2l6959
 15252  0018AC                     i2l6947:
 15253                           
 15254                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15255  0018AC  C065  F044         	movff	i2printf@prec,??i2_printf
 15256  0018B0  C066  F045         	movff	i2printf@prec+1,??i2_printf+1
 15257  0018B4  90D8               	bcf	status,0,c
 15258  0018B6  3644               	rlcf	??i2_printf,f,c
 15259  0018B8  3645               	rlcf	??i2_printf+1,f,c
 15260  0018BA  90D8               	bcf	status,0,c
 15261  0018BC  3644               	rlcf	??i2_printf,f,c
 15262  0018BE  3645               	rlcf	??i2_printf+1,f,c
 15263  0018C0  0E1D               	movlw	low _dpowers
 15264  0018C2  2444               	addwf	??i2_printf,w,c
 15265  0018C4  6EF6               	movwf	tblptrl,c
 15266  0018C6  0EFE               	movlw	high _dpowers
 15267  0018C8  2045               	addwfc	??i2_printf+1,w,c
 15268  0018CA  6EF7               	movwf	tblptrh,c
 15269  0018CC                     	if	0	;There are less than 3 active tblptr bytes
 15270  0018CC                     	endif
 15271  0018CC  0009               	tblrd		*+
 15272  0018CE  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15273  0018D2  0009               	tblrd		*+
 15274  0018D4  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15275  0018D8  0009               	tblrd		*+
 15276  0018DA  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15277  0018DE  000A               	tblrd		*-
 15278  0018E0  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15279  0018E4  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 15280  0018E8  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15281  0018EC  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15282  0018F0  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15283  0018F4  EC7C  F028         	call	i2___lldiv	;wreg free
 15284  0018F8  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 15285  0018FC  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 15286  001900  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 15287  001904  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 15288  001908  0E0A               	movlw	10
 15289  00190A  6E12               	movwf	i2___llmod@divisor,c
 15290  00190C  0E00               	movlw	0
 15291  00190E  6E13               	movwf	i2___llmod@divisor+1,c
 15292  001910  0E00               	movlw	0
 15293  001912  6E14               	movwf	i2___llmod@divisor+2,c
 15294  001914  0E00               	movlw	0
 15295  001916  6E15               	movwf	i2___llmod@divisor+3,c
 15296  001918  EC6F  F029         	call	i2___llmod	;wreg free
 15297  00191C  500E               	movf	?i2___llmod,w,c
 15298  00191E  0F30               	addlw	48
 15299  001920  6E67               	movwf	i2printf@c,c
 15300                           
 15301                           ;doprnt.c: 1491: break;
 15302  001922  D03D               	goto	i2l6957
 15303  001924                     i2l6949:
 15304                           
 15305                           ;doprnt.c: 1499: {
 15306                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15307  001924  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 15308  001928  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15309  00192C  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15310  001930  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15311  001934  C065  F044         	movff	i2printf@prec,??i2_printf
 15312  001938  C066  F045         	movff	i2printf@prec+1,??i2_printf+1
 15313  00193C  90D8               	bcf	status,0,c
 15314  00193E  3644               	rlcf	??i2_printf,f,c
 15315  001940  3645               	rlcf	??i2_printf+1,f,c
 15316  001942  90D8               	bcf	status,0,c
 15317  001944  3644               	rlcf	??i2_printf,f,c
 15318  001946  3645               	rlcf	??i2_printf+1,f,c
 15319  001948  0E93               	movlw	low _hexpowers
 15320  00194A  2444               	addwf	??i2_printf,w,c
 15321  00194C  6EF6               	movwf	tblptrl,c
 15322  00194E  0EFE               	movlw	high _hexpowers
 15323  001950  2045               	addwfc	??i2_printf+1,w,c
 15324  001952  6EF7               	movwf	tblptrh,c
 15325  001954                     	if	0	;There are less than 3 active tblptr bytes
 15326  001954                     	endif
 15327  001954  0009               	tblrd		*+
 15328  001956  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15329  00195A  0009               	tblrd		*+
 15330  00195C  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15331  001960  0009               	tblrd		*+
 15332  001962  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15333  001966  000A               	tblrd		*-
 15334  001968  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15335  00196C  EC7C  F028         	call	i2___lldiv	;wreg free
 15336  001970  5001               	movf	?i2___lldiv,w,c
 15337  001972  0B0F               	andlw	15
 15338  001974  6E4D               	movwf	i2printf@idx,c
 15339                           
 15340                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15341  001976  504D               	movf	i2printf@idx,w,c
 15342  001978  0D01               	mullw	1
 15343  00197A  0E52               	movlw	low STR_19
 15344  00197C  24F3               	addwf	prodl,w,c
 15345  00197E  6EF6               	movwf	tblptrl,c
 15346  001980  0EFF               	movlw	high STR_19
 15347  001982  20F4               	addwfc	prodh,w,c
 15348  001984  6EF7               	movwf	tblptrh,c
 15349  001986                     	if	0	;There are less than 3 active tblptr bytes
 15350  001986                     	endif
 15351  001986  0008               	tblrd		*
 15352  001988  CFF5 F067          	movff	tablat,i2printf@c
 15353                           
 15354                           ;doprnt.c: 1523: }
 15355                           
 15356                           ;doprnt.c: 1508: }
 15357                           ;doprnt.c: 1510: break;
 15358  00198C  D008               	goto	i2l6957
 15359  00198E                     i2l6955:
 15360  00198E  5063               	movf	i2printf@flag,w,c
 15361  001990  0B80               	andlw	128
 15362                           
 15363                           ; Switch size 1, requested type "space"
 15364                           ; Number of cases is 2, Range of values is 0 to 128
 15365                           ; switch strategies available:
 15366                           ; Name         Instructions Cycles
 15367                           ; simple_byte            7     4 (average)
 15368                           ;	Chosen strategy is simple_byte
 15369  001992  0A00               	xorlw	0	; case 0
 15370  001994  B4D8               	btfsc	status,2,c
 15371  001996  D78A               	goto	i2l6947
 15372  001998  0A80               	xorlw	128	; case 128
 15373  00199A  B4D8               	btfsc	status,2,c
 15374  00199C  D7C3               	goto	i2l6949
 15375  00199E                     i2l6957:
 15376                           
 15377                           ;doprnt.c: 1524: (putch(c) );
 15378  00199E  5067               	movf	i2printf@c,w,c
 15379  0019A0  EC32  F02C         	call	i2_putch
 15380  0019A4                     i2l6959:
 15381  0019A4  0665               	decf	i2printf@prec,f,c
 15382  0019A6  A0D8               	btfss	status,0,c
 15383  0019A8  0666               	decf	i2printf@prec+1,f,c
 15384  0019AA  2865               	incf	i2printf@prec,w,c
 15385  0019AC  E1F0               	bnz	i2l6955
 15386  0019AE  2866               	incf	i2printf@prec+1,w,c
 15387  0019B0  A4D8               	btfss	status,2,c
 15388  0019B2  D7ED               	goto	i2l6955
 15389  0019B4                     i2l6961:
 15390  0019B4  C040  FFF6         	movff	i2printf@f,tblptrl
 15391  0019B8  C041  FFF7         	movff	i2printf@f+1,tblptrh
 15392  0019BC  4A40               	infsnz	i2printf@f,f,c
 15393  0019BE  2A41               	incf	i2printf@f+1,f,c
 15394  0019C0                     	if	0	;tblptru may be non-zero
 15395  0019C0                     	endif
 15396  0019C0                     	if	0	;tblptru may be non-zero
 15397  0019C0                     	endif
 15398  0019C0  0008               	tblrd		*
 15399  0019C2  CFF5 F067          	movff	tablat,i2printf@c
 15400  0019C6  5067               	movf	i2printf@c,w,c
 15401  0019C8  B4D8               	btfsc	status,2,c
 15402  0019CA  0012               	return	
 15403  0019CC  EF24  F007         	goto	i2l6595
 15404  0019D0                     __end_ofi2_printf:
 15405                           	opt stack 0
 15406                           pclatu	equ	0xFFB
 15407                           pclath	equ	0xFFA
 15408                           tblptru	equ	0xFF8
 15409                           tblptrh	equ	0xFF7
 15410                           tblptrl	equ	0xFF6
 15411                           tablat	equ	0xFF5
 15412                           prodh	equ	0xFF4
 15413                           prodl	equ	0xFF3
 15414                           intcon	equ	0xFF2
 15415                           intcon3	equ	0xFF0
 15416                           postinc0	equ	0xFEE
 15417                           fsr0h	equ	0xFEA
 15418                           fsr0l	equ	0xFE9
 15419                           wreg	equ	0xFE8
 15420                           postdec1	equ	0xFE5
 15421                           fsr1h	equ	0xFE2
 15422                           fsr1l	equ	0xFE1
 15423                           indf2	equ	0xFDF
 15424                           postinc2	equ	0xFDE
 15425                           postdec2	equ	0xFDD
 15426                           fsr2h	equ	0xFDA
 15427                           fsr2l	equ	0xFD9
 15428                           status	equ	0xFD8
 15429                           
 15430 ;; *************** function i2_scale *****************
 15431 ;; Defined at:
 15432 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;  scl             1    wreg     char 
 15435 ;; Auto vars:     Size  Location     Type
 15436 ;;  scl             1   41[COMRAM] char 
 15437 ;; Return value:  Size  Location     Type
 15438 ;;                  3   35[COMRAM] char 
 15439 ;; Registers used:
 15440 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15441 ;; Tracked objects:
 15442 ;;		On entry : 0/0
 15443 ;;		On exit  : 0/0
 15444 ;;		Unchanged: 0/0
 15445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15446 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15447 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15449 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15450 ;;Total ram usage:        7 bytes
 15451 ;; Hardware stack levels used:    1
 15452 ;; Hardware stack levels required when called:    2
 15453 ;; This function calls:
 15454 ;;		i2___awdiv
 15455 ;;		i2___awmod
 15456 ;;		i2___ftmul
 15457 ;;		i2___wmul
 15458 ;; This function is called by:
 15459 ;;		i2_printf
 15460 ;; This function uses a non-reentrant model
 15461 ;;
 15462                           
 15463                           	psect	text46
 15464  00242C                     __ptext46:
 15465                           	opt stack 0
 15466  00242C                     i2_scale:
 15467                           	opt stack 20
 15468                           
 15469                           ;incstack = 0
 15470                           ;i2scale@scl stored from wreg
 15471  00242C  6E2A               	movwf	i2scale@scl,c
 15472                           
 15473                           ;doprnt.c: 428: if(scl < 0) {
 15474  00242E  AE2A               	btfss	i2scale@scl,7,c
 15475  002430  D0FB               	goto	i2l6077
 15476                           
 15477                           ;doprnt.c: 429: scl = -scl;
 15478  002432  6C2A               	negf	i2scale@scl,c
 15479                           
 15480                           ;doprnt.c: 430: if(scl>=110)
 15481  002434  502A               	movf	i2scale@scl,w,c
 15482  002436  0A80               	xorlw	128
 15483  002438  0F12               	addlw	-238
 15484  00243A  A0D8               	btfss	status,0,c
 15485  00243C  D091               	goto	i2l6067
 15486                           
 15487                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15488  00243E  0E00               	movlw	0
 15489  002440  6E12               	movwf	i2___wmul@multiplicand+1,c
 15490  002442  0E03               	movlw	3
 15491  002444  6E11               	movwf	i2___wmul@multiplicand,c
 15492  002446  0E00               	movlw	0
 15493  002448  6E0A               	movwf	i2___awdiv@divisor+1,c
 15494  00244A  0E0A               	movlw	10
 15495  00244C  6E09               	movwf	i2___awdiv@divisor,c
 15496  00244E  0E00               	movlw	0
 15497  002450  6E04               	movwf	i2___awmod@divisor+1,c
 15498  002452  0E64               	movlw	100
 15499  002454  6E03               	movwf	i2___awmod@divisor,c
 15500  002456  502A               	movf	i2scale@scl,w,c
 15501  002458  6E01               	movwf	i2___awmod@dividend,c
 15502  00245A  6A02               	clrf	i2___awmod@dividend+1,c
 15503  00245C  BE01               	btfsc	i2___awmod@dividend,7,c
 15504  00245E  0602               	decf	i2___awmod@dividend+1,f,c
 15505  002460  EC37  F029         	call	i2___awmod	;wreg free
 15506  002464  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 15507  002468  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 15508  00246C  EC3A  F028         	call	i2___awdiv	;wreg free
 15509  002470  0E09               	movlw	9
 15510  002472  2407               	addwf	?i2___awdiv,w,c
 15511  002474  6E0F               	movwf	i2___wmul@multiplier,c
 15512  002476  0E00               	movlw	0
 15513  002478  2008               	addwfc	?i2___awdiv+1,w,c
 15514  00247A  6E10               	movwf	i2___wmul@multiplier+1,c
 15515  00247C  EC0D  F02C         	call	i2___wmul	;wreg free
 15516  002480  0E45               	movlw	low __npowers_
 15517  002482  240F               	addwf	?i2___wmul,w,c
 15518  002484  6EF6               	movwf	tblptrl,c
 15519  002486  0EFE               	movlw	high __npowers_
 15520  002488  2010               	addwfc	?i2___wmul+1,w,c
 15521  00248A  6EF7               	movwf	tblptrh,c
 15522  00248C                     	if	0	;There are less than 3 active tblptr bytes
 15523  00248C                     	endif
 15524  00248C  0009               	tblrd		*+
 15525  00248E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15526  002492  0009               	tblrd		*+
 15527  002494  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15528  002498  000A               	tblrd		*-
 15529  00249A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15530  00249E  0E00               	movlw	0
 15531  0024A0  6E0A               	movwf	i2___awdiv@divisor+1,c
 15532  0024A2  0E64               	movlw	100
 15533  0024A4  6E09               	movwf	i2___awdiv@divisor,c
 15534  0024A6  502A               	movf	i2scale@scl,w,c
 15535  0024A8  6E07               	movwf	i2___awdiv@dividend,c
 15536  0024AA  6A08               	clrf	i2___awdiv@dividend+1,c
 15537  0024AC  BE07               	btfsc	i2___awdiv@dividend,7,c
 15538  0024AE  0608               	decf	i2___awdiv@dividend+1,f,c
 15539  0024B0  EC3A  F028         	call	i2___awdiv	;wreg free
 15540  0024B4  0E12               	movlw	18
 15541  0024B6  2407               	addwf	?i2___awdiv,w,c
 15542  0024B8  6E0F               	movwf	i2___wmul@multiplier,c
 15543  0024BA  0E00               	movlw	0
 15544  0024BC  2008               	addwfc	?i2___awdiv+1,w,c
 15545  0024BE  6E10               	movwf	i2___wmul@multiplier+1,c
 15546  0024C0  0E00               	movlw	0
 15547  0024C2  6E12               	movwf	i2___wmul@multiplicand+1,c
 15548  0024C4  0E03               	movlw	3
 15549  0024C6  6E11               	movwf	i2___wmul@multiplicand,c
 15550  0024C8  EC0D  F02C         	call	i2___wmul	;wreg free
 15551  0024CC  0E45               	movlw	low __npowers_
 15552  0024CE  240F               	addwf	?i2___wmul,w,c
 15553  0024D0  6EF6               	movwf	tblptrl,c
 15554  0024D2  0EFE               	movlw	high __npowers_
 15555  0024D4  2010               	addwfc	?i2___wmul+1,w,c
 15556  0024D6  6EF7               	movwf	tblptrh,c
 15557  0024D8                     	if	0	;There are less than 3 active tblptr bytes
 15558  0024D8                     	endif
 15559  0024D8  0009               	tblrd		*+
 15560  0024DA  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15561  0024DE  0009               	tblrd		*+
 15562  0024E0  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15563  0024E4  000A               	tblrd		*-
 15564  0024E6  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15565  0024EA  EC0B  F023         	call	i2___ftmul	;wreg free
 15566  0024EE  C015  F027         	movff	?i2___ftmul,i2_scale$1545
 15567  0024F2  C016  F028         	movff	?i2___ftmul+1,i2_scale$1545+1
 15568  0024F6  C017  F029         	movff	?i2___ftmul+2,i2_scale$1545+2
 15569                           
 15570                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15571  0024FA  C027  F015         	movff	i2_scale$1545,i2___ftmul@f1
 15572  0024FE  C028  F016         	movff	i2_scale$1545+1,i2___ftmul@f1+1
 15573  002502  C029  F017         	movff	i2_scale$1545+2,i2___ftmul@f1+2
 15574  002506  0E00               	movlw	0
 15575  002508  6E12               	movwf	i2___wmul@multiplicand+1,c
 15576  00250A  0E03               	movlw	3
 15577  00250C  6E11               	movwf	i2___wmul@multiplicand,c
 15578  00250E  0E00               	movlw	0
 15579  002510  6E04               	movwf	i2___awmod@divisor+1,c
 15580  002512  0E0A               	movlw	10
 15581  002514  6E03               	movwf	i2___awmod@divisor,c
 15582  002516  502A               	movf	i2scale@scl,w,c
 15583  002518  6E01               	movwf	i2___awmod@dividend,c
 15584  00251A  6A02               	clrf	i2___awmod@dividend+1,c
 15585  00251C  BE01               	btfsc	i2___awmod@dividend,7,c
 15586  00251E  0602               	decf	i2___awmod@dividend+1,f,c
 15587  002520  EC37  F029         	call	i2___awmod	;wreg free
 15588  002524  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15589  002528  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15590  00252C  EC0D  F02C         	call	i2___wmul	;wreg free
 15591  002530  0E45               	movlw	low __npowers_
 15592  002532  240F               	addwf	?i2___wmul,w,c
 15593  002534  6EF6               	movwf	tblptrl,c
 15594  002536  0EFE               	movlw	high __npowers_
 15595  002538  2010               	addwfc	?i2___wmul+1,w,c
 15596  00253A  6EF7               	movwf	tblptrh,c
 15597  00253C                     	if	0	;There are less than 3 active tblptr bytes
 15598  00253C                     	endif
 15599  00253C  0009               	tblrd		*+
 15600  00253E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15601  002542  0009               	tblrd		*+
 15602  002544  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15603  002548  000A               	tblrd		*-
 15604  00254A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15605  00254E  EC0B  F023         	call	i2___ftmul	;wreg free
 15606  002552  C015  F024         	movff	?i2___ftmul,?i2_scale
 15607  002556  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 15608  00255A  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 15609  00255E  0012               	return	
 15610  002560                     i2l6067:
 15611                           
 15612                           ;doprnt.c: 432: else if(scl > 10)
 15613  002560  502A               	movf	i2scale@scl,w,c
 15614  002562  0A80               	xorlw	128
 15615  002564  0F75               	addlw	-139
 15616  002566  A0D8               	btfss	status,0,c
 15617  002568  D04D               	goto	i2l6073
 15618                           
 15619                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 15620  00256A  0E00               	movlw	0
 15621  00256C  6E0A               	movwf	i2___awdiv@divisor+1,c
 15622  00256E  0E0A               	movlw	10
 15623  002570  6E09               	movwf	i2___awdiv@divisor,c
 15624  002572  502A               	movf	i2scale@scl,w,c
 15625  002574  6E07               	movwf	i2___awdiv@dividend,c
 15626  002576  6A08               	clrf	i2___awdiv@dividend+1,c
 15627  002578  BE07               	btfsc	i2___awdiv@dividend,7,c
 15628  00257A  0608               	decf	i2___awdiv@dividend+1,f,c
 15629  00257C  EC3A  F028         	call	i2___awdiv	;wreg free
 15630  002580  0E09               	movlw	9
 15631  002582  2407               	addwf	?i2___awdiv,w,c
 15632  002584  6E0F               	movwf	i2___wmul@multiplier,c
 15633  002586  0E00               	movlw	0
 15634  002588  2008               	addwfc	?i2___awdiv+1,w,c
 15635  00258A  6E10               	movwf	i2___wmul@multiplier+1,c
 15636  00258C  0E00               	movlw	0
 15637  00258E  6E12               	movwf	i2___wmul@multiplicand+1,c
 15638  002590  0E03               	movlw	3
 15639  002592  6E11               	movwf	i2___wmul@multiplicand,c
 15640  002594  EC0D  F02C         	call	i2___wmul	;wreg free
 15641  002598  0E45               	movlw	low __npowers_
 15642  00259A  240F               	addwf	?i2___wmul,w,c
 15643  00259C  6EF6               	movwf	tblptrl,c
 15644  00259E  0EFE               	movlw	high __npowers_
 15645  0025A0  2010               	addwfc	?i2___wmul+1,w,c
 15646  0025A2  6EF7               	movwf	tblptrh,c
 15647  0025A4                     	if	0	;There are less than 3 active tblptr bytes
 15648  0025A4                     	endif
 15649  0025A4  0009               	tblrd		*+
 15650  0025A6  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15651  0025AA  0009               	tblrd		*+
 15652  0025AC  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15653  0025B0  000A               	tblrd		*-
 15654  0025B2  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15655  0025B6  0E00               	movlw	0
 15656  0025B8  6E12               	movwf	i2___wmul@multiplicand+1,c
 15657  0025BA  0E03               	movlw	3
 15658  0025BC  6E11               	movwf	i2___wmul@multiplicand,c
 15659  0025BE  0E00               	movlw	0
 15660  0025C0  6E04               	movwf	i2___awmod@divisor+1,c
 15661  0025C2  0E0A               	movlw	10
 15662  0025C4  6E03               	movwf	i2___awmod@divisor,c
 15663  0025C6  502A               	movf	i2scale@scl,w,c
 15664  0025C8  6E01               	movwf	i2___awmod@dividend,c
 15665  0025CA  6A02               	clrf	i2___awmod@dividend+1,c
 15666  0025CC  BE01               	btfsc	i2___awmod@dividend,7,c
 15667  0025CE  0602               	decf	i2___awmod@dividend+1,f,c
 15668  0025D0  EC37  F029         	call	i2___awmod	;wreg free
 15669  0025D4  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15670  0025D8  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15671  0025DC  EC0D  F02C         	call	i2___wmul	;wreg free
 15672  0025E0  0E45               	movlw	low __npowers_
 15673  0025E2  240F               	addwf	?i2___wmul,w,c
 15674  0025E4  6EF6               	movwf	tblptrl,c
 15675  0025E6  0EFE               	movlw	high __npowers_
 15676  0025E8  2010               	addwfc	?i2___wmul+1,w,c
 15677  0025EA  6EF7               	movwf	tblptrh,c
 15678  0025EC                     	if	0	;There are less than 3 active tblptr bytes
 15679  0025EC                     	endif
 15680  0025EC  0009               	tblrd		*+
 15681  0025EE  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15682  0025F2  0009               	tblrd		*+
 15683  0025F4  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15684  0025F8  000A               	tblrd		*-
 15685  0025FA  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15686  0025FE  EC0B  F023         	call	i2___ftmul	;wreg free
 15687  002602  D7A7               	goto	L11
 15688  002604                     i2l6073:
 15689                           
 15690                           ;doprnt.c: 434: return _npowers_[scl];
 15691  002604  502A               	movf	i2scale@scl,w,c
 15692  002606  0D03               	mullw	3
 15693  002608  0E45               	movlw	low __npowers_
 15694  00260A  24F3               	addwf	prodl,w,c
 15695  00260C  6EF6               	movwf	tblptrl,c
 15696  00260E  0EFE               	movlw	high __npowers_
 15697  002610  20F4               	addwfc	prodh,w,c
 15698  002612  6EF7               	movwf	tblptrh,c
 15699  002614                     	if	0	;There are less than 3 active tblptr bytes
 15700  002614                     	endif
 15701  002614  0009               	tblrd		*+
 15702  002616  CFF5 F024          	movff	tablat,?i2_scale
 15703  00261A  0009               	tblrd		*+
 15704  00261C  CFF5 F025          	movff	tablat,?i2_scale+1
 15705  002620  000A               	tblrd		*-
 15706  002622  CFF5 F026          	movff	tablat,?i2_scale+2
 15707  002626  0012               	return	
 15708  002628                     i2l6077:
 15709                           
 15710                           ;doprnt.c: 435: }
 15711                           ;doprnt.c: 436: if(scl>=110)
 15712  002628  502A               	movf	i2scale@scl,w,c
 15713  00262A  0A80               	xorlw	128
 15714  00262C  0F12               	addlw	-238
 15715  00262E  A0D8               	btfss	status,0,c
 15716  002630  D091               	goto	i2l6085
 15717                           
 15718                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15719  002632  0E00               	movlw	0
 15720  002634  6E12               	movwf	i2___wmul@multiplicand+1,c
 15721  002636  0E03               	movlw	3
 15722  002638  6E11               	movwf	i2___wmul@multiplicand,c
 15723  00263A  0E00               	movlw	0
 15724  00263C  6E0A               	movwf	i2___awdiv@divisor+1,c
 15725  00263E  0E0A               	movlw	10
 15726  002640  6E09               	movwf	i2___awdiv@divisor,c
 15727  002642  0E00               	movlw	0
 15728  002644  6E04               	movwf	i2___awmod@divisor+1,c
 15729  002646  0E64               	movlw	100
 15730  002648  6E03               	movwf	i2___awmod@divisor,c
 15731  00264A  502A               	movf	i2scale@scl,w,c
 15732  00264C  6E01               	movwf	i2___awmod@dividend,c
 15733  00264E  6A02               	clrf	i2___awmod@dividend+1,c
 15734  002650  BE01               	btfsc	i2___awmod@dividend,7,c
 15735  002652  0602               	decf	i2___awmod@dividend+1,f,c
 15736  002654  EC37  F029         	call	i2___awmod	;wreg free
 15737  002658  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 15738  00265C  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 15739  002660  EC3A  F028         	call	i2___awdiv	;wreg free
 15740  002664  0E09               	movlw	9
 15741  002666  2407               	addwf	?i2___awdiv,w,c
 15742  002668  6E0F               	movwf	i2___wmul@multiplier,c
 15743  00266A  0E00               	movlw	0
 15744  00266C  2008               	addwfc	?i2___awdiv+1,w,c
 15745  00266E  6E10               	movwf	i2___wmul@multiplier+1,c
 15746  002670  EC0D  F02C         	call	i2___wmul	;wreg free
 15747  002674  0E6C               	movlw	low __powers_
 15748  002676  240F               	addwf	?i2___wmul,w,c
 15749  002678  6EF6               	movwf	tblptrl,c
 15750  00267A  0EFE               	movlw	high __powers_
 15751  00267C  2010               	addwfc	?i2___wmul+1,w,c
 15752  00267E  6EF7               	movwf	tblptrh,c
 15753  002680                     	if	0	;There are less than 3 active tblptr bytes
 15754  002680                     	endif
 15755  002680  0009               	tblrd		*+
 15756  002682  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15757  002686  0009               	tblrd		*+
 15758  002688  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15759  00268C  000A               	tblrd		*-
 15760  00268E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15761  002692  0E00               	movlw	0
 15762  002694  6E0A               	movwf	i2___awdiv@divisor+1,c
 15763  002696  0E64               	movlw	100
 15764  002698  6E09               	movwf	i2___awdiv@divisor,c
 15765  00269A  502A               	movf	i2scale@scl,w,c
 15766  00269C  6E07               	movwf	i2___awdiv@dividend,c
 15767  00269E  6A08               	clrf	i2___awdiv@dividend+1,c
 15768  0026A0  BE07               	btfsc	i2___awdiv@dividend,7,c
 15769  0026A2  0608               	decf	i2___awdiv@dividend+1,f,c
 15770  0026A4  EC3A  F028         	call	i2___awdiv	;wreg free
 15771  0026A8  0E12               	movlw	18
 15772  0026AA  2407               	addwf	?i2___awdiv,w,c
 15773  0026AC  6E0F               	movwf	i2___wmul@multiplier,c
 15774  0026AE  0E00               	movlw	0
 15775  0026B0  2008               	addwfc	?i2___awdiv+1,w,c
 15776  0026B2  6E10               	movwf	i2___wmul@multiplier+1,c
 15777  0026B4  0E00               	movlw	0
 15778  0026B6  6E12               	movwf	i2___wmul@multiplicand+1,c
 15779  0026B8  0E03               	movlw	3
 15780  0026BA  6E11               	movwf	i2___wmul@multiplicand,c
 15781  0026BC  EC0D  F02C         	call	i2___wmul	;wreg free
 15782  0026C0  0E6C               	movlw	low __powers_
 15783  0026C2  240F               	addwf	?i2___wmul,w,c
 15784  0026C4  6EF6               	movwf	tblptrl,c
 15785  0026C6  0EFE               	movlw	high __powers_
 15786  0026C8  2010               	addwfc	?i2___wmul+1,w,c
 15787  0026CA  6EF7               	movwf	tblptrh,c
 15788  0026CC                     	if	0	;There are less than 3 active tblptr bytes
 15789  0026CC                     	endif
 15790  0026CC  0009               	tblrd		*+
 15791  0026CE  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15792  0026D2  0009               	tblrd		*+
 15793  0026D4  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15794  0026D8  000A               	tblrd		*-
 15795  0026DA  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15796  0026DE  EC0B  F023         	call	i2___ftmul	;wreg free
 15797  0026E2  C015  F027         	movff	?i2___ftmul,i2_scale$1545
 15798  0026E6  C016  F028         	movff	?i2___ftmul+1,i2_scale$1545+1
 15799  0026EA  C017  F029         	movff	?i2___ftmul+2,i2_scale$1545+2
 15800                           
 15801                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15802  0026EE  C027  F015         	movff	i2_scale$1545,i2___ftmul@f1
 15803  0026F2  C028  F016         	movff	i2_scale$1545+1,i2___ftmul@f1+1
 15804  0026F6  C029  F017         	movff	i2_scale$1545+2,i2___ftmul@f1+2
 15805  0026FA  0E00               	movlw	0
 15806  0026FC  6E12               	movwf	i2___wmul@multiplicand+1,c
 15807  0026FE  0E03               	movlw	3
 15808  002700  6E11               	movwf	i2___wmul@multiplicand,c
 15809  002702  0E00               	movlw	0
 15810  002704  6E04               	movwf	i2___awmod@divisor+1,c
 15811  002706  0E0A               	movlw	10
 15812  002708  6E03               	movwf	i2___awmod@divisor,c
 15813  00270A  502A               	movf	i2scale@scl,w,c
 15814  00270C  6E01               	movwf	i2___awmod@dividend,c
 15815  00270E  6A02               	clrf	i2___awmod@dividend+1,c
 15816  002710  BE01               	btfsc	i2___awmod@dividend,7,c
 15817  002712  0602               	decf	i2___awmod@dividend+1,f,c
 15818  002714  EC37  F029         	call	i2___awmod	;wreg free
 15819  002718  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15820  00271C  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15821  002720  EC0D  F02C         	call	i2___wmul	;wreg free
 15822  002724  0E6C               	movlw	low __powers_
 15823  002726  240F               	addwf	?i2___wmul,w,c
 15824  002728  6EF6               	movwf	tblptrl,c
 15825  00272A  0EFE               	movlw	high __powers_
 15826  00272C  2010               	addwfc	?i2___wmul+1,w,c
 15827  00272E  6EF7               	movwf	tblptrh,c
 15828  002730                     	if	0	;There are less than 3 active tblptr bytes
 15829  002730                     	endif
 15830  002730  0009               	tblrd		*+
 15831  002732  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15832  002736  0009               	tblrd		*+
 15833  002738  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15834  00273C  000A               	tblrd		*-
 15835  00273E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15836  002742  EC0B  F023         	call	i2___ftmul	;wreg free
 15837  002746  C015  F024         	movff	?i2___ftmul,?i2_scale
 15838  00274A  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 15839  00274E  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 15840  002752  0012               	return	
 15841  002754                     i2l6085:
 15842                           
 15843                           ;doprnt.c: 438: else if(scl > 10)
 15844  002754  502A               	movf	i2scale@scl,w,c
 15845  002756  0A80               	xorlw	128
 15846  002758  0F75               	addlw	-139
 15847  00275A  A0D8               	btfss	status,0,c
 15848  00275C  D04D               	goto	i2l6091
 15849                           
 15850                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 15851  00275E  0E00               	movlw	0
 15852  002760  6E0A               	movwf	i2___awdiv@divisor+1,c
 15853  002762  0E0A               	movlw	10
 15854  002764  6E09               	movwf	i2___awdiv@divisor,c
 15855  002766  502A               	movf	i2scale@scl,w,c
 15856  002768  6E07               	movwf	i2___awdiv@dividend,c
 15857  00276A  6A08               	clrf	i2___awdiv@dividend+1,c
 15858  00276C  BE07               	btfsc	i2___awdiv@dividend,7,c
 15859  00276E  0608               	decf	i2___awdiv@dividend+1,f,c
 15860  002770  EC3A  F028         	call	i2___awdiv	;wreg free
 15861  002774  0E09               	movlw	9
 15862  002776  2407               	addwf	?i2___awdiv,w,c
 15863  002778  6E0F               	movwf	i2___wmul@multiplier,c
 15864  00277A  0E00               	movlw	0
 15865  00277C  2008               	addwfc	?i2___awdiv+1,w,c
 15866  00277E  6E10               	movwf	i2___wmul@multiplier+1,c
 15867  002780  0E00               	movlw	0
 15868  002782  6E12               	movwf	i2___wmul@multiplicand+1,c
 15869  002784  0E03               	movlw	3
 15870  002786  6E11               	movwf	i2___wmul@multiplicand,c
 15871  002788  EC0D  F02C         	call	i2___wmul	;wreg free
 15872  00278C  0E6C               	movlw	low __powers_
 15873  00278E  240F               	addwf	?i2___wmul,w,c
 15874  002790  6EF6               	movwf	tblptrl,c
 15875  002792  0EFE               	movlw	high __powers_
 15876  002794  2010               	addwfc	?i2___wmul+1,w,c
 15877  002796  6EF7               	movwf	tblptrh,c
 15878  002798                     	if	0	;There are less than 3 active tblptr bytes
 15879  002798                     	endif
 15880  002798  0009               	tblrd		*+
 15881  00279A  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15882  00279E  0009               	tblrd		*+
 15883  0027A0  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15884  0027A4  000A               	tblrd		*-
 15885  0027A6  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15886  0027AA  0E00               	movlw	0
 15887  0027AC  6E12               	movwf	i2___wmul@multiplicand+1,c
 15888  0027AE  0E03               	movlw	3
 15889  0027B0  6E11               	movwf	i2___wmul@multiplicand,c
 15890  0027B2  0E00               	movlw	0
 15891  0027B4  6E04               	movwf	i2___awmod@divisor+1,c
 15892  0027B6  0E0A               	movlw	10
 15893  0027B8  6E03               	movwf	i2___awmod@divisor,c
 15894  0027BA  502A               	movf	i2scale@scl,w,c
 15895  0027BC  6E01               	movwf	i2___awmod@dividend,c
 15896  0027BE  6A02               	clrf	i2___awmod@dividend+1,c
 15897  0027C0  BE01               	btfsc	i2___awmod@dividend,7,c
 15898  0027C2  0602               	decf	i2___awmod@dividend+1,f,c
 15899  0027C4  EC37  F029         	call	i2___awmod	;wreg free
 15900  0027C8  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15901  0027CC  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15902  0027D0  EC0D  F02C         	call	i2___wmul	;wreg free
 15903  0027D4  0E6C               	movlw	low __powers_
 15904  0027D6  240F               	addwf	?i2___wmul,w,c
 15905  0027D8  6EF6               	movwf	tblptrl,c
 15906  0027DA  0EFE               	movlw	high __powers_
 15907  0027DC  2010               	addwfc	?i2___wmul+1,w,c
 15908  0027DE  6EF7               	movwf	tblptrh,c
 15909  0027E0                     	if	0	;There are less than 3 active tblptr bytes
 15910  0027E0                     	endif
 15911  0027E0  0009               	tblrd		*+
 15912  0027E2  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15913  0027E6  0009               	tblrd		*+
 15914  0027E8  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15915  0027EC  000A               	tblrd		*-
 15916  0027EE  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15917  0027F2  EC0B  F023         	call	i2___ftmul	;wreg free
 15918  0027F6  D7A7               	goto	L12
 15919  0027F8                     i2l6091:
 15920                           
 15921                           ;doprnt.c: 440: return _powers_[scl];
 15922  0027F8  502A               	movf	i2scale@scl,w,c
 15923  0027FA  0D03               	mullw	3
 15924  0027FC  0E6C               	movlw	low __powers_
 15925  0027FE  24F3               	addwf	prodl,w,c
 15926  002800  6EF6               	movwf	tblptrl,c
 15927  002802  0EFE               	movlw	high __powers_
 15928  002804  20F4               	addwfc	prodh,w,c
 15929  002806  6EF7               	movwf	tblptrh,c
 15930  002808                     	if	0	;There are less than 3 active tblptr bytes
 15931  002808                     	endif
 15932  002808  0009               	tblrd		*+
 15933  00280A  CFF5 F024          	movff	tablat,?i2_scale
 15934  00280E  0009               	tblrd		*+
 15935  002810  CFF5 F025          	movff	tablat,?i2_scale+1
 15936  002814  000A               	tblrd		*-
 15937  002816  CFF5 F026          	movff	tablat,?i2_scale+2
 15938  00281A  0012               	return	
 15939  00281C                     __end_ofi2_scale:
 15940                           	opt stack 0
 15941                           pclatu	equ	0xFFB
 15942                           pclath	equ	0xFFA
 15943                           tblptru	equ	0xFF8
 15944                           tblptrh	equ	0xFF7
 15945                           tblptrl	equ	0xFF6
 15946                           tablat	equ	0xFF5
 15947                           prodh	equ	0xFF4
 15948                           prodl	equ	0xFF3
 15949                           intcon	equ	0xFF2
 15950                           intcon3	equ	0xFF0
 15951                           postinc0	equ	0xFEE
 15952                           fsr0h	equ	0xFEA
 15953                           fsr0l	equ	0xFE9
 15954                           wreg	equ	0xFE8
 15955                           postdec1	equ	0xFE5
 15956                           fsr1h	equ	0xFE2
 15957                           fsr1l	equ	0xFE1
 15958                           indf2	equ	0xFDF
 15959                           postinc2	equ	0xFDE
 15960                           postdec2	equ	0xFDD
 15961                           fsr2h	equ	0xFDA
 15962                           fsr2l	equ	0xFD9
 15963                           status	equ	0xFD8
 15964                           
 15965 ;; *************** function i2_putch *****************
 15966 ;; Defined at:
 15967 ;;		line 35 in file "lcd.c"
 15968 ;; Parameters:    Size  Location     Type
 15969 ;;  data            1    wreg     unsigned char 
 15970 ;; Auto vars:     Size  Location     Type
 15971 ;;  data            1    4[COMRAM] unsigned char 
 15972 ;; Return value:  Size  Location     Type
 15973 ;;                  1    wreg      void 
 15974 ;; Registers used:
 15975 ;;		wreg, status,2, status,0, cstack
 15976 ;; Tracked objects:
 15977 ;;		On entry : 0/0
 15978 ;;		On exit  : 0/0
 15979 ;;		Unchanged: 0/0
 15980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15982 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15984 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15985 ;;Total ram usage:        1 bytes
 15986 ;; Hardware stack levels used:    1
 15987 ;; Hardware stack levels required when called:    3
 15988 ;; This function calls:
 15989 ;;		i2_lcdNewline
 15990 ;;		i2_lcdNibble
 15991 ;; This function is called by:
 15992 ;;		i2_printf
 15993 ;; This function uses a non-reentrant model
 15994 ;;
 15995                           
 15996                           	psect	text47
 15997  005864                     __ptext47:
 15998                           	opt stack 0
 15999  005864                     i2_putch:
 16000                           	opt stack 19
 16001                           
 16002                           ;incstack = 0
 16003                           ;i2putch@data stored from wreg
 16004  005864  6E05               	movwf	i2putch@data,c
 16005                           
 16006                           ;lcd.c: 36: if(data == '\n')lcdNewline();
 16007  005866  0E0A               	movlw	10
 16008  005868  1805               	xorwf	i2putch@data,w,c
 16009  00586A  A4D8               	btfss	status,2,c
 16010  00586C  D003               	goto	i2l205
 16011  00586E  EC7A  F02C         	call	i2_lcdNewline	;wreg free
 16012  005872  0012               	return	
 16013  005874                     i2l205:
 16014                           
 16015                           ;lcd.c: 37: else
 16016                           ;lcd.c: 38: {
 16017                           ;lcd.c: 39: LATDbits.LATD2 = 1;
 16018  005874  848C               	bsf	3980,2,c	;volatile
 16019                           
 16020                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
 16021  005876  0E74               	movlw	116
 16022  005878                     i2u859_47:
 16023  005878  2EE8               	decfsz	wreg,f,c
 16024  00587A  D7FE               	bra	i2u859_47
 16025  00587C  D000               	nop2	
 16026                           
 16027                           ;lcd.c: 41: lcdNibble(data);
 16028  00587E  5005               	movf	i2putch@data,w,c
 16029  005880  ECA2  F029         	call	i2_lcdNibble
 16030  005884  0012               	return	
 16031  005886                     __end_ofi2_putch:
 16032                           	opt stack 0
 16033                           pclatu	equ	0xFFB
 16034                           pclath	equ	0xFFA
 16035                           tblptru	equ	0xFF8
 16036                           tblptrh	equ	0xFF7
 16037                           tblptrl	equ	0xFF6
 16038                           tablat	equ	0xFF5
 16039                           prodh	equ	0xFF4
 16040                           prodl	equ	0xFF3
 16041                           intcon	equ	0xFF2
 16042                           intcon3	equ	0xFF0
 16043                           postinc0	equ	0xFEE
 16044                           fsr0h	equ	0xFEA
 16045                           fsr0l	equ	0xFE9
 16046                           wreg	equ	0xFE8
 16047                           postdec1	equ	0xFE5
 16048                           fsr1h	equ	0xFE2
 16049                           fsr1l	equ	0xFE1
 16050                           indf2	equ	0xFDF
 16051                           postinc2	equ	0xFDE
 16052                           postdec2	equ	0xFDD
 16053                           fsr2h	equ	0xFDA
 16054                           fsr2l	equ	0xFD9
 16055                           status	equ	0xFD8
 16056                           
 16057 ;; *************** function i2_lcdNewline *****************
 16058 ;; Defined at:
 16059 ;;		line 78 in file "lcd.c"
 16060 ;; Parameters:    Size  Location     Type
 16061 ;;		None
 16062 ;; Auto vars:     Size  Location     Type
 16063 ;;		None
 16064 ;; Return value:  Size  Location     Type
 16065 ;;                  1    wreg      void 
 16066 ;; Registers used:
 16067 ;;		wreg, status,2, status,0, cstack
 16068 ;; Tracked objects:
 16069 ;;		On entry : 0/0
 16070 ;;		On exit  : 0/0
 16071 ;;		Unchanged: 0/0
 16072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16077 ;;Total ram usage:        0 bytes
 16078 ;; Hardware stack levels used:    1
 16079 ;; Hardware stack levels required when called:    2
 16080 ;; This function calls:
 16081 ;;		i2_lcdInst
 16082 ;; This function is called by:
 16083 ;;		i2_putch
 16084 ;; This function uses a non-reentrant model
 16085 ;;
 16086                           
 16087                           	psect	text48
 16088  0058F4                     __ptext48:
 16089                           	opt stack 0
 16090  0058F4                     i2_lcdNewline:
 16091                           	opt stack 19
 16092                           
 16093                           ;lcd.c: 79: lcdInst(0b11000000);
 16094                           
 16095                           ;incstack = 0
 16096  0058F4  0EC0               	movlw	192
 16097  0058F6  EC43  F02C         	call	i2_lcdInst
 16098  0058FA  0012               	return		;funcret
 16099  0058FC                     __end_ofi2_lcdNewline:
 16100                           	opt stack 0
 16101                           pclatu	equ	0xFFB
 16102                           pclath	equ	0xFFA
 16103                           tblptru	equ	0xFF8
 16104                           tblptrh	equ	0xFF7
 16105                           tblptrl	equ	0xFF6
 16106                           tablat	equ	0xFF5
 16107                           prodh	equ	0xFF4
 16108                           prodl	equ	0xFF3
 16109                           intcon	equ	0xFF2
 16110                           intcon3	equ	0xFF0
 16111                           postinc0	equ	0xFEE
 16112                           fsr0h	equ	0xFEA
 16113                           fsr0l	equ	0xFE9
 16114                           wreg	equ	0xFE8
 16115                           postdec1	equ	0xFE5
 16116                           fsr1h	equ	0xFE2
 16117                           fsr1l	equ	0xFE1
 16118                           indf2	equ	0xFDF
 16119                           postinc2	equ	0xFDE
 16120                           postdec2	equ	0xFDD
 16121                           fsr2h	equ	0xFDA
 16122                           fsr2l	equ	0xFD9
 16123                           status	equ	0xFD8
 16124                           
 16125 ;; *************** function i2_isdigit *****************
 16126 ;; Defined at:
 16127 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16128 ;; Parameters:    Size  Location     Type
 16129 ;;  c               1    wreg     unsigned char 
 16130 ;; Auto vars:     Size  Location     Type
 16131 ;;  c               1    2[COMRAM] unsigned char 
 16132 ;; Return value:  Size  Location     Type
 16133 ;;		None               void
 16134 ;; Registers used:
 16135 ;;		wreg, status,2, status,0
 16136 ;; Tracked objects:
 16137 ;;		On entry : 0/0
 16138 ;;		On exit  : 0/0
 16139 ;;		Unchanged: 0/0
 16140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16142 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16143 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16144 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16145 ;;Total ram usage:        3 bytes
 16146 ;; Hardware stack levels used:    1
 16147 ;; This function calls:
 16148 ;;		Nothing
 16149 ;; This function is called by:
 16150 ;;		i2_printf
 16151 ;; This function uses a non-reentrant model
 16152 ;;
 16153                           
 16154                           	psect	text49
 16155  0058A8                     __ptext49:
 16156                           	opt stack 0
 16157  0058A8                     i2_isdigit:
 16158                           	opt stack 22
 16159                           
 16160                           ;incstack = 0
 16161                           ;i2isdigit@c stored from wreg
 16162  0058A8  6E03               	movwf	i2isdigit@c,c
 16163  0058AA  0E00               	movlw	0
 16164  0058AC  6E02               	movwf	i2_isdigit$976,c
 16165  0058AE  0E3A               	movlw	58
 16166  0058B0  6003               	cpfslt	i2isdigit@c,c
 16167  0058B2  D005               	goto	i2l6295
 16168  0058B4  0E2F               	movlw	47
 16169  0058B6  6403               	cpfsgt	i2isdigit@c,c
 16170  0058B8  D002               	goto	i2l6295
 16171  0058BA  0E01               	movlw	1
 16172  0058BC  6E02               	movwf	i2_isdigit$976,c
 16173  0058BE                     i2l6295:
 16174  0058BE  C002  F001         	movff	i2_isdigit$976,??i2_isdigit
 16175  0058C2  3001               	rrcf	??i2_isdigit,w,c
 16176  0058C4  0012               	return	
 16177  0058C6                     __end_ofi2_isdigit:
 16178                           	opt stack 0
 16179                           pclatu	equ	0xFFB
 16180                           pclath	equ	0xFFA
 16181                           tblptru	equ	0xFF8
 16182                           tblptrh	equ	0xFF7
 16183                           tblptrl	equ	0xFF6
 16184                           tablat	equ	0xFF5
 16185                           prodh	equ	0xFF4
 16186                           prodl	equ	0xFF3
 16187                           intcon	equ	0xFF2
 16188                           intcon3	equ	0xFF0
 16189                           postinc0	equ	0xFEE
 16190                           fsr0h	equ	0xFEA
 16191                           fsr0l	equ	0xFE9
 16192                           wreg	equ	0xFE8
 16193                           postdec1	equ	0xFE5
 16194                           fsr1h	equ	0xFE2
 16195                           fsr1l	equ	0xFE1
 16196                           indf2	equ	0xFDF
 16197                           postinc2	equ	0xFDE
 16198                           postdec2	equ	0xFDD
 16199                           fsr2h	equ	0xFDA
 16200                           fsr2l	equ	0xFD9
 16201                           status	equ	0xFD8
 16202                           
 16203 ;; *************** function i2_fround *****************
 16204 ;; Defined at:
 16205 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 16206 ;; Parameters:    Size  Location     Type
 16207 ;;  prec            1    wreg     unsigned char 
 16208 ;; Auto vars:     Size  Location     Type
 16209 ;;  prec            1   44[COMRAM] unsigned char 
 16210 ;; Return value:  Size  Location     Type
 16211 ;;                  3   35[COMRAM] unsigned char 
 16212 ;; Registers used:
 16213 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16214 ;; Tracked objects:
 16215 ;;		On entry : 0/0
 16216 ;;		On exit  : 0/0
 16217 ;;		Unchanged: 0/0
 16218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16219 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16220 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16222 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16223 ;;Total ram usage:       10 bytes
 16224 ;; Hardware stack levels used:    1
 16225 ;; Hardware stack levels required when called:    2
 16226 ;; This function calls:
 16227 ;;		i2___awdiv
 16228 ;;		i2___awmod
 16229 ;;		i2___ftmul
 16230 ;;		i2___wmul
 16231 ;; This function is called by:
 16232 ;;		i2_printf
 16233 ;; This function uses a non-reentrant model
 16234 ;;
 16235                           
 16236                           	psect	text50
 16237  0030B6                     __ptext50:
 16238                           	opt stack 0
 16239  0030B6                     i2_fround:
 16240                           	opt stack 20
 16241                           
 16242                           ;incstack = 0
 16243                           ;i2fround@prec stored from wreg
 16244  0030B6  6E2D               	movwf	i2fround@prec,c
 16245                           
 16246                           ;doprnt.c: 413: if(prec>=110)
 16247  0030B8  0E6D               	movlw	109
 16248  0030BA  642D               	cpfsgt	i2fround@prec,c
 16249  0030BC  D09F               	goto	i2l6045
 16250                           
 16251                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16252  0030BE  0E00               	movlw	0
 16253  0030C0  6E12               	movwf	i2___wmul@multiplicand+1,c
 16254  0030C2  0E03               	movlw	3
 16255  0030C4  6E11               	movwf	i2___wmul@multiplicand,c
 16256  0030C6  0E00               	movlw	0
 16257  0030C8  6E0A               	movwf	i2___awdiv@divisor+1,c
 16258  0030CA  0E0A               	movlw	10
 16259  0030CC  6E09               	movwf	i2___awdiv@divisor,c
 16260  0030CE  0E00               	movlw	0
 16261  0030D0  6E04               	movwf	i2___awmod@divisor+1,c
 16262  0030D2  0E64               	movlw	100
 16263  0030D4  6E03               	movwf	i2___awmod@divisor,c
 16264  0030D6  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 16265  0030DA  6A02               	clrf	i2___awmod@dividend+1,c
 16266  0030DC  EC37  F029         	call	i2___awmod	;wreg free
 16267  0030E0  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 16268  0030E4  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 16269  0030E8  EC3A  F028         	call	i2___awdiv	;wreg free
 16270  0030EC  0E09               	movlw	9
 16271  0030EE  2407               	addwf	?i2___awdiv,w,c
 16272  0030F0  6E0F               	movwf	i2___wmul@multiplier,c
 16273  0030F2  0E00               	movlw	0
 16274  0030F4  2008               	addwfc	?i2___awdiv+1,w,c
 16275  0030F6  6E10               	movwf	i2___wmul@multiplier+1,c
 16276  0030F8  EC0D  F02C         	call	i2___wmul	;wreg free
 16277  0030FC  0E45               	movlw	low __npowers_
 16278  0030FE  240F               	addwf	?i2___wmul,w,c
 16279  003100  6EF6               	movwf	tblptrl,c
 16280  003102  0EFE               	movlw	high __npowers_
 16281  003104  2010               	addwfc	?i2___wmul+1,w,c
 16282  003106  6EF7               	movwf	tblptrh,c
 16283  003108                     	if	0	;There are less than 3 active tblptr bytes
 16284  003108                     	endif
 16285  003108  0009               	tblrd		*+
 16286  00310A  CFF5 F018          	movff	tablat,i2___ftmul@f2
 16287  00310E  0009               	tblrd		*+
 16288  003110  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 16289  003114  000A               	tblrd		*-
 16290  003116  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 16291  00311A  0E00               	movlw	0
 16292  00311C  6E0A               	movwf	i2___awdiv@divisor+1,c
 16293  00311E  0E64               	movlw	100
 16294  003120  6E09               	movwf	i2___awdiv@divisor,c
 16295  003122  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 16296  003126  6A08               	clrf	i2___awdiv@dividend+1,c
 16297  003128  EC3A  F028         	call	i2___awdiv	;wreg free
 16298  00312C  0E12               	movlw	18
 16299  00312E  2407               	addwf	?i2___awdiv,w,c
 16300  003130  6E0F               	movwf	i2___wmul@multiplier,c
 16301  003132  0E00               	movlw	0
 16302  003134  2008               	addwfc	?i2___awdiv+1,w,c
 16303  003136  6E10               	movwf	i2___wmul@multiplier+1,c
 16304  003138  0E00               	movlw	0
 16305  00313A  6E12               	movwf	i2___wmul@multiplicand+1,c
 16306  00313C  0E03               	movlw	3
 16307  00313E  6E11               	movwf	i2___wmul@multiplicand,c
 16308  003140  EC0D  F02C         	call	i2___wmul	;wreg free
 16309  003144  0E45               	movlw	low __npowers_
 16310  003146  240F               	addwf	?i2___wmul,w,c
 16311  003148  6EF6               	movwf	tblptrl,c
 16312  00314A  0EFE               	movlw	high __npowers_
 16313  00314C  2010               	addwfc	?i2___wmul+1,w,c
 16314  00314E  6EF7               	movwf	tblptrh,c
 16315  003150                     	if	0	;There are less than 3 active tblptr bytes
 16316  003150                     	endif
 16317  003150  0009               	tblrd		*+
 16318  003152  CFF5 F015          	movff	tablat,i2___ftmul@f1
 16319  003156  0009               	tblrd		*+
 16320  003158  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 16321  00315C  000A               	tblrd		*-
 16322  00315E  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 16323  003162  EC0B  F023         	call	i2___ftmul	;wreg free
 16324  003166  C015  F02A         	movff	?i2___ftmul,i2_fround$1543
 16325  00316A  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1543+1
 16326  00316E  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1543+2
 16327                           
 16328                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16329  003172  0E00               	movlw	0
 16330  003174  6E12               	movwf	i2___wmul@multiplicand+1,c
 16331  003176  0E03               	movlw	3
 16332  003178  6E11               	movwf	i2___wmul@multiplicand,c
 16333  00317A  0E00               	movlw	0
 16334  00317C  6E04               	movwf	i2___awmod@divisor+1,c
 16335  00317E  0E0A               	movlw	10
 16336  003180  6E03               	movwf	i2___awmod@divisor,c
 16337  003182  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 16338  003186  6A02               	clrf	i2___awmod@dividend+1,c
 16339  003188  EC37  F029         	call	i2___awmod	;wreg free
 16340  00318C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16341  003190  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16342  003194  EC0D  F02C         	call	i2___wmul	;wreg free
 16343  003198  0E45               	movlw	low __npowers_
 16344  00319A  240F               	addwf	?i2___wmul,w,c
 16345  00319C  6EF6               	movwf	tblptrl,c
 16346  00319E  0EFE               	movlw	high __npowers_
 16347  0031A0  2010               	addwfc	?i2___wmul+1,w,c
 16348  0031A2  6EF7               	movwf	tblptrh,c
 16349  0031A4                     	if	0	;There are less than 3 active tblptr bytes
 16350  0031A4                     	endif
 16351  0031A4  0009               	tblrd		*+
 16352  0031A6  CFF5 F018          	movff	tablat,i2___ftmul@f2
 16353  0031AA  0009               	tblrd		*+
 16354  0031AC  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 16355  0031B0  000A               	tblrd		*-
 16356  0031B2  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 16357  0031B6  C02A  F015         	movff	i2_fround$1543,i2___ftmul@f1
 16358  0031BA  C02B  F016         	movff	i2_fround$1543+1,i2___ftmul@f1+1
 16359  0031BE  C02C  F017         	movff	i2_fround$1543+2,i2___ftmul@f1+2
 16360  0031C2  EC0B  F023         	call	i2___ftmul	;wreg free
 16361  0031C6  C015  F027         	movff	?i2___ftmul,i2_fround$1544
 16362  0031CA  C016  F028         	movff	?i2___ftmul+1,i2_fround$1544+1
 16363  0031CE  C017  F029         	movff	?i2___ftmul+2,i2_fround$1544+2
 16364                           
 16365                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16366  0031D2  C027  F015         	movff	i2_fround$1544,i2___ftmul@f1
 16367  0031D6  C028  F016         	movff	i2_fround$1544+1,i2___ftmul@f1+1
 16368  0031DA  C029  F017         	movff	i2_fround$1544+2,i2___ftmul@f1+2
 16369  0031DE  0E00               	movlw	0
 16370  0031E0  6E18               	movwf	i2___ftmul@f2,c
 16371  0031E2  0E00               	movlw	0
 16372  0031E4  6E19               	movwf	i2___ftmul@f2+1,c
 16373  0031E6  0E3F               	movlw	63
 16374  0031E8  6E1A               	movwf	i2___ftmul@f2+2,c
 16375  0031EA  EC0B  F023         	call	i2___ftmul	;wreg free
 16376  0031EE  C015  F024         	movff	?i2___ftmul,?i2_fround
 16377  0031F2  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 16378  0031F6  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 16379  0031FA  0012               	return	
 16380  0031FC                     i2l6045:
 16381                           
 16382                           ;doprnt.c: 415: else if(prec > 10)
 16383  0031FC  0E0A               	movlw	10
 16384  0031FE  642D               	cpfsgt	i2fround@prec,c
 16385  003200  D05D               	goto	i2l6053
 16386                           
 16387                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16388  003202  0E00               	movlw	0
 16389  003204  6E12               	movwf	i2___wmul@multiplicand+1,c
 16390  003206  0E03               	movlw	3
 16391  003208  6E11               	movwf	i2___wmul@multiplicand,c
 16392  00320A  0E00               	movlw	0
 16393  00320C  6E04               	movwf	i2___awmod@divisor+1,c
 16394  00320E  0E0A               	movlw	10
 16395  003210  6E03               	movwf	i2___awmod@divisor,c
 16396  003212  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 16397  003216  6A02               	clrf	i2___awmod@dividend+1,c
 16398  003218  EC37  F029         	call	i2___awmod	;wreg free
 16399  00321C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16400  003220  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16401  003224  EC0D  F02C         	call	i2___wmul	;wreg free
 16402  003228  0E45               	movlw	low __npowers_
 16403  00322A  240F               	addwf	?i2___wmul,w,c
 16404  00322C  6EF6               	movwf	tblptrl,c
 16405  00322E  0EFE               	movlw	high __npowers_
 16406  003230  2010               	addwfc	?i2___wmul+1,w,c
 16407  003232  6EF7               	movwf	tblptrh,c
 16408  003234                     	if	0	;There are less than 3 active tblptr bytes
 16409  003234                     	endif
 16410  003234  0009               	tblrd		*+
 16411  003236  CFF5 F018          	movff	tablat,i2___ftmul@f2
 16412  00323A  0009               	tblrd		*+
 16413  00323C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 16414  003240  000A               	tblrd		*-
 16415  003242  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 16416  003246  0E00               	movlw	0
 16417  003248  6E0A               	movwf	i2___awdiv@divisor+1,c
 16418  00324A  0E0A               	movlw	10
 16419  00324C  6E09               	movwf	i2___awdiv@divisor,c
 16420  00324E  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 16421  003252  6A08               	clrf	i2___awdiv@dividend+1,c
 16422  003254  EC3A  F028         	call	i2___awdiv	;wreg free
 16423  003258  0E09               	movlw	9
 16424  00325A  2407               	addwf	?i2___awdiv,w,c
 16425  00325C  6E0F               	movwf	i2___wmul@multiplier,c
 16426  00325E  0E00               	movlw	0
 16427  003260  2008               	addwfc	?i2___awdiv+1,w,c
 16428  003262  6E10               	movwf	i2___wmul@multiplier+1,c
 16429  003264  0E00               	movlw	0
 16430  003266  6E12               	movwf	i2___wmul@multiplicand+1,c
 16431  003268  0E03               	movlw	3
 16432  00326A  6E11               	movwf	i2___wmul@multiplicand,c
 16433  00326C  EC0D  F02C         	call	i2___wmul	;wreg free
 16434  003270  0E45               	movlw	low __npowers_
 16435  003272  240F               	addwf	?i2___wmul,w,c
 16436  003274  6EF6               	movwf	tblptrl,c
 16437  003276  0EFE               	movlw	high __npowers_
 16438  003278  2010               	addwfc	?i2___wmul+1,w,c
 16439  00327A  6EF7               	movwf	tblptrh,c
 16440  00327C                     	if	0	;There are less than 3 active tblptr bytes
 16441  00327C                     	endif
 16442  00327C  0009               	tblrd		*+
 16443  00327E  CFF5 F015          	movff	tablat,i2___ftmul@f1
 16444  003282  0009               	tblrd		*+
 16445  003284  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 16446  003288  000A               	tblrd		*-
 16447  00328A  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 16448  00328E  EC0B  F023         	call	i2___ftmul	;wreg free
 16449  003292  C015  F02A         	movff	?i2___ftmul,i2_fround$1543
 16450  003296  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1543+1
 16451  00329A  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1543+2
 16452                           
 16453                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16454  00329E  C02A  F015         	movff	i2_fround$1543,i2___ftmul@f1
 16455  0032A2  C02B  F016         	movff	i2_fround$1543+1,i2___ftmul@f1+1
 16456  0032A6  C02C  F017         	movff	i2_fround$1543+2,i2___ftmul@f1+2
 16457  0032AA  0E00               	movlw	0
 16458  0032AC  6E18               	movwf	i2___ftmul@f2,c
 16459  0032AE  0E00               	movlw	0
 16460  0032B0  6E19               	movwf	i2___ftmul@f2+1,c
 16461  0032B2  0E3F               	movlw	63
 16462  0032B4  6E1A               	movwf	i2___ftmul@f2+2,c
 16463  0032B6  EC0B  F023         	call	i2___ftmul	;wreg free
 16464  0032BA  D799               	goto	L13
 16465  0032BC                     i2l6053:
 16466                           
 16467                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 16468  0032BC  502D               	movf	i2fround@prec,w,c
 16469  0032BE  0D03               	mullw	3
 16470  0032C0  0E45               	movlw	low __npowers_
 16471  0032C2  24F3               	addwf	prodl,w,c
 16472  0032C4  6EF6               	movwf	tblptrl,c
 16473  0032C6  0EFE               	movlw	high __npowers_
 16474  0032C8  20F4               	addwfc	prodh,w,c
 16475  0032CA  6EF7               	movwf	tblptrh,c
 16476  0032CC                     	if	0	;There are less than 3 active tblptr bytes
 16477  0032CC                     	endif
 16478  0032CC  0009               	tblrd		*+
 16479  0032CE  CFF5 F015          	movff	tablat,i2___ftmul@f1
 16480  0032D2  0009               	tblrd		*+
 16481  0032D4  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 16482  0032D8  000A               	tblrd		*-
 16483  0032DA  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 16484  0032DE  0E00               	movlw	0
 16485  0032E0  6E18               	movwf	i2___ftmul@f2,c
 16486  0032E2  0E00               	movlw	0
 16487  0032E4  6E19               	movwf	i2___ftmul@f2+1,c
 16488  0032E6  0E3F               	movlw	63
 16489  0032E8  6E1A               	movwf	i2___ftmul@f2+2,c
 16490  0032EA  EC0B  F023         	call	i2___ftmul	;wreg free
 16491  0032EE  C015  F024         	movff	?i2___ftmul,?i2_fround
 16492  0032F2  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 16493  0032F6  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 16494  0032FA  0012               	return	
 16495  0032FC                     __end_ofi2_fround:
 16496                           	opt stack 0
 16497                           pclatu	equ	0xFFB
 16498                           pclath	equ	0xFFA
 16499                           tblptru	equ	0xFF8
 16500                           tblptrh	equ	0xFF7
 16501                           tblptrl	equ	0xFF6
 16502                           tablat	equ	0xFF5
 16503                           prodh	equ	0xFF4
 16504                           prodl	equ	0xFF3
 16505                           intcon	equ	0xFF2
 16506                           intcon3	equ	0xFF0
 16507                           postinc0	equ	0xFEE
 16508                           fsr0h	equ	0xFEA
 16509                           fsr0l	equ	0xFE9
 16510                           wreg	equ	0xFE8
 16511                           postdec1	equ	0xFE5
 16512                           fsr1h	equ	0xFE2
 16513                           fsr1l	equ	0xFE1
 16514                           indf2	equ	0xFDF
 16515                           postinc2	equ	0xFDE
 16516                           postdec2	equ	0xFDD
 16517                           fsr2h	equ	0xFDA
 16518                           fsr2l	equ	0xFD9
 16519                           status	equ	0xFD8
 16520                           
 16521 ;; *************** function i2___wmul *****************
 16522 ;; Defined at:
 16523 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16524 ;; Parameters:    Size  Location     Type
 16525 ;;  multiplier      2   14[COMRAM] unsigned int 
 16526 ;;  multiplicand    2   16[COMRAM] unsigned int 
 16527 ;; Auto vars:     Size  Location     Type
 16528 ;;  __wmul          2   18[COMRAM] unsigned int 
 16529 ;; Return value:  Size  Location     Type
 16530 ;;                  2   14[COMRAM] unsigned int 
 16531 ;; Registers used:
 16532 ;;		wreg, status,2, status,0, prodl, prodh
 16533 ;; Tracked objects:
 16534 ;;		On entry : 0/0
 16535 ;;		On exit  : 0/0
 16536 ;;		Unchanged: 0/0
 16537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16538 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16539 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;Total ram usage:        6 bytes
 16543 ;; Hardware stack levels used:    1
 16544 ;; This function calls:
 16545 ;;		Nothing
 16546 ;; This function is called by:
 16547 ;;		i2_fround
 16548 ;;		i2_scale
 16549 ;;		i2_printf
 16550 ;; This function uses a non-reentrant model
 16551 ;;
 16552                           
 16553                           	psect	text51
 16554  00581A                     __ptext51:
 16555                           	opt stack 0
 16556  00581A                     i2___wmul:
 16557                           	opt stack 21
 16558                           
 16559                           ;incstack = 0
 16560  00581A  500F               	movf	i2___wmul@multiplier,w,c
 16561  00581C  0211               	mulwf	i2___wmul@multiplicand,c
 16562  00581E  CFF3 F013          	movff	prodl,i2___wmul@product
 16563  005822  CFF4 F014          	movff	prodh,i2___wmul@product+1
 16564  005826  500F               	movf	i2___wmul@multiplier,w,c
 16565  005828  0212               	mulwf	i2___wmul@multiplicand+1,c
 16566  00582A  50F3               	movf	prodl,w,c
 16567  00582C  2614               	addwf	i2___wmul@product+1,f,c
 16568  00582E  5010               	movf	i2___wmul@multiplier+1,w,c
 16569  005830  0211               	mulwf	i2___wmul@multiplicand,c
 16570  005832  50F3               	movf	prodl,w,c
 16571  005834  2614               	addwf	i2___wmul@product+1,f,c
 16572  005836  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 16573  00583A  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 16574  00583E  0012               	return	
 16575  005840                     __end_ofi2___wmul:
 16576                           	opt stack 0
 16577                           pclatu	equ	0xFFB
 16578                           pclath	equ	0xFFA
 16579                           tblptru	equ	0xFF8
 16580                           tblptrh	equ	0xFF7
 16581                           tblptrl	equ	0xFF6
 16582                           tablat	equ	0xFF5
 16583                           prodh	equ	0xFF4
 16584                           prodl	equ	0xFF3
 16585                           intcon	equ	0xFF2
 16586                           intcon3	equ	0xFF0
 16587                           postinc0	equ	0xFEE
 16588                           fsr0h	equ	0xFEA
 16589                           fsr0l	equ	0xFE9
 16590                           wreg	equ	0xFE8
 16591                           postdec1	equ	0xFE5
 16592                           fsr1h	equ	0xFE2
 16593                           fsr1l	equ	0xFE1
 16594                           indf2	equ	0xFDF
 16595                           postinc2	equ	0xFDE
 16596                           postdec2	equ	0xFDD
 16597                           fsr2h	equ	0xFDA
 16598                           fsr2l	equ	0xFD9
 16599                           status	equ	0xFD8
 16600                           
 16601 ;; *************** function i2___ftmul *****************
 16602 ;; Defined at:
 16603 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 16604 ;; Parameters:    Size  Location     Type
 16605 ;;  f1              3   20[COMRAM] float 
 16606 ;;  f2              3   23[COMRAM] float 
 16607 ;; Auto vars:     Size  Location     Type
 16608 ;;  __ftmul         3   30[COMRAM] unsigned um
 16609 ;;  __ftmul         1   34[COMRAM] unsigned char 
 16610 ;;  __ftmul         1   33[COMRAM] unsigned char 
 16611 ;;  __ftmul         1   29[COMRAM] unsigned char 
 16612 ;; Return value:  Size  Location     Type
 16613 ;;                  3   20[COMRAM] float 
 16614 ;; Registers used:
 16615 ;;		wreg, status,2, status,0, cstack
 16616 ;; Tracked objects:
 16617 ;;		On entry : 0/0
 16618 ;;		On exit  : 0/0
 16619 ;;		Unchanged: 0/0
 16620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16621 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16622 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16623 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16624 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16625 ;;Total ram usage:       15 bytes
 16626 ;; Hardware stack levels used:    1
 16627 ;; Hardware stack levels required when called:    1
 16628 ;; This function calls:
 16629 ;;		i2___ftpack
 16630 ;; This function is called by:
 16631 ;;		i2_fround
 16632 ;;		i2_scale
 16633 ;;		i2_printf
 16634 ;; This function uses a non-reentrant model
 16635 ;;
 16636                           
 16637                           	psect	text52
 16638  004616                     __ptext52:
 16639                           	opt stack 0
 16640  004616                     i2___ftmul:
 16641                           	opt stack 20
 16642                           
 16643                           ;incstack = 0
 16644  004616  C017  F01B         	movff	i2___ftmul@f1+2,??i2___ftmul
 16645  00461A  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 16646  00461C  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 16647  00461E  3416               	rlcf	i2___ftmul@f1+1,w,c
 16648  004620  361B               	rlcf	??i2___ftmul& (0+255),f,c
 16649  004622  E301               	bnc	u573_41
 16650  004624  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 16651  004626                     u573_41:
 16652  004626  501B               	movf	??i2___ftmul,w,c
 16653  004628  6E1E               	movwf	i2___ftmul@exp,c
 16654  00462A  501E               	movf	i2___ftmul@exp,w,c
 16655  00462C  A4D8               	btfss	status,2,c
 16656  00462E  D007               	goto	i2l5423
 16657  004630  0E00               	movlw	0
 16658  004632  6E15               	movwf	?i2___ftmul,c
 16659  004634  0E00               	movlw	0
 16660  004636  6E16               	movwf	?i2___ftmul+1,c
 16661  004638  0E00               	movlw	0
 16662  00463A  6E17               	movwf	?i2___ftmul+2,c
 16663  00463C  0012               	return	
 16664  00463E                     i2l5423:
 16665  00463E  C01A  F01B         	movff	i2___ftmul@f2+2,??i2___ftmul
 16666  004642  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 16667  004644  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 16668  004646  3419               	rlcf	i2___ftmul@f2+1,w,c
 16669  004648  361B               	rlcf	??i2___ftmul& (0+255),f,c
 16670  00464A  E301               	bnc	u575_41
 16671  00464C  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 16672  00464E                     u575_41:
 16673  00464E  501B               	movf	??i2___ftmul,w,c
 16674  004650  6E23               	movwf	i2___ftmul@sign,c
 16675  004652  5023               	movf	i2___ftmul@sign,w,c
 16676  004654  A4D8               	btfss	status,2,c
 16677  004656  D007               	goto	i2l5429
 16678  004658  0E00               	movlw	0
 16679  00465A  6E15               	movwf	?i2___ftmul,c
 16680  00465C  0E00               	movlw	0
 16681  00465E  6E16               	movwf	?i2___ftmul+1,c
 16682  004660  0E00               	movlw	0
 16683  004662  6E17               	movwf	?i2___ftmul+2,c
 16684  004664  0012               	return	
 16685  004666                     i2l5429:
 16686  004666  5023               	movf	i2___ftmul@sign,w,c
 16687  004668  0F7B               	addlw	123
 16688  00466A  261E               	addwf	i2___ftmul@exp,f,c
 16689  00466C  C017  F023         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 16690  004670  501A               	movf	i2___ftmul@f2+2,w,c
 16691  004672  1A23               	xorwf	i2___ftmul@sign,f,c
 16692  004674  0E80               	movlw	128
 16693  004676  1623               	andwf	i2___ftmul@sign,f,c
 16694  004678  8E16               	bsf	i2___ftmul@f1+1,7,c
 16695  00467A  8E19               	bsf	i2___ftmul@f2+1,7,c
 16696  00467C  0EFF               	movlw	255
 16697  00467E  1618               	andwf	i2___ftmul@f2,f,c
 16698  004680  0EFF               	movlw	255
 16699  004682  1619               	andwf	i2___ftmul@f2+1,f,c
 16700  004684  0E00               	movlw	0
 16701  004686  161A               	andwf	i2___ftmul@f2+2,f,c
 16702  004688  0E00               	movlw	0
 16703  00468A  6E1F               	movwf	i2___ftmul@f3_as_product,c
 16704  00468C  0E00               	movlw	0
 16705  00468E  6E20               	movwf	i2___ftmul@f3_as_product+1,c
 16706  004690  0E00               	movlw	0
 16707  004692  6E21               	movwf	i2___ftmul@f3_as_product+2,c
 16708  004694  0E07               	movlw	7
 16709  004696  6E22               	movwf	i2___ftmul@cntr,c
 16710  004698                     i2l5443:
 16711  004698  A015               	btfss	i2___ftmul@f1,0,c
 16712  00469A  D006               	goto	i2l5447
 16713  00469C  5018               	movf	i2___ftmul@f2,w,c
 16714  00469E  261F               	addwf	i2___ftmul@f3_as_product,f,c
 16715  0046A0  5019               	movf	i2___ftmul@f2+1,w,c
 16716  0046A2  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 16717  0046A4  501A               	movf	i2___ftmul@f2+2,w,c
 16718  0046A6  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 16719  0046A8                     i2l5447:
 16720  0046A8  90D8               	bcf	status,0,c
 16721  0046AA  3217               	rrcf	i2___ftmul@f1+2,f,c
 16722  0046AC  3216               	rrcf	i2___ftmul@f1+1,f,c
 16723  0046AE  3215               	rrcf	i2___ftmul@f1,f,c
 16724  0046B0  90D8               	bcf	status,0,c
 16725  0046B2  3618               	rlcf	i2___ftmul@f2,f,c
 16726  0046B4  3619               	rlcf	i2___ftmul@f2+1,f,c
 16727  0046B6  361A               	rlcf	i2___ftmul@f2+2,f,c
 16728  0046B8  2E22               	decfsz	i2___ftmul@cntr,f,c
 16729  0046BA  D7EE               	goto	i2l5443
 16730  0046BC  0E09               	movlw	9
 16731  0046BE  6E22               	movwf	i2___ftmul@cntr,c
 16732  0046C0                     i2l5453:
 16733  0046C0  A015               	btfss	i2___ftmul@f1,0,c
 16734  0046C2  D006               	goto	i2l5457
 16735  0046C4  5018               	movf	i2___ftmul@f2,w,c
 16736  0046C6  261F               	addwf	i2___ftmul@f3_as_product,f,c
 16737  0046C8  5019               	movf	i2___ftmul@f2+1,w,c
 16738  0046CA  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 16739  0046CC  501A               	movf	i2___ftmul@f2+2,w,c
 16740  0046CE  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 16741  0046D0                     i2l5457:
 16742  0046D0  90D8               	bcf	status,0,c
 16743  0046D2  3217               	rrcf	i2___ftmul@f1+2,f,c
 16744  0046D4  3216               	rrcf	i2___ftmul@f1+1,f,c
 16745  0046D6  3215               	rrcf	i2___ftmul@f1,f,c
 16746  0046D8  90D8               	bcf	status,0,c
 16747  0046DA  3221               	rrcf	i2___ftmul@f3_as_product+2,f,c
 16748  0046DC  3220               	rrcf	i2___ftmul@f3_as_product+1,f,c
 16749  0046DE  321F               	rrcf	i2___ftmul@f3_as_product,f,c
 16750  0046E0  2E22               	decfsz	i2___ftmul@cntr,f,c
 16751  0046E2  D7EE               	goto	i2l5453
 16752  0046E4  C01F  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 16753  0046E8  C020  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 16754  0046EC  C021  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 16755  0046F0  C01E  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 16756  0046F4  C023  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 16757  0046F8  EC67  F026         	call	i2___ftpack	;wreg free
 16758  0046FC  C001  F015         	movff	?i2___ftpack,?i2___ftmul
 16759  004700  C002  F016         	movff	?i2___ftpack+1,?i2___ftmul+1
 16760  004704  C003  F017         	movff	?i2___ftpack+2,?i2___ftmul+2
 16761  004708  0012               	return	
 16762  00470A                     __end_ofi2___ftmul:
 16763                           	opt stack 0
 16764                           pclatu	equ	0xFFB
 16765                           pclath	equ	0xFFA
 16766                           tblptru	equ	0xFF8
 16767                           tblptrh	equ	0xFF7
 16768                           tblptrl	equ	0xFF6
 16769                           tablat	equ	0xFF5
 16770                           prodh	equ	0xFF4
 16771                           prodl	equ	0xFF3
 16772                           intcon	equ	0xFF2
 16773                           intcon3	equ	0xFF0
 16774                           postinc0	equ	0xFEE
 16775                           fsr0h	equ	0xFEA
 16776                           fsr0l	equ	0xFE9
 16777                           wreg	equ	0xFE8
 16778                           postdec1	equ	0xFE5
 16779                           fsr1h	equ	0xFE2
 16780                           fsr1l	equ	0xFE1
 16781                           indf2	equ	0xFDF
 16782                           postinc2	equ	0xFDE
 16783                           postdec2	equ	0xFDD
 16784                           fsr2h	equ	0xFDA
 16785                           fsr2l	equ	0xFD9
 16786                           status	equ	0xFD8
 16787                           
 16788 ;; *************** function i2___awdiv *****************
 16789 ;; Defined at:
 16790 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 16791 ;; Parameters:    Size  Location     Type
 16792 ;;  dividend        2    6[COMRAM] int 
 16793 ;;  divisor         2    8[COMRAM] int 
 16794 ;; Auto vars:     Size  Location     Type
 16795 ;;  __awdiv         2   12[COMRAM] int 
 16796 ;;  __awdiv         1   11[COMRAM] unsigned char 
 16797 ;;  __awdiv         1   10[COMRAM] unsigned char 
 16798 ;; Return value:  Size  Location     Type
 16799 ;;                  2    6[COMRAM] int 
 16800 ;; Registers used:
 16801 ;;		wreg, status,2, status,0
 16802 ;; Tracked objects:
 16803 ;;		On entry : 0/0
 16804 ;;		On exit  : 0/0
 16805 ;;		Unchanged: 0/0
 16806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16807 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16810 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;Total ram usage:        8 bytes
 16812 ;; Hardware stack levels used:    1
 16813 ;; This function calls:
 16814 ;;		Nothing
 16815 ;; This function is called by:
 16816 ;;		i2_fround
 16817 ;;		i2_scale
 16818 ;;		i2_printf
 16819 ;; This function uses a non-reentrant model
 16820 ;;
 16821                           
 16822                           	psect	text53
 16823  005074                     __ptext53:
 16824                           	opt stack 0
 16825  005074                     i2___awdiv:
 16826                           	opt stack 21
 16827                           
 16828                           ;incstack = 0
 16829  005074  0E00               	movlw	0
 16830  005076  6E0C               	movwf	i2___awdiv@sign,c
 16831  005078  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 16832  00507A  D006               	goto	i2l5275
 16833  00507C  6C09               	negf	i2___awdiv@divisor,c
 16834  00507E  1E0A               	comf	i2___awdiv@divisor+1,f,c
 16835  005080  B0D8               	btfsc	status,0,c
 16836  005082  2A0A               	incf	i2___awdiv@divisor+1,f,c
 16837  005084  0E01               	movlw	1
 16838  005086  6E0C               	movwf	i2___awdiv@sign,c
 16839  005088                     i2l5275:
 16840  005088  AE08               	btfss	i2___awdiv@dividend+1,7,c
 16841  00508A  D006               	goto	i2l5281
 16842  00508C  6C07               	negf	i2___awdiv@dividend,c
 16843  00508E  1E08               	comf	i2___awdiv@dividend+1,f,c
 16844  005090  B0D8               	btfsc	status,0,c
 16845  005092  2A08               	incf	i2___awdiv@dividend+1,f,c
 16846  005094  0E01               	movlw	1
 16847  005096  1A0C               	xorwf	i2___awdiv@sign,f,c
 16848  005098                     i2l5281:
 16849  005098  0E00               	movlw	0
 16850  00509A  6E0E               	movwf	i2___awdiv@quotient+1,c
 16851  00509C  0E00               	movlw	0
 16852  00509E  6E0D               	movwf	i2___awdiv@quotient,c
 16853  0050A0  5009               	movf	i2___awdiv@divisor,w,c
 16854  0050A2  100A               	iorwf	i2___awdiv@divisor+1,w,c
 16855  0050A4  B4D8               	btfsc	status,2,c
 16856  0050A6  D01C               	goto	i2l5303
 16857  0050A8  0E01               	movlw	1
 16858  0050AA  6E0B               	movwf	i2___awdiv@counter,c
 16859  0050AC  D004               	goto	i2l5289
 16860  0050AE                     i2l5287:
 16861  0050AE  90D8               	bcf	status,0,c
 16862  0050B0  3609               	rlcf	i2___awdiv@divisor,f,c
 16863  0050B2  360A               	rlcf	i2___awdiv@divisor+1,f,c
 16864  0050B4  2A0B               	incf	i2___awdiv@counter,f,c
 16865  0050B6                     i2l5289:
 16866  0050B6  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 16867  0050B8  D7FA               	goto	i2l5287
 16868  0050BA                     i2l5291:
 16869  0050BA  90D8               	bcf	status,0,c
 16870  0050BC  360D               	rlcf	i2___awdiv@quotient,f,c
 16871  0050BE  360E               	rlcf	i2___awdiv@quotient+1,f,c
 16872  0050C0  5009               	movf	i2___awdiv@divisor,w,c
 16873  0050C2  5C07               	subwf	i2___awdiv@dividend,w,c
 16874  0050C4  500A               	movf	i2___awdiv@divisor+1,w,c
 16875  0050C6  5808               	subwfb	i2___awdiv@dividend+1,w,c
 16876  0050C8  A0D8               	btfss	status,0,c
 16877  0050CA  D005               	goto	i2l5299
 16878  0050CC  5009               	movf	i2___awdiv@divisor,w,c
 16879  0050CE  5E07               	subwf	i2___awdiv@dividend,f,c
 16880  0050D0  500A               	movf	i2___awdiv@divisor+1,w,c
 16881  0050D2  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 16882  0050D4  800D               	bsf	i2___awdiv@quotient,0,c
 16883  0050D6                     i2l5299:
 16884  0050D6  90D8               	bcf	status,0,c
 16885  0050D8  320A               	rrcf	i2___awdiv@divisor+1,f,c
 16886  0050DA  3209               	rrcf	i2___awdiv@divisor,f,c
 16887  0050DC  2E0B               	decfsz	i2___awdiv@counter,f,c
 16888  0050DE  D7ED               	goto	i2l5291
 16889  0050E0                     i2l5303:
 16890  0050E0  500C               	movf	i2___awdiv@sign,w,c
 16891  0050E2  B4D8               	btfsc	status,2,c
 16892  0050E4  D004               	goto	i2l5307
 16893  0050E6  6C0D               	negf	i2___awdiv@quotient,c
 16894  0050E8  1E0E               	comf	i2___awdiv@quotient+1,f,c
 16895  0050EA  B0D8               	btfsc	status,0,c
 16896  0050EC  2A0E               	incf	i2___awdiv@quotient+1,f,c
 16897  0050EE                     i2l5307:
 16898  0050EE  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 16899  0050F2  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 16900  0050F6  0012               	return	
 16901  0050F8                     __end_ofi2___awdiv:
 16902                           	opt stack 0
 16903                           pclatu	equ	0xFFB
 16904                           pclath	equ	0xFFA
 16905                           tblptru	equ	0xFF8
 16906                           tblptrh	equ	0xFF7
 16907                           tblptrl	equ	0xFF6
 16908                           tablat	equ	0xFF5
 16909                           prodh	equ	0xFF4
 16910                           prodl	equ	0xFF3
 16911                           intcon	equ	0xFF2
 16912                           intcon3	equ	0xFF0
 16913                           postinc0	equ	0xFEE
 16914                           fsr0h	equ	0xFEA
 16915                           fsr0l	equ	0xFE9
 16916                           wreg	equ	0xFE8
 16917                           postdec1	equ	0xFE5
 16918                           fsr1h	equ	0xFE2
 16919                           fsr1l	equ	0xFE1
 16920                           indf2	equ	0xFDF
 16921                           postinc2	equ	0xFDE
 16922                           postdec2	equ	0xFDD
 16923                           fsr2h	equ	0xFDA
 16924                           fsr2l	equ	0xFD9
 16925                           status	equ	0xFD8
 16926                           
 16927 ;; *************** function i2__tdiv_to_l_ *****************
 16928 ;; Defined at:
 16929 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 16930 ;; Parameters:    Size  Location     Type
 16931 ;;  f1              3    0[COMRAM] float 
 16932 ;;  f2              3    3[COMRAM] float 
 16933 ;; Auto vars:     Size  Location     Type
 16934 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 16935 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 16936 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 16937 ;; Return value:  Size  Location     Type
 16938 ;;                  4    0[COMRAM] unsigned long 
 16939 ;; Registers used:
 16940 ;;		wreg, status,2, status,0
 16941 ;; Tracked objects:
 16942 ;;		On entry : 0/0
 16943 ;;		On exit  : 0/0
 16944 ;;		Unchanged: 0/0
 16945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16946 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16947 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16948 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16949 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16950 ;;Total ram usage:       15 bytes
 16951 ;; Hardware stack levels used:    1
 16952 ;; This function calls:
 16953 ;;		Nothing
 16954 ;; This function is called by:
 16955 ;;		i2_printf
 16956 ;; This function uses a non-reentrant model
 16957 ;;
 16958                           
 16959                           	psect	text54
 16960  003E5C                     __ptext54:
 16961                           	opt stack 0
 16962  003E5C                     i2__tdiv_to_l_:
 16963                           	opt stack 22
 16964                           
 16965                           ;incstack = 0
 16966  003E5C  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 16967  003E60  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 16968  003E62  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 16969  003E64  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 16970  003E66  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 16971  003E68  E301               	bnc	u685_41
 16972  003E6A  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 16973  003E6C                     u685_41:
 16974  003E6C  5007               	movf	??i2__tdiv_to_l_,w,c
 16975  003E6E  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 16976  003E70  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 16977  003E72  A4D8               	btfss	status,2,c
 16978  003E74  D009               	goto	i2l6161
 16979  003E76  0E00               	movlw	0
 16980  003E78  6E01               	movwf	?i2__tdiv_to_l_,c
 16981  003E7A  0E00               	movlw	0
 16982  003E7C  6E02               	movwf	?i2__tdiv_to_l_+1,c
 16983  003E7E  0E00               	movlw	0
 16984  003E80  6E03               	movwf	?i2__tdiv_to_l_+2,c
 16985  003E82  0E00               	movlw	0
 16986  003E84  6E04               	movwf	?i2__tdiv_to_l_+3,c
 16987  003E86  0012               	return	
 16988  003E88                     i2l6161:
 16989  003E88  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 16990  003E8C  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 16991  003E8E  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 16992  003E90  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 16993  003E92  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 16994  003E94  E301               	bnc	u687_41
 16995  003E96  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 16996  003E98                     u687_41:
 16997  003E98  5007               	movf	??i2__tdiv_to_l_,w,c
 16998  003E9A  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 16999  003E9C  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 17000  003E9E  A4D8               	btfss	status,2,c
 17001  003EA0  D009               	goto	i2l6167
 17002  003EA2  0E00               	movlw	0
 17003  003EA4  6E01               	movwf	?i2__tdiv_to_l_,c
 17004  003EA6  0E00               	movlw	0
 17005  003EA8  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17006  003EAA  0E00               	movlw	0
 17007  003EAC  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17008  003EAE  0E00               	movlw	0
 17009  003EB0  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17010  003EB2  0012               	return	
 17011  003EB4                     i2l6167:
 17012  003EB4  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 17013  003EB6  0EFF               	movlw	255
 17014  003EB8  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 17015  003EBA  0EFF               	movlw	255
 17016  003EBC  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 17017  003EBE  0E00               	movlw	0
 17018  003EC0  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 17019  003EC2  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 17020  003EC4  0EFF               	movlw	255
 17021  003EC6  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 17022  003EC8  0EFF               	movlw	255
 17023  003ECA  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 17024  003ECC  0E00               	movlw	0
 17025  003ECE  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 17026  003ED0  0E00               	movlw	0
 17027  003ED2  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 17028  003ED4  0E00               	movlw	0
 17029  003ED6  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 17030  003ED8  0E00               	movlw	0
 17031  003EDA  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 17032  003EDC  0E00               	movlw	0
 17033  003EDE  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 17034  003EE0  0E7F               	movlw	127
 17035  003EE2  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 17036  003EE4  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 17037  003EE6  0F98               	addlw	152
 17038  003EE8  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 17039  003EEA  0E18               	movlw	24
 17040  003EEC  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 17041  003EEE                     i2l1121:
 17042  003EEE  90D8               	bcf	status,0,c
 17043  003EF0  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 17044  003EF2  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 17045  003EF4  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 17046  003EF6  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 17047  003EF8  5004               	movf	i2__tdiv_to_l_@f2,w,c
 17048  003EFA  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 17049  003EFC  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 17050  003EFE  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 17051  003F00  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 17052  003F02  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 17053  003F04  A0D8               	btfss	status,0,c
 17054  003F06  D007               	goto	i2l1122
 17055  003F08  5004               	movf	i2__tdiv_to_l_@f2,w,c
 17056  003F0A  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 17057  003F0C  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 17058  003F0E  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 17059  003F10  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 17060  003F12  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 17061  003F14  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 17062  003F16                     i2l1122:
 17063  003F16  90D8               	bcf	status,0,c
 17064  003F18  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 17065  003F1A  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 17066  003F1C  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 17067  003F1E  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 17068  003F20  D7E6               	goto	i2l1121
 17069  003F22  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 17070  003F24  D016               	goto	i2l6201
 17071  003F26  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 17072  003F28  0A80               	xorlw	128
 17073  003F2A  0F97               	addlw	151
 17074  003F2C  B0D8               	btfsc	status,0,c
 17075  003F2E  D009               	goto	i2l6197
 17076  003F30  0E00               	movlw	0
 17077  003F32  6E01               	movwf	?i2__tdiv_to_l_,c
 17078  003F34  0E00               	movlw	0
 17079  003F36  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17080  003F38  0E00               	movlw	0
 17081  003F3A  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17082  003F3C  0E00               	movlw	0
 17083  003F3E  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17084  003F40  0012               	return	
 17085  003F42                     i2l6197:
 17086  003F42  90D8               	bcf	status,0,c
 17087  003F44  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 17088  003F46  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 17089  003F48  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 17090  003F4A  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 17091  003F4C  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 17092  003F4E  D7F9               	goto	i2l6197
 17093  003F50  D015               	goto	i2l1128
 17094  003F52                     i2l6201:
 17095  003F52  0E17               	movlw	23
 17096  003F54  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 17097  003F56  D00F               	goto	i2l6209
 17098  003F58  0E00               	movlw	0
 17099  003F5A  6E01               	movwf	?i2__tdiv_to_l_,c
 17100  003F5C  0E00               	movlw	0
 17101  003F5E  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17102  003F60  0E00               	movlw	0
 17103  003F62  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17104  003F64  0E00               	movlw	0
 17105  003F66  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17106  003F68  0012               	return	
 17107  003F6A                     i2l6207:
 17108  003F6A  90D8               	bcf	status,0,c
 17109  003F6C  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 17110  003F6E  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 17111  003F70  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 17112  003F72  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 17113  003F74  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 17114  003F76                     i2l6209:
 17115  003F76  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 17116  003F78  A4D8               	btfss	status,2,c
 17117  003F7A  D7F7               	goto	i2l6207
 17118  003F7C                     i2l1128:
 17119  003F7C  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 17120  003F80  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 17121  003F84  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 17122  003F88  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 17123  003F8C  0012               	return		;funcret
 17124  003F8E                     __end_ofi2__tdiv_to_l_:
 17125                           	opt stack 0
 17126                           pclatu	equ	0xFFB
 17127                           pclath	equ	0xFFA
 17128                           tblptru	equ	0xFF8
 17129                           tblptrh	equ	0xFF7
 17130                           tblptrl	equ	0xFF6
 17131                           tablat	equ	0xFF5
 17132                           prodh	equ	0xFF4
 17133                           prodl	equ	0xFF3
 17134                           intcon	equ	0xFF2
 17135                           intcon3	equ	0xFF0
 17136                           postinc0	equ	0xFEE
 17137                           fsr0h	equ	0xFEA
 17138                           fsr0l	equ	0xFE9
 17139                           wreg	equ	0xFE8
 17140                           postdec1	equ	0xFE5
 17141                           fsr1h	equ	0xFE2
 17142                           fsr1l	equ	0xFE1
 17143                           indf2	equ	0xFDF
 17144                           postinc2	equ	0xFDE
 17145                           postdec2	equ	0xFDD
 17146                           fsr2h	equ	0xFDA
 17147                           fsr2l	equ	0xFD9
 17148                           status	equ	0xFD8
 17149                           
 17150 ;; *************** function i2__div_to_l_ *****************
 17151 ;; Defined at:
 17152 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 17153 ;; Parameters:    Size  Location     Type
 17154 ;;  f1              3    0[COMRAM] unsigned long 
 17155 ;;  f2              3    3[COMRAM] unsigned long 
 17156 ;; Auto vars:     Size  Location     Type
 17157 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 17158 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 17159 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 17160 ;; Return value:  Size  Location     Type
 17161 ;;                  4    0[COMRAM] unsigned long 
 17162 ;; Registers used:
 17163 ;;		wreg, status,2, status,0
 17164 ;; Tracked objects:
 17165 ;;		On entry : 0/0
 17166 ;;		On exit  : 0/0
 17167 ;;		Unchanged: 0/0
 17168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17169 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17170 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17172 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17173 ;;Total ram usage:       12 bytes
 17174 ;; Hardware stack levels used:    1
 17175 ;; This function calls:
 17176 ;;		Nothing
 17177 ;; This function is called by:
 17178 ;;		i2_printf
 17179 ;; This function uses a non-reentrant model
 17180 ;;
 17181                           
 17182                           	psect	text55
 17183  0040BE                     __ptext55:
 17184                           	opt stack 0
 17185  0040BE                     i2__div_to_l_:
 17186                           	opt stack 22
 17187                           
 17188                           ;incstack = 0
 17189  0040BE  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 17190  0040C0  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 17191  0040C2  6E0C               	movwf	i2__div_to_l_@exp1,c
 17192  0040C4  500C               	movf	i2__div_to_l_@exp1,w,c
 17193  0040C6  A4D8               	btfss	status,2,c
 17194  0040C8  D009               	goto	i2l6101
 17195  0040CA  0E00               	movlw	0
 17196  0040CC  6E01               	movwf	?i2__div_to_l_,c
 17197  0040CE  0E00               	movlw	0
 17198  0040D0  6E02               	movwf	?i2__div_to_l_+1,c
 17199  0040D2  0E00               	movlw	0
 17200  0040D4  6E03               	movwf	?i2__div_to_l_+2,c
 17201  0040D6  0E00               	movlw	0
 17202  0040D8  6E04               	movwf	?i2__div_to_l_+3,c
 17203  0040DA  0012               	return	
 17204  0040DC                     i2l6101:
 17205  0040DC  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 17206  0040DE  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 17207  0040E0  6E0B               	movwf	i2__div_to_l_@cntr,c
 17208  0040E2  500B               	movf	i2__div_to_l_@cntr,w,c
 17209  0040E4  A4D8               	btfss	status,2,c
 17210  0040E6  D009               	goto	i2l6107
 17211  0040E8  0E00               	movlw	0
 17212  0040EA  6E01               	movwf	?i2__div_to_l_,c
 17213  0040EC  0E00               	movlw	0
 17214  0040EE  6E02               	movwf	?i2__div_to_l_+1,c
 17215  0040F0  0E00               	movlw	0
 17216  0040F2  6E03               	movwf	?i2__div_to_l_+2,c
 17217  0040F4  0E00               	movlw	0
 17218  0040F6  6E04               	movwf	?i2__div_to_l_+3,c
 17219  0040F8  0012               	return	
 17220  0040FA                     i2l6107:
 17221  0040FA  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 17222  0040FC  0EFF               	movlw	255
 17223  0040FE  1601               	andwf	i2__div_to_l_@f1,f,c
 17224  004100  0EFF               	movlw	255
 17225  004102  1602               	andwf	i2__div_to_l_@f1+1,f,c
 17226  004104  0EFF               	movlw	255
 17227  004106  1603               	andwf	i2__div_to_l_@f1+2,f,c
 17228  004108  0E00               	movlw	0
 17229  00410A  1604               	andwf	i2__div_to_l_@f1+3,f,c
 17230  00410C  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 17231  00410E  0EFF               	movlw	255
 17232  004110  1604               	andwf	i2__div_to_l_@f2,f,c
 17233  004112  0EFF               	movlw	255
 17234  004114  1605               	andwf	i2__div_to_l_@f2+1,f,c
 17235  004116  0EFF               	movlw	255
 17236  004118  1606               	andwf	i2__div_to_l_@f2+2,f,c
 17237  00411A  0E00               	movlw	0
 17238  00411C  1607               	andwf	i2__div_to_l_@f2+3,f,c
 17239  00411E  0E00               	movlw	0
 17240  004120  6E07               	movwf	i2__div_to_l_@quot,c
 17241  004122  0E00               	movlw	0
 17242  004124  6E08               	movwf	i2__div_to_l_@quot+1,c
 17243  004126  0E00               	movlw	0
 17244  004128  6E09               	movwf	i2__div_to_l_@quot+2,c
 17245  00412A  0E00               	movlw	0
 17246  00412C  6E0A               	movwf	i2__div_to_l_@quot+3,c
 17247  00412E  0E7F               	movlw	127
 17248  004130  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 17249  004132  500B               	movf	i2__div_to_l_@cntr,w,c
 17250  004134  0FA0               	addlw	160
 17251  004136  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 17252  004138  0E20               	movlw	32
 17253  00413A  6E0B               	movwf	i2__div_to_l_@cntr,c
 17254  00413C                     i2l6121:
 17255  00413C  90D8               	bcf	status,0,c
 17256  00413E  3607               	rlcf	i2__div_to_l_@quot,f,c
 17257  004140  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 17258  004142  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 17259  004144  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 17260  004146  5004               	movf	i2__div_to_l_@f2,w,c
 17261  004148  5C01               	subwf	i2__div_to_l_@f1,w,c
 17262  00414A  5005               	movf	i2__div_to_l_@f2+1,w,c
 17263  00414C  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 17264  00414E  5006               	movf	i2__div_to_l_@f2+2,w,c
 17265  004150  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 17266  004152  5007               	movf	i2__div_to_l_@f2+3,w,c
 17267  004154  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 17268  004156  A0D8               	btfss	status,0,c
 17269  004158  D009               	goto	i2l6129
 17270  00415A  5004               	movf	i2__div_to_l_@f2,w,c
 17271  00415C  5E01               	subwf	i2__div_to_l_@f1,f,c
 17272  00415E  5005               	movf	i2__div_to_l_@f2+1,w,c
 17273  004160  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 17274  004162  5006               	movf	i2__div_to_l_@f2+2,w,c
 17275  004164  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 17276  004166  5007               	movf	i2__div_to_l_@f2+3,w,c
 17277  004168  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 17278  00416A  8007               	bsf	i2__div_to_l_@quot,0,c
 17279  00416C                     i2l6129:
 17280  00416C  90D8               	bcf	status,0,c
 17281  00416E  3601               	rlcf	i2__div_to_l_@f1,f,c
 17282  004170  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 17283  004172  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 17284  004174  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 17285  004176  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 17286  004178  D7E1               	goto	i2l6121
 17287  00417A  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 17288  00417C  D016               	goto	i2l6145
 17289  00417E  500C               	movf	i2__div_to_l_@exp1,w,c
 17290  004180  0A80               	xorlw	128
 17291  004182  0F9F               	addlw	159
 17292  004184  B0D8               	btfsc	status,0,c
 17293  004186  D009               	goto	i2l6141
 17294  004188  0E00               	movlw	0
 17295  00418A  6E01               	movwf	?i2__div_to_l_,c
 17296  00418C  0E00               	movlw	0
 17297  00418E  6E02               	movwf	?i2__div_to_l_+1,c
 17298  004190  0E00               	movlw	0
 17299  004192  6E03               	movwf	?i2__div_to_l_+2,c
 17300  004194  0E00               	movlw	0
 17301  004196  6E04               	movwf	?i2__div_to_l_+3,c
 17302  004198  0012               	return	
 17303  00419A                     i2l6141:
 17304  00419A  90D8               	bcf	status,0,c
 17305  00419C  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 17306  00419E  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 17307  0041A0  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 17308  0041A2  3207               	rrcf	i2__div_to_l_@quot,f,c
 17309  0041A4  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 17310  0041A6  D7F9               	goto	i2l6141
 17311  0041A8  D015               	goto	i2l1024
 17312  0041AA                     i2l6145:
 17313  0041AA  0E1F               	movlw	31
 17314  0041AC  640C               	cpfsgt	i2__div_to_l_@exp1,c
 17315  0041AE  D00F               	goto	i2l6153
 17316  0041B0  0E00               	movlw	0
 17317  0041B2  6E01               	movwf	?i2__div_to_l_,c
 17318  0041B4  0E00               	movlw	0
 17319  0041B6  6E02               	movwf	?i2__div_to_l_+1,c
 17320  0041B8  0E00               	movlw	0
 17321  0041BA  6E03               	movwf	?i2__div_to_l_+2,c
 17322  0041BC  0E00               	movlw	0
 17323  0041BE  6E04               	movwf	?i2__div_to_l_+3,c
 17324  0041C0  0012               	return	
 17325  0041C2                     i2l6151:
 17326  0041C2  90D8               	bcf	status,0,c
 17327  0041C4  3607               	rlcf	i2__div_to_l_@quot,f,c
 17328  0041C6  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 17329  0041C8  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 17330  0041CA  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 17331  0041CC  060C               	decf	i2__div_to_l_@exp1,f,c
 17332  0041CE                     i2l6153:
 17333  0041CE  500C               	movf	i2__div_to_l_@exp1,w,c
 17334  0041D0  A4D8               	btfss	status,2,c
 17335  0041D2  D7F7               	goto	i2l6151
 17336  0041D4                     i2l1024:
 17337  0041D4  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 17338  0041D8  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 17339  0041DC  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 17340  0041E0  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 17341  0041E4  0012               	return		;funcret
 17342  0041E6                     __end_ofi2__div_to_l_:
 17343                           	opt stack 0
 17344                           pclatu	equ	0xFFB
 17345                           pclath	equ	0xFFA
 17346                           tblptru	equ	0xFF8
 17347                           tblptrh	equ	0xFF7
 17348                           tblptrl	equ	0xFF6
 17349                           tablat	equ	0xFF5
 17350                           prodh	equ	0xFF4
 17351                           prodl	equ	0xFF3
 17352                           intcon	equ	0xFF2
 17353                           intcon3	equ	0xFF0
 17354                           postinc0	equ	0xFEE
 17355                           fsr0h	equ	0xFEA
 17356                           fsr0l	equ	0xFE9
 17357                           wreg	equ	0xFE8
 17358                           postdec1	equ	0xFE5
 17359                           fsr1h	equ	0xFE2
 17360                           fsr1l	equ	0xFE1
 17361                           indf2	equ	0xFDF
 17362                           postinc2	equ	0xFDE
 17363                           postdec2	equ	0xFDD
 17364                           fsr2h	equ	0xFDA
 17365                           fsr2l	equ	0xFD9
 17366                           status	equ	0xFD8
 17367                           
 17368 ;; *************** function i2___lltoft *****************
 17369 ;; Defined at:
 17370 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 17371 ;; Parameters:    Size  Location     Type
 17372 ;;  c               4    8[COMRAM] unsigned long 
 17373 ;; Auto vars:     Size  Location     Type
 17374 ;;  __lltoft        1   16[COMRAM] unsigned char 
 17375 ;; Return value:  Size  Location     Type
 17376 ;;                  3    8[COMRAM] float 
 17377 ;; Registers used:
 17378 ;;		wreg, status,2, status,0, cstack
 17379 ;; Tracked objects:
 17380 ;;		On entry : 0/0
 17381 ;;		On exit  : 0/0
 17382 ;;		Unchanged: 0/0
 17383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17384 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17386 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17387 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17388 ;;Total ram usage:        9 bytes
 17389 ;; Hardware stack levels used:    1
 17390 ;; Hardware stack levels required when called:    1
 17391 ;; This function calls:
 17392 ;;		i2___ftpack
 17393 ;; This function is called by:
 17394 ;;		i2_printf
 17395 ;; This function uses a non-reentrant model
 17396 ;;
 17397                           
 17398                           	psect	text56
 17399  0053AA                     __ptext56:
 17400                           	opt stack 0
 17401  0053AA                     i2___lltoft:
 17402                           	opt stack 21
 17403                           
 17404                           ;incstack = 0
 17405  0053AA  0E8E               	movlw	142
 17406  0053AC  6E11               	movwf	i2___lltoft@exp,c
 17407  0053AE  D006               	goto	i2l6341
 17408  0053B0                     i2l6339:
 17409  0053B0  90D8               	bcf	status,0,c
 17410  0053B2  320C               	rrcf	i2___lltoft@c+3,f,c
 17411  0053B4  320B               	rrcf	i2___lltoft@c+2,f,c
 17412  0053B6  320A               	rrcf	i2___lltoft@c+1,f,c
 17413  0053B8  3209               	rrcf	i2___lltoft@c,f,c
 17414  0053BA  2A11               	incf	i2___lltoft@exp,f,c
 17415  0053BC                     i2l6341:
 17416  0053BC  0E00               	movlw	0
 17417  0053BE  1409               	andwf	i2___lltoft@c,w,c
 17418  0053C0  6E0D               	movwf	??i2___lltoft& (0+255),c
 17419  0053C2  0E00               	movlw	0
 17420  0053C4  140A               	andwf	i2___lltoft@c+1,w,c
 17421  0053C6  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 17422  0053C8  0E00               	movlw	0
 17423  0053CA  140B               	andwf	i2___lltoft@c+2,w,c
 17424  0053CC  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 17425  0053CE  0EFF               	movlw	255
 17426  0053D0  140C               	andwf	i2___lltoft@c+3,w,c
 17427  0053D2  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 17428  0053D4  500D               	movf	??i2___lltoft,w,c
 17429  0053D6  100E               	iorwf	??i2___lltoft+1,w,c
 17430  0053D8  100F               	iorwf	??i2___lltoft+2,w,c
 17431  0053DA  1010               	iorwf	??i2___lltoft+3,w,c
 17432  0053DC  A4D8               	btfss	status,2,c
 17433  0053DE  D7E8               	goto	i2l6339
 17434  0053E0  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 17435  0053E4  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 17436  0053E8  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 17437  0053EC  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 17438  0053F0  0E00               	movlw	0
 17439  0053F2  6E05               	movwf	i2___ftpack@sign,c
 17440  0053F4  EC67  F026         	call	i2___ftpack	;wreg free
 17441  0053F8  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 17442  0053FC  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 17443  005400  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 17444  005404  0012               	return	
 17445  005406                     __end_ofi2___lltoft:
 17446                           	opt stack 0
 17447                           pclatu	equ	0xFFB
 17448                           pclath	equ	0xFFA
 17449                           tblptru	equ	0xFF8
 17450                           tblptrh	equ	0xFF7
 17451                           tblptrl	equ	0xFF6
 17452                           tablat	equ	0xFF5
 17453                           prodh	equ	0xFF4
 17454                           prodl	equ	0xFF3
 17455                           intcon	equ	0xFF2
 17456                           intcon3	equ	0xFF0
 17457                           postinc0	equ	0xFEE
 17458                           fsr0h	equ	0xFEA
 17459                           fsr0l	equ	0xFE9
 17460                           wreg	equ	0xFE8
 17461                           postdec1	equ	0xFE5
 17462                           fsr1h	equ	0xFE2
 17463                           fsr1l	equ	0xFE1
 17464                           indf2	equ	0xFDF
 17465                           postinc2	equ	0xFDE
 17466                           postdec2	equ	0xFDD
 17467                           fsr2h	equ	0xFDA
 17468                           fsr2l	equ	0xFD9
 17469                           status	equ	0xFD8
 17470                           
 17471 ;; *************** function i2___llmod *****************
 17472 ;; Defined at:
 17473 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 17474 ;; Parameters:    Size  Location     Type
 17475 ;;  dividend        4   13[COMRAM] unsigned long 
 17476 ;;  divisor         4   17[COMRAM] unsigned long 
 17477 ;; Auto vars:     Size  Location     Type
 17478 ;;  __llmod         1   21[COMRAM] unsigned char 
 17479 ;; Return value:  Size  Location     Type
 17480 ;;                  4   13[COMRAM] unsigned long 
 17481 ;; Registers used:
 17482 ;;		wreg, status,2, status,0
 17483 ;; Tracked objects:
 17484 ;;		On entry : 0/0
 17485 ;;		On exit  : 0/0
 17486 ;;		Unchanged: 0/0
 17487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17488 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17491 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17492 ;;Total ram usage:        9 bytes
 17493 ;; Hardware stack levels used:    1
 17494 ;; This function calls:
 17495 ;;		Nothing
 17496 ;; This function is called by:
 17497 ;;		i2_printf
 17498 ;; This function uses a non-reentrant model
 17499 ;;
 17500                           
 17501                           	psect	text57
 17502  0052DE                     __ptext57:
 17503                           	opt stack 0
 17504  0052DE                     i2___llmod:
 17505                           	opt stack 22
 17506                           
 17507                           ;incstack = 0
 17508  0052DE  5012               	movf	i2___llmod@divisor,w,c
 17509  0052E0  1013               	iorwf	i2___llmod@divisor+1,w,c
 17510  0052E2  1014               	iorwf	i2___llmod@divisor+2,w,c
 17511  0052E4  1015               	iorwf	i2___llmod@divisor+3,w,c
 17512  0052E6  B4D8               	btfsc	status,2,c
 17513  0052E8  D024               	goto	i2l1213
 17514  0052EA  0E01               	movlw	1
 17515  0052EC  6E16               	movwf	i2___llmod@counter,c
 17516  0052EE  D006               	goto	i2l6327
 17517  0052F0                     i2l6325:
 17518  0052F0  90D8               	bcf	status,0,c
 17519  0052F2  3612               	rlcf	i2___llmod@divisor,f,c
 17520  0052F4  3613               	rlcf	i2___llmod@divisor+1,f,c
 17521  0052F6  3614               	rlcf	i2___llmod@divisor+2,f,c
 17522  0052F8  3615               	rlcf	i2___llmod@divisor+3,f,c
 17523  0052FA  2A16               	incf	i2___llmod@counter,f,c
 17524  0052FC                     i2l6327:
 17525  0052FC  AE15               	btfss	i2___llmod@divisor+3,7,c
 17526  0052FE  D7F8               	goto	i2l6325
 17527  005300                     i2l6329:
 17528  005300  5012               	movf	i2___llmod@divisor,w,c
 17529  005302  5C0E               	subwf	i2___llmod@dividend,w,c
 17530  005304  5013               	movf	i2___llmod@divisor+1,w,c
 17531  005306  580F               	subwfb	i2___llmod@dividend+1,w,c
 17532  005308  5014               	movf	i2___llmod@divisor+2,w,c
 17533  00530A  5810               	subwfb	i2___llmod@dividend+2,w,c
 17534  00530C  5015               	movf	i2___llmod@divisor+3,w,c
 17535  00530E  5811               	subwfb	i2___llmod@dividend+3,w,c
 17536  005310  A0D8               	btfss	status,0,c
 17537  005312  D008               	goto	i2l6333
 17538  005314  5012               	movf	i2___llmod@divisor,w,c
 17539  005316  5E0E               	subwf	i2___llmod@dividend,f,c
 17540  005318  5013               	movf	i2___llmod@divisor+1,w,c
 17541  00531A  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 17542  00531C  5014               	movf	i2___llmod@divisor+2,w,c
 17543  00531E  5A10               	subwfb	i2___llmod@dividend+2,f,c
 17544  005320  5015               	movf	i2___llmod@divisor+3,w,c
 17545  005322  5A11               	subwfb	i2___llmod@dividend+3,f,c
 17546  005324                     i2l6333:
 17547  005324  90D8               	bcf	status,0,c
 17548  005326  3215               	rrcf	i2___llmod@divisor+3,f,c
 17549  005328  3214               	rrcf	i2___llmod@divisor+2,f,c
 17550  00532A  3213               	rrcf	i2___llmod@divisor+1,f,c
 17551  00532C  3212               	rrcf	i2___llmod@divisor,f,c
 17552  00532E  2E16               	decfsz	i2___llmod@counter,f,c
 17553  005330  D7E7               	goto	i2l6329
 17554  005332                     i2l1213:
 17555  005332  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 17556  005336  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 17557  00533A  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 17558  00533E  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 17559  005342  0012               	return		;funcret
 17560  005344                     __end_ofi2___llmod:
 17561                           	opt stack 0
 17562                           pclatu	equ	0xFFB
 17563                           pclath	equ	0xFFA
 17564                           tblptru	equ	0xFF8
 17565                           tblptrh	equ	0xFF7
 17566                           tblptrl	equ	0xFF6
 17567                           tablat	equ	0xFF5
 17568                           prodh	equ	0xFF4
 17569                           prodl	equ	0xFF3
 17570                           intcon	equ	0xFF2
 17571                           intcon3	equ	0xFF0
 17572                           postinc0	equ	0xFEE
 17573                           fsr0h	equ	0xFEA
 17574                           fsr0l	equ	0xFE9
 17575                           wreg	equ	0xFE8
 17576                           postdec1	equ	0xFE5
 17577                           fsr1h	equ	0xFE2
 17578                           fsr1l	equ	0xFE1
 17579                           indf2	equ	0xFDF
 17580                           postinc2	equ	0xFDE
 17581                           postdec2	equ	0xFDD
 17582                           fsr2h	equ	0xFDA
 17583                           fsr2l	equ	0xFD9
 17584                           status	equ	0xFD8
 17585                           
 17586 ;; *************** function i2___lldiv *****************
 17587 ;; Defined at:
 17588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 17589 ;; Parameters:    Size  Location     Type
 17590 ;;  dividend        4    0[COMRAM] unsigned long 
 17591 ;;  divisor         4    4[COMRAM] unsigned long 
 17592 ;; Auto vars:     Size  Location     Type
 17593 ;;  __lldiv         4    8[COMRAM] unsigned long 
 17594 ;;  __lldiv         1   12[COMRAM] unsigned char 
 17595 ;; Return value:  Size  Location     Type
 17596 ;;                  4    0[COMRAM] unsigned long 
 17597 ;; Registers used:
 17598 ;;		wreg, status,2, status,0
 17599 ;; Tracked objects:
 17600 ;;		On entry : 0/0
 17601 ;;		On exit  : 0/0
 17602 ;;		Unchanged: 0/0
 17603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17604 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17605 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17607 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17608 ;;Total ram usage:       13 bytes
 17609 ;; Hardware stack levels used:    1
 17610 ;; This function calls:
 17611 ;;		Nothing
 17612 ;; This function is called by:
 17613 ;;		i2_printf
 17614 ;; This function uses a non-reentrant model
 17615 ;;
 17616                           
 17617                           	psect	text58
 17618  0050F8                     __ptext58:
 17619                           	opt stack 0
 17620  0050F8                     i2___lldiv:
 17621                           	opt stack 22
 17622                           
 17623                           ;incstack = 0
 17624  0050F8  0E00               	movlw	0
 17625  0050FA  6E09               	movwf	i2___lldiv@quotient,c
 17626  0050FC  0E00               	movlw	0
 17627  0050FE  6E0A               	movwf	i2___lldiv@quotient+1,c
 17628  005100  0E00               	movlw	0
 17629  005102  6E0B               	movwf	i2___lldiv@quotient+2,c
 17630  005104  0E00               	movlw	0
 17631  005106  6E0C               	movwf	i2___lldiv@quotient+3,c
 17632  005108  5005               	movf	i2___lldiv@divisor,w,c
 17633  00510A  1006               	iorwf	i2___lldiv@divisor+1,w,c
 17634  00510C  1007               	iorwf	i2___lldiv@divisor+2,w,c
 17635  00510E  1008               	iorwf	i2___lldiv@divisor+3,w,c
 17636  005110  B4D8               	btfsc	status,2,c
 17637  005112  D02A               	goto	i2l1203
 17638  005114  0E01               	movlw	1
 17639  005116  6E0D               	movwf	i2___lldiv@counter,c
 17640  005118  D006               	goto	i2l6307
 17641  00511A                     i2l6305:
 17642  00511A  90D8               	bcf	status,0,c
 17643  00511C  3605               	rlcf	i2___lldiv@divisor,f,c
 17644  00511E  3606               	rlcf	i2___lldiv@divisor+1,f,c
 17645  005120  3607               	rlcf	i2___lldiv@divisor+2,f,c
 17646  005122  3608               	rlcf	i2___lldiv@divisor+3,f,c
 17647  005124  2A0D               	incf	i2___lldiv@counter,f,c
 17648  005126                     i2l6307:
 17649  005126  AE08               	btfss	i2___lldiv@divisor+3,7,c
 17650  005128  D7F8               	goto	i2l6305
 17651  00512A                     i2l6309:
 17652  00512A  90D8               	bcf	status,0,c
 17653  00512C  3609               	rlcf	i2___lldiv@quotient,f,c
 17654  00512E  360A               	rlcf	i2___lldiv@quotient+1,f,c
 17655  005130  360B               	rlcf	i2___lldiv@quotient+2,f,c
 17656  005132  360C               	rlcf	i2___lldiv@quotient+3,f,c
 17657  005134  5005               	movf	i2___lldiv@divisor,w,c
 17658  005136  5C01               	subwf	i2___lldiv@dividend,w,c
 17659  005138  5006               	movf	i2___lldiv@divisor+1,w,c
 17660  00513A  5802               	subwfb	i2___lldiv@dividend+1,w,c
 17661  00513C  5007               	movf	i2___lldiv@divisor+2,w,c
 17662  00513E  5803               	subwfb	i2___lldiv@dividend+2,w,c
 17663  005140  5008               	movf	i2___lldiv@divisor+3,w,c
 17664  005142  5804               	subwfb	i2___lldiv@dividend+3,w,c
 17665  005144  A0D8               	btfss	status,0,c
 17666  005146  D009               	goto	i2l6317
 17667  005148  5005               	movf	i2___lldiv@divisor,w,c
 17668  00514A  5E01               	subwf	i2___lldiv@dividend,f,c
 17669  00514C  5006               	movf	i2___lldiv@divisor+1,w,c
 17670  00514E  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 17671  005150  5007               	movf	i2___lldiv@divisor+2,w,c
 17672  005152  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 17673  005154  5008               	movf	i2___lldiv@divisor+3,w,c
 17674  005156  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 17675  005158  8009               	bsf	i2___lldiv@quotient,0,c
 17676  00515A                     i2l6317:
 17677  00515A  90D8               	bcf	status,0,c
 17678  00515C  3208               	rrcf	i2___lldiv@divisor+3,f,c
 17679  00515E  3207               	rrcf	i2___lldiv@divisor+2,f,c
 17680  005160  3206               	rrcf	i2___lldiv@divisor+1,f,c
 17681  005162  3205               	rrcf	i2___lldiv@divisor,f,c
 17682  005164  2E0D               	decfsz	i2___lldiv@counter,f,c
 17683  005166  D7E1               	goto	i2l6309
 17684  005168                     i2l1203:
 17685  005168  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 17686  00516C  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 17687  005170  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 17688  005174  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 17689  005178  0012               	return		;funcret
 17690  00517A                     __end_ofi2___lldiv:
 17691                           	opt stack 0
 17692                           pclatu	equ	0xFFB
 17693                           pclath	equ	0xFFA
 17694                           tblptru	equ	0xFF8
 17695                           tblptrh	equ	0xFF7
 17696                           tblptrl	equ	0xFF6
 17697                           tablat	equ	0xFF5
 17698                           prodh	equ	0xFF4
 17699                           prodl	equ	0xFF3
 17700                           intcon	equ	0xFF2
 17701                           intcon3	equ	0xFF0
 17702                           postinc0	equ	0xFEE
 17703                           fsr0h	equ	0xFEA
 17704                           fsr0l	equ	0xFE9
 17705                           wreg	equ	0xFE8
 17706                           postdec1	equ	0xFE5
 17707                           fsr1h	equ	0xFE2
 17708                           fsr1l	equ	0xFE1
 17709                           indf2	equ	0xFDF
 17710                           postinc2	equ	0xFDE
 17711                           postdec2	equ	0xFDD
 17712                           fsr2h	equ	0xFDA
 17713                           fsr2l	equ	0xFD9
 17714                           status	equ	0xFD8
 17715                           
 17716 ;; *************** function i2___fttol *****************
 17717 ;; Defined at:
 17718 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 17719 ;; Parameters:    Size  Location     Type
 17720 ;;  f1              3   42[COMRAM] float 
 17721 ;; Auto vars:     Size  Location     Type
 17722 ;;  __fttol         4   52[COMRAM] unsigned long 
 17723 ;;  __fttol         1   56[COMRAM] unsigned char 
 17724 ;;  __fttol         1   51[COMRAM] unsigned char 
 17725 ;; Return value:  Size  Location     Type
 17726 ;;                  4   42[COMRAM] long 
 17727 ;; Registers used:
 17728 ;;		wreg, status,2, status,0
 17729 ;; Tracked objects:
 17730 ;;		On entry : 0/0
 17731 ;;		On exit  : 0/0
 17732 ;;		Unchanged: 0/0
 17733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17734 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17735 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17736 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17737 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17738 ;;Total ram usage:       15 bytes
 17739 ;; Hardware stack levels used:    1
 17740 ;; This function calls:
 17741 ;;		Nothing
 17742 ;; This function is called by:
 17743 ;;		i2_printf
 17744 ;; This function uses a non-reentrant model
 17745 ;;
 17746                           
 17747                           	psect	text59
 17748  00470A                     __ptext59:
 17749                           	opt stack 0
 17750  00470A                     i2___fttol:
 17751                           	opt stack 22
 17752                           
 17753                           ;incstack = 0
 17754  00470A  C02D  F02F         	movff	i2___fttol@f1+2,??i2___fttol
 17755  00470E  6A30               	clrf	(??i2___fttol+1)& (0+255),c
 17756  004710  6A31               	clrf	(??i2___fttol+2)& (0+255),c
 17757  004712  342C               	rlcf	i2___fttol@f1+1,w,c
 17758  004714  362F               	rlcf	??i2___fttol& (0+255),f,c
 17759  004716  E301               	bnc	u699_41
 17760  004718  8030               	bsf	(??i2___fttol+1)& (0+255),0,c
 17761  00471A                     u699_41:
 17762  00471A  502F               	movf	??i2___fttol,w,c
 17763  00471C  6E39               	movwf	i2___fttol@exp1,c
 17764  00471E  5039               	movf	i2___fttol@exp1,w,c
 17765  004720  A4D8               	btfss	status,2,c
 17766  004722  D009               	goto	i2l6247
 17767  004724  0E00               	movlw	0
 17768  004726  6E2B               	movwf	?i2___fttol,c
 17769  004728  0E00               	movlw	0
 17770  00472A  6E2C               	movwf	?i2___fttol+1,c
 17771  00472C  0E00               	movlw	0
 17772  00472E  6E2D               	movwf	?i2___fttol+2,c
 17773  004730  0E00               	movlw	0
 17774  004732  6E2E               	movwf	?i2___fttol+3,c
 17775  004734  0012               	return	
 17776  004736                     i2l6247:
 17777  004736  0E17               	movlw	23
 17778  004738  6E2F               	movwf	??i2___fttol& (0+255),c
 17779  00473A  C02B  F030         	movff	i2___fttol@f1,??i2___fttol+1
 17780  00473E  C02C  F031         	movff	i2___fttol@f1+1,??i2___fttol+2
 17781  004742  C02D  F032         	movff	i2___fttol@f1+2,??i2___fttol+3
 17782  004746  282F               	incf	??i2___fttol,w,c
 17783  004748  6E33               	movwf	(??i2___fttol+4)& (0+255),c
 17784  00474A  D004               	goto	i2u701_40
 17785  00474C                     i2u701_45:
 17786  00474C  90D8               	bcf	status,0,c
 17787  00474E  3232               	rrcf	??i2___fttol+3,f,c
 17788  004750  3231               	rrcf	??i2___fttol+2,f,c
 17789  004752  3230               	rrcf	??i2___fttol+1,f,c
 17790  004754                     i2u701_40:
 17791  004754  2E33               	decfsz	(??i2___fttol+4)& (0+255),f,c
 17792  004756  D7FA               	goto	i2u701_45
 17793  004758  5030               	movf	??i2___fttol+1,w,c
 17794  00475A  6E34               	movwf	i2___fttol@sign1,c
 17795  00475C  8E2C               	bsf	i2___fttol@f1+1,7,c
 17796  00475E  0EFF               	movlw	255
 17797  004760  162B               	andwf	i2___fttol@f1,f,c
 17798  004762  0EFF               	movlw	255
 17799  004764  162C               	andwf	i2___fttol@f1+1,f,c
 17800  004766  0E00               	movlw	0
 17801  004768  162D               	andwf	i2___fttol@f1+2,f,c
 17802  00476A  502B               	movf	i2___fttol@f1,w,c
 17803  00476C  6E35               	movwf	i2___fttol@lval,c
 17804  00476E  502C               	movf	i2___fttol@f1+1,w,c
 17805  004770  6E36               	movwf	i2___fttol@lval+1,c
 17806  004772  502D               	movf	i2___fttol@f1+2,w,c
 17807  004774  6E37               	movwf	i2___fttol@lval+2,c
 17808  004776  6A38               	clrf	i2___fttol@lval+3,c
 17809  004778  0E8E               	movlw	142
 17810  00477A  5E39               	subwf	i2___fttol@exp1,f,c
 17811  00477C  AE39               	btfss	i2___fttol@exp1,7,c
 17812  00477E  D016               	goto	i2l6269
 17813  004780  5039               	movf	i2___fttol@exp1,w,c
 17814  004782  0A80               	xorlw	128
 17815  004784  0F8F               	addlw	143
 17816  004786  B0D8               	btfsc	status,0,c
 17817  004788  D009               	goto	i2l6265
 17818  00478A  0E00               	movlw	0
 17819  00478C  6E2B               	movwf	?i2___fttol,c
 17820  00478E  0E00               	movlw	0
 17821  004790  6E2C               	movwf	?i2___fttol+1,c
 17822  004792  0E00               	movlw	0
 17823  004794  6E2D               	movwf	?i2___fttol+2,c
 17824  004796  0E00               	movlw	0
 17825  004798  6E2E               	movwf	?i2___fttol+3,c
 17826  00479A  0012               	return	
 17827  00479C                     i2l6265:
 17828  00479C  90D8               	bcf	status,0,c
 17829  00479E  3238               	rrcf	i2___fttol@lval+3,f,c
 17830  0047A0  3237               	rrcf	i2___fttol@lval+2,f,c
 17831  0047A2  3236               	rrcf	i2___fttol@lval+1,f,c
 17832  0047A4  3235               	rrcf	i2___fttol@lval,f,c
 17833  0047A6  3E39               	incfsz	i2___fttol@exp1,f,c
 17834  0047A8  D7F9               	goto	i2l6265
 17835  0047AA  D015               	goto	i2l6279
 17836  0047AC                     i2l6269:
 17837  0047AC  0E17               	movlw	23
 17838  0047AE  6439               	cpfsgt	i2___fttol@exp1,c
 17839  0047B0  D00F               	goto	i2l6277
 17840  0047B2  0E00               	movlw	0
 17841  0047B4  6E2B               	movwf	?i2___fttol,c
 17842  0047B6  0E00               	movlw	0
 17843  0047B8  6E2C               	movwf	?i2___fttol+1,c
 17844  0047BA  0E00               	movlw	0
 17845  0047BC  6E2D               	movwf	?i2___fttol+2,c
 17846  0047BE  0E00               	movlw	0
 17847  0047C0  6E2E               	movwf	?i2___fttol+3,c
 17848  0047C2  0012               	return	
 17849  0047C4                     i2l6275:
 17850  0047C4  90D8               	bcf	status,0,c
 17851  0047C6  3635               	rlcf	i2___fttol@lval,f,c
 17852  0047C8  3636               	rlcf	i2___fttol@lval+1,f,c
 17853  0047CA  3637               	rlcf	i2___fttol@lval+2,f,c
 17854  0047CC  3638               	rlcf	i2___fttol@lval+3,f,c
 17855  0047CE  0639               	decf	i2___fttol@exp1,f,c
 17856  0047D0                     i2l6277:
 17857  0047D0  5039               	movf	i2___fttol@exp1,w,c
 17858  0047D2  A4D8               	btfss	status,2,c
 17859  0047D4  D7F7               	goto	i2l6275
 17860  0047D6                     i2l6279:
 17861  0047D6  5034               	movf	i2___fttol@sign1,w,c
 17862  0047D8  B4D8               	btfsc	status,2,c
 17863  0047DA  D008               	goto	i2l6283
 17864  0047DC  1E38               	comf	i2___fttol@lval+3,f,c
 17865  0047DE  1E37               	comf	i2___fttol@lval+2,f,c
 17866  0047E0  1E36               	comf	i2___fttol@lval+1,f,c
 17867  0047E2  6C35               	negf	i2___fttol@lval,c
 17868  0047E4  0E00               	movlw	0
 17869  0047E6  2236               	addwfc	i2___fttol@lval+1,f,c
 17870  0047E8  2237               	addwfc	i2___fttol@lval+2,f,c
 17871  0047EA  2238               	addwfc	i2___fttol@lval+3,f,c
 17872  0047EC                     i2l6283:
 17873  0047EC  C035  F02B         	movff	i2___fttol@lval,?i2___fttol
 17874  0047F0  C036  F02C         	movff	i2___fttol@lval+1,?i2___fttol+1
 17875  0047F4  C037  F02D         	movff	i2___fttol@lval+2,?i2___fttol+2
 17876  0047F8  C038  F02E         	movff	i2___fttol@lval+3,?i2___fttol+3
 17877  0047FC  0012               	return	
 17878  0047FE                     __end_ofi2___fttol:
 17879                           	opt stack 0
 17880                           pclatu	equ	0xFFB
 17881                           pclath	equ	0xFFA
 17882                           tblptru	equ	0xFF8
 17883                           tblptrh	equ	0xFF7
 17884                           tblptrl	equ	0xFF6
 17885                           tablat	equ	0xFF5
 17886                           prodh	equ	0xFF4
 17887                           prodl	equ	0xFF3
 17888                           intcon	equ	0xFF2
 17889                           intcon3	equ	0xFF0
 17890                           postinc0	equ	0xFEE
 17891                           fsr0h	equ	0xFEA
 17892                           fsr0l	equ	0xFE9
 17893                           wreg	equ	0xFE8
 17894                           postdec1	equ	0xFE5
 17895                           fsr1h	equ	0xFE2
 17896                           fsr1l	equ	0xFE1
 17897                           indf2	equ	0xFDF
 17898                           postinc2	equ	0xFDE
 17899                           postdec2	equ	0xFDD
 17900                           fsr2h	equ	0xFDA
 17901                           fsr2l	equ	0xFD9
 17902                           status	equ	0xFD8
 17903                           
 17904 ;; *************** function i2___ftsub *****************
 17905 ;; Defined at:
 17906 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 17907 ;; Parameters:    Size  Location     Type
 17908 ;;  f1              3   57[COMRAM] float 
 17909 ;;  f2              3   60[COMRAM] float 
 17910 ;; Auto vars:     Size  Location     Type
 17911 ;;		None
 17912 ;; Return value:  Size  Location     Type
 17913 ;;                  3   57[COMRAM] float 
 17914 ;; Registers used:
 17915 ;;		wreg, status,2, status,0, cstack
 17916 ;; Tracked objects:
 17917 ;;		On entry : 0/0
 17918 ;;		On exit  : 0/0
 17919 ;;		Unchanged: 0/0
 17920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17921 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17924 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17925 ;;Total ram usage:        6 bytes
 17926 ;; Hardware stack levels used:    1
 17927 ;; Hardware stack levels required when called:    2
 17928 ;; This function calls:
 17929 ;;		i2___ftadd
 17930 ;; This function is called by:
 17931 ;;		i2_printf
 17932 ;; This function uses a non-reentrant model
 17933 ;;
 17934                           
 17935                           	psect	text60
 17936  005652                     __ptext60:
 17937                           	opt stack 0
 17938  005652                     i2___ftsub:
 17939                           	opt stack 20
 17940                           
 17941                           ;incstack = 0
 17942  005652  503D               	movf	i2___ftsub@f2,w,c
 17943  005654  103E               	iorwf	i2___ftsub@f2+1,w,c
 17944  005656  103F               	iorwf	i2___ftsub@f2+2,w,c
 17945  005658  B4D8               	btfsc	status,2,c
 17946  00565A  D006               	goto	i2l6237
 17947  00565C  0E00               	movlw	0
 17948  00565E  1A3D               	xorwf	i2___ftsub@f2,f,c
 17949  005660  0E00               	movlw	0
 17950  005662  1A3E               	xorwf	i2___ftsub@f2+1,f,c
 17951  005664  0E80               	movlw	128
 17952  005666  1A3F               	xorwf	i2___ftsub@f2+2,f,c
 17953  005668                     i2l6237:
 17954  005668  C03A  F02E         	movff	i2___ftsub@f1,i2___ftadd@f1
 17955  00566C  C03B  F02F         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 17956  005670  C03C  F030         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 17957  005674  C03D  F031         	movff	i2___ftsub@f2,i2___ftadd@f2
 17958  005678  C03E  F032         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 17959  00567C  C03F  F033         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 17960  005680  EC7E  F019         	call	i2___ftadd	;wreg free
 17961  005684  C02E  F03A         	movff	?i2___ftadd,?i2___ftsub
 17962  005688  C02F  F03B         	movff	?i2___ftadd+1,?i2___ftsub+1
 17963  00568C  C030  F03C         	movff	?i2___ftadd+2,?i2___ftsub+2
 17964  005690  0012               	return	
 17965  005692                     __end_ofi2___ftsub:
 17966                           	opt stack 0
 17967                           pclatu	equ	0xFFB
 17968                           pclath	equ	0xFFA
 17969                           tblptru	equ	0xFF8
 17970                           tblptrh	equ	0xFF7
 17971                           tblptrl	equ	0xFF6
 17972                           tablat	equ	0xFF5
 17973                           prodh	equ	0xFF4
 17974                           prodl	equ	0xFF3
 17975                           intcon	equ	0xFF2
 17976                           intcon3	equ	0xFF0
 17977                           postinc0	equ	0xFEE
 17978                           fsr0h	equ	0xFEA
 17979                           fsr0l	equ	0xFE9
 17980                           wreg	equ	0xFE8
 17981                           postdec1	equ	0xFE5
 17982                           fsr1h	equ	0xFE2
 17983                           fsr1l	equ	0xFE1
 17984                           indf2	equ	0xFDF
 17985                           postinc2	equ	0xFDE
 17986                           postdec2	equ	0xFDD
 17987                           fsr2h	equ	0xFDA
 17988                           fsr2l	equ	0xFD9
 17989                           status	equ	0xFD8
 17990                           
 17991 ;; *************** function i2___ftadd *****************
 17992 ;; Defined at:
 17993 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 17994 ;; Parameters:    Size  Location     Type
 17995 ;;  f1              3   45[COMRAM] float 
 17996 ;;  f2              3   48[COMRAM] float 
 17997 ;; Auto vars:     Size  Location     Type
 17998 ;;  __ftadd         1   56[COMRAM] unsigned char 
 17999 ;;  __ftadd         1   55[COMRAM] unsigned char 
 18000 ;;  __ftadd         1   54[COMRAM] unsigned char 
 18001 ;; Return value:  Size  Location     Type
 18002 ;;                  3   45[COMRAM] float 
 18003 ;; Registers used:
 18004 ;;		wreg, status,2, status,0, cstack
 18005 ;; Tracked objects:
 18006 ;;		On entry : 0/0
 18007 ;;		On exit  : 0/0
 18008 ;;		Unchanged: 0/0
 18009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18010 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18011 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18012 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18013 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18014 ;;Total ram usage:       12 bytes
 18015 ;; Hardware stack levels used:    1
 18016 ;; Hardware stack levels required when called:    1
 18017 ;; This function calls:
 18018 ;;		i2___ftpack
 18019 ;; This function is called by:
 18020 ;;		i2_printf
 18021 ;;		i2___ftsub
 18022 ;; This function uses a non-reentrant model
 18023 ;;
 18024                           
 18025                           	psect	text61
 18026  0032FC                     __ptext61:
 18027                           	opt stack 0
 18028  0032FC                     i2___ftadd:
 18029                           	opt stack 20
 18030                           
 18031                           ;incstack = 0
 18032  0032FC  C030  F034         	movff	i2___ftadd@f1+2,??i2___ftadd
 18033  003300  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 18034  003302  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 18035  003304  342F               	rlcf	i2___ftadd@f1+1,w,c
 18036  003306  3634               	rlcf	??i2___ftadd& (0+255),f,c
 18037  003308  E301               	bnc	u552_41
 18038  00330A  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 18039  00330C                     u552_41:
 18040  00330C  5034               	movf	??i2___ftadd,w,c
 18041  00330E  6E39               	movwf	i2___ftadd@exp1,c
 18042  003310  C033  F034         	movff	i2___ftadd@f2+2,??i2___ftadd
 18043  003314  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 18044  003316  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 18045  003318  3432               	rlcf	i2___ftadd@f2+1,w,c
 18046  00331A  3634               	rlcf	??i2___ftadd& (0+255),f,c
 18047  00331C  E301               	bnc	u553_41
 18048  00331E  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 18049  003320                     u553_41:
 18050  003320  5034               	movf	??i2___ftadd,w,c
 18051  003322  6E38               	movwf	i2___ftadd@exp2,c
 18052  003324  5039               	movf	i2___ftadd@exp1,w,c
 18053  003326  B4D8               	btfsc	status,2,c
 18054  003328  D00B               	goto	i2l1079
 18055  00332A  5038               	movf	i2___ftadd@exp2,w,c
 18056  00332C  5C39               	subwf	i2___ftadd@exp1,w,c
 18057  00332E  B0D8               	btfsc	status,0,c
 18058  003330  D00E               	goto	i2l5355
 18059  003332  5039               	movf	i2___ftadd@exp1,w,c
 18060  003334  0800               	sublw	0
 18061  003336  2438               	addwf	i2___ftadd@exp2,w,c
 18062  003338  6E34               	movwf	??i2___ftadd& (0+255),c
 18063  00333A  0E18               	movlw	24
 18064  00333C  6434               	cpfsgt	??i2___ftadd,c
 18065  00333E  D007               	goto	i2l5355
 18066  003340                     i2l1079:
 18067  003340  C031  F02E         	movff	i2___ftadd@f2,?i2___ftadd
 18068  003344  C032  F02F         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 18069  003348  C033  F030         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 18070  00334C  0012               	return	
 18071  00334E                     i2l5355:
 18072  00334E  5038               	movf	i2___ftadd@exp2,w,c
 18073  003350  B4D8               	btfsc	status,2,c
 18074  003352  D00B               	goto	i2l1083
 18075  003354  5039               	movf	i2___ftadd@exp1,w,c
 18076  003356  5C38               	subwf	i2___ftadd@exp2,w,c
 18077  003358  B0D8               	btfsc	status,0,c
 18078  00335A  D00E               	goto	i2l5361
 18079  00335C  5038               	movf	i2___ftadd@exp2,w,c
 18080  00335E  0800               	sublw	0
 18081  003360  2439               	addwf	i2___ftadd@exp1,w,c
 18082  003362  6E34               	movwf	??i2___ftadd& (0+255),c
 18083  003364  0E18               	movlw	24
 18084  003366  6434               	cpfsgt	??i2___ftadd,c
 18085  003368  D007               	goto	i2l5361
 18086  00336A                     i2l1083:
 18087  00336A  C02E  F02E         	movff	i2___ftadd@f1,?i2___ftadd
 18088  00336E  C02F  F02F         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 18089  003372  C030  F030         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 18090  003376  0012               	return	
 18091  003378                     i2l5361:
 18092  003378  0E06               	movlw	6
 18093  00337A  6E37               	movwf	i2___ftadd@sign,c
 18094  00337C  BE30               	btfsc	i2___ftadd@f1+2,7,c
 18095  00337E  8E37               	bsf	i2___ftadd@sign,7,c
 18096  003380  BE33               	btfsc	i2___ftadd@f2+2,7,c
 18097  003382  8C37               	bsf	i2___ftadd@sign,6,c
 18098  003384  8E2F               	bsf	i2___ftadd@f1+1,7,c
 18099  003386  0EFF               	movlw	255
 18100  003388  162E               	andwf	i2___ftadd@f1,f,c
 18101  00338A  0EFF               	movlw	255
 18102  00338C  162F               	andwf	i2___ftadd@f1+1,f,c
 18103  00338E  0E00               	movlw	0
 18104  003390  1630               	andwf	i2___ftadd@f1+2,f,c
 18105  003392  8E32               	bsf	i2___ftadd@f2+1,7,c
 18106  003394  0EFF               	movlw	255
 18107  003396  1631               	andwf	i2___ftadd@f2,f,c
 18108  003398  0EFF               	movlw	255
 18109  00339A  1632               	andwf	i2___ftadd@f2+1,f,c
 18110  00339C  0E00               	movlw	0
 18111  00339E  1633               	andwf	i2___ftadd@f2+2,f,c
 18112  0033A0  5038               	movf	i2___ftadd@exp2,w,c
 18113  0033A2  5C39               	subwf	i2___ftadd@exp1,w,c
 18114  0033A4  B0D8               	btfsc	status,0,c
 18115  0033A6  D01B               	goto	i2l5387
 18116  0033A8                     i2l5377:
 18117  0033A8  90D8               	bcf	status,0,c
 18118  0033AA  3631               	rlcf	i2___ftadd@f2,f,c
 18119  0033AC  3632               	rlcf	i2___ftadd@f2+1,f,c
 18120  0033AE  3633               	rlcf	i2___ftadd@f2+2,f,c
 18121  0033B0  0638               	decf	i2___ftadd@exp2,f,c
 18122  0033B2  5039               	movf	i2___ftadd@exp1,w,c
 18123  0033B4  1838               	xorwf	i2___ftadd@exp2,w,c
 18124  0033B6  B4D8               	btfsc	status,2,c
 18125  0033B8  D00D               	goto	i2l5385
 18126  0033BA  0637               	decf	i2___ftadd@sign,f,c
 18127  0033BC  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 18128  0033C0  0E07               	movlw	7
 18129  0033C2  1634               	andwf	??i2___ftadd,f,c
 18130  0033C4  B4D8               	btfsc	status,2,c
 18131  0033C6  D006               	goto	i2l5385
 18132  0033C8  D7EF               	goto	i2l5377
 18133  0033CA                     i2l5383:
 18134  0033CA  90D8               	bcf	status,0,c
 18135  0033CC  3230               	rrcf	i2___ftadd@f1+2,f,c
 18136  0033CE  322F               	rrcf	i2___ftadd@f1+1,f,c
 18137  0033D0  322E               	rrcf	i2___ftadd@f1,f,c
 18138  0033D2  2A39               	incf	i2___ftadd@exp1,f,c
 18139  0033D4                     i2l5385:
 18140  0033D4  5038               	movf	i2___ftadd@exp2,w,c
 18141  0033D6  1839               	xorwf	i2___ftadd@exp1,w,c
 18142  0033D8  B4D8               	btfsc	status,2,c
 18143  0033DA  D01F               	goto	i2l1094
 18144  0033DC  D7F6               	goto	i2l5383
 18145  0033DE                     i2l5387:
 18146  0033DE  5039               	movf	i2___ftadd@exp1,w,c
 18147  0033E0  5C38               	subwf	i2___ftadd@exp2,w,c
 18148  0033E2  B0D8               	btfsc	status,0,c
 18149  0033E4  D01A               	goto	i2l1094
 18150  0033E6                     i2l5389:
 18151  0033E6  90D8               	bcf	status,0,c
 18152  0033E8  362E               	rlcf	i2___ftadd@f1,f,c
 18153  0033EA  362F               	rlcf	i2___ftadd@f1+1,f,c
 18154  0033EC  3630               	rlcf	i2___ftadd@f1+2,f,c
 18155  0033EE  0639               	decf	i2___ftadd@exp1,f,c
 18156  0033F0  5039               	movf	i2___ftadd@exp1,w,c
 18157  0033F2  1838               	xorwf	i2___ftadd@exp2,w,c
 18158  0033F4  B4D8               	btfsc	status,2,c
 18159  0033F6  D00D               	goto	i2l5397
 18160  0033F8  0637               	decf	i2___ftadd@sign,f,c
 18161  0033FA  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 18162  0033FE  0E07               	movlw	7
 18163  003400  1634               	andwf	??i2___ftadd,f,c
 18164  003402  B4D8               	btfsc	status,2,c
 18165  003404  D006               	goto	i2l5397
 18166  003406  D7EF               	goto	i2l5389
 18167  003408                     i2l5395:
 18168  003408  90D8               	bcf	status,0,c
 18169  00340A  3233               	rrcf	i2___ftadd@f2+2,f,c
 18170  00340C  3232               	rrcf	i2___ftadd@f2+1,f,c
 18171  00340E  3231               	rrcf	i2___ftadd@f2,f,c
 18172  003410  2A38               	incf	i2___ftadd@exp2,f,c
 18173  003412                     i2l5397:
 18174  003412  5038               	movf	i2___ftadd@exp2,w,c
 18175  003414  1839               	xorwf	i2___ftadd@exp1,w,c
 18176  003416  A4D8               	btfss	status,2,c
 18177  003418  D7F7               	goto	i2l5395
 18178  00341A                     i2l1094:
 18179  00341A  AE37               	btfss	i2___ftadd@sign,7,c
 18180  00341C  D00C               	goto	i2l1103
 18181  00341E  0EFF               	movlw	255
 18182  003420  1A2E               	xorwf	i2___ftadd@f1,f,c
 18183  003422  0EFF               	movlw	255
 18184  003424  1A2F               	xorwf	i2___ftadd@f1+1,f,c
 18185  003426  0EFF               	movlw	255
 18186  003428  1A30               	xorwf	i2___ftadd@f1+2,f,c
 18187  00342A  0E01               	movlw	1
 18188  00342C  262E               	addwf	i2___ftadd@f1,f,c
 18189  00342E  0E00               	movlw	0
 18190  003430  222F               	addwfc	i2___ftadd@f1+1,f,c
 18191  003432  0E00               	movlw	0
 18192  003434  2230               	addwfc	i2___ftadd@f1+2,f,c
 18193  003436                     i2l1103:
 18194  003436  AC37               	btfss	i2___ftadd@sign,6,c
 18195  003438  D00C               	goto	i2l5403
 18196  00343A  0EFF               	movlw	255
 18197  00343C  1A31               	xorwf	i2___ftadd@f2,f,c
 18198  00343E  0EFF               	movlw	255
 18199  003440  1A32               	xorwf	i2___ftadd@f2+1,f,c
 18200  003442  0EFF               	movlw	255
 18201  003444  1A33               	xorwf	i2___ftadd@f2+2,f,c
 18202  003446  0E01               	movlw	1
 18203  003448  2631               	addwf	i2___ftadd@f2,f,c
 18204  00344A  0E00               	movlw	0
 18205  00344C  2232               	addwfc	i2___ftadd@f2+1,f,c
 18206  00344E  0E00               	movlw	0
 18207  003450  2233               	addwfc	i2___ftadd@f2+2,f,c
 18208  003452                     i2l5403:
 18209  003452  0E00               	movlw	0
 18210  003454  6E37               	movwf	i2___ftadd@sign,c
 18211  003456  502E               	movf	i2___ftadd@f1,w,c
 18212  003458  2631               	addwf	i2___ftadd@f2,f,c
 18213  00345A  502F               	movf	i2___ftadd@f1+1,w,c
 18214  00345C  2232               	addwfc	i2___ftadd@f2+1,f,c
 18215  00345E  5030               	movf	i2___ftadd@f1+2,w,c
 18216  003460  2233               	addwfc	i2___ftadd@f2+2,f,c
 18217  003462  AE33               	btfss	i2___ftadd@f2+2,7,c
 18218  003464  D00E               	goto	i2l5413
 18219  003466  0EFF               	movlw	255
 18220  003468  1A31               	xorwf	i2___ftadd@f2,f,c
 18221  00346A  0EFF               	movlw	255
 18222  00346C  1A32               	xorwf	i2___ftadd@f2+1,f,c
 18223  00346E  0EFF               	movlw	255
 18224  003470  1A33               	xorwf	i2___ftadd@f2+2,f,c
 18225  003472  0E01               	movlw	1
 18226  003474  2631               	addwf	i2___ftadd@f2,f,c
 18227  003476  0E00               	movlw	0
 18228  003478  2232               	addwfc	i2___ftadd@f2+1,f,c
 18229  00347A  0E00               	movlw	0
 18230  00347C  2233               	addwfc	i2___ftadd@f2+2,f,c
 18231  00347E  0E01               	movlw	1
 18232  003480  6E37               	movwf	i2___ftadd@sign,c
 18233  003482                     i2l5413:
 18234  003482  C031  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 18235  003486  C032  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 18236  00348A  C033  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 18237  00348E  C039  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 18238  003492  C037  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 18239  003496  EC67  F026         	call	i2___ftpack	;wreg free
 18240  00349A  C001  F02E         	movff	?i2___ftpack,?i2___ftadd
 18241  00349E  C002  F02F         	movff	?i2___ftpack+1,?i2___ftadd+1
 18242  0034A2  C003  F030         	movff	?i2___ftpack+2,?i2___ftadd+2
 18243  0034A6  0012               	return	
 18244  0034A8                     __end_ofi2___ftadd:
 18245                           	opt stack 0
 18246                           pclatu	equ	0xFFB
 18247                           pclath	equ	0xFFA
 18248                           tblptru	equ	0xFF8
 18249                           tblptrh	equ	0xFF7
 18250                           tblptrl	equ	0xFF6
 18251                           tablat	equ	0xFF5
 18252                           prodh	equ	0xFF4
 18253                           prodl	equ	0xFF3
 18254                           intcon	equ	0xFF2
 18255                           intcon3	equ	0xFF0
 18256                           postinc0	equ	0xFEE
 18257                           fsr0h	equ	0xFEA
 18258                           fsr0l	equ	0xFE9
 18259                           wreg	equ	0xFE8
 18260                           postdec1	equ	0xFE5
 18261                           fsr1h	equ	0xFE2
 18262                           fsr1l	equ	0xFE1
 18263                           indf2	equ	0xFDF
 18264                           postinc2	equ	0xFDE
 18265                           postdec2	equ	0xFDD
 18266                           fsr2h	equ	0xFDA
 18267                           fsr2l	equ	0xFD9
 18268                           status	equ	0xFD8
 18269                           
 18270 ;; *************** function i2___ftpack *****************
 18271 ;; Defined at:
 18272 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 18273 ;; Parameters:    Size  Location     Type
 18274 ;;  arg             3    0[COMRAM] unsigned um
 18275 ;;  exp             1    3[COMRAM] unsigned char 
 18276 ;;  sign            1    4[COMRAM] unsigned char 
 18277 ;; Auto vars:     Size  Location     Type
 18278 ;;		None
 18279 ;; Return value:  Size  Location     Type
 18280 ;;                  3    0[COMRAM] float 
 18281 ;; Registers used:
 18282 ;;		wreg, status,2, status,0
 18283 ;; Tracked objects:
 18284 ;;		On entry : 0/0
 18285 ;;		On exit  : 0/0
 18286 ;;		Unchanged: 0/0
 18287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18288 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18290 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18291 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18292 ;;Total ram usage:        8 bytes
 18293 ;; Hardware stack levels used:    1
 18294 ;; This function calls:
 18295 ;;		Nothing
 18296 ;; This function is called by:
 18297 ;;		i2___ftadd
 18298 ;;		i2___ftmul
 18299 ;;		i2___lltoft
 18300 ;; This function uses a non-reentrant model
 18301 ;;
 18302                           
 18303                           	psect	text62
 18304  004CCE                     __ptext62:
 18305                           	opt stack 0
 18306  004CCE                     i2___ftpack:
 18307                           	opt stack 20
 18308                           
 18309                           ;incstack = 0
 18310  004CCE  5004               	movf	i2___ftpack@exp,w,c
 18311  004CD0  B4D8               	btfsc	status,2,c
 18312  004CD2  D005               	goto	i2l4945
 18313  004CD4  5001               	movf	i2___ftpack@arg,w,c
 18314  004CD6  1002               	iorwf	i2___ftpack@arg+1,w,c
 18315  004CD8  1003               	iorwf	i2___ftpack@arg+2,w,c
 18316  004CDA  A4D8               	btfss	status,2,c
 18317  004CDC  D00C               	goto	i2l4951
 18318  004CDE                     i2l4945:
 18319  004CDE  0E00               	movlw	0
 18320  004CE0  6E01               	movwf	?i2___ftpack,c
 18321  004CE2  0E00               	movlw	0
 18322  004CE4  6E02               	movwf	?i2___ftpack+1,c
 18323  004CE6  0E00               	movlw	0
 18324  004CE8  6E03               	movwf	?i2___ftpack+2,c
 18325  004CEA  0012               	return	
 18326  004CEC                     i2l4949:
 18327  004CEC  2A04               	incf	i2___ftpack@exp,f,c
 18328  004CEE  90D8               	bcf	status,0,c
 18329  004CF0  3203               	rrcf	i2___ftpack@arg+2,f,c
 18330  004CF2  3202               	rrcf	i2___ftpack@arg+1,f,c
 18331  004CF4  3201               	rrcf	i2___ftpack@arg,f,c
 18332  004CF6                     i2l4951:
 18333  004CF6  0E00               	movlw	0
 18334  004CF8  1401               	andwf	i2___ftpack@arg,w,c
 18335  004CFA  6E06               	movwf	??i2___ftpack& (0+255),c
 18336  004CFC  0E00               	movlw	0
 18337  004CFE  1402               	andwf	i2___ftpack@arg+1,w,c
 18338  004D00  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 18339  004D02  0EFE               	movlw	254
 18340  004D04  1403               	andwf	i2___ftpack@arg+2,w,c
 18341  004D06  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 18342  004D08  5006               	movf	??i2___ftpack,w,c
 18343  004D0A  1007               	iorwf	??i2___ftpack+1,w,c
 18344  004D0C  1008               	iorwf	??i2___ftpack+2,w,c
 18345  004D0E  B4D8               	btfsc	status,2,c
 18346  004D10  D00C               	goto	i2l4957
 18347  004D12  D7EC               	goto	i2l4949
 18348  004D14                     i2l4953:
 18349  004D14  2A04               	incf	i2___ftpack@exp,f,c
 18350  004D16  0E01               	movlw	1
 18351  004D18  2601               	addwf	i2___ftpack@arg,f,c
 18352  004D1A  0E00               	movlw	0
 18353  004D1C  2202               	addwfc	i2___ftpack@arg+1,f,c
 18354  004D1E  0E00               	movlw	0
 18355  004D20  2203               	addwfc	i2___ftpack@arg+2,f,c
 18356  004D22  90D8               	bcf	status,0,c
 18357  004D24  3203               	rrcf	i2___ftpack@arg+2,f,c
 18358  004D26  3202               	rrcf	i2___ftpack@arg+1,f,c
 18359  004D28  3201               	rrcf	i2___ftpack@arg,f,c
 18360  004D2A                     i2l4957:
 18361  004D2A  0E00               	movlw	0
 18362  004D2C  1401               	andwf	i2___ftpack@arg,w,c
 18363  004D2E  6E06               	movwf	??i2___ftpack& (0+255),c
 18364  004D30  0E00               	movlw	0
 18365  004D32  1402               	andwf	i2___ftpack@arg+1,w,c
 18366  004D34  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 18367  004D36  0EFF               	movlw	255
 18368  004D38  1403               	andwf	i2___ftpack@arg+2,w,c
 18369  004D3A  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 18370  004D3C  5006               	movf	??i2___ftpack,w,c
 18371  004D3E  1007               	iorwf	??i2___ftpack+1,w,c
 18372  004D40  1008               	iorwf	??i2___ftpack+2,w,c
 18373  004D42  B4D8               	btfsc	status,2,c
 18374  004D44  D006               	goto	i2l4961
 18375  004D46  D7E6               	goto	i2l4953
 18376  004D48                     i2l4959:
 18377  004D48  0604               	decf	i2___ftpack@exp,f,c
 18378  004D4A  90D8               	bcf	status,0,c
 18379  004D4C  3601               	rlcf	i2___ftpack@arg,f,c
 18380  004D4E  3602               	rlcf	i2___ftpack@arg+1,f,c
 18381  004D50  3603               	rlcf	i2___ftpack@arg+2,f,c
 18382  004D52                     i2l4961:
 18383  004D52  BE02               	btfsc	i2___ftpack@arg+1,7,c
 18384  004D54  D003               	goto	i2l1056
 18385  004D56  0E02               	movlw	2
 18386  004D58  6004               	cpfslt	i2___ftpack@exp,c
 18387  004D5A  D7F6               	goto	i2l4959
 18388  004D5C                     i2l1056:
 18389  004D5C  A004               	btfss	i2___ftpack@exp,0,c
 18390  004D5E  9E02               	bcf	i2___ftpack@arg+1,7,c
 18391  004D60  90D8               	bcf	status,0,c
 18392  004D62  3204               	rrcf	i2___ftpack@exp,f,c
 18393  004D64  5004               	movf	i2___ftpack@exp,w,c
 18394  004D66  1203               	iorwf	i2___ftpack@arg+2,f,c
 18395  004D68  5005               	movf	i2___ftpack@sign,w,c
 18396  004D6A  A4D8               	btfss	status,2,c
 18397  004D6C  8E03               	bsf	i2___ftpack@arg+2,7,c
 18398  004D6E  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 18399  004D72  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 18400  004D76  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 18401  004D7A  0012               	return	
 18402  004D7C                     __end_ofi2___ftpack:
 18403                           	opt stack 0
 18404                           pclatu	equ	0xFFB
 18405                           pclath	equ	0xFFA
 18406                           tblptru	equ	0xFF8
 18407                           tblptrh	equ	0xFF7
 18408                           tblptrl	equ	0xFF6
 18409                           tablat	equ	0xFF5
 18410                           prodh	equ	0xFF4
 18411                           prodl	equ	0xFF3
 18412                           intcon	equ	0xFF2
 18413                           intcon3	equ	0xFF0
 18414                           postinc0	equ	0xFEE
 18415                           fsr0h	equ	0xFEA
 18416                           fsr0l	equ	0xFE9
 18417                           wreg	equ	0xFE8
 18418                           postdec1	equ	0xFE5
 18419                           fsr1h	equ	0xFE2
 18420                           fsr1l	equ	0xFE1
 18421                           indf2	equ	0xFDF
 18422                           postinc2	equ	0xFDE
 18423                           postdec2	equ	0xFDD
 18424                           fsr2h	equ	0xFDA
 18425                           fsr2l	equ	0xFD9
 18426                           status	equ	0xFD8
 18427                           
 18428 ;; *************** function i2___ftneg *****************
 18429 ;; Defined at:
 18430 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 18431 ;; Parameters:    Size  Location     Type
 18432 ;;  f1              3    0[COMRAM] float 
 18433 ;; Auto vars:     Size  Location     Type
 18434 ;;		None
 18435 ;; Return value:  Size  Location     Type
 18436 ;;                  3    0[COMRAM] float 
 18437 ;; Registers used:
 18438 ;;		wreg, status,2, status,0
 18439 ;; Tracked objects:
 18440 ;;		On entry : 0/0
 18441 ;;		On exit  : 0/0
 18442 ;;		Unchanged: 0/0
 18443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18444 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18447 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18448 ;;Total ram usage:        3 bytes
 18449 ;; Hardware stack levels used:    1
 18450 ;; This function calls:
 18451 ;;		Nothing
 18452 ;; This function is called by:
 18453 ;;		i2_printf
 18454 ;; This function uses a non-reentrant model
 18455 ;;
 18456                           
 18457                           	psect	text63
 18458  005840                     __ptext63:
 18459                           	opt stack 0
 18460  005840                     i2___ftneg:
 18461                           	opt stack 22
 18462                           
 18463                           ;incstack = 0
 18464  005840  5001               	movf	i2___ftneg@f1,w,c
 18465  005842  1002               	iorwf	i2___ftneg@f1+1,w,c
 18466  005844  1003               	iorwf	i2___ftneg@f1+2,w,c
 18467  005846  B4D8               	btfsc	status,2,c
 18468  005848  D006               	goto	i2l1153
 18469  00584A  0E00               	movlw	0
 18470  00584C  1A01               	xorwf	i2___ftneg@f1,f,c
 18471  00584E  0E00               	movlw	0
 18472  005850  1A02               	xorwf	i2___ftneg@f1+1,f,c
 18473  005852  0E80               	movlw	128
 18474  005854  1A03               	xorwf	i2___ftneg@f1+2,f,c
 18475  005856                     i2l1153:
 18476  005856  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 18477  00585A  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 18478  00585E  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 18479  005862  0012               	return		;funcret
 18480  005864                     __end_ofi2___ftneg:
 18481                           	opt stack 0
 18482                           pclatu	equ	0xFFB
 18483                           pclath	equ	0xFFA
 18484                           tblptru	equ	0xFF8
 18485                           tblptrh	equ	0xFF7
 18486                           tblptrl	equ	0xFF6
 18487                           tablat	equ	0xFF5
 18488                           prodh	equ	0xFF4
 18489                           prodl	equ	0xFF3
 18490                           intcon	equ	0xFF2
 18491                           intcon3	equ	0xFF0
 18492                           postinc0	equ	0xFEE
 18493                           fsr0h	equ	0xFEA
 18494                           fsr0l	equ	0xFE9
 18495                           wreg	equ	0xFE8
 18496                           postdec1	equ	0xFE5
 18497                           fsr1h	equ	0xFE2
 18498                           fsr1l	equ	0xFE1
 18499                           indf2	equ	0xFDF
 18500                           postinc2	equ	0xFDE
 18501                           postdec2	equ	0xFDD
 18502                           fsr2h	equ	0xFDA
 18503                           fsr2l	equ	0xFD9
 18504                           status	equ	0xFD8
 18505                           
 18506 ;; *************** function i2___ftge *****************
 18507 ;; Defined at:
 18508 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 18509 ;; Parameters:    Size  Location     Type
 18510 ;;  ff1             3    0[COMRAM] float 
 18511 ;;  ff2             3    3[COMRAM] float 
 18512 ;; Auto vars:     Size  Location     Type
 18513 ;;		None
 18514 ;; Return value:  Size  Location     Type
 18515 ;;		None               void
 18516 ;; Registers used:
 18517 ;;		wreg, status,2, status,0
 18518 ;; Tracked objects:
 18519 ;;		On entry : 0/0
 18520 ;;		On exit  : 0/0
 18521 ;;		Unchanged: 0/0
 18522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18523 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18525 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18526 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18527 ;;Total ram usage:        9 bytes
 18528 ;; Hardware stack levels used:    1
 18529 ;; This function calls:
 18530 ;;		Nothing
 18531 ;; This function is called by:
 18532 ;;		i2_printf
 18533 ;; This function uses a non-reentrant model
 18534 ;;
 18535                           
 18536                           	psect	text64
 18537  004F56                     __ptext64:
 18538                           	opt stack 0
 18539  004F56                     i2___ftge:
 18540                           	opt stack 22
 18541                           
 18542                           ;incstack = 0
 18543  004F56  AE03               	btfss	i2___ftge@ff1+2,7,c
 18544  004F58  D016               	goto	i2l6215
 18545  004F5A  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 18546  004F5E  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 18547  004F62  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 18548  004F66  1E07               	comf	??i2___ftge,f,c
 18549  004F68  1E08               	comf	??i2___ftge+1,f,c
 18550  004F6A  1E09               	comf	??i2___ftge+2,f,c
 18551  004F6C  2A07               	incf	??i2___ftge,f,c
 18552  004F6E  0E00               	movlw	0
 18553  004F70  2208               	addwfc	??i2___ftge+1,f,c
 18554  004F72  2209               	addwfc	??i2___ftge+2,f,c
 18555  004F74  0E00               	movlw	0
 18556  004F76  2407               	addwf	??i2___ftge,w,c
 18557  004F78  6E01               	movwf	i2___ftge@ff1,c
 18558  004F7A  0E00               	movlw	0
 18559  004F7C  2008               	addwfc	??i2___ftge+1,w,c
 18560  004F7E  6E02               	movwf	i2___ftge@ff1+1,c
 18561  004F80  0E80               	movlw	128
 18562  004F82  2009               	addwfc	??i2___ftge+2,w,c
 18563  004F84  6E03               	movwf	i2___ftge@ff1+2,c
 18564  004F86                     i2l6215:
 18565  004F86  AE06               	btfss	i2___ftge@ff2+2,7,c
 18566  004F88  D016               	goto	i2l6219
 18567  004F8A  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 18568  004F8E  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 18569  004F92  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 18570  004F96  1E07               	comf	??i2___ftge,f,c
 18571  004F98  1E08               	comf	??i2___ftge+1,f,c
 18572  004F9A  1E09               	comf	??i2___ftge+2,f,c
 18573  004F9C  2A07               	incf	??i2___ftge,f,c
 18574  004F9E  0E00               	movlw	0
 18575  004FA0  2208               	addwfc	??i2___ftge+1,f,c
 18576  004FA2  2209               	addwfc	??i2___ftge+2,f,c
 18577  004FA4  0E00               	movlw	0
 18578  004FA6  2407               	addwf	??i2___ftge,w,c
 18579  004FA8  6E04               	movwf	i2___ftge@ff2,c
 18580  004FAA  0E00               	movlw	0
 18581  004FAC  2008               	addwfc	??i2___ftge+1,w,c
 18582  004FAE  6E05               	movwf	i2___ftge@ff2+1,c
 18583  004FB0  0E80               	movlw	128
 18584  004FB2  2009               	addwfc	??i2___ftge+2,w,c
 18585  004FB4  6E06               	movwf	i2___ftge@ff2+2,c
 18586  004FB6                     i2l6219:
 18587  004FB6  0E00               	movlw	0
 18588  004FB8  1A01               	xorwf	i2___ftge@ff1,f,c
 18589  004FBA  0E00               	movlw	0
 18590  004FBC  1A02               	xorwf	i2___ftge@ff1+1,f,c
 18591  004FBE  0E80               	movlw	128
 18592  004FC0  1A03               	xorwf	i2___ftge@ff1+2,f,c
 18593  004FC2  0E00               	movlw	0
 18594  004FC4  1A04               	xorwf	i2___ftge@ff2,f,c
 18595  004FC6  0E00               	movlw	0
 18596  004FC8  1A05               	xorwf	i2___ftge@ff2+1,f,c
 18597  004FCA  0E80               	movlw	128
 18598  004FCC  1A06               	xorwf	i2___ftge@ff2+2,f,c
 18599  004FCE  5004               	movf	i2___ftge@ff2,w,c
 18600  004FD0  5C01               	subwf	i2___ftge@ff1,w,c
 18601  004FD2  5005               	movf	i2___ftge@ff2+1,w,c
 18602  004FD4  5802               	subwfb	i2___ftge@ff1+1,w,c
 18603  004FD6  5006               	movf	i2___ftge@ff2+2,w,c
 18604  004FD8  5803               	subwfb	i2___ftge@ff1+2,w,c
 18605  004FDA  B0D8               	btfsc	status,0,c
 18606  004FDC  D002               	goto	i2l6225
 18607  004FDE  90D8               	bcf	status,0,c
 18608  004FE0  0012               	return	
 18609  004FE2                     i2l6225:
 18610  004FE2  80D8               	bsf	status,0,c
 18611  004FE4  0012               	return	
 18612  004FE6                     __end_ofi2___ftge:
 18613                           	opt stack 0
 18614                           pclatu	equ	0xFFB
 18615                           pclath	equ	0xFFA
 18616                           tblptru	equ	0xFF8
 18617                           tblptrh	equ	0xFF7
 18618                           tblptrl	equ	0xFF6
 18619                           tablat	equ	0xFF5
 18620                           prodh	equ	0xFF4
 18621                           prodl	equ	0xFF3
 18622                           intcon	equ	0xFF2
 18623                           intcon3	equ	0xFF0
 18624                           postinc0	equ	0xFEE
 18625                           fsr0h	equ	0xFEA
 18626                           fsr0l	equ	0xFE9
 18627                           wreg	equ	0xFE8
 18628                           postdec1	equ	0xFE5
 18629                           fsr1h	equ	0xFE2
 18630                           fsr1l	equ	0xFE1
 18631                           indf2	equ	0xFDF
 18632                           postinc2	equ	0xFDE
 18633                           postdec2	equ	0xFDD
 18634                           fsr2h	equ	0xFDA
 18635                           fsr2l	equ	0xFD9
 18636                           status	equ	0xFD8
 18637                           
 18638 ;; *************** function i2_lcdClear *****************
 18639 ;; Defined at:
 18640 ;;		line 74 in file "lcd.c"
 18641 ;; Parameters:    Size  Location     Type
 18642 ;;		None
 18643 ;; Auto vars:     Size  Location     Type
 18644 ;;		None
 18645 ;; Return value:  Size  Location     Type
 18646 ;;                  1    wreg      void 
 18647 ;; Registers used:
 18648 ;;		wreg, status,2, status,0, cstack
 18649 ;; Tracked objects:
 18650 ;;		On entry : 0/0
 18651 ;;		On exit  : 0/0
 18652 ;;		Unchanged: 0/0
 18653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18658 ;;Total ram usage:        0 bytes
 18659 ;; Hardware stack levels used:    1
 18660 ;; Hardware stack levels required when called:    2
 18661 ;; This function calls:
 18662 ;;		i2_lcdInst
 18663 ;; This function is called by:
 18664 ;;		_service
 18665 ;; This function uses a non-reentrant model
 18666 ;;
 18667                           
 18668                           	psect	text65
 18669  0058FC                     __ptext65:
 18670                           	opt stack 0
 18671  0058FC                     i2_lcdClear:
 18672                           	opt stack 21
 18673                           
 18674                           ;lcd.c: 75: lcdInst(0b00000001);
 18675                           
 18676                           ;incstack = 0
 18677  0058FC  0E01               	movlw	1
 18678  0058FE  EC43  F02C         	call	i2_lcdInst
 18679  005902  0012               	return		;funcret
 18680  005904                     __end_ofi2_lcdClear:
 18681                           	opt stack 0
 18682                           pclatu	equ	0xFFB
 18683                           pclath	equ	0xFFA
 18684                           tblptru	equ	0xFF8
 18685                           tblptrh	equ	0xFF7
 18686                           tblptrl	equ	0xFF6
 18687                           tablat	equ	0xFF5
 18688                           prodh	equ	0xFF4
 18689                           prodl	equ	0xFF3
 18690                           intcon	equ	0xFF2
 18691                           intcon3	equ	0xFF0
 18692                           postinc0	equ	0xFEE
 18693                           fsr0h	equ	0xFEA
 18694                           fsr0l	equ	0xFE9
 18695                           wreg	equ	0xFE8
 18696                           postdec1	equ	0xFE5
 18697                           fsr1h	equ	0xFE2
 18698                           fsr1l	equ	0xFE1
 18699                           indf2	equ	0xFDF
 18700                           postinc2	equ	0xFDE
 18701                           postdec2	equ	0xFDD
 18702                           fsr2h	equ	0xFDA
 18703                           fsr2l	equ	0xFD9
 18704                           status	equ	0xFD8
 18705                           
 18706 ;; *************** function i2_lcdInst *****************
 18707 ;; Defined at:
 18708 ;;		line 27 in file "lcd.c"
 18709 ;; Parameters:    Size  Location     Type
 18710 ;;  data            1    wreg     unsigned char 
 18711 ;; Auto vars:     Size  Location     Type
 18712 ;;  data            1    3[COMRAM] unsigned char 
 18713 ;; Return value:  Size  Location     Type
 18714 ;;                  1    wreg      void 
 18715 ;; Registers used:
 18716 ;;		wreg, status,2, status,0, cstack
 18717 ;; Tracked objects:
 18718 ;;		On entry : 0/0
 18719 ;;		On exit  : 0/0
 18720 ;;		Unchanged: 0/0
 18721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18723 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18725 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18726 ;;Total ram usage:        2 bytes
 18727 ;; Hardware stack levels used:    1
 18728 ;; Hardware stack levels required when called:    1
 18729 ;; This function calls:
 18730 ;;		i2_lcdNibble
 18731 ;; This function is called by:
 18732 ;;		i2_lcdClear
 18733 ;;		i2_lcdNewline
 18734 ;; This function uses a non-reentrant model
 18735 ;;
 18736                           
 18737                           	psect	text66
 18738  005886                     __ptext66:
 18739                           	opt stack 0
 18740  005886                     i2_lcdInst:
 18741                           	opt stack 19
 18742                           
 18743                           ;incstack = 0
 18744                           ;i2lcdInst@data stored from wreg
 18745  005886  6E04               	movwf	i2lcdInst@data,c
 18746                           
 18747                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 18748  005888  948C               	bcf	3980,2,c	;volatile
 18749                           
 18750                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 18751  00588A  0E74               	movlw	116
 18752  00588C                     i2u860_47:
 18753  00588C  2EE8               	decfsz	wreg,f,c
 18754  00588E  D7FE               	bra	i2u860_47
 18755  005890  D000               	nop2	
 18756                           
 18757                           ;lcd.c: 30: lcdNibble(data);
 18758  005892  5004               	movf	i2lcdInst@data,w,c
 18759  005894  ECA2  F029         	call	i2_lcdNibble
 18760                           
 18761                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 18762  005898  0E04               	movlw	4
 18763  00589A  6E03               	movwf	??i2_lcdInst& (0+255),c
 18764  00589C  0E3E               	movlw	62
 18765  00589E                     i2u861_47:
 18766  00589E  2EE8               	decfsz	wreg,f,c
 18767  0058A0  D7FE               	bra	i2u861_47
 18768  0058A2  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
 18769  0058A4  D7FC               	bra	i2u861_47
 18770  0058A6  0012               	return		;funcret
 18771  0058A8                     __end_ofi2_lcdInst:
 18772                           	opt stack 0
 18773                           pclatu	equ	0xFFB
 18774                           pclath	equ	0xFFA
 18775                           tblptru	equ	0xFF8
 18776                           tblptrh	equ	0xFF7
 18777                           tblptrl	equ	0xFF6
 18778                           tablat	equ	0xFF5
 18779                           prodh	equ	0xFF4
 18780                           prodl	equ	0xFF3
 18781                           intcon	equ	0xFF2
 18782                           intcon3	equ	0xFF0
 18783                           postinc0	equ	0xFEE
 18784                           fsr0h	equ	0xFEA
 18785                           fsr0l	equ	0xFE9
 18786                           wreg	equ	0xFE8
 18787                           postdec1	equ	0xFE5
 18788                           fsr1h	equ	0xFE2
 18789                           fsr1l	equ	0xFE1
 18790                           indf2	equ	0xFDF
 18791                           postinc2	equ	0xFDE
 18792                           postdec2	equ	0xFDD
 18793                           fsr2h	equ	0xFDA
 18794                           fsr2l	equ	0xFD9
 18795                           status	equ	0xFD8
 18796                           
 18797 ;; *************** function i2_lcdNibble *****************
 18798 ;; Defined at:
 18799 ;;		line 46 in file "lcd.c"
 18800 ;; Parameters:    Size  Location     Type
 18801 ;;  data            1    wreg     unsigned char 
 18802 ;; Auto vars:     Size  Location     Type
 18803 ;;  data            1    1[COMRAM] unsigned char 
 18804 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 18805 ;; Return value:  Size  Location     Type
 18806 ;;                  1    wreg      void 
 18807 ;; Registers used:
 18808 ;;		wreg, status,2, status,0
 18809 ;; Tracked objects:
 18810 ;;		On entry : 0/0
 18811 ;;		On exit  : 0/0
 18812 ;;		Unchanged: 0/0
 18813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18815 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18817 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18818 ;;Total ram usage:        2 bytes
 18819 ;; Hardware stack levels used:    1
 18820 ;; This function calls:
 18821 ;;		Nothing
 18822 ;; This function is called by:
 18823 ;;		i2_lcdInst
 18824 ;;		i2_putch
 18825 ;; This function uses a non-reentrant model
 18826 ;;
 18827                           
 18828                           	psect	text67
 18829  005344                     __ptext67:
 18830                           	opt stack 0
 18831  005344                     i2_lcdNibble:
 18832                           	opt stack 21
 18833                           
 18834                           ;incstack = 0
 18835                           ;i2lcdNibble@data stored from wreg
 18836  005344  6E02               	movwf	i2lcdNibble@data,c
 18837                           
 18838                           ;lcd.c: 48: char temp = data & 0xF0;
 18839  005346  5002               	movf	i2lcdNibble@data,w,c
 18840  005348  0BF0               	andlw	240
 18841  00534A  6E01               	movwf	i2lcdNibble@temp,c
 18842                           
 18843                           ;lcd.c: 49: LATD = LATD & 0x0F;
 18844  00534C  508C               	movf	3980,w,c	;volatile
 18845  00534E  0B0F               	andlw	15
 18846  005350  6E8C               	movwf	3980,c	;volatile
 18847                           
 18848                           ;lcd.c: 50: LATD = temp | LATD;
 18849  005352  5001               	movf	i2lcdNibble@temp,w,c
 18850  005354  108C               	iorwf	3980,w,c	;volatile
 18851  005356  6E8C               	movwf	3980,c	;volatile
 18852                           
 18853                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 18854  005358  968C               	bcf	3980,3,c	;volatile
 18855                           
 18856                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 18857  00535A  0ED6               	movlw	214
 18858  00535C                     i2u862_47:
 18859  00535C  D000               	nop2	
 18860  00535E  D000               	nop2	
 18861  005360  2EE8               	decfsz	wreg,f,c
 18862  005362  D7FC               	bra	i2u862_47
 18863  005364  D000               	nop2	
 18864                           
 18865                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 18866  005366  868C               	bsf	3980,3,c	;volatile
 18867                           
 18868                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 18869  005368  0ED6               	movlw	214
 18870  00536A                     i2u863_47:
 18871  00536A  D000               	nop2	
 18872  00536C  D000               	nop2	
 18873  00536E  2EE8               	decfsz	wreg,f,c
 18874  005370  D7FC               	bra	i2u863_47
 18875  005372  D000               	nop2	
 18876                           
 18877                           ;lcd.c: 58: data = data << 4;
 18878  005374  3802               	swapf	i2lcdNibble@data,w,c
 18879  005376  0BF0               	andlw	240
 18880  005378  6E02               	movwf	i2lcdNibble@data,c
 18881                           
 18882                           ;lcd.c: 60: temp = data & 0xF0;
 18883  00537A  5002               	movf	i2lcdNibble@data,w,c
 18884  00537C  0BF0               	andlw	240
 18885  00537E  6E01               	movwf	i2lcdNibble@temp,c
 18886                           
 18887                           ;lcd.c: 61: LATD = LATD & 0x0F;
 18888  005380  508C               	movf	3980,w,c	;volatile
 18889  005382  0B0F               	andlw	15
 18890  005384  6E8C               	movwf	3980,c	;volatile
 18891                           
 18892                           ;lcd.c: 62: LATD = temp | LATD;
 18893  005386  5001               	movf	i2lcdNibble@temp,w,c
 18894  005388  108C               	iorwf	3980,w,c	;volatile
 18895  00538A  6E8C               	movwf	3980,c	;volatile
 18896                           
 18897                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 18898  00538C  968C               	bcf	3980,3,c	;volatile
 18899                           
 18900                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 18901  00538E  0ED6               	movlw	214
 18902  005390                     i2u864_47:
 18903  005390  D000               	nop2	
 18904  005392  D000               	nop2	
 18905  005394  2EE8               	decfsz	wreg,f,c
 18906  005396  D7FC               	bra	i2u864_47
 18907  005398  D000               	nop2	
 18908                           
 18909                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 18910  00539A  868C               	bsf	3980,3,c	;volatile
 18911                           
 18912                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 18913  00539C  0ED6               	movlw	214
 18914  00539E                     i2u865_47:
 18915  00539E  D000               	nop2	
 18916  0053A0  D000               	nop2	
 18917  0053A2  2EE8               	decfsz	wreg,f,c
 18918  0053A4  D7FC               	bra	i2u865_47
 18919  0053A6  D000               	nop2	
 18920  0053A8  0012               	return		;funcret
 18921  0053AA                     __end_ofi2_lcdNibble:
 18922                           	opt stack 0
 18923                           pclatu	equ	0xFFB
 18924                           pclath	equ	0xFFA
 18925                           tblptru	equ	0xFF8
 18926                           tblptrh	equ	0xFF7
 18927                           tblptrl	equ	0xFF6
 18928                           tablat	equ	0xFF5
 18929                           prodh	equ	0xFF4
 18930                           prodl	equ	0xFF3
 18931                           intcon	equ	0xFF2
 18932                           intcon3	equ	0xFF0
 18933                           postinc0	equ	0xFEE
 18934                           fsr0h	equ	0xFEA
 18935                           fsr0l	equ	0xFE9
 18936                           wreg	equ	0xFE8
 18937                           postdec1	equ	0xFE5
 18938                           fsr1h	equ	0xFE2
 18939                           fsr1l	equ	0xFE1
 18940                           indf2	equ	0xFDF
 18941                           postinc2	equ	0xFDE
 18942                           postdec2	equ	0xFDD
 18943                           fsr2h	equ	0xFDA
 18944                           fsr2l	equ	0xFD9
 18945                           status	equ	0xFD8
 18946                           
 18947 ;; *************** function _servoInterruptService *****************
 18948 ;; Defined at:
 18949 ;;		line 52 in file "servo.c"
 18950 ;; Parameters:    Size  Location     Type
 18951 ;;		None
 18952 ;; Auto vars:     Size  Location     Type
 18953 ;;		None
 18954 ;; Return value:  Size  Location     Type
 18955 ;;                  1    wreg      void 
 18956 ;; Registers used:
 18957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18958 ;; Tracked objects:
 18959 ;;		On entry : 0/0
 18960 ;;		On exit  : 0/0
 18961 ;;		Unchanged: 0/0
 18962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18965 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18966 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18967 ;;Total ram usage:        4 bytes
 18968 ;; Hardware stack levels used:    1
 18969 ;; Hardware stack levels required when called:    1
 18970 ;; This function calls:
 18971 ;;		i2___awmod
 18972 ;;		i2_digitalWrite
 18973 ;;		i2_startTimer
 18974 ;; This function is called by:
 18975 ;;		_service
 18976 ;; This function uses a non-reentrant model
 18977 ;;
 18978                           
 18979                           	psect	text68
 18980  00440C                     __ptext68:
 18981                           	opt stack 0
 18982  00440C                     _servoInterruptService:
 18983                           	opt stack 22
 18984                           
 18985                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 18986                           
 18987                           ;incstack = 0
 18988  00440C  A4F2               	btfss	intcon,2,c	;volatile
 18989  00440E  0012               	return	
 18990  004410  94F2               	bcf	intcon,2,c	;volatile
 18991                           
 18992                           ;servo.c: 55: digitalWrite(servos[curr],0);
 18993  004412  90D8               	bcf	status,0,c
 18994  004414  347B               	rlcf	_curr,w,c
 18995  004416  6ED9               	movwf	fsr2l,c
 18996  004418  347C               	rlcf	_curr+1,w,c
 18997  00441A  6EDA               	movwf	fsr2h,c
 18998  00441C  0EA0               	movlw	low _servos
 18999  00441E  26D9               	addwf	fsr2l,f,c
 19000  004420  0E01               	movlw	high _servos
 19001  004422  22DA               	addwfc	fsr2h,f,c
 19002  004424  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 19003  004428  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 19004  00442C  0E00               	movlw	0
 19005  00442E  6E0A               	movwf	i2digitalWrite@val+1,c
 19006  004430  0E00               	movlw	0
 19007  004432  6E09               	movwf	i2digitalWrite@val,c
 19008  004434  EC46  F025         	call	i2_digitalWrite	;wreg free
 19009                           
 19010                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 19011  004438  0E01               	movlw	1
 19012  00443A  247B               	addwf	_curr,w,c
 19013  00443C  6E01               	movwf	i2___awmod@dividend,c
 19014  00443E  0E00               	movlw	0
 19015  004440  207C               	addwfc	_curr+1,w,c
 19016  004442  6E02               	movwf	i2___awmod@dividend+1,c
 19017  004444  0E01               	movlw	1
 19018  004446  0100               	movlb	0	; () banked
 19019  004448  25FE               	addwf	_n& (0+255),w,b
 19020  00444A  6E03               	movwf	i2___awmod@divisor,c
 19021  00444C  0E00               	movlw	0
 19022  00444E  0100               	movlb	0	; () banked
 19023  004450  21FF               	addwfc	(_n+1)& (0+255),w,b
 19024  004452  6E04               	movwf	i2___awmod@divisor+1,c
 19025  004454  EC37  F029         	call	i2___awmod	;wreg free
 19026  004458  90D8               	bcf	status,0,c
 19027  00445A  3601               	rlcf	?i2___awmod,f,c
 19028  00445C  3602               	rlcf	?i2___awmod+1,f,c
 19029  00445E  0EA0               	movlw	low _servos
 19030  004460  2401               	addwf	?i2___awmod,w,c
 19031  004462  6ED9               	movwf	fsr2l,c
 19032  004464  0E01               	movlw	high _servos
 19033  004466  2002               	addwfc	?i2___awmod+1,w,c
 19034  004468  6EDA               	movwf	fsr2h,c
 19035  00446A  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 19036  00446E  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 19037  004472  0E00               	movlw	0
 19038  004474  6E0A               	movwf	i2digitalWrite@val+1,c
 19039  004476  0E01               	movlw	1
 19040  004478  6E09               	movwf	i2digitalWrite@val,c
 19041  00447A  EC46  F025         	call	i2_digitalWrite	;wreg free
 19042                           
 19043                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 19044  00447E  0E00               	movlw	0
 19045  004480  6E08               	movwf	i2startTimer@timer+1,c
 19046  004482  0E00               	movlw	0
 19047  004484  6E07               	movwf	i2startTimer@timer,c
 19048  004486  0EFF               	movlw	255
 19049  004488  6E10               	movwf	??_servoInterruptService& (0+255),c
 19050  00448A  0EFF               	movlw	255
 19051  00448C  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 19052  00448E  0E01               	movlw	1
 19053  004490  247B               	addwf	_curr,w,c
 19054  004492  6E01               	movwf	i2___awmod@dividend,c
 19055  004494  0E00               	movlw	0
 19056  004496  207C               	addwfc	_curr+1,w,c
 19057  004498  6E02               	movwf	i2___awmod@dividend+1,c
 19058  00449A  0E01               	movlw	1
 19059  00449C  0100               	movlb	0	; () banked
 19060  00449E  25FE               	addwf	_n& (0+255),w,b
 19061  0044A0  6E03               	movwf	i2___awmod@divisor,c
 19062  0044A2  0E00               	movlw	0
 19063  0044A4  0100               	movlb	0	; () banked
 19064  0044A6  21FF               	addwfc	(_n+1)& (0+255),w,b
 19065  0044A8  6E04               	movwf	i2___awmod@divisor+1,c
 19066  0044AA  EC37  F029         	call	i2___awmod	;wreg free
 19067  0044AE  90D8               	bcf	status,0,c
 19068  0044B0  3601               	rlcf	?i2___awmod,f,c
 19069  0044B2  3602               	rlcf	?i2___awmod+1,f,c
 19070  0044B4  0E98               	movlw	low _pulse
 19071  0044B6  2401               	addwf	?i2___awmod,w,c
 19072  0044B8  6ED9               	movwf	fsr2l,c
 19073  0044BA  0E01               	movlw	high _pulse
 19074  0044BC  2002               	addwfc	?i2___awmod+1,w,c
 19075  0044BE  6EDA               	movwf	fsr2h,c
 19076  0044C0  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 19077  0044C4  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 19078  0044C8  1E12               	comf	??_servoInterruptService+2,f,c
 19079  0044CA  1E13               	comf	??_servoInterruptService+3,f,c
 19080  0044CC  4A12               	infsnz	??_servoInterruptService+2,f,c
 19081  0044CE  2A13               	incf	??_servoInterruptService+3,f,c
 19082  0044D0  5010               	movf	??_servoInterruptService,w,c
 19083  0044D2  2612               	addwf	??_servoInterruptService+2,f,c
 19084  0044D4  5011               	movf	??_servoInterruptService+1,w,c
 19085  0044D6  2213               	addwfc	??_servoInterruptService+3,f,c
 19086  0044D8  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 19087  0044DC  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 19088  0044E0  6A0B               	clrf	i2startTimer@val+2,c
 19089  0044E2  6A0C               	clrf	i2startTimer@val+3,c
 19090  0044E4  EC78  F02A         	call	i2_startTimer	;wreg free
 19091                           
 19092                           ;servo.c: 59: curr = (curr+1)%(n+1);
 19093  0044E8  0E01               	movlw	1
 19094  0044EA  247B               	addwf	_curr,w,c
 19095  0044EC  6E01               	movwf	i2___awmod@dividend,c
 19096  0044EE  0E00               	movlw	0
 19097  0044F0  207C               	addwfc	_curr+1,w,c
 19098  0044F2  6E02               	movwf	i2___awmod@dividend+1,c
 19099  0044F4  0E01               	movlw	1
 19100  0044F6  0100               	movlb	0	; () banked
 19101  0044F8  25FE               	addwf	_n& (0+255),w,b
 19102  0044FA  6E03               	movwf	i2___awmod@divisor,c
 19103  0044FC  0E00               	movlw	0
 19104  0044FE  0100               	movlb	0	; () banked
 19105  004500  21FF               	addwfc	(_n+1)& (0+255),w,b
 19106  004502  6E04               	movwf	i2___awmod@divisor+1,c
 19107  004504  EC37  F029         	call	i2___awmod	;wreg free
 19108  004508  C001  F07B         	movff	?i2___awmod,_curr
 19109  00450C  C002  F07C         	movff	?i2___awmod+1,_curr+1
 19110  004510  0012               	return	
 19111  004512                     __end_of_servoInterruptService:
 19112                           	opt stack 0
 19113                           pclatu	equ	0xFFB
 19114                           pclath	equ	0xFFA
 19115                           tblptru	equ	0xFF8
 19116                           tblptrh	equ	0xFF7
 19117                           tblptrl	equ	0xFF6
 19118                           tablat	equ	0xFF5
 19119                           prodh	equ	0xFF4
 19120                           prodl	equ	0xFF3
 19121                           intcon	equ	0xFF2
 19122                           intcon3	equ	0xFF0
 19123                           postinc0	equ	0xFEE
 19124                           fsr0h	equ	0xFEA
 19125                           fsr0l	equ	0xFE9
 19126                           wreg	equ	0xFE8
 19127                           postdec1	equ	0xFE5
 19128                           fsr1h	equ	0xFE2
 19129                           fsr1l	equ	0xFE1
 19130                           indf2	equ	0xFDF
 19131                           postinc2	equ	0xFDE
 19132                           postdec2	equ	0xFDD
 19133                           fsr2h	equ	0xFDA
 19134                           fsr2l	equ	0xFD9
 19135                           status	equ	0xFD8
 19136                           
 19137 ;; *************** function i2_startTimer *****************
 19138 ;; Defined at:
 19139 ;;		line 76 in file "timer.c"
 19140 ;; Parameters:    Size  Location     Type
 19141 ;;  timer           2    6[COMRAM] int 
 19142 ;;  val             4    8[COMRAM] long 
 19143 ;; Auto vars:     Size  Location     Type
 19144 ;;		None
 19145 ;; Return value:  Size  Location     Type
 19146 ;;                  1    wreg      void 
 19147 ;; Registers used:
 19148 ;;		wreg, status,2, status,0
 19149 ;; Tracked objects:
 19150 ;;		On entry : 0/0
 19151 ;;		On exit  : 0/0
 19152 ;;		Unchanged: 0/0
 19153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19154 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19156 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19157 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19158 ;;Total ram usage:        8 bytes
 19159 ;; Hardware stack levels used:    1
 19160 ;; This function calls:
 19161 ;;		Nothing
 19162 ;; This function is called by:
 19163 ;;		_service
 19164 ;;		_servoInterruptService
 19165 ;; This function uses a non-reentrant model
 19166 ;;
 19167                           
 19168                           	psect	text69
 19169  0054F0                     __ptext69:
 19170                           	opt stack 0
 19171  0054F0                     i2_startTimer:
 19172                           	opt stack 23
 19173                           
 19174                           ;timer.c: 77: switch(timer){
 19175                           
 19176                           ;incstack = 0
 19177  0054F0  D012               	goto	i2l6029
 19178  0054F2                     i2l420:
 19179                           
 19180                           ;timer.c: 79: TMR0H = val>>8;
 19181  0054F2  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 19182                           
 19183                           ;timer.c: 80: TMR0L = val;
 19184  0054F6  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 19185                           
 19186                           ;timer.c: 81: T0CON |= 1<<7;
 19187  0054FA  8ED5               	bsf	4053,7,c	;volatile
 19188                           
 19189                           ;timer.c: 82: break;
 19190  0054FC  0012               	return	
 19191  0054FE                     i2l422:
 19192                           
 19193                           ;timer.c: 84: TMR1H = val>>8;
 19194  0054FE  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 19195                           
 19196                           ;timer.c: 85: TMR1L = val;
 19197  005502  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 19198                           
 19199                           ;timer.c: 86: T1CON |= 1<<0;
 19200  005506  80CD               	bsf	4045,0,c	;volatile
 19201                           
 19202                           ;timer.c: 87: break;
 19203  005508  0012               	return	
 19204  00550A                     i2l423:
 19205                           
 19206                           ;timer.c: 89: TMR3H = val>>8;
 19207  00550A  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 19208                           
 19209                           ;timer.c: 90: TMR3L = val;
 19210  00550E  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 19211                           
 19212                           ;timer.c: 91: T3CON |= 1<<0;
 19213  005512  80B1               	bsf	4017,0,c	;volatile
 19214                           
 19215                           ;timer.c: 92: }
 19216  005514  0012               	return	
 19217  005516                     i2l6029:
 19218  005516  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 19219  00551A  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 19220                           
 19221                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19222                           ; Switch size 1, requested type "space"
 19223                           ; Number of cases is 1, Range of values is 0 to 0
 19224                           ; switch strategies available:
 19225                           ; Name         Instructions Cycles
 19226                           ; simple_byte            4     3 (average)
 19227                           ;	Chosen strategy is simple_byte
 19228  00551E  500E               	movf	??i2_startTimer+1,w,c
 19229  005520  0A00               	xorlw	0	; case 0
 19230  005522  A4D8               	btfss	status,2,c
 19231  005524  0012               	return	
 19232                           
 19233                           ; Switch size 1, requested type "space"
 19234                           ; Number of cases is 3, Range of values is 0 to 3
 19235                           ; switch strategies available:
 19236                           ; Name         Instructions Cycles
 19237                           ; simple_byte           10     6 (average)
 19238                           ;	Chosen strategy is simple_byte
 19239  005526  500D               	movf	??i2_startTimer,w,c
 19240  005528  0A00               	xorlw	0	; case 0
 19241  00552A  B4D8               	btfsc	status,2,c
 19242  00552C  D7E2               	goto	i2l420
 19243  00552E  0A01               	xorlw	1	; case 1
 19244  005530  B4D8               	btfsc	status,2,c
 19245  005532  D7E5               	goto	i2l422
 19246  005534  0A02               	xorlw	2	; case 3
 19247  005536  A4D8               	btfss	status,2,c
 19248  005538  0012               	return	
 19249  00553A  D7E7               	goto	i2l423
 19250  00553C                     __end_ofi2_startTimer:
 19251                           	opt stack 0
 19252                           pclatu	equ	0xFFB
 19253                           pclath	equ	0xFFA
 19254                           tblptru	equ	0xFF8
 19255                           tblptrh	equ	0xFF7
 19256                           tblptrl	equ	0xFF6
 19257                           tablat	equ	0xFF5
 19258                           prodh	equ	0xFF4
 19259                           prodl	equ	0xFF3
 19260                           intcon	equ	0xFF2
 19261                           intcon3	equ	0xFF0
 19262                           postinc0	equ	0xFEE
 19263                           fsr0h	equ	0xFEA
 19264                           fsr0l	equ	0xFE9
 19265                           wreg	equ	0xFE8
 19266                           postdec1	equ	0xFE5
 19267                           fsr1h	equ	0xFE2
 19268                           fsr1l	equ	0xFE1
 19269                           indf2	equ	0xFDF
 19270                           postinc2	equ	0xFDE
 19271                           postdec2	equ	0xFDD
 19272                           fsr2h	equ	0xFDA
 19273                           fsr2l	equ	0xFD9
 19274                           status	equ	0xFD8
 19275                           
 19276 ;; *************** function i2_digitalWrite *****************
 19277 ;; Defined at:
 19278 ;;		line 53 in file "iopin.c"
 19279 ;; Parameters:    Size  Location     Type
 19280 ;;  pin             2    6[COMRAM] PTR int 
 19281 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
 19282 ;;		 -> conveyorServo(4), cylinderMotor(4), 
 19283 ;;  val             2    8[COMRAM] int 
 19284 ;; Auto vars:     Size  Location     Type
 19285 ;;  digitalWrite    2   13[COMRAM] int 
 19286 ;; Return value:  Size  Location     Type
 19287 ;;                  1    wreg      void 
 19288 ;; Registers used:
 19289 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19290 ;; Tracked objects:
 19291 ;;		On entry : 0/0
 19292 ;;		On exit  : 0/0
 19293 ;;		Unchanged: 0/0
 19294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19296 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19297 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19298 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19299 ;;Total ram usage:        9 bytes
 19300 ;; Hardware stack levels used:    1
 19301 ;; This function calls:
 19302 ;;		Nothing
 19303 ;; This function is called by:
 19304 ;;		_servoInterruptService
 19305 ;; This function uses a non-reentrant model
 19306 ;;
 19307                           
 19308                           	psect	text70
 19309  004A8C                     __ptext70:
 19310                           	opt stack 0
 19311  004A8C                     i2_digitalWrite:
 19312                           	opt stack 22
 19313                           
 19314                           ;iopin.c: 54: if(pin){
 19315                           
 19316                           ;incstack = 0
 19317  004A8C  5007               	movf	i2digitalWrite@pin,w,c
 19318  004A8E  1008               	iorwf	i2digitalWrite@pin+1,w,c
 19319  004A90  B4D8               	btfsc	status,2,c
 19320  004A92  0012               	return	
 19321                           
 19322                           ;iopin.c: 55: int p = 1 << pin[1];
 19323  004A94  EE20 F002          	lfsr	2,2
 19324  004A98  5007               	movf	i2digitalWrite@pin,w,c
 19325  004A9A  26D9               	addwf	fsr2l,f,c
 19326  004A9C  5008               	movf	i2digitalWrite@pin+1,w,c
 19327  004A9E  22DA               	addwfc	fsr2h,f,c
 19328  004AA0  50DF               	movf	indf2,w,c
 19329  004AA2  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 19330  004AA4  0E01               	movlw	1
 19331  004AA6  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 19332  004AA8  0E00               	movlw	0
 19333  004AAA  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 19334  004AAC  2A0B               	incf	??i2_digitalWrite,f,c
 19335  004AAE  D003               	goto	i2u665_44
 19336  004AB0                     i2u665_45:
 19337  004AB0  90D8               	bcf	status,0,c
 19338  004AB2  360C               	rlcf	??i2_digitalWrite+1,f,c
 19339  004AB4  360D               	rlcf	??i2_digitalWrite+2,f,c
 19340  004AB6                     i2u665_44:
 19341  004AB6  2E0B               	decfsz	??i2_digitalWrite,f,c
 19342  004AB8  D7FB               	goto	i2u665_45
 19343  004ABA  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 19344  004ABE  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 19345                           
 19346                           ;iopin.c: 56: if(val == 0){
 19347  004AC2  5009               	movf	i2digitalWrite@val,w,c
 19348  004AC4  100A               	iorwf	i2digitalWrite@val+1,w,c
 19349  004AC6  A4D8               	btfss	status,2,c
 19350  004AC8  D02B               	goto	i2l6015
 19351                           
 19352                           ;iopin.c: 57: p ^= 0xff;
 19353  004ACA  0EFF               	movlw	255
 19354  004ACC  1A0E               	xorwf	i2digitalWrite@p,f,c
 19355                           
 19356                           ;iopin.c: 58: }
 19357                           ;iopin.c: 60: switch(pin[0]){
 19358  004ACE  D028               	goto	i2l6015
 19359  004AD0                     i2l5991:
 19360  004AD0  0409               	decf	i2digitalWrite@val,w,c
 19361  004AD2  100A               	iorwf	i2digitalWrite@val+1,w,c
 19362  004AD4  A4D8               	btfss	status,2,c
 19363  004AD6  D003               	goto	i2l5995
 19364  004AD8  500E               	movf	i2digitalWrite@p,w,c
 19365  004ADA  1289               	iorwf	3977,f,c	;volatile
 19366  004ADC  0012               	return	
 19367  004ADE                     i2l5995:
 19368                           
 19369                           ;iopin.c: 62: else LATA &= p;
 19370  004ADE  500E               	movf	i2digitalWrite@p,w,c
 19371  004AE0  1689               	andwf	3977,f,c	;volatile
 19372                           
 19373                           ;iopin.c: 63: break;
 19374  004AE2  0012               	return	
 19375  004AE4                     i2l5997:
 19376  004AE4  0409               	decf	i2digitalWrite@val,w,c
 19377  004AE6  100A               	iorwf	i2digitalWrite@val+1,w,c
 19378  004AE8  A4D8               	btfss	status,2,c
 19379  004AEA  D003               	goto	i2l6001
 19380  004AEC  500E               	movf	i2digitalWrite@p,w,c
 19381  004AEE  128A               	iorwf	3978,f,c	;volatile
 19382  004AF0  0012               	return	
 19383  004AF2                     i2l6001:
 19384                           
 19385                           ;iopin.c: 65: else LATB &= p;
 19386  004AF2  500E               	movf	i2digitalWrite@p,w,c
 19387  004AF4  168A               	andwf	3978,f,c	;volatile
 19388                           
 19389                           ;iopin.c: 66: break;
 19390  004AF6  0012               	return	
 19391  004AF8                     i2l6003:
 19392  004AF8  0409               	decf	i2digitalWrite@val,w,c
 19393  004AFA  100A               	iorwf	i2digitalWrite@val+1,w,c
 19394  004AFC  A4D8               	btfss	status,2,c
 19395  004AFE  D003               	goto	i2l6007
 19396  004B00  500E               	movf	i2digitalWrite@p,w,c
 19397  004B02  128B               	iorwf	3979,f,c	;volatile
 19398  004B04  0012               	return	
 19399  004B06                     i2l6007:
 19400                           
 19401                           ;iopin.c: 68: else LATC &= p;
 19402  004B06  500E               	movf	i2digitalWrite@p,w,c
 19403  004B08  168B               	andwf	3979,f,c	;volatile
 19404                           
 19405                           ;iopin.c: 69: break;
 19406  004B0A  0012               	return	
 19407  004B0C                     i2l6009:
 19408  004B0C  0409               	decf	i2digitalWrite@val,w,c
 19409  004B0E  100A               	iorwf	i2digitalWrite@val+1,w,c
 19410  004B10  A4D8               	btfss	status,2,c
 19411  004B12  D003               	goto	i2l6013
 19412  004B14  500E               	movf	i2digitalWrite@p,w,c
 19413  004B16  128C               	iorwf	3980,f,c	;volatile
 19414  004B18  0012               	return	
 19415  004B1A                     i2l6013:
 19416                           
 19417                           ;iopin.c: 71: else LATD &= p;
 19418  004B1A  500E               	movf	i2digitalWrite@p,w,c
 19419  004B1C  168C               	andwf	3980,f,c	;volatile
 19420                           
 19421                           ;iopin.c: 72: }
 19422  004B1E  0012               	return	
 19423  004B20                     i2l6015:
 19424  004B20  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 19425  004B24  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 19426  004B28  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 19427  004B2C  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 19428                           
 19429                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19430                           ; Switch size 1, requested type "space"
 19431                           ; Number of cases is 1, Range of values is 0 to 0
 19432                           ; switch strategies available:
 19433                           ; Name         Instructions Cycles
 19434                           ; simple_byte            4     3 (average)
 19435                           ;	Chosen strategy is simple_byte
 19436  004B30  500C               	movf	??i2_digitalWrite+1,w,c
 19437  004B32  0A00               	xorlw	0	; case 0
 19438  004B34  A4D8               	btfss	status,2,c
 19439  004B36  0012               	return	
 19440                           
 19441                           ; Switch size 1, requested type "space"
 19442                           ; Number of cases is 4, Range of values is 0 to 3
 19443                           ; switch strategies available:
 19444                           ; Name         Instructions Cycles
 19445                           ; simple_byte           13     7 (average)
 19446                           ;	Chosen strategy is simple_byte
 19447  004B38  500B               	movf	??i2_digitalWrite,w,c
 19448  004B3A  0A00               	xorlw	0	; case 0
 19449  004B3C  B4D8               	btfsc	status,2,c
 19450  004B3E  D7C8               	goto	i2l5991
 19451  004B40  0A01               	xorlw	1	; case 1
 19452  004B42  B4D8               	btfsc	status,2,c
 19453  004B44  D7CF               	goto	i2l5997
 19454  004B46  0A03               	xorlw	3	; case 2
 19455  004B48  B4D8               	btfsc	status,2,c
 19456  004B4A  D7D6               	goto	i2l6003
 19457  004B4C  0A01               	xorlw	1	; case 3
 19458  004B4E  A4D8               	btfss	status,2,c
 19459  004B50  0012               	return	
 19460  004B52  D7DC               	goto	i2l6009
 19461  004B54                     __end_ofi2_digitalWrite:
 19462                           	opt stack 0
 19463                           pclatu	equ	0xFFB
 19464                           pclath	equ	0xFFA
 19465                           tblptru	equ	0xFF8
 19466                           tblptrh	equ	0xFF7
 19467                           tblptrl	equ	0xFF6
 19468                           tablat	equ	0xFF5
 19469                           prodh	equ	0xFF4
 19470                           prodl	equ	0xFF3
 19471                           intcon	equ	0xFF2
 19472                           intcon3	equ	0xFF0
 19473                           postinc0	equ	0xFEE
 19474                           fsr0h	equ	0xFEA
 19475                           fsr0l	equ	0xFE9
 19476                           wreg	equ	0xFE8
 19477                           postdec1	equ	0xFE5
 19478                           fsr1h	equ	0xFE2
 19479                           fsr1l	equ	0xFE1
 19480                           indf2	equ	0xFDF
 19481                           postinc2	equ	0xFDE
 19482                           postdec2	equ	0xFDD
 19483                           fsr2h	equ	0xFDA
 19484                           fsr2l	equ	0xFD9
 19485                           status	equ	0xFD8
 19486                           
 19487 ;; *************** function i2___awmod *****************
 19488 ;; Defined at:
 19489 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 19490 ;; Parameters:    Size  Location     Type
 19491 ;;  dividend        2    0[COMRAM] int 
 19492 ;;  divisor         2    2[COMRAM] int 
 19493 ;; Auto vars:     Size  Location     Type
 19494 ;;  __awmod         1    5[COMRAM] unsigned char 
 19495 ;;  __awmod         1    4[COMRAM] unsigned char 
 19496 ;; Return value:  Size  Location     Type
 19497 ;;                  2    0[COMRAM] int 
 19498 ;; Registers used:
 19499 ;;		wreg, status,2, status,0
 19500 ;; Tracked objects:
 19501 ;;		On entry : 0/0
 19502 ;;		On exit  : 0/0
 19503 ;;		Unchanged: 0/0
 19504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19508 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19509 ;;Total ram usage:        6 bytes
 19510 ;; Hardware stack levels used:    1
 19511 ;; This function calls:
 19512 ;;		Nothing
 19513 ;; This function is called by:
 19514 ;;		_servoInterruptService
 19515 ;;		i2_fround
 19516 ;;		i2_scale
 19517 ;; This function uses a non-reentrant model
 19518 ;;
 19519                           
 19520                           	psect	text71
 19521  00526E                     __ptext71:
 19522                           	opt stack 0
 19523  00526E                     i2___awmod:
 19524                           	opt stack 21
 19525                           
 19526                           ;incstack = 0
 19527  00526E  0E00               	movlw	0
 19528  005270  6E06               	movwf	i2___awmod@sign,c
 19529  005272  AE02               	btfss	i2___awmod@dividend+1,7,c
 19530  005274  D006               	goto	i2l5319
 19531  005276  6C01               	negf	i2___awmod@dividend,c
 19532  005278  1E02               	comf	i2___awmod@dividend+1,f,c
 19533  00527A  B0D8               	btfsc	status,0,c
 19534  00527C  2A02               	incf	i2___awmod@dividend+1,f,c
 19535  00527E  0E01               	movlw	1
 19536  005280  6E06               	movwf	i2___awmod@sign,c
 19537  005282                     i2l5319:
 19538  005282  AE04               	btfss	i2___awmod@divisor+1,7,c
 19539  005284  D004               	goto	i2l5323
 19540  005286  6C03               	negf	i2___awmod@divisor,c
 19541  005288  1E04               	comf	i2___awmod@divisor+1,f,c
 19542  00528A  B0D8               	btfsc	status,0,c
 19543  00528C  2A04               	incf	i2___awmod@divisor+1,f,c
 19544  00528E                     i2l5323:
 19545  00528E  5003               	movf	i2___awmod@divisor,w,c
 19546  005290  1004               	iorwf	i2___awmod@divisor+1,w,c
 19547  005292  B4D8               	btfsc	status,2,c
 19548  005294  D018               	goto	i2l5339
 19549  005296  0E01               	movlw	1
 19550  005298  6E05               	movwf	i2___awmod@counter,c
 19551  00529A  D004               	goto	i2l5329
 19552  00529C                     i2l5327:
 19553  00529C  90D8               	bcf	status,0,c
 19554  00529E  3603               	rlcf	i2___awmod@divisor,f,c
 19555  0052A0  3604               	rlcf	i2___awmod@divisor+1,f,c
 19556  0052A2  2A05               	incf	i2___awmod@counter,f,c
 19557  0052A4                     i2l5329:
 19558  0052A4  AE04               	btfss	i2___awmod@divisor+1,7,c
 19559  0052A6  D7FA               	goto	i2l5327
 19560  0052A8                     i2l5331:
 19561  0052A8  5003               	movf	i2___awmod@divisor,w,c
 19562  0052AA  5C01               	subwf	i2___awmod@dividend,w,c
 19563  0052AC  5004               	movf	i2___awmod@divisor+1,w,c
 19564  0052AE  5802               	subwfb	i2___awmod@dividend+1,w,c
 19565  0052B0  A0D8               	btfss	status,0,c
 19566  0052B2  D004               	goto	i2l5335
 19567  0052B4  5003               	movf	i2___awmod@divisor,w,c
 19568  0052B6  5E01               	subwf	i2___awmod@dividend,f,c
 19569  0052B8  5004               	movf	i2___awmod@divisor+1,w,c
 19570  0052BA  5A02               	subwfb	i2___awmod@dividend+1,f,c
 19571  0052BC                     i2l5335:
 19572  0052BC  90D8               	bcf	status,0,c
 19573  0052BE  3204               	rrcf	i2___awmod@divisor+1,f,c
 19574  0052C0  3203               	rrcf	i2___awmod@divisor,f,c
 19575  0052C2  2E05               	decfsz	i2___awmod@counter,f,c
 19576  0052C4  D7F1               	goto	i2l5331
 19577  0052C6                     i2l5339:
 19578  0052C6  5006               	movf	i2___awmod@sign,w,c
 19579  0052C8  B4D8               	btfsc	status,2,c
 19580  0052CA  D004               	goto	i2l5343
 19581  0052CC  6C01               	negf	i2___awmod@dividend,c
 19582  0052CE  1E02               	comf	i2___awmod@dividend+1,f,c
 19583  0052D0  B0D8               	btfsc	status,0,c
 19584  0052D2  2A02               	incf	i2___awmod@dividend+1,f,c
 19585  0052D4                     i2l5343:
 19586  0052D4  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 19587  0052D8  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 19588  0052DC  0012               	return	
 19589  0052DE                     __end_ofi2___awmod:
 19590                           	opt stack 0
 19591                           pclatu	equ	0xFFB
 19592                           pclath	equ	0xFFA
 19593                           tblptru	equ	0xFF8
 19594                           tblptrh	equ	0xFF7
 19595                           tblptrl	equ	0xFF6
 19596                           tablat	equ	0xFF5
 19597                           prodh	equ	0xFF4
 19598                           prodl	equ	0xFF3
 19599                           intcon	equ	0xFF2
 19600                           intcon3	equ	0xFF0
 19601                           postinc0	equ	0xFEE
 19602                           fsr0h	equ	0xFEA
 19603                           fsr0l	equ	0xFE9
 19604                           wreg	equ	0xFE8
 19605                           postdec1	equ	0xFE5
 19606                           fsr1h	equ	0xFE2
 19607                           fsr1l	equ	0xFE1
 19608                           indf2	equ	0xFDF
 19609                           postinc2	equ	0xFDE
 19610                           postdec2	equ	0xFDD
 19611                           fsr2h	equ	0xFDA
 19612                           fsr2l	equ	0xFD9
 19613                           status	equ	0xFD8
 19614                           pclatu	equ	0xFFB
 19615                           pclath	equ	0xFFA
 19616                           tblptru	equ	0xFF8
 19617                           tblptrh	equ	0xFF7
 19618                           tblptrl	equ	0xFF6
 19619                           tablat	equ	0xFF5
 19620                           prodh	equ	0xFF4
 19621                           prodl	equ	0xFF3
 19622                           intcon	equ	0xFF2
 19623                           intcon3	equ	0xFF0
 19624                           postinc0	equ	0xFEE
 19625                           fsr0h	equ	0xFEA
 19626                           fsr0l	equ	0xFE9
 19627                           wreg	equ	0xFE8
 19628                           postdec1	equ	0xFE5
 19629                           fsr1h	equ	0xFE2
 19630                           fsr1l	equ	0xFE1
 19631                           indf2	equ	0xFDF
 19632                           postinc2	equ	0xFDE
 19633                           postdec2	equ	0xFDD
 19634                           fsr2h	equ	0xFDA
 19635                           fsr2l	equ	0xFD9
 19636                           status	equ	0xFD8
 19637                           
 19638                           	psect	rparam
 19639  0000                     pclatu	equ	0xFFB
 19640                           pclath	equ	0xFFA
 19641                           tblptru	equ	0xFF8
 19642                           tblptrh	equ	0xFF7
 19643                           tblptrl	equ	0xFF6
 19644                           tablat	equ	0xFF5
 19645                           prodh	equ	0xFF4
 19646                           prodl	equ	0xFF3
 19647                           intcon	equ	0xFF2
 19648                           intcon3	equ	0xFF0
 19649                           postinc0	equ	0xFEE
 19650                           fsr0h	equ	0xFEA
 19651                           fsr0l	equ	0xFE9
 19652                           wreg	equ	0xFE8
 19653                           postdec1	equ	0xFE5
 19654                           fsr1h	equ	0xFE2
 19655                           fsr1l	equ	0xFE1
 19656                           indf2	equ	0xFDF
 19657                           postinc2	equ	0xFDE
 19658                           postdec2	equ	0xFDD
 19659                           fsr2h	equ	0xFDA
 19660                           fsr2l	equ	0xFD9
 19661                           status	equ	0xFD8
 19662                           
 19663                           	psect	temp
 19664  00007E                     btemp:
 19665                           	opt stack 0
 19666  00007E                     	ds	1
 19667  0000                     int$flags	set	btemp
 19668                           pclatu	equ	0xFFB
 19669                           pclath	equ	0xFFA
 19670                           tblptru	equ	0xFF8
 19671                           tblptrh	equ	0xFF7
 19672                           tblptrl	equ	0xFF6
 19673                           tablat	equ	0xFF5
 19674                           prodh	equ	0xFF4
 19675                           prodl	equ	0xFF3
 19676                           intcon	equ	0xFF2
 19677                           intcon3	equ	0xFF0
 19678                           postinc0	equ	0xFEE
 19679                           fsr0h	equ	0xFEA
 19680                           fsr0l	equ	0xFE9
 19681                           wreg	equ	0xFE8
 19682                           postdec1	equ	0xFE5
 19683                           fsr1h	equ	0xFE2
 19684                           fsr1l	equ	0xFE1
 19685                           indf2	equ	0xFDF
 19686                           postinc2	equ	0xFDE
 19687                           postdec2	equ	0xFDD
 19688                           fsr2h	equ	0xFDA
 19689                           fsr2l	equ	0xFD9
 19690                           status	equ	0xFD8


Data Sizes:
    Strings     307
    Constant    174
    Data        61
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    122     125
    BANK0           128    126     128
    BANK1           256     91     184
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_18(CODE[17]), STR_17(CODE[18]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[17]), STR_9(CODE[18]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[8]), STR_5(CODE[11]), STR_4(CODE[26]), STR_3(CODE[9]), 
		 -> STR_2(CODE[17]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), cylinderDir(BANK1[4]), 

    pause@message	PTR unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_printf
    i2_printf->i2___ftsub
    i2_scale->i2___ftmul
    i2_lcdNewline->i2_lcdInst
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->i2___wmul
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2_scale
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_initServo
    _sortBattery->_setAngle
    _pause->_printf
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf
    _pause->_printf

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  217639
                                             66 BANK1     25    25      0
                            ___aldiv
                            ___almod
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                              _pause
                           _pinSetup
                             _printf
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         38    38      0   91347
                                            118 BANK0      2     2      0
                                             30 BANK1     36    36      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1274
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     430
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     214
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pause                                                2     0      2   51255
                                            101 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   51011
                                             85 BANK0     16     6     10
                                              0 BANK1     30    30      0
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11394
                                             48 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   11196
                                             48 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2769
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1676
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2281
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4027
                                             70 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1416
                                             12 BANK0      9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   19869
                                            118 BANK0      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   18515
                                            108 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   17461
                                             85 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     572
                                             70 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4880
                                             33 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3042
                                             18 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3602
                                             58 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2495
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2670
                                              8 BANK0     10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             14 BANK0     10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _service                                             19    19      0   24361
                                            103 COMRAM    19    19      0
              _servoInterruptService
                         i2_lcdClear
                           i2_printf
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            41    37      4   22265
                                             63 COMRAM    40    36      4
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (9) i2_scale                                             13    10      3    4841
                                             35 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2_fround                                            16    13      3    4643
                                             35 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4    1093
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftmul                                          15     9      6    1519
                                             20 COMRAM    15     9      6
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     820
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (9) i2__div_to_l_                                        12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (9) i2___lltoft                                           9     5      4     560
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___llmod                                            9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     330
                                             42 COMRAM    15    11      4
                          i2___ftmul (ARG)
                            i2_scale (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftsub                                            6     0      6    1528
                                             57 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftadd                                          12     6      6    1409
                                             45 COMRAM    12     6      6
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2___ftneg                                            3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2___ftge                                             9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) i2_lcdClear                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _servoInterruptService                                4     4      0    1636
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (8) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2_digitalWrite                                       9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     920
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pause
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_lcdClear
     i2_lcdInst
       i2_lcdNibble
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       i2___ftpack
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_scale (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_isdigit
     i2_putch
       i2_lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     5B      B8       7       71.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7E      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B5      34        0.0%
DATA                 0      0     1B5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 27 15:48:23 2017

                  ___altoft@exp 0090                               _n 00FE               main@cylinderStart 0155  
          main@cylinderBackward 0151                   ___altoft@sign 0091                     _sortBattery 19D0  
                  ___awdiv@sign 008B             ___wmul@multiplicand 0090                     __CFG_BORV$3 000000  
                    i2___ftpack 4CCE                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000  
              _redirectingServo 0194                    ___ftadd@exp1 00C5                    ___ftadd@exp2 00C4  
                    i2___lltoft 53AA             main@cylinderForward 014F                    ___ftadd@sign 00C3  
                           l205 5806                             l128 2AB4                             l241 5774  
                           l137 2BA0                             l129 2ABC                             l314 40B6  
                           l420 5408                             l244 5782                             l413 549E  
                           l422 5414                             l158 1E66                             l423 5420  
                           l339 561E                             l720 09C2                             l760 0842  
                           l769 0A30                    __CFG_CPB$OFF 000000                             _PEN 007E2A  
                  __CFG_CPD$OFF 000000                             _SEN 007E28                    ___awmod@sign 0085  
                           wreg 000FE8                      i2_lcdClear 58FC                    __CFG_LVP$OFF 000000  
                  ___ftdiv@cntr 009B                    ___ftdiv@sign 00A0                    __CFG_WDT$OFF 000000  
                          l1103 3018                            l1024 37BC                            l1121 3570  
                          l1114 3BA8                            l1122 35B4                            l1203 4CBC  
                          l1213 4F44                            l1056 43D8                            l1128 3634  
                          l1153 5766                            l1083 2EF0                            l1085 2F18  
                          l1094 2FEE                            l1079 2EB6                            l5011 2E06  
                          l5003 2D22                            l5111 35FE                            l5031 21B6  
                          l5025 20F0                            l5203 4A88                            l5107 35EA  
                          l5043 2340                            l5035 21DC                            l5221 4C56  
                          l5133 3692                            l5117 361A                            l5061 57BE  
                          l5127 366C                            l5119 362A                            l5071 34E2  
                          l5217 4C40                            l5241 4EEE                            l5049 2406  
                          l5219 4C50                            l5251 5182                            l5171 3786  
                          l5155 373A                            l5147 36E6                            l7011 2B5E  
                          l5229 4CAA                            l5245 4F32                            l5237 4ED8  
                          l5253 5192                            l5077 351C                            l7013 2B6A  
                          l4623 4E4A                            l5239 4EE8                            l5167 3772  
                          l7023 2B8E                            l7007 2AC4                            l4561 432E  
                          l4625 4E5A                            l4713 3B06                            l5193 4A04  
                          l5185 54C6                            l5177 37A2                            l5601 01CC  
                          l5521 458A                            l4571 43BC                            l4563 433C  
                          l4651 2F0E                            l4707 3ACC                            l5179 37B2  
                          l4803 4B70                            l5611 021C                            l5531 45BA  
                          l5515 456E                            l4573 43CA                            l4565 436C  
                          l4557 431A                            l4661 2F50                            l4645 2EFE  
                          l4733 3B66                            l5197 4A44                            l5621 0262  
                          l5605 01F2                            l5533 45C2                            l5525 459E  
                          l6421 1B98                            l4671 2F9A                            l4639 2EC4  
                          l4911 3CAA                            l4815 4BA4                            l4831 4BF4  
                          l5703 0606                            l5615 0230                            l5607 01FE  
                          l5527 45A6                            l5519 4582                            l6407 1A92  
                          l6423 1BC6                            l5473 5462                            l4585 43FE  
                          l4569 438C                            l4681 2FE2                            l4673 2FA6  
                          l4753 396E                            l4921 3CDA                            l4817 4BB0  
                          l4809 4B86                            l5721 06A2                            l5705 060C  
                          l5617 024A                            l5609 0204                            l5553 0038  
                          l5537 45D6                            l6531 4256                            l5467 5458  
                          l4579 43E2                            l4667 2F7E                            l4923 3CEA  
                          l4915 3CBE                            l4835 4C08                            l4827 4BE6  
                          l4819 4BB6                            l4851 4DA8                            l5731 06F8  
                          l5635 02D8                            l5627 027A                            l5555 004E  
                          l5539 45DE                            l6443 1D2A                            l6533 4266  
                          l6525 4228                            l5485 5476                            l4669 2F8C  
                          l4773 39F6                            l4925 3CF4                            l5901 0CF2  
                          l5821 0AA8                            l5813 0A7A                            l5741 072A  
                          l5725 06CA                            l5717 0652                            l5661 03D0  
                          l5645 031E                            l5629 02BE                            l5565 0088  
                          l5573 00FE                            l5549 0022                            l6551 42EE  
                          l6543 42C0                            l6535 426C                            l6519 420A  
                          l5479 546E                            l4687 3042                            l4679 2FD4  
                          l4783 3A34                            l4759 39A8                            l4871 4E14  
                          l4863 4DF2                            l4855 4DBC                            l4847 4D98  
                          l5903 0D76                            l5911 0DFE                            l5743 073E  
                          l5735 0706                            l5591 0198                            l5583 016C  
                          l5559 0058                            l6455 1E0E                            l6439 1CF0  
                          l4697 3090                            l4777 3A14                            l4929 3D10  
                          l4857 4DC8                            l5913 0E06                            l5833 0AEE  
                          l5809 0A52                            l5761 0824                            l5737 071C  
                          l5753 07F4                            l5673 046E                            l5593 019E  
                          l5585 0182                            l6473 1EC4                            l6465 1E70  
                          l6547 42D2                            l6571 4856                            l6563 4822  
                          l4883 55E8                            l4787 3A52                            l5499 542C  
                          l4859 4DCE                            l4867 4E00                            l5835 0AF4  
                          l5851 0B4C                            l5819 0AA2                            l5771 086A  
                          l5755 0802                            l5747 0766                            l5675 0484  
                          l5595 01A4                            l5579 0126                            l5915 0E1C  
                          l5931 4044                            l5923 3FCC                            l6459 1E3A  
                          l6467 1E86                            l6573 4866                            l4893 3C18  
                          l5909 0DEC                            l5781 0998                            l5765 0846  
                          l5685 0514                            l5677 04B4                            l5669 0440  
                          l5589 0192                            l6575 486C                            l6583 48C2  
                          l6567 483A                            l5871 0C10                            l5855 0B74  
                          l5783 09A6                            l5775 08BC                            l5759 0810  
                          l5679 04CA                            l5927 4008                            l5919 3F90  
                          l6479 1EF4                            l5945 4906                            l5953 4984  
                          l5873 0C1A                            l5865 0BD8                            l5849 0B3A  
                          l5689 0542                            l5937 4080                            l6587 48DE  
                          l6579 48B0                            l5891 0CA4                            l5859 0BA4  
                          l5795 09EA                            l5787 09B4                            l5699 05A0  
                          l5949 495C                            l5893 0CB0                            l5885 0C88  
                          l5877 0C52                            l5879 0C5C                            l5897 0CCA  
                          l6965 2824                            l6993 290C                            l6979 28C8  
                          _EEIF 007D0C           __size_ofi2__div_to_l_ 0128                            STR_1 FFF6  
                          STR_2 FFC9                            STR_3 FFE5                            STR_4 FECB  
                          STR_5 FFDA                            STR_6 FFEE                            STR_7 FF0A  
                          STR_8 FFB8                            STR_9 FEF8                            _LATA 000F89  
                          _LATB 000F8A                            _LATC 000F8B                            _LATD 000F8C  
                          _LATE 000F8D                            u6000 0364                            u5121 34BE  
                          u4411 2E64                    printf@tmpval 010A                            u4421 2E82  
                          u5141 34F8                            u6005 0358                            _PEIE 007F96  
                          u6220 083A                            u4621 3AA8                            u4641 3AE2  
                          _RCEN 007E2B                            u4671 394A                            u4691 3984  
                          u5804 454C                            u4861 3BF4                            u5805 4544  
                          u8070 2A92                            u4880 3C3E                            u6544 3FB4  
                          u8080 2A94                            u6545 3FAE                            u6554 3FF0  
                          u6555 3FEA                            u6564 402C                            u4885 3C34  
                          u6565 4026                            u6574 4068                            u6575 4062  
                          u8507 580A                            u8427 29BA                            u8517 5544  
                          u8437 1A12                            u8527 557A                            u8447 1ACA  
                          u8537 57D0                            u8457 1BFC                            u8547 57E6  
                          u8467 1D4C                            u8557 5216                            u8477 1EAC  
                          u8567 5224                            u8487 1EE4                            u8577 5254  
                          u8497 1F22                            u8587 5262                            _RSEN 007E29  
                          _main 281C                            _curr 007B                    ___ftpack@arg 0080  
                          _keys FEB3                    ___ftpack@exp 0083                            _time 01AC  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 007E                    i2___ftadd@f1 002E  
                  i2___ftadd@f2 0031                    i2___ftge@ff1 0001                    i2___ftge@ff2 0004  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                 __CFG_IESO$OFF 000000                 __end_ofi2_scale 281C                    i2___ftneg@f1 0001  
               __end_ofi2_putch 5886                   __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00AE  
                  i2___ftmul@f1 0015                    i2___ftmul@f2 0018                    ___param_bank 000000  
                  ___ftmul@sign 00AF                    i2___ftsub@f1 003A                    i2___ftsub@f2 003D  
                  i2___fttol@f1 002B                     i2_lcdNibble 5344                    ___fttol@exp1 00D4  
                  i2___lltoft@c 0009                    ___fttol@lval 00D0            __end_ofi2_startTimer 553C  
          __end_of_angleToPulse 3934                 __end_of___aldiv 4300                 __end_of___almod 48F0  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
               __end_of___awdiv 4C12                           _EEADR 000FA9                 __end_of___ftadd 30B6  
                         STR_10 FF85                           STR_11 FF1C                           STR_12 FF74  
                         STR_13 FEE5                           STR_14 FF96                           STR_15 FF2E  
                         STR_16 FF63                           STR_17 FF40                           STR_18 FFA7  
                         STR_19 FF52                 __end_of___awmod 4E1E                 __end_of___ftdiv 3BDE  
       ??_servoInterruptService 0010                 __end_of___ftneg 5774                 __end_of___lldiv 4CCE  
               __end_of___ftmul 3A92                           _T0CON 000FD5                 ___awdiv@divisor 0088  
                         _T1CON 000FCD                 __end_of___llmod 4F56                 __end_of___ftsub 54F0  
               __end_of___fttol 3D22                           _T3CON 000FB1                           i2l205 5874  
                         i2l420 54F2                           i2l181 3E20                           i2l422 54FE  
                         i2l423 550A                           i2l720 1646                           i2l760 14E6  
                         i2l769 16A6                 ___awdiv@counter 008A                           _TMR0H 000FD7  
                         _TMR1H 000FCF                           _TMR0L 000FD6                           _TMR3H 000FB3  
                         _TMR1L 000FCE                           _TMR3L 000FB2                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _PORTD 000F83  
                  i2__div_to_l_ 40BE                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                 __end_of_lcdHome 58F4  
                  ___lltoft@exp 0090                   _conveyorServo 017C                 __end_of_lcdInst 57F2  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000           __size_ofi2_lcdNewline 0008  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
               __end_of_initLCD 5586                  __CFG_EBTRB$OFF 000000                      i2isdigit@c 0003  
                 ___awtoft@sign 008B                           _angle 0164                 __end_of_dpowers FE45  
                    i2scale@scl 002A                           _count 01B2                           _scale 1F7E  
               __end_of_isdigit 57C8                           _pause 58C6                   ___ftpack@sign 0084  
                         _pulse 0198                           _putch 57F2                           pclath 000FFA  
                         tablat 000FF5                __end_ofi2___ftge 4FE6                 __end_of_service 3E5C  
              __end_ofi2___wmul 5840                           status 000FD8                __end_ofi2_fround 32FC  
            __size_ofi2___awdiv 0084              __size_ofi2___ftadd 01AC              __size_ofi2___awmod 0070  
                __CFG_PBADEN$ON 000000                   i2printf@width 0061              __size_ofi2___ftneg 0024  
            __size_ofi2___lldiv 0082              __size_ofi2___ftmul 00F4              __size_ofi2___llmod 0066  
            __size_ofi2___ftsub 0040              __size_ofi2___fttol 00F4                __end_ofi2_printf 19D0  
          __end_of_digitalWrite 4616                 __initialization 5586               i2___lldiv@divisor 0005  
            __size_ofi2_lcdInst 0022                    __end_of_main 2BA2               i2___lldiv@counter 000D  
                  __end_of_keys FEC4                   i2___ftmul@exp 001E                      i2printf@ap 0052  
                    i2printf@cp 004E              __size_ofi2_isdigit 001E                     ?i2___ftpack 0001  
                  i2_lcdNewline 58F4                     ?i2___lltoft 0009                          ??_main 0142  
                 ___fttol@sign1 00CF                   __activetblptr 000002            __size_of_digitalRead 0130  
          __size_of__tdiv_to_l_ 019E                    _stoppingTime 0176                 i2digitalWrite@p 000E  
                   ?i2_lcdClear 0001                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                __end_of___altoft 4EBC                ___llmod@dividend 008D  
                        ?_scale 00B0                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                          _EEDATA 000FA8                          ?_pause 00E5  
                        _EECON1 000FA6                          _EECON2 000FA7                ___awdiv@dividend 0086  
               i2lcdNibble@data 0002                __end_of___awtoft 5610                          ?_putch 0001  
              __end_of___ftpack 440C                 i2lcdNibble@temp 0001                __end_of___lltoft 51F6  
                        _INT0IE 007F94                          _INT0IF 007F91                          _INT1IE 007F83  
                        _INT1IF 007F80                    sortBattery@V 0128                          i2l1103 3436  
                        i2l1024 41D4                          i2l1121 3EEE                          i2l1122 3F16  
                        i2l1203 5168                          i2l1213 5332                          i2l1056 4D5C  
                        i2l1128 3F7C                          i2l1153 5856                    sortBattery@i 013C  
                        i2l1083 336A                          i2l1094 341A                          i2l1079 3340  
                        i2l6001 4AF2                          i2l6003 4AF8                          i2l6013 4B1A  
                        i2l6101 40DC                          i2l6007 4B06                          i2l6015 4B20  
                        i2l5303 50E0                          i2l6009 4B0C                          i2l6121 413C  
                        i2l6201 3F52                          i2l5331 52A8                          i2l5323 528E  
                        i2l5403 3452                          i2l6107 40FA                          i2l5307 50EE  
                        i2l6029 5516                          i2l5413 3482                          i2l6141 419A  
                        i2l6053 32BC                          i2l6045 31FC                          i2l5343 52D4  
                        i2l5335 52BC                          i2l5327 529C                          i2l5319 5282  
                        i2l6215 4F86                          i2l6151 41C2                          i2l6207 3F6A  
                        i2l5423 463E                          i2l5329 52A4                          i2l6225 4FE2  
                        i2l5361 3378                          i2l6305 511A                          i2l6153 41CE  
                        i2l6145 41AA                          i2l6129 416C                          i2l6209 3F76  
                        i2l6161 3E88                          i2l5281 5098                          i2l6073 2604  
                        i2l7041 3DBC                          i2l5339 52C6                          i2l6219 4FB6  
                        i2l5355 334E                          i2l6307 5126                          i2l5291 50BA  
                        i2l5275 5088                          i2l5443 4698                          i2l6091 27F8  
                        i2l6067 2560                          i2l7035 3DAC                          i2l6237 5668  
                        i2l6317 515A                          i2l6309 512A                          i2l6333 5324  
                        i2l6325 52F0                          i2l6341 53BC                          i2l5453 46C0  
                        i2l5429 4666                          i2l6085 2754                          i2l6077 2628  
                        i2l7061 3E08                          i2l7053 3DE6                          i2l5383 33CA  
                        i2l6247 4736                          i2l6327 52FC                          i2l6167 3EB4  
                        i2l5287 50AE                          i2l5447 46A8                          i2l5385 33D4  
                        i2l5377 33A8                          i2l6265 479C                          i2l6329 5300  
                        i2l5289 50B6                          i2l5457 46D0                          i2l6601 0E6C  
                        i2l7057 3DF6                          i2l5395 3408                          i2l5387 33DE  
                        i2l6283 47EC                          i2l6275 47C4                          i2l6339 53B0  
                        i2l5299 50D6                          i2l6611 0EA0                          i2l5397 3412  
                        i2l5389 33E6                          i2l6277 47D0                          i2l6269 47AC  
                        i2l6197 3F42                          i2l6605 0E72                          i2l4951 4CF6  
                        i2l6279 47D6                          i2l6295 58BE                          i2l6631 0F6A  
                        i2l4961 4D52                          i2l4953 4D14                          i2l4945 4CDE  
                        i2l6801 14B6                          i2l6721 11DE                          i2l6641 0F82  
                        i2l6625 0F1E                          i2l6811 14EA                          i2l6731 1250  
                        i2l6723 120C                          i2l6715 11AA                          i2l6707 1146  
                        i2l6651 0FB4                          i2l6635 0F76                          i2l6619 0EFC  
                        i2l4957 4D2A                          i2l4949 4CEC                          i2l6901 17A8  
                        i2l6821 1552                          i2l6805 14C2                          i2l6725 121C  
                        i2l6661 0FE8                          i2l6653 0FBE                          i2l6637 0F7A  
                        i2l6629 0F54                          i2l4959 4D48                          i2l6911 17EA  
                        i2l6807 14D0                          i2l6751 1330                          i2l6735 1274  
                        i2l6719 11CE                          i2l6663 0FFC                          i2l6655 0FC4  
                        i2l6647 0F9E                          i2l6639 0F7E                          i2l6905 17C8  
                        i2l6841 166A                          i2l6833 163C                          i2l6817 1502  
                        i2l6745 12C8                          i2l6681 1076                          i2l6657 0FD6  
                        i2l6673 1022                          i2l6931 185E                          i2l6923 1838  
                        i2l6827 1626                          i2l6771 13B2                          i2l6763 1368  
                        i2l6691 10B6                          i2l6667 1010                          i2l6675 1062  
                        i2l6595 0E48                          i2l6925 1840                          i2l6917 180C  
                        i2l6829 1630                          i2l6781 13DE                          i2l6749 132C  
                        i2l5991 4AD0                          i2l6943 1890                          i2l6919 1814  
                        i2l6855 16C6                          i2l6783 13EE                          i2l6767 1398  
                        i2l6599 0E5A                          i2l6937 1874                          i2l6881 1744  
                        i2l6865 1704                          i2l6793 1424                          i2l6777 13D2  
                        i2l6961 19B4                          i2l5995 4ADE                          i2l6947 18AC  
                        i2l6955 198E                          i2l6939 187C                          i2l6867 1708  
                        i2l6859 16EA                          i2l6787 13FA                          i2l5997 4AE4  
                        i2l6949 1924                          i2l6957 199E                          i2l6789 1408  
                        i2l6959 19A4                          i2l6879 1740                          i2l6895 177C  
                        i2l6799 14AC                          i2l6897 178C                       ??i2_scale 0027  
                        u552_41 330C                          u553_41 3320                          u573_41 4626  
                        u575_41 464E                          _TMR0IE 007F95                          _TMR0IF 007F92  
                     ??i2_putch 0005                          _TMR1IE 007CE8                          _TMR1IF 007CF0  
                        u685_41 3E6C                          _TMR3IE 007D01                          u687_41 3E98  
                        u699_41 471A                          _SSPADD 000FC8                          _TRISC3 007CA3  
                        _TRISC4 007CA4                          _SSPBUF 000FC9          __size_ofi2__tdiv_to_l_ 0132  
              __end_of_lcdClear 58EC               _angleToPulse$1347 00E5                  __CFG_XINST$OFF 000000  
                  i2_scale$1545 0027                __end_of__powers_ FE93                          ___ftge 49C4  
                     ??___aldiv 0088                       ??___almod 0096                          ___wmul 570E  
                     ??___awdiv 008A                       ??___ftadd 00C0                  __CFG_STVREN$ON 000000  
                     ??___awmod 0084                       ??___ftdiv 0098                       ??___ftneg 0083  
                     ??___lldiv 0088                       ??___ftmul 00A7                       ??___llmod 0095  
                     ??___ftsub 00CC                       ??___fttol 00CA                          _fround 2BA2  
                        clear_0 55AC                ___awdiv@quotient 008C                          _period 016C  
               ___awmod@divisor 0082                       ??_lcdHome 0084                 ___awmod@counter 0084  
                        _servos 01A0                       ??_lcdInst 0082                          _printf 0012  
              __end_of_pinSetup 56D0                __end_of_setAngle 49C4                  i2___awdiv@sign 000C  
             analogRead@channel 0080           ___ftmul@f3_as_product 00AB                       ??_initLCD 0084  
                     ??_isdigit 0080               __end_ofi2___awdiv 50F8               __end_ofi2___ftadd 34A8  
             __end_ofi2___awmod 52DE                  i2___ftadd@exp1 0039                  i2___ftadd@exp2 0038  
             __end_ofi2___ftneg 5864               __end_ofi2___lldiv 517A               __end_ofi2___ftmul 470A  
                 setAngle@angle 00EE               __end_ofi2___llmod 5344               __end_ofi2___ftsub 5692  
             __end_ofi2___fttol 47FE                  i2___ftadd@sign 0037                    __mediumconst FE1C  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                 setAngle@motor 00EC                       ??_service 0068                  i2___awmod@sign 0006  
             __end_ofi2_lcdInst 58A8               __end_ofi2_isdigit 58C6                      __accesstop 0080  
       __end_of__initialization 55BE                      ___altoft@c 0088                      ___ftadd@f1 00BA  
                    ___ftadd@f2 00BD             __size_ofi2___ftpack 00AE                  i2printf@tmpval 0054  
                    ___ftge@ff1 008C                      ___ftge@ff2 008F             __size_ofi2___lltoft 005C  
                 ___rparam_used 000001                      ___ftdiv@f1 0092                      ___ftdiv@f2 0095  
                    ___ftdiv@f3 009C                      ___ftneg@f1 0080                      ___awtoft@c 0088  
                i2___ftpack@arg 0001           __size_ofi2_startTimer 004C              i2__tdiv_to_l_@exp1 000F  
             i2___llmod@divisor 0012                  i2___ftpack@exp 0004              i2__tdiv_to_l_@cntr 000E  
             i2___llmod@counter 0016              i2__tdiv_to_l_@quot 000A                      ___ftmul@f1 00A1  
                    ___ftmul@f2 00A4                      ___ftsub@f1 00C6                      ___ftsub@f2 00C9  
                    ___fttol@f1 00C6            __end_of_happynewyear FECB                  __pcstackCOMRAM 0001  
            i2___lldiv@dividend 0001           __size_of_angleToPulse 0166             __size_ofi2_lcdClear 0008  
                  __pidataBANK1 56D0                      ___lltoft@c 0088                   _cylinderMotor 0184  
                i2___ftmul@cntr 0022                   __end_of_scale 242C                    ?_sortBattery 0001  
                 __end_of_pause 58DC                  i2___ftmul@sign 0023                   __end_of_putch 581A  
                   i2printf@idx 004D                     i2printf@len 0050                     i2printf@exp 0058  
                   i2printf@val 005D                  i2___fttol@exp1 0039                  i2___fttol@lval 0035  
                     ?i2___ftge 0001                       ?i2___wmul 000F                   i2__tdiv_to_l_ 3E5C  
            __size_of_lcdNibble 0078                      __div_to_l_ 3646                     i2putch@data 0005  
                     ?i2_fround 0024                       ?i2_printf 0040                 __div_to_l_@exp1 008B  
               __div_to_l_@cntr 008A                         ??_scale 00B3                  i2___lltoft@exp 0011  
                       ??_pause 00E7                 __div_to_l_@quot 0086                         ??_putch 0084  
            i2___lldiv@quotient 0009                    i2_startTimer 54F0                      __pbssBANK0 00FE  
                    __pbssBANK1 0198                i2__tdiv_to_l_@f1 0001                i2__tdiv_to_l_@f2 0004  
                  _angleToPulse 37CE           __size_of_digitalWrite 0104              __size_of_initTimer 004E  
            __size_of_initServo 008E                      _analogRead 5610                   __div_to_l_@f1 0080  
                 __div_to_l_@f2 0083                         ?___ftge 008C                    ?i2_lcdNibble 0001  
                       ?___wmul 008E                _sortBattery$1346 0126           sortBattery@resolution 0136  
                     ?___altoft 0088                         ?_fround 00B0                      _lcdNewline 58DC  
                     ?___awtoft 0088                       ?___ftpack 0080                         ?_printf 00D5  
                     ?___lltoft 0088                  ?i2__tdiv_to_l_ 0001                      ??i2___ftge 0007  
                    ??i2___wmul 0013                   sortBattery@Vf 0139                   sortBattery@Vs 011E  
__size_of_servoInterruptService 0106   __end_of_servoInterruptService 4512                      ??i2_fround 0027  
             i2startTimer@timer 0007                       ?_lcdClear 0001                angleToPulse@a000 00E8  
                    ??i2_printf 0044                angleToPulse@a180 00E1                    _digitalWrite 4512  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
       __size_ofi2_digitalWrite 00C8                         i2_scale 242C                         _V_LIM_C 0161  
           main@lastBatteryTime 0153                         i2_putch 5864                       ?_pinSetup 0001  
                     ?_setAngle 00EC               __end_of_lcdNibble 526E               __end_of__npowers_ FE6C  
                       __Hparam 0000                      _scale$1350 00B3                         __Lparam 0000  
                       ___aldiv 41E6                         ___almod 47FE                 __size_of___ftge 00C8  
                       ___awdiv 4B54                         ___ftadd 2E4E                         ___awmod 4D7C  
                    _readKeypad 5774                         ___ftdiv 3A92                         ___ftneg 5744  
                       ___lldiv 4C12                 __size_of___wmul 0036                         ___ftmul 3934  
                       ___llmod 4EBC                         ___ftsub 54A4                         ___fttol 3BDE  
                    ??___altoft 008C                         __pcinit 5586                    ??i2___ftpack 0006  
                    ??___awtoft 008B                      ??___ftpack 0085                 __size_of_fround 02AC  
       i2___ftmul@f3_as_product 001F                         __ramtop 1000                         _lcdHome 58EC  
                  ??i2___lltoft 000D                         _lcdInst 57C8                      ??___lltoft 008C  
                       __ptext0 281C                         __ptext1 19D0                         __ptext2 4512  
                       __ptext3 3F8E                         __ptext4 5610                         __ptext5 5692  
                       __ptext6 58C6                         __ptext7 5774                         __ptext8 0012  
                       __ptext9 1F7E                 __size_of_printf 0E2A                         _padPin1 0188  
                       _padPin2 018C                         _padPin3 01A8                   i2_fround$1543 002A  
                 i2_fround$1544 0027                   startTimer@val 0082                         _initLCD 553C  
             __end_of_hexpowers FEB3                     ?__div_to_l_ 0080                         _lastKey 007D  
             __end_of_initTimer 54A4               __end_of_initServo 5074                   i2_isdigit$976 0002  
                       _dpowers FE1D                    i2fround@prec 002D                         _isdigit 579E  
              ___awmod@dividend 0080                ___aldiv@dividend 0080                    ??i2_lcdClear 0005  
                    ??_lcdClear 0084                         _service 0008                  __pintcode_body 3D22  
          end_of_initialization 55BE                   __Lmediumconst FE1C                         int_func 3D22  
           i2___wmul@multiplier 000F                  digitalRead@pin 0080                     ?_analogRead 0080  
            __end_ofi2___ftpack 4D7C                      ??_pinSetup 0080                      ??_setAngle 00F0  
            __end_ofi2___lltoft 5406                 ___lldiv@divisor 0084                 ___lldiv@counter 008C  
                setAngle@period 00F2                         printf@c 011D                         printf@f 00D5  
              ___aldiv@quotient 008A                         postdec1 000FE5                         postdec2 000FDD  
               _batteryDetected 01B0                         postinc0 000FEE                         postinc2 000FDE  
            __end_ofi2_lcdClear 5904                  __tdiv_to_l_@f1 0080                  __tdiv_to_l_@f2 0083  
               ??i2__tdiv_to_l_ 0007                   ??_digitalRead 0082                     ?_lcdNewline 0001  
                 ??__tdiv_to_l_ 0086                       _PORTBbits 000F81            __size_of_sortBattery 05AE  
           _redirectAngle_OTHER 0174                    _happynewyear FEC4              angleToPulse@offset 00DD  
            sortBattery@V_float 0121                       i2___awdiv 5074                       i2___ftadd 32FC  
                     i2___awmod 526E                       i2___ftneg 5840                       i2___lldiv 50F8  
                     i2___ftmul 4616                       i2___llmod 52DE                       i2___ftsub 5652  
                     i2___fttol 470A                      _startTimer 5406                       i2_lcdInst 5886  
                   ___ftdiv@exp 009F                     printf@width 0117              i2___llmod@dividend 000E  
            i2___awdiv@dividend 0007                 i2___ftpack@sign 0005                       i2_isdigit 58A8  
           __size_of__div_to_l_ 0188                     ___ftmul@exp 00AA                     ?_readKeypad 0001  
                __end_of___ftge 4A8C                  __end_of___wmul 5744            __size_ofi2_lcdNibble 0066  
                 i2lcdInst@data 0004                  __end_of_fround 2E4E                i2___wmul@product 0013  
                __end_of_printf 0E3C                   i2_printf$1546 004A                    i2printf@flag 0063  
                  i2printf@fval 005A             __size_of_analogRead 0042                    i2printf@prec 0065  
           start_initialization 5586               __size_ofi2___ftge 0090             __end_of_digitalRead 40BE  
            i2___awdiv@quotient 000D               __size_ofi2___wmul 0026             __end_of__tdiv_to_l_ 3646  
                initServo@angle 00F8                       i2printf@c 0067                       i2printf@f 0040  
                initTimer@timer 0080                 i2___fttol@sign1 0034                  initServo@motor 00F6  
             __size_ofi2_fround 0246                      ?i2___awdiv 0007                      ?i2___ftadd 002E  
                    ?i2___awmod 0001                      ?i2___ftneg 0001                      ?i2___lldiv 0001  
                    ?i2___ftmul 0015                      ?i2___llmod 000E                      ?i2___ftsub 003A  
                    ?i2___fttol 002B               __size_ofi2_printf 0B94                  i2_digitalWrite 4A8C  
                    ?i2_lcdInst 0001             __size_of_lcdNewline 0008                 ___llmod@divisor 0091  
               ___llmod@counter 0095                      ?i2_isdigit 0001                        ??___ftge 0092  
                      ??___wmul 0092                     __pdataBANK1 015B                    pause@message 00E5  
              __CFG_LPT1OSC$OFF 000000                        ??_fround 00B3                        ??_printf 00DF  
             __size_of___altoft 009E                      fround@prec 00B9                   ?i2__div_to_l_ 0001  
             __size_of___awtoft 0044               __size_of___ftpack 010C               __size_of___lltoft 007C  
                   __pbssCOMRAM 007B                   __pcstackBANK0 0080                   __pcstackBANK1 0100  
        __end_ofi2_digitalWrite 4B54          sortBattery@targetAngle 012E                     ?_startTimer 0080  
             __size_of_lcdClear 0008             __size_of_readKeypad 002A                        ?i2_scale 0024  
                      ?i2_putch 0001               i2digitalWrite@pin 0007               i2digitalWrite@val 0009  
             __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 003E               __size_of_setAngle 00D4  
                     __pintcode 0008                   __pmediumconst FE1C                       _lcdNibble 51F6  
                      ?___aldiv 0080                        ?___almod 008E                        ?___awdiv 0086  
                      ?___ftadd 00BA                        ?___awmod 0080                        ?___ftdiv 0092  
                      ?___ftneg 0080                        ?___lldiv 0080                        ?___ftmul 00A1  
                      ?___llmod 008D                        ?___ftsub 00C6                       __npowers_ FE45  
                      ?___fttol 00C6                   ?i2_lcdNewline 0001                     _digitalRead 3F8E  
              ___almod@dividend 008E                        ?_lcdHome 0001                        ?_lcdInst 0001  
                   __tdiv_to_l_ 34A8                  ??i2__div_to_l_ 0007                    ??__div_to_l_ 0086  
                      ?_initLCD 0001                 startTimer@timer 0080                        ?_isdigit 0001  
                      ?_service 0001                       _hexpowers FE93                       _initTimer 5456  
                     _initServo 4FE6                 ?i2_digitalWrite 0007           _servoInterruptService 440C  
                   ??i2___awdiv 000B                     ??i2___ftadd 0034                     ??i2___awmod 0005  
                   ??i2___ftneg 0004                     ??i2___lldiv 0009                     ??i2___ftmul 001B  
                __size_of_scale 04AE                     ??i2___llmod 0016                     ??i2___ftsub 0040  
                   ??i2___fttol 002F                  __size_of_pause 0016                  __size_of_putch 0028  
                      _AA_float 0178                 ___aldiv@divisor 0084                     ??i2_lcdInst 0003  
               ___aldiv@counter 0088                  sortBattery@Vcc 0133                  ___wmul@product 0092  
                      _LATDbits 000F8C                    ??_analogRead 0084                     ??i2_isdigit 0001  
            __end_of__div_to_l_ 37CE                        i2u701_40 4754                        i2u701_45 474C  
                      i2u752_40 10EE                        i2u752_45 10E4                        i2u665_44 4AB6  
                      i2u665_45 4AB0                        i2u860_47 588C                        i2u861_47 589E  
                      i2u774_40 14E0                        i2u862_47 535C                        i2u863_47 536A  
                      i2u864_47 5390                        i2u865_47 539E                        i2u859_47 5878  
              __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001                  _padAngle_CLOSE 0166  
                     _terminate 01B6                 i2__div_to_l_@f1 0001                 i2__div_to_l_@f2 0004  
                 digitalWrite@p 0087                  ??i2_lcdNewline 0005                      service@key 007A  
                  ??_lcdNewline 0084             __size_of_startTimer 0050               angleToPulse@angle 00D5  
               main@cylinderDur 0157               ___wmul@multiplier 008E                        i2___ftge 4F56  
                      i2___wmul 581A                   lcdNibble@data 0081                      printf@flag 0119  
                 lcdNibble@temp 0080                      printf@fval 0114                      printf@prec 011B  
             i2___awdiv@divisor 0009                        i2_fround 30B6              __end_of_analogRead 5652  
                      _V_LIM_AA 015E                        _V_LIM_9V 015B               i2___awdiv@counter 000B  
                      i2_printf 0E3C                      ?_initTimer 0080                      ?_initServo 00F6  
             sortBattery@signal 0132        sortBattery@pos_v_counter 0124                       copy_data0 559A  
            i2___awmod@dividend 0001                __size_ofi2_scale 03F0                __size_ofi2_putch 0022  
            __end_of_lcdNewline 58E4                   readKeypad@key 0080                        __Hrparam 0000  
                      __Lrparam 0000              __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0080  
                 ??_sortBattery 00F6                __size_of___aldiv 011A                __size_of___almod 00F2  
              __size_of___awdiv 00BE                __size_of___ftadd 0268                __size_of___awmod 00A2  
              __size_of___ftdiv 014C                __size_of___ftneg 0030           i2___wmul@multiplicand 0011  
              __size_of___lldiv 00BC                        ___altoft 4E1E                __size_of___ftmul 015E  
              __size_of___llmod 009A                __size_of___ftsub 004C                __size_of___fttol 0144  
                      ___awtoft 55CC                        ___ftpack 4300                     _fround$1348 00B6  
                   _cylinderDir 0180                     _fround$1349 00B3                        ___lltoft 517A  
         __end_ofi2__tdiv_to_l_ 3F8E                     _isdigit$976 0081                __size_of_lcdHome 0008  
              __size_of_lcdInst 002A                       setAngle@i 00F4                __size_of_initLCD 004A  
              __size_of_isdigit 002A          ?_servoInterruptService 0001                        _lcdClear 58E4  
                      __ptext10 57F2                        __ptext11 58DC                        __ptext20 4EBC  
                      __ptext12 579E                        __ptext21 4C12                        __ptext13 2BA2  
                      __ptext30 37CE                        __ptext22 54A4                        __ptext14 570E  
                      __ptext31 3BDE                        __ptext23 5744                        __ptext15 4D7C  
                      __ptext40 57C8                        __ptext32 3934                        __ptext24 49C4  
                      __ptext16 4B54                        __ptext41 51F6                        __ptext33 3A92  
                      __ptext25 58E4                        __ptext17 34A8                        __ptext50 30B6  
                      __ptext42 47FE                        __ptext34 2E4E                        __ptext26 58EC  
                      __ptext18 3646                        __ptext51 581A                        __ptext43 41E6  
                      __ptext35 55CC                        __ptext27 4FE6                        __ptext19 517A  
                      __ptext60 5652                        __ptext52 4616                        __ptext36 4E1E  
                      __ptext28 5406                        __ptext61 32FC                        __ptext53 5074  
                      __ptext45 0E3C                        __ptext37 4300                        __ptext29 48F0  
                      __ptext70 4A8C                        __ptext62 4CCE                        __ptext54 3E5C  
                      __ptext46 242C                        __ptext38 5456                        __ptext71 526E  
                      __ptext63 5840                        __ptext55 40BE                        __ptext47 5864  
                      __ptext39 553C                        __ptext64 4F56                        __ptext56 53AA  
                      __ptext48 58F4                        __ptext65 58FC                        __ptext57 52DE  
                      __ptext49 58A8                        __ptext66 5886                        __ptext58 50F8  
                      __ptext67 5344                        __ptext59 470A                        __ptext68 440C  
                      __ptext69 54F0                        __powers_ FE6C                __size_of_service 3E54  
               i2startTimer@val 0009                 ___almod@divisor 0092                   ?i2_startTimer 0007  
                      _padServo 0190                 ___almod@counter 0096              __end_of_readKeypad 579E  
                 ?_angleToPulse 00D5                   __size_of_main 0386            __end_ofi2__div_to_l_ 41E6  
                      _pinSetup 5692                        _setAngle 48F0                        _prevTime 01B4  
              sortBattery@V_216 013F                   ??i2_lcdNibble 0001                     ??_lcdNibble 0080  
                 _padAngle_OPEN 016A                        int$flags 007E                sortBattery@i_219 0130  
              sortBattery@V_max 012B                       printf@idx 0105                       printf@len 0106  
                     printf@exp 010E                       printf@val 0110                        main@prev 0159  
             i2___awmod@divisor 0003                       putch@data 0084               i2___awmod@counter 0005  
           __end_of_sortBattery 1F7E                      _INTCONbits 000FF2                   ?_digitalWrite 0080  
                   ??_initTimer 0082                     ??_initServo 00FA                        isdigit@c 0082  
                      scale@scl 00B6                  ??i2_startTimer 000D                    ??_startTimer 0086  
                      intlevel2 0000                __tdiv_to_l_@exp1 008E                __tdiv_to_l_@cntr 008D  
                ??_angleToPulse 00D9            __end_ofi2_lcdNewline 58FC                __tdiv_to_l_@quot 0089  
              ___lldiv@dividend 0080                _redirectAngle_AA 0170                _redirectAngle_9V 016E  
                      printf@ap 0108                        printf@cp 0103                     lcdInst@data 0083  
                  ?_digitalRead 0080                    ?__tdiv_to_l_ 0080              __end_of_startTimer 5456  
                   _printf$1351 0100             __end_ofi2_lcdNibble 53AA                ??i2_digitalWrite 000B  
              ___lldiv@quotient 0088                  ??_digitalWrite 0084                    ___aldiv@sign 0089  
               _redirectAngle_C 0172                _padAngle_NEUTRAL 0168                 digitalWrite@pin 0080  
               digitalWrite@val 0082               i2__div_to_l_@exp1 000C               i2__div_to_l_@cntr 000B  
                  ___almod@sign 0097               i2__div_to_l_@quot 0007  
