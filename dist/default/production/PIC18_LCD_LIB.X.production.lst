

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 13 11:51:33 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74  0000                     
    75                           ; Version 1.40
    76                           ; Generated 01/12/2016 GMT
    77                           ; 
    78                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F4620 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     
   110                           	psect	idataCOMRAM
   111  002498                     __pidataCOMRAM:
   112                           	opt stack 0
   113                           
   114                           ;initializer for _conveyorServo
   115  002498  0000               	dw	0
   116  00249A  0002               	dw	2
   117  00249C  0001               	dw	1
   118                           
   119                           ;initializer for _redirectAngle_AA
   120  00249E  003C               	dw	60
   121                           
   122                           	psect	idataBANK0
   123  0024A0                     __pidataBANK0:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _padAngle_CATCH
   127  0024A0  005A               	dw	90
   128                           
   129                           ;initializer for _padAngle_CLOSE
   130  0024A2  0046               	dw	70
   131                           
   132                           ;initializer for _padAngle_OPEN
   133  0024A4  00B4               	dw	180
   134                           
   135                           ;initializer for _redirectAngle_C
   136  0024A6  0050               	dw	80
   137                           
   138                           	psect	idataBANK1
   139  002466                     __pidataBANK1:
   140                           	opt stack 0
   141                           
   142                           ;initializer for _padServo
   143  002466  0001               	dw	1
   144  002468  0002               	dw	2
   145  00246A  0002               	dw	2
   146                           
   147                           ;initializer for _redirectingServo
   148  00246C  0003               	dw	3
   149  00246E  0002               	dw	2
   150  002470  0003               	dw	3
   151                           
   152                           ;initializer for _cylinderMotor
   153  002472  0002               	dw	2
   154  002474  0000               	dw	0
   155                           
   156                           ;initializer for _padPin1
   157  002476  0000               	dw	0
   158  002478  0001               	dw	1
   159                           
   160                           ;initializer for _padPin2
   161  00247A  0000               	dw	0
   162  00247C  0002               	dw	2
   163                           
   164                           ;initializer for _redirectAngle_9V
   165  00247E  0064               	dw	100
   166                           
   167                           ;initializer for _redirectAngle_OTHER
   168  002480  0078               	dw	120
   169                           
   170                           	psect	mediumconst
   171  00FE58                     __pmediumconst:
   172                           	opt stack 0
   173  00FE58  00                 	db	0
   174  00FE59                     _keys:
   175                           	opt stack 0
   176  00FE59  31                 	db	49
   177  00FE5A  32                 	db	50
   178  00FE5B  33                 	db	51
   179  00FE5C  41                 	db	65
   180  00FE5D  34                 	db	52
   181  00FE5E  35                 	db	53
   182  00FE5F  36                 	db	54
   183  00FE60  42                 	db	66
   184  00FE61  37                 	db	55
   185  00FE62  38                 	db	56
   186  00FE63  39                 	db	57
   187  00FE64  43                 	db	67
   188  00FE65  2A                 	db	42
   189  00FE66  30                 	db	48
   190  00FE67  23                 	db	35
   191  00FE68  44                 	db	68
   192  00FE69  00                 	db	0
   193  00FE6A                     __end_of_keys:
   194                           	opt stack 0
   195  00FE6A                     _dpowers:
   196                           	opt stack 0
   197  00FE6A  0001               	dw	1
   198  00FE6C  000A               	dw	10
   199  00FE6E  0064               	dw	100
   200  00FE70  03E8               	dw	1000
   201  00FE72  2710               	dw	10000
   202  00FE74                     __end_of_dpowers:
   203                           	opt stack 0
   204  00FE74                     _hexpowers:
   205                           	opt stack 0
   206  00FE74  0001               	dw	1
   207  00FE76  0010               	dw	16
   208  00FE78  0100               	dw	256
   209  00FE7A  1000               	dw	4096
   210  00FE7C                     __end_of_hexpowers:
   211                           	opt stack 0
   212  00FE7C                     _happynewyear:
   213                           	opt stack 0
   214  00FE7C  45                 	db	69
   215  00FE7D  59                 	db	89
   216  00FE7E  23                 	db	35
   217  00FE7F  07                 	db	7
   218  00FE80  31                 	db	49
   219  00FE81  12                 	db	18
   220  00FE82  16                 	db	22
   221  00FE83                     __end_of_happynewyear:
   222                           	opt stack 0
   223  0000                     _ADCON0	set	4034
   224  0000                     _ADCON1	set	4033
   225  0000                     _ADCON2	set	4032
   226  0000                     _ADRESH	set	4036
   227  0000                     _ADRESL	set	4035
   228  0000                     _EEADR	set	4009
   229  0000                     _EEADRH	set	4010
   230  0000                     _EECON1	set	4006
   231  0000                     _EECON2	set	4007
   232  0000                     _EEDATA	set	4008
   233  0000                     _INTCONbits	set	4082
   234  0000                     _LATA	set	3977
   235  0000                     _LATB	set	3978
   236  0000                     _LATC	set	3979
   237  0000                     _LATD	set	3980
   238  0000                     _LATDbits	set	3980
   239  0000                     _LATE	set	3981
   240  0000                     _PORTA	set	3968
   241  0000                     _PORTB	set	3969
   242  0000                     _PORTBbits	set	3969
   243  0000                     _PORTC	set	3970
   244  0000                     _PORTD	set	3971
   245  0000                     _SSPADD	set	4040
   246  0000                     _SSPBUF	set	4041
   247  0000                     _SSPCON1	set	4038
   248  0000                     _SSPCON2	set	4037
   249  0000                     _SSPSTAT	set	4039
   250  0000                     _T0CON	set	4053
   251  0000                     _T1CON	set	4045
   252  0000                     _T2CON	set	4042
   253  0000                     _T3CON	set	4017
   254  0000                     _TMR0H	set	4055
   255  0000                     _TMR0L	set	4054
   256  0000                     _TMR1H	set	4047
   257  0000                     _TMR1L	set	4046
   258  0000                     _TMR3H	set	4019
   259  0000                     _TMR3L	set	4018
   260  0000                     _TRISA	set	3986
   261  0000                     _TRISB	set	3987
   262  0000                     _TRISC	set	3988
   263  0000                     _TRISD	set	3989
   264  0000                     _TRISE	set	3990
   265  0000                     _ACKDT	set	32301
   266  0000                     _ACKEN	set	32300
   267  0000                     _EEIF	set	32012
   268  0000                     _INT0IE	set	32660
   269  0000                     _INT0IF	set	32657
   270  0000                     _INT1IF	set	32640
   271  0000                     _PEIE	set	32662
   272  0000                     _PEN	set	32298
   273  0000                     _RCEN	set	32299
   274  0000                     _RSEN	set	32297
   275  0000                     _SEN	set	32296
   276  0000                     _TMR0IE	set	32661
   277  0000                     _TMR0IF	set	32658
   278  0000                     _TMR1IE	set	31976
   279  0000                     _TMR1IF	set	31984
   280  0000                     _TMR2IF	set	31985
   281  0000                     _TMR3IE	set	32001
   282  0000                     _TMR3IF	set	32009
   283  0000                     _TRISC3	set	31907
   284  0000                     _TRISC4	set	31908
   285  00FE83                     STR_9:
   286  00FE83  63                 	db	99	;'c'
   287  00FE84  6F                 	db	111	;'o'
   288  00FE85  6E                 	db	110	;'n'
   289  00FE86  76                 	db	118	;'v'
   290  00FE87  65                 	db	101	;'e'
   291  00FE88  79                 	db	121	;'y'
   292  00FE89  6F                 	db	111	;'o'
   293  00FE8A  72                 	db	114	;'r'
   294  00FE8B  20                 	db	32
   295  00FE8C  26                 	db	38
   296  00FE8D  20                 	db	32
   297  00FE8E  63                 	db	99	;'c'
   298  00FE8F  79                 	db	121	;'y'
   299  00FE90  6C                 	db	108	;'l'
   300  00FE91  69                 	db	105	;'i'
   301  00FE92  6E                 	db	110	;'n'
   302  00FE93  64                 	db	100	;'d'
   303  00FE94  65                 	db	101	;'e'
   304  00FE95  72                 	db	114	;'r'
   305  00FE96  20                 	db	32
   306  00FE97  6F                 	db	111	;'o'
   307  00FE98  6E                 	db	110	;'n'
   308  00FE99  3F                 	db	63	;'?'
   309  00FE9A  00                 	db	0
   310  00FE9B                     STR_6:
   311  00FE9B  73                 	db	115	;'s'
   312  00FE9C  65                 	db	101	;'e'
   313  00FE9D  74                 	db	116	;'t'
   314  00FE9E  20                 	db	32
   315  00FE9F  72                 	db	114	;'r'
   316  00FEA0  65                 	db	101	;'e'
   317  00FEA1  64                 	db	100	;'d'
   318  00FEA2  69                 	db	105	;'i'
   319  00FEA3  72                 	db	114	;'r'
   320  00FEA4  65                 	db	101	;'e'
   321  00FEA5  63                 	db	99	;'c'
   322  00FEA6  74                 	db	116	;'t'
   323  00FEA7  20                 	db	32
   324  00FEA8  61                 	db	97	;'a'
   325  00FEA9  6E                 	db	110	;'n'
   326  00FEAA  67                 	db	103	;'g'
   327  00FEAB  6C                 	db	108	;'l'
   328  00FEAC  65                 	db	101	;'e'
   329  00FEAD  3F                 	db	63	;'?'
   330  00FEAE  00                 	db	0
   331  00FEAF                     STR_18:
   332  00FEAF  25                 	db	37
   333  00FEB0  63                 	db	99	;'c'
   334  00FEB1  29                 	db	41
   335  00FEB2  20                 	db	32
   336  00FEB3  74                 	db	116	;'t'
   337  00FEB4  69                 	db	105	;'i'
   338  00FEB5  6D                 	db	109	;'m'
   339  00FEB6  65                 	db	101	;'e'
   340  00FEB7  20                 	db	32
   341  00FEB8  20                 	db	32
   342  00FEB9  3C                 	db	60	;'<'
   343  00FEBA  41                 	db	65	;'A'
   344  00FEBB  20                 	db	32
   345  00FEBC  20                 	db	32
   346  00FEBD  20                 	db	32
   347  00FEBE  20                 	db	32
   348  00FEBF  20                 	db	32
   349  00FEC0  0A                 	db	10
   350  00FEC1  00                 	db	0
   351  00FEC2                     STR_14:
   352  00FEC2  73                 	db	115	;'s'
   353  00FEC3  74                 	db	116	;'t'
   354  00FEC4  61                 	db	97	;'a'
   355  00FEC5  72                 	db	114	;'r'
   356  00FEC6  74                 	db	116	;'t'
   357  00FEC7  20                 	db	32
   358  00FEC8  20                 	db	32
   359  00FEC9  20                 	db	32
   360  00FECA  3C                 	db	60	;'<'
   361  00FECB  42                 	db	66	;'B'
   362  00FECC  20                 	db	32
   363  00FECD  20                 	db	32
   364  00FECE  20                 	db	32
   365  00FECF  20                 	db	32
   366  00FED0  20                 	db	32
   367  00FED1  20                 	db	32
   368  00FED2  0A                 	db	10
   369  00FED3  00                 	db	0
   370  00FED4                     STR_12:
   371  00FED4  20                 	db	32
   372  00FED5  20                 	db	32
   373  00FED6  68                 	db	104	;'h'
   374  00FED7  68                 	db	104	;'h'
   375  00FED8  3A                 	db	58	;':'
   376  00FED9  6D                 	db	109	;'m'
   377  00FEDA  6D                 	db	109	;'m'
   378  00FEDB  3A                 	db	58	;':'
   379  00FEDC  73                 	db	115	;'s'
   380  00FEDD  73                 	db	115	;'s'
   381  00FEDE  20                 	db	32
   382  00FEDF  20                 	db	32
   383  00FEE0  20                 	db	32
   384  00FEE1  20                 	db	32
   385  00FEE2  20                 	db	32
   386  00FEE3  20                 	db	32
   387  00FEE4  0A                 	db	10
   388  00FEE5  00                 	db	0
   389  00FEE6                     STR_16:
   390  00FEE6  73                 	db	115	;'s'
   391  00FEE7  65                 	db	101	;'e'
   392  00FEE8  6C                 	db	108	;'l'
   393  00FEE9  65                 	db	101	;'e'
   394  00FEEA  63                 	db	99	;'c'
   395  00FEEB  74                 	db	116	;'t'
   396  00FEEC  20                 	db	32
   397  00FEED  72                 	db	114	;'r'
   398  00FEEE  75                 	db	117	;'u'
   399  00FEEF  6E                 	db	110	;'n'
   400  00FEF0  3A                 	db	58	;':'
   401  00FEF1  20                 	db	32
   402  00FEF2  20                 	db	32
   403  00FEF3  20                 	db	32
   404  00FEF4  20                 	db	32
   405  00FEF5  20                 	db	32
   406  00FEF6  0A                 	db	10
   407  00FEF7  00                 	db	0
   408  00FEF8                     STR_20:
   409  00FEF8  74                 	db	116	;'t'
   410  00FEF9  69                 	db	105	;'i'
   411  00FEFA  6D                 	db	109	;'m'
   412  00FEFB  65                 	db	101	;'e'
   413  00FEFC  3A                 	db	58	;':'
   414  00FEFD  20                 	db	32
   415  00FEFE  6E                 	db	110	;'n'
   416  00FEFF  6E                 	db	110	;'n'
   417  00FF00  6E                 	db	110	;'n'
   418  00FF01  20                 	db	32
   419  00FF02  73                 	db	115	;'s'
   420  00FF03  65                 	db	101	;'e'
   421  00FF04  63                 	db	99	;'c'
   422  00FF05  20                 	db	32
   423  00FF06  20                 	db	32
   424  00FF07  20                 	db	32
   425  00FF08  0A                 	db	10
   426  00FF09  00                 	db	0
   427  00FF0A                     STR_22:
   428  00FF0A  5B                 	db	91	;'['
   429  00FF0B  41                 	db	65	;'A'
   430  00FF0C  41                 	db	65	;'A'
   431  00FF0D  2C                 	db	44
   432  00FF0E  39                 	db	57	;'9'
   433  00FF0F  56                 	db	86	;'V'
   434  00FF10  2C                 	db	44
   435  00FF11  43                 	db	67	;'C'
   436  00FF12  2C                 	db	44
   437  00FF13  6F                 	db	111	;'o'
   438  00FF14  74                 	db	116	;'t'
   439  00FF15  68                 	db	104	;'h'
   440  00FF16  65                 	db	101	;'e'
   441  00FF17  72                 	db	114	;'r'
   442  00FF18  5D                 	db	93	;']'
   443  00FF19  20                 	db	32
   444  00FF1A  0A                 	db	10
   445  00FF1B  00                 	db	0
   446  00FF1C                     STR_5:
   447  00FF1C  74                 	db	116	;'t'
   448  00FF1D  61                 	db	97	;'a'
   449  00FF1E  72                 	db	114	;'r'
   450  00FF1F  67                 	db	103	;'g'
   451  00FF20  65                 	db	101	;'e'
   452  00FF21  74                 	db	116	;'t'
   453  00FF22  3A                 	db	58	;':'
   454  00FF23  20                 	db	32
   455  00FF24  25                 	db	37
   456  00FF25  64                 	db	100	;'d'
   457  00FF26  2C                 	db	44
   458  00FF27  20                 	db	32
   459  00FF28  56                 	db	86	;'V'
   460  00FF29  3A                 	db	58	;':'
   461  00FF2A  20                 	db	32
   462  00FF2B  25                 	db	37
   463  00FF2C  64                 	db	100	;'d'
   464  00FF2D  00                 	db	0
   465  00FF2E                     STR_24:
   466  00FF2E  30                 	db	48	;'0'
   467  00FF2F  31                 	db	49	;'1'
   468  00FF30  32                 	db	50	;'2'
   469  00FF31  33                 	db	51	;'3'
   470  00FF32  34                 	db	52	;'4'
   471  00FF33  35                 	db	53	;'5'
   472  00FF34  36                 	db	54	;'6'
   473  00FF35  37                 	db	55	;'7'
   474  00FF36  38                 	db	56	;'8'
   475  00FF37  39                 	db	57	;'9'
   476  00FF38  61                 	db	97	;'a'
   477  00FF39  62                 	db	98	;'b'
   478  00FF3A  63                 	db	99	;'c'
   479  00FF3B  64                 	db	100	;'d'
   480  00FF3C  65                 	db	101	;'e'
   481  00FF3D  66                 	db	102	;'f'
   482  00FF3E  00                 	db	0
   483  00FF3F                     STR_21:
   484  00FF3F  20                 	db	32
   485  00FF40  20                 	db	32
   486  00FF41  20                 	db	32
   487  00FF42  20                 	db	32
   488  00FF43  20                 	db	32
   489  00FF44  20                 	db	32
   490  00FF45  20                 	db	32
   491  00FF46  20                 	db	32
   492  00FF47  20                 	db	32
   493  00FF48  20                 	db	32
   494  00FF49  20                 	db	32
   495  00FF4A  20                 	db	32
   496  00FF4B  20                 	db	32
   497  00FF4C  20                 	db	32
   498  00FF4D  2A                 	db	42
   499  00FF4E  3E                 	db	62	;'>'
   500  00FF4F  00                 	db	0
   501  00FF50                     STR_17:
   502  00FF50  5B                 	db	91	;'['
   503  00FF51  31                 	db	49	;'1'
   504  00FF52  2C                 	db	44
   505  00FF53  32                 	db	50	;'2'
   506  00FF54  2C                 	db	44
   507  00FF55  33                 	db	51	;'3'
   508  00FF56  2C                 	db	44
   509  00FF57  34                 	db	52	;'4'
   510  00FF58  5D                 	db	93	;']'
   511  00FF59  20                 	db	32
   512  00FF5A  20                 	db	32
   513  00FF5B  20                 	db	32
   514  00FF5C  20                 	db	32
   515  00FF5D  20                 	db	32
   516  00FF5E  2A                 	db	42
   517  00FF5F  3E                 	db	62	;'>'
   518  00FF60  00                 	db	0
   519  00FF61                     STR_15:
   520  00FF61  68                 	db	104	;'h'
   521  00FF62  69                 	db	105	;'i'
   522  00FF63  73                 	db	115	;'s'
   523  00FF64  74                 	db	116	;'t'
   524  00FF65  6F                 	db	111	;'o'
   525  00FF66  72                 	db	114	;'r'
   526  00FF67  79                 	db	121	;'y'
   527  00FF68  20                 	db	32
   528  00FF69  3C                 	db	60	;'<'
   529  00FF6A  43                 	db	67	;'C'
   530  00FF6B  20                 	db	32
   531  00FF6C  20                 	db	32
   532  00FF6D  20                 	db	32
   533  00FF6E  20                 	db	32
   534  00FF6F  2A                 	db	42
   535  00FF70  3E                 	db	62	;'>'
   536  00FF71  00                 	db	0
   537  00FF72                     STR_19:
   538  00FF72  20                 	db	32
   539  00FF73  20                 	db	32
   540  00FF74  20                 	db	32
   541  00FF75  73                 	db	115	;'s'
   542  00FF76  74                 	db	116	;'t'
   543  00FF77  61                 	db	97	;'a'
   544  00FF78  74                 	db	116	;'t'
   545  00FF79  73                 	db	115	;'s'
   546  00FF7A  20                 	db	32
   547  00FF7B  3C                 	db	60	;'<'
   548  00FF7C  42                 	db	66	;'B'
   549  00FF7D  20                 	db	32
   550  00FF7E  20                 	db	32
   551  00FF7F  20                 	db	32
   552  00FF80  2A                 	db	42
   553  00FF81  3E                 	db	62	;'>'
   554  00FF82  00                 	db	0
   555  00FF83                     STR_23:
   556  00FF83  5B                 	db	91	;'['
   557  00FF84  6E                 	db	110	;'n'
   558  00FF85  6E                 	db	110	;'n'
   559  00FF86  2C                 	db	44
   560  00FF87  6E                 	db	110	;'n'
   561  00FF88  2C                 	db	44
   562  00FF89  6E                 	db	110	;'n'
   563  00FF8A  2C                 	db	44
   564  00FF8B  6E                 	db	110	;'n'
   565  00FF8C  6E                 	db	110	;'n'
   566  00FF8D  5D                 	db	93	;']'
   567  00FF8E  20                 	db	32
   568  00FF8F  20                 	db	32
   569  00FF90  20                 	db	32
   570  00FF91  2A                 	db	42
   571  00FF92  3E                 	db	62	;'>'
   572  00FF93  00                 	db	0
   573  00FF94                     STR_13:
   574  00FF94  20                 	db	32
   575  00FF95  20                 	db	32
   576  00FF96  6D                 	db	109	;'m'
   577  00FF97  6D                 	db	109	;'m'
   578  00FF98  3A                 	db	58	;':'
   579  00FF99  64                 	db	100	;'d'
   580  00FF9A  64                 	db	100	;'d'
   581  00FF9B  3A                 	db	58	;':'
   582  00FF9C  79                 	db	121	;'y'
   583  00FF9D  79                 	db	121	;'y'
   584  00FF9E  20                 	db	32
   585  00FF9F  20                 	db	32
   586  00FFA0  20                 	db	32
   587  00FFA1  20                 	db	32
   588  00FFA2  41                 	db	65	;'A'
   589  00FFA3  3E                 	db	62	;'>'
   590  00FFA4  00                 	db	0
   591  00FFA5                     STR_7:
   592  00FFA5  72                 	db	114	;'r'
   593  00FFA6  65                 	db	101	;'e'
   594  00FFA7  6C                 	db	108	;'l'
   595  00FFA8  65                 	db	101	;'e'
   596  00FFA9  61                 	db	97	;'a'
   597  00FFAA  73                 	db	115	;'s'
   598  00FFAB  65                 	db	101	;'e'
   599  00FFAC  20                 	db	32
   600  00FFAD  62                 	db	98	;'b'
   601  00FFAE  61                 	db	97	;'a'
   602  00FFAF  74                 	db	116	;'t'
   603  00FFB0  74                 	db	116	;'t'
   604  00FFB1  65                 	db	101	;'e'
   605  00FFB2  72                 	db	114	;'r'
   606  00FFB3  79                 	db	121	;'y'
   607  00FFB4  3F                 	db	63	;'?'
   608  00FFB5  00                 	db	0
   609  00FFB6                     STR_8:
   610  00FFB6  72                 	db	114	;'r'
   611  00FFB7  65                 	db	101	;'e'
   612  00FFB8  73                 	db	115	;'s'
   613  00FFB9  65                 	db	101	;'e'
   614  00FFBA  74                 	db	116	;'t'
   615  00FFBB  20                 	db	32
   616  00FFBC  74                 	db	116	;'t'
   617  00FFBD  68                 	db	104	;'h'
   618  00FFBE  65                 	db	101	;'e'
   619  00FFBF  20                 	db	32
   620  00FFC0  70                 	db	112	;'p'
   621  00FFC1  61                 	db	97	;'a'
   622  00FFC2  64                 	db	100	;'d'
   623  00FFC3  3F                 	db	63	;'?'
   624  00FFC4  00                 	db	0
   625  00FFC5                     STR_4:
   626  00FFC5  72                 	db	114	;'r'
   627  00FFC6  65                 	db	101	;'e'
   628  00FFC7  61                 	db	97	;'a'
   629  00FFC8  64                 	db	100	;'d'
   630  00FFC9  20                 	db	32
   631  00FFCA  76                 	db	118	;'v'
   632  00FFCB  6F                 	db	111	;'o'
   633  00FFCC  6C                 	db	108	;'l'
   634  00FFCD  74                 	db	116	;'t'
   635  00FFCE  61                 	db	97	;'a'
   636  00FFCF  67                 	db	103	;'g'
   637  00FFD0  65                 	db	101	;'e'
   638  00FFD1  3F                 	db	63	;'?'
   639  00FFD2  00                 	db	0
   640  00FFD3                     STR_2:
   641  00FFD3  69                 	db	105	;'i'
   642  00FFD4  6E                 	db	110	;'n'
   643  00FFD5  74                 	db	116	;'t'
   644  00FFD6  65                 	db	101	;'e'
   645  00FFD7  72                 	db	114	;'r'
   646  00FFD8  72                 	db	114	;'r'
   647  00FFD9  75                 	db	117	;'u'
   648  00FFDA  70                 	db	112	;'p'
   649  00FFDB  74                 	db	116	;'t'
   650  00FFDC  21                 	db	33
   651  00FFDD  00                 	db	0
   652  00FFDE  5B                 	db	91	;'['
   653  00FFDF  25                 	db	37
   654  00FFE0  78                 	db	120	;'x'
   655  00FFE1  20                 	db	32
   656  00FFE2  25                 	db	37
   657  00FFE3  78                 	db	120	;'x'
   658  00FFE4  5D                 	db	93	;']'
   659  00FFE5  0A                 	db	10
   660  00FFE6  00                 	db	0
   661  00FFE7  74                 	db	116	;'t'
   662  00FFE8  31                 	db	49	;'1'
   663  00FFE9  3A                 	db	58	;':'
   664  00FFEA  20                 	db	32
   665  00FFEB  25                 	db	37
   666  00FFEC  78                 	db	120	;'x'
   667  00FFED  20                 	db	32
   668  00FFEE  00                 	db	0
   669  00FFEF                     STR_1:
   670  00FFEF  72                 	db	114	;'r'
   671  00FFF0  75                 	db	117	;'u'
   672  00FFF1  6E                 	db	110	;'n'
   673  00FFF2  6E                 	db	110	;'n'
   674  00FFF3  69                 	db	105	;'i'
   675  00FFF4  6E                 	db	110	;'n'
   676  00FFF5  67                 	db	103	;'g'
   677  00FFF6  00                 	db	0
   678  00FFF7                     STR_3:
   679  00FFF7  63                 	db	99	;'c'
   680  00FFF8  6C                 	db	108	;'l'
   681  00FFF9  6F                 	db	111	;'o'
   682  00FFFA  73                 	db	115	;'s'
   683  00FFFB  65                 	db	101	;'e'
   684  00FFFC  3F                 	db	63	;'?'
   685  00FFFD  00                 	db	0
   686                           
   687                           ; #config settings
   688  00FFFE  00                 	db	0	; dummy byte at the end
   689  0000                     
   690                           	psect	cinit
   691  001D20                     __pcinit:
   692                           	opt stack 0
   693  001D20                     start_initialization:
   694                           	opt stack 0
   695  001D20                     __initialization:
   696                           	opt stack 0
   697                           
   698                           ; Initialize objects allocated to BANK1 (28 bytes)
   699                           ; load TBLPTR registers with __pidataBANK1
   700  001D20  0E66               	movlw	low __pidataBANK1
   701  001D22  6EF6               	movwf	tblptrl,c
   702  001D24  0E24               	movlw	high __pidataBANK1
   703  001D26  6EF7               	movwf	tblptrh,c
   704  001D28  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   705  001D2A  6EF8               	movwf	tblptru,c
   706  001D2C  EE01  F024         	lfsr	0,__pdataBANK1
   707  001D30  EE10 F01C          	lfsr	1,28
   708  001D34                     copy_data0:
   709  001D34  0009               	tblrd		*+
   710  001D36  CFF5 FFEE          	movff	tablat,postinc0
   711  001D3A  50E5               	movf	postdec1,w,c
   712  001D3C  50E1               	movf	fsr1l,w,c
   713  001D3E  E1FA               	bnz	copy_data0
   714                           
   715                           ; Initialize objects allocated to BANK0 (8 bytes)
   716                           ; load TBLPTR registers with __pidataBANK0
   717  001D40  0EA0               	movlw	low __pidataBANK0
   718  001D42  6EF6               	movwf	tblptrl,c
   719  001D44  0E24               	movlw	high __pidataBANK0
   720  001D46  6EF7               	movwf	tblptrh,c
   721  001D48  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   722  001D4A  6EF8               	movwf	tblptru,c
   723  001D4C  EE00  F0F6         	lfsr	0,__pdataBANK0
   724  001D50  EE10 F008          	lfsr	1,8
   725  001D54                     copy_data1:
   726  001D54  0009               	tblrd		*+
   727  001D56  CFF5 FFEE          	movff	tablat,postinc0
   728  001D5A  50E5               	movf	postdec1,w,c
   729  001D5C  50E1               	movf	fsr1l,w,c
   730  001D5E  E1FA               	bnz	copy_data1
   731                           
   732                           ; Initialize objects allocated to COMRAM (8 bytes)
   733                           ; load TBLPTR registers with __pidataCOMRAM
   734  001D60  0E98               	movlw	low __pidataCOMRAM
   735  001D62  6EF6               	movwf	tblptrl,c
   736  001D64  0E24               	movlw	high __pidataCOMRAM
   737  001D66  6EF7               	movwf	tblptrh,c
   738  001D68  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   739  001D6A  6EF8               	movwf	tblptru,c
   740  001D6C  EE00  F076         	lfsr	0,__pdataCOMRAM
   741  001D70  EE10 F008          	lfsr	1,8
   742  001D74                     copy_data2:
   743  001D74  0009               	tblrd		*+
   744  001D76  CFF5 FFEE          	movff	tablat,postinc0
   745  001D7A  50E5               	movf	postdec1,w,c
   746  001D7C  50E1               	movf	fsr1l,w,c
   747  001D7E  E1FA               	bnz	copy_data2
   748                           
   749                           ; Clear objects allocated to BANK1 (36 bytes)
   750  001D80  EE01  F000         	lfsr	0,__pbssBANK1
   751  001D84  0E24               	movlw	36
   752  001D86                     clear_0:
   753  001D86  6AEE               	clrf	postinc0,c
   754  001D88  06E8               	decf	wreg,f,c
   755  001D8A  E1FD               	bnz	clear_0
   756                           
   757                           ; Clear objects allocated to BANK0 (2 bytes)
   758  001D8C  0100               	movlb	0
   759  001D8E  6BFF               	clrf	(__pbssBANK0+1)& (0+255),b
   760  001D90  6BFE               	clrf	__pbssBANK0& (0+255),b
   761  001D92                     end_of_initialization:
   762                           	opt stack 0
   763  001D92                     __end_of__initialization:
   764                           	opt stack 0
   765  001D92  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   766  001D94  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   767  001D96  0E00               	movlw	low (__Lmediumconst shr (0+16))
   768  001D98  6EF8               	movwf	tblptru,c
   769  001D9A  0100               	movlb	0
   770  001D9C  EF98  F00C         	goto	_main	;jump to C main() function
   771                           tblptru	equ	0xFF8
   772                           tblptrh	equ	0xFF7
   773                           tblptrl	equ	0xFF6
   774                           tablat	equ	0xFF5
   775                           postinc0	equ	0xFEE
   776                           wreg	equ	0xFE8
   777                           postdec1	equ	0xFE5
   778                           fsr1l	equ	0xFE1
   779                           
   780                           	psect	dataCOMRAM
   781  000076                     __pdataCOMRAM:
   782                           	opt stack 0
   783  000076                     _conveyorServo:
   784                           	opt stack 0
   785  000076                     	ds	6
   786  00007C                     _redirectAngle_AA:
   787                           	opt stack 0
   788  00007C                     	ds	2
   789                           tblptru	equ	0xFF8
   790                           tblptrh	equ	0xFF7
   791                           tblptrl	equ	0xFF6
   792                           tablat	equ	0xFF5
   793                           postinc0	equ	0xFEE
   794                           wreg	equ	0xFE8
   795                           postdec1	equ	0xFE5
   796                           fsr1l	equ	0xFE1
   797                           
   798                           	psect	bssBANK0
   799  0000FE                     __pbssBANK0:
   800                           	opt stack 0
   801  0000FE                     _switchFlag:
   802                           	opt stack 0
   803  0000FE                     	ds	2
   804                           tblptru	equ	0xFF8
   805                           tblptrh	equ	0xFF7
   806                           tblptrl	equ	0xFF6
   807                           tablat	equ	0xFF5
   808                           postinc0	equ	0xFEE
   809                           wreg	equ	0xFE8
   810                           postdec1	equ	0xFE5
   811                           fsr1l	equ	0xFE1
   812                           
   813                           	psect	dataBANK0
   814  0000F6                     __pdataBANK0:
   815                           	opt stack 0
   816  0000F6                     _padAngle_CATCH:
   817                           	opt stack 0
   818  0000F6                     	ds	2
   819  0000F8                     _padAngle_CLOSE:
   820                           	opt stack 0
   821  0000F8                     	ds	2
   822  0000FA                     _padAngle_OPEN:
   823                           	opt stack 0
   824  0000FA                     	ds	2
   825  0000FC                     _redirectAngle_C:
   826                           	opt stack 0
   827  0000FC                     	ds	2
   828                           tblptru	equ	0xFF8
   829                           tblptrh	equ	0xFF7
   830                           tblptrl	equ	0xFF6
   831                           tablat	equ	0xFF5
   832                           postinc0	equ	0xFEE
   833                           wreg	equ	0xFE8
   834                           postdec1	equ	0xFE5
   835                           fsr1l	equ	0xFE1
   836                           
   837                           	psect	bssBANK1
   838  000100                     __pbssBANK1:
   839                           	opt stack 0
   840  000100                     _pulse:
   841                           	opt stack 0
   842  000100                     	ds	16
   843  000110                     _pin:
   844                           	opt stack 0
   845  000110                     	ds	8
   846  000118                     _port:
   847                           	opt stack 0
   848  000118                     	ds	8
   849  000120                     _padPin3:
   850                           	opt stack 0
   851  000120                     	ds	4
   852                           tblptru	equ	0xFF8
   853                           tblptrh	equ	0xFF7
   854                           tblptrl	equ	0xFF6
   855                           tablat	equ	0xFF5
   856                           postinc0	equ	0xFEE
   857                           wreg	equ	0xFE8
   858                           postdec1	equ	0xFE5
   859                           fsr1l	equ	0xFE1
   860                           
   861                           	psect	dataBANK1
   862  000124                     __pdataBANK1:
   863                           	opt stack 0
   864  000124                     _padServo:
   865                           	opt stack 0
   866  000124                     	ds	6
   867  00012A                     _redirectingServo:
   868                           	opt stack 0
   869  00012A                     	ds	6
   870  000130                     _cylinderMotor:
   871                           	opt stack 0
   872  000130                     	ds	4
   873  000134                     _padPin1:
   874                           	opt stack 0
   875  000134                     	ds	4
   876  000138                     _padPin2:
   877                           	opt stack 0
   878  000138                     	ds	4
   879  00013C                     _redirectAngle_9V:
   880                           	opt stack 0
   881  00013C                     	ds	2
   882  00013E                     _redirectAngle_OTHER:
   883                           	opt stack 0
   884  00013E                     	ds	2
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           postdec1	equ	0xFE5
   892                           fsr1l	equ	0xFE1
   893                           
   894                           	psect	cstackBANK0
   895  000080                     __pcstackBANK0:
   896                           	opt stack 0
   897  000080                     ?_digitalRead:
   898                           	opt stack 0
   899  000080                     ?___lwdiv:
   900                           	opt stack 0
   901  000080                     ?___ftpack:
   902                           	opt stack 0
   903  000080                     ?_analogRead:
   904                           	opt stack 0
   905  000080                     lcdNibble@temp:
   906                           	opt stack 0
   907  000080                     readKeypad@key:
   908                           	opt stack 0
   909  000080                     digitalRead@port:
   910                           	opt stack 0
   911  000080                     digitalWrite@port:
   912                           	opt stack 0
   913  000080                     analogRead@channel:
   914                           	opt stack 0
   915  000080                     initTimer@timer:
   916                           	opt stack 0
   917  000080                     startTimer@timer:
   918                           	opt stack 0
   919  000080                     stopServo@timer:
   920                           	opt stack 0
   921  000080                     ___lwdiv@dividend:
   922                           	opt stack 0
   923  000080                     ___ftpack@arg:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0x0
   927  000080                     	ds	1
   928  000081                     lcdNibble@data:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x1
   932  000081                     	ds	1
   933  000082                     ??_stopServo:
   934  000082                     ??_lcdInst:
   935  000082                     ??_initTimer:
   936  000082                     digitalRead@pin:
   937                           	opt stack 0
   938  000082                     digitalWrite@pin:
   939                           	opt stack 0
   940  000082                     ___lwdiv@divisor:
   941                           	opt stack 0
   942  000082                     startTimer@val:
   943                           	opt stack 0
   944                           
   945                           ; 4 bytes @ 0x2
   946  000082                     	ds	1
   947  000083                     lcdInst@data:
   948                           	opt stack 0
   949  000083                     ___ftpack@exp:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x3
   953  000083                     	ds	1
   954  000084                     ??_initLCD:
   955  000084                     ??_digitalRead:
   956  000084                     ??_analogRead:
   957  000084                     putch@data:
   958                           	opt stack 0
   959  000084                     ___ftpack@sign:
   960                           	opt stack 0
   961  000084                     digitalWrite@val:
   962                           	opt stack 0
   963  000084                     ___lwdiv@quotient:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x4
   967  000084                     	ds	1
   968  000085                     ??___ftpack:
   969                           
   970                           ; 1 bytes @ 0x5
   971  000085                     	ds	1
   972  000086                     ??_digitalWrite:
   973  000086                     ??_startTimer:
   974  000086                     ?___aldiv:
   975                           	opt stack 0
   976  000086                     ___lwdiv@counter:
   977                           	opt stack 0
   978  000086                     ___aldiv@dividend:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0x6
   982  000086                     	ds	1
   983  000087                     ?___lwmod:
   984                           	opt stack 0
   985  000087                     ___lwmod@dividend:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x7
   989  000087                     	ds	1
   990  000088                     ?___altoft:
   991                           	opt stack 0
   992  000088                     ?___awtoft:
   993                           	opt stack 0
   994  000088                     ___awtoft@c:
   995                           	opt stack 0
   996  000088                     ___altoft@c:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0x8
  1000  000088                     	ds	1
  1001  000089                     ___lwmod@divisor:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x9
  1005  000089                     	ds	1
  1006  00008A                     ___aldiv@divisor:
  1007                           	opt stack 0
  1008                           
  1009                           ; 4 bytes @ 0xA
  1010  00008A                     	ds	1
  1011  00008B                     ___awtoft@sign:
  1012                           	opt stack 0
  1013  00008B                     ___lwmod@counter:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0xB
  1017  00008B                     	ds	1
  1018  00008C                     ??___altoft:
  1019  00008C                     ?_printf:
  1020                           	opt stack 0
  1021  00008C                     ?___ftdiv:
  1022                           	opt stack 0
  1023  00008C                     printf@f:
  1024                           	opt stack 0
  1025  00008C                     ___ftdiv@f1:
  1026                           	opt stack 0
  1027                           
  1028                           ; 3 bytes @ 0xC
  1029  00008C                     	ds	2
  1030  00008E                     ___aldiv@counter:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0xE
  1034  00008E                     	ds	1
  1035  00008F                     ___aldiv@sign:
  1036                           	opt stack 0
  1037  00008F                     ___ftdiv@f2:
  1038                           	opt stack 0
  1039                           
  1040                           ; 3 bytes @ 0xF
  1041  00008F                     	ds	1
  1042  000090                     ___altoft@exp:
  1043                           	opt stack 0
  1044  000090                     ___aldiv@quotient:
  1045                           	opt stack 0
  1046                           
  1047                           ; 4 bytes @ 0x10
  1048  000090                     	ds	1
  1049  000091                     ___altoft@sign:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x11
  1053  000091                     	ds	1
  1054  000092                     ??_printf:
  1055  000092                     ??___ftdiv:
  1056                           
  1057                           ; 1 bytes @ 0x12
  1058  000092                     	ds	1
  1059  000093                     printf@idx:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x13
  1063  000093                     	ds	1
  1064  000094                     ?___wmul:
  1065                           	opt stack 0
  1066  000094                     printf@prec:
  1067                           	opt stack 0
  1068  000094                     ___wmul@multiplier:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x14
  1072  000094                     	ds	1
  1073  000095                     ___ftdiv@cntr:
  1074                           	opt stack 0
  1075  000095                     printf@ap:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x15
  1079  000095                     	ds	1
  1080  000096                     ___wmul@multiplicand:
  1081                           	opt stack 0
  1082  000096                     ___ftdiv@f3:
  1083                           	opt stack 0
  1084                           
  1085                           ; 3 bytes @ 0x16
  1086  000096                     	ds	1
  1087  000097                     printf@flag:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x17
  1091  000097                     	ds	1
  1092  000098                     printf@val:
  1093                           	opt stack 0
  1094  000098                     ___wmul@product:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x18
  1098  000098                     	ds	1
  1099  000099                     ___ftdiv@exp:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x19
  1103  000099                     	ds	1
  1104  00009A                     printf@c:
  1105                           	opt stack 0
  1106  00009A                     ___ftdiv@sign:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x1A
  1110  00009A                     	ds	1
  1111  00009B                     ?___ftmul:
  1112                           	opt stack 0
  1113  00009B                     runMenu@key:
  1114                           	opt stack 0
  1115  00009B                     pause@message:
  1116                           	opt stack 0
  1117  00009B                     ___ftmul@f1:
  1118                           	opt stack 0
  1119                           
  1120                           ; 3 bytes @ 0x1B
  1121  00009B                     	ds	1
  1122  00009C                     showInterface@key:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x1C
  1126  00009C                     	ds	1
  1127  00009D                     
  1128                           ; 1 bytes @ 0x1D
  1129  00009D                     	ds	1
  1130  00009E                     ___ftmul@f2:
  1131                           	opt stack 0
  1132                           
  1133                           ; 3 bytes @ 0x1E
  1134  00009E                     	ds	3
  1135  0000A1                     ??___ftmul:
  1136                           
  1137                           ; 1 bytes @ 0x21
  1138  0000A1                     	ds	3
  1139  0000A4                     ___ftmul@exp:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x24
  1143  0000A4                     	ds	1
  1144  0000A5                     ___ftmul@f3_as_product:
  1145                           	opt stack 0
  1146                           
  1147                           ; 3 bytes @ 0x25
  1148  0000A5                     	ds	3
  1149  0000A8                     ___ftmul@cntr:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x28
  1153  0000A8                     	ds	1
  1154  0000A9                     ___ftmul@sign:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x29
  1158  0000A9                     	ds	1
  1159  0000AA                     ?___ftadd:
  1160                           	opt stack 0
  1161  0000AA                     ___ftadd@f1:
  1162                           	opt stack 0
  1163                           
  1164                           ; 3 bytes @ 0x2A
  1165  0000AA                     	ds	3
  1166  0000AD                     ___ftadd@f2:
  1167                           	opt stack 0
  1168                           
  1169                           ; 3 bytes @ 0x2D
  1170  0000AD                     	ds	3
  1171  0000B0                     ??___ftadd:
  1172                           
  1173                           ; 1 bytes @ 0x30
  1174  0000B0                     	ds	3
  1175  0000B3                     ___ftadd@sign:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x33
  1179  0000B3                     	ds	1
  1180  0000B4                     ___ftadd@exp2:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x34
  1184  0000B4                     	ds	1
  1185  0000B5                     ___ftadd@exp1:
  1186                           	opt stack 0
  1187                           
  1188                           ; 1 bytes @ 0x35
  1189  0000B5                     	ds	1
  1190  0000B6                     ?___fttol:
  1191                           	opt stack 0
  1192  0000B6                     ___fttol@f1:
  1193                           	opt stack 0
  1194                           
  1195                           ; 3 bytes @ 0x36
  1196  0000B6                     	ds	4
  1197  0000BA                     ??___fttol:
  1198                           
  1199                           ; 1 bytes @ 0x3A
  1200  0000BA                     	ds	5
  1201  0000BF                     ___fttol@sign1:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0x3F
  1205  0000BF                     	ds	1
  1206  0000C0                     ___fttol@lval:
  1207                           	opt stack 0
  1208                           
  1209                           ; 4 bytes @ 0x40
  1210  0000C0                     	ds	4
  1211  0000C4                     ___fttol@exp1:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0x44
  1215  0000C4                     	ds	1
  1216  0000C5                     ?_angleToPulse:
  1217                           	opt stack 0
  1218  0000C5                     angleToPulse@angle:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x45
  1222  0000C5                     	ds	4
  1223  0000C9                     ??_angleToPulse:
  1224                           
  1225                           ; 1 bytes @ 0x49
  1226  0000C9                     	ds	4
  1227  0000CD                     angleToPulse@offset:
  1228                           	opt stack 0
  1229                           
  1230                           ; 4 bytes @ 0x4D
  1231  0000CD                     	ds	4
  1232  0000D1                     angleToPulse@a180:
  1233                           	opt stack 0
  1234                           
  1235                           ; 4 bytes @ 0x51
  1236  0000D1                     	ds	4
  1237  0000D5                     _angleToPulse$1247:
  1238                           	opt stack 0
  1239                           
  1240                           ; 3 bytes @ 0x55
  1241  0000D5                     	ds	3
  1242  0000D8                     angleToPulse@a000:
  1243                           	opt stack 0
  1244                           
  1245                           ; 4 bytes @ 0x58
  1246  0000D8                     	ds	4
  1247  0000DC                     setAngle@timer:
  1248                           	opt stack 0
  1249                           
  1250                           ; 2 bytes @ 0x5C
  1251  0000DC                     	ds	2
  1252  0000DE                     setAngle@angle:
  1253                           	opt stack 0
  1254                           
  1255                           ; 2 bytes @ 0x5E
  1256  0000DE                     	ds	2
  1257  0000E0                     ??_setAngle:
  1258                           
  1259                           ; 1 bytes @ 0x60
  1260  0000E0                     	ds	6
  1261  0000E6                     initServo@timer:
  1262                           	opt stack 0
  1263                           
  1264                           ; 2 bytes @ 0x66
  1265  0000E6                     	ds	2
  1266  0000E8                     initServo@po:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x68
  1270  0000E8                     	ds	2
  1271  0000EA                     initServo@pi:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x6A
  1275  0000EA                     	ds	2
  1276  0000EC                     initServo@angle:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x6C
  1280  0000EC                     	ds	2
  1281  0000EE                     sortBattery@Vcc:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x6E
  1285  0000EE                     	ds	2
  1286  0000F0                     sortBattery@resolution:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x70
  1290  0000F0                     	ds	2
  1291  0000F2                     sortBattery@V:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x72
  1295  0000F2                     	ds	2
  1296  0000F4                     sortBattery@target:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x74
  1300  0000F4                     	ds	2
  1301  0000F6                     tblptru	equ	0xFF8
  1302                           tblptrh	equ	0xFF7
  1303                           tblptrl	equ	0xFF6
  1304                           tablat	equ	0xFF5
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           postdec1	equ	0xFE5
  1308                           fsr1l	equ	0xFE1
  1309                           
  1310                           ; 1 bytes @ 0x76
  1311                           
  1312                           	psect	cstackCOMRAM
  1313  000001                     __pcstackCOMRAM:
  1314                           	opt stack 0
  1315  000001                     ?i2_digitalRead:
  1316                           	opt stack 0
  1317  000001                     ?i2___ftpack:
  1318                           	opt stack 0
  1319  000001                     i2digitalRead@port:
  1320                           	opt stack 0
  1321  000001                     i2digitalWrite@port:
  1322                           	opt stack 0
  1323  000001                     i2startTimer@timer:
  1324                           	opt stack 0
  1325  000001                     i2___ftpack@arg:
  1326                           	opt stack 0
  1327                           
  1328                           ; 3 bytes @ 0x0
  1329  000001                     	ds	2
  1330  000003                     i2digitalRead@pin:
  1331                           	opt stack 0
  1332  000003                     i2digitalWrite@pin:
  1333                           	opt stack 0
  1334  000003                     i2startTimer@val:
  1335                           	opt stack 0
  1336                           
  1337                           ; 4 bytes @ 0x2
  1338  000003                     	ds	1
  1339  000004                     i2___ftpack@exp:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x3
  1343  000004                     	ds	1
  1344  000005                     ??i2_digitalRead:
  1345  000005                     i2___ftpack@sign:
  1346                           	opt stack 0
  1347  000005                     i2digitalWrite@val:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x4
  1351  000005                     	ds	1
  1352  000006                     ??i2___ftpack:
  1353                           
  1354                           ; 1 bytes @ 0x5
  1355  000006                     	ds	1
  1356  000007                     ??i2_digitalWrite:
  1357  000007                     ??i2_startTimer:
  1358                           
  1359                           ; 1 bytes @ 0x6
  1360  000007                     	ds	2
  1361  000009                     ?i2___altoft:
  1362                           	opt stack 0
  1363  000009                     ?i2___awtoft:
  1364                           	opt stack 0
  1365  000009                     i2___awtoft@c:
  1366                           	opt stack 0
  1367  000009                     i2___altoft@c:
  1368                           	opt stack 0
  1369                           
  1370                           ; 4 bytes @ 0x8
  1371  000009                     	ds	1
  1372  00000A                     ??_servoInterruptService:
  1373                           
  1374                           ; 1 bytes @ 0x9
  1375  00000A                     	ds	2
  1376  00000C                     i2___awtoft@sign:
  1377                           	opt stack 0
  1378  00000C                     servoInterruptService@flags:
  1379                           	opt stack 0
  1380                           
  1381                           ; 8 bytes @ 0xB
  1382  00000C                     	ds	1
  1383  00000D                     ??i2___altoft:
  1384  00000D                     ?i2___ftdiv:
  1385                           	opt stack 0
  1386  00000D                     i2___ftdiv@f1:
  1387                           	opt stack 0
  1388                           
  1389                           ; 3 bytes @ 0xC
  1390  00000D                     	ds	3
  1391  000010                     i2___ftdiv@f2:
  1392                           	opt stack 0
  1393                           
  1394                           ; 3 bytes @ 0xF
  1395  000010                     	ds	1
  1396  000011                     i2___altoft@exp:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x10
  1400  000011                     	ds	1
  1401  000012                     i2___altoft@sign:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x11
  1405  000012                     	ds	1
  1406  000013                     ??i2___ftdiv:
  1407                           
  1408                           ; 1 bytes @ 0x12
  1409  000013                     	ds	1
  1410  000014                     servoInterruptService@i:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0x13
  1414  000014                     	ds	2
  1415  000016                     i2___ftdiv@cntr:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x15
  1419  000016                     	ds	1
  1420  000017                     i2___ftdiv@f3:
  1421                           	opt stack 0
  1422                           
  1423                           ; 3 bytes @ 0x16
  1424  000017                     	ds	3
  1425  00001A                     i2___ftdiv@exp:
  1426                           	opt stack 0
  1427                           
  1428                           ; 1 bytes @ 0x19
  1429  00001A                     	ds	1
  1430  00001B                     i2___ftdiv@sign:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x1A
  1434  00001B                     	ds	1
  1435  00001C                     ?i2___ftmul:
  1436                           	opt stack 0
  1437  00001C                     i2___ftmul@f1:
  1438                           	opt stack 0
  1439                           
  1440                           ; 3 bytes @ 0x1B
  1441  00001C                     	ds	3
  1442  00001F                     i2___ftmul@f2:
  1443                           	opt stack 0
  1444                           
  1445                           ; 3 bytes @ 0x1E
  1446  00001F                     	ds	3
  1447  000022                     ??i2___ftmul:
  1448                           
  1449                           ; 1 bytes @ 0x21
  1450  000022                     	ds	3
  1451  000025                     i2___ftmul@exp:
  1452                           	opt stack 0
  1453                           
  1454                           ; 1 bytes @ 0x24
  1455  000025                     	ds	1
  1456  000026                     i2___ftmul@f3_as_product:
  1457                           	opt stack 0
  1458                           
  1459                           ; 3 bytes @ 0x25
  1460  000026                     	ds	3
  1461  000029                     i2___ftmul@cntr:
  1462                           	opt stack 0
  1463                           
  1464                           ; 1 bytes @ 0x28
  1465  000029                     	ds	1
  1466  00002A                     i2___ftmul@sign:
  1467                           	opt stack 0
  1468                           
  1469                           ; 1 bytes @ 0x29
  1470  00002A                     	ds	1
  1471  00002B                     ?i2___ftadd:
  1472                           	opt stack 0
  1473  00002B                     i2___ftadd@f1:
  1474                           	opt stack 0
  1475                           
  1476                           ; 3 bytes @ 0x2A
  1477  00002B                     	ds	3
  1478  00002E                     i2___ftadd@f2:
  1479                           	opt stack 0
  1480                           
  1481                           ; 3 bytes @ 0x2D
  1482  00002E                     	ds	3
  1483  000031                     ??i2___ftadd:
  1484                           
  1485                           ; 1 bytes @ 0x30
  1486  000031                     	ds	3
  1487  000034                     i2___ftadd@sign:
  1488                           	opt stack 0
  1489                           
  1490                           ; 1 bytes @ 0x33
  1491  000034                     	ds	1
  1492  000035                     i2___ftadd@exp2:
  1493                           	opt stack 0
  1494                           
  1495                           ; 1 bytes @ 0x34
  1496  000035                     	ds	1
  1497  000036                     i2___ftadd@exp1:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x35
  1501  000036                     	ds	1
  1502  000037                     ?i2___fttol:
  1503                           	opt stack 0
  1504  000037                     i2___fttol@f1:
  1505                           	opt stack 0
  1506                           
  1507                           ; 3 bytes @ 0x36
  1508  000037                     	ds	4
  1509  00003B                     ??i2___fttol:
  1510                           
  1511                           ; 1 bytes @ 0x3A
  1512  00003B                     	ds	5
  1513  000040                     i2___fttol@sign1:
  1514                           	opt stack 0
  1515                           
  1516                           ; 1 bytes @ 0x3F
  1517  000040                     	ds	1
  1518  000041                     i2___fttol@lval:
  1519                           	opt stack 0
  1520                           
  1521                           ; 4 bytes @ 0x40
  1522  000041                     	ds	4
  1523  000045                     i2___fttol@exp1:
  1524                           	opt stack 0
  1525                           
  1526                           ; 1 bytes @ 0x44
  1527  000045                     	ds	1
  1528  000046                     ?i2_angleToPulse:
  1529                           	opt stack 0
  1530  000046                     i2angleToPulse@angle:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x45
  1534  000046                     	ds	4
  1535  00004A                     ??i2_angleToPulse:
  1536                           
  1537                           ; 1 bytes @ 0x49
  1538  00004A                     	ds	4
  1539  00004E                     i2angleToPulse@offset:
  1540                           	opt stack 0
  1541                           
  1542                           ; 4 bytes @ 0x4D
  1543  00004E                     	ds	4
  1544  000052                     i2angleToPulse@a180:
  1545                           	opt stack 0
  1546                           
  1547                           ; 4 bytes @ 0x51
  1548  000052                     	ds	4
  1549  000056                     i2_angleToPulse$1339:
  1550                           	opt stack 0
  1551                           
  1552                           ; 3 bytes @ 0x55
  1553  000056                     	ds	3
  1554  000059                     i2angleToPulse@a000:
  1555                           	opt stack 0
  1556                           
  1557                           ; 4 bytes @ 0x58
  1558  000059                     	ds	4
  1559  00005D                     i2setAngle@timer:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x5C
  1563  00005D                     	ds	2
  1564  00005F                     i2setAngle@angle:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0x5E
  1568  00005F                     	ds	2
  1569  000061                     ??i2_setAngle:
  1570                           
  1571                           ; 1 bytes @ 0x60
  1572  000061                     	ds	6
  1573  000067                     ??_service:
  1574                           
  1575                           ; 1 bytes @ 0x66
  1576  000067                     	ds	14
  1577  000075                     service@key:
  1578                           	opt stack 0
  1579                           
  1580                           ; 1 bytes @ 0x74
  1581  000075                     	ds	1
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           postdec1	equ	0xFE5
  1589                           fsr1l	equ	0xFE1
  1590                           
  1591 ;;
  1592 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1593 ;;
  1594 ;; *************** function _main *****************
  1595 ;; Defined at:
  1596 ;;		line 52 in file "main.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;		None
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;		None
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;Total ram usage:        0 bytes
  1615 ;; Hardware stack levels required when called:   12
  1616 ;; This function calls:
  1617 ;;		_initLCD
  1618 ;;		_initServo
  1619 ;;		_lcdClear
  1620 ;;		_pinSetup
  1621 ;;		_printf
  1622 ;;		_showInterface
  1623 ;;		_sortBattery
  1624 ;; This function is called by:
  1625 ;;		Startup code after reset
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text0
  1630  001930                     __ptext0:
  1631                           	opt stack 0
  1632  001930                     _main:
  1633                           	opt stack 19
  1634                           
  1635                           ;main.c: 53: pinSetup();
  1636                           
  1637                           ;incstack = 0
  1638  001930  EC27  F011         	call	_pinSetup	;wreg free
  1639                           
  1640                           ;main.c: 54: initLCD();
  1641  001934  ECBF  F010         	call	_initLCD	;wreg free
  1642                           
  1643                           ;main.c: 58: (INTCONbits.GIE = 0);
  1644                           
  1645                           ;main.c: 57: while(1){
  1646  001938  9EF2               	bcf	intcon,7,c	;volatile
  1647                           
  1648                           ;main.c: 59: showInterface();
  1649  00193A  ECCB  F009         	call	_showInterface	;wreg free
  1650                           
  1651                           ;main.c: 60: (INTCONbits.GIE = 1);
  1652  00193E  8EF2               	bsf	intcon,7,c	;volatile
  1653                           
  1654                           ;main.c: 63: initServo(conveyorServo[0], conveyorServo[1], conveyorServo[2], 90);
  1655  001940  C076  F0E6         	movff	_conveyorServo,initServo@timer
  1656  001944  C077  F0E7         	movff	_conveyorServo+1,initServo@timer+1
  1657  001948  C078  F0E8         	movff	_conveyorServo+2,initServo@po
  1658  00194C  C079  F0E9         	movff	_conveyorServo+3,initServo@po+1
  1659  001950  C07A  F0EA         	movff	_conveyorServo+4,initServo@pi
  1660  001954  C07B  F0EB         	movff	_conveyorServo+5,initServo@pi+1
  1661  001958  0E00               	movlw	0
  1662  00195A  0100               	movlb	0	; () banked
  1663  00195C  6FED               	movwf	(initServo@angle+1)& (0+255),b
  1664  00195E  0E5A               	movlw	90
  1665  001960  6FEC               	movwf	initServo@angle& (0+255),b
  1666  001962  ECD0  F00E         	call	_initServo	;wreg free
  1667                           
  1668                           ;main.c: 64: initServo(padServo[0], padServo[1], padServo[2], padAngle_CATCH);
  1669  001966  C124  F0E6         	movff	_padServo,initServo@timer
  1670  00196A  C125  F0E7         	movff	_padServo+1,initServo@timer+1
  1671  00196E  C126  F0E8         	movff	_padServo+2,initServo@po
  1672  001972  C127  F0E9         	movff	_padServo+3,initServo@po+1
  1673  001976  C128  F0EA         	movff	_padServo+4,initServo@pi
  1674  00197A  C129  F0EB         	movff	_padServo+5,initServo@pi+1
  1675  00197E  C0F6  F0EC         	movff	_padAngle_CATCH,initServo@angle
  1676  001982  C0F7  F0ED         	movff	_padAngle_CATCH+1,initServo@angle+1
  1677  001986  ECD0  F00E         	call	_initServo	;wreg free
  1678                           
  1679                           ;main.c: 65: initServo(redirectingServo[0], redirectingServo[1],redirectingServo[2], 90)
      +                          ;
  1680  00198A  C12A  F0E6         	movff	_redirectingServo,initServo@timer
  1681  00198E  C12B  F0E7         	movff	_redirectingServo+1,initServo@timer+1
  1682  001992  C12C  F0E8         	movff	_redirectingServo+2,initServo@po
  1683  001996  C12D  F0E9         	movff	_redirectingServo+3,initServo@po+1
  1684  00199A  C12E  F0EA         	movff	_redirectingServo+4,initServo@pi
  1685  00199E  C12F  F0EB         	movff	_redirectingServo+5,initServo@pi+1
  1686  0019A2  0E00               	movlw	0
  1687  0019A4  0100               	movlb	0	; () banked
  1688  0019A6  6FED               	movwf	(initServo@angle+1)& (0+255),b
  1689  0019A8  0E5A               	movlw	90
  1690  0019AA  6FEC               	movwf	initServo@angle& (0+255),b
  1691  0019AC  ECD0  F00E         	call	_initServo	;wreg free
  1692                           
  1693                           ;main.c: 67: lcdClear();
  1694  0019B0  EC58  F012         	call	_lcdClear	;wreg free
  1695                           
  1696                           ;main.c: 68: printf("running");
  1697  0019B4  0EEF               	movlw	low STR_1
  1698  0019B6  0100               	movlb	0	; () banked
  1699  0019B8  6F8C               	movwf	printf@f& (0+255),b
  1700  0019BA  0EFF               	movlw	high STR_1
  1701  0019BC  0100               	movlb	0	; () banked
  1702  0019BE  6F8D               	movwf	(printf@f+1)& (0+255),b
  1703  0019C0  EC3D  F001         	call	_printf	;wreg free
  1704  0019C4                     l4198:
  1705  0019C4  0100               	movlb	0	; () banked
  1706  0019C6  51FE               	movf	_switchFlag& (0+255),w,b
  1707  0019C8  0100               	movlb	0	; () banked
  1708  0019CA  11FF               	iorwf	(_switchFlag+1)& (0+255),w,b
  1709  0019CC  B4D8               	btfsc	status,2,c
  1710  0019CE  D7FA               	goto	l4198
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;main.c: 73: switchFlag = 0;
  1714                           
  1715                           ; BSR set to: 0
  1716  0019D0  0E00               	movlw	0
  1717  0019D2  0100               	movlb	0	; () banked
  1718  0019D4  6FFF               	movwf	(_switchFlag+1)& (0+255),b
  1719  0019D6  0E00               	movlw	0
  1720  0019D8  6FFE               	movwf	_switchFlag& (0+255),b
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;main.c: 74: sortBattery();
  1724  0019DA  EC35  F006         	call	_sortBattery	;wreg free
  1725  0019DE  D7F2               	goto	l4198
  1726  0019E0                     l118:
  1727  0019E0  D7FF               	goto	l118
  1728  0019E2                     __end_of_main:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           tblptrh	equ	0xFF7
  1732                           tblptrl	equ	0xFF6
  1733                           tablat	equ	0xFF5
  1734                           intcon	equ	0xFF2
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           postdec1	equ	0xFE5
  1738                           fsr1l	equ	0xFE1
  1739                           status	equ	0xFD8
  1740                           
  1741 ;; *************** function _sortBattery *****************
  1742 ;; Defined at:
  1743 ;;		line 81 in file "main.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;  target          2  116[BANK0 ] int 
  1748 ;;  V               2  114[BANK0 ] int 
  1749 ;;  resolution      2  112[BANK0 ] int 
  1750 ;;  Vcc             2  110[BANK0 ] int 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1763 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1764 ;;Total ram usage:        8 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:   11
  1767 ;; This function calls:
  1768 ;;		___aldiv
  1769 ;;		___wmul
  1770 ;;		_analogRead
  1771 ;;		_digitalRead
  1772 ;;		_digitalWrite
  1773 ;;		_initServo
  1774 ;;		_lcdClear
  1775 ;;		_pause
  1776 ;;		_printf
  1777 ;;		_setAngle
  1778 ;;		_stopServo
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           	psect	text1
  1785  000C6A                     __ptext1:
  1786                           	opt stack 0
  1787  000C6A                     _sortBattery:
  1788                           	opt stack 19
  1789                           
  1790                           ;main.c: 83: lcdClear();
  1791                           
  1792                           ;incstack = 0
  1793  000C6A  EC58  F012         	call	_lcdClear	;wreg free
  1794                           
  1795                           ;main.c: 84: printf("interrupt!");
  1796  000C6E  0ED3               	movlw	low STR_2
  1797  000C70  0100               	movlb	0	; () banked
  1798  000C72  6F8C               	movwf	printf@f& (0+255),b
  1799  000C74  0EFF               	movlw	high STR_2
  1800  000C76  0100               	movlb	0	; () banked
  1801  000C78  6F8D               	movwf	(printf@f+1)& (0+255),b
  1802  000C7A  EC3D  F001         	call	_printf	;wreg free
  1803                           
  1804                           ;main.c: 87: stopServo(conveyorServo[0]);
  1805  000C7E  C076  F080         	movff	_conveyorServo,stopServo@timer
  1806  000C82  C077  F081         	movff	_conveyorServo+1,stopServo@timer+1
  1807  000C86  EC75  F010         	call	_stopServo	;wreg free
  1808                           
  1809                           ;main.c: 88: digitalWrite(cylinderMotor[0], cylinderMotor[1], 0);
  1810  000C8A  C130  F080         	movff	_cylinderMotor,digitalWrite@port
  1811  000C8E  C131  F081         	movff	_cylinderMotor+1,digitalWrite@port+1
  1812  000C92  C132  F082         	movff	_cylinderMotor+2,digitalWrite@pin
  1813  000C96  C133  F083         	movff	_cylinderMotor+3,digitalWrite@pin+1
  1814  000C9A  0E00               	movlw	0
  1815  000C9C  0100               	movlb	0	; () banked
  1816  000C9E  6F85               	movwf	(digitalWrite@val+1)& (0+255),b
  1817  000CA0  0E00               	movlw	0
  1818  000CA2  6F84               	movwf	digitalWrite@val& (0+255),b
  1819  000CA4  EC28  F00C         	call	_digitalWrite	;wreg free
  1820                           
  1821                           ;main.c: 96: pause("close?");
  1822  000CA8  0EF7               	movlw	low STR_3
  1823  000CAA  0100               	movlb	0	; () banked
  1824  000CAC  6F9B               	movwf	pause@message& (0+255),b
  1825  000CAE  0EFF               	movlw	high STR_3
  1826  000CB0  0100               	movlb	0	; () banked
  1827  000CB2  6F9C               	movwf	(pause@message+1)& (0+255),b
  1828  000CB4  EC41  F012         	call	_pause	;wreg free
  1829                           
  1830                           ;main.c: 97: setAngle(padServo[0], padAngle_CLOSE);
  1831  000CB8  C124  F0DC         	movff	_padServo,setAngle@timer
  1832  000CBC  C125  F0DD         	movff	_padServo+1,setAngle@timer+1
  1833  000CC0  C0F8  F0DE         	movff	_padAngle_CLOSE,setAngle@angle
  1834  000CC4  C0F9  F0DF         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  1835  000CC8  EC46  F00E         	call	_setAngle	;wreg free
  1836                           
  1837                           ;main.c: 100: pause("read voltage?");
  1838  000CCC  0EC5               	movlw	low STR_4
  1839  000CCE  0100               	movlb	0	; () banked
  1840  000CD0  6F9B               	movwf	pause@message& (0+255),b
  1841  000CD2  0EFF               	movlw	high STR_4
  1842  000CD4  0100               	movlb	0	; () banked
  1843  000CD6  6F9C               	movwf	(pause@message+1)& (0+255),b
  1844  000CD8  EC41  F012         	call	_pause	;wreg free
  1845                           
  1846                           ;main.c: 101: int Vcc = 4.8;
  1847  000CDC  0E00               	movlw	0
  1848  000CDE  0100               	movlb	0	; () banked
  1849  000CE0  6FEF               	movwf	(sortBattery@Vcc+1)& (0+255),b
  1850  000CE2  0E04               	movlw	4
  1851  000CE4  6FEE               	movwf	sortBattery@Vcc& (0+255),b
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;main.c: 102: int resolution = (1<<10) - 1;
  1855  000CE6  0E03               	movlw	3
  1856  000CE8  0100               	movlb	0	; () banked
  1857  000CEA  6FF1               	movwf	(sortBattery@resolution+1)& (0+255),b
  1858  000CEC  69F0               	setf	sortBattery@resolution& (0+255),b
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 104: int target = digitalRead(padPin1[0],padPin1[1])<<1;
  1862  000CEE  C134  F080         	movff	_padPin1,digitalRead@port
  1863  000CF2  C135  F081         	movff	_padPin1+1,digitalRead@port+1
  1864  000CF6  C136  F082         	movff	_padPin1+2,digitalRead@pin
  1865  000CFA  C137  F083         	movff	_padPin1+3,digitalRead@pin+1
  1866  000CFE  EC41  F00B         	call	_digitalRead	;wreg free
  1867  000D02  90D8               	bcf	status,0,c
  1868  000D04  0100               	movlb	0	; () banked
  1869  000D06  3580               	rlcf	?_digitalRead& (0+255),w,b
  1870  000D08  0100               	movlb	0	; () banked
  1871  000D0A  6FF4               	movwf	sortBattery@target& (0+255),b
  1872  000D0C  0100               	movlb	0	; () banked
  1873  000D0E  3581               	rlcf	(?_digitalRead+1)& (0+255),w,b
  1874  000D10  0100               	movlb	0	; () banked
  1875  000D12  6FF5               	movwf	(sortBattery@target+1)& (0+255),b
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;main.c: 105: target |= digitalRead(padPin2[0],padPin2[1]);
  1879  000D14  C138  F080         	movff	_padPin2,digitalRead@port
  1880  000D18  C139  F081         	movff	_padPin2+1,digitalRead@port+1
  1881  000D1C  C13A  F082         	movff	_padPin2+2,digitalRead@pin
  1882  000D20  C13B  F083         	movff	_padPin2+3,digitalRead@pin+1
  1883  000D24  EC41  F00B         	call	_digitalRead	;wreg free
  1884  000D28  0100               	movlb	0	; () banked
  1885  000D2A  5180               	movf	?_digitalRead& (0+255),w,b
  1886  000D2C  0100               	movlb	0	; () banked
  1887  000D2E  13F4               	iorwf	sortBattery@target& (0+255),f,b
  1888  000D30  0100               	movlb	0	; () banked
  1889  000D32  5181               	movf	(?_digitalRead+1)& (0+255),w,b
  1890  000D34  0100               	movlb	0	; () banked
  1891  000D36  13F5               	iorwf	(sortBattery@target+1)& (0+255),f,b
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;main.c: 106: int V = analogRead(padPin3[1]) / resolution * Vcc;
  1895  000D38  C0F0  F08A         	movff	sortBattery@resolution,___aldiv@divisor
  1896  000D3C  C0F1  F08B         	movff	sortBattery@resolution+1,___aldiv@divisor+1
  1897  000D40  0100               	movlb	0	; () banked
  1898  000D42  0E00               	movlw	0
  1899  000D44  BF8B               	btfsc	(___aldiv@divisor+1)& (0+255),7,b
  1900  000D46  0EFF               	movlw	-1
  1901  000D48  6F8C               	movwf	(___aldiv@divisor+2)& (0+255),b
  1902  000D4A  6F8D               	movwf	(___aldiv@divisor+3)& (0+255),b
  1903  000D4C  C122  F080         	movff	_padPin3+2,analogRead@channel
  1904  000D50  C123  F081         	movff	_padPin3+3,analogRead@channel+1
  1905  000D54  EC06  F011         	call	_analogRead	;wreg free
  1906  000D58  C080  F086         	movff	?_analogRead,___aldiv@dividend
  1907  000D5C  C081  F087         	movff	?_analogRead+1,___aldiv@dividend+1
  1908  000D60  C082  F088         	movff	?_analogRead+2,___aldiv@dividend+2
  1909  000D64  C083  F089         	movff	?_analogRead+3,___aldiv@dividend+3
  1910  000D68  ECB8  F008         	call	___aldiv	;wreg free
  1911  000D6C  C086  F094         	movff	?___aldiv,___wmul@multiplier
  1912  000D70  C087  F095         	movff	?___aldiv+1,___wmul@multiplier+1
  1913  000D74  C0EE  F096         	movff	sortBattery@Vcc,___wmul@multiplicand
  1914  000D78  C0EF  F097         	movff	sortBattery@Vcc+1,___wmul@multiplicand+1
  1915  000D7C  EC62  F011         	call	___wmul	;wreg free
  1916  000D80  C094  F0F2         	movff	?___wmul,sortBattery@V
  1917  000D84  C095  F0F3         	movff	?___wmul+1,sortBattery@V+1
  1918                           
  1919                           ;main.c: 108: lcdClear();
  1920  000D88  EC58  F012         	call	_lcdClear	;wreg free
  1921                           
  1922                           ;main.c: 109: printf("target: %d, V: %d",target,V);
  1923  000D8C  0E1C               	movlw	low STR_5
  1924  000D8E  0100               	movlb	0	; () banked
  1925  000D90  6F8C               	movwf	printf@f& (0+255),b
  1926  000D92  0EFF               	movlw	high STR_5
  1927  000D94  0100               	movlb	0	; () banked
  1928  000D96  6F8D               	movwf	(printf@f+1)& (0+255),b
  1929  000D98  C0F4  F08E         	movff	sortBattery@target,?_printf+2
  1930  000D9C  C0F5  F08F         	movff	sortBattery@target+1,?_printf+3
  1931  000DA0  C0F2  F090         	movff	sortBattery@V,?_printf+4
  1932  000DA4  C0F3  F091         	movff	sortBattery@V+1,?_printf+5
  1933  000DA8  EC3D  F001         	call	_printf	;wreg free
  1934  000DAC                     l126:
  1935  000DAC  D7FF               	goto	l126
  1936  000DAE                     l129:
  1937  000DAE  D7FF               	goto	l129
  1938  000DB0                     __end_of_sortBattery:
  1939                           	opt stack 0
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           intcon	equ	0xFF2
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           postdec1	equ	0xFE5
  1948                           fsr1l	equ	0xFE1
  1949                           status	equ	0xFD8
  1950                           
  1951 ;; *************** function _stopServo *****************
  1952 ;; Defined at:
  1953 ;;		line 26 in file "servo.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  timer           2    0[BANK0 ] int 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;		None
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      void 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1967 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;Total ram usage:        4 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    5
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_sortBattery
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text2
  1982  0020EA                     __ptext2:
  1983                           	opt stack 0
  1984  0020EA                     _stopServo:
  1985                           	opt stack 24
  1986                           
  1987                           ;servo.c: 27: switch(timer){
  1988                           
  1989                           ;incstack = 0
  1990  0020EA  D00C               	goto	l3764
  1991  0020EC                     l3754:
  1992  0020EC  0E00               	movlw	0
  1993  0020EE  6ED5               	movwf	4053,c	;volatile
  1994  0020F0  0012               	return	
  1995  0020F2                     l3756:
  1996  0020F2  0E00               	movlw	0
  1997  0020F4  6ECD               	movwf	4045,c	;volatile
  1998  0020F6  0012               	return	
  1999  0020F8                     l3758:
  2000  0020F8  0E00               	movlw	0
  2001  0020FA  6ECA               	movwf	4042,c	;volatile
  2002  0020FC  0012               	return	
  2003  0020FE                     l3760:
  2004  0020FE  0E00               	movlw	0
  2005  002100  6EB1               	movwf	4017,c	;volatile
  2006                           
  2007                           ;servo.c: 32: }
  2008  002102  0012               	return	
  2009  002104                     l3764:
  2010  002104  C080  F082         	movff	stopServo@timer,??_stopServo
  2011  002108  C081  F083         	movff	stopServo@timer+1,??_stopServo+1
  2012                           
  2013                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2014                           ; Switch size 1, requested type "space"
  2015                           ; Number of cases is 1, Range of values is 0 to 0
  2016                           ; switch strategies available:
  2017                           ; Name         Instructions Cycles
  2018                           ; simple_byte            4     3 (average)
  2019                           ;	Chosen strategy is simple_byte
  2020  00210C  0100               	movlb	0	; () banked
  2021  00210E  5183               	movf	(??_stopServo+1)& (0+255),w,b
  2022  002110  0A00               	xorlw	0	; case 0
  2023  002112  A4D8               	btfss	status,2,c
  2024  002114  0012               	return	
  2025                           
  2026                           ; BSR set to: 0
  2027                           ; Switch size 1, requested type "space"
  2028                           ; Number of cases is 4, Range of values is 0 to 3
  2029                           ; switch strategies available:
  2030                           ; Name         Instructions Cycles
  2031                           ; simple_byte           13     7 (average)
  2032                           ;	Chosen strategy is simple_byte
  2033  002116  0100               	movlb	0	; () banked
  2034  002118  5182               	movf	??_stopServo& (0+255),w,b
  2035  00211A  0A00               	xorlw	0	; case 0
  2036  00211C  B4D8               	btfsc	status,2,c
  2037  00211E  D7E6               	goto	l3754
  2038  002120  0A01               	xorlw	1	; case 1
  2039  002122  B4D8               	btfsc	status,2,c
  2040  002124  D7E6               	goto	l3756
  2041  002126  0A03               	xorlw	3	; case 2
  2042  002128  B4D8               	btfsc	status,2,c
  2043  00212A  D7E6               	goto	l3758
  2044  00212C  0A01               	xorlw	1	; case 3
  2045  00212E  A4D8               	btfss	status,2,c
  2046  002130  0012               	return	
  2047  002132  D7E5               	goto	l3760
  2048  002134                     __end_of_stopServo:
  2049                           	opt stack 0
  2050                           tblptru	equ	0xFF8
  2051                           tblptrh	equ	0xFF7
  2052                           tblptrl	equ	0xFF6
  2053                           tablat	equ	0xFF5
  2054                           intcon	equ	0xFF2
  2055                           postinc0	equ	0xFEE
  2056                           wreg	equ	0xFE8
  2057                           postdec1	equ	0xFE5
  2058                           fsr1l	equ	0xFE1
  2059                           status	equ	0xFD8
  2060                           
  2061 ;; *************** function _pause *****************
  2062 ;; Defined at:
  2063 ;;		line 247 in file "main.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  message         2   27[BANK0 ] PTR unsigned char 
  2066 ;;		 -> STR_9(24), STR_8(15), STR_7(17), STR_6(20), 
  2067 ;;		 -> STR_4(14), STR_3(7), 
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2079 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;Total ram usage:        2 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:   10
  2086 ;; This function calls:
  2087 ;;		_lcdClear
  2088 ;;		_printf
  2089 ;;		_readKeypad
  2090 ;; This function is called by:
  2091 ;;		_sortBattery
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text3
  2096  002482                     __ptext3:
  2097                           	opt stack 0
  2098  002482                     _pause:
  2099                           	opt stack 19
  2100                           
  2101                           ;main.c: 248: lcdClear();
  2102                           
  2103                           ;incstack = 0
  2104  002482  EC58  F012         	call	_lcdClear	;wreg free
  2105                           
  2106                           ;main.c: 249: printf(message);
  2107  002486  C09B  F08C         	movff	pause@message,printf@f
  2108  00248A  C09C  F08D         	movff	pause@message+1,printf@f+1
  2109  00248E  EC3D  F001         	call	_printf	;wreg free
  2110                           
  2111                           ;main.c: 250: readKeypad();
  2112  002492  EC96  F011         	call	_readKeypad	;wreg free
  2113  002496  0012               	return		;funcret
  2114  002498                     __end_of_pause:
  2115                           	opt stack 0
  2116                           tblptru	equ	0xFF8
  2117                           tblptrh	equ	0xFF7
  2118                           tblptrl	equ	0xFF6
  2119                           tablat	equ	0xFF5
  2120                           intcon	equ	0xFF2
  2121                           postinc0	equ	0xFEE
  2122                           wreg	equ	0xFE8
  2123                           postdec1	equ	0xFE5
  2124                           fsr1l	equ	0xFE1
  2125                           status	equ	0xFD8
  2126                           
  2127 ;; *************** function _initServo *****************
  2128 ;; Defined at:
  2129 ;;		line 17 in file "servo.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;  timer           2  102[BANK0 ] int 
  2132 ;;  po              2  104[BANK0 ] int 
  2133 ;;  pi              2  106[BANK0 ] int 
  2134 ;;  angle           2  108[BANK0 ] int 
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;		None
  2137 ;; Return value:  Size  Location     Type
  2138 ;;                  1    wreg      void 
  2139 ;; Registers used:
  2140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2141 ;; Tracked objects:
  2142 ;;		On entry : 0/0
  2143 ;;		On exit  : 0/0
  2144 ;;		Unchanged: 0/0
  2145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2146 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;Total ram usage:        8 bytes
  2151 ;; Hardware stack levels used:    1
  2152 ;; Hardware stack levels required when called:    9
  2153 ;; This function calls:
  2154 ;;		_initTimer
  2155 ;;		_setAngle
  2156 ;;		_startTimer
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;;		_sortBattery
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text4
  2164  001DA0                     __ptext4:
  2165                           	opt stack 0
  2166  001DA0                     _initServo:
  2167                           	opt stack 20
  2168                           
  2169                           ;servo.c: 18: port[timer] = po;
  2170                           
  2171                           ;incstack = 0
  2172  001DA0  90D8               	bcf	status,0,c
  2173  001DA2  0100               	movlb	0	; () banked
  2174  001DA4  35E6               	rlcf	initServo@timer& (0+255),w,b
  2175  001DA6  6ED9               	movwf	fsr2l,c
  2176  001DA8  0100               	movlb	0	; () banked
  2177  001DAA  35E7               	rlcf	(initServo@timer+1)& (0+255),w,b
  2178  001DAC  6EDA               	movwf	fsr2h,c
  2179  001DAE  0E18               	movlw	low _port
  2180  001DB0  26D9               	addwf	fsr2l,f,c
  2181  001DB2  0E01               	movlw	high _port
  2182  001DB4  22DA               	addwfc	fsr2h,f,c
  2183  001DB6  C0E8  FFDE         	movff	initServo@po,postinc2
  2184  001DBA  C0E9  FFDD         	movff	initServo@po+1,postdec2
  2185                           
  2186                           ;servo.c: 19: pin[timer] = pi;
  2187  001DBE  90D8               	bcf	status,0,c
  2188  001DC0  0100               	movlb	0	; () banked
  2189  001DC2  35E6               	rlcf	initServo@timer& (0+255),w,b
  2190  001DC4  6ED9               	movwf	fsr2l,c
  2191  001DC6  0100               	movlb	0	; () banked
  2192  001DC8  35E7               	rlcf	(initServo@timer+1)& (0+255),w,b
  2193  001DCA  6EDA               	movwf	fsr2h,c
  2194  001DCC  0E10               	movlw	low _pin
  2195  001DCE  26D9               	addwf	fsr2l,f,c
  2196  001DD0  0E01               	movlw	high _pin
  2197  001DD2  22DA               	addwfc	fsr2h,f,c
  2198  001DD4  C0EA  FFDE         	movff	initServo@pi,postinc2
  2199  001DD8  C0EB  FFDD         	movff	initServo@pi+1,postdec2
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;servo.c: 20: setAngle(timer, angle);
  2203  001DDC  C0E6  F0DC         	movff	initServo@timer,setAngle@timer
  2204  001DE0  C0E7  F0DD         	movff	initServo@timer+1,setAngle@timer+1
  2205  001DE4  C0EC  F0DE         	movff	initServo@angle,setAngle@angle
  2206  001DE8  C0ED  F0DF         	movff	initServo@angle+1,setAngle@angle+1
  2207  001DEC  EC46  F00E         	call	_setAngle	;wreg free
  2208                           
  2209                           ;servo.c: 22: initTimer(timer);
  2210  001DF0  C0E6  F080         	movff	initServo@timer,initTimer@timer
  2211  001DF4  C0E7  F081         	movff	initServo@timer+1,initTimer@timer+1
  2212  001DF8  EC9A  F010         	call	_initTimer	;wreg free
  2213                           
  2214                           ;servo.c: 23: startTimer(timer,0);
  2215  001DFC  C0E6  F080         	movff	initServo@timer,startTimer@timer
  2216  001E00  C0E7  F081         	movff	initServo@timer+1,startTimer@timer+1
  2217  001E04  0E00               	movlw	0
  2218  001E06  0100               	movlb	0	; () banked
  2219  001E08  6F82               	movwf	startTimer@val& (0+255),b
  2220  001E0A  0E00               	movlw	0
  2221  001E0C  6F83               	movwf	(startTimer@val+1)& (0+255),b
  2222  001E0E  0E00               	movlw	0
  2223  001E10  6F84               	movwf	(startTimer@val+2)& (0+255),b
  2224  001E12  0E00               	movlw	0
  2225  001E14  6F85               	movwf	(startTimer@val+3)& (0+255),b
  2226  001E16  EC27  F010         	call	_startTimer	;wreg free
  2227  001E1A  0012               	return		;funcret
  2228  001E1C                     __end_of_initServo:
  2229                           	opt stack 0
  2230                           tblptru	equ	0xFF8
  2231                           tblptrh	equ	0xFF7
  2232                           tblptrl	equ	0xFF6
  2233                           tablat	equ	0xFF5
  2234                           intcon	equ	0xFF2
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           postdec1	equ	0xFE5
  2238                           fsr1l	equ	0xFE1
  2239                           postinc2	equ	0xFDE
  2240                           postdec2	equ	0xFDD
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _startTimer *****************
  2246 ;; Defined at:
  2247 ;;		line 75 in file "timer.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;  timer           2    0[BANK0 ] int 
  2250 ;;  val             4    2[BANK0 ] long 
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;		None
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		wreg, status,2, status,0
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2262 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;Total ram usage:        8 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    5
  2269 ;; This function calls:
  2270 ;;		Nothing
  2271 ;; This function is called by:
  2272 ;;		_initServo
  2273 ;;		_testFrequency
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text5
  2278  00204E                     __ptext5:
  2279                           	opt stack 0
  2280  00204E                     _startTimer:
  2281                           	opt stack 23
  2282                           
  2283                           ;timer.c: 76: switch(timer){
  2284                           
  2285                           ;incstack = 0
  2286  00204E  D012               	goto	l3498
  2287  002050                     l417:
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;timer.c: 78: TMR0H = val>>8;
  2291  002050  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
  2292                           
  2293                           ;timer.c: 79: TMR0L = val;
  2294  002054  C082  FFD6         	movff	startTimer@val,4054	;volatile
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;timer.c: 80: T0CON |= 1<<7;
  2298  002058  8ED5               	bsf	4053,7,c	;volatile
  2299                           
  2300                           ;timer.c: 81: break;
  2301  00205A  0012               	return	
  2302  00205C                     l419:
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;timer.c: 83: TMR1H = val>>8;
  2306  00205C  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
  2307                           
  2308                           ;timer.c: 84: TMR1L = val;
  2309  002060  C082  FFCE         	movff	startTimer@val,4046	;volatile
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;timer.c: 85: T1CON |= 1<<0;
  2313  002064  80CD               	bsf	4045,0,c	;volatile
  2314                           
  2315                           ;timer.c: 86: break;
  2316  002066  0012               	return	
  2317  002068                     l420:
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;timer.c: 88: TMR3H = val>>8;
  2321  002068  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
  2322                           
  2323                           ;timer.c: 89: TMR3L = val;
  2324  00206C  C082  FFB2         	movff	startTimer@val,4018	;volatile
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;timer.c: 90: T3CON |= 1<<0;
  2328  002070  80B1               	bsf	4017,0,c	;volatile
  2329                           
  2330                           ;timer.c: 91: }
  2331  002072  0012               	return	
  2332  002074                     l3498:
  2333  002074  C080  F086         	movff	startTimer@timer,??_startTimer
  2334  002078  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
  2335                           
  2336                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2337                           ; Switch size 1, requested type "space"
  2338                           ; Number of cases is 1, Range of values is 0 to 0
  2339                           ; switch strategies available:
  2340                           ; Name         Instructions Cycles
  2341                           ; simple_byte            4     3 (average)
  2342                           ;	Chosen strategy is simple_byte
  2343  00207C  0100               	movlb	0	; () banked
  2344  00207E  5187               	movf	(??_startTimer+1)& (0+255),w,b
  2345  002080  0A00               	xorlw	0	; case 0
  2346  002082  A4D8               	btfss	status,2,c
  2347  002084  0012               	return	
  2348                           
  2349                           ; BSR set to: 0
  2350                           ; Switch size 1, requested type "space"
  2351                           ; Number of cases is 3, Range of values is 0 to 3
  2352                           ; switch strategies available:
  2353                           ; Name         Instructions Cycles
  2354                           ; simple_byte           10     6 (average)
  2355                           ;	Chosen strategy is simple_byte
  2356  002086  0100               	movlb	0	; () banked
  2357  002088  5186               	movf	??_startTimer& (0+255),w,b
  2358  00208A  0A00               	xorlw	0	; case 0
  2359  00208C  B4D8               	btfsc	status,2,c
  2360  00208E  D7E0               	goto	l417
  2361  002090  0A01               	xorlw	1	; case 1
  2362  002092  B4D8               	btfsc	status,2,c
  2363  002094  D7E3               	goto	l419
  2364  002096  0A02               	xorlw	2	; case 3
  2365  002098  A4D8               	btfss	status,2,c
  2366  00209A  0012               	return	
  2367  00209C  D7E5               	goto	l420
  2368  00209E                     __end_of_startTimer:
  2369                           	opt stack 0
  2370                           tblptru	equ	0xFF8
  2371                           tblptrh	equ	0xFF7
  2372                           tblptrl	equ	0xFF6
  2373                           tablat	equ	0xFF5
  2374                           intcon	equ	0xFF2
  2375                           postinc0	equ	0xFEE
  2376                           wreg	equ	0xFE8
  2377                           postdec1	equ	0xFE5
  2378                           fsr1l	equ	0xFE1
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _setAngle *****************
  2386 ;; Defined at:
  2387 ;;		line 43 in file "servo.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  timer           2   92[BANK0 ] int 
  2390 ;;  angle           2   94[BANK0 ] int 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;		None
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  1    wreg      void 
  2395 ;; Registers used:
  2396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2402 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;Total ram usage:       10 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    8
  2409 ;; This function calls:
  2410 ;;		_angleToPulse
  2411 ;; This function is called by:
  2412 ;;		_sortBattery
  2413 ;;		_initServo
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text6
  2418  001C8C                     __ptext6:
  2419                           	opt stack 0
  2420  001C8C                     _setAngle:
  2421                           	opt stack 21
  2422                           
  2423                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;incstack = 0
  2427  001C8C  C0DE  F0C5         	movff	setAngle@angle,angleToPulse@angle
  2428  001C90  C0DF  F0C6         	movff	setAngle@angle+1,angleToPulse@angle+1
  2429  001C94  EC2D  F004         	call	_angleToPulse	;wreg free
  2430  001C98  0100               	movlb	0	; () banked
  2431  001C9A  1FC5               	comf	?_angleToPulse& (0+255),f,b
  2432  001C9C  0100               	movlb	0	; () banked
  2433  001C9E  1FC6               	comf	(?_angleToPulse+1)& (0+255),f,b
  2434  001CA0  0100               	movlb	0	; () banked
  2435  001CA2  1FC7               	comf	(?_angleToPulse+2)& (0+255),f,b
  2436  001CA4  0100               	movlb	0	; () banked
  2437  001CA6  1FC8               	comf	(?_angleToPulse+3)& (0+255),f,b
  2438  001CA8  0100               	movlb	0	; () banked
  2439  001CAA  2BC5               	incf	?_angleToPulse& (0+255),f,b
  2440  001CAC  0E00               	movlw	0
  2441  001CAE  0100               	movlb	0	; () banked
  2442  001CB0  23C6               	addwfc	(?_angleToPulse+1)& (0+255),f,b
  2443  001CB2  0100               	movlb	0	; () banked
  2444  001CB4  23C7               	addwfc	(?_angleToPulse+2)& (0+255),f,b
  2445  001CB6  0100               	movlb	0	; () banked
  2446  001CB8  23C8               	addwfc	(?_angleToPulse+3)& (0+255),f,b
  2447  001CBA  0EFF               	movlw	255
  2448  001CBC  0100               	movlb	0	; () banked
  2449  001CBE  25C5               	addwf	?_angleToPulse& (0+255),w,b
  2450  001CC0  0100               	movlb	0	; () banked
  2451  001CC2  6FE0               	movwf	??_setAngle& (0+255),b
  2452  001CC4  0EFF               	movlw	255
  2453  001CC6  0100               	movlb	0	; () banked
  2454  001CC8  21C6               	addwfc	(?_angleToPulse+1)& (0+255),w,b
  2455  001CCA  0100               	movlb	0	; () banked
  2456  001CCC  6FE1               	movwf	(??_setAngle+1)& (0+255),b
  2457  001CCE  0E00               	movlw	0
  2458  001CD0  0100               	movlb	0	; () banked
  2459  001CD2  21C7               	addwfc	(?_angleToPulse+2)& (0+255),w,b
  2460  001CD4  0100               	movlb	0	; () banked
  2461  001CD6  6FE2               	movwf	(??_setAngle+2)& (0+255),b
  2462  001CD8  0E00               	movlw	0
  2463  001CDA  0100               	movlb	0	; () banked
  2464  001CDC  21C8               	addwfc	(?_angleToPulse+3)& (0+255),w,b
  2465  001CDE  0100               	movlb	0	; () banked
  2466  001CE0  6FE3               	movwf	(??_setAngle+3)& (0+255),b
  2467  001CE2  0E00               	movlw	low _pulse
  2468  001CE4  0100               	movlb	0	; () banked
  2469  001CE6  6FE4               	movwf	(??_setAngle+4)& (0+255),b
  2470  001CE8  0E01               	movlw	high _pulse
  2471  001CEA  0100               	movlb	0	; () banked
  2472  001CEC  6FE5               	movwf	(??_setAngle+5)& (0+255),b
  2473  001CEE  90D8               	bcf	status,0,c
  2474  001CF0  0100               	movlb	0	; () banked
  2475  001CF2  35DC               	rlcf	setAngle@timer& (0+255),w,b
  2476  001CF4  6ED9               	movwf	fsr2l,c
  2477  001CF6  0100               	movlb	0	; () banked
  2478  001CF8  35DD               	rlcf	(setAngle@timer+1)& (0+255),w,b
  2479  001CFA  6EDA               	movwf	fsr2h,c
  2480  001CFC  90D8               	bcf	status,0,c
  2481  001CFE  36D9               	rlcf	fsr2l,f,c
  2482  001D00  36DA               	rlcf	fsr2h,f,c
  2483  001D02  0100               	movlb	0	; () banked
  2484  001D04  51E4               	movf	(??_setAngle+4)& (0+255),w,b
  2485  001D06  26D9               	addwf	fsr2l,f,c
  2486  001D08  0100               	movlb	0	; () banked
  2487  001D0A  51E5               	movf	(??_setAngle+5)& (0+255),w,b
  2488  001D0C  22DA               	addwfc	fsr2h,f,c
  2489  001D0E  C0E0  FFDE         	movff	??_setAngle,postinc2
  2490  001D12  C0E1  FFDE         	movff	??_setAngle+1,postinc2
  2491  001D16  C0E2  FFDE         	movff	??_setAngle+2,postinc2
  2492  001D1A  C0E3  FFDE         	movff	??_setAngle+3,postinc2
  2493                           
  2494                           ; BSR set to: 0
  2495  001D1E  0012               	return		;funcret
  2496  001D20                     __end_of_setAngle:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           intcon	equ	0xFF2
  2503                           postinc0	equ	0xFEE
  2504                           wreg	equ	0xFE8
  2505                           postdec1	equ	0xFE5
  2506                           fsr1l	equ	0xFE1
  2507                           postinc2	equ	0xFDE
  2508                           postdec2	equ	0xFDD
  2509                           fsr2h	equ	0xFDA
  2510                           fsr2l	equ	0xFD9
  2511                           status	equ	0xFD8
  2512                           
  2513 ;; *************** function _angleToPulse *****************
  2514 ;; Defined at:
  2515 ;;		line 35 in file "servo.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;  angle           2   69[BANK0 ] int 
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  a000            4   88[BANK0 ] long 
  2520 ;;  a180            4   81[BANK0 ] long 
  2521 ;;  offset          4   77[BANK0 ] long 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  4   69[BANK0 ] long 
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2531 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;Total ram usage:       23 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    7
  2538 ;; This function calls:
  2539 ;;		___altoft
  2540 ;;		___awtoft
  2541 ;;		___ftadd
  2542 ;;		___ftdiv
  2543 ;;		___ftmul
  2544 ;;		___fttol
  2545 ;; This function is called by:
  2546 ;;		_setAngle
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text7
  2551  00085A                     __ptext7:
  2552                           	opt stack 0
  2553  00085A                     _angleToPulse:
  2554                           	opt stack 21
  2555                           
  2556                           ;servo.c: 36: long offset = 0;
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;incstack = 0
  2560  00085A  0E00               	movlw	0
  2561  00085C  0100               	movlb	0	; () banked
  2562  00085E  6FCD               	movwf	angleToPulse@offset& (0+255),b
  2563  000860  0E00               	movlw	0
  2564  000862  6FCE               	movwf	(angleToPulse@offset+1)& (0+255),b
  2565  000864  0E00               	movlw	0
  2566  000866  6FCF               	movwf	(angleToPulse@offset+2)& (0+255),b
  2567  000868  0E00               	movlw	0
  2568  00086A  6FD0               	movwf	(angleToPulse@offset+3)& (0+255),b
  2569                           
  2570                           ;servo.c: 37: long a000 = 1250;
  2571  00086C  0EE2               	movlw	226
  2572  00086E  0100               	movlb	0	; () banked
  2573  000870  6FD8               	movwf	angleToPulse@a000& (0+255),b
  2574  000872  0E04               	movlw	4
  2575  000874  6FD9               	movwf	(angleToPulse@a000+1)& (0+255),b
  2576  000876  0E00               	movlw	0
  2577  000878  6FDA               	movwf	(angleToPulse@a000+2)& (0+255),b
  2578  00087A  0E00               	movlw	0
  2579  00087C  6FDB               	movwf	(angleToPulse@a000+3)& (0+255),b
  2580                           
  2581                           ;servo.c: 38: long a180 = 6250;
  2582  00087E  0E6A               	movlw	106
  2583  000880  0100               	movlb	0	; () banked
  2584  000882  6FD1               	movwf	angleToPulse@a180& (0+255),b
  2585  000884  0E18               	movlw	24
  2586  000886  6FD2               	movwf	(angleToPulse@a180+1)& (0+255),b
  2587  000888  0E00               	movlw	0
  2588  00088A  6FD3               	movwf	(angleToPulse@a180+2)& (0+255),b
  2589  00088C  0E00               	movlw	0
  2590  00088E  6FD4               	movwf	(angleToPulse@a180+3)& (0+255),b
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  2594  000890  C0D8  F0C9         	movff	angleToPulse@a000,??_angleToPulse
  2595  000894  C0D9  F0CA         	movff	angleToPulse@a000+1,??_angleToPulse+1
  2596  000898  C0DA  F0CB         	movff	angleToPulse@a000+2,??_angleToPulse+2
  2597  00089C  C0DB  F0CC         	movff	angleToPulse@a000+3,??_angleToPulse+3
  2598  0008A0  0100               	movlb	0	; () banked
  2599  0008A2  1FC9               	comf	??_angleToPulse& (0+255),f,b
  2600  0008A4  1FCA               	comf	(??_angleToPulse+1)& (0+255),f,b
  2601  0008A6  1FCB               	comf	(??_angleToPulse+2)& (0+255),f,b
  2602  0008A8  1FCC               	comf	(??_angleToPulse+3)& (0+255),f,b
  2603  0008AA  2BC9               	incf	??_angleToPulse& (0+255),f,b
  2604  0008AC  0E00               	movlw	0
  2605  0008AE  23CA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  2606  0008B0  23CB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  2607  0008B2  23CC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  2608  0008B4  0100               	movlb	0	; () banked
  2609  0008B6  51D1               	movf	angleToPulse@a180& (0+255),w,b
  2610  0008B8  0100               	movlb	0	; () banked
  2611  0008BA  25C9               	addwf	??_angleToPulse& (0+255),w,b
  2612  0008BC  0100               	movlb	0	; () banked
  2613  0008BE  6F88               	movwf	___altoft@c& (0+255),b
  2614  0008C0  0100               	movlb	0	; () banked
  2615  0008C2  51D2               	movf	(angleToPulse@a180+1)& (0+255),w,b
  2616  0008C4  0100               	movlb	0	; () banked
  2617  0008C6  21CA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  2618  0008C8  0100               	movlb	0	; () banked
  2619  0008CA  6F89               	movwf	(___altoft@c+1)& (0+255),b
  2620  0008CC  0100               	movlb	0	; () banked
  2621  0008CE  51D3               	movf	(angleToPulse@a180+2)& (0+255),w,b
  2622  0008D0  0100               	movlb	0	; () banked
  2623  0008D2  21CB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  2624  0008D4  0100               	movlb	0	; () banked
  2625  0008D6  6F8A               	movwf	(___altoft@c+2)& (0+255),b
  2626  0008D8  0100               	movlb	0	; () banked
  2627  0008DA  51D4               	movf	(angleToPulse@a180+3)& (0+255),w,b
  2628  0008DC  0100               	movlb	0	; () banked
  2629  0008DE  21CC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  2630  0008E0  0100               	movlb	0	; () banked
  2631  0008E2  6F8B               	movwf	(___altoft@c+3)& (0+255),b
  2632  0008E4  ECF7  F00D         	call	___altoft	;wreg free
  2633  0008E8  C088  F09E         	movff	?___altoft,___ftmul@f2
  2634  0008EC  C089  F09F         	movff	?___altoft+1,___ftmul@f2+1
  2635  0008F0  C08A  F0A0         	movff	?___altoft+2,___ftmul@f2+2
  2636  0008F4  0E00               	movlw	0
  2637  0008F6  0100               	movlb	0	; () banked
  2638  0008F8  6F8F               	movwf	___ftdiv@f2& (0+255),b
  2639  0008FA  0E34               	movlw	52
  2640  0008FC  0100               	movlb	0	; () banked
  2641  0008FE  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  2642  000900  0E43               	movlw	67
  2643  000902  0100               	movlb	0	; () banked
  2644  000904  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  2645  000906  C0C5  F088         	movff	angleToPulse@angle,___awtoft@c
  2646  00090A  C0C6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
  2647  00090E  ECE4  F010         	call	___awtoft	;wreg free
  2648  000912  C088  F08C         	movff	?___awtoft,___ftdiv@f1
  2649  000916  C089  F08D         	movff	?___awtoft+1,___ftdiv@f1+1
  2650  00091A  C08A  F08E         	movff	?___awtoft+2,___ftdiv@f1+2
  2651  00091E  EC8F  F005         	call	___ftdiv	;wreg free
  2652  000922  C08C  F09B         	movff	?___ftdiv,___ftmul@f1
  2653  000926  C08D  F09C         	movff	?___ftdiv+1,___ftmul@f1+1
  2654  00092A  C08E  F09D         	movff	?___ftdiv+2,___ftmul@f1+2
  2655  00092E  ECE0  F004         	call	___ftmul	;wreg free
  2656  000932  C09B  F0AD         	movff	?___ftmul,___ftadd@f2
  2657  000936  C09C  F0AE         	movff	?___ftmul+1,___ftadd@f2+1
  2658  00093A  C09D  F0AF         	movff	?___ftmul+2,___ftadd@f2+2
  2659  00093E  C0D8  F088         	movff	angleToPulse@a000,___altoft@c
  2660  000942  C0D9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
  2661  000946  C0DA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
  2662  00094A  C0DB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
  2663  00094E  ECF7  F00D         	call	___altoft	;wreg free
  2664  000952  C088  F0AA         	movff	?___altoft,___ftadd@f1
  2665  000956  C089  F0AB         	movff	?___altoft+1,___ftadd@f1+1
  2666  00095A  C08A  F0AC         	movff	?___altoft+2,___ftadd@f1+2
  2667  00095E  EC09  F000         	call	___ftadd	;wreg free
  2668  000962  C0AA  F0D5         	movff	?___ftadd,_angleToPulse$1247
  2669  000966  C0AB  F0D6         	movff	?___ftadd+1,_angleToPulse$1247+1
  2670  00096A  C0AC  F0D7         	movff	?___ftadd+2,_angleToPulse$1247+2
  2671                           
  2672                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  2673  00096E  C0CD  F088         	movff	angleToPulse@offset,___altoft@c
  2674  000972  C0CE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
  2675  000976  C0CF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
  2676  00097A  C0D0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
  2677  00097E  ECF7  F00D         	call	___altoft	;wreg free
  2678  000982  C088  F0AD         	movff	?___altoft,___ftadd@f2
  2679  000986  C089  F0AE         	movff	?___altoft+1,___ftadd@f2+1
  2680  00098A  C08A  F0AF         	movff	?___altoft+2,___ftadd@f2+2
  2681  00098E  C0D5  F0AA         	movff	_angleToPulse$1247,___ftadd@f1
  2682  000992  C0D6  F0AB         	movff	_angleToPulse$1247+1,___ftadd@f1+1
  2683  000996  C0D7  F0AC         	movff	_angleToPulse$1247+2,___ftadd@f1+2
  2684  00099A  EC09  F000         	call	___ftadd	;wreg free
  2685  00099E  C0AA  F0B6         	movff	?___ftadd,___fttol@f1
  2686  0009A2  C0AB  F0B7         	movff	?___ftadd+1,___fttol@f1+1
  2687  0009A6  C0AC  F0B8         	movff	?___ftadd+2,___fttol@f1+2
  2688  0009AA  ECD8  F006         	call	___fttol	;wreg free
  2689  0009AE  C0B6  F0C5         	movff	?___fttol,?_angleToPulse
  2690  0009B2  C0B7  F0C6         	movff	?___fttol+1,?_angleToPulse+1
  2691  0009B6  C0B8  F0C7         	movff	?___fttol+2,?_angleToPulse+2
  2692  0009BA  C0B9  F0C8         	movff	?___fttol+3,?_angleToPulse+3
  2693  0009BE  0012               	return	
  2694  0009C0                     __end_of_angleToPulse:
  2695                           	opt stack 0
  2696                           tblptru	equ	0xFF8
  2697                           tblptrh	equ	0xFF7
  2698                           tblptrl	equ	0xFF6
  2699                           tablat	equ	0xFF5
  2700                           intcon	equ	0xFF2
  2701                           postinc0	equ	0xFEE
  2702                           wreg	equ	0xFE8
  2703                           postdec1	equ	0xFE5
  2704                           fsr1l	equ	0xFE1
  2705                           postinc2	equ	0xFDE
  2706                           postdec2	equ	0xFDD
  2707                           fsr2h	equ	0xFDA
  2708                           fsr2l	equ	0xFD9
  2709                           status	equ	0xFD8
  2710                           
  2711 ;; *************** function ___fttol *****************
  2712 ;; Defined at:
  2713 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  f1              3   54[BANK0 ] float 
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  lval            4   64[BANK0 ] unsigned long 
  2718 ;;  exp1            1   68[BANK0 ] unsigned char 
  2719 ;;  sign1           1   63[BANK0 ] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  4   54[BANK0 ] long 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2729 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;Total ram usage:       15 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    5
  2736 ;; This function calls:
  2737 ;;		Nothing
  2738 ;; This function is called by:
  2739 ;;		_angleToPulse
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text8
  2744  000DB0                     __ptext8:
  2745                           	opt stack 0
  2746  000DB0                     ___fttol:
  2747                           	opt stack 22
  2748                           
  2749                           ;incstack = 0
  2750  000DB0  C0B8  F0BA         	movff	___fttol@f1+2,??___fttol
  2751  000DB4  0100               	movlb	0	; () banked
  2752  000DB6  6BBB               	clrf	(??___fttol+1)& (0+255),b
  2753  000DB8  6BBC               	clrf	(??___fttol+2)& (0+255),b
  2754  000DBA  0100               	movlb	0	; () banked
  2755  000DBC  35B7               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2756  000DBE  0100               	movlb	0	; () banked
  2757  000DC0  37BA               	rlcf	??___fttol& (0+255),f,b
  2758  000DC2  E301               	bnc	u2591
  2759  000DC4  81BB               	bsf	(??___fttol+1)& (0+255),0,b
  2760  000DC6                     u2591:
  2761  000DC6  0100               	movlb	0	; () banked
  2762  000DC8  51BA               	movf	??___fttol& (0+255),w,b
  2763  000DCA  0100               	movlb	0	; () banked
  2764  000DCC  6FC4               	movwf	___fttol@exp1& (0+255),b
  2765  000DCE  0100               	movlb	0	; () banked
  2766  000DD0  51C4               	movf	___fttol@exp1& (0+255),w,b
  2767  000DD2  A4D8               	btfss	status,2,c
  2768  000DD4  D00A               	goto	l3236
  2769                           
  2770                           ; BSR set to: 0
  2771  000DD6  0E00               	movlw	0
  2772  000DD8  0100               	movlb	0	; () banked
  2773  000DDA  6FB6               	movwf	?___fttol& (0+255),b
  2774  000DDC  0E00               	movlw	0
  2775  000DDE  6FB7               	movwf	(?___fttol+1)& (0+255),b
  2776  000DE0  0E00               	movlw	0
  2777  000DE2  6FB8               	movwf	(?___fttol+2)& (0+255),b
  2778  000DE4  0E00               	movlw	0
  2779  000DE6  6FB9               	movwf	(?___fttol+3)& (0+255),b
  2780                           
  2781                           ; BSR set to: 0
  2782  000DE8  0012               	return	
  2783  000DEA                     l3236:
  2784                           
  2785                           ; BSR set to: 0
  2786  000DEA  0E17               	movlw	23
  2787  000DEC  0100               	movlb	0	; () banked
  2788  000DEE  6FBA               	movwf	??___fttol& (0+255),b
  2789  000DF0  C0B6  F0BB         	movff	___fttol@f1,??___fttol+1
  2790  000DF4  C0B7  F0BC         	movff	___fttol@f1+1,??___fttol+2
  2791  000DF8  C0B8  F0BD         	movff	___fttol@f1+2,??___fttol+3
  2792  000DFC  0100               	movlb	0	; () banked
  2793  000DFE  29BA               	incf	??___fttol& (0+255),w,b
  2794  000E00  0100               	movlb	0	; () banked
  2795  000E02  6FBE               	movwf	(??___fttol+4)& (0+255),b
  2796  000E04  D005               	goto	u2610
  2797  000E06                     u2615:
  2798  000E06  0100               	movlb	0	; () banked
  2799  000E08  90D8               	bcf	status,0,c
  2800  000E0A  33BD               	rrcf	(??___fttol+3)& (0+255),f,b
  2801  000E0C  33BC               	rrcf	(??___fttol+2)& (0+255),f,b
  2802  000E0E  33BB               	rrcf	(??___fttol+1)& (0+255),f,b
  2803  000E10                     u2610:
  2804  000E10  0100               	movlb	0	; () banked
  2805  000E12  2FBE               	decfsz	(??___fttol+4)& (0+255),f,b
  2806  000E14  D7F8               	goto	u2615
  2807  000E16  0100               	movlb	0	; () banked
  2808  000E18  51BB               	movf	(??___fttol+1)& (0+255),w,b
  2809  000E1A  0100               	movlb	0	; () banked
  2810  000E1C  6FBF               	movwf	___fttol@sign1& (0+255),b
  2811                           
  2812                           ; BSR set to: 0
  2813  000E1E  0100               	movlb	0	; () banked
  2814  000E20  8FB7               	bsf	(___fttol@f1+1)& (0+255),7,b
  2815                           
  2816                           ; BSR set to: 0
  2817  000E22  0EFF               	movlw	255
  2818  000E24  0100               	movlb	0	; () banked
  2819  000E26  17B6               	andwf	___fttol@f1& (0+255),f,b
  2820  000E28  0EFF               	movlw	255
  2821  000E2A  0100               	movlb	0	; () banked
  2822  000E2C  17B7               	andwf	(___fttol@f1+1)& (0+255),f,b
  2823  000E2E  0E00               	movlw	0
  2824  000E30  0100               	movlb	0	; () banked
  2825  000E32  17B8               	andwf	(___fttol@f1+2)& (0+255),f,b
  2826                           
  2827                           ; BSR set to: 0
  2828  000E34  0100               	movlb	0	; () banked
  2829  000E36  51B6               	movf	___fttol@f1& (0+255),w,b
  2830  000E38  0100               	movlb	0	; () banked
  2831  000E3A  6FC0               	movwf	___fttol@lval& (0+255),b
  2832  000E3C  0100               	movlb	0	; () banked
  2833  000E3E  51B7               	movf	(___fttol@f1+1)& (0+255),w,b
  2834  000E40  0100               	movlb	0	; () banked
  2835  000E42  6FC1               	movwf	(___fttol@lval+1)& (0+255),b
  2836  000E44  0100               	movlb	0	; () banked
  2837  000E46  51B8               	movf	(___fttol@f1+2)& (0+255),w,b
  2838  000E48  0100               	movlb	0	; () banked
  2839  000E4A  6FC2               	movwf	(___fttol@lval+2)& (0+255),b
  2840  000E4C  0100               	movlb	0	; () banked
  2841  000E4E  6BC3               	clrf	(___fttol@lval+3)& (0+255),b
  2842                           
  2843                           ; BSR set to: 0
  2844  000E50  0E8E               	movlw	142
  2845  000E52  0100               	movlb	0	; () banked
  2846  000E54  5FC4               	subwf	___fttol@exp1& (0+255),f,b
  2847                           
  2848                           ; BSR set to: 0
  2849  000E56  0100               	movlb	0	; () banked
  2850  000E58  AFC4               	btfss	___fttol@exp1& (0+255),7,b
  2851  000E5A  D01A               	goto	l3258
  2852                           
  2853                           ; BSR set to: 0
  2854  000E5C  0100               	movlb	0	; () banked
  2855  000E5E  51C4               	movf	___fttol@exp1& (0+255),w,b
  2856  000E60  0A80               	xorlw	128
  2857  000E62  0F8F               	addlw	143
  2858  000E64  B0D8               	btfsc	status,0,c
  2859  000E66  D00A               	goto	l3254
  2860                           
  2861                           ; BSR set to: 0
  2862  000E68  0E00               	movlw	0
  2863  000E6A  0100               	movlb	0	; () banked
  2864  000E6C  6FB6               	movwf	?___fttol& (0+255),b
  2865  000E6E  0E00               	movlw	0
  2866  000E70  6FB7               	movwf	(?___fttol+1)& (0+255),b
  2867  000E72  0E00               	movlw	0
  2868  000E74  6FB8               	movwf	(?___fttol+2)& (0+255),b
  2869  000E76  0E00               	movlw	0
  2870  000E78  6FB9               	movwf	(?___fttol+3)& (0+255),b
  2871                           
  2872                           ; BSR set to: 0
  2873  000E7A  0012               	return	
  2874  000E7C                     l3254:
  2875                           
  2876                           ; BSR set to: 0
  2877  000E7C  0100               	movlb	0	; () banked
  2878  000E7E  90D8               	bcf	status,0,c
  2879  000E80  33C3               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2880  000E82  33C2               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2881  000E84  33C1               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2882  000E86  33C0               	rrcf	___fttol@lval& (0+255),f,b
  2883                           
  2884                           ; BSR set to: 0
  2885  000E88  0100               	movlb	0	; () banked
  2886  000E8A  3FC4               	incfsz	___fttol@exp1& (0+255),f,b
  2887  000E8C  D7F7               	goto	l3254
  2888                           
  2889                           ; BSR set to: 0
  2890  000E8E  D01B               	goto	l3268
  2891  000E90                     l3258:
  2892                           
  2893                           ; BSR set to: 0
  2894  000E90  0E17               	movlw	23
  2895  000E92  0100               	movlb	0	; () banked
  2896  000E94  65C4               	cpfsgt	___fttol@exp1& (0+255),b
  2897  000E96  D012               	goto	l3266
  2898                           
  2899                           ; BSR set to: 0
  2900  000E98  0E00               	movlw	0
  2901  000E9A  0100               	movlb	0	; () banked
  2902  000E9C  6FB6               	movwf	?___fttol& (0+255),b
  2903  000E9E  0E00               	movlw	0
  2904  000EA0  6FB7               	movwf	(?___fttol+1)& (0+255),b
  2905  000EA2  0E00               	movlw	0
  2906  000EA4  6FB8               	movwf	(?___fttol+2)& (0+255),b
  2907  000EA6  0E00               	movlw	0
  2908  000EA8  6FB9               	movwf	(?___fttol+3)& (0+255),b
  2909                           
  2910                           ; BSR set to: 0
  2911  000EAA  0012               	return	
  2912  000EAC                     l3264:
  2913                           
  2914                           ; BSR set to: 0
  2915  000EAC  0100               	movlb	0	; () banked
  2916  000EAE  90D8               	bcf	status,0,c
  2917  000EB0  37C0               	rlcf	___fttol@lval& (0+255),f,b
  2918  000EB2  37C1               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2919  000EB4  37C2               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2920  000EB6  37C3               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2921  000EB8  0100               	movlb	0	; () banked
  2922  000EBA  07C4               	decf	___fttol@exp1& (0+255),f,b
  2923  000EBC                     l3266:
  2924                           
  2925                           ; BSR set to: 0
  2926  000EBC  0100               	movlb	0	; () banked
  2927  000EBE  51C4               	movf	___fttol@exp1& (0+255),w,b
  2928  000EC0  0100               	movlb	0	; () banked
  2929  000EC2  A4D8               	btfss	status,2,c
  2930  000EC4  D7F3               	goto	l3264
  2931  000EC6                     l3268:
  2932                           
  2933                           ; BSR set to: 0
  2934  000EC6  0100               	movlb	0	; () banked
  2935  000EC8  51BF               	movf	___fttol@sign1& (0+255),w,b
  2936  000ECA  0100               	movlb	0	; () banked
  2937  000ECC  B4D8               	btfsc	status,2,c
  2938  000ECE  D009               	goto	l3272
  2939                           
  2940                           ; BSR set to: 0
  2941  000ED0  0100               	movlb	0	; () banked
  2942  000ED2  1FC3               	comf	(___fttol@lval+3)& (0+255),f,b
  2943  000ED4  1FC2               	comf	(___fttol@lval+2)& (0+255),f,b
  2944  000ED6  1FC1               	comf	(___fttol@lval+1)& (0+255),f,b
  2945  000ED8  6DC0               	negf	___fttol@lval& (0+255),b
  2946  000EDA  0E00               	movlw	0
  2947  000EDC  23C1               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2948  000EDE  23C2               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2949  000EE0  23C3               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2950  000EE2                     l3272:
  2951                           
  2952                           ; BSR set to: 0
  2953  000EE2  C0C0  F0B6         	movff	___fttol@lval,?___fttol
  2954  000EE6  C0C1  F0B7         	movff	___fttol@lval+1,?___fttol+1
  2955  000EEA  C0C2  F0B8         	movff	___fttol@lval+2,?___fttol+2
  2956  000EEE  C0C3  F0B9         	movff	___fttol@lval+3,?___fttol+3
  2957  000EF2  0012               	return	
  2958  000EF4                     __end_of___fttol:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           intcon	equ	0xFF2
  2965                           postinc0	equ	0xFEE
  2966                           wreg	equ	0xFE8
  2967                           postdec1	equ	0xFE5
  2968                           fsr1l	equ	0xFE1
  2969                           postinc2	equ	0xFDE
  2970                           postdec2	equ	0xFDD
  2971                           fsr2h	equ	0xFDA
  2972                           fsr2l	equ	0xFD9
  2973                           status	equ	0xFD8
  2974                           
  2975 ;; *************** function ___ftmul *****************
  2976 ;; Defined at:
  2977 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;  f1              3   27[BANK0 ] float 
  2980 ;;  f2              3   30[BANK0 ] float 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  f3_as_produc    3   37[BANK0 ] unsigned um
  2983 ;;  sign            1   41[BANK0 ] unsigned char 
  2984 ;;  cntr            1   40[BANK0 ] unsigned char 
  2985 ;;  exp             1   36[BANK0 ] unsigned char 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  3   27[BANK0 ] float 
  2988 ;; Registers used:
  2989 ;;		wreg, status,2, status,0, cstack
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2995 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;Total ram usage:       15 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    6
  3002 ;; This function calls:
  3003 ;;		___ftpack
  3004 ;; This function is called by:
  3005 ;;		_angleToPulse
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text9
  3010  0009C0                     __ptext9:
  3011                           	opt stack 0
  3012  0009C0                     ___ftmul:
  3013                           	opt stack 21
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;incstack = 0
  3017  0009C0  C09D  F0A1         	movff	___ftmul@f1+2,??___ftmul
  3018  0009C4  0100               	movlb	0	; () banked
  3019  0009C6  6BA2               	clrf	(??___ftmul+1)& (0+255),b
  3020  0009C8  6BA3               	clrf	(??___ftmul+2)& (0+255),b
  3021  0009CA  0100               	movlb	0	; () banked
  3022  0009CC  359C               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3023  0009CE  0100               	movlb	0	; () banked
  3024  0009D0  37A1               	rlcf	??___ftmul& (0+255),f,b
  3025  0009D2  E301               	bnc	u2521
  3026  0009D4  81A2               	bsf	(??___ftmul+1)& (0+255),0,b
  3027  0009D6                     u2521:
  3028  0009D6  0100               	movlb	0	; () banked
  3029  0009D8  51A1               	movf	??___ftmul& (0+255),w,b
  3030  0009DA  0100               	movlb	0	; () banked
  3031  0009DC  6FA4               	movwf	___ftmul@exp& (0+255),b
  3032  0009DE  0100               	movlb	0	; () banked
  3033  0009E0  51A4               	movf	___ftmul@exp& (0+255),w,b
  3034  0009E2  A4D8               	btfss	status,2,c
  3035  0009E4  D00A               	goto	l3176
  3036                           
  3037                           ; BSR set to: 0
  3038  0009E6  0E00               	movlw	0
  3039  0009E8  0100               	movlb	0	; () banked
  3040  0009EA  6F9B               	movwf	?___ftmul& (0+255),b
  3041  0009EC  0E00               	movlw	0
  3042  0009EE  0100               	movlb	0	; () banked
  3043  0009F0  6F9C               	movwf	(?___ftmul+1)& (0+255),b
  3044  0009F2  0E00               	movlw	0
  3045  0009F4  0100               	movlb	0	; () banked
  3046  0009F6  6F9D               	movwf	(?___ftmul+2)& (0+255),b
  3047                           
  3048                           ; BSR set to: 0
  3049  0009F8  0012               	return	
  3050  0009FA                     l3176:
  3051                           
  3052                           ; BSR set to: 0
  3053  0009FA  C0A0  F0A1         	movff	___ftmul@f2+2,??___ftmul
  3054  0009FE  0100               	movlb	0	; () banked
  3055  000A00  6BA2               	clrf	(??___ftmul+1)& (0+255),b
  3056  000A02  6BA3               	clrf	(??___ftmul+2)& (0+255),b
  3057  000A04  0100               	movlb	0	; () banked
  3058  000A06  359F               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  3059  000A08  0100               	movlb	0	; () banked
  3060  000A0A  37A1               	rlcf	??___ftmul& (0+255),f,b
  3061  000A0C  E301               	bnc	u2541
  3062  000A0E  81A2               	bsf	(??___ftmul+1)& (0+255),0,b
  3063  000A10                     u2541:
  3064  000A10  0100               	movlb	0	; () banked
  3065  000A12  51A1               	movf	??___ftmul& (0+255),w,b
  3066  000A14  0100               	movlb	0	; () banked
  3067  000A16  6FA9               	movwf	___ftmul@sign& (0+255),b
  3068  000A18  0100               	movlb	0	; () banked
  3069  000A1A  51A9               	movf	___ftmul@sign& (0+255),w,b
  3070  000A1C  A4D8               	btfss	status,2,c
  3071  000A1E  D00A               	goto	l3182
  3072                           
  3073                           ; BSR set to: 0
  3074  000A20  0E00               	movlw	0
  3075  000A22  0100               	movlb	0	; () banked
  3076  000A24  6F9B               	movwf	?___ftmul& (0+255),b
  3077  000A26  0E00               	movlw	0
  3078  000A28  0100               	movlb	0	; () banked
  3079  000A2A  6F9C               	movwf	(?___ftmul+1)& (0+255),b
  3080  000A2C  0E00               	movlw	0
  3081  000A2E  0100               	movlb	0	; () banked
  3082  000A30  6F9D               	movwf	(?___ftmul+2)& (0+255),b
  3083                           
  3084                           ; BSR set to: 0
  3085  000A32  0012               	return	
  3086  000A34                     l3182:
  3087                           
  3088                           ; BSR set to: 0
  3089  000A34  0100               	movlb	0	; () banked
  3090  000A36  51A9               	movf	___ftmul@sign& (0+255),w,b
  3091  000A38  0F7B               	addlw	123
  3092  000A3A  0100               	movlb	0	; () banked
  3093  000A3C  27A4               	addwf	___ftmul@exp& (0+255),f,b
  3094                           
  3095                           ; BSR set to: 0
  3096  000A3E  C09D  F0A9         	movff	___ftmul@f1+2,___ftmul@sign
  3097  000A42  0100               	movlb	0	; () banked
  3098  000A44  51A0               	movf	(___ftmul@f2+2)& (0+255),w,b
  3099  000A46  0100               	movlb	0	; () banked
  3100  000A48  1BA9               	xorwf	___ftmul@sign& (0+255),f,b
  3101  000A4A  0E80               	movlw	128
  3102  000A4C  0100               	movlb	0	; () banked
  3103  000A4E  17A9               	andwf	___ftmul@sign& (0+255),f,b
  3104                           
  3105                           ; BSR set to: 0
  3106  000A50  0100               	movlb	0	; () banked
  3107  000A52  8F9C               	bsf	(___ftmul@f1+1)& (0+255),7,b
  3108                           
  3109                           ; BSR set to: 0
  3110  000A54  0100               	movlb	0	; () banked
  3111  000A56  8F9F               	bsf	(___ftmul@f2+1)& (0+255),7,b
  3112                           
  3113                           ; BSR set to: 0
  3114  000A58  0EFF               	movlw	255
  3115  000A5A  0100               	movlb	0	; () banked
  3116  000A5C  179E               	andwf	___ftmul@f2& (0+255),f,b
  3117  000A5E  0EFF               	movlw	255
  3118  000A60  0100               	movlb	0	; () banked
  3119  000A62  179F               	andwf	(___ftmul@f2+1)& (0+255),f,b
  3120  000A64  0E00               	movlw	0
  3121  000A66  0100               	movlb	0	; () banked
  3122  000A68  17A0               	andwf	(___ftmul@f2+2)& (0+255),f,b
  3123                           
  3124                           ; BSR set to: 0
  3125  000A6A  0E00               	movlw	0
  3126  000A6C  0100               	movlb	0	; () banked
  3127  000A6E  6FA5               	movwf	___ftmul@f3_as_product& (0+255),b
  3128  000A70  0E00               	movlw	0
  3129  000A72  0100               	movlb	0	; () banked
  3130  000A74  6FA6               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3131  000A76  0E00               	movlw	0
  3132  000A78  0100               	movlb	0	; () banked
  3133  000A7A  6FA7               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3134                           
  3135                           ; BSR set to: 0
  3136  000A7C  0E07               	movlw	7
  3137  000A7E  0100               	movlb	0	; () banked
  3138  000A80  6FA8               	movwf	___ftmul@cntr& (0+255),b
  3139  000A82                     l3196:
  3140                           
  3141                           ; BSR set to: 0
  3142  000A82  0100               	movlb	0	; () banked
  3143  000A84  A19B               	btfss	___ftmul@f1& (0+255),0,b
  3144  000A86  D00C               	goto	l3200
  3145                           
  3146                           ; BSR set to: 0
  3147  000A88  0100               	movlb	0	; () banked
  3148  000A8A  519E               	movf	___ftmul@f2& (0+255),w,b
  3149  000A8C  0100               	movlb	0	; () banked
  3150  000A8E  27A5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3151  000A90  0100               	movlb	0	; () banked
  3152  000A92  519F               	movf	(___ftmul@f2+1)& (0+255),w,b
  3153  000A94  0100               	movlb	0	; () banked
  3154  000A96  23A6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3155  000A98  0100               	movlb	0	; () banked
  3156  000A9A  51A0               	movf	(___ftmul@f2+2)& (0+255),w,b
  3157  000A9C  0100               	movlb	0	; () banked
  3158  000A9E  23A7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3159  000AA0                     l3200:
  3160                           
  3161                           ; BSR set to: 0
  3162  000AA0  0100               	movlb	0	; () banked
  3163  000AA2  90D8               	bcf	status,0,c
  3164  000AA4  339D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3165  000AA6  339C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3166  000AA8  339B               	rrcf	___ftmul@f1& (0+255),f,b
  3167  000AAA  0100               	movlb	0	; () banked
  3168  000AAC  90D8               	bcf	status,0,c
  3169  000AAE  379E               	rlcf	___ftmul@f2& (0+255),f,b
  3170  000AB0  379F               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  3171  000AB2  37A0               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  3172                           
  3173                           ; BSR set to: 0
  3174  000AB4  0100               	movlb	0	; () banked
  3175  000AB6  2FA8               	decfsz	___ftmul@cntr& (0+255),f,b
  3176  000AB8  D7E4               	goto	l3196
  3177                           
  3178                           ; BSR set to: 0
  3179                           
  3180                           ; BSR set to: 0
  3181  000ABA  0E09               	movlw	9
  3182  000ABC  0100               	movlb	0	; () banked
  3183  000ABE  6FA8               	movwf	___ftmul@cntr& (0+255),b
  3184  000AC0                     l3206:
  3185                           
  3186                           ; BSR set to: 0
  3187  000AC0  0100               	movlb	0	; () banked
  3188  000AC2  A19B               	btfss	___ftmul@f1& (0+255),0,b
  3189  000AC4  D00C               	goto	l3210
  3190                           
  3191                           ; BSR set to: 0
  3192  000AC6  0100               	movlb	0	; () banked
  3193  000AC8  519E               	movf	___ftmul@f2& (0+255),w,b
  3194  000ACA  0100               	movlb	0	; () banked
  3195  000ACC  27A5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3196  000ACE  0100               	movlb	0	; () banked
  3197  000AD0  519F               	movf	(___ftmul@f2+1)& (0+255),w,b
  3198  000AD2  0100               	movlb	0	; () banked
  3199  000AD4  23A6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3200  000AD6  0100               	movlb	0	; () banked
  3201  000AD8  51A0               	movf	(___ftmul@f2+2)& (0+255),w,b
  3202  000ADA  0100               	movlb	0	; () banked
  3203  000ADC  23A7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3204  000ADE                     l3210:
  3205                           
  3206                           ; BSR set to: 0
  3207  000ADE  0100               	movlb	0	; () banked
  3208  000AE0  90D8               	bcf	status,0,c
  3209  000AE2  339D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3210  000AE4  339C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3211  000AE6  339B               	rrcf	___ftmul@f1& (0+255),f,b
  3212  000AE8  0100               	movlb	0	; () banked
  3213  000AEA  90D8               	bcf	status,0,c
  3214  000AEC  33A7               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3215  000AEE  33A6               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3216  000AF0  33A5               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3217                           
  3218                           ; BSR set to: 0
  3219  000AF2  0100               	movlb	0	; () banked
  3220  000AF4  2FA8               	decfsz	___ftmul@cntr& (0+255),f,b
  3221  000AF6  D7E4               	goto	l3206
  3222                           
  3223                           ; BSR set to: 0
  3224                           
  3225                           ; BSR set to: 0
  3226  000AF8  C0A5  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  3227  000AFC  C0A6  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3228  000B00  C0A7  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3229  000B04  C0A4  F083         	movff	___ftmul@exp,___ftpack@exp
  3230  000B08  C0A9  F084         	movff	___ftmul@sign,___ftpack@sign
  3231  000B0C  EC45  F009         	call	___ftpack	;wreg free
  3232  000B10  C080  F09B         	movff	?___ftpack,?___ftmul
  3233  000B14  C081  F09C         	movff	?___ftpack+1,?___ftmul+1
  3234  000B18  C082  F09D         	movff	?___ftpack+2,?___ftmul+2
  3235  000B1C  0012               	return	
  3236  000B1E                     __end_of___ftmul:
  3237                           	opt stack 0
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           intcon	equ	0xFF2
  3243                           postinc0	equ	0xFEE
  3244                           wreg	equ	0xFE8
  3245                           postdec1	equ	0xFE5
  3246                           fsr1l	equ	0xFE1
  3247                           postinc2	equ	0xFDE
  3248                           postdec2	equ	0xFDD
  3249                           fsr2h	equ	0xFDA
  3250                           fsr2l	equ	0xFD9
  3251                           status	equ	0xFD8
  3252                           
  3253 ;; *************** function ___ftdiv *****************
  3254 ;; Defined at:
  3255 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  f1              3   12[BANK0 ] float 
  3258 ;;  f2              3   15[BANK0 ] float 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  f3              3   22[BANK0 ] float 
  3261 ;;  sign            1   26[BANK0 ] unsigned char 
  3262 ;;  exp             1   25[BANK0 ] unsigned char 
  3263 ;;  cntr            1   21[BANK0 ] unsigned char 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  3   12[BANK0 ] float 
  3266 ;; Registers used:
  3267 ;;		wreg, status,2, status,0, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3273 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;Total ram usage:       15 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:    6
  3280 ;; This function calls:
  3281 ;;		___ftpack
  3282 ;; This function is called by:
  3283 ;;		_angleToPulse
  3284 ;;		_testFrequency
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text10
  3289  000B1E                     __ptext10:
  3290                           	opt stack 0
  3291  000B1E                     ___ftdiv:
  3292                           	opt stack 21
  3293                           
  3294                           ;incstack = 0
  3295  000B1E  C08E  F092         	movff	___ftdiv@f1+2,??___ftdiv
  3296  000B22  0100               	movlb	0	; () banked
  3297  000B24  6B93               	clrf	(??___ftdiv+1)& (0+255),b
  3298  000B26  6B94               	clrf	(??___ftdiv+2)& (0+255),b
  3299  000B28  0100               	movlb	0	; () banked
  3300  000B2A  358D               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3301  000B2C  0100               	movlb	0	; () banked
  3302  000B2E  3792               	rlcf	??___ftdiv& (0+255),f,b
  3303  000B30  E301               	bnc	u2471
  3304  000B32  8193               	bsf	(??___ftdiv+1)& (0+255),0,b
  3305  000B34                     u2471:
  3306  000B34  0100               	movlb	0	; () banked
  3307  000B36  5192               	movf	??___ftdiv& (0+255),w,b
  3308  000B38  0100               	movlb	0	; () banked
  3309  000B3A  6F99               	movwf	___ftdiv@exp& (0+255),b
  3310  000B3C  0100               	movlb	0	; () banked
  3311  000B3E  5199               	movf	___ftdiv@exp& (0+255),w,b
  3312  000B40  A4D8               	btfss	status,2,c
  3313  000B42  D00A               	goto	l3130
  3314                           
  3315                           ; BSR set to: 0
  3316  000B44  0E00               	movlw	0
  3317  000B46  0100               	movlb	0	; () banked
  3318  000B48  6F8C               	movwf	?___ftdiv& (0+255),b
  3319  000B4A  0E00               	movlw	0
  3320  000B4C  0100               	movlb	0	; () banked
  3321  000B4E  6F8D               	movwf	(?___ftdiv+1)& (0+255),b
  3322  000B50  0E00               	movlw	0
  3323  000B52  0100               	movlb	0	; () banked
  3324  000B54  6F8E               	movwf	(?___ftdiv+2)& (0+255),b
  3325                           
  3326                           ; BSR set to: 0
  3327  000B56  0012               	return	
  3328  000B58                     l3130:
  3329                           
  3330                           ; BSR set to: 0
  3331  000B58  C091  F092         	movff	___ftdiv@f2+2,??___ftdiv
  3332  000B5C  0100               	movlb	0	; () banked
  3333  000B5E  6B93               	clrf	(??___ftdiv+1)& (0+255),b
  3334  000B60  6B94               	clrf	(??___ftdiv+2)& (0+255),b
  3335  000B62  0100               	movlb	0	; () banked
  3336  000B64  3590               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3337  000B66  0100               	movlb	0	; () banked
  3338  000B68  3792               	rlcf	??___ftdiv& (0+255),f,b
  3339  000B6A  E301               	bnc	u2491
  3340  000B6C  8193               	bsf	(??___ftdiv+1)& (0+255),0,b
  3341  000B6E                     u2491:
  3342  000B6E  0100               	movlb	0	; () banked
  3343  000B70  5192               	movf	??___ftdiv& (0+255),w,b
  3344  000B72  0100               	movlb	0	; () banked
  3345  000B74  6F9A               	movwf	___ftdiv@sign& (0+255),b
  3346  000B76  0100               	movlb	0	; () banked
  3347  000B78  519A               	movf	___ftdiv@sign& (0+255),w,b
  3348  000B7A  A4D8               	btfss	status,2,c
  3349  000B7C  D00A               	goto	l3136
  3350                           
  3351                           ; BSR set to: 0
  3352  000B7E  0E00               	movlw	0
  3353  000B80  0100               	movlb	0	; () banked
  3354  000B82  6F8C               	movwf	?___ftdiv& (0+255),b
  3355  000B84  0E00               	movlw	0
  3356  000B86  0100               	movlb	0	; () banked
  3357  000B88  6F8D               	movwf	(?___ftdiv+1)& (0+255),b
  3358  000B8A  0E00               	movlw	0
  3359  000B8C  0100               	movlb	0	; () banked
  3360  000B8E  6F8E               	movwf	(?___ftdiv+2)& (0+255),b
  3361                           
  3362                           ; BSR set to: 0
  3363  000B90  0012               	return	
  3364  000B92                     l3136:
  3365                           
  3366                           ; BSR set to: 0
  3367  000B92  0E00               	movlw	0
  3368  000B94  0100               	movlb	0	; () banked
  3369  000B96  6F96               	movwf	___ftdiv@f3& (0+255),b
  3370  000B98  0E00               	movlw	0
  3371  000B9A  0100               	movlb	0	; () banked
  3372  000B9C  6F97               	movwf	(___ftdiv@f3+1)& (0+255),b
  3373  000B9E  0E00               	movlw	0
  3374  000BA0  0100               	movlb	0	; () banked
  3375  000BA2  6F98               	movwf	(___ftdiv@f3+2)& (0+255),b
  3376                           
  3377                           ; BSR set to: 0
  3378  000BA4  0100               	movlb	0	; () banked
  3379  000BA6  519A               	movf	___ftdiv@sign& (0+255),w,b
  3380  000BA8  0F89               	addlw	137
  3381  000BAA  0100               	movlb	0	; () banked
  3382  000BAC  5F99               	subwf	___ftdiv@exp& (0+255),f,b
  3383                           
  3384                           ; BSR set to: 0
  3385  000BAE  C08E  F09A         	movff	___ftdiv@f1+2,___ftdiv@sign
  3386                           
  3387                           ; BSR set to: 0
  3388  000BB2  0100               	movlb	0	; () banked
  3389  000BB4  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3390  000BB6  0100               	movlb	0	; () banked
  3391  000BB8  1B9A               	xorwf	___ftdiv@sign& (0+255),f,b
  3392                           
  3393                           ; BSR set to: 0
  3394  000BBA  0E80               	movlw	128
  3395  000BBC  0100               	movlb	0	; () banked
  3396  000BBE  179A               	andwf	___ftdiv@sign& (0+255),f,b
  3397                           
  3398                           ; BSR set to: 0
  3399  000BC0  0100               	movlb	0	; () banked
  3400  000BC2  8F8D               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3401                           
  3402                           ; BSR set to: 0
  3403  000BC4  0EFF               	movlw	255
  3404  000BC6  0100               	movlb	0	; () banked
  3405  000BC8  178C               	andwf	___ftdiv@f1& (0+255),f,b
  3406  000BCA  0EFF               	movlw	255
  3407  000BCC  0100               	movlb	0	; () banked
  3408  000BCE  178D               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3409  000BD0  0E00               	movlw	0
  3410  000BD2  0100               	movlb	0	; () banked
  3411  000BD4  178E               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3412                           
  3413                           ; BSR set to: 0
  3414  000BD6  0100               	movlb	0	; () banked
  3415  000BD8  8F90               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3416                           
  3417                           ; BSR set to: 0
  3418  000BDA  0EFF               	movlw	255
  3419  000BDC  0100               	movlb	0	; () banked
  3420  000BDE  178F               	andwf	___ftdiv@f2& (0+255),f,b
  3421  000BE0  0EFF               	movlw	255
  3422  000BE2  0100               	movlb	0	; () banked
  3423  000BE4  1790               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3424  000BE6  0E00               	movlw	0
  3425  000BE8  0100               	movlb	0	; () banked
  3426  000BEA  1791               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3427                           
  3428                           ; BSR set to: 0
  3429  000BEC  0E18               	movlw	24
  3430  000BEE  0100               	movlb	0	; () banked
  3431  000BF0  6F95               	movwf	___ftdiv@cntr& (0+255),b
  3432  000BF2                     l3156:
  3433                           
  3434                           ; BSR set to: 0
  3435  000BF2  0100               	movlb	0	; () banked
  3436  000BF4  90D8               	bcf	status,0,c
  3437  000BF6  3796               	rlcf	___ftdiv@f3& (0+255),f,b
  3438  000BF8  3797               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3439  000BFA  3798               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3440                           
  3441                           ; BSR set to: 0
  3442  000BFC  0100               	movlb	0	; () banked
  3443  000BFE  518F               	movf	___ftdiv@f2& (0+255),w,b
  3444  000C00  0100               	movlb	0	; () banked
  3445  000C02  5D8C               	subwf	___ftdiv@f1& (0+255),w,b
  3446  000C04  0100               	movlb	0	; () banked
  3447  000C06  5190               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3448  000C08  0100               	movlb	0	; () banked
  3449  000C0A  598D               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3450  000C0C  0100               	movlb	0	; () banked
  3451  000C0E  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3452  000C10  0100               	movlb	0	; () banked
  3453  000C12  598E               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3454  000C14  A0D8               	btfss	status,0,c
  3455  000C16  D00E               	goto	l939
  3456                           
  3457                           ; BSR set to: 0
  3458  000C18  0100               	movlb	0	; () banked
  3459  000C1A  518F               	movf	___ftdiv@f2& (0+255),w,b
  3460  000C1C  0100               	movlb	0	; () banked
  3461  000C1E  5F8C               	subwf	___ftdiv@f1& (0+255),f,b
  3462  000C20  0100               	movlb	0	; () banked
  3463  000C22  5190               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3464  000C24  0100               	movlb	0	; () banked
  3465  000C26  5B8D               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3466  000C28  0100               	movlb	0	; () banked
  3467  000C2A  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3468  000C2C  0100               	movlb	0	; () banked
  3469  000C2E  5B8E               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3470                           
  3471                           ; BSR set to: 0
  3472  000C30  0100               	movlb	0	; () banked
  3473  000C32  8196               	bsf	___ftdiv@f3& (0+255),0,b
  3474  000C34                     l939:
  3475                           
  3476                           ; BSR set to: 0
  3477  000C34  0100               	movlb	0	; () banked
  3478  000C36  90D8               	bcf	status,0,c
  3479  000C38  378C               	rlcf	___ftdiv@f1& (0+255),f,b
  3480  000C3A  378D               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3481  000C3C  378E               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3482                           
  3483                           ; BSR set to: 0
  3484  000C3E  0100               	movlb	0	; () banked
  3485  000C40  2F95               	decfsz	___ftdiv@cntr& (0+255),f,b
  3486  000C42  D7D7               	goto	l3156
  3487                           
  3488                           ; BSR set to: 0
  3489                           
  3490                           ; BSR set to: 0
  3491  000C44  C096  F080         	movff	___ftdiv@f3,___ftpack@arg
  3492  000C48  C097  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3493  000C4C  C098  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3494  000C50  C099  F083         	movff	___ftdiv@exp,___ftpack@exp
  3495  000C54  C09A  F084         	movff	___ftdiv@sign,___ftpack@sign
  3496  000C58  EC45  F009         	call	___ftpack	;wreg free
  3497  000C5C  C080  F08C         	movff	?___ftpack,?___ftdiv
  3498  000C60  C081  F08D         	movff	?___ftpack+1,?___ftdiv+1
  3499  000C64  C082  F08E         	movff	?___ftpack+2,?___ftdiv+2
  3500  000C68  0012               	return	
  3501  000C6A                     __end_of___ftdiv:
  3502                           	opt stack 0
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           intcon	equ	0xFF2
  3508                           postinc0	equ	0xFEE
  3509                           wreg	equ	0xFE8
  3510                           postdec1	equ	0xFE5
  3511                           fsr1l	equ	0xFE1
  3512                           postinc2	equ	0xFDE
  3513                           postdec2	equ	0xFDD
  3514                           fsr2h	equ	0xFDA
  3515                           fsr2l	equ	0xFD9
  3516                           status	equ	0xFD8
  3517                           
  3518 ;; *************** function ___ftadd *****************
  3519 ;; Defined at:
  3520 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;  f1              3   42[BANK0 ] float 
  3523 ;;  f2              3   45[BANK0 ] float 
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;  exp1            1   53[BANK0 ] unsigned char 
  3526 ;;  exp2            1   52[BANK0 ] unsigned char 
  3527 ;;  sign            1   51[BANK0 ] unsigned char 
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  3   42[BANK0 ] float 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0, cstack
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3537 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;Total ram usage:       12 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    6
  3544 ;; This function calls:
  3545 ;;		___ftpack
  3546 ;; This function is called by:
  3547 ;;		_angleToPulse
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text11
  3552  000012                     __ptext11:
  3553                           	opt stack 0
  3554  000012                     ___ftadd:
  3555                           	opt stack 21
  3556                           
  3557                           ;incstack = 0
  3558  000012  C0AC  F0B0         	movff	___ftadd@f1+2,??___ftadd
  3559  000016  0100               	movlb	0	; () banked
  3560  000018  6BB1               	clrf	(??___ftadd+1)& (0+255),b
  3561  00001A  6BB2               	clrf	(??___ftadd+2)& (0+255),b
  3562  00001C  0100               	movlb	0	; () banked
  3563  00001E  35AB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  3564  000020  0100               	movlb	0	; () banked
  3565  000022  37B0               	rlcf	??___ftadd& (0+255),f,b
  3566  000024  E301               	bnc	u2261
  3567  000026  81B1               	bsf	(??___ftadd+1)& (0+255),0,b
  3568  000028                     u2261:
  3569  000028  0100               	movlb	0	; () banked
  3570  00002A  51B0               	movf	??___ftadd& (0+255),w,b
  3571  00002C  0100               	movlb	0	; () banked
  3572  00002E  6FB5               	movwf	___ftadd@exp1& (0+255),b
  3573  000030  C0AF  F0B0         	movff	___ftadd@f2+2,??___ftadd
  3574  000034  0100               	movlb	0	; () banked
  3575  000036  6BB1               	clrf	(??___ftadd+1)& (0+255),b
  3576  000038  6BB2               	clrf	(??___ftadd+2)& (0+255),b
  3577  00003A  0100               	movlb	0	; () banked
  3578  00003C  35AE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  3579  00003E  0100               	movlb	0	; () banked
  3580  000040  37B0               	rlcf	??___ftadd& (0+255),f,b
  3581  000042  E301               	bnc	u2271
  3582  000044  81B1               	bsf	(??___ftadd+1)& (0+255),0,b
  3583  000046                     u2271:
  3584  000046  0100               	movlb	0	; () banked
  3585  000048  51B0               	movf	??___ftadd& (0+255),w,b
  3586  00004A  0100               	movlb	0	; () banked
  3587  00004C  6FB4               	movwf	___ftadd@exp2& (0+255),b
  3588                           
  3589                           ; BSR set to: 0
  3590  00004E  0100               	movlb	0	; () banked
  3591  000050  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3592  000052  0100               	movlb	0	; () banked
  3593  000054  B4D8               	btfsc	status,2,c
  3594  000056  D011               	goto	l904
  3595                           
  3596                           ; BSR set to: 0
  3597  000058  0100               	movlb	0	; () banked
  3598  00005A  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3599  00005C  0100               	movlb	0	; () banked
  3600  00005E  5DB5               	subwf	___ftadd@exp1& (0+255),w,b
  3601  000060  B0D8               	btfsc	status,0,c
  3602  000062  D012               	goto	l3062
  3603                           
  3604                           ; BSR set to: 0
  3605  000064  0100               	movlb	0	; () banked
  3606  000066  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3607  000068  0800               	sublw	0
  3608  00006A  0100               	movlb	0	; () banked
  3609  00006C  25B4               	addwf	___ftadd@exp2& (0+255),w,b
  3610  00006E  0100               	movlb	0	; () banked
  3611  000070  6FB0               	movwf	??___ftadd& (0+255),b
  3612  000072  0E18               	movlw	24
  3613  000074  0100               	movlb	0	; () banked
  3614  000076  65B0               	cpfsgt	??___ftadd& (0+255),b
  3615  000078  D007               	goto	l3062
  3616  00007A                     l904:
  3617                           
  3618                           ; BSR set to: 0
  3619  00007A  C0AD  F0AA         	movff	___ftadd@f2,?___ftadd
  3620  00007E  C0AE  F0AB         	movff	___ftadd@f2+1,?___ftadd+1
  3621  000082  C0AF  F0AC         	movff	___ftadd@f2+2,?___ftadd+2
  3622  000086  0012               	return	
  3623  000088                     l3062:
  3624                           
  3625                           ; BSR set to: 0
  3626  000088  0100               	movlb	0	; () banked
  3627  00008A  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3628  00008C  0100               	movlb	0	; () banked
  3629  00008E  B4D8               	btfsc	status,2,c
  3630  000090  D011               	goto	l908
  3631                           
  3632                           ; BSR set to: 0
  3633  000092  0100               	movlb	0	; () banked
  3634  000094  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3635  000096  0100               	movlb	0	; () banked
  3636  000098  5DB4               	subwf	___ftadd@exp2& (0+255),w,b
  3637  00009A  B0D8               	btfsc	status,0,c
  3638  00009C  D012               	goto	l3068
  3639                           
  3640                           ; BSR set to: 0
  3641  00009E  0100               	movlb	0	; () banked
  3642  0000A0  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3643  0000A2  0800               	sublw	0
  3644  0000A4  0100               	movlb	0	; () banked
  3645  0000A6  25B5               	addwf	___ftadd@exp1& (0+255),w,b
  3646  0000A8  0100               	movlb	0	; () banked
  3647  0000AA  6FB0               	movwf	??___ftadd& (0+255),b
  3648  0000AC  0E18               	movlw	24
  3649  0000AE  0100               	movlb	0	; () banked
  3650  0000B0  65B0               	cpfsgt	??___ftadd& (0+255),b
  3651  0000B2  D007               	goto	l3068
  3652  0000B4                     l908:
  3653                           
  3654                           ; BSR set to: 0
  3655  0000B4  C0AA  F0AA         	movff	___ftadd@f1,?___ftadd
  3656  0000B8  C0AB  F0AB         	movff	___ftadd@f1+1,?___ftadd+1
  3657  0000BC  C0AC  F0AC         	movff	___ftadd@f1+2,?___ftadd+2
  3658  0000C0  0012               	return	
  3659  0000C2                     l3068:
  3660                           
  3661                           ; BSR set to: 0
  3662  0000C2  0E06               	movlw	6
  3663  0000C4  0100               	movlb	0	; () banked
  3664  0000C6  6FB3               	movwf	___ftadd@sign& (0+255),b
  3665                           
  3666                           ; BSR set to: 0
  3667  0000C8  0100               	movlb	0	; () banked
  3668  0000CA  AFAC               	btfss	(___ftadd@f1+2)& (0+255),7,b
  3669  0000CC  D002               	goto	l3074
  3670                           
  3671                           ; BSR set to: 0
  3672  0000CE  0100               	movlb	0	; () banked
  3673  0000D0  8FB3               	bsf	___ftadd@sign& (0+255),7,b
  3674  0000D2                     l3074:
  3675                           
  3676                           ; BSR set to: 0
  3677  0000D2  0100               	movlb	0	; () banked
  3678  0000D4  AFAF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3679  0000D6  D002               	goto	l910
  3680                           
  3681                           ; BSR set to: 0
  3682  0000D8  0100               	movlb	0	; () banked
  3683  0000DA  8DB3               	bsf	___ftadd@sign& (0+255),6,b
  3684  0000DC                     l910:
  3685                           
  3686                           ; BSR set to: 0
  3687  0000DC  0100               	movlb	0	; () banked
  3688  0000DE  8FAB               	bsf	(___ftadd@f1+1)& (0+255),7,b
  3689                           
  3690                           ; BSR set to: 0
  3691  0000E0  0EFF               	movlw	255
  3692  0000E2  0100               	movlb	0	; () banked
  3693  0000E4  17AA               	andwf	___ftadd@f1& (0+255),f,b
  3694  0000E6  0EFF               	movlw	255
  3695  0000E8  0100               	movlb	0	; () banked
  3696  0000EA  17AB               	andwf	(___ftadd@f1+1)& (0+255),f,b
  3697  0000EC  0E00               	movlw	0
  3698  0000EE  0100               	movlb	0	; () banked
  3699  0000F0  17AC               	andwf	(___ftadd@f1+2)& (0+255),f,b
  3700  0000F2  0100               	movlb	0	; () banked
  3701  0000F4  8FAE               	bsf	(___ftadd@f2+1)& (0+255),7,b
  3702                           
  3703                           ; BSR set to: 0
  3704  0000F6  0EFF               	movlw	255
  3705  0000F8  0100               	movlb	0	; () banked
  3706  0000FA  17AD               	andwf	___ftadd@f2& (0+255),f,b
  3707  0000FC  0EFF               	movlw	255
  3708  0000FE  0100               	movlb	0	; () banked
  3709  000100  17AE               	andwf	(___ftadd@f2+1)& (0+255),f,b
  3710  000102  0E00               	movlw	0
  3711  000104  0100               	movlb	0	; () banked
  3712  000106  17AF               	andwf	(___ftadd@f2+2)& (0+255),f,b
  3713                           
  3714                           ; BSR set to: 0
  3715  000108  0100               	movlb	0	; () banked
  3716  00010A  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3717  00010C  0100               	movlb	0	; () banked
  3718  00010E  5DB5               	subwf	___ftadd@exp1& (0+255),w,b
  3719  000110  B0D8               	btfsc	status,0,c
  3720  000112  D025               	goto	l3094
  3721  000114                     l3084:
  3722                           
  3723                           ; BSR set to: 0
  3724  000114  0100               	movlb	0	; () banked
  3725  000116  90D8               	bcf	status,0,c
  3726  000118  37AD               	rlcf	___ftadd@f2& (0+255),f,b
  3727  00011A  37AE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  3728  00011C  37AF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  3729  00011E  0100               	movlb	0	; () banked
  3730  000120  07B4               	decf	___ftadd@exp2& (0+255),f,b
  3731                           
  3732                           ; BSR set to: 0
  3733  000122  0100               	movlb	0	; () banked
  3734  000124  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3735  000126  0100               	movlb	0	; () banked
  3736  000128  19B4               	xorwf	___ftadd@exp2& (0+255),w,b
  3737  00012A  B4D8               	btfsc	status,2,c
  3738  00012C  D011               	goto	l3092
  3739                           
  3740                           ; BSR set to: 0
  3741  00012E  0100               	movlb	0	; () banked
  3742  000130  07B3               	decf	___ftadd@sign& (0+255),f,b
  3743  000132  C0B3  F0B0         	movff	___ftadd@sign,??___ftadd
  3744  000136  0E07               	movlw	7
  3745  000138  0100               	movlb	0	; () banked
  3746  00013A  17B0               	andwf	??___ftadd& (0+255),f,b
  3747  00013C  B4D8               	btfsc	status,2,c
  3748  00013E  D008               	goto	l3092
  3749  000140  D7E9               	goto	l3084
  3750  000142                     l3090:
  3751                           
  3752                           ; BSR set to: 0
  3753  000142  0100               	movlb	0	; () banked
  3754  000144  90D8               	bcf	status,0,c
  3755  000146  33AC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  3756  000148  33AB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  3757  00014A  33AA               	rrcf	___ftadd@f1& (0+255),f,b
  3758  00014C  0100               	movlb	0	; () banked
  3759  00014E  2BB5               	incf	___ftadd@exp1& (0+255),f,b
  3760  000150                     l3092:
  3761                           
  3762                           ; BSR set to: 0
  3763  000150  0100               	movlb	0	; () banked
  3764  000152  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3765  000154  0100               	movlb	0	; () banked
  3766  000156  19B5               	xorwf	___ftadd@exp1& (0+255),w,b
  3767  000158  B4D8               	btfsc	status,2,c
  3768  00015A  D02B               	goto	l919
  3769  00015C  D7F2               	goto	l3090
  3770  00015E                     l3094:
  3771                           
  3772                           ; BSR set to: 0
  3773  00015E  0100               	movlb	0	; () banked
  3774  000160  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3775  000162  0100               	movlb	0	; () banked
  3776  000164  5DB4               	subwf	___ftadd@exp2& (0+255),w,b
  3777  000166  B0D8               	btfsc	status,0,c
  3778  000168  D024               	goto	l919
  3779  00016A                     l3096:
  3780                           
  3781                           ; BSR set to: 0
  3782  00016A  0100               	movlb	0	; () banked
  3783  00016C  90D8               	bcf	status,0,c
  3784  00016E  37AA               	rlcf	___ftadd@f1& (0+255),f,b
  3785  000170  37AB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  3786  000172  37AC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  3787  000174  0100               	movlb	0	; () banked
  3788  000176  07B5               	decf	___ftadd@exp1& (0+255),f,b
  3789                           
  3790                           ; BSR set to: 0
  3791  000178  0100               	movlb	0	; () banked
  3792  00017A  51B5               	movf	___ftadd@exp1& (0+255),w,b
  3793  00017C  0100               	movlb	0	; () banked
  3794  00017E  19B4               	xorwf	___ftadd@exp2& (0+255),w,b
  3795  000180  B4D8               	btfsc	status,2,c
  3796  000182  D011               	goto	l3104
  3797                           
  3798                           ; BSR set to: 0
  3799  000184  0100               	movlb	0	; () banked
  3800  000186  07B3               	decf	___ftadd@sign& (0+255),f,b
  3801  000188  C0B3  F0B0         	movff	___ftadd@sign,??___ftadd
  3802  00018C  0E07               	movlw	7
  3803  00018E  0100               	movlb	0	; () banked
  3804  000190  17B0               	andwf	??___ftadd& (0+255),f,b
  3805  000192  B4D8               	btfsc	status,2,c
  3806  000194  D008               	goto	l3104
  3807  000196  D7E9               	goto	l3096
  3808  000198                     l3102:
  3809                           
  3810                           ; BSR set to: 0
  3811  000198  0100               	movlb	0	; () banked
  3812  00019A  90D8               	bcf	status,0,c
  3813  00019C  33AF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  3814  00019E  33AE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  3815  0001A0  33AD               	rrcf	___ftadd@f2& (0+255),f,b
  3816  0001A2  0100               	movlb	0	; () banked
  3817  0001A4  2BB4               	incf	___ftadd@exp2& (0+255),f,b
  3818  0001A6                     l3104:
  3819                           
  3820                           ; BSR set to: 0
  3821  0001A6  0100               	movlb	0	; () banked
  3822  0001A8  51B4               	movf	___ftadd@exp2& (0+255),w,b
  3823  0001AA  0100               	movlb	0	; () banked
  3824  0001AC  19B5               	xorwf	___ftadd@exp1& (0+255),w,b
  3825  0001AE  A4D8               	btfss	status,2,c
  3826  0001B0  D7F3               	goto	l3102
  3827  0001B2                     l919:
  3828                           
  3829                           ; BSR set to: 0
  3830  0001B2  0100               	movlb	0	; () banked
  3831  0001B4  AFB3               	btfss	___ftadd@sign& (0+255),7,b
  3832  0001B6  D012               	goto	l928
  3833                           
  3834                           ; BSR set to: 0
  3835  0001B8  0EFF               	movlw	255
  3836  0001BA  0100               	movlb	0	; () banked
  3837  0001BC  1BAA               	xorwf	___ftadd@f1& (0+255),f,b
  3838  0001BE  0EFF               	movlw	255
  3839  0001C0  0100               	movlb	0	; () banked
  3840  0001C2  1BAB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  3841  0001C4  0EFF               	movlw	255
  3842  0001C6  0100               	movlb	0	; () banked
  3843  0001C8  1BAC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  3844  0001CA  0E01               	movlw	1
  3845  0001CC  0100               	movlb	0	; () banked
  3846  0001CE  27AA               	addwf	___ftadd@f1& (0+255),f,b
  3847  0001D0  0E00               	movlw	0
  3848  0001D2  0100               	movlb	0	; () banked
  3849  0001D4  23AB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  3850  0001D6  0E00               	movlw	0
  3851  0001D8  0100               	movlb	0	; () banked
  3852  0001DA  23AC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  3853  0001DC                     l928:
  3854                           
  3855                           ; BSR set to: 0
  3856  0001DC  0100               	movlb	0	; () banked
  3857  0001DE  ADB3               	btfss	___ftadd@sign& (0+255),6,b
  3858  0001E0  D012               	goto	l3110
  3859                           
  3860                           ; BSR set to: 0
  3861  0001E2  0EFF               	movlw	255
  3862  0001E4  0100               	movlb	0	; () banked
  3863  0001E6  1BAD               	xorwf	___ftadd@f2& (0+255),f,b
  3864  0001E8  0EFF               	movlw	255
  3865  0001EA  0100               	movlb	0	; () banked
  3866  0001EC  1BAE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3867  0001EE  0EFF               	movlw	255
  3868  0001F0  0100               	movlb	0	; () banked
  3869  0001F2  1BAF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3870  0001F4  0E01               	movlw	1
  3871  0001F6  0100               	movlb	0	; () banked
  3872  0001F8  27AD               	addwf	___ftadd@f2& (0+255),f,b
  3873  0001FA  0E00               	movlw	0
  3874  0001FC  0100               	movlb	0	; () banked
  3875  0001FE  23AE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3876  000200  0E00               	movlw	0
  3877  000202  0100               	movlb	0	; () banked
  3878  000204  23AF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3879  000206                     l3110:
  3880                           
  3881                           ; BSR set to: 0
  3882  000206  0E00               	movlw	0
  3883  000208  0100               	movlb	0	; () banked
  3884  00020A  6FB3               	movwf	___ftadd@sign& (0+255),b
  3885                           
  3886                           ; BSR set to: 0
  3887  00020C  0100               	movlb	0	; () banked
  3888  00020E  51AA               	movf	___ftadd@f1& (0+255),w,b
  3889  000210  0100               	movlb	0	; () banked
  3890  000212  27AD               	addwf	___ftadd@f2& (0+255),f,b
  3891  000214  0100               	movlb	0	; () banked
  3892  000216  51AB               	movf	(___ftadd@f1+1)& (0+255),w,b
  3893  000218  0100               	movlb	0	; () banked
  3894  00021A  23AE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3895  00021C  0100               	movlb	0	; () banked
  3896  00021E  51AC               	movf	(___ftadd@f1+2)& (0+255),w,b
  3897  000220  0100               	movlb	0	; () banked
  3898  000222  23AF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3899                           
  3900                           ; BSR set to: 0
  3901  000224  0100               	movlb	0	; () banked
  3902  000226  AFAF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3903  000228  D015               	goto	l3120
  3904                           
  3905                           ; BSR set to: 0
  3906  00022A  0EFF               	movlw	255
  3907  00022C  0100               	movlb	0	; () banked
  3908  00022E  1BAD               	xorwf	___ftadd@f2& (0+255),f,b
  3909  000230  0EFF               	movlw	255
  3910  000232  0100               	movlb	0	; () banked
  3911  000234  1BAE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3912  000236  0EFF               	movlw	255
  3913  000238  0100               	movlb	0	; () banked
  3914  00023A  1BAF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3915  00023C  0E01               	movlw	1
  3916  00023E  0100               	movlb	0	; () banked
  3917  000240  27AD               	addwf	___ftadd@f2& (0+255),f,b
  3918  000242  0E00               	movlw	0
  3919  000244  0100               	movlb	0	; () banked
  3920  000246  23AE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3921  000248  0E00               	movlw	0
  3922  00024A  0100               	movlb	0	; () banked
  3923  00024C  23AF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3924                           
  3925                           ; BSR set to: 0
  3926  00024E  0E01               	movlw	1
  3927  000250  0100               	movlb	0	; () banked
  3928  000252  6FB3               	movwf	___ftadd@sign& (0+255),b
  3929  000254                     l3120:
  3930                           
  3931                           ; BSR set to: 0
  3932  000254  C0AD  F080         	movff	___ftadd@f2,___ftpack@arg
  3933  000258  C0AE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
  3934  00025C  C0AF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
  3935  000260  C0B5  F083         	movff	___ftadd@exp1,___ftpack@exp
  3936  000264  C0B3  F084         	movff	___ftadd@sign,___ftpack@sign
  3937  000268  EC45  F009         	call	___ftpack	;wreg free
  3938  00026C  C080  F0AA         	movff	?___ftpack,?___ftadd
  3939  000270  C081  F0AB         	movff	?___ftpack+1,?___ftadd+1
  3940  000274  C082  F0AC         	movff	?___ftpack+2,?___ftadd+2
  3941  000278  0012               	return	
  3942  00027A                     __end_of___ftadd:
  3943                           	opt stack 0
  3944                           tblptru	equ	0xFF8
  3945                           tblptrh	equ	0xFF7
  3946                           tblptrl	equ	0xFF6
  3947                           tablat	equ	0xFF5
  3948                           intcon	equ	0xFF2
  3949                           postinc0	equ	0xFEE
  3950                           wreg	equ	0xFE8
  3951                           postdec1	equ	0xFE5
  3952                           fsr1l	equ	0xFE1
  3953                           postinc2	equ	0xFDE
  3954                           postdec2	equ	0xFDD
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function ___awtoft *****************
  3960 ;; Defined at:
  3961 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  c               2    8[BANK0 ] int 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  sign            1   11[BANK0 ] unsigned char 
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  3    8[BANK0 ] float 
  3968 ;; Registers used:
  3969 ;;		wreg, status,2, status,0, cstack
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3975 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;Total ram usage:        4 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    6
  3982 ;; This function calls:
  3983 ;;		___ftpack
  3984 ;; This function is called by:
  3985 ;;		_angleToPulse
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           	psect	text12
  3990  0021C8                     __ptext12:
  3991                           	opt stack 0
  3992  0021C8                     ___awtoft:
  3993                           	opt stack 21
  3994                           
  3995                           ;incstack = 0
  3996  0021C8  0E00               	movlw	0
  3997  0021CA  0100               	movlb	0	; () banked
  3998  0021CC  6F8B               	movwf	___awtoft@sign& (0+255),b
  3999                           
  4000                           ; BSR set to: 0
  4001  0021CE  0100               	movlb	0	; () banked
  4002  0021D0  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
  4003  0021D2  D008               	goto	l3226
  4004                           
  4005                           ; BSR set to: 0
  4006  0021D4  0100               	movlb	0	; () banked
  4007  0021D6  6D88               	negf	___awtoft@c& (0+255),b
  4008  0021D8  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
  4009  0021DA  B0D8               	btfsc	status,0,c
  4010  0021DC  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
  4011                           
  4012                           ; BSR set to: 0
  4013  0021DE  0E01               	movlw	1
  4014  0021E0  0100               	movlb	0	; () banked
  4015  0021E2  6F8B               	movwf	___awtoft@sign& (0+255),b
  4016  0021E4                     l3226:
  4017                           
  4018                           ; BSR set to: 0
  4019  0021E4  C088  F080         	movff	___awtoft@c,___ftpack@arg
  4020  0021E8  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  4021  0021EC  0100               	movlb	0	; () banked
  4022  0021EE  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  4023  0021F0  0E8E               	movlw	142
  4024  0021F2  0100               	movlb	0	; () banked
  4025  0021F4  6F83               	movwf	___ftpack@exp& (0+255),b
  4026  0021F6  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
  4027  0021FA  EC45  F009         	call	___ftpack	;wreg free
  4028  0021FE  C080  F088         	movff	?___ftpack,?___awtoft
  4029  002202  C081  F089         	movff	?___ftpack+1,?___awtoft+1
  4030  002206  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
  4031  00220A  0012               	return	
  4032  00220C                     __end_of___awtoft:
  4033                           	opt stack 0
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           intcon	equ	0xFF2
  4039                           postinc0	equ	0xFEE
  4040                           wreg	equ	0xFE8
  4041                           postdec1	equ	0xFE5
  4042                           fsr1l	equ	0xFE1
  4043                           postinc2	equ	0xFDE
  4044                           postdec2	equ	0xFDD
  4045                           fsr2h	equ	0xFDA
  4046                           fsr2l	equ	0xFD9
  4047                           status	equ	0xFD8
  4048                           
  4049 ;; *************** function ___altoft *****************
  4050 ;; Defined at:
  4051 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  c               4    8[BANK0 ] long 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  sign            1   17[BANK0 ] unsigned char 
  4056 ;;  exp             1   16[BANK0 ] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  3    8[BANK0 ] float 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4066 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;Total ram usage:       10 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    6
  4073 ;; This function calls:
  4074 ;;		___ftpack
  4075 ;; This function is called by:
  4076 ;;		_angleToPulse
  4077 ;;		_testFrequency
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text13
  4082  001BEE                     __ptext13:
  4083                           	opt stack 0
  4084  001BEE                     ___altoft:
  4085                           	opt stack 21
  4086                           
  4087                           ;incstack = 0
  4088  001BEE  0E00               	movlw	0
  4089  001BF0  0100               	movlb	0	; () banked
  4090  001BF2  6F91               	movwf	___altoft@sign& (0+255),b
  4091  001BF4  0E8E               	movlw	142
  4092  001BF6  0100               	movlb	0	; () banked
  4093  001BF8  6F90               	movwf	___altoft@exp& (0+255),b
  4094                           
  4095                           ; BSR set to: 0
  4096  001BFA  0100               	movlb	0	; () banked
  4097  001BFC  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
  4098  001BFE  D015               	goto	l3048
  4099                           
  4100                           ; BSR set to: 0
  4101  001C00  0100               	movlb	0	; () banked
  4102  001C02  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
  4103  001C04  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
  4104  001C06  1F89               	comf	(___altoft@c+1)& (0+255),f,b
  4105  001C08  6D88               	negf	___altoft@c& (0+255),b
  4106  001C0A  0E00               	movlw	0
  4107  001C0C  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
  4108  001C0E  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
  4109  001C10  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
  4110                           
  4111                           ; BSR set to: 0
  4112  001C12  0E01               	movlw	1
  4113  001C14  0100               	movlb	0	; () banked
  4114  001C16  6F91               	movwf	___altoft@sign& (0+255),b
  4115                           
  4116                           ; BSR set to: 0
  4117  001C18  D008               	goto	l3048
  4118  001C1A                     l3046:
  4119                           
  4120                           ; BSR set to: 0
  4121  001C1A  0100               	movlb	0	; () banked
  4122  001C1C  90D8               	bcf	status,0,c
  4123  001C1E  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
  4124  001C20  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
  4125  001C22  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
  4126  001C24  3388               	rrcf	___altoft@c& (0+255),f,b
  4127  001C26  0100               	movlb	0	; () banked
  4128  001C28  2B90               	incf	___altoft@exp& (0+255),f,b
  4129  001C2A                     l3048:
  4130                           
  4131                           ; BSR set to: 0
  4132  001C2A  0E00               	movlw	0
  4133  001C2C  0100               	movlb	0	; () banked
  4134  001C2E  1588               	andwf	___altoft@c& (0+255),w,b
  4135  001C30  0100               	movlb	0	; () banked
  4136  001C32  6F8C               	movwf	??___altoft& (0+255),b
  4137  001C34  0E00               	movlw	0
  4138  001C36  0100               	movlb	0	; () banked
  4139  001C38  1589               	andwf	(___altoft@c+1)& (0+255),w,b
  4140  001C3A  0100               	movlb	0	; () banked
  4141  001C3C  6F8D               	movwf	(??___altoft+1)& (0+255),b
  4142  001C3E  0E00               	movlw	0
  4143  001C40  0100               	movlb	0	; () banked
  4144  001C42  158A               	andwf	(___altoft@c+2)& (0+255),w,b
  4145  001C44  0100               	movlb	0	; () banked
  4146  001C46  6F8E               	movwf	(??___altoft+2)& (0+255),b
  4147  001C48  0EFF               	movlw	255
  4148  001C4A  0100               	movlb	0	; () banked
  4149  001C4C  158B               	andwf	(___altoft@c+3)& (0+255),w,b
  4150  001C4E  0100               	movlb	0	; () banked
  4151  001C50  6F8F               	movwf	(??___altoft+3)& (0+255),b
  4152  001C52  0100               	movlb	0	; () banked
  4153  001C54  518C               	movf	??___altoft& (0+255),w,b
  4154  001C56  0100               	movlb	0	; () banked
  4155  001C58  118D               	iorwf	(??___altoft+1)& (0+255),w,b
  4156  001C5A  0100               	movlb	0	; () banked
  4157  001C5C  118E               	iorwf	(??___altoft+2)& (0+255),w,b
  4158  001C5E  0100               	movlb	0	; () banked
  4159  001C60  118F               	iorwf	(??___altoft+3)& (0+255),w,b
  4160  001C62  A4D8               	btfss	status,2,c
  4161  001C64  D7DA               	goto	l3046
  4162                           
  4163                           ; BSR set to: 0
  4164                           
  4165                           ; BSR set to: 0
  4166  001C66  C088  F080         	movff	___altoft@c,___ftpack@arg
  4167  001C6A  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
  4168  001C6E  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
  4169  001C72  C090  F083         	movff	___altoft@exp,___ftpack@exp
  4170  001C76  C091  F084         	movff	___altoft@sign,___ftpack@sign
  4171  001C7A  EC45  F009         	call	___ftpack	;wreg free
  4172  001C7E  C080  F088         	movff	?___ftpack,?___altoft
  4173  001C82  C081  F089         	movff	?___ftpack+1,?___altoft+1
  4174  001C86  C082  F08A         	movff	?___ftpack+2,?___altoft+2
  4175  001C8A  0012               	return	
  4176  001C8C                     __end_of___altoft:
  4177                           	opt stack 0
  4178                           tblptru	equ	0xFF8
  4179                           tblptrh	equ	0xFF7
  4180                           tblptrl	equ	0xFF6
  4181                           tablat	equ	0xFF5
  4182                           intcon	equ	0xFF2
  4183                           postinc0	equ	0xFEE
  4184                           wreg	equ	0xFE8
  4185                           postdec1	equ	0xFE5
  4186                           fsr1l	equ	0xFE1
  4187                           postinc2	equ	0xFDE
  4188                           postdec2	equ	0xFDD
  4189                           fsr2h	equ	0xFDA
  4190                           fsr2l	equ	0xFD9
  4191                           status	equ	0xFD8
  4192                           
  4193 ;; *************** function ___ftpack *****************
  4194 ;; Defined at:
  4195 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;  arg             3    0[BANK0 ] unsigned um
  4198 ;;  exp             1    3[BANK0 ] unsigned char 
  4199 ;;  sign            1    4[BANK0 ] unsigned char 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  3    0[BANK0 ] float 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, status,0
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4211 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;Total ram usage:        8 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    5
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		___altoft
  4222 ;;		___awtoft
  4223 ;;		___ftadd
  4224 ;;		___ftdiv
  4225 ;;		___ftmul
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text14
  4230  00128A                     __ptext14:
  4231                           	opt stack 0
  4232  00128A                     ___ftpack:
  4233                           	opt stack 21
  4234                           
  4235                           ;incstack = 0
  4236  00128A  0100               	movlb	0	; () banked
  4237  00128C  5183               	movf	___ftpack@exp& (0+255),w,b
  4238  00128E  0100               	movlb	0	; () banked
  4239  001290  B4D8               	btfsc	status,2,c
  4240  001292  D008               	goto	l3004
  4241                           
  4242                           ; BSR set to: 0
  4243  001294  0100               	movlb	0	; () banked
  4244  001296  5180               	movf	___ftpack@arg& (0+255),w,b
  4245  001298  0100               	movlb	0	; () banked
  4246  00129A  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  4247  00129C  0100               	movlb	0	; () banked
  4248  00129E  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  4249  0012A0  A4D8               	btfss	status,2,c
  4250  0012A2  D011               	goto	l3010
  4251  0012A4                     l3004:
  4252                           
  4253                           ; BSR set to: 0
  4254  0012A4  0E00               	movlw	0
  4255  0012A6  0100               	movlb	0	; () banked
  4256  0012A8  6F80               	movwf	?___ftpack& (0+255),b
  4257  0012AA  0E00               	movlw	0
  4258  0012AC  0100               	movlb	0	; () banked
  4259  0012AE  6F81               	movwf	(?___ftpack+1)& (0+255),b
  4260  0012B0  0E00               	movlw	0
  4261  0012B2  0100               	movlb	0	; () banked
  4262  0012B4  6F82               	movwf	(?___ftpack+2)& (0+255),b
  4263                           
  4264                           ; BSR set to: 0
  4265  0012B6  0012               	return	
  4266  0012B8                     l3008:
  4267                           
  4268                           ; BSR set to: 0
  4269  0012B8  0100               	movlb	0	; () banked
  4270  0012BA  2B83               	incf	___ftpack@exp& (0+255),f,b
  4271  0012BC  0100               	movlb	0	; () banked
  4272  0012BE  90D8               	bcf	status,0,c
  4273  0012C0  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  4274  0012C2  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  4275  0012C4  3380               	rrcf	___ftpack@arg& (0+255),f,b
  4276  0012C6                     l3010:
  4277                           
  4278                           ; BSR set to: 0
  4279  0012C6  0E00               	movlw	0
  4280  0012C8  0100               	movlb	0	; () banked
  4281  0012CA  1580               	andwf	___ftpack@arg& (0+255),w,b
  4282  0012CC  0100               	movlb	0	; () banked
  4283  0012CE  6F85               	movwf	??___ftpack& (0+255),b
  4284  0012D0  0E00               	movlw	0
  4285  0012D2  0100               	movlb	0	; () banked
  4286  0012D4  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  4287  0012D6  0100               	movlb	0	; () banked
  4288  0012D8  6F86               	movwf	(??___ftpack+1)& (0+255),b
  4289  0012DA  0EFE               	movlw	254
  4290  0012DC  0100               	movlb	0	; () banked
  4291  0012DE  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  4292  0012E0  0100               	movlb	0	; () banked
  4293  0012E2  6F87               	movwf	(??___ftpack+2)& (0+255),b
  4294  0012E4  0100               	movlb	0	; () banked
  4295  0012E6  5185               	movf	??___ftpack& (0+255),w,b
  4296  0012E8  0100               	movlb	0	; () banked
  4297  0012EA  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  4298  0012EC  0100               	movlb	0	; () banked
  4299  0012EE  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  4300  0012F0  B4D8               	btfsc	status,2,c
  4301  0012F2  D011               	goto	l3016
  4302  0012F4  D7E1               	goto	l3008
  4303  0012F6                     l3012:
  4304                           
  4305                           ; BSR set to: 0
  4306  0012F6  0100               	movlb	0	; () banked
  4307  0012F8  2B83               	incf	___ftpack@exp& (0+255),f,b
  4308                           
  4309                           ; BSR set to: 0
  4310  0012FA  0E01               	movlw	1
  4311  0012FC  0100               	movlb	0	; () banked
  4312  0012FE  2780               	addwf	___ftpack@arg& (0+255),f,b
  4313  001300  0E00               	movlw	0
  4314  001302  0100               	movlb	0	; () banked
  4315  001304  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  4316  001306  0E00               	movlw	0
  4317  001308  0100               	movlb	0	; () banked
  4318  00130A  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  4319  00130C  0100               	movlb	0	; () banked
  4320  00130E  90D8               	bcf	status,0,c
  4321  001310  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  4322  001312  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  4323  001314  3380               	rrcf	___ftpack@arg& (0+255),f,b
  4324  001316                     l3016:
  4325                           
  4326                           ; BSR set to: 0
  4327  001316  0E00               	movlw	0
  4328  001318  0100               	movlb	0	; () banked
  4329  00131A  1580               	andwf	___ftpack@arg& (0+255),w,b
  4330  00131C  0100               	movlb	0	; () banked
  4331  00131E  6F85               	movwf	??___ftpack& (0+255),b
  4332  001320  0E00               	movlw	0
  4333  001322  0100               	movlb	0	; () banked
  4334  001324  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  4335  001326  0100               	movlb	0	; () banked
  4336  001328  6F86               	movwf	(??___ftpack+1)& (0+255),b
  4337  00132A  0EFF               	movlw	255
  4338  00132C  0100               	movlb	0	; () banked
  4339  00132E  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  4340  001330  0100               	movlb	0	; () banked
  4341  001332  6F87               	movwf	(??___ftpack+2)& (0+255),b
  4342  001334  0100               	movlb	0	; () banked
  4343  001336  5185               	movf	??___ftpack& (0+255),w,b
  4344  001338  0100               	movlb	0	; () banked
  4345  00133A  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  4346  00133C  0100               	movlb	0	; () banked
  4347  00133E  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  4348  001340  B4D8               	btfsc	status,2,c
  4349  001342  D008               	goto	l3020
  4350  001344  D7D8               	goto	l3012
  4351  001346                     l3018:
  4352                           
  4353                           ; BSR set to: 0
  4354  001346  0100               	movlb	0	; () banked
  4355  001348  0783               	decf	___ftpack@exp& (0+255),f,b
  4356  00134A  0100               	movlb	0	; () banked
  4357  00134C  90D8               	bcf	status,0,c
  4358  00134E  3780               	rlcf	___ftpack@arg& (0+255),f,b
  4359  001350  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  4360  001352  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  4361  001354                     l3020:
  4362                           
  4363                           ; BSR set to: 0
  4364  001354  0100               	movlb	0	; () banked
  4365  001356  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  4366  001358  D004               	goto	l881
  4367                           
  4368                           ; BSR set to: 0
  4369  00135A  0E02               	movlw	2
  4370  00135C  0100               	movlb	0	; () banked
  4371  00135E  6183               	cpfslt	___ftpack@exp& (0+255),b
  4372  001360  D7F2               	goto	l3018
  4373  001362                     l881:
  4374                           
  4375                           ; BSR set to: 0
  4376  001362  0100               	movlb	0	; () banked
  4377  001364  B183               	btfsc	___ftpack@exp& (0+255),0,b
  4378  001366  D002               	goto	l3026
  4379                           
  4380                           ; BSR set to: 0
  4381  001368  0100               	movlb	0	; () banked
  4382  00136A  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  4383  00136C                     l3026:
  4384                           
  4385                           ; BSR set to: 0
  4386  00136C  0100               	movlb	0	; () banked
  4387  00136E  90D8               	bcf	status,0,c
  4388  001370  3383               	rrcf	___ftpack@exp& (0+255),f,b
  4389  001372  0100               	movlb	0	; () banked
  4390  001374  5183               	movf	___ftpack@exp& (0+255),w,b
  4391  001376  0100               	movlb	0	; () banked
  4392  001378  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  4393                           
  4394                           ; BSR set to: 0
  4395  00137A  0100               	movlb	0	; () banked
  4396  00137C  5184               	movf	___ftpack@sign& (0+255),w,b
  4397  00137E  0100               	movlb	0	; () banked
  4398  001380  B4D8               	btfsc	status,2,c
  4399  001382  D002               	goto	l3032
  4400                           
  4401                           ; BSR set to: 0
  4402  001384  0100               	movlb	0	; () banked
  4403  001386  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  4404  001388                     l3032:
  4405                           
  4406                           ; BSR set to: 0
  4407  001388  C080  F080         	movff	___ftpack@arg,?___ftpack
  4408  00138C  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  4409  001390  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  4410  001394  0012               	return	
  4411  001396                     __end_of___ftpack:
  4412                           	opt stack 0
  4413                           tblptru	equ	0xFF8
  4414                           tblptrh	equ	0xFF7
  4415                           tblptrl	equ	0xFF6
  4416                           tablat	equ	0xFF5
  4417                           intcon	equ	0xFF2
  4418                           postinc0	equ	0xFEE
  4419                           wreg	equ	0xFE8
  4420                           postdec1	equ	0xFE5
  4421                           fsr1l	equ	0xFE1
  4422                           postinc2	equ	0xFDE
  4423                           postdec2	equ	0xFDD
  4424                           fsr2h	equ	0xFDA
  4425                           fsr2l	equ	0xFD9
  4426                           status	equ	0xFD8
  4427                           
  4428 ;; *************** function _initTimer *****************
  4429 ;; Defined at:
  4430 ;;		line 52 in file "timer.c"
  4431 ;; Parameters:    Size  Location     Type
  4432 ;;  timer           2    0[BANK0 ] int 
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;		None
  4435 ;; Return value:  Size  Location     Type
  4436 ;;                  1    wreg      void 
  4437 ;; Registers used:
  4438 ;;		wreg, status,2, status,0
  4439 ;; Tracked objects:
  4440 ;;		On entry : 0/0
  4441 ;;		On exit  : 0/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4444 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;Total ram usage:        4 bytes
  4449 ;; Hardware stack levels used:    1
  4450 ;; Hardware stack levels required when called:    5
  4451 ;; This function calls:
  4452 ;;		Nothing
  4453 ;; This function is called by:
  4454 ;;		_initServo
  4455 ;;		_testFrequency
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           	psect	text15
  4460  002134                     __ptext15:
  4461                           	opt stack 0
  4462  002134                     _initTimer:
  4463                           	opt stack 23
  4464                           
  4465                           ;timer.c: 53: switch(timer){
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;incstack = 0
  4469  002134  D00D               	goto	l3484
  4470  002136                     l3468:
  4471                           
  4472                           ;timer.c: 55: T0CON = 0;
  4473  002136  0E00               	movlw	0
  4474  002138  6ED5               	movwf	4053,c	;volatile
  4475                           
  4476                           ;timer.c: 56: T0CON |= 1<<3;
  4477  00213A  86D5               	bsf	4053,3,c	;volatile
  4478                           
  4479                           ;timer.c: 58: TMR0IE = 1;
  4480  00213C  8AF2               	bsf	intcon,5,c	;volatile
  4481                           
  4482                           ;timer.c: 59: break;
  4483  00213E  D01C               	goto	l410
  4484  002140                     l3474:
  4485                           
  4486                           ;timer.c: 61: T1CON = 0;
  4487  002140  0E00               	movlw	0
  4488  002142  6ECD               	movwf	4045,c	;volatile
  4489                           
  4490                           ;timer.c: 63: TMR1IE = 1;
  4491  002144  809D               	bsf	3997,0,c	;volatile
  4492                           
  4493                           ;timer.c: 64: break;
  4494  002146  D018               	goto	l410
  4495  002148                     l3478:
  4496                           
  4497                           ;timer.c: 66: T3CON = 0;
  4498  002148  0E00               	movlw	0
  4499  00214A  6EB1               	movwf	4017,c	;volatile
  4500                           
  4501                           ;timer.c: 67: TMR3IE = 1;
  4502  00214C  82A0               	bsf	4000,1,c	;volatile
  4503                           
  4504                           ;timer.c: 69: }
  4505                           
  4506                           ;timer.c: 68: break;
  4507  00214E  D014               	goto	l410
  4508  002150                     l3484:
  4509  002150  C080  F082         	movff	initTimer@timer,??_initTimer
  4510  002154  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
  4511                           
  4512                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4513                           ; Switch size 1, requested type "space"
  4514                           ; Number of cases is 1, Range of values is 0 to 0
  4515                           ; switch strategies available:
  4516                           ; Name         Instructions Cycles
  4517                           ; simple_byte            4     3 (average)
  4518                           ;	Chosen strategy is simple_byte
  4519  002158  0100               	movlb	0	; () banked
  4520  00215A  5183               	movf	(??_initTimer+1)& (0+255),w,b
  4521  00215C  0A00               	xorlw	0	; case 0
  4522  00215E  A4D8               	btfss	status,2,c
  4523  002160  D00B               	goto	l410
  4524                           
  4525                           ; BSR set to: 0
  4526                           ; Switch size 1, requested type "space"
  4527                           ; Number of cases is 3, Range of values is 0 to 3
  4528                           ; switch strategies available:
  4529                           ; Name         Instructions Cycles
  4530                           ; simple_byte           10     6 (average)
  4531                           ;	Chosen strategy is simple_byte
  4532  002162  0100               	movlb	0	; () banked
  4533  002164  5182               	movf	??_initTimer& (0+255),w,b
  4534  002166  0A00               	xorlw	0	; case 0
  4535  002168  B4D8               	btfsc	status,2,c
  4536  00216A  D7E5               	goto	l3468
  4537  00216C  0A01               	xorlw	1	; case 1
  4538  00216E  B4D8               	btfsc	status,2,c
  4539  002170  D7E7               	goto	l3474
  4540  002172  0A02               	xorlw	2	; case 3
  4541  002174  B4D8               	btfsc	status,2,c
  4542  002176  D7E8               	goto	l3478
  4543  002178                     l410:
  4544                           
  4545                           ;timer.c: 70: PEIE = 1;
  4546  002178  8CF2               	bsf	intcon,6,c	;volatile
  4547                           
  4548                           ;timer.c: 71: (INTCONbits.GIE = 1);
  4549  00217A  8EF2               	bsf	intcon,7,c	;volatile
  4550  00217C  0012               	return		;funcret
  4551  00217E                     __end_of_initTimer:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           intcon	equ	0xFF2
  4558                           postinc0	equ	0xFEE
  4559                           wreg	equ	0xFE8
  4560                           postdec1	equ	0xFE5
  4561                           fsr1l	equ	0xFE1
  4562                           postinc2	equ	0xFDE
  4563                           postdec2	equ	0xFDD
  4564                           fsr2h	equ	0xFDA
  4565                           fsr2l	equ	0xFD9
  4566                           status	equ	0xFD8
  4567                           
  4568 ;; *************** function _digitalWrite *****************
  4569 ;; Defined at:
  4570 ;;		line 53 in file "iopin.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  port            2    0[BANK0 ] int 
  4573 ;;  pin             2    2[BANK0 ] int 
  4574 ;;  val             2    4[BANK0 ] int 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;		None
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  1    wreg      void 
  4579 ;; Registers used:
  4580 ;;		wreg, status,2, status,0
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4586 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;Total ram usage:        9 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    5
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_sortBattery
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text16
  4601  001850                     __ptext16:
  4602                           	opt stack 0
  4603  001850                     _digitalWrite:
  4604                           	opt stack 24
  4605                           
  4606                           ;iopin.c: 54: pin = 1 << pin;
  4607                           
  4608                           ;incstack = 0
  4609  001850  C082  F086         	movff	digitalWrite@pin,??_digitalWrite
  4610  001854  0E01               	movlw	1
  4611  001856  0100               	movlb	0	; () banked
  4612  001858  6F87               	movwf	(??_digitalWrite+1)& (0+255),b
  4613  00185A  0E00               	movlw	0
  4614  00185C  0100               	movlb	0	; () banked
  4615  00185E  6F88               	movwf	(??_digitalWrite+2)& (0+255),b
  4616  001860  0100               	movlb	0	; () banked
  4617  001862  2B86               	incf	??_digitalWrite& (0+255),f,b
  4618  001864  D004               	goto	u3394
  4619  001866                     u3395:
  4620  001866  90D8               	bcf	status,0,c
  4621  001868  0100               	movlb	0	; () banked
  4622  00186A  3787               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  4623  00186C  3788               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  4624  00186E                     u3394:
  4625  00186E  0100               	movlb	0	; () banked
  4626  001870  2F86               	decfsz	??_digitalWrite& (0+255),f,b
  4627  001872  D7F9               	goto	u3395
  4628  001874  C087  F082         	movff	??_digitalWrite+1,digitalWrite@pin
  4629  001878  C088  F083         	movff	??_digitalWrite+2,digitalWrite@pin+1
  4630                           
  4631                           ;iopin.c: 55: if(val == 0){
  4632  00187C  0100               	movlb	0	; () banked
  4633  00187E  5184               	movf	digitalWrite@val& (0+255),w,b
  4634  001880  0100               	movlb	0	; () banked
  4635  001882  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4636  001884  A4D8               	btfss	status,2,c
  4637  001886  D03C               	goto	l3798
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;iopin.c: 56: pin ^= 0xff;
  4641  001888  0EFF               	movlw	255
  4642  00188A  0100               	movlb	0	; () banked
  4643  00188C  1B82               	xorwf	digitalWrite@pin& (0+255),f,b
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;iopin.c: 57: }
  4647                           ;iopin.c: 59: switch(port){
  4648  00188E  D038               	goto	l3798
  4649  001890                     l3774:
  4650                           
  4651                           ; BSR set to: 0
  4652  001890  0100               	movlb	0	; () banked
  4653  001892  0584               	decf	digitalWrite@val& (0+255),w,b
  4654  001894  0100               	movlb	0	; () banked
  4655  001896  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4656  001898  A4D8               	btfss	status,2,c
  4657  00189A  D004               	goto	l3778
  4658                           
  4659                           ; BSR set to: 0
  4660  00189C  0100               	movlb	0	; () banked
  4661  00189E  5182               	movf	digitalWrite@pin& (0+255),w,b
  4662  0018A0  1289               	iorwf	3977,f,c	;volatile
  4663  0018A2  0012               	return	
  4664  0018A4                     l3778:
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;iopin.c: 61: else LATA &= pin;
  4668  0018A4  0100               	movlb	0	; () banked
  4669  0018A6  5182               	movf	digitalWrite@pin& (0+255),w,b
  4670  0018A8  1689               	andwf	3977,f,c	;volatile
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;iopin.c: 62: break;
  4674  0018AA  0012               	return	
  4675  0018AC                     l3780:
  4676                           
  4677                           ; BSR set to: 0
  4678  0018AC  0100               	movlb	0	; () banked
  4679  0018AE  0584               	decf	digitalWrite@val& (0+255),w,b
  4680  0018B0  0100               	movlb	0	; () banked
  4681  0018B2  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4682  0018B4  A4D8               	btfss	status,2,c
  4683  0018B6  D004               	goto	l3784
  4684                           
  4685                           ; BSR set to: 0
  4686  0018B8  0100               	movlb	0	; () banked
  4687  0018BA  5182               	movf	digitalWrite@pin& (0+255),w,b
  4688  0018BC  128A               	iorwf	3978,f,c	;volatile
  4689  0018BE  0012               	return	
  4690  0018C0                     l3784:
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;iopin.c: 64: else LATB &= pin;
  4694  0018C0  0100               	movlb	0	; () banked
  4695  0018C2  5182               	movf	digitalWrite@pin& (0+255),w,b
  4696  0018C4  168A               	andwf	3978,f,c	;volatile
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;iopin.c: 65: break;
  4700  0018C6  0012               	return	
  4701  0018C8                     l3786:
  4702                           
  4703                           ; BSR set to: 0
  4704  0018C8  0100               	movlb	0	; () banked
  4705  0018CA  0584               	decf	digitalWrite@val& (0+255),w,b
  4706  0018CC  0100               	movlb	0	; () banked
  4707  0018CE  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4708  0018D0  A4D8               	btfss	status,2,c
  4709  0018D2  D004               	goto	l3790
  4710                           
  4711                           ; BSR set to: 0
  4712  0018D4  0100               	movlb	0	; () banked
  4713  0018D6  5182               	movf	digitalWrite@pin& (0+255),w,b
  4714  0018D8  128B               	iorwf	3979,f,c	;volatile
  4715  0018DA  0012               	return	
  4716  0018DC                     l3790:
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;iopin.c: 67: else LATC &= pin;
  4720  0018DC  0100               	movlb	0	; () banked
  4721  0018DE  5182               	movf	digitalWrite@pin& (0+255),w,b
  4722  0018E0  168B               	andwf	3979,f,c	;volatile
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;iopin.c: 68: break;
  4726  0018E2  0012               	return	
  4727  0018E4                     l3792:
  4728                           
  4729                           ; BSR set to: 0
  4730  0018E4  0100               	movlb	0	; () banked
  4731  0018E6  0584               	decf	digitalWrite@val& (0+255),w,b
  4732  0018E8  0100               	movlb	0	; () banked
  4733  0018EA  1185               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  4734  0018EC  A4D8               	btfss	status,2,c
  4735  0018EE  D004               	goto	l3796
  4736                           
  4737                           ; BSR set to: 0
  4738  0018F0  0100               	movlb	0	; () banked
  4739  0018F2  5182               	movf	digitalWrite@pin& (0+255),w,b
  4740  0018F4  128C               	iorwf	3980,f,c	;volatile
  4741  0018F6  0012               	return	
  4742  0018F8                     l3796:
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;iopin.c: 70: else LATD &= pin;
  4746  0018F8  0100               	movlb	0	; () banked
  4747  0018FA  5182               	movf	digitalWrite@pin& (0+255),w,b
  4748  0018FC  168C               	andwf	3980,f,c	;volatile
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;iopin.c: 71: }
  4752  0018FE  0012               	return	
  4753  001900                     l3798:
  4754                           
  4755                           ; BSR set to: 0
  4756  001900  C080  F086         	movff	digitalWrite@port,??_digitalWrite
  4757  001904  C081  F087         	movff	digitalWrite@port+1,??_digitalWrite+1
  4758                           
  4759                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4760                           ; Switch size 1, requested type "space"
  4761                           ; Number of cases is 1, Range of values is 0 to 0
  4762                           ; switch strategies available:
  4763                           ; Name         Instructions Cycles
  4764                           ; simple_byte            4     3 (average)
  4765                           ;	Chosen strategy is simple_byte
  4766  001908  0100               	movlb	0	; () banked
  4767  00190A  5187               	movf	(??_digitalWrite+1)& (0+255),w,b
  4768  00190C  0A00               	xorlw	0	; case 0
  4769  00190E  A4D8               	btfss	status,2,c
  4770  001910  0012               	return	
  4771                           
  4772                           ; BSR set to: 0
  4773                           ; Switch size 1, requested type "space"
  4774                           ; Number of cases is 4, Range of values is 0 to 3
  4775                           ; switch strategies available:
  4776                           ; Name         Instructions Cycles
  4777                           ; simple_byte           13     7 (average)
  4778                           ;	Chosen strategy is simple_byte
  4779  001912  0100               	movlb	0	; () banked
  4780  001914  5186               	movf	??_digitalWrite& (0+255),w,b
  4781  001916  0A00               	xorlw	0	; case 0
  4782  001918  B4D8               	btfsc	status,2,c
  4783  00191A  D7BA               	goto	l3774
  4784  00191C  0A01               	xorlw	1	; case 1
  4785  00191E  B4D8               	btfsc	status,2,c
  4786  001920  D7C5               	goto	l3780
  4787  001922  0A03               	xorlw	3	; case 2
  4788  001924  B4D8               	btfsc	status,2,c
  4789  001926  D7D0               	goto	l3786
  4790  001928  0A01               	xorlw	1	; case 3
  4791  00192A  A4D8               	btfss	status,2,c
  4792  00192C  0012               	return	
  4793  00192E  D7DA               	goto	l3792
  4794  001930                     __end_of_digitalWrite:
  4795                           	opt stack 0
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           intcon	equ	0xFF2
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1l	equ	0xFE1
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           fsr2h	equ	0xFDA
  4808                           fsr2l	equ	0xFD9
  4809                           status	equ	0xFD8
  4810                           
  4811 ;; *************** function _digitalRead *****************
  4812 ;; Defined at:
  4813 ;;		line 43 in file "iopin.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  port            2    0[BANK0 ] int 
  4816 ;;  pin             2    2[BANK0 ] int 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;		None
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  2    0[BANK0 ] int 
  4821 ;; Registers used:
  4822 ;;		wreg, status,2, status,0
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4828 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;Total ram usage:        6 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    5
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_sortBattery
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text17
  4843  001682                     __ptext17:
  4844                           	opt stack 0
  4845  001682                     _digitalRead:
  4846                           	opt stack 24
  4847                           
  4848                           ;iopin.c: 44: switch(port){
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;incstack = 0
  4852  001682  D058               	goto	l3830
  4853  001684                     l3812:
  4854  001684  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4855  001688  CF80 F085          	movff	3968,??_digitalRead+1	;volatile
  4856  00168C  0100               	movlb	0	; () banked
  4857  00168E  2B84               	incf	??_digitalRead& (0+255),f,b
  4858  001690  D003               	goto	u3454
  4859  001692                     u3455:
  4860  001692  0100               	movlb	0	; () banked
  4861  001694  90D8               	bcf	status,0,c
  4862  001696  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4863  001698                     u3454:
  4864  001698  0100               	movlb	0	; () banked
  4865  00169A  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4866  00169C  D7FA               	goto	u3455
  4867  00169E  0E01               	movlw	1
  4868  0016A0  0100               	movlb	0	; () banked
  4869  0016A2  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4870  0016A4  0100               	movlb	0	; () banked
  4871  0016A6  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4872  0016A8  0100               	movlb	0	; () banked
  4873  0016AA  6F80               	movwf	?_digitalRead& (0+255),b
  4874  0016AC  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4875                           
  4876                           ; BSR set to: 0
  4877  0016AE  0012               	return	
  4878  0016B0                     l3816:
  4879                           
  4880                           ; BSR set to: 0
  4881  0016B0  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4882  0016B4  CF81 F085          	movff	3969,??_digitalRead+1	;volatile
  4883  0016B8  0100               	movlb	0	; () banked
  4884  0016BA  2B84               	incf	??_digitalRead& (0+255),f,b
  4885  0016BC  D003               	goto	u3464
  4886  0016BE                     u3465:
  4887  0016BE  0100               	movlb	0	; () banked
  4888  0016C0  90D8               	bcf	status,0,c
  4889  0016C2  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4890  0016C4                     u3464:
  4891  0016C4  0100               	movlb	0	; () banked
  4892  0016C6  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4893  0016C8  D7FA               	goto	u3465
  4894  0016CA  0E01               	movlw	1
  4895  0016CC  0100               	movlb	0	; () banked
  4896  0016CE  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4897  0016D0  0100               	movlb	0	; () banked
  4898  0016D2  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4899  0016D4  0100               	movlb	0	; () banked
  4900  0016D6  6F80               	movwf	?_digitalRead& (0+255),b
  4901  0016D8  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4902                           
  4903                           ; BSR set to: 0
  4904  0016DA  0012               	return	
  4905  0016DC                     l3820:
  4906                           
  4907                           ; BSR set to: 0
  4908  0016DC  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4909  0016E0  CF82 F085          	movff	3970,??_digitalRead+1	;volatile
  4910  0016E4  0100               	movlb	0	; () banked
  4911  0016E6  2B84               	incf	??_digitalRead& (0+255),f,b
  4912  0016E8  D003               	goto	u3474
  4913  0016EA                     u3475:
  4914  0016EA  0100               	movlb	0	; () banked
  4915  0016EC  90D8               	bcf	status,0,c
  4916  0016EE  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4917  0016F0                     u3474:
  4918  0016F0  0100               	movlb	0	; () banked
  4919  0016F2  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4920  0016F4  D7FA               	goto	u3475
  4921  0016F6  0E01               	movlw	1
  4922  0016F8  0100               	movlb	0	; () banked
  4923  0016FA  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4924  0016FC  0100               	movlb	0	; () banked
  4925  0016FE  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4926  001700  0100               	movlb	0	; () banked
  4927  001702  6F80               	movwf	?_digitalRead& (0+255),b
  4928  001704  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4929                           
  4930                           ; BSR set to: 0
  4931  001706  0012               	return	
  4932  001708                     l3824:
  4933                           
  4934                           ; BSR set to: 0
  4935  001708  C082  F084         	movff	digitalRead@pin,??_digitalRead
  4936  00170C  CF83 F085          	movff	3971,??_digitalRead+1	;volatile
  4937  001710  0100               	movlb	0	; () banked
  4938  001712  2B84               	incf	??_digitalRead& (0+255),f,b
  4939  001714  D003               	goto	u3484
  4940  001716                     u3485:
  4941  001716  0100               	movlb	0	; () banked
  4942  001718  90D8               	bcf	status,0,c
  4943  00171A  3385               	rrcf	(??_digitalRead+1)& (0+255),f,b
  4944  00171C                     u3484:
  4945  00171C  0100               	movlb	0	; () banked
  4946  00171E  2F84               	decfsz	??_digitalRead& (0+255),f,b
  4947  001720  D7FA               	goto	u3485
  4948  001722  0E01               	movlw	1
  4949  001724  0100               	movlb	0	; () banked
  4950  001726  1785               	andwf	(??_digitalRead+1)& (0+255),f,b
  4951  001728  0100               	movlb	0	; () banked
  4952  00172A  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4953  00172C  0100               	movlb	0	; () banked
  4954  00172E  6F80               	movwf	?_digitalRead& (0+255),b
  4955  001730  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  4956                           
  4957                           ; BSR set to: 0
  4958  001732  0012               	return	
  4959  001734                     l3830:
  4960  001734  C080  F084         	movff	digitalRead@port,??_digitalRead
  4961  001738  C081  F085         	movff	digitalRead@port+1,??_digitalRead+1
  4962                           
  4963                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4964                           ; Switch size 1, requested type "space"
  4965                           ; Number of cases is 1, Range of values is 0 to 0
  4966                           ; switch strategies available:
  4967                           ; Name         Instructions Cycles
  4968                           ; simple_byte            4     3 (average)
  4969                           ;	Chosen strategy is simple_byte
  4970  00173C  0100               	movlb	0	; () banked
  4971  00173E  5185               	movf	(??_digitalRead+1)& (0+255),w,b
  4972  001740  0A00               	xorlw	0	; case 0
  4973  001742  A4D8               	btfss	status,2,c
  4974  001744  D00E               	goto	l312
  4975                           
  4976                           ; BSR set to: 0
  4977                           ; Switch size 1, requested type "space"
  4978                           ; Number of cases is 4, Range of values is 0 to 3
  4979                           ; switch strategies available:
  4980                           ; Name         Instructions Cycles
  4981                           ; simple_byte           13     7 (average)
  4982                           ;	Chosen strategy is simple_byte
  4983  001746  0100               	movlb	0	; () banked
  4984  001748  5184               	movf	??_digitalRead& (0+255),w,b
  4985  00174A  0A00               	xorlw	0	; case 0
  4986  00174C  B4D8               	btfsc	status,2,c
  4987  00174E  D79A               	goto	l3812
  4988  001750  0A01               	xorlw	1	; case 1
  4989  001752  B4D8               	btfsc	status,2,c
  4990  001754  D7AD               	goto	l3816
  4991  001756  0A03               	xorlw	3	; case 2
  4992  001758  B4D8               	btfsc	status,2,c
  4993  00175A  D7C0               	goto	l3820
  4994  00175C  0A01               	xorlw	1	; case 3
  4995  00175E  B4D8               	btfsc	status,2,c
  4996  001760  D7D3               	goto	l3824
  4997  001762                     l312:
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;iopin.c: 50: return -1;
  5001  001762  0100               	movlb	0	; () banked
  5002  001764  6980               	setf	?_digitalRead& (0+255),b
  5003  001766  6981               	setf	(?_digitalRead+1)& (0+255),b
  5004                           
  5005                           ; BSR set to: 0
  5006  001768  0012               	return		;funcret
  5007  00176A                     __end_of_digitalRead:
  5008                           	opt stack 0
  5009                           tblptru	equ	0xFF8
  5010                           tblptrh	equ	0xFF7
  5011                           tblptrl	equ	0xFF6
  5012                           tablat	equ	0xFF5
  5013                           intcon	equ	0xFF2
  5014                           postinc0	equ	0xFEE
  5015                           wreg	equ	0xFE8
  5016                           postdec1	equ	0xFE5
  5017                           fsr1l	equ	0xFE1
  5018                           postinc2	equ	0xFDE
  5019                           postdec2	equ	0xFDD
  5020                           fsr2h	equ	0xFDA
  5021                           fsr2l	equ	0xFD9
  5022                           status	equ	0xFD8
  5023                           
  5024 ;; *************** function _analogRead *****************
  5025 ;; Defined at:
  5026 ;;		line 88 in file "iopin.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  channel         2    0[BANK0 ] int 
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;		None
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  4    0[BANK0 ] long 
  5033 ;; Registers used:
  5034 ;;		wreg, status,2, status,0
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5040 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;Total ram usage:        6 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    5
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_sortBattery
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text18
  5055  00220C                     __ptext18:
  5056                           	opt stack 0
  5057  00220C                     _analogRead:
  5058                           	opt stack 24
  5059                           
  5060                           ;iopin.c: 89: ADCON0 = channel<<2;
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;incstack = 0
  5064  00220C  0100               	movlb	0	; () banked
  5065  00220E  4580               	rlncf	analogRead@channel& (0+255),w,b
  5066  002210  46E8               	rlncf	wreg,f,c
  5067  002212  0BFC               	andlw	252
  5068  002214  6EC2               	movwf	4034,c	;volatile
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;iopin.c: 90: ADCON0 |= 1<<0;
  5072  002216  80C2               	bsf	4034,0,c	;volatile
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;iopin.c: 91: ADCON0 |= 1<<1;
  5076  002218  82C2               	bsf	4034,1,c	;volatile
  5077  00221A                     l336:
  5078  00221A  B2C2               	btfsc	4034,1,c	;volatile
  5079  00221C  D7FE               	goto	l336
  5080                           
  5081                           ;iopin.c: 95: return (ADRESH<<8) + ADRESL;
  5082  00221E  50C3               	movf	4035,w,c	;volatile
  5083  002220  CFC4 F084          	movff	4036,??_analogRead	;volatile
  5084  002224  0100               	movlb	0	; () banked
  5085  002226  6B85               	clrf	(??_analogRead+1)& (0+255),b
  5086  002228  C084  F085         	movff	??_analogRead,??_analogRead+1
  5087  00222C  0100               	movlb	0	; () banked
  5088  00222E  6B84               	clrf	??_analogRead& (0+255),b
  5089  002230  0100               	movlb	0	; () banked
  5090  002232  2784               	addwf	??_analogRead& (0+255),f,b
  5091  002234  0E00               	movlw	0
  5092  002236  2385               	addwfc	(??_analogRead+1)& (0+255),f,b
  5093  002238  C084  F080         	movff	??_analogRead,?_analogRead
  5094  00223C  C085  F081         	movff	??_analogRead+1,?_analogRead+1
  5095  002240  0100               	movlb	0	; () banked
  5096  002242  0E00               	movlw	0
  5097  002244  BF81               	btfsc	(?_analogRead+1)& (0+255),7,b
  5098  002246  0EFF               	movlw	-1
  5099  002248  6F82               	movwf	(?_analogRead+2)& (0+255),b
  5100  00224A  6F83               	movwf	(?_analogRead+3)& (0+255),b
  5101  00224C  0012               	return	
  5102  00224E                     __end_of_analogRead:
  5103                           	opt stack 0
  5104                           tblptru	equ	0xFF8
  5105                           tblptrh	equ	0xFF7
  5106                           tblptrl	equ	0xFF6
  5107                           tablat	equ	0xFF5
  5108                           intcon	equ	0xFF2
  5109                           postinc0	equ	0xFEE
  5110                           wreg	equ	0xFE8
  5111                           postdec1	equ	0xFE5
  5112                           fsr1l	equ	0xFE1
  5113                           postinc2	equ	0xFDE
  5114                           postdec2	equ	0xFDD
  5115                           fsr2h	equ	0xFDA
  5116                           fsr2l	equ	0xFD9
  5117                           status	equ	0xFD8
  5118                           
  5119 ;; *************** function ___wmul *****************
  5120 ;; Defined at:
  5121 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  multiplier      2   20[BANK0 ] unsigned int 
  5124 ;;  multiplicand    2   22[BANK0 ] unsigned int 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  product         2   24[BANK0 ] unsigned int 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  2   20[BANK0 ] unsigned int 
  5129 ;; Registers used:
  5130 ;;		wreg, status,2, status,0, prodl, prodh
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5136 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;Total ram usage:        6 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    5
  5143 ;; This function calls:
  5144 ;;		Nothing
  5145 ;; This function is called by:
  5146 ;;		_sortBattery
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           	psect	text19
  5151  0022C4                     __ptext19:
  5152                           	opt stack 0
  5153  0022C4                     ___wmul:
  5154                           	opt stack 24
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;incstack = 0
  5158  0022C4  0100               	movlb	0	; () banked
  5159  0022C6  5194               	movf	___wmul@multiplier& (0+255),w,b
  5160  0022C8  0100               	movlb	0	; () banked
  5161  0022CA  0396               	mulwf	___wmul@multiplicand& (0+255),b
  5162  0022CC  CFF3 F098          	movff	prodl,___wmul@product
  5163  0022D0  CFF4 F099          	movff	prodh,___wmul@product+1
  5164  0022D4  0100               	movlb	0	; () banked
  5165  0022D6  5194               	movf	___wmul@multiplier& (0+255),w,b
  5166  0022D8  0100               	movlb	0	; () banked
  5167  0022DA  0397               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5168  0022DC  50F3               	movf	prodl,w,c
  5169  0022DE  0100               	movlb	0	; () banked
  5170  0022E0  2799               	addwf	(___wmul@product+1)& (0+255),f,b
  5171  0022E2  0100               	movlb	0	; () banked
  5172  0022E4  5195               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5173  0022E6  0100               	movlb	0	; () banked
  5174  0022E8  0396               	mulwf	___wmul@multiplicand& (0+255),b
  5175  0022EA  50F3               	movf	prodl,w,c
  5176  0022EC  0100               	movlb	0	; () banked
  5177  0022EE  2799               	addwf	(___wmul@product+1)& (0+255),f,b
  5178                           
  5179                           ; BSR set to: 0
  5180  0022F0  C098  F094         	movff	___wmul@product,?___wmul
  5181  0022F4  C099  F095         	movff	___wmul@product+1,?___wmul+1
  5182  0022F8  0012               	return	
  5183  0022FA                     __end_of___wmul:
  5184                           	opt stack 0
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           prodh	equ	0xFF4
  5190                           prodl	equ	0xFF3
  5191                           intcon	equ	0xFF2
  5192                           postinc0	equ	0xFEE
  5193                           wreg	equ	0xFE8
  5194                           postdec1	equ	0xFE5
  5195                           fsr1l	equ	0xFE1
  5196                           postinc2	equ	0xFDE
  5197                           postdec2	equ	0xFDD
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function ___aldiv *****************
  5203 ;; Defined at:
  5204 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  dividend        4    6[BANK0 ] long 
  5207 ;;  divisor         4   10[BANK0 ] long 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  quotient        4   16[BANK0 ] long 
  5210 ;;  sign            1   15[BANK0 ] unsigned char 
  5211 ;;  counter         1   14[BANK0 ] unsigned char 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  4    6[BANK0 ] long 
  5214 ;; Registers used:
  5215 ;;		wreg, status,2, status,0
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5221 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;Total ram usage:       14 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    5
  5228 ;; This function calls:
  5229 ;;		Nothing
  5230 ;; This function is called by:
  5231 ;;		_sortBattery
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text20
  5236  001170                     __ptext20:
  5237                           	opt stack 0
  5238  001170                     ___aldiv:
  5239                           	opt stack 24
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;incstack = 0
  5243  001170  0E00               	movlw	0
  5244  001172  0100               	movlb	0	; () banked
  5245  001174  6F8F               	movwf	___aldiv@sign& (0+255),b
  5246                           
  5247                           ; BSR set to: 0
  5248  001176  0100               	movlb	0	; () banked
  5249  001178  AF8D               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  5250  00117A  D00C               	goto	l3896
  5251                           
  5252                           ; BSR set to: 0
  5253  00117C  0100               	movlb	0	; () banked
  5254  00117E  1F8D               	comf	(___aldiv@divisor+3)& (0+255),f,b
  5255  001180  1F8C               	comf	(___aldiv@divisor+2)& (0+255),f,b
  5256  001182  1F8B               	comf	(___aldiv@divisor+1)& (0+255),f,b
  5257  001184  6D8A               	negf	___aldiv@divisor& (0+255),b
  5258  001186  0E00               	movlw	0
  5259  001188  238B               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  5260  00118A  238C               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  5261  00118C  238D               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  5262                           
  5263                           ; BSR set to: 0
  5264  00118E  0E01               	movlw	1
  5265  001190  0100               	movlb	0	; () banked
  5266  001192  6F8F               	movwf	___aldiv@sign& (0+255),b
  5267  001194                     l3896:
  5268                           
  5269                           ; BSR set to: 0
  5270  001194  0100               	movlb	0	; () banked
  5271  001196  AF89               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  5272  001198  D00C               	goto	l3902
  5273                           
  5274                           ; BSR set to: 0
  5275  00119A  0100               	movlb	0	; () banked
  5276  00119C  1F89               	comf	(___aldiv@dividend+3)& (0+255),f,b
  5277  00119E  1F88               	comf	(___aldiv@dividend+2)& (0+255),f,b
  5278  0011A0  1F87               	comf	(___aldiv@dividend+1)& (0+255),f,b
  5279  0011A2  6D86               	negf	___aldiv@dividend& (0+255),b
  5280  0011A4  0E00               	movlw	0
  5281  0011A6  2387               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  5282  0011A8  2388               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  5283  0011AA  2389               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  5284                           
  5285                           ; BSR set to: 0
  5286  0011AC  0E01               	movlw	1
  5287  0011AE  0100               	movlb	0	; () banked
  5288  0011B0  1B8F               	xorwf	___aldiv@sign& (0+255),f,b
  5289  0011B2                     l3902:
  5290                           
  5291                           ; BSR set to: 0
  5292  0011B2  0E00               	movlw	0
  5293  0011B4  0100               	movlb	0	; () banked
  5294  0011B6  6F90               	movwf	___aldiv@quotient& (0+255),b
  5295  0011B8  0E00               	movlw	0
  5296  0011BA  6F91               	movwf	(___aldiv@quotient+1)& (0+255),b
  5297  0011BC  0E00               	movlw	0
  5298  0011BE  6F92               	movwf	(___aldiv@quotient+2)& (0+255),b
  5299  0011C0  0E00               	movlw	0
  5300  0011C2  6F93               	movwf	(___aldiv@quotient+3)& (0+255),b
  5301                           
  5302                           ; BSR set to: 0
  5303  0011C4  0100               	movlb	0	; () banked
  5304  0011C6  518A               	movf	___aldiv@divisor& (0+255),w,b
  5305  0011C8  0100               	movlb	0	; () banked
  5306  0011CA  118B               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  5307  0011CC  0100               	movlb	0	; () banked
  5308  0011CE  118C               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  5309  0011D0  0100               	movlb	0	; () banked
  5310  0011D2  118D               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  5311  0011D4  B4D8               	btfsc	status,2,c
  5312  0011D6  D042               	goto	l3924
  5313                           
  5314                           ; BSR set to: 0
  5315  0011D8  0E01               	movlw	1
  5316  0011DA  0100               	movlb	0	; () banked
  5317  0011DC  6F8E               	movwf	___aldiv@counter& (0+255),b
  5318  0011DE  D008               	goto	l3910
  5319  0011E0                     l3908:
  5320                           
  5321                           ; BSR set to: 0
  5322  0011E0  0100               	movlb	0	; () banked
  5323  0011E2  90D8               	bcf	status,0,c
  5324  0011E4  378A               	rlcf	___aldiv@divisor& (0+255),f,b
  5325  0011E6  378B               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  5326  0011E8  378C               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  5327  0011EA  378D               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  5328  0011EC  0100               	movlb	0	; () banked
  5329  0011EE  2B8E               	incf	___aldiv@counter& (0+255),f,b
  5330  0011F0                     l3910:
  5331                           
  5332                           ; BSR set to: 0
  5333  0011F0  0100               	movlb	0	; () banked
  5334  0011F2  AF8D               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  5335  0011F4  D7F5               	goto	l3908
  5336  0011F6                     l3912:
  5337                           
  5338                           ; BSR set to: 0
  5339  0011F6  0100               	movlb	0	; () banked
  5340  0011F8  90D8               	bcf	status,0,c
  5341  0011FA  3790               	rlcf	___aldiv@quotient& (0+255),f,b
  5342  0011FC  3791               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  5343  0011FE  3792               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  5344  001200  3793               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  5345                           
  5346                           ; BSR set to: 0
  5347  001202  0100               	movlb	0	; () banked
  5348  001204  518A               	movf	___aldiv@divisor& (0+255),w,b
  5349  001206  0100               	movlb	0	; () banked
  5350  001208  5D86               	subwf	___aldiv@dividend& (0+255),w,b
  5351  00120A  0100               	movlb	0	; () banked
  5352  00120C  518B               	movf	(___aldiv@divisor+1)& (0+255),w,b
  5353  00120E  0100               	movlb	0	; () banked
  5354  001210  5987               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  5355  001212  0100               	movlb	0	; () banked
  5356  001214  518C               	movf	(___aldiv@divisor+2)& (0+255),w,b
  5357  001216  0100               	movlb	0	; () banked
  5358  001218  5988               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  5359  00121A  0100               	movlb	0	; () banked
  5360  00121C  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  5361  00121E  0100               	movlb	0	; () banked
  5362  001220  5989               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  5363  001222  A0D8               	btfss	status,0,c
  5364  001224  D012               	goto	l3920
  5365                           
  5366                           ; BSR set to: 0
  5367  001226  0100               	movlb	0	; () banked
  5368  001228  518A               	movf	___aldiv@divisor& (0+255),w,b
  5369  00122A  0100               	movlb	0	; () banked
  5370  00122C  5F86               	subwf	___aldiv@dividend& (0+255),f,b
  5371  00122E  0100               	movlb	0	; () banked
  5372  001230  518B               	movf	(___aldiv@divisor+1)& (0+255),w,b
  5373  001232  0100               	movlb	0	; () banked
  5374  001234  5B87               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  5375  001236  0100               	movlb	0	; () banked
  5376  001238  518C               	movf	(___aldiv@divisor+2)& (0+255),w,b
  5377  00123A  0100               	movlb	0	; () banked
  5378  00123C  5B88               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  5379  00123E  0100               	movlb	0	; () banked
  5380  001240  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  5381  001242  0100               	movlb	0	; () banked
  5382  001244  5B89               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  5383                           
  5384                           ; BSR set to: 0
  5385  001246  0100               	movlb	0	; () banked
  5386  001248  8190               	bsf	___aldiv@quotient& (0+255),0,b
  5387  00124A                     l3920:
  5388                           
  5389                           ; BSR set to: 0
  5390  00124A  0100               	movlb	0	; () banked
  5391  00124C  90D8               	bcf	status,0,c
  5392  00124E  338D               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  5393  001250  338C               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  5394  001252  338B               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  5395  001254  338A               	rrcf	___aldiv@divisor& (0+255),f,b
  5396                           
  5397                           ; BSR set to: 0
  5398  001256  0100               	movlb	0	; () banked
  5399  001258  2F8E               	decfsz	___aldiv@counter& (0+255),f,b
  5400  00125A  D7CD               	goto	l3912
  5401  00125C                     l3924:
  5402                           
  5403                           ; BSR set to: 0
  5404  00125C  0100               	movlb	0	; () banked
  5405  00125E  518F               	movf	___aldiv@sign& (0+255),w,b
  5406  001260  0100               	movlb	0	; () banked
  5407  001262  B4D8               	btfsc	status,2,c
  5408  001264  D009               	goto	l3928
  5409                           
  5410                           ; BSR set to: 0
  5411  001266  0100               	movlb	0	; () banked
  5412  001268  1F93               	comf	(___aldiv@quotient+3)& (0+255),f,b
  5413  00126A  1F92               	comf	(___aldiv@quotient+2)& (0+255),f,b
  5414  00126C  1F91               	comf	(___aldiv@quotient+1)& (0+255),f,b
  5415  00126E  6D90               	negf	___aldiv@quotient& (0+255),b
  5416  001270  0E00               	movlw	0
  5417  001272  2391               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  5418  001274  2392               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  5419  001276  2393               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  5420  001278                     l3928:
  5421                           
  5422                           ; BSR set to: 0
  5423  001278  C090  F086         	movff	___aldiv@quotient,?___aldiv
  5424  00127C  C091  F087         	movff	___aldiv@quotient+1,?___aldiv+1
  5425  001280  C092  F088         	movff	___aldiv@quotient+2,?___aldiv+2
  5426  001284  C093  F089         	movff	___aldiv@quotient+3,?___aldiv+3
  5427  001288  0012               	return	
  5428  00128A                     __end_of___aldiv:
  5429                           	opt stack 0
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           prodh	equ	0xFF4
  5435                           prodl	equ	0xFF3
  5436                           intcon	equ	0xFF2
  5437                           postinc0	equ	0xFEE
  5438                           wreg	equ	0xFE8
  5439                           postdec1	equ	0xFE5
  5440                           fsr1l	equ	0xFE1
  5441                           postinc2	equ	0xFDE
  5442                           postdec2	equ	0xFDD
  5443                           fsr2h	equ	0xFDA
  5444                           fsr2l	equ	0xFD9
  5445                           status	equ	0xFD8
  5446                           
  5447 ;; *************** function _showInterface *****************
  5448 ;; Defined at:
  5449 ;;		line 164 in file "main.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;		None
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  key             1   28[BANK0 ] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      void 
  5456 ;; Registers used:
  5457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;Total ram usage:        1 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:   11
  5470 ;; This function calls:
  5471 ;;		_dateTime
  5472 ;;		_mainMenu
  5473 ;;		_readKeypad
  5474 ;;		_runMenu
  5475 ;;		_runSelect
  5476 ;;		_runStats
  5477 ;;		_runTime
  5478 ;; This function is called by:
  5479 ;;		_main
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text21
  5484  001396                     __ptext21:
  5485                           	opt stack 0
  5486  001396                     _showInterface:
  5487                           	opt stack 19
  5488  001396                     
  5489                           ;main.c: 167: dateTime();
  5490  001396  EC20  F012         	call	_dateTime	;wreg free
  5491  00139A                     l4046:
  5492  00139A  EC96  F011         	call	_readKeypad	;wreg free
  5493  00139E  0A41               	xorlw	65
  5494  0013A0  A4D8               	btfss	status,2,c
  5495  0013A2  D7FB               	goto	l4046
  5496  0013A4                     l4048:
  5497                           
  5498                           ;main.c: 172: mainMenu();
  5499  0013A4  EC0D  F012         	call	_mainMenu	;wreg free
  5500  0013A8                     l4050:
  5501  0013A8  EC96  F011         	call	_readKeypad	;wreg free
  5502  0013AC  0100               	movlb	0	; () banked
  5503  0013AE  6F9C               	movwf	showInterface@key& (0+255),b
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;main.c: 176: while(key != 'B' && key != 'C' && key != '*');
  5507  0013B0  0E42               	movlw	66
  5508  0013B2  0100               	movlb	0	; () banked
  5509  0013B4  199C               	xorwf	showInterface@key& (0+255),w,b
  5510  0013B6  B4D8               	btfsc	status,2,c
  5511  0013B8  D00A               	goto	l4058
  5512                           
  5513                           ; BSR set to: 0
  5514  0013BA  0E43               	movlw	67
  5515  0013BC  0100               	movlb	0	; () banked
  5516  0013BE  199C               	xorwf	showInterface@key& (0+255),w,b
  5517  0013C0  B4D8               	btfsc	status,2,c
  5518  0013C2  D005               	goto	l4058
  5519                           
  5520                           ; BSR set to: 0
  5521  0013C4  0E2A               	movlw	42
  5522  0013C6  0100               	movlb	0	; () banked
  5523  0013C8  199C               	xorwf	showInterface@key& (0+255),w,b
  5524  0013CA  A4D8               	btfss	status,2,c
  5525  0013CC  D7ED               	goto	l4050
  5526  0013CE                     l4058:
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;main.c: 178: if(key == 'C'){
  5530  0013CE  0E43               	movlw	67
  5531  0013D0  0100               	movlb	0	; () banked
  5532  0013D2  199C               	xorwf	showInterface@key& (0+255),w,b
  5533  0013D4  A4D8               	btfss	status,2,c
  5534  0013D6  D056               	goto	l4102
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;main.c: 180: runSelect();
  5538  0013D8  ECFA  F011         	call	_runSelect	;wreg free
  5539  0013DC                     l4062:
  5540  0013DC  EC96  F011         	call	_readKeypad	;wreg free
  5541  0013E0  0100               	movlb	0	; () banked
  5542  0013E2  6F9C               	movwf	showInterface@key& (0+255),b
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;main.c: 186: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '*');
  5546  0013E4  0E31               	movlw	49
  5547  0013E6  0100               	movlb	0	; () banked
  5548  0013E8  199C               	xorwf	showInterface@key& (0+255),w,b
  5549  0013EA  B4D8               	btfsc	status,2,c
  5550  0013EC  D014               	goto	l4074
  5551                           
  5552                           ; BSR set to: 0
  5553  0013EE  0E32               	movlw	50
  5554  0013F0  0100               	movlb	0	; () banked
  5555  0013F2  199C               	xorwf	showInterface@key& (0+255),w,b
  5556  0013F4  B4D8               	btfsc	status,2,c
  5557  0013F6  D00F               	goto	l4074
  5558                           
  5559                           ; BSR set to: 0
  5560  0013F8  0E33               	movlw	51
  5561  0013FA  0100               	movlb	0	; () banked
  5562  0013FC  199C               	xorwf	showInterface@key& (0+255),w,b
  5563  0013FE  B4D8               	btfsc	status,2,c
  5564  001400  D00A               	goto	l4074
  5565                           
  5566                           ; BSR set to: 0
  5567  001402  0E34               	movlw	52
  5568  001404  0100               	movlb	0	; () banked
  5569  001406  199C               	xorwf	showInterface@key& (0+255),w,b
  5570  001408  B4D8               	btfsc	status,2,c
  5571  00140A  D005               	goto	l4074
  5572                           
  5573                           ; BSR set to: 0
  5574  00140C  0E2A               	movlw	42
  5575  00140E  0100               	movlb	0	; () banked
  5576  001410  199C               	xorwf	showInterface@key& (0+255),w,b
  5577  001412  A4D8               	btfss	status,2,c
  5578  001414  D7E3               	goto	l4062
  5579  001416                     l4074:
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;main.c: 188: if(key == '*')continue;
  5583  001416  0E2A               	movlw	42
  5584  001418  0100               	movlb	0	; () banked
  5585  00141A  199C               	xorwf	showInterface@key& (0+255),w,b
  5586  00141C  B4D8               	btfsc	status,2,c
  5587  00141E  D7C2               	goto	l4048
  5588  001420                     l4078:
  5589                           
  5590                           ;main.c: 194: runMenu(key);
  5591  001420  0100               	movlb	0	; () banked
  5592  001422  519C               	movf	showInterface@key& (0+255),w,b
  5593  001424  EC7D  F011         	call	_runMenu
  5594  001428                     l4080:
  5595  001428  EC96  F011         	call	_readKeypad	;wreg free
  5596  00142C  0100               	movlb	0	; () banked
  5597  00142E  6F9C               	movwf	showInterface@key& (0+255),b
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;main.c: 198: while(key != 'A' && key != 'B' && key != '*');
  5601  001430  0E41               	movlw	65
  5602  001432  0100               	movlb	0	; () banked
  5603  001434  199C               	xorwf	showInterface@key& (0+255),w,b
  5604  001436  B4D8               	btfsc	status,2,c
  5605  001438  D00A               	goto	l4088
  5606                           
  5607                           ; BSR set to: 0
  5608  00143A  0E42               	movlw	66
  5609  00143C  0100               	movlb	0	; () banked
  5610  00143E  199C               	xorwf	showInterface@key& (0+255),w,b
  5611  001440  B4D8               	btfsc	status,2,c
  5612  001442  D005               	goto	l4088
  5613                           
  5614                           ; BSR set to: 0
  5615  001444  0E2A               	movlw	42
  5616  001446  0100               	movlb	0	; () banked
  5617  001448  199C               	xorwf	showInterface@key& (0+255),w,b
  5618  00144A  A4D8               	btfss	status,2,c
  5619  00144C  D7ED               	goto	l4080
  5620  00144E                     l4088:
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;main.c: 200: if(key == 'A'){
  5624  00144E  0E41               	movlw	65
  5625  001450  0100               	movlb	0	; () banked
  5626  001452  199C               	xorwf	showInterface@key& (0+255),w,b
  5627  001454  A4D8               	btfss	status,2,c
  5628  001456  D003               	goto	l4092
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;main.c: 202: runTime();
  5632  001458  ECD4  F011         	call	_runTime	;wreg free
  5633                           
  5634                           ;main.c: 204: }
  5635  00145C  D00D               	goto	l4100
  5636  00145E                     l4092:
  5637                           
  5638                           ;main.c: 205: else if(key == 'B'){
  5639  00145E  0E42               	movlw	66
  5640  001460  0100               	movlb	0	; () banked
  5641  001462  199C               	xorwf	showInterface@key& (0+255),w,b
  5642  001464  A4D8               	btfss	status,2,c
  5643  001466  D003               	goto	l4096
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;main.c: 207: runStats();
  5647  001468  ECE7  F011         	call	_runStats	;wreg free
  5648                           
  5649                           ;main.c: 209: }
  5650  00146C  D005               	goto	l4100
  5651  00146E                     l4096:
  5652                           
  5653                           ;main.c: 210: else if(key == '*')break;
  5654  00146E  0E2A               	movlw	42
  5655  001470  0100               	movlb	0	; () banked
  5656  001472  199C               	xorwf	showInterface@key& (0+255),w,b
  5657  001474  B4D8               	btfsc	status,2,c
  5658  001476  D796               	goto	l4048
  5659  001478                     l4100:
  5660  001478  EC96  F011         	call	_readKeypad	;wreg free
  5661  00147C  0A2A               	xorlw	42
  5662  00147E  B4D8               	btfsc	status,2,c
  5663  001480  D7CF               	goto	l4078
  5664  001482  D7FA               	goto	l4100
  5665  001484                     l4102:
  5666                           
  5667                           ;main.c: 216: else if(key == 'B'){
  5668  001484  0E42               	movlw	66
  5669  001486  0100               	movlb	0	; () banked
  5670  001488  199C               	xorwf	showInterface@key& (0+255),w,b
  5671  00148A  B4D8               	btfsc	status,2,c
  5672  00148C  0012               	return	
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;main.c: 219: else if(key == '*')
  5676                           
  5677                           ; BSR set to: 0
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;main.c: 218: }
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;main.c: 217: return;
  5684  00148E  0E2A               	movlw	42
  5685  001490  0100               	movlb	0	; () banked
  5686  001492  199C               	xorwf	showInterface@key& (0+255),w,b
  5687  001494  B4D8               	btfsc	status,2,c
  5688  001496  D77F               	goto	l4044
  5689  001498  D785               	goto	l4048
  5690  00149A                     __end_of_showInterface:
  5691                           	opt stack 0
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodh	equ	0xFF4
  5697                           prodl	equ	0xFF3
  5698                           intcon	equ	0xFF2
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           postdec1	equ	0xFE5
  5702                           fsr1l	equ	0xFE1
  5703                           postinc2	equ	0xFDE
  5704                           postdec2	equ	0xFDD
  5705                           fsr2h	equ	0xFDA
  5706                           fsr2l	equ	0xFD9
  5707                           status	equ	0xFD8
  5708                           
  5709 ;; *************** function _runTime *****************
  5710 ;; Defined at:
  5711 ;;		line 36 in file "interface.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;		None
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;		None
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      void 
  5718 ;; Registers used:
  5719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;Total ram usage:        0 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:   10
  5732 ;; This function calls:
  5733 ;;		_lcdClear
  5734 ;;		_printf
  5735 ;; This function is called by:
  5736 ;;		_showInterface
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           	psect	text22
  5741  0023A8                     __ptext22:
  5742                           	opt stack 0
  5743  0023A8                     _runTime:
  5744                           	opt stack 19
  5745                           
  5746                           ;interface.c: 37: lcdClear();
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;incstack = 0
  5750  0023A8  EC58  F012         	call	_lcdClear	;wreg free
  5751                           
  5752                           ;interface.c: 38: printf("time: nnn sec   \n");
  5753  0023AC  0EF8               	movlw	low STR_20
  5754  0023AE  0100               	movlb	0	; () banked
  5755  0023B0  6F8C               	movwf	printf@f& (0+255),b
  5756  0023B2  0EFE               	movlw	high STR_20
  5757  0023B4  0100               	movlb	0	; () banked
  5758  0023B6  6F8D               	movwf	(printf@f+1)& (0+255),b
  5759  0023B8  EC3D  F001         	call	_printf	;wreg free
  5760                           
  5761                           ;interface.c: 39: printf("              *>");
  5762  0023BC  0E3F               	movlw	low STR_21
  5763  0023BE  0100               	movlb	0	; () banked
  5764  0023C0  6F8C               	movwf	printf@f& (0+255),b
  5765  0023C2  0EFF               	movlw	high STR_21
  5766  0023C4  0100               	movlb	0	; () banked
  5767  0023C6  6F8D               	movwf	(printf@f+1)& (0+255),b
  5768  0023C8  EC3D  F001         	call	_printf	;wreg free
  5769  0023CC  0012               	return		;funcret
  5770  0023CE                     __end_of_runTime:
  5771                           	opt stack 0
  5772                           tblptru	equ	0xFF8
  5773                           tblptrh	equ	0xFF7
  5774                           tblptrl	equ	0xFF6
  5775                           tablat	equ	0xFF5
  5776                           prodh	equ	0xFF4
  5777                           prodl	equ	0xFF3
  5778                           intcon	equ	0xFF2
  5779                           postinc0	equ	0xFEE
  5780                           wreg	equ	0xFE8
  5781                           postdec1	equ	0xFE5
  5782                           fsr1l	equ	0xFE1
  5783                           postinc2	equ	0xFDE
  5784                           postdec2	equ	0xFDD
  5785                           fsr2h	equ	0xFDA
  5786                           fsr2l	equ	0xFD9
  5787                           status	equ	0xFD8
  5788                           
  5789 ;; *************** function _runStats *****************
  5790 ;; Defined at:
  5791 ;;		line 42 in file "interface.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      void 
  5798 ;; Registers used:
  5799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;Total ram usage:        0 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:   10
  5812 ;; This function calls:
  5813 ;;		_lcdClear
  5814 ;;		_printf
  5815 ;; This function is called by:
  5816 ;;		_showInterface
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text23
  5821  0023CE                     __ptext23:
  5822                           	opt stack 0
  5823  0023CE                     _runStats:
  5824                           	opt stack 19
  5825                           
  5826                           ;interface.c: 43: lcdClear();
  5827                           
  5828                           ;incstack = 0
  5829  0023CE  EC58  F012         	call	_lcdClear	;wreg free
  5830                           
  5831                           ;interface.c: 44: printf("[AA,9V,C,other] \n");
  5832  0023D2  0E0A               	movlw	low STR_22
  5833  0023D4  0100               	movlb	0	; () banked
  5834  0023D6  6F8C               	movwf	printf@f& (0+255),b
  5835  0023D8  0EFF               	movlw	high STR_22
  5836  0023DA  0100               	movlb	0	; () banked
  5837  0023DC  6F8D               	movwf	(printf@f+1)& (0+255),b
  5838  0023DE  EC3D  F001         	call	_printf	;wreg free
  5839                           
  5840                           ;interface.c: 45: printf("[nn,n,n,nn]   *>");
  5841  0023E2  0E83               	movlw	low STR_23
  5842  0023E4  0100               	movlb	0	; () banked
  5843  0023E6  6F8C               	movwf	printf@f& (0+255),b
  5844  0023E8  0EFF               	movlw	high STR_23
  5845  0023EA  0100               	movlb	0	; () banked
  5846  0023EC  6F8D               	movwf	(printf@f+1)& (0+255),b
  5847  0023EE  EC3D  F001         	call	_printf	;wreg free
  5848  0023F2  0012               	return		;funcret
  5849  0023F4                     __end_of_runStats:
  5850                           	opt stack 0
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           intcon	equ	0xFF2
  5858                           postinc0	equ	0xFEE
  5859                           wreg	equ	0xFE8
  5860                           postdec1	equ	0xFE5
  5861                           fsr1l	equ	0xFE1
  5862                           postinc2	equ	0xFDE
  5863                           postdec2	equ	0xFDD
  5864                           fsr2h	equ	0xFDA
  5865                           fsr2l	equ	0xFD9
  5866                           status	equ	0xFD8
  5867                           
  5868 ;; *************** function _runSelect *****************
  5869 ;; Defined at:
  5870 ;;		line 24 in file "interface.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;		None
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;		None
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  1    wreg      void 
  5877 ;; Registers used:
  5878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5888 ;;Total ram usage:        0 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:   10
  5891 ;; This function calls:
  5892 ;;		_lcdClear
  5893 ;;		_printf
  5894 ;; This function is called by:
  5895 ;;		_showInterface
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           	psect	text24
  5900  0023F4                     __ptext24:
  5901                           	opt stack 0
  5902  0023F4                     _runSelect:
  5903                           	opt stack 19
  5904                           
  5905                           ;interface.c: 25: lcdClear();
  5906                           
  5907                           ;incstack = 0
  5908  0023F4  EC58  F012         	call	_lcdClear	;wreg free
  5909                           
  5910                           ;interface.c: 26: printf("select run:     \n");
  5911  0023F8  0EE6               	movlw	low STR_16
  5912  0023FA  0100               	movlb	0	; () banked
  5913  0023FC  6F8C               	movwf	printf@f& (0+255),b
  5914  0023FE  0EFE               	movlw	high STR_16
  5915  002400  0100               	movlb	0	; () banked
  5916  002402  6F8D               	movwf	(printf@f+1)& (0+255),b
  5917  002404  EC3D  F001         	call	_printf	;wreg free
  5918                           
  5919                           ;interface.c: 27: printf("[1,2,3,4]     *>");
  5920  002408  0E50               	movlw	low STR_17
  5921  00240A  0100               	movlb	0	; () banked
  5922  00240C  6F8C               	movwf	printf@f& (0+255),b
  5923  00240E  0EFF               	movlw	high STR_17
  5924  002410  0100               	movlb	0	; () banked
  5925  002412  6F8D               	movwf	(printf@f+1)& (0+255),b
  5926  002414  EC3D  F001         	call	_printf	;wreg free
  5927  002418  0012               	return		;funcret
  5928  00241A                     __end_of_runSelect:
  5929                           	opt stack 0
  5930                           tblptru	equ	0xFF8
  5931                           tblptrh	equ	0xFF7
  5932                           tblptrl	equ	0xFF6
  5933                           tablat	equ	0xFF5
  5934                           prodh	equ	0xFF4
  5935                           prodl	equ	0xFF3
  5936                           intcon	equ	0xFF2
  5937                           postinc0	equ	0xFEE
  5938                           wreg	equ	0xFE8
  5939                           postdec1	equ	0xFE5
  5940                           fsr1l	equ	0xFE1
  5941                           postinc2	equ	0xFDE
  5942                           postdec2	equ	0xFDD
  5943                           fsr2h	equ	0xFDA
  5944                           fsr2l	equ	0xFD9
  5945                           status	equ	0xFD8
  5946                           
  5947 ;; *************** function _runMenu *****************
  5948 ;; Defined at:
  5949 ;;		line 30 in file "interface.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;  key             1    wreg     unsigned char 
  5952 ;; Auto vars:     Size  Location     Type
  5953 ;;  key             1   27[BANK0 ] unsigned char 
  5954 ;; Return value:  Size  Location     Type
  5955 ;;                  1    wreg      void 
  5956 ;; Registers used:
  5957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;Total ram usage:        1 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:   10
  5970 ;; This function calls:
  5971 ;;		_lcdClear
  5972 ;;		_printf
  5973 ;; This function is called by:
  5974 ;;		_showInterface
  5975 ;; This function uses a non-reentrant model
  5976 ;;
  5977                           
  5978                           	psect	text25
  5979  0022FA                     __ptext25:
  5980                           	opt stack 0
  5981  0022FA                     _runMenu:
  5982                           	opt stack 19
  5983                           
  5984                           ;incstack = 0
  5985                           ;runMenu@key stored from wreg
  5986  0022FA  0100               	movlb	0	; () banked
  5987  0022FC  6F9B               	movwf	runMenu@key& (0+255),b
  5988                           
  5989                           ;interface.c: 31: lcdClear();
  5990  0022FE  EC58  F012         	call	_lcdClear	;wreg free
  5991                           
  5992                           ;interface.c: 32: printf("%c) time  <A     \n",key);
  5993  002302  0EAF               	movlw	low STR_18
  5994  002304  0100               	movlb	0	; () banked
  5995  002306  6F8C               	movwf	printf@f& (0+255),b
  5996  002308  0EFE               	movlw	high STR_18
  5997  00230A  0100               	movlb	0	; () banked
  5998  00230C  6F8D               	movwf	(printf@f+1)& (0+255),b
  5999  00230E  C09B  F08E         	movff	runMenu@key,?_printf+2
  6000  002312  0100               	movlb	0	; () banked
  6001  002314  6B8F               	clrf	(?_printf+3)& (0+255),b
  6002  002316  EC3D  F001         	call	_printf	;wreg free
  6003                           
  6004                           ;interface.c: 33: printf( "   stats <B   *>");
  6005  00231A  0E72               	movlw	low STR_19
  6006  00231C  0100               	movlb	0	; () banked
  6007  00231E  6F8C               	movwf	printf@f& (0+255),b
  6008  002320  0EFF               	movlw	high STR_19
  6009  002322  0100               	movlb	0	; () banked
  6010  002324  6F8D               	movwf	(printf@f+1)& (0+255),b
  6011  002326  EC3D  F001         	call	_printf	;wreg free
  6012  00232A  0012               	return		;funcret
  6013  00232C                     __end_of_runMenu:
  6014                           	opt stack 0
  6015                           tblptru	equ	0xFF8
  6016                           tblptrh	equ	0xFF7
  6017                           tblptrl	equ	0xFF6
  6018                           tablat	equ	0xFF5
  6019                           prodh	equ	0xFF4
  6020                           prodl	equ	0xFF3
  6021                           intcon	equ	0xFF2
  6022                           postinc0	equ	0xFEE
  6023                           wreg	equ	0xFE8
  6024                           postdec1	equ	0xFE5
  6025                           fsr1l	equ	0xFE1
  6026                           postinc2	equ	0xFDE
  6027                           postdec2	equ	0xFDD
  6028                           fsr2h	equ	0xFDA
  6029                           fsr2l	equ	0xFD9
  6030                           status	equ	0xFD8
  6031                           
  6032 ;; *************** function _readKeypad *****************
  6033 ;; Defined at:
  6034 ;;		line 35 in file "keypad.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;		None
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;  key             1    0[BANK0 ] unsigned char 
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      unsigned char 
  6041 ;; Registers used:
  6042 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;Total ram usage:        1 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    5
  6055 ;; This function calls:
  6056 ;;		Nothing
  6057 ;; This function is called by:
  6058 ;;		_showInterface
  6059 ;;		_pause
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text26
  6064  00232C                     __ptext26:
  6065                           	opt stack 0
  6066  00232C                     _readKeypad:
  6067                           	opt stack 23
  6068  00232C                     l245:
  6069  00232C  A281               	btfss	3969,1,c	;volatile
  6070  00232E  D7FE               	goto	l245
  6071                           
  6072                           ;keypad.c: 37: char key = (PORTB & 0xF0) >> 4;
  6073  002330  3881               	swapf	3969,w,c	;volatile
  6074  002332  0B0F               	andlw	15
  6075  002334  0B0F               	andlw	15
  6076  002336  0100               	movlb	0	; () banked
  6077  002338  6F80               	movwf	readKeypad@key& (0+255),b
  6078  00233A                     l248:
  6079  00233A  B281               	btfsc	3969,1,c	;volatile
  6080  00233C  D7FE               	goto	l248
  6081                           
  6082                           ;keypad.c: 39: return keys[key];
  6083  00233E  0100               	movlb	0	; () banked
  6084  002340  5180               	movf	readKeypad@key& (0+255),w,b
  6085  002342  0D01               	mullw	1
  6086  002344  0E59               	movlw	low _keys
  6087  002346  24F3               	addwf	prodl,w,c
  6088  002348  6EF6               	movwf	tblptrl,c
  6089  00234A  0EFE               	movlw	high _keys
  6090  00234C  20F4               	addwfc	prodh,w,c
  6091  00234E  6EF7               	movwf	tblptrh,c
  6092  002350                     	if	0	;There are less than 3 active tblptr bytes
  6093  002350                     	endif
  6094  002350  0008               	tblrd		*
  6095  002352  50F5               	movf	tablat,w,c
  6096  002354  0012               	return	
  6097  002356                     __end_of_readKeypad:
  6098                           	opt stack 0
  6099                           tblptru	equ	0xFF8
  6100                           tblptrh	equ	0xFF7
  6101                           tblptrl	equ	0xFF6
  6102                           tablat	equ	0xFF5
  6103                           prodh	equ	0xFF4
  6104                           prodl	equ	0xFF3
  6105                           intcon	equ	0xFF2
  6106                           postinc0	equ	0xFEE
  6107                           wreg	equ	0xFE8
  6108                           postdec1	equ	0xFE5
  6109                           fsr1l	equ	0xFE1
  6110                           postinc2	equ	0xFDE
  6111                           postdec2	equ	0xFDD
  6112                           fsr2h	equ	0xFDA
  6113                           fsr2l	equ	0xFD9
  6114                           status	equ	0xFD8
  6115                           
  6116 ;; *************** function _mainMenu *****************
  6117 ;; Defined at:
  6118 ;;		line 18 in file "interface.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;Total ram usage:        0 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:   10
  6139 ;; This function calls:
  6140 ;;		_lcdClear
  6141 ;;		_printf
  6142 ;; This function is called by:
  6143 ;;		_showInterface
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           	psect	text27
  6148  00241A                     __ptext27:
  6149                           	opt stack 0
  6150  00241A                     _mainMenu:
  6151                           	opt stack 19
  6152                           
  6153                           ;interface.c: 19: lcdClear();
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;incstack = 0
  6157  00241A  EC58  F012         	call	_lcdClear	;wreg free
  6158                           
  6159                           ;interface.c: 20: printf("start   <B      \n");
  6160  00241E  0EC2               	movlw	low STR_14
  6161  002420  0100               	movlb	0	; () banked
  6162  002422  6F8C               	movwf	printf@f& (0+255),b
  6163  002424  0EFE               	movlw	high STR_14
  6164  002426  0100               	movlb	0	; () banked
  6165  002428  6F8D               	movwf	(printf@f+1)& (0+255),b
  6166  00242A  EC3D  F001         	call	_printf	;wreg free
  6167                           
  6168                           ;interface.c: 21: printf("history <C    *>");
  6169  00242E  0E61               	movlw	low STR_15
  6170  002430  0100               	movlb	0	; () banked
  6171  002432  6F8C               	movwf	printf@f& (0+255),b
  6172  002434  0EFF               	movlw	high STR_15
  6173  002436  0100               	movlb	0	; () banked
  6174  002438  6F8D               	movwf	(printf@f+1)& (0+255),b
  6175  00243A  EC3D  F001         	call	_printf	;wreg free
  6176  00243E  0012               	return		;funcret
  6177  002440                     __end_of_mainMenu:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           intcon	equ	0xFF2
  6186                           postinc0	equ	0xFEE
  6187                           wreg	equ	0xFE8
  6188                           postdec1	equ	0xFE5
  6189                           fsr1l	equ	0xFE1
  6190                           postinc2	equ	0xFDE
  6191                           postdec2	equ	0xFDD
  6192                           fsr2h	equ	0xFDA
  6193                           fsr2l	equ	0xFD9
  6194                           status	equ	0xFD8
  6195                           
  6196 ;; *************** function _dateTime *****************
  6197 ;; Defined at:
  6198 ;;		line 12 in file "interface.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;		None
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;		None
  6203 ;; Return value:  Size  Location     Type
  6204 ;;                  1    wreg      void 
  6205 ;; Registers used:
  6206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;Total ram usage:        0 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:   10
  6219 ;; This function calls:
  6220 ;;		_lcdClear
  6221 ;;		_printf
  6222 ;; This function is called by:
  6223 ;;		_showInterface
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           	psect	text28
  6228  002440                     __ptext28:
  6229                           	opt stack 0
  6230  002440                     _dateTime:
  6231                           	opt stack 19
  6232                           
  6233                           ;interface.c: 13: lcdClear();
  6234                           
  6235                           ;incstack = 0
  6236  002440  EC58  F012         	call	_lcdClear	;wreg free
  6237                           
  6238                           ;interface.c: 14: printf("  hh:mm:ss      \n");
  6239  002444  0ED4               	movlw	low STR_12
  6240  002446  0100               	movlb	0	; () banked
  6241  002448  6F8C               	movwf	printf@f& (0+255),b
  6242  00244A  0EFE               	movlw	high STR_12
  6243  00244C  0100               	movlb	0	; () banked
  6244  00244E  6F8D               	movwf	(printf@f+1)& (0+255),b
  6245  002450  EC3D  F001         	call	_printf	;wreg free
  6246                           
  6247                           ;interface.c: 15: printf("  mm:dd:yy    A>");
  6248  002454  0E94               	movlw	low STR_13
  6249  002456  0100               	movlb	0	; () banked
  6250  002458  6F8C               	movwf	printf@f& (0+255),b
  6251  00245A  0EFF               	movlw	high STR_13
  6252  00245C  0100               	movlb	0	; () banked
  6253  00245E  6F8D               	movwf	(printf@f+1)& (0+255),b
  6254  002460  EC3D  F001         	call	_printf	;wreg free
  6255  002464  0012               	return		;funcret
  6256  002466                     __end_of_dateTime:
  6257                           	opt stack 0
  6258                           tblptru	equ	0xFF8
  6259                           tblptrh	equ	0xFF7
  6260                           tblptrl	equ	0xFF6
  6261                           tablat	equ	0xFF5
  6262                           prodh	equ	0xFF4
  6263                           prodl	equ	0xFF3
  6264                           intcon	equ	0xFF2
  6265                           postinc0	equ	0xFEE
  6266                           wreg	equ	0xFE8
  6267                           postdec1	equ	0xFE5
  6268                           fsr1l	equ	0xFE1
  6269                           postinc2	equ	0xFDE
  6270                           postdec2	equ	0xFDD
  6271                           fsr2h	equ	0xFDA
  6272                           fsr2l	equ	0xFD9
  6273                           status	equ	0xFD8
  6274                           
  6275 ;; *************** function _printf *****************
  6276 ;; Defined at:
  6277 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  6280 ;;		 -> STR_23(17), STR_22(18), STR_21(17), STR_20(18), 
  6281 ;;		 -> STR_19(17), STR_18(19), STR_17(17), STR_16(18), 
  6282 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
  6283 ;;		 -> STR_11(9), STR_10(8), STR_9(24), STR_8(15), 
  6284 ;;		 -> STR_7(17), STR_6(20), STR_5(18), STR_4(14), 
  6285 ;;		 -> STR_3(7), STR_2(11), STR_1(8), 
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;  idx             1   19[BANK0 ] unsigned char 
  6288 ;;  tmpval          4    0        struct .
  6289 ;;  cp              3    0        PTR const unsigned char 
  6290 ;;  val             2   24[BANK0 ] unsigned int 
  6291 ;;  ap              2   21[BANK0 ] PTR void [1]
  6292 ;;		 -> ?_printf(2), 
  6293 ;;  len             2    0        unsigned int 
  6294 ;;  c               1   26[BANK0 ] char 
  6295 ;;  flag            1   23[BANK0 ] unsigned char 
  6296 ;;  prec            1   20[BANK0 ] char 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  2   12[BANK0 ] int 
  6299 ;; Registers used:
  6300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6306 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;Total ram usage:       15 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    9
  6313 ;; This function calls:
  6314 ;;		___lwdiv
  6315 ;;		___lwmod
  6316 ;;		_putch
  6317 ;; This function is called by:
  6318 ;;		_main
  6319 ;;		_sortBattery
  6320 ;;		_pause
  6321 ;;		_dateTime
  6322 ;;		_mainMenu
  6323 ;;		_runSelect
  6324 ;;		_runMenu
  6325 ;;		_runTime
  6326 ;;		_runStats
  6327 ;;		_testFrequency
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	text29
  6332  00027A                     __ptext29:
  6333                           	opt stack 0
  6334  00027A                     _printf:
  6335                           	opt stack 20
  6336                           
  6337                           ;doprnt.c: 466: va_list ap;
  6338                           ;doprnt.c: 499: signed char c;
  6339                           ;doprnt.c: 506: signed char prec;
  6340                           ;doprnt.c: 508: unsigned char flag;
  6341                           ;doprnt.c: 523: union {
  6342                           ;doprnt.c: 524: unsigned long vd;
  6343                           ;doprnt.c: 525: double integ;
  6344                           ;doprnt.c: 526: } tmpval;
  6345                           ;doprnt.c: 528: unsigned int val;
  6346                           ;doprnt.c: 529: unsigned len;
  6347                           ;doprnt.c: 530: const char * cp;
  6348                           ;doprnt.c: 533: *ap = __va_start();
  6349                           
  6350                           ;incstack = 0
  6351  00027A  0E8E               	movlw	low (?_printf+2)
  6352  00027C  0100               	movlb	0	; () banked
  6353  00027E  6F95               	movwf	printf@ap& (0+255),b
  6354  000280  0E00               	movlw	high (?_printf+2)
  6355  000282  0100               	movlb	0	; () banked
  6356  000284  6F96               	movwf	(printf@ap+1)& (0+255),b
  6357                           
  6358                           ;doprnt.c: 536: while(c = *f++) {
  6359  000286  D11A               	goto	l3454
  6360  000288                     l3370:
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;doprnt.c: 538: if(c != '%')
  6364  000288  0E25               	movlw	37
  6365  00028A  0100               	movlb	0	; () banked
  6366  00028C  199A               	xorwf	printf@c& (0+255),w,b
  6367  00028E  B4D8               	btfsc	status,2,c
  6368  000290  D005               	goto	l3374
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;doprnt.c: 540: {
  6372                           ;doprnt.c: 541: (putch(c) );
  6373  000292  0100               	movlb	0	; () banked
  6374  000294  519A               	movf	printf@c& (0+255),w,b
  6375  000296  ECC0  F011         	call	_putch
  6376                           
  6377                           ;doprnt.c: 542: continue;
  6378  00029A  D110               	goto	l3454
  6379  00029C                     l3374:
  6380                           
  6381                           ;doprnt.c: 543: }
  6382                           ;doprnt.c: 548: flag = 0;
  6383  00029C  0E00               	movlw	0
  6384  00029E  0100               	movlb	0	; () banked
  6385  0002A0  6F97               	movwf	printf@flag& (0+255),b
  6386                           
  6387                           ;doprnt.c: 635: switch(c = *f++) {
  6388  0002A2  D014               	goto	l3386
  6389  0002A4                     l3376:
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;doprnt.c: 721: flag |= 0x80;
  6393  0002A4  0100               	movlb	0	; () banked
  6394  0002A6  8F97               	bsf	printf@flag& (0+255),7,b
  6395                           
  6396                           ;doprnt.c: 723: break;
  6397  0002A8  D02D               	goto	l630
  6398  0002AA                     l3378:
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6402  0002AA  C095  FFD9         	movff	printf@ap,fsr2l
  6403  0002AE  C096  FFDA         	movff	printf@ap+1,fsr2h
  6404  0002B2  50DF               	movf	indf2,w,c
  6405  0002B4  0100               	movlb	0	; () banked
  6406  0002B6  6F9A               	movwf	printf@c& (0+255),b
  6407                           
  6408                           ; BSR set to: 0
  6409  0002B8  0E02               	movlw	2
  6410  0002BA  0100               	movlb	0	; () banked
  6411  0002BC  2795               	addwf	printf@ap& (0+255),f,b
  6412  0002BE  0E00               	movlw	0
  6413  0002C0  2396               	addwfc	(printf@ap+1)& (0+255),f,b
  6414  0002C2                     l3382:
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;doprnt.c: 809: (putch(c) );
  6418  0002C2  0100               	movlb	0	; () banked
  6419  0002C4  519A               	movf	printf@c& (0+255),w,b
  6420  0002C6  ECC0  F011         	call	_putch
  6421                           
  6422                           ;doprnt.c: 810: continue;
  6423  0002CA  D0F8               	goto	l3454
  6424  0002CC                     l3386:
  6425  0002CC  C08C  FFF6         	movff	printf@f,tblptrl
  6426  0002D0  C08D  FFF7         	movff	printf@f+1,tblptrh
  6427  0002D4  0100               	movlb	0	; () banked
  6428  0002D6  4B8C               	infsnz	printf@f& (0+255),f,b
  6429  0002D8  2B8D               	incf	(printf@f+1)& (0+255),f,b
  6430  0002DA                     	if	0	;tblptru may be non-zero
  6431  0002DA                     	endif
  6432  0002DA                     	if	0	;tblptru may be non-zero
  6433  0002DA                     	endif
  6434  0002DA  0008               	tblrd		*
  6435  0002DC  CFF5 F09A          	movff	tablat,printf@c
  6436  0002E0  0100               	movlb	0	; () banked
  6437  0002E2  519A               	movf	printf@c& (0+255),w,b
  6438                           
  6439                           ; Switch size 1, requested type "space"
  6440                           ; Number of cases is 5, Range of values is 0 to 120
  6441                           ; switch strategies available:
  6442                           ; Name         Instructions Cycles
  6443                           ; simple_byte           16     9 (average)
  6444                           ;	Chosen strategy is simple_byte
  6445  0002E4  0A00               	xorlw	0	; case 0
  6446  0002E6  B4D8               	btfsc	status,2,c
  6447  0002E8  0012               	return	
  6448  0002EA  0A63               	xorlw	99	; case 99
  6449  0002EC  B4D8               	btfsc	status,2,c
  6450  0002EE  D7DD               	goto	l3378
  6451  0002F0  0A07               	xorlw	7	; case 100
  6452  0002F2  B4D8               	btfsc	status,2,c
  6453  0002F4  D007               	goto	l630
  6454  0002F6  0A0D               	xorlw	13	; case 105
  6455  0002F8  B4D8               	btfsc	status,2,c
  6456  0002FA  D004               	goto	l630
  6457  0002FC  0A11               	xorlw	17	; case 120
  6458  0002FE  B4D8               	btfsc	status,2,c
  6459  000300  D7D1               	goto	l3376
  6460  000302  D7DF               	goto	l3382
  6461  000304                     l630:
  6462                           
  6463                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6464  000304  0100               	movlb	0	; () banked
  6465  000306  BF97               	btfsc	printf@flag& (0+255),7,b
  6466  000308  D019               	goto	l3398
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;doprnt.c: 1253: {
  6470                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6471  00030A  C095  FFD9         	movff	printf@ap,fsr2l
  6472  00030E  C096  FFDA         	movff	printf@ap+1,fsr2h
  6473  000312  CFDE F098          	movff	postinc2,printf@val
  6474  000316  CFDD F099          	movff	postdec2,printf@val+1
  6475                           
  6476                           ; BSR set to: 0
  6477  00031A  0E02               	movlw	2
  6478  00031C  0100               	movlb	0	; () banked
  6479  00031E  2795               	addwf	printf@ap& (0+255),f,b
  6480  000320  0E00               	movlw	0
  6481  000322  2396               	addwfc	(printf@ap+1)& (0+255),f,b
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;doprnt.c: 1261: if((int)val < 0) {
  6485  000324  0100               	movlb	0	; () banked
  6486  000326  AF99               	btfss	(printf@val+1)& (0+255),7,b
  6487  000328  D053               	goto	l3432
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;doprnt.c: 1262: flag |= 0x03;
  6491  00032A  0E03               	movlw	3
  6492  00032C  0100               	movlb	0	; () banked
  6493  00032E  1397               	iorwf	printf@flag& (0+255),f,b
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;doprnt.c: 1263: val = -val;
  6497  000330  0100               	movlb	0	; () banked
  6498  000332  6D98               	negf	printf@val& (0+255),b
  6499  000334  1F99               	comf	(printf@val+1)& (0+255),f,b
  6500  000336  B0D8               	btfsc	status,0,c
  6501  000338  2B99               	incf	(printf@val+1)& (0+255),f,b
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;doprnt.c: 1264: }
  6505                           ;doprnt.c: 1266: }
  6506  00033A  D04A               	goto	l3432
  6507  00033C                     l3398:
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;doprnt.c: 1268: else
  6511                           ;doprnt.c: 1273: {
  6512                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6513  00033C  C095  FFD9         	movff	printf@ap,fsr2l
  6514  000340  C096  FFDA         	movff	printf@ap+1,fsr2h
  6515  000344  CFDE F098          	movff	postinc2,printf@val
  6516  000348  CFDD F099          	movff	postdec2,printf@val+1
  6517                           
  6518                           ; BSR set to: 0
  6519  00034C  0E02               	movlw	2
  6520  00034E  0100               	movlb	0	; () banked
  6521  000350  2795               	addwf	printf@ap& (0+255),f,b
  6522  000352  0E00               	movlw	0
  6523  000354  2396               	addwfc	(printf@ap+1)& (0+255),f,b
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;doprnt.c: 1287: }
  6527                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6528  000356  D03C               	goto	l3432
  6529  000358                     l3402:
  6530                           
  6531                           ; BSR set to: 0
  6532                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6533  000358  0E01               	movlw	1
  6534  00035A  0100               	movlb	0	; () banked
  6535  00035C  6F9A               	movwf	printf@c& (0+255),b
  6536  00035E                     l3404:
  6537                           
  6538                           ; BSR set to: 0
  6539  00035E  0E05               	movlw	5
  6540  000360  0100               	movlb	0	; () banked
  6541  000362  199A               	xorwf	printf@c& (0+255),w,b
  6542  000364  B4D8               	btfsc	status,2,c
  6543  000366  D03D               	goto	l3434
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;doprnt.c: 1306: if(val < dpowers[c])
  6547                           
  6548                           ; BSR set to: 0
  6549                           
  6550                           ; BSR set to: 0
  6551  000368  0100               	movlb	0	; () banked
  6552  00036A  519A               	movf	printf@c& (0+255),w,b
  6553  00036C  0D02               	mullw	2
  6554  00036E  0E6A               	movlw	low _dpowers
  6555  000370  24F3               	addwf	prodl,w,c
  6556  000372  6EF6               	movwf	tblptrl,c
  6557  000374  0EFE               	movlw	high _dpowers
  6558  000376  20F4               	addwfc	prodh,w,c
  6559  000378  6EF7               	movwf	tblptrh,c
  6560  00037A                     	if	0	;There are less than 3 active tblptr bytes
  6561  00037A                     	endif
  6562  00037A  0009               	tblrd		*+
  6563  00037C  50F5               	movf	tablat,w,c
  6564  00037E  0100               	movlb	0	; () banked
  6565  000380  5D98               	subwf	printf@val& (0+255),w,b
  6566  000382  0009               	tblrd		*+
  6567  000384  50F5               	movf	tablat,w,c
  6568  000386  0100               	movlb	0	; () banked
  6569  000388  5999               	subwfb	(printf@val+1)& (0+255),w,b
  6570  00038A  A0D8               	btfss	status,0,c
  6571  00038C  D02A               	goto	l3434
  6572                           
  6573                           ; BSR set to: 0
  6574                           
  6575                           ; BSR set to: 0
  6576                           
  6577                           ; BSR set to: 0
  6578                           ;doprnt.c: 1307: break;
  6579  00038E  0100               	movlb	0	; () banked
  6580  000390  2B9A               	incf	printf@c& (0+255),f,b
  6581  000392  D7E5               	goto	l3404
  6582  000394                     l3416:
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6586  000394  0E01               	movlw	1
  6587  000396  0100               	movlb	0	; () banked
  6588  000398  6F9A               	movwf	printf@c& (0+255),b
  6589  00039A                     l3418:
  6590                           
  6591                           ; BSR set to: 0
  6592  00039A  0E04               	movlw	4
  6593  00039C  0100               	movlb	0	; () banked
  6594  00039E  199A               	xorwf	printf@c& (0+255),w,b
  6595  0003A0  B4D8               	btfsc	status,2,c
  6596  0003A2  D01F               	goto	l3434
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6600                           
  6601                           ; BSR set to: 0
  6602                           
  6603                           ; BSR set to: 0
  6604  0003A4  0100               	movlb	0	; () banked
  6605  0003A6  519A               	movf	printf@c& (0+255),w,b
  6606  0003A8  0D02               	mullw	2
  6607  0003AA  0E74               	movlw	low _hexpowers
  6608  0003AC  24F3               	addwf	prodl,w,c
  6609  0003AE  6EF6               	movwf	tblptrl,c
  6610  0003B0  0EFE               	movlw	high _hexpowers
  6611  0003B2  20F4               	addwfc	prodh,w,c
  6612  0003B4  6EF7               	movwf	tblptrh,c
  6613  0003B6                     	if	0	;There are less than 3 active tblptr bytes
  6614  0003B6                     	endif
  6615  0003B6  0009               	tblrd		*+
  6616  0003B8  50F5               	movf	tablat,w,c
  6617  0003BA  0100               	movlb	0	; () banked
  6618  0003BC  5D98               	subwf	printf@val& (0+255),w,b
  6619  0003BE  0009               	tblrd		*+
  6620  0003C0  50F5               	movf	tablat,w,c
  6621  0003C2  0100               	movlb	0	; () banked
  6622  0003C4  5999               	subwfb	(printf@val+1)& (0+255),w,b
  6623  0003C6  A0D8               	btfss	status,0,c
  6624  0003C8  D00C               	goto	l3434
  6625                           
  6626                           ; BSR set to: 0
  6627                           
  6628                           ; BSR set to: 0
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;doprnt.c: 1318: break;
  6632  0003CA  0100               	movlb	0	; () banked
  6633  0003CC  2B9A               	incf	printf@c& (0+255),f,b
  6634  0003CE  D7E5               	goto	l3418
  6635  0003D0                     l3432:
  6636                           
  6637                           ; BSR set to: 0
  6638  0003D0  0100               	movlb	0	; () banked
  6639  0003D2  5197               	movf	printf@flag& (0+255),w,b
  6640  0003D4  0B80               	andlw	128
  6641                           
  6642                           ; Switch size 1, requested type "space"
  6643                           ; Number of cases is 2, Range of values is 0 to 128
  6644                           ; switch strategies available:
  6645                           ; Name         Instructions Cycles
  6646                           ; simple_byte            7     4 (average)
  6647                           ;	Chosen strategy is simple_byte
  6648  0003D6  0A00               	xorlw	0	; case 0
  6649  0003D8  B4D8               	btfsc	status,2,c
  6650  0003DA  D7BE               	goto	l3402
  6651  0003DC  0A80               	xorlw	128	; case 128
  6652  0003DE  B4D8               	btfsc	status,2,c
  6653  0003E0  D7D9               	goto	l3416
  6654  0003E2                     l3434:
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;doprnt.c: 1422: {
  6658                           ;doprnt.c: 1438: if(flag & 0x03)
  6659  0003E2  C097  F092         	movff	printf@flag,??_printf
  6660  0003E6  0E03               	movlw	3
  6661  0003E8  0100               	movlb	0	; () banked
  6662  0003EA  1792               	andwf	??_printf& (0+255),f,b
  6663  0003EC  B4D8               	btfsc	status,2,c
  6664  0003EE  D003               	goto	l3438
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;doprnt.c: 1439: (putch('-') );
  6668  0003F0  0E2D               	movlw	45
  6669  0003F2  ECC0  F011         	call	_putch
  6670  0003F6                     l3438:
  6671                           
  6672                           ;doprnt.c: 1469: }
  6673                           ;doprnt.c: 1472: prec = c;
  6674  0003F6  C09A  F094         	movff	printf@c,printf@prec
  6675                           
  6676                           ;doprnt.c: 1474: while(prec--) {
  6677  0003FA  D05A               	goto	l3452
  6678  0003FC                     l3440:
  6679                           
  6680                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6681  0003FC  0100               	movlb	0	; () banked
  6682  0003FE  5194               	movf	printf@prec& (0+255),w,b
  6683  000400  0D02               	mullw	2
  6684  000402  0E6A               	movlw	low _dpowers
  6685  000404  24F3               	addwf	prodl,w,c
  6686  000406  6EF6               	movwf	tblptrl,c
  6687  000408  0EFE               	movlw	high _dpowers
  6688  00040A  20F4               	addwfc	prodh,w,c
  6689  00040C  6EF7               	movwf	tblptrh,c
  6690  00040E                     	if	0	;There are less than 3 active tblptr bytes
  6691  00040E                     	endif
  6692  00040E  0009               	tblrd		*+
  6693  000410  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6694  000414  000A               	tblrd		*-
  6695  000416  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6696  00041A  C098  F080         	movff	printf@val,___lwdiv@dividend
  6697  00041E  C099  F081         	movff	printf@val+1,___lwdiv@dividend+1
  6698  000422  EC0E  F00F         	call	___lwdiv	;wreg free
  6699  000426  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  6700  00042A  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  6701  00042E  0E00               	movlw	0
  6702  000430  0100               	movlb	0	; () banked
  6703  000432  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6704  000434  0E0A               	movlw	10
  6705  000436  6F89               	movwf	___lwmod@divisor& (0+255),b
  6706  000438  ECF6  F00F         	call	___lwmod	;wreg free
  6707  00043C  0100               	movlb	0	; () banked
  6708  00043E  5187               	movf	?___lwmod& (0+255),w,b
  6709  000440  0F30               	addlw	48
  6710  000442  0100               	movlb	0	; () banked
  6711  000444  6F9A               	movwf	printf@c& (0+255),b
  6712                           
  6713                           ;doprnt.c: 1491: break;
  6714  000446  D030               	goto	l3450
  6715  000448                     l3442:
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;doprnt.c: 1499: {
  6719                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6720  000448  C098  F080         	movff	printf@val,___lwdiv@dividend
  6721  00044C  C099  F081         	movff	printf@val+1,___lwdiv@dividend+1
  6722  000450  0100               	movlb	0	; () banked
  6723  000452  5194               	movf	printf@prec& (0+255),w,b
  6724  000454  0D02               	mullw	2
  6725  000456  0E74               	movlw	low _hexpowers
  6726  000458  24F3               	addwf	prodl,w,c
  6727  00045A  6EF6               	movwf	tblptrl,c
  6728  00045C  0EFE               	movlw	high _hexpowers
  6729  00045E  20F4               	addwfc	prodh,w,c
  6730  000460  6EF7               	movwf	tblptrh,c
  6731  000462                     	if	0	;There are less than 3 active tblptr bytes
  6732  000462                     	endif
  6733  000462  0009               	tblrd		*+
  6734  000464  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6735  000468  000A               	tblrd		*-
  6736  00046A  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6737  00046E  EC0E  F00F         	call	___lwdiv	;wreg free
  6738  000472  0100               	movlb	0	; () banked
  6739  000474  5180               	movf	?___lwdiv& (0+255),w,b
  6740  000476  0B0F               	andlw	15
  6741  000478  0100               	movlb	0	; () banked
  6742  00047A  6F93               	movwf	printf@idx& (0+255),b
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6746  00047C  0100               	movlb	0	; () banked
  6747  00047E  5193               	movf	printf@idx& (0+255),w,b
  6748  000480  0D01               	mullw	1
  6749  000482  0E2E               	movlw	low STR_24
  6750  000484  24F3               	addwf	prodl,w,c
  6751  000486  6EF6               	movwf	tblptrl,c
  6752  000488  0EFF               	movlw	high STR_24
  6753  00048A  20F4               	addwfc	prodh,w,c
  6754  00048C  6EF7               	movwf	tblptrh,c
  6755  00048E                     	if	0	;There are less than 3 active tblptr bytes
  6756  00048E                     	endif
  6757  00048E  0008               	tblrd		*
  6758  000490  CFF5 F09A          	movff	tablat,printf@c
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;doprnt.c: 1523: }
  6762                           
  6763                           ;doprnt.c: 1508: }
  6764                           ;doprnt.c: 1510: break;
  6765  000494  D009               	goto	l3450
  6766  000496                     l3448:
  6767  000496  0100               	movlb	0	; () banked
  6768  000498  5197               	movf	printf@flag& (0+255),w,b
  6769  00049A  0B80               	andlw	128
  6770                           
  6771                           ; Switch size 1, requested type "space"
  6772                           ; Number of cases is 2, Range of values is 0 to 128
  6773                           ; switch strategies available:
  6774                           ; Name         Instructions Cycles
  6775                           ; simple_byte            7     4 (average)
  6776                           ;	Chosen strategy is simple_byte
  6777  00049C  0A00               	xorlw	0	; case 0
  6778  00049E  B4D8               	btfsc	status,2,c
  6779  0004A0  D7AD               	goto	l3440
  6780  0004A2  0A80               	xorlw	128	; case 128
  6781  0004A4  B4D8               	btfsc	status,2,c
  6782  0004A6  D7D0               	goto	l3442
  6783  0004A8                     l3450:
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;doprnt.c: 1524: (putch(c) );
  6787  0004A8  0100               	movlb	0	; () banked
  6788  0004AA  519A               	movf	printf@c& (0+255),w,b
  6789  0004AC  ECC0  F011         	call	_putch
  6790  0004B0                     l3452:
  6791  0004B0  0100               	movlb	0	; () banked
  6792  0004B2  0794               	decf	printf@prec& (0+255),f,b
  6793  0004B4  0100               	movlb	0	; () banked
  6794  0004B6  2994               	incf	printf@prec& (0+255),w,b
  6795  0004B8  A4D8               	btfss	status,2,c
  6796  0004BA  D7ED               	goto	l3448
  6797  0004BC                     l3454:
  6798  0004BC  C08C  FFF6         	movff	printf@f,tblptrl
  6799  0004C0  C08D  FFF7         	movff	printf@f+1,tblptrh
  6800  0004C4  0100               	movlb	0	; () banked
  6801  0004C6  4B8C               	infsnz	printf@f& (0+255),f,b
  6802  0004C8  2B8D               	incf	(printf@f+1)& (0+255),f,b
  6803  0004CA                     	if	0	;tblptru may be non-zero
  6804  0004CA                     	endif
  6805  0004CA                     	if	0	;tblptru may be non-zero
  6806  0004CA                     	endif
  6807  0004CA  0008               	tblrd		*
  6808  0004CC  CFF5 F09A          	movff	tablat,printf@c
  6809  0004D0  0100               	movlb	0	; () banked
  6810  0004D2  519A               	movf	printf@c& (0+255),w,b
  6811  0004D4  B4D8               	btfsc	status,2,c
  6812  0004D6  0012               	return	
  6813  0004D8  D6D7               	goto	l3370
  6814  0004DA                     __end_of_printf:
  6815                           	opt stack 0
  6816                           tblptru	equ	0xFF8
  6817                           tblptrh	equ	0xFF7
  6818                           tblptrl	equ	0xFF6
  6819                           tablat	equ	0xFF5
  6820                           prodh	equ	0xFF4
  6821                           prodl	equ	0xFF3
  6822                           intcon	equ	0xFF2
  6823                           postinc0	equ	0xFEE
  6824                           wreg	equ	0xFE8
  6825                           postdec1	equ	0xFE5
  6826                           fsr1l	equ	0xFE1
  6827                           indf2	equ	0xFDF
  6828                           postinc2	equ	0xFDE
  6829                           postdec2	equ	0xFDD
  6830                           fsr2h	equ	0xFDA
  6831                           fsr2l	equ	0xFD9
  6832                           status	equ	0xFD8
  6833                           
  6834 ;; *************** function _putch *****************
  6835 ;; Defined at:
  6836 ;;		line 35 in file "lcd.c"
  6837 ;; Parameters:    Size  Location     Type
  6838 ;;  data            1    wreg     unsigned char 
  6839 ;; Auto vars:     Size  Location     Type
  6840 ;;  data            1    4[BANK0 ] unsigned char 
  6841 ;; Return value:  Size  Location     Type
  6842 ;;                  1    wreg      void 
  6843 ;; Registers used:
  6844 ;;		wreg, status,2, status,0, cstack
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;Total ram usage:        1 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    8
  6857 ;; This function calls:
  6858 ;;		_lcdNewline
  6859 ;;		_lcdNibble
  6860 ;; This function is called by:
  6861 ;;		_printf
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           	psect	text30
  6866  002380                     __ptext30:
  6867                           	opt stack 0
  6868  002380                     _putch:
  6869                           	opt stack 20
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;incstack = 0
  6873                           ;putch@data stored from wreg
  6874  002380  0100               	movlb	0	; () banked
  6875  002382  6F84               	movwf	putch@data& (0+255),b
  6876                           
  6877                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  6878  002384  0E0A               	movlw	10
  6879  002386  0100               	movlb	0	; () banked
  6880  002388  1984               	xorwf	putch@data& (0+255),w,b
  6881  00238A  A4D8               	btfss	status,2,c
  6882  00238C  D003               	goto	l211
  6883                           
  6884                           ; BSR set to: 0
  6885  00238E  EC54  F012         	call	_lcdNewline	;wreg free
  6886  002392  0012               	return	
  6887  002394                     l211:
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;lcd.c: 37: else
  6891                           ;lcd.c: 38: {
  6892                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  6893  002394  848C               	bsf	3980,2,c	;volatile
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  6897  002396  0E74               	movlw	116
  6898  002398                     u4117:
  6899  002398  2EE8               	decfsz	wreg,f,c
  6900  00239A  D7FE               	bra	u4117
  6901  00239C  D000               	nop2	
  6902                           
  6903                           ;lcd.c: 41: lcdNibble(data);
  6904  00239E  0100               	movlb	0	; () banked
  6905  0023A0  5184               	movf	putch@data& (0+255),w,b
  6906  0023A2  EC4A  F00F         	call	_lcdNibble
  6907  0023A6  0012               	return	
  6908  0023A8                     __end_of_putch:
  6909                           	opt stack 0
  6910                           tblptru	equ	0xFF8
  6911                           tblptrh	equ	0xFF7
  6912                           tblptrl	equ	0xFF6
  6913                           tablat	equ	0xFF5
  6914                           prodh	equ	0xFF4
  6915                           prodl	equ	0xFF3
  6916                           intcon	equ	0xFF2
  6917                           postinc0	equ	0xFEE
  6918                           wreg	equ	0xFE8
  6919                           postdec1	equ	0xFE5
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           fsr2h	equ	0xFDA
  6925                           fsr2l	equ	0xFD9
  6926                           status	equ	0xFD8
  6927                           
  6928 ;; *************** function _lcdNewline *****************
  6929 ;; Defined at:
  6930 ;;		line 78 in file "lcd.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;		None
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;		None
  6935 ;; Return value:  Size  Location     Type
  6936 ;;                  1    wreg      void 
  6937 ;; Registers used:
  6938 ;;		wreg, status,2, status,0, cstack
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;Total ram usage:        0 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    7
  6951 ;; This function calls:
  6952 ;;		_lcdInst
  6953 ;; This function is called by:
  6954 ;;		_putch
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text31
  6959  0024A8                     __ptext31:
  6960                           	opt stack 0
  6961  0024A8                     _lcdNewline:
  6962                           	opt stack 20
  6963                           
  6964                           ;lcd.c: 79: lcdInst(0b11000000);
  6965                           
  6966                           ;incstack = 0
  6967  0024A8  0EC0               	movlw	192
  6968  0024AA  ECAB  F011         	call	_lcdInst
  6969  0024AE  0012               	return		;funcret
  6970  0024B0                     __end_of_lcdNewline:
  6971                           	opt stack 0
  6972                           tblptru	equ	0xFF8
  6973                           tblptrh	equ	0xFF7
  6974                           tblptrl	equ	0xFF6
  6975                           tablat	equ	0xFF5
  6976                           prodh	equ	0xFF4
  6977                           prodl	equ	0xFF3
  6978                           intcon	equ	0xFF2
  6979                           postinc0	equ	0xFEE
  6980                           wreg	equ	0xFE8
  6981                           postdec1	equ	0xFE5
  6982                           fsr1l	equ	0xFE1
  6983                           indf2	equ	0xFDF
  6984                           postinc2	equ	0xFDE
  6985                           postdec2	equ	0xFDD
  6986                           fsr2h	equ	0xFDA
  6987                           fsr2l	equ	0xFD9
  6988                           status	equ	0xFD8
  6989                           
  6990 ;; *************** function ___lwmod *****************
  6991 ;; Defined at:
  6992 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6993 ;; Parameters:    Size  Location     Type
  6994 ;;  dividend        2    7[BANK0 ] unsigned int 
  6995 ;;  divisor         2    9[BANK0 ] unsigned int 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;  counter         1   11[BANK0 ] unsigned char 
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  2    7[BANK0 ] unsigned int 
  7000 ;; Registers used:
  7001 ;;		wreg, status,2, status,0
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7007 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;Total ram usage:        5 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    5
  7014 ;; This function calls:
  7015 ;;		Nothing
  7016 ;; This function is called by:
  7017 ;;		_printf
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text32
  7022  001FEC                     __ptext32:
  7023                           	opt stack 0
  7024  001FEC                     ___lwmod:
  7025                           	opt stack 23
  7026                           
  7027                           ;incstack = 0
  7028  001FEC  0100               	movlb	0	; () banked
  7029  001FEE  5189               	movf	___lwmod@divisor& (0+255),w,b
  7030  001FF0  0100               	movlb	0	; () banked
  7031  001FF2  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7032  001FF4  B4D8               	btfsc	status,2,c
  7033  001FF6  D026               	goto	l1069
  7034                           
  7035                           ; BSR set to: 0
  7036  001FF8  0E01               	movlw	1
  7037  001FFA  0100               	movlb	0	; () banked
  7038  001FFC  6F8B               	movwf	___lwmod@counter& (0+255),b
  7039  001FFE  D006               	goto	l3320
  7040  002000                     l3318:
  7041                           
  7042                           ; BSR set to: 0
  7043  002000  0100               	movlb	0	; () banked
  7044  002002  90D8               	bcf	status,0,c
  7045  002004  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7046  002006  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7047  002008  0100               	movlb	0	; () banked
  7048  00200A  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7049  00200C                     l3320:
  7050                           
  7051                           ; BSR set to: 0
  7052  00200C  0100               	movlb	0	; () banked
  7053  00200E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7054  002010  D7F7               	goto	l3318
  7055  002012                     l3322:
  7056                           
  7057                           ; BSR set to: 0
  7058  002012  0100               	movlb	0	; () banked
  7059  002014  5189               	movf	___lwmod@divisor& (0+255),w,b
  7060  002016  0100               	movlb	0	; () banked
  7061  002018  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  7062  00201A  0100               	movlb	0	; () banked
  7063  00201C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7064  00201E  0100               	movlb	0	; () banked
  7065  002020  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7066  002022  A0D8               	btfss	status,0,c
  7067  002024  D008               	goto	l3326
  7068                           
  7069                           ; BSR set to: 0
  7070  002026  0100               	movlb	0	; () banked
  7071  002028  5189               	movf	___lwmod@divisor& (0+255),w,b
  7072  00202A  0100               	movlb	0	; () banked
  7073  00202C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  7074  00202E  0100               	movlb	0	; () banked
  7075  002030  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7076  002032  0100               	movlb	0	; () banked
  7077  002034  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7078  002036                     l3326:
  7079                           
  7080                           ; BSR set to: 0
  7081  002036  0100               	movlb	0	; () banked
  7082  002038  90D8               	bcf	status,0,c
  7083  00203A  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7084  00203C  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  7085                           
  7086                           ; BSR set to: 0
  7087  00203E  0100               	movlb	0	; () banked
  7088  002040  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  7089  002042  D7E7               	goto	l3322
  7090  002044                     l1069:
  7091                           
  7092                           ; BSR set to: 0
  7093  002044  C087  F087         	movff	___lwmod@dividend,?___lwmod
  7094  002048  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  7095                           
  7096                           ; BSR set to: 0
  7097  00204C  0012               	return		;funcret
  7098  00204E                     __end_of___lwmod:
  7099                           	opt stack 0
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           intcon	equ	0xFF2
  7107                           postinc0	equ	0xFEE
  7108                           wreg	equ	0xFE8
  7109                           postdec1	equ	0xFE5
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function ___lwdiv *****************
  7119 ;; Defined at:
  7120 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  dividend        2    0[BANK0 ] unsigned int 
  7123 ;;  divisor         2    2[BANK0 ] unsigned int 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;  quotient        2    4[BANK0 ] unsigned int 
  7126 ;;  counter         1    6[BANK0 ] unsigned char 
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  2    0[BANK0 ] unsigned int 
  7129 ;; Registers used:
  7130 ;;		wreg, status,2, status,0
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7136 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;Total ram usage:        7 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    5
  7143 ;; This function calls:
  7144 ;;		Nothing
  7145 ;; This function is called by:
  7146 ;;		_printf
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text33
  7151  001E1C                     __ptext33:
  7152                           	opt stack 0
  7153  001E1C                     ___lwdiv:
  7154                           	opt stack 23
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;incstack = 0
  7158  001E1C  0E00               	movlw	0
  7159  001E1E  0100               	movlb	0	; () banked
  7160  001E20  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7161  001E22  0E00               	movlw	0
  7162  001E24  6F84               	movwf	___lwdiv@quotient& (0+255),b
  7163                           
  7164                           ; BSR set to: 0
  7165  001E26  0100               	movlb	0	; () banked
  7166  001E28  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7167  001E2A  0100               	movlb	0	; () banked
  7168  001E2C  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7169  001E2E  B4D8               	btfsc	status,2,c
  7170  001E30  D02C               	goto	l1059
  7171                           
  7172                           ; BSR set to: 0
  7173  001E32  0E01               	movlw	1
  7174  001E34  0100               	movlb	0	; () banked
  7175  001E36  6F86               	movwf	___lwdiv@counter& (0+255),b
  7176  001E38  D006               	goto	l3300
  7177  001E3A                     l3298:
  7178                           
  7179                           ; BSR set to: 0
  7180  001E3A  0100               	movlb	0	; () banked
  7181  001E3C  90D8               	bcf	status,0,c
  7182  001E3E  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  7183  001E40  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7184  001E42  0100               	movlb	0	; () banked
  7185  001E44  2B86               	incf	___lwdiv@counter& (0+255),f,b
  7186  001E46                     l3300:
  7187                           
  7188                           ; BSR set to: 0
  7189  001E46  0100               	movlb	0	; () banked
  7190  001E48  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7191  001E4A  D7F7               	goto	l3298
  7192  001E4C                     l3302:
  7193                           
  7194                           ; BSR set to: 0
  7195  001E4C  0100               	movlb	0	; () banked
  7196  001E4E  90D8               	bcf	status,0,c
  7197  001E50  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  7198  001E52  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7199                           
  7200                           ; BSR set to: 0
  7201  001E54  0100               	movlb	0	; () banked
  7202  001E56  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7203  001E58  0100               	movlb	0	; () banked
  7204  001E5A  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  7205  001E5C  0100               	movlb	0	; () banked
  7206  001E5E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7207  001E60  0100               	movlb	0	; () banked
  7208  001E62  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7209  001E64  A0D8               	btfss	status,0,c
  7210  001E66  D00A               	goto	l3310
  7211                           
  7212                           ; BSR set to: 0
  7213  001E68  0100               	movlb	0	; () banked
  7214  001E6A  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7215  001E6C  0100               	movlb	0	; () banked
  7216  001E6E  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  7217  001E70  0100               	movlb	0	; () banked
  7218  001E72  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7219  001E74  0100               	movlb	0	; () banked
  7220  001E76  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7221                           
  7222                           ; BSR set to: 0
  7223  001E78  0100               	movlb	0	; () banked
  7224  001E7A  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  7225  001E7C                     l3310:
  7226                           
  7227                           ; BSR set to: 0
  7228  001E7C  0100               	movlb	0	; () banked
  7229  001E7E  90D8               	bcf	status,0,c
  7230  001E80  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7231  001E82  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  7232                           
  7233                           ; BSR set to: 0
  7234  001E84  0100               	movlb	0	; () banked
  7235  001E86  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  7236  001E88  D7E1               	goto	l3302
  7237  001E8A                     l1059:
  7238                           
  7239                           ; BSR set to: 0
  7240  001E8A  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  7241  001E8E  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7242                           
  7243                           ; BSR set to: 0
  7244  001E92  0012               	return		;funcret
  7245  001E94                     __end_of___lwdiv:
  7246                           	opt stack 0
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           postinc0	equ	0xFEE
  7255                           wreg	equ	0xFE8
  7256                           postdec1	equ	0xFE5
  7257                           fsr1l	equ	0xFE1
  7258                           indf2	equ	0xFDF
  7259                           postinc2	equ	0xFDE
  7260                           postdec2	equ	0xFDD
  7261                           fsr2h	equ	0xFDA
  7262                           fsr2l	equ	0xFD9
  7263                           status	equ	0xFD8
  7264                           
  7265 ;; *************** function _lcdClear *****************
  7266 ;; Defined at:
  7267 ;;		line 74 in file "lcd.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;		None
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;		None
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  1    wreg      void 
  7274 ;; Registers used:
  7275 ;;		wreg, status,2, status,0, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;Total ram usage:        0 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    7
  7288 ;; This function calls:
  7289 ;;		_lcdInst
  7290 ;; This function is called by:
  7291 ;;		_main
  7292 ;;		_sortBattery
  7293 ;;		_pause
  7294 ;;		_dateTime
  7295 ;;		_mainMenu
  7296 ;;		_runSelect
  7297 ;;		_runMenu
  7298 ;;		_runTime
  7299 ;;		_runStats
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           	psect	text34
  7304  0024B0                     __ptext34:
  7305                           	opt stack 0
  7306  0024B0                     _lcdClear:
  7307                           	opt stack 21
  7308                           
  7309                           ;lcd.c: 75: lcdInst(0b00000001);
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;incstack = 0
  7313  0024B0  0E01               	movlw	1
  7314  0024B2  ECAB  F011         	call	_lcdInst
  7315  0024B6  0012               	return		;funcret
  7316  0024B8                     __end_of_lcdClear:
  7317                           	opt stack 0
  7318                           tblptru	equ	0xFF8
  7319                           tblptrh	equ	0xFF7
  7320                           tblptrl	equ	0xFF6
  7321                           tablat	equ	0xFF5
  7322                           prodh	equ	0xFF4
  7323                           prodl	equ	0xFF3
  7324                           intcon	equ	0xFF2
  7325                           postinc0	equ	0xFEE
  7326                           wreg	equ	0xFE8
  7327                           postdec1	equ	0xFE5
  7328                           fsr1l	equ	0xFE1
  7329                           indf2	equ	0xFDF
  7330                           postinc2	equ	0xFDE
  7331                           postdec2	equ	0xFDD
  7332                           fsr2h	equ	0xFDA
  7333                           fsr2l	equ	0xFD9
  7334                           status	equ	0xFD8
  7335                           
  7336 ;; *************** function _pinSetup *****************
  7337 ;; Defined at:
  7338 ;;		line 130 in file "main.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;		None
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;		None
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      void 
  7345 ;; Registers used:
  7346 ;;		wreg, status,2, status,0
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;Total ram usage:        0 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:    5
  7359 ;; This function calls:
  7360 ;;		Nothing
  7361 ;; This function is called by:
  7362 ;;		_main
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text35
  7367  00224E                     __ptext35:
  7368                           	opt stack 0
  7369  00224E                     _pinSetup:
  7370                           	opt stack 25
  7371                           
  7372                           ;main.c: 136: TRISA = 0xFF;
  7373                           
  7374                           ;incstack = 0
  7375  00224E  6892               	setf	3986,c	;volatile
  7376                           
  7377                           ;main.c: 137: TRISB = 0xFF;
  7378  002250  6893               	setf	3987,c	;volatile
  7379                           
  7380                           ;main.c: 138: TRISC = 0x00;
  7381  002252  0E00               	movlw	0
  7382  002254  6E94               	movwf	3988,c	;volatile
  7383                           
  7384                           ;main.c: 139: TRISD = 0x00;
  7385  002256  0E00               	movlw	0
  7386  002258  6E95               	movwf	3989,c	;volatile
  7387                           
  7388                           ;main.c: 140: TRISE = 0x00;
  7389  00225A  0E00               	movlw	0
  7390  00225C  6E96               	movwf	3990,c	;volatile
  7391                           
  7392                           ;main.c: 142: LATA = 0x00;
  7393  00225E  0E00               	movlw	0
  7394  002260  6E89               	movwf	3977,c	;volatile
  7395                           
  7396                           ;main.c: 143: LATB = 0x00;
  7397  002262  0E00               	movlw	0
  7398  002264  6E8A               	movwf	3978,c	;volatile
  7399                           
  7400                           ;main.c: 144: LATC = 0x00;
  7401  002266  0E00               	movlw	0
  7402  002268  6E8B               	movwf	3979,c	;volatile
  7403                           
  7404                           ;main.c: 145: LATD = 0x00;
  7405  00226A  0E00               	movlw	0
  7406  00226C  6E8C               	movwf	3980,c	;volatile
  7407                           
  7408                           ;main.c: 146: LATE = 0x00;
  7409  00226E  0E00               	movlw	0
  7410  002270  6E8D               	movwf	3981,c	;volatile
  7411                           
  7412                           ;main.c: 148: ADCON0 = 0x00;
  7413  002272  0E00               	movlw	0
  7414  002274  6EC2               	movwf	4034,c	;volatile
  7415                           
  7416                           ;main.c: 149: ADCON1 |= 0x0E;
  7417  002276  0E0E               	movlw	14
  7418  002278  12C1               	iorwf	4033,f,c	;volatile
  7419                           
  7420                           ;main.c: 153: ADCON2 = 0;
  7421  00227A  0E00               	movlw	0
  7422  00227C  6EC0               	movwf	4032,c	;volatile
  7423                           
  7424                           ;main.c: 154: ADCON2 |= 0b010;
  7425  00227E  82C0               	bsf	4032,1,c	;volatile
  7426                           
  7427                           ;main.c: 155: ADCON2 |= 0b110<<3;
  7428  002280  0E30               	movlw	48
  7429  002282  12C0               	iorwf	4032,f,c	;volatile
  7430                           
  7431                           ;main.c: 156: ADCON2 |= 1<<7;
  7432  002284  8EC0               	bsf	4032,7,c	;volatile
  7433                           
  7434                           ;main.c: 160: INT0IE = 1;
  7435  002286  88F2               	bsf	intcon,4,c	;volatile
  7436                           
  7437                           ;main.c: 161: (INTCONbits.GIE = 1);
  7438  002288  8EF2               	bsf	intcon,7,c	;volatile
  7439  00228A  0012               	return		;funcret
  7440  00228C                     __end_of_pinSetup:
  7441                           	opt stack 0
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1l	equ	0xFE1
  7453                           indf2	equ	0xFDF
  7454                           postinc2	equ	0xFDE
  7455                           postdec2	equ	0xFDD
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function _initLCD *****************
  7461 ;; Defined at:
  7462 ;;		line 15 in file "lcd.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;		None
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  1    wreg      void 
  7469 ;; Registers used:
  7470 ;;		wreg, status,2, status,0, cstack
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;Total ram usage:        1 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    7
  7483 ;; This function calls:
  7484 ;;		_lcdInst
  7485 ;; This function is called by:
  7486 ;;		_main
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text36
  7491  00217E                     __ptext36:
  7492                           	opt stack 0
  7493  00217E                     _initLCD:
  7494                           	opt stack 23
  7495                           
  7496                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  7497                           
  7498                           ;incstack = 0
  7499  00217E  0E31               	movlw	49
  7500  002180  0100               	movlb	0	; () banked
  7501  002182  6F84               	movwf	??_initLCD& (0+255),b
  7502  002184  0EB2               	movlw	178
  7503  002186                     u4127:
  7504  002186  2EE8               	decfsz	wreg,f,c
  7505  002188  D7FE               	bra	u4127
  7506  00218A  2F84               	decfsz	??_initLCD& (0+255),f,b
  7507  00218C  D7FC               	bra	u4127
  7508  00218E  F000               	nop	
  7509                           
  7510                           ;lcd.c: 18: lcdInst(0b00110011);
  7511  002190  0E33               	movlw	51
  7512  002192  ECAB  F011         	call	_lcdInst
  7513                           
  7514                           ;lcd.c: 19: lcdInst(0b00110010);
  7515  002196  0E32               	movlw	50
  7516  002198  ECAB  F011         	call	_lcdInst
  7517                           
  7518                           ;lcd.c: 20: lcdInst(0b00101000);
  7519  00219C  0E28               	movlw	40
  7520  00219E  ECAB  F011         	call	_lcdInst
  7521                           
  7522                           ;lcd.c: 21: lcdInst(0b00001111);
  7523  0021A2  0E0F               	movlw	15
  7524  0021A4  ECAB  F011         	call	_lcdInst
  7525                           
  7526                           ;lcd.c: 22: lcdInst(0b00000110);
  7527  0021A8  0E06               	movlw	6
  7528  0021AA  ECAB  F011         	call	_lcdInst
  7529                           
  7530                           ;lcd.c: 23: lcdInst(0b00000001);
  7531  0021AE  0E01               	movlw	1
  7532  0021B0  ECAB  F011         	call	_lcdInst
  7533                           
  7534                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  7535  0021B4  0E31               	movlw	49
  7536  0021B6  0100               	movlb	0	; () banked
  7537  0021B8  6F84               	movwf	??_initLCD& (0+255),b
  7538  0021BA  0EB2               	movlw	178
  7539  0021BC                     u4137:
  7540  0021BC  2EE8               	decfsz	wreg,f,c
  7541  0021BE  D7FE               	bra	u4137
  7542  0021C0  2F84               	decfsz	??_initLCD& (0+255),f,b
  7543  0021C2  D7FC               	bra	u4137
  7544  0021C4  F000               	nop	
  7545  0021C6  0012               	return		;funcret
  7546  0021C8                     __end_of_initLCD:
  7547                           	opt stack 0
  7548                           tblptru	equ	0xFF8
  7549                           tblptrh	equ	0xFF7
  7550                           tblptrl	equ	0xFF6
  7551                           tablat	equ	0xFF5
  7552                           prodh	equ	0xFF4
  7553                           prodl	equ	0xFF3
  7554                           intcon	equ	0xFF2
  7555                           postinc0	equ	0xFEE
  7556                           wreg	equ	0xFE8
  7557                           postdec1	equ	0xFE5
  7558                           fsr1l	equ	0xFE1
  7559                           indf2	equ	0xFDF
  7560                           postinc2	equ	0xFDE
  7561                           postdec2	equ	0xFDD
  7562                           fsr2h	equ	0xFDA
  7563                           fsr2l	equ	0xFD9
  7564                           status	equ	0xFD8
  7565                           
  7566 ;; *************** function _lcdInst *****************
  7567 ;; Defined at:
  7568 ;;		line 27 in file "lcd.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  data            1    wreg     unsigned char 
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  data            1    3[BANK0 ] unsigned char 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  1    wreg      void 
  7575 ;; Registers used:
  7576 ;;		wreg, status,2, status,0, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7586 ;;Total ram usage:        2 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    6
  7589 ;; This function calls:
  7590 ;;		_lcdNibble
  7591 ;; This function is called by:
  7592 ;;		_initLCD
  7593 ;;		_lcdClear
  7594 ;;		_lcdNewline
  7595 ;;		_lcdHome
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           	psect	text37
  7600  002356                     __ptext37:
  7601                           	opt stack 0
  7602  002356                     _lcdInst:
  7603                           	opt stack 20
  7604                           
  7605                           ;incstack = 0
  7606                           ;lcdInst@data stored from wreg
  7607  002356  0100               	movlb	0	; () banked
  7608  002358  6F83               	movwf	lcdInst@data& (0+255),b
  7609                           
  7610                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  7611  00235A  948C               	bcf	3980,2,c	;volatile
  7612                           
  7613                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7614  00235C  0E74               	movlw	116
  7615  00235E                     u4147:
  7616  00235E  2EE8               	decfsz	wreg,f,c
  7617  002360  D7FE               	bra	u4147
  7618  002362  D000               	nop2	
  7619                           
  7620                           ;lcd.c: 30: lcdNibble(data);
  7621  002364  0100               	movlb	0	; () banked
  7622  002366  5183               	movf	lcdInst@data& (0+255),w,b
  7623  002368  EC4A  F00F         	call	_lcdNibble
  7624                           
  7625                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  7626  00236C  0E04               	movlw	4
  7627  00236E  0100               	movlb	0	; () banked
  7628  002370  6F82               	movwf	??_lcdInst& (0+255),b
  7629  002372  0E3D               	movlw	61
  7630  002374                     u4157:
  7631  002374  2EE8               	decfsz	wreg,f,c
  7632  002376  D7FE               	bra	u4157
  7633  002378  2F82               	decfsz	??_lcdInst& (0+255),f,b
  7634  00237A  D7FC               	bra	u4157
  7635  00237C  D000               	nop2	
  7636  00237E  0012               	return		;funcret
  7637  002380                     __end_of_lcdInst:
  7638                           	opt stack 0
  7639                           tblptru	equ	0xFF8
  7640                           tblptrh	equ	0xFF7
  7641                           tblptrl	equ	0xFF6
  7642                           tablat	equ	0xFF5
  7643                           prodh	equ	0xFF4
  7644                           prodl	equ	0xFF3
  7645                           intcon	equ	0xFF2
  7646                           postinc0	equ	0xFEE
  7647                           wreg	equ	0xFE8
  7648                           postdec1	equ	0xFE5
  7649                           fsr1l	equ	0xFE1
  7650                           indf2	equ	0xFDF
  7651                           postinc2	equ	0xFDE
  7652                           postdec2	equ	0xFDD
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function _lcdNibble *****************
  7658 ;; Defined at:
  7659 ;;		line 46 in file "lcd.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  data            1    wreg     unsigned char 
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;  data            1    1[BANK0 ] unsigned char 
  7664 ;;  temp            1    0[BANK0 ] unsigned char 
  7665 ;; Return value:  Size  Location     Type
  7666 ;;                  1    wreg      void 
  7667 ;; Registers used:
  7668 ;;		wreg, status,2, status,0
  7669 ;; Tracked objects:
  7670 ;;		On entry : 0/0
  7671 ;;		On exit  : 0/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7675 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7678 ;;Total ram usage:        2 bytes
  7679 ;; Hardware stack levels used:    1
  7680 ;; Hardware stack levels required when called:    5
  7681 ;; This function calls:
  7682 ;;		Nothing
  7683 ;; This function is called by:
  7684 ;;		_lcdInst
  7685 ;;		_putch
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           	psect	text38
  7690  001E94                     __ptext38:
  7691                           	opt stack 0
  7692  001E94                     _lcdNibble:
  7693                           	opt stack 22
  7694                           
  7695                           ;incstack = 0
  7696                           ;lcdNibble@data stored from wreg
  7697  001E94  0100               	movlb	0	; () banked
  7698  001E96  6F81               	movwf	lcdNibble@data& (0+255),b
  7699                           
  7700                           ;lcd.c: 48: char temp = data & 0xF0;
  7701  001E98  0100               	movlb	0	; () banked
  7702  001E9A  5181               	movf	lcdNibble@data& (0+255),w,b
  7703  001E9C  0BF0               	andlw	240
  7704  001E9E  0100               	movlb	0	; () banked
  7705  001EA0  6F80               	movwf	lcdNibble@temp& (0+255),b
  7706                           
  7707                           ;lcd.c: 49: LATD = LATD & 0x0F;
  7708  001EA2  508C               	movf	3980,w,c	;volatile
  7709  001EA4  0B0F               	andlw	15
  7710  001EA6  6E8C               	movwf	3980,c	;volatile
  7711                           
  7712                           ;lcd.c: 50: LATD = temp | LATD;
  7713  001EA8  0100               	movlb	0	; () banked
  7714  001EAA  5180               	movf	lcdNibble@temp& (0+255),w,b
  7715  001EAC  108C               	iorwf	3980,w,c	;volatile
  7716  001EAE  6E8C               	movwf	3980,c	;volatile
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  7720  001EB0  968C               	bcf	3980,3,c	;volatile
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7724  001EB2  0ED6               	movlw	214
  7725  001EB4                     u4167:
  7726  001EB4  D000               	nop2	
  7727  001EB6  D000               	nop2	
  7728  001EB8  2EE8               	decfsz	wreg,f,c
  7729  001EBA  D7FC               	bra	u4167
  7730  001EBC  D000               	nop2	
  7731                           
  7732                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  7733  001EBE  868C               	bsf	3980,3,c	;volatile
  7734                           
  7735                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7736  001EC0  0ED6               	movlw	214
  7737  001EC2                     u4177:
  7738  001EC2  D000               	nop2	
  7739  001EC4  D000               	nop2	
  7740  001EC6  2EE8               	decfsz	wreg,f,c
  7741  001EC8  D7FC               	bra	u4177
  7742  001ECA  D000               	nop2	
  7743                           
  7744                           ;lcd.c: 58: data = data << 4;
  7745  001ECC  0100               	movlb	0	; () banked
  7746  001ECE  3981               	swapf	lcdNibble@data& (0+255),w,b
  7747  001ED0  0BF0               	andlw	240
  7748  001ED2  0100               	movlb	0	; () banked
  7749  001ED4  6F81               	movwf	lcdNibble@data& (0+255),b
  7750                           
  7751                           ;lcd.c: 60: temp = data & 0xF0;
  7752  001ED6  0100               	movlb	0	; () banked
  7753  001ED8  5181               	movf	lcdNibble@data& (0+255),w,b
  7754  001EDA  0BF0               	andlw	240
  7755  001EDC  0100               	movlb	0	; () banked
  7756  001EDE  6F80               	movwf	lcdNibble@temp& (0+255),b
  7757                           
  7758                           ;lcd.c: 61: LATD = LATD & 0x0F;
  7759  001EE0  508C               	movf	3980,w,c	;volatile
  7760  001EE2  0B0F               	andlw	15
  7761  001EE4  6E8C               	movwf	3980,c	;volatile
  7762                           
  7763                           ;lcd.c: 62: LATD = temp | LATD;
  7764  001EE6  0100               	movlb	0	; () banked
  7765  001EE8  5180               	movf	lcdNibble@temp& (0+255),w,b
  7766  001EEA  108C               	iorwf	3980,w,c	;volatile
  7767  001EEC  6E8C               	movwf	3980,c	;volatile
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  7771  001EEE  968C               	bcf	3980,3,c	;volatile
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7775  001EF0  0ED6               	movlw	214
  7776  001EF2                     u4187:
  7777  001EF2  D000               	nop2	
  7778  001EF4  D000               	nop2	
  7779  001EF6  2EE8               	decfsz	wreg,f,c
  7780  001EF8  D7FC               	bra	u4187
  7781  001EFA  D000               	nop2	
  7782                           
  7783                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  7784  001EFC  868C               	bsf	3980,3,c	;volatile
  7785                           
  7786                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7787  001EFE  0ED6               	movlw	214
  7788  001F00                     u4197:
  7789  001F00  D000               	nop2	
  7790  001F02  D000               	nop2	
  7791  001F04  2EE8               	decfsz	wreg,f,c
  7792  001F06  D7FC               	bra	u4197
  7793  001F08  D000               	nop2	
  7794  001F0A  0012               	return		;funcret
  7795  001F0C                     __end_of_lcdNibble:
  7796                           	opt stack 0
  7797                           tblptru	equ	0xFF8
  7798                           tblptrh	equ	0xFF7
  7799                           tblptrl	equ	0xFF6
  7800                           tablat	equ	0xFF5
  7801                           prodh	equ	0xFF4
  7802                           prodl	equ	0xFF3
  7803                           intcon	equ	0xFF2
  7804                           postinc0	equ	0xFEE
  7805                           wreg	equ	0xFE8
  7806                           postdec1	equ	0xFE5
  7807                           fsr1l	equ	0xFE1
  7808                           indf2	equ	0xFDF
  7809                           postinc2	equ	0xFDE
  7810                           postdec2	equ	0xFDD
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8
  7814                           
  7815 ;; *************** function _service *****************
  7816 ;; Defined at:
  7817 ;;		line 225 in file "main.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;		None
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  key             1  116[COMRAM] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      void 
  7824 ;; Registers used:
  7825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7833 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7834 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7835 ;;Total ram usage:       15 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    4
  7838 ;; This function calls:
  7839 ;;		_servoInterruptService
  7840 ;;		i2_setAngle
  7841 ;; This function is called by:
  7842 ;;		Interrupt level 2
  7843 ;; This function uses a non-reentrant model
  7844 ;;
  7845                           
  7846                           	psect	intcode
  7847  000008                     __pintcode:
  7848                           	opt stack 0
  7849  000008                     _service:
  7850                           	opt stack 19
  7851                           
  7852                           ;incstack = 0
  7853  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7854  00000A  ED1A  F008         	call	int_func,f	;refresh shadow registers
  7855                           tblptru	equ	0xFF8
  7856                           tblptrh	equ	0xFF7
  7857                           tblptrl	equ	0xFF6
  7858                           tablat	equ	0xFF5
  7859                           prodh	equ	0xFF4
  7860                           prodl	equ	0xFF3
  7861                           intcon	equ	0xFF2
  7862                           postinc0	equ	0xFEE
  7863                           wreg	equ	0xFE8
  7864                           postdec1	equ	0xFE5
  7865                           fsr1l	equ	0xFE1
  7866                           indf2	equ	0xFDF
  7867                           postinc2	equ	0xFDE
  7868                           postdec2	equ	0xFDD
  7869                           fsr2h	equ	0xFDA
  7870                           fsr2l	equ	0xFD9
  7871                           status	equ	0xFD8
  7872                           
  7873                           	psect	intcode_body
  7874  001034                     __pintcode_body:
  7875                           	opt stack 19
  7876  001034                     int_func:
  7877                           	opt stack 19
  7878  001034  0006               	pop		; remove dummy address from shadow register refresh
  7879  001036  CFFA F067          	movff	pclath,??_service
  7880  00103A  CFFB F068          	movff	pclatu,??_service+1
  7881  00103E  CFE9 F069          	movff	fsr0l,??_service+2
  7882  001042  CFEA F06A          	movff	fsr0h,??_service+3
  7883  001046  CFE1 F06B          	movff	fsr1l,??_service+4
  7884  00104A  CFE2 F06C          	movff	fsr1h,??_service+5
  7885  00104E  CFD9 F06D          	movff	fsr2l,??_service+6
  7886  001052  CFDA F06E          	movff	fsr2h,??_service+7
  7887  001056  CFF3 F06F          	movff	prodl,??_service+8
  7888  00105A  CFF4 F070          	movff	prodh,??_service+9
  7889  00105E  CFF6 F071          	movff	tblptrl,??_service+10
  7890  001062  CFF7 F072          	movff	tblptrh,??_service+11
  7891  001066  CFF8 F073          	movff	tblptru,??_service+12
  7892  00106A  CFF5 F074          	movff	tablat,??_service+13
  7893                           
  7894                           ;main.c: 227: servoInterruptService();
  7895  00106E  EC6D  F002         	call	_servoInterruptService	;wreg free
  7896                           
  7897                           ;main.c: 230: if(INT0IF){ INT0IF = 0;
  7898  001072  A2F2               	btfss	intcon,1,c	;volatile
  7899  001074  D006               	goto	i2l4212
  7900  001076  92F2               	bcf	intcon,1,c	;volatile
  7901                           
  7902                           ;main.c: 231: switchFlag = 1;
  7903  001078  0E00               	movlw	0
  7904  00107A  0100               	movlb	0	; () banked
  7905  00107C  6FFF               	movwf	(_switchFlag+1)& (0+255),b
  7906  00107E  0E01               	movlw	1
  7907  001080  6FFE               	movwf	_switchFlag& (0+255),b
  7908  001082                     i2l4212:
  7909                           
  7910                           ;main.c: 232: }
  7911                           ;main.c: 235: if(INT1IF){INT1IF = 0;
  7912  001082  A0F0               	btfss	intcon3,0,c	;volatile
  7913  001084  D057               	goto	i2l187
  7914  001086  90F0               	bcf	intcon3,0,c	;volatile
  7915                           
  7916                           ;main.c: 236: char key = (PORTB & 0xF0) >> 4;
  7917  001088  3881               	swapf	3969,w,c	;volatile
  7918  00108A  0B0F               	andlw	15
  7919  00108C  0B0F               	andlw	15
  7920  00108E  6E75               	movwf	service@key,c
  7921                           
  7922                           ;main.c: 237: if(key == 0)setAngle(0,30);
  7923  001090  5075               	movf	service@key,w,c
  7924  001092  A4D8               	btfss	status,2,c
  7925  001094  D00A               	goto	i2l4222
  7926  001096  0E00               	movlw	0
  7927  001098  6E5E               	movwf	i2setAngle@timer+1,c
  7928  00109A  0E00               	movlw	0
  7929  00109C  6E5D               	movwf	i2setAngle@timer,c
  7930  00109E  0E00               	movlw	0
  7931  0010A0  6E60               	movwf	i2setAngle@angle+1,c
  7932  0010A2  0E1E               	movlw	30
  7933  0010A4  6E5F               	movwf	i2setAngle@angle,c
  7934  0010A6  ECC2  F00F         	call	i2_setAngle	;wreg free
  7935  0010AA                     i2l4222:
  7936                           
  7937                           ;main.c: 238: if(key == 1)setAngle(0,90);
  7938  0010AA  0475               	decf	service@key,w,c
  7939  0010AC  A4D8               	btfss	status,2,c
  7940  0010AE  D00A               	goto	i2l4226
  7941  0010B0  0E00               	movlw	0
  7942  0010B2  6E5E               	movwf	i2setAngle@timer+1,c
  7943  0010B4  0E00               	movlw	0
  7944  0010B6  6E5D               	movwf	i2setAngle@timer,c
  7945  0010B8  0E00               	movlw	0
  7946  0010BA  6E60               	movwf	i2setAngle@angle+1,c
  7947  0010BC  0E5A               	movlw	90
  7948  0010BE  6E5F               	movwf	i2setAngle@angle,c
  7949  0010C0  ECC2  F00F         	call	i2_setAngle	;wreg free
  7950  0010C4                     i2l4226:
  7951                           
  7952                           ;main.c: 239: if(key == 2)setAngle(0,135);
  7953  0010C4  0E02               	movlw	2
  7954  0010C6  1875               	xorwf	service@key,w,c
  7955  0010C8  A4D8               	btfss	status,2,c
  7956  0010CA  D00A               	goto	i2l4230
  7957  0010CC  0E00               	movlw	0
  7958  0010CE  6E5E               	movwf	i2setAngle@timer+1,c
  7959  0010D0  0E00               	movlw	0
  7960  0010D2  6E5D               	movwf	i2setAngle@timer,c
  7961  0010D4  0E00               	movlw	0
  7962  0010D6  6E60               	movwf	i2setAngle@angle+1,c
  7963  0010D8  0E87               	movlw	135
  7964  0010DA  6E5F               	movwf	i2setAngle@angle,c
  7965  0010DC  ECC2  F00F         	call	i2_setAngle	;wreg free
  7966  0010E0                     i2l4230:
  7967                           
  7968                           ;main.c: 241: if(key == 4)setAngle(3,80);
  7969  0010E0  0E04               	movlw	4
  7970  0010E2  1875               	xorwf	service@key,w,c
  7971  0010E4  A4D8               	btfss	status,2,c
  7972  0010E6  D00A               	goto	i2l4234
  7973  0010E8  0E00               	movlw	0
  7974  0010EA  6E5E               	movwf	i2setAngle@timer+1,c
  7975  0010EC  0E03               	movlw	3
  7976  0010EE  6E5D               	movwf	i2setAngle@timer,c
  7977  0010F0  0E00               	movlw	0
  7978  0010F2  6E60               	movwf	i2setAngle@angle+1,c
  7979  0010F4  0E50               	movlw	80
  7980  0010F6  6E5F               	movwf	i2setAngle@angle,c
  7981  0010F8  ECC2  F00F         	call	i2_setAngle	;wreg free
  7982  0010FC                     i2l4234:
  7983                           
  7984                           ;main.c: 242: if(key == 5)setAngle(3,90);
  7985  0010FC  0E05               	movlw	5
  7986  0010FE  1875               	xorwf	service@key,w,c
  7987  001100  A4D8               	btfss	status,2,c
  7988  001102  D00A               	goto	i2l4238
  7989  001104  0E00               	movlw	0
  7990  001106  6E5E               	movwf	i2setAngle@timer+1,c
  7991  001108  0E03               	movlw	3
  7992  00110A  6E5D               	movwf	i2setAngle@timer,c
  7993  00110C  0E00               	movlw	0
  7994  00110E  6E60               	movwf	i2setAngle@angle+1,c
  7995  001110  0E5A               	movlw	90
  7996  001112  6E5F               	movwf	i2setAngle@angle,c
  7997  001114  ECC2  F00F         	call	i2_setAngle	;wreg free
  7998  001118                     i2l4238:
  7999                           
  8000                           ;main.c: 243: if(key == 6)setAngle(3,100);
  8001  001118  0E06               	movlw	6
  8002  00111A  1875               	xorwf	service@key,w,c
  8003  00111C  A4D8               	btfss	status,2,c
  8004  00111E  D00A               	goto	i2l187
  8005  001120  0E00               	movlw	0
  8006  001122  6E5E               	movwf	i2setAngle@timer+1,c
  8007  001124  0E03               	movlw	3
  8008  001126  6E5D               	movwf	i2setAngle@timer,c
  8009  001128  0E00               	movlw	0
  8010  00112A  6E60               	movwf	i2setAngle@angle+1,c
  8011  00112C  0E64               	movlw	100
  8012  00112E  6E5F               	movwf	i2setAngle@angle,c
  8013  001130  ECC2  F00F         	call	i2_setAngle	;wreg free
  8014  001134                     i2l187:
  8015  001134  C074  FFF5         	movff	??_service+13,tablat
  8016  001138  C073  FFF8         	movff	??_service+12,tblptru
  8017  00113C  C072  FFF7         	movff	??_service+11,tblptrh
  8018  001140  C071  FFF6         	movff	??_service+10,tblptrl
  8019  001144  C070  FFF4         	movff	??_service+9,prodh
  8020  001148  C06F  FFF3         	movff	??_service+8,prodl
  8021  00114C  C06E  FFDA         	movff	??_service+7,fsr2h
  8022  001150  C06D  FFD9         	movff	??_service+6,fsr2l
  8023  001154  C06C  FFE2         	movff	??_service+5,fsr1h
  8024  001158  C06B  FFE1         	movff	??_service+4,fsr1l
  8025  00115C  C06A  FFEA         	movff	??_service+3,fsr0h
  8026  001160  C069  FFE9         	movff	??_service+2,fsr0l
  8027  001164  C068  FFFB         	movff	??_service+1,pclatu
  8028  001168  C067  FFFA         	movff	??_service,pclath
  8029  00116C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8030  00116E  0011               	retfie		f
  8031  001170                     __end_of_service:
  8032                           	opt stack 0
  8033                           pclatu	equ	0xFFB
  8034                           pclath	equ	0xFFA
  8035                           tblptru	equ	0xFF8
  8036                           tblptrh	equ	0xFF7
  8037                           tblptrl	equ	0xFF6
  8038                           tablat	equ	0xFF5
  8039                           prodh	equ	0xFF4
  8040                           prodl	equ	0xFF3
  8041                           intcon	equ	0xFF2
  8042                           intcon3	equ	0xFF0
  8043                           postinc0	equ	0xFEE
  8044                           fsr0h	equ	0xFEA
  8045                           fsr0l	equ	0xFE9
  8046                           wreg	equ	0xFE8
  8047                           postdec1	equ	0xFE5
  8048                           fsr1h	equ	0xFE2
  8049                           fsr1l	equ	0xFE1
  8050                           indf2	equ	0xFDF
  8051                           postinc2	equ	0xFDE
  8052                           postdec2	equ	0xFDD
  8053                           fsr2h	equ	0xFDA
  8054                           fsr2l	equ	0xFD9
  8055                           status	equ	0xFD8
  8056                           
  8057 ;; *************** function i2_setAngle *****************
  8058 ;; Defined at:
  8059 ;;		line 43 in file "servo.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;  timer           2   92[COMRAM] int 
  8062 ;;  angle           2   94[COMRAM] int 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8074 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;Total ram usage:       10 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    3
  8081 ;; This function calls:
  8082 ;;		i2_angleToPulse
  8083 ;; This function is called by:
  8084 ;;		_service
  8085 ;; This function uses a non-reentrant model
  8086 ;;
  8087                           
  8088                           	psect	text40
  8089  001F84                     __ptext40:
  8090                           	opt stack 0
  8091  001F84                     i2_setAngle:
  8092                           	opt stack 19
  8093                           
  8094                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
  8095                           
  8096                           ;incstack = 0
  8097  001F84  C05F  F046         	movff	i2setAngle@angle,i2angleToPulse@angle
  8098  001F88  C060  F047         	movff	i2setAngle@angle+1,i2angleToPulse@angle+1
  8099  001F8C  EC7A  F007         	call	i2_angleToPulse	;wreg free
  8100  001F90  1E46               	comf	?i2_angleToPulse,f,c
  8101  001F92  1E47               	comf	?i2_angleToPulse+1,f,c
  8102  001F94  1E48               	comf	?i2_angleToPulse+2,f,c
  8103  001F96  1E49               	comf	?i2_angleToPulse+3,f,c
  8104  001F98  2A46               	incf	?i2_angleToPulse,f,c
  8105  001F9A  0E00               	movlw	0
  8106  001F9C  2247               	addwfc	?i2_angleToPulse+1,f,c
  8107  001F9E  2248               	addwfc	?i2_angleToPulse+2,f,c
  8108  001FA0  2249               	addwfc	?i2_angleToPulse+3,f,c
  8109  001FA2  0EFF               	movlw	255
  8110  001FA4  2446               	addwf	?i2_angleToPulse,w,c
  8111  001FA6  6E61               	movwf	??i2_setAngle& (0+255),c
  8112  001FA8  0EFF               	movlw	255
  8113  001FAA  2047               	addwfc	?i2_angleToPulse+1,w,c
  8114  001FAC  6E62               	movwf	(??i2_setAngle+1)& (0+255),c
  8115  001FAE  0E00               	movlw	0
  8116  001FB0  2048               	addwfc	?i2_angleToPulse+2,w,c
  8117  001FB2  6E63               	movwf	(??i2_setAngle+2)& (0+255),c
  8118  001FB4  0E00               	movlw	0
  8119  001FB6  2049               	addwfc	?i2_angleToPulse+3,w,c
  8120  001FB8  6E64               	movwf	(??i2_setAngle+3)& (0+255),c
  8121  001FBA  0E00               	movlw	low _pulse
  8122  001FBC  6E65               	movwf	(??i2_setAngle+4)& (0+255),c
  8123  001FBE  0E01               	movlw	high _pulse
  8124  001FC0  6E66               	movwf	(??i2_setAngle+5)& (0+255),c
  8125  001FC2  90D8               	bcf	status,0,c
  8126  001FC4  345D               	rlcf	i2setAngle@timer,w,c
  8127  001FC6  6ED9               	movwf	fsr2l,c
  8128  001FC8  345E               	rlcf	i2setAngle@timer+1,w,c
  8129  001FCA  6EDA               	movwf	fsr2h,c
  8130  001FCC  90D8               	bcf	status,0,c
  8131  001FCE  36D9               	rlcf	fsr2l,f,c
  8132  001FD0  36DA               	rlcf	fsr2h,f,c
  8133  001FD2  5065               	movf	??i2_setAngle+4,w,c
  8134  001FD4  26D9               	addwf	fsr2l,f,c
  8135  001FD6  5066               	movf	??i2_setAngle+5,w,c
  8136  001FD8  22DA               	addwfc	fsr2h,f,c
  8137  001FDA  C061  FFDE         	movff	??i2_setAngle,postinc2
  8138  001FDE  C062  FFDE         	movff	??i2_setAngle+1,postinc2
  8139  001FE2  C063  FFDE         	movff	??i2_setAngle+2,postinc2
  8140  001FE6  C064  FFDE         	movff	??i2_setAngle+3,postinc2
  8141  001FEA  0012               	return		;funcret
  8142  001FEC                     __end_ofi2_setAngle:
  8143                           	opt stack 0
  8144                           pclatu	equ	0xFFB
  8145                           pclath	equ	0xFFA
  8146                           tblptru	equ	0xFF8
  8147                           tblptrh	equ	0xFF7
  8148                           tblptrl	equ	0xFF6
  8149                           tablat	equ	0xFF5
  8150                           prodh	equ	0xFF4
  8151                           prodl	equ	0xFF3
  8152                           intcon	equ	0xFF2
  8153                           intcon3	equ	0xFF0
  8154                           postinc0	equ	0xFEE
  8155                           fsr0h	equ	0xFEA
  8156                           fsr0l	equ	0xFE9
  8157                           wreg	equ	0xFE8
  8158                           postdec1	equ	0xFE5
  8159                           fsr1h	equ	0xFE2
  8160                           fsr1l	equ	0xFE1
  8161                           indf2	equ	0xFDF
  8162                           postinc2	equ	0xFDE
  8163                           postdec2	equ	0xFDD
  8164                           fsr2h	equ	0xFDA
  8165                           fsr2l	equ	0xFD9
  8166                           status	equ	0xFD8
  8167                           
  8168 ;; *************** function i2_angleToPulse *****************
  8169 ;; Defined at:
  8170 ;;		line 35 in file "servo.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;  angle           2   69[COMRAM] int 
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;  angleToPulse    4   88[COMRAM] long 
  8175 ;;  angleToPulse    4   81[COMRAM] long 
  8176 ;;  angleToPulse    4   77[COMRAM] long 
  8177 ;; Return value:  Size  Location     Type
  8178 ;;                  4   69[COMRAM] long 
  8179 ;; Registers used:
  8180 ;;		wreg, status,2, status,0, cstack
  8181 ;; Tracked objects:
  8182 ;;		On entry : 0/0
  8183 ;;		On exit  : 0/0
  8184 ;;		Unchanged: 0/0
  8185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8186 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8187 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8188 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8189 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8190 ;;Total ram usage:       23 bytes
  8191 ;; Hardware stack levels used:    1
  8192 ;; Hardware stack levels required when called:    2
  8193 ;; This function calls:
  8194 ;;		i2___altoft
  8195 ;;		i2___awtoft
  8196 ;;		i2___ftadd
  8197 ;;		i2___ftdiv
  8198 ;;		i2___ftmul
  8199 ;;		i2___fttol
  8200 ;; This function is called by:
  8201 ;;		i2_setAngle
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           	psect	text41
  8206  000EF4                     __ptext41:
  8207                           	opt stack 0
  8208  000EF4                     i2_angleToPulse:
  8209                           	opt stack 19
  8210                           
  8211                           ;servo.c: 36: long offset = 0;
  8212                           
  8213                           ;incstack = 0
  8214  000EF4  0E00               	movlw	0
  8215  000EF6  6E4E               	movwf	i2angleToPulse@offset,c
  8216  000EF8  0E00               	movlw	0
  8217  000EFA  6E4F               	movwf	i2angleToPulse@offset+1,c
  8218  000EFC  0E00               	movlw	0
  8219  000EFE  6E50               	movwf	i2angleToPulse@offset+2,c
  8220  000F00  0E00               	movlw	0
  8221  000F02  6E51               	movwf	i2angleToPulse@offset+3,c
  8222                           
  8223                           ;servo.c: 37: long a000 = 1250;
  8224  000F04  0EE2               	movlw	226
  8225  000F06  6E59               	movwf	i2angleToPulse@a000,c
  8226  000F08  0E04               	movlw	4
  8227  000F0A  6E5A               	movwf	i2angleToPulse@a000+1,c
  8228  000F0C  0E00               	movlw	0
  8229  000F0E  6E5B               	movwf	i2angleToPulse@a000+2,c
  8230  000F10  0E00               	movlw	0
  8231  000F12  6E5C               	movwf	i2angleToPulse@a000+3,c
  8232                           
  8233                           ;servo.c: 38: long a180 = 6250;
  8234  000F14  0E6A               	movlw	106
  8235  000F16  6E52               	movwf	i2angleToPulse@a180,c
  8236  000F18  0E18               	movlw	24
  8237  000F1A  6E53               	movwf	i2angleToPulse@a180+1,c
  8238  000F1C  0E00               	movlw	0
  8239  000F1E  6E54               	movwf	i2angleToPulse@a180+2,c
  8240  000F20  0E00               	movlw	0
  8241  000F22  6E55               	movwf	i2angleToPulse@a180+3,c
  8242                           
  8243                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  8244  000F24  C059  F04A         	movff	i2angleToPulse@a000,??i2_angleToPulse
  8245  000F28  C05A  F04B         	movff	i2angleToPulse@a000+1,??i2_angleToPulse+1
  8246  000F2C  C05B  F04C         	movff	i2angleToPulse@a000+2,??i2_angleToPulse+2
  8247  000F30  C05C  F04D         	movff	i2angleToPulse@a000+3,??i2_angleToPulse+3
  8248  000F34  1E4A               	comf	??i2_angleToPulse,f,c
  8249  000F36  1E4B               	comf	??i2_angleToPulse+1,f,c
  8250  000F38  1E4C               	comf	??i2_angleToPulse+2,f,c
  8251  000F3A  1E4D               	comf	??i2_angleToPulse+3,f,c
  8252  000F3C  2A4A               	incf	??i2_angleToPulse,f,c
  8253  000F3E  0E00               	movlw	0
  8254  000F40  224B               	addwfc	??i2_angleToPulse+1,f,c
  8255  000F42  224C               	addwfc	??i2_angleToPulse+2,f,c
  8256  000F44  224D               	addwfc	??i2_angleToPulse+3,f,c
  8257  000F46  5052               	movf	i2angleToPulse@a180,w,c
  8258  000F48  244A               	addwf	??i2_angleToPulse,w,c
  8259  000F4A  6E09               	movwf	i2___altoft@c,c
  8260  000F4C  5053               	movf	i2angleToPulse@a180+1,w,c
  8261  000F4E  204B               	addwfc	??i2_angleToPulse+1,w,c
  8262  000F50  6E0A               	movwf	i2___altoft@c+1,c
  8263  000F52  5054               	movf	i2angleToPulse@a180+2,w,c
  8264  000F54  204C               	addwfc	??i2_angleToPulse+2,w,c
  8265  000F56  6E0B               	movwf	i2___altoft@c+2,c
  8266  000F58  5055               	movf	i2angleToPulse@a180+3,w,c
  8267  000F5A  204D               	addwfc	??i2_angleToPulse+3,w,c
  8268  000F5C  6E0C               	movwf	i2___altoft@c+3,c
  8269  000F5E  EC86  F00F         	call	i2___altoft	;wreg free
  8270  000F62  C009  F01F         	movff	?i2___altoft,i2___ftmul@f2
  8271  000F66  C00A  F020         	movff	?i2___altoft+1,i2___ftmul@f2+1
  8272  000F6A  C00B  F021         	movff	?i2___altoft+2,i2___ftmul@f2+2
  8273  000F6E  0E00               	movlw	0
  8274  000F70  6E10               	movwf	i2___ftdiv@f2,c
  8275  000F72  0E34               	movlw	52
  8276  000F74  6E11               	movwf	i2___ftdiv@f2+1,c
  8277  000F76  0E43               	movlw	67
  8278  000F78  6E12               	movwf	i2___ftdiv@f2+2,c
  8279  000F7A  C046  F009         	movff	i2angleToPulse@angle,i2___awtoft@c
  8280  000F7E  C047  F00A         	movff	i2angleToPulse@angle+1,i2___awtoft@c+1
  8281  000F82  EC46  F011         	call	i2___awtoft	;wreg free
  8282  000F86  C009  F00D         	movff	?i2___awtoft,i2___ftdiv@f1
  8283  000F8A  C00A  F00E         	movff	?i2___awtoft+1,i2___ftdiv@f1+1
  8284  000F8E  C00B  F00F         	movff	?i2___awtoft+2,i2___ftdiv@f1+2
  8285  000F92  ECB5  F00B         	call	i2___ftdiv	;wreg free
  8286  000F96  C00D  F01C         	movff	?i2___ftdiv,i2___ftmul@f1
  8287  000F9A  C00E  F01D         	movff	?i2___ftdiv+1,i2___ftmul@f1+1
  8288  000F9E  C00F  F01E         	movff	?i2___ftdiv+2,i2___ftmul@f1+2
  8289  000FA2  ECC7  F00A         	call	i2___ftmul	;wreg free
  8290  000FA6  C01C  F02E         	movff	?i2___ftmul,i2___ftadd@f2
  8291  000FAA  C01D  F02F         	movff	?i2___ftmul+1,i2___ftadd@f2+1
  8292  000FAE  C01E  F030         	movff	?i2___ftmul+2,i2___ftadd@f2+2
  8293  000FB2  C059  F009         	movff	i2angleToPulse@a000,i2___altoft@c
  8294  000FB6  C05A  F00A         	movff	i2angleToPulse@a000+1,i2___altoft@c+1
  8295  000FBA  C05B  F00B         	movff	i2angleToPulse@a000+2,i2___altoft@c+2
  8296  000FBE  C05C  F00C         	movff	i2angleToPulse@a000+3,i2___altoft@c+3
  8297  000FC2  EC86  F00F         	call	i2___altoft	;wreg free
  8298  000FC6  C009  F02B         	movff	?i2___altoft,i2___ftadd@f1
  8299  000FCA  C00A  F02C         	movff	?i2___altoft+1,i2___ftadd@f1+1
  8300  000FCE  C00B  F02D         	movff	?i2___altoft+2,i2___ftadd@f1+2
  8301  000FD2  EC57  F003         	call	i2___ftadd	;wreg free
  8302  000FD6  C02B  F056         	movff	?i2___ftadd,i2_angleToPulse$1339
  8303  000FDA  C02C  F057         	movff	?i2___ftadd+1,i2_angleToPulse$1339+1
  8304  000FDE  C02D  F058         	movff	?i2___ftadd+2,i2_angleToPulse$1339+2
  8305                           
  8306                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  8307  000FE2  C04E  F009         	movff	i2angleToPulse@offset,i2___altoft@c
  8308  000FE6  C04F  F00A         	movff	i2angleToPulse@offset+1,i2___altoft@c+1
  8309  000FEA  C050  F00B         	movff	i2angleToPulse@offset+2,i2___altoft@c+2
  8310  000FEE  C051  F00C         	movff	i2angleToPulse@offset+3,i2___altoft@c+3
  8311  000FF2  EC86  F00F         	call	i2___altoft	;wreg free
  8312  000FF6  C009  F02E         	movff	?i2___altoft,i2___ftadd@f2
  8313  000FFA  C00A  F02F         	movff	?i2___altoft+1,i2___ftadd@f2+1
  8314  000FFE  C00B  F030         	movff	?i2___altoft+2,i2___ftadd@f2+2
  8315  001002  C056  F02B         	movff	i2_angleToPulse$1339,i2___ftadd@f1
  8316  001006  C057  F02C         	movff	i2_angleToPulse$1339+1,i2___ftadd@f1+1
  8317  00100A  C058  F02D         	movff	i2_angleToPulse$1339+2,i2___ftadd@f1+2
  8318  00100E  EC57  F003         	call	i2___ftadd	;wreg free
  8319  001012  C02B  F037         	movff	?i2___ftadd,i2___fttol@f1
  8320  001016  C02C  F038         	movff	?i2___ftadd+1,i2___fttol@f1+1
  8321  00101A  C02D  F039         	movff	?i2___ftadd+2,i2___fttol@f1+2
  8322  00101E  EC4D  F00A         	call	i2___fttol	;wreg free
  8323  001022  C037  F046         	movff	?i2___fttol,?i2_angleToPulse
  8324  001026  C038  F047         	movff	?i2___fttol+1,?i2_angleToPulse+1
  8325  00102A  C039  F048         	movff	?i2___fttol+2,?i2_angleToPulse+2
  8326  00102E  C03A  F049         	movff	?i2___fttol+3,?i2_angleToPulse+3
  8327  001032  0012               	return	
  8328  001034                     __end_ofi2_angleToPulse:
  8329                           	opt stack 0
  8330                           pclatu	equ	0xFFB
  8331                           pclath	equ	0xFFA
  8332                           tblptru	equ	0xFF8
  8333                           tblptrh	equ	0xFF7
  8334                           tblptrl	equ	0xFF6
  8335                           tablat	equ	0xFF5
  8336                           prodh	equ	0xFF4
  8337                           prodl	equ	0xFF3
  8338                           intcon	equ	0xFF2
  8339                           intcon3	equ	0xFF0
  8340                           postinc0	equ	0xFEE
  8341                           fsr0h	equ	0xFEA
  8342                           fsr0l	equ	0xFE9
  8343                           wreg	equ	0xFE8
  8344                           postdec1	equ	0xFE5
  8345                           fsr1h	equ	0xFE2
  8346                           fsr1l	equ	0xFE1
  8347                           indf2	equ	0xFDF
  8348                           postinc2	equ	0xFDE
  8349                           postdec2	equ	0xFDD
  8350                           fsr2h	equ	0xFDA
  8351                           fsr2l	equ	0xFD9
  8352                           status	equ	0xFD8
  8353                           
  8354 ;; *************** function i2___fttol *****************
  8355 ;; Defined at:
  8356 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;  f1              3   54[COMRAM] float 
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;  __fttol         4   64[COMRAM] unsigned long 
  8361 ;;  __fttol         1   68[COMRAM] unsigned char 
  8362 ;;  __fttol         1   63[COMRAM] unsigned char 
  8363 ;; Return value:  Size  Location     Type
  8364 ;;                  4   54[COMRAM] long 
  8365 ;; Registers used:
  8366 ;;		wreg, status,2, status,0
  8367 ;; Tracked objects:
  8368 ;;		On entry : 0/0
  8369 ;;		On exit  : 0/0
  8370 ;;		Unchanged: 0/0
  8371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8372 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8373 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8374 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8375 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8376 ;;Total ram usage:       15 bytes
  8377 ;; Hardware stack levels used:    1
  8378 ;; This function calls:
  8379 ;;		Nothing
  8380 ;; This function is called by:
  8381 ;;		i2_angleToPulse
  8382 ;; This function uses a non-reentrant model
  8383 ;;
  8384                           
  8385                           	psect	text42
  8386  00149A                     __ptext42:
  8387                           	opt stack 0
  8388  00149A                     i2___fttol:
  8389                           	opt stack 20
  8390                           
  8391                           ;incstack = 0
  8392  00149A  C039  F03B         	movff	i2___fttol@f1+2,??i2___fttol
  8393  00149E  6A3C               	clrf	(??i2___fttol+1)& (0+255),c
  8394  0014A0  6A3D               	clrf	(??i2___fttol+2)& (0+255),c
  8395  0014A2  3438               	rlcf	i2___fttol@f1+1,w,c
  8396  0014A4  363B               	rlcf	??i2___fttol& (0+255),f,c
  8397  0014A6  E301               	bnc	u331_41
  8398  0014A8  803C               	bsf	(??i2___fttol+1)& (0+255),0,c
  8399  0014AA                     u331_41:
  8400  0014AA  503B               	movf	??i2___fttol,w,c
  8401  0014AC  6E45               	movwf	i2___fttol@exp1,c
  8402  0014AE  5045               	movf	i2___fttol@exp1,w,c
  8403  0014B0  A4D8               	btfss	status,2,c
  8404  0014B2  D009               	goto	i2l3704
  8405  0014B4  0E00               	movlw	0
  8406  0014B6  6E37               	movwf	?i2___fttol,c
  8407  0014B8  0E00               	movlw	0
  8408  0014BA  6E38               	movwf	?i2___fttol+1,c
  8409  0014BC  0E00               	movlw	0
  8410  0014BE  6E39               	movwf	?i2___fttol+2,c
  8411  0014C0  0E00               	movlw	0
  8412  0014C2  6E3A               	movwf	?i2___fttol+3,c
  8413  0014C4  0012               	return	
  8414  0014C6                     i2l3704:
  8415  0014C6  0E17               	movlw	23
  8416  0014C8  6E3B               	movwf	??i2___fttol& (0+255),c
  8417  0014CA  C037  F03C         	movff	i2___fttol@f1,??i2___fttol+1
  8418  0014CE  C038  F03D         	movff	i2___fttol@f1+1,??i2___fttol+2
  8419  0014D2  C039  F03E         	movff	i2___fttol@f1+2,??i2___fttol+3
  8420  0014D6  283B               	incf	??i2___fttol,w,c
  8421  0014D8  6E3F               	movwf	(??i2___fttol+4)& (0+255),c
  8422  0014DA  D004               	goto	i2u333_40
  8423  0014DC                     i2u333_45:
  8424  0014DC  90D8               	bcf	status,0,c
  8425  0014DE  323E               	rrcf	??i2___fttol+3,f,c
  8426  0014E0  323D               	rrcf	??i2___fttol+2,f,c
  8427  0014E2  323C               	rrcf	??i2___fttol+1,f,c
  8428  0014E4                     i2u333_40:
  8429  0014E4  2E3F               	decfsz	(??i2___fttol+4)& (0+255),f,c
  8430  0014E6  D7FA               	goto	i2u333_45
  8431  0014E8  503C               	movf	??i2___fttol+1,w,c
  8432  0014EA  6E40               	movwf	i2___fttol@sign1,c
  8433  0014EC  8E38               	bsf	i2___fttol@f1+1,7,c
  8434  0014EE  0EFF               	movlw	255
  8435  0014F0  1637               	andwf	i2___fttol@f1,f,c
  8436  0014F2  0EFF               	movlw	255
  8437  0014F4  1638               	andwf	i2___fttol@f1+1,f,c
  8438  0014F6  0E00               	movlw	0
  8439  0014F8  1639               	andwf	i2___fttol@f1+2,f,c
  8440  0014FA  5037               	movf	i2___fttol@f1,w,c
  8441  0014FC  6E41               	movwf	i2___fttol@lval,c
  8442  0014FE  5038               	movf	i2___fttol@f1+1,w,c
  8443  001500  6E42               	movwf	i2___fttol@lval+1,c
  8444  001502  5039               	movf	i2___fttol@f1+2,w,c
  8445  001504  6E43               	movwf	i2___fttol@lval+2,c
  8446  001506  6A44               	clrf	i2___fttol@lval+3,c
  8447  001508  0E8E               	movlw	142
  8448  00150A  5E45               	subwf	i2___fttol@exp1,f,c
  8449  00150C  AE45               	btfss	i2___fttol@exp1,7,c
  8450  00150E  D016               	goto	i2l3726
  8451  001510  5045               	movf	i2___fttol@exp1,w,c
  8452  001512  0A80               	xorlw	128
  8453  001514  0F8F               	addlw	143
  8454  001516  B0D8               	btfsc	status,0,c
  8455  001518  D009               	goto	i2l3722
  8456  00151A  0E00               	movlw	0
  8457  00151C  6E37               	movwf	?i2___fttol,c
  8458  00151E  0E00               	movlw	0
  8459  001520  6E38               	movwf	?i2___fttol+1,c
  8460  001522  0E00               	movlw	0
  8461  001524  6E39               	movwf	?i2___fttol+2,c
  8462  001526  0E00               	movlw	0
  8463  001528  6E3A               	movwf	?i2___fttol+3,c
  8464  00152A  0012               	return	
  8465  00152C                     i2l3722:
  8466  00152C  90D8               	bcf	status,0,c
  8467  00152E  3244               	rrcf	i2___fttol@lval+3,f,c
  8468  001530  3243               	rrcf	i2___fttol@lval+2,f,c
  8469  001532  3242               	rrcf	i2___fttol@lval+1,f,c
  8470  001534  3241               	rrcf	i2___fttol@lval,f,c
  8471  001536  3E45               	incfsz	i2___fttol@exp1,f,c
  8472  001538  D7F9               	goto	i2l3722
  8473  00153A  D015               	goto	i2l3736
  8474  00153C                     i2l3726:
  8475  00153C  0E17               	movlw	23
  8476  00153E  6445               	cpfsgt	i2___fttol@exp1,c
  8477  001540  D00F               	goto	i2l3734
  8478  001542  0E00               	movlw	0
  8479  001544  6E37               	movwf	?i2___fttol,c
  8480  001546  0E00               	movlw	0
  8481  001548  6E38               	movwf	?i2___fttol+1,c
  8482  00154A  0E00               	movlw	0
  8483  00154C  6E39               	movwf	?i2___fttol+2,c
  8484  00154E  0E00               	movlw	0
  8485  001550  6E3A               	movwf	?i2___fttol+3,c
  8486  001552  0012               	return	
  8487  001554                     i2l3732:
  8488  001554  90D8               	bcf	status,0,c
  8489  001556  3641               	rlcf	i2___fttol@lval,f,c
  8490  001558  3642               	rlcf	i2___fttol@lval+1,f,c
  8491  00155A  3643               	rlcf	i2___fttol@lval+2,f,c
  8492  00155C  3644               	rlcf	i2___fttol@lval+3,f,c
  8493  00155E  0645               	decf	i2___fttol@exp1,f,c
  8494  001560                     i2l3734:
  8495  001560  5045               	movf	i2___fttol@exp1,w,c
  8496  001562  A4D8               	btfss	status,2,c
  8497  001564  D7F7               	goto	i2l3732
  8498  001566                     i2l3736:
  8499  001566  5040               	movf	i2___fttol@sign1,w,c
  8500  001568  B4D8               	btfsc	status,2,c
  8501  00156A  D008               	goto	i2l3740
  8502  00156C  1E44               	comf	i2___fttol@lval+3,f,c
  8503  00156E  1E43               	comf	i2___fttol@lval+2,f,c
  8504  001570  1E42               	comf	i2___fttol@lval+1,f,c
  8505  001572  6C41               	negf	i2___fttol@lval,c
  8506  001574  0E00               	movlw	0
  8507  001576  2242               	addwfc	i2___fttol@lval+1,f,c
  8508  001578  2243               	addwfc	i2___fttol@lval+2,f,c
  8509  00157A  2244               	addwfc	i2___fttol@lval+3,f,c
  8510  00157C                     i2l3740:
  8511  00157C  C041  F037         	movff	i2___fttol@lval,?i2___fttol
  8512  001580  C042  F038         	movff	i2___fttol@lval+1,?i2___fttol+1
  8513  001584  C043  F039         	movff	i2___fttol@lval+2,?i2___fttol+2
  8514  001588  C044  F03A         	movff	i2___fttol@lval+3,?i2___fttol+3
  8515  00158C  0012               	return	
  8516  00158E                     __end_ofi2___fttol:
  8517                           	opt stack 0
  8518                           pclatu	equ	0xFFB
  8519                           pclath	equ	0xFFA
  8520                           tblptru	equ	0xFF8
  8521                           tblptrh	equ	0xFF7
  8522                           tblptrl	equ	0xFF6
  8523                           tablat	equ	0xFF5
  8524                           prodh	equ	0xFF4
  8525                           prodl	equ	0xFF3
  8526                           intcon	equ	0xFF2
  8527                           intcon3	equ	0xFF0
  8528                           postinc0	equ	0xFEE
  8529                           fsr0h	equ	0xFEA
  8530                           fsr0l	equ	0xFE9
  8531                           wreg	equ	0xFE8
  8532                           postdec1	equ	0xFE5
  8533                           fsr1h	equ	0xFE2
  8534                           fsr1l	equ	0xFE1
  8535                           indf2	equ	0xFDF
  8536                           postinc2	equ	0xFDE
  8537                           postdec2	equ	0xFDD
  8538                           fsr2h	equ	0xFDA
  8539                           fsr2l	equ	0xFD9
  8540                           status	equ	0xFD8
  8541                           
  8542 ;; *************** function i2___ftmul *****************
  8543 ;; Defined at:
  8544 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  8545 ;; Parameters:    Size  Location     Type
  8546 ;;  f1              3   27[COMRAM] float 
  8547 ;;  f2              3   30[COMRAM] float 
  8548 ;; Auto vars:     Size  Location     Type
  8549 ;;  __ftmul         3   37[COMRAM] unsigned um
  8550 ;;  __ftmul         1   41[COMRAM] unsigned char 
  8551 ;;  __ftmul         1   40[COMRAM] unsigned char 
  8552 ;;  __ftmul         1   36[COMRAM] unsigned char 
  8553 ;; Return value:  Size  Location     Type
  8554 ;;                  3   27[COMRAM] float 
  8555 ;; Registers used:
  8556 ;;		wreg, status,2, status,0, cstack
  8557 ;; Tracked objects:
  8558 ;;		On entry : 0/0
  8559 ;;		On exit  : 0/0
  8560 ;;		Unchanged: 0/0
  8561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8562 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8563 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8564 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8566 ;;Total ram usage:       15 bytes
  8567 ;; Hardware stack levels used:    1
  8568 ;; Hardware stack levels required when called:    1
  8569 ;; This function calls:
  8570 ;;		i2___ftpack
  8571 ;; This function is called by:
  8572 ;;		i2_angleToPulse
  8573 ;; This function uses a non-reentrant model
  8574 ;;
  8575                           
  8576                           	psect	text43
  8577  00158E                     __ptext43:
  8578                           	opt stack 0
  8579  00158E                     i2___ftmul:
  8580                           	opt stack 19
  8581                           
  8582                           ;incstack = 0
  8583  00158E  C01E  F022         	movff	i2___ftmul@f1+2,??i2___ftmul
  8584  001592  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
  8585  001594  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
  8586  001596  341D               	rlcf	i2___ftmul@f1+1,w,c
  8587  001598  3622               	rlcf	??i2___ftmul& (0+255),f,c
  8588  00159A  E301               	bnc	u325_41
  8589  00159C  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
  8590  00159E                     u325_41:
  8591  00159E  5022               	movf	??i2___ftmul,w,c
  8592  0015A0  6E25               	movwf	i2___ftmul@exp,c
  8593  0015A2  5025               	movf	i2___ftmul@exp,w,c
  8594  0015A4  A4D8               	btfss	status,2,c
  8595  0015A6  D007               	goto	i2l3656
  8596  0015A8  0E00               	movlw	0
  8597  0015AA  6E1C               	movwf	?i2___ftmul,c
  8598  0015AC  0E00               	movlw	0
  8599  0015AE  6E1D               	movwf	?i2___ftmul+1,c
  8600  0015B0  0E00               	movlw	0
  8601  0015B2  6E1E               	movwf	?i2___ftmul+2,c
  8602  0015B4  0012               	return	
  8603  0015B6                     i2l3656:
  8604  0015B6  C021  F022         	movff	i2___ftmul@f2+2,??i2___ftmul
  8605  0015BA  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
  8606  0015BC  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
  8607  0015BE  3420               	rlcf	i2___ftmul@f2+1,w,c
  8608  0015C0  3622               	rlcf	??i2___ftmul& (0+255),f,c
  8609  0015C2  E301               	bnc	u327_41
  8610  0015C4  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
  8611  0015C6                     u327_41:
  8612  0015C6  5022               	movf	??i2___ftmul,w,c
  8613  0015C8  6E2A               	movwf	i2___ftmul@sign,c
  8614  0015CA  502A               	movf	i2___ftmul@sign,w,c
  8615  0015CC  A4D8               	btfss	status,2,c
  8616  0015CE  D007               	goto	i2l3662
  8617  0015D0  0E00               	movlw	0
  8618  0015D2  6E1C               	movwf	?i2___ftmul,c
  8619  0015D4  0E00               	movlw	0
  8620  0015D6  6E1D               	movwf	?i2___ftmul+1,c
  8621  0015D8  0E00               	movlw	0
  8622  0015DA  6E1E               	movwf	?i2___ftmul+2,c
  8623  0015DC  0012               	return	
  8624  0015DE                     i2l3662:
  8625  0015DE  502A               	movf	i2___ftmul@sign,w,c
  8626  0015E0  0F7B               	addlw	123
  8627  0015E2  2625               	addwf	i2___ftmul@exp,f,c
  8628  0015E4  C01E  F02A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  8629  0015E8  5021               	movf	i2___ftmul@f2+2,w,c
  8630  0015EA  1A2A               	xorwf	i2___ftmul@sign,f,c
  8631  0015EC  0E80               	movlw	128
  8632  0015EE  162A               	andwf	i2___ftmul@sign,f,c
  8633  0015F0  8E1D               	bsf	i2___ftmul@f1+1,7,c
  8634  0015F2  8E20               	bsf	i2___ftmul@f2+1,7,c
  8635  0015F4  0EFF               	movlw	255
  8636  0015F6  161F               	andwf	i2___ftmul@f2,f,c
  8637  0015F8  0EFF               	movlw	255
  8638  0015FA  1620               	andwf	i2___ftmul@f2+1,f,c
  8639  0015FC  0E00               	movlw	0
  8640  0015FE  1621               	andwf	i2___ftmul@f2+2,f,c
  8641  001600  0E00               	movlw	0
  8642  001602  6E26               	movwf	i2___ftmul@f3_as_product,c
  8643  001604  0E00               	movlw	0
  8644  001606  6E27               	movwf	i2___ftmul@f3_as_product+1,c
  8645  001608  0E00               	movlw	0
  8646  00160A  6E28               	movwf	i2___ftmul@f3_as_product+2,c
  8647  00160C  0E07               	movlw	7
  8648  00160E  6E29               	movwf	i2___ftmul@cntr,c
  8649  001610                     i2l3676:
  8650  001610  A01C               	btfss	i2___ftmul@f1,0,c
  8651  001612  D006               	goto	i2l3680
  8652  001614  501F               	movf	i2___ftmul@f2,w,c
  8653  001616  2626               	addwf	i2___ftmul@f3_as_product,f,c
  8654  001618  5020               	movf	i2___ftmul@f2+1,w,c
  8655  00161A  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
  8656  00161C  5021               	movf	i2___ftmul@f2+2,w,c
  8657  00161E  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
  8658  001620                     i2l3680:
  8659  001620  90D8               	bcf	status,0,c
  8660  001622  321E               	rrcf	i2___ftmul@f1+2,f,c
  8661  001624  321D               	rrcf	i2___ftmul@f1+1,f,c
  8662  001626  321C               	rrcf	i2___ftmul@f1,f,c
  8663  001628  90D8               	bcf	status,0,c
  8664  00162A  361F               	rlcf	i2___ftmul@f2,f,c
  8665  00162C  3620               	rlcf	i2___ftmul@f2+1,f,c
  8666  00162E  3621               	rlcf	i2___ftmul@f2+2,f,c
  8667  001630  2E29               	decfsz	i2___ftmul@cntr,f,c
  8668  001632  D7EE               	goto	i2l3676
  8669  001634  0E09               	movlw	9
  8670  001636  6E29               	movwf	i2___ftmul@cntr,c
  8671  001638                     i2l3686:
  8672  001638  A01C               	btfss	i2___ftmul@f1,0,c
  8673  00163A  D006               	goto	i2l3690
  8674  00163C  501F               	movf	i2___ftmul@f2,w,c
  8675  00163E  2626               	addwf	i2___ftmul@f3_as_product,f,c
  8676  001640  5020               	movf	i2___ftmul@f2+1,w,c
  8677  001642  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
  8678  001644  5021               	movf	i2___ftmul@f2+2,w,c
  8679  001646  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
  8680  001648                     i2l3690:
  8681  001648  90D8               	bcf	status,0,c
  8682  00164A  321E               	rrcf	i2___ftmul@f1+2,f,c
  8683  00164C  321D               	rrcf	i2___ftmul@f1+1,f,c
  8684  00164E  321C               	rrcf	i2___ftmul@f1,f,c
  8685  001650  90D8               	bcf	status,0,c
  8686  001652  3228               	rrcf	i2___ftmul@f3_as_product+2,f,c
  8687  001654  3227               	rrcf	i2___ftmul@f3_as_product+1,f,c
  8688  001656  3226               	rrcf	i2___ftmul@f3_as_product,f,c
  8689  001658  2E29               	decfsz	i2___ftmul@cntr,f,c
  8690  00165A  D7EE               	goto	i2l3686
  8691  00165C  C026  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  8692  001660  C027  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  8693  001664  C028  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  8694  001668  C025  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  8695  00166C  C02A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  8696  001670  EC4A  F00D         	call	i2___ftpack	;wreg free
  8697  001674  C001  F01C         	movff	?i2___ftpack,?i2___ftmul
  8698  001678  C002  F01D         	movff	?i2___ftpack+1,?i2___ftmul+1
  8699  00167C  C003  F01E         	movff	?i2___ftpack+2,?i2___ftmul+2
  8700  001680  0012               	return	
  8701  001682                     __end_ofi2___ftmul:
  8702                           	opt stack 0
  8703                           pclatu	equ	0xFFB
  8704                           pclath	equ	0xFFA
  8705                           tblptru	equ	0xFF8
  8706                           tblptrh	equ	0xFF7
  8707                           tblptrl	equ	0xFF6
  8708                           tablat	equ	0xFF5
  8709                           prodh	equ	0xFF4
  8710                           prodl	equ	0xFF3
  8711                           intcon	equ	0xFF2
  8712                           intcon3	equ	0xFF0
  8713                           postinc0	equ	0xFEE
  8714                           fsr0h	equ	0xFEA
  8715                           fsr0l	equ	0xFE9
  8716                           wreg	equ	0xFE8
  8717                           postdec1	equ	0xFE5
  8718                           fsr1h	equ	0xFE2
  8719                           fsr1l	equ	0xFE1
  8720                           indf2	equ	0xFDF
  8721                           postinc2	equ	0xFDE
  8722                           postdec2	equ	0xFDD
  8723                           fsr2h	equ	0xFDA
  8724                           fsr2l	equ	0xFD9
  8725                           status	equ	0xFD8
  8726                           
  8727 ;; *************** function i2___ftdiv *****************
  8728 ;; Defined at:
  8729 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;  f1              3   12[COMRAM] float 
  8732 ;;  f2              3   15[COMRAM] float 
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;  __ftdiv         3   22[COMRAM] float 
  8735 ;;  __ftdiv         1   26[COMRAM] unsigned char 
  8736 ;;  __ftdiv         1   25[COMRAM] unsigned char 
  8737 ;;  __ftdiv         1   21[COMRAM] unsigned char 
  8738 ;; Return value:  Size  Location     Type
  8739 ;;                  3   12[COMRAM] float 
  8740 ;; Registers used:
  8741 ;;		wreg, status,2, status,0, cstack
  8742 ;; Tracked objects:
  8743 ;;		On entry : 0/0
  8744 ;;		On exit  : 0/0
  8745 ;;		Unchanged: 0/0
  8746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8747 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8750 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8751 ;;Total ram usage:       15 bytes
  8752 ;; Hardware stack levels used:    1
  8753 ;; Hardware stack levels required when called:    1
  8754 ;; This function calls:
  8755 ;;		i2___ftpack
  8756 ;; This function is called by:
  8757 ;;		i2_angleToPulse
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           	psect	text44
  8762  00176A                     __ptext44:
  8763                           	opt stack 0
  8764  00176A                     i2___ftdiv:
  8765                           	opt stack 19
  8766                           
  8767                           ;incstack = 0
  8768  00176A  C00F  F013         	movff	i2___ftdiv@f1+2,??i2___ftdiv
  8769  00176E  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
  8770  001770  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
  8771  001772  340E               	rlcf	i2___ftdiv@f1+1,w,c
  8772  001774  3613               	rlcf	??i2___ftdiv& (0+255),f,c
  8773  001776  E301               	bnc	u320_41
  8774  001778  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  8775  00177A                     u320_41:
  8776  00177A  5013               	movf	??i2___ftdiv,w,c
  8777  00177C  6E1A               	movwf	i2___ftdiv@exp,c
  8778  00177E  501A               	movf	i2___ftdiv@exp,w,c
  8779  001780  A4D8               	btfss	status,2,c
  8780  001782  D007               	goto	i2l3610
  8781  001784  0E00               	movlw	0
  8782  001786  6E0D               	movwf	?i2___ftdiv,c
  8783  001788  0E00               	movlw	0
  8784  00178A  6E0E               	movwf	?i2___ftdiv+1,c
  8785  00178C  0E00               	movlw	0
  8786  00178E  6E0F               	movwf	?i2___ftdiv+2,c
  8787  001790  0012               	return	
  8788  001792                     i2l3610:
  8789  001792  C012  F013         	movff	i2___ftdiv@f2+2,??i2___ftdiv
  8790  001796  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
  8791  001798  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
  8792  00179A  3411               	rlcf	i2___ftdiv@f2+1,w,c
  8793  00179C  3613               	rlcf	??i2___ftdiv& (0+255),f,c
  8794  00179E  E301               	bnc	u322_41
  8795  0017A0  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  8796  0017A2                     u322_41:
  8797  0017A2  5013               	movf	??i2___ftdiv,w,c
  8798  0017A4  6E1B               	movwf	i2___ftdiv@sign,c
  8799  0017A6  501B               	movf	i2___ftdiv@sign,w,c
  8800  0017A8  A4D8               	btfss	status,2,c
  8801  0017AA  D007               	goto	i2l3616
  8802  0017AC  0E00               	movlw	0
  8803  0017AE  6E0D               	movwf	?i2___ftdiv,c
  8804  0017B0  0E00               	movlw	0
  8805  0017B2  6E0E               	movwf	?i2___ftdiv+1,c
  8806  0017B4  0E00               	movlw	0
  8807  0017B6  6E0F               	movwf	?i2___ftdiv+2,c
  8808  0017B8  0012               	return	
  8809  0017BA                     i2l3616:
  8810  0017BA  0E00               	movlw	0
  8811  0017BC  6E17               	movwf	i2___ftdiv@f3,c
  8812  0017BE  0E00               	movlw	0
  8813  0017C0  6E18               	movwf	i2___ftdiv@f3+1,c
  8814  0017C2  0E00               	movlw	0
  8815  0017C4  6E19               	movwf	i2___ftdiv@f3+2,c
  8816  0017C6  501B               	movf	i2___ftdiv@sign,w,c
  8817  0017C8  0F89               	addlw	137
  8818  0017CA  5E1A               	subwf	i2___ftdiv@exp,f,c
  8819  0017CC  C00F  F01B         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
  8820  0017D0  5012               	movf	i2___ftdiv@f2+2,w,c
  8821  0017D2  1A1B               	xorwf	i2___ftdiv@sign,f,c
  8822  0017D4  0E80               	movlw	128
  8823  0017D6  161B               	andwf	i2___ftdiv@sign,f,c
  8824  0017D8  8E0E               	bsf	i2___ftdiv@f1+1,7,c
  8825  0017DA  0EFF               	movlw	255
  8826  0017DC  160D               	andwf	i2___ftdiv@f1,f,c
  8827  0017DE  0EFF               	movlw	255
  8828  0017E0  160E               	andwf	i2___ftdiv@f1+1,f,c
  8829  0017E2  0E00               	movlw	0
  8830  0017E4  160F               	andwf	i2___ftdiv@f1+2,f,c
  8831  0017E6  8E11               	bsf	i2___ftdiv@f2+1,7,c
  8832  0017E8  0EFF               	movlw	255
  8833  0017EA  1610               	andwf	i2___ftdiv@f2,f,c
  8834  0017EC  0EFF               	movlw	255
  8835  0017EE  1611               	andwf	i2___ftdiv@f2+1,f,c
  8836  0017F0  0E00               	movlw	0
  8837  0017F2  1612               	andwf	i2___ftdiv@f2+2,f,c
  8838  0017F4  0E18               	movlw	24
  8839  0017F6  6E16               	movwf	i2___ftdiv@cntr,c
  8840  0017F8                     i2l3636:
  8841  0017F8  90D8               	bcf	status,0,c
  8842  0017FA  3617               	rlcf	i2___ftdiv@f3,f,c
  8843  0017FC  3618               	rlcf	i2___ftdiv@f3+1,f,c
  8844  0017FE  3619               	rlcf	i2___ftdiv@f3+2,f,c
  8845  001800  5010               	movf	i2___ftdiv@f2,w,c
  8846  001802  5C0D               	subwf	i2___ftdiv@f1,w,c
  8847  001804  5011               	movf	i2___ftdiv@f2+1,w,c
  8848  001806  580E               	subwfb	i2___ftdiv@f1+1,w,c
  8849  001808  5012               	movf	i2___ftdiv@f2+2,w,c
  8850  00180A  580F               	subwfb	i2___ftdiv@f1+2,w,c
  8851  00180C  A0D8               	btfss	status,0,c
  8852  00180E  D007               	goto	i2l939
  8853  001810  5010               	movf	i2___ftdiv@f2,w,c
  8854  001812  5E0D               	subwf	i2___ftdiv@f1,f,c
  8855  001814  5011               	movf	i2___ftdiv@f2+1,w,c
  8856  001816  5A0E               	subwfb	i2___ftdiv@f1+1,f,c
  8857  001818  5012               	movf	i2___ftdiv@f2+2,w,c
  8858  00181A  5A0F               	subwfb	i2___ftdiv@f1+2,f,c
  8859  00181C  8017               	bsf	i2___ftdiv@f3,0,c
  8860  00181E                     i2l939:
  8861  00181E  90D8               	bcf	status,0,c
  8862  001820  360D               	rlcf	i2___ftdiv@f1,f,c
  8863  001822  360E               	rlcf	i2___ftdiv@f1+1,f,c
  8864  001824  360F               	rlcf	i2___ftdiv@f1+2,f,c
  8865  001826  2E16               	decfsz	i2___ftdiv@cntr,f,c
  8866  001828  D7E7               	goto	i2l3636
  8867  00182A  C017  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
  8868  00182E  C018  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
  8869  001832  C019  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
  8870  001836  C01A  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
  8871  00183A  C01B  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
  8872  00183E  EC4A  F00D         	call	i2___ftpack	;wreg free
  8873  001842  C001  F00D         	movff	?i2___ftpack,?i2___ftdiv
  8874  001846  C002  F00E         	movff	?i2___ftpack+1,?i2___ftdiv+1
  8875  00184A  C003  F00F         	movff	?i2___ftpack+2,?i2___ftdiv+2
  8876  00184E  0012               	return	
  8877  001850                     __end_ofi2___ftdiv:
  8878                           	opt stack 0
  8879                           pclatu	equ	0xFFB
  8880                           pclath	equ	0xFFA
  8881                           tblptru	equ	0xFF8
  8882                           tblptrh	equ	0xFF7
  8883                           tblptrl	equ	0xFF6
  8884                           tablat	equ	0xFF5
  8885                           prodh	equ	0xFF4
  8886                           prodl	equ	0xFF3
  8887                           intcon	equ	0xFF2
  8888                           intcon3	equ	0xFF0
  8889                           postinc0	equ	0xFEE
  8890                           fsr0h	equ	0xFEA
  8891                           fsr0l	equ	0xFE9
  8892                           wreg	equ	0xFE8
  8893                           postdec1	equ	0xFE5
  8894                           fsr1h	equ	0xFE2
  8895                           fsr1l	equ	0xFE1
  8896                           indf2	equ	0xFDF
  8897                           postinc2	equ	0xFDE
  8898                           postdec2	equ	0xFDD
  8899                           fsr2h	equ	0xFDA
  8900                           fsr2l	equ	0xFD9
  8901                           status	equ	0xFD8
  8902                           
  8903 ;; *************** function i2___ftadd *****************
  8904 ;; Defined at:
  8905 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;  f1              3   42[COMRAM] float 
  8908 ;;  f2              3   45[COMRAM] float 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;  __ftadd         1   53[COMRAM] unsigned char 
  8911 ;;  __ftadd         1   52[COMRAM] unsigned char 
  8912 ;;  __ftadd         1   51[COMRAM] unsigned char 
  8913 ;; Return value:  Size  Location     Type
  8914 ;;                  3   42[COMRAM] float 
  8915 ;; Registers used:
  8916 ;;		wreg, status,2, status,0, cstack
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8922 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;Total ram usage:       12 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:    1
  8929 ;; This function calls:
  8930 ;;		i2___ftpack
  8931 ;; This function is called by:
  8932 ;;		i2_angleToPulse
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           	psect	text45
  8937  0006AE                     __ptext45:
  8938                           	opt stack 0
  8939  0006AE                     i2___ftadd:
  8940                           	opt stack 19
  8941                           
  8942                           ;incstack = 0
  8943  0006AE  C02D  F031         	movff	i2___ftadd@f1+2,??i2___ftadd
  8944  0006B2  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
  8945  0006B4  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
  8946  0006B6  342C               	rlcf	i2___ftadd@f1+1,w,c
  8947  0006B8  3631               	rlcf	??i2___ftadd& (0+255),f,c
  8948  0006BA  E301               	bnc	u299_41
  8949  0006BC  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
  8950  0006BE                     u299_41:
  8951  0006BE  5031               	movf	??i2___ftadd,w,c
  8952  0006C0  6E36               	movwf	i2___ftadd@exp1,c
  8953  0006C2  C030  F031         	movff	i2___ftadd@f2+2,??i2___ftadd
  8954  0006C6  6A32               	clrf	(??i2___ftadd+1)& (0+255),c
  8955  0006C8  6A33               	clrf	(??i2___ftadd+2)& (0+255),c
  8956  0006CA  342F               	rlcf	i2___ftadd@f2+1,w,c
  8957  0006CC  3631               	rlcf	??i2___ftadd& (0+255),f,c
  8958  0006CE  E301               	bnc	u300_41
  8959  0006D0  8032               	bsf	(??i2___ftadd+1)& (0+255),0,c
  8960  0006D2                     u300_41:
  8961  0006D2  5031               	movf	??i2___ftadd,w,c
  8962  0006D4  6E35               	movwf	i2___ftadd@exp2,c
  8963  0006D6  5036               	movf	i2___ftadd@exp1,w,c
  8964  0006D8  B4D8               	btfsc	status,2,c
  8965  0006DA  D00B               	goto	i2l904
  8966  0006DC  5035               	movf	i2___ftadd@exp2,w,c
  8967  0006DE  5C36               	subwf	i2___ftadd@exp1,w,c
  8968  0006E0  B0D8               	btfsc	status,0,c
  8969  0006E2  D00E               	goto	i2l3542
  8970  0006E4  5036               	movf	i2___ftadd@exp1,w,c
  8971  0006E6  0800               	sublw	0
  8972  0006E8  2435               	addwf	i2___ftadd@exp2,w,c
  8973  0006EA  6E31               	movwf	??i2___ftadd& (0+255),c
  8974  0006EC  0E18               	movlw	24
  8975  0006EE  6431               	cpfsgt	??i2___ftadd,c
  8976  0006F0  D007               	goto	i2l3542
  8977  0006F2                     i2l904:
  8978  0006F2  C02E  F02B         	movff	i2___ftadd@f2,?i2___ftadd
  8979  0006F6  C02F  F02C         	movff	i2___ftadd@f2+1,?i2___ftadd+1
  8980  0006FA  C030  F02D         	movff	i2___ftadd@f2+2,?i2___ftadd+2
  8981  0006FE  0012               	return	
  8982  000700                     i2l3542:
  8983  000700  5035               	movf	i2___ftadd@exp2,w,c
  8984  000702  B4D8               	btfsc	status,2,c
  8985  000704  D00B               	goto	i2l908
  8986  000706  5036               	movf	i2___ftadd@exp1,w,c
  8987  000708  5C35               	subwf	i2___ftadd@exp2,w,c
  8988  00070A  B0D8               	btfsc	status,0,c
  8989  00070C  D00E               	goto	i2l3548
  8990  00070E  5035               	movf	i2___ftadd@exp2,w,c
  8991  000710  0800               	sublw	0
  8992  000712  2436               	addwf	i2___ftadd@exp1,w,c
  8993  000714  6E31               	movwf	??i2___ftadd& (0+255),c
  8994  000716  0E18               	movlw	24
  8995  000718  6431               	cpfsgt	??i2___ftadd,c
  8996  00071A  D007               	goto	i2l3548
  8997  00071C                     i2l908:
  8998  00071C  C02B  F02B         	movff	i2___ftadd@f1,?i2___ftadd
  8999  000720  C02C  F02C         	movff	i2___ftadd@f1+1,?i2___ftadd+1
  9000  000724  C02D  F02D         	movff	i2___ftadd@f1+2,?i2___ftadd+2
  9001  000728  0012               	return	
  9002  00072A                     i2l3548:
  9003  00072A  0E06               	movlw	6
  9004  00072C  6E34               	movwf	i2___ftadd@sign,c
  9005  00072E  BE2D               	btfsc	i2___ftadd@f1+2,7,c
  9006  000730  8E34               	bsf	i2___ftadd@sign,7,c
  9007  000732  BE30               	btfsc	i2___ftadd@f2+2,7,c
  9008  000734  8C34               	bsf	i2___ftadd@sign,6,c
  9009  000736  8E2C               	bsf	i2___ftadd@f1+1,7,c
  9010  000738  0EFF               	movlw	255
  9011  00073A  162B               	andwf	i2___ftadd@f1,f,c
  9012  00073C  0EFF               	movlw	255
  9013  00073E  162C               	andwf	i2___ftadd@f1+1,f,c
  9014  000740  0E00               	movlw	0
  9015  000742  162D               	andwf	i2___ftadd@f1+2,f,c
  9016  000744  8E2F               	bsf	i2___ftadd@f2+1,7,c
  9017  000746  0EFF               	movlw	255
  9018  000748  162E               	andwf	i2___ftadd@f2,f,c
  9019  00074A  0EFF               	movlw	255
  9020  00074C  162F               	andwf	i2___ftadd@f2+1,f,c
  9021  00074E  0E00               	movlw	0
  9022  000750  1630               	andwf	i2___ftadd@f2+2,f,c
  9023  000752  5035               	movf	i2___ftadd@exp2,w,c
  9024  000754  5C36               	subwf	i2___ftadd@exp1,w,c
  9025  000756  B0D8               	btfsc	status,0,c
  9026  000758  D01B               	goto	i2l3574
  9027  00075A                     i2l3564:
  9028  00075A  90D8               	bcf	status,0,c
  9029  00075C  362E               	rlcf	i2___ftadd@f2,f,c
  9030  00075E  362F               	rlcf	i2___ftadd@f2+1,f,c
  9031  000760  3630               	rlcf	i2___ftadd@f2+2,f,c
  9032  000762  0635               	decf	i2___ftadd@exp2,f,c
  9033  000764  5036               	movf	i2___ftadd@exp1,w,c
  9034  000766  1835               	xorwf	i2___ftadd@exp2,w,c
  9035  000768  B4D8               	btfsc	status,2,c
  9036  00076A  D00D               	goto	i2l3572
  9037  00076C  0634               	decf	i2___ftadd@sign,f,c
  9038  00076E  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
  9039  000772  0E07               	movlw	7
  9040  000774  1631               	andwf	??i2___ftadd,f,c
  9041  000776  B4D8               	btfsc	status,2,c
  9042  000778  D006               	goto	i2l3572
  9043  00077A  D7EF               	goto	i2l3564
  9044  00077C                     i2l3570:
  9045  00077C  90D8               	bcf	status,0,c
  9046  00077E  322D               	rrcf	i2___ftadd@f1+2,f,c
  9047  000780  322C               	rrcf	i2___ftadd@f1+1,f,c
  9048  000782  322B               	rrcf	i2___ftadd@f1,f,c
  9049  000784  2A36               	incf	i2___ftadd@exp1,f,c
  9050  000786                     i2l3572:
  9051  000786  5035               	movf	i2___ftadd@exp2,w,c
  9052  000788  1836               	xorwf	i2___ftadd@exp1,w,c
  9053  00078A  B4D8               	btfsc	status,2,c
  9054  00078C  D01F               	goto	i2l919
  9055  00078E  D7F6               	goto	i2l3570
  9056  000790                     i2l3574:
  9057  000790  5036               	movf	i2___ftadd@exp1,w,c
  9058  000792  5C35               	subwf	i2___ftadd@exp2,w,c
  9059  000794  B0D8               	btfsc	status,0,c
  9060  000796  D01A               	goto	i2l919
  9061  000798                     i2l3576:
  9062  000798  90D8               	bcf	status,0,c
  9063  00079A  362B               	rlcf	i2___ftadd@f1,f,c
  9064  00079C  362C               	rlcf	i2___ftadd@f1+1,f,c
  9065  00079E  362D               	rlcf	i2___ftadd@f1+2,f,c
  9066  0007A0  0636               	decf	i2___ftadd@exp1,f,c
  9067  0007A2  5036               	movf	i2___ftadd@exp1,w,c
  9068  0007A4  1835               	xorwf	i2___ftadd@exp2,w,c
  9069  0007A6  B4D8               	btfsc	status,2,c
  9070  0007A8  D00D               	goto	i2l3584
  9071  0007AA  0634               	decf	i2___ftadd@sign,f,c
  9072  0007AC  C034  F031         	movff	i2___ftadd@sign,??i2___ftadd
  9073  0007B0  0E07               	movlw	7
  9074  0007B2  1631               	andwf	??i2___ftadd,f,c
  9075  0007B4  B4D8               	btfsc	status,2,c
  9076  0007B6  D006               	goto	i2l3584
  9077  0007B8  D7EF               	goto	i2l3576
  9078  0007BA                     i2l3582:
  9079  0007BA  90D8               	bcf	status,0,c
  9080  0007BC  3230               	rrcf	i2___ftadd@f2+2,f,c
  9081  0007BE  322F               	rrcf	i2___ftadd@f2+1,f,c
  9082  0007C0  322E               	rrcf	i2___ftadd@f2,f,c
  9083  0007C2  2A35               	incf	i2___ftadd@exp2,f,c
  9084  0007C4                     i2l3584:
  9085  0007C4  5035               	movf	i2___ftadd@exp2,w,c
  9086  0007C6  1836               	xorwf	i2___ftadd@exp1,w,c
  9087  0007C8  A4D8               	btfss	status,2,c
  9088  0007CA  D7F7               	goto	i2l3582
  9089  0007CC                     i2l919:
  9090  0007CC  AE34               	btfss	i2___ftadd@sign,7,c
  9091  0007CE  D00C               	goto	i2l928
  9092  0007D0  0EFF               	movlw	255
  9093  0007D2  1A2B               	xorwf	i2___ftadd@f1,f,c
  9094  0007D4  0EFF               	movlw	255
  9095  0007D6  1A2C               	xorwf	i2___ftadd@f1+1,f,c
  9096  0007D8  0EFF               	movlw	255
  9097  0007DA  1A2D               	xorwf	i2___ftadd@f1+2,f,c
  9098  0007DC  0E01               	movlw	1
  9099  0007DE  262B               	addwf	i2___ftadd@f1,f,c
  9100  0007E0  0E00               	movlw	0
  9101  0007E2  222C               	addwfc	i2___ftadd@f1+1,f,c
  9102  0007E4  0E00               	movlw	0
  9103  0007E6  222D               	addwfc	i2___ftadd@f1+2,f,c
  9104  0007E8                     i2l928:
  9105  0007E8  AC34               	btfss	i2___ftadd@sign,6,c
  9106  0007EA  D00C               	goto	i2l3590
  9107  0007EC  0EFF               	movlw	255
  9108  0007EE  1A2E               	xorwf	i2___ftadd@f2,f,c
  9109  0007F0  0EFF               	movlw	255
  9110  0007F2  1A2F               	xorwf	i2___ftadd@f2+1,f,c
  9111  0007F4  0EFF               	movlw	255
  9112  0007F6  1A30               	xorwf	i2___ftadd@f2+2,f,c
  9113  0007F8  0E01               	movlw	1
  9114  0007FA  262E               	addwf	i2___ftadd@f2,f,c
  9115  0007FC  0E00               	movlw	0
  9116  0007FE  222F               	addwfc	i2___ftadd@f2+1,f,c
  9117  000800  0E00               	movlw	0
  9118  000802  2230               	addwfc	i2___ftadd@f2+2,f,c
  9119  000804                     i2l3590:
  9120  000804  0E00               	movlw	0
  9121  000806  6E34               	movwf	i2___ftadd@sign,c
  9122  000808  502B               	movf	i2___ftadd@f1,w,c
  9123  00080A  262E               	addwf	i2___ftadd@f2,f,c
  9124  00080C  502C               	movf	i2___ftadd@f1+1,w,c
  9125  00080E  222F               	addwfc	i2___ftadd@f2+1,f,c
  9126  000810  502D               	movf	i2___ftadd@f1+2,w,c
  9127  000812  2230               	addwfc	i2___ftadd@f2+2,f,c
  9128  000814  AE30               	btfss	i2___ftadd@f2+2,7,c
  9129  000816  D00E               	goto	i2l3600
  9130  000818  0EFF               	movlw	255
  9131  00081A  1A2E               	xorwf	i2___ftadd@f2,f,c
  9132  00081C  0EFF               	movlw	255
  9133  00081E  1A2F               	xorwf	i2___ftadd@f2+1,f,c
  9134  000820  0EFF               	movlw	255
  9135  000822  1A30               	xorwf	i2___ftadd@f2+2,f,c
  9136  000824  0E01               	movlw	1
  9137  000826  262E               	addwf	i2___ftadd@f2,f,c
  9138  000828  0E00               	movlw	0
  9139  00082A  222F               	addwfc	i2___ftadd@f2+1,f,c
  9140  00082C  0E00               	movlw	0
  9141  00082E  2230               	addwfc	i2___ftadd@f2+2,f,c
  9142  000830  0E01               	movlw	1
  9143  000832  6E34               	movwf	i2___ftadd@sign,c
  9144  000834                     i2l3600:
  9145  000834  C02E  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
  9146  000838  C02F  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
  9147  00083C  C030  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
  9148  000840  C036  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
  9149  000844  C034  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
  9150  000848  EC4A  F00D         	call	i2___ftpack	;wreg free
  9151  00084C  C001  F02B         	movff	?i2___ftpack,?i2___ftadd
  9152  000850  C002  F02C         	movff	?i2___ftpack+1,?i2___ftadd+1
  9153  000854  C003  F02D         	movff	?i2___ftpack+2,?i2___ftadd+2
  9154  000858  0012               	return	
  9155  00085A                     __end_ofi2___ftadd:
  9156                           	opt stack 0
  9157                           pclatu	equ	0xFFB
  9158                           pclath	equ	0xFFA
  9159                           tblptru	equ	0xFF8
  9160                           tblptrh	equ	0xFF7
  9161                           tblptrl	equ	0xFF6
  9162                           tablat	equ	0xFF5
  9163                           prodh	equ	0xFF4
  9164                           prodl	equ	0xFF3
  9165                           intcon	equ	0xFF2
  9166                           intcon3	equ	0xFF0
  9167                           postinc0	equ	0xFEE
  9168                           fsr0h	equ	0xFEA
  9169                           fsr0l	equ	0xFE9
  9170                           wreg	equ	0xFE8
  9171                           postdec1	equ	0xFE5
  9172                           fsr1h	equ	0xFE2
  9173                           fsr1l	equ	0xFE1
  9174                           indf2	equ	0xFDF
  9175                           postinc2	equ	0xFDE
  9176                           postdec2	equ	0xFDD
  9177                           fsr2h	equ	0xFDA
  9178                           fsr2l	equ	0xFD9
  9179                           status	equ	0xFD8
  9180                           
  9181 ;; *************** function i2___awtoft *****************
  9182 ;; Defined at:
  9183 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  9184 ;; Parameters:    Size  Location     Type
  9185 ;;  c               2    8[COMRAM] int 
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;  __awtoft        1   11[COMRAM] unsigned char 
  9188 ;; Return value:  Size  Location     Type
  9189 ;;                  3    8[COMRAM] float 
  9190 ;; Registers used:
  9191 ;;		wreg, status,2, status,0, cstack
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9197 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9198 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9200 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9201 ;;Total ram usage:        4 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:    1
  9204 ;; This function calls:
  9205 ;;		i2___ftpack
  9206 ;; This function is called by:
  9207 ;;		i2_angleToPulse
  9208 ;; This function uses a non-reentrant model
  9209 ;;
  9210                           
  9211                           	psect	text46
  9212  00228C                     __ptext46:
  9213                           	opt stack 0
  9214  00228C                     i2___awtoft:
  9215                           	opt stack 19
  9216                           
  9217                           ;incstack = 0
  9218  00228C  0E00               	movlw	0
  9219  00228E  6E0C               	movwf	i2___awtoft@sign,c
  9220  002290  AE0A               	btfss	i2___awtoft@c+1,7,c
  9221  002292  D006               	goto	i2l3530
  9222  002294  6C09               	negf	i2___awtoft@c,c
  9223  002296  1E0A               	comf	i2___awtoft@c+1,f,c
  9224  002298  B0D8               	btfsc	status,0,c
  9225  00229A  2A0A               	incf	i2___awtoft@c+1,f,c
  9226  00229C  0E01               	movlw	1
  9227  00229E  6E0C               	movwf	i2___awtoft@sign,c
  9228  0022A0                     i2l3530:
  9229  0022A0  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
  9230  0022A4  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
  9231  0022A8  6A03               	clrf	i2___ftpack@arg+2,c
  9232  0022AA  0E8E               	movlw	142
  9233  0022AC  6E04               	movwf	i2___ftpack@exp,c
  9234  0022AE  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
  9235  0022B2  EC4A  F00D         	call	i2___ftpack	;wreg free
  9236  0022B6  C001  F009         	movff	?i2___ftpack,?i2___awtoft
  9237  0022BA  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
  9238  0022BE  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
  9239  0022C2  0012               	return	
  9240  0022C4                     __end_ofi2___awtoft:
  9241                           	opt stack 0
  9242                           pclatu	equ	0xFFB
  9243                           pclath	equ	0xFFA
  9244                           tblptru	equ	0xFF8
  9245                           tblptrh	equ	0xFF7
  9246                           tblptrl	equ	0xFF6
  9247                           tablat	equ	0xFF5
  9248                           prodh	equ	0xFF4
  9249                           prodl	equ	0xFF3
  9250                           intcon	equ	0xFF2
  9251                           intcon3	equ	0xFF0
  9252                           postinc0	equ	0xFEE
  9253                           fsr0h	equ	0xFEA
  9254                           fsr0l	equ	0xFE9
  9255                           wreg	equ	0xFE8
  9256                           postdec1	equ	0xFE5
  9257                           fsr1h	equ	0xFE2
  9258                           fsr1l	equ	0xFE1
  9259                           indf2	equ	0xFDF
  9260                           postinc2	equ	0xFDE
  9261                           postdec2	equ	0xFDD
  9262                           fsr2h	equ	0xFDA
  9263                           fsr2l	equ	0xFD9
  9264                           status	equ	0xFD8
  9265                           
  9266 ;; *************** function i2___altoft *****************
  9267 ;; Defined at:
  9268 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  9269 ;; Parameters:    Size  Location     Type
  9270 ;;  c               4    8[COMRAM] long 
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;  __altoft        1   17[COMRAM] unsigned char 
  9273 ;;  __altoft        1   16[COMRAM] unsigned char 
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  3    8[COMRAM] float 
  9276 ;; Registers used:
  9277 ;;		wreg, status,2, status,0, cstack
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9283 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;Total ram usage:       10 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:    1
  9290 ;; This function calls:
  9291 ;;		i2___ftpack
  9292 ;; This function is called by:
  9293 ;;		i2_angleToPulse
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           	psect	text47
  9298  001F0C                     __ptext47:
  9299                           	opt stack 0
  9300  001F0C                     i2___altoft:
  9301                           	opt stack 19
  9302                           
  9303                           ;incstack = 0
  9304  001F0C  0E00               	movlw	0
  9305  001F0E  6E12               	movwf	i2___altoft@sign,c
  9306  001F10  0E8E               	movlw	142
  9307  001F12  6E11               	movwf	i2___altoft@exp,c
  9308  001F14  AE0C               	btfss	i2___altoft@c+3,7,c
  9309  001F16  D011               	goto	i2l3516
  9310  001F18  1E0C               	comf	i2___altoft@c+3,f,c
  9311  001F1A  1E0B               	comf	i2___altoft@c+2,f,c
  9312  001F1C  1E0A               	comf	i2___altoft@c+1,f,c
  9313  001F1E  6C09               	negf	i2___altoft@c,c
  9314  001F20  0E00               	movlw	0
  9315  001F22  220A               	addwfc	i2___altoft@c+1,f,c
  9316  001F24  220B               	addwfc	i2___altoft@c+2,f,c
  9317  001F26  220C               	addwfc	i2___altoft@c+3,f,c
  9318  001F28  0E01               	movlw	1
  9319  001F2A  6E12               	movwf	i2___altoft@sign,c
  9320  001F2C  D006               	goto	i2l3516
  9321  001F2E                     i2l3514:
  9322  001F2E  90D8               	bcf	status,0,c
  9323  001F30  320C               	rrcf	i2___altoft@c+3,f,c
  9324  001F32  320B               	rrcf	i2___altoft@c+2,f,c
  9325  001F34  320A               	rrcf	i2___altoft@c+1,f,c
  9326  001F36  3209               	rrcf	i2___altoft@c,f,c
  9327  001F38  2A11               	incf	i2___altoft@exp,f,c
  9328  001F3A                     i2l3516:
  9329  001F3A  0E00               	movlw	0
  9330  001F3C  1409               	andwf	i2___altoft@c,w,c
  9331  001F3E  6E0D               	movwf	??i2___altoft& (0+255),c
  9332  001F40  0E00               	movlw	0
  9333  001F42  140A               	andwf	i2___altoft@c+1,w,c
  9334  001F44  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
  9335  001F46  0E00               	movlw	0
  9336  001F48  140B               	andwf	i2___altoft@c+2,w,c
  9337  001F4A  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
  9338  001F4C  0EFF               	movlw	255
  9339  001F4E  140C               	andwf	i2___altoft@c+3,w,c
  9340  001F50  6E10               	movwf	(??i2___altoft+3)& (0+255),c
  9341  001F52  500D               	movf	??i2___altoft,w,c
  9342  001F54  100E               	iorwf	??i2___altoft+1,w,c
  9343  001F56  100F               	iorwf	??i2___altoft+2,w,c
  9344  001F58  1010               	iorwf	??i2___altoft+3,w,c
  9345  001F5A  A4D8               	btfss	status,2,c
  9346  001F5C  D7E8               	goto	i2l3514
  9347  001F5E  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
  9348  001F62  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
  9349  001F66  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
  9350  001F6A  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
  9351  001F6E  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
  9352  001F72  EC4A  F00D         	call	i2___ftpack	;wreg free
  9353  001F76  C001  F009         	movff	?i2___ftpack,?i2___altoft
  9354  001F7A  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
  9355  001F7E  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
  9356  001F82  0012               	return	
  9357  001F84                     __end_ofi2___altoft:
  9358                           	opt stack 0
  9359                           pclatu	equ	0xFFB
  9360                           pclath	equ	0xFFA
  9361                           tblptru	equ	0xFF8
  9362                           tblptrh	equ	0xFF7
  9363                           tblptrl	equ	0xFF6
  9364                           tablat	equ	0xFF5
  9365                           prodh	equ	0xFF4
  9366                           prodl	equ	0xFF3
  9367                           intcon	equ	0xFF2
  9368                           intcon3	equ	0xFF0
  9369                           postinc0	equ	0xFEE
  9370                           fsr0h	equ	0xFEA
  9371                           fsr0l	equ	0xFE9
  9372                           wreg	equ	0xFE8
  9373                           postdec1	equ	0xFE5
  9374                           fsr1h	equ	0xFE2
  9375                           fsr1l	equ	0xFE1
  9376                           indf2	equ	0xFDF
  9377                           postinc2	equ	0xFDE
  9378                           postdec2	equ	0xFDD
  9379                           fsr2h	equ	0xFDA
  9380                           fsr2l	equ	0xFD9
  9381                           status	equ	0xFD8
  9382                           
  9383 ;; *************** function i2___ftpack *****************
  9384 ;; Defined at:
  9385 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;  arg             3    0[COMRAM] unsigned um
  9388 ;;  exp             1    3[COMRAM] unsigned char 
  9389 ;;  sign            1    4[COMRAM] unsigned char 
  9390 ;; Auto vars:     Size  Location     Type
  9391 ;;		None
  9392 ;; Return value:  Size  Location     Type
  9393 ;;                  3    0[COMRAM] float 
  9394 ;; Registers used:
  9395 ;;		wreg, status,2, status,0
  9396 ;; Tracked objects:
  9397 ;;		On entry : 0/0
  9398 ;;		On exit  : 0/0
  9399 ;;		Unchanged: 0/0
  9400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9401 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9404 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;Total ram usage:        8 bytes
  9406 ;; Hardware stack levels used:    1
  9407 ;; This function calls:
  9408 ;;		Nothing
  9409 ;; This function is called by:
  9410 ;;		i2___altoft
  9411 ;;		i2___awtoft
  9412 ;;		i2___ftadd
  9413 ;;		i2___ftdiv
  9414 ;;		i2___ftmul
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           	psect	text48
  9419  001A94                     __ptext48:
  9420                           	opt stack 0
  9421  001A94                     i2___ftpack:
  9422                           	opt stack 19
  9423                           
  9424                           ;incstack = 0
  9425  001A94  5004               	movf	i2___ftpack@exp,w,c
  9426  001A96  B4D8               	btfsc	status,2,c
  9427  001A98  D005               	goto	i2l3334
  9428  001A9A  5001               	movf	i2___ftpack@arg,w,c
  9429  001A9C  1002               	iorwf	i2___ftpack@arg+1,w,c
  9430  001A9E  1003               	iorwf	i2___ftpack@arg+2,w,c
  9431  001AA0  A4D8               	btfss	status,2,c
  9432  001AA2  D00C               	goto	i2l3340
  9433  001AA4                     i2l3334:
  9434  001AA4  0E00               	movlw	0
  9435  001AA6  6E01               	movwf	?i2___ftpack,c
  9436  001AA8  0E00               	movlw	0
  9437  001AAA  6E02               	movwf	?i2___ftpack+1,c
  9438  001AAC  0E00               	movlw	0
  9439  001AAE  6E03               	movwf	?i2___ftpack+2,c
  9440  001AB0  0012               	return	
  9441  001AB2                     i2l3338:
  9442  001AB2  2A04               	incf	i2___ftpack@exp,f,c
  9443  001AB4  90D8               	bcf	status,0,c
  9444  001AB6  3203               	rrcf	i2___ftpack@arg+2,f,c
  9445  001AB8  3202               	rrcf	i2___ftpack@arg+1,f,c
  9446  001ABA  3201               	rrcf	i2___ftpack@arg,f,c
  9447  001ABC                     i2l3340:
  9448  001ABC  0E00               	movlw	0
  9449  001ABE  1401               	andwf	i2___ftpack@arg,w,c
  9450  001AC0  6E06               	movwf	??i2___ftpack& (0+255),c
  9451  001AC2  0E00               	movlw	0
  9452  001AC4  1402               	andwf	i2___ftpack@arg+1,w,c
  9453  001AC6  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  9454  001AC8  0EFE               	movlw	254
  9455  001ACA  1403               	andwf	i2___ftpack@arg+2,w,c
  9456  001ACC  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  9457  001ACE  5006               	movf	??i2___ftpack,w,c
  9458  001AD0  1007               	iorwf	??i2___ftpack+1,w,c
  9459  001AD2  1008               	iorwf	??i2___ftpack+2,w,c
  9460  001AD4  B4D8               	btfsc	status,2,c
  9461  001AD6  D00C               	goto	i2l3346
  9462  001AD8  D7EC               	goto	i2l3338
  9463  001ADA                     i2l3342:
  9464  001ADA  2A04               	incf	i2___ftpack@exp,f,c
  9465  001ADC  0E01               	movlw	1
  9466  001ADE  2601               	addwf	i2___ftpack@arg,f,c
  9467  001AE0  0E00               	movlw	0
  9468  001AE2  2202               	addwfc	i2___ftpack@arg+1,f,c
  9469  001AE4  0E00               	movlw	0
  9470  001AE6  2203               	addwfc	i2___ftpack@arg+2,f,c
  9471  001AE8  90D8               	bcf	status,0,c
  9472  001AEA  3203               	rrcf	i2___ftpack@arg+2,f,c
  9473  001AEC  3202               	rrcf	i2___ftpack@arg+1,f,c
  9474  001AEE  3201               	rrcf	i2___ftpack@arg,f,c
  9475  001AF0                     i2l3346:
  9476  001AF0  0E00               	movlw	0
  9477  001AF2  1401               	andwf	i2___ftpack@arg,w,c
  9478  001AF4  6E06               	movwf	??i2___ftpack& (0+255),c
  9479  001AF6  0E00               	movlw	0
  9480  001AF8  1402               	andwf	i2___ftpack@arg+1,w,c
  9481  001AFA  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  9482  001AFC  0EFF               	movlw	255
  9483  001AFE  1403               	andwf	i2___ftpack@arg+2,w,c
  9484  001B00  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  9485  001B02  5006               	movf	??i2___ftpack,w,c
  9486  001B04  1007               	iorwf	??i2___ftpack+1,w,c
  9487  001B06  1008               	iorwf	??i2___ftpack+2,w,c
  9488  001B08  B4D8               	btfsc	status,2,c
  9489  001B0A  D006               	goto	i2l3350
  9490  001B0C  D7E6               	goto	i2l3342
  9491  001B0E                     i2l3348:
  9492  001B0E  0604               	decf	i2___ftpack@exp,f,c
  9493  001B10  90D8               	bcf	status,0,c
  9494  001B12  3601               	rlcf	i2___ftpack@arg,f,c
  9495  001B14  3602               	rlcf	i2___ftpack@arg+1,f,c
  9496  001B16  3603               	rlcf	i2___ftpack@arg+2,f,c
  9497  001B18                     i2l3350:
  9498  001B18  BE02               	btfsc	i2___ftpack@arg+1,7,c
  9499  001B1A  D003               	goto	i2l881
  9500  001B1C  0E02               	movlw	2
  9501  001B1E  6004               	cpfslt	i2___ftpack@exp,c
  9502  001B20  D7F6               	goto	i2l3348
  9503  001B22                     i2l881:
  9504  001B22  A004               	btfss	i2___ftpack@exp,0,c
  9505  001B24  9E02               	bcf	i2___ftpack@arg+1,7,c
  9506  001B26  90D8               	bcf	status,0,c
  9507  001B28  3204               	rrcf	i2___ftpack@exp,f,c
  9508  001B2A  5004               	movf	i2___ftpack@exp,w,c
  9509  001B2C  1203               	iorwf	i2___ftpack@arg+2,f,c
  9510  001B2E  5005               	movf	i2___ftpack@sign,w,c
  9511  001B30  A4D8               	btfss	status,2,c
  9512  001B32  8E03               	bsf	i2___ftpack@arg+2,7,c
  9513  001B34  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  9514  001B38  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  9515  001B3C  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  9516  001B40  0012               	return	
  9517  001B42                     __end_ofi2___ftpack:
  9518                           	opt stack 0
  9519                           pclatu	equ	0xFFB
  9520                           pclath	equ	0xFFA
  9521                           tblptru	equ	0xFF8
  9522                           tblptrh	equ	0xFF7
  9523                           tblptrl	equ	0xFF6
  9524                           tablat	equ	0xFF5
  9525                           prodh	equ	0xFF4
  9526                           prodl	equ	0xFF3
  9527                           intcon	equ	0xFF2
  9528                           intcon3	equ	0xFF0
  9529                           postinc0	equ	0xFEE
  9530                           fsr0h	equ	0xFEA
  9531                           fsr0l	equ	0xFE9
  9532                           wreg	equ	0xFE8
  9533                           postdec1	equ	0xFE5
  9534                           fsr1h	equ	0xFE2
  9535                           fsr1l	equ	0xFE1
  9536                           indf2	equ	0xFDF
  9537                           postinc2	equ	0xFDE
  9538                           postdec2	equ	0xFDD
  9539                           fsr2h	equ	0xFDA
  9540                           fsr2l	equ	0xFD9
  9541                           status	equ	0xFD8
  9542                           
  9543 ;; *************** function _servoInterruptService *****************
  9544 ;; Defined at:
  9545 ;;		line 47 in file "servo.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;		None
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;  i               2   19[COMRAM] int 
  9550 ;;  flags           8   11[COMRAM] int [4]
  9551 ;; Return value:  Size  Location     Type
  9552 ;;                  1    wreg      void 
  9553 ;; Registers used:
  9554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9555 ;; Tracked objects:
  9556 ;;		On entry : 0/0
  9557 ;;		On exit  : 0/0
  9558 ;;		Unchanged: 0/0
  9559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;Total ram usage:       12 bytes
  9565 ;; Hardware stack levels used:    1
  9566 ;; Hardware stack levels required when called:    1
  9567 ;; This function calls:
  9568 ;;		i2_digitalRead
  9569 ;;		i2_digitalWrite
  9570 ;;		i2_startTimer
  9571 ;; This function is called by:
  9572 ;;		_service
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           	psect	text49
  9577  0004DA                     __ptext49:
  9578                           	opt stack 0
  9579  0004DA                     _servoInterruptService:
  9580                           	opt stack 21
  9581                           
  9582                           ;servo.c: 49: int flags[4];
  9583                           ;servo.c: 50: flags[0] = TMR0IF;
  9584                           
  9585                           ;incstack = 0
  9586  0004DA  A4F2               	btfss	intcon,2,c	;volatile
  9587  0004DC  D002               	goto	i2u386_40
  9588  0004DE  0E01               	movlw	1
  9589  0004E0  D001               	goto	i2u387_40
  9590  0004E2                     i2u386_40:
  9591  0004E2  0E00               	movlw	0
  9592  0004E4                     i2u387_40:
  9593  0004E4  6E0C               	movwf	servoInterruptService@flags,c
  9594  0004E6  6A0D               	clrf	servoInterruptService@flags+1,c
  9595                           
  9596                           ;servo.c: 51: flags[1] = TMR1IF;
  9597  0004E8  A09E               	btfss	3998,0,c	;volatile
  9598  0004EA  D002               	goto	i2u388_40
  9599  0004EC  0E01               	movlw	1
  9600  0004EE  D001               	goto	i2u389_40
  9601  0004F0                     i2u388_40:
  9602  0004F0  0E00               	movlw	0
  9603  0004F2                     i2u389_40:
  9604  0004F2  6E0E               	movwf	servoInterruptService@flags+2,c
  9605  0004F4  6A0F               	clrf	servoInterruptService@flags+3,c
  9606                           
  9607                           ;servo.c: 52: flags[2] = TMR2IF;
  9608  0004F6  A29E               	btfss	3998,1,c	;volatile
  9609  0004F8  D002               	goto	i2u390_40
  9610  0004FA  0E01               	movlw	1
  9611  0004FC  D001               	goto	i2u391_40
  9612  0004FE                     i2u390_40:
  9613  0004FE  0E00               	movlw	0
  9614  000500                     i2u391_40:
  9615  000500  6E10               	movwf	servoInterruptService@flags+4,c
  9616  000502  6A11               	clrf	servoInterruptService@flags+5,c
  9617                           
  9618                           ;servo.c: 53: flags[3] = TMR3IF;
  9619  000504  A2A1               	btfss	4001,1,c	;volatile
  9620  000506  D002               	goto	i2u392_40
  9621  000508  0E01               	movlw	1
  9622  00050A  D001               	goto	i2u393_40
  9623  00050C                     i2u392_40:
  9624  00050C  0E00               	movlw	0
  9625  00050E                     i2u393_40:
  9626  00050E  6E12               	movwf	servoInterruptService@flags+6,c
  9627  000510  6A13               	clrf	servoInterruptService@flags+7,c
  9628                           
  9629                           ;servo.c: 55: for(int i = 0; i < 4; i++){
  9630  000512  0E00               	movlw	0
  9631  000514  6E15               	movwf	servoInterruptService@i+1,c
  9632  000516  0E00               	movlw	0
  9633  000518  6E14               	movwf	servoInterruptService@i,c
  9634  00051A  BE15               	btfsc	servoInterruptService@i+1,7,c
  9635  00051C  D008               	goto	i2l4156
  9636  00051E  5015               	movf	servoInterruptService@i+1,w,c
  9637  000520  E105               	bnz	i2u394_40
  9638  000522  0E04               	movlw	4
  9639  000524  5C14               	subwf	servoInterruptService@i,w,c
  9640  000526  B0D8               	btfsc	status,0,c
  9641  000528  0012               	return	
  9642  00052A  D001               	goto	i2l4156
  9643  00052C                     i2u394_40:
  9644  00052C  0012               	return	
  9645  00052E                     i2l4156:
  9646                           
  9647                           ;servo.c: 56: if(flags[i]){
  9648  00052E  90D8               	bcf	status,0,c
  9649  000530  3414               	rlcf	servoInterruptService@i,w,c
  9650  000532  6ED9               	movwf	fsr2l,c
  9651  000534  3415               	rlcf	servoInterruptService@i+1,w,c
  9652  000536  6EDA               	movwf	fsr2h,c
  9653  000538  0E0C               	movlw	low servoInterruptService@flags
  9654  00053A  26D9               	addwf	fsr2l,f,c
  9655  00053C  0E00               	movlw	high servoInterruptService@flags
  9656  00053E  22DA               	addwfc	fsr2h,f,c
  9657  000540  50DE               	movf	postinc2,w,c
  9658  000542  10DE               	iorwf	postinc2,w,c
  9659  000544  B4D8               	btfsc	status,2,c
  9660  000546  D0AB               	goto	i2l4170
  9661                           
  9662                           ;servo.c: 58: if(digitalRead(port[i],pin[i])){
  9663  000548  90D8               	bcf	status,0,c
  9664  00054A  3414               	rlcf	servoInterruptService@i,w,c
  9665  00054C  6ED9               	movwf	fsr2l,c
  9666  00054E  3415               	rlcf	servoInterruptService@i+1,w,c
  9667  000550  6EDA               	movwf	fsr2h,c
  9668  000552  0E18               	movlw	low _port
  9669  000554  26D9               	addwf	fsr2l,f,c
  9670  000556  0E01               	movlw	high _port
  9671  000558  22DA               	addwfc	fsr2h,f,c
  9672  00055A  CFDE F001          	movff	postinc2,i2digitalRead@port
  9673  00055E  CFDD F002          	movff	postdec2,i2digitalRead@port+1
  9674  000562  90D8               	bcf	status,0,c
  9675  000564  3414               	rlcf	servoInterruptService@i,w,c
  9676  000566  6ED9               	movwf	fsr2l,c
  9677  000568  3415               	rlcf	servoInterruptService@i+1,w,c
  9678  00056A  6EDA               	movwf	fsr2h,c
  9679  00056C  0E10               	movlw	low _pin
  9680  00056E  26D9               	addwf	fsr2l,f,c
  9681  000570  0E01               	movlw	high _pin
  9682  000572  22DA               	addwfc	fsr2h,f,c
  9683  000574  CFDE F003          	movff	postinc2,i2digitalRead@pin
  9684  000578  CFDD F004          	movff	postdec2,i2digitalRead@pin+1
  9685  00057C  ECF1  F00C         	call	i2_digitalRead	;wreg free
  9686  000580  5001               	movf	?i2_digitalRead,w,c
  9687  000582  1002               	iorwf	?i2_digitalRead+1,w,c
  9688  000584  B4D8               	btfsc	status,2,c
  9689  000586  D02F               	goto	i2l4164
  9690                           
  9691                           ;servo.c: 59: startTimer(i,15535);
  9692  000588  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
  9693  00058C  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
  9694  000590  0EAF               	movlw	175
  9695  000592  6E03               	movwf	i2startTimer@val,c
  9696  000594  0E3C               	movlw	60
  9697  000596  6E04               	movwf	i2startTimer@val+1,c
  9698  000598  0E00               	movlw	0
  9699  00059A  6E05               	movwf	i2startTimer@val+2,c
  9700  00059C  0E00               	movlw	0
  9701  00059E  6E06               	movwf	i2startTimer@val+3,c
  9702  0005A0  EC4F  F010         	call	i2_startTimer	;wreg free
  9703                           
  9704                           ;servo.c: 60: digitalWrite(port[i],pin[i],0);
  9705  0005A4  90D8               	bcf	status,0,c
  9706  0005A6  3414               	rlcf	servoInterruptService@i,w,c
  9707  0005A8  6ED9               	movwf	fsr2l,c
  9708  0005AA  3415               	rlcf	servoInterruptService@i+1,w,c
  9709  0005AC  6EDA               	movwf	fsr2h,c
  9710  0005AE  0E18               	movlw	low _port
  9711  0005B0  26D9               	addwf	fsr2l,f,c
  9712  0005B2  0E01               	movlw	high _port
  9713  0005B4  22DA               	addwfc	fsr2h,f,c
  9714  0005B6  CFDE F001          	movff	postinc2,i2digitalWrite@port
  9715  0005BA  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  9716  0005BE  90D8               	bcf	status,0,c
  9717  0005C0  3414               	rlcf	servoInterruptService@i,w,c
  9718  0005C2  6ED9               	movwf	fsr2l,c
  9719  0005C4  3415               	rlcf	servoInterruptService@i+1,w,c
  9720  0005C6  6EDA               	movwf	fsr2h,c
  9721  0005C8  0E10               	movlw	low _pin
  9722  0005CA  26D9               	addwf	fsr2l,f,c
  9723  0005CC  0E01               	movlw	high _pin
  9724  0005CE  22DA               	addwfc	fsr2h,f,c
  9725  0005D0  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  9726  0005D4  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  9727  0005D8  0E00               	movlw	0
  9728  0005DA  6E06               	movwf	i2digitalWrite@val+1,c
  9729  0005DC  0E00               	movlw	0
  9730  0005DE  6E05               	movwf	i2digitalWrite@val,c
  9731  0005E0  ECA1  F00D         	call	i2_digitalWrite	;wreg free
  9732                           
  9733                           ;servo.c: 61: }
  9734  0005E4  D047               	goto	i2l4168
  9735  0005E6                     i2l4164:
  9736                           
  9737                           ;servo.c: 62: else{
  9738                           ;servo.c: 63: startTimer(i, pulse[i]);
  9739  0005E6  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
  9740  0005EA  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
  9741  0005EE  0E00               	movlw	low _pulse
  9742  0005F0  6E0A               	movwf	??_servoInterruptService& (0+255),c
  9743  0005F2  0E01               	movlw	high _pulse
  9744  0005F4  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
  9745  0005F6  90D8               	bcf	status,0,c
  9746  0005F8  3414               	rlcf	servoInterruptService@i,w,c
  9747  0005FA  6ED9               	movwf	fsr2l,c
  9748  0005FC  3415               	rlcf	servoInterruptService@i+1,w,c
  9749  0005FE  6EDA               	movwf	fsr2h,c
  9750  000600  90D8               	bcf	status,0,c
  9751  000602  36D9               	rlcf	fsr2l,f,c
  9752  000604  36DA               	rlcf	fsr2h,f,c
  9753  000606  500A               	movf	??_servoInterruptService,w,c
  9754  000608  26D9               	addwf	fsr2l,f,c
  9755  00060A  500B               	movf	??_servoInterruptService+1,w,c
  9756  00060C  22DA               	addwfc	fsr2h,f,c
  9757  00060E  CFDE F003          	movff	postinc2,i2startTimer@val
  9758  000612  CFDE F004          	movff	postinc2,i2startTimer@val+1
  9759  000616  CFDE F005          	movff	postinc2,i2startTimer@val+2
  9760  00061A  CFDE F006          	movff	postinc2,i2startTimer@val+3
  9761  00061E  EC4F  F010         	call	i2_startTimer	;wreg free
  9762                           
  9763                           ;servo.c: 64: digitalWrite(port[i],pin[i],1);
  9764  000622  90D8               	bcf	status,0,c
  9765  000624  3414               	rlcf	servoInterruptService@i,w,c
  9766  000626  6ED9               	movwf	fsr2l,c
  9767  000628  3415               	rlcf	servoInterruptService@i+1,w,c
  9768  00062A  6EDA               	movwf	fsr2h,c
  9769  00062C  0E18               	movlw	low _port
  9770  00062E  26D9               	addwf	fsr2l,f,c
  9771  000630  0E01               	movlw	high _port
  9772  000632  22DA               	addwfc	fsr2h,f,c
  9773  000634  CFDE F001          	movff	postinc2,i2digitalWrite@port
  9774  000638  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
  9775  00063C  90D8               	bcf	status,0,c
  9776  00063E  3414               	rlcf	servoInterruptService@i,w,c
  9777  000640  6ED9               	movwf	fsr2l,c
  9778  000642  3415               	rlcf	servoInterruptService@i+1,w,c
  9779  000644  6EDA               	movwf	fsr2h,c
  9780  000646  0E10               	movlw	low _pin
  9781  000648  26D9               	addwf	fsr2l,f,c
  9782  00064A  0E01               	movlw	high _pin
  9783  00064C  22DA               	addwfc	fsr2h,f,c
  9784  00064E  CFDE F003          	movff	postinc2,i2digitalWrite@pin
  9785  000652  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
  9786  000656  0E00               	movlw	0
  9787  000658  6E06               	movwf	i2digitalWrite@val+1,c
  9788  00065A  0E01               	movlw	1
  9789  00065C  6E05               	movwf	i2digitalWrite@val,c
  9790  00065E  ECA1  F00D         	call	i2_digitalWrite	;wreg free
  9791                           
  9792                           ;servo.c: 65: }
  9793                           ;servo.c: 68: switch(i){
  9794  000662  D008               	goto	i2l4168
  9795  000664                     i2l557:
  9796  000664  94F2               	bcf	intcon,2,c	;volatile
  9797  000666  D01B               	goto	i2l4170
  9798  000668                     i2l559:
  9799  000668  909E               	bcf	3998,0,c	;volatile
  9800  00066A  D019               	goto	i2l4170
  9801  00066C                     i2l560:
  9802  00066C  929E               	bcf	3998,1,c	;volatile
  9803  00066E  D017               	goto	i2l4170
  9804  000670                     i2l561:
  9805  000670  92A1               	bcf	4001,1,c	;volatile
  9806                           
  9807                           ;servo.c: 73: }
  9808  000672  D015               	goto	i2l4170
  9809  000674                     i2l4168:
  9810  000674  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
  9811  000678  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
  9812                           
  9813                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9814                           ; Switch size 1, requested type "space"
  9815                           ; Number of cases is 1, Range of values is 0 to 0
  9816                           ; switch strategies available:
  9817                           ; Name         Instructions Cycles
  9818                           ; simple_byte            4     3 (average)
  9819                           ;	Chosen strategy is simple_byte
  9820  00067C  500B               	movf	??_servoInterruptService+1,w,c
  9821  00067E  0A00               	xorlw	0	; case 0
  9822  000680  A4D8               	btfss	status,2,c
  9823  000682  D00D               	goto	i2l4170
  9824                           
  9825                           ; Switch size 1, requested type "space"
  9826                           ; Number of cases is 4, Range of values is 0 to 3
  9827                           ; switch strategies available:
  9828                           ; Name         Instructions Cycles
  9829                           ; simple_byte           13     7 (average)
  9830                           ;	Chosen strategy is simple_byte
  9831  000684  500A               	movf	??_servoInterruptService,w,c
  9832  000686  0A00               	xorlw	0	; case 0
  9833  000688  B4D8               	btfsc	status,2,c
  9834  00068A  D7EC               	goto	i2l557
  9835  00068C  0A01               	xorlw	1	; case 1
  9836  00068E  B4D8               	btfsc	status,2,c
  9837  000690  D7EB               	goto	i2l559
  9838  000692  0A03               	xorlw	3	; case 2
  9839  000694  B4D8               	btfsc	status,2,c
  9840  000696  D7EA               	goto	i2l560
  9841  000698  0A01               	xorlw	1	; case 3
  9842  00069A  B4D8               	btfsc	status,2,c
  9843  00069C  D7E9               	goto	i2l561
  9844  00069E                     i2l4170:
  9845  00069E  4A14               	infsnz	servoInterruptService@i,f,c
  9846  0006A0  2A15               	incf	servoInterruptService@i+1,f,c
  9847  0006A2  BE15               	btfsc	servoInterruptService@i+1,7,c
  9848  0006A4  D744               	goto	i2l4156
  9849  0006A6  5015               	movf	servoInterruptService@i+1,w,c
  9850  0006A8  E101               	bnz	i2l562
  9851  0006AA  D73B               	goto	L1
  9852  0006AC                     i2l562:
  9853  0006AC  0012               	return		;funcret
  9854  0006AE                     __end_of_servoInterruptService:
  9855                           	opt stack 0
  9856                           pclatu	equ	0xFFB
  9857                           pclath	equ	0xFFA
  9858                           tblptru	equ	0xFF8
  9859                           tblptrh	equ	0xFF7
  9860                           tblptrl	equ	0xFF6
  9861                           tablat	equ	0xFF5
  9862                           prodh	equ	0xFF4
  9863                           prodl	equ	0xFF3
  9864                           intcon	equ	0xFF2
  9865                           intcon3	equ	0xFF0
  9866                           postinc0	equ	0xFEE
  9867                           fsr0h	equ	0xFEA
  9868                           fsr0l	equ	0xFE9
  9869                           wreg	equ	0xFE8
  9870                           postdec1	equ	0xFE5
  9871                           fsr1h	equ	0xFE2
  9872                           fsr1l	equ	0xFE1
  9873                           indf2	equ	0xFDF
  9874                           postinc2	equ	0xFDE
  9875                           postdec2	equ	0xFDD
  9876                           fsr2h	equ	0xFDA
  9877                           fsr2l	equ	0xFD9
  9878                           status	equ	0xFD8
  9879                           
  9880 ;; *************** function i2_startTimer *****************
  9881 ;; Defined at:
  9882 ;;		line 75 in file "timer.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;  timer           2    0[COMRAM] int 
  9885 ;;  val             4    2[COMRAM] long 
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;                  1    wreg      void 
  9890 ;; Registers used:
  9891 ;;		wreg, status,2, status,0
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9897 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9899 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9900 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9901 ;;Total ram usage:        8 bytes
  9902 ;; Hardware stack levels used:    1
  9903 ;; This function calls:
  9904 ;;		Nothing
  9905 ;; This function is called by:
  9906 ;;		_servoInterruptService
  9907 ;; This function uses a non-reentrant model
  9908 ;;
  9909                           
  9910                           	psect	text50
  9911  00209E                     __ptext50:
  9912                           	opt stack 0
  9913  00209E                     i2_startTimer:
  9914                           	opt stack 21
  9915                           
  9916                           ;timer.c: 76: switch(timer){
  9917                           
  9918                           ;incstack = 0
  9919  00209E  D012               	goto	i2l4000
  9920  0020A0                     i2l417:
  9921                           
  9922                           ;timer.c: 78: TMR0H = val>>8;
  9923  0020A0  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
  9924                           
  9925                           ;timer.c: 79: TMR0L = val;
  9926  0020A4  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
  9927                           
  9928                           ;timer.c: 80: T0CON |= 1<<7;
  9929  0020A8  8ED5               	bsf	4053,7,c	;volatile
  9930                           
  9931                           ;timer.c: 81: break;
  9932  0020AA  0012               	return	
  9933  0020AC                     i2l419:
  9934                           
  9935                           ;timer.c: 83: TMR1H = val>>8;
  9936  0020AC  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
  9937                           
  9938                           ;timer.c: 84: TMR1L = val;
  9939  0020B0  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
  9940                           
  9941                           ;timer.c: 85: T1CON |= 1<<0;
  9942  0020B4  80CD               	bsf	4045,0,c	;volatile
  9943                           
  9944                           ;timer.c: 86: break;
  9945  0020B6  0012               	return	
  9946  0020B8                     i2l420:
  9947                           
  9948                           ;timer.c: 88: TMR3H = val>>8;
  9949  0020B8  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
  9950                           
  9951                           ;timer.c: 89: TMR3L = val;
  9952  0020BC  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
  9953                           
  9954                           ;timer.c: 90: T3CON |= 1<<0;
  9955  0020C0  80B1               	bsf	4017,0,c	;volatile
  9956                           
  9957                           ;timer.c: 91: }
  9958  0020C2  0012               	return	
  9959  0020C4                     i2l4000:
  9960  0020C4  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
  9961  0020C8  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
  9962                           
  9963                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9964                           ; Switch size 1, requested type "space"
  9965                           ; Number of cases is 1, Range of values is 0 to 0
  9966                           ; switch strategies available:
  9967                           ; Name         Instructions Cycles
  9968                           ; simple_byte            4     3 (average)
  9969                           ;	Chosen strategy is simple_byte
  9970  0020CC  5008               	movf	??i2_startTimer+1,w,c
  9971  0020CE  0A00               	xorlw	0	; case 0
  9972  0020D0  A4D8               	btfss	status,2,c
  9973  0020D2  0012               	return	
  9974                           
  9975                           ; Switch size 1, requested type "space"
  9976                           ; Number of cases is 3, Range of values is 0 to 3
  9977                           ; switch strategies available:
  9978                           ; Name         Instructions Cycles
  9979                           ; simple_byte           10     6 (average)
  9980                           ;	Chosen strategy is simple_byte
  9981  0020D4  5007               	movf	??i2_startTimer,w,c
  9982  0020D6  0A00               	xorlw	0	; case 0
  9983  0020D8  B4D8               	btfsc	status,2,c
  9984  0020DA  D7E2               	goto	i2l417
  9985  0020DC  0A01               	xorlw	1	; case 1
  9986  0020DE  B4D8               	btfsc	status,2,c
  9987  0020E0  D7E5               	goto	i2l419
  9988  0020E2  0A02               	xorlw	2	; case 3
  9989  0020E4  A4D8               	btfss	status,2,c
  9990  0020E6  0012               	return	
  9991  0020E8  D7E7               	goto	i2l420
  9992  0020EA                     __end_ofi2_startTimer:
  9993                           	opt stack 0
  9994                           pclatu	equ	0xFFB
  9995                           pclath	equ	0xFFA
  9996                           tblptru	equ	0xFF8
  9997                           tblptrh	equ	0xFF7
  9998                           tblptrl	equ	0xFF6
  9999                           tablat	equ	0xFF5
 10000                           prodh	equ	0xFF4
 10001                           prodl	equ	0xFF3
 10002                           intcon	equ	0xFF2
 10003                           intcon3	equ	0xFF0
 10004                           postinc0	equ	0xFEE
 10005                           fsr0h	equ	0xFEA
 10006                           fsr0l	equ	0xFE9
 10007                           wreg	equ	0xFE8
 10008                           postdec1	equ	0xFE5
 10009                           fsr1h	equ	0xFE2
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           postdec2	equ	0xFDD
 10014                           fsr2h	equ	0xFDA
 10015                           fsr2l	equ	0xFD9
 10016                           status	equ	0xFD8
 10017                           
 10018 ;; *************** function i2_digitalWrite *****************
 10019 ;; Defined at:
 10020 ;;		line 53 in file "iopin.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;  port            2    0[COMRAM] int 
 10023 ;;  pin             2    2[COMRAM] int 
 10024 ;;  val             2    4[COMRAM] int 
 10025 ;; Auto vars:     Size  Location     Type
 10026 ;;		None
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  1    wreg      void 
 10029 ;; Registers used:
 10030 ;;		wreg, status,2, status,0
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10036 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10039 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10040 ;;Total ram usage:        9 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; This function calls:
 10043 ;;		Nothing
 10044 ;; This function is called by:
 10045 ;;		_servoInterruptService
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text51
 10050  001B42                     __ptext51:
 10051                           	opt stack 0
 10052  001B42                     i2_digitalWrite:
 10053                           	opt stack 21
 10054                           
 10055                           ;iopin.c: 54: pin = 1 << pin;
 10056                           
 10057                           ;incstack = 0
 10058  001B42  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
 10059  001B46  0E01               	movlw	1
 10060  001B48  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
 10061  001B4A  0E00               	movlw	0
 10062  001B4C  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
 10063  001B4E  2A07               	incf	??i2_digitalWrite,f,c
 10064  001B50  D003               	goto	i2u360_44
 10065  001B52                     i2u360_45:
 10066  001B52  90D8               	bcf	status,0,c
 10067  001B54  3608               	rlcf	??i2_digitalWrite+1,f,c
 10068  001B56  3609               	rlcf	??i2_digitalWrite+2,f,c
 10069  001B58                     i2u360_44:
 10070  001B58  2E07               	decfsz	??i2_digitalWrite,f,c
 10071  001B5A  D7FB               	goto	i2u360_45
 10072  001B5C  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
 10073  001B60  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
 10074                           
 10075                           ;iopin.c: 55: if(val == 0){
 10076  001B64  5005               	movf	i2digitalWrite@val,w,c
 10077  001B66  1006               	iorwf	i2digitalWrite@val+1,w,c
 10078  001B68  A4D8               	btfss	status,2,c
 10079  001B6A  D02B               	goto	i2l3986
 10080                           
 10081                           ;iopin.c: 56: pin ^= 0xff;
 10082  001B6C  0EFF               	movlw	255
 10083  001B6E  1A03               	xorwf	i2digitalWrite@pin,f,c
 10084                           
 10085                           ;iopin.c: 57: }
 10086                           ;iopin.c: 59: switch(port){
 10087  001B70  D028               	goto	i2l3986
 10088  001B72                     i2l3962:
 10089  001B72  0405               	decf	i2digitalWrite@val,w,c
 10090  001B74  1006               	iorwf	i2digitalWrite@val+1,w,c
 10091  001B76  A4D8               	btfss	status,2,c
 10092  001B78  D003               	goto	i2l3966
 10093  001B7A  5003               	movf	i2digitalWrite@pin,w,c
 10094  001B7C  1289               	iorwf	3977,f,c	;volatile
 10095  001B7E  0012               	return	
 10096  001B80                     i2l3966:
 10097                           
 10098                           ;iopin.c: 61: else LATA &= pin;
 10099  001B80  5003               	movf	i2digitalWrite@pin,w,c
 10100  001B82  1689               	andwf	3977,f,c	;volatile
 10101                           
 10102                           ;iopin.c: 62: break;
 10103  001B84  0012               	return	
 10104  001B86                     i2l3968:
 10105  001B86  0405               	decf	i2digitalWrite@val,w,c
 10106  001B88  1006               	iorwf	i2digitalWrite@val+1,w,c
 10107  001B8A  A4D8               	btfss	status,2,c
 10108  001B8C  D003               	goto	i2l3972
 10109  001B8E  5003               	movf	i2digitalWrite@pin,w,c
 10110  001B90  128A               	iorwf	3978,f,c	;volatile
 10111  001B92  0012               	return	
 10112  001B94                     i2l3972:
 10113                           
 10114                           ;iopin.c: 64: else LATB &= pin;
 10115  001B94  5003               	movf	i2digitalWrite@pin,w,c
 10116  001B96  168A               	andwf	3978,f,c	;volatile
 10117                           
 10118                           ;iopin.c: 65: break;
 10119  001B98  0012               	return	
 10120  001B9A                     i2l3974:
 10121  001B9A  0405               	decf	i2digitalWrite@val,w,c
 10122  001B9C  1006               	iorwf	i2digitalWrite@val+1,w,c
 10123  001B9E  A4D8               	btfss	status,2,c
 10124  001BA0  D003               	goto	i2l3978
 10125  001BA2  5003               	movf	i2digitalWrite@pin,w,c
 10126  001BA4  128B               	iorwf	3979,f,c	;volatile
 10127  001BA6  0012               	return	
 10128  001BA8                     i2l3978:
 10129                           
 10130                           ;iopin.c: 67: else LATC &= pin;
 10131  001BA8  5003               	movf	i2digitalWrite@pin,w,c
 10132  001BAA  168B               	andwf	3979,f,c	;volatile
 10133                           
 10134                           ;iopin.c: 68: break;
 10135  001BAC  0012               	return	
 10136  001BAE                     i2l3980:
 10137  001BAE  0405               	decf	i2digitalWrite@val,w,c
 10138  001BB0  1006               	iorwf	i2digitalWrite@val+1,w,c
 10139  001BB2  A4D8               	btfss	status,2,c
 10140  001BB4  D003               	goto	i2l3984
 10141  001BB6  5003               	movf	i2digitalWrite@pin,w,c
 10142  001BB8  128C               	iorwf	3980,f,c	;volatile
 10143  001BBA  0012               	return	
 10144  001BBC                     i2l3984:
 10145                           
 10146                           ;iopin.c: 70: else LATD &= pin;
 10147  001BBC  5003               	movf	i2digitalWrite@pin,w,c
 10148  001BBE  168C               	andwf	3980,f,c	;volatile
 10149                           
 10150                           ;iopin.c: 71: }
 10151  001BC0  0012               	return	
 10152  001BC2                     i2l3986:
 10153  001BC2  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
 10154  001BC6  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
 10155                           
 10156                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10157                           ; Switch size 1, requested type "space"
 10158                           ; Number of cases is 1, Range of values is 0 to 0
 10159                           ; switch strategies available:
 10160                           ; Name         Instructions Cycles
 10161                           ; simple_byte            4     3 (average)
 10162                           ;	Chosen strategy is simple_byte
 10163  001BCA  5008               	movf	??i2_digitalWrite+1,w,c
 10164  001BCC  0A00               	xorlw	0	; case 0
 10165  001BCE  A4D8               	btfss	status,2,c
 10166  001BD0  0012               	return	
 10167                           
 10168                           ; Switch size 1, requested type "space"
 10169                           ; Number of cases is 4, Range of values is 0 to 3
 10170                           ; switch strategies available:
 10171                           ; Name         Instructions Cycles
 10172                           ; simple_byte           13     7 (average)
 10173                           ;	Chosen strategy is simple_byte
 10174  001BD2  5007               	movf	??i2_digitalWrite,w,c
 10175  001BD4  0A00               	xorlw	0	; case 0
 10176  001BD6  B4D8               	btfsc	status,2,c
 10177  001BD8  D7CC               	goto	i2l3962
 10178  001BDA  0A01               	xorlw	1	; case 1
 10179  001BDC  B4D8               	btfsc	status,2,c
 10180  001BDE  D7D3               	goto	i2l3968
 10181  001BE0  0A03               	xorlw	3	; case 2
 10182  001BE2  B4D8               	btfsc	status,2,c
 10183  001BE4  D7DA               	goto	i2l3974
 10184  001BE6  0A01               	xorlw	1	; case 3
 10185  001BE8  A4D8               	btfss	status,2,c
 10186  001BEA  0012               	return	
 10187  001BEC  D7E0               	goto	i2l3980
 10188  001BEE                     __end_ofi2_digitalWrite:
 10189                           	opt stack 0
 10190                           pclatu	equ	0xFFB
 10191                           pclath	equ	0xFFA
 10192                           tblptru	equ	0xFF8
 10193                           tblptrh	equ	0xFF7
 10194                           tblptrl	equ	0xFF6
 10195                           tablat	equ	0xFF5
 10196                           prodh	equ	0xFF4
 10197                           prodl	equ	0xFF3
 10198                           intcon	equ	0xFF2
 10199                           intcon3	equ	0xFF0
 10200                           postinc0	equ	0xFEE
 10201                           fsr0h	equ	0xFEA
 10202                           fsr0l	equ	0xFE9
 10203                           wreg	equ	0xFE8
 10204                           postdec1	equ	0xFE5
 10205                           fsr1h	equ	0xFE2
 10206                           fsr1l	equ	0xFE1
 10207                           indf2	equ	0xFDF
 10208                           postinc2	equ	0xFDE
 10209                           postdec2	equ	0xFDD
 10210                           fsr2h	equ	0xFDA
 10211                           fsr2l	equ	0xFD9
 10212                           status	equ	0xFD8
 10213                           
 10214 ;; *************** function i2_digitalRead *****************
 10215 ;; Defined at:
 10216 ;;		line 43 in file "iopin.c"
 10217 ;; Parameters:    Size  Location     Type
 10218 ;;  port            2    0[COMRAM] int 
 10219 ;;  pin             2    2[COMRAM] int 
 10220 ;; Auto vars:     Size  Location     Type
 10221 ;;		None
 10222 ;; Return value:  Size  Location     Type
 10223 ;;                  2    0[COMRAM] int 
 10224 ;; Registers used:
 10225 ;;		wreg, status,2, status,0
 10226 ;; Tracked objects:
 10227 ;;		On entry : 0/0
 10228 ;;		On exit  : 0/0
 10229 ;;		Unchanged: 0/0
 10230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10235 ;;Total ram usage:        6 bytes
 10236 ;; Hardware stack levels used:    1
 10237 ;; This function calls:
 10238 ;;		Nothing
 10239 ;; This function is called by:
 10240 ;;		_servoInterruptService
 10241 ;; This function uses a non-reentrant model
 10242 ;;
 10243                           
 10244                           	psect	text52
 10245  0019E2                     __ptext52:
 10246                           	opt stack 0
 10247  0019E2                     i2_digitalRead:
 10248                           	opt stack 21
 10249                           
 10250                           ;iopin.c: 44: switch(port){
 10251                           
 10252                           ;incstack = 0
 10253  0019E2  D040               	goto	i2l3952
 10254  0019E4                     i2l3934:
 10255  0019E4  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 10256  0019E8  CF80 F006          	movff	3968,??i2_digitalRead+1	;volatile
 10257  0019EC  2A05               	incf	??i2_digitalRead,f,c
 10258  0019EE  D002               	goto	i2u356_44
 10259  0019F0                     i2u356_45:
 10260  0019F0  90D8               	bcf	status,0,c
 10261  0019F2  3206               	rrcf	??i2_digitalRead+1,f,c
 10262  0019F4                     i2u356_44:
 10263  0019F4  2E05               	decfsz	??i2_digitalRead,f,c
 10264  0019F6  D7FC               	goto	i2u356_45
 10265  0019F8  0E01               	movlw	1
 10266  0019FA  1606               	andwf	??i2_digitalRead+1,f,c
 10267  0019FC  5006               	movf	??i2_digitalRead+1,w,c
 10268  0019FE  6E01               	movwf	?i2_digitalRead,c
 10269  001A00  6A02               	clrf	?i2_digitalRead+1,c
 10270  001A02  0012               	return	
 10271  001A04                     i2l3938:
 10272  001A04  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 10273  001A08  CF81 F006          	movff	3969,??i2_digitalRead+1	;volatile
 10274  001A0C  2A05               	incf	??i2_digitalRead,f,c
 10275  001A0E  D002               	goto	i2u357_44
 10276  001A10                     i2u357_45:
 10277  001A10  90D8               	bcf	status,0,c
 10278  001A12  3206               	rrcf	??i2_digitalRead+1,f,c
 10279  001A14                     i2u357_44:
 10280  001A14  2E05               	decfsz	??i2_digitalRead,f,c
 10281  001A16  D7FC               	goto	i2u357_45
 10282  001A18  0E01               	movlw	1
 10283  001A1A  1606               	andwf	??i2_digitalRead+1,f,c
 10284  001A1C  5006               	movf	??i2_digitalRead+1,w,c
 10285  001A1E  6E01               	movwf	?i2_digitalRead,c
 10286  001A20  6A02               	clrf	?i2_digitalRead+1,c
 10287  001A22  0012               	return	
 10288  001A24                     i2l3942:
 10289  001A24  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 10290  001A28  CF82 F006          	movff	3970,??i2_digitalRead+1	;volatile
 10291  001A2C  2A05               	incf	??i2_digitalRead,f,c
 10292  001A2E  D002               	goto	i2u358_44
 10293  001A30                     i2u358_45:
 10294  001A30  90D8               	bcf	status,0,c
 10295  001A32  3206               	rrcf	??i2_digitalRead+1,f,c
 10296  001A34                     i2u358_44:
 10297  001A34  2E05               	decfsz	??i2_digitalRead,f,c
 10298  001A36  D7FC               	goto	i2u358_45
 10299  001A38  0E01               	movlw	1
 10300  001A3A  1606               	andwf	??i2_digitalRead+1,f,c
 10301  001A3C  5006               	movf	??i2_digitalRead+1,w,c
 10302  001A3E  6E01               	movwf	?i2_digitalRead,c
 10303  001A40  6A02               	clrf	?i2_digitalRead+1,c
 10304  001A42  0012               	return	
 10305  001A44                     i2l3946:
 10306  001A44  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 10307  001A48  CF83 F006          	movff	3971,??i2_digitalRead+1	;volatile
 10308  001A4C  2A05               	incf	??i2_digitalRead,f,c
 10309  001A4E  D002               	goto	i2u359_44
 10310  001A50                     i2u359_45:
 10311  001A50  90D8               	bcf	status,0,c
 10312  001A52  3206               	rrcf	??i2_digitalRead+1,f,c
 10313  001A54                     i2u359_44:
 10314  001A54  2E05               	decfsz	??i2_digitalRead,f,c
 10315  001A56  D7FC               	goto	i2u359_45
 10316  001A58  0E01               	movlw	1
 10317  001A5A  1606               	andwf	??i2_digitalRead+1,f,c
 10318  001A5C  5006               	movf	??i2_digitalRead+1,w,c
 10319  001A5E  6E01               	movwf	?i2_digitalRead,c
 10320  001A60  6A02               	clrf	?i2_digitalRead+1,c
 10321  001A62  0012               	return	
 10322  001A64                     i2l3952:
 10323  001A64  C001  F005         	movff	i2digitalRead@port,??i2_digitalRead
 10324  001A68  C002  F006         	movff	i2digitalRead@port+1,??i2_digitalRead+1
 10325                           
 10326                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10327                           ; Switch size 1, requested type "space"
 10328                           ; Number of cases is 1, Range of values is 0 to 0
 10329                           ; switch strategies available:
 10330                           ; Name         Instructions Cycles
 10331                           ; simple_byte            4     3 (average)
 10332                           ;	Chosen strategy is simple_byte
 10333  001A6C  5006               	movf	??i2_digitalRead+1,w,c
 10334  001A6E  0A00               	xorlw	0	; case 0
 10335  001A70  A4D8               	btfss	status,2,c
 10336  001A72  D00D               	goto	i2l312
 10337                           
 10338                           ; Switch size 1, requested type "space"
 10339                           ; Number of cases is 4, Range of values is 0 to 3
 10340                           ; switch strategies available:
 10341                           ; Name         Instructions Cycles
 10342                           ; simple_byte           13     7 (average)
 10343                           ;	Chosen strategy is simple_byte
 10344  001A74  5005               	movf	??i2_digitalRead,w,c
 10345  001A76  0A00               	xorlw	0	; case 0
 10346  001A78  B4D8               	btfsc	status,2,c
 10347  001A7A  D7B4               	goto	i2l3934
 10348  001A7C  0A01               	xorlw	1	; case 1
 10349  001A7E  B4D8               	btfsc	status,2,c
 10350  001A80  D7C1               	goto	i2l3938
 10351  001A82  0A03               	xorlw	3	; case 2
 10352  001A84  B4D8               	btfsc	status,2,c
 10353  001A86  D7CE               	goto	i2l3942
 10354  001A88  0A01               	xorlw	1	; case 3
 10355  001A8A  B4D8               	btfsc	status,2,c
 10356  001A8C  D7DB               	goto	i2l3946
 10357  001A8E                     i2l312:
 10358                           
 10359                           ;iopin.c: 50: return -1;
 10360  001A8E  6801               	setf	?i2_digitalRead,c
 10361  001A90  6802               	setf	?i2_digitalRead+1,c
 10362  001A92  0012               	return		;funcret
 10363  001A94                     __end_ofi2_digitalRead:
 10364                           	opt stack 0
 10365                           pclatu	equ	0xFFB
 10366                           pclath	equ	0xFFA
 10367                           tblptru	equ	0xFF8
 10368                           tblptrh	equ	0xFF7
 10369                           tblptrl	equ	0xFF6
 10370                           tablat	equ	0xFF5
 10371                           prodh	equ	0xFF4
 10372                           prodl	equ	0xFF3
 10373                           intcon	equ	0xFF2
 10374                           intcon3	equ	0xFF0
 10375                           postinc0	equ	0xFEE
 10376                           fsr0h	equ	0xFEA
 10377                           fsr0l	equ	0xFE9
 10378                           wreg	equ	0xFE8
 10379                           postdec1	equ	0xFE5
 10380                           fsr1h	equ	0xFE2
 10381                           fsr1l	equ	0xFE1
 10382                           indf2	equ	0xFDF
 10383                           postinc2	equ	0xFDE
 10384                           postdec2	equ	0xFDD
 10385                           fsr2h	equ	0xFDA
 10386                           fsr2l	equ	0xFD9
 10387                           status	equ	0xFD8
 10388                           pclatu	equ	0xFFB
 10389                           pclath	equ	0xFFA
 10390                           tblptru	equ	0xFF8
 10391                           tblptrh	equ	0xFF7
 10392                           tblptrl	equ	0xFF6
 10393                           tablat	equ	0xFF5
 10394                           prodh	equ	0xFF4
 10395                           prodl	equ	0xFF3
 10396                           intcon	equ	0xFF2
 10397                           intcon3	equ	0xFF0
 10398                           postinc0	equ	0xFEE
 10399                           fsr0h	equ	0xFEA
 10400                           fsr0l	equ	0xFE9
 10401                           wreg	equ	0xFE8
 10402                           postdec1	equ	0xFE5
 10403                           fsr1h	equ	0xFE2
 10404                           fsr1l	equ	0xFE1
 10405                           indf2	equ	0xFDF
 10406                           postinc2	equ	0xFDE
 10407                           postdec2	equ	0xFDD
 10408                           fsr2h	equ	0xFDA
 10409                           fsr2l	equ	0xFD9
 10410                           status	equ	0xFD8
 10411                           
 10412                           	psect	rparam
 10413  0000                     pclatu	equ	0xFFB
 10414                           pclath	equ	0xFFA
 10415                           tblptru	equ	0xFF8
 10416                           tblptrh	equ	0xFF7
 10417                           tblptrl	equ	0xFF6
 10418                           tablat	equ	0xFF5
 10419                           prodh	equ	0xFF4
 10420                           prodl	equ	0xFF3
 10421                           intcon	equ	0xFF2
 10422                           intcon3	equ	0xFF0
 10423                           postinc0	equ	0xFEE
 10424                           fsr0h	equ	0xFEA
 10425                           fsr0l	equ	0xFE9
 10426                           wreg	equ	0xFE8
 10427                           postdec1	equ	0xFE5
 10428                           fsr1h	equ	0xFE2
 10429                           fsr1l	equ	0xFE1
 10430                           indf2	equ	0xFDF
 10431                           postinc2	equ	0xFDE
 10432                           postdec2	equ	0xFDD
 10433                           fsr2h	equ	0xFDA
 10434                           fsr2l	equ	0xFD9
 10435                           status	equ	0xFD8
 10436                           
 10437                           	psect	temp
 10438  00007E                     btemp:
 10439                           	opt stack 0
 10440  00007E                     	ds	1
 10441  0000                     int$flags	set	btemp
 10442                           pclatu	equ	0xFFB
 10443                           pclath	equ	0xFFA
 10444                           tblptru	equ	0xFF8
 10445                           tblptrh	equ	0xFF7
 10446                           tblptrl	equ	0xFF6
 10447                           tablat	equ	0xFF5
 10448                           prodh	equ	0xFF4
 10449                           prodl	equ	0xFF3
 10450                           intcon	equ	0xFF2
 10451                           intcon3	equ	0xFF0
 10452                           postinc0	equ	0xFEE
 10453                           fsr0h	equ	0xFEA
 10454                           fsr0l	equ	0xFE9
 10455                           wreg	equ	0xFE8
 10456                           postdec1	equ	0xFE5
 10457                           fsr1h	equ	0xFE2
 10458                           fsr1l	equ	0xFE1
 10459                           indf2	equ	0xFDF
 10460                           postinc2	equ	0xFDE
 10461                           postdec2	equ	0xFDD
 10462                           fsr2h	equ	0xFDA
 10463                           fsr2l	equ	0xFD9
 10464                           status	equ	0xFD8


Data Sizes:
    Strings     379
    Constant    42
    Data        44
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128    118     128
    BANK1           256      0      64
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_23(CODE[17]), STR_22(CODE[18]), STR_21(CODE[17]), STR_20(CODE[18]), 
		 -> STR_19(CODE[17]), STR_18(CODE[19]), STR_17(CODE[17]), STR_16(CODE[18]), 
		 -> STR_15(CODE[17]), STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[18]), 
		 -> STR_11(CODE[9]), STR_10(CODE[8]), STR_9(CODE[24]), STR_8(CODE[15]), 
		 -> STR_7(CODE[17]), STR_6(CODE[20]), STR_5(CODE[18]), STR_4(CODE[14]), 
		 -> STR_3(CODE[7]), STR_2(CODE[11]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    pause@message	PTR unsigned char  size(2) Largest target is 24
		 -> STR_9(CODE[24]), STR_8(CODE[15]), STR_7(CODE[17]), STR_6(CODE[20]), 
		 -> STR_4(CODE[14]), STR_3(CODE[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_setAngle
    i2_setAngle->i2_angleToPulse
    i2_angleToPulse->i2___fttol
    i2___fttol->i2___ftadd
    i2___ftmul->i2___ftdiv
    i2___ftdiv->i2___awtoft
    i2___ftadd->i2___ftmul
    i2___awtoft->i2___ftpack
    i2___altoft->i2___ftpack
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_sortBattery
    _sortBattery->_initServo
    _pause->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    ___wmul->___aldiv
    ___aldiv->_analogRead
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___lwmod
    _lcdNewline->_lcdInst
    ___lwmod->___lwdiv
    _lcdClear->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   78677
                            _initLCD
                          _initServo
                           _lcdClear
                           _pinSetup
                             _printf
                      _showInterface
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                          8     8      0   40421
                                            110 BANK0      8     8      0
                            ___aldiv
                             ___wmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                          _initServo
                           _lcdClear
                              _pause
                             _printf
                           _setAngle
                          _stopServo
 ---------------------------------------------------------------------------------
 (2) _stopServo                                            4     2      2      86
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2    3394
                                             27 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _initServo                                            8     0      8   16900
                                            102 BANK0      8     0      8
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (3) _startTimer                                           8     2      6     562
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   14988
                                             92 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   14104
                                             69 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     316
                                             54 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    2665
                                             27 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2747
                                             12 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3409
                                             42 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2264
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2503
                                              8 BANK0     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _initTimer                                            4     2      2     150
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     3      6     752
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          6     2      4     442
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4      86
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             20 BANK0      6     2      4
                            ___aldiv (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     428
                                              6 BANK0     14     6      8
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0   18256
                                             28 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0    2965
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0    2965
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0    2965
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0    2987
                                             27 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (3) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0    2965
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0    2965
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    18      6    2830
                                             12 BANK0     15     9      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    7313
                                            102 COMRAM    15    15      0
              _servoInterruptService
                         i2_setAngle
 ---------------------------------------------------------------------------------
 (9) i2_setAngle                                          10     6      4    5888
                                             92 COMRAM    10     6      4
                     i2_angleToPulse
 ---------------------------------------------------------------------------------
 (10) i2_angleToPulse                                     23    19      4    5532
                                             69 COMRAM    23    19      4
                         i2___altoft
                         i2___awtoft
                          i2___ftadd
                          i2___ftdiv
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (11) i2___fttol                                          15    11      4     278
                                             54 COMRAM    15    11      4
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftadd (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6     999
                                             27 COMRAM    15     9      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftdiv                                          15     9      6     953
                                             12 COMRAM    15     9      6
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1565
                                             42 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___awtoft                                          4     1      3     738
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___altoft                                         10     6      4     837
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     621
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1292
                                              9 COMRAM    12    12      0
                      i2_digitalRead
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalRead                                       6     2      4     162
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
     _startTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
   _sortBattery
     ___aldiv
       _analogRead (ARG)
     ___wmul
       ___aldiv (ARG)
         _analogRead (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _initServo
       _initTimer
       _setAngle
         _angleToPulse
           ___altoft
             ___ftpack
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
       _startTimer
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
       _readKeypad
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
     _stopServo

 _service (ROOT)
   _servoInterruptService
     i2_digitalRead
     i2_digitalWrite
     i2_startTimer
   i2_setAngle
     i2_angleToPulse
       i2___altoft
         i2___ftpack
       i2___awtoft
         i2___ftpack
       i2___ftadd
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___ftdiv
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       i2___fttol
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftadd (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             i2___altoft (ARG)
               i2___ftpack
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      40       7       25.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     76      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13D      34        0.0%
DATA                 0      0     13D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 13 11:51:33 2017

                  ___altoft@exp 0090                   ___altoft@sign 0091                     _sortBattery 0C6A  
                    i2___altoft 1F0C             ___wmul@multiplicand 0096                     __CFG_BORV$3 000000  
                    i2___awtoft 228C                      i2___ftpack 1A94                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_OSC$HS 000000                _redirectingServo 012A                    ___ftadd@exp1 00B5  
                  ___ftadd@exp2 00B4                    ___ftadd@sign 00B3                             l211 2394  
                           l126 0DAC                             l118 19E0                             l312 1762  
                           l129 0DAE                             l410 2178                             l420 2068  
                           l245 232C                             l248 233A                             l336 221A  
                           l417 2050                             l419 205C                             l630 0304  
                           l910 00DC                             l904 007A                             l908 00B4  
               ??_showInterface 009C                             l919 01B2                             l928 01DC  
                           l881 1362                             l939 0C34                    __CFG_CPB$OFF 000000  
                           _PEN 007E2A                    __CFG_CPD$OFF 000000                             _SEN 007E28  
                           _pin 0110                             wreg 000FE8                    __CFG_LVP$OFF 000000  
                  ___ftdiv@cntr 0095                    ___ftdiv@sign 009A                    __CFG_WDT$OFF 000000  
                          l3010 12C6                            l1059 1E8A                            l3020 1354  
                          l3012 12F6                            l3004 12A4                            l1069 2044  
                          l3110 0206                            l3102 0198                            l3032 1388  
                          l3016 1316                            l3008 12B8                            l3120 0254  
                          l3104 01A6                            l3200 0AA0                            l3026 136C  
                          l3018 1346                            l3130 0B58                            l3210 0ADE  
                          l3300 1E46                            l4100 1478                            l3310 1E7C  
                          l3302 1E4C                            l4102 1484                            l3046 1C1A  
                          l3062 0088                            l3206 0AC0                            l3320 200C  
                          l3048 1C2A                            l3136 0B92                            l3322 2012  
                          l3402 0358                            l4050 13A8                            l3226 21E4  
                          l3090 0142                            l3074 00D2                            l3404 035E  
                          l4044 1396                            l3092 0150                            l3084 0114  
                          l3068 00C2                            l3156 0BF2                            l3236 0DEA  
                          l3326 2036                            l3318 2000                            l4062 13DC  
                          l4046 139A                            l3094 015E                            l3182 0A34  
                          l3254 0E7C                            l3440 03FC                            l3416 0394  
                          l3432 03D0                            l4080 1428                            l4048 13A4  
                          l3096 016A                            l3176 09FA                            l3272 0EE2  
                          l3264 0EAC                            l3442 0448                            l3450 04A8  
                          l3418 039A                            l3434 03E2                            l3370 0288  
                          l4074 1416                            l4058 13CE                            l3266 0EBC  
                          l3258 0E90                            l3452 04B0                            l4092 145E  
                          l3196 0A82                            l3268 0EC6                            l3438 03F6  
                          l3382 02C2                            l3374 029C                            l3454 04BC  
                          l4078 1420                            l3448 0496                            l3376 02A4  
                          l4096 146E                            l4088 144E                            l3298 1E3A  
                          l3378 02AA                            l3386 02CC                            l3474 2140  
                          l3820 16DC                            l3812 1684                            l3468 2136  
                          l3484 2150                            l3398 033C                            l3910 11F0  
                          l3902 11B2                            l3830 1734                            l3478 2148  
                          l4198 19C4                            l3920 124A                            l3912 11F6  
                          l3824 1708                            l3816 16B0                            l3760 20FE  
                          l3498 2074                            l3754 20EC                            l3908 11E0  
                          l3924 125C                            l3780 18AC                            l3756 20F2  
                          l3764 2104                            l3790 18DC                            l3774 1890  
                          l3758 20F8                            l3928 1278                            l3792 18E4  
                          l3784 18C0                            l3786 18C8                            l3778 18A4  
                          l3796 18F8                            l3798 1900                            l3896 1194  
                          _EEIF 007D0C                            STR_1 FFEF                            STR_2 FFD3  
                          STR_3 FFF7                            STR_4 FFC5                            STR_5 FF1C  
                          STR_6 FE9B                            STR_7 FFA5                            STR_8 FFB6  
                          STR_9 FE83                            _LATA 000F89                            _LATB 000F8A  
                          _LATC 000F8B                            _LATD 000F8C                            _LATE 000F8D  
                          u2261 0028                            u2271 0046                            u2521 09D6  
                          u2610 0E10                            u4117 2398                            u2541 0A10  
                          u4127 2186                            u2471 0B34                            u2615 0E06  
                          u4137 21BC                            u4147 235E                            u2491 0B6E  
                          u4157 2374                            u3454 1698                            u4167 1EB4  
                          u3455 1692                            u2591 0DC6                            u3464 16C4  
                          u4177 1EC2                            u3465 16BE                            u3474 16F0  
                          u3394 186E                            u4187 1EF2                            u3475 16EA  
                          u3395 1866                            _PEIE 007F96                            u3484 171C  
                          u4197 1F00                            u3485 1716                            _RCEN 007E2B  
                          _RSEN 007E29                            _main 1930                    ___ftpack@arg 0080  
                  i2___altoft@c 0009                            _keys FE59                    ___ftpack@exp 0083  
                          _port 0118                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            btemp 007E  
                  i2___ftadd@f1 002B                    i2___ftadd@f2 002E                            prodh 000FF4  
                          prodl 000FF3                            start 000E                      i2_setAngle 1F84  
                 __CFG_IESO$OFF 000000                    i2___ftdiv@f1 000D                    i2___ftdiv@f2 0010  
                  i2___ftdiv@f3 0017                    i2___awtoft@c 0009                   __CFG_MCLRE$ON 000000  
                  ___ftmul@cntr 00A8                    i2___ftmul@f1 001C                    i2___ftmul@f2 001F  
                  ___param_bank 000000                    ___ftmul@sign 00A9                    i2___fttol@f1 0037  
                  ___fttol@exp1 00C4                    ___fttol@lval 00C0            __end_ofi2_startTimer 20EA  
          __end_of_angleToPulse 09C0                 __end_of___aldiv 128A                           ?_main 0001  
                         _ACKEN 007E2C                           _ACKDT 007E2D                           _EEADR 000FA9  
               __end_of___ftadd 027A                           STR_10 FFE7                           STR_11 FFDE  
                         STR_20 FEF8                           STR_12 FED4                           STR_13 FF94  
                         STR_21 FF3F                           STR_22 FF0A                           STR_14 FEC2  
                         STR_23 FF83                           STR_15 FF61                           STR_24 FF2E  
                         STR_16 FEE6                           STR_17 FF50                           STR_18 FEAF  
                         STR_19 FF72                 __end_of___ftdiv 0C6A         ??_servoInterruptService 000A  
               __end_of___ftmul 0B1E                           _T0CON 000FD5                           _T1CON 000FCD  
               __end_of___fttol 0EF4                           _T2CON 000FCA                           _T3CON 000FB1  
               __end_of___lwdiv 1E94                 __end_of___lwmod 204E                           i2l312 1A8E  
                         i2l420 20B8                           i2l417 20A0                           i2l419 20AC  
                         i2l187 1134                           i2l560 066C                           i2l561 0670  
                         i2l562 06AC                           i2l557 0664                           i2l559 0668  
                         i2l904 06F2                           i2l908 071C                           i2l919 07CC  
                         i2l928 07E8                           i2l881 1B22                           i2l939 181E  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR3H 000FB3                           _TMR1L 000FCE                           _TMR3L 000FB2  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTD 000F83                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                   _conveyorServo 0076  
               __end_of_lcdInst 2380                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
        servoInterruptService@i 0014                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                 __end_of_initLCD 21C8                  __CFG_EBTRB$OFF 000000  
                 ___awtoft@sign 008B                 __end_of_dpowers FE74                           _pause 2482  
                 ___ftpack@sign 0084                           _pulse 0100                           _putch 2380  
                         pclath 000FFA                           tablat 000FF5                 __end_of_service 1170  
               __end_of_runMenu 232C                 __end_of_runTime 23CE                           status 000FD8  
                 i2___ftdiv@exp 001A              __size_ofi2___ftadd 01AC                  __CFG_PBADEN$ON 000000  
            __size_ofi2___ftdiv 00E6              __size_ofi2___ftmul 00F4              __size_ofi2___fttol 00F4  
          __end_of_digitalWrite 1930                 __initialization 1D20                    __end_of_main 19E2  
                  __end_of_keys FE6A                   i2___ftmul@exp 0025                     ?i2___altoft 0009  
                   ?i2___awtoft 0009                     ?i2___ftpack 0001                          ??_main 00F6  
                 ___fttol@sign1 00BF                   __activetblptr 000002            __size_of_digitalRead 00E8  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
              __end_of___altoft 1C8C                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                          _EEDATA 000FA8                          ?_pause 009B  
                        _EECON1 000FA6                          _EECON2 000FA7                __end_of___awtoft 220C  
                        ?_putch 0001                __end_of___ftpack 1396                          _INT0IE 007F94  
                        _INT0IF 007F91                          _INT1IF 007F80                    sortBattery@V 00F2  
                        i2l4000 20C4                          u300_41 06D2                          i2l3340 1ABC  
                        i2l4212 1082                          i2l3350 1B18                          i2l3342 1ADA  
                        i2l3334 1AA4                          i2l4230 10E0                          i2l4222 10AA  
                        i2l3600 0834                          i2l4170 069E                          i2l3346 1AF0  
                        i2l3338 1AB2                          i2l3514 1F2E                          i2l3530 22A0  
                        i2l3610 1792                          i2l4234 10FC                          i2l4226 10C4  
                        i2l4164 05E6                          i2l4156 052E                          i2l3348 1B0E  
                        i2l3516 1F3A                          i2l3542 0700                          i2l4238 1118  
                        i2l4168 0674                          i2l3616 17BA                          i2l3704 14C6  
                        i2l3570 077C                          i2l3722 152C                          i2l3572 0786  
                        i2l3564 075A                          i2l3548 072A                          i2l3636 17F8  
                        i2l3740 157C                          i2l3732 1554                          i2l3590 0804  
                        i2l3582 07BA                          i2l3574 0790                          i2l3662 15DE  
                        i2l3734 1560                          i2l3726 153C                          i2l3584 07C4  
                        i2l3576 0798                          i2l3680 1620                          i2l3656 15B6  
                        i2l3736 1566                          i2l3690 1648                          i2l3676 1610  
                        u320_41 177A                          i2l3942 1A24                          i2l3934 19E4  
                        i2l3686 1638                          i2l3952 1A64                          i2l3946 1A44  
                        i2l3938 1A04                          i2l3962 1B72                          i2l3980 1BAE  
                        i2l3972 1B94                          i2l3974 1B9A                          i2l3966 1B80  
                        i2l3984 1BBC                          i2l3968 1B86                          i2l3978 1BA8  
                        i2l3986 1BC2                          u322_41 17A2                          u331_41 14AA  
                        u325_41 159E                          u327_41 15C6                          u299_41 06BE  
                        _TMR0IE 007F95                          _TMR0IF 007F92                          _TMR1IE 007CE8  
                        _TMR1IF 007CF0                          _TMR2IF 007CF1                          _TMR3IE 007D01  
                        _TMR3IF 007D09                          _SSPADD 000FC8                          _TRISC3 007CA3  
                        _TRISC4 007CA4                          _SSPBUF 000FC9          __size_ofi2_digitalRead 00B2  
              __end_of_dateTime 2466                     ?i2_setAngle 005D               _angleToPulse$1247 00D5  
              __end_of_lcdClear 24B8                     initServo@pi 00EA                     initServo@po 00E8  
                __CFG_XINST$OFF 000000                __end_of_mainMenu 2440                       ??___aldiv 008E  
                        ___wmul 22C4                       ??___ftadd 00B0                  __CFG_STVREN$ON 000000  
                     ??___ftdiv 0092                       ??___ftmul 00A1                       ??___fttol 00BA  
                     ??___lwdiv 0084                       ??___lwmod 008B                  i2___altoft@exp 0011  
                        clear_0 1D86                       ??_lcdInst 0082                          _printf 027A  
              __end_of_pinSetup 228C                __end_of_setAngle 1D20               analogRead@channel 0080  
         ___ftmul@f3_as_product 00A5                       ??_initLCD 0084                    __pdataCOMRAM 0076  
             __end_ofi2___ftadd 085A               __end_ofi2___ftdiv 1850                  i2___ftadd@exp1 0036  
                i2___ftadd@exp2 0035               __end_ofi2___ftmul 1682                   setAngle@angle 00DE  
             __end_ofi2___fttol 158E                  i2___ftadd@sign 0034                    __mediumconst FE58  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                 setAngle@timer 00DC                       ??_service 0067                       ??_runMenu 009B  
              __end_of_runStats 23F4                       ??_runTime 009B                  i2___ftdiv@cntr 0016  
                    __accesstop 0080         __end_of__initialization 1D92                      ___altoft@c 0088  
           __size_ofi2___altoft 0078                  i2___ftdiv@sign 001B                      ___ftadd@f1 00AA  
                    ___ftadd@f2 00AD             __size_ofi2___awtoft 0038             __size_ofi2___ftpack 00AE  
                 ___rparam_used 000001                      ___ftdiv@f1 008C                      ___ftdiv@f2 008F  
                    ___ftdiv@f3 0096                      ___awtoft@c 0088                  i2___ftpack@arg 0001  
         __size_ofi2_startTimer 004C                  i2___ftpack@exp 0004                      ___ftmul@f1 009B  
                    ___ftmul@f2 009E                      ___fttol@f1 00B6            __end_of_happynewyear FE83  
                __pcstackCOMRAM 0001           __size_of_angleToPulse 0166                    __pidataBANK0 24A0  
                  __pidataBANK1 2466                   _cylinderMotor 0130                  i2___ftmul@cntr 0029  
                  ?_sortBattery 0001                   __end_of_pause 2498                  i2___ftmul@sign 002A  
                 __end_of_putch 23A8                  i2___fttol@exp1 0045                  i2___fttol@lval 0041  
                 i2_digitalRead 19E2              __size_of_lcdNibble 0078                i2digitalRead@pin 0003  
           __size_ofi2_setAngle 0068                         ??_pause 009D              i2digitalWrite@port 0001  
                       ??_putch 0084                    i2_startTimer 209E                      __pbssBANK0 00FE  
                    __pbssBANK1 0100                    _angleToPulse 085A           __size_of_digitalWrite 00E0  
            __size_of_initTimer 004A              __size_of_initServo 007C                      _analogRead 220C  
       __size_ofi2_angleToPulse 0140                         ?___wmul 0094           sortBattery@resolution 00F0  
                     ?___altoft 0088                      _lcdNewline 24A8                       ?___awtoft 0088  
                     ?___ftpack 0080                  ?i2_digitalRead 0001                         ?_printf 008C  
    servoInterruptService@flags 000C  __size_of_servoInterruptService 01D4   __end_of_servoInterruptService 06AE  
         __end_of_showInterface 149A                       ?_dateTime 0001                  stopServo@timer 0080  
             i2startTimer@timer 0001                       ?_lcdClear 0001              __size_of_runSelect 0026  
              angleToPulse@a000 00D8                angleToPulse@a180 00D1                    _digitalWrite 1850  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
                     ?_mainMenu 0001         __size_ofi2_digitalWrite 00AC              __size_of_stopServo 004A  
                     ?_pinSetup 0001                       ?_setAngle 00DC               __end_of_lcdNibble 1F0C  
                       __Hparam 0000                         __Lparam 0000                         ___aldiv 1170  
                       ___ftadd 0012                      _readKeypad 232C                         ___ftdiv 0B1E  
               __size_of___wmul 0036                         ___ftmul 09C0                         ___fttol 0DB0  
                     ?_runStats 0001                         ___lwdiv 1E1C                         ___lwmod 1FEC  
                  ??i2___altoft 000D                      ??___altoft 008C                         __pcinit 1D20  
                  ??i2___awtoft 000C                    ??i2___ftpack 0006                      ??___awtoft 008B  
                    ??___ftpack 0085         i2___ftmul@f3_as_product 0026                         __ramtop 1000  
                       _lcdInst 2356                         __ptext0 1930                         __ptext1 0C6A  
                       __ptext2 20EA                         __ptext3 2482                         __ptext4 1DA0  
                       __ptext5 204E                         __ptext6 1C8C                         __ptext7 085A  
                       __ptext8 0DB0                         __ptext9 09C0                 __size_of_printf 0260  
                       _padPin1 0134                         _padPin2 0138                         _padPin3 0120  
                 startTimer@val 0082                         _initLCD 217E               __end_of_hexpowers FE7C  
             __end_of_initTimer 217E               __end_of_initServo 1E1C                         _dpowers FE6A  
                    ??_dateTime 009B                 i2___altoft@sign 0012                ___aldiv@dividend 0086  
                    ??_lcdClear 0084                         _service 0008                         _runMenu 22FA  
                       _runTime 23A8                  __pintcode_body 1034            end_of_initialization 1D92  
                    ??_mainMenu 009B             i2angleToPulse@angle 0046                   __Lmediumconst FE58  
                       int_func 1034              __end_ofi2___altoft 1F84                  digitalRead@pin 0082  
                   ?_analogRead 0080              __end_ofi2___awtoft 22C4              __end_ofi2___ftpack 1B42  
                  ??i2_setAngle 0061                      ??_pinSetup 0080                      ??_setAngle 00E0  
             __end_of_runSelect 241A                         printf@c 009A                         printf@f 008C  
              ___aldiv@quotient 0090                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE                      ??_runStats 009B  
               ??i2_digitalRead 0005                   ??_digitalRead 0084                     ?_lcdNewline 0001  
             __end_of_stopServo 2134                       _PORTBbits 000F81            __size_of_sortBattery 0146  
              showInterface@key 009C              __end_ofi2_setAngle 1FEC             _redirectAngle_OTHER 013E  
                  _happynewyear FE7C              angleToPulse@offset 00CD                       i2___ftadd 06AE  
                     i2___ftdiv 176A                       i2___ftmul 158E                       i2___fttol 149A  
                    _startTimer 204E                     ___ftdiv@exp 0099                 i2___awtoft@sign 000C  
               i2___ftpack@sign 0005                  i2_angleToPulse 0EF4                      _switchFlag 00FE  
                   ___ftmul@exp 00A4                     ?_readKeypad 0001                  __end_of___wmul 22FA  
                 __pidataCOMRAM 2498                  __end_of_printf 04DA             __size_of_analogRead 0042  
           start_initialization 1D20             __end_of_digitalRead 176A                  initServo@angle 00EC  
                initTimer@timer 0080                 i2___fttol@sign1 0040                  initServo@timer 00E6  
                    ?i2___ftadd 002B                      ?i2___ftdiv 000D                      ?i2___ftmul 001C  
                    ?i2___fttol 0037                  i2_digitalWrite 1B42               i2digitalRead@port 0001  
           __size_of_lcdNewline 0008          __end_ofi2_angleToPulse 1034                        ??___wmul 0098  
                   __pdataBANK0 00F6                     __pdataBANK1 0124                    pause@message 009B  
              __CFG_LPT1OSC$OFF 000000                        ??_printf 0092               __size_of___altoft 009E  
             __size_of___awtoft 0044               __size_of___ftpack 010C                   __pcstackBANK0 0080  
        __end_ofi2_digitalWrite 1BEE               __size_of_dateTime 0026                     ?_startTimer 0080  
             __size_of_lcdClear 0008             __size_of_readKeypad 002A                 i2setAngle@angle 005F  
               i2setAngle@timer 005D               __size_of_mainMenu 0026               i2digitalWrite@pin 0003  
             i2digitalWrite@val 0005                 ?i2_angleToPulse 0046                ___lwdiv@dividend 0080  
             __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 003E               __size_of_setAngle 0094  
                     __pintcode 0008                   __pmediumconst FE58                       _lcdNibble 1E94  
                      ?___aldiv 0086                        ?___ftadd 00AA                        ?___ftdiv 008C  
                      ?___ftmul 009B                        ?___fttol 00B6                        ?___lwdiv 0080  
                      ?___lwmod 0087                     _digitalRead 1682                        ?_lcdInst 0001  
             __size_of_runStats 0026                        ?_initLCD 0001                 startTimer@timer 0080  
                      ?_service 0001                       _hexpowers FE74                        ?_runMenu 0001  
                     _initTimer 2134                       _initServo 1DA0                        ?_runTime 0001  
               ?i2_digitalWrite 0001           _servoInterruptService 04DA                ___lwdiv@quotient 0084  
                   ??i2___ftadd 0031                     ??i2___ftdiv 0013                     ??i2___ftmul 0022  
                   ??i2___fttol 003B                  __size_of_pause 0016                  __size_of_putch 0028  
               ___aldiv@divisor 008A              i2angleToPulse@a000 0059              i2angleToPulse@a180 0052  
               ___aldiv@counter 008E                  sortBattery@Vcc 00EE                  ___wmul@product 0098  
                      _LATDbits 000F8C                    ??_analogRead 0084                        i2u333_40 14E4  
                      i2u333_45 14DC                        i2u360_44 1B58                        i2u360_45 1B52  
                      i2u356_44 19F4                        i2u356_45 19F0                        i2u357_44 1A14  
                      i2u357_45 1A10                        i2u390_40 04FE                        i2u358_44 1A34  
                      i2u358_45 1A30                        i2u391_40 0500                        i2u359_44 1A54  
                      i2u359_45 1A50                        i2u392_40 050C                        i2u393_40 050E  
                      i2u394_40 052C                        i2u386_40 04E2                        i2u387_40 04E4  
                      i2u388_40 04F0                        i2u389_40 04F2          __size_of_showInterface 0104  
              __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001                  _padAngle_CATCH 00F6  
                _padAngle_CLOSE 00F8                      service@key 0075                    ??_lcdNewline 0084  
           __size_of_startTimer 0050                       _runSelect 23F4               angleToPulse@angle 00C5  
             ___wmul@multiplier 0094                   lcdNibble@data 0081                      printf@flag 0097  
                 lcdNibble@temp 0080                      printf@prec 0094                       _stopServo 20EA  
            __end_of_analogRead 224E                      runMenu@key 009B               sortBattery@target 00F4  
                    ?_initTimer 0080                      ?_initServo 00E6                       copy_data0 1D34  
                     copy_data1 1D54                       copy_data2 1D74              __end_of_lcdNewline 24B0  
                 readKeypad@key 0080                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0080                   ??_sortBattery 00EE  
              __size_of___aldiv 011A                __size_of___ftadd 0268                __size_of___ftdiv 014C  
                      ___altoft 1BEE                __size_of___ftmul 015E                __size_of___fttol 0144  
              __size_of___lwdiv 0078                __size_of___lwmod 0062                      ?_runSelect 0001  
                      ___awtoft 21C8                        ___ftpack 128A           __end_ofi2_digitalRead 1A94  
              __size_of_lcdInst 002A                __size_of_initLCD 004A                        _dateTime 2440  
                    ?_stopServo 0080          ?_servoInterruptService 0001                   _showInterface 1396  
                      _lcdClear 24B0                 ___lwdiv@divisor 0082                 ___lwdiv@counter 0086  
                      __ptext10 0B1E                        __ptext11 0012                        __ptext20 1170  
                      __ptext12 21C8                        __ptext21 1396                        __ptext13 1BEE  
                      __ptext30 2380                        __ptext22 23A8                        __ptext14 128A  
                      __ptext31 24A8                        __ptext23 23CE                        __ptext15 2134  
                      __ptext40 1F84                        __ptext32 1FEC                        __ptext24 23F4  
                      __ptext16 1850                        __ptext41 0EF4                        __ptext33 1E1C  
                      __ptext25 22FA                        __ptext17 1682                        __ptext50 209E  
                      __ptext42 149A                        __ptext34 24B0                        __ptext26 232C  
                      __ptext18 220C                        __ptext51 1B42                        __ptext43 158E  
                      __ptext35 224E                        __ptext27 241A                        __ptext19 22C4  
                      __ptext52 19E2                        __ptext44 176A                        __ptext36 217E  
                      __ptext28 2440                        __ptext45 06AE                        __ptext37 2356  
                      __ptext29 027A                        __ptext46 228C                        __ptext38 1E94  
                      __ptext47 1F0C                        __ptext48 1A94                        __ptext49 04DA  
              __size_of_service 1168                __size_of_runMenu 0032                 i2startTimer@val 0003  
              __size_of_runTime 0026                   ?i2_startTimer 0001                        _mainMenu 241A  
                      _padServo 0124              __end_of_readKeypad 2356                   ?_angleToPulse 00C5  
                 __size_of_main 00B2                        _pinSetup 224E                        _setAngle 1C8C  
                   ??_lcdNibble 0080                   _padAngle_OPEN 00FA                        int$flags 007E  
                      _runStats 23CE                       printf@idx 0093                       printf@val 0098  
                     putch@data 0084             i2_angleToPulse$1339 0056             __end_of_sortBattery 0DB0  
                    _INTCONbits 000FF2                  ?_showInterface 0001                   ?_digitalWrite 0080  
                   ??_initTimer 0082                     ??_initServo 00EE            i2angleToPulse@offset 004E  
                ??i2_startTimer 0007                ??i2_angleToPulse 004A                    ??_startTimer 0086  
               digitalRead@port 0080                        intlevel2 0000                  ??_angleToPulse 00C9  
              ___lwmod@dividend 0087                _redirectAngle_AA 007C                _redirectAngle_9V 013C  
                      printf@ap 0095                     lcdInst@data 0083                    ?_digitalRead 0080  
                   ??_runSelect 009B              __end_of_startTimer 209E                ??i2_digitalWrite 0007  
              digitalWrite@port 0080                 ___lwmod@divisor 0089                     ??_stopServo 0082  
               ___lwmod@counter 008B                  ??_digitalWrite 0086                    ___aldiv@sign 008F  
               _redirectAngle_C 00FC                 digitalWrite@pin 0082                 digitalWrite@val 0084  
