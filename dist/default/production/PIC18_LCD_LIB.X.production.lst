

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 09 14:59:53 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93  0000                     
    94                           ; Version 1.40
    95                           ; Generated 01/12/2016 GMT
    96                           ; 
    97                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F4620 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     
   129                           	psect	idataCOMRAM
   130  004090                     __pidataCOMRAM:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _V_LIM_9V
   134  004090  77                 	db	119
   135  004091  EE                 	db	238
   136  004092  3F                 	db	63
   137                           
   138                           ;initializer for _V_LIM_AA
   139  004093  C1                 	db	193
   140  004094  4A                 	db	74
   141  004095  3E                 	db	62
   142                           
   143                           ;initializer for _V_LIM_C
   144  004096  A7                 	db	167
   145  004097  A9                 	db	169
   146  004098  3F                 	db	63
   147                           
   148                           ;initializer for _angle
   149  004099  005A               	dw	90
   150                           
   151                           ;initializer for _padAngle_CLOSE
   152  00409B  0046               	dw	70
   153                           
   154                           ;initializer for _padAngle_OPEN
   155  00409D  00B4               	dw	180
   156                           
   157                           ;initializer for _redirectAngle_9V
   158  00409F  0076               	dw	118
   159                           
   160                           ;initializer for _redirectAngle_C
   161  0040A1  00A6               	dw	166
   162                           
   163                           ;initializer for _AA_float
   164  0040A3  0002               	dw	2
   165  0040A5  0005               	dw	5
   166                           
   167                           	psect	idataBANK0
   168  00410E                     __pidataBANK0:
   169                           	opt stack 0
   170                           
   171                           ;initializer for _redirectAngle_OTHER
   172  00410E  0099               	dw	153
   173                           
   174                           	psect	idataBANK1
   175  003F38                     __pidataBANK1:
   176                           	opt stack 0
   177                           
   178                           ;initializer for _cylinderBackward
   179  003F38  001E               	dw	30
   180                           
   181                           ;initializer for _cylinderForward
   182  003F3A  0046               	dw	70
   183                           
   184                           ;initializer for _padAngle_NEUTRAL
   185  003F3C  0082               	dw	130
   186                           
   187                           ;initializer for _redirectAngle_AA
   188  003F3E  008A               	dw	138
   189                           
   190                           ;initializer for _stoppingTime
   191  003F40  2710               	dw	10000
   192                           
   193                           ;initializer for _conveyorServo
   194  003F42  0002               	dw	2
   195  003F44  0000               	dw	0
   196                           
   197                           ;initializer for _cylinderMotor1
   198  003F46  0003               	dw	3
   199  003F48  0000               	dw	0
   200                           
   201                           ;initializer for _cylinderMotor2
   202  003F4A  0003               	dw	3
   203  003F4C  0001               	dw	1
   204                           
   205                           ;initializer for _padPin1
   206  003F4E  0002               	dw	2
   207  003F50  0006               	dw	6
   208                           
   209                           ;initializer for _padPin2
   210  003F52  0002               	dw	2
   211  003F54  0007               	dw	7
   212                           
   213                           ;initializer for _padServo
   214  003F56  0002               	dw	2
   215  003F58  0001               	dw	1
   216                           
   217                           ;initializer for _redirectingServo
   218  003F5A  0002               	dw	2
   219  003F5C  0002               	dw	2
   220                           
   221                           	psect	mediumconst
   222  00FDDE                     __pmediumconst:
   223                           	opt stack 0
   224  00FDDE  00                 	db	0
   225  00FDDF                     _dpowers:
   226                           	opt stack 0
   227  00FDDF  0001               	dw	1
   228  00FDE1  0000               	dw	0
   229  00FDE3  000A               	dw	10
   230  00FDE5  0000               	dw	0
   231  00FDE7  0064               	dw	100
   232  00FDE9  0000               	dw	0
   233  00FDEB  03E8               	dw	1000
   234  00FDED  0000               	dw	0
   235  00FDEF  2710               	dw	10000
   236  00FDF1  0000               	dw	0
   237  00FDF3  86A0               	dw	34464
   238  00FDF5  0001               	dw	1
   239  00FDF7  4240               	dw	16960
   240  00FDF9  000F               	dw	15
   241  00FDFB  9680               	dw	38528
   242  00FDFD  0098               	dw	152
   243  00FDFF  E100               	dw	57600
   244  00FE01  05F5               	dw	1525
   245  00FE03  CA00               	dw	51712
   246  00FE05  3B9A               	dw	15258
   247  00FE07                     __end_of_dpowers:
   248                           	opt stack 0
   249  00FE07                     __npowers_:
   250                           	opt stack 0
   251  00FE07  00                 	db	0
   252  00FE08  80                 	db	128
   253  00FE09  3F                 	db	63
   254  00FE0A  CD                 	db	205
   255  00FE0B  CC                 	db	204
   256  00FE0C  3D                 	db	61
   257  00FE0D  D7                 	db	215
   258  00FE0E  23                 	db	35
   259  00FE0F  3C                 	db	60
   260  00FE10  12                 	db	18
   261  00FE11  83                 	db	131
   262  00FE12  3A                 	db	58
   263  00FE13  B7                 	db	183
   264  00FE14  D1                 	db	209
   265  00FE15  38                 	db	56
   266  00FE16  C6                 	db	198
   267  00FE17  27                 	db	39
   268  00FE18  37                 	db	55
   269  00FE19  38                 	db	56
   270  00FE1A  86                 	db	134
   271  00FE1B  35                 	db	53
   272  00FE1C  C0                 	db	192
   273  00FE1D  D6                 	db	214
   274  00FE1E  33                 	db	51
   275  00FE1F  CC                 	db	204
   276  00FE20  2B                 	db	43
   277  00FE21  32                 	db	50
   278  00FE22  70                 	db	112
   279  00FE23  89                 	db	137
   280  00FE24  30                 	db	48
   281  00FE25  E7                 	db	231
   282  00FE26  DB                 	db	219
   283  00FE27  2E                 	db	46
   284  00FE28  E5                 	db	229
   285  00FE29  3C                 	db	60
   286  00FE2A  1E                 	db	30
   287  00FE2B  42                 	db	66
   288  00FE2C  A2                 	db	162
   289  00FE2D  0D                 	db	13
   290  00FE2E                     __end_of__npowers_:
   291                           	opt stack 0
   292  00FE2E                     __powers_:
   293                           	opt stack 0
   294  00FE2E  00                 	db	0
   295  00FE2F  80                 	db	128
   296  00FE30  3F                 	db	63
   297  00FE31  00                 	db	0
   298  00FE32  20                 	db	32
   299  00FE33  41                 	db	65
   300  00FE34  00                 	db	0
   301  00FE35  C8                 	db	200
   302  00FE36  42                 	db	66
   303  00FE37  00                 	db	0
   304  00FE38  7A                 	db	122
   305  00FE39  44                 	db	68
   306  00FE3A  40                 	db	64
   307  00FE3B  1C                 	db	28
   308  00FE3C  46                 	db	70
   309  00FE3D  50                 	db	80
   310  00FE3E  C3                 	db	195
   311  00FE3F  47                 	db	71
   312  00FE40  24                 	db	36
   313  00FE41  74                 	db	116
   314  00FE42  49                 	db	73
   315  00FE43  97                 	db	151
   316  00FE44  18                 	db	24
   317  00FE45  4B                 	db	75
   318  00FE46  BC                 	db	188
   319  00FE47  BE                 	db	190
   320  00FE48  4C                 	db	76
   321  00FE49  6B                 	db	107
   322  00FE4A  6E                 	db	110
   323  00FE4B  4E                 	db	78
   324  00FE4C  03                 	db	3
   325  00FE4D  15                 	db	21
   326  00FE4E  50                 	db	80
   327  00FE4F  79                 	db	121
   328  00FE50  AD                 	db	173
   329  00FE51  60                 	db	96
   330  00FE52  F3                 	db	243
   331  00FE53  49                 	db	73
   332  00FE54  71                 	db	113
   333  00FE55                     __end_of__powers_:
   334                           	opt stack 0
   335  00FE55                     _hexpowers:
   336                           	opt stack 0
   337  00FE55  0001               	dw	1
   338  00FE57  0000               	dw	0
   339  00FE59  0010               	dw	16
   340  00FE5B  0000               	dw	0
   341  00FE5D  0100               	dw	256
   342  00FE5F  0000               	dw	0
   343  00FE61  1000               	dw	4096
   344  00FE63  0000               	dw	0
   345  00FE65  0000               	dw	0
   346  00FE67  0001               	dw	1
   347  00FE69  0000               	dw	0
   348  00FE6B  0010               	dw	16
   349  00FE6D  0000               	dw	0
   350  00FE6F  0100               	dw	256
   351  00FE71  0000               	dw	0
   352  00FE73  1000               	dw	4096
   353  00FE75                     __end_of_hexpowers:
   354                           	opt stack 0
   355  00FE75                     _keys:
   356                           	opt stack 0
   357  00FE75  31                 	db	49
   358  00FE76  32                 	db	50
   359  00FE77  33                 	db	51
   360  00FE78  41                 	db	65
   361  00FE79  34                 	db	52
   362  00FE7A  35                 	db	53
   363  00FE7B  36                 	db	54
   364  00FE7C  42                 	db	66
   365  00FE7D  37                 	db	55
   366  00FE7E  38                 	db	56
   367  00FE7F  39                 	db	57
   368  00FE80  43                 	db	67
   369  00FE81  2A                 	db	42
   370  00FE82  30                 	db	48
   371  00FE83  23                 	db	35
   372  00FE84  44                 	db	68
   373  00FE85  00                 	db	0
   374  00FE86                     __end_of_keys:
   375                           	opt stack 0
   376  00FE86                     _happynewyear:
   377                           	opt stack 0
   378  00FE86  00                 	db	0
   379  00FE87  00                 	db	0
   380  00FE88  00                 	db	0
   381  00FE89  01                 	db	1
   382  00FE8A  08                 	db	8
   383  00FE8B  04                 	db	4
   384  00FE8C  17                 	db	23
   385  00FE8D                     __end_of_happynewyear:
   386                           	opt stack 0
   387  0000                     _ADCON0	set	4034
   388  0000                     _ADCON1	set	4033
   389  0000                     _ADCON2	set	4032
   390  0000                     _ADRESH	set	4036
   391  0000                     _ADRESL	set	4035
   392  0000                     _EEADR	set	4009
   393  0000                     _EEADRH	set	4010
   394  0000                     _EECON1	set	4006
   395  0000                     _EECON2	set	4007
   396  0000                     _EEDATA	set	4008
   397  0000                     _INTCONbits	set	4082
   398  0000                     _LATA	set	3977
   399  0000                     _LATB	set	3978
   400  0000                     _LATC	set	3979
   401  0000                     _LATD	set	3980
   402  0000                     _LATDbits	set	3980
   403  0000                     _LATE	set	3981
   404  0000                     _PORTA	set	3968
   405  0000                     _PORTB	set	3969
   406  0000                     _PORTBbits	set	3969
   407  0000                     _PORTC	set	3970
   408  0000                     _PORTD	set	3971
   409  0000                     _SSPADD	set	4040
   410  0000                     _SSPBUF	set	4041
   411  0000                     _SSPCON1	set	4038
   412  0000                     _SSPCON2	set	4037
   413  0000                     _SSPSTAT	set	4039
   414  0000                     _T0CON	set	4053
   415  0000                     _T1CON	set	4045
   416  0000                     _T3CON	set	4017
   417  0000                     _TMR0H	set	4055
   418  0000                     _TMR0L	set	4054
   419  0000                     _TMR1H	set	4047
   420  0000                     _TMR1L	set	4046
   421  0000                     _TMR3H	set	4019
   422  0000                     _TMR3L	set	4018
   423  0000                     _TRISA	set	3986
   424  0000                     _TRISB	set	3987
   425  0000                     _TRISC	set	3988
   426  0000                     _TRISD	set	3989
   427  0000                     _TRISE	set	3990
   428  0000                     _ACKDT	set	32301
   429  0000                     _ACKEN	set	32300
   430  0000                     _EEIF	set	32012
   431  0000                     _INT0IE	set	32660
   432  0000                     _INT0IF	set	32657
   433  0000                     _INT1IE	set	32643
   434  0000                     _INT1IF	set	32640
   435  0000                     _PEIE	set	32662
   436  0000                     _PEN	set	32298
   437  0000                     _RCEN	set	32299
   438  0000                     _RSEN	set	32297
   439  0000                     _SEN	set	32296
   440  0000                     _TMR0IE	set	32661
   441  0000                     _TMR0IF	set	32658
   442  0000                     _TMR1IE	set	31976
   443  0000                     _TMR1IF	set	31984
   444  0000                     _TMR3IE	set	32001
   445  0000                     _TRISC3	set	31907
   446  0000                     _TRISC4	set	31908
   447  00FE8D                     STR_17:
   448  00FE8D  74                 	db	116	;'t'
   449  00FE8E  69                 	db	105	;'i'
   450  00FE8F  6D                 	db	109	;'m'
   451  00FE90  65                 	db	101	;'e'
   452  00FE91  20                 	db	32
   453  00FE92  25                 	db	37
   454  00FE93  30                 	db	48	;'0'
   455  00FE94  32                 	db	50	;'2'
   456  00FE95  6C                 	db	108	;'l'
   457  00FE96  64                 	db	100	;'d'
   458  00FE97  3A                 	db	58	;':'
   459  00FE98  25                 	db	37
   460  00FE99  30                 	db	48	;'0'
   461  00FE9A  32                 	db	50	;'2'
   462  00FE9B  6C                 	db	108	;'l'
   463  00FE9C  64                 	db	100	;'d'
   464  00FE9D  2E                 	db	46
   465  00FE9E  25                 	db	37
   466  00FE9F  30                 	db	48	;'0'
   467  00FEA0  31                 	db	49	;'1'
   468  00FEA1  6C                 	db	108	;'l'
   469  00FEA2  64                 	db	100	;'d'
   470  00FEA3  0A                 	db	10
   471  00FEA4  00                 	db	0
   472  00FEA5                     STR_10:
   473  00FEA5  20                 	db	32
   474  00FEA6  20                 	db	32
   475  00FEA7  20                 	db	32
   476  00FEA8  25                 	db	37
   477  00FEA9  30                 	db	48	;'0'
   478  00FEAA  32                 	db	50	;'2'
   479  00FEAB  78                 	db	120	;'x'
   480  00FEAC  3A                 	db	58	;':'
   481  00FEAD  25                 	db	37
   482  00FEAE  30                 	db	48	;'0'
   483  00FEAF  32                 	db	50	;'2'
   484  00FEB0  78                 	db	120	;'x'
   485  00FEB1  3A                 	db	58	;':'
   486  00FEB2  25                 	db	37
   487  00FEB3  30                 	db	48	;'0'
   488  00FEB4  32                 	db	50	;'2'
   489  00FEB5  78                 	db	120	;'x'
   490  00FEB6  20                 	db	32
   491  00FEB7  20                 	db	32
   492  00FEB8  20                 	db	32
   493  00FEB9  41                 	db	65	;'A'
   494  00FEBA  3E                 	db	62	;'>'
   495  00FEBB  00                 	db	0
   496  00FEBC                     STR_3:
   497  00FEBC  74                 	db	116	;'t'
   498  00FEBD  69                 	db	105	;'i'
   499  00FEBE  6D                 	db	109	;'m'
   500  00FEBF  65                 	db	101	;'e'
   501  00FEC0  20                 	db	32
   502  00FEC1  25                 	db	37
   503  00FEC2  30                 	db	48	;'0'
   504  00FEC3  32                 	db	50	;'2'
   505  00FEC4  6C                 	db	108	;'l'
   506  00FEC5  64                 	db	100	;'d'
   507  00FEC6  3A                 	db	58	;':'
   508  00FEC7  25                 	db	37
   509  00FEC8  30                 	db	48	;'0'
   510  00FEC9  32                 	db	50	;'2'
   511  00FECA  6C                 	db	108	;'l'
   512  00FECB  64                 	db	100	;'d'
   513  00FECC  2E                 	db	46
   514  00FECD  25                 	db	37
   515  00FECE  30                 	db	48	;'0'
   516  00FECF  31                 	db	49	;'1'
   517  00FED0  6C                 	db	108	;'l'
   518  00FED1  64                 	db	100	;'d'
   519  00FED2  00                 	db	0
   520  00FED3                     STR_9:
   521  00FED3  20                 	db	32
   522  00FED4  20                 	db	32
   523  00FED5  32                 	db	50	;'2'
   524  00FED6  30                 	db	48	;'0'
   525  00FED7  25                 	db	37
   526  00FED8  30                 	db	48	;'0'
   527  00FED9  32                 	db	50	;'2'
   528  00FEDA  78                 	db	120	;'x'
   529  00FEDB  2F                 	db	47
   530  00FEDC  25                 	db	37
   531  00FEDD  30                 	db	48	;'0'
   532  00FEDE  32                 	db	50	;'2'
   533  00FEDF  78                 	db	120	;'x'
   534  00FEE0  2F                 	db	47
   535  00FEE1  25                 	db	37
   536  00FEE2  30                 	db	48	;'0'
   537  00FEE3  32                 	db	50	;'2'
   538  00FEE4  78                 	db	120	;'x'
   539  00FEE5  0A                 	db	10
   540  00FEE6  00                 	db	0
   541  00FEE7                     STR_15:
   542  00FEE7  25                 	db	37
   543  00FEE8  63                 	db	99	;'c'
   544  00FEE9  29                 	db	41
   545  00FEEA  20                 	db	32
   546  00FEEB  74                 	db	116	;'t'
   547  00FEEC  69                 	db	105	;'i'
   548  00FEED  6D                 	db	109	;'m'
   549  00FEEE  65                 	db	101	;'e'
   550  00FEEF  20                 	db	32
   551  00FEF0  20                 	db	32
   552  00FEF1  3C                 	db	60	;'<'
   553  00FEF2  41                 	db	65	;'A'
   554  00FEF3  20                 	db	32
   555  00FEF4  20                 	db	32
   556  00FEF5  20                 	db	32
   557  00FEF6  20                 	db	32
   558  00FEF7  20                 	db	32
   559  00FEF8  0A                 	db	10
   560  00FEF9  00                 	db	0
   561  00FEFA                     STR_20:
   562  00FEFA  5B                 	db	91	;'['
   563  00FEFB  25                 	db	37
   564  00FEFC  64                 	db	100	;'d'
   565  00FEFD  2C                 	db	44
   566  00FEFE  25                 	db	37
   567  00FEFF  64                 	db	100	;'d'
   568  00FF00  2C                 	db	44
   569  00FF01  25                 	db	37
   570  00FF02  64                 	db	100	;'d'
   571  00FF03  2C                 	db	44
   572  00FF04  25                 	db	37
   573  00FF05  64                 	db	100	;'d'
   574  00FF06  5D                 	db	93	;']'
   575  00FF07  20                 	db	32
   576  00FF08  20                 	db	32
   577  00FF09  20                 	db	32
   578  00FF0A  2A                 	db	42
   579  00FF0B  3E                 	db	62	;'>'
   580  00FF0C  00                 	db	0
   581  00FF0D                     STR_11:
   582  00FF0D  73                 	db	115	;'s'
   583  00FF0E  74                 	db	116	;'t'
   584  00FF0F  61                 	db	97	;'a'
   585  00FF10  72                 	db	114	;'r'
   586  00FF11  74                 	db	116	;'t'
   587  00FF12  20                 	db	32
   588  00FF13  20                 	db	32
   589  00FF14  20                 	db	32
   590  00FF15  3C                 	db	60	;'<'
   591  00FF16  42                 	db	66	;'B'
   592  00FF17  20                 	db	32
   593  00FF18  20                 	db	32
   594  00FF19  20                 	db	32
   595  00FF1A  20                 	db	32
   596  00FF1B  20                 	db	32
   597  00FF1C  20                 	db	32
   598  00FF1D  0A                 	db	10
   599  00FF1E  00                 	db	0
   600  00FF1F                     STR_13:
   601  00FF1F  73                 	db	115	;'s'
   602  00FF20  65                 	db	101	;'e'
   603  00FF21  6C                 	db	108	;'l'
   604  00FF22  65                 	db	101	;'e'
   605  00FF23  63                 	db	99	;'c'
   606  00FF24  74                 	db	116	;'t'
   607  00FF25  20                 	db	32
   608  00FF26  72                 	db	114	;'r'
   609  00FF27  75                 	db	117	;'u'
   610  00FF28  6E                 	db	110	;'n'
   611  00FF29  3A                 	db	58	;':'
   612  00FF2A  20                 	db	32
   613  00FF2B  20                 	db	32
   614  00FF2C  20                 	db	32
   615  00FF2D  20                 	db	32
   616  00FF2E  20                 	db	32
   617  00FF2F  0A                 	db	10
   618  00FF30  00                 	db	0
   619  00FF31                     STR_19:
   620  00FF31  5B                 	db	91	;'['
   621  00FF32  41                 	db	65	;'A'
   622  00FF33  41                 	db	65	;'A'
   623  00FF34  2C                 	db	44
   624  00FF35  39                 	db	57	;'9'
   625  00FF36  56                 	db	86	;'V'
   626  00FF37  2C                 	db	44
   627  00FF38  43                 	db	67	;'C'
   628  00FF39  2C                 	db	44
   629  00FF3A  6F                 	db	111	;'o'
   630  00FF3B  74                 	db	116	;'t'
   631  00FF3C  68                 	db	104	;'h'
   632  00FF3D  65                 	db	101	;'e'
   633  00FF3E  72                 	db	114	;'r'
   634  00FF3F  5D                 	db	93	;']'
   635  00FF40  20                 	db	32
   636  00FF41  0A                 	db	10
   637  00FF42  00                 	db	0
   638  00FF43                     STR_23:
   639  00FF43  30                 	db	48	;'0'
   640  00FF44  31                 	db	49	;'1'
   641  00FF45  32                 	db	50	;'2'
   642  00FF46  33                 	db	51	;'3'
   643  00FF47  34                 	db	52	;'4'
   644  00FF48  35                 	db	53	;'5'
   645  00FF49  36                 	db	54	;'6'
   646  00FF4A  37                 	db	55	;'7'
   647  00FF4B  38                 	db	56	;'8'
   648  00FF4C  39                 	db	57	;'9'
   649  00FF4D  61                 	db	97	;'a'
   650  00FF4E  62                 	db	98	;'b'
   651  00FF4F  63                 	db	99	;'c'
   652  00FF50  64                 	db	100	;'d'
   653  00FF51  65                 	db	101	;'e'
   654  00FF52  66                 	db	102	;'f'
   655  00FF53  00                 	db	0
   656  00FF54                     STR_18:
   657  00FF54  20                 	db	32
   658  00FF55  20                 	db	32
   659  00FF56  20                 	db	32
   660  00FF57  20                 	db	32
   661  00FF58  20                 	db	32
   662  00FF59  20                 	db	32
   663  00FF5A  20                 	db	32
   664  00FF5B  20                 	db	32
   665  00FF5C  20                 	db	32
   666  00FF5D  20                 	db	32
   667  00FF5E  20                 	db	32
   668  00FF5F  20                 	db	32
   669  00FF60  20                 	db	32
   670  00FF61  20                 	db	32
   671  00FF62  2A                 	db	42
   672  00FF63  3E                 	db	62	;'>'
   673  00FF64  00                 	db	0
   674  00FF65                     STR_14:
   675  00FF65  5B                 	db	91	;'['
   676  00FF66  31                 	db	49	;'1'
   677  00FF67  2C                 	db	44
   678  00FF68  32                 	db	50	;'2'
   679  00FF69  2C                 	db	44
   680  00FF6A  33                 	db	51	;'3'
   681  00FF6B  2C                 	db	44
   682  00FF6C  34                 	db	52	;'4'
   683  00FF6D  5D                 	db	93	;']'
   684  00FF6E  20                 	db	32
   685  00FF6F  20                 	db	32
   686  00FF70  20                 	db	32
   687  00FF71  20                 	db	32
   688  00FF72  20                 	db	32
   689  00FF73  2A                 	db	42
   690  00FF74  3E                 	db	62	;'>'
   691  00FF75  00                 	db	0
   692  00FF76                     STR_12:
   693  00FF76  68                 	db	104	;'h'
   694  00FF77  69                 	db	105	;'i'
   695  00FF78  73                 	db	115	;'s'
   696  00FF79  74                 	db	116	;'t'
   697  00FF7A  6F                 	db	111	;'o'
   698  00FF7B  72                 	db	114	;'r'
   699  00FF7C  79                 	db	121	;'y'
   700  00FF7D  20                 	db	32
   701  00FF7E  3C                 	db	60	;'<'
   702  00FF7F  43                 	db	67	;'C'
   703  00FF80  20                 	db	32
   704  00FF81  20                 	db	32
   705  00FF82  20                 	db	32
   706  00FF83  20                 	db	32
   707  00FF84  2A                 	db	42
   708  00FF85  3E                 	db	62	;'>'
   709  00FF86  00                 	db	0
   710  00FF87                     STR_16:
   711  00FF87  20                 	db	32
   712  00FF88  20                 	db	32
   713  00FF89  20                 	db	32
   714  00FF8A  73                 	db	115	;'s'
   715  00FF8B  74                 	db	116	;'t'
   716  00FF8C  61                 	db	97	;'a'
   717  00FF8D  74                 	db	116	;'t'
   718  00FF8E  73                 	db	115	;'s'
   719  00FF8F  20                 	db	32
   720  00FF90  3C                 	db	60	;'<'
   721  00FF91  42                 	db	66	;'B'
   722  00FF92  20                 	db	32
   723  00FF93  20                 	db	32
   724  00FF94  20                 	db	32
   725  00FF95  2A                 	db	42
   726  00FF96  3E                 	db	62	;'>'
   727  00FF97  00                 	db	0
   728  00FF98                     STR_22:
   729  00FF98  20                 	db	32
   730  00FF99  20                 	db	32
   731  00FF9A  61                 	db	97	;'a'
   732  00FF9B  76                 	db	118	;'v'
   733  00FF9C  61                 	db	97	;'a'
   734  00FF9D  69                 	db	105	;'i'
   735  00FF9E  6C                 	db	108	;'l'
   736  00FF9F  61                 	db	97	;'a'
   737  00FFA0  62                 	db	98	;'b'
   738  00FFA1  6C                 	db	108	;'l'
   739  00FFA2  65                 	db	101	;'e'
   740  00FFA3  20                 	db	32
   741  00FFA4  20                 	db	32
   742  00FFA5  20                 	db	32
   743  00FFA6  2A                 	db	42
   744  00FFA7  3E                 	db	62	;'>'
   745  00FFA8  00                 	db	0
   746  00FFA9                     STR_4:
   747  00FFA9  56                 	db	86	;'V'
   748  00FFAA  3A                 	db	58	;':'
   749  00FFAB  20                 	db	32
   750  00FFAC  25                 	db	37
   751  00FFAD  2E                 	db	46
   752  00FFAE  33                 	db	51	;'3'
   753  00FFAF  66                 	db	102	;'f'
   754  00FFB0  2C                 	db	44
   755  00FFB1  20                 	db	32
   756  00FFB2  4E                 	db	78	;'N'
   757  00FFB3  3A                 	db	58	;':'
   758  00FFB4  20                 	db	32
   759  00FFB5  25                 	db	37
   760  00FFB6  64                 	db	100	;'d'
   761  00FFB7  0A                 	db	10
   762  00FFB8  00                 	db	0
   763  00FFB9                     STR_21:
   764  00FFB9  20                 	db	32
   765  00FFBA  72                 	db	114	;'r'
   766  00FFBB  75                 	db	117	;'u'
   767  00FFBC  6E                 	db	110	;'n'
   768  00FFBD  20                 	db	32
   769  00FFBE  6E                 	db	110	;'n'
   770  00FFBF  6F                 	db	111	;'o'
   771  00FFC0  74                 	db	116	;'t'
   772  00FFC1  20                 	db	32
   773  00FFC2  0A                 	db	10
   774  00FFC3  00                 	db	0
   775  00FFC4                     STR_7:
   776  00FFC4  43                 	db	67	;'C'
   777  00FFC5  20                 	db	32
   778  00FFC6  20                 	db	32
   779  00FFC7  6C                 	db	108	;'l'
   780  00FFC8  69                 	db	105	;'i'
   781  00FFC9  6D                 	db	109	;'m'
   782  00FFCA  3A                 	db	58	;':'
   783  00FFCB  20                 	db	32
   784  00FFCC  25                 	db	37
   785  00FFCD  66                 	db	102	;'f'
   786  00FFCE  00                 	db	0
   787  00FFCF                     STR_5:
   788  00FFCF  41                 	db	65	;'A'
   789  00FFD0  41                 	db	65	;'A'
   790  00FFD1  20                 	db	32
   791  00FFD2  6C                 	db	108	;'l'
   792  00FFD3  69                 	db	105	;'i'
   793  00FFD4  6D                 	db	109	;'m'
   794  00FFD5  3A                 	db	58	;':'
   795  00FFD6  20                 	db	32
   796  00FFD7  25                 	db	37
   797  00FFD8  66                 	db	102	;'f'
   798  00FFD9  00                 	db	0
   799  00FFDA                     STR_6:
   800  00FFDA  39                 	db	57	;'9'
   801  00FFDB  56                 	db	86	;'V'
   802  00FFDC  20                 	db	32
   803  00FFDD  6C                 	db	108	;'l'
   804  00FFDE  69                 	db	105	;'i'
   805  00FFDF  6D                 	db	109	;'m'
   806  00FFE0  3A                 	db	58	;':'
   807  00FFE1  20                 	db	32
   808  00FFE2  25                 	db	37
   809  00FFE3  66                 	db	102	;'f'
   810  00FFE4  00                 	db	0
   811  00FFE5  25                 	db	37
   812  00FFE6  64                 	db	100	;'d'
   813  00FFE7  2C                 	db	44
   814  00FFE8  20                 	db	32
   815  00FFE9  25                 	db	37
   816  00FFEA  30                 	db	48	;'0'
   817  00FFEB  32                 	db	50	;'2'
   818  00FFEC  78                 	db	120	;'x'
   819  00FFED  00                 	db	0
   820  00FFEE  74                 	db	116	;'t'
   821  00FFEF  31                 	db	49	;'1'
   822  00FFF0  3A                 	db	58	;':'
   823  00FFF1  20                 	db	32
   824  00FFF2  25                 	db	37
   825  00FFF3  78                 	db	120	;'x'
   826  00FFF4  20                 	db	32
   827  00FFF5  00                 	db	0
   828  00FFF6                     STR_2:
   829  00FFF6  72                 	db	114	;'r'
   830  00FFF7  75                 	db	117	;'u'
   831  00FFF8  6E                 	db	110	;'n'
   832  00FFF9  6E                 	db	110	;'n'
   833  00FFFA  69                 	db	105	;'i'
   834  00FFFB  6E                 	db	110	;'n'
   835  00FFFC  67                 	db	103	;'g'
   836  00FFFD  00                 	db	0
   837                           
   838                           ; #config settings
   839  00FFFE  00                 	db	0	; dummy byte at the end
   840  0000                     
   841                           	psect	cinit
   842  003698                     __pcinit:
   843                           	opt stack 0
   844  003698                     start_initialization:
   845                           	opt stack 0
   846  003698                     __initialization:
   847                           	opt stack 0
   848                           
   849                           ; Initialize objects allocated to BANK1 (38 bytes)
   850                           ; load TBLPTR registers with __pidataBANK1
   851  003698  0E38               	movlw	low __pidataBANK1
   852  00369A  6EF6               	movwf	tblptrl,c
   853  00369C  0E3F               	movlw	high __pidataBANK1
   854  00369E  6EF7               	movwf	tblptrh,c
   855  0036A0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   856  0036A2  6EF8               	movwf	tblptru,c
   857  0036A4  EE01  F044         	lfsr	0,__pdataBANK1
   858  0036A8  EE10 F026          	lfsr	1,38
   859  0036AC                     copy_data0:
   860  0036AC  0009               	tblrd		*+
   861  0036AE  CFF5 FFEE          	movff	tablat,postinc0
   862  0036B2  50E5               	movf	postdec1,w,c
   863  0036B4  50E1               	movf	fsr1l,w,c
   864  0036B6  E1FA               	bnz	copy_data0
   865                           
   866                           ; Initialize objects allocated to BANK0 (2 bytes)
   867                           ; load TBLPTR registers with __pidataBANK0
   868  0036B8  0E0E               	movlw	low __pidataBANK0
   869  0036BA  6EF6               	movwf	tblptrl,c
   870  0036BC  0E41               	movlw	high __pidataBANK0
   871  0036BE  6EF7               	movwf	tblptrh,c
   872  0036C0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   873  0036C2  6EF8               	movwf	tblptru,c
   874  0036C4  0009               	tblrd		*+	;fetch initializer
   875  0036C6  CFF5 F0FD          	movff	tablat,__pdataBANK0
   876  0036CA  0009               	tblrd		*+	;fetch initializer
   877  0036CC  CFF5 F0FE          	movff	tablat,__pdataBANK0+1
   878                           
   879                           ; Initialize objects allocated to COMRAM (23 bytes)
   880                           ; load TBLPTR registers with __pidataCOMRAM
   881  0036D0  0E90               	movlw	low __pidataCOMRAM
   882  0036D2  6EF6               	movwf	tblptrl,c
   883  0036D4  0E40               	movlw	high __pidataCOMRAM
   884  0036D6  6EF7               	movwf	tblptrh,c
   885  0036D8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   886  0036DA  6EF8               	movwf	tblptru,c
   887  0036DC  EE00  F03B         	lfsr	0,__pdataCOMRAM
   888  0036E0  EE10 F017          	lfsr	1,23
   889  0036E4                     copy_data1:
   890  0036E4  0009               	tblrd		*+
   891  0036E6  CFF5 FFEE          	movff	tablat,postinc0
   892  0036EA  50E5               	movf	postdec1,w,c
   893  0036EC  50E1               	movf	fsr1l,w,c
   894  0036EE  E1FA               	bnz	copy_data1
   895                           
   896                           ; Clear objects allocated to BANK1 (32 bytes)
   897  0036F0  EE01  F06A         	lfsr	0,__pbssBANK1
   898  0036F4  0E20               	movlw	32
   899  0036F6                     clear_0:
   900  0036F6  6AEE               	clrf	postinc0,c
   901  0036F8  06E8               	decf	wreg,f,c
   902  0036FA  E1FD               	bnz	clear_0
   903                           
   904                           ; Clear objects allocated to BANK0 (2 bytes)
   905  0036FC  0100               	movlb	0
   906  0036FE  6BFC               	clrf	(__pbssBANK0+1)& (0+255),b
   907  003700  6BFB               	clrf	__pbssBANK0& (0+255),b
   908                           
   909                           ; Clear objects allocated to COMRAM (11 bytes)
   910  003702  EE00  F052         	lfsr	0,__pbssCOMRAM
   911  003706  0E0B               	movlw	11
   912  003708                     clear_1:
   913  003708  6AEE               	clrf	postinc0,c
   914  00370A  06E8               	decf	wreg,f,c
   915  00370C  E1FD               	bnz	clear_1
   916  00370E                     end_of_initialization:
   917                           	opt stack 0
   918  00370E                     __end_of__initialization:
   919                           	opt stack 0
   920  00370E  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   921  003710  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   922  003712  0E00               	movlw	low (__Lmediumconst shr (0+16))
   923  003714  6EF8               	movwf	tblptru,c
   924  003716  0100               	movlb	0
   925  003718  EFBD  F009         	goto	_main	;jump to C main() function
   926                           tblptru	equ	0xFF8
   927                           tblptrh	equ	0xFF7
   928                           tblptrl	equ	0xFF6
   929                           tablat	equ	0xFF5
   930                           postinc0	equ	0xFEE
   931                           wreg	equ	0xFE8
   932                           postdec1	equ	0xFE5
   933                           fsr1l	equ	0xFE1
   934                           
   935                           	psect	bssCOMRAM
   936  000052                     __pbssCOMRAM:
   937                           	opt stack 0
   938  000052                     _padPin3:
   939                           	opt stack 0
   940  000052                     	ds	4
   941  000056                     _count:
   942                           	opt stack 0
   943  000056                     	ds	2
   944  000058                     _curr:
   945                           	opt stack 0
   946  000058                     	ds	2
   947  00005A                     _prevTime:
   948                           	opt stack 0
   949  00005A                     	ds	2
   950  00005C                     _lastKey:
   951                           	opt stack 0
   952  00005C                     	ds	1
   953                           tblptru	equ	0xFF8
   954                           tblptrh	equ	0xFF7
   955                           tblptrl	equ	0xFF6
   956                           tablat	equ	0xFF5
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           postdec1	equ	0xFE5
   960                           fsr1l	equ	0xFE1
   961                           
   962                           	psect	dataCOMRAM
   963  00003B                     __pdataCOMRAM:
   964                           	opt stack 0
   965  00003B                     _V_LIM_9V:
   966                           	opt stack 0
   967  00003B                     	ds	3
   968  00003E                     _V_LIM_AA:
   969                           	opt stack 0
   970  00003E                     	ds	3
   971  000041                     _V_LIM_C:
   972                           	opt stack 0
   973  000041                     	ds	3
   974  000044                     _angle:
   975                           	opt stack 0
   976  000044                     	ds	2
   977  000046                     _padAngle_CLOSE:
   978                           	opt stack 0
   979  000046                     	ds	2
   980  000048                     _padAngle_OPEN:
   981                           	opt stack 0
   982  000048                     	ds	2
   983  00004A                     _redirectAngle_9V:
   984                           	opt stack 0
   985  00004A                     	ds	2
   986  00004C                     _redirectAngle_C:
   987                           	opt stack 0
   988  00004C                     	ds	2
   989  00004E                     _AA_float:
   990                           	opt stack 0
   991  00004E                     	ds	4
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           postinc0	equ	0xFEE
   997                           wreg	equ	0xFE8
   998                           postdec1	equ	0xFE5
   999                           fsr1l	equ	0xFE1
  1000                           
  1001                           	psect	bssBANK0
  1002  0000FB                     __pbssBANK0:
  1003                           	opt stack 0
  1004  0000FB                     _n:
  1005                           	opt stack 0
  1006  0000FB                     	ds	2
  1007                           tblptru	equ	0xFF8
  1008                           tblptrh	equ	0xFF7
  1009                           tblptrl	equ	0xFF6
  1010                           tablat	equ	0xFF5
  1011                           postinc0	equ	0xFEE
  1012                           wreg	equ	0xFE8
  1013                           postdec1	equ	0xFE5
  1014                           fsr1l	equ	0xFE1
  1015                           
  1016                           	psect	dataBANK0
  1017  0000FD                     __pdataBANK0:
  1018                           	opt stack 0
  1019  0000FD                     _redirectAngle_OTHER:
  1020                           	opt stack 0
  1021  0000FD                     	ds	2
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1l	equ	0xFE1
  1030                           
  1031                           	psect	bssBANK1
  1032  00016A                     __pbssBANK1:
  1033                           	opt stack 0
  1034  00016A                     _pulse:
  1035                           	opt stack 0
  1036  00016A                     	ds	8
  1037  000172                     _servos:
  1038                           	opt stack 0
  1039  000172                     	ds	8
  1040  00017A                     _time:
  1041                           	opt stack 0
  1042  00017A                     	ds	4
  1043  00017E                     _batteryDetected:
  1044                           	opt stack 0
  1045  00017E                     	ds	2
  1046  000180                     _n_9V:
  1047                           	opt stack 0
  1048  000180                     	ds	2
  1049  000182                     _n_AA:
  1050                           	opt stack 0
  1051  000182                     	ds	2
  1052  000184                     _n_C:
  1053                           	opt stack 0
  1054  000184                     	ds	2
  1055  000186                     _n_OTHER:
  1056                           	opt stack 0
  1057  000186                     	ds	2
  1058  000188                     _terminate:
  1059                           	opt stack 0
  1060  000188                     	ds	2
  1061                           tblptru	equ	0xFF8
  1062                           tblptrh	equ	0xFF7
  1063                           tblptrl	equ	0xFF6
  1064                           tablat	equ	0xFF5
  1065                           postinc0	equ	0xFEE
  1066                           wreg	equ	0xFE8
  1067                           postdec1	equ	0xFE5
  1068                           fsr1l	equ	0xFE1
  1069                           
  1070                           	psect	dataBANK1
  1071  000144                     __pdataBANK1:
  1072                           	opt stack 0
  1073  000144                     _cylinderBackward:
  1074                           	opt stack 0
  1075  000144                     	ds	2
  1076  000146                     _cylinderForward:
  1077                           	opt stack 0
  1078  000146                     	ds	2
  1079  000148                     _padAngle_NEUTRAL:
  1080                           	opt stack 0
  1081  000148                     	ds	2
  1082  00014A                     _redirectAngle_AA:
  1083                           	opt stack 0
  1084  00014A                     	ds	2
  1085  00014C                     _stoppingTime:
  1086                           	opt stack 0
  1087  00014C                     	ds	2
  1088  00014E                     _conveyorServo:
  1089                           	opt stack 0
  1090  00014E                     	ds	4
  1091  000152                     _cylinderMotor1:
  1092                           	opt stack 0
  1093  000152                     	ds	4
  1094  000156                     _cylinderMotor2:
  1095                           	opt stack 0
  1096  000156                     	ds	4
  1097  00015A                     _padPin1:
  1098                           	opt stack 0
  1099  00015A                     	ds	4
  1100  00015E                     _padPin2:
  1101                           	opt stack 0
  1102  00015E                     	ds	4
  1103  000162                     _padServo:
  1104                           	opt stack 0
  1105  000162                     	ds	4
  1106  000166                     _redirectingServo:
  1107                           	opt stack 0
  1108  000166                     	ds	4
  1109                           tblptru	equ	0xFF8
  1110                           tblptrh	equ	0xFF7
  1111                           tblptrl	equ	0xFF6
  1112                           tablat	equ	0xFF5
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           postdec1	equ	0xFE5
  1116                           fsr1l	equ	0xFE1
  1117                           
  1118                           	psect	cstackBANK1
  1119  000100                     __pcstackBANK1:
  1120                           	opt stack 0
  1121  000100                     showDateTime@sec:
  1122                           	opt stack 0
  1123  000100                     _sortBattery$1417:
  1124                           	opt stack 0
  1125  000100                     _showRunTime$1419:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x0
  1129  000100                     	ds	2
  1130  000102                     showDateTime@min:
  1131                           	opt stack 0
  1132  000102                     sortBattery@V_float:
  1133                           	opt stack 0
  1134                           
  1135                           ; 3 bytes @ 0x2
  1136  000102                     	ds	2
  1137  000104                     showDateTime@hour:
  1138                           	opt stack 0
  1139  000104                     showRunTime@t1:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x4
  1143  000104                     	ds	1
  1144  000105                     sortBattery@pos_v_counter:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x5
  1148  000105                     	ds	1
  1149  000106                     showDateTime@day:
  1150                           	opt stack 0
  1151  000106                     showRunTime@t2:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x6
  1155  000106                     	ds	1
  1156  000107                     sortBattery@signal:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x7
  1160  000107                     	ds	1
  1161  000108                     showDateTime@mon:
  1162                           	opt stack 0
  1163  000108                     showRunTime@time:
  1164                           	opt stack 0
  1165                           
  1166                           ; 4 bytes @ 0x8
  1167  000108                     	ds	1
  1168  000109                     sortBattery@Vcc:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x9
  1172  000109                     	ds	1
  1173  00010A                     showDateTime@year:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0xA
  1177  00010A                     	ds	2
  1178  00010C                     showDateTime@t:
  1179                           	opt stack 0
  1180  00010C                     sortBattery@resolution:
  1181                           	opt stack 0
  1182                           
  1183                           ; 3 bytes @ 0xC
  1184  00010C                     	ds	2
  1185  00010E                     showInterface@n:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0xE
  1189  00010E                     	ds	1
  1190  00010F                     sortBattery@V_max:
  1191                           	opt stack 0
  1192                           
  1193                           ; 3 bytes @ 0xF
  1194  00010F                     	ds	1
  1195  000110                     showInterface@run:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x10
  1199  000110                     	ds	2
  1200  000112                     showInterface@key:
  1201                           	opt stack 0
  1202  000112                     sortBattery@i_249:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x12
  1206  000112                     	ds	2
  1207  000114                     sortBattery@targetAngle:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x14
  1211  000114                     	ds	2
  1212  000116                     sortBattery@V:
  1213                           	opt stack 0
  1214                           
  1215                           ; 3 bytes @ 0x16
  1216  000116                     	ds	3
  1217  000119                     sortBattery@i:
  1218                           	opt stack 0
  1219                           
  1220                           ; 3 bytes @ 0x19
  1221  000119                     	ds	3
  1222  00011C                     sortBattery@V_244:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x1C
  1226  00011C                     	ds	3
  1227  00011F                     ??_main:
  1228                           
  1229                           ; 1 bytes @ 0x1F
  1230  00011F                     	ds	13
  1231  00012C                     _main$1416:
  1232                           	opt stack 0
  1233                           
  1234                           ; 4 bytes @ 0x2C
  1235  00012C                     	ds	4
  1236  000130                     main@lastBatteryTime:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x30
  1240  000130                     	ds	2
  1241  000132                     main@cylinderStart:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x32
  1245  000132                     	ds	2
  1246  000134                     main@run:
  1247                           	opt stack 0
  1248                           
  1249                           ; 14 bytes @ 0x34
  1250  000134                     	ds	14
  1251  000142                     main@duration:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x42
  1255  000142                     	ds	2
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1l	equ	0xFE1
  1264                           
  1265                           	psect	cstackBANK0
  1266  000080                     __pcstackBANK0:
  1267                           	opt stack 0
  1268  000080                     ??___ftdiv:
  1269  000080                     ?_readPastRun:
  1270                           	opt stack 0
  1271  000080                     readPastRun@run:
  1272                           	opt stack 0
  1273  000080                     eepromWrite@data:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x0
  1277  000080                     	ds	2
  1278  000082                     eepromWrite@address:
  1279                           	opt stack 0
  1280  000082                     readPastRun@data:
  1281                           	opt stack 0
  1282                           
  1283                           ; 14 bytes @ 0x2
  1284  000082                     	ds	1
  1285  000083                     ___ftdiv@cntr:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x3
  1289  000083                     	ds	1
  1290  000084                     ___ftdiv@f3:
  1291                           	opt stack 0
  1292                           
  1293                           ; 3 bytes @ 0x4
  1294  000084                     	ds	2
  1295  000086                     ??_eepromWrite:
  1296                           
  1297                           ; 1 bytes @ 0x6
  1298  000086                     	ds	1
  1299  000087                     ___ftdiv@exp:
  1300                           	opt stack 0
  1301  000087                     eepromWrite@ien:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0x7
  1305  000087                     	ds	1
  1306  000088                     ___ftdiv@sign:
  1307                           	opt stack 0
  1308                           
  1309                           ; 1 bytes @ 0x8
  1310  000088                     	ds	1
  1311  000089                     ?___ftmul:
  1312                           	opt stack 0
  1313  000089                     saveNewRun@data:
  1314                           	opt stack 0
  1315  000089                     ___ftmul@f1:
  1316                           	opt stack 0
  1317                           
  1318                           ; 3 bytes @ 0x9
  1319  000089                     	ds	2
  1320  00008B                     saveNewRun@n:
  1321                           	opt stack 0
  1322                           
  1323                           ; 2 bytes @ 0xB
  1324  00008B                     	ds	1
  1325  00008C                     ___ftmul@f2:
  1326                           	opt stack 0
  1327                           
  1328                           ; 3 bytes @ 0xC
  1329  00008C                     	ds	1
  1330  00008D                     saveNewRun@i:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0xD
  1334  00008D                     	ds	2
  1335  00008F                     ??___ftmul:
  1336                           
  1337                           ; 1 bytes @ 0xF
  1338  00008F                     	ds	1
  1339  000090                     readPastRun@i:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x10
  1343  000090                     	ds	2
  1344  000092                     ___ftmul@exp:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x12
  1348  000092                     	ds	1
  1349  000093                     ___ftmul@f3_as_product:
  1350                           	opt stack 0
  1351                           
  1352                           ; 3 bytes @ 0x13
  1353  000093                     	ds	3
  1354  000096                     ___ftmul@cntr:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x16
  1358  000096                     	ds	1
  1359  000097                     ___ftmul@sign:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x17
  1363  000097                     	ds	1
  1364  000098                     ?_fround:
  1365                           	opt stack 0
  1366  000098                     ?_scale:
  1367                           	opt stack 0
  1368                           
  1369                           ; 3 bytes @ 0x18
  1370  000098                     	ds	3
  1371  00009B                     _fround$1421:
  1372                           	opt stack 0
  1373  00009B                     _scale$1422:
  1374                           	opt stack 0
  1375                           
  1376                           ; 3 bytes @ 0x1B
  1377  00009B                     	ds	3
  1378  00009E                     scale@scl:
  1379                           	opt stack 0
  1380  00009E                     _fround$1420:
  1381                           	opt stack 0
  1382                           
  1383                           ; 3 bytes @ 0x1E
  1384  00009E                     	ds	3
  1385  0000A1                     fround@prec:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x21
  1389  0000A1                     	ds	1
  1390  0000A2                     ?___ftadd:
  1391                           	opt stack 0
  1392  0000A2                     ___ftadd@f1:
  1393                           	opt stack 0
  1394                           
  1395                           ; 3 bytes @ 0x22
  1396  0000A2                     	ds	3
  1397  0000A5                     ___ftadd@f2:
  1398                           	opt stack 0
  1399                           
  1400                           ; 3 bytes @ 0x25
  1401  0000A5                     	ds	3
  1402  0000A8                     ??___ftadd:
  1403                           
  1404                           ; 1 bytes @ 0x28
  1405  0000A8                     	ds	3
  1406  0000AB                     ___ftadd@sign:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x2B
  1410  0000AB                     	ds	1
  1411  0000AC                     ___ftadd@exp2:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x2C
  1415  0000AC                     	ds	1
  1416  0000AD                     ___ftadd@exp1:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x2D
  1420  0000AD                     	ds	1
  1421  0000AE                     ?___ftsub:
  1422                           	opt stack 0
  1423  0000AE                     ?___fttol:
  1424                           	opt stack 0
  1425  0000AE                     ___ftsub@f1:
  1426                           	opt stack 0
  1427  0000AE                     ___fttol@f1:
  1428                           	opt stack 0
  1429                           
  1430                           ; 3 bytes @ 0x2E
  1431  0000AE                     	ds	3
  1432  0000B1                     ___ftsub@f2:
  1433                           	opt stack 0
  1434                           
  1435                           ; 3 bytes @ 0x31
  1436  0000B1                     	ds	1
  1437  0000B2                     ??___fttol:
  1438                           
  1439                           ; 1 bytes @ 0x32
  1440  0000B2                     	ds	5
  1441  0000B7                     ___fttol@sign1:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x37
  1445  0000B7                     	ds	1
  1446  0000B8                     ___fttol@lval:
  1447                           	opt stack 0
  1448                           
  1449                           ; 4 bytes @ 0x38
  1450  0000B8                     	ds	4
  1451  0000BC                     ___fttol@exp1:
  1452                           	opt stack 0
  1453                           
  1454                           ; 1 bytes @ 0x3C
  1455  0000BC                     	ds	1
  1456  0000BD                     ?_printf:
  1457                           	opt stack 0
  1458  0000BD                     ?_angleToPulse:
  1459                           	opt stack 0
  1460  0000BD                     angleToPulse@angle:
  1461                           	opt stack 0
  1462  0000BD                     printf@f:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x3D
  1466  0000BD                     	ds	4
  1467  0000C1                     ??_angleToPulse:
  1468                           
  1469                           ; 1 bytes @ 0x41
  1470  0000C1                     	ds	4
  1471  0000C5                     angleToPulse@offset:
  1472                           	opt stack 0
  1473                           
  1474                           ; 4 bytes @ 0x45
  1475  0000C5                     	ds	4
  1476  0000C9                     angleToPulse@a180:
  1477                           	opt stack 0
  1478                           
  1479                           ; 4 bytes @ 0x49
  1480  0000C9                     	ds	2
  1481  0000CB                     ??_printf:
  1482                           
  1483                           ; 1 bytes @ 0x4B
  1484  0000CB                     	ds	2
  1485  0000CD                     _angleToPulse$1418:
  1486                           	opt stack 0
  1487                           
  1488                           ; 3 bytes @ 0x4D
  1489  0000CD                     	ds	3
  1490  0000D0                     angleToPulse@a000:
  1491                           	opt stack 0
  1492                           
  1493                           ; 4 bytes @ 0x50
  1494  0000D0                     	ds	1
  1495  0000D1                     _printf$1423:
  1496                           	opt stack 0
  1497                           
  1498                           ; 3 bytes @ 0x51
  1499  0000D1                     	ds	3
  1500  0000D4                     printf@idx:
  1501                           	opt stack 0
  1502  0000D4                     setAngle@motor:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x54
  1506  0000D4                     	ds	1
  1507  0000D5                     printf@cp:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x55
  1511  0000D5                     	ds	1
  1512  0000D6                     setAngle@angle:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x56
  1516  0000D6                     	ds	1
  1517  0000D7                     printf@len:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x57
  1521  0000D7                     	ds	1
  1522  0000D8                     ??_setAngle:
  1523                           
  1524                           ; 1 bytes @ 0x58
  1525  0000D8                     	ds	1
  1526  0000D9                     printf@ap:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x59
  1530  0000D9                     	ds	1
  1531  0000DA                     setAngle@period:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x5A
  1535  0000DA                     	ds	1
  1536  0000DB                     printf@tmpval:
  1537                           	opt stack 0
  1538                           
  1539                           ; 4 bytes @ 0x5B
  1540  0000DB                     	ds	1
  1541  0000DC                     setAngle@i:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x5C
  1545  0000DC                     	ds	2
  1546  0000DE                     initServo@motor:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x5E
  1550  0000DE                     	ds	1
  1551  0000DF                     printf@exp:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x5F
  1555  0000DF                     	ds	1
  1556  0000E0                     initServo@angle:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x60
  1560  0000E0                     	ds	1
  1561  0000E1                     printf@fval:
  1562                           	opt stack 0
  1563                           
  1564                           ; 3 bytes @ 0x61
  1565  0000E1                     	ds	1
  1566  0000E2                     ??_initServo:
  1567                           
  1568                           ; 1 bytes @ 0x62
  1569  0000E2                     	ds	2
  1570  0000E4                     printf@val:
  1571                           	opt stack 0
  1572                           
  1573                           ; 4 bytes @ 0x64
  1574  0000E4                     	ds	2
  1575  0000E6                     initServo@i:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0x66
  1579  0000E6                     	ds	2
  1580  0000E8                     printf@width:
  1581                           	opt stack 0
  1582                           
  1583                           ; 2 bytes @ 0x68
  1584  0000E8                     	ds	2
  1585  0000EA                     printf@flag:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x6A
  1589  0000EA                     	ds	2
  1590  0000EC                     printf@prec:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x6C
  1594  0000EC                     	ds	2
  1595  0000EE                     printf@c:
  1596                           	opt stack 0
  1597                           
  1598                           ; 1 bytes @ 0x6E
  1599  0000EE                     	ds	1
  1600  0000EF                     ??_sortBattery:
  1601  0000EF                     ??_showDateTime:
  1602  0000EF                     showMainMenu@k:
  1603                           	opt stack 0
  1604  0000EF                     showRunSelect@k:
  1605                           	opt stack 0
  1606  0000EF                     showRunMenu@key:
  1607                           	opt stack 0
  1608  0000EF                     showRunTime@run:
  1609                           	opt stack 0
  1610  0000EF                     showRunStats@run:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x6F
  1614  0000EF                     	ds	1
  1615  0000F0                     showRunMenu@k:
  1616                           	opt stack 0
  1617                           
  1618                           ; 1 bytes @ 0x70
  1619  0000F0                     	ds	1
  1620  0000F1                     ??_showRunTime:
  1621  0000F1                     showRunStats@n_AA:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x71
  1625  0000F1                     	ds	2
  1626  0000F3                     showRunStats@n_9V:
  1627                           	opt stack 0
  1628                           
  1629                           ; 2 bytes @ 0x73
  1630  0000F3                     	ds	2
  1631  0000F5                     showRunStats@n_C:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x75
  1635  0000F5                     	ds	2
  1636  0000F7                     showRunStats@n_OTHER:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x77
  1640  0000F7                     	ds	2
  1641  0000F9                     ??_showInterface:
  1642                           
  1643                           ; 1 bytes @ 0x79
  1644  0000F9                     	ds	2
  1645                           tblptru	equ	0xFF8
  1646                           tblptrh	equ	0xFF7
  1647                           tblptrl	equ	0xFF6
  1648                           tablat	equ	0xFF5
  1649                           postinc0	equ	0xFEE
  1650                           wreg	equ	0xFE8
  1651                           postdec1	equ	0xFE5
  1652                           fsr1l	equ	0xFE1
  1653                           
  1654                           	psect	cstackCOMRAM
  1655  000001                     __pcstackCOMRAM:
  1656                           	opt stack 0
  1657  000001                     ?i2___awmod:
  1658                           	opt stack 0
  1659  000001                     keyPressedInterruptService@key:
  1660                           	opt stack 0
  1661  000001                     i2___awmod@dividend:
  1662                           	opt stack 0
  1663                           
  1664                           ; 2 bytes @ 0x0
  1665  000001                     	ds	2
  1666  000003                     i2___awmod@divisor:
  1667                           	opt stack 0
  1668                           
  1669                           ; 2 bytes @ 0x2
  1670  000003                     	ds	2
  1671  000005                     i2___awmod@counter:
  1672                           	opt stack 0
  1673                           
  1674                           ; 1 bytes @ 0x4
  1675  000005                     	ds	1
  1676  000006                     i2___awmod@sign:
  1677                           	opt stack 0
  1678                           
  1679                           ; 1 bytes @ 0x5
  1680  000006                     	ds	1
  1681  000007                     i2digitalWrite@pin:
  1682                           	opt stack 0
  1683  000007                     i2startTimer@timer:
  1684                           	opt stack 0
  1685                           
  1686                           ; 2 bytes @ 0x6
  1687  000007                     	ds	2
  1688  000009                     i2digitalWrite@val:
  1689                           	opt stack 0
  1690  000009                     i2startTimer@val:
  1691                           	opt stack 0
  1692                           
  1693                           ; 4 bytes @ 0x8
  1694  000009                     	ds	2
  1695  00000B                     ??i2_digitalWrite:
  1696                           
  1697                           ; 1 bytes @ 0xA
  1698  00000B                     	ds	2
  1699  00000D                     ??i2_startTimer:
  1700                           
  1701                           ; 1 bytes @ 0xC
  1702  00000D                     	ds	1
  1703  00000E                     i2digitalWrite@p:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0xD
  1707  00000E                     	ds	2
  1708  000010                     ??_servoInterruptService:
  1709                           
  1710                           ; 1 bytes @ 0xF
  1711  000010                     	ds	4
  1712  000014                     ??_service:
  1713                           
  1714                           ; 1 bytes @ 0x13
  1715  000014                     	ds	14
  1716  000022                     service@key:
  1717                           	opt stack 0
  1718                           
  1719                           ; 1 bytes @ 0x21
  1720  000022                     	ds	1
  1721  000023                     ??_isdigit:
  1722  000023                     ??_I2C_Master_Wait:
  1723  000023                     ?_digitalRead:
  1724                           	opt stack 0
  1725  000023                     ?___awmod:
  1726                           	opt stack 0
  1727  000023                     ?___ftpack:
  1728                           	opt stack 0
  1729  000023                     ?___ftneg:
  1730                           	opt stack 0
  1731  000023                     ?_analogRead:
  1732                           	opt stack 0
  1733  000023                     ?__tdiv_to_l_:
  1734                           	opt stack 0
  1735  000023                     ?__div_to_l_:
  1736                           	opt stack 0
  1737  000023                     ?___almod:
  1738                           	opt stack 0
  1739  000023                     ?___lldiv:
  1740                           	opt stack 0
  1741  000023                     lcdNibble@temp:
  1742                           	opt stack 0
  1743  000023                     readKeypad@key:
  1744                           	opt stack 0
  1745  000023                     keyPressed@key:
  1746                           	opt stack 0
  1747  000023                     digitalRead@pin:
  1748                           	opt stack 0
  1749  000023                     digitalWrite@pin:
  1750                           	opt stack 0
  1751  000023                     analogRead@channel:
  1752                           	opt stack 0
  1753  000023                     initTimer@timer:
  1754                           	opt stack 0
  1755  000023                     startTimer@timer:
  1756                           	opt stack 0
  1757  000023                     ___awmod@dividend:
  1758                           	opt stack 0
  1759  000023                     __div_to_l_@f1:
  1760                           	opt stack 0
  1761  000023                     ___ftpack@arg:
  1762                           	opt stack 0
  1763  000023                     __tdiv_to_l_@f1:
  1764                           	opt stack 0
  1765  000023                     ___ftneg@f1:
  1766                           	opt stack 0
  1767  000023                     ___almod@dividend:
  1768                           	opt stack 0
  1769  000023                     ___lldiv@dividend:
  1770                           	opt stack 0
  1771                           
  1772                           ; 4 bytes @ 0x22
  1773  000023                     	ds	1
  1774  000024                     lcdNibble@data:
  1775                           	opt stack 0
  1776  000024                     I2C_Master_Read@a:
  1777                           	opt stack 0
  1778  000024                     _isdigit$1052:
  1779                           	opt stack 0
  1780  000024                     I2C_Master_Write@d:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x23
  1784  000024                     	ds	1
  1785  000025                     ??_initTimer:
  1786  000025                     ??_digitalRead:
  1787  000025                     ??_lcdInst:
  1788  000025                     I2C_Master_Read@temp:
  1789                           	opt stack 0
  1790  000025                     isdigit@c:
  1791                           	opt stack 0
  1792  000025                     digitalWrite@val:
  1793                           	opt stack 0
  1794  000025                     ___awmod@divisor:
  1795                           	opt stack 0
  1796  000025                     startTimer@val:
  1797                           	opt stack 0
  1798                           
  1799                           ; 4 bytes @ 0x24
  1800  000025                     	ds	1
  1801  000026                     ?_getTime:
  1802                           	opt stack 0
  1803  000026                     lcdInst@data:
  1804                           	opt stack 0
  1805  000026                     ___ftpack@exp:
  1806                           	opt stack 0
  1807  000026                     __div_to_l_@f2:
  1808                           	opt stack 0
  1809  000026                     __tdiv_to_l_@f2:
  1810                           	opt stack 0
  1811                           
  1812                           ; 3 bytes @ 0x25
  1813  000026                     	ds	1
  1814  000027                     ??_initLCD:
  1815  000027                     ??_digitalWrite:
  1816  000027                     ??_analogRead:
  1817  000027                     putch@data:
  1818                           	opt stack 0
  1819  000027                     ___awmod@counter:
  1820                           	opt stack 0
  1821  000027                     ___ftpack@sign:
  1822                           	opt stack 0
  1823  000027                     ___almod@divisor:
  1824                           	opt stack 0
  1825  000027                     ___lldiv@divisor:
  1826                           	opt stack 0
  1827                           
  1828                           ; 4 bytes @ 0x26
  1829  000027                     	ds	1
  1830  000028                     ??___ftpack:
  1831  000028                     ??_getTime:
  1832  000028                     ___awmod@sign:
  1833                           	opt stack 0
  1834                           
  1835                           ; 1 bytes @ 0x27
  1836  000028                     	ds	1
  1837  000029                     ??_startTimer:
  1838  000029                     ??__tdiv_to_l_:
  1839  000029                     ?___awdiv:
  1840                           	opt stack 0
  1841  000029                     ___awdiv@dividend:
  1842                           	opt stack 0
  1843  000029                     __div_to_l_@quot:
  1844                           	opt stack 0
  1845                           
  1846                           ; 4 bytes @ 0x28
  1847  000029                     	ds	1
  1848  00002A                     digitalWrite@p:
  1849                           	opt stack 0
  1850  00002A                     getTime@time:
  1851                           	opt stack 0
  1852                           
  1853                           ; 14 bytes @ 0x29
  1854  00002A                     	ds	1
  1855  00002B                     ?___altoft:
  1856                           	opt stack 0
  1857  00002B                     ?___awtoft:
  1858                           	opt stack 0
  1859  00002B                     ?___lltoft:
  1860                           	opt stack 0
  1861  00002B                     ___almod@counter:
  1862                           	opt stack 0
  1863  00002B                     ___awdiv@divisor:
  1864                           	opt stack 0
  1865  00002B                     ___awtoft@c:
  1866                           	opt stack 0
  1867  00002B                     ___altoft@c:
  1868                           	opt stack 0
  1869  00002B                     ___lldiv@quotient:
  1870                           	opt stack 0
  1871  00002B                     ___lltoft@c:
  1872                           	opt stack 0
  1873                           
  1874                           ; 4 bytes @ 0x2A
  1875  00002B                     	ds	1
  1876  00002C                     ___almod@sign:
  1877                           	opt stack 0
  1878  00002C                     __tdiv_to_l_@quot:
  1879                           	opt stack 0
  1880                           
  1881                           ; 4 bytes @ 0x2B
  1882  00002C                     	ds	1
  1883  00002D                     ?___aldiv:
  1884                           	opt stack 0
  1885  00002D                     ___awdiv@counter:
  1886                           	opt stack 0
  1887  00002D                     __div_to_l_@cntr:
  1888                           	opt stack 0
  1889  00002D                     ___aldiv@dividend:
  1890                           	opt stack 0
  1891                           
  1892                           ; 4 bytes @ 0x2C
  1893  00002D                     	ds	1
  1894  00002E                     ___awdiv@sign:
  1895                           	opt stack 0
  1896  00002E                     ___awtoft@sign:
  1897                           	opt stack 0
  1898  00002E                     __div_to_l_@exp1:
  1899                           	opt stack 0
  1900                           
  1901                           ; 1 bytes @ 0x2D
  1902  00002E                     	ds	1
  1903  00002F                     ??___altoft:
  1904  00002F                     ??___lltoft:
  1905  00002F                     ___lldiv@counter:
  1906                           	opt stack 0
  1907  00002F                     ___awdiv@quotient:
  1908                           	opt stack 0
  1909  00002F                     ___ftge@ff1:
  1910                           	opt stack 0
  1911                           
  1912                           ; 3 bytes @ 0x2E
  1913  00002F                     	ds	1
  1914  000030                     ?___llmod:
  1915                           	opt stack 0
  1916  000030                     __tdiv_to_l_@cntr:
  1917                           	opt stack 0
  1918  000030                     I2C_Master_Init@c:
  1919                           	opt stack 0
  1920  000030                     ___llmod@dividend:
  1921                           	opt stack 0
  1922                           
  1923                           ; 4 bytes @ 0x2F
  1924  000030                     	ds	1
  1925  000031                     ?___wmul:
  1926                           	opt stack 0
  1927  000031                     __tdiv_to_l_@exp1:
  1928                           	opt stack 0
  1929  000031                     ___wmul@multiplier:
  1930                           	opt stack 0
  1931  000031                     ___aldiv@divisor:
  1932                           	opt stack 0
  1933                           
  1934                           ; 4 bytes @ 0x30
  1935  000031                     	ds	1
  1936  000032                     ___ftge@ff2:
  1937                           	opt stack 0
  1938                           
  1939                           ; 3 bytes @ 0x31
  1940  000032                     	ds	1
  1941  000033                     ___altoft@exp:
  1942                           	opt stack 0
  1943  000033                     ___lltoft@exp:
  1944                           	opt stack 0
  1945  000033                     ___wmul@multiplicand:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x32
  1949  000033                     	ds	1
  1950  000034                     ??_I2C_Master_Init:
  1951  000034                     ___altoft@sign:
  1952                           	opt stack 0
  1953  000034                     ___llmod@divisor:
  1954                           	opt stack 0
  1955                           
  1956                           ; 4 bytes @ 0x33
  1957  000034                     	ds	1
  1958  000035                     ??___ftge:
  1959  000035                     ?___ftdiv:
  1960                           	opt stack 0
  1961  000035                     ___aldiv@counter:
  1962                           	opt stack 0
  1963  000035                     ___wmul@product:
  1964                           	opt stack 0
  1965  000035                     ___ftdiv@f1:
  1966                           	opt stack 0
  1967                           
  1968                           ; 3 bytes @ 0x34
  1969  000035                     	ds	1
  1970  000036                     ___aldiv@sign:
  1971                           	opt stack 0
  1972                           
  1973                           ; 1 bytes @ 0x35
  1974  000036                     	ds	1
  1975  000037                     ?_eepromRead:
  1976                           	opt stack 0
  1977  000037                     eepromRead@address:
  1978                           	opt stack 0
  1979  000037                     ___aldiv@quotient:
  1980                           	opt stack 0
  1981                           
  1982                           ; 4 bytes @ 0x36
  1983  000037                     	ds	1
  1984  000038                     getTime@i:
  1985                           	opt stack 0
  1986  000038                     ___llmod@counter:
  1987                           	opt stack 0
  1988  000038                     ___ftdiv@f2:
  1989                           	opt stack 0
  1990                           
  1991                           ; 3 bytes @ 0x37
  1992  000038                     	ds	3
  1993  00003B                     tblptru	equ	0xFF8
  1994                           tblptrh	equ	0xFF7
  1995                           tblptrl	equ	0xFF6
  1996                           tablat	equ	0xFF5
  1997                           postinc0	equ	0xFEE
  1998                           wreg	equ	0xFE8
  1999                           postdec1	equ	0xFE5
  2000                           fsr1l	equ	0xFE1
  2001                           
  2002                           ; 1 bytes @ 0x3A
  2003 ;;
  2004 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  2005 ;;
  2006 ;; *************** function _main *****************
  2007 ;; Defined at:
  2008 ;;		line 121 in file "main.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;		None
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;  duration        2   66[BANK1 ] int 
  2013 ;;  cylinderStar    2   50[BANK1 ] int 
  2014 ;;  lastBatteryT    2   48[BANK1 ] int 
  2015 ;;  run            14   52[BANK1 ] int [7]
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Totals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;Total ram usage:       37 bytes
  2030 ;; Hardware stack levels required when called:   10
  2031 ;; This function calls:
  2032 ;;		___aldiv
  2033 ;;		___almod
  2034 ;;		_digitalRead
  2035 ;;		_digitalWrite
  2036 ;;		_initLCD
  2037 ;;		_initServo
  2038 ;;		_initTimer
  2039 ;;		_lcdClear
  2040 ;;		_lcdHome
  2041 ;;		_pinSetup
  2042 ;;		_printf
  2043 ;;		_saveNewRun
  2044 ;;		_setAngle
  2045 ;;		_showInterface
  2046 ;;		_showRunStats
  2047 ;;		_showRunTime
  2048 ;;		_sortBattery
  2049 ;;		_startTimer
  2050 ;; This function is called by:
  2051 ;;		Startup code after reset
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text0
  2056  00137A                     __ptext0:
  2057                           	opt stack 0
  2058  00137A                     _main:
  2059                           	opt stack 21
  2060                           
  2061                           ;main.c: 125: pinSetup();
  2062                           
  2063                           ;incstack = 0
  2064  00137A  EC2C  F01F         	call	_pinSetup	;wreg free
  2065                           
  2066                           ;main.c: 126: initLCD();
  2067  00137E  EC09  F01F         	call	_initLCD	;wreg free
  2068  001382                     l7675:
  2069                           
  2070                           ;main.c: 129: showInterface();
  2071  001382  EC25  F018         	call	_showInterface	;wreg free
  2072                           
  2073                           ;main.c: 132: terminate = 0;
  2074  001386  0E00               	movlw	0
  2075  001388  0101               	movlb	1	; () banked
  2076  00138A  6F89               	movwf	(_terminate+1)& (0+255),b
  2077  00138C  0E00               	movlw	0
  2078  00138E  6F88               	movwf	_terminate& (0+255),b
  2079                           
  2080                           ; BSR set to: 1
  2081                           ;main.c: 133: time = 0;
  2082  001390  0E00               	movlw	0
  2083  001392  0101               	movlb	1	; () banked
  2084  001394  6F7A               	movwf	_time& (0+255),b
  2085  001396  0E00               	movlw	0
  2086  001398  6F7B               	movwf	(_time+1)& (0+255),b
  2087  00139A  0E00               	movlw	0
  2088  00139C  6F7C               	movwf	(_time+2)& (0+255),b
  2089  00139E  0E00               	movlw	0
  2090  0013A0  6F7D               	movwf	(_time+3)& (0+255),b
  2091                           
  2092                           ; BSR set to: 1
  2093                           ;main.c: 134: initTimer(1);
  2094  0013A2  0E00               	movlw	0
  2095  0013A4  6E24               	movwf	initTimer@timer+1,c
  2096  0013A6  0E01               	movlw	1
  2097  0013A8  6E23               	movwf	initTimer@timer,c
  2098  0013AA  ECE4  F01E         	call	_initTimer	;wreg free
  2099                           
  2100                           ;main.c: 135: startTimer(1,0);
  2101  0013AE  0E00               	movlw	0
  2102  0013B0  6E24               	movwf	startTimer@timer+1,c
  2103  0013B2  0E01               	movlw	1
  2104  0013B4  6E23               	movwf	startTimer@timer,c
  2105  0013B6  0E00               	movlw	0
  2106  0013B8  6E25               	movwf	startTimer@val,c
  2107  0013BA  0E00               	movlw	0
  2108  0013BC  6E26               	movwf	startTimer@val+1,c
  2109  0013BE  0E00               	movlw	0
  2110  0013C0  6E27               	movwf	startTimer@val+2,c
  2111  0013C2  0E00               	movlw	0
  2112  0013C4  6E28               	movwf	startTimer@val+3,c
  2113  0013C6  EC98  F01E         	call	_startTimer	;wreg free
  2114                           
  2115                           ;main.c: 138: digitalWrite(cylinderMotor1, 1);
  2116  0013CA  0E52               	movlw	low _cylinderMotor1
  2117  0013CC  6E23               	movwf	digitalWrite@pin,c
  2118  0013CE  0E01               	movlw	high _cylinderMotor1
  2119  0013D0  6E24               	movwf	digitalWrite@pin+1,c
  2120  0013D2  0E00               	movlw	0
  2121  0013D4  6E26               	movwf	digitalWrite@val+1,c
  2122  0013D6  0E01               	movlw	1
  2123  0013D8  6E25               	movwf	digitalWrite@val,c
  2124  0013DA  ECF2  F018         	call	_digitalWrite	;wreg free
  2125                           
  2126                           ;main.c: 139: initServo(conveyorServo, 130);
  2127  0013DE  0E4E               	movlw	low _conveyorServo
  2128  0013E0  0100               	movlb	0	; () banked
  2129  0013E2  6FDE               	movwf	initServo@motor& (0+255),b
  2130  0013E4  0E01               	movlw	high _conveyorServo
  2131  0013E6  0100               	movlb	0	; () banked
  2132  0013E8  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2133  0013EA  0E00               	movlw	0
  2134  0013EC  0100               	movlb	0	; () banked
  2135  0013EE  6FE1               	movwf	(initServo@angle+1)& (0+255),b
  2136  0013F0  0E82               	movlw	130
  2137  0013F2  6FE0               	movwf	initServo@angle& (0+255),b
  2138  0013F4  EC4A  F017         	call	_initServo	;wreg free
  2139                           
  2140                           ;main.c: 140: initServo(padServo, padAngle_NEUTRAL);
  2141  0013F8  0E62               	movlw	low _padServo
  2142  0013FA  0100               	movlb	0	; () banked
  2143  0013FC  6FDE               	movwf	initServo@motor& (0+255),b
  2144  0013FE  0E01               	movlw	high _padServo
  2145  001400  0100               	movlb	0	; () banked
  2146  001402  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2147  001404  C148  F0E0         	movff	_padAngle_NEUTRAL,initServo@angle
  2148  001408  C149  F0E1         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2149  00140C  EC4A  F017         	call	_initServo	;wreg free
  2150                           
  2151                           ;main.c: 141: initServo(redirectingServo, redirectAngle_AA);
  2152  001410  0E66               	movlw	low _redirectingServo
  2153  001412  0100               	movlb	0	; () banked
  2154  001414  6FDE               	movwf	initServo@motor& (0+255),b
  2155  001416  0E01               	movlw	high _redirectingServo
  2156  001418  0100               	movlb	0	; () banked
  2157  00141A  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2158  00141C  C14A  F0E0         	movff	_redirectAngle_AA,initServo@angle
  2159  001420  C14B  F0E1         	movff	_redirectAngle_AA+1,initServo@angle+1
  2160  001424  EC4A  F017         	call	_initServo	;wreg free
  2161  001428                     l7693:
  2162                           
  2163                           ;main.c: 145: lcdClear();
  2164  001428  EC7B  F020         	call	_lcdClear	;wreg free
  2165                           
  2166                           ;main.c: 146: printf("running");
  2167  00142C  0EF6               	movlw	low STR_2
  2168  00142E  0100               	movlb	0	; () banked
  2169  001430  6FBD               	movwf	printf@f& (0+255),b
  2170  001432  0EFF               	movlw	high STR_2
  2171  001434  0100               	movlb	0	; () banked
  2172  001436  6FBE               	movwf	(printf@f+1)& (0+255),b
  2173  001438  EC09  F000         	call	_printf	;wreg free
  2174                           
  2175                           ;main.c: 148: int lastBatteryTime = time;
  2176  00143C  C17A  F130         	movff	_time,main@lastBatteryTime
  2177  001440  C17B  F131         	movff	_time+1,main@lastBatteryTime+1
  2178                           
  2179                           ;main.c: 150: int cylinderStart = time;
  2180  001444  C17A  F132         	movff	_time,main@cylinderStart
  2181  001448  C17B  F133         	movff	_time+1,main@cylinderStart+1
  2182                           
  2183                           ;main.c: 151: int duration = 0;
  2184  00144C  0E00               	movlw	0
  2185  00144E  0101               	movlb	1	; () banked
  2186  001450  6F43               	movwf	(main@duration+1)& (0+255),b
  2187  001452  0E00               	movlw	0
  2188  001454  6F42               	movwf	main@duration& (0+255),b
  2189                           
  2190                           ;main.c: 153: while(!batteryDetected && !terminate){
  2191  001456  D166               	goto	l7725
  2192  001458                     l7701:
  2193                           
  2194                           ; BSR set to: 1
  2195                           ;main.c: 155: lcdHome();
  2196  001458  EC77  F020         	call	_lcdHome	;wreg free
  2197                           
  2198                           ;main.c: 156: printf("time %02ld:%02ld.%01ld",time/600,(time%600)/10,(time%600)%10);
  2199  00145C  0E58               	movlw	88
  2200  00145E  6E27               	movwf	___almod@divisor,c
  2201  001460  0E02               	movlw	2
  2202  001462  6E28               	movwf	___almod@divisor+1,c
  2203  001464  0E00               	movlw	0
  2204  001466  6E29               	movwf	___almod@divisor+2,c
  2205  001468  0E00               	movlw	0
  2206  00146A  6E2A               	movwf	___almod@divisor+3,c
  2207  00146C  C17A  F023         	movff	_time,___almod@dividend
  2208  001470  C17B  F024         	movff	_time+1,___almod@dividend+1
  2209  001474  C17C  F025         	movff	_time+2,___almod@dividend+2
  2210  001478  C17D  F026         	movff	_time+3,___almod@dividend+3
  2211  00147C  EC11  F01A         	call	___almod	;wreg free
  2212  001480  C023  F12C         	movff	?___almod,_main$1416
  2213  001484  C024  F12D         	movff	?___almod+1,_main$1416+1
  2214  001488  C025  F12E         	movff	?___almod+2,_main$1416+2
  2215  00148C  C026  F12F         	movff	?___almod+3,_main$1416+3
  2216                           
  2217                           ;main.c: 156: printf("time %02ld:%02ld.%01ld",time/600,(time%600)/10,(time%600)%10);
  2218  001490  0EBC               	movlw	low STR_3
  2219  001492  0100               	movlb	0	; () banked
  2220  001494  6FBD               	movwf	printf@f& (0+255),b
  2221  001496  0EFE               	movlw	high STR_3
  2222  001498  0100               	movlb	0	; () banked
  2223  00149A  6FBE               	movwf	(printf@f+1)& (0+255),b
  2224  00149C  C17A  F02D         	movff	_time,___aldiv@dividend
  2225  0014A0  C17B  F02E         	movff	_time+1,___aldiv@dividend+1
  2226  0014A4  C17C  F02F         	movff	_time+2,___aldiv@dividend+2
  2227  0014A8  C17D  F030         	movff	_time+3,___aldiv@dividend+3
  2228  0014AC  0E58               	movlw	88
  2229  0014AE  6E31               	movwf	___aldiv@divisor,c
  2230  0014B0  0E02               	movlw	2
  2231  0014B2  6E32               	movwf	___aldiv@divisor+1,c
  2232  0014B4  0E00               	movlw	0
  2233  0014B6  6E33               	movwf	___aldiv@divisor+2,c
  2234  0014B8  0E00               	movlw	0
  2235  0014BA  6E34               	movwf	___aldiv@divisor+3,c
  2236  0014BC  EC8C  F018         	call	___aldiv	;wreg free
  2237  0014C0  C02D  F0BF         	movff	?___aldiv,?_printf+2
  2238  0014C4  C02E  F0C0         	movff	?___aldiv+1,?_printf+3
  2239  0014C8  C02F  F0C1         	movff	?___aldiv+2,?_printf+4
  2240  0014CC  C030  F0C2         	movff	?___aldiv+3,?_printf+5
  2241  0014D0  0E58               	movlw	88
  2242  0014D2  6E27               	movwf	___almod@divisor,c
  2243  0014D4  0E02               	movlw	2
  2244  0014D6  6E28               	movwf	___almod@divisor+1,c
  2245  0014D8  0E00               	movlw	0
  2246  0014DA  6E29               	movwf	___almod@divisor+2,c
  2247  0014DC  0E00               	movlw	0
  2248  0014DE  6E2A               	movwf	___almod@divisor+3,c
  2249  0014E0  C17A  F023         	movff	_time,___almod@dividend
  2250  0014E4  C17B  F024         	movff	_time+1,___almod@dividend+1
  2251  0014E8  C17C  F025         	movff	_time+2,___almod@dividend+2
  2252  0014EC  C17D  F026         	movff	_time+3,___almod@dividend+3
  2253  0014F0  EC11  F01A         	call	___almod	;wreg free
  2254  0014F4  C023  F02D         	movff	?___almod,___aldiv@dividend
  2255  0014F8  C024  F02E         	movff	?___almod+1,___aldiv@dividend+1
  2256  0014FC  C025  F02F         	movff	?___almod+2,___aldiv@dividend+2
  2257  001500  C026  F030         	movff	?___almod+3,___aldiv@dividend+3
  2258  001504  0E0A               	movlw	10
  2259  001506  6E31               	movwf	___aldiv@divisor,c
  2260  001508  0E00               	movlw	0
  2261  00150A  6E32               	movwf	___aldiv@divisor+1,c
  2262  00150C  0E00               	movlw	0
  2263  00150E  6E33               	movwf	___aldiv@divisor+2,c
  2264  001510  0E00               	movlw	0
  2265  001512  6E34               	movwf	___aldiv@divisor+3,c
  2266  001514  EC8C  F018         	call	___aldiv	;wreg free
  2267  001518  C02D  F0C3         	movff	?___aldiv,?_printf+6
  2268  00151C  C02E  F0C4         	movff	?___aldiv+1,?_printf+7
  2269  001520  C02F  F0C5         	movff	?___aldiv+2,?_printf+8
  2270  001524  C030  F0C6         	movff	?___aldiv+3,?_printf+9
  2271  001528  C12C  F023         	movff	_main$1416,___almod@dividend
  2272  00152C  C12D  F024         	movff	_main$1416+1,___almod@dividend+1
  2273  001530  C12E  F025         	movff	_main$1416+2,___almod@dividend+2
  2274  001534  C12F  F026         	movff	_main$1416+3,___almod@dividend+3
  2275  001538  0E0A               	movlw	10
  2276  00153A  6E27               	movwf	___almod@divisor,c
  2277  00153C  0E00               	movlw	0
  2278  00153E  6E28               	movwf	___almod@divisor+1,c
  2279  001540  0E00               	movlw	0
  2280  001542  6E29               	movwf	___almod@divisor+2,c
  2281  001544  0E00               	movlw	0
  2282  001546  6E2A               	movwf	___almod@divisor+3,c
  2283  001548  EC11  F01A         	call	___almod	;wreg free
  2284  00154C  C023  F0C7         	movff	?___almod,?_printf+10
  2285  001550  C024  F0C8         	movff	?___almod+1,?_printf+11
  2286  001554  C025  F0C9         	movff	?___almod+2,?_printf+12
  2287  001558  C026  F0CA         	movff	?___almod+3,?_printf+13
  2288  00155C  EC09  F000         	call	_printf	;wreg free
  2289                           
  2290                           ;main.c: 157: _delay((unsigned long)((77)*(10000000/4000.0)));
  2291  001560  0EFA               	movlw	250
  2292  001562  0101               	movlb	1	; () banked
  2293  001564  6F1F               	movwf	??_main& (0+255),b
  2294  001566  0EFF               	movlw	255
  2295  001568                     u8137:
  2296  001568  2EE8               	decfsz	wreg,f,c
  2297  00156A  D7FE               	bra	u8137
  2298  00156C  2F1F               	decfsz	??_main& (0+255),f,b
  2299  00156E  D7FC               	bra	u8137
  2300                           
  2301                           ;main.c: 160: if(time - cylinderStart >= duration)
  2302  001570  C142  F11F         	movff	main@duration,??_main
  2303  001574  C143  F120         	movff	main@duration+1,??_main+1
  2304  001578  0E00               	movlw	0
  2305  00157A  0101               	movlb	1	; () banked
  2306  00157C  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2307  00157E  0EFF               	movlw	255
  2308  001580  6F21               	movwf	(??_main+2)& (0+255),b
  2309  001582  6F22               	movwf	(??_main+3)& (0+255),b
  2310  001584  C132  F123         	movff	main@cylinderStart,??_main+4
  2311  001588  C133  F124         	movff	main@cylinderStart+1,??_main+5
  2312  00158C  0E00               	movlw	0
  2313  00158E  0101               	movlb	1	; () banked
  2314  001590  BF24               	btfsc	(??_main+5)& (0+255),7,b
  2315  001592  0EFF               	movlw	255
  2316  001594  6F25               	movwf	(??_main+6)& (0+255),b
  2317  001596  6F26               	movwf	(??_main+7)& (0+255),b
  2318  001598  0101               	movlb	1	; () banked
  2319  00159A  1F23               	comf	(??_main+4)& (0+255),f,b
  2320  00159C  1F24               	comf	(??_main+5)& (0+255),f,b
  2321  00159E  1F25               	comf	(??_main+6)& (0+255),f,b
  2322  0015A0  1F26               	comf	(??_main+7)& (0+255),f,b
  2323  0015A2  2B23               	incf	(??_main+4)& (0+255),f,b
  2324  0015A4  0E00               	movlw	0
  2325  0015A6  2324               	addwfc	(??_main+5)& (0+255),f,b
  2326  0015A8  2325               	addwfc	(??_main+6)& (0+255),f,b
  2327  0015AA  2326               	addwfc	(??_main+7)& (0+255),f,b
  2328  0015AC  0101               	movlb	1	; () banked
  2329  0015AE  517A               	movf	_time& (0+255),w,b
  2330  0015B0  0101               	movlb	1	; () banked
  2331  0015B2  2523               	addwf	(??_main+4)& (0+255),w,b
  2332  0015B4  0101               	movlb	1	; () banked
  2333  0015B6  6F27               	movwf	(??_main+8)& (0+255),b
  2334  0015B8  0101               	movlb	1	; () banked
  2335  0015BA  517B               	movf	(_time+1)& (0+255),w,b
  2336  0015BC  0101               	movlb	1	; () banked
  2337  0015BE  2124               	addwfc	(??_main+5)& (0+255),w,b
  2338  0015C0  0101               	movlb	1	; () banked
  2339  0015C2  6F28               	movwf	(??_main+9)& (0+255),b
  2340  0015C4  0101               	movlb	1	; () banked
  2341  0015C6  517C               	movf	(_time+2)& (0+255),w,b
  2342  0015C8  0101               	movlb	1	; () banked
  2343  0015CA  2125               	addwfc	(??_main+6)& (0+255),w,b
  2344  0015CC  0101               	movlb	1	; () banked
  2345  0015CE  6F29               	movwf	(??_main+10)& (0+255),b
  2346  0015D0  0101               	movlb	1	; () banked
  2347  0015D2  517D               	movf	(_time+3)& (0+255),w,b
  2348  0015D4  0101               	movlb	1	; () banked
  2349  0015D6  2126               	addwfc	(??_main+7)& (0+255),w,b
  2350  0015D8  0101               	movlb	1	; () banked
  2351  0015DA  6F2A               	movwf	(??_main+11)& (0+255),b
  2352  0015DC  0101               	movlb	1	; () banked
  2353  0015DE  511F               	movf	??_main& (0+255),w,b
  2354  0015E0  0101               	movlb	1	; () banked
  2355  0015E2  5D27               	subwf	(??_main+8)& (0+255),w,b
  2356  0015E4  0101               	movlb	1	; () banked
  2357  0015E6  5120               	movf	(??_main+1)& (0+255),w,b
  2358  0015E8  0101               	movlb	1	; () banked
  2359  0015EA  5928               	subwfb	(??_main+9)& (0+255),w,b
  2360  0015EC  0101               	movlb	1	; () banked
  2361  0015EE  5121               	movf	(??_main+2)& (0+255),w,b
  2362  0015F0  0101               	movlb	1	; () banked
  2363  0015F2  5929               	subwfb	(??_main+10)& (0+255),w,b
  2364  0015F4  0101               	movlb	1	; () banked
  2365  0015F6  512A               	movf	(??_main+11)& (0+255),w,b
  2366  0015F8  0A80               	xorlw	128
  2367  0015FA  0101               	movlb	1	; () banked
  2368  0015FC  6F2B               	movwf	(??_main+12)& (0+255),b
  2369  0015FE  0101               	movlb	1	; () banked
  2370  001600  5122               	movf	(??_main+3)& (0+255),w,b
  2371  001602  0A80               	xorlw	128
  2372  001604  0101               	movlb	1	; () banked
  2373  001606  592B               	subwfb	(??_main+12)& (0+255),w,b
  2374  001608  A0D8               	btfss	status,0,c
  2375  00160A  D03F               	goto	l7721
  2376                           
  2377                           ; BSR set to: 1
  2378                           ;main.c: 161: {
  2379                           ;main.c: 162: if(digitalRead(cylinderMotor1)){
  2380  00160C  0E52               	movlw	low _cylinderMotor1
  2381  00160E  6E23               	movwf	digitalRead@pin,c
  2382  001610  0E01               	movlw	high _cylinderMotor1
  2383  001612  6E24               	movwf	digitalRead@pin+1,c
  2384  001614  ECEF  F015         	call	_digitalRead	;wreg free
  2385  001618  5023               	movf	?_digitalRead,w,c
  2386  00161A  1024               	iorwf	?_digitalRead+1,w,c
  2387  00161C  B4D8               	btfsc	status,2,c
  2388  00161E  D019               	goto	l7715
  2389                           
  2390                           ;main.c: 163: digitalWrite(cylinderMotor2, 0);
  2391  001620  0E56               	movlw	low _cylinderMotor2
  2392  001622  6E23               	movwf	digitalWrite@pin,c
  2393  001624  0E01               	movlw	high _cylinderMotor2
  2394  001626  6E24               	movwf	digitalWrite@pin+1,c
  2395  001628  0E00               	movlw	0
  2396  00162A  6E26               	movwf	digitalWrite@val+1,c
  2397  00162C  0E00               	movlw	0
  2398  00162E  6E25               	movwf	digitalWrite@val,c
  2399  001630  ECF2  F018         	call	_digitalWrite	;wreg free
  2400                           
  2401                           ;main.c: 164: digitalWrite(cylinderMotor1, 1);
  2402  001634  0E52               	movlw	low _cylinderMotor1
  2403  001636  6E23               	movwf	digitalWrite@pin,c
  2404  001638  0E01               	movlw	high _cylinderMotor1
  2405  00163A  6E24               	movwf	digitalWrite@pin+1,c
  2406  00163C  0E00               	movlw	0
  2407  00163E  6E26               	movwf	digitalWrite@val+1,c
  2408  001640  0E01               	movlw	1
  2409  001642  6E25               	movwf	digitalWrite@val,c
  2410  001644  ECF2  F018         	call	_digitalWrite	;wreg free
  2411                           
  2412                           ;main.c: 165: duration = cylinderForward;
  2413  001648  C146  F142         	movff	_cylinderForward,main@duration
  2414  00164C  C147  F143         	movff	_cylinderForward+1,main@duration+1
  2415                           
  2416                           ;main.c: 166: }else{
  2417  001650  D018               	goto	l7719
  2418  001652                     l7715:
  2419                           
  2420                           ;main.c: 167: digitalWrite(cylinderMotor1, 0);
  2421  001652  0E52               	movlw	low _cylinderMotor1
  2422  001654  6E23               	movwf	digitalWrite@pin,c
  2423  001656  0E01               	movlw	high _cylinderMotor1
  2424  001658  6E24               	movwf	digitalWrite@pin+1,c
  2425  00165A  0E00               	movlw	0
  2426  00165C  6E26               	movwf	digitalWrite@val+1,c
  2427  00165E  0E00               	movlw	0
  2428  001660  6E25               	movwf	digitalWrite@val,c
  2429  001662  ECF2  F018         	call	_digitalWrite	;wreg free
  2430                           
  2431                           ;main.c: 168: digitalWrite(cylinderMotor2, 1);
  2432  001666  0E56               	movlw	low _cylinderMotor2
  2433  001668  6E23               	movwf	digitalWrite@pin,c
  2434  00166A  0E01               	movlw	high _cylinderMotor2
  2435  00166C  6E24               	movwf	digitalWrite@pin+1,c
  2436  00166E  0E00               	movlw	0
  2437  001670  6E26               	movwf	digitalWrite@val+1,c
  2438  001672  0E01               	movlw	1
  2439  001674  6E25               	movwf	digitalWrite@val,c
  2440  001676  ECF2  F018         	call	_digitalWrite	;wreg free
  2441                           
  2442                           ;main.c: 169: duration = cylinderBackward;
  2443  00167A  C144  F142         	movff	_cylinderBackward,main@duration
  2444  00167E  C145  F143         	movff	_cylinderBackward+1,main@duration+1
  2445  001682                     l7719:
  2446                           
  2447                           ;main.c: 170: }
  2448                           ;main.c: 172: cylinderStart = time;
  2449  001682  C17A  F132         	movff	_time,main@cylinderStart
  2450  001686  C17B  F133         	movff	_time+1,main@cylinderStart+1
  2451  00168A                     l7721:
  2452                           
  2453                           ;main.c: 173: }
  2454                           ;main.c: 175: if(time - lastBatteryTime > stoppingTime)
  2455  00168A  C130  F11F         	movff	main@lastBatteryTime,??_main
  2456  00168E  C131  F120         	movff	main@lastBatteryTime+1,??_main+1
  2457  001692  0E00               	movlw	0
  2458  001694  0101               	movlb	1	; () banked
  2459  001696  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2460  001698  0EFF               	movlw	255
  2461  00169A  6F21               	movwf	(??_main+2)& (0+255),b
  2462  00169C  6F22               	movwf	(??_main+3)& (0+255),b
  2463  00169E  0101               	movlb	1	; () banked
  2464  0016A0  1F1F               	comf	??_main& (0+255),f,b
  2465  0016A2  1F20               	comf	(??_main+1)& (0+255),f,b
  2466  0016A4  1F21               	comf	(??_main+2)& (0+255),f,b
  2467  0016A6  1F22               	comf	(??_main+3)& (0+255),f,b
  2468  0016A8  2B1F               	incf	??_main& (0+255),f,b
  2469  0016AA  0E00               	movlw	0
  2470  0016AC  2320               	addwfc	(??_main+1)& (0+255),f,b
  2471  0016AE  2321               	addwfc	(??_main+2)& (0+255),f,b
  2472  0016B0  2322               	addwfc	(??_main+3)& (0+255),f,b
  2473  0016B2  0101               	movlb	1	; () banked
  2474  0016B4  517A               	movf	_time& (0+255),w,b
  2475  0016B6  0101               	movlb	1	; () banked
  2476  0016B8  251F               	addwf	??_main& (0+255),w,b
  2477  0016BA  0101               	movlb	1	; () banked
  2478  0016BC  6F23               	movwf	(??_main+4)& (0+255),b
  2479  0016BE  0101               	movlb	1	; () banked
  2480  0016C0  517B               	movf	(_time+1)& (0+255),w,b
  2481  0016C2  0101               	movlb	1	; () banked
  2482  0016C4  2120               	addwfc	(??_main+1)& (0+255),w,b
  2483  0016C6  0101               	movlb	1	; () banked
  2484  0016C8  6F24               	movwf	(??_main+5)& (0+255),b
  2485  0016CA  0101               	movlb	1	; () banked
  2486  0016CC  517C               	movf	(_time+2)& (0+255),w,b
  2487  0016CE  0101               	movlb	1	; () banked
  2488  0016D0  2121               	addwfc	(??_main+2)& (0+255),w,b
  2489  0016D2  0101               	movlb	1	; () banked
  2490  0016D4  6F25               	movwf	(??_main+6)& (0+255),b
  2491  0016D6  0101               	movlb	1	; () banked
  2492  0016D8  517D               	movf	(_time+3)& (0+255),w,b
  2493  0016DA  0101               	movlb	1	; () banked
  2494  0016DC  2122               	addwfc	(??_main+3)& (0+255),w,b
  2495  0016DE  0101               	movlb	1	; () banked
  2496  0016E0  6F26               	movwf	(??_main+7)& (0+255),b
  2497  0016E2  0E00               	movlw	0
  2498  0016E4  0101               	movlb	1	; () banked
  2499  0016E6  BF4D               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2500  0016E8  0EFF               	movlw	255
  2501  0016EA  0101               	movlb	1	; () banked
  2502  0016EC  6F28               	movwf	(??_main+9)& (0+255),b
  2503  0016EE  0A80               	xorlw	128
  2504  0016F0  6F27               	movwf	(??_main+8)& (0+255),b
  2505  0016F2  0101               	movlb	1	; () banked
  2506  0016F4  5123               	movf	(??_main+4)& (0+255),w,b
  2507  0016F6  0101               	movlb	1	; () banked
  2508  0016F8  5D4C               	subwf	_stoppingTime& (0+255),w,b
  2509  0016FA  0101               	movlb	1	; () banked
  2510  0016FC  5124               	movf	(??_main+5)& (0+255),w,b
  2511  0016FE  0101               	movlb	1	; () banked
  2512  001700  594D               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2513  001702  0101               	movlb	1	; () banked
  2514  001704  5125               	movf	(??_main+6)& (0+255),w,b
  2515  001706  0101               	movlb	1	; () banked
  2516  001708  5928               	subwfb	(??_main+9)& (0+255),w,b
  2517  00170A  0101               	movlb	1	; () banked
  2518  00170C  5126               	movf	(??_main+7)& (0+255),w,b
  2519  00170E  0A80               	xorlw	128
  2520  001710  0101               	movlb	1	; () banked
  2521  001712  5927               	subwfb	(??_main+8)& (0+255),w,b
  2522  001714  B0D8               	btfsc	status,0,c
  2523  001716  D006               	goto	l7725
  2524                           
  2525                           ; BSR set to: 1
  2526                           ;main.c: 176: {
  2527                           ;main.c: 177: terminate = 1;
  2528  001718  0E00               	movlw	0
  2529  00171A  0101               	movlb	1	; () banked
  2530  00171C  6F89               	movwf	(_terminate+1)& (0+255),b
  2531  00171E  0E01               	movlw	1
  2532  001720  6F88               	movwf	_terminate& (0+255),b
  2533                           
  2534                           ;main.c: 178: break;
  2535  001722  D00C               	goto	l7729
  2536  001724                     l7725:
  2537                           
  2538                           ; BSR set to: 1
  2539  001724  0101               	movlb	1	; () banked
  2540  001726  517E               	movf	_batteryDetected& (0+255),w,b
  2541  001728  0101               	movlb	1	; () banked
  2542  00172A  117F               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2543  00172C  A4D8               	btfss	status,2,c
  2544  00172E  D006               	goto	l7729
  2545                           
  2546                           ; BSR set to: 1
  2547  001730  0101               	movlb	1	; () banked
  2548  001732  5188               	movf	_terminate& (0+255),w,b
  2549  001734  0101               	movlb	1	; () banked
  2550  001736  1189               	iorwf	(_terminate+1)& (0+255),w,b
  2551  001738  B4D8               	btfsc	status,2,c
  2552  00173A  D68E               	goto	l7701
  2553  00173C                     l7729:
  2554                           
  2555                           ; BSR set to: 1
  2556                           ;main.c: 179: }
  2557                           ;main.c: 180: }
  2558                           ;main.c: 182: if(terminate)break;
  2559  00173C  0101               	movlb	1	; () banked
  2560  00173E  5188               	movf	_terminate& (0+255),w,b
  2561  001740  0101               	movlb	1	; () banked
  2562  001742  1189               	iorwf	(_terminate+1)& (0+255),w,b
  2563  001744  A4D8               	btfss	status,2,c
  2564  001746  D00C               	goto	l7739
  2565                           
  2566                           ; BSR set to: 1
  2567                           ;main.c: 184: sortBattery();
  2568                           
  2569                           ; BSR set to: 1
  2570                           
  2571                           ; BSR set to: 1
  2572  001748  EC05  F007         	call	_sortBattery	;wreg free
  2573                           
  2574                           ;main.c: 187: lastBatteryTime = time;
  2575  00174C  C17A  F130         	movff	_time,main@lastBatteryTime
  2576  001750  C17B  F131         	movff	_time+1,main@lastBatteryTime+1
  2577                           
  2578                           ;main.c: 188: batteryDetected = 0;
  2579  001754  0E00               	movlw	0
  2580  001756  0101               	movlb	1	; () banked
  2581  001758  6F7F               	movwf	(_batteryDetected+1)& (0+255),b
  2582  00175A  0E00               	movlw	0
  2583  00175C  6F7E               	movwf	_batteryDetected& (0+255),b
  2584                           
  2585                           ; BSR set to: 1
  2586  00175E  D664               	goto	l7693
  2587  001760                     l7739:
  2588                           
  2589                           ; BSR set to: 1
  2590                           ;main.c: 189: }
  2591                           ;main.c: 192: setAngle(conveyorServo, 90);
  2592  001760  0E4E               	movlw	low _conveyorServo
  2593  001762  0100               	movlb	0	; () banked
  2594  001764  6FD4               	movwf	setAngle@motor& (0+255),b
  2595  001766  0E01               	movlw	high _conveyorServo
  2596  001768  0100               	movlb	0	; () banked
  2597  00176A  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2598  00176C  0E00               	movlw	0
  2599  00176E  0100               	movlb	0	; () banked
  2600  001770  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2601  001772  0E5A               	movlw	90
  2602  001774  6FD6               	movwf	setAngle@angle& (0+255),b
  2603  001776  ECBB  F017         	call	_setAngle	;wreg free
  2604                           
  2605                           ;main.c: 193: digitalWrite(cylinderMotor1, 0);
  2606  00177A  0E52               	movlw	low _cylinderMotor1
  2607  00177C  6E23               	movwf	digitalWrite@pin,c
  2608  00177E  0E01               	movlw	high _cylinderMotor1
  2609  001780  6E24               	movwf	digitalWrite@pin+1,c
  2610  001782  0E00               	movlw	0
  2611  001784  6E26               	movwf	digitalWrite@val+1,c
  2612  001786  0E00               	movlw	0
  2613  001788  6E25               	movwf	digitalWrite@val,c
  2614  00178A  ECF2  F018         	call	_digitalWrite	;wreg free
  2615                           
  2616                           ;main.c: 194: digitalWrite(cylinderMotor2, 0);
  2617  00178E  0E56               	movlw	low _cylinderMotor2
  2618  001790  6E23               	movwf	digitalWrite@pin,c
  2619  001792  0E01               	movlw	high _cylinderMotor2
  2620  001794  6E24               	movwf	digitalWrite@pin+1,c
  2621  001796  0E00               	movlw	0
  2622  001798  6E26               	movwf	digitalWrite@val+1,c
  2623  00179A  0E00               	movlw	0
  2624  00179C  6E25               	movwf	digitalWrite@val,c
  2625  00179E  ECF2  F018         	call	_digitalWrite	;wreg free
  2626                           
  2627                           ;main.c: 197: int run[7];
  2628                           ;main.c: 198: run[0] = time>>8;
  2629  0017A2  C17B  F134         	movff	_time+1,main@run
  2630  0017A6  C17C  F135         	movff	_time+2,main@run+1
  2631                           
  2632                           ;main.c: 199: run[1] = time&0xff;
  2633  0017AA  0101               	movlb	1	; () banked
  2634  0017AC  517A               	movf	_time& (0+255),w,b
  2635  0017AE  0101               	movlb	1	; () banked
  2636  0017B0  6F36               	movwf	(main@run+2)& (0+255),b
  2637  0017B2  6B37               	clrf	(main@run+3)& (0+255),b
  2638                           
  2639                           ; BSR set to: 1
  2640                           ;main.c: 200: run[2] = n_AA;
  2641  0017B4  C182  F138         	movff	_n_AA,main@run+4
  2642  0017B8  C183  F139         	movff	_n_AA+1,main@run+5
  2643                           
  2644                           ; BSR set to: 1
  2645                           ;main.c: 201: run[3] = n_9V;
  2646  0017BC  C180  F13A         	movff	_n_9V,main@run+6
  2647  0017C0  C181  F13B         	movff	_n_9V+1,main@run+7
  2648                           
  2649                           ; BSR set to: 1
  2650                           ;main.c: 202: run[4] = n_C;
  2651  0017C4  C184  F13C         	movff	_n_C,main@run+8
  2652  0017C8  C185  F13D         	movff	_n_C+1,main@run+9
  2653                           
  2654                           ; BSR set to: 1
  2655                           ;main.c: 203: run[5] = n_OTHER;
  2656  0017CC  C186  F13E         	movff	_n_OTHER,main@run+10
  2657  0017D0  C187  F13F         	movff	_n_OTHER+1,main@run+11
  2658                           
  2659                           ; BSR set to: 1
  2660                           ;main.c: 205: saveNewRun(run);
  2661  0017D4  0E34               	movlw	low main@run
  2662  0017D6  0100               	movlb	0	; () banked
  2663  0017D8  6F89               	movwf	saveNewRun@data& (0+255),b
  2664  0017DA  0E01               	movlw	high main@run
  2665  0017DC  0100               	movlb	0	; () banked
  2666  0017DE  6F8A               	movwf	(saveNewRun@data+1)& (0+255),b
  2667  0017E0  ECD9  F016         	call	_saveNewRun	;wreg free
  2668                           
  2669                           ;main.c: 206: showRunTime(run);
  2670  0017E4  0E34               	movlw	low main@run
  2671  0017E6  0100               	movlb	0	; () banked
  2672  0017E8  6FEF               	movwf	showRunTime@run& (0+255),b
  2673  0017EA  0E01               	movlw	high main@run
  2674  0017EC  0100               	movlb	0	; () banked
  2675  0017EE  6FF0               	movwf	(showRunTime@run+1)& (0+255),b
  2676  0017F0  EC73  F010         	call	_showRunTime	;wreg free
  2677                           
  2678                           ;main.c: 207: showRunStats(run);
  2679  0017F4  0E34               	movlw	low main@run
  2680  0017F6  0100               	movlb	0	; () banked
  2681  0017F8  6FEF               	movwf	showRunStats@run& (0+255),b
  2682  0017FA  0E01               	movlw	high main@run
  2683  0017FC  0100               	movlb	0	; () banked
  2684  0017FE  6FF0               	movwf	(showRunStats@run+1)& (0+255),b
  2685  001800  EC67  F01A         	call	_showRunStats	;wreg free
  2686  001804  D5BE               	goto	l7675
  2687  001806                     l170:
  2688  001806  D7FF               	goto	l170
  2689  001808                     __end_of_main:
  2690                           	opt stack 0
  2691                           tblptru	equ	0xFF8
  2692                           tblptrh	equ	0xFF7
  2693                           tblptrl	equ	0xFF6
  2694                           tablat	equ	0xFF5
  2695                           postinc0	equ	0xFEE
  2696                           wreg	equ	0xFE8
  2697                           postdec1	equ	0xFE5
  2698                           fsr1l	equ	0xFE1
  2699                           status	equ	0xFD8
  2700                           
  2701 ;; *************** function _sortBattery *****************
  2702 ;; Defined at:
  2703 ;;		line 215 in file "main.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;		None
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;  V               3   22[BANK1 ] float 
  2708 ;;  i               2   18[BANK1 ] int 
  2709 ;;  i               3   25[BANK1 ] float 
  2710 ;;  V               3   28[BANK1 ] float 
  2711 ;;  V_max           3   15[BANK1 ] float 
  2712 ;;  resolution      3   12[BANK1 ] float 
  2713 ;;  Vcc             3    9[BANK1 ] float 
  2714 ;;  V_float         3    2[BANK1 ] float 
  2715 ;;  targetAngle     2   20[BANK1 ] int 
  2716 ;;  signal          2    7[BANK1 ] int 
  2717 ;;  pos_v_counte    2    5[BANK1 ] int 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;Total ram usage:       33 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    8
  2734 ;; This function calls:
  2735 ;;		___altoft
  2736 ;;		___awtoft
  2737 ;;		___ftdiv
  2738 ;;		___ftge
  2739 ;;		___ftmul
  2740 ;;		___ftsub
  2741 ;;		___fttol
  2742 ;;		_analogRead
  2743 ;;		_digitalRead
  2744 ;;		_digitalWrite
  2745 ;;		_lcdClear
  2746 ;;		_printf
  2747 ;;		_readKeypad
  2748 ;;		_setAngle
  2749 ;; This function is called by:
  2750 ;;		_main
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text1
  2755  000E0A                     __ptext1:
  2756                           	opt stack 0
  2757  000E0A                     _sortBattery:
  2758                           	opt stack 22
  2759                           
  2760                           ;main.c: 218: setAngle(conveyorServo, 90);
  2761                           
  2762                           ;incstack = 0
  2763  000E0A  0E4E               	movlw	low _conveyorServo
  2764  000E0C  0100               	movlb	0	; () banked
  2765  000E0E  6FD4               	movwf	setAngle@motor& (0+255),b
  2766  000E10  0E01               	movlw	high _conveyorServo
  2767  000E12  0100               	movlb	0	; () banked
  2768  000E14  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2769  000E16  0E00               	movlw	0
  2770  000E18  0100               	movlb	0	; () banked
  2771  000E1A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2772  000E1C  0E5A               	movlw	90
  2773  000E1E  6FD6               	movwf	setAngle@angle& (0+255),b
  2774  000E20  ECBB  F017         	call	_setAngle	;wreg free
  2775                           
  2776                           ;main.c: 219: digitalWrite(cylinderMotor1, 0);
  2777  000E24  0E52               	movlw	low _cylinderMotor1
  2778  000E26  6E23               	movwf	digitalWrite@pin,c
  2779  000E28  0E01               	movlw	high _cylinderMotor1
  2780  000E2A  6E24               	movwf	digitalWrite@pin+1,c
  2781  000E2C  0E00               	movlw	0
  2782  000E2E  6E26               	movwf	digitalWrite@val+1,c
  2783  000E30  0E00               	movlw	0
  2784  000E32  6E25               	movwf	digitalWrite@val,c
  2785  000E34  ECF2  F018         	call	_digitalWrite	;wreg free
  2786                           
  2787                           ;main.c: 220: digitalWrite(cylinderMotor2, 0);
  2788  000E38  0E56               	movlw	low _cylinderMotor2
  2789  000E3A  6E23               	movwf	digitalWrite@pin,c
  2790  000E3C  0E01               	movlw	high _cylinderMotor2
  2791  000E3E  6E24               	movwf	digitalWrite@pin+1,c
  2792  000E40  0E00               	movlw	0
  2793  000E42  6E26               	movwf	digitalWrite@val+1,c
  2794  000E44  0E00               	movlw	0
  2795  000E46  6E25               	movwf	digitalWrite@val,c
  2796  000E48  ECF2  F018         	call	_digitalWrite	;wreg free
  2797                           
  2798                           ;main.c: 223: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2799  000E4C  0E0D               	movlw	13
  2800  000E4E  0100               	movlb	0	; () banked
  2801  000E50  6FF0               	movwf	(??_sortBattery+1)& (0+255),b
  2802  000E52  0EAF               	movlw	175
  2803  000E54  0100               	movlb	0	; () banked
  2804  000E56  6FEF               	movwf	??_sortBattery& (0+255),b
  2805  000E58  0EB6               	movlw	182
  2806  000E5A                     u8147:
  2807  000E5A  2EE8               	decfsz	wreg,f,c
  2808  000E5C  D7FE               	bra	u8147
  2809  000E5E  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  2810  000E60  D7FC               	bra	u8147
  2811  000E62  2FF0               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2812  000E64  D7FA               	bra	u8147
  2813  000E66  F000               	nop	
  2814                           
  2815                           ;main.c: 225: float Vcc = 5.00;
  2816  000E68  0E00               	movlw	0
  2817  000E6A  0101               	movlb	1	; () banked
  2818  000E6C  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2819  000E6E  0EA0               	movlw	160
  2820  000E70  0101               	movlb	1	; () banked
  2821  000E72  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2822  000E74  0E40               	movlw	64
  2823  000E76  0101               	movlb	1	; () banked
  2824  000E78  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2825                           
  2826                           ; BSR set to: 1
  2827                           ;main.c: 226: float resolution = (1<<10) - 1;
  2828  000E7A  0EC0               	movlw	192
  2829  000E7C  0101               	movlb	1	; () banked
  2830  000E7E  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2831  000E80  0E7F               	movlw	127
  2832  000E82  0101               	movlb	1	; () banked
  2833  000E84  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2834  000E86  0E44               	movlw	68
  2835  000E88  0101               	movlb	1	; () banked
  2836  000E8A  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2837                           
  2838                           ; BSR set to: 1
  2839                           ;main.c: 227: float V_max = 0;
  2840  000E8C  0E00               	movlw	0
  2841  000E8E  0101               	movlb	1	; () banked
  2842  000E90  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2843  000E92  0E00               	movlw	0
  2844  000E94  0101               	movlb	1	; () banked
  2845  000E96  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2846  000E98  0E00               	movlw	0
  2847  000E9A  0101               	movlb	1	; () banked
  2848  000E9C  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2849                           
  2850                           ; BSR set to: 1
  2851                           ;main.c: 228: float V_float = 0;
  2852  000E9E  0E00               	movlw	0
  2853  000EA0  0101               	movlb	1	; () banked
  2854  000EA2  6F02               	movwf	sortBattery@V_float& (0+255),b
  2855  000EA4  0E00               	movlw	0
  2856  000EA6  0101               	movlb	1	; () banked
  2857  000EA8  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2858  000EAA  0E00               	movlw	0
  2859  000EAC  0101               	movlb	1	; () banked
  2860  000EAE  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2861                           
  2862                           ; BSR set to: 1
  2863                           ;main.c: 229: int pos_v_counter = 1;
  2864  000EB0  0E00               	movlw	0
  2865  000EB2  0101               	movlb	1	; () banked
  2866  000EB4  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2867  000EB6  0E01               	movlw	1
  2868  000EB8  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2869                           
  2870                           ; BSR set to: 1
  2871                           ;main.c: 230: int signal = 0;
  2872  000EBA  0E00               	movlw	0
  2873  000EBC  0101               	movlb	1	; () banked
  2874  000EBE  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2875  000EC0  0E00               	movlw	0
  2876  000EC2  6F07               	movwf	sortBattery@signal& (0+255),b
  2877                           
  2878                           ; BSR set to: 1
  2879                           ;main.c: 234: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2880  000EC4  C148  F02B         	movff	_padAngle_NEUTRAL,___awtoft@c
  2881  000EC8  C149  F02C         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2882  000ECC  EC68  F01F         	call	___awtoft	;wreg free
  2883  000ED0  C02B  F119         	movff	?___awtoft,sortBattery@i
  2884  000ED4  C02C  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2885  000ED8  C02D  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2886  000EDC  D0F6               	goto	l7577
  2887  000EDE                     l7551:
  2888                           
  2889                           ;main.c: 235: setAngle(padServo, i);
  2890  000EDE  C119  F0AE         	movff	sortBattery@i,___fttol@f1
  2891  000EE2  C11A  F0AF         	movff	sortBattery@i+1,___fttol@f1+1
  2892  000EE6  C11B  F0B0         	movff	sortBattery@i+2,___fttol@f1+2
  2893  000EEA  EC8A  F012         	call	___fttol	;wreg free
  2894  000EEE  C0AE  F100         	movff	?___fttol,_sortBattery$1417
  2895  000EF2  C0AF  F101         	movff	?___fttol+1,_sortBattery$1417+1
  2896                           
  2897                           ;main.c: 235: setAngle(padServo, i);
  2898  000EF6  0E62               	movlw	low _padServo
  2899  000EF8  0100               	movlb	0	; () banked
  2900  000EFA  6FD4               	movwf	setAngle@motor& (0+255),b
  2901  000EFC  0E01               	movlw	high _padServo
  2902  000EFE  0100               	movlb	0	; () banked
  2903  000F00  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2904  000F02  C100  F0D6         	movff	_sortBattery$1417,setAngle@angle
  2905  000F06  C101  F0D7         	movff	_sortBattery$1417+1,setAngle@angle+1
  2906  000F0A  ECBB  F017         	call	_setAngle	;wreg free
  2907                           
  2908                           ;main.c: 236: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2909  000F0E  0E53               	movlw	83
  2910  000F10                     u8157:
  2911  000F10  2EE8               	decfsz	wreg,f,c
  2912  000F12  D7FE               	bra	u8157
  2913  000F14  F000               	nop	
  2914                           
  2915                           ;main.c: 237: digitalWrite(AA_float, 1);
  2916  000F16  0E4E               	movlw	low _AA_float
  2917  000F18  6E23               	movwf	digitalWrite@pin,c
  2918  000F1A  0E00               	movlw	high _AA_float
  2919  000F1C  6E24               	movwf	digitalWrite@pin+1,c
  2920  000F1E  0E00               	movlw	0
  2921  000F20  6E26               	movwf	digitalWrite@val+1,c
  2922  000F22  0E01               	movlw	1
  2923  000F24  6E25               	movwf	digitalWrite@val,c
  2924  000F26  ECF2  F018         	call	_digitalWrite	;wreg free
  2925                           
  2926                           ;main.c: 238: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2927  000F2A  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2928  000F2E  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2929  000F32  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2930  000F36  C054  F023         	movff	_padPin3+2,analogRead@channel
  2931  000F3A  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  2932  000F3E  EC4C  F01F         	call	_analogRead	;wreg free
  2933  000F42  C023  F02B         	movff	?_analogRead,___altoft@c
  2934  000F46  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2935  000F4A  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2936  000F4E  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2937  000F52  EC52  F01C         	call	___altoft	;wreg free
  2938  000F56  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2939  000F5A  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2940  000F5E  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2941  000F62  ECE1  F014         	call	___ftdiv	;wreg free
  2942  000F66  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2943  000F6A  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2944  000F6E  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2945  000F72  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2946  000F76  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2947  000F7A  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2948  000F7E  EC2F  F011         	call	___ftmul	;wreg free
  2949  000F82  C089  F116         	movff	?___ftmul,sortBattery@V
  2950  000F86  C08A  F117         	movff	?___ftmul+1,sortBattery@V+1
  2951  000F8A  C08B  F118         	movff	?___ftmul+2,sortBattery@V+2
  2952                           
  2953                           ;main.c: 240: if(V > 0.1)pos_v_counter++;
  2954  000F8E  0ECD               	movlw	205
  2955  000F90  6E2F               	movwf	___ftge@ff1,c
  2956  000F92  0ECC               	movlw	204
  2957  000F94  6E30               	movwf	___ftge@ff1+1,c
  2958  000F96  0E3D               	movlw	61
  2959  000F98  6E31               	movwf	___ftge@ff1+2,c
  2960  000F9A  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2961  000F9E  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2962  000FA2  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2963  000FA6  EC04  F01B         	call	___ftge	;wreg free
  2964  000FAA  B0D8               	btfsc	status,0,c
  2965  000FAC  D003               	goto	l7565
  2966  000FAE  0101               	movlb	1	; () banked
  2967  000FB0  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2968  000FB2  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2969  000FB4                     l7565:
  2970                           
  2971                           ;main.c: 242: if(V > V_max) {
  2972  000FB4  C10F  F02F         	movff	sortBattery@V_max,___ftge@ff1
  2973  000FB8  C110  F030         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2974  000FBC  C111  F031         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2975  000FC0  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2976  000FC4  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2977  000FC8  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2978  000FCC  EC04  F01B         	call	___ftge	;wreg free
  2979  000FD0  B0D8               	btfsc	status,0,c
  2980  000FD2  D064               	goto	l7575
  2981                           
  2982                           ;main.c: 243: signal = digitalRead(padPin1)<<1;
  2983  000FD4  0E5A               	movlw	low _padPin1
  2984  000FD6  6E23               	movwf	digitalRead@pin,c
  2985  000FD8  0E01               	movlw	high _padPin1
  2986  000FDA  6E24               	movwf	digitalRead@pin+1,c
  2987  000FDC  ECEF  F015         	call	_digitalRead	;wreg free
  2988  000FE0  90D8               	bcf	status,0,c
  2989  000FE2  3423               	rlcf	?_digitalRead,w,c
  2990  000FE4  0101               	movlb	1	; () banked
  2991  000FE6  6F07               	movwf	sortBattery@signal& (0+255),b
  2992  000FE8  3424               	rlcf	?_digitalRead+1,w,c
  2993  000FEA  0101               	movlb	1	; () banked
  2994  000FEC  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2995                           
  2996                           ;main.c: 244: signal |= digitalRead(padPin2)<<0;
  2997  000FEE  0E5E               	movlw	low _padPin2
  2998  000FF0  6E23               	movwf	digitalRead@pin,c
  2999  000FF2  0E01               	movlw	high _padPin2
  3000  000FF4  6E24               	movwf	digitalRead@pin+1,c
  3001  000FF6  ECEF  F015         	call	_digitalRead	;wreg free
  3002  000FFA  5023               	movf	?_digitalRead,w,c
  3003  000FFC  0101               	movlb	1	; () banked
  3004  000FFE  1307               	iorwf	sortBattery@signal& (0+255),f,b
  3005  001000  5024               	movf	?_digitalRead+1,w,c
  3006  001002  0101               	movlb	1	; () banked
  3007  001004  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  3008                           
  3009                           ; BSR set to: 1
  3010                           ;main.c: 246: V_max = V;
  3011  001006  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  3012  00100A  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  3013  00100E  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  3014                           
  3015                           ;main.c: 249: digitalWrite(AA_float, 0);
  3016  001012  0E4E               	movlw	low _AA_float
  3017  001014  6E23               	movwf	digitalWrite@pin,c
  3018  001016  0E00               	movlw	high _AA_float
  3019  001018  6E24               	movwf	digitalWrite@pin+1,c
  3020  00101A  0E00               	movlw	0
  3021  00101C  6E26               	movwf	digitalWrite@val+1,c
  3022  00101E  0E00               	movlw	0
  3023  001020  6E25               	movwf	digitalWrite@val,c
  3024  001022  ECF2  F018         	call	_digitalWrite	;wreg free
  3025                           
  3026                           ;main.c: 250: _delay((unsigned long)((1)*(10000000/4000.0)));
  3027  001026  0E04               	movlw	4
  3028  001028  0100               	movlb	0	; () banked
  3029  00102A  6FEF               	movwf	??_sortBattery& (0+255),b
  3030  00102C  0E3D               	movlw	61
  3031  00102E                     u8167:
  3032  00102E  2EE8               	decfsz	wreg,f,c
  3033  001030  D7FE               	bra	u8167
  3034  001032  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3035  001034  D7FC               	bra	u8167
  3036  001036  D000               	nop2	
  3037                           
  3038                           ;main.c: 251: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  3039  001038  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  3040  00103C  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  3041  001040  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  3042  001044  C054  F023         	movff	_padPin3+2,analogRead@channel
  3043  001048  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  3044  00104C  EC4C  F01F         	call	_analogRead	;wreg free
  3045  001050  C023  F02B         	movff	?_analogRead,___altoft@c
  3046  001054  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  3047  001058  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  3048  00105C  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  3049  001060  EC52  F01C         	call	___altoft	;wreg free
  3050  001064  C02B  F035         	movff	?___altoft,___ftdiv@f1
  3051  001068  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  3052  00106C  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  3053  001070  ECE1  F014         	call	___ftdiv	;wreg free
  3054  001074  C035  F089         	movff	?___ftdiv,___ftmul@f1
  3055  001078  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  3056  00107C  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  3057  001080  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  3058  001084  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  3059  001088  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  3060  00108C  EC2F  F011         	call	___ftmul	;wreg free
  3061  001090  C089  F102         	movff	?___ftmul,sortBattery@V_float
  3062  001094  C08A  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  3063  001098  C08B  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  3064  00109C                     l7575:
  3065  00109C  C119  F0AE         	movff	sortBattery@i,___ftsub@f1
  3066  0010A0  C11A  F0AF         	movff	sortBattery@i+1,___ftsub@f1+1
  3067  0010A4  C11B  F0B0         	movff	sortBattery@i+2,___ftsub@f1+2
  3068  0010A8  0ECD               	movlw	205
  3069  0010AA  0100               	movlb	0	; () banked
  3070  0010AC  6FB1               	movwf	___ftsub@f2& (0+255),b
  3071  0010AE  0ECC               	movlw	204
  3072  0010B0  0100               	movlb	0	; () banked
  3073  0010B2  6FB2               	movwf	(___ftsub@f2+1)& (0+255),b
  3074  0010B4  0E3D               	movlw	61
  3075  0010B6  0100               	movlb	0	; () banked
  3076  0010B8  6FB3               	movwf	(___ftsub@f2+2)& (0+255),b
  3077  0010BA  EC72  F01E         	call	___ftsub	;wreg free
  3078  0010BE  C0AE  F119         	movff	?___ftsub,sortBattery@i
  3079  0010C2  C0AF  F11A         	movff	?___ftsub+1,sortBattery@i+1
  3080  0010C6  C0B0  F11B         	movff	?___ftsub+2,sortBattery@i+2
  3081  0010CA                     l7577:
  3082  0010CA  C046  F02B         	movff	_padAngle_CLOSE,___awtoft@c
  3083  0010CE  C047  F02C         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  3084  0010D2  EC68  F01F         	call	___awtoft	;wreg free
  3085  0010D6  C02B  F02F         	movff	?___awtoft,___ftge@ff1
  3086  0010DA  C02C  F030         	movff	?___awtoft+1,___ftge@ff1+1
  3087  0010DE  C02D  F031         	movff	?___awtoft+2,___ftge@ff1+2
  3088  0010E2  C119  F032         	movff	sortBattery@i,___ftge@ff2
  3089  0010E6  C11A  F033         	movff	sortBattery@i+1,___ftge@ff2+1
  3090  0010EA  C11B  F034         	movff	sortBattery@i+2,___ftge@ff2+2
  3091  0010EE  EC04  F01B         	call	___ftge	;wreg free
  3092  0010F2  A0D8               	btfss	status,0,c
  3093  0010F4  D6F4               	goto	l7551
  3094                           
  3095                           ;main.c: 253: }
  3096                           ;main.c: 254: }
  3097                           ;main.c: 256: int targetAngle;
  3098                           ;main.c: 257: float V = V_max;
  3099  0010F6  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_244
  3100  0010FA  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_244+1
  3101  0010FE  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_244+2
  3102                           
  3103                           ;main.c: 259: lcdClear();
  3104  001102  EC7B  F020         	call	_lcdClear	;wreg free
  3105                           
  3106                           ;main.c: 260: printf("V: %.3f, N: %d\n",V,pos_v_counter);
  3107  001106  0EA9               	movlw	low STR_4
  3108  001108  0100               	movlb	0	; () banked
  3109  00110A  6FBD               	movwf	printf@f& (0+255),b
  3110  00110C  0EFF               	movlw	high STR_4
  3111  00110E  0100               	movlb	0	; () banked
  3112  001110  6FBE               	movwf	(printf@f+1)& (0+255),b
  3113  001112  C11C  F0BF         	movff	sortBattery@V_244,?_printf+2
  3114  001116  C11D  F0C0         	movff	sortBattery@V_244+1,?_printf+3
  3115  00111A  C11E  F0C1         	movff	sortBattery@V_244+2,?_printf+4
  3116  00111E  C105  F0C2         	movff	sortBattery@pos_v_counter,?_printf+5
  3117  001122  C106  F0C3         	movff	sortBattery@pos_v_counter+1,?_printf+6
  3118  001126  EC09  F000         	call	_printf	;wreg free
  3119                           
  3120                           ;main.c: 265: switch(signal){
  3121  00112A  D09A               	goto	l7617
  3122  00112C                     l7583:
  3123                           
  3124                           ;main.c: 267: if(V_float < 0.1){
  3125  00112C  C102  F02F         	movff	sortBattery@V_float,___ftge@ff1
  3126  001130  C103  F030         	movff	sortBattery@V_float+1,___ftge@ff1+1
  3127  001134  C104  F031         	movff	sortBattery@V_float+2,___ftge@ff1+2
  3128  001138  0ECD               	movlw	205
  3129  00113A  6E32               	movwf	___ftge@ff2,c
  3130  00113C  0ECC               	movlw	204
  3131  00113E  6E33               	movwf	___ftge@ff2+1,c
  3132  001140  0E3D               	movlw	61
  3133  001142  6E34               	movwf	___ftge@ff2+2,c
  3134  001144  EC04  F01B         	call	___ftge	;wreg free
  3135  001148  B0D8               	btfsc	status,0,c
  3136  00114A  D02E               	goto	l7595
  3137                           
  3138                           ;main.c: 268: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  3139  00114C  C03E  F02F         	movff	_V_LIM_AA,___ftge@ff1
  3140  001150  C03F  F030         	movff	_V_LIM_AA+1,___ftge@ff1+1
  3141  001154  C040  F031         	movff	_V_LIM_AA+2,___ftge@ff1+2
  3142  001158  C11C  F032         	movff	sortBattery@V_244,___ftge@ff2
  3143  00115C  C11D  F033         	movff	sortBattery@V_244+1,___ftge@ff2+1
  3144  001160  C11E  F034         	movff	sortBattery@V_244+2,___ftge@ff2+2
  3145  001164  EC04  F01B         	call	___ftge	;wreg free
  3146  001168  B0D8               	btfsc	status,0,c
  3147  00116A  D008               	goto	l184
  3148  00116C  C14A  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  3149  001170  C14B  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  3150  001174  0101               	movlb	1	; () banked
  3151  001176  4B82               	infsnz	_n_AA& (0+255),f,b
  3152  001178  2B83               	incf	(_n_AA+1)& (0+255),f,b
  3153  00117A  D007               	goto	l7593
  3154  00117C                     l184:
  3155                           
  3156                           ;main.c: 269: else { targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3157  00117C  C0FD  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3158  001180  C0FE  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3159  001184  0101               	movlb	1	; () banked
  3160  001186  4B86               	infsnz	_n_OTHER& (0+255),f,b
  3161  001188  2B87               	incf	(_n_OTHER+1)& (0+255),f,b
  3162  00118A                     l7593:
  3163                           
  3164                           ; BSR set to: 1
  3165                           ;main.c: 270: printf("AA lim: %f",V_LIM_AA);
  3166  00118A  0ECF               	movlw	low STR_5
  3167  00118C  0100               	movlb	0	; () banked
  3168  00118E  6FBD               	movwf	printf@f& (0+255),b
  3169  001190  0EFF               	movlw	high STR_5
  3170  001192  0100               	movlb	0	; () banked
  3171  001194  6FBE               	movwf	(printf@f+1)& (0+255),b
  3172  001196  C03E  F0BF         	movff	_V_LIM_AA,?_printf+2
  3173  00119A  C03F  F0C0         	movff	_V_LIM_AA+1,?_printf+3
  3174  00119E  C040  F0C1         	movff	_V_LIM_AA+2,?_printf+4
  3175  0011A2  EC09  F000         	call	_printf	;wreg free
  3176                           
  3177                           ;main.c: 271: break;
  3178  0011A6  D070               	goto	l7619
  3179  0011A8                     l7595:
  3180                           
  3181                           ;main.c: 275: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  3182  0011A8  C03B  F02F         	movff	_V_LIM_9V,___ftge@ff1
  3183  0011AC  C03C  F030         	movff	_V_LIM_9V+1,___ftge@ff1+1
  3184  0011B0  C03D  F031         	movff	_V_LIM_9V+2,___ftge@ff1+2
  3185  0011B4  C11C  F032         	movff	sortBattery@V_244,___ftge@ff2
  3186  0011B8  C11D  F033         	movff	sortBattery@V_244+1,___ftge@ff2+1
  3187  0011BC  C11E  F034         	movff	sortBattery@V_244+2,___ftge@ff2+2
  3188  0011C0  EC04  F01B         	call	___ftge	;wreg free
  3189  0011C4  B0D8               	btfsc	status,0,c
  3190  0011C6  D008               	goto	l188
  3191  0011C8  C04A  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  3192  0011CC  C04B  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  3193  0011D0  0101               	movlb	1	; () banked
  3194  0011D2  4B80               	infsnz	_n_9V& (0+255),f,b
  3195  0011D4  2B81               	incf	(_n_9V+1)& (0+255),f,b
  3196  0011D6  D007               	goto	l7603
  3197  0011D8                     l188:
  3198                           
  3199                           ;main.c: 276: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3200  0011D8  C0FD  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3201  0011DC  C0FE  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3202  0011E0  0101               	movlb	1	; () banked
  3203  0011E2  4B86               	infsnz	_n_OTHER& (0+255),f,b
  3204  0011E4  2B87               	incf	(_n_OTHER+1)& (0+255),f,b
  3205  0011E6                     l7603:
  3206                           
  3207                           ; BSR set to: 1
  3208                           ;main.c: 277: printf("9V lim: %f",V_LIM_9V);
  3209  0011E6  0EDA               	movlw	low STR_6
  3210  0011E8  0100               	movlb	0	; () banked
  3211  0011EA  6FBD               	movwf	printf@f& (0+255),b
  3212  0011EC  0EFF               	movlw	high STR_6
  3213  0011EE  0100               	movlb	0	; () banked
  3214  0011F0  6FBE               	movwf	(printf@f+1)& (0+255),b
  3215  0011F2  C03B  F0BF         	movff	_V_LIM_9V,?_printf+2
  3216  0011F6  C03C  F0C0         	movff	_V_LIM_9V+1,?_printf+3
  3217  0011FA  C03D  F0C1         	movff	_V_LIM_9V+2,?_printf+4
  3218  0011FE  EC09  F000         	call	_printf	;wreg free
  3219                           
  3220                           ;main.c: 278: break;
  3221  001202  D042               	goto	l7619
  3222  001204                     l7605:
  3223                           
  3224                           ;main.c: 280: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  3225  001204  C041  F02F         	movff	_V_LIM_C,___ftge@ff1
  3226  001208  C042  F030         	movff	_V_LIM_C+1,___ftge@ff1+1
  3227  00120C  C043  F031         	movff	_V_LIM_C+2,___ftge@ff1+2
  3228  001210  C11C  F032         	movff	sortBattery@V_244,___ftge@ff2
  3229  001214  C11D  F033         	movff	sortBattery@V_244+1,___ftge@ff2+1
  3230  001218  C11E  F034         	movff	sortBattery@V_244+2,___ftge@ff2+2
  3231  00121C  EC04  F01B         	call	___ftge	;wreg free
  3232  001220  B0D8               	btfsc	status,0,c
  3233  001222  D008               	goto	l191
  3234  001224  C04C  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  3235  001228  C04D  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  3236  00122C  0101               	movlb	1	; () banked
  3237  00122E  4B84               	infsnz	_n_C& (0+255),f,b
  3238  001230  2B85               	incf	(_n_C+1)& (0+255),f,b
  3239  001232  D007               	goto	l7613
  3240  001234                     l191:
  3241                           
  3242                           ;main.c: 281: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3243  001234  C0FD  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3244  001238  C0FE  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3245  00123C  0101               	movlb	1	; () banked
  3246  00123E  4B86               	infsnz	_n_OTHER& (0+255),f,b
  3247  001240  2B87               	incf	(_n_OTHER+1)& (0+255),f,b
  3248  001242                     l7613:
  3249                           
  3250                           ; BSR set to: 1
  3251                           ;main.c: 282: printf("C  lim: %f",V_LIM_C);
  3252  001242  0EC4               	movlw	low STR_7
  3253  001244  0100               	movlb	0	; () banked
  3254  001246  6FBD               	movwf	printf@f& (0+255),b
  3255  001248  0EFF               	movlw	high STR_7
  3256  00124A  0100               	movlb	0	; () banked
  3257  00124C  6FBE               	movwf	(printf@f+1)& (0+255),b
  3258  00124E  C041  F0BF         	movff	_V_LIM_C,?_printf+2
  3259  001252  C042  F0C0         	movff	_V_LIM_C+1,?_printf+3
  3260  001256  C043  F0C1         	movff	_V_LIM_C+2,?_printf+4
  3261  00125A  EC09  F000         	call	_printf	;wreg free
  3262                           
  3263                           ;main.c: 284: }
  3264                           
  3265                           ;main.c: 283: break;
  3266  00125E  D014               	goto	l7619
  3267  001260                     l7617:
  3268  001260  C107  F0EF         	movff	sortBattery@signal,??_sortBattery
  3269  001264  C108  F0F0         	movff	sortBattery@signal+1,??_sortBattery+1
  3270                           
  3271                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3272                           ; Switch size 1, requested type "space"
  3273                           ; Number of cases is 1, Range of values is 0 to 0
  3274                           ; switch strategies available:
  3275                           ; Name         Instructions Cycles
  3276                           ; simple_byte            4     3 (average)
  3277                           ;	Chosen strategy is simple_byte
  3278  001268  0100               	movlb	0	; () banked
  3279  00126A  51F0               	movf	(??_sortBattery+1)& (0+255),w,b
  3280  00126C  0A00               	xorlw	0	; case 0
  3281  00126E  A4D8               	btfss	status,2,c
  3282  001270  D00B               	goto	l7619
  3283                           
  3284                           ; BSR set to: 0
  3285                           ; Switch size 1, requested type "space"
  3286                           ; Number of cases is 3, Range of values is 0 to 2
  3287                           ; switch strategies available:
  3288                           ; Name         Instructions Cycles
  3289                           ; simple_byte           10     6 (average)
  3290                           ;	Chosen strategy is simple_byte
  3291  001272  0100               	movlb	0	; () banked
  3292  001274  51EF               	movf	??_sortBattery& (0+255),w,b
  3293  001276  0A00               	xorlw	0	; case 0
  3294  001278  B4D8               	btfsc	status,2,c
  3295  00127A  D758               	goto	l7583
  3296  00127C  0A01               	xorlw	1	; case 1
  3297  00127E  B4D8               	btfsc	status,2,c
  3298  001280  D7C1               	goto	l7605
  3299  001282  0A03               	xorlw	3	; case 2
  3300  001284  B4D8               	btfsc	status,2,c
  3301  001286  D790               	goto	l7595
  3302  001288                     l7619:
  3303                           
  3304                           ;main.c: 287: readKeypad();
  3305  001288  ECAF  F01F         	call	_readKeypad	;wreg free
  3306                           
  3307                           ;main.c: 288: setAngle(redirectingServo, targetAngle);
  3308  00128C  0E66               	movlw	low _redirectingServo
  3309  00128E  0100               	movlb	0	; () banked
  3310  001290  6FD4               	movwf	setAngle@motor& (0+255),b
  3311  001292  0E01               	movlw	high _redirectingServo
  3312  001294  0100               	movlb	0	; () banked
  3313  001296  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3314  001298  C114  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  3315  00129C  C115  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  3316  0012A0  ECBB  F017         	call	_setAngle	;wreg free
  3317                           
  3318                           ;main.c: 289: _delay((unsigned long)((500)*(10000000/4000.0)));
  3319  0012A4  0E07               	movlw	7
  3320  0012A6  0100               	movlb	0	; () banked
  3321  0012A8  6FF0               	movwf	(??_sortBattery+1)& (0+255),b
  3322  0012AA  0E58               	movlw	88
  3323  0012AC  0100               	movlb	0	; () banked
  3324  0012AE  6FEF               	movwf	??_sortBattery& (0+255),b
  3325  0012B0  0E59               	movlw	89
  3326  0012B2                     u8177:
  3327  0012B2  2EE8               	decfsz	wreg,f,c
  3328  0012B4  D7FE               	bra	u8177
  3329  0012B6  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3330  0012B8  D7FC               	bra	u8177
  3331  0012BA  2FF0               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3332  0012BC  D7FA               	bra	u8177
  3333  0012BE  D000               	nop2	
  3334                           
  3335                           ;main.c: 293: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  3336  0012C0  C046  F112         	movff	_padAngle_CLOSE,sortBattery@i_249
  3337  0012C4  C047  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_249+1
  3338  0012C8  D018               	goto	l7633
  3339  0012CA                     l7627:
  3340                           
  3341                           ;main.c: 294: setAngle(padServo, i);
  3342  0012CA  0E62               	movlw	low _padServo
  3343  0012CC  0100               	movlb	0	; () banked
  3344  0012CE  6FD4               	movwf	setAngle@motor& (0+255),b
  3345  0012D0  0E01               	movlw	high _padServo
  3346  0012D2  0100               	movlb	0	; () banked
  3347  0012D4  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3348  0012D6  C112  F0D6         	movff	sortBattery@i_249,setAngle@angle
  3349  0012DA  C113  F0D7         	movff	sortBattery@i_249+1,setAngle@angle+1
  3350  0012DE  ECBB  F017         	call	_setAngle	;wreg free
  3351                           
  3352                           ;main.c: 295: _delay((unsigned long)((3)*(10000000/4000.0)));
  3353  0012E2  0E0A               	movlw	10
  3354  0012E4  0100               	movlb	0	; () banked
  3355  0012E6  6FEF               	movwf	??_sortBattery& (0+255),b
  3356  0012E8  0EBC               	movlw	188
  3357  0012EA                     u8187:
  3358  0012EA  2EE8               	decfsz	wreg,f,c
  3359  0012EC  D7FE               	bra	u8187
  3360  0012EE  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3361  0012F0  D7FC               	bra	u8187
  3362  0012F2  F000               	nop	
  3363  0012F4  0101               	movlb	1	; () banked
  3364  0012F6  4B12               	infsnz	sortBattery@i_249& (0+255),f,b
  3365  0012F8  2B13               	incf	(sortBattery@i_249+1)& (0+255),f,b
  3366  0012FA                     l7633:
  3367  0012FA  5048               	movf	_padAngle_OPEN,w,c
  3368  0012FC  0101               	movlb	1	; () banked
  3369  0012FE  5D12               	subwf	sortBattery@i_249& (0+255),w,b
  3370  001300  0101               	movlb	1	; () banked
  3371  001302  5113               	movf	(sortBattery@i_249+1)& (0+255),w,b
  3372  001304  0A80               	xorlw	128
  3373  001306  0100               	movlb	0	; () banked
  3374  001308  6FEF               	movwf	??_sortBattery& (0+255),b
  3375  00130A  5049               	movf	_padAngle_OPEN+1,w,c
  3376  00130C  0A80               	xorlw	128
  3377  00130E  0100               	movlb	0	; () banked
  3378  001310  59EF               	subwfb	??_sortBattery& (0+255),w,b
  3379  001312  A0D8               	btfss	status,0,c
  3380  001314  D7DA               	goto	l7627
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 296: }
  3384                           ;main.c: 298: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3385                           
  3386                           ; BSR set to: 0
  3387  001316  0E0D               	movlw	13
  3388  001318  0100               	movlb	0	; () banked
  3389  00131A  6FF0               	movwf	(??_sortBattery+1)& (0+255),b
  3390  00131C  0EAF               	movlw	175
  3391  00131E  0100               	movlb	0	; () banked
  3392  001320  6FEF               	movwf	??_sortBattery& (0+255),b
  3393  001322  0EB6               	movlw	182
  3394  001324                     u8197:
  3395  001324  2EE8               	decfsz	wreg,f,c
  3396  001326  D7FE               	bra	u8197
  3397  001328  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3398  00132A  D7FC               	bra	u8197
  3399  00132C  2FF0               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3400  00132E  D7FA               	bra	u8197
  3401  001330  F000               	nop	
  3402                           
  3403                           ;main.c: 302: setAngle(padServo, padAngle_NEUTRAL);
  3404  001332  0E62               	movlw	low _padServo
  3405  001334  0100               	movlb	0	; () banked
  3406  001336  6FD4               	movwf	setAngle@motor& (0+255),b
  3407  001338  0E01               	movlw	high _padServo
  3408  00133A  0100               	movlb	0	; () banked
  3409  00133C  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3410  00133E  C148  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  3411  001342  C149  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3412  001346  ECBB  F017         	call	_setAngle	;wreg free
  3413                           
  3414                           ;main.c: 306: setAngle(conveyorServo, 130);
  3415  00134A  0E4E               	movlw	low _conveyorServo
  3416  00134C  0100               	movlb	0	; () banked
  3417  00134E  6FD4               	movwf	setAngle@motor& (0+255),b
  3418  001350  0E01               	movlw	high _conveyorServo
  3419  001352  0100               	movlb	0	; () banked
  3420  001354  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3421  001356  0E00               	movlw	0
  3422  001358  0100               	movlb	0	; () banked
  3423  00135A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  3424  00135C  0E82               	movlw	130
  3425  00135E  6FD6               	movwf	setAngle@angle& (0+255),b
  3426  001360  ECBB  F017         	call	_setAngle	;wreg free
  3427                           
  3428                           ;main.c: 307: digitalWrite(cylinderMotor1, 1);
  3429  001364  0E52               	movlw	low _cylinderMotor1
  3430  001366  6E23               	movwf	digitalWrite@pin,c
  3431  001368  0E01               	movlw	high _cylinderMotor1
  3432  00136A  6E24               	movwf	digitalWrite@pin+1,c
  3433  00136C  0E00               	movlw	0
  3434  00136E  6E26               	movwf	digitalWrite@val+1,c
  3435  001370  0E01               	movlw	1
  3436  001372  6E25               	movwf	digitalWrite@val,c
  3437  001374  ECF2  F018         	call	_digitalWrite	;wreg free
  3438  001378  0012               	return		;funcret
  3439  00137A                     __end_of_sortBattery:
  3440                           	opt stack 0
  3441                           tblptru	equ	0xFF8
  3442                           tblptrh	equ	0xFF7
  3443                           tblptrl	equ	0xFF6
  3444                           tablat	equ	0xFF5
  3445                           postinc0	equ	0xFEE
  3446                           wreg	equ	0xFE8
  3447                           postdec1	equ	0xFE5
  3448                           fsr1l	equ	0xFE1
  3449                           status	equ	0xFD8
  3450                           
  3451 ;; *************** function _digitalWrite *****************
  3452 ;; Defined at:
  3453 ;;		line 53 in file "iopin.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;  pin             2   34[COMRAM] PTR int 
  3456 ;;		 -> AA_float(4), cylinderMotor2(4), redirectingServo(4), padServo(4), 
  3457 ;;		 -> conveyorServo(4), cylinderMotor1(4), 
  3458 ;;  val             2   36[COMRAM] int 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  p               2   41[COMRAM] int 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      void 
  3463 ;; Registers used:
  3464 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3470 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;Total ram usage:        9 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    3
  3477 ;; This function calls:
  3478 ;;		Nothing
  3479 ;; This function is called by:
  3480 ;;		_main
  3481 ;;		_sortBattery
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           	psect	text2
  3486  0031E4                     __ptext2:
  3487                           	opt stack 0
  3488  0031E4                     _digitalWrite:
  3489                           	opt stack 26
  3490                           
  3491                           ;iopin.c: 54: if(pin){
  3492                           
  3493                           ;incstack = 0
  3494  0031E4  5023               	movf	digitalWrite@pin,w,c
  3495  0031E6  1024               	iorwf	digitalWrite@pin+1,w,c
  3496  0031E8  B4D8               	btfsc	status,2,c
  3497  0031EA  0012               	return	
  3498                           
  3499                           ;iopin.c: 55: int p = 1 << pin[1];
  3500  0031EC  EE20 F002          	lfsr	2,2
  3501  0031F0  5023               	movf	digitalWrite@pin,w,c
  3502  0031F2  26D9               	addwf	fsr2l,f,c
  3503  0031F4  5024               	movf	digitalWrite@pin+1,w,c
  3504  0031F6  22DA               	addwfc	fsr2h,f,c
  3505  0031F8  50DF               	movf	indf2,w,c
  3506  0031FA  6E27               	movwf	??_digitalWrite& (0+255),c
  3507  0031FC  0E01               	movlw	1
  3508  0031FE  6E28               	movwf	(??_digitalWrite+1)& (0+255),c
  3509  003200  0E00               	movlw	0
  3510  003202  6E29               	movwf	(??_digitalWrite+2)& (0+255),c
  3511  003204  2A27               	incf	??_digitalWrite,f,c
  3512  003206  D003               	goto	u7494
  3513  003208                     u7495:
  3514  003208  90D8               	bcf	status,0,c
  3515  00320A  3628               	rlcf	??_digitalWrite+1,f,c
  3516  00320C  3629               	rlcf	??_digitalWrite+2,f,c
  3517  00320E                     u7494:
  3518  00320E  2E27               	decfsz	??_digitalWrite,f,c
  3519  003210  D7FB               	goto	u7495
  3520  003212  C028  F02A         	movff	??_digitalWrite+1,digitalWrite@p
  3521  003216  C029  F02B         	movff	??_digitalWrite+2,digitalWrite@p+1
  3522                           
  3523                           ;iopin.c: 56: if(val == 0){
  3524  00321A  5025               	movf	digitalWrite@val,w,c
  3525  00321C  1026               	iorwf	digitalWrite@val+1,w,c
  3526  00321E  A4D8               	btfss	status,2,c
  3527  003220  D02B               	goto	l7243
  3528                           
  3529                           ;iopin.c: 57: p ^= 0xff;
  3530  003222  0EFF               	movlw	255
  3531  003224  1A2A               	xorwf	digitalWrite@p,f,c
  3532                           
  3533                           ;iopin.c: 58: }
  3534                           ;iopin.c: 60: switch(pin[0]){
  3535  003226  D028               	goto	l7243
  3536  003228                     l7219:
  3537  003228  0425               	decf	digitalWrite@val,w,c
  3538  00322A  1026               	iorwf	digitalWrite@val+1,w,c
  3539  00322C  A4D8               	btfss	status,2,c
  3540  00322E  D003               	goto	l7223
  3541  003230  502A               	movf	digitalWrite@p,w,c
  3542  003232  1289               	iorwf	3977,f,c	;volatile
  3543  003234  0012               	return	
  3544  003236                     l7223:
  3545                           
  3546                           ;iopin.c: 62: else LATA &= p;
  3547  003236  502A               	movf	digitalWrite@p,w,c
  3548  003238  1689               	andwf	3977,f,c	;volatile
  3549                           
  3550                           ;iopin.c: 63: break;
  3551  00323A  0012               	return	
  3552  00323C                     l7225:
  3553  00323C  0425               	decf	digitalWrite@val,w,c
  3554  00323E  1026               	iorwf	digitalWrite@val+1,w,c
  3555  003240  A4D8               	btfss	status,2,c
  3556  003242  D003               	goto	l7229
  3557  003244  502A               	movf	digitalWrite@p,w,c
  3558  003246  128A               	iorwf	3978,f,c	;volatile
  3559  003248  0012               	return	
  3560  00324A                     l7229:
  3561                           
  3562                           ;iopin.c: 65: else LATB &= p;
  3563  00324A  502A               	movf	digitalWrite@p,w,c
  3564  00324C  168A               	andwf	3978,f,c	;volatile
  3565                           
  3566                           ;iopin.c: 66: break;
  3567  00324E  0012               	return	
  3568  003250                     l7231:
  3569  003250  0425               	decf	digitalWrite@val,w,c
  3570  003252  1026               	iorwf	digitalWrite@val+1,w,c
  3571  003254  A4D8               	btfss	status,2,c
  3572  003256  D003               	goto	l7235
  3573  003258  502A               	movf	digitalWrite@p,w,c
  3574  00325A  128B               	iorwf	3979,f,c	;volatile
  3575  00325C  0012               	return	
  3576  00325E                     l7235:
  3577                           
  3578                           ;iopin.c: 68: else LATC &= p;
  3579  00325E  502A               	movf	digitalWrite@p,w,c
  3580  003260  168B               	andwf	3979,f,c	;volatile
  3581                           
  3582                           ;iopin.c: 69: break;
  3583  003262  0012               	return	
  3584  003264                     l7237:
  3585  003264  0425               	decf	digitalWrite@val,w,c
  3586  003266  1026               	iorwf	digitalWrite@val+1,w,c
  3587  003268  A4D8               	btfss	status,2,c
  3588  00326A  D003               	goto	l7241
  3589  00326C  502A               	movf	digitalWrite@p,w,c
  3590  00326E  128C               	iorwf	3980,f,c	;volatile
  3591  003270  0012               	return	
  3592  003272                     l7241:
  3593                           
  3594                           ;iopin.c: 71: else LATD &= p;
  3595  003272  502A               	movf	digitalWrite@p,w,c
  3596  003274  168C               	andwf	3980,f,c	;volatile
  3597                           
  3598                           ;iopin.c: 72: }
  3599  003276  0012               	return	
  3600  003278                     l7243:
  3601  003278  C023  FFD9         	movff	digitalWrite@pin,fsr2l
  3602  00327C  C024  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3603  003280  CFDE F027          	movff	postinc2,??_digitalWrite
  3604  003284  CFDD F028          	movff	postdec2,??_digitalWrite+1
  3605                           
  3606                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3607                           ; Switch size 1, requested type "space"
  3608                           ; Number of cases is 1, Range of values is 0 to 0
  3609                           ; switch strategies available:
  3610                           ; Name         Instructions Cycles
  3611                           ; simple_byte            4     3 (average)
  3612                           ;	Chosen strategy is simple_byte
  3613  003288  5028               	movf	??_digitalWrite+1,w,c
  3614  00328A  0A00               	xorlw	0	; case 0
  3615  00328C  A4D8               	btfss	status,2,c
  3616  00328E  0012               	return	
  3617                           
  3618                           ; Switch size 1, requested type "space"
  3619                           ; Number of cases is 4, Range of values is 0 to 3
  3620                           ; switch strategies available:
  3621                           ; Name         Instructions Cycles
  3622                           ; simple_byte           13     7 (average)
  3623                           ;	Chosen strategy is simple_byte
  3624  003290  5027               	movf	??_digitalWrite,w,c
  3625  003292  0A00               	xorlw	0	; case 0
  3626  003294  B4D8               	btfsc	status,2,c
  3627  003296  D7C8               	goto	l7219
  3628  003298  0A01               	xorlw	1	; case 1
  3629  00329A  B4D8               	btfsc	status,2,c
  3630  00329C  D7CF               	goto	l7225
  3631  00329E  0A03               	xorlw	3	; case 2
  3632  0032A0  B4D8               	btfsc	status,2,c
  3633  0032A2  D7D6               	goto	l7231
  3634  0032A4  0A01               	xorlw	1	; case 3
  3635  0032A6  A4D8               	btfss	status,2,c
  3636  0032A8  0012               	return	
  3637  0032AA  D7DC               	goto	l7237
  3638  0032AC                     __end_of_digitalWrite:
  3639                           	opt stack 0
  3640                           tblptru	equ	0xFF8
  3641                           tblptrh	equ	0xFF7
  3642                           tblptrl	equ	0xFF6
  3643                           tablat	equ	0xFF5
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           postdec1	equ	0xFE5
  3647                           fsr1l	equ	0xFE1
  3648                           indf2	equ	0xFDF
  3649                           postinc2	equ	0xFDE
  3650                           postdec2	equ	0xFDD
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655 ;; *************** function _digitalRead *****************
  3656 ;; Defined at:
  3657 ;;		line 43 in file "iopin.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  pin             2   34[COMRAM] PTR int 
  3660 ;;		 -> padPin2(4), padPin1(4), cylinderMotor1(4), 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  2   34[COMRAM] int 
  3665 ;; Registers used:
  3666 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3672 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;Total ram usage:        4 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    3
  3679 ;; This function calls:
  3680 ;;		Nothing
  3681 ;; This function is called by:
  3682 ;;		_main
  3683 ;;		_sortBattery
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text3
  3688  002BDE                     __ptext3:
  3689                           	opt stack 0
  3690  002BDE                     _digitalRead:
  3691                           	opt stack 26
  3692                           
  3693                           ;iopin.c: 44: switch(pin[0]){
  3694                           
  3695                           ;incstack = 0
  3696  002BDE  D058               	goto	l7269
  3697  002BE0                     l7251:
  3698  002BE0  EE20 F002          	lfsr	2,2
  3699  002BE4  5023               	movf	digitalRead@pin,w,c
  3700  002BE6  26D9               	addwf	fsr2l,f,c
  3701  002BE8  5024               	movf	digitalRead@pin+1,w,c
  3702  002BEA  22DA               	addwfc	fsr2h,f,c
  3703  002BEC  50DF               	movf	indf2,w,c
  3704  002BEE  6E25               	movwf	??_digitalRead& (0+255),c
  3705  002BF0  CF80 F026          	movff	3968,??_digitalRead+1	;volatile
  3706  002BF4  2A25               	incf	??_digitalRead,f,c
  3707  002BF6  D002               	goto	u7554
  3708  002BF8                     u7555:
  3709  002BF8  90D8               	bcf	status,0,c
  3710  002BFA  3226               	rrcf	??_digitalRead+1,f,c
  3711  002BFC                     u7554:
  3712  002BFC  2E25               	decfsz	??_digitalRead,f,c
  3713  002BFE  D7FC               	goto	u7555
  3714  002C00  0E01               	movlw	1
  3715  002C02  1626               	andwf	??_digitalRead+1,f,c
  3716  002C04  5026               	movf	??_digitalRead+1,w,c
  3717  002C06  6E23               	movwf	?_digitalRead,c
  3718  002C08  6A24               	clrf	?_digitalRead+1,c
  3719  002C0A  0012               	return	
  3720  002C0C                     l7255:
  3721  002C0C  EE20 F002          	lfsr	2,2
  3722  002C10  5023               	movf	digitalRead@pin,w,c
  3723  002C12  26D9               	addwf	fsr2l,f,c
  3724  002C14  5024               	movf	digitalRead@pin+1,w,c
  3725  002C16  22DA               	addwfc	fsr2h,f,c
  3726  002C18  50DF               	movf	indf2,w,c
  3727  002C1A  6E25               	movwf	??_digitalRead& (0+255),c
  3728  002C1C  CF81 F026          	movff	3969,??_digitalRead+1	;volatile
  3729  002C20  2A25               	incf	??_digitalRead,f,c
  3730  002C22  D002               	goto	u7564
  3731  002C24                     u7565:
  3732  002C24  90D8               	bcf	status,0,c
  3733  002C26  3226               	rrcf	??_digitalRead+1,f,c
  3734  002C28                     u7564:
  3735  002C28  2E25               	decfsz	??_digitalRead,f,c
  3736  002C2A  D7FC               	goto	u7565
  3737  002C2C  0E01               	movlw	1
  3738  002C2E  1626               	andwf	??_digitalRead+1,f,c
  3739  002C30  5026               	movf	??_digitalRead+1,w,c
  3740  002C32  6E23               	movwf	?_digitalRead,c
  3741  002C34  6A24               	clrf	?_digitalRead+1,c
  3742  002C36  0012               	return	
  3743  002C38                     l7259:
  3744  002C38  EE20 F002          	lfsr	2,2
  3745  002C3C  5023               	movf	digitalRead@pin,w,c
  3746  002C3E  26D9               	addwf	fsr2l,f,c
  3747  002C40  5024               	movf	digitalRead@pin+1,w,c
  3748  002C42  22DA               	addwfc	fsr2h,f,c
  3749  002C44  50DF               	movf	indf2,w,c
  3750  002C46  6E25               	movwf	??_digitalRead& (0+255),c
  3751  002C48  CF82 F026          	movff	3970,??_digitalRead+1	;volatile
  3752  002C4C  2A25               	incf	??_digitalRead,f,c
  3753  002C4E  D002               	goto	u7574
  3754  002C50                     u7575:
  3755  002C50  90D8               	bcf	status,0,c
  3756  002C52  3226               	rrcf	??_digitalRead+1,f,c
  3757  002C54                     u7574:
  3758  002C54  2E25               	decfsz	??_digitalRead,f,c
  3759  002C56  D7FC               	goto	u7575
  3760  002C58  0E01               	movlw	1
  3761  002C5A  1626               	andwf	??_digitalRead+1,f,c
  3762  002C5C  5026               	movf	??_digitalRead+1,w,c
  3763  002C5E  6E23               	movwf	?_digitalRead,c
  3764  002C60  6A24               	clrf	?_digitalRead+1,c
  3765  002C62  0012               	return	
  3766  002C64                     l7263:
  3767  002C64  EE20 F002          	lfsr	2,2
  3768  002C68  5023               	movf	digitalRead@pin,w,c
  3769  002C6A  26D9               	addwf	fsr2l,f,c
  3770  002C6C  5024               	movf	digitalRead@pin+1,w,c
  3771  002C6E  22DA               	addwfc	fsr2h,f,c
  3772  002C70  50DF               	movf	indf2,w,c
  3773  002C72  6E25               	movwf	??_digitalRead& (0+255),c
  3774  002C74  CF83 F026          	movff	3971,??_digitalRead+1	;volatile
  3775  002C78  2A25               	incf	??_digitalRead,f,c
  3776  002C7A  D002               	goto	u7584
  3777  002C7C                     u7585:
  3778  002C7C  90D8               	bcf	status,0,c
  3779  002C7E  3226               	rrcf	??_digitalRead+1,f,c
  3780  002C80                     u7584:
  3781  002C80  2E25               	decfsz	??_digitalRead,f,c
  3782  002C82  D7FC               	goto	u7585
  3783  002C84  0E01               	movlw	1
  3784  002C86  1626               	andwf	??_digitalRead+1,f,c
  3785  002C88  5026               	movf	??_digitalRead+1,w,c
  3786  002C8A  6E23               	movwf	?_digitalRead,c
  3787  002C8C  6A24               	clrf	?_digitalRead+1,c
  3788  002C8E  0012               	return	
  3789  002C90                     l7269:
  3790  002C90  C023  FFD9         	movff	digitalRead@pin,fsr2l
  3791  002C94  C024  FFDA         	movff	digitalRead@pin+1,fsr2h
  3792  002C98  CFDE F025          	movff	postinc2,??_digitalRead
  3793  002C9C  CFDD F026          	movff	postdec2,??_digitalRead+1
  3794                           
  3795                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3796                           ; Switch size 1, requested type "space"
  3797                           ; Number of cases is 1, Range of values is 0 to 0
  3798                           ; switch strategies available:
  3799                           ; Name         Instructions Cycles
  3800                           ; simple_byte            4     3 (average)
  3801                           ;	Chosen strategy is simple_byte
  3802  002CA0  5026               	movf	??_digitalRead+1,w,c
  3803  002CA2  0A00               	xorlw	0	; case 0
  3804  002CA4  A4D8               	btfss	status,2,c
  3805  002CA6  D00D               	goto	l342
  3806                           
  3807                           ; Switch size 1, requested type "space"
  3808                           ; Number of cases is 4, Range of values is 0 to 3
  3809                           ; switch strategies available:
  3810                           ; Name         Instructions Cycles
  3811                           ; simple_byte           13     7 (average)
  3812                           ;	Chosen strategy is simple_byte
  3813  002CA8  5025               	movf	??_digitalRead,w,c
  3814  002CAA  0A00               	xorlw	0	; case 0
  3815  002CAC  B4D8               	btfsc	status,2,c
  3816  002CAE  D798               	goto	l7251
  3817  002CB0  0A01               	xorlw	1	; case 1
  3818  002CB2  B4D8               	btfsc	status,2,c
  3819  002CB4  D7AB               	goto	l7255
  3820  002CB6  0A03               	xorlw	3	; case 2
  3821  002CB8  B4D8               	btfsc	status,2,c
  3822  002CBA  D7BE               	goto	l7259
  3823  002CBC  0A01               	xorlw	1	; case 3
  3824  002CBE  B4D8               	btfsc	status,2,c
  3825  002CC0  D7D1               	goto	l7263
  3826  002CC2                     l342:
  3827                           
  3828                           ;iopin.c: 50: return -1;
  3829  002CC2  6823               	setf	?_digitalRead,c
  3830  002CC4  6824               	setf	?_digitalRead+1,c
  3831  002CC6  0012               	return		;funcret
  3832  002CC8                     __end_of_digitalRead:
  3833                           	opt stack 0
  3834                           tblptru	equ	0xFF8
  3835                           tblptrh	equ	0xFF7
  3836                           tblptrl	equ	0xFF6
  3837                           tablat	equ	0xFF5
  3838                           postinc0	equ	0xFEE
  3839                           wreg	equ	0xFE8
  3840                           postdec1	equ	0xFE5
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _analogRead *****************
  3850 ;; Defined at:
  3851 ;;		line 90 in file "iopin.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  channel         2   34[COMRAM] int 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  4   34[COMRAM] long 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;Total ram usage:        6 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    3
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_sortBattery
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text4
  3880  003E98                     __ptext4:
  3881                           	opt stack 0
  3882  003E98                     _analogRead:
  3883                           	opt stack 26
  3884                           
  3885                           ;iopin.c: 91: ADCON0 = channel<<2;
  3886                           
  3887                           ;incstack = 0
  3888  003E98  4423               	rlncf	analogRead@channel,w,c
  3889  003E9A  46E8               	rlncf	wreg,f,c
  3890  003E9C  0BFC               	andlw	252
  3891  003E9E  6EC2               	movwf	4034,c	;volatile
  3892                           
  3893                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3894  003EA0  80C2               	bsf	4034,0,c	;volatile
  3895                           
  3896                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3897  003EA2  82C2               	bsf	4034,1,c	;volatile
  3898  003EA4                     l367:
  3899  003EA4  B2C2               	btfsc	4034,1,c	;volatile
  3900  003EA6  D7FE               	goto	l367
  3901                           
  3902                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3903  003EA8  50C3               	movf	4035,w,c	;volatile
  3904  003EAA  CFC4 F027          	movff	4036,??_analogRead	;volatile
  3905  003EAE  6A28               	clrf	(??_analogRead+1)& (0+255),c
  3906  003EB0  C027  F028         	movff	??_analogRead,??_analogRead+1
  3907  003EB4  6A27               	clrf	??_analogRead,c
  3908  003EB6  2627               	addwf	??_analogRead,f,c
  3909  003EB8  0E00               	movlw	0
  3910  003EBA  2228               	addwfc	??_analogRead+1,f,c
  3911  003EBC  C027  F023         	movff	??_analogRead,?_analogRead
  3912  003EC0  C028  F024         	movff	??_analogRead+1,?_analogRead+1
  3913  003EC4  0E00               	movlw	0
  3914  003EC6  BE24               	btfsc	?_analogRead+1,7,c
  3915  003EC8  0EFF               	movlw	-1
  3916  003ECA  6E25               	movwf	?_analogRead+2,c
  3917  003ECC  6E26               	movwf	?_analogRead+3,c
  3918  003ECE  0012               	return	
  3919  003ED0                     __end_of_analogRead:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           postinc0	equ	0xFEE
  3926                           wreg	equ	0xFE8
  3927                           postdec1	equ	0xFE5
  3928                           fsr1l	equ	0xFE1
  3929                           indf2	equ	0xFDF
  3930                           postinc2	equ	0xFDE
  3931                           postdec2	equ	0xFDD
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _showInterface *****************
  3937 ;; Defined at:
  3938 ;;		line 18 in file "interface.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;		None
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  run             2   16[BANK1 ] PTR int 
  3943 ;;		 -> readPastRun@data(14), 
  3944 ;;  n               2   14[BANK1 ] int 
  3945 ;;  key             1   18[BANK1 ] unsigned char 
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  1    wreg      void 
  3948 ;; Registers used:
  3949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;Total ram usage:        7 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    9
  3962 ;; This function calls:
  3963 ;;		_initRTC
  3964 ;;		_readPastRun
  3965 ;;		_showDateTime
  3966 ;;		_showErrorMessage
  3967 ;;		_showMainMenu
  3968 ;;		_showRunMenu
  3969 ;;		_showRunSelect
  3970 ;;		_showRunStats
  3971 ;;		_showRunTime
  3972 ;; This function is called by:
  3973 ;;		_main
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text5
  3978  00304A                     __ptext5:
  3979                           	opt stack 0
  3980  00304A                     _showInterface:
  3981                           	opt stack 21
  3982                           
  3983                           ;interface.c: 20: initRTC();
  3984                           
  3985                           ;incstack = 0
  3986  00304A  EC54  F020         	call	_initRTC	;wreg free
  3987  00304E                     l7471:
  3988                           
  3989                           ;interface.c: 23: showDateTime();
  3990  00304E  EC59  F014         	call	_showDateTime	;wreg free
  3991  003052                     l7473:
  3992                           
  3993                           ;interface.c: 26: key = showMainMenu();
  3994  003052  EC4A  F01E         	call	_showMainMenu	;wreg free
  3995  003056  0101               	movlb	1	; () banked
  3996  003058  6F12               	movwf	showInterface@key& (0+255),b
  3997                           
  3998                           ; BSR set to: 1
  3999                           ;interface.c: 28: if(key == 'C'){
  4000  00305A  0E43               	movlw	67
  4001  00305C  0101               	movlb	1	; () banked
  4002  00305E  1912               	xorwf	showInterface@key& (0+255),w,b
  4003  003060  A4D8               	btfss	status,2,c
  4004  003062  D04F               	goto	l7503
  4005                           
  4006                           ; BSR set to: 1
  4007                           ;interface.c: 30: int n = showRunSelect();
  4008  003064  EC64  F01D         	call	_showRunSelect	;wreg free
  4009  003068  0100               	movlb	0	; () banked
  4010  00306A  6FF9               	movwf	??_showInterface& (0+255),b
  4011  00306C  0100               	movlb	0	; () banked
  4012  00306E  51F9               	movf	??_showInterface& (0+255),w,b
  4013  003070  0101               	movlb	1	; () banked
  4014  003072  6F0E               	movwf	showInterface@n& (0+255),b
  4015  003074  6B0F               	clrf	(showInterface@n+1)& (0+255),b
  4016                           
  4017                           ; BSR set to: 1
  4018                           ;interface.c: 32: if(n == '*')continue;
  4019  003076  0E2A               	movlw	42
  4020  003078  0101               	movlb	1	; () banked
  4021  00307A  190E               	xorwf	showInterface@n& (0+255),w,b
  4022  00307C  0101               	movlb	1	; () banked
  4023  00307E  110F               	iorwf	(showInterface@n+1)& (0+255),w,b
  4024  003080  B4D8               	btfsc	status,2,c
  4025  003082  D7E7               	goto	l7473
  4026                           
  4027                           ; BSR set to: 1
  4028                           ;interface.c: 34: int* run = readPastRun( n - '1');
  4029                           
  4030                           ; BSR set to: 1
  4031                           
  4032                           ; BSR set to: 1
  4033  003084  0ECF               	movlw	207
  4034  003086  0101               	movlb	1	; () banked
  4035  003088  250E               	addwf	showInterface@n& (0+255),w,b
  4036  00308A  0100               	movlb	0	; () banked
  4037  00308C  6F80               	movwf	readPastRun@run& (0+255),b
  4038  00308E  0EFF               	movlw	255
  4039  003090  0101               	movlb	1	; () banked
  4040  003092  210F               	addwfc	(showInterface@n+1)& (0+255),w,b
  4041  003094  0100               	movlb	0	; () banked
  4042  003096  6F81               	movwf	(readPastRun@run+1)& (0+255),b
  4043  003098  ECBB  F01A         	call	_readPastRun	;wreg free
  4044  00309C  C080  F110         	movff	?_readPastRun,showInterface@run
  4045  0030A0  C081  F111         	movff	?_readPastRun+1,showInterface@run+1
  4046                           
  4047                           ;interface.c: 35: if(run[0] == 0xff){
  4048  0030A4  C110  FFD9         	movff	showInterface@run,fsr2l
  4049  0030A8  C111  FFDA         	movff	showInterface@run+1,fsr2h
  4050  0030AC  28DE               	incf	postinc2,w,c
  4051  0030AE  10DE               	iorwf	postinc2,w,c
  4052  0030B0  A4D8               	btfss	status,2,c
  4053  0030B2  D003               	goto	l7489
  4054                           
  4055                           ;interface.c: 36: showErrorMessage();
  4056  0030B4  EC84  F01F         	call	_showErrorMessage	;wreg free
  4057                           
  4058                           ;interface.c: 37: continue;
  4059  0030B8  D7CC               	goto	l7473
  4060  0030BA                     l7489:
  4061                           
  4062                           ;interface.c: 41: key = showRunMenu(n);
  4063  0030BA  0101               	movlb	1	; () banked
  4064  0030BC  510E               	movf	showInterface@n& (0+255),w,b
  4065  0030BE  EC96  F01D         	call	_showRunMenu
  4066  0030C2  0101               	movlb	1	; () banked
  4067  0030C4  6F12               	movwf	showInterface@key& (0+255),b
  4068                           
  4069                           ; BSR set to: 1
  4070                           ;interface.c: 43: if(key == 'A') showRunTime(run);
  4071  0030C6  0E41               	movlw	65
  4072  0030C8  0101               	movlb	1	; () banked
  4073  0030CA  1912               	xorwf	showInterface@key& (0+255),w,b
  4074  0030CC  A4D8               	btfss	status,2,c
  4075  0030CE  D007               	goto	l7495
  4076                           
  4077                           ; BSR set to: 1
  4078  0030D0  C110  F0EF         	movff	showInterface@run,showRunTime@run
  4079  0030D4  C111  F0F0         	movff	showInterface@run+1,showRunTime@run+1
  4080  0030D8  EC73  F010         	call	_showRunTime	;wreg free
  4081  0030DC  D7EE               	goto	l7489
  4082  0030DE                     l7495:
  4083                           
  4084                           ;interface.c: 44: else if(key == 'B') showRunStats(run);
  4085  0030DE  0E42               	movlw	66
  4086  0030E0  0101               	movlb	1	; () banked
  4087  0030E2  1912               	xorwf	showInterface@key& (0+255),w,b
  4088  0030E4  A4D8               	btfss	status,2,c
  4089  0030E6  D007               	goto	l7499
  4090                           
  4091                           ; BSR set to: 1
  4092  0030E8  C110  F0EF         	movff	showInterface@run,showRunStats@run
  4093  0030EC  C111  F0F0         	movff	showInterface@run+1,showRunStats@run+1
  4094  0030F0  EC67  F01A         	call	_showRunStats	;wreg free
  4095  0030F4  D7E2               	goto	l7489
  4096  0030F6                     l7499:
  4097                           
  4098                           ;interface.c: 45: else if(key == '*') break;
  4099  0030F6  0E2A               	movlw	42
  4100  0030F8  0101               	movlb	1	; () banked
  4101  0030FA  1912               	xorwf	showInterface@key& (0+255),w,b
  4102  0030FC  B4D8               	btfsc	status,2,c
  4103  0030FE  D7A9               	goto	l7473
  4104  003100  D7DC               	goto	l7489
  4105  003102                     l7503:
  4106                           
  4107                           ; BSR set to: 1
  4108                           ;interface.c: 49: else if(key == 'B') return;
  4109  003102  0E42               	movlw	66
  4110  003104  0101               	movlb	1	; () banked
  4111  003106  1912               	xorwf	showInterface@key& (0+255),w,b
  4112  003108  B4D8               	btfsc	status,2,c
  4113  00310A  0012               	return	
  4114                           
  4115                           ; BSR set to: 1
  4116                           ;interface.c: 50: else if(key == '*') break;
  4117                           
  4118                           ; BSR set to: 1
  4119                           
  4120                           ; BSR set to: 1
  4121                           
  4122                           ; BSR set to: 1
  4123  00310C  0E2A               	movlw	42
  4124  00310E  0101               	movlb	1	; () banked
  4125  003110  1912               	xorwf	showInterface@key& (0+255),w,b
  4126  003112  B4D8               	btfsc	status,2,c
  4127  003114  D79C               	goto	l7471
  4128  003116  D79D               	goto	l7473
  4129  003118                     __end_of_showInterface:
  4130                           	opt stack 0
  4131                           tblptru	equ	0xFF8
  4132                           tblptrh	equ	0xFF7
  4133                           tblptrl	equ	0xFF6
  4134                           tablat	equ	0xFF5
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           postdec1	equ	0xFE5
  4138                           fsr1l	equ	0xFE1
  4139                           indf2	equ	0xFDF
  4140                           postinc2	equ	0xFDE
  4141                           postdec2	equ	0xFDD
  4142                           fsr2h	equ	0xFDA
  4143                           fsr2l	equ	0xFD9
  4144                           status	equ	0xFD8
  4145                           
  4146 ;; *************** function _showRunTime *****************
  4147 ;; Defined at:
  4148 ;;		line 108 in file "interface.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  run             2  111[BANK0 ] PTR int 
  4151 ;;		 -> readPastRun@data(14), main@run(14), 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;  time            4    8[BANK1 ] long 
  4154 ;;  t2              2    6[BANK1 ] int 
  4155 ;;  t1              2    4[BANK1 ] int 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      unsigned char 
  4158 ;; Registers used:
  4159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4165 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Totals:         0       4      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;Total ram usage:       16 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    8
  4172 ;; This function calls:
  4173 ;;		___aldiv
  4174 ;;		___almod
  4175 ;;		_lcdClear
  4176 ;;		_printf
  4177 ;;		_readKeypad
  4178 ;; This function is called by:
  4179 ;;		_main
  4180 ;;		_showInterface
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           	psect	text6
  4185  0020E6                     __ptext6:
  4186                           	opt stack 0
  4187  0020E6                     _showRunTime:
  4188                           	opt stack 22
  4189                           
  4190                           ;interface.c: 109: int t1 = run[0], t2 = run[1];
  4191                           
  4192                           ; BSR set to: 1
  4193                           ;incstack = 0
  4194  0020E6  C0EF  FFD9         	movff	showRunTime@run,fsr2l
  4195  0020EA  C0F0  FFDA         	movff	showRunTime@run+1,fsr2h
  4196  0020EE  CFDE F104          	movff	postinc2,showRunTime@t1
  4197  0020F2  CFDD F105          	movff	postdec2,showRunTime@t1+1
  4198  0020F6  0100               	movlb	0	; () banked
  4199  0020F8  EE20 F002          	lfsr	2,2
  4200  0020FC  51EF               	movf	showRunTime@run& (0+255),w,b
  4201  0020FE  26D9               	addwf	fsr2l,f,c
  4202  002100  51F0               	movf	(showRunTime@run+1)& (0+255),w,b
  4203  002102  22DA               	addwfc	fsr2h,f,c
  4204  002104  CFDE F106          	movff	postinc2,showRunTime@t2
  4205  002108  CFDD F107          	movff	postdec2,showRunTime@t2+1
  4206                           
  4207                           ;interface.c: 110: long time = (t1<<8) + t2;
  4208  00210C  0101               	movlb	1	; () banked
  4209  00210E  5104               	movf	showRunTime@t1& (0+255),w,b
  4210  002110  0100               	movlb	0	; () banked
  4211  002112  6FF2               	movwf	(??_showRunTime+1)& (0+255),b
  4212  002114  6BF1               	clrf	??_showRunTime& (0+255),b
  4213  002116  0101               	movlb	1	; () banked
  4214  002118  5106               	movf	showRunTime@t2& (0+255),w,b
  4215  00211A  0100               	movlb	0	; () banked
  4216  00211C  27F1               	addwf	??_showRunTime& (0+255),f,b
  4217  00211E  0101               	movlb	1	; () banked
  4218  002120  5107               	movf	(showRunTime@t2+1)& (0+255),w,b
  4219  002122  0100               	movlb	0	; () banked
  4220  002124  23F2               	addwfc	(??_showRunTime+1)& (0+255),f,b
  4221  002126  C0F1  F108         	movff	??_showRunTime,showRunTime@time
  4222  00212A  C0F2  F109         	movff	??_showRunTime+1,showRunTime@time+1
  4223  00212E  0101               	movlb	1	; () banked
  4224  002130  0E00               	movlw	0
  4225  002132  BF09               	btfsc	(showRunTime@time+1)& (0+255),7,b
  4226  002134  0EFF               	movlw	-1
  4227  002136  6F0A               	movwf	(showRunTime@time+2)& (0+255),b
  4228  002138  6F0B               	movwf	(showRunTime@time+3)& (0+255),b
  4229                           
  4230                           ; BSR set to: 1
  4231                           ;interface.c: 112: lcdClear();
  4232  00213A  EC7B  F020         	call	_lcdClear	;wreg free
  4233                           
  4234                           ;interface.c: 113: printf("time %02ld:%02ld.%01ld\n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  4235  00213E  0E58               	movlw	88
  4236  002140  6E27               	movwf	___almod@divisor,c
  4237  002142  0E02               	movlw	2
  4238  002144  6E28               	movwf	___almod@divisor+1,c
  4239  002146  0E00               	movlw	0
  4240  002148  6E29               	movwf	___almod@divisor+2,c
  4241  00214A  0E00               	movlw	0
  4242  00214C  6E2A               	movwf	___almod@divisor+3,c
  4243  00214E  C108  F023         	movff	showRunTime@time,___almod@dividend
  4244  002152  C109  F024         	movff	showRunTime@time+1,___almod@dividend+1
  4245  002156  C10A  F025         	movff	showRunTime@time+2,___almod@dividend+2
  4246  00215A  C10B  F026         	movff	showRunTime@time+3,___almod@dividend+3
  4247  00215E  EC11  F01A         	call	___almod	;wreg free
  4248  002162  C023  F100         	movff	?___almod,_showRunTime$1419
  4249  002166  C024  F101         	movff	?___almod+1,_showRunTime$1419+1
  4250  00216A  C025  F102         	movff	?___almod+2,_showRunTime$1419+2
  4251  00216E  C026  F103         	movff	?___almod+3,_showRunTime$1419+3
  4252                           
  4253                           ;interface.c: 113: printf("time %02ld:%02ld.%01ld\n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  4254  002172  0E8D               	movlw	low STR_17
  4255  002174  0100               	movlb	0	; () banked
  4256  002176  6FBD               	movwf	printf@f& (0+255),b
  4257  002178  0EFE               	movlw	high STR_17
  4258  00217A  0100               	movlb	0	; () banked
  4259  00217C  6FBE               	movwf	(printf@f+1)& (0+255),b
  4260  00217E  C108  F02D         	movff	showRunTime@time,___aldiv@dividend
  4261  002182  C109  F02E         	movff	showRunTime@time+1,___aldiv@dividend+1
  4262  002186  C10A  F02F         	movff	showRunTime@time+2,___aldiv@dividend+2
  4263  00218A  C10B  F030         	movff	showRunTime@time+3,___aldiv@dividend+3
  4264  00218E  0E58               	movlw	88
  4265  002190  6E31               	movwf	___aldiv@divisor,c
  4266  002192  0E02               	movlw	2
  4267  002194  6E32               	movwf	___aldiv@divisor+1,c
  4268  002196  0E00               	movlw	0
  4269  002198  6E33               	movwf	___aldiv@divisor+2,c
  4270  00219A  0E00               	movlw	0
  4271  00219C  6E34               	movwf	___aldiv@divisor+3,c
  4272  00219E  EC8C  F018         	call	___aldiv	;wreg free
  4273  0021A2  C02D  F0BF         	movff	?___aldiv,?_printf+2
  4274  0021A6  C02E  F0C0         	movff	?___aldiv+1,?_printf+3
  4275  0021AA  C02F  F0C1         	movff	?___aldiv+2,?_printf+4
  4276  0021AE  C030  F0C2         	movff	?___aldiv+3,?_printf+5
  4277  0021B2  0E58               	movlw	88
  4278  0021B4  6E27               	movwf	___almod@divisor,c
  4279  0021B6  0E02               	movlw	2
  4280  0021B8  6E28               	movwf	___almod@divisor+1,c
  4281  0021BA  0E00               	movlw	0
  4282  0021BC  6E29               	movwf	___almod@divisor+2,c
  4283  0021BE  0E00               	movlw	0
  4284  0021C0  6E2A               	movwf	___almod@divisor+3,c
  4285  0021C2  C108  F023         	movff	showRunTime@time,___almod@dividend
  4286  0021C6  C109  F024         	movff	showRunTime@time+1,___almod@dividend+1
  4287  0021CA  C10A  F025         	movff	showRunTime@time+2,___almod@dividend+2
  4288  0021CE  C10B  F026         	movff	showRunTime@time+3,___almod@dividend+3
  4289  0021D2  EC11  F01A         	call	___almod	;wreg free
  4290  0021D6  C023  F02D         	movff	?___almod,___aldiv@dividend
  4291  0021DA  C024  F02E         	movff	?___almod+1,___aldiv@dividend+1
  4292  0021DE  C025  F02F         	movff	?___almod+2,___aldiv@dividend+2
  4293  0021E2  C026  F030         	movff	?___almod+3,___aldiv@dividend+3
  4294  0021E6  0E0A               	movlw	10
  4295  0021E8  6E31               	movwf	___aldiv@divisor,c
  4296  0021EA  0E00               	movlw	0
  4297  0021EC  6E32               	movwf	___aldiv@divisor+1,c
  4298  0021EE  0E00               	movlw	0
  4299  0021F0  6E33               	movwf	___aldiv@divisor+2,c
  4300  0021F2  0E00               	movlw	0
  4301  0021F4  6E34               	movwf	___aldiv@divisor+3,c
  4302  0021F6  EC8C  F018         	call	___aldiv	;wreg free
  4303  0021FA  C02D  F0C3         	movff	?___aldiv,?_printf+6
  4304  0021FE  C02E  F0C4         	movff	?___aldiv+1,?_printf+7
  4305  002202  C02F  F0C5         	movff	?___aldiv+2,?_printf+8
  4306  002206  C030  F0C6         	movff	?___aldiv+3,?_printf+9
  4307  00220A  C100  F023         	movff	_showRunTime$1419,___almod@dividend
  4308  00220E  C101  F024         	movff	_showRunTime$1419+1,___almod@dividend+1
  4309  002212  C102  F025         	movff	_showRunTime$1419+2,___almod@dividend+2
  4310  002216  C103  F026         	movff	_showRunTime$1419+3,___almod@dividend+3
  4311  00221A  0E0A               	movlw	10
  4312  00221C  6E27               	movwf	___almod@divisor,c
  4313  00221E  0E00               	movlw	0
  4314  002220  6E28               	movwf	___almod@divisor+1,c
  4315  002222  0E00               	movlw	0
  4316  002224  6E29               	movwf	___almod@divisor+2,c
  4317  002226  0E00               	movlw	0
  4318  002228  6E2A               	movwf	___almod@divisor+3,c
  4319  00222A  EC11  F01A         	call	___almod	;wreg free
  4320  00222E  C023  F0C7         	movff	?___almod,?_printf+10
  4321  002232  C024  F0C8         	movff	?___almod+1,?_printf+11
  4322  002236  C025  F0C9         	movff	?___almod+2,?_printf+12
  4323  00223A  C026  F0CA         	movff	?___almod+3,?_printf+13
  4324  00223E  EC09  F000         	call	_printf	;wreg free
  4325                           
  4326                           ;interface.c: 114: printf("              *>");
  4327  002242  0E54               	movlw	low STR_18
  4328  002244  0100               	movlb	0	; () banked
  4329  002246  6FBD               	movwf	printf@f& (0+255),b
  4330  002248  0EFF               	movlw	high STR_18
  4331  00224A  0100               	movlb	0	; () banked
  4332  00224C  6FBE               	movwf	(printf@f+1)& (0+255),b
  4333  00224E  EC09  F000         	call	_printf	;wreg free
  4334  002252                     l7301:
  4335  002252  ECAF  F01F         	call	_readKeypad	;wreg free
  4336  002256  0A2A               	xorlw	42
  4337  002258  B4D8               	btfsc	status,2,c
  4338  00225A  0012               	return	
  4339  00225C  D7FA               	goto	l7301
  4340  00225E                     __end_of_showRunTime:
  4341                           	opt stack 0
  4342                           tblptru	equ	0xFF8
  4343                           tblptrh	equ	0xFF7
  4344                           tblptrl	equ	0xFF6
  4345                           tablat	equ	0xFF5
  4346                           postinc0	equ	0xFEE
  4347                           wreg	equ	0xFE8
  4348                           postdec1	equ	0xFE5
  4349                           fsr1l	equ	0xFE1
  4350                           indf2	equ	0xFDF
  4351                           postinc2	equ	0xFDE
  4352                           postdec2	equ	0xFDD
  4353                           fsr2h	equ	0xFDA
  4354                           fsr2l	equ	0xFD9
  4355                           status	equ	0xFD8
  4356                           
  4357 ;; *************** function ___almod *****************
  4358 ;; Defined at:
  4359 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  dividend        4   34[COMRAM] long 
  4362 ;;  divisor         4   38[COMRAM] long 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  sign            1   43[COMRAM] unsigned char 
  4365 ;;  counter         1   42[COMRAM] unsigned char 
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  4   34[COMRAM] long 
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4375 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;Total ram usage:       10 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    3
  4382 ;; This function calls:
  4383 ;;		Nothing
  4384 ;; This function is called by:
  4385 ;;		_main
  4386 ;;		_showRunTime
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text7
  4391  003422                     __ptext7:
  4392                           	opt stack 0
  4393  003422                     ___almod:
  4394                           	opt stack 26
  4395                           
  4396                           ;incstack = 0
  4397  003422  0E00               	movlw	0
  4398  003424  6E2C               	movwf	___almod@sign,c
  4399  003426  AE26               	btfss	___almod@dividend+3,7,c
  4400  003428  D00A               	goto	l7183
  4401  00342A  1E26               	comf	___almod@dividend+3,f,c
  4402  00342C  1E25               	comf	___almod@dividend+2,f,c
  4403  00342E  1E24               	comf	___almod@dividend+1,f,c
  4404  003430  6C23               	negf	___almod@dividend,c
  4405  003432  0E00               	movlw	0
  4406  003434  2224               	addwfc	___almod@dividend+1,f,c
  4407  003436  2225               	addwfc	___almod@dividend+2,f,c
  4408  003438  2226               	addwfc	___almod@dividend+3,f,c
  4409  00343A  0E01               	movlw	1
  4410  00343C  6E2C               	movwf	___almod@sign,c
  4411  00343E                     l7183:
  4412  00343E  AE2A               	btfss	___almod@divisor+3,7,c
  4413  003440  D008               	goto	l7187
  4414  003442  1E2A               	comf	___almod@divisor+3,f,c
  4415  003444  1E29               	comf	___almod@divisor+2,f,c
  4416  003446  1E28               	comf	___almod@divisor+1,f,c
  4417  003448  6C27               	negf	___almod@divisor,c
  4418  00344A  0E00               	movlw	0
  4419  00344C  2228               	addwfc	___almod@divisor+1,f,c
  4420  00344E  2229               	addwfc	___almod@divisor+2,f,c
  4421  003450  222A               	addwfc	___almod@divisor+3,f,c
  4422  003452                     l7187:
  4423  003452  5027               	movf	___almod@divisor,w,c
  4424  003454  1028               	iorwf	___almod@divisor+1,w,c
  4425  003456  1029               	iorwf	___almod@divisor+2,w,c
  4426  003458  102A               	iorwf	___almod@divisor+3,w,c
  4427  00345A  B4D8               	btfsc	status,2,c
  4428  00345C  D024               	goto	l7203
  4429  00345E  0E01               	movlw	1
  4430  003460  6E2B               	movwf	___almod@counter,c
  4431  003462  D006               	goto	l7193
  4432  003464                     l7191:
  4433  003464  90D8               	bcf	status,0,c
  4434  003466  3627               	rlcf	___almod@divisor,f,c
  4435  003468  3628               	rlcf	___almod@divisor+1,f,c
  4436  00346A  3629               	rlcf	___almod@divisor+2,f,c
  4437  00346C  362A               	rlcf	___almod@divisor+3,f,c
  4438  00346E  2A2B               	incf	___almod@counter,f,c
  4439  003470                     l7193:
  4440  003470  AE2A               	btfss	___almod@divisor+3,7,c
  4441  003472  D7F8               	goto	l7191
  4442  003474                     l7195:
  4443  003474  5027               	movf	___almod@divisor,w,c
  4444  003476  5C23               	subwf	___almod@dividend,w,c
  4445  003478  5028               	movf	___almod@divisor+1,w,c
  4446  00347A  5824               	subwfb	___almod@dividend+1,w,c
  4447  00347C  5029               	movf	___almod@divisor+2,w,c
  4448  00347E  5825               	subwfb	___almod@dividend+2,w,c
  4449  003480  502A               	movf	___almod@divisor+3,w,c
  4450  003482  5826               	subwfb	___almod@dividend+3,w,c
  4451  003484  A0D8               	btfss	status,0,c
  4452  003486  D008               	goto	l7199
  4453  003488  5027               	movf	___almod@divisor,w,c
  4454  00348A  5E23               	subwf	___almod@dividend,f,c
  4455  00348C  5028               	movf	___almod@divisor+1,w,c
  4456  00348E  5A24               	subwfb	___almod@dividend+1,f,c
  4457  003490  5029               	movf	___almod@divisor+2,w,c
  4458  003492  5A25               	subwfb	___almod@dividend+2,f,c
  4459  003494  502A               	movf	___almod@divisor+3,w,c
  4460  003496  5A26               	subwfb	___almod@dividend+3,f,c
  4461  003498                     l7199:
  4462  003498  90D8               	bcf	status,0,c
  4463  00349A  322A               	rrcf	___almod@divisor+3,f,c
  4464  00349C  3229               	rrcf	___almod@divisor+2,f,c
  4465  00349E  3228               	rrcf	___almod@divisor+1,f,c
  4466  0034A0  3227               	rrcf	___almod@divisor,f,c
  4467  0034A2  2E2B               	decfsz	___almod@counter,f,c
  4468  0034A4  D7E7               	goto	l7195
  4469  0034A6                     l7203:
  4470  0034A6  502C               	movf	___almod@sign,w,c
  4471  0034A8  B4D8               	btfsc	status,2,c
  4472  0034AA  D008               	goto	l7207
  4473  0034AC  1E26               	comf	___almod@dividend+3,f,c
  4474  0034AE  1E25               	comf	___almod@dividend+2,f,c
  4475  0034B0  1E24               	comf	___almod@dividend+1,f,c
  4476  0034B2  6C23               	negf	___almod@dividend,c
  4477  0034B4  0E00               	movlw	0
  4478  0034B6  2224               	addwfc	___almod@dividend+1,f,c
  4479  0034B8  2225               	addwfc	___almod@dividend+2,f,c
  4480  0034BA  2226               	addwfc	___almod@dividend+3,f,c
  4481  0034BC                     l7207:
  4482  0034BC  C023  F023         	movff	___almod@dividend,?___almod
  4483  0034C0  C024  F024         	movff	___almod@dividend+1,?___almod+1
  4484  0034C4  C025  F025         	movff	___almod@dividend+2,?___almod+2
  4485  0034C8  C026  F026         	movff	___almod@dividend+3,?___almod+3
  4486  0034CC  0012               	return	
  4487  0034CE                     __end_of___almod:
  4488                           	opt stack 0
  4489                           tblptru	equ	0xFF8
  4490                           tblptrh	equ	0xFF7
  4491                           tblptrl	equ	0xFF6
  4492                           tablat	equ	0xFF5
  4493                           postinc0	equ	0xFEE
  4494                           wreg	equ	0xFE8
  4495                           postdec1	equ	0xFE5
  4496                           fsr1l	equ	0xFE1
  4497                           indf2	equ	0xFDF
  4498                           postinc2	equ	0xFDE
  4499                           postdec2	equ	0xFDD
  4500                           fsr2h	equ	0xFDA
  4501                           fsr2l	equ	0xFD9
  4502                           status	equ	0xFD8
  4503                           
  4504 ;; *************** function ___aldiv *****************
  4505 ;; Defined at:
  4506 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  dividend        4   44[COMRAM] long 
  4509 ;;  divisor         4   48[COMRAM] long 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  quotient        4   54[COMRAM] long 
  4512 ;;  sign            1   53[COMRAM] unsigned char 
  4513 ;;  counter         1   52[COMRAM] unsigned char 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  4   44[COMRAM] long 
  4516 ;; Registers used:
  4517 ;;		wreg, status,2, status,0
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:       14 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    3
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_main
  4534 ;;		_showRunTime
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text8
  4539  003118                     __ptext8:
  4540                           	opt stack 0
  4541  003118                     ___aldiv:
  4542                           	opt stack 26
  4543                           
  4544                           ;incstack = 0
  4545  003118  0E00               	movlw	0
  4546  00311A  6E36               	movwf	___aldiv@sign,c
  4547  00311C  AE34               	btfss	___aldiv@divisor+3,7,c
  4548  00311E  D00A               	goto	l7139
  4549  003120  1E34               	comf	___aldiv@divisor+3,f,c
  4550  003122  1E33               	comf	___aldiv@divisor+2,f,c
  4551  003124  1E32               	comf	___aldiv@divisor+1,f,c
  4552  003126  6C31               	negf	___aldiv@divisor,c
  4553  003128  0E00               	movlw	0
  4554  00312A  2232               	addwfc	___aldiv@divisor+1,f,c
  4555  00312C  2233               	addwfc	___aldiv@divisor+2,f,c
  4556  00312E  2234               	addwfc	___aldiv@divisor+3,f,c
  4557  003130  0E01               	movlw	1
  4558  003132  6E36               	movwf	___aldiv@sign,c
  4559  003134                     l7139:
  4560  003134  AE30               	btfss	___aldiv@dividend+3,7,c
  4561  003136  D00A               	goto	l7145
  4562  003138  1E30               	comf	___aldiv@dividend+3,f,c
  4563  00313A  1E2F               	comf	___aldiv@dividend+2,f,c
  4564  00313C  1E2E               	comf	___aldiv@dividend+1,f,c
  4565  00313E  6C2D               	negf	___aldiv@dividend,c
  4566  003140  0E00               	movlw	0
  4567  003142  222E               	addwfc	___aldiv@dividend+1,f,c
  4568  003144  222F               	addwfc	___aldiv@dividend+2,f,c
  4569  003146  2230               	addwfc	___aldiv@dividend+3,f,c
  4570  003148  0E01               	movlw	1
  4571  00314A  1A36               	xorwf	___aldiv@sign,f,c
  4572  00314C                     l7145:
  4573  00314C  0E00               	movlw	0
  4574  00314E  6E37               	movwf	___aldiv@quotient,c
  4575  003150  0E00               	movlw	0
  4576  003152  6E38               	movwf	___aldiv@quotient+1,c
  4577  003154  0E00               	movlw	0
  4578  003156  6E39               	movwf	___aldiv@quotient+2,c
  4579  003158  0E00               	movlw	0
  4580  00315A  6E3A               	movwf	___aldiv@quotient+3,c
  4581  00315C  5031               	movf	___aldiv@divisor,w,c
  4582  00315E  1032               	iorwf	___aldiv@divisor+1,w,c
  4583  003160  1033               	iorwf	___aldiv@divisor+2,w,c
  4584  003162  1034               	iorwf	___aldiv@divisor+3,w,c
  4585  003164  B4D8               	btfsc	status,2,c
  4586  003166  D02A               	goto	l7167
  4587  003168  0E01               	movlw	1
  4588  00316A  6E35               	movwf	___aldiv@counter,c
  4589  00316C  D006               	goto	l7153
  4590  00316E                     l7151:
  4591  00316E  90D8               	bcf	status,0,c
  4592  003170  3631               	rlcf	___aldiv@divisor,f,c
  4593  003172  3632               	rlcf	___aldiv@divisor+1,f,c
  4594  003174  3633               	rlcf	___aldiv@divisor+2,f,c
  4595  003176  3634               	rlcf	___aldiv@divisor+3,f,c
  4596  003178  2A35               	incf	___aldiv@counter,f,c
  4597  00317A                     l7153:
  4598  00317A  AE34               	btfss	___aldiv@divisor+3,7,c
  4599  00317C  D7F8               	goto	l7151
  4600  00317E                     l7155:
  4601  00317E  90D8               	bcf	status,0,c
  4602  003180  3637               	rlcf	___aldiv@quotient,f,c
  4603  003182  3638               	rlcf	___aldiv@quotient+1,f,c
  4604  003184  3639               	rlcf	___aldiv@quotient+2,f,c
  4605  003186  363A               	rlcf	___aldiv@quotient+3,f,c
  4606  003188  5031               	movf	___aldiv@divisor,w,c
  4607  00318A  5C2D               	subwf	___aldiv@dividend,w,c
  4608  00318C  5032               	movf	___aldiv@divisor+1,w,c
  4609  00318E  582E               	subwfb	___aldiv@dividend+1,w,c
  4610  003190  5033               	movf	___aldiv@divisor+2,w,c
  4611  003192  582F               	subwfb	___aldiv@dividend+2,w,c
  4612  003194  5034               	movf	___aldiv@divisor+3,w,c
  4613  003196  5830               	subwfb	___aldiv@dividend+3,w,c
  4614  003198  A0D8               	btfss	status,0,c
  4615  00319A  D009               	goto	l7163
  4616  00319C  5031               	movf	___aldiv@divisor,w,c
  4617  00319E  5E2D               	subwf	___aldiv@dividend,f,c
  4618  0031A0  5032               	movf	___aldiv@divisor+1,w,c
  4619  0031A2  5A2E               	subwfb	___aldiv@dividend+1,f,c
  4620  0031A4  5033               	movf	___aldiv@divisor+2,w,c
  4621  0031A6  5A2F               	subwfb	___aldiv@dividend+2,f,c
  4622  0031A8  5034               	movf	___aldiv@divisor+3,w,c
  4623  0031AA  5A30               	subwfb	___aldiv@dividend+3,f,c
  4624  0031AC  8037               	bsf	___aldiv@quotient,0,c
  4625  0031AE                     l7163:
  4626  0031AE  90D8               	bcf	status,0,c
  4627  0031B0  3234               	rrcf	___aldiv@divisor+3,f,c
  4628  0031B2  3233               	rrcf	___aldiv@divisor+2,f,c
  4629  0031B4  3232               	rrcf	___aldiv@divisor+1,f,c
  4630  0031B6  3231               	rrcf	___aldiv@divisor,f,c
  4631  0031B8  2E35               	decfsz	___aldiv@counter,f,c
  4632  0031BA  D7E1               	goto	l7155
  4633  0031BC                     l7167:
  4634  0031BC  5036               	movf	___aldiv@sign,w,c
  4635  0031BE  B4D8               	btfsc	status,2,c
  4636  0031C0  D008               	goto	l7171
  4637  0031C2  1E3A               	comf	___aldiv@quotient+3,f,c
  4638  0031C4  1E39               	comf	___aldiv@quotient+2,f,c
  4639  0031C6  1E38               	comf	___aldiv@quotient+1,f,c
  4640  0031C8  6C37               	negf	___aldiv@quotient,c
  4641  0031CA  0E00               	movlw	0
  4642  0031CC  2238               	addwfc	___aldiv@quotient+1,f,c
  4643  0031CE  2239               	addwfc	___aldiv@quotient+2,f,c
  4644  0031D0  223A               	addwfc	___aldiv@quotient+3,f,c
  4645  0031D2                     l7171:
  4646  0031D2  C037  F02D         	movff	___aldiv@quotient,?___aldiv
  4647  0031D6  C038  F02E         	movff	___aldiv@quotient+1,?___aldiv+1
  4648  0031DA  C039  F02F         	movff	___aldiv@quotient+2,?___aldiv+2
  4649  0031DE  C03A  F030         	movff	___aldiv@quotient+3,?___aldiv+3
  4650  0031E2  0012               	return	
  4651  0031E4                     __end_of___aldiv:
  4652                           	opt stack 0
  4653                           tblptru	equ	0xFF8
  4654                           tblptrh	equ	0xFF7
  4655                           tblptrl	equ	0xFF6
  4656                           tablat	equ	0xFF5
  4657                           postinc0	equ	0xFEE
  4658                           wreg	equ	0xFE8
  4659                           postdec1	equ	0xFE5
  4660                           fsr1l	equ	0xFE1
  4661                           indf2	equ	0xFDF
  4662                           postinc2	equ	0xFDE
  4663                           postdec2	equ	0xFDD
  4664                           fsr2h	equ	0xFDA
  4665                           fsr2l	equ	0xFD9
  4666                           status	equ	0xFD8
  4667                           
  4668 ;; *************** function _showRunStats *****************
  4669 ;; Defined at:
  4670 ;;		line 119 in file "interface.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;  run             2  111[BANK0 ] PTR int 
  4673 ;;		 -> readPastRun@data(14), main@run(14), 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;  n_OTHER         2  119[BANK0 ] int 
  4676 ;;  n_C             2  117[BANK0 ] int 
  4677 ;;  n_9V            2  115[BANK0 ] int 
  4678 ;;  n_AA            2  113[BANK0 ] int 
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  1    wreg      unsigned char 
  4681 ;; Registers used:
  4682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4688 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;Total ram usage:       10 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    8
  4695 ;; This function calls:
  4696 ;;		_lcdClear
  4697 ;;		_printf
  4698 ;;		_readKeypad
  4699 ;; This function is called by:
  4700 ;;		_main
  4701 ;;		_showInterface
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text9
  4706  0034CE                     __ptext9:
  4707                           	opt stack 0
  4708  0034CE                     _showRunStats:
  4709                           	opt stack 22
  4710                           
  4711                           ;interface.c: 120: int n_AA = run[2], n_9V = run[3], n_C = run[4], n_OTHER = run[5];
  4712                           
  4713                           ;incstack = 0
  4714  0034CE  0100               	movlb	0	; () banked
  4715  0034D0  EE20 F004          	lfsr	2,4
  4716  0034D4  51EF               	movf	showRunStats@run& (0+255),w,b
  4717  0034D6  26D9               	addwf	fsr2l,f,c
  4718  0034D8  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4719  0034DA  22DA               	addwfc	fsr2h,f,c
  4720  0034DC  CFDE F0F1          	movff	postinc2,showRunStats@n_AA
  4721  0034E0  CFDD F0F2          	movff	postdec2,showRunStats@n_AA+1
  4722  0034E4  0100               	movlb	0	; () banked
  4723  0034E6  EE20 F006          	lfsr	2,6
  4724  0034EA  51EF               	movf	showRunStats@run& (0+255),w,b
  4725  0034EC  26D9               	addwf	fsr2l,f,c
  4726  0034EE  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4727  0034F0  22DA               	addwfc	fsr2h,f,c
  4728  0034F2  CFDE F0F3          	movff	postinc2,showRunStats@n_9V
  4729  0034F6  CFDD F0F4          	movff	postdec2,showRunStats@n_9V+1
  4730  0034FA  0100               	movlb	0	; () banked
  4731  0034FC  EE20 F008          	lfsr	2,8
  4732  003500  51EF               	movf	showRunStats@run& (0+255),w,b
  4733  003502  26D9               	addwf	fsr2l,f,c
  4734  003504  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4735  003506  22DA               	addwfc	fsr2h,f,c
  4736  003508  CFDE F0F5          	movff	postinc2,showRunStats@n_C
  4737  00350C  CFDD F0F6          	movff	postdec2,showRunStats@n_C+1
  4738  003510  0100               	movlb	0	; () banked
  4739  003512  EE20 F00A          	lfsr	2,10
  4740  003516  51EF               	movf	showRunStats@run& (0+255),w,b
  4741  003518  26D9               	addwf	fsr2l,f,c
  4742  00351A  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4743  00351C  22DA               	addwfc	fsr2h,f,c
  4744  00351E  CFDE F0F7          	movff	postinc2,showRunStats@n_OTHER
  4745  003522  CFDD F0F8          	movff	postdec2,showRunStats@n_OTHER+1
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;interface.c: 122: lcdClear();
  4749  003526  EC7B  F020         	call	_lcdClear	;wreg free
  4750                           
  4751                           ;interface.c: 123: printf("[AA,9V,C,other] \n");
  4752  00352A  0E31               	movlw	low STR_19
  4753  00352C  0100               	movlb	0	; () banked
  4754  00352E  6FBD               	movwf	printf@f& (0+255),b
  4755  003530  0EFF               	movlw	high STR_19
  4756  003532  0100               	movlb	0	; () banked
  4757  003534  6FBE               	movwf	(printf@f+1)& (0+255),b
  4758  003536  EC09  F000         	call	_printf	;wreg free
  4759                           
  4760                           ;interface.c: 124: printf("[%d,%d,%d,%d]   *>",n_AA,n_9V,n_C,n_OTHER);
  4761  00353A  0EFA               	movlw	low STR_20
  4762  00353C  0100               	movlb	0	; () banked
  4763  00353E  6FBD               	movwf	printf@f& (0+255),b
  4764  003540  0EFE               	movlw	high STR_20
  4765  003542  0100               	movlb	0	; () banked
  4766  003544  6FBE               	movwf	(printf@f+1)& (0+255),b
  4767  003546  C0F1  F0BF         	movff	showRunStats@n_AA,?_printf+2
  4768  00354A  C0F2  F0C0         	movff	showRunStats@n_AA+1,?_printf+3
  4769  00354E  C0F3  F0C1         	movff	showRunStats@n_9V,?_printf+4
  4770  003552  C0F4  F0C2         	movff	showRunStats@n_9V+1,?_printf+5
  4771  003556  C0F5  F0C3         	movff	showRunStats@n_C,?_printf+6
  4772  00355A  C0F6  F0C4         	movff	showRunStats@n_C+1,?_printf+7
  4773  00355E  C0F7  F0C5         	movff	showRunStats@n_OTHER,?_printf+8
  4774  003562  C0F8  F0C6         	movff	showRunStats@n_OTHER+1,?_printf+9
  4775  003566  EC09  F000         	call	_printf	;wreg free
  4776  00356A                     l7311:
  4777  00356A  ECAF  F01F         	call	_readKeypad	;wreg free
  4778  00356E  0A2A               	xorlw	42
  4779  003570  B4D8               	btfsc	status,2,c
  4780  003572  0012               	return	
  4781  003574  D7FA               	goto	l7311
  4782  003576                     __end_of_showRunStats:
  4783                           	opt stack 0
  4784                           tblptru	equ	0xFF8
  4785                           tblptrh	equ	0xFF7
  4786                           tblptrl	equ	0xFF6
  4787                           tablat	equ	0xFF5
  4788                           postinc0	equ	0xFEE
  4789                           wreg	equ	0xFE8
  4790                           postdec1	equ	0xFE5
  4791                           fsr1l	equ	0xFE1
  4792                           indf2	equ	0xFDF
  4793                           postinc2	equ	0xFDE
  4794                           postdec2	equ	0xFDD
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799 ;; *************** function _showRunSelect *****************
  4800 ;; Defined at:
  4801 ;;		line 86 in file "interface.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;		None
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  k               1  111[BANK0 ] unsigned char 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      unsigned char 
  4808 ;; Registers used:
  4809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;Total ram usage:        1 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    8
  4822 ;; This function calls:
  4823 ;;		_lcdClear
  4824 ;;		_printf
  4825 ;;		_readKeypad
  4826 ;; This function is called by:
  4827 ;;		_showInterface
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           	psect	text10
  4832  003AC8                     __ptext10:
  4833                           	opt stack 0
  4834  003AC8                     _showRunSelect:
  4835                           	opt stack 21
  4836                           
  4837                           ;interface.c: 87: lcdClear();
  4838                           
  4839                           ;incstack = 0
  4840  003AC8  EC7B  F020         	call	_lcdClear	;wreg free
  4841                           
  4842                           ;interface.c: 88: printf("select run:     \n");
  4843  003ACC  0E1F               	movlw	low STR_13
  4844  003ACE  0100               	movlb	0	; () banked
  4845  003AD0  6FBD               	movwf	printf@f& (0+255),b
  4846  003AD2  0EFF               	movlw	high STR_13
  4847  003AD4  0100               	movlb	0	; () banked
  4848  003AD6  6FBE               	movwf	(printf@f+1)& (0+255),b
  4849  003AD8  EC09  F000         	call	_printf	;wreg free
  4850                           
  4851                           ;interface.c: 89: printf("[1,2,3,4]     *>");
  4852  003ADC  0E65               	movlw	low STR_14
  4853  003ADE  0100               	movlb	0	; () banked
  4854  003AE0  6FBD               	movwf	printf@f& (0+255),b
  4855  003AE2  0EFF               	movlw	high STR_14
  4856  003AE4  0100               	movlb	0	; () banked
  4857  003AE6  6FBE               	movwf	(printf@f+1)& (0+255),b
  4858  003AE8  EC09  F000         	call	_printf	;wreg free
  4859  003AEC                     l7413:
  4860  003AEC  ECAF  F01F         	call	_readKeypad	;wreg free
  4861  003AF0  0100               	movlb	0	; () banked
  4862  003AF2  6FEF               	movwf	showRunSelect@k& (0+255),b
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;interface.c: 93: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  4866  003AF4  0E31               	movlw	49
  4867  003AF6  0100               	movlb	0	; () banked
  4868  003AF8  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  4869  003AFA  B4D8               	btfsc	status,2,c
  4870  003AFC  D014               	goto	l7425
  4871                           
  4872                           ; BSR set to: 0
  4873  003AFE  0E32               	movlw	50
  4874  003B00  0100               	movlb	0	; () banked
  4875  003B02  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  4876  003B04  B4D8               	btfsc	status,2,c
  4877  003B06  D00F               	goto	l7425
  4878                           
  4879                           ; BSR set to: 0
  4880  003B08  0E33               	movlw	51
  4881  003B0A  0100               	movlb	0	; () banked
  4882  003B0C  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  4883  003B0E  B4D8               	btfsc	status,2,c
  4884  003B10  D00A               	goto	l7425
  4885                           
  4886                           ; BSR set to: 0
  4887  003B12  0E34               	movlw	52
  4888  003B14  0100               	movlb	0	; () banked
  4889  003B16  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  4890  003B18  B4D8               	btfsc	status,2,c
  4891  003B1A  D005               	goto	l7425
  4892                           
  4893                           ; BSR set to: 0
  4894  003B1C  0E2A               	movlw	42
  4895  003B1E  0100               	movlb	0	; () banked
  4896  003B20  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  4897  003B22  A4D8               	btfss	status,2,c
  4898  003B24  D7E3               	goto	l7413
  4899  003B26                     l7425:
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;interface.c: 94: return k;
  4903  003B26  0100               	movlb	0	; () banked
  4904  003B28  51EF               	movf	showRunSelect@k& (0+255),w,b
  4905  003B2A  0012               	return	
  4906  003B2C                     __end_of_showRunSelect:
  4907                           	opt stack 0
  4908                           tblptru	equ	0xFF8
  4909                           tblptrh	equ	0xFF7
  4910                           tblptrl	equ	0xFF6
  4911                           tablat	equ	0xFF5
  4912                           postinc0	equ	0xFEE
  4913                           wreg	equ	0xFE8
  4914                           postdec1	equ	0xFE5
  4915                           fsr1l	equ	0xFE1
  4916                           indf2	equ	0xFDF
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           fsr2h	equ	0xFDA
  4920                           fsr2l	equ	0xFD9
  4921                           status	equ	0xFD8
  4922                           
  4923 ;; *************** function _showRunMenu *****************
  4924 ;; Defined at:
  4925 ;;		line 97 in file "interface.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  key             1    wreg     unsigned char 
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;  key             1  111[BANK0 ] unsigned char 
  4930 ;;  k               1  112[BANK0 ] unsigned char 
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      unsigned char 
  4933 ;; Registers used:
  4934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;Total ram usage:        2 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    8
  4947 ;; This function calls:
  4948 ;;		_lcdClear
  4949 ;;		_printf
  4950 ;;		_readKeypad
  4951 ;; This function is called by:
  4952 ;;		_showInterface
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	text11
  4957  003B2C                     __ptext11:
  4958                           	opt stack 0
  4959  003B2C                     _showRunMenu:
  4960                           	opt stack 21
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;incstack = 0
  4964                           ;showRunMenu@key stored from wreg
  4965  003B2C  0100               	movlb	0	; () banked
  4966  003B2E  6FEF               	movwf	showRunMenu@key& (0+255),b
  4967                           
  4968                           ;interface.c: 98: lcdClear();
  4969  003B30  EC7B  F020         	call	_lcdClear	;wreg free
  4970                           
  4971                           ;interface.c: 99: printf("%c) time  <A     \n",key);
  4972  003B34  0EE7               	movlw	low STR_15
  4973  003B36  0100               	movlb	0	; () banked
  4974  003B38  6FBD               	movwf	printf@f& (0+255),b
  4975  003B3A  0EFE               	movlw	high STR_15
  4976  003B3C  0100               	movlb	0	; () banked
  4977  003B3E  6FBE               	movwf	(printf@f+1)& (0+255),b
  4978  003B40  C0EF  F0BF         	movff	showRunMenu@key,?_printf+2
  4979  003B44  0100               	movlb	0	; () banked
  4980  003B46  6BC0               	clrf	(?_printf+3)& (0+255),b
  4981  003B48  EC09  F000         	call	_printf	;wreg free
  4982                           
  4983                           ;interface.c: 100: printf( "   stats <B   *>");
  4984  003B4C  0E87               	movlw	low STR_16
  4985  003B4E  0100               	movlb	0	; () banked
  4986  003B50  6FBD               	movwf	printf@f& (0+255),b
  4987  003B52  0EFF               	movlw	high STR_16
  4988  003B54  0100               	movlb	0	; () banked
  4989  003B56  6FBE               	movwf	(printf@f+1)& (0+255),b
  4990  003B58  EC09  F000         	call	_printf	;wreg free
  4991  003B5C                     l7443:
  4992  003B5C  ECAF  F01F         	call	_readKeypad	;wreg free
  4993  003B60  0100               	movlb	0	; () banked
  4994  003B62  6FF0               	movwf	showRunMenu@k& (0+255),b
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;interface.c: 104: while(k != 'A' && k != 'B' && k != '*');
  4998  003B64  0E41               	movlw	65
  4999  003B66  0100               	movlb	0	; () banked
  5000  003B68  19F0               	xorwf	showRunMenu@k& (0+255),w,b
  5001  003B6A  B4D8               	btfsc	status,2,c
  5002  003B6C  D00A               	goto	l7451
  5003                           
  5004                           ; BSR set to: 0
  5005  003B6E  0E42               	movlw	66
  5006  003B70  0100               	movlb	0	; () banked
  5007  003B72  19F0               	xorwf	showRunMenu@k& (0+255),w,b
  5008  003B74  B4D8               	btfsc	status,2,c
  5009  003B76  D005               	goto	l7451
  5010                           
  5011                           ; BSR set to: 0
  5012  003B78  0E2A               	movlw	42
  5013  003B7A  0100               	movlb	0	; () banked
  5014  003B7C  19F0               	xorwf	showRunMenu@k& (0+255),w,b
  5015  003B7E  A4D8               	btfss	status,2,c
  5016  003B80  D7ED               	goto	l7443
  5017  003B82                     l7451:
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;interface.c: 105: return k;
  5021  003B82  0100               	movlb	0	; () banked
  5022  003B84  51F0               	movf	showRunMenu@k& (0+255),w,b
  5023  003B86  0012               	return	
  5024  003B88                     __end_of_showRunMenu:
  5025                           	opt stack 0
  5026                           tblptru	equ	0xFF8
  5027                           tblptrh	equ	0xFF7
  5028                           tblptrl	equ	0xFF6
  5029                           tablat	equ	0xFF5
  5030                           postinc0	equ	0xFEE
  5031                           wreg	equ	0xFE8
  5032                           postdec1	equ	0xFE5
  5033                           fsr1l	equ	0xFE1
  5034                           indf2	equ	0xFDF
  5035                           postinc2	equ	0xFDE
  5036                           postdec2	equ	0xFDD
  5037                           fsr2h	equ	0xFDA
  5038                           fsr2l	equ	0xFD9
  5039                           status	equ	0xFD8
  5040                           
  5041 ;; *************** function _showMainMenu *****************
  5042 ;; Defined at:
  5043 ;;		line 75 in file "interface.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;		None
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  k               1  111[BANK0 ] unsigned char 
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  1    wreg      unsigned char 
  5050 ;; Registers used:
  5051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;Total ram usage:        1 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; Hardware stack levels required when called:    8
  5064 ;; This function calls:
  5065 ;;		_lcdClear
  5066 ;;		_printf
  5067 ;;		_readKeypad
  5068 ;; This function is called by:
  5069 ;;		_showInterface
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text12
  5074  003C94                     __ptext12:
  5075                           	opt stack 0
  5076  003C94                     _showMainMenu:
  5077                           	opt stack 21
  5078                           
  5079                           ;interface.c: 76: lcdClear();
  5080                           
  5081                           ; BSR set to: 0
  5082                           ;incstack = 0
  5083  003C94  EC7B  F020         	call	_lcdClear	;wreg free
  5084                           
  5085                           ;interface.c: 77: printf("start   <B      \n");
  5086  003C98  0E0D               	movlw	low STR_11
  5087  003C9A  0100               	movlb	0	; () banked
  5088  003C9C  6FBD               	movwf	printf@f& (0+255),b
  5089  003C9E  0EFF               	movlw	high STR_11
  5090  003CA0  0100               	movlb	0	; () banked
  5091  003CA2  6FBE               	movwf	(printf@f+1)& (0+255),b
  5092  003CA4  EC09  F000         	call	_printf	;wreg free
  5093                           
  5094                           ;interface.c: 78: printf("history <C    *>");
  5095  003CA8  0E76               	movlw	low STR_12
  5096  003CAA  0100               	movlb	0	; () banked
  5097  003CAC  6FBD               	movwf	printf@f& (0+255),b
  5098  003CAE  0EFF               	movlw	high STR_12
  5099  003CB0  0100               	movlb	0	; () banked
  5100  003CB2  6FBE               	movwf	(printf@f+1)& (0+255),b
  5101  003CB4  EC09  F000         	call	_printf	;wreg free
  5102  003CB8                     l7395:
  5103  003CB8  ECAF  F01F         	call	_readKeypad	;wreg free
  5104  003CBC  0100               	movlb	0	; () banked
  5105  003CBE  6FEF               	movwf	showMainMenu@k& (0+255),b
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;interface.c: 82: while(k != 'B' && k != 'C' && k != '*');
  5109  003CC0  0E42               	movlw	66
  5110  003CC2  0100               	movlb	0	; () banked
  5111  003CC4  19EF               	xorwf	showMainMenu@k& (0+255),w,b
  5112  003CC6  B4D8               	btfsc	status,2,c
  5113  003CC8  D00A               	goto	l7403
  5114                           
  5115                           ; BSR set to: 0
  5116  003CCA  0E43               	movlw	67
  5117  003CCC  0100               	movlb	0	; () banked
  5118  003CCE  19EF               	xorwf	showMainMenu@k& (0+255),w,b
  5119  003CD0  B4D8               	btfsc	status,2,c
  5120  003CD2  D005               	goto	l7403
  5121                           
  5122                           ; BSR set to: 0
  5123  003CD4  0E2A               	movlw	42
  5124  003CD6  0100               	movlb	0	; () banked
  5125  003CD8  19EF               	xorwf	showMainMenu@k& (0+255),w,b
  5126  003CDA  A4D8               	btfss	status,2,c
  5127  003CDC  D7ED               	goto	l7395
  5128  003CDE                     l7403:
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;interface.c: 83: return k;
  5132  003CDE  0100               	movlb	0	; () banked
  5133  003CE0  51EF               	movf	showMainMenu@k& (0+255),w,b
  5134  003CE2  0012               	return	
  5135  003CE4                     __end_of_showMainMenu:
  5136                           	opt stack 0
  5137                           tblptru	equ	0xFF8
  5138                           tblptrh	equ	0xFF7
  5139                           tblptrl	equ	0xFF6
  5140                           tablat	equ	0xFF5
  5141                           postinc0	equ	0xFEE
  5142                           wreg	equ	0xFE8
  5143                           postdec1	equ	0xFE5
  5144                           fsr1l	equ	0xFE1
  5145                           indf2	equ	0xFDF
  5146                           postinc2	equ	0xFDE
  5147                           postdec2	equ	0xFDD
  5148                           fsr2h	equ	0xFDA
  5149                           fsr2l	equ	0xFD9
  5150                           status	equ	0xFD8
  5151                           
  5152 ;; *************** function _showErrorMessage *****************
  5153 ;; Defined at:
  5154 ;;		line 129 in file "interface.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;		None
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;		None
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  1    wreg      void 
  5161 ;; Registers used:
  5162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;Total ram usage:        0 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:    8
  5175 ;; This function calls:
  5176 ;;		_lcdClear
  5177 ;;		_printf
  5178 ;;		_readKeypad
  5179 ;; This function is called by:
  5180 ;;		_showInterface
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text13
  5185  003F08                     __ptext13:
  5186                           	opt stack 0
  5187  003F08                     _showErrorMessage:
  5188                           	opt stack 21
  5189                           
  5190                           ;interface.c: 130: lcdClear();
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;incstack = 0
  5194  003F08  EC7B  F020         	call	_lcdClear	;wreg free
  5195                           
  5196                           ;interface.c: 132: printf(" run not \n");
  5197  003F0C  0EB9               	movlw	low STR_21
  5198  003F0E  0100               	movlb	0	; () banked
  5199  003F10  6FBD               	movwf	printf@f& (0+255),b
  5200  003F12  0EFF               	movlw	high STR_21
  5201  003F14  0100               	movlb	0	; () banked
  5202  003F16  6FBE               	movwf	(printf@f+1)& (0+255),b
  5203  003F18  EC09  F000         	call	_printf	;wreg free
  5204                           
  5205                           ;interface.c: 133: printf("  available   *>");
  5206  003F1C  0E98               	movlw	low STR_22
  5207  003F1E  0100               	movlb	0	; () banked
  5208  003F20  6FBD               	movwf	printf@f& (0+255),b
  5209  003F22  0EFF               	movlw	high STR_22
  5210  003F24  0100               	movlb	0	; () banked
  5211  003F26  6FBE               	movwf	(printf@f+1)& (0+255),b
  5212  003F28  EC09  F000         	call	_printf	;wreg free
  5213  003F2C                     l7435:
  5214  003F2C  ECAF  F01F         	call	_readKeypad	;wreg free
  5215  003F30  0A2A               	xorlw	42
  5216  003F32  B4D8               	btfsc	status,2,c
  5217  003F34  0012               	return	
  5218  003F36  D7FA               	goto	l7435
  5219  003F38                     __end_of_showErrorMessage:
  5220                           	opt stack 0
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           postinc0	equ	0xFEE
  5226                           wreg	equ	0xFE8
  5227                           postdec1	equ	0xFE5
  5228                           fsr1l	equ	0xFE1
  5229                           indf2	equ	0xFDF
  5230                           postinc2	equ	0xFDE
  5231                           postdec2	equ	0xFDD
  5232                           fsr2h	equ	0xFDA
  5233                           fsr2l	equ	0xFD9
  5234                           status	equ	0xFD8
  5235                           
  5236 ;; *************** function _readKeypad *****************
  5237 ;; Defined at:
  5238 ;;		line 36 in file "keypad.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;		None
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  key             1   34[COMRAM] unsigned char 
  5243 ;; Return value:  Size  Location     Type
  5244 ;;                  1    wreg      unsigned char 
  5245 ;; Registers used:
  5246 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5247 ;; Tracked objects:
  5248 ;;		On entry : 0/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;Total ram usage:        1 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    3
  5259 ;; This function calls:
  5260 ;;		Nothing
  5261 ;; This function is called by:
  5262 ;;		_sortBattery
  5263 ;;		_showMainMenu
  5264 ;;		_showRunSelect
  5265 ;;		_showRunMenu
  5266 ;;		_showRunTime
  5267 ;;		_showRunStats
  5268 ;;		_showErrorMessage
  5269 ;;		_debug
  5270 ;;		_pause
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text14
  5275  003F5E                     __ptext14:
  5276                           	opt stack 0
  5277  003F5E                     _readKeypad:
  5278                           	opt stack 26
  5279  003F5E                     l269:
  5280  003F5E  A281               	btfss	3969,1,c	;volatile
  5281  003F60  D7FE               	goto	l269
  5282                           
  5283                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  5284  003F62  3881               	swapf	3969,w,c	;volatile
  5285  003F64  0B0F               	andlw	15
  5286  003F66  0B0F               	andlw	15
  5287  003F68  6E23               	movwf	readKeypad@key,c
  5288  003F6A                     l272:
  5289  003F6A  B281               	btfsc	3969,1,c	;volatile
  5290  003F6C  D7FE               	goto	l272
  5291                           
  5292                           ;keypad.c: 40: return keys[key];
  5293  003F6E  5023               	movf	readKeypad@key,w,c
  5294  003F70  0D01               	mullw	1
  5295  003F72  0E75               	movlw	low _keys
  5296  003F74  24F3               	addwf	prodl,w,c
  5297  003F76  6EF6               	movwf	tblptrl,c
  5298  003F78  0EFE               	movlw	high _keys
  5299  003F7A  20F4               	addwfc	prodh,w,c
  5300  003F7C  6EF7               	movwf	tblptrh,c
  5301  003F7E                     	if	0	;There are less than 3 active tblptr bytes
  5302  003F7E                     	endif
  5303  003F7E  0008               	tblrd		*
  5304  003F80  50F5               	movf	tablat,w,c
  5305  003F82  0012               	return	
  5306  003F84                     __end_of_readKeypad:
  5307                           	opt stack 0
  5308                           tblptru	equ	0xFF8
  5309                           tblptrh	equ	0xFF7
  5310                           tblptrl	equ	0xFF6
  5311                           tablat	equ	0xFF5
  5312                           prodh	equ	0xFF4
  5313                           prodl	equ	0xFF3
  5314                           postinc0	equ	0xFEE
  5315                           wreg	equ	0xFE8
  5316                           postdec1	equ	0xFE5
  5317                           fsr1l	equ	0xFE1
  5318                           indf2	equ	0xFDF
  5319                           postinc2	equ	0xFDE
  5320                           postdec2	equ	0xFDD
  5321                           fsr2h	equ	0xFDA
  5322                           fsr2l	equ	0xFD9
  5323                           status	equ	0xFD8
  5324                           
  5325 ;; *************** function _showDateTime *****************
  5326 ;; Defined at:
  5327 ;;		line 59 in file "interface.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;		None
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  t               2   12[BANK1 ] PTR int 
  5332 ;;		 -> getTime@time(14), 
  5333 ;;  year            2   10[BANK1 ] int 
  5334 ;;  mon             2    8[BANK1 ] int 
  5335 ;;  day             2    6[BANK1 ] int 
  5336 ;;  hour            2    4[BANK1 ] int 
  5337 ;;  min             2    2[BANK1 ] int 
  5338 ;;  sec             2    0[BANK1 ] int 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      void 
  5341 ;; Registers used:
  5342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5350 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5351 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;Total ram usage:       16 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    8
  5355 ;; This function calls:
  5356 ;;		_getTime
  5357 ;;		_initRTC
  5358 ;;		_keyPressed
  5359 ;;		_lcdClear
  5360 ;;		_lcdHome
  5361 ;;		_printf
  5362 ;; This function is called by:
  5363 ;;		_showInterface
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           	psect	text15
  5368  0028B2                     __ptext15:
  5369                           	opt stack 0
  5370  0028B2                     _showDateTime:
  5371                           	opt stack 21
  5372                           
  5373                           ;interface.c: 60: lcdClear();
  5374                           
  5375                           ;incstack = 0
  5376  0028B2  EC7B  F020         	call	_lcdClear	;wreg free
  5377                           
  5378                           ;interface.c: 61: initRTC();
  5379  0028B6  EC54  F020         	call	_initRTC	;wreg free
  5380                           
  5381                           ;interface.c: 63: while(keyPressed() != 'A'){
  5382  0028BA  D07D               	goto	l7387
  5383  0028BC                     l7365:
  5384                           
  5385                           ;interface.c: 64: int* t = getTime();
  5386  0028BC  EC11  F01C         	call	_getTime	;wreg free
  5387  0028C0  C026  F10C         	movff	?_getTime,showDateTime@t
  5388  0028C4  C027  F10D         	movff	?_getTime+1,showDateTime@t+1
  5389                           
  5390                           ;interface.c: 65: int sec = t[0], min = t[1], hour = t[2];
  5391  0028C8  C10C  FFD9         	movff	showDateTime@t,fsr2l
  5392  0028CC  C10D  FFDA         	movff	showDateTime@t+1,fsr2h
  5393  0028D0  CFDE F100          	movff	postinc2,showDateTime@sec
  5394  0028D4  CFDD F101          	movff	postdec2,showDateTime@sec+1
  5395  0028D8  0101               	movlb	1	; () banked
  5396  0028DA  EE20 F002          	lfsr	2,2
  5397  0028DE  510C               	movf	showDateTime@t& (0+255),w,b
  5398  0028E0  26D9               	addwf	fsr2l,f,c
  5399  0028E2  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5400  0028E4  22DA               	addwfc	fsr2h,f,c
  5401  0028E6  CFDE F102          	movff	postinc2,showDateTime@min
  5402  0028EA  CFDD F103          	movff	postdec2,showDateTime@min+1
  5403                           
  5404                           ; BSR set to: 1
  5405  0028EE  0101               	movlb	1	; () banked
  5406  0028F0  EE20 F004          	lfsr	2,4
  5407  0028F4  510C               	movf	showDateTime@t& (0+255),w,b
  5408  0028F6  26D9               	addwf	fsr2l,f,c
  5409  0028F8  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5410  0028FA  22DA               	addwfc	fsr2h,f,c
  5411  0028FC  CFDE F104          	movff	postinc2,showDateTime@hour
  5412  002900  CFDD F105          	movff	postdec2,showDateTime@hour+1
  5413                           
  5414                           ; BSR set to: 1
  5415                           ;interface.c: 66: int day = t[4], mon = t[5], year = t[6];
  5416  002904  0101               	movlb	1	; () banked
  5417  002906  EE20 F008          	lfsr	2,8
  5418  00290A  510C               	movf	showDateTime@t& (0+255),w,b
  5419  00290C  26D9               	addwf	fsr2l,f,c
  5420  00290E  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5421  002910  22DA               	addwfc	fsr2h,f,c
  5422  002912  CFDE F106          	movff	postinc2,showDateTime@day
  5423  002916  CFDD F107          	movff	postdec2,showDateTime@day+1
  5424                           
  5425                           ; BSR set to: 1
  5426  00291A  0101               	movlb	1	; () banked
  5427  00291C  EE20 F00A          	lfsr	2,10
  5428  002920  510C               	movf	showDateTime@t& (0+255),w,b
  5429  002922  26D9               	addwf	fsr2l,f,c
  5430  002924  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5431  002926  22DA               	addwfc	fsr2h,f,c
  5432  002928  CFDE F108          	movff	postinc2,showDateTime@mon
  5433  00292C  CFDD F109          	movff	postdec2,showDateTime@mon+1
  5434                           
  5435                           ; BSR set to: 1
  5436  002930  0101               	movlb	1	; () banked
  5437  002932  EE20 F00C          	lfsr	2,12
  5438  002936  510C               	movf	showDateTime@t& (0+255),w,b
  5439  002938  26D9               	addwf	fsr2l,f,c
  5440  00293A  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5441  00293C  22DA               	addwfc	fsr2h,f,c
  5442  00293E  CFDE F10A          	movff	postinc2,showDateTime@year
  5443  002942  CFDD F10B          	movff	postdec2,showDateTime@year+1
  5444                           
  5445                           ; BSR set to: 1
  5446                           ;interface.c: 68: printf("  20%02x/%02x/%02x\n",year,mon,day);
  5447  002946  0ED3               	movlw	low STR_9
  5448  002948  0100               	movlb	0	; () banked
  5449  00294A  6FBD               	movwf	printf@f& (0+255),b
  5450  00294C  0EFE               	movlw	high STR_9
  5451  00294E  0100               	movlb	0	; () banked
  5452  002950  6FBE               	movwf	(printf@f+1)& (0+255),b
  5453  002952  C10A  F0BF         	movff	showDateTime@year,?_printf+2
  5454  002956  C10B  F0C0         	movff	showDateTime@year+1,?_printf+3
  5455  00295A  C108  F0C1         	movff	showDateTime@mon,?_printf+4
  5456  00295E  C109  F0C2         	movff	showDateTime@mon+1,?_printf+5
  5457  002962  C106  F0C3         	movff	showDateTime@day,?_printf+6
  5458  002966  C107  F0C4         	movff	showDateTime@day+1,?_printf+7
  5459  00296A  EC09  F000         	call	_printf	;wreg free
  5460                           
  5461                           ;interface.c: 69: lcdHome();
  5462  00296E  EC77  F020         	call	_lcdHome	;wreg free
  5463                           
  5464                           ;interface.c: 70: printf("   %02x:%02x:%02x   A>",hour,min,sec);
  5465  002972  0EA5               	movlw	low STR_10
  5466  002974  0100               	movlb	0	; () banked
  5467  002976  6FBD               	movwf	printf@f& (0+255),b
  5468  002978  0EFE               	movlw	high STR_10
  5469  00297A  0100               	movlb	0	; () banked
  5470  00297C  6FBE               	movwf	(printf@f+1)& (0+255),b
  5471  00297E  C104  F0BF         	movff	showDateTime@hour,?_printf+2
  5472  002982  C105  F0C0         	movff	showDateTime@hour+1,?_printf+3
  5473  002986  C102  F0C1         	movff	showDateTime@min,?_printf+4
  5474  00298A  C103  F0C2         	movff	showDateTime@min+1,?_printf+5
  5475  00298E  C100  F0C3         	movff	showDateTime@sec,?_printf+6
  5476  002992  C101  F0C4         	movff	showDateTime@sec+1,?_printf+7
  5477  002996  EC09  F000         	call	_printf	;wreg free
  5478                           
  5479                           ;interface.c: 71: _delay((unsigned long)((100)*(10000000/4000.0)));
  5480  00299A  0E02               	movlw	2
  5481  00299C  0100               	movlb	0	; () banked
  5482  00299E  6FF0               	movwf	(??_showDateTime+1)& (0+255),b
  5483  0029A0  0E45               	movlw	69
  5484  0029A2  0100               	movlb	0	; () banked
  5485  0029A4  6FEF               	movwf	??_showDateTime& (0+255),b
  5486  0029A6  0EA9               	movlw	169
  5487  0029A8                     u8207:
  5488  0029A8  2EE8               	decfsz	wreg,f,c
  5489  0029AA  D7FE               	bra	u8207
  5490  0029AC  2FEF               	decfsz	??_showDateTime& (0+255),f,b
  5491  0029AE  D7FC               	bra	u8207
  5492  0029B0  2FF0               	decfsz	(??_showDateTime+1)& (0+255),f,b
  5493  0029B2  D7FA               	bra	u8207
  5494  0029B4  D000               	nop2	
  5495  0029B6                     l7387:
  5496  0029B6  EC68  F020         	call	_keyPressed	;wreg free
  5497  0029BA  0A41               	xorlw	65
  5498  0029BC  B4D8               	btfsc	status,2,c
  5499  0029BE  0012               	return	
  5500  0029C0  D77D               	goto	l7365
  5501  0029C2                     __end_of_showDateTime:
  5502                           	opt stack 0
  5503                           tblptru	equ	0xFF8
  5504                           tblptrh	equ	0xFF7
  5505                           tblptrl	equ	0xFF6
  5506                           tablat	equ	0xFF5
  5507                           prodh	equ	0xFF4
  5508                           prodl	equ	0xFF3
  5509                           postinc0	equ	0xFEE
  5510                           wreg	equ	0xFE8
  5511                           postdec1	equ	0xFE5
  5512                           fsr1l	equ	0xFE1
  5513                           indf2	equ	0xFDF
  5514                           postinc2	equ	0xFDE
  5515                           postdec2	equ	0xFDD
  5516                           fsr2h	equ	0xFDA
  5517                           fsr2l	equ	0xFD9
  5518                           status	equ	0xFD8
  5519                           
  5520 ;; *************** function _printf *****************
  5521 ;; Defined at:
  5522 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  5525 ;;		 -> STR_22(17), STR_21(11), STR_20(19), STR_19(18), 
  5526 ;;		 -> STR_18(17), STR_17(24), STR_16(17), STR_15(19), 
  5527 ;;		 -> STR_14(17), STR_13(18), STR_12(17), STR_11(18), 
  5528 ;;		 -> STR_10(23), STR_9(20), STR_8(8), STR_7(11), 
  5529 ;;		 -> STR_6(11), STR_5(11), STR_4(16), STR_3(23), 
  5530 ;;		 -> STR_2(8), STR_1(9), 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  idx             1   84[BANK0 ] unsigned char 
  5533 ;;  val             4  100[BANK0 ] unsigned long 
  5534 ;;  tmpval          4   91[BANK0 ] struct .
  5535 ;;  fval            3   97[BANK0 ] struct .
  5536 ;;  prec            2  108[BANK0 ] int 
  5537 ;;  flag            2  106[BANK0 ] unsigned short 
  5538 ;;  width           2  104[BANK0 ] int 
  5539 ;;  exp             2   95[BANK0 ] int 
  5540 ;;  ap              2   89[BANK0 ] PTR void [1]
  5541 ;;		 -> ?_printf(2), 
  5542 ;;  len             2   87[BANK0 ] unsigned int 
  5543 ;;  cp              2   85[BANK0 ] PTR const unsigned char 
  5544 ;;		 -> printf@c(1), 
  5545 ;;  c               1  110[BANK0 ] char 
  5546 ;;  d               1    0        unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  2   61[BANK0 ] int 
  5549 ;; Registers used:
  5550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5556 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;Total ram usage:       50 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    7
  5563 ;; This function calls:
  5564 ;;		___awdiv
  5565 ;;		___ftadd
  5566 ;;		___ftge
  5567 ;;		___ftmul
  5568 ;;		___ftneg
  5569 ;;		___ftsub
  5570 ;;		___fttol
  5571 ;;		___lldiv
  5572 ;;		___llmod
  5573 ;;		___lltoft
  5574 ;;		___wmul
  5575 ;;		__div_to_l_
  5576 ;;		__tdiv_to_l_
  5577 ;;		_fround
  5578 ;;		_isdigit
  5579 ;;		_putch
  5580 ;;		_scale
  5581 ;; This function is called by:
  5582 ;;		_main
  5583 ;;		_sortBattery
  5584 ;;		_showDateTime
  5585 ;;		_showMainMenu
  5586 ;;		_showRunSelect
  5587 ;;		_showRunMenu
  5588 ;;		_showRunTime
  5589 ;;		_showRunStats
  5590 ;;		_showErrorMessage
  5591 ;;		_debug
  5592 ;;		_pause
  5593 ;;		_testFrequency
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           	psect	text16
  5598  000012                     __ptext16:
  5599                           	opt stack 0
  5600  000012                     _printf:
  5601                           	opt stack 22
  5602                           
  5603                           ;doprnt.c: 466: va_list ap;
  5604                           ;doprnt.c: 499: signed char c;
  5605                           ;doprnt.c: 501: int width;
  5606                           ;doprnt.c: 504: int prec;
  5607                           ;doprnt.c: 508: unsigned short flag;
  5608                           ;doprnt.c: 515: char d;
  5609                           ;doprnt.c: 516: double fval;
  5610                           ;doprnt.c: 517: int exp;
  5611                           ;doprnt.c: 523: union {
  5612                           ;doprnt.c: 524: unsigned long vd;
  5613                           ;doprnt.c: 525: double integ;
  5614                           ;doprnt.c: 526: } tmpval;
  5615                           ;doprnt.c: 528: unsigned long val;
  5616                           ;doprnt.c: 529: unsigned len;
  5617                           ;doprnt.c: 530: const char * cp;
  5618                           ;doprnt.c: 533: *ap = __va_start();
  5619                           
  5620                           ;incstack = 0
  5621  000012  0EBF               	movlw	low (?_printf+2)
  5622  000014  0100               	movlb	0	; () banked
  5623  000016  6FD9               	movwf	printf@ap& (0+255),b
  5624  000018  0E00               	movlw	high (?_printf+2)
  5625  00001A  0100               	movlb	0	; () banked
  5626  00001C  6FDA               	movwf	(printf@ap+1)& (0+255),b
  5627                           
  5628                           ;doprnt.c: 536: while(c = *f++) {
  5629  00001E  EFF5  F006         	goto	l7079
  5630  000022                     l6713:
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;doprnt.c: 538: if(c != '%')
  5634  000022  0E25               	movlw	37
  5635  000024  0100               	movlb	0	; () banked
  5636  000026  19EE               	xorwf	printf@c& (0+255),w,b
  5637  000028  B4D8               	btfsc	status,2,c
  5638  00002A  D006               	goto	l6717
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;doprnt.c: 540: {
  5642                           ;doprnt.c: 541: (putch(c) );
  5643  00002C  0100               	movlb	0	; () banked
  5644  00002E  51EE               	movf	printf@c& (0+255),w,b
  5645  000030  ECFA  F01F         	call	_putch
  5646                           
  5647                           ;doprnt.c: 542: continue;
  5648  000034  EFF5  F006         	goto	l7079
  5649  000038                     l6717:
  5650                           
  5651                           ;doprnt.c: 543: }
  5652                           ;doprnt.c: 546: width = 0;
  5653  000038  0E00               	movlw	0
  5654  00003A  0100               	movlb	0	; () banked
  5655  00003C  6FE9               	movwf	(printf@width+1)& (0+255),b
  5656  00003E  0E00               	movlw	0
  5657  000040  6FE8               	movwf	printf@width& (0+255),b
  5658                           
  5659                           ;doprnt.c: 548: flag = 0;
  5660  000042  0E00               	movlw	0
  5661  000044  0100               	movlb	0	; () banked
  5662  000046  6FEB               	movwf	(printf@flag+1)& (0+255),b
  5663  000048  0E00               	movlw	0
  5664  00004A  6FEA               	movwf	printf@flag& (0+255),b
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;doprnt.c: 551: switch(*f) {
  5668                           
  5669                           ;doprnt.c: 550: for(;;) {
  5670  00004C  D005               	goto	l6723
  5671  00004E                     l6719:
  5672                           
  5673                           ;doprnt.c: 580: flag |= 0x04;
  5674  00004E  0100               	movlb	0	; () banked
  5675  000050  85EA               	bsf	printf@flag& (0+255),2,b
  5676                           
  5677                           ;doprnt.c: 581: f++;
  5678  000052  0100               	movlb	0	; () banked
  5679  000054  4BBD               	infsnz	printf@f& (0+255),f,b
  5680  000056  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5681  000058                     l6723:
  5682  000058  C0BD  FFF6         	movff	printf@f,tblptrl
  5683  00005C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5684  000060                     	if	0	;tblptru may be non-zero
  5685  000060                     	endif
  5686  000060                     	if	0	;tblptru may be non-zero
  5687  000060                     	endif
  5688  000060  0008               	tblrd		*
  5689  000062  50F5               	movf	tablat,w,c
  5690                           
  5691                           ; Switch size 1, requested type "space"
  5692                           ; Number of cases is 1, Range of values is 48 to 48
  5693                           ; switch strategies available:
  5694                           ; Name         Instructions Cycles
  5695                           ; simple_byte            4     3 (average)
  5696                           ;	Chosen strategy is simple_byte
  5697  000064  0A30               	xorlw	48	; case 48
  5698  000066  B4D8               	btfsc	status,2,c
  5699  000068  D7F2               	goto	l6719
  5700                           
  5701                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5702                           
  5703                           ;doprnt.c: 586: }
  5704                           
  5705                           ;doprnt.c: 585: break;
  5706  00006A  C0BD  FFF6         	movff	printf@f,tblptrl
  5707  00006E  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5708  000072                     	if	0	;tblptru may be non-zero
  5709  000072                     	endif
  5710  000072                     	if	0	;tblptru may be non-zero
  5711  000072                     	endif
  5712  000072  0008               	tblrd		*
  5713  000074  50F5               	movf	tablat,w,c
  5714  000076  EC2C  F020         	call	_isdigit
  5715  00007A  A0D8               	btfss	status,0,c
  5716  00007C  D03F               	goto	l6737
  5717                           
  5718                           ;doprnt.c: 598: width = 0;
  5719  00007E  0E00               	movlw	0
  5720  000080  0100               	movlb	0	; () banked
  5721  000082  6FE9               	movwf	(printf@width+1)& (0+255),b
  5722  000084  0E00               	movlw	0
  5723  000086  6FE8               	movwf	printf@width& (0+255),b
  5724  000088                     l6729:
  5725                           
  5726                           ;doprnt.c: 600: width *= 10;
  5727  000088  C0E8  F031         	movff	printf@width,___wmul@multiplier
  5728  00008C  C0E9  F032         	movff	printf@width+1,___wmul@multiplier+1
  5729  000090  0E00               	movlw	0
  5730  000092  6E34               	movwf	___wmul@multiplicand+1,c
  5731  000094  0E0A               	movlw	10
  5732  000096  6E33               	movwf	___wmul@multiplicand,c
  5733  000098  ECD5  F01F         	call	___wmul	;wreg free
  5734  00009C  C031  F0E8         	movff	?___wmul,printf@width
  5735  0000A0  C032  F0E9         	movff	?___wmul+1,printf@width+1
  5736                           
  5737                           ;doprnt.c: 601: width += *f++ - '0';
  5738  0000A4  0ED0               	movlw	208
  5739  0000A6  0100               	movlb	0	; () banked
  5740  0000A8  6FCB               	movwf	??_printf& (0+255),b
  5741  0000AA  0EFF               	movlw	255
  5742  0000AC  0100               	movlb	0	; () banked
  5743  0000AE  6FCC               	movwf	(??_printf+1)& (0+255),b
  5744  0000B0  C0BD  FFF6         	movff	printf@f,tblptrl
  5745  0000B4  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5746  0000B8                     	if	0	;tblptru may be non-zero
  5747  0000B8                     	endif
  5748  0000B8                     	if	0	;tblptru may be non-zero
  5749  0000B8                     	endif
  5750  0000B8  0008               	tblrd		*
  5751  0000BA  50F5               	movf	tablat,w,c
  5752  0000BC  0100               	movlb	0	; () banked
  5753  0000BE  6FCD               	movwf	(??_printf+2)& (0+255),b
  5754  0000C0  6BCE               	clrf	(??_printf+3)& (0+255),b
  5755  0000C2  0100               	movlb	0	; () banked
  5756  0000C4  51CB               	movf	??_printf& (0+255),w,b
  5757  0000C6  0100               	movlb	0	; () banked
  5758  0000C8  27CD               	addwf	(??_printf+2)& (0+255),f,b
  5759  0000CA  0100               	movlb	0	; () banked
  5760  0000CC  51CC               	movf	(??_printf+1)& (0+255),w,b
  5761  0000CE  0100               	movlb	0	; () banked
  5762  0000D0  23CE               	addwfc	(??_printf+3)& (0+255),f,b
  5763  0000D2  0100               	movlb	0	; () banked
  5764  0000D4  51CD               	movf	(??_printf+2)& (0+255),w,b
  5765  0000D6  0100               	movlb	0	; () banked
  5766  0000D8  27E8               	addwf	printf@width& (0+255),f,b
  5767  0000DA  0100               	movlb	0	; () banked
  5768  0000DC  51CE               	movf	(??_printf+3)& (0+255),w,b
  5769  0000DE  0100               	movlb	0	; () banked
  5770  0000E0  23E9               	addwfc	(printf@width+1)& (0+255),f,b
  5771                           
  5772                           ; BSR set to: 0
  5773  0000E2  0100               	movlb	0	; () banked
  5774  0000E4  4BBD               	infsnz	printf@f& (0+255),f,b
  5775  0000E6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5779  0000E8  C0BD  FFF6         	movff	printf@f,tblptrl
  5780  0000EC  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5781  0000F0                     	if	0	;tblptru may be non-zero
  5782  0000F0                     	endif
  5783  0000F0                     	if	0	;tblptru may be non-zero
  5784  0000F0                     	endif
  5785  0000F0  0008               	tblrd		*
  5786  0000F2  50F5               	movf	tablat,w,c
  5787  0000F4  EC2C  F020         	call	_isdigit
  5788  0000F8  B0D8               	btfsc	status,0,c
  5789  0000FA  D7C6               	goto	l6729
  5790  0000FC                     l6737:
  5791                           
  5792                           ;doprnt.c: 608: }
  5793                           ;doprnt.c: 611: if(*f == '.') {
  5794  0000FC  C0BD  FFF6         	movff	printf@f,tblptrl
  5795  000100  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5796  000104                     	if	0	;tblptru may be non-zero
  5797  000104                     	endif
  5798  000104                     	if	0	;tblptru may be non-zero
  5799  000104                     	endif
  5800  000104  0008               	tblrd		*
  5801  000106  50F5               	movf	tablat,w,c
  5802  000108  0A2E               	xorlw	46
  5803  00010A  A4D8               	btfss	status,2,c
  5804  00010C  D034               	goto	l6749
  5805                           
  5806                           ;doprnt.c: 612: flag |= 0x4000;
  5807  00010E  0100               	movlb	0	; () banked
  5808  000110  8DEB               	bsf	(printf@flag+1)& (0+255),6,b
  5809                           
  5810                           ;doprnt.c: 613: f++;
  5811  000112  0100               	movlb	0	; () banked
  5812  000114  4BBD               	infsnz	printf@f& (0+255),f,b
  5813  000116  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;doprnt.c: 620: {
  5817                           ;doprnt.c: 621: prec = 0;
  5818  000118  0E00               	movlw	0
  5819  00011A  0100               	movlb	0	; () banked
  5820  00011C  6FED               	movwf	(printf@prec+1)& (0+255),b
  5821  00011E  0E00               	movlw	0
  5822  000120  6FEC               	movwf	printf@prec& (0+255),b
  5823                           
  5824                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5825  000122  D01E               	goto	l6747
  5826  000124                     l6743:
  5827                           
  5828                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5829  000124  C0EC  F031         	movff	printf@prec,___wmul@multiplier
  5830  000128  C0ED  F032         	movff	printf@prec+1,___wmul@multiplier+1
  5831  00012C  0E00               	movlw	0
  5832  00012E  6E34               	movwf	___wmul@multiplicand+1,c
  5833  000130  0E0A               	movlw	10
  5834  000132  6E33               	movwf	___wmul@multiplicand,c
  5835  000134  ECD5  F01F         	call	___wmul	;wreg free
  5836  000138  C0BD  FFF6         	movff	printf@f,tblptrl
  5837  00013C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5838  000140                     	if	0	;tblptru may be non-zero
  5839  000140                     	endif
  5840  000140                     	if	0	;tblptru may be non-zero
  5841  000140                     	endif
  5842  000140  0008               	tblrd		*
  5843  000142  50F5               	movf	tablat,w,c
  5844  000144  2631               	addwf	?___wmul,f,c
  5845  000146  0E00               	movlw	0
  5846  000148  2232               	addwfc	?___wmul+1,f,c
  5847  00014A  0ED0               	movlw	208
  5848  00014C  2431               	addwf	?___wmul,w,c
  5849  00014E  0100               	movlb	0	; () banked
  5850  000150  6FEC               	movwf	printf@prec& (0+255),b
  5851  000152  0EFF               	movlw	255
  5852  000154  2032               	addwfc	?___wmul+1,w,c
  5853  000156  0100               	movlb	0	; () banked
  5854  000158  6FED               	movwf	(printf@prec+1)& (0+255),b
  5855                           
  5856                           ; BSR set to: 0
  5857  00015A  0100               	movlb	0	; () banked
  5858  00015C  4BBD               	infsnz	printf@f& (0+255),f,b
  5859  00015E  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5860  000160                     l6747:
  5861                           
  5862                           ; BSR set to: 0
  5863  000160  C0BD  FFF6         	movff	printf@f,tblptrl
  5864  000164  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5865  000168                     	if	0	;tblptru may be non-zero
  5866  000168                     	endif
  5867  000168                     	if	0	;tblptru may be non-zero
  5868  000168                     	endif
  5869  000168  0008               	tblrd		*
  5870  00016A  50F5               	movf	tablat,w,c
  5871  00016C  EC2C  F020         	call	_isdigit
  5872  000170  A0D8               	btfss	status,0,c
  5873  000172  D07D               	goto	l6791
  5874  000174  D7D7               	goto	l6743
  5875  000176                     l6749:
  5876                           
  5877                           ;doprnt.c: 626: prec = 0;
  5878  000176  0E00               	movlw	0
  5879  000178  0100               	movlb	0	; () banked
  5880  00017A  6FED               	movwf	(printf@prec+1)& (0+255),b
  5881  00017C  0E00               	movlw	0
  5882  00017E  6FEC               	movwf	printf@prec& (0+255),b
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;doprnt.c: 628: flag |= 0x1000;
  5886  000180  0100               	movlb	0	; () banked
  5887  000182  89EB               	bsf	(printf@flag+1)& (0+255),4,b
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;doprnt.c: 635: switch(c = *f++) {
  5891                           
  5892                           ;doprnt.c: 630: }
  5893                           ;doprnt.c: 633: loop:
  5894                           
  5895                           ; BSR set to: 0
  5896  000184  D074               	goto	l6791
  5897  000186                     l6753:
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;doprnt.c: 643: flag |= 0x10;
  5901  000186  0100               	movlb	0	; () banked
  5902  000188  89EA               	bsf	printf@flag& (0+255),4,b
  5903                           
  5904                           ;doprnt.c: 644: goto loop;
  5905  00018A  D071               	goto	l6791
  5906  00018C                     l6755:
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;doprnt.c: 663: flag |= 0x400;
  5910  00018C  0100               	movlb	0	; () banked
  5911  00018E  85EB               	bsf	(printf@flag+1)& (0+255),2,b
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;doprnt.c: 698: case 'i':
  5915                           ;doprnt.c: 699: break;
  5916                           
  5917                           ; BSR set to: 0
  5918                           
  5919                           ;doprnt.c: 697: case 'd':
  5920                           
  5921                           ;doprnt.c: 664: break;
  5922  000190  D090               	goto	l6793
  5923  000192                     l6757:
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;doprnt.c: 721: flag |= 0x80;
  5927  000192  0100               	movlb	0	; () banked
  5928  000194  8FEA               	bsf	printf@flag& (0+255),7,b
  5929                           
  5930                           ;doprnt.c: 723: break;
  5931  000196  D08D               	goto	l6793
  5932  000198                     l6759:
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;doprnt.c: 753: if(prec && prec < len)
  5936  000198  0100               	movlb	0	; () banked
  5937  00019A  51EC               	movf	printf@prec& (0+255),w,b
  5938  00019C  0100               	movlb	0	; () banked
  5939  00019E  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  5940  0001A0  B4D8               	btfsc	status,2,c
  5941  0001A2  D00E               	goto	l6765
  5942                           
  5943                           ; BSR set to: 0
  5944  0001A4  0100               	movlb	0	; () banked
  5945  0001A6  51D7               	movf	printf@len& (0+255),w,b
  5946  0001A8  0100               	movlb	0	; () banked
  5947  0001AA  5DEC               	subwf	printf@prec& (0+255),w,b
  5948  0001AC  0100               	movlb	0	; () banked
  5949  0001AE  51D8               	movf	(printf@len+1)& (0+255),w,b
  5950  0001B0  0100               	movlb	0	; () banked
  5951  0001B2  59ED               	subwfb	(printf@prec+1)& (0+255),w,b
  5952  0001B4  B0D8               	btfsc	status,0,c
  5953  0001B6  D004               	goto	l6765
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;doprnt.c: 754: len = prec;
  5957  0001B8  C0EC  F0D7         	movff	printf@prec,printf@len
  5958  0001BC  C0ED  F0D8         	movff	printf@prec+1,printf@len+1
  5959  0001C0                     l6765:
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;doprnt.c: 757: if(width > len)
  5963  0001C0  0100               	movlb	0	; () banked
  5964  0001C2  51E8               	movf	printf@width& (0+255),w,b
  5965  0001C4  0100               	movlb	0	; () banked
  5966  0001C6  5DD7               	subwf	printf@len& (0+255),w,b
  5967  0001C8  0100               	movlb	0	; () banked
  5968  0001CA  51E9               	movf	(printf@width+1)& (0+255),w,b
  5969  0001CC  0100               	movlb	0	; () banked
  5970  0001CE  59D8               	subwfb	(printf@len+1)& (0+255),w,b
  5971  0001D0  B0D8               	btfsc	status,0,c
  5972  0001D2  D009               	goto	l6769
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;doprnt.c: 758: width -= len;
  5976  0001D4  0100               	movlb	0	; () banked
  5977  0001D6  51D7               	movf	printf@len& (0+255),w,b
  5978  0001D8  0100               	movlb	0	; () banked
  5979  0001DA  5FE8               	subwf	printf@width& (0+255),f,b
  5980  0001DC  0100               	movlb	0	; () banked
  5981  0001DE  51D8               	movf	(printf@len+1)& (0+255),w,b
  5982  0001E0  0100               	movlb	0	; () banked
  5983  0001E2  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  5984  0001E4  D009               	goto	l6773
  5985  0001E6                     l6769:
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;doprnt.c: 759: else
  5989                           ;doprnt.c: 760: width = 0;
  5990  0001E6  0E00               	movlw	0
  5991  0001E8  0100               	movlb	0	; () banked
  5992  0001EA  6FE9               	movwf	(printf@width+1)& (0+255),b
  5993  0001EC  0E00               	movlw	0
  5994  0001EE  6FE8               	movwf	printf@width& (0+255),b
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;doprnt.c: 764: while(width--)
  5998  0001F0  D003               	goto	l6773
  5999  0001F2                     l6771:
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;doprnt.c: 765: (putch(' ') );
  6003  0001F2  0E20               	movlw	32
  6004  0001F4  ECFA  F01F         	call	_putch
  6005  0001F8                     l6773:
  6006  0001F8  0100               	movlb	0	; () banked
  6007  0001FA  07E8               	decf	printf@width& (0+255),f,b
  6008  0001FC  A0D8               	btfss	status,0,c
  6009  0001FE  07E9               	decf	(printf@width+1)& (0+255),f,b
  6010  000200  0100               	movlb	0	; () banked
  6011  000202  29E8               	incf	printf@width& (0+255),w,b
  6012  000204  E1F6               	bnz	l6771
  6013  000206  0100               	movlb	0	; () banked
  6014  000208  29E9               	incf	(printf@width+1)& (0+255),w,b
  6015  00020A  B4D8               	btfsc	status,2,c
  6016  00020C  D00B               	goto	l6779
  6017  00020E  D7F1               	goto	l6771
  6018  000210                     l6775:
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;doprnt.c: 768: (putch(*cp++) );
  6022  000210  C0D5  FFD9         	movff	printf@cp,fsr2l
  6023  000214  C0D6  FFDA         	movff	printf@cp+1,fsr2h
  6024  000218  50DF               	movf	indf2,w,c
  6025  00021A  ECFA  F01F         	call	_putch
  6026  00021E  0100               	movlb	0	; () banked
  6027  000220  4BD5               	infsnz	printf@cp& (0+255),f,b
  6028  000222  2BD6               	incf	(printf@cp+1)& (0+255),f,b
  6029  000224                     l6779:
  6030                           
  6031                           ; BSR set to: 0
  6032  000224  0100               	movlb	0	; () banked
  6033  000226  07D7               	decf	printf@len& (0+255),f,b
  6034  000228  A0D8               	btfss	status,0,c
  6035  00022A  07D8               	decf	(printf@len+1)& (0+255),f,b
  6036  00022C  0100               	movlb	0	; () banked
  6037  00022E  29D7               	incf	printf@len& (0+255),w,b
  6038  000230  E1EF               	bnz	l6775
  6039  000232  0100               	movlb	0	; () banked
  6040  000234  29D8               	incf	(printf@len+1)& (0+255),w,b
  6041  000236  B4D8               	btfsc	status,2,c
  6042  000238  EFF5  F006         	goto	l7079
  6043  00023C  D7E9               	goto	l6775
  6044  00023E                     l6781:
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6048  00023E  C0D9  FFD9         	movff	printf@ap,fsr2l
  6049  000242  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  6050  000246  50DF               	movf	indf2,w,c
  6051  000248  0100               	movlb	0	; () banked
  6052  00024A  6FEE               	movwf	printf@c& (0+255),b
  6053                           
  6054                           ; BSR set to: 0
  6055  00024C  0E02               	movlw	2
  6056  00024E  0100               	movlb	0	; () banked
  6057  000250  27D9               	addwf	printf@ap& (0+255),f,b
  6058  000252  0E00               	movlw	0
  6059  000254  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  6060  000256                     l6785:
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;doprnt.c: 805: cp = (char *)&c;
  6064  000256  0EEE               	movlw	low printf@c
  6065  000258  0100               	movlb	0	; () banked
  6066  00025A  6FD5               	movwf	printf@cp& (0+255),b
  6067  00025C  0E00               	movlw	high printf@c
  6068  00025E  0100               	movlb	0	; () banked
  6069  000260  6FD6               	movwf	(printf@cp+1)& (0+255),b
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;doprnt.c: 806: len = 1;
  6073  000262  0E00               	movlw	0
  6074  000264  0100               	movlb	0	; () banked
  6075  000266  6FD8               	movwf	(printf@len+1)& (0+255),b
  6076  000268  0E01               	movlw	1
  6077  00026A  6FD7               	movwf	printf@len& (0+255),b
  6078                           
  6079                           ;doprnt.c: 807: goto dostring;
  6080  00026C  D795               	goto	l6759
  6081  00026E                     l6791:
  6082  00026E  C0BD  FFF6         	movff	printf@f,tblptrl
  6083  000272  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6084  000276  0100               	movlb	0	; () banked
  6085  000278  4BBD               	infsnz	printf@f& (0+255),f,b
  6086  00027A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6087  00027C                     	if	0	;tblptru may be non-zero
  6088  00027C                     	endif
  6089  00027C                     	if	0	;tblptru may be non-zero
  6090  00027C                     	endif
  6091  00027C  0008               	tblrd		*
  6092  00027E  CFF5 F0EE          	movff	tablat,printf@c
  6093  000282  0100               	movlb	0	; () banked
  6094  000284  51EE               	movf	printf@c& (0+255),w,b
  6095                           
  6096                           ; Switch size 1, requested type "space"
  6097                           ; Number of cases is 7, Range of values is 0 to 120
  6098                           ; switch strategies available:
  6099                           ; Name         Instructions Cycles
  6100                           ; simple_byte           22    12 (average)
  6101                           ;	Chosen strategy is simple_byte
  6102  000286  0A00               	xorlw	0	; case 0
  6103  000288  B4D8               	btfsc	status,2,c
  6104  00028A  0012               	return	
  6105  00028C  0A63               	xorlw	99	; case 99
  6106  00028E  B4D8               	btfsc	status,2,c
  6107  000290  D7D6               	goto	l6781
  6108  000292  0A07               	xorlw	7	; case 100
  6109  000294  B4D8               	btfsc	status,2,c
  6110  000296  D00D               	goto	l6793
  6111  000298  0A02               	xorlw	2	; case 102
  6112  00029A  B4D8               	btfsc	status,2,c
  6113  00029C  D777               	goto	l6755
  6114  00029E  0A0F               	xorlw	15	; case 105
  6115  0002A0  B4D8               	btfsc	status,2,c
  6116  0002A2  D007               	goto	l6793
  6117  0002A4  0A05               	xorlw	5	; case 108
  6118  0002A6  B4D8               	btfsc	status,2,c
  6119  0002A8  D76E               	goto	l6753
  6120  0002AA  0A14               	xorlw	20	; case 120
  6121  0002AC  B4D8               	btfsc	status,2,c
  6122  0002AE  D771               	goto	l6757
  6123  0002B0  D7D2               	goto	l6785
  6124  0002B2                     l6793:
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;doprnt.c: 825: if(flag & (0x700)) {
  6128  0002B2  0E07               	movlw	7
  6129  0002B4  0100               	movlb	0	; () banked
  6130  0002B6  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6131  0002B8  B4D8               	btfsc	status,2,c
  6132  0002BA  D36D               	goto	l790
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;doprnt.c: 827: if(flag & 0x1000)
  6136  0002BC  0100               	movlb	0	; () banked
  6137  0002BE  A9EB               	btfss	(printf@flag+1)& (0+255),4,b
  6138  0002C0  D005               	goto	l6799
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;doprnt.c: 829: prec = 6;
  6142  0002C2  0E00               	movlw	0
  6143  0002C4  0100               	movlb	0	; () banked
  6144  0002C6  6FED               	movwf	(printf@prec+1)& (0+255),b
  6145  0002C8  0E06               	movlw	6
  6146  0002CA  6FEC               	movwf	printf@prec& (0+255),b
  6147  0002CC                     l6799:
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6151  0002CC  C0D9  FFD9         	movff	printf@ap,fsr2l
  6152  0002D0  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  6153  0002D4  CFDE F0E1          	movff	postinc2,printf@fval
  6154  0002D8  CFDE F0E2          	movff	postinc2,printf@fval+1
  6155  0002DC  CFDD F0E3          	movff	postdec2,printf@fval+2
  6156                           
  6157                           ; BSR set to: 0
  6158  0002E0  0E03               	movlw	3
  6159  0002E2  0100               	movlb	0	; () banked
  6160  0002E4  27D9               	addwf	printf@ap& (0+255),f,b
  6161  0002E6  0E00               	movlw	0
  6162  0002E8  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;doprnt.c: 831: if(fval < 0.0) {
  6166  0002EA  0100               	movlb	0	; () banked
  6167  0002EC  AFE3               	btfss	(printf@fval+2)& (0+255),7,b
  6168  0002EE  D011               	goto	l6809
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;doprnt.c: 832: fval = -fval;
  6172  0002F0  C0E1  F023         	movff	printf@fval,___ftneg@f1
  6173  0002F4  C0E2  F024         	movff	printf@fval+1,___ftneg@f1+1
  6174  0002F8  C0E3  F025         	movff	printf@fval+2,___ftneg@f1+2
  6175  0002FC  ECE8  F01F         	call	___ftneg	;wreg free
  6176  000300  C023  F0E1         	movff	?___ftneg,printf@fval
  6177  000304  C024  F0E2         	movff	?___ftneg+1,printf@fval+1
  6178  000308  C025  F0E3         	movff	?___ftneg+2,printf@fval+2
  6179                           
  6180                           ;doprnt.c: 833: flag |= 0x03;
  6181  00030C  0E03               	movlw	3
  6182  00030E  0100               	movlb	0	; () banked
  6183  000310  13EA               	iorwf	printf@flag& (0+255),f,b
  6184  000312                     l6809:
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;doprnt.c: 834: }
  6188                           ;doprnt.c: 835: exp = 0;
  6189  000312  0E00               	movlw	0
  6190  000314  0100               	movlb	0	; () banked
  6191  000316  6FE0               	movwf	(printf@exp+1)& (0+255),b
  6192  000318  0E00               	movlw	0
  6193  00031A  6FDF               	movwf	printf@exp& (0+255),b
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;doprnt.c: 836: if( fval!=0) {
  6197  00031C  0100               	movlb	0	; () banked
  6198  00031E  51E1               	movf	printf@fval& (0+255),w,b
  6199  000320  0100               	movlb	0	; () banked
  6200  000322  11E2               	iorwf	(printf@fval+1)& (0+255),w,b
  6201  000324  0100               	movlb	0	; () banked
  6202  000326  11E3               	iorwf	(printf@fval+2)& (0+255),w,b
  6203  000328  B4D8               	btfsc	status,2,c
  6204  00032A  D091               	goto	l6837
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6208  00032C  0E82               	movlw	130
  6209  00032E  0100               	movlb	0	; () banked
  6210  000330  6FCB               	movwf	??_printf& (0+255),b
  6211  000332  0EFF               	movlw	255
  6212  000334  0100               	movlb	0	; () banked
  6213  000336  6FCC               	movwf	(??_printf+1)& (0+255),b
  6214  000338  C0E1  F0CD         	movff	printf@fval,??_printf+2
  6215  00033C  C0E2  F0CE         	movff	printf@fval+1,??_printf+3
  6216  000340  C0E3  F0CF         	movff	printf@fval+2,??_printf+4
  6217  000344  C0E4  F0D0         	movff	printf@fval+3,??_printf+5
  6218  000348  0E10               	movlw	16
  6219  00034A  D006               	goto	u6780
  6220  00034C                     u6785:
  6221  00034C  0100               	movlb	0	; () banked
  6222  00034E  90D8               	bcf	status,0,c
  6223  000350  33D0               	rrcf	(??_printf+5)& (0+255),f,b
  6224  000352  33CF               	rrcf	(??_printf+4)& (0+255),f,b
  6225  000354  33CE               	rrcf	(??_printf+3)& (0+255),f,b
  6226  000356  33CD               	rrcf	(??_printf+2)& (0+255),f,b
  6227  000358                     u6780:
  6228  000358  2EE8               	decfsz	wreg,f,c
  6229  00035A  D7F8               	goto	u6785
  6230  00035C  0100               	movlb	0	; () banked
  6231  00035E  51CD               	movf	(??_printf+2)& (0+255),w,b
  6232  000360  0100               	movlb	0	; () banked
  6233  000362  25CB               	addwf	??_printf& (0+255),w,b
  6234  000364  0100               	movlb	0	; () banked
  6235  000366  6FDF               	movwf	printf@exp& (0+255),b
  6236  000368  0E00               	movlw	0
  6237  00036A  0100               	movlb	0	; () banked
  6238  00036C  21CC               	addwfc	(??_printf+1)& (0+255),w,b
  6239  00036E  0100               	movlb	0	; () banked
  6240  000370  6FE0               	movwf	(printf@exp+1)& (0+255),b
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;doprnt.c: 838: exp--;
  6244  000372  0100               	movlb	0	; () banked
  6245  000374  07DF               	decf	printf@exp& (0+255),f,b
  6246  000376  A0D8               	btfss	status,0,c
  6247  000378  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;doprnt.c: 839: exp *= 3;
  6251  00037A  C0DF  F031         	movff	printf@exp,___wmul@multiplier
  6252  00037E  C0E0  F032         	movff	printf@exp+1,___wmul@multiplier+1
  6253  000382  0E00               	movlw	0
  6254  000384  6E34               	movwf	___wmul@multiplicand+1,c
  6255  000386  0E03               	movlw	3
  6256  000388  6E33               	movwf	___wmul@multiplicand,c
  6257  00038A  ECD5  F01F         	call	___wmul	;wreg free
  6258  00038E  C031  F0DF         	movff	?___wmul,printf@exp
  6259  000392  C032  F0E0         	movff	?___wmul+1,printf@exp+1
  6260                           
  6261                           ;doprnt.c: 840: exp /= 10;
  6262  000396  C0DF  F029         	movff	printf@exp,___awdiv@dividend
  6263  00039A  C0E0  F02A         	movff	printf@exp+1,___awdiv@dividend+1
  6264  00039E  0E00               	movlw	0
  6265  0003A0  6E2C               	movwf	___awdiv@divisor+1,c
  6266  0003A2  0E0A               	movlw	10
  6267  0003A4  6E2B               	movwf	___awdiv@divisor,c
  6268  0003A6  EC8E  F01B         	call	___awdiv	;wreg free
  6269  0003AA  C029  F0DF         	movff	?___awdiv,printf@exp
  6270  0003AE  C02A  F0E0         	movff	?___awdiv+1,printf@exp+1
  6271                           
  6272                           ;doprnt.c: 841: if(exp < 0)
  6273  0003B2  0100               	movlb	0	; () banked
  6274  0003B4  AFE0               	btfss	(printf@exp+1)& (0+255),7,b
  6275  0003B6  D004               	goto	l6825
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;doprnt.c: 842: exp--;
  6279  0003B8  0100               	movlb	0	; () banked
  6280  0003BA  07DF               	decf	printf@exp& (0+255),f,b
  6281  0003BC  A0D8               	btfss	status,0,c
  6282  0003BE  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6283  0003C0                     l6825:
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6287  0003C0  0100               	movlb	0	; () banked
  6288  0003C2  51DF               	movf	printf@exp& (0+255),w,b
  6289  0003C4  0800               	sublw	0
  6290  0003C6  EC04  F00C         	call	_scale
  6291  0003CA  C098  F0DB         	movff	?_scale,printf@tmpval
  6292  0003CE  C099  F0DC         	movff	?_scale+1,printf@tmpval+1
  6293  0003D2  C09A  F0DD         	movff	?_scale+2,printf@tmpval+2
  6294                           
  6295                           ;doprnt.c: 847: tmpval.integ *= fval;
  6296  0003D6  C0DB  F089         	movff	printf@tmpval,___ftmul@f1
  6297  0003DA  C0DC  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  6298  0003DE  C0DD  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  6299  0003E2  C0E1  F08C         	movff	printf@fval,___ftmul@f2
  6300  0003E6  C0E2  F08D         	movff	printf@fval+1,___ftmul@f2+1
  6301  0003EA  C0E3  F08E         	movff	printf@fval+2,___ftmul@f2+2
  6302  0003EE  EC2F  F011         	call	___ftmul	;wreg free
  6303  0003F2  C089  F0DB         	movff	?___ftmul,printf@tmpval
  6304  0003F6  C08A  F0DC         	movff	?___ftmul+1,printf@tmpval+1
  6305  0003FA  C08B  F0DD         	movff	?___ftmul+2,printf@tmpval+2
  6306                           
  6307                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6308  0003FE  C0DB  F02F         	movff	printf@tmpval,___ftge@ff1
  6309  000402  C0DC  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  6310  000406  C0DD  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  6311  00040A  0E00               	movlw	0
  6312  00040C  6E32               	movwf	___ftge@ff2,c
  6313  00040E  0E80               	movlw	128
  6314  000410  6E33               	movwf	___ftge@ff2+1,c
  6315  000412  0E3F               	movlw	63
  6316  000414  6E34               	movwf	___ftge@ff2+2,c
  6317  000416  EC04  F01B         	call	___ftge	;wreg free
  6318  00041A  B0D8               	btfsc	status,0,c
  6319  00041C  D005               	goto	l6833
  6320                           
  6321                           ;doprnt.c: 849: exp--;
  6322  00041E  0100               	movlb	0	; () banked
  6323  000420  07DF               	decf	printf@exp& (0+255),f,b
  6324  000422  A0D8               	btfss	status,0,c
  6325  000424  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6326  000426  D013               	goto	l6837
  6327  000428                     l6833:
  6328                           
  6329                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6330  000428  C0DB  F02F         	movff	printf@tmpval,___ftge@ff1
  6331  00042C  C0DC  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  6332  000430  C0DD  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  6333  000434  0E00               	movlw	0
  6334  000436  6E32               	movwf	___ftge@ff2,c
  6335  000438  0E20               	movlw	32
  6336  00043A  6E33               	movwf	___ftge@ff2+1,c
  6337  00043C  0E41               	movlw	65
  6338  00043E  6E34               	movwf	___ftge@ff2+2,c
  6339  000440  EC04  F01B         	call	___ftge	;wreg free
  6340  000444  A0D8               	btfss	status,0,c
  6341  000446  D003               	goto	l6837
  6342                           
  6343                           ;doprnt.c: 851: exp++;
  6344  000448  0100               	movlb	0	; () banked
  6345  00044A  4BDF               	infsnz	printf@exp& (0+255),f,b
  6346  00044C  2BE0               	incf	(printf@exp+1)& (0+255),f,b
  6347  00044E                     l6837:
  6348                           
  6349                           ;doprnt.c: 852: }
  6350                           ;doprnt.c: 1112: if(prec <= 12)
  6351  00044E  0100               	movlb	0	; () banked
  6352  000450  BFED               	btfsc	(printf@prec+1)& (0+255),7,b
  6353  000452  D008               	goto	l6839
  6354  000454  0100               	movlb	0	; () banked
  6355  000456  51ED               	movf	(printf@prec+1)& (0+255),w,b
  6356  000458  E11D               	bnz	l6841
  6357  00045A  0E0D               	movlw	13
  6358  00045C  0100               	movlb	0	; () banked
  6359  00045E  5DEC               	subwf	printf@prec& (0+255),w,b
  6360  000460  B0D8               	btfsc	status,0,c
  6361  000462  D018               	goto	l6841
  6362  000464                     l6839:
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;doprnt.c: 1113: fval += fround(prec);
  6366  000464  C0E1  F0A2         	movff	printf@fval,___ftadd@f1
  6367  000468  C0E2  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  6368  00046C  C0E3  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  6369  000470  0100               	movlb	0	; () banked
  6370  000472  51EC               	movf	printf@prec& (0+255),w,b
  6371  000474  EC43  F00F         	call	_fround
  6372  000478  C098  F0A5         	movff	?_fround,___ftadd@f2
  6373  00047C  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  6374  000480  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  6375  000484  EC0F  F00E         	call	___ftadd	;wreg free
  6376  000488  C0A2  F0E1         	movff	?___ftadd,printf@fval
  6377  00048C  C0A3  F0E2         	movff	?___ftadd+1,printf@fval+1
  6378  000490  C0A4  F0E3         	movff	?___ftadd+2,printf@fval+2
  6379  000494                     l6841:
  6380                           
  6381                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6382  000494  0100               	movlb	0	; () banked
  6383  000496  BFE0               	btfsc	(printf@exp+1)& (0+255),7,b
  6384  000498  D008               	goto	l6843
  6385  00049A  0100               	movlb	0	; () banked
  6386  00049C  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6387  00049E  E12A               	bnz	l6849
  6388  0004A0  0E0A               	movlw	10
  6389  0004A2  0100               	movlb	0	; () banked
  6390  0004A4  5DDF               	subwf	printf@exp& (0+255),w,b
  6391  0004A6  B0D8               	btfsc	status,0,c
  6392  0004A8  D025               	goto	l6849
  6393  0004AA                     l6843:
  6394                           
  6395                           ; BSR set to: 0
  6396  0004AA  0100               	movlb	0	; () banked
  6397  0004AC  51E1               	movf	printf@fval& (0+255),w,b
  6398  0004AE  0100               	movlb	0	; () banked
  6399  0004B0  11E2               	iorwf	(printf@fval+1)& (0+255),w,b
  6400  0004B2  0100               	movlb	0	; () banked
  6401  0004B4  11E3               	iorwf	(printf@fval+2)& (0+255),w,b
  6402  0004B6  B4D8               	btfsc	status,2,c
  6403  0004B8  D05F               	goto	l6863
  6404                           
  6405                           ; BSR set to: 0
  6406  0004BA  C0E1  F0AE         	movff	printf@fval,___fttol@f1
  6407  0004BE  C0E2  F0AF         	movff	printf@fval+1,___fttol@f1+1
  6408  0004C2  C0E3  F0B0         	movff	printf@fval+2,___fttol@f1+2
  6409  0004C6  EC8A  F012         	call	___fttol	;wreg free
  6410  0004CA  0100               	movlb	0	; () banked
  6411  0004CC  51AE               	movf	?___fttol& (0+255),w,b
  6412  0004CE  0100               	movlb	0	; () banked
  6413  0004D0  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  6414  0004D2  0100               	movlb	0	; () banked
  6415  0004D4  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  6416  0004D6  0100               	movlb	0	; () banked
  6417  0004D8  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  6418  0004DA  A4D8               	btfss	status,2,c
  6419  0004DC  D04D               	goto	l6863
  6420                           
  6421                           ; BSR set to: 0
  6422  0004DE  0100               	movlb	0	; () banked
  6423  0004E0  BFE0               	btfsc	(printf@exp+1)& (0+255),7,b
  6424  0004E2  D04A               	goto	l6863
  6425  0004E4  0100               	movlb	0	; () banked
  6426  0004E6  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6427  0004E8  E105               	bnz	l6849
  6428  0004EA  0E02               	movlw	2
  6429  0004EC  0100               	movlb	0	; () banked
  6430  0004EE  5DDF               	subwf	printf@exp& (0+255),w,b
  6431  0004F0  A0D8               	btfss	status,0,c
  6432  0004F2  D042               	goto	l6863
  6433  0004F4                     l6849:
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6437  0004F4  C0DB  F02F         	movff	printf@tmpval,___ftge@ff1
  6438  0004F8  C0DC  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  6439  0004FC  C0DD  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  6440  000500  0E70               	movlw	112
  6441  000502  6E32               	movwf	___ftge@ff2,c
  6442  000504  0E89               	movlw	137
  6443  000506  6E33               	movwf	___ftge@ff2+1,c
  6444  000508  0E40               	movlw	64
  6445  00050A  6E34               	movwf	___ftge@ff2+2,c
  6446  00050C  EC04  F01B         	call	___ftge	;wreg free
  6447  000510  B0D8               	btfsc	status,0,c
  6448  000512  D003               	goto	l6853
  6449                           
  6450                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6451  000514  0100               	movlb	0	; () banked
  6452  000516  0EF7               	movlw	247
  6453  000518  D002               	goto	L1
  6454  00051A                     l6853:
  6455                           
  6456                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6457  00051A  0100               	movlb	0	; () banked
  6458  00051C  0EF8               	movlw	248
  6459  00051E                     L1:
  6460  00051E  27DF               	addwf	printf@exp& (0+255),f,b
  6461  000520  0EFF               	movlw	255
  6462  000522  23E0               	addwfc	(printf@exp+1)& (0+255),f,b
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;doprnt.c: 1124: }
  6466                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6467                           
  6468                           ; BSR set to: 0
  6469  000524  0100               	movlb	0	; () banked
  6470  000526  51DF               	movf	printf@exp& (0+255),w,b
  6471  000528  EC04  F00C         	call	_scale
  6472  00052C  C098  F0DB         	movff	?_scale,printf@tmpval
  6473  000530  C099  F0DC         	movff	?_scale+1,printf@tmpval+1
  6474  000534  C09A  F0DD         	movff	?_scale+2,printf@tmpval+2
  6475                           
  6476                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6477  000538  C0E1  F023         	movff	printf@fval,__tdiv_to_l_@f1
  6478  00053C  C0E2  F024         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6479  000540  C0E3  F025         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6480  000544  C0DB  F026         	movff	printf@tmpval,__tdiv_to_l_@f2
  6481  000548  C0DC  F027         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6482  00054C  C0DD  F028         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6483  000550  EC2C  F013         	call	__tdiv_to_l_	;wreg free
  6484  000554  C023  F0E4         	movff	?__tdiv_to_l_,printf@val
  6485  000558  C024  F0E5         	movff	?__tdiv_to_l_+1,printf@val+1
  6486  00055C  C025  F0E6         	movff	?__tdiv_to_l_+2,printf@val+2
  6487  000560  C026  F0E7         	movff	?__tdiv_to_l_+3,printf@val+3
  6488                           
  6489                           ;doprnt.c: 1129: fval = 0.0;
  6490  000564  0E00               	movlw	0
  6491  000566  0100               	movlb	0	; () banked
  6492  000568  6FE1               	movwf	printf@fval& (0+255),b
  6493  00056A  0E00               	movlw	0
  6494  00056C  0100               	movlb	0	; () banked
  6495  00056E  6FE2               	movwf	(printf@fval+1)& (0+255),b
  6496  000570  0E00               	movlw	0
  6497  000572  0100               	movlb	0	; () banked
  6498  000574  6FE3               	movwf	(printf@fval+2)& (0+255),b
  6499                           
  6500                           ;doprnt.c: 1130: } else {
  6501  000576  D033               	goto	l6867
  6502  000578                     l6863:
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6506  000578  C0E1  F0AE         	movff	printf@fval,___fttol@f1
  6507  00057C  C0E2  F0AF         	movff	printf@fval+1,___fttol@f1+1
  6508  000580  C0E3  F0B0         	movff	printf@fval+2,___fttol@f1+2
  6509  000584  EC8A  F012         	call	___fttol	;wreg free
  6510  000588  C0AE  F0E4         	movff	?___fttol,printf@val
  6511  00058C  C0AF  F0E5         	movff	?___fttol+1,printf@val+1
  6512  000590  C0B0  F0E6         	movff	?___fttol+2,printf@val+2
  6513  000594  C0B1  F0E7         	movff	?___fttol+3,printf@val+3
  6514                           
  6515                           ;doprnt.c: 1132: fval -= (double)val;
  6516  000598  C0E1  F0AE         	movff	printf@fval,___ftsub@f1
  6517  00059C  C0E2  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  6518  0005A0  C0E3  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  6519  0005A4  C0E4  F02B         	movff	printf@val,___lltoft@c
  6520  0005A8  C0E5  F02C         	movff	printf@val+1,___lltoft@c+1
  6521  0005AC  C0E6  F02D         	movff	printf@val+2,___lltoft@c+2
  6522  0005B0  C0E7  F02E         	movff	printf@val+3,___lltoft@c+3
  6523  0005B4  ECC4  F01D         	call	___lltoft	;wreg free
  6524  0005B8  C02B  F0B1         	movff	?___lltoft,___ftsub@f2
  6525  0005BC  C02C  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  6526  0005C0  C02D  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  6527  0005C4  EC72  F01E         	call	___ftsub	;wreg free
  6528  0005C8  C0AE  F0E1         	movff	?___ftsub,printf@fval
  6529  0005CC  C0AF  F0E2         	movff	?___ftsub+1,printf@fval+1
  6530  0005D0  C0B0  F0E3         	movff	?___ftsub+2,printf@fval+2
  6531                           
  6532                           ;doprnt.c: 1133: exp = 0;
  6533  0005D4  0E00               	movlw	0
  6534  0005D6  0100               	movlb	0	; () banked
  6535  0005D8  6FE0               	movwf	(printf@exp+1)& (0+255),b
  6536  0005DA  0E00               	movlw	0
  6537  0005DC  6FDF               	movwf	printf@exp& (0+255),b
  6538  0005DE                     l6867:
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;doprnt.c: 1134: }
  6542                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6543  0005DE  0E01               	movlw	1
  6544  0005E0  0100               	movlb	0	; () banked
  6545  0005E2  6FEE               	movwf	printf@c& (0+255),b
  6546  0005E4                     l6869:
  6547                           
  6548                           ; BSR set to: 0
  6549  0005E4  0E0A               	movlw	10
  6550  0005E6  0100               	movlb	0	; () banked
  6551  0005E8  19EE               	xorwf	printf@c& (0+255),w,b
  6552  0005EA  B4D8               	btfsc	status,2,c
  6553  0005EC  D01E               	goto	l6881
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;doprnt.c: 1137: if(val < dpowers[c])
  6557                           
  6558                           ; BSR set to: 0
  6559                           
  6560                           ; BSR set to: 0
  6561  0005EE  0100               	movlb	0	; () banked
  6562  0005F0  51EE               	movf	printf@c& (0+255),w,b
  6563  0005F2  0D04               	mullw	4
  6564  0005F4  0EDF               	movlw	low _dpowers
  6565  0005F6  24F3               	addwf	prodl,w,c
  6566  0005F8  6EF6               	movwf	tblptrl,c
  6567  0005FA  0EFD               	movlw	high _dpowers
  6568  0005FC  20F4               	addwfc	prodh,w,c
  6569  0005FE  6EF7               	movwf	tblptrh,c
  6570  000600                     	if	0	;There are less than 3 active tblptr bytes
  6571  000600                     	endif
  6572  000600  0009               	tblrd		*+
  6573  000602  50F5               	movf	tablat,w,c
  6574  000604  0100               	movlb	0	; () banked
  6575  000606  5DE4               	subwf	printf@val& (0+255),w,b
  6576  000608  0009               	tblrd		*+
  6577  00060A  50F5               	movf	tablat,w,c
  6578  00060C  0100               	movlb	0	; () banked
  6579  00060E  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  6580  000610  0009               	tblrd		*+
  6581  000612  50F5               	movf	tablat,w,c
  6582  000614  0100               	movlb	0	; () banked
  6583  000616  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  6584  000618  0009               	tblrd		*+
  6585  00061A  50F5               	movf	tablat,w,c
  6586  00061C  0100               	movlb	0	; () banked
  6587  00061E  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  6588  000620  A0D8               	btfss	status,0,c
  6589  000622  D003               	goto	l6881
  6590                           
  6591                           ; BSR set to: 0
  6592                           
  6593                           ; BSR set to: 0
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;doprnt.c: 1138: break;
  6597  000624  0100               	movlb	0	; () banked
  6598  000626  2BEE               	incf	printf@c& (0+255),f,b
  6599  000628  D7DD               	goto	l6869
  6600  00062A                     l6881:
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;doprnt.c: 1142: width -= prec + c + exp;
  6604  00062A  C0EE  F0CB         	movff	printf@c,??_printf
  6605  00062E  0100               	movlb	0	; () banked
  6606  000630  6BCC               	clrf	(??_printf+1)& (0+255),b
  6607  000632  BFCB               	btfsc	??_printf& (0+255),7,b
  6608  000634  07CC               	decf	(??_printf+1)& (0+255),f,b
  6609  000636  0100               	movlb	0	; () banked
  6610  000638  51EC               	movf	printf@prec& (0+255),w,b
  6611  00063A  0100               	movlb	0	; () banked
  6612  00063C  27CB               	addwf	??_printf& (0+255),f,b
  6613  00063E  0100               	movlb	0	; () banked
  6614  000640  51ED               	movf	(printf@prec+1)& (0+255),w,b
  6615  000642  0100               	movlb	0	; () banked
  6616  000644  23CC               	addwfc	(??_printf+1)& (0+255),f,b
  6617  000646  0100               	movlb	0	; () banked
  6618  000648  51DF               	movf	printf@exp& (0+255),w,b
  6619  00064A  0100               	movlb	0	; () banked
  6620  00064C  27CB               	addwf	??_printf& (0+255),f,b
  6621  00064E  0100               	movlb	0	; () banked
  6622  000650  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6623  000652  0100               	movlb	0	; () banked
  6624  000654  23CC               	addwfc	(??_printf+1)& (0+255),f,b
  6625  000656  0100               	movlb	0	; () banked
  6626  000658  51CB               	movf	??_printf& (0+255),w,b
  6627  00065A  0100               	movlb	0	; () banked
  6628  00065C  5FE8               	subwf	printf@width& (0+255),f,b
  6629  00065E  0100               	movlb	0	; () banked
  6630  000660  51CC               	movf	(??_printf+1)& (0+255),w,b
  6631  000662  0100               	movlb	0	; () banked
  6632  000664  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  6633                           
  6634                           ;doprnt.c: 1143: if(
  6635                           ;doprnt.c: 1147: prec)
  6636  000666  0100               	movlb	0	; () banked
  6637  000668  51EC               	movf	printf@prec& (0+255),w,b
  6638  00066A  0100               	movlb	0	; () banked
  6639  00066C  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  6640  00066E  B4D8               	btfsc	status,2,c
  6641  000670  D004               	goto	l6885
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;doprnt.c: 1148: width--;
  6645  000672  0100               	movlb	0	; () banked
  6646  000674  07E8               	decf	printf@width& (0+255),f,b
  6647  000676  A0D8               	btfss	status,0,c
  6648  000678  07E9               	decf	(printf@width+1)& (0+255),f,b
  6649  00067A                     l6885:
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;doprnt.c: 1149: if(flag & 0x03)
  6653  00067A  0E03               	movlw	3
  6654  00067C  0100               	movlb	0	; () banked
  6655  00067E  15EA               	andwf	printf@flag& (0+255),w,b
  6656  000680  0100               	movlb	0	; () banked
  6657  000682  6FCB               	movwf	??_printf& (0+255),b
  6658  000684  0E00               	movlw	0
  6659  000686  0100               	movlb	0	; () banked
  6660  000688  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6661  00068A  0100               	movlb	0	; () banked
  6662  00068C  6FCC               	movwf	(??_printf+1)& (0+255),b
  6663  00068E  0100               	movlb	0	; () banked
  6664  000690  51CB               	movf	??_printf& (0+255),w,b
  6665  000692  0100               	movlb	0	; () banked
  6666  000694  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  6667  000696  B4D8               	btfsc	status,2,c
  6668  000698  D004               	goto	l6889
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;doprnt.c: 1150: width--;
  6672  00069A  0100               	movlb	0	; () banked
  6673  00069C  07E8               	decf	printf@width& (0+255),f,b
  6674  00069E  A0D8               	btfss	status,0,c
  6675  0006A0  07E9               	decf	(printf@width+1)& (0+255),f,b
  6676  0006A2                     l6889:
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;doprnt.c: 1153: if(flag & 0x04) {
  6680  0006A2  0100               	movlb	0	; () banked
  6681  0006A4  A5EA               	btfss	printf@flag& (0+255),2,b
  6682  0006A6  D02D               	goto	l6905
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;doprnt.c: 1157: if(flag & 0x03)
  6686  0006A8  0E03               	movlw	3
  6687  0006AA  0100               	movlb	0	; () banked
  6688  0006AC  15EA               	andwf	printf@flag& (0+255),w,b
  6689  0006AE  0100               	movlb	0	; () banked
  6690  0006B0  6FCB               	movwf	??_printf& (0+255),b
  6691  0006B2  0E00               	movlw	0
  6692  0006B4  0100               	movlb	0	; () banked
  6693  0006B6  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6694  0006B8  0100               	movlb	0	; () banked
  6695  0006BA  6FCC               	movwf	(??_printf+1)& (0+255),b
  6696  0006BC  0100               	movlb	0	; () banked
  6697  0006BE  51CB               	movf	??_printf& (0+255),w,b
  6698  0006C0  0100               	movlb	0	; () banked
  6699  0006C2  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  6700  0006C4  B4D8               	btfsc	status,2,c
  6701  0006C6  D00B               	goto	l6899
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;doprnt.c: 1159: (putch('-') );
  6705  0006C8  0E2D               	movlw	45
  6706  0006CA  ECFA  F01F         	call	_putch
  6707                           
  6708                           ;doprnt.c: 1168: while(width > 0) {
  6709  0006CE  D007               	goto	l6899
  6710  0006D0                     l6895:
  6711                           
  6712                           ;doprnt.c: 1169: (putch('0') );
  6713  0006D0  0E30               	movlw	48
  6714  0006D2  ECFA  F01F         	call	_putch
  6715                           
  6716                           ;doprnt.c: 1170: width--;
  6717  0006D6  0100               	movlb	0	; () banked
  6718  0006D8  07E8               	decf	printf@width& (0+255),f,b
  6719  0006DA  A0D8               	btfss	status,0,c
  6720  0006DC  07E9               	decf	(printf@width+1)& (0+255),f,b
  6721  0006DE                     l6899:
  6722  0006DE  0100               	movlb	0	; () banked
  6723  0006E0  BFE9               	btfsc	(printf@width+1)& (0+255),7,b
  6724  0006E2  D073               	goto	l6917
  6725  0006E4  0100               	movlb	0	; () banked
  6726  0006E6  51E9               	movf	(printf@width+1)& (0+255),w,b
  6727  0006E8  E1F3               	bnz	l6895
  6728  0006EA  0100               	movlb	0	; () banked
  6729  0006EC  05E8               	decf	printf@width& (0+255),w,b
  6730  0006EE  A0D8               	btfss	status,0,c
  6731  0006F0  D06C               	goto	l6917
  6732  0006F2  D7EE               	goto	l6895
  6733  0006F4                     l6901:
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;doprnt.c: 1181: (putch(' ') );
  6737  0006F4  0E20               	movlw	32
  6738  0006F6  ECFA  F01F         	call	_putch
  6739                           
  6740                           ;doprnt.c: 1182: width--;
  6741  0006FA  0100               	movlb	0	; () banked
  6742  0006FC  07E8               	decf	printf@width& (0+255),f,b
  6743  0006FE  A0D8               	btfss	status,0,c
  6744  000700  07E9               	decf	(printf@width+1)& (0+255),f,b
  6745  000702                     l6905:
  6746                           
  6747                           ; BSR set to: 0
  6748  000702  0100               	movlb	0	; () banked
  6749  000704  BFE9               	btfsc	(printf@width+1)& (0+255),7,b
  6750  000706  D007               	goto	l6907
  6751  000708  0100               	movlb	0	; () banked
  6752  00070A  51E9               	movf	(printf@width+1)& (0+255),w,b
  6753  00070C  E1F3               	bnz	l6901
  6754  00070E  0100               	movlb	0	; () banked
  6755  000710  05E8               	decf	printf@width& (0+255),w,b
  6756  000712  B0D8               	btfsc	status,0,c
  6757  000714  D7EF               	goto	l6901
  6758  000716                     l6907:
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;doprnt.c: 1183: }
  6762                           ;doprnt.c: 1188: if(flag & 0x03)
  6763  000716  0E03               	movlw	3
  6764  000718  0100               	movlb	0	; () banked
  6765  00071A  15EA               	andwf	printf@flag& (0+255),w,b
  6766  00071C  0100               	movlb	0	; () banked
  6767  00071E  6FCB               	movwf	??_printf& (0+255),b
  6768  000720  0E00               	movlw	0
  6769  000722  0100               	movlb	0	; () banked
  6770  000724  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6771  000726  0100               	movlb	0	; () banked
  6772  000728  6FCC               	movwf	(??_printf+1)& (0+255),b
  6773  00072A  0100               	movlb	0	; () banked
  6774  00072C  51CB               	movf	??_printf& (0+255),w,b
  6775  00072E  0100               	movlb	0	; () banked
  6776  000730  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  6777  000732  B4D8               	btfsc	status,2,c
  6778  000734  D04A               	goto	l6917
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;doprnt.c: 1190: (putch('-') );
  6782  000736  0E2D               	movlw	45
  6783  000738  ECFA  F01F         	call	_putch
  6784                           
  6785                           ;doprnt.c: 1195: }
  6786                           ;doprnt.c: 1196: while(c--) {
  6787  00073C  D046               	goto	l6917
  6788  00073E                     l6911:
  6789                           
  6790                           ;doprnt.c: 1200: {
  6791                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6792  00073E  C0E4  F023         	movff	printf@val,___lldiv@dividend
  6793  000742  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  6794  000746  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  6795  00074A  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  6796  00074E  0100               	movlb	0	; () banked
  6797  000750  51EE               	movf	printf@c& (0+255),w,b
  6798  000752  0D04               	mullw	4
  6799  000754  0EDF               	movlw	low _dpowers
  6800  000756  24F3               	addwf	prodl,w,c
  6801  000758  6EF6               	movwf	tblptrl,c
  6802  00075A  0EFD               	movlw	high _dpowers
  6803  00075C  20F4               	addwfc	prodh,w,c
  6804  00075E  6EF7               	movwf	tblptrh,c
  6805  000760                     	if	0	;There are less than 3 active tblptr bytes
  6806  000760                     	endif
  6807  000760  0009               	tblrd		*+
  6808  000762  CFF5 F027          	movff	tablat,___lldiv@divisor
  6809  000766  0009               	tblrd		*+
  6810  000768  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6811  00076C  0009               	tblrd		*+
  6812  00076E  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6813  000772  000A               	tblrd		*-
  6814  000774  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6815  000778  ECD0  F01B         	call	___lldiv	;wreg free
  6816  00077C  C023  F0DB         	movff	?___lldiv,printf@tmpval
  6817  000780  C024  F0DC         	movff	?___lldiv+1,printf@tmpval+1
  6818  000784  C025  F0DD         	movff	?___lldiv+2,printf@tmpval+2
  6819  000788  C026  F0DE         	movff	?___lldiv+3,printf@tmpval+3
  6820                           
  6821                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6822  00078C  C0DB  F030         	movff	printf@tmpval,___llmod@dividend
  6823  000790  C0DC  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6824  000794  C0DD  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  6825  000798  C0DE  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  6826  00079C  0E0A               	movlw	10
  6827  00079E  6E34               	movwf	___llmod@divisor,c
  6828  0007A0  0E00               	movlw	0
  6829  0007A2  6E35               	movwf	___llmod@divisor+1,c
  6830  0007A4  0E00               	movlw	0
  6831  0007A6  6E36               	movwf	___llmod@divisor+2,c
  6832  0007A8  0E00               	movlw	0
  6833  0007AA  6E37               	movwf	___llmod@divisor+3,c
  6834  0007AC  ECFE  F01C         	call	___llmod	;wreg free
  6835  0007B0  C030  F0DB         	movff	?___llmod,printf@tmpval
  6836  0007B4  C031  F0DC         	movff	?___llmod+1,printf@tmpval+1
  6837  0007B8  C032  F0DD         	movff	?___llmod+2,printf@tmpval+2
  6838  0007BC  C033  F0DE         	movff	?___llmod+3,printf@tmpval+3
  6839                           
  6840                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6841  0007C0  0100               	movlb	0	; () banked
  6842  0007C2  51DB               	movf	printf@tmpval& (0+255),w,b
  6843  0007C4  0F30               	addlw	48
  6844  0007C6  ECFA  F01F         	call	_putch
  6845  0007CA                     l6917:
  6846  0007CA  0100               	movlb	0	; () banked
  6847  0007CC  07EE               	decf	printf@c& (0+255),f,b
  6848  0007CE  0100               	movlb	0	; () banked
  6849  0007D0  29EE               	incf	printf@c& (0+255),w,b
  6850  0007D2  B4D8               	btfsc	status,2,c
  6851  0007D4  D008               	goto	l6923
  6852  0007D6  D7B3               	goto	l6911
  6853  0007D8                     l6919:
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;doprnt.c: 1208: (putch('0') );
  6857  0007D8  0E30               	movlw	48
  6858  0007DA  ECFA  F01F         	call	_putch
  6859                           
  6860                           ;doprnt.c: 1209: exp--;
  6861  0007DE  0100               	movlb	0	; () banked
  6862  0007E0  07DF               	decf	printf@exp& (0+255),f,b
  6863  0007E2  A0D8               	btfss	status,0,c
  6864  0007E4  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6865  0007E6                     l6923:
  6866                           
  6867                           ; BSR set to: 0
  6868  0007E6  0100               	movlb	0	; () banked
  6869  0007E8  BFE0               	btfsc	(printf@exp+1)& (0+255),7,b
  6870  0007EA  D007               	goto	l6925
  6871  0007EC  0100               	movlb	0	; () banked
  6872  0007EE  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6873  0007F0  E1F3               	bnz	l6919
  6874  0007F2  0100               	movlb	0	; () banked
  6875  0007F4  05DF               	decf	printf@exp& (0+255),w,b
  6876  0007F6  B0D8               	btfsc	status,0,c
  6877  0007F8  D7EF               	goto	l6919
  6878  0007FA                     l6925:
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;doprnt.c: 1210: }
  6882                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6883  0007FA  0100               	movlb	0	; () banked
  6884  0007FC  BFED               	btfsc	(printf@prec+1)& (0+255),7,b
  6885  0007FE  D00C               	goto	l830
  6886  000800  0100               	movlb	0	; () banked
  6887  000802  51ED               	movf	(printf@prec+1)& (0+255),w,b
  6888  000804  E105               	bnz	u7000
  6889  000806  0E09               	movlw	9
  6890  000808  0100               	movlb	0	; () banked
  6891  00080A  5DEC               	subwf	printf@prec& (0+255),w,b
  6892  00080C  A0D8               	btfss	status,0,c
  6893  00080E  D004               	goto	l830
  6894  000810                     u7000:
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6898  000810  0E08               	movlw	8
  6899  000812  0100               	movlb	0	; () banked
  6900  000814  6FEE               	movwf	printf@c& (0+255),b
  6901  000816  D002               	goto	l6929
  6902  000818                     l830:
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;doprnt.c: 1213: else
  6906                           ;doprnt.c: 1214: c = prec;
  6907  000818  C0EC  F0EE         	movff	printf@prec,printf@c
  6908  00081C                     l6929:
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;doprnt.c: 1215: prec -= c;
  6912  00081C  0100               	movlb	0	; () banked
  6913  00081E  51EE               	movf	printf@c& (0+255),w,b
  6914  000820  0100               	movlb	0	; () banked
  6915  000822  5FEC               	subwf	printf@prec& (0+255),f,b
  6916  000824  0E00               	movlw	0
  6917  000826  0100               	movlb	0	; () banked
  6918  000828  BFEE               	btfsc	printf@c& (0+255),7,b
  6919  00082A  0EFF               	movlw	255
  6920  00082C  0100               	movlb	0	; () banked
  6921  00082E  5BED               	subwfb	(printf@prec+1)& (0+255),f,b
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;doprnt.c: 1219: if(c)
  6925  000830  0100               	movlb	0	; () banked
  6926  000832  51EE               	movf	printf@c& (0+255),w,b
  6927  000834  0100               	movlb	0	; () banked
  6928  000836  B4D8               	btfsc	status,2,c
  6929  000838  D003               	goto	l6935
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;doprnt.c: 1221: (putch('.') );
  6933  00083A  0E2E               	movlw	46
  6934  00083C  ECFA  F01F         	call	_putch
  6935  000840                     l6935:
  6936                           
  6937                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6938  000840  0100               	movlb	0	; () banked
  6939  000842  51EE               	movf	printf@c& (0+255),w,b
  6940  000844  EC04  F00C         	call	_scale
  6941  000848  C098  F0D1         	movff	?_scale,_printf$1423
  6942  00084C  C099  F0D2         	movff	?_scale+1,_printf$1423+1
  6943  000850  C09A  F0D3         	movff	?_scale+2,_printf$1423+2
  6944                           
  6945                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6946  000854  C0E1  F08C         	movff	printf@fval,___ftmul@f2
  6947  000858  C0E2  F08D         	movff	printf@fval+1,___ftmul@f2+1
  6948  00085C  C0E3  F08E         	movff	printf@fval+2,___ftmul@f2+2
  6949  000860  C0D1  F089         	movff	_printf$1423,___ftmul@f1
  6950  000864  C0D2  F08A         	movff	_printf$1423+1,___ftmul@f1+1
  6951  000868  C0D3  F08B         	movff	_printf$1423+2,___ftmul@f1+2
  6952  00086C  EC2F  F011         	call	___ftmul	;wreg free
  6953  000870  C089  F0AE         	movff	?___ftmul,___fttol@f1
  6954  000874  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  6955  000878  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  6956  00087C  EC8A  F012         	call	___fttol	;wreg free
  6957  000880  C0AE  F0E4         	movff	?___fttol,printf@val
  6958  000884  C0AF  F0E5         	movff	?___fttol+1,printf@val+1
  6959  000888  C0B0  F0E6         	movff	?___fttol+2,printf@val+2
  6960  00088C  C0B1  F0E7         	movff	?___fttol+3,printf@val+3
  6961                           
  6962                           ;doprnt.c: 1228: while(c--) {
  6963  000890  D06D               	goto	l6945
  6964  000892                     l6939:
  6965                           
  6966                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6967  000892  C0E4  F023         	movff	printf@val,___lldiv@dividend
  6968  000896  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  6969  00089A  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  6970  00089E  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  6971  0008A2  0100               	movlb	0	; () banked
  6972  0008A4  51EE               	movf	printf@c& (0+255),w,b
  6973  0008A6  0D04               	mullw	4
  6974  0008A8  0EDF               	movlw	low _dpowers
  6975  0008AA  24F3               	addwf	prodl,w,c
  6976  0008AC  6EF6               	movwf	tblptrl,c
  6977  0008AE  0EFD               	movlw	high _dpowers
  6978  0008B0  20F4               	addwfc	prodh,w,c
  6979  0008B2  6EF7               	movwf	tblptrh,c
  6980  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  6981  0008B4                     	endif
  6982  0008B4  0009               	tblrd		*+
  6983  0008B6  CFF5 F027          	movff	tablat,___lldiv@divisor
  6984  0008BA  0009               	tblrd		*+
  6985  0008BC  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6986  0008C0  0009               	tblrd		*+
  6987  0008C2  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6988  0008C6  000A               	tblrd		*-
  6989  0008C8  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6990  0008CC  ECD0  F01B         	call	___lldiv	;wreg free
  6991  0008D0  C023  F0DB         	movff	?___lldiv,printf@tmpval
  6992  0008D4  C024  F0DC         	movff	?___lldiv+1,printf@tmpval+1
  6993  0008D8  C025  F0DD         	movff	?___lldiv+2,printf@tmpval+2
  6994  0008DC  C026  F0DE         	movff	?___lldiv+3,printf@tmpval+3
  6995                           
  6996                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6997  0008E0  C0DB  F030         	movff	printf@tmpval,___llmod@dividend
  6998  0008E4  C0DC  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6999  0008E8  C0DD  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  7000  0008EC  C0DE  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  7001  0008F0  0E0A               	movlw	10
  7002  0008F2  6E34               	movwf	___llmod@divisor,c
  7003  0008F4  0E00               	movlw	0
  7004  0008F6  6E35               	movwf	___llmod@divisor+1,c
  7005  0008F8  0E00               	movlw	0
  7006  0008FA  6E36               	movwf	___llmod@divisor+2,c
  7007  0008FC  0E00               	movlw	0
  7008  0008FE  6E37               	movwf	___llmod@divisor+3,c
  7009  000900  ECFE  F01C         	call	___llmod	;wreg free
  7010  000904  C030  F0DB         	movff	?___llmod,printf@tmpval
  7011  000908  C031  F0DC         	movff	?___llmod+1,printf@tmpval+1
  7012  00090C  C032  F0DD         	movff	?___llmod+2,printf@tmpval+2
  7013  000910  C033  F0DE         	movff	?___llmod+3,printf@tmpval+3
  7014                           
  7015                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7016  000914  0100               	movlb	0	; () banked
  7017  000916  51DB               	movf	printf@tmpval& (0+255),w,b
  7018  000918  0F30               	addlw	48
  7019  00091A  ECFA  F01F         	call	_putch
  7020                           
  7021                           ;doprnt.c: 1232: val %= dpowers[c];
  7022  00091E  C0E4  F030         	movff	printf@val,___llmod@dividend
  7023  000922  C0E5  F031         	movff	printf@val+1,___llmod@dividend+1
  7024  000926  C0E6  F032         	movff	printf@val+2,___llmod@dividend+2
  7025  00092A  C0E7  F033         	movff	printf@val+3,___llmod@dividend+3
  7026  00092E  0100               	movlb	0	; () banked
  7027  000930  51EE               	movf	printf@c& (0+255),w,b
  7028  000932  0D04               	mullw	4
  7029  000934  0EDF               	movlw	low _dpowers
  7030  000936  24F3               	addwf	prodl,w,c
  7031  000938  6EF6               	movwf	tblptrl,c
  7032  00093A  0EFD               	movlw	high _dpowers
  7033  00093C  20F4               	addwfc	prodh,w,c
  7034  00093E  6EF7               	movwf	tblptrh,c
  7035  000940                     	if	0	;There are less than 3 active tblptr bytes
  7036  000940                     	endif
  7037  000940  0009               	tblrd		*+
  7038  000942  CFF5 F034          	movff	tablat,___llmod@divisor
  7039  000946  0009               	tblrd		*+
  7040  000948  CFF5 F035          	movff	tablat,___llmod@divisor+1
  7041  00094C  0009               	tblrd		*+
  7042  00094E  CFF5 F036          	movff	tablat,___llmod@divisor+2
  7043  000952  000A               	tblrd		*-
  7044  000954  CFF5 F037          	movff	tablat,___llmod@divisor+3
  7045  000958  ECFE  F01C         	call	___llmod	;wreg free
  7046  00095C  C030  F0E4         	movff	?___llmod,printf@val
  7047  000960  C031  F0E5         	movff	?___llmod+1,printf@val+1
  7048  000964  C032  F0E6         	movff	?___llmod+2,printf@val+2
  7049  000968  C033  F0E7         	movff	?___llmod+3,printf@val+3
  7050  00096C                     l6945:
  7051  00096C  0100               	movlb	0	; () banked
  7052  00096E  07EE               	decf	printf@c& (0+255),f,b
  7053  000970  0100               	movlb	0	; () banked
  7054  000972  29EE               	incf	printf@c& (0+255),w,b
  7055  000974  B4D8               	btfsc	status,2,c
  7056  000976  D008               	goto	l6951
  7057  000978  D78C               	goto	l6939
  7058  00097A                     l6947:
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;doprnt.c: 1236: (putch('0') );
  7062  00097A  0E30               	movlw	48
  7063  00097C  ECFA  F01F         	call	_putch
  7064                           
  7065                           ;doprnt.c: 1237: prec--;
  7066  000980  0100               	movlb	0	; () banked
  7067  000982  07EC               	decf	printf@prec& (0+255),f,b
  7068  000984  A0D8               	btfss	status,0,c
  7069  000986  07ED               	decf	(printf@prec+1)& (0+255),f,b
  7070  000988                     l6951:
  7071                           
  7072                           ; BSR set to: 0
  7073  000988  0100               	movlb	0	; () banked
  7074  00098A  51EC               	movf	printf@prec& (0+255),w,b
  7075  00098C  0100               	movlb	0	; () banked
  7076  00098E  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  7077  000990  B4D8               	btfsc	status,2,c
  7078  000992  D22B               	goto	l7079
  7079  000994  D7F2               	goto	l6947
  7080  000996                     l790:
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;doprnt.c: 1246: }
  7084                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7085  000996  0100               	movlb	0	; () banked
  7086  000998  BFEA               	btfsc	printf@flag& (0+255),7,b
  7087  00099A  D034               	goto	l839
  7088                           
  7089                           ; BSR set to: 0
  7090                           ;doprnt.c: 1253: {
  7091                           ;doprnt.c: 1255: if(flag & 0x10)
  7092  00099C  0100               	movlb	0	; () banked
  7093  00099E  A9EA               	btfss	printf@flag& (0+255),4,b
  7094  0009A0  D00E               	goto	l6959
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  7098  0009A2  C0D9  FFD9         	movff	printf@ap,fsr2l
  7099  0009A6  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  7100  0009AA  CFDE F0E4          	movff	postinc2,printf@val
  7101  0009AE  CFDE F0E5          	movff	postinc2,printf@val+1
  7102  0009B2  CFDE F0E6          	movff	postinc2,printf@val+2
  7103  0009B6  CFDE F0E7          	movff	postinc2,printf@val+3
  7104                           
  7105                           ; BSR set to: 0
  7106  0009BA  0E04               	movlw	4
  7107  0009BC  D00F               	goto	L2
  7108  0009BE                     l6959:
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;doprnt.c: 1257: else
  7112                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7113  0009BE  C0D9  FFD9         	movff	printf@ap,fsr2l
  7114  0009C2  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  7115  0009C6  CFDE F0E4          	movff	postinc2,printf@val
  7116  0009CA  CFDD F0E5          	movff	postdec2,printf@val+1
  7117  0009CE  0100               	movlb	0	; () banked
  7118  0009D0  0E00               	movlw	0
  7119  0009D2  BFE5               	btfsc	(printf@val+1)& (0+255),7,b
  7120  0009D4  0EFF               	movlw	-1
  7121  0009D6  6FE6               	movwf	(printf@val+2)& (0+255),b
  7122  0009D8  6FE7               	movwf	(printf@val+3)& (0+255),b
  7123                           
  7124                           ; BSR set to: 0
  7125  0009DA  0E02               	movlw	2
  7126  0009DC                     L2:
  7127  0009DC  0100               	movlb	0	; () banked
  7128  0009DE  27D9               	addwf	printf@ap& (0+255),f,b
  7129  0009E0  0E00               	movlw	0
  7130  0009E2  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;doprnt.c: 1261: if((long)val < 0) {
  7134                           
  7135                           ; BSR set to: 0
  7136  0009E4  0100               	movlb	0	; () banked
  7137  0009E6  AFE7               	btfss	(printf@val+3)& (0+255),7,b
  7138  0009E8  D032               	goto	l6977
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;doprnt.c: 1262: flag |= 0x03;
  7142  0009EA  0E03               	movlw	3
  7143  0009EC  0100               	movlb	0	; () banked
  7144  0009EE  13EA               	iorwf	printf@flag& (0+255),f,b
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;doprnt.c: 1263: val = -val;
  7148  0009F0  0100               	movlb	0	; () banked
  7149  0009F2  1FE7               	comf	(printf@val+3)& (0+255),f,b
  7150  0009F4  1FE6               	comf	(printf@val+2)& (0+255),f,b
  7151  0009F6  1FE5               	comf	(printf@val+1)& (0+255),f,b
  7152  0009F8  6DE4               	negf	printf@val& (0+255),b
  7153  0009FA  0E00               	movlw	0
  7154  0009FC  23E5               	addwfc	(printf@val+1)& (0+255),f,b
  7155  0009FE  23E6               	addwfc	(printf@val+2)& (0+255),f,b
  7156  000A00  23E7               	addwfc	(printf@val+3)& (0+255),f,b
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;doprnt.c: 1264: }
  7160                           ;doprnt.c: 1266: }
  7161  000A02  D025               	goto	l6977
  7162  000A04                     l839:
  7163                           
  7164                           ; BSR set to: 0
  7165                           ;doprnt.c: 1268: else
  7166                           ;doprnt.c: 1273: {
  7167                           ;doprnt.c: 1281: if(flag & 0x10)
  7168  000A04  0100               	movlb	0	; () banked
  7169  000A06  A9EA               	btfss	printf@flag& (0+255),4,b
  7170  000A08  D00E               	goto	l6973
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7174  000A0A  C0D9  FFD9         	movff	printf@ap,fsr2l
  7175  000A0E  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  7176  000A12  CFDE F0E4          	movff	postinc2,printf@val
  7177  000A16  CFDE F0E5          	movff	postinc2,printf@val+1
  7178  000A1A  CFDE F0E6          	movff	postinc2,printf@val+2
  7179  000A1E  CFDE F0E7          	movff	postinc2,printf@val+3
  7180                           
  7181                           ; BSR set to: 0
  7182  000A22  0E04               	movlw	4
  7183  000A24  D010               	goto	L3
  7184  000A26                     l6973:
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;doprnt.c: 1283: else
  7188                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7189  000A26  C0D9  FFD9         	movff	printf@ap,fsr2l
  7190  000A2A  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  7191  000A2E  CFDE F0CB          	movff	postinc2,??_printf
  7192  000A32  CFDD F0CC          	movff	postdec2,??_printf+1
  7193  000A36  C0CB  F0E4         	movff	??_printf,printf@val
  7194  000A3A  C0CC  F0E5         	movff	??_printf+1,printf@val+1
  7195  000A3E  0100               	movlb	0	; () banked
  7196  000A40  6BE6               	clrf	(printf@val+2)& (0+255),b
  7197  000A42  6BE7               	clrf	(printf@val+3)& (0+255),b
  7198                           
  7199                           ; BSR set to: 0
  7200  000A44  0E02               	movlw	2
  7201  000A46                     L3:
  7202  000A46  0100               	movlb	0	; () banked
  7203  000A48  27D9               	addwf	printf@ap& (0+255),f,b
  7204  000A4A  0E00               	movlw	0
  7205  000A4C  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  7206  000A4E                     l6977:
  7207                           
  7208                           ; BSR set to: 0
  7209                           ;doprnt.c: 1287: }
  7210                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7211  000A4E  0100               	movlb	0	; () banked
  7212  000A50  51EC               	movf	printf@prec& (0+255),w,b
  7213  000A52  0100               	movlb	0	; () banked
  7214  000A54  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  7215  000A56  A4D8               	btfss	status,2,c
  7216  000A58  D05A               	goto	l7013
  7217                           
  7218                           ; BSR set to: 0
  7219  000A5A  0100               	movlb	0	; () banked
  7220  000A5C  51E4               	movf	printf@val& (0+255),w,b
  7221  000A5E  0100               	movlb	0	; () banked
  7222  000A60  11E5               	iorwf	(printf@val+1)& (0+255),w,b
  7223  000A62  0100               	movlb	0	; () banked
  7224  000A64  11E6               	iorwf	(printf@val+2)& (0+255),w,b
  7225  000A66  0100               	movlb	0	; () banked
  7226  000A68  11E7               	iorwf	(printf@val+3)& (0+255),w,b
  7227  000A6A  A4D8               	btfss	status,2,c
  7228  000A6C  D050               	goto	l7013
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;doprnt.c: 1291: prec++;
  7232  000A6E  0100               	movlb	0	; () banked
  7233  000A70  4BEC               	infsnz	printf@prec& (0+255),f,b
  7234  000A72  2BED               	incf	(printf@prec+1)& (0+255),f,b
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7238  000A74  D04C               	goto	l7013
  7239  000A76                     l6983:
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7243  000A76  0E01               	movlw	1
  7244  000A78  0100               	movlb	0	; () banked
  7245  000A7A  6FEE               	movwf	printf@c& (0+255),b
  7246  000A7C                     l6985:
  7247                           
  7248                           ; BSR set to: 0
  7249  000A7C  0E0A               	movlw	10
  7250  000A7E  0100               	movlb	0	; () banked
  7251  000A80  19EE               	xorwf	printf@c& (0+255),w,b
  7252  000A82  B4D8               	btfsc	status,2,c
  7253  000A84  D04D               	goto	l7015
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;doprnt.c: 1306: if(val < dpowers[c])
  7257                           
  7258                           ; BSR set to: 0
  7259                           
  7260                           ; BSR set to: 0
  7261  000A86  0100               	movlb	0	; () banked
  7262  000A88  51EE               	movf	printf@c& (0+255),w,b
  7263  000A8A  0D04               	mullw	4
  7264  000A8C  0EDF               	movlw	low _dpowers
  7265  000A8E  24F3               	addwf	prodl,w,c
  7266  000A90  6EF6               	movwf	tblptrl,c
  7267  000A92  0EFD               	movlw	high _dpowers
  7268  000A94  20F4               	addwfc	prodh,w,c
  7269  000A96  6EF7               	movwf	tblptrh,c
  7270  000A98                     	if	0	;There are less than 3 active tblptr bytes
  7271  000A98                     	endif
  7272  000A98  0009               	tblrd		*+
  7273  000A9A  50F5               	movf	tablat,w,c
  7274  000A9C  0100               	movlb	0	; () banked
  7275  000A9E  5DE4               	subwf	printf@val& (0+255),w,b
  7276  000AA0  0009               	tblrd		*+
  7277  000AA2  50F5               	movf	tablat,w,c
  7278  000AA4  0100               	movlb	0	; () banked
  7279  000AA6  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  7280  000AA8  0009               	tblrd		*+
  7281  000AAA  50F5               	movf	tablat,w,c
  7282  000AAC  0100               	movlb	0	; () banked
  7283  000AAE  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  7284  000AB0  0009               	tblrd		*+
  7285  000AB2  50F5               	movf	tablat,w,c
  7286  000AB4  0100               	movlb	0	; () banked
  7287  000AB6  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  7288  000AB8  A0D8               	btfss	status,0,c
  7289  000ABA  D032               	goto	l7015
  7290                           
  7291                           ; BSR set to: 0
  7292                           
  7293                           ; BSR set to: 0
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;doprnt.c: 1307: break;
  7297  000ABC  0100               	movlb	0	; () banked
  7298  000ABE  2BEE               	incf	printf@c& (0+255),f,b
  7299  000AC0  D7DD               	goto	l6985
  7300  000AC2                     l6997:
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7304  000AC2  0E01               	movlw	1
  7305  000AC4  0100               	movlb	0	; () banked
  7306  000AC6  6FEE               	movwf	printf@c& (0+255),b
  7307  000AC8                     l6999:
  7308                           
  7309                           ; BSR set to: 0
  7310  000AC8  0E08               	movlw	8
  7311  000ACA  0100               	movlb	0	; () banked
  7312  000ACC  19EE               	xorwf	printf@c& (0+255),w,b
  7313  000ACE  B4D8               	btfsc	status,2,c
  7314  000AD0  D027               	goto	l7015
  7315                           
  7316                           ; BSR set to: 0
  7317                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7318                           
  7319                           ; BSR set to: 0
  7320                           
  7321                           ; BSR set to: 0
  7322  000AD2  0100               	movlb	0	; () banked
  7323  000AD4  51EE               	movf	printf@c& (0+255),w,b
  7324  000AD6  0D04               	mullw	4
  7325  000AD8  0E55               	movlw	low _hexpowers
  7326  000ADA  24F3               	addwf	prodl,w,c
  7327  000ADC  6EF6               	movwf	tblptrl,c
  7328  000ADE  0EFE               	movlw	high _hexpowers
  7329  000AE0  20F4               	addwfc	prodh,w,c
  7330  000AE2  6EF7               	movwf	tblptrh,c
  7331  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  7332  000AE4                     	endif
  7333  000AE4  0009               	tblrd		*+
  7334  000AE6  50F5               	movf	tablat,w,c
  7335  000AE8  0100               	movlb	0	; () banked
  7336  000AEA  5DE4               	subwf	printf@val& (0+255),w,b
  7337  000AEC  0009               	tblrd		*+
  7338  000AEE  50F5               	movf	tablat,w,c
  7339  000AF0  0100               	movlb	0	; () banked
  7340  000AF2  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  7341  000AF4  0009               	tblrd		*+
  7342  000AF6  50F5               	movf	tablat,w,c
  7343  000AF8  0100               	movlb	0	; () banked
  7344  000AFA  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  7345  000AFC  0009               	tblrd		*+
  7346  000AFE  50F5               	movf	tablat,w,c
  7347  000B00  0100               	movlb	0	; () banked
  7348  000B02  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  7349  000B04  A0D8               	btfss	status,0,c
  7350  000B06  D00C               	goto	l7015
  7351                           
  7352                           ; BSR set to: 0
  7353                           
  7354                           ; BSR set to: 0
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;doprnt.c: 1318: break;
  7358  000B08  0100               	movlb	0	; () banked
  7359  000B0A  2BEE               	incf	printf@c& (0+255),f,b
  7360  000B0C  D7DD               	goto	l6999
  7361  000B0E                     l7013:
  7362                           
  7363                           ; BSR set to: 0
  7364  000B0E  0100               	movlb	0	; () banked
  7365  000B10  51EA               	movf	printf@flag& (0+255),w,b
  7366  000B12  0B80               	andlw	128
  7367                           
  7368                           ; Switch size 1, requested type "space"
  7369                           ; Number of cases is 2, Range of values is 0 to 128
  7370                           ; switch strategies available:
  7371                           ; Name         Instructions Cycles
  7372                           ; simple_byte            7     4 (average)
  7373                           ;	Chosen strategy is simple_byte
  7374  000B14  0A00               	xorlw	0	; case 0
  7375  000B16  B4D8               	btfsc	status,2,c
  7376  000B18  D7AE               	goto	l6983
  7377  000B1A  0A80               	xorlw	128	; case 128
  7378  000B1C  B4D8               	btfsc	status,2,c
  7379  000B1E  D7D1               	goto	l6997
  7380  000B20                     l7015:
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;doprnt.c: 1339: if(c < prec)
  7384  000B20  0E80               	movlw	128
  7385  000B22  0100               	movlb	0	; () banked
  7386  000B24  BFEE               	btfsc	printf@c& (0+255),7,b
  7387  000B26  0E7F               	movlw	127
  7388  000B28  0100               	movlb	0	; () banked
  7389  000B2A  6FCB               	movwf	??_printf& (0+255),b
  7390  000B2C  0100               	movlb	0	; () banked
  7391  000B2E  51EC               	movf	printf@prec& (0+255),w,b
  7392  000B30  0100               	movlb	0	; () banked
  7393  000B32  5DEE               	subwf	printf@c& (0+255),w,b
  7394  000B34  0100               	movlb	0	; () banked
  7395  000B36  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7396  000B38  0A80               	xorlw	128
  7397  000B3A  0100               	movlb	0	; () banked
  7398  000B3C  59CB               	subwfb	??_printf& (0+255),w,b
  7399  000B3E  B0D8               	btfsc	status,0,c
  7400  000B40  D003               	goto	l7019
  7401                           
  7402                           ; BSR set to: 0
  7403                           ;doprnt.c: 1340: c = prec;
  7404  000B42  C0EC  F0EE         	movff	printf@prec,printf@c
  7405  000B46  D018               	goto	l7023
  7406  000B48                     l7019:
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;doprnt.c: 1341: else if(prec < c)
  7410  000B48  0100               	movlb	0	; () banked
  7411  000B4A  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7412  000B4C  0A80               	xorlw	128
  7413  000B4E  0100               	movlb	0	; () banked
  7414  000B50  6FCB               	movwf	??_printf& (0+255),b
  7415  000B52  0100               	movlb	0	; () banked
  7416  000B54  51EE               	movf	printf@c& (0+255),w,b
  7417  000B56  0100               	movlb	0	; () banked
  7418  000B58  5DEC               	subwf	printf@prec& (0+255),w,b
  7419  000B5A  0E80               	movlw	128
  7420  000B5C  0100               	movlb	0	; () banked
  7421  000B5E  BFEE               	btfsc	printf@c& (0+255),7,b
  7422  000B60  0E7F               	movlw	127
  7423  000B62  0100               	movlb	0	; () banked
  7424  000B64  59CB               	subwfb	??_printf& (0+255),w,b
  7425  000B66  B0D8               	btfsc	status,0,c
  7426  000B68  D007               	goto	l7023
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;doprnt.c: 1342: prec = c;
  7430  000B6A  0100               	movlb	0	; () banked
  7431  000B6C  51EE               	movf	printf@c& (0+255),w,b
  7432  000B6E  0100               	movlb	0	; () banked
  7433  000B70  6FEC               	movwf	printf@prec& (0+255),b
  7434  000B72  6BED               	clrf	(printf@prec+1)& (0+255),b
  7435  000B74  BFEC               	btfsc	printf@prec& (0+255),7,b
  7436  000B76  07ED               	decf	(printf@prec+1)& (0+255),f,b
  7437  000B78                     l7023:
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7441  000B78  0100               	movlb	0	; () banked
  7442  000B7A  51E8               	movf	printf@width& (0+255),w,b
  7443  000B7C  0100               	movlb	0	; () banked
  7444  000B7E  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7445  000B80  B4D8               	btfsc	status,2,c
  7446  000B82  D014               	goto	l7029
  7447                           
  7448                           ; BSR set to: 0
  7449  000B84  0E03               	movlw	3
  7450  000B86  0100               	movlb	0	; () banked
  7451  000B88  15EA               	andwf	printf@flag& (0+255),w,b
  7452  000B8A  0100               	movlb	0	; () banked
  7453  000B8C  6FCB               	movwf	??_printf& (0+255),b
  7454  000B8E  0E00               	movlw	0
  7455  000B90  0100               	movlb	0	; () banked
  7456  000B92  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  7457  000B94  0100               	movlb	0	; () banked
  7458  000B96  6FCC               	movwf	(??_printf+1)& (0+255),b
  7459  000B98  0100               	movlb	0	; () banked
  7460  000B9A  51CB               	movf	??_printf& (0+255),w,b
  7461  000B9C  0100               	movlb	0	; () banked
  7462  000B9E  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  7463  000BA0  B4D8               	btfsc	status,2,c
  7464  000BA2  D004               	goto	l7029
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;doprnt.c: 1346: width--;
  7468  000BA4  0100               	movlb	0	; () banked
  7469  000BA6  07E8               	decf	printf@width& (0+255),f,b
  7470  000BA8  A0D8               	btfss	status,0,c
  7471  000BAA  07E9               	decf	(printf@width+1)& (0+255),f,b
  7472  000BAC                     l7029:
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7476  000BAC  0100               	movlb	0	; () banked
  7477  000BAE  ADEB               	btfss	(printf@flag+1)& (0+255),6,b
  7478  000BB0  D01E               	goto	l7037
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;doprnt.c: 1349: if(width > prec)
  7482  000BB2  0100               	movlb	0	; () banked
  7483  000BB4  51E8               	movf	printf@width& (0+255),w,b
  7484  000BB6  0100               	movlb	0	; () banked
  7485  000BB8  5DEC               	subwf	printf@prec& (0+255),w,b
  7486  000BBA  0100               	movlb	0	; () banked
  7487  000BBC  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7488  000BBE  0A80               	xorlw	128
  7489  000BC0  0100               	movlb	0	; () banked
  7490  000BC2  6FCB               	movwf	??_printf& (0+255),b
  7491  000BC4  0100               	movlb	0	; () banked
  7492  000BC6  51E9               	movf	(printf@width+1)& (0+255),w,b
  7493  000BC8  0A80               	xorlw	128
  7494  000BCA  0100               	movlb	0	; () banked
  7495  000BCC  59CB               	subwfb	??_printf& (0+255),w,b
  7496  000BCE  B0D8               	btfsc	status,0,c
  7497  000BD0  D009               	goto	l7035
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;doprnt.c: 1350: width -= prec;
  7501  000BD2  0100               	movlb	0	; () banked
  7502  000BD4  51EC               	movf	printf@prec& (0+255),w,b
  7503  000BD6  0100               	movlb	0	; () banked
  7504  000BD8  5FE8               	subwf	printf@width& (0+255),f,b
  7505  000BDA  0100               	movlb	0	; () banked
  7506  000BDC  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7507  000BDE  0100               	movlb	0	; () banked
  7508  000BE0  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  7509  000BE2  D005               	goto	l7037
  7510  000BE4                     l7035:
  7511                           
  7512                           ; BSR set to: 0
  7513                           ;doprnt.c: 1351: else
  7514                           ;doprnt.c: 1352: width = 0;
  7515  000BE4  0E00               	movlw	0
  7516  000BE6  0100               	movlb	0	; () banked
  7517  000BE8  6FE9               	movwf	(printf@width+1)& (0+255),b
  7518  000BEA  0E00               	movlw	0
  7519  000BEC  6FE8               	movwf	printf@width& (0+255),b
  7520  000BEE                     l7037:
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;doprnt.c: 1353: }
  7524                           ;doprnt.c: 1381: if(width > c)
  7525  000BEE  0E80               	movlw	128
  7526  000BF0  0100               	movlb	0	; () banked
  7527  000BF2  BFEE               	btfsc	printf@c& (0+255),7,b
  7528  000BF4  0E7F               	movlw	127
  7529  000BF6  0100               	movlb	0	; () banked
  7530  000BF8  6FCB               	movwf	??_printf& (0+255),b
  7531  000BFA  0100               	movlb	0	; () banked
  7532  000BFC  51E8               	movf	printf@width& (0+255),w,b
  7533  000BFE  0100               	movlb	0	; () banked
  7534  000C00  5DEE               	subwf	printf@c& (0+255),w,b
  7535  000C02  0100               	movlb	0	; () banked
  7536  000C04  51E9               	movf	(printf@width+1)& (0+255),w,b
  7537  000C06  0A80               	xorlw	128
  7538  000C08  0100               	movlb	0	; () banked
  7539  000C0A  59CB               	subwfb	??_printf& (0+255),w,b
  7540  000C0C  B0D8               	btfsc	status,0,c
  7541  000C0E  D00B               	goto	l7041
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;doprnt.c: 1382: width -= c;
  7545  000C10  0100               	movlb	0	; () banked
  7546  000C12  51EE               	movf	printf@c& (0+255),w,b
  7547  000C14  0100               	movlb	0	; () banked
  7548  000C16  5FE8               	subwf	printf@width& (0+255),f,b
  7549  000C18  0E00               	movlw	0
  7550  000C1A  0100               	movlb	0	; () banked
  7551  000C1C  BFEE               	btfsc	printf@c& (0+255),7,b
  7552  000C1E  0EFF               	movlw	255
  7553  000C20  0100               	movlb	0	; () banked
  7554  000C22  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  7555  000C24  D005               	goto	l7043
  7556  000C26                     l7041:
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;doprnt.c: 1383: else
  7560                           ;doprnt.c: 1384: width = 0;
  7561  000C26  0E00               	movlw	0
  7562  000C28  0100               	movlb	0	; () banked
  7563  000C2A  6FE9               	movwf	(printf@width+1)& (0+255),b
  7564  000C2C  0E00               	movlw	0
  7565  000C2E  6FE8               	movwf	printf@width& (0+255),b
  7566  000C30                     l7043:
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;doprnt.c: 1387: if(flag & 0x04) {
  7570  000C30  0100               	movlb	0	; () banked
  7571  000C32  A5EA               	btfss	printf@flag& (0+255),2,b
  7572  000C34  D021               	goto	l7055
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;doprnt.c: 1392: if(flag & 0x03)
  7576  000C36  0E03               	movlw	3
  7577  000C38  0100               	movlb	0	; () banked
  7578  000C3A  15EA               	andwf	printf@flag& (0+255),w,b
  7579  000C3C  0100               	movlb	0	; () banked
  7580  000C3E  6FCB               	movwf	??_printf& (0+255),b
  7581  000C40  0E00               	movlw	0
  7582  000C42  0100               	movlb	0	; () banked
  7583  000C44  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  7584  000C46  0100               	movlb	0	; () banked
  7585  000C48  6FCC               	movwf	(??_printf+1)& (0+255),b
  7586  000C4A  0100               	movlb	0	; () banked
  7587  000C4C  51CB               	movf	??_printf& (0+255),w,b
  7588  000C4E  0100               	movlb	0	; () banked
  7589  000C50  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  7590  000C52  B4D8               	btfsc	status,2,c
  7591  000C54  D003               	goto	l7049
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;doprnt.c: 1393: (putch('-') );
  7595  000C56  0E2D               	movlw	45
  7596  000C58  ECFA  F01F         	call	_putch
  7597  000C5C                     l7049:
  7598                           
  7599                           ;doprnt.c: 1415: if(width)
  7600  000C5C  0100               	movlb	0	; () banked
  7601  000C5E  51E8               	movf	printf@width& (0+255),w,b
  7602  000C60  0100               	movlb	0	; () banked
  7603  000C62  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7604  000C64  B4D8               	btfsc	status,2,c
  7605  000C66  D0B6               	goto	l7077
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;doprnt.c: 1417: (putch('0') );
  7609                           
  7610                           ; BSR set to: 0
  7611                           
  7612                           ;doprnt.c: 1416: do
  7613  000C68  0E30               	movlw	48
  7614  000C6A  ECFA  F01F         	call	_putch
  7615                           
  7616                           ;doprnt.c: 1418: while(--width);
  7617  000C6E  0100               	movlb	0	; () banked
  7618  000C70  07E8               	decf	printf@width& (0+255),f,b
  7619  000C72  A0D8               	btfss	status,0,c
  7620  000C74  07E9               	decf	(printf@width+1)& (0+255),f,b
  7621  000C76  D7F2               	goto	l7049
  7622  000C78                     l7055:
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;doprnt.c: 1422: {
  7626                           ;doprnt.c: 1424: if(width
  7627                           ;doprnt.c: 1428: )
  7628  000C78  0100               	movlb	0	; () banked
  7629  000C7A  51E8               	movf	printf@width& (0+255),w,b
  7630  000C7C  0100               	movlb	0	; () banked
  7631  000C7E  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7632  000C80  B4D8               	btfsc	status,2,c
  7633  000C82  D00D               	goto	l7061
  7634  000C84                     l7057:
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;doprnt.c: 1430: (putch(' ') );
  7638  000C84  0E20               	movlw	32
  7639  000C86  ECFA  F01F         	call	_putch
  7640                           
  7641                           ;doprnt.c: 1431: while(--width);
  7642  000C8A  0100               	movlb	0	; () banked
  7643  000C8C  07E8               	decf	printf@width& (0+255),f,b
  7644  000C8E  A0D8               	btfss	status,0,c
  7645  000C90  07E9               	decf	(printf@width+1)& (0+255),f,b
  7646  000C92  0100               	movlb	0	; () banked
  7647  000C94  51E8               	movf	printf@width& (0+255),w,b
  7648  000C96  0100               	movlb	0	; () banked
  7649  000C98  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7650  000C9A  A4D8               	btfss	status,2,c
  7651  000C9C  D7F3               	goto	l7057
  7652  000C9E                     l7061:
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;doprnt.c: 1438: if(flag & 0x03)
  7656  000C9E  0E03               	movlw	3
  7657  000CA0  0100               	movlb	0	; () banked
  7658  000CA2  15EA               	andwf	printf@flag& (0+255),w,b
  7659  000CA4  0100               	movlb	0	; () banked
  7660  000CA6  6FCB               	movwf	??_printf& (0+255),b
  7661  000CA8  0E00               	movlw	0
  7662  000CAA  0100               	movlb	0	; () banked
  7663  000CAC  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  7664  000CAE  0100               	movlb	0	; () banked
  7665  000CB0  6FCC               	movwf	(??_printf+1)& (0+255),b
  7666  000CB2  0100               	movlb	0	; () banked
  7667  000CB4  51CB               	movf	??_printf& (0+255),w,b
  7668  000CB6  0100               	movlb	0	; () banked
  7669  000CB8  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  7670  000CBA  B4D8               	btfsc	status,2,c
  7671  000CBC  D08B               	goto	l7077
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;doprnt.c: 1439: (putch('-') );
  7675  000CBE  0E2D               	movlw	45
  7676  000CC0  ECFA  F01F         	call	_putch
  7677                           
  7678                           ;doprnt.c: 1469: }
  7679                           ;doprnt.c: 1474: while(prec--) {
  7680  000CC4  D087               	goto	l7077
  7681  000CC6                     l7065:
  7682                           
  7683                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7684  000CC6  C0EC  F0CB         	movff	printf@prec,??_printf
  7685  000CCA  C0ED  F0CC         	movff	printf@prec+1,??_printf+1
  7686  000CCE  0100               	movlb	0	; () banked
  7687  000CD0  90D8               	bcf	status,0,c
  7688  000CD2  37CB               	rlcf	??_printf& (0+255),f,b
  7689  000CD4  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7690  000CD6  0100               	movlb	0	; () banked
  7691  000CD8  90D8               	bcf	status,0,c
  7692  000CDA  37CB               	rlcf	??_printf& (0+255),f,b
  7693  000CDC  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7694  000CDE  0EDF               	movlw	low _dpowers
  7695  000CE0  0100               	movlb	0	; () banked
  7696  000CE2  25CB               	addwf	??_printf& (0+255),w,b
  7697  000CE4  6EF6               	movwf	tblptrl,c
  7698  000CE6  0EFD               	movlw	high _dpowers
  7699  000CE8  21CC               	addwfc	(??_printf+1)& (0+255),w,b
  7700  000CEA  6EF7               	movwf	tblptrh,c
  7701  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  7702  000CEC                     	endif
  7703  000CEC  0009               	tblrd		*+
  7704  000CEE  CFF5 F027          	movff	tablat,___lldiv@divisor
  7705  000CF2  0009               	tblrd		*+
  7706  000CF4  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7707  000CF8  0009               	tblrd		*+
  7708  000CFA  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7709  000CFE  000A               	tblrd		*-
  7710  000D00  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7711  000D04  C0E4  F023         	movff	printf@val,___lldiv@dividend
  7712  000D08  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  7713  000D0C  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  7714  000D10  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  7715  000D14  ECD0  F01B         	call	___lldiv	;wreg free
  7716  000D18  C023  F030         	movff	?___lldiv,___llmod@dividend
  7717  000D1C  C024  F031         	movff	?___lldiv+1,___llmod@dividend+1
  7718  000D20  C025  F032         	movff	?___lldiv+2,___llmod@dividend+2
  7719  000D24  C026  F033         	movff	?___lldiv+3,___llmod@dividend+3
  7720  000D28  0E0A               	movlw	10
  7721  000D2A  6E34               	movwf	___llmod@divisor,c
  7722  000D2C  0E00               	movlw	0
  7723  000D2E  6E35               	movwf	___llmod@divisor+1,c
  7724  000D30  0E00               	movlw	0
  7725  000D32  6E36               	movwf	___llmod@divisor+2,c
  7726  000D34  0E00               	movlw	0
  7727  000D36  6E37               	movwf	___llmod@divisor+3,c
  7728  000D38  ECFE  F01C         	call	___llmod	;wreg free
  7729  000D3C  5030               	movf	?___llmod,w,c
  7730  000D3E  0F30               	addlw	48
  7731  000D40  0100               	movlb	0	; () banked
  7732  000D42  6FEE               	movwf	printf@c& (0+255),b
  7733                           
  7734                           ;doprnt.c: 1491: break;
  7735  000D44  D043               	goto	l7075
  7736  000D46                     l7067:
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;doprnt.c: 1499: {
  7740                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7741  000D46  C0E4  F023         	movff	printf@val,___lldiv@dividend
  7742  000D4A  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  7743  000D4E  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  7744  000D52  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  7745  000D56  C0EC  F0CB         	movff	printf@prec,??_printf
  7746  000D5A  C0ED  F0CC         	movff	printf@prec+1,??_printf+1
  7747  000D5E  0100               	movlb	0	; () banked
  7748  000D60  90D8               	bcf	status,0,c
  7749  000D62  37CB               	rlcf	??_printf& (0+255),f,b
  7750  000D64  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7751  000D66  0100               	movlb	0	; () banked
  7752  000D68  90D8               	bcf	status,0,c
  7753  000D6A  37CB               	rlcf	??_printf& (0+255),f,b
  7754  000D6C  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7755  000D6E  0E55               	movlw	low _hexpowers
  7756  000D70  0100               	movlb	0	; () banked
  7757  000D72  25CB               	addwf	??_printf& (0+255),w,b
  7758  000D74  6EF6               	movwf	tblptrl,c
  7759  000D76  0EFE               	movlw	high _hexpowers
  7760  000D78  21CC               	addwfc	(??_printf+1)& (0+255),w,b
  7761  000D7A  6EF7               	movwf	tblptrh,c
  7762  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  7763  000D7C                     	endif
  7764  000D7C  0009               	tblrd		*+
  7765  000D7E  CFF5 F027          	movff	tablat,___lldiv@divisor
  7766  000D82  0009               	tblrd		*+
  7767  000D84  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7768  000D88  0009               	tblrd		*+
  7769  000D8A  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7770  000D8E  000A               	tblrd		*-
  7771  000D90  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7772  000D94  ECD0  F01B         	call	___lldiv	;wreg free
  7773  000D98  5023               	movf	?___lldiv,w,c
  7774  000D9A  0B0F               	andlw	15
  7775  000D9C  0100               	movlb	0	; () banked
  7776  000D9E  6FD4               	movwf	printf@idx& (0+255),b
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7780  000DA0  0100               	movlb	0	; () banked
  7781  000DA2  51D4               	movf	printf@idx& (0+255),w,b
  7782  000DA4  0D01               	mullw	1
  7783  000DA6  0E43               	movlw	low STR_23
  7784  000DA8  24F3               	addwf	prodl,w,c
  7785  000DAA  6EF6               	movwf	tblptrl,c
  7786  000DAC  0EFF               	movlw	high STR_23
  7787  000DAE  20F4               	addwfc	prodh,w,c
  7788  000DB0  6EF7               	movwf	tblptrh,c
  7789  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  7790  000DB2                     	endif
  7791  000DB2  0008               	tblrd		*
  7792  000DB4  CFF5 F0EE          	movff	tablat,printf@c
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;doprnt.c: 1523: }
  7796                           
  7797                           ;doprnt.c: 1508: }
  7798                           ;doprnt.c: 1510: break;
  7799  000DB8  D009               	goto	l7075
  7800  000DBA                     l7073:
  7801  000DBA  0100               	movlb	0	; () banked
  7802  000DBC  51EA               	movf	printf@flag& (0+255),w,b
  7803  000DBE  0B80               	andlw	128
  7804                           
  7805                           ; Switch size 1, requested type "space"
  7806                           ; Number of cases is 2, Range of values is 0 to 128
  7807                           ; switch strategies available:
  7808                           ; Name         Instructions Cycles
  7809                           ; simple_byte            7     4 (average)
  7810                           ;	Chosen strategy is simple_byte
  7811  000DC0  0A00               	xorlw	0	; case 0
  7812  000DC2  B4D8               	btfsc	status,2,c
  7813  000DC4  D780               	goto	l7065
  7814  000DC6  0A80               	xorlw	128	; case 128
  7815  000DC8  B4D8               	btfsc	status,2,c
  7816  000DCA  D7BD               	goto	l7067
  7817  000DCC                     l7075:
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;doprnt.c: 1524: (putch(c) );
  7821  000DCC  0100               	movlb	0	; () banked
  7822  000DCE  51EE               	movf	printf@c& (0+255),w,b
  7823  000DD0  ECFA  F01F         	call	_putch
  7824  000DD4                     l7077:
  7825  000DD4  0100               	movlb	0	; () banked
  7826  000DD6  07EC               	decf	printf@prec& (0+255),f,b
  7827  000DD8  A0D8               	btfss	status,0,c
  7828  000DDA  07ED               	decf	(printf@prec+1)& (0+255),f,b
  7829  000DDC  0100               	movlb	0	; () banked
  7830  000DDE  29EC               	incf	printf@prec& (0+255),w,b
  7831  000DE0  E1EC               	bnz	l7073
  7832  000DE2  0100               	movlb	0	; () banked
  7833  000DE4  29ED               	incf	(printf@prec+1)& (0+255),w,b
  7834  000DE6  A4D8               	btfss	status,2,c
  7835  000DE8  D7E8               	goto	l7073
  7836  000DEA                     l7079:
  7837  000DEA  C0BD  FFF6         	movff	printf@f,tblptrl
  7838  000DEE  C0BE  FFF7         	movff	printf@f+1,tblptrh
  7839  000DF2  0100               	movlb	0	; () banked
  7840  000DF4  4BBD               	infsnz	printf@f& (0+255),f,b
  7841  000DF6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  7842  000DF8                     	if	0	;tblptru may be non-zero
  7843  000DF8                     	endif
  7844  000DF8                     	if	0	;tblptru may be non-zero
  7845  000DF8                     	endif
  7846  000DF8  0008               	tblrd		*
  7847  000DFA  CFF5 F0EE          	movff	tablat,printf@c
  7848  000DFE  0100               	movlb	0	; () banked
  7849  000E00  51EE               	movf	printf@c& (0+255),w,b
  7850  000E02  B4D8               	btfsc	status,2,c
  7851  000E04  0012               	return	
  7852  000E06  EF11  F000         	goto	l6713
  7853  000E0A                     __end_of_printf:
  7854                           	opt stack 0
  7855                           tblptru	equ	0xFF8
  7856                           tblptrh	equ	0xFF7
  7857                           tblptrl	equ	0xFF6
  7858                           tablat	equ	0xFF5
  7859                           prodh	equ	0xFF4
  7860                           prodl	equ	0xFF3
  7861                           postinc0	equ	0xFEE
  7862                           wreg	equ	0xFE8
  7863                           postdec1	equ	0xFE5
  7864                           fsr1l	equ	0xFE1
  7865                           indf2	equ	0xFDF
  7866                           postinc2	equ	0xFDE
  7867                           postdec2	equ	0xFDD
  7868                           fsr2h	equ	0xFDA
  7869                           fsr2l	equ	0xFD9
  7870                           status	equ	0xFD8
  7871                           
  7872 ;; *************** function _scale *****************
  7873 ;; Defined at:
  7874 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7875 ;; Parameters:    Size  Location     Type
  7876 ;;  scl             1    wreg     char 
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  scl             1   30[BANK0 ] char 
  7879 ;; Return value:  Size  Location     Type
  7880 ;;                  3   24[BANK0 ] char 
  7881 ;; Registers used:
  7882 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7888 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7891 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7892 ;;Total ram usage:        7 bytes
  7893 ;; Hardware stack levels used:    1
  7894 ;; Hardware stack levels required when called:    5
  7895 ;; This function calls:
  7896 ;;		___awdiv
  7897 ;;		___awmod
  7898 ;;		___ftmul
  7899 ;;		___wmul
  7900 ;; This function is called by:
  7901 ;;		_printf
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           	psect	text17
  7906  001808                     __ptext17:
  7907                           	opt stack 0
  7908  001808                     _scale:
  7909                           	opt stack 23
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;incstack = 0
  7913                           ;scale@scl stored from wreg
  7914  001808  0100               	movlb	0	; () banked
  7915  00180A  6F9E               	movwf	scale@scl& (0+255),b
  7916                           
  7917                           ;doprnt.c: 428: if(scl < 0) {
  7918  00180C  0100               	movlb	0	; () banked
  7919  00180E  AF9E               	btfss	scale@scl& (0+255),7,b
  7920  001810  D104               	goto	l6375
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;doprnt.c: 429: scl = -scl;
  7924  001812  0100               	movlb	0	; () banked
  7925  001814  6D9E               	negf	scale@scl& (0+255),b
  7926                           
  7927                           ;doprnt.c: 430: if(scl>=110)
  7928  001816  0100               	movlb	0	; () banked
  7929  001818  519E               	movf	scale@scl& (0+255),w,b
  7930  00181A  0A80               	xorlw	128
  7931  00181C  0F12               	addlw	-238
  7932  00181E  A0D8               	btfss	status,0,c
  7933  001820  D094               	goto	l6365
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7937  001822  0E00               	movlw	0
  7938  001824  6E34               	movwf	___wmul@multiplicand+1,c
  7939  001826  0E03               	movlw	3
  7940  001828  6E33               	movwf	___wmul@multiplicand,c
  7941  00182A  0E00               	movlw	0
  7942  00182C  6E2C               	movwf	___awdiv@divisor+1,c
  7943  00182E  0E0A               	movlw	10
  7944  001830  6E2B               	movwf	___awdiv@divisor,c
  7945  001832  0E00               	movlw	0
  7946  001834  6E26               	movwf	___awmod@divisor+1,c
  7947  001836  0E64               	movlw	100
  7948  001838  6E25               	movwf	___awmod@divisor,c
  7949  00183A  0100               	movlb	0	; () banked
  7950  00183C  519E               	movf	scale@scl& (0+255),w,b
  7951  00183E  6E23               	movwf	___awmod@dividend,c
  7952  001840  6A24               	clrf	___awmod@dividend+1,c
  7953  001842  BE23               	btfsc	___awmod@dividend,7,c
  7954  001844  0624               	decf	___awmod@dividend+1,f,c
  7955  001846  EC8E  F01C         	call	___awmod	;wreg free
  7956  00184A  C023  F029         	movff	?___awmod,___awdiv@dividend
  7957  00184E  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7958  001852  EC8E  F01B         	call	___awdiv	;wreg free
  7959  001856  0E09               	movlw	9
  7960  001858  2429               	addwf	?___awdiv,w,c
  7961  00185A  6E31               	movwf	___wmul@multiplier,c
  7962  00185C  0E00               	movlw	0
  7963  00185E  202A               	addwfc	?___awdiv+1,w,c
  7964  001860  6E32               	movwf	___wmul@multiplier+1,c
  7965  001862  ECD5  F01F         	call	___wmul	;wreg free
  7966  001866  0E07               	movlw	low __npowers_
  7967  001868  2431               	addwf	?___wmul,w,c
  7968  00186A  6EF6               	movwf	tblptrl,c
  7969  00186C  0EFE               	movlw	high __npowers_
  7970  00186E  2032               	addwfc	?___wmul+1,w,c
  7971  001870  6EF7               	movwf	tblptrh,c
  7972  001872                     	if	0	;There are less than 3 active tblptr bytes
  7973  001872                     	endif
  7974  001872  0009               	tblrd		*+
  7975  001874  CFF5 F08C          	movff	tablat,___ftmul@f2
  7976  001878  0009               	tblrd		*+
  7977  00187A  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7978  00187E  000A               	tblrd		*-
  7979  001880  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7980  001884  0E00               	movlw	0
  7981  001886  6E2C               	movwf	___awdiv@divisor+1,c
  7982  001888  0E64               	movlw	100
  7983  00188A  6E2B               	movwf	___awdiv@divisor,c
  7984  00188C  0100               	movlb	0	; () banked
  7985  00188E  519E               	movf	scale@scl& (0+255),w,b
  7986  001890  6E29               	movwf	___awdiv@dividend,c
  7987  001892  6A2A               	clrf	___awdiv@dividend+1,c
  7988  001894  BE29               	btfsc	___awdiv@dividend,7,c
  7989  001896  062A               	decf	___awdiv@dividend+1,f,c
  7990  001898  EC8E  F01B         	call	___awdiv	;wreg free
  7991  00189C  0E12               	movlw	18
  7992  00189E  2429               	addwf	?___awdiv,w,c
  7993  0018A0  6E31               	movwf	___wmul@multiplier,c
  7994  0018A2  0E00               	movlw	0
  7995  0018A4  202A               	addwfc	?___awdiv+1,w,c
  7996  0018A6  6E32               	movwf	___wmul@multiplier+1,c
  7997  0018A8  0E00               	movlw	0
  7998  0018AA  6E34               	movwf	___wmul@multiplicand+1,c
  7999  0018AC  0E03               	movlw	3
  8000  0018AE  6E33               	movwf	___wmul@multiplicand,c
  8001  0018B0  ECD5  F01F         	call	___wmul	;wreg free
  8002  0018B4  0E07               	movlw	low __npowers_
  8003  0018B6  2431               	addwf	?___wmul,w,c
  8004  0018B8  6EF6               	movwf	tblptrl,c
  8005  0018BA  0EFE               	movlw	high __npowers_
  8006  0018BC  2032               	addwfc	?___wmul+1,w,c
  8007  0018BE  6EF7               	movwf	tblptrh,c
  8008  0018C0                     	if	0	;There are less than 3 active tblptr bytes
  8009  0018C0                     	endif
  8010  0018C0  0009               	tblrd		*+
  8011  0018C2  CFF5 F089          	movff	tablat,___ftmul@f1
  8012  0018C6  0009               	tblrd		*+
  8013  0018C8  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8014  0018CC  000A               	tblrd		*-
  8015  0018CE  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8016  0018D2  EC2F  F011         	call	___ftmul	;wreg free
  8017  0018D6  C089  F09B         	movff	?___ftmul,_scale$1422
  8018  0018DA  C08A  F09C         	movff	?___ftmul+1,_scale$1422+1
  8019  0018DE  C08B  F09D         	movff	?___ftmul+2,_scale$1422+2
  8020                           
  8021                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8022  0018E2  C09B  F089         	movff	_scale$1422,___ftmul@f1
  8023  0018E6  C09C  F08A         	movff	_scale$1422+1,___ftmul@f1+1
  8024  0018EA  C09D  F08B         	movff	_scale$1422+2,___ftmul@f1+2
  8025  0018EE  0E00               	movlw	0
  8026  0018F0  6E34               	movwf	___wmul@multiplicand+1,c
  8027  0018F2  0E03               	movlw	3
  8028  0018F4  6E33               	movwf	___wmul@multiplicand,c
  8029  0018F6  0E00               	movlw	0
  8030  0018F8  6E26               	movwf	___awmod@divisor+1,c
  8031  0018FA  0E0A               	movlw	10
  8032  0018FC  6E25               	movwf	___awmod@divisor,c
  8033  0018FE  0100               	movlb	0	; () banked
  8034  001900  519E               	movf	scale@scl& (0+255),w,b
  8035  001902  6E23               	movwf	___awmod@dividend,c
  8036  001904  6A24               	clrf	___awmod@dividend+1,c
  8037  001906  BE23               	btfsc	___awmod@dividend,7,c
  8038  001908  0624               	decf	___awmod@dividend+1,f,c
  8039  00190A  EC8E  F01C         	call	___awmod	;wreg free
  8040  00190E  C023  F031         	movff	?___awmod,___wmul@multiplier
  8041  001912  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8042  001916  ECD5  F01F         	call	___wmul	;wreg free
  8043  00191A  0E07               	movlw	low __npowers_
  8044  00191C  2431               	addwf	?___wmul,w,c
  8045  00191E  6EF6               	movwf	tblptrl,c
  8046  001920  0EFE               	movlw	high __npowers_
  8047  001922  2032               	addwfc	?___wmul+1,w,c
  8048  001924  6EF7               	movwf	tblptrh,c
  8049  001926                     	if	0	;There are less than 3 active tblptr bytes
  8050  001926                     	endif
  8051  001926  0009               	tblrd		*+
  8052  001928  CFF5 F08C          	movff	tablat,___ftmul@f2
  8053  00192C  0009               	tblrd		*+
  8054  00192E  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8055  001932  000A               	tblrd		*-
  8056  001934  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8057  001938  EC2F  F011         	call	___ftmul	;wreg free
  8058  00193C  C089  F098         	movff	?___ftmul,?_scale
  8059  001940  C08A  F099         	movff	?___ftmul+1,?_scale+1
  8060  001944  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  8061  001948  0012               	return	
  8062  00194A                     l6365:
  8063                           
  8064                           ;doprnt.c: 432: else if(scl > 10)
  8065  00194A  0100               	movlb	0	; () banked
  8066  00194C  519E               	movf	scale@scl& (0+255),w,b
  8067  00194E  0A80               	xorlw	128
  8068  001950  0F75               	addlw	-139
  8069  001952  A0D8               	btfss	status,0,c
  8070  001954  D04F               	goto	l6371
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8074  001956  0E00               	movlw	0
  8075  001958  6E2C               	movwf	___awdiv@divisor+1,c
  8076  00195A  0E0A               	movlw	10
  8077  00195C  6E2B               	movwf	___awdiv@divisor,c
  8078  00195E  0100               	movlb	0	; () banked
  8079  001960  519E               	movf	scale@scl& (0+255),w,b
  8080  001962  6E29               	movwf	___awdiv@dividend,c
  8081  001964  6A2A               	clrf	___awdiv@dividend+1,c
  8082  001966  BE29               	btfsc	___awdiv@dividend,7,c
  8083  001968  062A               	decf	___awdiv@dividend+1,f,c
  8084  00196A  EC8E  F01B         	call	___awdiv	;wreg free
  8085  00196E  0E09               	movlw	9
  8086  001970  2429               	addwf	?___awdiv,w,c
  8087  001972  6E31               	movwf	___wmul@multiplier,c
  8088  001974  0E00               	movlw	0
  8089  001976  202A               	addwfc	?___awdiv+1,w,c
  8090  001978  6E32               	movwf	___wmul@multiplier+1,c
  8091  00197A  0E00               	movlw	0
  8092  00197C  6E34               	movwf	___wmul@multiplicand+1,c
  8093  00197E  0E03               	movlw	3
  8094  001980  6E33               	movwf	___wmul@multiplicand,c
  8095  001982  ECD5  F01F         	call	___wmul	;wreg free
  8096  001986  0E07               	movlw	low __npowers_
  8097  001988  2431               	addwf	?___wmul,w,c
  8098  00198A  6EF6               	movwf	tblptrl,c
  8099  00198C  0EFE               	movlw	high __npowers_
  8100  00198E  2032               	addwfc	?___wmul+1,w,c
  8101  001990  6EF7               	movwf	tblptrh,c
  8102  001992                     	if	0	;There are less than 3 active tblptr bytes
  8103  001992                     	endif
  8104  001992  0009               	tblrd		*+
  8105  001994  CFF5 F089          	movff	tablat,___ftmul@f1
  8106  001998  0009               	tblrd		*+
  8107  00199A  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8108  00199E  000A               	tblrd		*-
  8109  0019A0  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8110  0019A4  0E00               	movlw	0
  8111  0019A6  6E34               	movwf	___wmul@multiplicand+1,c
  8112  0019A8  0E03               	movlw	3
  8113  0019AA  6E33               	movwf	___wmul@multiplicand,c
  8114  0019AC  0E00               	movlw	0
  8115  0019AE  6E26               	movwf	___awmod@divisor+1,c
  8116  0019B0  0E0A               	movlw	10
  8117  0019B2  6E25               	movwf	___awmod@divisor,c
  8118  0019B4  0100               	movlb	0	; () banked
  8119  0019B6  519E               	movf	scale@scl& (0+255),w,b
  8120  0019B8  6E23               	movwf	___awmod@dividend,c
  8121  0019BA  6A24               	clrf	___awmod@dividend+1,c
  8122  0019BC  BE23               	btfsc	___awmod@dividend,7,c
  8123  0019BE  0624               	decf	___awmod@dividend+1,f,c
  8124  0019C0  EC8E  F01C         	call	___awmod	;wreg free
  8125  0019C4  C023  F031         	movff	?___awmod,___wmul@multiplier
  8126  0019C8  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8127  0019CC  ECD5  F01F         	call	___wmul	;wreg free
  8128  0019D0  0E07               	movlw	low __npowers_
  8129  0019D2  2431               	addwf	?___wmul,w,c
  8130  0019D4  6EF6               	movwf	tblptrl,c
  8131  0019D6  0EFE               	movlw	high __npowers_
  8132  0019D8  2032               	addwfc	?___wmul+1,w,c
  8133  0019DA  6EF7               	movwf	tblptrh,c
  8134  0019DC                     	if	0	;There are less than 3 active tblptr bytes
  8135  0019DC                     	endif
  8136  0019DC  0009               	tblrd		*+
  8137  0019DE  CFF5 F08C          	movff	tablat,___ftmul@f2
  8138  0019E2  0009               	tblrd		*+
  8139  0019E4  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8140  0019E8  000A               	tblrd		*-
  8141  0019EA  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8142  0019EE  EC2F  F011         	call	___ftmul	;wreg free
  8143  0019F2  D7A4               	goto	L4
  8144  0019F4                     l6371:
  8145                           
  8146                           ;doprnt.c: 434: return _npowers_[scl];
  8147  0019F4  0100               	movlb	0	; () banked
  8148  0019F6  519E               	movf	scale@scl& (0+255),w,b
  8149  0019F8  0D03               	mullw	3
  8150  0019FA  0E07               	movlw	low __npowers_
  8151  0019FC  24F3               	addwf	prodl,w,c
  8152  0019FE  6EF6               	movwf	tblptrl,c
  8153  001A00  0EFE               	movlw	high __npowers_
  8154  001A02  20F4               	addwfc	prodh,w,c
  8155  001A04  6EF7               	movwf	tblptrh,c
  8156  001A06                     	if	0	;There are less than 3 active tblptr bytes
  8157  001A06                     	endif
  8158  001A06  0009               	tblrd		*+
  8159  001A08  CFF5 F098          	movff	tablat,?_scale
  8160  001A0C  0009               	tblrd		*+
  8161  001A0E  CFF5 F099          	movff	tablat,?_scale+1
  8162  001A12  000A               	tblrd		*-
  8163  001A14  CFF5 F09A          	movff	tablat,?_scale+2
  8164                           
  8165                           ; BSR set to: 0
  8166  001A18  0012               	return	
  8167  001A1A                     l6375:
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;doprnt.c: 435: }
  8171                           ;doprnt.c: 436: if(scl>=110)
  8172  001A1A  0100               	movlb	0	; () banked
  8173  001A1C  519E               	movf	scale@scl& (0+255),w,b
  8174  001A1E  0A80               	xorlw	128
  8175  001A20  0F12               	addlw	-238
  8176  001A22  A0D8               	btfss	status,0,c
  8177  001A24  D094               	goto	l6383
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8181  001A26  0E00               	movlw	0
  8182  001A28  6E34               	movwf	___wmul@multiplicand+1,c
  8183  001A2A  0E03               	movlw	3
  8184  001A2C  6E33               	movwf	___wmul@multiplicand,c
  8185  001A2E  0E00               	movlw	0
  8186  001A30  6E2C               	movwf	___awdiv@divisor+1,c
  8187  001A32  0E0A               	movlw	10
  8188  001A34  6E2B               	movwf	___awdiv@divisor,c
  8189  001A36  0E00               	movlw	0
  8190  001A38  6E26               	movwf	___awmod@divisor+1,c
  8191  001A3A  0E64               	movlw	100
  8192  001A3C  6E25               	movwf	___awmod@divisor,c
  8193  001A3E  0100               	movlb	0	; () banked
  8194  001A40  519E               	movf	scale@scl& (0+255),w,b
  8195  001A42  6E23               	movwf	___awmod@dividend,c
  8196  001A44  6A24               	clrf	___awmod@dividend+1,c
  8197  001A46  BE23               	btfsc	___awmod@dividend,7,c
  8198  001A48  0624               	decf	___awmod@dividend+1,f,c
  8199  001A4A  EC8E  F01C         	call	___awmod	;wreg free
  8200  001A4E  C023  F029         	movff	?___awmod,___awdiv@dividend
  8201  001A52  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  8202  001A56  EC8E  F01B         	call	___awdiv	;wreg free
  8203  001A5A  0E09               	movlw	9
  8204  001A5C  2429               	addwf	?___awdiv,w,c
  8205  001A5E  6E31               	movwf	___wmul@multiplier,c
  8206  001A60  0E00               	movlw	0
  8207  001A62  202A               	addwfc	?___awdiv+1,w,c
  8208  001A64  6E32               	movwf	___wmul@multiplier+1,c
  8209  001A66  ECD5  F01F         	call	___wmul	;wreg free
  8210  001A6A  0E2E               	movlw	low __powers_
  8211  001A6C  2431               	addwf	?___wmul,w,c
  8212  001A6E  6EF6               	movwf	tblptrl,c
  8213  001A70  0EFE               	movlw	high __powers_
  8214  001A72  2032               	addwfc	?___wmul+1,w,c
  8215  001A74  6EF7               	movwf	tblptrh,c
  8216  001A76                     	if	0	;There are less than 3 active tblptr bytes
  8217  001A76                     	endif
  8218  001A76  0009               	tblrd		*+
  8219  001A78  CFF5 F08C          	movff	tablat,___ftmul@f2
  8220  001A7C  0009               	tblrd		*+
  8221  001A7E  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8222  001A82  000A               	tblrd		*-
  8223  001A84  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8224  001A88  0E00               	movlw	0
  8225  001A8A  6E2C               	movwf	___awdiv@divisor+1,c
  8226  001A8C  0E64               	movlw	100
  8227  001A8E  6E2B               	movwf	___awdiv@divisor,c
  8228  001A90  0100               	movlb	0	; () banked
  8229  001A92  519E               	movf	scale@scl& (0+255),w,b
  8230  001A94  6E29               	movwf	___awdiv@dividend,c
  8231  001A96  6A2A               	clrf	___awdiv@dividend+1,c
  8232  001A98  BE29               	btfsc	___awdiv@dividend,7,c
  8233  001A9A  062A               	decf	___awdiv@dividend+1,f,c
  8234  001A9C  EC8E  F01B         	call	___awdiv	;wreg free
  8235  001AA0  0E12               	movlw	18
  8236  001AA2  2429               	addwf	?___awdiv,w,c
  8237  001AA4  6E31               	movwf	___wmul@multiplier,c
  8238  001AA6  0E00               	movlw	0
  8239  001AA8  202A               	addwfc	?___awdiv+1,w,c
  8240  001AAA  6E32               	movwf	___wmul@multiplier+1,c
  8241  001AAC  0E00               	movlw	0
  8242  001AAE  6E34               	movwf	___wmul@multiplicand+1,c
  8243  001AB0  0E03               	movlw	3
  8244  001AB2  6E33               	movwf	___wmul@multiplicand,c
  8245  001AB4  ECD5  F01F         	call	___wmul	;wreg free
  8246  001AB8  0E2E               	movlw	low __powers_
  8247  001ABA  2431               	addwf	?___wmul,w,c
  8248  001ABC  6EF6               	movwf	tblptrl,c
  8249  001ABE  0EFE               	movlw	high __powers_
  8250  001AC0  2032               	addwfc	?___wmul+1,w,c
  8251  001AC2  6EF7               	movwf	tblptrh,c
  8252  001AC4                     	if	0	;There are less than 3 active tblptr bytes
  8253  001AC4                     	endif
  8254  001AC4  0009               	tblrd		*+
  8255  001AC6  CFF5 F089          	movff	tablat,___ftmul@f1
  8256  001ACA  0009               	tblrd		*+
  8257  001ACC  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8258  001AD0  000A               	tblrd		*-
  8259  001AD2  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8260  001AD6  EC2F  F011         	call	___ftmul	;wreg free
  8261  001ADA  C089  F09B         	movff	?___ftmul,_scale$1422
  8262  001ADE  C08A  F09C         	movff	?___ftmul+1,_scale$1422+1
  8263  001AE2  C08B  F09D         	movff	?___ftmul+2,_scale$1422+2
  8264                           
  8265                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8266  001AE6  C09B  F089         	movff	_scale$1422,___ftmul@f1
  8267  001AEA  C09C  F08A         	movff	_scale$1422+1,___ftmul@f1+1
  8268  001AEE  C09D  F08B         	movff	_scale$1422+2,___ftmul@f1+2
  8269  001AF2  0E00               	movlw	0
  8270  001AF4  6E34               	movwf	___wmul@multiplicand+1,c
  8271  001AF6  0E03               	movlw	3
  8272  001AF8  6E33               	movwf	___wmul@multiplicand,c
  8273  001AFA  0E00               	movlw	0
  8274  001AFC  6E26               	movwf	___awmod@divisor+1,c
  8275  001AFE  0E0A               	movlw	10
  8276  001B00  6E25               	movwf	___awmod@divisor,c
  8277  001B02  0100               	movlb	0	; () banked
  8278  001B04  519E               	movf	scale@scl& (0+255),w,b
  8279  001B06  6E23               	movwf	___awmod@dividend,c
  8280  001B08  6A24               	clrf	___awmod@dividend+1,c
  8281  001B0A  BE23               	btfsc	___awmod@dividend,7,c
  8282  001B0C  0624               	decf	___awmod@dividend+1,f,c
  8283  001B0E  EC8E  F01C         	call	___awmod	;wreg free
  8284  001B12  C023  F031         	movff	?___awmod,___wmul@multiplier
  8285  001B16  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8286  001B1A  ECD5  F01F         	call	___wmul	;wreg free
  8287  001B1E  0E2E               	movlw	low __powers_
  8288  001B20  2431               	addwf	?___wmul,w,c
  8289  001B22  6EF6               	movwf	tblptrl,c
  8290  001B24  0EFE               	movlw	high __powers_
  8291  001B26  2032               	addwfc	?___wmul+1,w,c
  8292  001B28  6EF7               	movwf	tblptrh,c
  8293  001B2A                     	if	0	;There are less than 3 active tblptr bytes
  8294  001B2A                     	endif
  8295  001B2A  0009               	tblrd		*+
  8296  001B2C  CFF5 F08C          	movff	tablat,___ftmul@f2
  8297  001B30  0009               	tblrd		*+
  8298  001B32  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8299  001B36  000A               	tblrd		*-
  8300  001B38  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8301  001B3C  EC2F  F011         	call	___ftmul	;wreg free
  8302  001B40  C089  F098         	movff	?___ftmul,?_scale
  8303  001B44  C08A  F099         	movff	?___ftmul+1,?_scale+1
  8304  001B48  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  8305  001B4C  0012               	return	
  8306  001B4E                     l6383:
  8307                           
  8308                           ;doprnt.c: 438: else if(scl > 10)
  8309  001B4E  0100               	movlb	0	; () banked
  8310  001B50  519E               	movf	scale@scl& (0+255),w,b
  8311  001B52  0A80               	xorlw	128
  8312  001B54  0F75               	addlw	-139
  8313  001B56  A0D8               	btfss	status,0,c
  8314  001B58  D04F               	goto	l6389
  8315                           
  8316                           ; BSR set to: 0
  8317                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8318  001B5A  0E00               	movlw	0
  8319  001B5C  6E2C               	movwf	___awdiv@divisor+1,c
  8320  001B5E  0E0A               	movlw	10
  8321  001B60  6E2B               	movwf	___awdiv@divisor,c
  8322  001B62  0100               	movlb	0	; () banked
  8323  001B64  519E               	movf	scale@scl& (0+255),w,b
  8324  001B66  6E29               	movwf	___awdiv@dividend,c
  8325  001B68  6A2A               	clrf	___awdiv@dividend+1,c
  8326  001B6A  BE29               	btfsc	___awdiv@dividend,7,c
  8327  001B6C  062A               	decf	___awdiv@dividend+1,f,c
  8328  001B6E  EC8E  F01B         	call	___awdiv	;wreg free
  8329  001B72  0E09               	movlw	9
  8330  001B74  2429               	addwf	?___awdiv,w,c
  8331  001B76  6E31               	movwf	___wmul@multiplier,c
  8332  001B78  0E00               	movlw	0
  8333  001B7A  202A               	addwfc	?___awdiv+1,w,c
  8334  001B7C  6E32               	movwf	___wmul@multiplier+1,c
  8335  001B7E  0E00               	movlw	0
  8336  001B80  6E34               	movwf	___wmul@multiplicand+1,c
  8337  001B82  0E03               	movlw	3
  8338  001B84  6E33               	movwf	___wmul@multiplicand,c
  8339  001B86  ECD5  F01F         	call	___wmul	;wreg free
  8340  001B8A  0E2E               	movlw	low __powers_
  8341  001B8C  2431               	addwf	?___wmul,w,c
  8342  001B8E  6EF6               	movwf	tblptrl,c
  8343  001B90  0EFE               	movlw	high __powers_
  8344  001B92  2032               	addwfc	?___wmul+1,w,c
  8345  001B94  6EF7               	movwf	tblptrh,c
  8346  001B96                     	if	0	;There are less than 3 active tblptr bytes
  8347  001B96                     	endif
  8348  001B96  0009               	tblrd		*+
  8349  001B98  CFF5 F089          	movff	tablat,___ftmul@f1
  8350  001B9C  0009               	tblrd		*+
  8351  001B9E  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8352  001BA2  000A               	tblrd		*-
  8353  001BA4  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8354  001BA8  0E00               	movlw	0
  8355  001BAA  6E34               	movwf	___wmul@multiplicand+1,c
  8356  001BAC  0E03               	movlw	3
  8357  001BAE  6E33               	movwf	___wmul@multiplicand,c
  8358  001BB0  0E00               	movlw	0
  8359  001BB2  6E26               	movwf	___awmod@divisor+1,c
  8360  001BB4  0E0A               	movlw	10
  8361  001BB6  6E25               	movwf	___awmod@divisor,c
  8362  001BB8  0100               	movlb	0	; () banked
  8363  001BBA  519E               	movf	scale@scl& (0+255),w,b
  8364  001BBC  6E23               	movwf	___awmod@dividend,c
  8365  001BBE  6A24               	clrf	___awmod@dividend+1,c
  8366  001BC0  BE23               	btfsc	___awmod@dividend,7,c
  8367  001BC2  0624               	decf	___awmod@dividend+1,f,c
  8368  001BC4  EC8E  F01C         	call	___awmod	;wreg free
  8369  001BC8  C023  F031         	movff	?___awmod,___wmul@multiplier
  8370  001BCC  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8371  001BD0  ECD5  F01F         	call	___wmul	;wreg free
  8372  001BD4  0E2E               	movlw	low __powers_
  8373  001BD6  2431               	addwf	?___wmul,w,c
  8374  001BD8  6EF6               	movwf	tblptrl,c
  8375  001BDA  0EFE               	movlw	high __powers_
  8376  001BDC  2032               	addwfc	?___wmul+1,w,c
  8377  001BDE  6EF7               	movwf	tblptrh,c
  8378  001BE0                     	if	0	;There are less than 3 active tblptr bytes
  8379  001BE0                     	endif
  8380  001BE0  0009               	tblrd		*+
  8381  001BE2  CFF5 F08C          	movff	tablat,___ftmul@f2
  8382  001BE6  0009               	tblrd		*+
  8383  001BE8  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8384  001BEC  000A               	tblrd		*-
  8385  001BEE  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8386  001BF2  EC2F  F011         	call	___ftmul	;wreg free
  8387  001BF6  D7A4               	goto	L5
  8388  001BF8                     l6389:
  8389                           
  8390                           ;doprnt.c: 440: return _powers_[scl];
  8391  001BF8  0100               	movlb	0	; () banked
  8392  001BFA  519E               	movf	scale@scl& (0+255),w,b
  8393  001BFC  0D03               	mullw	3
  8394  001BFE  0E2E               	movlw	low __powers_
  8395  001C00  24F3               	addwf	prodl,w,c
  8396  001C02  6EF6               	movwf	tblptrl,c
  8397  001C04  0EFE               	movlw	high __powers_
  8398  001C06  20F4               	addwfc	prodh,w,c
  8399  001C08  6EF7               	movwf	tblptrh,c
  8400  001C0A                     	if	0	;There are less than 3 active tblptr bytes
  8401  001C0A                     	endif
  8402  001C0A  0009               	tblrd		*+
  8403  001C0C  CFF5 F098          	movff	tablat,?_scale
  8404  001C10  0009               	tblrd		*+
  8405  001C12  CFF5 F099          	movff	tablat,?_scale+1
  8406  001C16  000A               	tblrd		*-
  8407  001C18  CFF5 F09A          	movff	tablat,?_scale+2
  8408  001C1C  0012               	return	
  8409  001C1E                     __end_of_scale:
  8410                           	opt stack 0
  8411                           tblptru	equ	0xFF8
  8412                           tblptrh	equ	0xFF7
  8413                           tblptrl	equ	0xFF6
  8414                           tablat	equ	0xFF5
  8415                           prodh	equ	0xFF4
  8416                           prodl	equ	0xFF3
  8417                           postinc0	equ	0xFEE
  8418                           wreg	equ	0xFE8
  8419                           postdec1	equ	0xFE5
  8420                           fsr1l	equ	0xFE1
  8421                           indf2	equ	0xFDF
  8422                           postinc2	equ	0xFDE
  8423                           postdec2	equ	0xFDD
  8424                           fsr2h	equ	0xFDA
  8425                           fsr2l	equ	0xFD9
  8426                           status	equ	0xFD8
  8427                           
  8428 ;; *************** function _putch *****************
  8429 ;; Defined at:
  8430 ;;		line 35 in file "lcd.c"
  8431 ;; Parameters:    Size  Location     Type
  8432 ;;  data            1    wreg     unsigned char 
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;  data            1   38[COMRAM] unsigned char 
  8435 ;; Return value:  Size  Location     Type
  8436 ;;                  1    wreg      void 
  8437 ;; Registers used:
  8438 ;;		wreg, status,2, status,0, cstack
  8439 ;; Tracked objects:
  8440 ;;		On entry : 0/0
  8441 ;;		On exit  : 0/0
  8442 ;;		Unchanged: 0/0
  8443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8448 ;;Total ram usage:        1 bytes
  8449 ;; Hardware stack levels used:    1
  8450 ;; Hardware stack levels required when called:    6
  8451 ;; This function calls:
  8452 ;;		_lcdNewline
  8453 ;;		_lcdNibble
  8454 ;; This function is called by:
  8455 ;;		_printf
  8456 ;; This function uses a non-reentrant model
  8457 ;;
  8458                           
  8459                           	psect	text18
  8460  003FF4                     __ptext18:
  8461                           	opt stack 0
  8462  003FF4                     _putch:
  8463                           	opt stack 22
  8464                           
  8465                           ;incstack = 0
  8466                           ;putch@data stored from wreg
  8467  003FF4  6E27               	movwf	putch@data,c
  8468                           
  8469                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  8470  003FF6  0E0A               	movlw	10
  8471  003FF8  1827               	xorwf	putch@data,w,c
  8472  003FFA  A4D8               	btfss	status,2,c
  8473  003FFC  D003               	goto	l233
  8474  003FFE  EC73  F020         	call	_lcdNewline	;wreg free
  8475  004002  0012               	return	
  8476  004004                     l233:
  8477                           
  8478                           ;lcd.c: 37: else
  8479                           ;lcd.c: 38: {
  8480                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  8481  004004  848C               	bsf	3980,2,c	;volatile
  8482                           
  8483                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  8484  004006  0E74               	movlw	116
  8485  004008                     u8217:
  8486  004008  2EE8               	decfsz	wreg,f,c
  8487  00400A  D7FE               	bra	u8217
  8488  00400C  D000               	nop2	
  8489                           
  8490                           ;lcd.c: 41: lcdNibble(data);
  8491  00400E  5027               	movf	putch@data,w,c
  8492  004010  EC31  F01D         	call	_lcdNibble
  8493  004014  0012               	return	
  8494  004016                     __end_of_putch:
  8495                           	opt stack 0
  8496                           tblptru	equ	0xFF8
  8497                           tblptrh	equ	0xFF7
  8498                           tblptrl	equ	0xFF6
  8499                           tablat	equ	0xFF5
  8500                           prodh	equ	0xFF4
  8501                           prodl	equ	0xFF3
  8502                           postinc0	equ	0xFEE
  8503                           wreg	equ	0xFE8
  8504                           postdec1	equ	0xFE5
  8505                           fsr1l	equ	0xFE1
  8506                           indf2	equ	0xFDF
  8507                           postinc2	equ	0xFDE
  8508                           postdec2	equ	0xFDD
  8509                           fsr2h	equ	0xFDA
  8510                           fsr2l	equ	0xFD9
  8511                           status	equ	0xFD8
  8512                           
  8513 ;; *************** function _lcdNewline *****************
  8514 ;; Defined at:
  8515 ;;		line 78 in file "lcd.c"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;		None
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;		None
  8520 ;; Return value:  Size  Location     Type
  8521 ;;                  1    wreg      void 
  8522 ;; Registers used:
  8523 ;;		wreg, status,2, status,0, cstack
  8524 ;; Tracked objects:
  8525 ;;		On entry : 0/0
  8526 ;;		On exit  : 0/0
  8527 ;;		Unchanged: 0/0
  8528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;Total ram usage:        0 bytes
  8534 ;; Hardware stack levels used:    1
  8535 ;; Hardware stack levels required when called:    5
  8536 ;; This function calls:
  8537 ;;		_lcdInst
  8538 ;; This function is called by:
  8539 ;;		_putch
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           	psect	text19
  8544  0040E6                     __ptext19:
  8545                           	opt stack 0
  8546  0040E6                     _lcdNewline:
  8547                           	opt stack 22
  8548                           
  8549                           ;lcd.c: 79: lcdInst(0b11000000);
  8550                           
  8551                           ;incstack = 0
  8552  0040E6  0EC0               	movlw	192
  8553  0040E8  EC0B  F020         	call	_lcdInst
  8554  0040EC  0012               	return		;funcret
  8555  0040EE                     __end_of_lcdNewline:
  8556                           	opt stack 0
  8557                           tblptru	equ	0xFF8
  8558                           tblptrh	equ	0xFF7
  8559                           tblptrl	equ	0xFF6
  8560                           tablat	equ	0xFF5
  8561                           prodh	equ	0xFF4
  8562                           prodl	equ	0xFF3
  8563                           postinc0	equ	0xFEE
  8564                           wreg	equ	0xFE8
  8565                           postdec1	equ	0xFE5
  8566                           fsr1l	equ	0xFE1
  8567                           indf2	equ	0xFDF
  8568                           postinc2	equ	0xFDE
  8569                           postdec2	equ	0xFDD
  8570                           fsr2h	equ	0xFDA
  8571                           fsr2l	equ	0xFD9
  8572                           status	equ	0xFD8
  8573                           
  8574 ;; *************** function _isdigit *****************
  8575 ;; Defined at:
  8576 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;  c               1    wreg     unsigned char 
  8579 ;; Auto vars:     Size  Location     Type
  8580 ;;  c               1   36[COMRAM] unsigned char 
  8581 ;; Return value:  Size  Location     Type
  8582 ;;		None               void
  8583 ;; Registers used:
  8584 ;;		wreg, status,2, status,0
  8585 ;; Tracked objects:
  8586 ;;		On entry : 0/0
  8587 ;;		On exit  : 0/0
  8588 ;;		Unchanged: 0/0
  8589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8592 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8593 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;Total ram usage:        3 bytes
  8595 ;; Hardware stack levels used:    1
  8596 ;; Hardware stack levels required when called:    3
  8597 ;; This function calls:
  8598 ;;		Nothing
  8599 ;; This function is called by:
  8600 ;;		_printf
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604                           	psect	text20
  8605  004058                     __ptext20:
  8606                           	opt stack 0
  8607  004058                     _isdigit:
  8608                           	opt stack 25
  8609                           
  8610                           ;incstack = 0
  8611                           ;isdigit@c stored from wreg
  8612  004058  6E25               	movwf	isdigit@c,c
  8613  00405A  0E00               	movlw	0
  8614  00405C  6E24               	movwf	_isdigit$1052,c
  8615  00405E  0E3A               	movlw	58
  8616  004060  6025               	cpfslt	isdigit@c,c
  8617  004062  D005               	goto	l6401
  8618  004064  0E2F               	movlw	47
  8619  004066  6425               	cpfsgt	isdigit@c,c
  8620  004068  D002               	goto	l6401
  8621  00406A  0E01               	movlw	1
  8622  00406C  6E24               	movwf	_isdigit$1052,c
  8623  00406E                     l6401:
  8624  00406E  C024  F023         	movff	_isdigit$1052,??_isdigit
  8625  004072  3023               	rrcf	??_isdigit,w,c
  8626  004074  0012               	return	
  8627  004076                     __end_of_isdigit:
  8628                           	opt stack 0
  8629                           tblptru	equ	0xFF8
  8630                           tblptrh	equ	0xFF7
  8631                           tblptrl	equ	0xFF6
  8632                           tablat	equ	0xFF5
  8633                           prodh	equ	0xFF4
  8634                           prodl	equ	0xFF3
  8635                           postinc0	equ	0xFEE
  8636                           wreg	equ	0xFE8
  8637                           postdec1	equ	0xFE5
  8638                           fsr1l	equ	0xFE1
  8639                           indf2	equ	0xFDF
  8640                           postinc2	equ	0xFDE
  8641                           postdec2	equ	0xFDD
  8642                           fsr2h	equ	0xFDA
  8643                           fsr2l	equ	0xFD9
  8644                           status	equ	0xFD8
  8645                           
  8646 ;; *************** function _fround *****************
  8647 ;; Defined at:
  8648 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;  prec            1    wreg     unsigned char 
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  prec            1   33[BANK0 ] unsigned char 
  8653 ;; Return value:  Size  Location     Type
  8654 ;;                  3   24[BANK0 ] unsigned char 
  8655 ;; Registers used:
  8656 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8662 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8663 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8665 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8666 ;;Total ram usage:       10 bytes
  8667 ;; Hardware stack levels used:    1
  8668 ;; Hardware stack levels required when called:    5
  8669 ;; This function calls:
  8670 ;;		___awdiv
  8671 ;;		___awmod
  8672 ;;		___ftmul
  8673 ;;		___wmul
  8674 ;; This function is called by:
  8675 ;;		_printf
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           	psect	text21
  8680  001E86                     __ptext21:
  8681                           	opt stack 0
  8682  001E86                     _fround:
  8683                           	opt stack 23
  8684                           
  8685                           ;incstack = 0
  8686                           ;fround@prec stored from wreg
  8687  001E86  0100               	movlb	0	; () banked
  8688  001E88  6FA1               	movwf	fround@prec& (0+255),b
  8689                           
  8690                           ;doprnt.c: 413: if(prec>=110)
  8691  001E8A  0E6D               	movlw	109
  8692  001E8C  0100               	movlb	0	; () banked
  8693  001E8E  65A1               	cpfsgt	fround@prec& (0+255),b
  8694  001E90  D0A2               	goto	l6343
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8698  001E92  0E00               	movlw	0
  8699  001E94  6E34               	movwf	___wmul@multiplicand+1,c
  8700  001E96  0E03               	movlw	3
  8701  001E98  6E33               	movwf	___wmul@multiplicand,c
  8702  001E9A  0E00               	movlw	0
  8703  001E9C  6E2C               	movwf	___awdiv@divisor+1,c
  8704  001E9E  0E0A               	movlw	10
  8705  001EA0  6E2B               	movwf	___awdiv@divisor,c
  8706  001EA2  0E00               	movlw	0
  8707  001EA4  6E26               	movwf	___awmod@divisor+1,c
  8708  001EA6  0E64               	movlw	100
  8709  001EA8  6E25               	movwf	___awmod@divisor,c
  8710  001EAA  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8711  001EAE  6A24               	clrf	___awmod@dividend+1,c
  8712  001EB0  EC8E  F01C         	call	___awmod	;wreg free
  8713  001EB4  C023  F029         	movff	?___awmod,___awdiv@dividend
  8714  001EB8  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  8715  001EBC  EC8E  F01B         	call	___awdiv	;wreg free
  8716  001EC0  0E09               	movlw	9
  8717  001EC2  2429               	addwf	?___awdiv,w,c
  8718  001EC4  6E31               	movwf	___wmul@multiplier,c
  8719  001EC6  0E00               	movlw	0
  8720  001EC8  202A               	addwfc	?___awdiv+1,w,c
  8721  001ECA  6E32               	movwf	___wmul@multiplier+1,c
  8722  001ECC  ECD5  F01F         	call	___wmul	;wreg free
  8723  001ED0  0E07               	movlw	low __npowers_
  8724  001ED2  2431               	addwf	?___wmul,w,c
  8725  001ED4  6EF6               	movwf	tblptrl,c
  8726  001ED6  0EFE               	movlw	high __npowers_
  8727  001ED8  2032               	addwfc	?___wmul+1,w,c
  8728  001EDA  6EF7               	movwf	tblptrh,c
  8729  001EDC                     	if	0	;There are less than 3 active tblptr bytes
  8730  001EDC                     	endif
  8731  001EDC  0009               	tblrd		*+
  8732  001EDE  CFF5 F08C          	movff	tablat,___ftmul@f2
  8733  001EE2  0009               	tblrd		*+
  8734  001EE4  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8735  001EE8  000A               	tblrd		*-
  8736  001EEA  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8737  001EEE  0E00               	movlw	0
  8738  001EF0  6E2C               	movwf	___awdiv@divisor+1,c
  8739  001EF2  0E64               	movlw	100
  8740  001EF4  6E2B               	movwf	___awdiv@divisor,c
  8741  001EF6  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  8742  001EFA  6A2A               	clrf	___awdiv@dividend+1,c
  8743  001EFC  EC8E  F01B         	call	___awdiv	;wreg free
  8744  001F00  0E12               	movlw	18
  8745  001F02  2429               	addwf	?___awdiv,w,c
  8746  001F04  6E31               	movwf	___wmul@multiplier,c
  8747  001F06  0E00               	movlw	0
  8748  001F08  202A               	addwfc	?___awdiv+1,w,c
  8749  001F0A  6E32               	movwf	___wmul@multiplier+1,c
  8750  001F0C  0E00               	movlw	0
  8751  001F0E  6E34               	movwf	___wmul@multiplicand+1,c
  8752  001F10  0E03               	movlw	3
  8753  001F12  6E33               	movwf	___wmul@multiplicand,c
  8754  001F14  ECD5  F01F         	call	___wmul	;wreg free
  8755  001F18  0E07               	movlw	low __npowers_
  8756  001F1A  2431               	addwf	?___wmul,w,c
  8757  001F1C  6EF6               	movwf	tblptrl,c
  8758  001F1E  0EFE               	movlw	high __npowers_
  8759  001F20  2032               	addwfc	?___wmul+1,w,c
  8760  001F22  6EF7               	movwf	tblptrh,c
  8761  001F24                     	if	0	;There are less than 3 active tblptr bytes
  8762  001F24                     	endif
  8763  001F24  0009               	tblrd		*+
  8764  001F26  CFF5 F089          	movff	tablat,___ftmul@f1
  8765  001F2A  0009               	tblrd		*+
  8766  001F2C  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8767  001F30  000A               	tblrd		*-
  8768  001F32  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8769  001F36  EC2F  F011         	call	___ftmul	;wreg free
  8770  001F3A  C089  F09E         	movff	?___ftmul,_fround$1420
  8771  001F3E  C08A  F09F         	movff	?___ftmul+1,_fround$1420+1
  8772  001F42  C08B  F0A0         	movff	?___ftmul+2,_fround$1420+2
  8773                           
  8774                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8775  001F46  0E00               	movlw	0
  8776  001F48  6E34               	movwf	___wmul@multiplicand+1,c
  8777  001F4A  0E03               	movlw	3
  8778  001F4C  6E33               	movwf	___wmul@multiplicand,c
  8779  001F4E  0E00               	movlw	0
  8780  001F50  6E26               	movwf	___awmod@divisor+1,c
  8781  001F52  0E0A               	movlw	10
  8782  001F54  6E25               	movwf	___awmod@divisor,c
  8783  001F56  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8784  001F5A  6A24               	clrf	___awmod@dividend+1,c
  8785  001F5C  EC8E  F01C         	call	___awmod	;wreg free
  8786  001F60  C023  F031         	movff	?___awmod,___wmul@multiplier
  8787  001F64  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8788  001F68  ECD5  F01F         	call	___wmul	;wreg free
  8789  001F6C  0E07               	movlw	low __npowers_
  8790  001F6E  2431               	addwf	?___wmul,w,c
  8791  001F70  6EF6               	movwf	tblptrl,c
  8792  001F72  0EFE               	movlw	high __npowers_
  8793  001F74  2032               	addwfc	?___wmul+1,w,c
  8794  001F76  6EF7               	movwf	tblptrh,c
  8795  001F78                     	if	0	;There are less than 3 active tblptr bytes
  8796  001F78                     	endif
  8797  001F78  0009               	tblrd		*+
  8798  001F7A  CFF5 F08C          	movff	tablat,___ftmul@f2
  8799  001F7E  0009               	tblrd		*+
  8800  001F80  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8801  001F84  000A               	tblrd		*-
  8802  001F86  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8803  001F8A  C09E  F089         	movff	_fround$1420,___ftmul@f1
  8804  001F8E  C09F  F08A         	movff	_fround$1420+1,___ftmul@f1+1
  8805  001F92  C0A0  F08B         	movff	_fround$1420+2,___ftmul@f1+2
  8806  001F96  EC2F  F011         	call	___ftmul	;wreg free
  8807  001F9A  C089  F09B         	movff	?___ftmul,_fround$1421
  8808  001F9E  C08A  F09C         	movff	?___ftmul+1,_fround$1421+1
  8809  001FA2  C08B  F09D         	movff	?___ftmul+2,_fround$1421+2
  8810                           
  8811                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8812  001FA6  C09B  F089         	movff	_fround$1421,___ftmul@f1
  8813  001FAA  C09C  F08A         	movff	_fround$1421+1,___ftmul@f1+1
  8814  001FAE  C09D  F08B         	movff	_fround$1421+2,___ftmul@f1+2
  8815  001FB2  0E00               	movlw	0
  8816  001FB4  0100               	movlb	0	; () banked
  8817  001FB6  6F8C               	movwf	___ftmul@f2& (0+255),b
  8818  001FB8  0E00               	movlw	0
  8819  001FBA  0100               	movlb	0	; () banked
  8820  001FBC  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8821  001FBE  0E3F               	movlw	63
  8822  001FC0  0100               	movlb	0	; () banked
  8823  001FC2  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8824  001FC4  EC2F  F011         	call	___ftmul	;wreg free
  8825  001FC8  C089  F098         	movff	?___ftmul,?_fround
  8826  001FCC  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8827  001FD0  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8828  001FD4  0012               	return	
  8829  001FD6                     l6343:
  8830                           
  8831                           ;doprnt.c: 415: else if(prec > 10)
  8832  001FD6  0E0A               	movlw	10
  8833  001FD8  0100               	movlb	0	; () banked
  8834  001FDA  65A1               	cpfsgt	fround@prec& (0+255),b
  8835  001FDC  D060               	goto	l6351
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8839  001FDE  0E00               	movlw	0
  8840  001FE0  6E34               	movwf	___wmul@multiplicand+1,c
  8841  001FE2  0E03               	movlw	3
  8842  001FE4  6E33               	movwf	___wmul@multiplicand,c
  8843  001FE6  0E00               	movlw	0
  8844  001FE8  6E26               	movwf	___awmod@divisor+1,c
  8845  001FEA  0E0A               	movlw	10
  8846  001FEC  6E25               	movwf	___awmod@divisor,c
  8847  001FEE  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8848  001FF2  6A24               	clrf	___awmod@dividend+1,c
  8849  001FF4  EC8E  F01C         	call	___awmod	;wreg free
  8850  001FF8  C023  F031         	movff	?___awmod,___wmul@multiplier
  8851  001FFC  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8852  002000  ECD5  F01F         	call	___wmul	;wreg free
  8853  002004  0E07               	movlw	low __npowers_
  8854  002006  2431               	addwf	?___wmul,w,c
  8855  002008  6EF6               	movwf	tblptrl,c
  8856  00200A  0EFE               	movlw	high __npowers_
  8857  00200C  2032               	addwfc	?___wmul+1,w,c
  8858  00200E  6EF7               	movwf	tblptrh,c
  8859  002010                     	if	0	;There are less than 3 active tblptr bytes
  8860  002010                     	endif
  8861  002010  0009               	tblrd		*+
  8862  002012  CFF5 F08C          	movff	tablat,___ftmul@f2
  8863  002016  0009               	tblrd		*+
  8864  002018  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8865  00201C  000A               	tblrd		*-
  8866  00201E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8867  002022  0E00               	movlw	0
  8868  002024  6E2C               	movwf	___awdiv@divisor+1,c
  8869  002026  0E0A               	movlw	10
  8870  002028  6E2B               	movwf	___awdiv@divisor,c
  8871  00202A  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  8872  00202E  6A2A               	clrf	___awdiv@dividend+1,c
  8873  002030  EC8E  F01B         	call	___awdiv	;wreg free
  8874  002034  0E09               	movlw	9
  8875  002036  2429               	addwf	?___awdiv,w,c
  8876  002038  6E31               	movwf	___wmul@multiplier,c
  8877  00203A  0E00               	movlw	0
  8878  00203C  202A               	addwfc	?___awdiv+1,w,c
  8879  00203E  6E32               	movwf	___wmul@multiplier+1,c
  8880  002040  0E00               	movlw	0
  8881  002042  6E34               	movwf	___wmul@multiplicand+1,c
  8882  002044  0E03               	movlw	3
  8883  002046  6E33               	movwf	___wmul@multiplicand,c
  8884  002048  ECD5  F01F         	call	___wmul	;wreg free
  8885  00204C  0E07               	movlw	low __npowers_
  8886  00204E  2431               	addwf	?___wmul,w,c
  8887  002050  6EF6               	movwf	tblptrl,c
  8888  002052  0EFE               	movlw	high __npowers_
  8889  002054  2032               	addwfc	?___wmul+1,w,c
  8890  002056  6EF7               	movwf	tblptrh,c
  8891  002058                     	if	0	;There are less than 3 active tblptr bytes
  8892  002058                     	endif
  8893  002058  0009               	tblrd		*+
  8894  00205A  CFF5 F089          	movff	tablat,___ftmul@f1
  8895  00205E  0009               	tblrd		*+
  8896  002060  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8897  002064  000A               	tblrd		*-
  8898  002066  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8899  00206A  EC2F  F011         	call	___ftmul	;wreg free
  8900  00206E  C089  F09E         	movff	?___ftmul,_fround$1420
  8901  002072  C08A  F09F         	movff	?___ftmul+1,_fround$1420+1
  8902  002076  C08B  F0A0         	movff	?___ftmul+2,_fround$1420+2
  8903                           
  8904                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8905  00207A  C09E  F089         	movff	_fround$1420,___ftmul@f1
  8906  00207E  C09F  F08A         	movff	_fround$1420+1,___ftmul@f1+1
  8907  002082  C0A0  F08B         	movff	_fround$1420+2,___ftmul@f1+2
  8908  002086  0E00               	movlw	0
  8909  002088  0100               	movlb	0	; () banked
  8910  00208A  6F8C               	movwf	___ftmul@f2& (0+255),b
  8911  00208C  0E00               	movlw	0
  8912  00208E  0100               	movlb	0	; () banked
  8913  002090  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8914  002092  0E3F               	movlw	63
  8915  002094  0100               	movlb	0	; () banked
  8916  002096  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8917  002098  EC2F  F011         	call	___ftmul	;wreg free
  8918  00209C  D795               	goto	L6
  8919  00209E                     l6351:
  8920                           
  8921                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8922  00209E  0100               	movlb	0	; () banked
  8923  0020A0  51A1               	movf	fround@prec& (0+255),w,b
  8924  0020A2  0D03               	mullw	3
  8925  0020A4  0E07               	movlw	low __npowers_
  8926  0020A6  24F3               	addwf	prodl,w,c
  8927  0020A8  6EF6               	movwf	tblptrl,c
  8928  0020AA  0EFE               	movlw	high __npowers_
  8929  0020AC  20F4               	addwfc	prodh,w,c
  8930  0020AE  6EF7               	movwf	tblptrh,c
  8931  0020B0                     	if	0	;There are less than 3 active tblptr bytes
  8932  0020B0                     	endif
  8933  0020B0  0009               	tblrd		*+
  8934  0020B2  CFF5 F089          	movff	tablat,___ftmul@f1
  8935  0020B6  0009               	tblrd		*+
  8936  0020B8  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8937  0020BC  000A               	tblrd		*-
  8938  0020BE  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8939  0020C2  0E00               	movlw	0
  8940  0020C4  0100               	movlb	0	; () banked
  8941  0020C6  6F8C               	movwf	___ftmul@f2& (0+255),b
  8942  0020C8  0E00               	movlw	0
  8943  0020CA  0100               	movlb	0	; () banked
  8944  0020CC  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8945  0020CE  0E3F               	movlw	63
  8946  0020D0  0100               	movlb	0	; () banked
  8947  0020D2  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8948  0020D4  EC2F  F011         	call	___ftmul	;wreg free
  8949  0020D8  C089  F098         	movff	?___ftmul,?_fround
  8950  0020DC  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8951  0020E0  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8952  0020E4  0012               	return	
  8953  0020E6                     __end_of_fround:
  8954                           	opt stack 0
  8955                           tblptru	equ	0xFF8
  8956                           tblptrh	equ	0xFF7
  8957                           tblptrl	equ	0xFF6
  8958                           tablat	equ	0xFF5
  8959                           prodh	equ	0xFF4
  8960                           prodl	equ	0xFF3
  8961                           postinc0	equ	0xFEE
  8962                           wreg	equ	0xFE8
  8963                           postdec1	equ	0xFE5
  8964                           fsr1l	equ	0xFE1
  8965                           indf2	equ	0xFDF
  8966                           postinc2	equ	0xFDE
  8967                           postdec2	equ	0xFDD
  8968                           fsr2h	equ	0xFDA
  8969                           fsr2l	equ	0xFD9
  8970                           status	equ	0xFD8
  8971                           
  8972 ;; *************** function ___awmod *****************
  8973 ;; Defined at:
  8974 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8975 ;; Parameters:    Size  Location     Type
  8976 ;;  dividend        2   34[COMRAM] int 
  8977 ;;  divisor         2   36[COMRAM] int 
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;  sign            1   39[COMRAM] unsigned char 
  8980 ;;  counter         1   38[COMRAM] unsigned char 
  8981 ;; Return value:  Size  Location     Type
  8982 ;;                  2   34[COMRAM] int 
  8983 ;; Registers used:
  8984 ;;		wreg, status,2, status,0
  8985 ;; Tracked objects:
  8986 ;;		On entry : 0/0
  8987 ;;		On exit  : 0/0
  8988 ;;		Unchanged: 0/0
  8989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8994 ;;Total ram usage:        6 bytes
  8995 ;; Hardware stack levels used:    1
  8996 ;; Hardware stack levels required when called:    3
  8997 ;; This function calls:
  8998 ;;		Nothing
  8999 ;; This function is called by:
  9000 ;;		_fround
  9001 ;;		_scale
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           	psect	text22
  9006  00391C                     __ptext22:
  9007                           	opt stack 0
  9008  00391C                     ___awmod:
  9009                           	opt stack 24
  9010                           
  9011                           ;incstack = 0
  9012  00391C  0E00               	movlw	0
  9013  00391E  6E28               	movwf	___awmod@sign,c
  9014  003920  AE24               	btfss	___awmod@dividend+1,7,c
  9015  003922  D006               	goto	l6241
  9016  003924  6C23               	negf	___awmod@dividend,c
  9017  003926  1E24               	comf	___awmod@dividend+1,f,c
  9018  003928  B0D8               	btfsc	status,0,c
  9019  00392A  2A24               	incf	___awmod@dividend+1,f,c
  9020  00392C  0E01               	movlw	1
  9021  00392E  6E28               	movwf	___awmod@sign,c
  9022  003930                     l6241:
  9023  003930  AE26               	btfss	___awmod@divisor+1,7,c
  9024  003932  D004               	goto	l6245
  9025  003934  6C25               	negf	___awmod@divisor,c
  9026  003936  1E26               	comf	___awmod@divisor+1,f,c
  9027  003938  B0D8               	btfsc	status,0,c
  9028  00393A  2A26               	incf	___awmod@divisor+1,f,c
  9029  00393C                     l6245:
  9030  00393C  5025               	movf	___awmod@divisor,w,c
  9031  00393E  1026               	iorwf	___awmod@divisor+1,w,c
  9032  003940  B4D8               	btfsc	status,2,c
  9033  003942  D018               	goto	l6261
  9034  003944  0E01               	movlw	1
  9035  003946  6E27               	movwf	___awmod@counter,c
  9036  003948  D004               	goto	l6251
  9037  00394A                     l6249:
  9038  00394A  90D8               	bcf	status,0,c
  9039  00394C  3625               	rlcf	___awmod@divisor,f,c
  9040  00394E  3626               	rlcf	___awmod@divisor+1,f,c
  9041  003950  2A27               	incf	___awmod@counter,f,c
  9042  003952                     l6251:
  9043  003952  AE26               	btfss	___awmod@divisor+1,7,c
  9044  003954  D7FA               	goto	l6249
  9045  003956                     l6253:
  9046  003956  5025               	movf	___awmod@divisor,w,c
  9047  003958  5C23               	subwf	___awmod@dividend,w,c
  9048  00395A  5026               	movf	___awmod@divisor+1,w,c
  9049  00395C  5824               	subwfb	___awmod@dividend+1,w,c
  9050  00395E  A0D8               	btfss	status,0,c
  9051  003960  D004               	goto	l6257
  9052  003962  5025               	movf	___awmod@divisor,w,c
  9053  003964  5E23               	subwf	___awmod@dividend,f,c
  9054  003966  5026               	movf	___awmod@divisor+1,w,c
  9055  003968  5A24               	subwfb	___awmod@dividend+1,f,c
  9056  00396A                     l6257:
  9057  00396A  90D8               	bcf	status,0,c
  9058  00396C  3226               	rrcf	___awmod@divisor+1,f,c
  9059  00396E  3225               	rrcf	___awmod@divisor,f,c
  9060  003970  2E27               	decfsz	___awmod@counter,f,c
  9061  003972  D7F1               	goto	l6253
  9062  003974                     l6261:
  9063  003974  5028               	movf	___awmod@sign,w,c
  9064  003976  B4D8               	btfsc	status,2,c
  9065  003978  D004               	goto	l6265
  9066  00397A  6C23               	negf	___awmod@dividend,c
  9067  00397C  1E24               	comf	___awmod@dividend+1,f,c
  9068  00397E  B0D8               	btfsc	status,0,c
  9069  003980  2A24               	incf	___awmod@dividend+1,f,c
  9070  003982                     l6265:
  9071  003982  C023  F023         	movff	___awmod@dividend,?___awmod
  9072  003986  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
  9073  00398A  0012               	return	
  9074  00398C                     __end_of___awmod:
  9075                           	opt stack 0
  9076                           tblptru	equ	0xFF8
  9077                           tblptrh	equ	0xFF7
  9078                           tblptrl	equ	0xFF6
  9079                           tablat	equ	0xFF5
  9080                           prodh	equ	0xFF4
  9081                           prodl	equ	0xFF3
  9082                           postinc0	equ	0xFEE
  9083                           wreg	equ	0xFE8
  9084                           postdec1	equ	0xFE5
  9085                           fsr1l	equ	0xFE1
  9086                           indf2	equ	0xFDF
  9087                           postinc2	equ	0xFDE
  9088                           postdec2	equ	0xFDD
  9089                           fsr2h	equ	0xFDA
  9090                           fsr2l	equ	0xFD9
  9091                           status	equ	0xFD8
  9092                           
  9093 ;; *************** function ___awdiv *****************
  9094 ;; Defined at:
  9095 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;  dividend        2   40[COMRAM] int 
  9098 ;;  divisor         2   42[COMRAM] int 
  9099 ;; Auto vars:     Size  Location     Type
  9100 ;;  quotient        2   46[COMRAM] int 
  9101 ;;  sign            1   45[COMRAM] unsigned char 
  9102 ;;  counter         1   44[COMRAM] unsigned char 
  9103 ;; Return value:  Size  Location     Type
  9104 ;;                  2   40[COMRAM] int 
  9105 ;; Registers used:
  9106 ;;		wreg, status,2, status,0
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9112 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9113 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;Total ram usage:        8 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; Hardware stack levels required when called:    3
  9119 ;; This function calls:
  9120 ;;		Nothing
  9121 ;; This function is called by:
  9122 ;;		_fround
  9123 ;;		_scale
  9124 ;;		_printf
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           	psect	text23
  9129  00371C                     __ptext23:
  9130                           	opt stack 0
  9131  00371C                     ___awdiv:
  9132                           	opt stack 24
  9133                           
  9134                           ;incstack = 0
  9135  00371C  0E00               	movlw	0
  9136  00371E  6E2E               	movwf	___awdiv@sign,c
  9137  003720  AE2C               	btfss	___awdiv@divisor+1,7,c
  9138  003722  D006               	goto	l6197
  9139  003724  6C2B               	negf	___awdiv@divisor,c
  9140  003726  1E2C               	comf	___awdiv@divisor+1,f,c
  9141  003728  B0D8               	btfsc	status,0,c
  9142  00372A  2A2C               	incf	___awdiv@divisor+1,f,c
  9143  00372C  0E01               	movlw	1
  9144  00372E  6E2E               	movwf	___awdiv@sign,c
  9145  003730                     l6197:
  9146  003730  AE2A               	btfss	___awdiv@dividend+1,7,c
  9147  003732  D006               	goto	l6203
  9148  003734  6C29               	negf	___awdiv@dividend,c
  9149  003736  1E2A               	comf	___awdiv@dividend+1,f,c
  9150  003738  B0D8               	btfsc	status,0,c
  9151  00373A  2A2A               	incf	___awdiv@dividend+1,f,c
  9152  00373C  0E01               	movlw	1
  9153  00373E  1A2E               	xorwf	___awdiv@sign,f,c
  9154  003740                     l6203:
  9155  003740  0E00               	movlw	0
  9156  003742  6E30               	movwf	___awdiv@quotient+1,c
  9157  003744  0E00               	movlw	0
  9158  003746  6E2F               	movwf	___awdiv@quotient,c
  9159  003748  502B               	movf	___awdiv@divisor,w,c
  9160  00374A  102C               	iorwf	___awdiv@divisor+1,w,c
  9161  00374C  B4D8               	btfsc	status,2,c
  9162  00374E  D01C               	goto	l6225
  9163  003750  0E01               	movlw	1
  9164  003752  6E2D               	movwf	___awdiv@counter,c
  9165  003754  D004               	goto	l6211
  9166  003756                     l6209:
  9167  003756  90D8               	bcf	status,0,c
  9168  003758  362B               	rlcf	___awdiv@divisor,f,c
  9169  00375A  362C               	rlcf	___awdiv@divisor+1,f,c
  9170  00375C  2A2D               	incf	___awdiv@counter,f,c
  9171  00375E                     l6211:
  9172  00375E  AE2C               	btfss	___awdiv@divisor+1,7,c
  9173  003760  D7FA               	goto	l6209
  9174  003762                     l6213:
  9175  003762  90D8               	bcf	status,0,c
  9176  003764  362F               	rlcf	___awdiv@quotient,f,c
  9177  003766  3630               	rlcf	___awdiv@quotient+1,f,c
  9178  003768  502B               	movf	___awdiv@divisor,w,c
  9179  00376A  5C29               	subwf	___awdiv@dividend,w,c
  9180  00376C  502C               	movf	___awdiv@divisor+1,w,c
  9181  00376E  582A               	subwfb	___awdiv@dividend+1,w,c
  9182  003770  A0D8               	btfss	status,0,c
  9183  003772  D005               	goto	l6221
  9184  003774  502B               	movf	___awdiv@divisor,w,c
  9185  003776  5E29               	subwf	___awdiv@dividend,f,c
  9186  003778  502C               	movf	___awdiv@divisor+1,w,c
  9187  00377A  5A2A               	subwfb	___awdiv@dividend+1,f,c
  9188  00377C  802F               	bsf	___awdiv@quotient,0,c
  9189  00377E                     l6221:
  9190  00377E  90D8               	bcf	status,0,c
  9191  003780  322C               	rrcf	___awdiv@divisor+1,f,c
  9192  003782  322B               	rrcf	___awdiv@divisor,f,c
  9193  003784  2E2D               	decfsz	___awdiv@counter,f,c
  9194  003786  D7ED               	goto	l6213
  9195  003788                     l6225:
  9196  003788  502E               	movf	___awdiv@sign,w,c
  9197  00378A  B4D8               	btfsc	status,2,c
  9198  00378C  D004               	goto	l6229
  9199  00378E  6C2F               	negf	___awdiv@quotient,c
  9200  003790  1E30               	comf	___awdiv@quotient+1,f,c
  9201  003792  B0D8               	btfsc	status,0,c
  9202  003794  2A30               	incf	___awdiv@quotient+1,f,c
  9203  003796                     l6229:
  9204  003796  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  9205  00379A  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  9206  00379E  0012               	return	
  9207  0037A0                     __end_of___awdiv:
  9208                           	opt stack 0
  9209                           tblptru	equ	0xFF8
  9210                           tblptrh	equ	0xFF7
  9211                           tblptrl	equ	0xFF6
  9212                           tablat	equ	0xFF5
  9213                           prodh	equ	0xFF4
  9214                           prodl	equ	0xFF3
  9215                           postinc0	equ	0xFEE
  9216                           wreg	equ	0xFE8
  9217                           postdec1	equ	0xFE5
  9218                           fsr1l	equ	0xFE1
  9219                           indf2	equ	0xFDF
  9220                           postinc2	equ	0xFDE
  9221                           postdec2	equ	0xFDD
  9222                           fsr2h	equ	0xFDA
  9223                           fsr2l	equ	0xFD9
  9224                           status	equ	0xFD8
  9225                           
  9226 ;; *************** function __tdiv_to_l_ *****************
  9227 ;; Defined at:
  9228 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  9229 ;; Parameters:    Size  Location     Type
  9230 ;;  f1              3   34[COMRAM] float 
  9231 ;;  f2              3   37[COMRAM] float 
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  quot            4   43[COMRAM] unsigned long 
  9234 ;;  exp1            1   48[COMRAM] unsigned char 
  9235 ;;  cntr            1   47[COMRAM] unsigned char 
  9236 ;; Return value:  Size  Location     Type
  9237 ;;                  4   34[COMRAM] unsigned long 
  9238 ;; Registers used:
  9239 ;;		wreg, status,2, status,0
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9245 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9246 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9247 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;Total ram usage:       15 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    3
  9252 ;; This function calls:
  9253 ;;		Nothing
  9254 ;; This function is called by:
  9255 ;;		_printf
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text24
  9260  002658                     __ptext24:
  9261                           	opt stack 0
  9262  002658                     __tdiv_to_l_:
  9263                           	opt stack 25
  9264                           
  9265                           ;incstack = 0
  9266  002658  C025  F029         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9267  00265C  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9268  00265E  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9269  002660  3424               	rlcf	__tdiv_to_l_@f1+1,w,c
  9270  002662  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9271  002664  E301               	bnc	u6231
  9272  002666  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9273  002668                     u6231:
  9274  002668  5029               	movf	??__tdiv_to_l_,w,c
  9275  00266A  6E31               	movwf	__tdiv_to_l_@exp1,c
  9276  00266C  5031               	movf	__tdiv_to_l_@exp1,w,c
  9277  00266E  A4D8               	btfss	status,2,c
  9278  002670  D009               	goto	l6411
  9279  002672  0E00               	movlw	0
  9280  002674  6E23               	movwf	?__tdiv_to_l_,c
  9281  002676  0E00               	movlw	0
  9282  002678  6E24               	movwf	?__tdiv_to_l_+1,c
  9283  00267A  0E00               	movlw	0
  9284  00267C  6E25               	movwf	?__tdiv_to_l_+2,c
  9285  00267E  0E00               	movlw	0
  9286  002680  6E26               	movwf	?__tdiv_to_l_+3,c
  9287  002682  0012               	return	
  9288  002684                     l6411:
  9289  002684  C028  F029         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9290  002688  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9291  00268A  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9292  00268C  3427               	rlcf	__tdiv_to_l_@f2+1,w,c
  9293  00268E  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9294  002690  E301               	bnc	u6251
  9295  002692  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9296  002694                     u6251:
  9297  002694  5029               	movf	??__tdiv_to_l_,w,c
  9298  002696  6E30               	movwf	__tdiv_to_l_@cntr,c
  9299  002698  5030               	movf	__tdiv_to_l_@cntr,w,c
  9300  00269A  A4D8               	btfss	status,2,c
  9301  00269C  D009               	goto	l6417
  9302  00269E  0E00               	movlw	0
  9303  0026A0  6E23               	movwf	?__tdiv_to_l_,c
  9304  0026A2  0E00               	movlw	0
  9305  0026A4  6E24               	movwf	?__tdiv_to_l_+1,c
  9306  0026A6  0E00               	movlw	0
  9307  0026A8  6E25               	movwf	?__tdiv_to_l_+2,c
  9308  0026AA  0E00               	movlw	0
  9309  0026AC  6E26               	movwf	?__tdiv_to_l_+3,c
  9310  0026AE  0012               	return	
  9311  0026B0                     l6417:
  9312  0026B0  8E24               	bsf	__tdiv_to_l_@f1+1,7,c
  9313  0026B2  0EFF               	movlw	255
  9314  0026B4  1623               	andwf	__tdiv_to_l_@f1,f,c
  9315  0026B6  0EFF               	movlw	255
  9316  0026B8  1624               	andwf	__tdiv_to_l_@f1+1,f,c
  9317  0026BA  0E00               	movlw	0
  9318  0026BC  1625               	andwf	__tdiv_to_l_@f1+2,f,c
  9319  0026BE  8E27               	bsf	__tdiv_to_l_@f2+1,7,c
  9320  0026C0  0EFF               	movlw	255
  9321  0026C2  1626               	andwf	__tdiv_to_l_@f2,f,c
  9322  0026C4  0EFF               	movlw	255
  9323  0026C6  1627               	andwf	__tdiv_to_l_@f2+1,f,c
  9324  0026C8  0E00               	movlw	0
  9325  0026CA  1628               	andwf	__tdiv_to_l_@f2+2,f,c
  9326  0026CC  0E00               	movlw	0
  9327  0026CE  6E2C               	movwf	__tdiv_to_l_@quot,c
  9328  0026D0  0E00               	movlw	0
  9329  0026D2  6E2D               	movwf	__tdiv_to_l_@quot+1,c
  9330  0026D4  0E00               	movlw	0
  9331  0026D6  6E2E               	movwf	__tdiv_to_l_@quot+2,c
  9332  0026D8  0E00               	movlw	0
  9333  0026DA  6E2F               	movwf	__tdiv_to_l_@quot+3,c
  9334  0026DC  0E7F               	movlw	127
  9335  0026DE  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  9336  0026E0  5030               	movf	__tdiv_to_l_@cntr,w,c
  9337  0026E2  0F98               	addlw	152
  9338  0026E4  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  9339  0026E6  0E18               	movlw	24
  9340  0026E8  6E30               	movwf	__tdiv_to_l_@cntr,c
  9341  0026EA                     l1191:
  9342  0026EA  90D8               	bcf	status,0,c
  9343  0026EC  362C               	rlcf	__tdiv_to_l_@quot,f,c
  9344  0026EE  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  9345  0026F0  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  9346  0026F2  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  9347  0026F4  5026               	movf	__tdiv_to_l_@f2,w,c
  9348  0026F6  5C23               	subwf	__tdiv_to_l_@f1,w,c
  9349  0026F8  5027               	movf	__tdiv_to_l_@f2+1,w,c
  9350  0026FA  5824               	subwfb	__tdiv_to_l_@f1+1,w,c
  9351  0026FC  5028               	movf	__tdiv_to_l_@f2+2,w,c
  9352  0026FE  5825               	subwfb	__tdiv_to_l_@f1+2,w,c
  9353  002700  A0D8               	btfss	status,0,c
  9354  002702  D007               	goto	l1192
  9355  002704  5026               	movf	__tdiv_to_l_@f2,w,c
  9356  002706  5E23               	subwf	__tdiv_to_l_@f1,f,c
  9357  002708  5027               	movf	__tdiv_to_l_@f2+1,w,c
  9358  00270A  5A24               	subwfb	__tdiv_to_l_@f1+1,f,c
  9359  00270C  5028               	movf	__tdiv_to_l_@f2+2,w,c
  9360  00270E  5A25               	subwfb	__tdiv_to_l_@f1+2,f,c
  9361  002710  802C               	bsf	__tdiv_to_l_@quot,0,c
  9362  002712                     l1192:
  9363  002712  90D8               	bcf	status,0,c
  9364  002714  3623               	rlcf	__tdiv_to_l_@f1,f,c
  9365  002716  3624               	rlcf	__tdiv_to_l_@f1+1,f,c
  9366  002718  3625               	rlcf	__tdiv_to_l_@f1+2,f,c
  9367  00271A  2E30               	decfsz	__tdiv_to_l_@cntr,f,c
  9368  00271C  D7E6               	goto	l1191
  9369  00271E  AE31               	btfss	__tdiv_to_l_@exp1,7,c
  9370  002720  D016               	goto	l6451
  9371  002722  5031               	movf	__tdiv_to_l_@exp1,w,c
  9372  002724  0A80               	xorlw	128
  9373  002726  0F97               	addlw	151
  9374  002728  B0D8               	btfsc	status,0,c
  9375  00272A  D009               	goto	l6447
  9376  00272C  0E00               	movlw	0
  9377  00272E  6E23               	movwf	?__tdiv_to_l_,c
  9378  002730  0E00               	movlw	0
  9379  002732  6E24               	movwf	?__tdiv_to_l_+1,c
  9380  002734  0E00               	movlw	0
  9381  002736  6E25               	movwf	?__tdiv_to_l_+2,c
  9382  002738  0E00               	movlw	0
  9383  00273A  6E26               	movwf	?__tdiv_to_l_+3,c
  9384  00273C  0012               	return	
  9385  00273E                     l6447:
  9386  00273E  90D8               	bcf	status,0,c
  9387  002740  322F               	rrcf	__tdiv_to_l_@quot+3,f,c
  9388  002742  322E               	rrcf	__tdiv_to_l_@quot+2,f,c
  9389  002744  322D               	rrcf	__tdiv_to_l_@quot+1,f,c
  9390  002746  322C               	rrcf	__tdiv_to_l_@quot,f,c
  9391  002748  3E31               	incfsz	__tdiv_to_l_@exp1,f,c
  9392  00274A  D7F9               	goto	l6447
  9393  00274C  D015               	goto	l1198
  9394  00274E                     l6451:
  9395  00274E  0E17               	movlw	23
  9396  002750  6431               	cpfsgt	__tdiv_to_l_@exp1,c
  9397  002752  D00F               	goto	l6459
  9398  002754  0E00               	movlw	0
  9399  002756  6E23               	movwf	?__tdiv_to_l_,c
  9400  002758  0E00               	movlw	0
  9401  00275A  6E24               	movwf	?__tdiv_to_l_+1,c
  9402  00275C  0E00               	movlw	0
  9403  00275E  6E25               	movwf	?__tdiv_to_l_+2,c
  9404  002760  0E00               	movlw	0
  9405  002762  6E26               	movwf	?__tdiv_to_l_+3,c
  9406  002764  0012               	return	
  9407  002766                     l6457:
  9408  002766  90D8               	bcf	status,0,c
  9409  002768  362C               	rlcf	__tdiv_to_l_@quot,f,c
  9410  00276A  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  9411  00276C  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  9412  00276E  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  9413  002770  0631               	decf	__tdiv_to_l_@exp1,f,c
  9414  002772                     l6459:
  9415  002772  5031               	movf	__tdiv_to_l_@exp1,w,c
  9416  002774  A4D8               	btfss	status,2,c
  9417  002776  D7F7               	goto	l6457
  9418  002778                     l1198:
  9419  002778  C02C  F023         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9420  00277C  C02D  F024         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9421  002780  C02E  F025         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9422  002784  C02F  F026         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9423  002788  0012               	return		;funcret
  9424  00278A                     __end_of__tdiv_to_l_:
  9425                           	opt stack 0
  9426                           tblptru	equ	0xFF8
  9427                           tblptrh	equ	0xFF7
  9428                           tblptrl	equ	0xFF6
  9429                           tablat	equ	0xFF5
  9430                           prodh	equ	0xFF4
  9431                           prodl	equ	0xFF3
  9432                           postinc0	equ	0xFEE
  9433                           wreg	equ	0xFE8
  9434                           postdec1	equ	0xFE5
  9435                           fsr1l	equ	0xFE1
  9436                           indf2	equ	0xFDF
  9437                           postinc2	equ	0xFDE
  9438                           postdec2	equ	0xFDD
  9439                           fsr2h	equ	0xFDA
  9440                           fsr2l	equ	0xFD9
  9441                           status	equ	0xFD8
  9442                           
  9443 ;; *************** function __div_to_l_ *****************
  9444 ;; Defined at:
  9445 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;  f1              3   34[COMRAM] unsigned long 
  9448 ;;  f2              3   37[COMRAM] unsigned long 
  9449 ;; Auto vars:     Size  Location     Type
  9450 ;;  quot            4   40[COMRAM] unsigned long 
  9451 ;;  exp1            1   45[COMRAM] unsigned char 
  9452 ;;  cntr            1   44[COMRAM] unsigned char 
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  4   34[COMRAM] unsigned long 
  9455 ;; Registers used:
  9456 ;;		wreg, status,2, status,0
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9462 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9466 ;;Total ram usage:       12 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    3
  9469 ;; This function calls:
  9470 ;;		Nothing
  9471 ;; This function is called by:
  9472 ;;		_printf
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476                           	psect	text25
  9477  00278A                     __ptext25:
  9478                           	opt stack 0
  9479  00278A                     __div_to_l_:
  9480                           	opt stack 25
  9481                           
  9482                           ;incstack = 0
  9483  00278A  3425               	rlcf	__div_to_l_@f1+2,w,c
  9484  00278C  3426               	rlcf	__div_to_l_@f1+3,w,c
  9485  00278E  6E2E               	movwf	__div_to_l_@exp1,c
  9486  002790  502E               	movf	__div_to_l_@exp1,w,c
  9487  002792  A4D8               	btfss	status,2,c
  9488  002794  D009               	goto	l6467
  9489  002796  0E00               	movlw	0
  9490  002798  6E23               	movwf	?__div_to_l_,c
  9491  00279A  0E00               	movlw	0
  9492  00279C  6E24               	movwf	?__div_to_l_+1,c
  9493  00279E  0E00               	movlw	0
  9494  0027A0  6E25               	movwf	?__div_to_l_+2,c
  9495  0027A2  0E00               	movlw	0
  9496  0027A4  6E26               	movwf	?__div_to_l_+3,c
  9497  0027A6  0012               	return	
  9498  0027A8                     l6467:
  9499  0027A8  3428               	rlcf	__div_to_l_@f2+2,w,c
  9500  0027AA  3429               	rlcf	__div_to_l_@f2+3,w,c
  9501  0027AC  6E2D               	movwf	__div_to_l_@cntr,c
  9502  0027AE  502D               	movf	__div_to_l_@cntr,w,c
  9503  0027B0  A4D8               	btfss	status,2,c
  9504  0027B2  D009               	goto	l6473
  9505  0027B4  0E00               	movlw	0
  9506  0027B6  6E23               	movwf	?__div_to_l_,c
  9507  0027B8  0E00               	movlw	0
  9508  0027BA  6E24               	movwf	?__div_to_l_+1,c
  9509  0027BC  0E00               	movlw	0
  9510  0027BE  6E25               	movwf	?__div_to_l_+2,c
  9511  0027C0  0E00               	movlw	0
  9512  0027C2  6E26               	movwf	?__div_to_l_+3,c
  9513  0027C4  0012               	return	
  9514  0027C6                     l6473:
  9515  0027C6  8E25               	bsf	__div_to_l_@f1+2,7,c
  9516  0027C8  0EFF               	movlw	255
  9517  0027CA  1623               	andwf	__div_to_l_@f1,f,c
  9518  0027CC  0EFF               	movlw	255
  9519  0027CE  1624               	andwf	__div_to_l_@f1+1,f,c
  9520  0027D0  0EFF               	movlw	255
  9521  0027D2  1625               	andwf	__div_to_l_@f1+2,f,c
  9522  0027D4  0E00               	movlw	0
  9523  0027D6  1626               	andwf	__div_to_l_@f1+3,f,c
  9524  0027D8  8E28               	bsf	__div_to_l_@f2+2,7,c
  9525  0027DA  0EFF               	movlw	255
  9526  0027DC  1626               	andwf	__div_to_l_@f2,f,c
  9527  0027DE  0EFF               	movlw	255
  9528  0027E0  1627               	andwf	__div_to_l_@f2+1,f,c
  9529  0027E2  0EFF               	movlw	255
  9530  0027E4  1628               	andwf	__div_to_l_@f2+2,f,c
  9531  0027E6  0E00               	movlw	0
  9532  0027E8  1629               	andwf	__div_to_l_@f2+3,f,c
  9533  0027EA  0E00               	movlw	0
  9534  0027EC  6E29               	movwf	__div_to_l_@quot,c
  9535  0027EE  0E00               	movlw	0
  9536  0027F0  6E2A               	movwf	__div_to_l_@quot+1,c
  9537  0027F2  0E00               	movlw	0
  9538  0027F4  6E2B               	movwf	__div_to_l_@quot+2,c
  9539  0027F6  0E00               	movlw	0
  9540  0027F8  6E2C               	movwf	__div_to_l_@quot+3,c
  9541  0027FA  0E7F               	movlw	127
  9542  0027FC  5E2E               	subwf	__div_to_l_@exp1,f,c
  9543  0027FE  502D               	movf	__div_to_l_@cntr,w,c
  9544  002800  0FA0               	addlw	160
  9545  002802  5E2E               	subwf	__div_to_l_@exp1,f,c
  9546  002804  0E20               	movlw	32
  9547  002806  6E2D               	movwf	__div_to_l_@cntr,c
  9548  002808                     l6487:
  9549  002808  90D8               	bcf	status,0,c
  9550  00280A  3629               	rlcf	__div_to_l_@quot,f,c
  9551  00280C  362A               	rlcf	__div_to_l_@quot+1,f,c
  9552  00280E  362B               	rlcf	__div_to_l_@quot+2,f,c
  9553  002810  362C               	rlcf	__div_to_l_@quot+3,f,c
  9554  002812  5026               	movf	__div_to_l_@f2,w,c
  9555  002814  5C23               	subwf	__div_to_l_@f1,w,c
  9556  002816  5027               	movf	__div_to_l_@f2+1,w,c
  9557  002818  5824               	subwfb	__div_to_l_@f1+1,w,c
  9558  00281A  5028               	movf	__div_to_l_@f2+2,w,c
  9559  00281C  5825               	subwfb	__div_to_l_@f1+2,w,c
  9560  00281E  5029               	movf	__div_to_l_@f2+3,w,c
  9561  002820  5826               	subwfb	__div_to_l_@f1+3,w,c
  9562  002822  A0D8               	btfss	status,0,c
  9563  002824  D009               	goto	l6495
  9564  002826  5026               	movf	__div_to_l_@f2,w,c
  9565  002828  5E23               	subwf	__div_to_l_@f1,f,c
  9566  00282A  5027               	movf	__div_to_l_@f2+1,w,c
  9567  00282C  5A24               	subwfb	__div_to_l_@f1+1,f,c
  9568  00282E  5028               	movf	__div_to_l_@f2+2,w,c
  9569  002830  5A25               	subwfb	__div_to_l_@f1+2,f,c
  9570  002832  5029               	movf	__div_to_l_@f2+3,w,c
  9571  002834  5A26               	subwfb	__div_to_l_@f1+3,f,c
  9572  002836  8029               	bsf	__div_to_l_@quot,0,c
  9573  002838                     l6495:
  9574  002838  90D8               	bcf	status,0,c
  9575  00283A  3623               	rlcf	__div_to_l_@f1,f,c
  9576  00283C  3624               	rlcf	__div_to_l_@f1+1,f,c
  9577  00283E  3625               	rlcf	__div_to_l_@f1+2,f,c
  9578  002840  3626               	rlcf	__div_to_l_@f1+3,f,c
  9579  002842  2E2D               	decfsz	__div_to_l_@cntr,f,c
  9580  002844  D7E1               	goto	l6487
  9581  002846  AE2E               	btfss	__div_to_l_@exp1,7,c
  9582  002848  D016               	goto	l6511
  9583  00284A  502E               	movf	__div_to_l_@exp1,w,c
  9584  00284C  0A80               	xorlw	128
  9585  00284E  0F9F               	addlw	159
  9586  002850  B0D8               	btfsc	status,0,c
  9587  002852  D009               	goto	l6507
  9588  002854  0E00               	movlw	0
  9589  002856  6E23               	movwf	?__div_to_l_,c
  9590  002858  0E00               	movlw	0
  9591  00285A  6E24               	movwf	?__div_to_l_+1,c
  9592  00285C  0E00               	movlw	0
  9593  00285E  6E25               	movwf	?__div_to_l_+2,c
  9594  002860  0E00               	movlw	0
  9595  002862  6E26               	movwf	?__div_to_l_+3,c
  9596  002864  0012               	return	
  9597  002866                     l6507:
  9598  002866  90D8               	bcf	status,0,c
  9599  002868  322C               	rrcf	__div_to_l_@quot+3,f,c
  9600  00286A  322B               	rrcf	__div_to_l_@quot+2,f,c
  9601  00286C  322A               	rrcf	__div_to_l_@quot+1,f,c
  9602  00286E  3229               	rrcf	__div_to_l_@quot,f,c
  9603  002870  3E2E               	incfsz	__div_to_l_@exp1,f,c
  9604  002872  D7F9               	goto	l6507
  9605  002874  D015               	goto	l1094
  9606  002876                     l6511:
  9607  002876  0E1F               	movlw	31
  9608  002878  642E               	cpfsgt	__div_to_l_@exp1,c
  9609  00287A  D00F               	goto	l6519
  9610  00287C  0E00               	movlw	0
  9611  00287E  6E23               	movwf	?__div_to_l_,c
  9612  002880  0E00               	movlw	0
  9613  002882  6E24               	movwf	?__div_to_l_+1,c
  9614  002884  0E00               	movlw	0
  9615  002886  6E25               	movwf	?__div_to_l_+2,c
  9616  002888  0E00               	movlw	0
  9617  00288A  6E26               	movwf	?__div_to_l_+3,c
  9618  00288C  0012               	return	
  9619  00288E                     l6517:
  9620  00288E  90D8               	bcf	status,0,c
  9621  002890  3629               	rlcf	__div_to_l_@quot,f,c
  9622  002892  362A               	rlcf	__div_to_l_@quot+1,f,c
  9623  002894  362B               	rlcf	__div_to_l_@quot+2,f,c
  9624  002896  362C               	rlcf	__div_to_l_@quot+3,f,c
  9625  002898  062E               	decf	__div_to_l_@exp1,f,c
  9626  00289A                     l6519:
  9627  00289A  502E               	movf	__div_to_l_@exp1,w,c
  9628  00289C  A4D8               	btfss	status,2,c
  9629  00289E  D7F7               	goto	l6517
  9630  0028A0                     l1094:
  9631  0028A0  C029  F023         	movff	__div_to_l_@quot,?__div_to_l_
  9632  0028A4  C02A  F024         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9633  0028A8  C02B  F025         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9634  0028AC  C02C  F026         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9635  0028B0  0012               	return		;funcret
  9636  0028B2                     __end_of__div_to_l_:
  9637                           	opt stack 0
  9638                           tblptru	equ	0xFF8
  9639                           tblptrh	equ	0xFF7
  9640                           tblptrl	equ	0xFF6
  9641                           tablat	equ	0xFF5
  9642                           prodh	equ	0xFF4
  9643                           prodl	equ	0xFF3
  9644                           postinc0	equ	0xFEE
  9645                           wreg	equ	0xFE8
  9646                           postdec1	equ	0xFE5
  9647                           fsr1l	equ	0xFE1
  9648                           indf2	equ	0xFDF
  9649                           postinc2	equ	0xFDE
  9650                           postdec2	equ	0xFDD
  9651                           fsr2h	equ	0xFDA
  9652                           fsr2l	equ	0xFD9
  9653                           status	equ	0xFD8
  9654                           
  9655 ;; *************** function ___lltoft *****************
  9656 ;; Defined at:
  9657 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  9658 ;; Parameters:    Size  Location     Type
  9659 ;;  c               4   42[COMRAM] unsigned long 
  9660 ;; Auto vars:     Size  Location     Type
  9661 ;;  exp             1   50[COMRAM] unsigned char 
  9662 ;; Return value:  Size  Location     Type
  9663 ;;                  3   42[COMRAM] float 
  9664 ;; Registers used:
  9665 ;;		wreg, status,2, status,0, cstack
  9666 ;; Tracked objects:
  9667 ;;		On entry : 0/0
  9668 ;;		On exit  : 0/0
  9669 ;;		Unchanged: 0/0
  9670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9673 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9674 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9675 ;;Total ram usage:        9 bytes
  9676 ;; Hardware stack levels used:    1
  9677 ;; Hardware stack levels required when called:    4
  9678 ;; This function calls:
  9679 ;;		___ftpack
  9680 ;; This function is called by:
  9681 ;;		_printf
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           	psect	text26
  9686  003B88                     __ptext26:
  9687                           	opt stack 0
  9688  003B88                     ___lltoft:
  9689                           	opt stack 24
  9690                           
  9691                           ;incstack = 0
  9692  003B88  0E8E               	movlw	142
  9693  003B8A  6E33               	movwf	___lltoft@exp,c
  9694  003B8C  D006               	goto	l6691
  9695  003B8E                     l6689:
  9696  003B8E  90D8               	bcf	status,0,c
  9697  003B90  322E               	rrcf	___lltoft@c+3,f,c
  9698  003B92  322D               	rrcf	___lltoft@c+2,f,c
  9699  003B94  322C               	rrcf	___lltoft@c+1,f,c
  9700  003B96  322B               	rrcf	___lltoft@c,f,c
  9701  003B98  2A33               	incf	___lltoft@exp,f,c
  9702  003B9A                     l6691:
  9703  003B9A  0E00               	movlw	0
  9704  003B9C  142B               	andwf	___lltoft@c,w,c
  9705  003B9E  6E2F               	movwf	??___lltoft& (0+255),c
  9706  003BA0  0E00               	movlw	0
  9707  003BA2  142C               	andwf	___lltoft@c+1,w,c
  9708  003BA4  6E30               	movwf	(??___lltoft+1)& (0+255),c
  9709  003BA6  0E00               	movlw	0
  9710  003BA8  142D               	andwf	___lltoft@c+2,w,c
  9711  003BAA  6E31               	movwf	(??___lltoft+2)& (0+255),c
  9712  003BAC  0EFF               	movlw	255
  9713  003BAE  142E               	andwf	___lltoft@c+3,w,c
  9714  003BB0  6E32               	movwf	(??___lltoft+3)& (0+255),c
  9715  003BB2  502F               	movf	??___lltoft,w,c
  9716  003BB4  1030               	iorwf	??___lltoft+1,w,c
  9717  003BB6  1031               	iorwf	??___lltoft+2,w,c
  9718  003BB8  1032               	iorwf	??___lltoft+3,w,c
  9719  003BBA  A4D8               	btfss	status,2,c
  9720  003BBC  D7E8               	goto	l6689
  9721  003BBE  C02B  F023         	movff	___lltoft@c,___ftpack@arg
  9722  003BC2  C02C  F024         	movff	___lltoft@c+1,___ftpack@arg+1
  9723  003BC6  C02D  F025         	movff	___lltoft@c+2,___ftpack@arg+2
  9724  003BCA  C033  F026         	movff	___lltoft@exp,___ftpack@exp
  9725  003BCE  0E00               	movlw	0
  9726  003BD0  6E27               	movwf	___ftpack@sign,c
  9727  003BD2  ECBA  F019         	call	___ftpack	;wreg free
  9728  003BD6  C023  F02B         	movff	?___ftpack,?___lltoft
  9729  003BDA  C024  F02C         	movff	?___ftpack+1,?___lltoft+1
  9730  003BDE  C025  F02D         	movff	?___ftpack+2,?___lltoft+2
  9731  003BE2  0012               	return	
  9732  003BE4                     __end_of___lltoft:
  9733                           	opt stack 0
  9734                           tblptru	equ	0xFF8
  9735                           tblptrh	equ	0xFF7
  9736                           tblptrl	equ	0xFF6
  9737                           tablat	equ	0xFF5
  9738                           prodh	equ	0xFF4
  9739                           prodl	equ	0xFF3
  9740                           postinc0	equ	0xFEE
  9741                           wreg	equ	0xFE8
  9742                           postdec1	equ	0xFE5
  9743                           fsr1l	equ	0xFE1
  9744                           indf2	equ	0xFDF
  9745                           postinc2	equ	0xFDE
  9746                           postdec2	equ	0xFDD
  9747                           fsr2h	equ	0xFDA
  9748                           fsr2l	equ	0xFD9
  9749                           status	equ	0xFD8
  9750                           
  9751 ;; *************** function ___llmod *****************
  9752 ;; Defined at:
  9753 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;  dividend        4   47[COMRAM] unsigned long 
  9756 ;;  divisor         4   51[COMRAM] unsigned long 
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;  counter         1   55[COMRAM] unsigned char 
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  4   47[COMRAM] unsigned long 
  9761 ;; Registers used:
  9762 ;;		wreg, status,2, status,0
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/0
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9768 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9772 ;;Total ram usage:        9 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:    3
  9775 ;; This function calls:
  9776 ;;		Nothing
  9777 ;; This function is called by:
  9778 ;;		_printf
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           	psect	text27
  9783  0039FC                     __ptext27:
  9784                           	opt stack 0
  9785  0039FC                     ___llmod:
  9786                           	opt stack 25
  9787                           
  9788                           ;incstack = 0
  9789  0039FC  5034               	movf	___llmod@divisor,w,c
  9790  0039FE  1035               	iorwf	___llmod@divisor+1,w,c
  9791  003A00  1036               	iorwf	___llmod@divisor+2,w,c
  9792  003A02  1037               	iorwf	___llmod@divisor+3,w,c
  9793  003A04  B4D8               	btfsc	status,2,c
  9794  003A06  D024               	goto	l1283
  9795  003A08  0E01               	movlw	1
  9796  003A0A  6E38               	movwf	___llmod@counter,c
  9797  003A0C  D006               	goto	l6677
  9798  003A0E                     l6675:
  9799  003A0E  90D8               	bcf	status,0,c
  9800  003A10  3634               	rlcf	___llmod@divisor,f,c
  9801  003A12  3635               	rlcf	___llmod@divisor+1,f,c
  9802  003A14  3636               	rlcf	___llmod@divisor+2,f,c
  9803  003A16  3637               	rlcf	___llmod@divisor+3,f,c
  9804  003A18  2A38               	incf	___llmod@counter,f,c
  9805  003A1A                     l6677:
  9806  003A1A  AE37               	btfss	___llmod@divisor+3,7,c
  9807  003A1C  D7F8               	goto	l6675
  9808  003A1E                     l6679:
  9809  003A1E  5034               	movf	___llmod@divisor,w,c
  9810  003A20  5C30               	subwf	___llmod@dividend,w,c
  9811  003A22  5035               	movf	___llmod@divisor+1,w,c
  9812  003A24  5831               	subwfb	___llmod@dividend+1,w,c
  9813  003A26  5036               	movf	___llmod@divisor+2,w,c
  9814  003A28  5832               	subwfb	___llmod@dividend+2,w,c
  9815  003A2A  5037               	movf	___llmod@divisor+3,w,c
  9816  003A2C  5833               	subwfb	___llmod@dividend+3,w,c
  9817  003A2E  A0D8               	btfss	status,0,c
  9818  003A30  D008               	goto	l6683
  9819  003A32  5034               	movf	___llmod@divisor,w,c
  9820  003A34  5E30               	subwf	___llmod@dividend,f,c
  9821  003A36  5035               	movf	___llmod@divisor+1,w,c
  9822  003A38  5A31               	subwfb	___llmod@dividend+1,f,c
  9823  003A3A  5036               	movf	___llmod@divisor+2,w,c
  9824  003A3C  5A32               	subwfb	___llmod@dividend+2,f,c
  9825  003A3E  5037               	movf	___llmod@divisor+3,w,c
  9826  003A40  5A33               	subwfb	___llmod@dividend+3,f,c
  9827  003A42                     l6683:
  9828  003A42  90D8               	bcf	status,0,c
  9829  003A44  3237               	rrcf	___llmod@divisor+3,f,c
  9830  003A46  3236               	rrcf	___llmod@divisor+2,f,c
  9831  003A48  3235               	rrcf	___llmod@divisor+1,f,c
  9832  003A4A  3234               	rrcf	___llmod@divisor,f,c
  9833  003A4C  2E38               	decfsz	___llmod@counter,f,c
  9834  003A4E  D7E7               	goto	l6679
  9835  003A50                     l1283:
  9836  003A50  C030  F030         	movff	___llmod@dividend,?___llmod
  9837  003A54  C031  F031         	movff	___llmod@dividend+1,?___llmod+1
  9838  003A58  C032  F032         	movff	___llmod@dividend+2,?___llmod+2
  9839  003A5C  C033  F033         	movff	___llmod@dividend+3,?___llmod+3
  9840  003A60  0012               	return		;funcret
  9841  003A62                     __end_of___llmod:
  9842                           	opt stack 0
  9843                           tblptru	equ	0xFF8
  9844                           tblptrh	equ	0xFF7
  9845                           tblptrl	equ	0xFF6
  9846                           tablat	equ	0xFF5
  9847                           prodh	equ	0xFF4
  9848                           prodl	equ	0xFF3
  9849                           postinc0	equ	0xFEE
  9850                           wreg	equ	0xFE8
  9851                           postdec1	equ	0xFE5
  9852                           fsr1l	equ	0xFE1
  9853                           indf2	equ	0xFDF
  9854                           postinc2	equ	0xFDE
  9855                           postdec2	equ	0xFDD
  9856                           fsr2h	equ	0xFDA
  9857                           fsr2l	equ	0xFD9
  9858                           status	equ	0xFD8
  9859                           
  9860 ;; *************** function ___ftsub *****************
  9861 ;; Defined at:
  9862 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9863 ;; Parameters:    Size  Location     Type
  9864 ;;  f1              3   46[BANK0 ] float 
  9865 ;;  f2              3   49[BANK0 ] float 
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;		None
  9868 ;; Return value:  Size  Location     Type
  9869 ;;                  3   46[BANK0 ] float 
  9870 ;; Registers used:
  9871 ;;		wreg, status,2, status,0, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9877 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9880 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9881 ;;Total ram usage:        6 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    5
  9884 ;; This function calls:
  9885 ;;		___ftadd
  9886 ;; This function is called by:
  9887 ;;		_sortBattery
  9888 ;;		_printf
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           	psect	text28
  9893  003CE4                     __ptext28:
  9894                           	opt stack 0
  9895  003CE4                     ___ftsub:
  9896                           	opt stack 23
  9897                           
  9898                           ;incstack = 0
  9899  003CE4  0100               	movlb	0	; () banked
  9900  003CE6  51B1               	movf	___ftsub@f2& (0+255),w,b
  9901  003CE8  0100               	movlb	0	; () banked
  9902  003CEA  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9903  003CEC  0100               	movlb	0	; () banked
  9904  003CEE  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9905  003CF0  B4D8               	btfsc	status,2,c
  9906  003CF2  D009               	goto	l6587
  9907                           
  9908                           ; BSR set to: 0
  9909  003CF4  0E00               	movlw	0
  9910  003CF6  0100               	movlb	0	; () banked
  9911  003CF8  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
  9912  003CFA  0E00               	movlw	0
  9913  003CFC  0100               	movlb	0	; () banked
  9914  003CFE  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9915  003D00  0E80               	movlw	128
  9916  003D02  0100               	movlb	0	; () banked
  9917  003D04  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9918  003D06                     l6587:
  9919                           
  9920                           ; BSR set to: 0
  9921  003D06  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
  9922  003D0A  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
  9923  003D0E  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
  9924  003D12  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
  9925  003D16  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
  9926  003D1A  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
  9927  003D1E  EC0F  F00E         	call	___ftadd	;wreg free
  9928  003D22  C0A2  F0AE         	movff	?___ftadd,?___ftsub
  9929  003D26  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
  9930  003D2A  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
  9931  003D2E  0012               	return	
  9932  003D30                     __end_of___ftsub:
  9933                           	opt stack 0
  9934                           tblptru	equ	0xFF8
  9935                           tblptrh	equ	0xFF7
  9936                           tblptrl	equ	0xFF6
  9937                           tablat	equ	0xFF5
  9938                           prodh	equ	0xFF4
  9939                           prodl	equ	0xFF3
  9940                           postinc0	equ	0xFEE
  9941                           wreg	equ	0xFE8
  9942                           postdec1	equ	0xFE5
  9943                           fsr1l	equ	0xFE1
  9944                           indf2	equ	0xFDF
  9945                           postinc2	equ	0xFDE
  9946                           postdec2	equ	0xFDD
  9947                           fsr2h	equ	0xFDA
  9948                           fsr2l	equ	0xFD9
  9949                           status	equ	0xFD8
  9950                           
  9951 ;; *************** function ___ftneg *****************
  9952 ;; Defined at:
  9953 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;  f1              3   34[COMRAM] float 
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;		None
  9958 ;; Return value:  Size  Location     Type
  9959 ;;                  3   34[COMRAM] float 
  9960 ;; Registers used:
  9961 ;;		wreg, status,2, status,0
  9962 ;; Tracked objects:
  9963 ;;		On entry : 0/0
  9964 ;;		On exit  : 0/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9967 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9970 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9971 ;;Total ram usage:        3 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    3
  9974 ;; This function calls:
  9975 ;;		Nothing
  9976 ;; This function is called by:
  9977 ;;		_printf
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           	psect	text29
  9982  003FD0                     __ptext29:
  9983                           	opt stack 0
  9984  003FD0                     ___ftneg:
  9985                           	opt stack 25
  9986                           
  9987                           ;incstack = 0
  9988  003FD0  5023               	movf	___ftneg@f1,w,c
  9989  003FD2  1024               	iorwf	___ftneg@f1+1,w,c
  9990  003FD4  1025               	iorwf	___ftneg@f1+2,w,c
  9991  003FD6  B4D8               	btfsc	status,2,c
  9992  003FD8  D006               	goto	l1223
  9993  003FDA  0E00               	movlw	0
  9994  003FDC  1A23               	xorwf	___ftneg@f1,f,c
  9995  003FDE  0E00               	movlw	0
  9996  003FE0  1A24               	xorwf	___ftneg@f1+1,f,c
  9997  003FE2  0E80               	movlw	128
  9998  003FE4  1A25               	xorwf	___ftneg@f1+2,f,c
  9999  003FE6                     l1223:
 10000  003FE6  C023  F023         	movff	___ftneg@f1,?___ftneg
 10001  003FEA  C024  F024         	movff	___ftneg@f1+1,?___ftneg+1
 10002  003FEE  C025  F025         	movff	___ftneg@f1+2,?___ftneg+2
 10003  003FF2  0012               	return		;funcret
 10004  003FF4                     __end_of___ftneg:
 10005                           	opt stack 0
 10006                           tblptru	equ	0xFF8
 10007                           tblptrh	equ	0xFF7
 10008                           tblptrl	equ	0xFF6
 10009                           tablat	equ	0xFF5
 10010                           prodh	equ	0xFF4
 10011                           prodl	equ	0xFF3
 10012                           postinc0	equ	0xFEE
 10013                           wreg	equ	0xFE8
 10014                           postdec1	equ	0xFE5
 10015                           fsr1l	equ	0xFE1
 10016                           indf2	equ	0xFDF
 10017                           postinc2	equ	0xFDE
 10018                           postdec2	equ	0xFDD
 10019                           fsr2h	equ	0xFDA
 10020                           fsr2l	equ	0xFD9
 10021                           status	equ	0xFD8
 10022                           
 10023 ;; *************** function ___ftge *****************
 10024 ;; Defined at:
 10025 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10026 ;; Parameters:    Size  Location     Type
 10027 ;;  ff1             3   46[COMRAM] float 
 10028 ;;  ff2             3   49[COMRAM] float 
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;		None
 10031 ;; Return value:  Size  Location     Type
 10032 ;;		None               void
 10033 ;; Registers used:
 10034 ;;		wreg, status,2, status,0
 10035 ;; Tracked objects:
 10036 ;;		On entry : 0/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10040 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10042 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10043 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10044 ;;Total ram usage:        9 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; Hardware stack levels required when called:    3
 10047 ;; This function calls:
 10048 ;;		Nothing
 10049 ;; This function is called by:
 10050 ;;		_sortBattery
 10051 ;;		_printf
 10052 ;; This function uses a non-reentrant model
 10053 ;;
 10054                           
 10055                           	psect	text30
 10056  003608                     __ptext30:
 10057                           	opt stack 0
 10058  003608                     ___ftge:
 10059                           	opt stack 25
 10060                           
 10061                           ;incstack = 0
 10062  003608  AE31               	btfss	___ftge@ff1+2,7,c
 10063  00360A  D016               	goto	l6607
 10064  00360C  C02F  F035         	movff	___ftge@ff1,??___ftge
 10065  003610  C030  F036         	movff	___ftge@ff1+1,??___ftge+1
 10066  003614  C031  F037         	movff	___ftge@ff1+2,??___ftge+2
 10067  003618  1E35               	comf	??___ftge,f,c
 10068  00361A  1E36               	comf	??___ftge+1,f,c
 10069  00361C  1E37               	comf	??___ftge+2,f,c
 10070  00361E  2A35               	incf	??___ftge,f,c
 10071  003620  0E00               	movlw	0
 10072  003622  2236               	addwfc	??___ftge+1,f,c
 10073  003624  2237               	addwfc	??___ftge+2,f,c
 10074  003626  0E00               	movlw	0
 10075  003628  2435               	addwf	??___ftge,w,c
 10076  00362A  6E2F               	movwf	___ftge@ff1,c
 10077  00362C  0E00               	movlw	0
 10078  00362E  2036               	addwfc	??___ftge+1,w,c
 10079  003630  6E30               	movwf	___ftge@ff1+1,c
 10080  003632  0E80               	movlw	128
 10081  003634  2037               	addwfc	??___ftge+2,w,c
 10082  003636  6E31               	movwf	___ftge@ff1+2,c
 10083  003638                     l6607:
 10084  003638  AE34               	btfss	___ftge@ff2+2,7,c
 10085  00363A  D016               	goto	l6611
 10086  00363C  C032  F035         	movff	___ftge@ff2,??___ftge
 10087  003640  C033  F036         	movff	___ftge@ff2+1,??___ftge+1
 10088  003644  C034  F037         	movff	___ftge@ff2+2,??___ftge+2
 10089  003648  1E35               	comf	??___ftge,f,c
 10090  00364A  1E36               	comf	??___ftge+1,f,c
 10091  00364C  1E37               	comf	??___ftge+2,f,c
 10092  00364E  2A35               	incf	??___ftge,f,c
 10093  003650  0E00               	movlw	0
 10094  003652  2236               	addwfc	??___ftge+1,f,c
 10095  003654  2237               	addwfc	??___ftge+2,f,c
 10096  003656  0E00               	movlw	0
 10097  003658  2435               	addwf	??___ftge,w,c
 10098  00365A  6E32               	movwf	___ftge@ff2,c
 10099  00365C  0E00               	movlw	0
 10100  00365E  2036               	addwfc	??___ftge+1,w,c
 10101  003660  6E33               	movwf	___ftge@ff2+1,c
 10102  003662  0E80               	movlw	128
 10103  003664  2037               	addwfc	??___ftge+2,w,c
 10104  003666  6E34               	movwf	___ftge@ff2+2,c
 10105  003668                     l6611:
 10106  003668  0E00               	movlw	0
 10107  00366A  1A2F               	xorwf	___ftge@ff1,f,c
 10108  00366C  0E00               	movlw	0
 10109  00366E  1A30               	xorwf	___ftge@ff1+1,f,c
 10110  003670  0E80               	movlw	128
 10111  003672  1A31               	xorwf	___ftge@ff1+2,f,c
 10112  003674  0E00               	movlw	0
 10113  003676  1A32               	xorwf	___ftge@ff2,f,c
 10114  003678  0E00               	movlw	0
 10115  00367A  1A33               	xorwf	___ftge@ff2+1,f,c
 10116  00367C  0E80               	movlw	128
 10117  00367E  1A34               	xorwf	___ftge@ff2+2,f,c
 10118  003680  5032               	movf	___ftge@ff2,w,c
 10119  003682  5C2F               	subwf	___ftge@ff1,w,c
 10120  003684  5033               	movf	___ftge@ff2+1,w,c
 10121  003686  5830               	subwfb	___ftge@ff1+1,w,c
 10122  003688  5034               	movf	___ftge@ff2+2,w,c
 10123  00368A  5831               	subwfb	___ftge@ff1+2,w,c
 10124  00368C  B0D8               	btfsc	status,0,c
 10125  00368E  D002               	goto	l6617
 10126  003690  90D8               	bcf	status,0,c
 10127  003692  0012               	return	
 10128  003694                     l6617:
 10129  003694  80D8               	bsf	status,0,c
 10130  003696  0012               	return	
 10131  003698                     __end_of___ftge:
 10132                           	opt stack 0
 10133                           tblptru	equ	0xFF8
 10134                           tblptrh	equ	0xFF7
 10135                           tblptrl	equ	0xFF6
 10136                           tablat	equ	0xFF5
 10137                           prodh	equ	0xFF4
 10138                           prodl	equ	0xFF3
 10139                           postinc0	equ	0xFEE
 10140                           wreg	equ	0xFE8
 10141                           postdec1	equ	0xFE5
 10142                           fsr1l	equ	0xFE1
 10143                           indf2	equ	0xFDF
 10144                           postinc2	equ	0xFDE
 10145                           postdec2	equ	0xFDD
 10146                           fsr2h	equ	0xFDA
 10147                           fsr2l	equ	0xFD9
 10148                           status	equ	0xFD8
 10149                           
 10150 ;; *************** function _lcdHome *****************
 10151 ;; Defined at:
 10152 ;;		line 70 in file "lcd.c"
 10153 ;; Parameters:    Size  Location     Type
 10154 ;;		None
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;		None
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  2   24[None  ] int 
 10159 ;; Registers used:
 10160 ;;		wreg, status,2, status,0, cstack
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10170 ;;Total ram usage:        0 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    5
 10173 ;; This function calls:
 10174 ;;		_lcdInst
 10175 ;; This function is called by:
 10176 ;;		_main
 10177 ;;		_showDateTime
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           	psect	text31
 10182  0040EE                     __ptext31:
 10183                           	opt stack 0
 10184  0040EE                     _lcdHome:
 10185                           	opt stack 23
 10186                           
 10187                           ;lcd.c: 71: lcdInst(0b11000000);
 10188                           
 10189                           ;incstack = 0
 10190  0040EE  0EC0               	movlw	192
 10191  0040F0  EC0B  F020         	call	_lcdInst
 10192  0040F4  0012               	return		;funcret
 10193  0040F6                     __end_of_lcdHome:
 10194                           	opt stack 0
 10195                           tblptru	equ	0xFF8
 10196                           tblptrh	equ	0xFF7
 10197                           tblptrl	equ	0xFF6
 10198                           tablat	equ	0xFF5
 10199                           prodh	equ	0xFF4
 10200                           prodl	equ	0xFF3
 10201                           postinc0	equ	0xFEE
 10202                           wreg	equ	0xFE8
 10203                           postdec1	equ	0xFE5
 10204                           fsr1l	equ	0xFE1
 10205                           indf2	equ	0xFDF
 10206                           postinc2	equ	0xFDE
 10207                           postdec2	equ	0xFDD
 10208                           fsr2h	equ	0xFDA
 10209                           fsr2l	equ	0xFD9
 10210                           status	equ	0xFD8
 10211                           
 10212 ;; *************** function _lcdClear *****************
 10213 ;; Defined at:
 10214 ;;		line 74 in file "lcd.c"
 10215 ;; Parameters:    Size  Location     Type
 10216 ;;		None
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;		None
 10219 ;; Return value:  Size  Location     Type
 10220 ;;                  1    wreg      void 
 10221 ;; Registers used:
 10222 ;;		wreg, status,2, status,0, cstack
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;Total ram usage:        0 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; Hardware stack levels required when called:    5
 10235 ;; This function calls:
 10236 ;;		_lcdInst
 10237 ;; This function is called by:
 10238 ;;		_main
 10239 ;;		_sortBattery
 10240 ;;		_showDateTime
 10241 ;;		_showMainMenu
 10242 ;;		_showRunSelect
 10243 ;;		_showRunMenu
 10244 ;;		_showRunTime
 10245 ;;		_showRunStats
 10246 ;;		_showErrorMessage
 10247 ;;		_debug
 10248 ;;		_pause
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           	psect	text32
 10253  0040F6                     __ptext32:
 10254                           	opt stack 0
 10255  0040F6                     _lcdClear:
 10256                           	opt stack 24
 10257                           
 10258                           ;lcd.c: 75: lcdInst(0b00000001);
 10259                           
 10260                           ;incstack = 0
 10261  0040F6  0E01               	movlw	1
 10262  0040F8  EC0B  F020         	call	_lcdInst
 10263  0040FC  0012               	return		;funcret
 10264  0040FE                     __end_of_lcdClear:
 10265                           	opt stack 0
 10266                           tblptru	equ	0xFF8
 10267                           tblptrh	equ	0xFF7
 10268                           tblptrl	equ	0xFF6
 10269                           tablat	equ	0xFF5
 10270                           prodh	equ	0xFF4
 10271                           prodl	equ	0xFF3
 10272                           postinc0	equ	0xFEE
 10273                           wreg	equ	0xFE8
 10274                           postdec1	equ	0xFE5
 10275                           fsr1l	equ	0xFE1
 10276                           indf2	equ	0xFDF
 10277                           postinc2	equ	0xFDE
 10278                           postdec2	equ	0xFDD
 10279                           fsr2h	equ	0xFDA
 10280                           fsr2l	equ	0xFD9
 10281                           status	equ	0xFD8
 10282                           
 10283 ;; *************** function _keyPressed *****************
 10284 ;; Defined at:
 10285 ;;		line 43 in file "keypad.c"
 10286 ;; Parameters:    Size  Location     Type
 10287 ;;		None
 10288 ;; Auto vars:     Size  Location     Type
 10289 ;;  key             1   34[COMRAM] unsigned char 
 10290 ;; Return value:  Size  Location     Type
 10291 ;;                  1    wreg      unsigned char 
 10292 ;; Registers used:
 10293 ;;		wreg, status,2
 10294 ;; Tracked objects:
 10295 ;;		On entry : 0/0
 10296 ;;		On exit  : 0/0
 10297 ;;		Unchanged: 0/0
 10298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10302 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10303 ;;Total ram usage:        1 bytes
 10304 ;; Hardware stack levels used:    1
 10305 ;; Hardware stack levels required when called:    3
 10306 ;; This function calls:
 10307 ;;		Nothing
 10308 ;; This function is called by:
 10309 ;;		_showDateTime
 10310 ;; This function uses a non-reentrant model
 10311 ;;
 10312                           
 10313                           	psect	text33
 10314  0040D0                     __ptext33:
 10315                           	opt stack 0
 10316  0040D0                     _keyPressed:
 10317                           	opt stack 25
 10318                           
 10319                           ;keypad.c: 44: char key = lastKey;
 10320                           
 10321                           ;incstack = 0
 10322  0040D0  C05C  F023         	movff	_lastKey,keyPressed@key
 10323                           
 10324                           ;keypad.c: 45: lastKey = 0;
 10325  0040D4  0E00               	movlw	0
 10326  0040D6  6E5C               	movwf	_lastKey,c
 10327                           
 10328                           ;keypad.c: 46: return key;
 10329  0040D8  5023               	movf	keyPressed@key,w,c
 10330  0040DA  0012               	return	
 10331  0040DC                     __end_of_keyPressed:
 10332                           	opt stack 0
 10333                           tblptru	equ	0xFF8
 10334                           tblptrh	equ	0xFF7
 10335                           tblptrl	equ	0xFF6
 10336                           tablat	equ	0xFF5
 10337                           prodh	equ	0xFF4
 10338                           prodl	equ	0xFF3
 10339                           postinc0	equ	0xFEE
 10340                           wreg	equ	0xFE8
 10341                           postdec1	equ	0xFE5
 10342                           fsr1l	equ	0xFE1
 10343                           indf2	equ	0xFDF
 10344                           postinc2	equ	0xFDE
 10345                           postdec2	equ	0xFDD
 10346                           fsr2h	equ	0xFDA
 10347                           fsr2l	equ	0xFD9
 10348                           status	equ	0xFD8
 10349                           
 10350 ;; *************** function _initRTC *****************
 10351 ;; Defined at:
 10352 ;;		line 19 in file "RTC.c"
 10353 ;; Parameters:    Size  Location     Type
 10354 ;;		None
 10355 ;; Auto vars:     Size  Location     Type
 10356 ;;		None
 10357 ;; Return value:  Size  Location     Type
 10358 ;;                  1    wreg      void 
 10359 ;; Registers used:
 10360 ;;		wreg, status,2, status,0, cstack
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/0
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10370 ;;Total ram usage:        0 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    5
 10373 ;; This function calls:
 10374 ;;		_I2C_Master_Init
 10375 ;; This function is called by:
 10376 ;;		_showInterface
 10377 ;;		_showDateTime
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           	psect	text34
 10382  0040A8                     __ptext34:
 10383                           	opt stack 0
 10384  0040A8                     _initRTC:
 10385                           	opt stack 23
 10386                           
 10387                           ;RTC.c: 20: I2C_Master_Init(10000);
 10388                           
 10389                           ;incstack = 0
 10390  0040A8  0E10               	movlw	16
 10391  0040AA  6E30               	movwf	I2C_Master_Init@c,c
 10392  0040AC  0E27               	movlw	39
 10393  0040AE  6E31               	movwf	I2C_Master_Init@c+1,c
 10394  0040B0  0E00               	movlw	0
 10395  0040B2  6E32               	movwf	I2C_Master_Init@c+2,c
 10396  0040B4  0E00               	movlw	0
 10397  0040B6  6E33               	movwf	I2C_Master_Init@c+3,c
 10398  0040B8  ECF2  F01D         	call	_I2C_Master_Init	;wreg free
 10399  0040BC  0012               	return		;funcret
 10400  0040BE                     __end_of_initRTC:
 10401                           	opt stack 0
 10402                           tblptru	equ	0xFF8
 10403                           tblptrh	equ	0xFF7
 10404                           tblptrl	equ	0xFF6
 10405                           tablat	equ	0xFF5
 10406                           prodh	equ	0xFF4
 10407                           prodl	equ	0xFF3
 10408                           postinc0	equ	0xFEE
 10409                           wreg	equ	0xFE8
 10410                           postdec1	equ	0xFE5
 10411                           fsr1l	equ	0xFE1
 10412                           indf2	equ	0xFDF
 10413                           postinc2	equ	0xFDE
 10414                           postdec2	equ	0xFDD
 10415                           fsr2h	equ	0xFDA
 10416                           fsr2l	equ	0xFD9
 10417                           status	equ	0xFD8
 10418                           
 10419 ;; *************** function _I2C_Master_Init *****************
 10420 ;; Defined at:
 10421 ;;		line 13 in file "I2C.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;  c               4   47[COMRAM] const unsigned long 
 10424 ;; Auto vars:     Size  Location     Type
 10425 ;;		None
 10426 ;; Return value:  Size  Location     Type
 10427 ;;                  1    wreg      void 
 10428 ;; Registers used:
 10429 ;;		wreg, status,2, status,0, cstack
 10430 ;; Tracked objects:
 10431 ;;		On entry : 0/0
 10432 ;;		On exit  : 0/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10437 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10438 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10439 ;;Total ram usage:        8 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:    4
 10442 ;; This function calls:
 10443 ;;		___lldiv
 10444 ;; This function is called by:
 10445 ;;		_initRTC
 10446 ;;		_testFrequency
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           	psect	text35
 10451  003BE4                     __ptext35:
 10452                           	opt stack 0
 10453  003BE4                     _I2C_Master_Init:
 10454                           	opt stack 23
 10455                           
 10456                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 10457                           
 10458                           ;incstack = 0
 10459  003BE4  0E00               	movlw	0
 10460  003BE6  6EC7               	movwf	4039,c	;volatile
 10461                           
 10462                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 10463  003BE8  0E28               	movlw	40
 10464  003BEA  6EC6               	movwf	4038,c	;volatile
 10465                           
 10466                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 10467  003BEC  0E00               	movlw	0
 10468  003BEE  6EC5               	movwf	4037,c	;volatile
 10469                           
 10470                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 10471  003BF0  0E80               	movlw	128
 10472  003BF2  6E23               	movwf	___lldiv@dividend,c
 10473  003BF4  0E96               	movlw	150
 10474  003BF6  6E24               	movwf	___lldiv@dividend+1,c
 10475  003BF8  0E98               	movlw	152
 10476  003BFA  6E25               	movwf	___lldiv@dividend+2,c
 10477  003BFC  0E00               	movlw	0
 10478  003BFE  6E26               	movwf	___lldiv@dividend+3,c
 10479  003C00  C030  F034         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10480  003C04  C031  F035         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10481  003C08  C032  F036         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10482  003C0C  C033  F037         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10483  003C10  0E02               	movlw	2
 10484  003C12                     u6115:
 10485  003C12  90D8               	bcf	status,0,c
 10486  003C14  3634               	rlcf	??_I2C_Master_Init,f,c
 10487  003C16  3635               	rlcf	??_I2C_Master_Init+1,f,c
 10488  003C18  3636               	rlcf	??_I2C_Master_Init+2,f,c
 10489  003C1A  3637               	rlcf	??_I2C_Master_Init+3,f,c
 10490  003C1C  2EE8               	decfsz	wreg,f,c
 10491  003C1E  D7F9               	goto	u6115
 10492  003C20  C034  F027         	movff	??_I2C_Master_Init,___lldiv@divisor
 10493  003C24  C035  F028         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10494  003C28  C036  F029         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10495  003C2C  C037  F02A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10496  003C30  ECD0  F01B         	call	___lldiv	;wreg free
 10497  003C34  0423               	decf	?___lldiv,w,c
 10498  003C36  6EC8               	movwf	4040,c	;volatile
 10499                           
 10500                           ;I2C.c: 20: TRISC3 = 1;
 10501  003C38  8694               	bsf	3988,3,c	;volatile
 10502                           
 10503                           ;I2C.c: 21: TRISC4 = 1;
 10504  003C3A  8894               	bsf	3988,4,c	;volatile
 10505  003C3C  0012               	return		;funcret
 10506  003C3E                     __end_of_I2C_Master_Init:
 10507                           	opt stack 0
 10508                           tblptru	equ	0xFF8
 10509                           tblptrh	equ	0xFF7
 10510                           tblptrl	equ	0xFF6
 10511                           tablat	equ	0xFF5
 10512                           prodh	equ	0xFF4
 10513                           prodl	equ	0xFF3
 10514                           postinc0	equ	0xFEE
 10515                           wreg	equ	0xFE8
 10516                           postdec1	equ	0xFE5
 10517                           fsr1l	equ	0xFE1
 10518                           indf2	equ	0xFDF
 10519                           postinc2	equ	0xFDE
 10520                           postdec2	equ	0xFDD
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function ___lldiv *****************
 10526 ;; Defined at:
 10527 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  dividend        4   34[COMRAM] unsigned long 
 10530 ;;  divisor         4   38[COMRAM] unsigned long 
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;  quotient        4   42[COMRAM] unsigned long 
 10533 ;;  counter         1   46[COMRAM] unsigned char 
 10534 ;; Return value:  Size  Location     Type
 10535 ;;                  4   34[COMRAM] unsigned long 
 10536 ;; Registers used:
 10537 ;;		wreg, status,2, status,0
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10543 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10547 ;;Total ram usage:       13 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    3
 10550 ;; This function calls:
 10551 ;;		Nothing
 10552 ;; This function is called by:
 10553 ;;		_I2C_Master_Init
 10554 ;;		_printf
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           	psect	text36
 10559  0037A0                     __ptext36:
 10560                           	opt stack 0
 10561  0037A0                     ___lldiv:
 10562                           	opt stack 25
 10563                           
 10564                           ;incstack = 0
 10565  0037A0  0E00               	movlw	0
 10566  0037A2  6E2B               	movwf	___lldiv@quotient,c
 10567  0037A4  0E00               	movlw	0
 10568  0037A6  6E2C               	movwf	___lldiv@quotient+1,c
 10569  0037A8  0E00               	movlw	0
 10570  0037AA  6E2D               	movwf	___lldiv@quotient+2,c
 10571  0037AC  0E00               	movlw	0
 10572  0037AE  6E2E               	movwf	___lldiv@quotient+3,c
 10573  0037B0  5027               	movf	___lldiv@divisor,w,c
 10574  0037B2  1028               	iorwf	___lldiv@divisor+1,w,c
 10575  0037B4  1029               	iorwf	___lldiv@divisor+2,w,c
 10576  0037B6  102A               	iorwf	___lldiv@divisor+3,w,c
 10577  0037B8  B4D8               	btfsc	status,2,c
 10578  0037BA  D02A               	goto	l1273
 10579  0037BC  0E01               	movlw	1
 10580  0037BE  6E2F               	movwf	___lldiv@counter,c
 10581  0037C0  D006               	goto	l6277
 10582  0037C2                     l6275:
 10583  0037C2  90D8               	bcf	status,0,c
 10584  0037C4  3627               	rlcf	___lldiv@divisor,f,c
 10585  0037C6  3628               	rlcf	___lldiv@divisor+1,f,c
 10586  0037C8  3629               	rlcf	___lldiv@divisor+2,f,c
 10587  0037CA  362A               	rlcf	___lldiv@divisor+3,f,c
 10588  0037CC  2A2F               	incf	___lldiv@counter,f,c
 10589  0037CE                     l6277:
 10590  0037CE  AE2A               	btfss	___lldiv@divisor+3,7,c
 10591  0037D0  D7F8               	goto	l6275
 10592  0037D2                     l6279:
 10593  0037D2  90D8               	bcf	status,0,c
 10594  0037D4  362B               	rlcf	___lldiv@quotient,f,c
 10595  0037D6  362C               	rlcf	___lldiv@quotient+1,f,c
 10596  0037D8  362D               	rlcf	___lldiv@quotient+2,f,c
 10597  0037DA  362E               	rlcf	___lldiv@quotient+3,f,c
 10598  0037DC  5027               	movf	___lldiv@divisor,w,c
 10599  0037DE  5C23               	subwf	___lldiv@dividend,w,c
 10600  0037E0  5028               	movf	___lldiv@divisor+1,w,c
 10601  0037E2  5824               	subwfb	___lldiv@dividend+1,w,c
 10602  0037E4  5029               	movf	___lldiv@divisor+2,w,c
 10603  0037E6  5825               	subwfb	___lldiv@dividend+2,w,c
 10604  0037E8  502A               	movf	___lldiv@divisor+3,w,c
 10605  0037EA  5826               	subwfb	___lldiv@dividend+3,w,c
 10606  0037EC  A0D8               	btfss	status,0,c
 10607  0037EE  D009               	goto	l6287
 10608  0037F0  5027               	movf	___lldiv@divisor,w,c
 10609  0037F2  5E23               	subwf	___lldiv@dividend,f,c
 10610  0037F4  5028               	movf	___lldiv@divisor+1,w,c
 10611  0037F6  5A24               	subwfb	___lldiv@dividend+1,f,c
 10612  0037F8  5029               	movf	___lldiv@divisor+2,w,c
 10613  0037FA  5A25               	subwfb	___lldiv@dividend+2,f,c
 10614  0037FC  502A               	movf	___lldiv@divisor+3,w,c
 10615  0037FE  5A26               	subwfb	___lldiv@dividend+3,f,c
 10616  003800  802B               	bsf	___lldiv@quotient,0,c
 10617  003802                     l6287:
 10618  003802  90D8               	bcf	status,0,c
 10619  003804  322A               	rrcf	___lldiv@divisor+3,f,c
 10620  003806  3229               	rrcf	___lldiv@divisor+2,f,c
 10621  003808  3228               	rrcf	___lldiv@divisor+1,f,c
 10622  00380A  3227               	rrcf	___lldiv@divisor,f,c
 10623  00380C  2E2F               	decfsz	___lldiv@counter,f,c
 10624  00380E  D7E1               	goto	l6279
 10625  003810                     l1273:
 10626  003810  C02B  F023         	movff	___lldiv@quotient,?___lldiv
 10627  003814  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
 10628  003818  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
 10629  00381C  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
 10630  003820  0012               	return		;funcret
 10631  003822                     __end_of___lldiv:
 10632                           	opt stack 0
 10633                           tblptru	equ	0xFF8
 10634                           tblptrh	equ	0xFF7
 10635                           tblptrl	equ	0xFF6
 10636                           tablat	equ	0xFF5
 10637                           prodh	equ	0xFF4
 10638                           prodl	equ	0xFF3
 10639                           postinc0	equ	0xFEE
 10640                           wreg	equ	0xFE8
 10641                           postdec1	equ	0xFE5
 10642                           fsr1l	equ	0xFE1
 10643                           indf2	equ	0xFDF
 10644                           postinc2	equ	0xFDE
 10645                           postdec2	equ	0xFDD
 10646                           fsr2h	equ	0xFDA
 10647                           fsr2l	equ	0xFD9
 10648                           status	equ	0xFD8
 10649                           
 10650 ;; *************** function _getTime *****************
 10651 ;; Defined at:
 10652 ;;		line 23 in file "RTC.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;		None
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;  i               1   55[COMRAM] unsigned char 
 10657 ;;  time           14   41[COMRAM] int [7]
 10658 ;; Return value:  Size  Location     Type
 10659 ;;                  2   37[COMRAM] PTR int 
 10660 ;; Registers used:
 10661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10662 ;; Tracked objects:
 10663 ;;		On entry : 0/0
 10664 ;;		On exit  : 0/0
 10665 ;;		Unchanged: 0/0
 10666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10667 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10668 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10669 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;Total ram usage:       19 bytes
 10672 ;; Hardware stack levels used:    1
 10673 ;; Hardware stack levels required when called:    5
 10674 ;; This function calls:
 10675 ;;		_I2C_Master_Read
 10676 ;;		_I2C_Master_Start
 10677 ;;		_I2C_Master_Stop
 10678 ;;		_I2C_Master_Write
 10679 ;; This function is called by:
 10680 ;;		_showDateTime
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           	psect	text37
 10685  003822                     __ptext37:
 10686                           	opt stack 0
 10687  003822                     _getTime:
 10688                           	opt stack 23
 10689                           
 10690                           ;RTC.c: 24: int time[7];
 10691                           ;RTC.c: 26: (INTCONbits.GIE = 0);
 10692                           
 10693                           ;incstack = 0
 10694  003822  9EF2               	bcf	intcon,7,c	;volatile
 10695                           
 10696                           ;RTC.c: 29: I2C_Master_Start();
 10697  003824  EC83  F020         	call	_I2C_Master_Start	;wreg free
 10698                           
 10699                           ;RTC.c: 30: I2C_Master_Write(0b11010000);
 10700  003828  0E00               	movlw	0
 10701  00382A  6E25               	movwf	I2C_Master_Write@d+1,c
 10702  00382C  0ED0               	movlw	208
 10703  00382E  6E24               	movwf	I2C_Master_Write@d,c
 10704  003830  EC6E  F020         	call	_I2C_Master_Write	;wreg free
 10705                           
 10706                           ;RTC.c: 31: I2C_Master_Write(0x00);
 10707  003834  0E00               	movlw	0
 10708  003836  6E25               	movwf	I2C_Master_Write@d+1,c
 10709  003838  0E00               	movlw	0
 10710  00383A  6E24               	movwf	I2C_Master_Write@d,c
 10711  00383C  EC6E  F020         	call	_I2C_Master_Write	;wreg free
 10712                           
 10713                           ;RTC.c: 32: I2C_Master_Stop();
 10714  003840  EC7F  F020         	call	_I2C_Master_Stop	;wreg free
 10715                           
 10716                           ;RTC.c: 35: I2C_Master_Start();
 10717  003844  EC83  F020         	call	_I2C_Master_Start	;wreg free
 10718                           
 10719                           ;RTC.c: 36: I2C_Master_Write(0b11010001);
 10720  003848  0E00               	movlw	0
 10721  00384A  6E25               	movwf	I2C_Master_Write@d+1,c
 10722  00384C  0ED1               	movlw	209
 10723  00384E  6E24               	movwf	I2C_Master_Write@d,c
 10724  003850  EC6E  F020         	call	_I2C_Master_Write	;wreg free
 10725                           
 10726                           ;RTC.c: 37: for(unsigned char i=0;i<6;i++){
 10727  003854  0E00               	movlw	0
 10728  003856  6E38               	movwf	getTime@i,c
 10729  003858                     l7113:
 10730  003858  0E05               	movlw	5
 10731  00385A  6438               	cpfsgt	getTime@i,c
 10732  00385C  D001               	goto	l7117
 10733  00385E  D013               	goto	l7123
 10734  003860                     l7117:
 10735                           
 10736                           ;RTC.c: 38: time[i] = I2C_Master_Read(1);
 10737  003860  0E01               	movlw	1
 10738  003862  ECC2  F01F         	call	_I2C_Master_Read
 10739  003866  6E28               	movwf	??_getTime& (0+255),c
 10740  003868  6A29               	clrf	(??_getTime+1)& (0+255),c
 10741  00386A  5038               	movf	getTime@i,w,c
 10742  00386C  0D02               	mullw	2
 10743  00386E  0E2A               	movlw	low getTime@time
 10744  003870  24F3               	addwf	prodl,w,c
 10745  003872  6ED9               	movwf	fsr2l,c
 10746  003874  0E00               	movlw	high getTime@time
 10747  003876  20F4               	addwfc	prodh,w,c
 10748  003878  6EDA               	movwf	fsr2h,c
 10749  00387A  C028  FFDE         	movff	??_getTime,postinc2
 10750  00387E  C029  FFDD         	movff	??_getTime+1,postdec2
 10751  003882  2A38               	incf	getTime@i,f,c
 10752  003884  D7E9               	goto	l7113
 10753  003886                     l7123:
 10754                           
 10755                           ;RTC.c: 39: }
 10756                           ;RTC.c: 40: time[6] = I2C_Master_Read(0);
 10757  003886  0E00               	movlw	0
 10758  003888  ECC2  F01F         	call	_I2C_Master_Read
 10759  00388C  6E28               	movwf	??_getTime& (0+255),c
 10760  00388E  5028               	movf	??_getTime,w,c
 10761  003890  6E36               	movwf	getTime@time+12,c
 10762  003892  6A37               	clrf	getTime@time+13,c
 10763                           
 10764                           ;RTC.c: 41: I2C_Master_Stop();
 10765  003894  EC7F  F020         	call	_I2C_Master_Stop	;wreg free
 10766                           
 10767                           ;RTC.c: 43: (INTCONbits.GIE = 1);
 10768  003898  8EF2               	bsf	intcon,7,c	;volatile
 10769                           
 10770                           ;RTC.c: 45: return time;
 10771  00389A  0E2A               	movlw	low getTime@time
 10772  00389C  6E26               	movwf	?_getTime,c
 10773  00389E  0E00               	movlw	high getTime@time
 10774  0038A0  6E27               	movwf	?_getTime+1,c
 10775  0038A2  0012               	return	
 10776  0038A4                     __end_of_getTime:
 10777                           	opt stack 0
 10778                           tblptru	equ	0xFF8
 10779                           tblptrh	equ	0xFF7
 10780                           tblptrl	equ	0xFF6
 10781                           tablat	equ	0xFF5
 10782                           prodh	equ	0xFF4
 10783                           prodl	equ	0xFF3
 10784                           intcon	equ	0xFF2
 10785                           postinc0	equ	0xFEE
 10786                           wreg	equ	0xFE8
 10787                           postdec1	equ	0xFE5
 10788                           fsr1l	equ	0xFE1
 10789                           indf2	equ	0xFDF
 10790                           postinc2	equ	0xFDE
 10791                           postdec2	equ	0xFDD
 10792                           fsr2h	equ	0xFDA
 10793                           fsr2l	equ	0xFD9
 10794                           status	equ	0xFD8
 10795                           
 10796 ;; *************** function _I2C_Master_Write *****************
 10797 ;; Defined at:
 10798 ;;		line 47 in file "I2C.c"
 10799 ;; Parameters:    Size  Location     Type
 10800 ;;  d               2   35[COMRAM] unsigned int 
 10801 ;; Auto vars:     Size  Location     Type
 10802 ;;		None
 10803 ;; Return value:  Size  Location     Type
 10804 ;;                  1    wreg      void 
 10805 ;; Registers used:
 10806 ;;		wreg, status,2, status,0, cstack
 10807 ;; Tracked objects:
 10808 ;;		On entry : 0/0
 10809 ;;		On exit  : 0/0
 10810 ;;		Unchanged: 0/0
 10811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10812 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10815 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10816 ;;Total ram usage:        2 bytes
 10817 ;; Hardware stack levels used:    1
 10818 ;; Hardware stack levels required when called:    4
 10819 ;; This function calls:
 10820 ;;		_I2C_Master_Wait
 10821 ;; This function is called by:
 10822 ;;		_getTime
 10823 ;;		_testFrequency
 10824 ;;		_setTime
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           	psect	text38
 10829  0040DC                     __ptext38:
 10830                           	opt stack 0
 10831  0040DC                     _I2C_Master_Write:
 10832                           	opt stack 23
 10833                           
 10834                           ;I2C.c: 49: I2C_Master_Wait();
 10835                           
 10836                           ;incstack = 0
 10837  0040DC  EC5F  F020         	call	_I2C_Master_Wait	;wreg free
 10838                           
 10839                           ;I2C.c: 50: SSPBUF = d;
 10840  0040E0  C024  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10841  0040E4  0012               	return		;funcret
 10842  0040E6                     __end_of_I2C_Master_Write:
 10843                           	opt stack 0
 10844                           tblptru	equ	0xFF8
 10845                           tblptrh	equ	0xFF7
 10846                           tblptrl	equ	0xFF6
 10847                           tablat	equ	0xFF5
 10848                           prodh	equ	0xFF4
 10849                           prodl	equ	0xFF3
 10850                           intcon	equ	0xFF2
 10851                           postinc0	equ	0xFEE
 10852                           wreg	equ	0xFE8
 10853                           postdec1	equ	0xFE5
 10854                           fsr1l	equ	0xFE1
 10855                           indf2	equ	0xFDF
 10856                           postinc2	equ	0xFDE
 10857                           postdec2	equ	0xFDD
 10858                           fsr2h	equ	0xFDA
 10859                           fsr2l	equ	0xFD9
 10860                           status	equ	0xFD8
 10861                           
 10862 ;; *************** function _I2C_Master_Stop *****************
 10863 ;; Defined at:
 10864 ;;		line 41 in file "I2C.c"
 10865 ;; Parameters:    Size  Location     Type
 10866 ;;		None
 10867 ;; Auto vars:     Size  Location     Type
 10868 ;;		None
 10869 ;; Return value:  Size  Location     Type
 10870 ;;                  2  446[None  ] int 
 10871 ;; Registers used:
 10872 ;;		wreg, status,2, status,0, cstack
 10873 ;; Tracked objects:
 10874 ;;		On entry : 0/0
 10875 ;;		On exit  : 0/0
 10876 ;;		Unchanged: 0/0
 10877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10882 ;;Total ram usage:        0 bytes
 10883 ;; Hardware stack levels used:    1
 10884 ;; Hardware stack levels required when called:    4
 10885 ;; This function calls:
 10886 ;;		_I2C_Master_Wait
 10887 ;; This function is called by:
 10888 ;;		_getTime
 10889 ;;		_testFrequency
 10890 ;;		_setTime
 10891 ;; This function uses a non-reentrant model
 10892 ;;
 10893                           
 10894                           	psect	text39
 10895  0040FE                     __ptext39:
 10896                           	opt stack 0
 10897  0040FE                     _I2C_Master_Stop:
 10898                           	opt stack 23
 10899                           
 10900                           ;I2C.c: 43: I2C_Master_Wait();
 10901                           
 10902                           ;incstack = 0
 10903  0040FE  EC5F  F020         	call	_I2C_Master_Wait	;wreg free
 10904                           
 10905                           ;I2C.c: 44: PEN = 1;
 10906  004102  84C5               	bsf	4037,2,c	;volatile
 10907  004104  0012               	return		;funcret
 10908  004106                     __end_of_I2C_Master_Stop:
 10909                           	opt stack 0
 10910                           tblptru	equ	0xFF8
 10911                           tblptrh	equ	0xFF7
 10912                           tblptrl	equ	0xFF6
 10913                           tablat	equ	0xFF5
 10914                           prodh	equ	0xFF4
 10915                           prodl	equ	0xFF3
 10916                           intcon	equ	0xFF2
 10917                           postinc0	equ	0xFEE
 10918                           wreg	equ	0xFE8
 10919                           postdec1	equ	0xFE5
 10920                           fsr1l	equ	0xFE1
 10921                           indf2	equ	0xFDF
 10922                           postinc2	equ	0xFDE
 10923                           postdec2	equ	0xFDD
 10924                           fsr2h	equ	0xFDA
 10925                           fsr2l	equ	0xFD9
 10926                           status	equ	0xFD8
 10927                           
 10928 ;; *************** function _I2C_Master_Start *****************
 10929 ;; Defined at:
 10930 ;;		line 29 in file "I2C.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;		None
 10933 ;; Auto vars:     Size  Location     Type
 10934 ;;		None
 10935 ;; Return value:  Size  Location     Type
 10936 ;;                  2  442[None  ] int 
 10937 ;; Registers used:
 10938 ;;		wreg, status,2, status,0, cstack
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10948 ;;Total ram usage:        0 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; Hardware stack levels required when called:    4
 10951 ;; This function calls:
 10952 ;;		_I2C_Master_Wait
 10953 ;; This function is called by:
 10954 ;;		_getTime
 10955 ;;		_testFrequency
 10956 ;;		_setTime
 10957 ;; This function uses a non-reentrant model
 10958 ;;
 10959                           
 10960                           	psect	text40
 10961  004106                     __ptext40:
 10962                           	opt stack 0
 10963  004106                     _I2C_Master_Start:
 10964                           	opt stack 23
 10965                           
 10966                           ;I2C.c: 31: I2C_Master_Wait();
 10967                           
 10968                           ;incstack = 0
 10969  004106  EC5F  F020         	call	_I2C_Master_Wait	;wreg free
 10970                           
 10971                           ;I2C.c: 32: SEN = 1;
 10972  00410A  80C5               	bsf	4037,0,c	;volatile
 10973  00410C  0012               	return		;funcret
 10974  00410E                     __end_of_I2C_Master_Start:
 10975                           	opt stack 0
 10976                           tblptru	equ	0xFF8
 10977                           tblptrh	equ	0xFF7
 10978                           tblptrl	equ	0xFF6
 10979                           tablat	equ	0xFF5
 10980                           prodh	equ	0xFF4
 10981                           prodl	equ	0xFF3
 10982                           intcon	equ	0xFF2
 10983                           postinc0	equ	0xFEE
 10984                           wreg	equ	0xFE8
 10985                           postdec1	equ	0xFE5
 10986                           fsr1l	equ	0xFE1
 10987                           indf2	equ	0xFDF
 10988                           postinc2	equ	0xFDE
 10989                           postdec2	equ	0xFDD
 10990                           fsr2h	equ	0xFDA
 10991                           fsr2l	equ	0xFD9
 10992                           status	equ	0xFD8
 10993                           
 10994 ;; *************** function _I2C_Master_Read *****************
 10995 ;; Defined at:
 10996 ;;		line 53 in file "I2C.c"
 10997 ;; Parameters:    Size  Location     Type
 10998 ;;  a               1    wreg     unsigned char 
 10999 ;; Auto vars:     Size  Location     Type
 11000 ;;  a               1   35[COMRAM] unsigned char 
 11001 ;;  temp            1   36[COMRAM] unsigned char 
 11002 ;; Return value:  Size  Location     Type
 11003 ;;                  1    wreg      unsigned char 
 11004 ;; Registers used:
 11005 ;;		wreg, status,2, status,0, cstack
 11006 ;; Tracked objects:
 11007 ;;		On entry : 0/0
 11008 ;;		On exit  : 0/0
 11009 ;;		Unchanged: 0/0
 11010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;Total ram usage:        2 bytes
 11016 ;; Hardware stack levels used:    1
 11017 ;; Hardware stack levels required when called:    4
 11018 ;; This function calls:
 11019 ;;		_I2C_Master_Wait
 11020 ;; This function is called by:
 11021 ;;		_getTime
 11022 ;;		_testFrequency
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           	psect	text41
 11027  003F84                     __ptext41:
 11028                           	opt stack 0
 11029  003F84                     _I2C_Master_Read:
 11030                           	opt stack 23
 11031                           
 11032                           ;incstack = 0
 11033                           ;I2C_Master_Read@a stored from wreg
 11034  003F84  6E24               	movwf	I2C_Master_Read@a,c
 11035                           
 11036                           ;I2C.c: 55: unsigned char temp;
 11037                           ;I2C.c: 56: I2C_Master_Wait();
 11038  003F86  EC5F  F020         	call	_I2C_Master_Wait	;wreg free
 11039                           
 11040                           ;I2C.c: 57: RCEN = 1;
 11041  003F8A  86C5               	bsf	4037,3,c	;volatile
 11042                           
 11043                           ;I2C.c: 58: I2C_Master_Wait();
 11044  003F8C  EC5F  F020         	call	_I2C_Master_Wait	;wreg free
 11045                           
 11046                           ;I2C.c: 59: temp = SSPBUF;
 11047  003F90  CFC9 F025          	movff	4041,I2C_Master_Read@temp	;volatile
 11048                           
 11049                           ;I2C.c: 60: I2C_Master_Wait();
 11050  003F94  EC5F  F020         	call	_I2C_Master_Wait	;wreg free
 11051                           
 11052                           ;I2C.c: 61: ACKDT = (a)?0:1;
 11053  003F98  5024               	movf	I2C_Master_Read@a,w,c
 11054  003F9A  A4D8               	btfss	status,2,c
 11055  003F9C  D002               	goto	u6120
 11056  003F9E  8AC5               	bsf	4037,5,c	;volatile
 11057  003FA0  D001               	goto	l6327
 11058  003FA2                     u6120:
 11059  003FA2  9AC5               	bcf	4037,5,c	;volatile
 11060  003FA4                     l6327:
 11061                           
 11062                           ;I2C.c: 62: ACKEN = 1;
 11063  003FA4  88C5               	bsf	4037,4,c	;volatile
 11064                           
 11065                           ;I2C.c: 63: return temp;
 11066  003FA6  5025               	movf	I2C_Master_Read@temp,w,c
 11067  003FA8  0012               	return	
 11068  003FAA                     __end_of_I2C_Master_Read:
 11069                           	opt stack 0
 11070                           tblptru	equ	0xFF8
 11071                           tblptrh	equ	0xFF7
 11072                           tblptrl	equ	0xFF6
 11073                           tablat	equ	0xFF5
 11074                           prodh	equ	0xFF4
 11075                           prodl	equ	0xFF3
 11076                           intcon	equ	0xFF2
 11077                           postinc0	equ	0xFEE
 11078                           wreg	equ	0xFE8
 11079                           postdec1	equ	0xFE5
 11080                           fsr1l	equ	0xFE1
 11081                           indf2	equ	0xFDF
 11082                           postinc2	equ	0xFDE
 11083                           postdec2	equ	0xFDD
 11084                           fsr2h	equ	0xFDA
 11085                           fsr2l	equ	0xFD9
 11086                           status	equ	0xFD8
 11087                           
 11088 ;; *************** function _I2C_Master_Wait *****************
 11089 ;; Defined at:
 11090 ;;		line 24 in file "I2C.c"
 11091 ;; Parameters:    Size  Location     Type
 11092 ;;		None
 11093 ;; Auto vars:     Size  Location     Type
 11094 ;;		None
 11095 ;; Return value:  Size  Location     Type
 11096 ;;                  1    wreg      void 
 11097 ;; Registers used:
 11098 ;;		wreg, status,2, status,0
 11099 ;; Tracked objects:
 11100 ;;		On entry : 0/0
 11101 ;;		On exit  : 0/0
 11102 ;;		Unchanged: 0/0
 11103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11107 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;Total ram usage:        1 bytes
 11109 ;; Hardware stack levels used:    1
 11110 ;; Hardware stack levels required when called:    3
 11111 ;; This function calls:
 11112 ;;		Nothing
 11113 ;; This function is called by:
 11114 ;;		_I2C_Master_Start
 11115 ;;		_I2C_Master_Stop
 11116 ;;		_I2C_Master_Write
 11117 ;;		_I2C_Master_Read
 11118 ;;		_I2C_Master_RepeatedStart
 11119 ;; This function uses a non-reentrant model
 11120 ;;
 11121                           
 11122                           	psect	text42
 11123  0040BE                     __ptext42:
 11124                           	opt stack 0
 11125  0040BE                     _I2C_Master_Wait:
 11126                           	opt stack 23
 11127  0040BE                     l517:
 11128  0040BE  B4C7               	btfsc	4039,2,c	;volatile
 11129  0040C0  D7FE               	goto	l517
 11130  0040C2  CFC5 F023          	movff	4037,??_I2C_Master_Wait	;volatile
 11131  0040C6  0E1F               	movlw	31
 11132  0040C8  1623               	andwf	??_I2C_Master_Wait,f,c
 11133  0040CA  B4D8               	btfsc	status,2,c
 11134  0040CC  0012               	return	
 11135  0040CE  D7F7               	goto	l517
 11136  0040D0                     __end_of_I2C_Master_Wait:
 11137                           	opt stack 0
 11138                           tblptru	equ	0xFF8
 11139                           tblptrh	equ	0xFF7
 11140                           tblptrl	equ	0xFF6
 11141                           tablat	equ	0xFF5
 11142                           prodh	equ	0xFF4
 11143                           prodl	equ	0xFF3
 11144                           intcon	equ	0xFF2
 11145                           postinc0	equ	0xFEE
 11146                           wreg	equ	0xFE8
 11147                           postdec1	equ	0xFE5
 11148                           fsr1l	equ	0xFE1
 11149                           indf2	equ	0xFDF
 11150                           postinc2	equ	0xFDE
 11151                           postdec2	equ	0xFDD
 11152                           fsr2h	equ	0xFDA
 11153                           fsr2l	equ	0xFD9
 11154                           status	equ	0xFD8
 11155                           
 11156 ;; *************** function _readPastRun *****************
 11157 ;; Defined at:
 11158 ;;		line 23 in file "eeprom.c"
 11159 ;; Parameters:    Size  Location     Type
 11160 ;;  run             2    0[BANK0 ] int 
 11161 ;; Auto vars:     Size  Location     Type
 11162 ;;  i               2   16[BANK0 ] int 
 11163 ;;  data           14    2[BANK0 ] int [7]
 11164 ;; Return value:  Size  Location     Type
 11165 ;;                  2    0[BANK0 ] PTR int 
 11166 ;; Registers used:
 11167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11168 ;; Tracked objects:
 11169 ;;		On entry : 0/0
 11170 ;;		On exit  : 0/0
 11171 ;;		Unchanged: 0/0
 11172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11173 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11176 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11177 ;;Total ram usage:       18 bytes
 11178 ;; Hardware stack levels used:    1
 11179 ;; Hardware stack levels required when called:    4
 11180 ;; This function calls:
 11181 ;;		___wmul
 11182 ;;		_eepromRead
 11183 ;; This function is called by:
 11184 ;;		_showInterface
 11185 ;; This function uses a non-reentrant model
 11186 ;;
 11187                           
 11188                           	psect	text43
 11189  003576                     __ptext43:
 11190                           	opt stack 0
 11191  003576                     _readPastRun:
 11192                           	opt stack 25
 11193                           
 11194                           ;eeprom.c: 24: int data[7];
 11195                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
 11196                           
 11197                           ;incstack = 0
 11198  003576  0E00               	movlw	0
 11199  003578  0100               	movlb	0	; () banked
 11200  00357A  6F91               	movwf	(readPastRun@i+1)& (0+255),b
 11201  00357C  0E00               	movlw	0
 11202  00357E  6F90               	movwf	readPastRun@i& (0+255),b
 11203  003580                     l7325:
 11204                           
 11205                           ; BSR set to: 0
 11206  003580  0100               	movlb	0	; () banked
 11207  003582  BF91               	btfsc	(readPastRun@i+1)& (0+255),7,b
 11208  003584  D008               	goto	l7329
 11209  003586  0100               	movlb	0	; () banked
 11210  003588  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 11211  00358A  E137               	bnz	l7335
 11212  00358C  0E07               	movlw	7
 11213  00358E  0100               	movlb	0	; () banked
 11214  003590  5D90               	subwf	readPastRun@i& (0+255),w,b
 11215  003592  B0D8               	btfsc	status,0,c
 11216  003594  D032               	goto	l7335
 11217  003596                     l7329:
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
 11221  003596  C080  F031         	movff	readPastRun@run,___wmul@multiplier
 11222  00359A  C081  F032         	movff	readPastRun@run+1,___wmul@multiplier+1
 11223  00359E  0E00               	movlw	0
 11224  0035A0  6E34               	movwf	___wmul@multiplicand+1,c
 11225  0035A2  0E07               	movlw	7
 11226  0035A4  6E33               	movwf	___wmul@multiplicand,c
 11227  0035A6  ECD5  F01F         	call	___wmul	;wreg free
 11228  0035AA  0100               	movlb	0	; () banked
 11229  0035AC  5190               	movf	readPastRun@i& (0+255),w,b
 11230  0035AE  2631               	addwf	?___wmul,f,c
 11231  0035B0  0100               	movlb	0	; () banked
 11232  0035B2  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 11233  0035B4  2232               	addwfc	?___wmul+1,f,c
 11234  0035B6  0E01               	movlw	1
 11235  0035B8  2631               	addwf	?___wmul,f,c
 11236  0035BA  0E00               	movlw	0
 11237  0035BC  2232               	addwfc	?___wmul+1,f,c
 11238  0035BE  C031  F037         	movff	?___wmul,eepromRead@address
 11239  0035C2  C032  F038         	movff	?___wmul+1,eepromRead@address+1
 11240  0035C6  0E00               	movlw	0
 11241  0035C8  BE38               	btfsc	eepromRead@address+1,7,c
 11242  0035CA  0EFF               	movlw	-1
 11243  0035CC  6E39               	movwf	eepromRead@address+2,c
 11244  0035CE  6E3A               	movwf	eepromRead@address+3,c
 11245  0035D0  EC3B  F020         	call	_eepromRead	;wreg free
 11246  0035D4  90D8               	bcf	status,0,c
 11247  0035D6  0100               	movlb	0	; () banked
 11248  0035D8  3590               	rlcf	readPastRun@i& (0+255),w,b
 11249  0035DA  6ED9               	movwf	fsr2l,c
 11250  0035DC  0100               	movlb	0	; () banked
 11251  0035DE  3591               	rlcf	(readPastRun@i+1)& (0+255),w,b
 11252  0035E0  6EDA               	movwf	fsr2h,c
 11253  0035E2  0E82               	movlw	low readPastRun@data
 11254  0035E4  26D9               	addwf	fsr2l,f,c
 11255  0035E6  0E00               	movlw	high readPastRun@data
 11256  0035E8  22DA               	addwfc	fsr2h,f,c
 11257  0035EA  C037  FFDE         	movff	?_eepromRead,postinc2
 11258  0035EE  C038  FFDD         	movff	?_eepromRead+1,postdec2
 11259                           
 11260                           ; BSR set to: 0
 11261  0035F2  0100               	movlb	0	; () banked
 11262  0035F4  4B90               	infsnz	readPastRun@i& (0+255),f,b
 11263  0035F6  2B91               	incf	(readPastRun@i+1)& (0+255),f,b
 11264  0035F8  D7C3               	goto	l7325
 11265  0035FA                     l7335:
 11266                           
 11267                           ; BSR set to: 0
 11268                           ;eeprom.c: 27: }
 11269                           ;eeprom.c: 28: return data;
 11270  0035FA  0E82               	movlw	low readPastRun@data
 11271  0035FC  0100               	movlb	0	; () banked
 11272  0035FE  6F80               	movwf	?_readPastRun& (0+255),b
 11273  003600  0E00               	movlw	high readPastRun@data
 11274  003602  0100               	movlb	0	; () banked
 11275  003604  6F81               	movwf	(?_readPastRun+1)& (0+255),b
 11276  003606  0012               	return	
 11277  003608                     __end_of_readPastRun:
 11278                           	opt stack 0
 11279                           tblptru	equ	0xFF8
 11280                           tblptrh	equ	0xFF7
 11281                           tblptrl	equ	0xFF6
 11282                           tablat	equ	0xFF5
 11283                           prodh	equ	0xFF4
 11284                           prodl	equ	0xFF3
 11285                           intcon	equ	0xFF2
 11286                           postinc0	equ	0xFEE
 11287                           wreg	equ	0xFE8
 11288                           postdec1	equ	0xFE5
 11289                           fsr1l	equ	0xFE1
 11290                           indf2	equ	0xFDF
 11291                           postinc2	equ	0xFDE
 11292                           postdec2	equ	0xFDD
 11293                           fsr2h	equ	0xFDA
 11294                           fsr2l	equ	0xFD9
 11295                           status	equ	0xFD8
 11296                           
 11297 ;; *************** function _saveNewRun *****************
 11298 ;; Defined at:
 11299 ;;		line 31 in file "eeprom.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;  data            2    9[BANK0 ] PTR int 
 11302 ;;		 -> main@run(14), 
 11303 ;; Auto vars:     Size  Location     Type
 11304 ;;  i               2   13[BANK0 ] int 
 11305 ;;  n               2   11[BANK0 ] int 
 11306 ;; Return value:  Size  Location     Type
 11307 ;;                  1    wreg      void 
 11308 ;; Registers used:
 11309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11310 ;; Tracked objects:
 11311 ;;		On entry : 0/0
 11312 ;;		On exit  : 0/0
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11315 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11316 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;Total ram usage:        6 bytes
 11320 ;; Hardware stack levels used:    1
 11321 ;; Hardware stack levels required when called:    4
 11322 ;; This function calls:
 11323 ;;		___wmul
 11324 ;;		_eepromRead
 11325 ;;		_eepromWrite
 11326 ;; This function is called by:
 11327 ;;		_main
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331                           	psect	text44
 11332  002DB2                     __ptext44:
 11333                           	opt stack 0
 11334  002DB2                     _saveNewRun:
 11335                           	opt stack 26
 11336                           
 11337                           ;eeprom.c: 33: eepromWrite(eepromRead(0)+1,0);
 11338                           
 11339                           ; BSR set to: 0
 11340                           ;incstack = 0
 11341  002DB2  0E00               	movlw	0
 11342  002DB4  6E37               	movwf	eepromRead@address,c
 11343  002DB6  0E00               	movlw	0
 11344  002DB8  6E38               	movwf	eepromRead@address+1,c
 11345  002DBA  0E00               	movlw	0
 11346  002DBC  6E39               	movwf	eepromRead@address+2,c
 11347  002DBE  0E00               	movlw	0
 11348  002DC0  6E3A               	movwf	eepromRead@address+3,c
 11349  002DC2  EC3B  F020         	call	_eepromRead	;wreg free
 11350  002DC6  0E01               	movlw	1
 11351  002DC8  2437               	addwf	?_eepromRead,w,c
 11352  002DCA  0100               	movlb	0	; () banked
 11353  002DCC  6F80               	movwf	eepromWrite@data& (0+255),b
 11354  002DCE  0E00               	movlw	0
 11355  002DD0  2038               	addwfc	?_eepromRead+1,w,c
 11356  002DD2  0100               	movlb	0	; () banked
 11357  002DD4  6F81               	movwf	(eepromWrite@data+1)& (0+255),b
 11358  002DD6  0E00               	movlw	0
 11359  002DD8  0100               	movlb	0	; () banked
 11360  002DDA  6F82               	movwf	eepromWrite@address& (0+255),b
 11361  002DDC  0E00               	movlw	0
 11362  002DDE  6F83               	movwf	(eepromWrite@address+1)& (0+255),b
 11363  002DE0  0E00               	movlw	0
 11364  002DE2  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
 11365  002DE4  0E00               	movlw	0
 11366  002DE6  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
 11367  002DE8  EC1F  F01E         	call	_eepromWrite	;wreg free
 11368                           
 11369                           ;eeprom.c: 34: int n = eepromRead(0);
 11370  002DEC  0E00               	movlw	0
 11371  002DEE  6E37               	movwf	eepromRead@address,c
 11372  002DF0  0E00               	movlw	0
 11373  002DF2  6E38               	movwf	eepromRead@address+1,c
 11374  002DF4  0E00               	movlw	0
 11375  002DF6  6E39               	movwf	eepromRead@address+2,c
 11376  002DF8  0E00               	movlw	0
 11377  002DFA  6E3A               	movwf	eepromRead@address+3,c
 11378  002DFC  EC3B  F020         	call	_eepromRead	;wreg free
 11379  002E00  C037  F08B         	movff	?_eepromRead,saveNewRun@n
 11380  002E04  C038  F08C         	movff	?_eepromRead+1,saveNewRun@n+1
 11381                           
 11382                           ;eeprom.c: 36: for(int i = 0; i < 7; i++){
 11383  002E08  0E00               	movlw	0
 11384  002E0A  0100               	movlb	0	; () banked
 11385  002E0C  6F8E               	movwf	(saveNewRun@i+1)& (0+255),b
 11386  002E0E  0E00               	movlw	0
 11387  002E10  6F8D               	movwf	saveNewRun@i& (0+255),b
 11388  002E12                     l7651:
 11389                           
 11390                           ; BSR set to: 0
 11391  002E12  0100               	movlb	0	; () banked
 11392  002E14  BF8E               	btfsc	(saveNewRun@i+1)& (0+255),7,b
 11393  002E16  D008               	goto	l7655
 11394  002E18  0100               	movlb	0	; () banked
 11395  002E1A  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
 11396  002E1C  E13A               	bnz	l398
 11397  002E1E  0E07               	movlw	7
 11398  002E20  0100               	movlb	0	; () banked
 11399  002E22  5D8D               	subwf	saveNewRun@i& (0+255),w,b
 11400  002E24  B0D8               	btfsc	status,0,c
 11401  002E26  0012               	return	
 11402  002E28                     l7655:
 11403                           
 11404                           ; BSR set to: 0
 11405                           ;eeprom.c: 37: eepromWrite(data[i], (n*7+1) + i);
 11406  002E28  90D8               	bcf	status,0,c
 11407  002E2A  0100               	movlb	0	; () banked
 11408  002E2C  358D               	rlcf	saveNewRun@i& (0+255),w,b
 11409  002E2E  6ED9               	movwf	fsr2l,c
 11410  002E30  0100               	movlb	0	; () banked
 11411  002E32  358E               	rlcf	(saveNewRun@i+1)& (0+255),w,b
 11412  002E34  6EDA               	movwf	fsr2h,c
 11413  002E36  0100               	movlb	0	; () banked
 11414  002E38  5189               	movf	saveNewRun@data& (0+255),w,b
 11415  002E3A  26D9               	addwf	fsr2l,f,c
 11416  002E3C  0100               	movlb	0	; () banked
 11417  002E3E  518A               	movf	(saveNewRun@data+1)& (0+255),w,b
 11418  002E40  22DA               	addwfc	fsr2h,f,c
 11419  002E42  CFDE F080          	movff	postinc2,eepromWrite@data
 11420  002E46  CFDD F081          	movff	postdec2,eepromWrite@data+1
 11421  002E4A  C08B  F031         	movff	saveNewRun@n,___wmul@multiplier
 11422  002E4E  C08C  F032         	movff	saveNewRun@n+1,___wmul@multiplier+1
 11423  002E52  0E00               	movlw	0
 11424  002E54  6E34               	movwf	___wmul@multiplicand+1,c
 11425  002E56  0E07               	movlw	7
 11426  002E58  6E33               	movwf	___wmul@multiplicand,c
 11427  002E5A  ECD5  F01F         	call	___wmul	;wreg free
 11428  002E5E  0100               	movlb	0	; () banked
 11429  002E60  518D               	movf	saveNewRun@i& (0+255),w,b
 11430  002E62  2631               	addwf	?___wmul,f,c
 11431  002E64  0100               	movlb	0	; () banked
 11432  002E66  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
 11433  002E68  2232               	addwfc	?___wmul+1,f,c
 11434  002E6A  0E01               	movlw	1
 11435  002E6C  2631               	addwf	?___wmul,f,c
 11436  002E6E  0E00               	movlw	0
 11437  002E70  2232               	addwfc	?___wmul+1,f,c
 11438  002E72  C031  F082         	movff	?___wmul,eepromWrite@address
 11439  002E76  C032  F083         	movff	?___wmul+1,eepromWrite@address+1
 11440  002E7A  0100               	movlb	0	; () banked
 11441  002E7C  0E00               	movlw	0
 11442  002E7E  BF83               	btfsc	(eepromWrite@address+1)& (0+255),7,b
 11443  002E80  0EFF               	movlw	-1
 11444  002E82  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
 11445  002E84  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
 11446  002E86  EC1F  F01E         	call	_eepromWrite	;wreg free
 11447  002E8A  0100               	movlb	0	; () banked
 11448  002E8C  4B8D               	infsnz	saveNewRun@i& (0+255),f,b
 11449  002E8E  2B8E               	incf	(saveNewRun@i+1)& (0+255),f,b
 11450  002E90  D7C0               	goto	l7651
 11451  002E92                     l398:
 11452                           
 11453                           ; BSR set to: 0
 11454  002E92  0012               	return		;funcret
 11455  002E94                     __end_of_saveNewRun:
 11456                           	opt stack 0
 11457                           tblptru	equ	0xFF8
 11458                           tblptrh	equ	0xFF7
 11459                           tblptrl	equ	0xFF6
 11460                           tablat	equ	0xFF5
 11461                           prodh	equ	0xFF4
 11462                           prodl	equ	0xFF3
 11463                           intcon	equ	0xFF2
 11464                           postinc0	equ	0xFEE
 11465                           wreg	equ	0xFE8
 11466                           postdec1	equ	0xFE5
 11467                           fsr1l	equ	0xFE1
 11468                           indf2	equ	0xFDF
 11469                           postinc2	equ	0xFDE
 11470                           postdec2	equ	0xFDD
 11471                           fsr2h	equ	0xFDA
 11472                           fsr2l	equ	0xFD9
 11473                           status	equ	0xFD8
 11474                           
 11475 ;; *************** function _eepromWrite *****************
 11476 ;; Defined at:
 11477 ;;		line 41 in file "eeprom.c"
 11478 ;; Parameters:    Size  Location     Type
 11479 ;;  data            2    0[BANK0 ] int 
 11480 ;;  address         4    2[BANK0 ] long 
 11481 ;; Auto vars:     Size  Location     Type
 11482 ;;  ien             2    7[BANK0 ] int 
 11483 ;; Return value:  Size  Location     Type
 11484 ;;                  1    wreg      void 
 11485 ;; Registers used:
 11486 ;;		wreg, status,2, status,0
 11487 ;; Tracked objects:
 11488 ;;		On entry : 0/0
 11489 ;;		On exit  : 0/0
 11490 ;;		Unchanged: 0/0
 11491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11492 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;Total ram usage:        9 bytes
 11497 ;; Hardware stack levels used:    1
 11498 ;; Hardware stack levels required when called:    3
 11499 ;; This function calls:
 11500 ;;		Nothing
 11501 ;; This function is called by:
 11502 ;;		_saveNewRun
 11503 ;; This function uses a non-reentrant model
 11504 ;;
 11505                           
 11506                           	psect	text45
 11507  003C3E                     __ptext45:
 11508                           	opt stack 0
 11509  003C3E                     _eepromWrite:
 11510                           	opt stack 26
 11511  003C3E                     l401:
 11512  003C3E  B2A6               	btfsc	4006,1,c	;volatile
 11513  003C40  D7FE               	goto	l401
 11514                           
 11515                           ;eeprom.c: 45: int ien = INTCONbits.GIE;
 11516  003C42  AEF2               	btfss	intcon,7,c	;volatile
 11517  003C44  D004               	goto	u7670
 11518  003C46  0100               	movlb	0	; () banked
 11519  003C48  6B86               	clrf	??_eepromWrite& (0+255),b
 11520  003C4A  2B86               	incf	??_eepromWrite& (0+255),f,b
 11521  003C4C  D002               	goto	u7678
 11522  003C4E                     u7670:
 11523  003C4E  0100               	movlb	0	; () banked
 11524  003C50  6B86               	clrf	??_eepromWrite& (0+255),b
 11525  003C52                     u7678:
 11526  003C52  0100               	movlb	0	; () banked
 11527  003C54  5186               	movf	??_eepromWrite& (0+255),w,b
 11528  003C56  0100               	movlb	0	; () banked
 11529  003C58  6F87               	movwf	eepromWrite@ien& (0+255),b
 11530  003C5A  6B88               	clrf	(eepromWrite@ien+1)& (0+255),b
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;eeprom.c: 46: (INTCONbits.GIE = 0);
 11534  003C5C  9EF2               	bcf	intcon,7,c	;volatile
 11535                           
 11536                           ; BSR set to: 0
 11537                           ;eeprom.c: 47: EEADR = address;
 11538  003C5E  C082  FFA9         	movff	eepromWrite@address,4009	;volatile
 11539                           
 11540                           ; BSR set to: 0
 11541                           ;eeprom.c: 48: EEADRH = (address>>8) & 0b11;
 11542  003C62  0100               	movlb	0	; () banked
 11543  003C64  5183               	movf	(eepromWrite@address+1)& (0+255),w,b
 11544  003C66  0B03               	andlw	3
 11545  003C68  6EAA               	movwf	4010,c	;volatile
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;eeprom.c: 49: EEDATA = data;
 11549  003C6A  C080  FFA8         	movff	eepromWrite@data,4008	;volatile
 11550                           
 11551                           ; BSR set to: 0
 11552                           ;eeprom.c: 50: EECON1 = 0b100;
 11553  003C6E  0E04               	movlw	4
 11554  003C70  6EA6               	movwf	4006,c	;volatile
 11555                           
 11556                           ; BSR set to: 0
 11557                           ;eeprom.c: 52: EECON2 = 0x55;
 11558  003C72  0E55               	movlw	85
 11559  003C74  6EA7               	movwf	4007,c	;volatile
 11560                           
 11561                           ; BSR set to: 0
 11562                           ;eeprom.c: 53: EECON2 = 0xaa;
 11563  003C76  0EAA               	movlw	170
 11564  003C78  6EA7               	movwf	4007,c	;volatile
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;eeprom.c: 57: EECON1 |= 0b10;
 11568  003C7A  82A6               	bsf	4006,1,c	;volatile
 11569  003C7C                     l404:
 11570  003C7C  B2A6               	btfsc	4006,1,c	;volatile
 11571  003C7E  D7FE               	goto	l404
 11572                           
 11573                           ;eeprom.c: 60: EEIF = 0;
 11574  003C80  98A1               	bcf	4001,4,c	;volatile
 11575                           
 11576                           ;eeprom.c: 62: EECON1 = 0;
 11577  003C82  0E00               	movlw	0
 11578  003C84  6EA6               	movwf	4006,c	;volatile
 11579                           
 11580                           ;eeprom.c: 63: INTCONbits.GIE = ien;
 11581  003C86  0100               	movlb	0	; () banked
 11582  003C88  B187               	btfsc	eepromWrite@ien& (0+255),0,b
 11583  003C8A  D002               	bra	u7695
 11584  003C8C  9EF2               	bcf	intcon,7,c	;volatile
 11585  003C8E  D001               	bra	u7696
 11586  003C90                     u7695:
 11587  003C90  8EF2               	bsf	intcon,7,c	;volatile
 11588  003C92                     u7696:
 11589  003C92  0012               	return		;funcret
 11590  003C94                     __end_of_eepromWrite:
 11591                           	opt stack 0
 11592                           tblptru	equ	0xFF8
 11593                           tblptrh	equ	0xFF7
 11594                           tblptrl	equ	0xFF6
 11595                           tablat	equ	0xFF5
 11596                           prodh	equ	0xFF4
 11597                           prodl	equ	0xFF3
 11598                           intcon	equ	0xFF2
 11599                           postinc0	equ	0xFEE
 11600                           wreg	equ	0xFE8
 11601                           postdec1	equ	0xFE5
 11602                           fsr1l	equ	0xFE1
 11603                           indf2	equ	0xFDF
 11604                           postinc2	equ	0xFDE
 11605                           postdec2	equ	0xFDD
 11606                           fsr2h	equ	0xFDA
 11607                           fsr2l	equ	0xFD9
 11608                           status	equ	0xFD8
 11609                           
 11610 ;; *************** function _eepromRead *****************
 11611 ;; Defined at:
 11612 ;;		line 66 in file "eeprom.c"
 11613 ;; Parameters:    Size  Location     Type
 11614 ;;  address         4   54[COMRAM] long 
 11615 ;; Auto vars:     Size  Location     Type
 11616 ;;		None
 11617 ;; Return value:  Size  Location     Type
 11618 ;;                  2   54[COMRAM] int 
 11619 ;; Registers used:
 11620 ;;		wreg, status,2, status,0
 11621 ;; Tracked objects:
 11622 ;;		On entry : 0/0
 11623 ;;		On exit  : 0/0
 11624 ;;		Unchanged: 0/0
 11625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11626 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11629 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11630 ;;Total ram usage:        4 bytes
 11631 ;; Hardware stack levels used:    1
 11632 ;; Hardware stack levels required when called:    3
 11633 ;; This function calls:
 11634 ;;		Nothing
 11635 ;; This function is called by:
 11636 ;;		_readPastRun
 11637 ;;		_saveNewRun
 11638 ;;		_debug
 11639 ;; This function uses a non-reentrant model
 11640 ;;
 11641                           
 11642                           	psect	text46
 11643  004076                     __ptext46:
 11644                           	opt stack 0
 11645  004076                     _eepromRead:
 11646                           	opt stack 25
 11647                           
 11648                           ;eeprom.c: 67: EEADR = address;
 11649                           
 11650                           ;incstack = 0
 11651  004076  C037  FFA9         	movff	eepromRead@address,4009	;volatile
 11652                           
 11653                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
 11654  00407A  5038               	movf	eepromRead@address+1,w,c
 11655  00407C  0B03               	andlw	3
 11656  00407E  6EAA               	movwf	4010,c	;volatile
 11657                           
 11658                           ;eeprom.c: 69: EECON1 = 0;
 11659  004080  0E00               	movlw	0
 11660  004082  6EA6               	movwf	4006,c	;volatile
 11661                           
 11662                           ;eeprom.c: 70: EECON1 = 1;
 11663  004084  0E01               	movlw	1
 11664  004086  6EA6               	movwf	4006,c	;volatile
 11665                           
 11666                           ;eeprom.c: 71: return EEDATA;
 11667  004088  CFA8 F037          	movff	4008,?_eepromRead	;volatile
 11668  00408C  6A38               	clrf	?_eepromRead+1,c
 11669  00408E  0012               	return	
 11670  004090                     __end_of_eepromRead:
 11671                           	opt stack 0
 11672                           tblptru	equ	0xFF8
 11673                           tblptrh	equ	0xFF7
 11674                           tblptrl	equ	0xFF6
 11675                           tablat	equ	0xFF5
 11676                           prodh	equ	0xFF4
 11677                           prodl	equ	0xFF3
 11678                           intcon	equ	0xFF2
 11679                           postinc0	equ	0xFEE
 11680                           wreg	equ	0xFE8
 11681                           postdec1	equ	0xFE5
 11682                           fsr1l	equ	0xFE1
 11683                           indf2	equ	0xFDF
 11684                           postinc2	equ	0xFDE
 11685                           postdec2	equ	0xFDD
 11686                           fsr2h	equ	0xFDA
 11687                           fsr2l	equ	0xFD9
 11688                           status	equ	0xFD8
 11689                           
 11690 ;; *************** function ___wmul *****************
 11691 ;; Defined at:
 11692 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11693 ;; Parameters:    Size  Location     Type
 11694 ;;  multiplier      2   48[COMRAM] unsigned int 
 11695 ;;  multiplicand    2   50[COMRAM] unsigned int 
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;  product         2   52[COMRAM] unsigned int 
 11698 ;; Return value:  Size  Location     Type
 11699 ;;                  2   48[COMRAM] unsigned int 
 11700 ;; Registers used:
 11701 ;;		wreg, status,2, status,0, prodl, prodh
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11707 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11708 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11710 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11711 ;;Total ram usage:        6 bytes
 11712 ;; Hardware stack levels used:    1
 11713 ;; Hardware stack levels required when called:    3
 11714 ;; This function calls:
 11715 ;;		Nothing
 11716 ;; This function is called by:
 11717 ;;		_readPastRun
 11718 ;;		_saveNewRun
 11719 ;;		_fround
 11720 ;;		_scale
 11721 ;;		_printf
 11722 ;; This function uses a non-reentrant model
 11723 ;;
 11724                           
 11725                           	psect	text47
 11726  003FAA                     __ptext47:
 11727                           	opt stack 0
 11728  003FAA                     ___wmul:
 11729                           	opt stack 24
 11730                           
 11731                           ;incstack = 0
 11732  003FAA  5031               	movf	___wmul@multiplier,w,c
 11733  003FAC  0233               	mulwf	___wmul@multiplicand,c
 11734  003FAE  CFF3 F035          	movff	prodl,___wmul@product
 11735  003FB2  CFF4 F036          	movff	prodh,___wmul@product+1
 11736  003FB6  5031               	movf	___wmul@multiplier,w,c
 11737  003FB8  0234               	mulwf	___wmul@multiplicand+1,c
 11738  003FBA  50F3               	movf	prodl,w,c
 11739  003FBC  2636               	addwf	___wmul@product+1,f,c
 11740  003FBE  5032               	movf	___wmul@multiplier+1,w,c
 11741  003FC0  0233               	mulwf	___wmul@multiplicand,c
 11742  003FC2  50F3               	movf	prodl,w,c
 11743  003FC4  2636               	addwf	___wmul@product+1,f,c
 11744  003FC6  C035  F031         	movff	___wmul@product,?___wmul
 11745  003FCA  C036  F032         	movff	___wmul@product+1,?___wmul+1
 11746  003FCE  0012               	return	
 11747  003FD0                     __end_of___wmul:
 11748                           	opt stack 0
 11749                           tblptru	equ	0xFF8
 11750                           tblptrh	equ	0xFF7
 11751                           tblptrl	equ	0xFF6
 11752                           tablat	equ	0xFF5
 11753                           prodh	equ	0xFF4
 11754                           prodl	equ	0xFF3
 11755                           intcon	equ	0xFF2
 11756                           postinc0	equ	0xFEE
 11757                           wreg	equ	0xFE8
 11758                           postdec1	equ	0xFE5
 11759                           fsr1l	equ	0xFE1
 11760                           indf2	equ	0xFDF
 11761                           postinc2	equ	0xFDE
 11762                           postdec2	equ	0xFDD
 11763                           fsr2h	equ	0xFDA
 11764                           fsr2l	equ	0xFD9
 11765                           status	equ	0xFD8
 11766                           
 11767 ;; *************** function _pinSetup *****************
 11768 ;; Defined at:
 11769 ;;		line 310 in file "main.c"
 11770 ;; Parameters:    Size  Location     Type
 11771 ;;		None
 11772 ;; Auto vars:     Size  Location     Type
 11773 ;;		None
 11774 ;; Return value:  Size  Location     Type
 11775 ;;                  1    wreg      void 
 11776 ;; Registers used:
 11777 ;;		wreg, status,2, status,0
 11778 ;; Tracked objects:
 11779 ;;		On entry : 0/0
 11780 ;;		On exit  : 0/0
 11781 ;;		Unchanged: 0/0
 11782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11787 ;;Total ram usage:        0 bytes
 11788 ;; Hardware stack levels used:    1
 11789 ;; Hardware stack levels required when called:    3
 11790 ;; This function calls:
 11791 ;;		Nothing
 11792 ;; This function is called by:
 11793 ;;		_main
 11794 ;;		_debug
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           	psect	text48
 11799  003E58                     __ptext48:
 11800                           	opt stack 0
 11801  003E58                     _pinSetup:
 11802                           	opt stack 27
 11803                           
 11804                           ;main.c: 316: TRISA = 0xFF;
 11805                           
 11806                           ;incstack = 0
 11807  003E58  6892               	setf	3986,c	;volatile
 11808                           
 11809                           ;main.c: 317: TRISB = 0xFF;
 11810  003E5A  6893               	setf	3987,c	;volatile
 11811                           
 11812                           ;main.c: 318: TRISC = 0b11000000;
 11813  003E5C  0EC0               	movlw	192
 11814  003E5E  6E94               	movwf	3988,c	;volatile
 11815                           
 11816                           ;main.c: 319: TRISD = 0x00;
 11817  003E60  0E00               	movlw	0
 11818  003E62  6E95               	movwf	3989,c	;volatile
 11819                           
 11820                           ;main.c: 320: TRISE = 0x00;
 11821  003E64  0E00               	movlw	0
 11822  003E66  6E96               	movwf	3990,c	;volatile
 11823                           
 11824                           ;main.c: 322: LATA = 0x00;
 11825  003E68  0E00               	movlw	0
 11826  003E6A  6E89               	movwf	3977,c	;volatile
 11827                           
 11828                           ;main.c: 323: LATB = 0x00;
 11829  003E6C  0E00               	movlw	0
 11830  003E6E  6E8A               	movwf	3978,c	;volatile
 11831                           
 11832                           ;main.c: 324: LATC = 0x00;
 11833  003E70  0E00               	movlw	0
 11834  003E72  6E8B               	movwf	3979,c	;volatile
 11835                           
 11836                           ;main.c: 325: LATD = 0x00;
 11837  003E74  0E00               	movlw	0
 11838  003E76  6E8C               	movwf	3980,c	;volatile
 11839                           
 11840                           ;main.c: 326: LATE = 0x00;
 11841  003E78  0E00               	movlw	0
 11842  003E7A  6E8D               	movwf	3981,c	;volatile
 11843                           
 11844                           ;main.c: 328: ADCON0 = 0x00;
 11845  003E7C  0E00               	movlw	0
 11846  003E7E  6EC2               	movwf	4034,c	;volatile
 11847                           
 11848                           ;main.c: 330: ADCON1 |= 0x0B;
 11849  003E80  0E0B               	movlw	11
 11850  003E82  12C1               	iorwf	4033,f,c	;volatile
 11851                           
 11852                           ;main.c: 335: ADCON2 = 0;
 11853  003E84  0E00               	movlw	0
 11854  003E86  6EC0               	movwf	4032,c	;volatile
 11855                           
 11856                           ;main.c: 336: ADCON2 |= 0b010;
 11857  003E88  82C0               	bsf	4032,1,c	;volatile
 11858                           
 11859                           ;main.c: 337: ADCON2 |= 0b110<<3;
 11860  003E8A  0E30               	movlw	48
 11861  003E8C  12C0               	iorwf	4032,f,c	;volatile
 11862                           
 11863                           ;main.c: 338: ADCON2 |= 1<<7;
 11864  003E8E  8EC0               	bsf	4032,7,c	;volatile
 11865                           
 11866                           ;main.c: 341: INT1IE = 1;
 11867  003E90  86F0               	bsf	intcon3,3,c	;volatile
 11868                           
 11869                           ;main.c: 342: INT0IE = 1;
 11870  003E92  88F2               	bsf	intcon,4,c	;volatile
 11871                           
 11872                           ;main.c: 343: (INTCONbits.GIE = 1);
 11873  003E94  8EF2               	bsf	intcon,7,c	;volatile
 11874  003E96  0012               	return		;funcret
 11875  003E98                     __end_of_pinSetup:
 11876                           	opt stack 0
 11877                           tblptru	equ	0xFF8
 11878                           tblptrh	equ	0xFF7
 11879                           tblptrl	equ	0xFF6
 11880                           tablat	equ	0xFF5
 11881                           prodh	equ	0xFF4
 11882                           prodl	equ	0xFF3
 11883                           intcon	equ	0xFF2
 11884                           intcon3	equ	0xFF0
 11885                           postinc0	equ	0xFEE
 11886                           wreg	equ	0xFE8
 11887                           postdec1	equ	0xFE5
 11888                           fsr1l	equ	0xFE1
 11889                           indf2	equ	0xFDF
 11890                           postinc2	equ	0xFDE
 11891                           postdec2	equ	0xFDD
 11892                           fsr2h	equ	0xFDA
 11893                           fsr2l	equ	0xFD9
 11894                           status	equ	0xFD8
 11895                           
 11896 ;; *************** function _initServo *****************
 11897 ;; Defined at:
 11898 ;;		line 21 in file "servo.c"
 11899 ;; Parameters:    Size  Location     Type
 11900 ;;  motor           2   94[BANK0 ] PTR int 
 11901 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 11902 ;;  angle           2   96[BANK0 ] int 
 11903 ;; Auto vars:     Size  Location     Type
 11904 ;;  i               2  102[BANK0 ] int 
 11905 ;; Return value:  Size  Location     Type
 11906 ;;                  1    wreg      void 
 11907 ;; Registers used:
 11908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11909 ;; Tracked objects:
 11910 ;;		On entry : 0/0
 11911 ;;		On exit  : 0/0
 11912 ;;		Unchanged: 0/0
 11913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11914 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11915 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11916 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11917 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11918 ;;Total ram usage:       10 bytes
 11919 ;; Hardware stack levels used:    1
 11920 ;; Hardware stack levels required when called:    7
 11921 ;; This function calls:
 11922 ;;		_initTimer
 11923 ;;		_setAngle
 11924 ;;		_startTimer
 11925 ;; This function is called by:
 11926 ;;		_main
 11927 ;; This function uses a non-reentrant model
 11928 ;;
 11929                           
 11930                           	psect	text49
 11931  002E94                     __ptext49:
 11932                           	opt stack 0
 11933  002E94                     _initServo:
 11934                           	opt stack 23
 11935                           
 11936                           ;servo.c: 24: for(int i = 0; i < n; i++){
 11937                           
 11938                           ;incstack = 0
 11939  002E94  0E00               	movlw	0
 11940  002E96  0100               	movlb	0	; () banked
 11941  002E98  6FE7               	movwf	(initServo@i+1)& (0+255),b
 11942  002E9A  0E00               	movlw	0
 11943  002E9C  6FE6               	movwf	initServo@i& (0+255),b
 11944  002E9E  D017               	goto	l7521
 11945  002EA0                     l7515:
 11946                           
 11947                           ; BSR set to: 0
 11948                           ;servo.c: 25: if(servos[i] == motor)return;
 11949  002EA0  90D8               	bcf	status,0,c
 11950  002EA2  0100               	movlb	0	; () banked
 11951  002EA4  35E6               	rlcf	initServo@i& (0+255),w,b
 11952  002EA6  6ED9               	movwf	fsr2l,c
 11953  002EA8  0100               	movlb	0	; () banked
 11954  002EAA  35E7               	rlcf	(initServo@i+1)& (0+255),w,b
 11955  002EAC  6EDA               	movwf	fsr2h,c
 11956  002EAE  0E72               	movlw	low _servos
 11957  002EB0  26D9               	addwf	fsr2l,f,c
 11958  002EB2  0E01               	movlw	high _servos
 11959  002EB4  22DA               	addwfc	fsr2h,f,c
 11960  002EB6  0100               	movlb	0	; () banked
 11961  002EB8  51DE               	movf	initServo@motor& (0+255),w,b
 11962  002EBA  18DE               	xorwf	postinc2,w,c
 11963  002EBC  E105               	bnz	l7519
 11964  002EBE  0100               	movlb	0	; () banked
 11965  002EC0  51DF               	movf	(initServo@motor+1)& (0+255),w,b
 11966  002EC2  18DE               	xorwf	postinc2,w,c
 11967  002EC4  B4D8               	btfsc	status,2,c
 11968  002EC6  0012               	return	
 11969  002EC8                     l7519:
 11970                           
 11971                           ; BSR set to: 0
 11972  002EC8  0100               	movlb	0	; () banked
 11973  002ECA  4BE6               	infsnz	initServo@i& (0+255),f,b
 11974  002ECC  2BE7               	incf	(initServo@i+1)& (0+255),f,b
 11975  002ECE                     l7521:
 11976                           
 11977                           ; BSR set to: 0
 11978  002ECE  0100               	movlb	0	; () banked
 11979  002ED0  51FB               	movf	_n& (0+255),w,b
 11980  002ED2  0100               	movlb	0	; () banked
 11981  002ED4  5DE6               	subwf	initServo@i& (0+255),w,b
 11982  002ED6  0100               	movlb	0	; () banked
 11983  002ED8  51E7               	movf	(initServo@i+1)& (0+255),w,b
 11984  002EDA  0A80               	xorlw	128
 11985  002EDC  0100               	movlb	0	; () banked
 11986  002EDE  6FE2               	movwf	??_initServo& (0+255),b
 11987  002EE0  0100               	movlb	0	; () banked
 11988  002EE2  51FC               	movf	(_n+1)& (0+255),w,b
 11989  002EE4  0A80               	xorlw	128
 11990  002EE6  0100               	movlb	0	; () banked
 11991  002EE8  59E2               	subwfb	??_initServo& (0+255),w,b
 11992  002EEA  A0D8               	btfss	status,0,c
 11993  002EEC  D7D9               	goto	l7515
 11994                           
 11995                           ; BSR set to: 0
 11996                           ;servo.c: 26: }
 11997                           ;servo.c: 28: n++;
 11998                           
 11999                           ; BSR set to: 0
 12000  002EEE  0100               	movlb	0	; () banked
 12001  002EF0  4BFB               	infsnz	_n& (0+255),f,b
 12002  002EF2  2BFC               	incf	(_n+1)& (0+255),f,b
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;servo.c: 29: servos[n-1] = motor;
 12006  002EF4  0EFE               	movlw	254
 12007  002EF6  0100               	movlb	0	; () banked
 12008  002EF8  6FE2               	movwf	??_initServo& (0+255),b
 12009  002EFA  0EFF               	movlw	255
 12010  002EFC  0100               	movlb	0	; () banked
 12011  002EFE  6FE3               	movwf	(??_initServo+1)& (0+255),b
 12012  002F00  C0FB  F0E4         	movff	_n,??_initServo+2
 12013  002F04  C0FC  F0E5         	movff	_n+1,??_initServo+3
 12014  002F08  90D8               	bcf	status,0,c
 12015  002F0A  0100               	movlb	0	; () banked
 12016  002F0C  37E4               	rlcf	(??_initServo+2)& (0+255),f,b
 12017  002F0E  37E5               	rlcf	(??_initServo+3)& (0+255),f,b
 12018  002F10  0100               	movlb	0	; () banked
 12019  002F12  51E2               	movf	??_initServo& (0+255),w,b
 12020  002F14  0100               	movlb	0	; () banked
 12021  002F16  27E4               	addwf	(??_initServo+2)& (0+255),f,b
 12022  002F18  0100               	movlb	0	; () banked
 12023  002F1A  51E3               	movf	(??_initServo+1)& (0+255),w,b
 12024  002F1C  0100               	movlb	0	; () banked
 12025  002F1E  23E5               	addwfc	(??_initServo+3)& (0+255),f,b
 12026  002F20  0E72               	movlw	low _servos
 12027  002F22  0100               	movlb	0	; () banked
 12028  002F24  25E4               	addwf	(??_initServo+2)& (0+255),w,b
 12029  002F26  6ED9               	movwf	fsr2l,c
 12030  002F28  0E01               	movlw	high _servos
 12031  002F2A  0100               	movlb	0	; () banked
 12032  002F2C  21E5               	addwfc	(??_initServo+3)& (0+255),w,b
 12033  002F2E  6EDA               	movwf	fsr2h,c
 12034  002F30  C0DE  FFDE         	movff	initServo@motor,postinc2
 12035  002F34  C0DF  FFDD         	movff	initServo@motor+1,postdec2
 12036                           
 12037                           ; BSR set to: 0
 12038                           ;servo.c: 30: setAngle(motor, angle);
 12039  002F38  C0DE  F0D4         	movff	initServo@motor,setAngle@motor
 12040  002F3C  C0DF  F0D5         	movff	initServo@motor+1,setAngle@motor+1
 12041  002F40  C0E0  F0D6         	movff	initServo@angle,setAngle@angle
 12042  002F44  C0E1  F0D7         	movff	initServo@angle+1,setAngle@angle+1
 12043  002F48  ECBB  F017         	call	_setAngle	;wreg free
 12044                           
 12045                           ;servo.c: 32: initTimer(0);
 12046  002F4C  0E00               	movlw	0
 12047  002F4E  6E24               	movwf	initTimer@timer+1,c
 12048  002F50  0E00               	movlw	0
 12049  002F52  6E23               	movwf	initTimer@timer,c
 12050  002F54  ECE4  F01E         	call	_initTimer	;wreg free
 12051                           
 12052                           ;servo.c: 33: startTimer(0,0);
 12053  002F58  0E00               	movlw	0
 12054  002F5A  6E24               	movwf	startTimer@timer+1,c
 12055  002F5C  0E00               	movlw	0
 12056  002F5E  6E23               	movwf	startTimer@timer,c
 12057  002F60  0E00               	movlw	0
 12058  002F62  6E25               	movwf	startTimer@val,c
 12059  002F64  0E00               	movlw	0
 12060  002F66  6E26               	movwf	startTimer@val+1,c
 12061  002F68  0E00               	movlw	0
 12062  002F6A  6E27               	movwf	startTimer@val+2,c
 12063  002F6C  0E00               	movlw	0
 12064  002F6E  6E28               	movwf	startTimer@val+3,c
 12065  002F70  EC98  F01E         	call	_startTimer	;wreg free
 12066  002F74  0012               	return		;funcret
 12067  002F76                     __end_of_initServo:
 12068                           	opt stack 0
 12069                           tblptru	equ	0xFF8
 12070                           tblptrh	equ	0xFF7
 12071                           tblptrl	equ	0xFF6
 12072                           tablat	equ	0xFF5
 12073                           prodh	equ	0xFF4
 12074                           prodl	equ	0xFF3
 12075                           intcon	equ	0xFF2
 12076                           intcon3	equ	0xFF0
 12077                           postinc0	equ	0xFEE
 12078                           wreg	equ	0xFE8
 12079                           postdec1	equ	0xFE5
 12080                           fsr1l	equ	0xFE1
 12081                           indf2	equ	0xFDF
 12082                           postinc2	equ	0xFDE
 12083                           postdec2	equ	0xFDD
 12084                           fsr2h	equ	0xFDA
 12085                           fsr2l	equ	0xFD9
 12086                           status	equ	0xFD8
 12087                           
 12088 ;; *************** function _startTimer *****************
 12089 ;; Defined at:
 12090 ;;		line 77 in file "timer.c"
 12091 ;; Parameters:    Size  Location     Type
 12092 ;;  timer           2   34[COMRAM] int 
 12093 ;;  val             4   36[COMRAM] long 
 12094 ;; Auto vars:     Size  Location     Type
 12095 ;;		None
 12096 ;; Return value:  Size  Location     Type
 12097 ;;                  1    wreg      void 
 12098 ;; Registers used:
 12099 ;;		wreg, status,2, status,0
 12100 ;; Tracked objects:
 12101 ;;		On entry : 0/0
 12102 ;;		On exit  : 0/0
 12103 ;;		Unchanged: 0/0
 12104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12105 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12107 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12108 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12109 ;;Total ram usage:        8 bytes
 12110 ;; Hardware stack levels used:    1
 12111 ;; Hardware stack levels required when called:    3
 12112 ;; This function calls:
 12113 ;;		Nothing
 12114 ;; This function is called by:
 12115 ;;		_main
 12116 ;;		_initServo
 12117 ;;		_testFrequency
 12118 ;; This function uses a non-reentrant model
 12119 ;;
 12120                           
 12121                           	psect	text50
 12122  003D30                     __ptext50:
 12123                           	opt stack 0
 12124  003D30                     _startTimer:
 12125                           	opt stack 27
 12126                           
 12127                           ;timer.c: 78: switch(timer){
 12128                           
 12129                           ;incstack = 0
 12130  003D30  D012               	goto	l5067
 12131  003D32                     l462:
 12132                           
 12133                           ;timer.c: 80: TMR0H = val>>8;
 12134  003D32  C026  FFD7         	movff	startTimer@val+1,4055	;volatile
 12135                           
 12136                           ;timer.c: 81: TMR0L = val;
 12137  003D36  C025  FFD6         	movff	startTimer@val,4054	;volatile
 12138                           
 12139                           ;timer.c: 82: T0CON |= 1<<7;
 12140  003D3A  8ED5               	bsf	4053,7,c	;volatile
 12141                           
 12142                           ;timer.c: 83: break;
 12143  003D3C  0012               	return	
 12144  003D3E                     l464:
 12145                           
 12146                           ;timer.c: 85: TMR1H = val>>8;
 12147  003D3E  C026  FFCF         	movff	startTimer@val+1,4047	;volatile
 12148                           
 12149                           ;timer.c: 86: TMR1L = val;
 12150  003D42  C025  FFCE         	movff	startTimer@val,4046	;volatile
 12151                           
 12152                           ;timer.c: 87: T1CON |= 1<<0;
 12153  003D46  80CD               	bsf	4045,0,c	;volatile
 12154                           
 12155                           ;timer.c: 88: break;
 12156  003D48  0012               	return	
 12157  003D4A                     l465:
 12158                           
 12159                           ;timer.c: 90: TMR3H = val>>8;
 12160  003D4A  C026  FFB3         	movff	startTimer@val+1,4019	;volatile
 12161                           
 12162                           ;timer.c: 91: TMR3L = val;
 12163  003D4E  C025  FFB2         	movff	startTimer@val,4018	;volatile
 12164                           
 12165                           ;timer.c: 92: T3CON |= 1<<0;
 12166  003D52  80B1               	bsf	4017,0,c	;volatile
 12167                           
 12168                           ;timer.c: 93: }
 12169  003D54  0012               	return	
 12170  003D56                     l5067:
 12171  003D56  C023  F029         	movff	startTimer@timer,??_startTimer
 12172  003D5A  C024  F02A         	movff	startTimer@timer+1,??_startTimer+1
 12173                           
 12174                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12175                           ; Switch size 1, requested type "space"
 12176                           ; Number of cases is 1, Range of values is 0 to 0
 12177                           ; switch strategies available:
 12178                           ; Name         Instructions Cycles
 12179                           ; simple_byte            4     3 (average)
 12180                           ;	Chosen strategy is simple_byte
 12181  003D5E  502A               	movf	??_startTimer+1,w,c
 12182  003D60  0A00               	xorlw	0	; case 0
 12183  003D62  A4D8               	btfss	status,2,c
 12184  003D64  0012               	return	
 12185                           
 12186                           ; Switch size 1, requested type "space"
 12187                           ; Number of cases is 3, Range of values is 0 to 3
 12188                           ; switch strategies available:
 12189                           ; Name         Instructions Cycles
 12190                           ; simple_byte           10     6 (average)
 12191                           ;	Chosen strategy is simple_byte
 12192  003D66  5029               	movf	??_startTimer,w,c
 12193  003D68  0A00               	xorlw	0	; case 0
 12194  003D6A  B4D8               	btfsc	status,2,c
 12195  003D6C  D7E2               	goto	l462
 12196  003D6E  0A01               	xorlw	1	; case 1
 12197  003D70  B4D8               	btfsc	status,2,c
 12198  003D72  D7E5               	goto	l464
 12199  003D74  0A02               	xorlw	2	; case 3
 12200  003D76  A4D8               	btfss	status,2,c
 12201  003D78  0012               	return	
 12202  003D7A  D7E7               	goto	l465
 12203  003D7C                     __end_of_startTimer:
 12204                           	opt stack 0
 12205                           tblptru	equ	0xFF8
 12206                           tblptrh	equ	0xFF7
 12207                           tblptrl	equ	0xFF6
 12208                           tablat	equ	0xFF5
 12209                           prodh	equ	0xFF4
 12210                           prodl	equ	0xFF3
 12211                           intcon	equ	0xFF2
 12212                           intcon3	equ	0xFF0
 12213                           postinc0	equ	0xFEE
 12214                           wreg	equ	0xFE8
 12215                           postdec1	equ	0xFE5
 12216                           fsr1l	equ	0xFE1
 12217                           indf2	equ	0xFDF
 12218                           postinc2	equ	0xFDE
 12219                           postdec2	equ	0xFDD
 12220                           fsr2h	equ	0xFDA
 12221                           fsr2l	equ	0xFD9
 12222                           status	equ	0xFD8
 12223                           
 12224 ;; *************** function _setAngle *****************
 12225 ;; Defined at:
 12226 ;;		line 44 in file "servo.c"
 12227 ;; Parameters:    Size  Location     Type
 12228 ;;  motor           2   84[BANK0 ] PTR int 
 12229 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 12230 ;;  angle           2   86[BANK0 ] int 
 12231 ;; Auto vars:     Size  Location     Type
 12232 ;;  i               2   92[BANK0 ] int 
 12233 ;;  period          2   90[BANK0 ] unsigned int 
 12234 ;; Return value:  Size  Location     Type
 12235 ;;                  1    wreg      void 
 12236 ;; Registers used:
 12237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12238 ;; Tracked objects:
 12239 ;;		On entry : 0/0
 12240 ;;		On exit  : 0/0
 12241 ;;		Unchanged: 0/0
 12242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12243 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12244 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12245 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12246 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12247 ;;Total ram usage:       10 bytes
 12248 ;; Hardware stack levels used:    1
 12249 ;; Hardware stack levels required when called:    6
 12250 ;; This function calls:
 12251 ;;		_angleToPulse
 12252 ;; This function is called by:
 12253 ;;		_main
 12254 ;;		_sortBattery
 12255 ;;		_initServo
 12256 ;; This function uses a non-reentrant model
 12257 ;;
 12258                           
 12259                           	psect	text51
 12260  002F76                     __ptext51:
 12261                           	opt stack 0
 12262  002F76                     _setAngle:
 12263                           	opt stack 23
 12264                           
 12265                           ;servo.c: 45: unsigned int period = 50000;
 12266                           
 12267                           ;incstack = 0
 12268  002F76  0EC3               	movlw	195
 12269  002F78  0100               	movlb	0	; () banked
 12270  002F7A  6FDB               	movwf	(setAngle@period+1)& (0+255),b
 12271  002F7C  0E50               	movlw	80
 12272  002F7E  6FDA               	movwf	setAngle@period& (0+255),b
 12273                           
 12274                           ;servo.c: 46: for(int i = 0; i < n; i++){
 12275  002F80  0E00               	movlw	0
 12276  002F82  0100               	movlb	0	; () banked
 12277  002F84  6FDD               	movwf	(setAngle@i+1)& (0+255),b
 12278  002F86  0E00               	movlw	0
 12279  002F88  6FDC               	movwf	setAngle@i& (0+255),b
 12280  002F8A  D03F               	goto	l7285
 12281  002F8C                     l7277:
 12282                           
 12283                           ; BSR set to: 0
 12284                           ;servo.c: 47: if(servos[i] == motor){
 12285  002F8C  90D8               	bcf	status,0,c
 12286  002F8E  0100               	movlb	0	; () banked
 12287  002F90  35DC               	rlcf	setAngle@i& (0+255),w,b
 12288  002F92  6ED9               	movwf	fsr2l,c
 12289  002F94  0100               	movlb	0	; () banked
 12290  002F96  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 12291  002F98  6EDA               	movwf	fsr2h,c
 12292  002F9A  0E72               	movlw	low _servos
 12293  002F9C  26D9               	addwf	fsr2l,f,c
 12294  002F9E  0E01               	movlw	high _servos
 12295  002FA0  22DA               	addwfc	fsr2h,f,c
 12296  002FA2  0100               	movlb	0	; () banked
 12297  002FA4  51D4               	movf	setAngle@motor& (0+255),w,b
 12298  002FA6  18DE               	xorwf	postinc2,w,c
 12299  002FA8  E11C               	bnz	l7281
 12300  002FAA  0100               	movlb	0	; () banked
 12301  002FAC  51D5               	movf	(setAngle@motor+1)& (0+255),w,b
 12302  002FAE  18DE               	xorwf	postinc2,w,c
 12303  002FB0  A4D8               	btfss	status,2,c
 12304  002FB2  D017               	goto	l7281
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
 12308  002FB4  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
 12309  002FB8  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
 12310  002FBC  ECDE  F011         	call	_angleToPulse	;wreg free
 12311  002FC0  90D8               	bcf	status,0,c
 12312  002FC2  0100               	movlb	0	; () banked
 12313  002FC4  35DC               	rlcf	setAngle@i& (0+255),w,b
 12314  002FC6  6ED9               	movwf	fsr2l,c
 12315  002FC8  0100               	movlb	0	; () banked
 12316  002FCA  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 12317  002FCC  6EDA               	movwf	fsr2h,c
 12318  002FCE  0E6A               	movlw	low _pulse
 12319  002FD0  26D9               	addwf	fsr2l,f,c
 12320  002FD2  0E01               	movlw	high _pulse
 12321  002FD4  22DA               	addwfc	fsr2h,f,c
 12322  002FD6  0100               	movlb	0	; () banked
 12323  002FD8  C0BD  FFDE         	movff	?_angleToPulse,postinc2
 12324  002FDC  0100               	movlb	0	; () banked
 12325  002FDE  C0BE  FFDD         	movff	?_angleToPulse+1,postdec2
 12326  002FE2                     l7281:
 12327                           
 12328                           ; BSR set to: 0
 12329                           ;servo.c: 49: }
 12330                           ;servo.c: 50: period-=pulse[i];
 12331  002FE2  90D8               	bcf	status,0,c
 12332  002FE4  0100               	movlb	0	; () banked
 12333  002FE6  35DC               	rlcf	setAngle@i& (0+255),w,b
 12334  002FE8  6ED9               	movwf	fsr2l,c
 12335  002FEA  0100               	movlb	0	; () banked
 12336  002FEC  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 12337  002FEE  6EDA               	movwf	fsr2h,c
 12338  002FF0  0E6A               	movlw	low _pulse
 12339  002FF2  26D9               	addwf	fsr2l,f,c
 12340  002FF4  0E01               	movlw	high _pulse
 12341  002FF6  22DA               	addwfc	fsr2h,f,c
 12342  002FF8  50DE               	movf	postinc2,w,c
 12343  002FFA  0100               	movlb	0	; () banked
 12344  002FFC  5FDA               	subwf	setAngle@period& (0+255),f,b
 12345  002FFE  50DD               	movf	postdec2,w,c
 12346  003000  0100               	movlb	0	; () banked
 12347  003002  5BDB               	subwfb	(setAngle@period+1)& (0+255),f,b
 12348                           
 12349                           ; BSR set to: 0
 12350  003004  0100               	movlb	0	; () banked
 12351  003006  4BDC               	infsnz	setAngle@i& (0+255),f,b
 12352  003008  2BDD               	incf	(setAngle@i+1)& (0+255),f,b
 12353  00300A                     l7285:
 12354                           
 12355                           ; BSR set to: 0
 12356  00300A  0100               	movlb	0	; () banked
 12357  00300C  51FB               	movf	_n& (0+255),w,b
 12358  00300E  0100               	movlb	0	; () banked
 12359  003010  5DDC               	subwf	setAngle@i& (0+255),w,b
 12360  003012  0100               	movlb	0	; () banked
 12361  003014  51DD               	movf	(setAngle@i+1)& (0+255),w,b
 12362  003016  0A80               	xorlw	128
 12363  003018  0100               	movlb	0	; () banked
 12364  00301A  6FD8               	movwf	??_setAngle& (0+255),b
 12365  00301C  0100               	movlb	0	; () banked
 12366  00301E  51FC               	movf	(_n+1)& (0+255),w,b
 12367  003020  0A80               	xorlw	128
 12368  003022  0100               	movlb	0	; () banked
 12369  003024  59D8               	subwfb	??_setAngle& (0+255),w,b
 12370  003026  A0D8               	btfss	status,0,c
 12371  003028  D7B1               	goto	l7277
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;servo.c: 51: }
 12375                           ;servo.c: 52: pulse[n] = period;
 12376                           
 12377                           ; BSR set to: 0
 12378  00302A  90D8               	bcf	status,0,c
 12379  00302C  0100               	movlb	0	; () banked
 12380  00302E  35FB               	rlcf	_n& (0+255),w,b
 12381  003030  6ED9               	movwf	fsr2l,c
 12382  003032  0100               	movlb	0	; () banked
 12383  003034  35FC               	rlcf	(_n+1)& (0+255),w,b
 12384  003036  6EDA               	movwf	fsr2h,c
 12385  003038  0E6A               	movlw	low _pulse
 12386  00303A  26D9               	addwf	fsr2l,f,c
 12387  00303C  0E01               	movlw	high _pulse
 12388  00303E  22DA               	addwfc	fsr2h,f,c
 12389  003040  C0DA  FFDE         	movff	setAngle@period,postinc2
 12390  003044  C0DB  FFDD         	movff	setAngle@period+1,postdec2
 12391                           
 12392                           ; BSR set to: 0
 12393  003048  0012               	return		;funcret
 12394  00304A                     __end_of_setAngle:
 12395                           	opt stack 0
 12396                           tblptru	equ	0xFF8
 12397                           tblptrh	equ	0xFF7
 12398                           tblptrl	equ	0xFF6
 12399                           tablat	equ	0xFF5
 12400                           prodh	equ	0xFF4
 12401                           prodl	equ	0xFF3
 12402                           intcon	equ	0xFF2
 12403                           intcon3	equ	0xFF0
 12404                           postinc0	equ	0xFEE
 12405                           wreg	equ	0xFE8
 12406                           postdec1	equ	0xFE5
 12407                           fsr1l	equ	0xFE1
 12408                           indf2	equ	0xFDF
 12409                           postinc2	equ	0xFDE
 12410                           postdec2	equ	0xFDD
 12411                           fsr2h	equ	0xFDA
 12412                           fsr2l	equ	0xFD9
 12413                           status	equ	0xFD8
 12414                           
 12415 ;; *************** function _angleToPulse *****************
 12416 ;; Defined at:
 12417 ;;		line 36 in file "servo.c"
 12418 ;; Parameters:    Size  Location     Type
 12419 ;;  angle           2   61[BANK0 ] int 
 12420 ;; Auto vars:     Size  Location     Type
 12421 ;;  a000            4   80[BANK0 ] long 
 12422 ;;  a180            4   73[BANK0 ] long 
 12423 ;;  offset          4   69[BANK0 ] long 
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  4   61[BANK0 ] long 
 12426 ;; Registers used:
 12427 ;;		wreg, status,2, status,0, cstack
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12433 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12436 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12437 ;;Total ram usage:       23 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    5
 12440 ;; This function calls:
 12441 ;;		___altoft
 12442 ;;		___awtoft
 12443 ;;		___ftadd
 12444 ;;		___ftdiv
 12445 ;;		___ftmul
 12446 ;;		___fttol
 12447 ;; This function is called by:
 12448 ;;		_setAngle
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           	psect	text52
 12453  0023BC                     __ptext52:
 12454                           	opt stack 0
 12455  0023BC                     _angleToPulse:
 12456                           	opt stack 23
 12457                           
 12458                           ;servo.c: 37: long offset = -600;
 12459                           
 12460                           ; BSR set to: 0
 12461                           ;incstack = 0
 12462  0023BC  0EA8               	movlw	168
 12463  0023BE  0100               	movlb	0	; () banked
 12464  0023C0  6FC5               	movwf	angleToPulse@offset& (0+255),b
 12465  0023C2  0EFD               	movlw	253
 12466  0023C4  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
 12467  0023C6  0EFF               	movlw	255
 12468  0023C8  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
 12469  0023CA  0EFF               	movlw	255
 12470  0023CC  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
 12471                           
 12472                           ;servo.c: 38: long a000 = 1250;
 12473  0023CE  0EE2               	movlw	226
 12474  0023D0  0100               	movlb	0	; () banked
 12475  0023D2  6FD0               	movwf	angleToPulse@a000& (0+255),b
 12476  0023D4  0E04               	movlw	4
 12477  0023D6  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
 12478  0023D8  0E00               	movlw	0
 12479  0023DA  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
 12480  0023DC  0E00               	movlw	0
 12481  0023DE  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
 12482                           
 12483                           ;servo.c: 39: long a180 = 6250;
 12484  0023E0  0E6A               	movlw	106
 12485  0023E2  0100               	movlb	0	; () banked
 12486  0023E4  6FC9               	movwf	angleToPulse@a180& (0+255),b
 12487  0023E6  0E18               	movlw	24
 12488  0023E8  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
 12489  0023EA  0E00               	movlw	0
 12490  0023EC  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
 12491  0023EE  0E00               	movlw	0
 12492  0023F0  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
 12493                           
 12494                           ; BSR set to: 0
 12495                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 12496  0023F2  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
 12497  0023F6  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
 12498  0023FA  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
 12499  0023FE  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
 12500  002402  0100               	movlb	0	; () banked
 12501  002404  1FC1               	comf	??_angleToPulse& (0+255),f,b
 12502  002406  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
 12503  002408  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
 12504  00240A  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
 12505  00240C  2BC1               	incf	??_angleToPulse& (0+255),f,b
 12506  00240E  0E00               	movlw	0
 12507  002410  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 12508  002412  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 12509  002414  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 12510  002416  0100               	movlb	0	; () banked
 12511  002418  51C9               	movf	angleToPulse@a180& (0+255),w,b
 12512  00241A  0100               	movlb	0	; () banked
 12513  00241C  25C1               	addwf	??_angleToPulse& (0+255),w,b
 12514  00241E  6E2B               	movwf	___altoft@c,c
 12515  002420  0100               	movlb	0	; () banked
 12516  002422  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
 12517  002424  0100               	movlb	0	; () banked
 12518  002426  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 12519  002428  6E2C               	movwf	___altoft@c+1,c
 12520  00242A  0100               	movlb	0	; () banked
 12521  00242C  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
 12522  00242E  0100               	movlb	0	; () banked
 12523  002430  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 12524  002432  6E2D               	movwf	___altoft@c+2,c
 12525  002434  0100               	movlb	0	; () banked
 12526  002436  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
 12527  002438  0100               	movlb	0	; () banked
 12528  00243A  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 12529  00243C  6E2E               	movwf	___altoft@c+3,c
 12530  00243E  EC52  F01C         	call	___altoft	;wreg free
 12531  002442  C02B  F08C         	movff	?___altoft,___ftmul@f2
 12532  002446  C02C  F08D         	movff	?___altoft+1,___ftmul@f2+1
 12533  00244A  C02D  F08E         	movff	?___altoft+2,___ftmul@f2+2
 12534  00244E  0E00               	movlw	0
 12535  002450  6E38               	movwf	___ftdiv@f2,c
 12536  002452  0E34               	movlw	52
 12537  002454  6E39               	movwf	___ftdiv@f2+1,c
 12538  002456  0E43               	movlw	67
 12539  002458  6E3A               	movwf	___ftdiv@f2+2,c
 12540  00245A  C0BD  F02B         	movff	angleToPulse@angle,___awtoft@c
 12541  00245E  C0BE  F02C         	movff	angleToPulse@angle+1,___awtoft@c+1
 12542  002462  EC68  F01F         	call	___awtoft	;wreg free
 12543  002466  C02B  F035         	movff	?___awtoft,___ftdiv@f1
 12544  00246A  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
 12545  00246E  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
 12546  002472  ECE1  F014         	call	___ftdiv	;wreg free
 12547  002476  C035  F089         	movff	?___ftdiv,___ftmul@f1
 12548  00247A  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
 12549  00247E  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
 12550  002482  EC2F  F011         	call	___ftmul	;wreg free
 12551  002486  C089  F0A5         	movff	?___ftmul,___ftadd@f2
 12552  00248A  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
 12553  00248E  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
 12554  002492  C0D0  F02B         	movff	angleToPulse@a000,___altoft@c
 12555  002496  C0D1  F02C         	movff	angleToPulse@a000+1,___altoft@c+1
 12556  00249A  C0D2  F02D         	movff	angleToPulse@a000+2,___altoft@c+2
 12557  00249E  C0D3  F02E         	movff	angleToPulse@a000+3,___altoft@c+3
 12558  0024A2  EC52  F01C         	call	___altoft	;wreg free
 12559  0024A6  C02B  F0A2         	movff	?___altoft,___ftadd@f1
 12560  0024AA  C02C  F0A3         	movff	?___altoft+1,___ftadd@f1+1
 12561  0024AE  C02D  F0A4         	movff	?___altoft+2,___ftadd@f1+2
 12562  0024B2  EC0F  F00E         	call	___ftadd	;wreg free
 12563  0024B6  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1418
 12564  0024BA  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1418+1
 12565  0024BE  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1418+2
 12566                           
 12567                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 12568  0024C2  C0C5  F02B         	movff	angleToPulse@offset,___altoft@c
 12569  0024C6  C0C6  F02C         	movff	angleToPulse@offset+1,___altoft@c+1
 12570  0024CA  C0C7  F02D         	movff	angleToPulse@offset+2,___altoft@c+2
 12571  0024CE  C0C8  F02E         	movff	angleToPulse@offset+3,___altoft@c+3
 12572  0024D2  EC52  F01C         	call	___altoft	;wreg free
 12573  0024D6  C02B  F0A5         	movff	?___altoft,___ftadd@f2
 12574  0024DA  C02C  F0A6         	movff	?___altoft+1,___ftadd@f2+1
 12575  0024DE  C02D  F0A7         	movff	?___altoft+2,___ftadd@f2+2
 12576  0024E2  C0CD  F0A2         	movff	_angleToPulse$1418,___ftadd@f1
 12577  0024E6  C0CE  F0A3         	movff	_angleToPulse$1418+1,___ftadd@f1+1
 12578  0024EA  C0CF  F0A4         	movff	_angleToPulse$1418+2,___ftadd@f1+2
 12579  0024EE  EC0F  F00E         	call	___ftadd	;wreg free
 12580  0024F2  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
 12581  0024F6  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
 12582  0024FA  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
 12583  0024FE  EC8A  F012         	call	___fttol	;wreg free
 12584  002502  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
 12585  002506  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
 12586  00250A  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
 12587  00250E  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
 12588  002512  0012               	return	
 12589  002514                     __end_of_angleToPulse:
 12590                           	opt stack 0
 12591                           tblptru	equ	0xFF8
 12592                           tblptrh	equ	0xFF7
 12593                           tblptrl	equ	0xFF6
 12594                           tablat	equ	0xFF5
 12595                           prodh	equ	0xFF4
 12596                           prodl	equ	0xFF3
 12597                           intcon	equ	0xFF2
 12598                           intcon3	equ	0xFF0
 12599                           postinc0	equ	0xFEE
 12600                           wreg	equ	0xFE8
 12601                           postdec1	equ	0xFE5
 12602                           fsr1l	equ	0xFE1
 12603                           indf2	equ	0xFDF
 12604                           postinc2	equ	0xFDE
 12605                           postdec2	equ	0xFDD
 12606                           fsr2h	equ	0xFDA
 12607                           fsr2l	equ	0xFD9
 12608                           status	equ	0xFD8
 12609                           
 12610 ;; *************** function ___fttol *****************
 12611 ;; Defined at:
 12612 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;  f1              3   46[BANK0 ] float 
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  lval            4   56[BANK0 ] unsigned long 
 12617 ;;  exp1            1   60[BANK0 ] unsigned char 
 12618 ;;  sign1           1   55[BANK0 ] unsigned char 
 12619 ;; Return value:  Size  Location     Type
 12620 ;;                  4   46[BANK0 ] long 
 12621 ;; Registers used:
 12622 ;;		wreg, status,2, status,0
 12623 ;; Tracked objects:
 12624 ;;		On entry : 0/0
 12625 ;;		On exit  : 0/0
 12626 ;;		Unchanged: 0/0
 12627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12628 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12629 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12630 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12632 ;;Total ram usage:       15 bytes
 12633 ;; Hardware stack levels used:    1
 12634 ;; Hardware stack levels required when called:    3
 12635 ;; This function calls:
 12636 ;;		Nothing
 12637 ;; This function is called by:
 12638 ;;		_sortBattery
 12639 ;;		_angleToPulse
 12640 ;;		_printf
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           	psect	text53
 12645  002514                     __ptext53:
 12646                           	opt stack 0
 12647  002514                     ___fttol:
 12648                           	opt stack 24
 12649                           
 12650                           ;incstack = 0
 12651  002514  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
 12652  002518  0100               	movlb	0	; () banked
 12653  00251A  6BB3               	clrf	(??___fttol+1)& (0+255),b
 12654  00251C  6BB4               	clrf	(??___fttol+2)& (0+255),b
 12655  00251E  0100               	movlb	0	; () banked
 12656  002520  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
 12657  002522  0100               	movlb	0	; () banked
 12658  002524  37B2               	rlcf	??___fttol& (0+255),f,b
 12659  002526  E301               	bnc	u6521
 12660  002528  81B3               	bsf	(??___fttol+1)& (0+255),0,b
 12661  00252A                     u6521:
 12662  00252A  0100               	movlb	0	; () banked
 12663  00252C  51B2               	movf	??___fttol& (0+255),w,b
 12664  00252E  0100               	movlb	0	; () banked
 12665  002530  6FBC               	movwf	___fttol@exp1& (0+255),b
 12666  002532  0100               	movlb	0	; () banked
 12667  002534  51BC               	movf	___fttol@exp1& (0+255),w,b
 12668  002536  A4D8               	btfss	status,2,c
 12669  002538  D00A               	goto	l6631
 12670                           
 12671                           ; BSR set to: 0
 12672  00253A  0E00               	movlw	0
 12673  00253C  0100               	movlb	0	; () banked
 12674  00253E  6FAE               	movwf	?___fttol& (0+255),b
 12675  002540  0E00               	movlw	0
 12676  002542  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12677  002544  0E00               	movlw	0
 12678  002546  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12679  002548  0E00               	movlw	0
 12680  00254A  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12681                           
 12682                           ; BSR set to: 0
 12683  00254C  0012               	return	
 12684  00254E                     l6631:
 12685                           
 12686                           ; BSR set to: 0
 12687  00254E  0E17               	movlw	23
 12688  002550  0100               	movlb	0	; () banked
 12689  002552  6FB2               	movwf	??___fttol& (0+255),b
 12690  002554  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
 12691  002558  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
 12692  00255C  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
 12693  002560  0100               	movlb	0	; () banked
 12694  002562  29B2               	incf	??___fttol& (0+255),w,b
 12695  002564  0100               	movlb	0	; () banked
 12696  002566  6FB6               	movwf	(??___fttol+4)& (0+255),b
 12697  002568  D005               	goto	u6540
 12698  00256A                     u6545:
 12699  00256A  0100               	movlb	0	; () banked
 12700  00256C  90D8               	bcf	status,0,c
 12701  00256E  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
 12702  002570  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
 12703  002572  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
 12704  002574                     u6540:
 12705  002574  0100               	movlb	0	; () banked
 12706  002576  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
 12707  002578  D7F8               	goto	u6545
 12708  00257A  0100               	movlb	0	; () banked
 12709  00257C  51B3               	movf	(??___fttol+1)& (0+255),w,b
 12710  00257E  0100               	movlb	0	; () banked
 12711  002580  6FB7               	movwf	___fttol@sign1& (0+255),b
 12712                           
 12713                           ; BSR set to: 0
 12714  002582  0100               	movlb	0	; () banked
 12715  002584  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
 12716                           
 12717                           ; BSR set to: 0
 12718  002586  0EFF               	movlw	255
 12719  002588  0100               	movlb	0	; () banked
 12720  00258A  17AE               	andwf	___fttol@f1& (0+255),f,b
 12721  00258C  0EFF               	movlw	255
 12722  00258E  0100               	movlb	0	; () banked
 12723  002590  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
 12724  002592  0E00               	movlw	0
 12725  002594  0100               	movlb	0	; () banked
 12726  002596  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
 12727                           
 12728                           ; BSR set to: 0
 12729  002598  0100               	movlb	0	; () banked
 12730  00259A  51AE               	movf	___fttol@f1& (0+255),w,b
 12731  00259C  0100               	movlb	0	; () banked
 12732  00259E  6FB8               	movwf	___fttol@lval& (0+255),b
 12733  0025A0  0100               	movlb	0	; () banked
 12734  0025A2  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
 12735  0025A4  0100               	movlb	0	; () banked
 12736  0025A6  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
 12737  0025A8  0100               	movlb	0	; () banked
 12738  0025AA  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
 12739  0025AC  0100               	movlb	0	; () banked
 12740  0025AE  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
 12741  0025B0  0100               	movlb	0	; () banked
 12742  0025B2  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
 12743                           
 12744                           ; BSR set to: 0
 12745  0025B4  0E8E               	movlw	142
 12746  0025B6  0100               	movlb	0	; () banked
 12747  0025B8  5FBC               	subwf	___fttol@exp1& (0+255),f,b
 12748                           
 12749                           ; BSR set to: 0
 12750  0025BA  0100               	movlb	0	; () banked
 12751  0025BC  AFBC               	btfss	___fttol@exp1& (0+255),7,b
 12752  0025BE  D01A               	goto	l6653
 12753                           
 12754                           ; BSR set to: 0
 12755  0025C0  0100               	movlb	0	; () banked
 12756  0025C2  51BC               	movf	___fttol@exp1& (0+255),w,b
 12757  0025C4  0A80               	xorlw	128
 12758  0025C6  0F8F               	addlw	143
 12759  0025C8  B0D8               	btfsc	status,0,c
 12760  0025CA  D00A               	goto	l6649
 12761                           
 12762                           ; BSR set to: 0
 12763  0025CC  0E00               	movlw	0
 12764  0025CE  0100               	movlb	0	; () banked
 12765  0025D0  6FAE               	movwf	?___fttol& (0+255),b
 12766  0025D2  0E00               	movlw	0
 12767  0025D4  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12768  0025D6  0E00               	movlw	0
 12769  0025D8  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12770  0025DA  0E00               	movlw	0
 12771  0025DC  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12772                           
 12773                           ; BSR set to: 0
 12774  0025DE  0012               	return	
 12775  0025E0                     l6649:
 12776                           
 12777                           ; BSR set to: 0
 12778  0025E0  0100               	movlb	0	; () banked
 12779  0025E2  90D8               	bcf	status,0,c
 12780  0025E4  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
 12781  0025E6  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
 12782  0025E8  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
 12783  0025EA  33B8               	rrcf	___fttol@lval& (0+255),f,b
 12784                           
 12785                           ; BSR set to: 0
 12786  0025EC  0100               	movlb	0	; () banked
 12787  0025EE  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
 12788  0025F0  D7F7               	goto	l6649
 12789                           
 12790                           ; BSR set to: 0
 12791  0025F2  D01B               	goto	l6663
 12792  0025F4                     l6653:
 12793                           
 12794                           ; BSR set to: 0
 12795  0025F4  0E17               	movlw	23
 12796  0025F6  0100               	movlb	0	; () banked
 12797  0025F8  65BC               	cpfsgt	___fttol@exp1& (0+255),b
 12798  0025FA  D012               	goto	l6661
 12799                           
 12800                           ; BSR set to: 0
 12801  0025FC  0E00               	movlw	0
 12802  0025FE  0100               	movlb	0	; () banked
 12803  002600  6FAE               	movwf	?___fttol& (0+255),b
 12804  002602  0E00               	movlw	0
 12805  002604  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12806  002606  0E00               	movlw	0
 12807  002608  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12808  00260A  0E00               	movlw	0
 12809  00260C  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12810                           
 12811                           ; BSR set to: 0
 12812  00260E  0012               	return	
 12813  002610                     l6659:
 12814                           
 12815                           ; BSR set to: 0
 12816  002610  0100               	movlb	0	; () banked
 12817  002612  90D8               	bcf	status,0,c
 12818  002614  37B8               	rlcf	___fttol@lval& (0+255),f,b
 12819  002616  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
 12820  002618  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
 12821  00261A  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
 12822  00261C  0100               	movlb	0	; () banked
 12823  00261E  07BC               	decf	___fttol@exp1& (0+255),f,b
 12824  002620                     l6661:
 12825                           
 12826                           ; BSR set to: 0
 12827  002620  0100               	movlb	0	; () banked
 12828  002622  51BC               	movf	___fttol@exp1& (0+255),w,b
 12829  002624  0100               	movlb	0	; () banked
 12830  002626  A4D8               	btfss	status,2,c
 12831  002628  D7F3               	goto	l6659
 12832  00262A                     l6663:
 12833                           
 12834                           ; BSR set to: 0
 12835  00262A  0100               	movlb	0	; () banked
 12836  00262C  51B7               	movf	___fttol@sign1& (0+255),w,b
 12837  00262E  0100               	movlb	0	; () banked
 12838  002630  B4D8               	btfsc	status,2,c
 12839  002632  D009               	goto	l6667
 12840                           
 12841                           ; BSR set to: 0
 12842  002634  0100               	movlb	0	; () banked
 12843  002636  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
 12844  002638  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
 12845  00263A  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
 12846  00263C  6DB8               	negf	___fttol@lval& (0+255),b
 12847  00263E  0E00               	movlw	0
 12848  002640  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
 12849  002642  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
 12850  002644  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
 12851  002646                     l6667:
 12852                           
 12853                           ; BSR set to: 0
 12854  002646  C0B8  F0AE         	movff	___fttol@lval,?___fttol
 12855  00264A  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
 12856  00264E  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
 12857  002652  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
 12858  002656  0012               	return	
 12859  002658                     __end_of___fttol:
 12860                           	opt stack 0
 12861                           tblptru	equ	0xFF8
 12862                           tblptrh	equ	0xFF7
 12863                           tblptrl	equ	0xFF6
 12864                           tablat	equ	0xFF5
 12865                           prodh	equ	0xFF4
 12866                           prodl	equ	0xFF3
 12867                           intcon	equ	0xFF2
 12868                           intcon3	equ	0xFF0
 12869                           postinc0	equ	0xFEE
 12870                           wreg	equ	0xFE8
 12871                           postdec1	equ	0xFE5
 12872                           fsr1l	equ	0xFE1
 12873                           indf2	equ	0xFDF
 12874                           postinc2	equ	0xFDE
 12875                           postdec2	equ	0xFDD
 12876                           fsr2h	equ	0xFDA
 12877                           fsr2l	equ	0xFD9
 12878                           status	equ	0xFD8
 12879                           
 12880 ;; *************** function ___ftmul *****************
 12881 ;; Defined at:
 12882 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 12883 ;; Parameters:    Size  Location     Type
 12884 ;;  f1              3    9[BANK0 ] float 
 12885 ;;  f2              3   12[BANK0 ] float 
 12886 ;; Auto vars:     Size  Location     Type
 12887 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 12888 ;;  sign            1   23[BANK0 ] unsigned char 
 12889 ;;  cntr            1   22[BANK0 ] unsigned char 
 12890 ;;  exp             1   18[BANK0 ] unsigned char 
 12891 ;; Return value:  Size  Location     Type
 12892 ;;                  3    9[BANK0 ] float 
 12893 ;; Registers used:
 12894 ;;		wreg, status,2, status,0, cstack
 12895 ;; Tracked objects:
 12896 ;;		On entry : 0/0
 12897 ;;		On exit  : 0/0
 12898 ;;		Unchanged: 0/0
 12899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12900 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12901 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12902 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12903 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12904 ;;Total ram usage:       15 bytes
 12905 ;; Hardware stack levels used:    1
 12906 ;; Hardware stack levels required when called:    4
 12907 ;; This function calls:
 12908 ;;		___ftpack
 12909 ;; This function is called by:
 12910 ;;		_sortBattery
 12911 ;;		_angleToPulse
 12912 ;;		_fround
 12913 ;;		_scale
 12914 ;;		_printf
 12915 ;; This function uses a non-reentrant model
 12916 ;;
 12917                           
 12918                           	psect	text54
 12919  00225E                     __ptext54:
 12920                           	opt stack 0
 12921  00225E                     ___ftmul:
 12922                           	opt stack 23
 12923                           
 12924                           ; BSR set to: 0
 12925                           ;incstack = 0
 12926  00225E  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
 12927  002262  0100               	movlb	0	; () banked
 12928  002264  6B90               	clrf	(??___ftmul+1)& (0+255),b
 12929  002266  6B91               	clrf	(??___ftmul+2)& (0+255),b
 12930  002268  0100               	movlb	0	; () banked
 12931  00226A  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 12932  00226C  0100               	movlb	0	; () banked
 12933  00226E  378F               	rlcf	??___ftmul& (0+255),f,b
 12934  002270  E301               	bnc	u5891
 12935  002272  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 12936  002274                     u5891:
 12937  002274  0100               	movlb	0	; () banked
 12938  002276  518F               	movf	??___ftmul& (0+255),w,b
 12939  002278  0100               	movlb	0	; () banked
 12940  00227A  6F92               	movwf	___ftmul@exp& (0+255),b
 12941  00227C  0100               	movlb	0	; () banked
 12942  00227E  5192               	movf	___ftmul@exp& (0+255),w,b
 12943  002280  A4D8               	btfss	status,2,c
 12944  002282  D00A               	goto	l6147
 12945                           
 12946                           ; BSR set to: 0
 12947  002284  0E00               	movlw	0
 12948  002286  0100               	movlb	0	; () banked
 12949  002288  6F89               	movwf	?___ftmul& (0+255),b
 12950  00228A  0E00               	movlw	0
 12951  00228C  0100               	movlb	0	; () banked
 12952  00228E  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 12953  002290  0E00               	movlw	0
 12954  002292  0100               	movlb	0	; () banked
 12955  002294  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 12956                           
 12957                           ; BSR set to: 0
 12958  002296  0012               	return	
 12959  002298                     l6147:
 12960                           
 12961                           ; BSR set to: 0
 12962  002298  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
 12963  00229C  0100               	movlb	0	; () banked
 12964  00229E  6B90               	clrf	(??___ftmul+1)& (0+255),b
 12965  0022A0  6B91               	clrf	(??___ftmul+2)& (0+255),b
 12966  0022A2  0100               	movlb	0	; () banked
 12967  0022A4  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 12968  0022A6  0100               	movlb	0	; () banked
 12969  0022A8  378F               	rlcf	??___ftmul& (0+255),f,b
 12970  0022AA  E301               	bnc	u5911
 12971  0022AC  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 12972  0022AE                     u5911:
 12973  0022AE  0100               	movlb	0	; () banked
 12974  0022B0  518F               	movf	??___ftmul& (0+255),w,b
 12975  0022B2  0100               	movlb	0	; () banked
 12976  0022B4  6F97               	movwf	___ftmul@sign& (0+255),b
 12977  0022B6  0100               	movlb	0	; () banked
 12978  0022B8  5197               	movf	___ftmul@sign& (0+255),w,b
 12979  0022BA  A4D8               	btfss	status,2,c
 12980  0022BC  D00A               	goto	l6153
 12981                           
 12982                           ; BSR set to: 0
 12983  0022BE  0E00               	movlw	0
 12984  0022C0  0100               	movlb	0	; () banked
 12985  0022C2  6F89               	movwf	?___ftmul& (0+255),b
 12986  0022C4  0E00               	movlw	0
 12987  0022C6  0100               	movlb	0	; () banked
 12988  0022C8  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 12989  0022CA  0E00               	movlw	0
 12990  0022CC  0100               	movlb	0	; () banked
 12991  0022CE  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 12992                           
 12993                           ; BSR set to: 0
 12994  0022D0  0012               	return	
 12995  0022D2                     l6153:
 12996                           
 12997                           ; BSR set to: 0
 12998  0022D2  0100               	movlb	0	; () banked
 12999  0022D4  5197               	movf	___ftmul@sign& (0+255),w,b
 13000  0022D6  0F7B               	addlw	123
 13001  0022D8  0100               	movlb	0	; () banked
 13002  0022DA  2792               	addwf	___ftmul@exp& (0+255),f,b
 13003                           
 13004                           ; BSR set to: 0
 13005  0022DC  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
 13006  0022E0  0100               	movlb	0	; () banked
 13007  0022E2  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 13008  0022E4  0100               	movlb	0	; () banked
 13009  0022E6  1B97               	xorwf	___ftmul@sign& (0+255),f,b
 13010  0022E8  0E80               	movlw	128
 13011  0022EA  0100               	movlb	0	; () banked
 13012  0022EC  1797               	andwf	___ftmul@sign& (0+255),f,b
 13013                           
 13014                           ; BSR set to: 0
 13015  0022EE  0100               	movlb	0	; () banked
 13016  0022F0  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 13017                           
 13018                           ; BSR set to: 0
 13019  0022F2  0100               	movlb	0	; () banked
 13020  0022F4  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 13021                           
 13022                           ; BSR set to: 0
 13023  0022F6  0EFF               	movlw	255
 13024  0022F8  0100               	movlb	0	; () banked
 13025  0022FA  178C               	andwf	___ftmul@f2& (0+255),f,b
 13026  0022FC  0EFF               	movlw	255
 13027  0022FE  0100               	movlb	0	; () banked
 13028  002300  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 13029  002302  0E00               	movlw	0
 13030  002304  0100               	movlb	0	; () banked
 13031  002306  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 13032                           
 13033                           ; BSR set to: 0
 13034  002308  0E00               	movlw	0
 13035  00230A  0100               	movlb	0	; () banked
 13036  00230C  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
 13037  00230E  0E00               	movlw	0
 13038  002310  0100               	movlb	0	; () banked
 13039  002312  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 13040  002314  0E00               	movlw	0
 13041  002316  0100               	movlb	0	; () banked
 13042  002318  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 13043                           
 13044                           ; BSR set to: 0
 13045  00231A  0E07               	movlw	7
 13046  00231C  0100               	movlb	0	; () banked
 13047  00231E  6F96               	movwf	___ftmul@cntr& (0+255),b
 13048  002320                     l6167:
 13049                           
 13050                           ; BSR set to: 0
 13051  002320  0100               	movlb	0	; () banked
 13052  002322  A189               	btfss	___ftmul@f1& (0+255),0,b
 13053  002324  D00C               	goto	l6171
 13054                           
 13055                           ; BSR set to: 0
 13056  002326  0100               	movlb	0	; () banked
 13057  002328  518C               	movf	___ftmul@f2& (0+255),w,b
 13058  00232A  0100               	movlb	0	; () banked
 13059  00232C  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13060  00232E  0100               	movlb	0	; () banked
 13061  002330  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 13062  002332  0100               	movlb	0	; () banked
 13063  002334  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13064  002336  0100               	movlb	0	; () banked
 13065  002338  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 13066  00233A  0100               	movlb	0	; () banked
 13067  00233C  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13068  00233E                     l6171:
 13069                           
 13070                           ; BSR set to: 0
 13071  00233E  0100               	movlb	0	; () banked
 13072  002340  90D8               	bcf	status,0,c
 13073  002342  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13074  002344  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13075  002346  3389               	rrcf	___ftmul@f1& (0+255),f,b
 13076  002348  0100               	movlb	0	; () banked
 13077  00234A  90D8               	bcf	status,0,c
 13078  00234C  378C               	rlcf	___ftmul@f2& (0+255),f,b
 13079  00234E  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 13080  002350  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 13081                           
 13082                           ; BSR set to: 0
 13083  002352  0100               	movlb	0	; () banked
 13084  002354  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 13085  002356  D7E4               	goto	l6167
 13086                           
 13087                           ; BSR set to: 0
 13088                           
 13089                           ; BSR set to: 0
 13090  002358  0E09               	movlw	9
 13091  00235A  0100               	movlb	0	; () banked
 13092  00235C  6F96               	movwf	___ftmul@cntr& (0+255),b
 13093  00235E                     l6177:
 13094                           
 13095                           ; BSR set to: 0
 13096  00235E  0100               	movlb	0	; () banked
 13097  002360  A189               	btfss	___ftmul@f1& (0+255),0,b
 13098  002362  D00C               	goto	l6181
 13099                           
 13100                           ; BSR set to: 0
 13101  002364  0100               	movlb	0	; () banked
 13102  002366  518C               	movf	___ftmul@f2& (0+255),w,b
 13103  002368  0100               	movlb	0	; () banked
 13104  00236A  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13105  00236C  0100               	movlb	0	; () banked
 13106  00236E  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 13107  002370  0100               	movlb	0	; () banked
 13108  002372  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13109  002374  0100               	movlb	0	; () banked
 13110  002376  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 13111  002378  0100               	movlb	0	; () banked
 13112  00237A  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13113  00237C                     l6181:
 13114                           
 13115                           ; BSR set to: 0
 13116  00237C  0100               	movlb	0	; () banked
 13117  00237E  90D8               	bcf	status,0,c
 13118  002380  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13119  002382  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13120  002384  3389               	rrcf	___ftmul@f1& (0+255),f,b
 13121  002386  0100               	movlb	0	; () banked
 13122  002388  90D8               	bcf	status,0,c
 13123  00238A  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 13124  00238C  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 13125  00238E  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 13126                           
 13127                           ; BSR set to: 0
 13128  002390  0100               	movlb	0	; () banked
 13129  002392  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 13130  002394  D7E4               	goto	l6177
 13131                           
 13132                           ; BSR set to: 0
 13133                           
 13134                           ; BSR set to: 0
 13135  002396  C093  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
 13136  00239A  C094  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 13137  00239E  C095  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 13138  0023A2  C092  F026         	movff	___ftmul@exp,___ftpack@exp
 13139  0023A6  C097  F027         	movff	___ftmul@sign,___ftpack@sign
 13140  0023AA  ECBA  F019         	call	___ftpack	;wreg free
 13141  0023AE  C023  F089         	movff	?___ftpack,?___ftmul
 13142  0023B2  C024  F08A         	movff	?___ftpack+1,?___ftmul+1
 13143  0023B6  C025  F08B         	movff	?___ftpack+2,?___ftmul+2
 13144  0023BA  0012               	return	
 13145  0023BC                     __end_of___ftmul:
 13146                           	opt stack 0
 13147                           tblptru	equ	0xFF8
 13148                           tblptrh	equ	0xFF7
 13149                           tblptrl	equ	0xFF6
 13150                           tablat	equ	0xFF5
 13151                           prodh	equ	0xFF4
 13152                           prodl	equ	0xFF3
 13153                           intcon	equ	0xFF2
 13154                           intcon3	equ	0xFF0
 13155                           postinc0	equ	0xFEE
 13156                           wreg	equ	0xFE8
 13157                           postdec1	equ	0xFE5
 13158                           fsr1l	equ	0xFE1
 13159                           indf2	equ	0xFDF
 13160                           postinc2	equ	0xFDE
 13161                           postdec2	equ	0xFDD
 13162                           fsr2h	equ	0xFDA
 13163                           fsr2l	equ	0xFD9
 13164                           status	equ	0xFD8
 13165                           
 13166 ;; *************** function ___ftdiv *****************
 13167 ;; Defined at:
 13168 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 13169 ;; Parameters:    Size  Location     Type
 13170 ;;  f1              3   52[COMRAM] float 
 13171 ;;  f2              3   55[COMRAM] float 
 13172 ;; Auto vars:     Size  Location     Type
 13173 ;;  f3              3    4[BANK0 ] float 
 13174 ;;  sign            1    8[BANK0 ] unsigned char 
 13175 ;;  exp             1    7[BANK0 ] unsigned char 
 13176 ;;  cntr            1    3[BANK0 ] unsigned char 
 13177 ;; Return value:  Size  Location     Type
 13178 ;;                  3   52[COMRAM] float 
 13179 ;; Registers used:
 13180 ;;		wreg, status,2, status,0, cstack
 13181 ;; Tracked objects:
 13182 ;;		On entry : 0/0
 13183 ;;		On exit  : 0/0
 13184 ;;		Unchanged: 0/0
 13185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13186 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13187 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13188 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13189 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13190 ;;Total ram usage:       15 bytes
 13191 ;; Hardware stack levels used:    1
 13192 ;; Hardware stack levels required when called:    4
 13193 ;; This function calls:
 13194 ;;		___ftpack
 13195 ;; This function is called by:
 13196 ;;		_sortBattery
 13197 ;;		_angleToPulse
 13198 ;; This function uses a non-reentrant model
 13199 ;;
 13200                           
 13201                           	psect	text55
 13202  0029C2                     __ptext55:
 13203                           	opt stack 0
 13204  0029C2                     ___ftdiv:
 13205                           	opt stack 23
 13206                           
 13207                           ;incstack = 0
 13208  0029C2  C037  F080         	movff	___ftdiv@f1+2,??___ftdiv
 13209  0029C6  0100               	movlb	0	; () banked
 13210  0029C8  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 13211  0029CA  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 13212  0029CC  3436               	rlcf	___ftdiv@f1+1,w,c
 13213  0029CE  0100               	movlb	0	; () banked
 13214  0029D0  3780               	rlcf	??___ftdiv& (0+255),f,b
 13215  0029D2  E301               	bnc	u6411
 13216  0029D4  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 13217  0029D6                     u6411:
 13218  0029D6  0100               	movlb	0	; () banked
 13219  0029D8  5180               	movf	??___ftdiv& (0+255),w,b
 13220  0029DA  0100               	movlb	0	; () banked
 13221  0029DC  6F87               	movwf	___ftdiv@exp& (0+255),b
 13222  0029DE  0100               	movlb	0	; () banked
 13223  0029E0  5187               	movf	___ftdiv@exp& (0+255),w,b
 13224  0029E2  A4D8               	btfss	status,2,c
 13225  0029E4  D007               	goto	l6543
 13226                           
 13227                           ; BSR set to: 0
 13228  0029E6  0E00               	movlw	0
 13229  0029E8  6E35               	movwf	?___ftdiv,c
 13230  0029EA  0E00               	movlw	0
 13231  0029EC  6E36               	movwf	?___ftdiv+1,c
 13232  0029EE  0E00               	movlw	0
 13233  0029F0  6E37               	movwf	?___ftdiv+2,c
 13234                           
 13235                           ; BSR set to: 0
 13236  0029F2  0012               	return	
 13237  0029F4                     l6543:
 13238                           
 13239                           ; BSR set to: 0
 13240  0029F4  C03A  F080         	movff	___ftdiv@f2+2,??___ftdiv
 13241  0029F8  0100               	movlb	0	; () banked
 13242  0029FA  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 13243  0029FC  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 13244  0029FE  3439               	rlcf	___ftdiv@f2+1,w,c
 13245  002A00  0100               	movlb	0	; () banked
 13246  002A02  3780               	rlcf	??___ftdiv& (0+255),f,b
 13247  002A04  E301               	bnc	u6431
 13248  002A06  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 13249  002A08                     u6431:
 13250  002A08  0100               	movlb	0	; () banked
 13251  002A0A  5180               	movf	??___ftdiv& (0+255),w,b
 13252  002A0C  0100               	movlb	0	; () banked
 13253  002A0E  6F88               	movwf	___ftdiv@sign& (0+255),b
 13254  002A10  0100               	movlb	0	; () banked
 13255  002A12  5188               	movf	___ftdiv@sign& (0+255),w,b
 13256  002A14  A4D8               	btfss	status,2,c
 13257  002A16  D007               	goto	l6549
 13258                           
 13259                           ; BSR set to: 0
 13260  002A18  0E00               	movlw	0
 13261  002A1A  6E35               	movwf	?___ftdiv,c
 13262  002A1C  0E00               	movlw	0
 13263  002A1E  6E36               	movwf	?___ftdiv+1,c
 13264  002A20  0E00               	movlw	0
 13265  002A22  6E37               	movwf	?___ftdiv+2,c
 13266                           
 13267                           ; BSR set to: 0
 13268  002A24  0012               	return	
 13269  002A26                     l6549:
 13270                           
 13271                           ; BSR set to: 0
 13272  002A26  0E00               	movlw	0
 13273  002A28  0100               	movlb	0	; () banked
 13274  002A2A  6F84               	movwf	___ftdiv@f3& (0+255),b
 13275  002A2C  0E00               	movlw	0
 13276  002A2E  0100               	movlb	0	; () banked
 13277  002A30  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
 13278  002A32  0E00               	movlw	0
 13279  002A34  0100               	movlb	0	; () banked
 13280  002A36  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
 13281                           
 13282                           ; BSR set to: 0
 13283  002A38  0100               	movlb	0	; () banked
 13284  002A3A  5188               	movf	___ftdiv@sign& (0+255),w,b
 13285  002A3C  0F89               	addlw	137
 13286  002A3E  0100               	movlb	0	; () banked
 13287  002A40  5F87               	subwf	___ftdiv@exp& (0+255),f,b
 13288                           
 13289                           ; BSR set to: 0
 13290  002A42  C037  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
 13291                           
 13292                           ; BSR set to: 0
 13293  002A46  503A               	movf	___ftdiv@f2+2,w,c
 13294  002A48  0100               	movlb	0	; () banked
 13295  002A4A  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
 13296                           
 13297                           ; BSR set to: 0
 13298  002A4C  0E80               	movlw	128
 13299  002A4E  0100               	movlb	0	; () banked
 13300  002A50  1788               	andwf	___ftdiv@sign& (0+255),f,b
 13301                           
 13302                           ; BSR set to: 0
 13303  002A52  8E36               	bsf	___ftdiv@f1+1,7,c
 13304                           
 13305                           ; BSR set to: 0
 13306  002A54  0EFF               	movlw	255
 13307  002A56  1635               	andwf	___ftdiv@f1,f,c
 13308  002A58  0EFF               	movlw	255
 13309  002A5A  1636               	andwf	___ftdiv@f1+1,f,c
 13310  002A5C  0E00               	movlw	0
 13311  002A5E  1637               	andwf	___ftdiv@f1+2,f,c
 13312                           
 13313                           ; BSR set to: 0
 13314  002A60  8E39               	bsf	___ftdiv@f2+1,7,c
 13315                           
 13316                           ; BSR set to: 0
 13317  002A62  0EFF               	movlw	255
 13318  002A64  1638               	andwf	___ftdiv@f2,f,c
 13319  002A66  0EFF               	movlw	255
 13320  002A68  1639               	andwf	___ftdiv@f2+1,f,c
 13321  002A6A  0E00               	movlw	0
 13322  002A6C  163A               	andwf	___ftdiv@f2+2,f,c
 13323                           
 13324                           ; BSR set to: 0
 13325  002A6E  0E18               	movlw	24
 13326  002A70  0100               	movlb	0	; () banked
 13327  002A72  6F83               	movwf	___ftdiv@cntr& (0+255),b
 13328  002A74                     l6569:
 13329                           
 13330                           ; BSR set to: 0
 13331  002A74  0100               	movlb	0	; () banked
 13332  002A76  90D8               	bcf	status,0,c
 13333  002A78  3784               	rlcf	___ftdiv@f3& (0+255),f,b
 13334  002A7A  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 13335  002A7C  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 13336                           
 13337                           ; BSR set to: 0
 13338  002A7E  5038               	movf	___ftdiv@f2,w,c
 13339  002A80  5C35               	subwf	___ftdiv@f1,w,c
 13340  002A82  5039               	movf	___ftdiv@f2+1,w,c
 13341  002A84  5836               	subwfb	___ftdiv@f1+1,w,c
 13342  002A86  503A               	movf	___ftdiv@f2+2,w,c
 13343  002A88  5837               	subwfb	___ftdiv@f1+2,w,c
 13344  002A8A  A0D8               	btfss	status,0,c
 13345  002A8C  D008               	goto	l1184
 13346                           
 13347                           ; BSR set to: 0
 13348  002A8E  5038               	movf	___ftdiv@f2,w,c
 13349  002A90  5E35               	subwf	___ftdiv@f1,f,c
 13350  002A92  5039               	movf	___ftdiv@f2+1,w,c
 13351  002A94  5A36               	subwfb	___ftdiv@f1+1,f,c
 13352  002A96  503A               	movf	___ftdiv@f2+2,w,c
 13353  002A98  5A37               	subwfb	___ftdiv@f1+2,f,c
 13354                           
 13355                           ; BSR set to: 0
 13356  002A9A  0100               	movlb	0	; () banked
 13357  002A9C  8184               	bsf	___ftdiv@f3& (0+255),0,b
 13358  002A9E                     l1184:
 13359                           
 13360                           ; BSR set to: 0
 13361  002A9E  90D8               	bcf	status,0,c
 13362  002AA0  3635               	rlcf	___ftdiv@f1,f,c
 13363  002AA2  3636               	rlcf	___ftdiv@f1+1,f,c
 13364  002AA4  3637               	rlcf	___ftdiv@f1+2,f,c
 13365                           
 13366                           ; BSR set to: 0
 13367  002AA6  0100               	movlb	0	; () banked
 13368  002AA8  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
 13369  002AAA  D7E4               	goto	l6569
 13370                           
 13371                           ; BSR set to: 0
 13372                           
 13373                           ; BSR set to: 0
 13374  002AAC  C084  F023         	movff	___ftdiv@f3,___ftpack@arg
 13375  002AB0  C085  F024         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13376  002AB4  C086  F025         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13377  002AB8  C087  F026         	movff	___ftdiv@exp,___ftpack@exp
 13378  002ABC  C088  F027         	movff	___ftdiv@sign,___ftpack@sign
 13379  002AC0  ECBA  F019         	call	___ftpack	;wreg free
 13380  002AC4  C023  F035         	movff	?___ftpack,?___ftdiv
 13381  002AC8  C024  F036         	movff	?___ftpack+1,?___ftdiv+1
 13382  002ACC  C025  F037         	movff	?___ftpack+2,?___ftdiv+2
 13383  002AD0  0012               	return	
 13384  002AD2                     __end_of___ftdiv:
 13385                           	opt stack 0
 13386                           tblptru	equ	0xFF8
 13387                           tblptrh	equ	0xFF7
 13388                           tblptrl	equ	0xFF6
 13389                           tablat	equ	0xFF5
 13390                           prodh	equ	0xFF4
 13391                           prodl	equ	0xFF3
 13392                           intcon	equ	0xFF2
 13393                           intcon3	equ	0xFF0
 13394                           postinc0	equ	0xFEE
 13395                           wreg	equ	0xFE8
 13396                           postdec1	equ	0xFE5
 13397                           fsr1l	equ	0xFE1
 13398                           indf2	equ	0xFDF
 13399                           postinc2	equ	0xFDE
 13400                           postdec2	equ	0xFDD
 13401                           fsr2h	equ	0xFDA
 13402                           fsr2l	equ	0xFD9
 13403                           status	equ	0xFD8
 13404                           
 13405 ;; *************** function ___ftadd *****************
 13406 ;; Defined at:
 13407 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 13408 ;; Parameters:    Size  Location     Type
 13409 ;;  f1              3   34[BANK0 ] float 
 13410 ;;  f2              3   37[BANK0 ] float 
 13411 ;; Auto vars:     Size  Location     Type
 13412 ;;  exp1            1   45[BANK0 ] unsigned char 
 13413 ;;  exp2            1   44[BANK0 ] unsigned char 
 13414 ;;  sign            1   43[BANK0 ] unsigned char 
 13415 ;; Return value:  Size  Location     Type
 13416 ;;                  3   34[BANK0 ] float 
 13417 ;; Registers used:
 13418 ;;		wreg, status,2, status,0, cstack
 13419 ;; Tracked objects:
 13420 ;;		On entry : 0/0
 13421 ;;		On exit  : 0/0
 13422 ;;		Unchanged: 0/0
 13423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13424 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13425 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13426 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13427 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13428 ;;Total ram usage:       12 bytes
 13429 ;; Hardware stack levels used:    1
 13430 ;; Hardware stack levels required when called:    4
 13431 ;; This function calls:
 13432 ;;		___ftpack
 13433 ;; This function is called by:
 13434 ;;		_angleToPulse
 13435 ;;		_printf
 13436 ;;		___ftsub
 13437 ;; This function uses a non-reentrant model
 13438 ;;
 13439                           
 13440                           	psect	text56
 13441  001C1E                     __ptext56:
 13442                           	opt stack 0
 13443  001C1E                     ___ftadd:
 13444                           	opt stack 23
 13445                           
 13446                           ;incstack = 0
 13447  001C1E  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
 13448  001C22  0100               	movlb	0	; () banked
 13449  001C24  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 13450  001C26  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 13451  001C28  0100               	movlb	0	; () banked
 13452  001C2A  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 13453  001C2C  0100               	movlb	0	; () banked
 13454  001C2E  37A8               	rlcf	??___ftadd& (0+255),f,b
 13455  001C30  E301               	bnc	u5681
 13456  001C32  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 13457  001C34                     u5681:
 13458  001C34  0100               	movlb	0	; () banked
 13459  001C36  51A8               	movf	??___ftadd& (0+255),w,b
 13460  001C38  0100               	movlb	0	; () banked
 13461  001C3A  6FAD               	movwf	___ftadd@exp1& (0+255),b
 13462  001C3C  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
 13463  001C40  0100               	movlb	0	; () banked
 13464  001C42  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 13465  001C44  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 13466  001C46  0100               	movlb	0	; () banked
 13467  001C48  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 13468  001C4A  0100               	movlb	0	; () banked
 13469  001C4C  37A8               	rlcf	??___ftadd& (0+255),f,b
 13470  001C4E  E301               	bnc	u5691
 13471  001C50  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 13472  001C52                     u5691:
 13473  001C52  0100               	movlb	0	; () banked
 13474  001C54  51A8               	movf	??___ftadd& (0+255),w,b
 13475  001C56  0100               	movlb	0	; () banked
 13476  001C58  6FAC               	movwf	___ftadd@exp2& (0+255),b
 13477                           
 13478                           ; BSR set to: 0
 13479  001C5A  0100               	movlb	0	; () banked
 13480  001C5C  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13481  001C5E  0100               	movlb	0	; () banked
 13482  001C60  B4D8               	btfsc	status,2,c
 13483  001C62  D011               	goto	l1149
 13484                           
 13485                           ; BSR set to: 0
 13486  001C64  0100               	movlb	0	; () banked
 13487  001C66  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13488  001C68  0100               	movlb	0	; () banked
 13489  001C6A  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 13490  001C6C  B0D8               	btfsc	status,0,c
 13491  001C6E  D012               	goto	l6079
 13492                           
 13493                           ; BSR set to: 0
 13494  001C70  0100               	movlb	0	; () banked
 13495  001C72  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13496  001C74  0800               	sublw	0
 13497  001C76  0100               	movlb	0	; () banked
 13498  001C78  25AC               	addwf	___ftadd@exp2& (0+255),w,b
 13499  001C7A  0100               	movlb	0	; () banked
 13500  001C7C  6FA8               	movwf	??___ftadd& (0+255),b
 13501  001C7E  0E18               	movlw	24
 13502  001C80  0100               	movlb	0	; () banked
 13503  001C82  65A8               	cpfsgt	??___ftadd& (0+255),b
 13504  001C84  D007               	goto	l6079
 13505  001C86                     l1149:
 13506                           
 13507                           ; BSR set to: 0
 13508  001C86  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
 13509  001C8A  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
 13510  001C8E  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
 13511  001C92  0012               	return	
 13512  001C94                     l6079:
 13513                           
 13514                           ; BSR set to: 0
 13515  001C94  0100               	movlb	0	; () banked
 13516  001C96  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13517  001C98  0100               	movlb	0	; () banked
 13518  001C9A  B4D8               	btfsc	status,2,c
 13519  001C9C  D011               	goto	l1153
 13520                           
 13521                           ; BSR set to: 0
 13522  001C9E  0100               	movlb	0	; () banked
 13523  001CA0  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13524  001CA2  0100               	movlb	0	; () banked
 13525  001CA4  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 13526  001CA6  B0D8               	btfsc	status,0,c
 13527  001CA8  D012               	goto	l6085
 13528                           
 13529                           ; BSR set to: 0
 13530  001CAA  0100               	movlb	0	; () banked
 13531  001CAC  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13532  001CAE  0800               	sublw	0
 13533  001CB0  0100               	movlb	0	; () banked
 13534  001CB2  25AD               	addwf	___ftadd@exp1& (0+255),w,b
 13535  001CB4  0100               	movlb	0	; () banked
 13536  001CB6  6FA8               	movwf	??___ftadd& (0+255),b
 13537  001CB8  0E18               	movlw	24
 13538  001CBA  0100               	movlb	0	; () banked
 13539  001CBC  65A8               	cpfsgt	??___ftadd& (0+255),b
 13540  001CBE  D007               	goto	l6085
 13541  001CC0                     l1153:
 13542                           
 13543                           ; BSR set to: 0
 13544  001CC0  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
 13545  001CC4  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
 13546  001CC8  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
 13547  001CCC  0012               	return	
 13548  001CCE                     l6085:
 13549                           
 13550                           ; BSR set to: 0
 13551  001CCE  0E06               	movlw	6
 13552  001CD0  0100               	movlb	0	; () banked
 13553  001CD2  6FAB               	movwf	___ftadd@sign& (0+255),b
 13554                           
 13555                           ; BSR set to: 0
 13556  001CD4  0100               	movlb	0	; () banked
 13557  001CD6  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
 13558  001CD8  D002               	goto	l6091
 13559                           
 13560                           ; BSR set to: 0
 13561  001CDA  0100               	movlb	0	; () banked
 13562  001CDC  8FAB               	bsf	___ftadd@sign& (0+255),7,b
 13563  001CDE                     l6091:
 13564                           
 13565                           ; BSR set to: 0
 13566  001CDE  0100               	movlb	0	; () banked
 13567  001CE0  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13568  001CE2  D002               	goto	l1155
 13569                           
 13570                           ; BSR set to: 0
 13571  001CE4  0100               	movlb	0	; () banked
 13572  001CE6  8DAB               	bsf	___ftadd@sign& (0+255),6,b
 13573  001CE8                     l1155:
 13574                           
 13575                           ; BSR set to: 0
 13576  001CE8  0100               	movlb	0	; () banked
 13577  001CEA  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
 13578                           
 13579                           ; BSR set to: 0
 13580  001CEC  0EFF               	movlw	255
 13581  001CEE  0100               	movlb	0	; () banked
 13582  001CF0  17A2               	andwf	___ftadd@f1& (0+255),f,b
 13583  001CF2  0EFF               	movlw	255
 13584  001CF4  0100               	movlb	0	; () banked
 13585  001CF6  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
 13586  001CF8  0E00               	movlw	0
 13587  001CFA  0100               	movlb	0	; () banked
 13588  001CFC  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
 13589  001CFE  0100               	movlb	0	; () banked
 13590  001D00  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
 13591                           
 13592                           ; BSR set to: 0
 13593  001D02  0EFF               	movlw	255
 13594  001D04  0100               	movlb	0	; () banked
 13595  001D06  17A5               	andwf	___ftadd@f2& (0+255),f,b
 13596  001D08  0EFF               	movlw	255
 13597  001D0A  0100               	movlb	0	; () banked
 13598  001D0C  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
 13599  001D0E  0E00               	movlw	0
 13600  001D10  0100               	movlb	0	; () banked
 13601  001D12  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
 13602                           
 13603                           ; BSR set to: 0
 13604  001D14  0100               	movlb	0	; () banked
 13605  001D16  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13606  001D18  0100               	movlb	0	; () banked
 13607  001D1A  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 13608  001D1C  B0D8               	btfsc	status,0,c
 13609  001D1E  D025               	goto	l6111
 13610  001D20                     l6101:
 13611                           
 13612                           ; BSR set to: 0
 13613  001D20  0100               	movlb	0	; () banked
 13614  001D22  90D8               	bcf	status,0,c
 13615  001D24  37A5               	rlcf	___ftadd@f2& (0+255),f,b
 13616  001D26  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 13617  001D28  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 13618  001D2A  0100               	movlb	0	; () banked
 13619  001D2C  07AC               	decf	___ftadd@exp2& (0+255),f,b
 13620                           
 13621                           ; BSR set to: 0
 13622  001D2E  0100               	movlb	0	; () banked
 13623  001D30  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13624  001D32  0100               	movlb	0	; () banked
 13625  001D34  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 13626  001D36  B4D8               	btfsc	status,2,c
 13627  001D38  D011               	goto	l6109
 13628                           
 13629                           ; BSR set to: 0
 13630  001D3A  0100               	movlb	0	; () banked
 13631  001D3C  07AB               	decf	___ftadd@sign& (0+255),f,b
 13632  001D3E  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 13633  001D42  0E07               	movlw	7
 13634  001D44  0100               	movlb	0	; () banked
 13635  001D46  17A8               	andwf	??___ftadd& (0+255),f,b
 13636  001D48  B4D8               	btfsc	status,2,c
 13637  001D4A  D008               	goto	l6109
 13638  001D4C  D7E9               	goto	l6101
 13639  001D4E                     l6107:
 13640                           
 13641                           ; BSR set to: 0
 13642  001D4E  0100               	movlb	0	; () banked
 13643  001D50  90D8               	bcf	status,0,c
 13644  001D52  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 13645  001D54  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 13646  001D56  33A2               	rrcf	___ftadd@f1& (0+255),f,b
 13647  001D58  0100               	movlb	0	; () banked
 13648  001D5A  2BAD               	incf	___ftadd@exp1& (0+255),f,b
 13649  001D5C                     l6109:
 13650                           
 13651                           ; BSR set to: 0
 13652  001D5C  0100               	movlb	0	; () banked
 13653  001D5E  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13654  001D60  0100               	movlb	0	; () banked
 13655  001D62  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 13656  001D64  B4D8               	btfsc	status,2,c
 13657  001D66  D02B               	goto	l1164
 13658  001D68  D7F2               	goto	l6107
 13659  001D6A                     l6111:
 13660                           
 13661                           ; BSR set to: 0
 13662  001D6A  0100               	movlb	0	; () banked
 13663  001D6C  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13664  001D6E  0100               	movlb	0	; () banked
 13665  001D70  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 13666  001D72  B0D8               	btfsc	status,0,c
 13667  001D74  D024               	goto	l1164
 13668  001D76                     l6113:
 13669                           
 13670                           ; BSR set to: 0
 13671  001D76  0100               	movlb	0	; () banked
 13672  001D78  90D8               	bcf	status,0,c
 13673  001D7A  37A2               	rlcf	___ftadd@f1& (0+255),f,b
 13674  001D7C  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 13675  001D7E  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 13676  001D80  0100               	movlb	0	; () banked
 13677  001D82  07AD               	decf	___ftadd@exp1& (0+255),f,b
 13678                           
 13679                           ; BSR set to: 0
 13680  001D84  0100               	movlb	0	; () banked
 13681  001D86  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13682  001D88  0100               	movlb	0	; () banked
 13683  001D8A  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 13684  001D8C  B4D8               	btfsc	status,2,c
 13685  001D8E  D011               	goto	l6121
 13686                           
 13687                           ; BSR set to: 0
 13688  001D90  0100               	movlb	0	; () banked
 13689  001D92  07AB               	decf	___ftadd@sign& (0+255),f,b
 13690  001D94  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 13691  001D98  0E07               	movlw	7
 13692  001D9A  0100               	movlb	0	; () banked
 13693  001D9C  17A8               	andwf	??___ftadd& (0+255),f,b
 13694  001D9E  B4D8               	btfsc	status,2,c
 13695  001DA0  D008               	goto	l6121
 13696  001DA2  D7E9               	goto	l6113
 13697  001DA4                     l6119:
 13698                           
 13699                           ; BSR set to: 0
 13700  001DA4  0100               	movlb	0	; () banked
 13701  001DA6  90D8               	bcf	status,0,c
 13702  001DA8  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 13703  001DAA  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 13704  001DAC  33A5               	rrcf	___ftadd@f2& (0+255),f,b
 13705  001DAE  0100               	movlb	0	; () banked
 13706  001DB0  2BAC               	incf	___ftadd@exp2& (0+255),f,b
 13707  001DB2                     l6121:
 13708                           
 13709                           ; BSR set to: 0
 13710  001DB2  0100               	movlb	0	; () banked
 13711  001DB4  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13712  001DB6  0100               	movlb	0	; () banked
 13713  001DB8  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 13714  001DBA  A4D8               	btfss	status,2,c
 13715  001DBC  D7F3               	goto	l6119
 13716  001DBE                     l1164:
 13717                           
 13718                           ; BSR set to: 0
 13719  001DBE  0100               	movlb	0	; () banked
 13720  001DC0  AFAB               	btfss	___ftadd@sign& (0+255),7,b
 13721  001DC2  D012               	goto	l1173
 13722                           
 13723                           ; BSR set to: 0
 13724  001DC4  0EFF               	movlw	255
 13725  001DC6  0100               	movlb	0	; () banked
 13726  001DC8  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
 13727  001DCA  0EFF               	movlw	255
 13728  001DCC  0100               	movlb	0	; () banked
 13729  001DCE  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 13730  001DD0  0EFF               	movlw	255
 13731  001DD2  0100               	movlb	0	; () banked
 13732  001DD4  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 13733  001DD6  0E01               	movlw	1
 13734  001DD8  0100               	movlb	0	; () banked
 13735  001DDA  27A2               	addwf	___ftadd@f1& (0+255),f,b
 13736  001DDC  0E00               	movlw	0
 13737  001DDE  0100               	movlb	0	; () banked
 13738  001DE0  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 13739  001DE2  0E00               	movlw	0
 13740  001DE4  0100               	movlb	0	; () banked
 13741  001DE6  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 13742  001DE8                     l1173:
 13743                           
 13744                           ; BSR set to: 0
 13745  001DE8  0100               	movlb	0	; () banked
 13746  001DEA  ADAB               	btfss	___ftadd@sign& (0+255),6,b
 13747  001DEC  D012               	goto	l6127
 13748                           
 13749                           ; BSR set to: 0
 13750  001DEE  0EFF               	movlw	255
 13751  001DF0  0100               	movlb	0	; () banked
 13752  001DF2  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 13753  001DF4  0EFF               	movlw	255
 13754  001DF6  0100               	movlb	0	; () banked
 13755  001DF8  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13756  001DFA  0EFF               	movlw	255
 13757  001DFC  0100               	movlb	0	; () banked
 13758  001DFE  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13759  001E00  0E01               	movlw	1
 13760  001E02  0100               	movlb	0	; () banked
 13761  001E04  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13762  001E06  0E00               	movlw	0
 13763  001E08  0100               	movlb	0	; () banked
 13764  001E0A  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13765  001E0C  0E00               	movlw	0
 13766  001E0E  0100               	movlb	0	; () banked
 13767  001E10  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13768  001E12                     l6127:
 13769                           
 13770                           ; BSR set to: 0
 13771  001E12  0E00               	movlw	0
 13772  001E14  0100               	movlb	0	; () banked
 13773  001E16  6FAB               	movwf	___ftadd@sign& (0+255),b
 13774                           
 13775                           ; BSR set to: 0
 13776  001E18  0100               	movlb	0	; () banked
 13777  001E1A  51A2               	movf	___ftadd@f1& (0+255),w,b
 13778  001E1C  0100               	movlb	0	; () banked
 13779  001E1E  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13780  001E20  0100               	movlb	0	; () banked
 13781  001E22  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
 13782  001E24  0100               	movlb	0	; () banked
 13783  001E26  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13784  001E28  0100               	movlb	0	; () banked
 13785  001E2A  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
 13786  001E2C  0100               	movlb	0	; () banked
 13787  001E2E  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13788                           
 13789                           ; BSR set to: 0
 13790  001E30  0100               	movlb	0	; () banked
 13791  001E32  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13792  001E34  D015               	goto	l6137
 13793                           
 13794                           ; BSR set to: 0
 13795  001E36  0EFF               	movlw	255
 13796  001E38  0100               	movlb	0	; () banked
 13797  001E3A  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 13798  001E3C  0EFF               	movlw	255
 13799  001E3E  0100               	movlb	0	; () banked
 13800  001E40  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13801  001E42  0EFF               	movlw	255
 13802  001E44  0100               	movlb	0	; () banked
 13803  001E46  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13804  001E48  0E01               	movlw	1
 13805  001E4A  0100               	movlb	0	; () banked
 13806  001E4C  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13807  001E4E  0E00               	movlw	0
 13808  001E50  0100               	movlb	0	; () banked
 13809  001E52  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13810  001E54  0E00               	movlw	0
 13811  001E56  0100               	movlb	0	; () banked
 13812  001E58  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13813                           
 13814                           ; BSR set to: 0
 13815  001E5A  0E01               	movlw	1
 13816  001E5C  0100               	movlb	0	; () banked
 13817  001E5E  6FAB               	movwf	___ftadd@sign& (0+255),b
 13818  001E60                     l6137:
 13819                           
 13820                           ; BSR set to: 0
 13821  001E60  C0A5  F023         	movff	___ftadd@f2,___ftpack@arg
 13822  001E64  C0A6  F024         	movff	___ftadd@f2+1,___ftpack@arg+1
 13823  001E68  C0A7  F025         	movff	___ftadd@f2+2,___ftpack@arg+2
 13824  001E6C  C0AD  F026         	movff	___ftadd@exp1,___ftpack@exp
 13825  001E70  C0AB  F027         	movff	___ftadd@sign,___ftpack@sign
 13826  001E74  ECBA  F019         	call	___ftpack	;wreg free
 13827  001E78  C023  F0A2         	movff	?___ftpack,?___ftadd
 13828  001E7C  C024  F0A3         	movff	?___ftpack+1,?___ftadd+1
 13829  001E80  C025  F0A4         	movff	?___ftpack+2,?___ftadd+2
 13830  001E84  0012               	return	
 13831  001E86                     __end_of___ftadd:
 13832                           	opt stack 0
 13833                           tblptru	equ	0xFF8
 13834                           tblptrh	equ	0xFF7
 13835                           tblptrl	equ	0xFF6
 13836                           tablat	equ	0xFF5
 13837                           prodh	equ	0xFF4
 13838                           prodl	equ	0xFF3
 13839                           intcon	equ	0xFF2
 13840                           intcon3	equ	0xFF0
 13841                           postinc0	equ	0xFEE
 13842                           wreg	equ	0xFE8
 13843                           postdec1	equ	0xFE5
 13844                           fsr1l	equ	0xFE1
 13845                           indf2	equ	0xFDF
 13846                           postinc2	equ	0xFDE
 13847                           postdec2	equ	0xFDD
 13848                           fsr2h	equ	0xFDA
 13849                           fsr2l	equ	0xFD9
 13850                           status	equ	0xFD8
 13851                           
 13852 ;; *************** function ___awtoft *****************
 13853 ;; Defined at:
 13854 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 13855 ;; Parameters:    Size  Location     Type
 13856 ;;  c               2   42[COMRAM] int 
 13857 ;; Auto vars:     Size  Location     Type
 13858 ;;  sign            1   45[COMRAM] unsigned char 
 13859 ;; Return value:  Size  Location     Type
 13860 ;;                  3   42[COMRAM] float 
 13861 ;; Registers used:
 13862 ;;		wreg, status,2, status,0, cstack
 13863 ;; Tracked objects:
 13864 ;;		On entry : 0/0
 13865 ;;		On exit  : 0/0
 13866 ;;		Unchanged: 0/0
 13867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13868 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13871 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13872 ;;Total ram usage:        4 bytes
 13873 ;; Hardware stack levels used:    1
 13874 ;; Hardware stack levels required when called:    4
 13875 ;; This function calls:
 13876 ;;		___ftpack
 13877 ;; This function is called by:
 13878 ;;		_sortBattery
 13879 ;;		_angleToPulse
 13880 ;;		_testFrequency
 13881 ;; This function uses a non-reentrant model
 13882 ;;
 13883                           
 13884                           	psect	text57
 13885  003ED0                     __ptext57:
 13886                           	opt stack 0
 13887  003ED0                     ___awtoft:
 13888                           	opt stack 23
 13889                           
 13890                           ;incstack = 0
 13891  003ED0  0E00               	movlw	0
 13892  003ED2  6E2E               	movwf	___awtoft@sign,c
 13893  003ED4  AE2C               	btfss	___awtoft@c+1,7,c
 13894  003ED6  D006               	goto	l6599
 13895  003ED8  6C2B               	negf	___awtoft@c,c
 13896  003EDA  1E2C               	comf	___awtoft@c+1,f,c
 13897  003EDC  B0D8               	btfsc	status,0,c
 13898  003EDE  2A2C               	incf	___awtoft@c+1,f,c
 13899  003EE0  0E01               	movlw	1
 13900  003EE2  6E2E               	movwf	___awtoft@sign,c
 13901  003EE4                     l6599:
 13902  003EE4  C02B  F023         	movff	___awtoft@c,___ftpack@arg
 13903  003EE8  C02C  F024         	movff	___awtoft@c+1,___ftpack@arg+1
 13904  003EEC  6A25               	clrf	___ftpack@arg+2,c
 13905  003EEE  0E8E               	movlw	142
 13906  003EF0  6E26               	movwf	___ftpack@exp,c
 13907  003EF2  C02E  F027         	movff	___awtoft@sign,___ftpack@sign
 13908  003EF6  ECBA  F019         	call	___ftpack	;wreg free
 13909  003EFA  C023  F02B         	movff	?___ftpack,?___awtoft
 13910  003EFE  C024  F02C         	movff	?___ftpack+1,?___awtoft+1
 13911  003F02  C025  F02D         	movff	?___ftpack+2,?___awtoft+2
 13912  003F06  0012               	return	
 13913  003F08                     __end_of___awtoft:
 13914                           	opt stack 0
 13915                           tblptru	equ	0xFF8
 13916                           tblptrh	equ	0xFF7
 13917                           tblptrl	equ	0xFF6
 13918                           tablat	equ	0xFF5
 13919                           prodh	equ	0xFF4
 13920                           prodl	equ	0xFF3
 13921                           intcon	equ	0xFF2
 13922                           intcon3	equ	0xFF0
 13923                           postinc0	equ	0xFEE
 13924                           wreg	equ	0xFE8
 13925                           postdec1	equ	0xFE5
 13926                           fsr1l	equ	0xFE1
 13927                           indf2	equ	0xFDF
 13928                           postinc2	equ	0xFDE
 13929                           postdec2	equ	0xFDD
 13930                           fsr2h	equ	0xFDA
 13931                           fsr2l	equ	0xFD9
 13932                           status	equ	0xFD8
 13933                           
 13934 ;; *************** function ___altoft *****************
 13935 ;; Defined at:
 13936 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 13937 ;; Parameters:    Size  Location     Type
 13938 ;;  c               4   42[COMRAM] long 
 13939 ;; Auto vars:     Size  Location     Type
 13940 ;;  sign            1   51[COMRAM] unsigned char 
 13941 ;;  exp             1   50[COMRAM] unsigned char 
 13942 ;; Return value:  Size  Location     Type
 13943 ;;                  3   42[COMRAM] float 
 13944 ;; Registers used:
 13945 ;;		wreg, status,2, status,0, cstack
 13946 ;; Tracked objects:
 13947 ;;		On entry : 0/0
 13948 ;;		On exit  : 0/0
 13949 ;;		Unchanged: 0/0
 13950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13951 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13953 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13954 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13955 ;;Total ram usage:       10 bytes
 13956 ;; Hardware stack levels used:    1
 13957 ;; Hardware stack levels required when called:    4
 13958 ;; This function calls:
 13959 ;;		___ftpack
 13960 ;; This function is called by:
 13961 ;;		_sortBattery
 13962 ;;		_angleToPulse
 13963 ;; This function uses a non-reentrant model
 13964 ;;
 13965                           
 13966                           	psect	text58
 13967  0038A4                     __ptext58:
 13968                           	opt stack 0
 13969  0038A4                     ___altoft:
 13970                           	opt stack 23
 13971                           
 13972                           ;incstack = 0
 13973  0038A4  0E00               	movlw	0
 13974  0038A6  6E34               	movwf	___altoft@sign,c
 13975  0038A8  0E8E               	movlw	142
 13976  0038AA  6E33               	movwf	___altoft@exp,c
 13977  0038AC  AE2E               	btfss	___altoft@c+3,7,c
 13978  0038AE  D011               	goto	l6531
 13979  0038B0  1E2E               	comf	___altoft@c+3,f,c
 13980  0038B2  1E2D               	comf	___altoft@c+2,f,c
 13981  0038B4  1E2C               	comf	___altoft@c+1,f,c
 13982  0038B6  6C2B               	negf	___altoft@c,c
 13983  0038B8  0E00               	movlw	0
 13984  0038BA  222C               	addwfc	___altoft@c+1,f,c
 13985  0038BC  222D               	addwfc	___altoft@c+2,f,c
 13986  0038BE  222E               	addwfc	___altoft@c+3,f,c
 13987  0038C0  0E01               	movlw	1
 13988  0038C2  6E34               	movwf	___altoft@sign,c
 13989  0038C4  D006               	goto	l6531
 13990  0038C6                     l6529:
 13991  0038C6  90D8               	bcf	status,0,c
 13992  0038C8  322E               	rrcf	___altoft@c+3,f,c
 13993  0038CA  322D               	rrcf	___altoft@c+2,f,c
 13994  0038CC  322C               	rrcf	___altoft@c+1,f,c
 13995  0038CE  322B               	rrcf	___altoft@c,f,c
 13996  0038D0  2A33               	incf	___altoft@exp,f,c
 13997  0038D2                     l6531:
 13998  0038D2  0E00               	movlw	0
 13999  0038D4  142B               	andwf	___altoft@c,w,c
 14000  0038D6  6E2F               	movwf	??___altoft& (0+255),c
 14001  0038D8  0E00               	movlw	0
 14002  0038DA  142C               	andwf	___altoft@c+1,w,c
 14003  0038DC  6E30               	movwf	(??___altoft+1)& (0+255),c
 14004  0038DE  0E00               	movlw	0
 14005  0038E0  142D               	andwf	___altoft@c+2,w,c
 14006  0038E2  6E31               	movwf	(??___altoft+2)& (0+255),c
 14007  0038E4  0EFF               	movlw	255
 14008  0038E6  142E               	andwf	___altoft@c+3,w,c
 14009  0038E8  6E32               	movwf	(??___altoft+3)& (0+255),c
 14010  0038EA  502F               	movf	??___altoft,w,c
 14011  0038EC  1030               	iorwf	??___altoft+1,w,c
 14012  0038EE  1031               	iorwf	??___altoft+2,w,c
 14013  0038F0  1032               	iorwf	??___altoft+3,w,c
 14014  0038F2  A4D8               	btfss	status,2,c
 14015  0038F4  D7E8               	goto	l6529
 14016  0038F6  C02B  F023         	movff	___altoft@c,___ftpack@arg
 14017  0038FA  C02C  F024         	movff	___altoft@c+1,___ftpack@arg+1
 14018  0038FE  C02D  F025         	movff	___altoft@c+2,___ftpack@arg+2
 14019  003902  C033  F026         	movff	___altoft@exp,___ftpack@exp
 14020  003906  C034  F027         	movff	___altoft@sign,___ftpack@sign
 14021  00390A  ECBA  F019         	call	___ftpack	;wreg free
 14022  00390E  C023  F02B         	movff	?___ftpack,?___altoft
 14023  003912  C024  F02C         	movff	?___ftpack+1,?___altoft+1
 14024  003916  C025  F02D         	movff	?___ftpack+2,?___altoft+2
 14025  00391A  0012               	return	
 14026  00391C                     __end_of___altoft:
 14027                           	opt stack 0
 14028                           tblptru	equ	0xFF8
 14029                           tblptrh	equ	0xFF7
 14030                           tblptrl	equ	0xFF6
 14031                           tablat	equ	0xFF5
 14032                           prodh	equ	0xFF4
 14033                           prodl	equ	0xFF3
 14034                           intcon	equ	0xFF2
 14035                           intcon3	equ	0xFF0
 14036                           postinc0	equ	0xFEE
 14037                           wreg	equ	0xFE8
 14038                           postdec1	equ	0xFE5
 14039                           fsr1l	equ	0xFE1
 14040                           indf2	equ	0xFDF
 14041                           postinc2	equ	0xFDE
 14042                           postdec2	equ	0xFDD
 14043                           fsr2h	equ	0xFDA
 14044                           fsr2l	equ	0xFD9
 14045                           status	equ	0xFD8
 14046                           
 14047 ;; *************** function ___ftpack *****************
 14048 ;; Defined at:
 14049 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 14050 ;; Parameters:    Size  Location     Type
 14051 ;;  arg             3   34[COMRAM] unsigned um
 14052 ;;  exp             1   37[COMRAM] unsigned char 
 14053 ;;  sign            1   38[COMRAM] unsigned char 
 14054 ;; Auto vars:     Size  Location     Type
 14055 ;;		None
 14056 ;; Return value:  Size  Location     Type
 14057 ;;                  3   34[COMRAM] float 
 14058 ;; Registers used:
 14059 ;;		wreg, status,2, status,0
 14060 ;; Tracked objects:
 14061 ;;		On entry : 0/0
 14062 ;;		On exit  : 0/0
 14063 ;;		Unchanged: 0/0
 14064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14065 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14067 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14068 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14069 ;;Total ram usage:        8 bytes
 14070 ;; Hardware stack levels used:    1
 14071 ;; Hardware stack levels required when called:    3
 14072 ;; This function calls:
 14073 ;;		Nothing
 14074 ;; This function is called by:
 14075 ;;		___altoft
 14076 ;;		___awtoft
 14077 ;;		___ftadd
 14078 ;;		___ftdiv
 14079 ;;		___ftmul
 14080 ;;		___lltoft
 14081 ;; This function uses a non-reentrant model
 14082 ;;
 14083                           
 14084                           	psect	text59
 14085  003374                     __ptext59:
 14086                           	opt stack 0
 14087  003374                     ___ftpack:
 14088                           	opt stack 23
 14089                           
 14090                           ;incstack = 0
 14091  003374  5026               	movf	___ftpack@exp,w,c
 14092  003376  B4D8               	btfsc	status,2,c
 14093  003378  D005               	goto	l6027
 14094  00337A  5023               	movf	___ftpack@arg,w,c
 14095  00337C  1024               	iorwf	___ftpack@arg+1,w,c
 14096  00337E  1025               	iorwf	___ftpack@arg+2,w,c
 14097  003380  A4D8               	btfss	status,2,c
 14098  003382  D00C               	goto	l6033
 14099  003384                     l6027:
 14100  003384  0E00               	movlw	0
 14101  003386  6E23               	movwf	?___ftpack,c
 14102  003388  0E00               	movlw	0
 14103  00338A  6E24               	movwf	?___ftpack+1,c
 14104  00338C  0E00               	movlw	0
 14105  00338E  6E25               	movwf	?___ftpack+2,c
 14106  003390  0012               	return	
 14107  003392                     l6031:
 14108  003392  2A26               	incf	___ftpack@exp,f,c
 14109  003394  90D8               	bcf	status,0,c
 14110  003396  3225               	rrcf	___ftpack@arg+2,f,c
 14111  003398  3224               	rrcf	___ftpack@arg+1,f,c
 14112  00339A  3223               	rrcf	___ftpack@arg,f,c
 14113  00339C                     l6033:
 14114  00339C  0E00               	movlw	0
 14115  00339E  1423               	andwf	___ftpack@arg,w,c
 14116  0033A0  6E28               	movwf	??___ftpack& (0+255),c
 14117  0033A2  0E00               	movlw	0
 14118  0033A4  1424               	andwf	___ftpack@arg+1,w,c
 14119  0033A6  6E29               	movwf	(??___ftpack+1)& (0+255),c
 14120  0033A8  0EFE               	movlw	254
 14121  0033AA  1425               	andwf	___ftpack@arg+2,w,c
 14122  0033AC  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 14123  0033AE  5028               	movf	??___ftpack,w,c
 14124  0033B0  1029               	iorwf	??___ftpack+1,w,c
 14125  0033B2  102A               	iorwf	??___ftpack+2,w,c
 14126  0033B4  B4D8               	btfsc	status,2,c
 14127  0033B6  D00C               	goto	l6039
 14128  0033B8  D7EC               	goto	l6031
 14129  0033BA                     l6035:
 14130  0033BA  2A26               	incf	___ftpack@exp,f,c
 14131  0033BC  0E01               	movlw	1
 14132  0033BE  2623               	addwf	___ftpack@arg,f,c
 14133  0033C0  0E00               	movlw	0
 14134  0033C2  2224               	addwfc	___ftpack@arg+1,f,c
 14135  0033C4  0E00               	movlw	0
 14136  0033C6  2225               	addwfc	___ftpack@arg+2,f,c
 14137  0033C8  90D8               	bcf	status,0,c
 14138  0033CA  3225               	rrcf	___ftpack@arg+2,f,c
 14139  0033CC  3224               	rrcf	___ftpack@arg+1,f,c
 14140  0033CE  3223               	rrcf	___ftpack@arg,f,c
 14141  0033D0                     l6039:
 14142  0033D0  0E00               	movlw	0
 14143  0033D2  1423               	andwf	___ftpack@arg,w,c
 14144  0033D4  6E28               	movwf	??___ftpack& (0+255),c
 14145  0033D6  0E00               	movlw	0
 14146  0033D8  1424               	andwf	___ftpack@arg+1,w,c
 14147  0033DA  6E29               	movwf	(??___ftpack+1)& (0+255),c
 14148  0033DC  0EFF               	movlw	255
 14149  0033DE  1425               	andwf	___ftpack@arg+2,w,c
 14150  0033E0  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 14151  0033E2  5028               	movf	??___ftpack,w,c
 14152  0033E4  1029               	iorwf	??___ftpack+1,w,c
 14153  0033E6  102A               	iorwf	??___ftpack+2,w,c
 14154  0033E8  B4D8               	btfsc	status,2,c
 14155  0033EA  D006               	goto	l6043
 14156  0033EC  D7E6               	goto	l6035
 14157  0033EE                     l6041:
 14158  0033EE  0626               	decf	___ftpack@exp,f,c
 14159  0033F0  90D8               	bcf	status,0,c
 14160  0033F2  3623               	rlcf	___ftpack@arg,f,c
 14161  0033F4  3624               	rlcf	___ftpack@arg+1,f,c
 14162  0033F6  3625               	rlcf	___ftpack@arg+2,f,c
 14163  0033F8                     l6043:
 14164  0033F8  BE24               	btfsc	___ftpack@arg+1,7,c
 14165  0033FA  D003               	goto	l1126
 14166  0033FC  0E02               	movlw	2
 14167  0033FE  6026               	cpfslt	___ftpack@exp,c
 14168  003400  D7F6               	goto	l6041
 14169  003402                     l1126:
 14170  003402  A026               	btfss	___ftpack@exp,0,c
 14171  003404  9E24               	bcf	___ftpack@arg+1,7,c
 14172  003406  90D8               	bcf	status,0,c
 14173  003408  3226               	rrcf	___ftpack@exp,f,c
 14174  00340A  5026               	movf	___ftpack@exp,w,c
 14175  00340C  1225               	iorwf	___ftpack@arg+2,f,c
 14176  00340E  5027               	movf	___ftpack@sign,w,c
 14177  003410  A4D8               	btfss	status,2,c
 14178  003412  8E25               	bsf	___ftpack@arg+2,7,c
 14179  003414  C023  F023         	movff	___ftpack@arg,?___ftpack
 14180  003418  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
 14181  00341C  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
 14182  003420  0012               	return	
 14183  003422                     __end_of___ftpack:
 14184                           	opt stack 0
 14185                           tblptru	equ	0xFF8
 14186                           tblptrh	equ	0xFF7
 14187                           tblptrl	equ	0xFF6
 14188                           tablat	equ	0xFF5
 14189                           prodh	equ	0xFF4
 14190                           prodl	equ	0xFF3
 14191                           intcon	equ	0xFF2
 14192                           intcon3	equ	0xFF0
 14193                           postinc0	equ	0xFEE
 14194                           wreg	equ	0xFE8
 14195                           postdec1	equ	0xFE5
 14196                           fsr1l	equ	0xFE1
 14197                           indf2	equ	0xFDF
 14198                           postinc2	equ	0xFDE
 14199                           postdec2	equ	0xFDD
 14200                           fsr2h	equ	0xFDA
 14201                           fsr2l	equ	0xFD9
 14202                           status	equ	0xFD8
 14203                           
 14204 ;; *************** function _initTimer *****************
 14205 ;; Defined at:
 14206 ;;		line 53 in file "timer.c"
 14207 ;; Parameters:    Size  Location     Type
 14208 ;;  timer           2   34[COMRAM] int 
 14209 ;; Auto vars:     Size  Location     Type
 14210 ;;		None
 14211 ;; Return value:  Size  Location     Type
 14212 ;;                  1    wreg      void 
 14213 ;; Registers used:
 14214 ;;		wreg, status,2, status,0
 14215 ;; Tracked objects:
 14216 ;;		On entry : 0/0
 14217 ;;		On exit  : 0/0
 14218 ;;		Unchanged: 0/0
 14219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14220 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14223 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14224 ;;Total ram usage:        4 bytes
 14225 ;; Hardware stack levels used:    1
 14226 ;; Hardware stack levels required when called:    3
 14227 ;; This function calls:
 14228 ;;		Nothing
 14229 ;; This function is called by:
 14230 ;;		_main
 14231 ;;		_initServo
 14232 ;;		_testFrequency
 14233 ;; This function uses a non-reentrant model
 14234 ;;
 14235                           
 14236                           	psect	text60
 14237  003DC8                     __ptext60:
 14238                           	opt stack 0
 14239  003DC8                     _initTimer:
 14240                           	opt stack 27
 14241                           
 14242                           ;timer.c: 54: switch(timer){
 14243                           
 14244                           ;incstack = 0
 14245  003DC8  D00F               	goto	l5053
 14246  003DCA                     l5035:
 14247                           
 14248                           ;timer.c: 56: T0CON = 0;
 14249  003DCA  0E00               	movlw	0
 14250  003DCC  6ED5               	movwf	4053,c	;volatile
 14251                           
 14252                           ;timer.c: 57: T0CON |= 1<<3;
 14253  003DCE  86D5               	bsf	4053,3,c	;volatile
 14254                           
 14255                           ;timer.c: 59: TMR0IE = 1;
 14256  003DD0  8AF2               	bsf	intcon,5,c	;volatile
 14257                           
 14258                           ;timer.c: 60: break;
 14259  003DD2  D01C               	goto	l455
 14260  003DD4                     l5041:
 14261                           
 14262                           ;timer.c: 62: T1CON = 0;
 14263  003DD4  0E00               	movlw	0
 14264  003DD6  6ECD               	movwf	4045,c	;volatile
 14265                           
 14266                           ;timer.c: 64: T1CON |= 0b11<<4;
 14267  003DD8  0E30               	movlw	48
 14268  003DDA  12CD               	iorwf	4045,f,c	;volatile
 14269                           
 14270                           ;timer.c: 65: TMR1IE = 1;
 14271  003DDC  809D               	bsf	3997,0,c	;volatile
 14272                           
 14273                           ;timer.c: 66: break;
 14274  003DDE  D016               	goto	l455
 14275  003DE0                     l5047:
 14276                           
 14277                           ;timer.c: 68: T3CON = 0;
 14278  003DE0  0E00               	movlw	0
 14279  003DE2  6EB1               	movwf	4017,c	;volatile
 14280                           
 14281                           ;timer.c: 69: TMR3IE = 1;
 14282  003DE4  82A0               	bsf	4000,1,c	;volatile
 14283                           
 14284                           ;timer.c: 71: }
 14285                           
 14286                           ;timer.c: 70: break;
 14287  003DE6  D012               	goto	l455
 14288  003DE8                     l5053:
 14289  003DE8  C023  F025         	movff	initTimer@timer,??_initTimer
 14290  003DEC  C024  F026         	movff	initTimer@timer+1,??_initTimer+1
 14291                           
 14292                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14293                           ; Switch size 1, requested type "space"
 14294                           ; Number of cases is 1, Range of values is 0 to 0
 14295                           ; switch strategies available:
 14296                           ; Name         Instructions Cycles
 14297                           ; simple_byte            4     3 (average)
 14298                           ;	Chosen strategy is simple_byte
 14299  003DF0  5026               	movf	??_initTimer+1,w,c
 14300  003DF2  0A00               	xorlw	0	; case 0
 14301  003DF4  A4D8               	btfss	status,2,c
 14302  003DF6  D00A               	goto	l455
 14303                           
 14304                           ; Switch size 1, requested type "space"
 14305                           ; Number of cases is 3, Range of values is 0 to 3
 14306                           ; switch strategies available:
 14307                           ; Name         Instructions Cycles
 14308                           ; simple_byte           10     6 (average)
 14309                           ;	Chosen strategy is simple_byte
 14310  003DF8  5025               	movf	??_initTimer,w,c
 14311  003DFA  0A00               	xorlw	0	; case 0
 14312  003DFC  B4D8               	btfsc	status,2,c
 14313  003DFE  D7E5               	goto	l5035
 14314  003E00  0A01               	xorlw	1	; case 1
 14315  003E02  B4D8               	btfsc	status,2,c
 14316  003E04  D7E7               	goto	l5041
 14317  003E06  0A02               	xorlw	2	; case 3
 14318  003E08  B4D8               	btfsc	status,2,c
 14319  003E0A  D7EA               	goto	l5047
 14320  003E0C                     l455:
 14321                           
 14322                           ;timer.c: 72: PEIE = 1;
 14323  003E0C  8CF2               	bsf	intcon,6,c	;volatile
 14324                           
 14325                           ;timer.c: 73: (INTCONbits.GIE = 1);
 14326  003E0E  8EF2               	bsf	intcon,7,c	;volatile
 14327  003E10  0012               	return		;funcret
 14328  003E12                     __end_of_initTimer:
 14329                           	opt stack 0
 14330                           tblptru	equ	0xFF8
 14331                           tblptrh	equ	0xFF7
 14332                           tblptrl	equ	0xFF6
 14333                           tablat	equ	0xFF5
 14334                           prodh	equ	0xFF4
 14335                           prodl	equ	0xFF3
 14336                           intcon	equ	0xFF2
 14337                           intcon3	equ	0xFF0
 14338                           postinc0	equ	0xFEE
 14339                           wreg	equ	0xFE8
 14340                           postdec1	equ	0xFE5
 14341                           fsr1l	equ	0xFE1
 14342                           indf2	equ	0xFDF
 14343                           postinc2	equ	0xFDE
 14344                           postdec2	equ	0xFDD
 14345                           fsr2h	equ	0xFDA
 14346                           fsr2l	equ	0xFD9
 14347                           status	equ	0xFD8
 14348                           
 14349 ;; *************** function _initLCD *****************
 14350 ;; Defined at:
 14351 ;;		line 15 in file "lcd.c"
 14352 ;; Parameters:    Size  Location     Type
 14353 ;;		None
 14354 ;; Auto vars:     Size  Location     Type
 14355 ;;		None
 14356 ;; Return value:  Size  Location     Type
 14357 ;;                  1    wreg      void 
 14358 ;; Registers used:
 14359 ;;		wreg, status,2, status,0, cstack
 14360 ;; Tracked objects:
 14361 ;;		On entry : 0/0
 14362 ;;		On exit  : 0/0
 14363 ;;		Unchanged: 0/0
 14364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14367 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14368 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14369 ;;Total ram usage:        1 bytes
 14370 ;; Hardware stack levels used:    1
 14371 ;; Hardware stack levels required when called:    5
 14372 ;; This function calls:
 14373 ;;		_lcdInst
 14374 ;; This function is called by:
 14375 ;;		_main
 14376 ;;		_debug
 14377 ;; This function uses a non-reentrant model
 14378 ;;
 14379                           
 14380                           	psect	text61
 14381  003E12                     __ptext61:
 14382                           	opt stack 0
 14383  003E12                     _initLCD:
 14384                           	opt stack 25
 14385                           
 14386                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 14387                           
 14388                           ;incstack = 0
 14389  003E12  0E31               	movlw	49
 14390  003E14  6E27               	movwf	??_initLCD& (0+255),c
 14391  003E16  0EB2               	movlw	178
 14392  003E18                     u8227:
 14393  003E18  2EE8               	decfsz	wreg,f,c
 14394  003E1A  D7FE               	bra	u8227
 14395  003E1C  2E27               	decfsz	??_initLCD& (0+255),f,c
 14396  003E1E  D7FC               	bra	u8227
 14397  003E20  D000               	nop2	
 14398                           
 14399                           ;lcd.c: 18: lcdInst(0b00110011);
 14400  003E22  0E33               	movlw	51
 14401  003E24  EC0B  F020         	call	_lcdInst
 14402                           
 14403                           ;lcd.c: 19: lcdInst(0b00110010);
 14404  003E28  0E32               	movlw	50
 14405  003E2A  EC0B  F020         	call	_lcdInst
 14406                           
 14407                           ;lcd.c: 20: lcdInst(0b00101000);
 14408  003E2E  0E28               	movlw	40
 14409  003E30  EC0B  F020         	call	_lcdInst
 14410                           
 14411                           ;lcd.c: 21: lcdInst(0b00001111);
 14412  003E34  0E0F               	movlw	15
 14413  003E36  EC0B  F020         	call	_lcdInst
 14414                           
 14415                           ;lcd.c: 22: lcdInst(0b00000110);
 14416  003E3A  0E06               	movlw	6
 14417  003E3C  EC0B  F020         	call	_lcdInst
 14418                           
 14419                           ;lcd.c: 23: lcdInst(0b00000001);
 14420  003E40  0E01               	movlw	1
 14421  003E42  EC0B  F020         	call	_lcdInst
 14422                           
 14423                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 14424  003E46  0E31               	movlw	49
 14425  003E48  6E27               	movwf	??_initLCD& (0+255),c
 14426  003E4A  0EB2               	movlw	178
 14427  003E4C                     u8237:
 14428  003E4C  2EE8               	decfsz	wreg,f,c
 14429  003E4E  D7FE               	bra	u8237
 14430  003E50  2E27               	decfsz	??_initLCD& (0+255),f,c
 14431  003E52  D7FC               	bra	u8237
 14432  003E54  D000               	nop2	
 14433  003E56  0012               	return		;funcret
 14434  003E58                     __end_of_initLCD:
 14435                           	opt stack 0
 14436                           tblptru	equ	0xFF8
 14437                           tblptrh	equ	0xFF7
 14438                           tblptrl	equ	0xFF6
 14439                           tablat	equ	0xFF5
 14440                           prodh	equ	0xFF4
 14441                           prodl	equ	0xFF3
 14442                           intcon	equ	0xFF2
 14443                           intcon3	equ	0xFF0
 14444                           postinc0	equ	0xFEE
 14445                           wreg	equ	0xFE8
 14446                           postdec1	equ	0xFE5
 14447                           fsr1l	equ	0xFE1
 14448                           indf2	equ	0xFDF
 14449                           postinc2	equ	0xFDE
 14450                           postdec2	equ	0xFDD
 14451                           fsr2h	equ	0xFDA
 14452                           fsr2l	equ	0xFD9
 14453                           status	equ	0xFD8
 14454                           
 14455 ;; *************** function _lcdInst *****************
 14456 ;; Defined at:
 14457 ;;		line 27 in file "lcd.c"
 14458 ;; Parameters:    Size  Location     Type
 14459 ;;  data            1    wreg     unsigned char 
 14460 ;; Auto vars:     Size  Location     Type
 14461 ;;  data            1   37[COMRAM] unsigned char 
 14462 ;; Return value:  Size  Location     Type
 14463 ;;                  1    wreg      void 
 14464 ;; Registers used:
 14465 ;;		wreg, status,2, status,0, cstack
 14466 ;; Tracked objects:
 14467 ;;		On entry : 0/0
 14468 ;;		On exit  : 0/0
 14469 ;;		Unchanged: 0/0
 14470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14473 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14474 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14475 ;;Total ram usage:        2 bytes
 14476 ;; Hardware stack levels used:    1
 14477 ;; Hardware stack levels required when called:    4
 14478 ;; This function calls:
 14479 ;;		_lcdNibble
 14480 ;; This function is called by:
 14481 ;;		_initLCD
 14482 ;;		_lcdHome
 14483 ;;		_lcdClear
 14484 ;;		_lcdNewline
 14485 ;; This function uses a non-reentrant model
 14486 ;;
 14487                           
 14488                           	psect	text62
 14489  004016                     __ptext62:
 14490                           	opt stack 0
 14491  004016                     _lcdInst:
 14492                           	opt stack 22
 14493                           
 14494                           ;incstack = 0
 14495                           ;lcdInst@data stored from wreg
 14496  004016  6E26               	movwf	lcdInst@data,c
 14497                           
 14498                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 14499  004018  948C               	bcf	3980,2,c	;volatile
 14500                           
 14501                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 14502  00401A  0E74               	movlw	116
 14503  00401C                     u8247:
 14504  00401C  2EE8               	decfsz	wreg,f,c
 14505  00401E  D7FE               	bra	u8247
 14506  004020  D000               	nop2	
 14507                           
 14508                           ;lcd.c: 30: lcdNibble(data);
 14509  004022  5026               	movf	lcdInst@data,w,c
 14510  004024  EC31  F01D         	call	_lcdNibble
 14511                           
 14512                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 14513  004028  0E04               	movlw	4
 14514  00402A  6E25               	movwf	??_lcdInst& (0+255),c
 14515  00402C  0E3E               	movlw	62
 14516  00402E                     u8257:
 14517  00402E  2EE8               	decfsz	wreg,f,c
 14518  004030  D7FE               	bra	u8257
 14519  004032  2E25               	decfsz	??_lcdInst& (0+255),f,c
 14520  004034  D7FC               	bra	u8257
 14521  004036  0012               	return		;funcret
 14522  004038                     __end_of_lcdInst:
 14523                           	opt stack 0
 14524                           tblptru	equ	0xFF8
 14525                           tblptrh	equ	0xFF7
 14526                           tblptrl	equ	0xFF6
 14527                           tablat	equ	0xFF5
 14528                           prodh	equ	0xFF4
 14529                           prodl	equ	0xFF3
 14530                           intcon	equ	0xFF2
 14531                           intcon3	equ	0xFF0
 14532                           postinc0	equ	0xFEE
 14533                           wreg	equ	0xFE8
 14534                           postdec1	equ	0xFE5
 14535                           fsr1l	equ	0xFE1
 14536                           indf2	equ	0xFDF
 14537                           postinc2	equ	0xFDE
 14538                           postdec2	equ	0xFDD
 14539                           fsr2h	equ	0xFDA
 14540                           fsr2l	equ	0xFD9
 14541                           status	equ	0xFD8
 14542                           
 14543 ;; *************** function _lcdNibble *****************
 14544 ;; Defined at:
 14545 ;;		line 46 in file "lcd.c"
 14546 ;; Parameters:    Size  Location     Type
 14547 ;;  data            1    wreg     unsigned char 
 14548 ;; Auto vars:     Size  Location     Type
 14549 ;;  data            1   35[COMRAM] unsigned char 
 14550 ;;  temp            1   34[COMRAM] unsigned char 
 14551 ;; Return value:  Size  Location     Type
 14552 ;;                  1    wreg      void 
 14553 ;; Registers used:
 14554 ;;		wreg, status,2, status,0
 14555 ;; Tracked objects:
 14556 ;;		On entry : 0/0
 14557 ;;		On exit  : 0/0
 14558 ;;		Unchanged: 0/0
 14559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14563 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14564 ;;Total ram usage:        2 bytes
 14565 ;; Hardware stack levels used:    1
 14566 ;; Hardware stack levels required when called:    3
 14567 ;; This function calls:
 14568 ;;		Nothing
 14569 ;; This function is called by:
 14570 ;;		_lcdInst
 14571 ;;		_putch
 14572 ;; This function uses a non-reentrant model
 14573 ;;
 14574                           
 14575                           	psect	text63
 14576  003A62                     __ptext63:
 14577                           	opt stack 0
 14578  003A62                     _lcdNibble:
 14579                           	opt stack 24
 14580                           
 14581                           ;incstack = 0
 14582                           ;lcdNibble@data stored from wreg
 14583  003A62  6E24               	movwf	lcdNibble@data,c
 14584                           
 14585                           ;lcd.c: 48: char temp = data & 0xF0;
 14586  003A64  5024               	movf	lcdNibble@data,w,c
 14587  003A66  0BF0               	andlw	240
 14588  003A68  6E23               	movwf	lcdNibble@temp,c
 14589                           
 14590                           ;lcd.c: 49: LATD = LATD & 0x0F;
 14591  003A6A  508C               	movf	3980,w,c	;volatile
 14592  003A6C  0B0F               	andlw	15
 14593  003A6E  6E8C               	movwf	3980,c	;volatile
 14594                           
 14595                           ;lcd.c: 50: LATD = temp | LATD;
 14596  003A70  5023               	movf	lcdNibble@temp,w,c
 14597  003A72  108C               	iorwf	3980,w,c	;volatile
 14598  003A74  6E8C               	movwf	3980,c	;volatile
 14599                           
 14600                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 14601  003A76  968C               	bcf	3980,3,c	;volatile
 14602                           
 14603                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14604  003A78  0ED6               	movlw	214
 14605  003A7A                     u8267:
 14606  003A7A  D000               	nop2	
 14607  003A7C  D000               	nop2	
 14608  003A7E  2EE8               	decfsz	wreg,f,c
 14609  003A80  D7FC               	bra	u8267
 14610  003A82  D000               	nop2	
 14611                           
 14612                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 14613  003A84  868C               	bsf	3980,3,c	;volatile
 14614                           
 14615                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14616  003A86  0ED6               	movlw	214
 14617  003A88                     u8277:
 14618  003A88  D000               	nop2	
 14619  003A8A  D000               	nop2	
 14620  003A8C  2EE8               	decfsz	wreg,f,c
 14621  003A8E  D7FC               	bra	u8277
 14622  003A90  D000               	nop2	
 14623                           
 14624                           ;lcd.c: 58: data = data << 4;
 14625  003A92  3824               	swapf	lcdNibble@data,w,c
 14626  003A94  0BF0               	andlw	240
 14627  003A96  6E24               	movwf	lcdNibble@data,c
 14628                           
 14629                           ;lcd.c: 60: temp = data & 0xF0;
 14630  003A98  5024               	movf	lcdNibble@data,w,c
 14631  003A9A  0BF0               	andlw	240
 14632  003A9C  6E23               	movwf	lcdNibble@temp,c
 14633                           
 14634                           ;lcd.c: 61: LATD = LATD & 0x0F;
 14635  003A9E  508C               	movf	3980,w,c	;volatile
 14636  003AA0  0B0F               	andlw	15
 14637  003AA2  6E8C               	movwf	3980,c	;volatile
 14638                           
 14639                           ;lcd.c: 62: LATD = temp | LATD;
 14640  003AA4  5023               	movf	lcdNibble@temp,w,c
 14641  003AA6  108C               	iorwf	3980,w,c	;volatile
 14642  003AA8  6E8C               	movwf	3980,c	;volatile
 14643                           
 14644                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 14645  003AAA  968C               	bcf	3980,3,c	;volatile
 14646                           
 14647                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14648  003AAC  0ED6               	movlw	214
 14649  003AAE                     u8287:
 14650  003AAE  D000               	nop2	
 14651  003AB0  D000               	nop2	
 14652  003AB2  2EE8               	decfsz	wreg,f,c
 14653  003AB4  D7FC               	bra	u8287
 14654  003AB6  D000               	nop2	
 14655                           
 14656                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 14657  003AB8  868C               	bsf	3980,3,c	;volatile
 14658                           
 14659                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14660  003ABA  0ED6               	movlw	214
 14661  003ABC                     u8297:
 14662  003ABC  D000               	nop2	
 14663  003ABE  D000               	nop2	
 14664  003AC0  2EE8               	decfsz	wreg,f,c
 14665  003AC2  D7FC               	bra	u8297
 14666  003AC4  D000               	nop2	
 14667  003AC6  0012               	return		;funcret
 14668  003AC8                     __end_of_lcdNibble:
 14669                           	opt stack 0
 14670                           tblptru	equ	0xFF8
 14671                           tblptrh	equ	0xFF7
 14672                           tblptrl	equ	0xFF6
 14673                           tablat	equ	0xFF5
 14674                           prodh	equ	0xFF4
 14675                           prodl	equ	0xFF3
 14676                           intcon	equ	0xFF2
 14677                           intcon3	equ	0xFF0
 14678                           postinc0	equ	0xFEE
 14679                           wreg	equ	0xFE8
 14680                           postdec1	equ	0xFE5
 14681                           fsr1l	equ	0xFE1
 14682                           indf2	equ	0xFDF
 14683                           postinc2	equ	0xFDE
 14684                           postdec2	equ	0xFDD
 14685                           fsr2h	equ	0xFDA
 14686                           fsr2l	equ	0xFD9
 14687                           status	equ	0xFD8
 14688                           
 14689 ;; *************** function _service *****************
 14690 ;; Defined at:
 14691 ;;		line 350 in file "main.c"
 14692 ;; Parameters:    Size  Location     Type
 14693 ;;		None
 14694 ;; Auto vars:     Size  Location     Type
 14695 ;;  key             1   33[COMRAM] unsigned char 
 14696 ;; Return value:  Size  Location     Type
 14697 ;;                  1    wreg      void 
 14698 ;; Registers used:
 14699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14700 ;; Tracked objects:
 14701 ;;		On entry : 0/0
 14702 ;;		On exit  : 0/0
 14703 ;;		Unchanged: 0/0
 14704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14707 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14708 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14709 ;;Total ram usage:       15 bytes
 14710 ;; Hardware stack levels used:    1
 14711 ;; Hardware stack levels required when called:    2
 14712 ;; This function calls:
 14713 ;;		_keyPressedInterruptService
 14714 ;;		_servoInterruptService
 14715 ;;		i2_startTimer
 14716 ;; This function is called by:
 14717 ;;		Interrupt level 2
 14718 ;; This function uses a non-reentrant model
 14719 ;;
 14720                           
 14721                           	psect	intcode
 14722  000008                     __pintcode:
 14723                           	opt stack 0
 14724  000008                     _service:
 14725                           	opt stack 21
 14726                           
 14727                           ;incstack = 0
 14728  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14729  00000A  ED64  F016         	call	int_func,f	;refresh shadow registers
 14730                           tblptru	equ	0xFF8
 14731                           tblptrh	equ	0xFF7
 14732                           tblptrl	equ	0xFF6
 14733                           tablat	equ	0xFF5
 14734                           prodh	equ	0xFF4
 14735                           prodl	equ	0xFF3
 14736                           intcon	equ	0xFF2
 14737                           intcon3	equ	0xFF0
 14738                           postinc0	equ	0xFEE
 14739                           wreg	equ	0xFE8
 14740                           postdec1	equ	0xFE5
 14741                           fsr1l	equ	0xFE1
 14742                           indf2	equ	0xFDF
 14743                           postinc2	equ	0xFDE
 14744                           postdec2	equ	0xFDD
 14745                           fsr2h	equ	0xFDA
 14746                           fsr2l	equ	0xFD9
 14747                           status	equ	0xFD8
 14748                           
 14749                           	psect	intcode_body
 14750  002CC8                     __pintcode_body:
 14751                           	opt stack 21
 14752  002CC8                     int_func:
 14753                           	opt stack 21
 14754  002CC8  0006               	pop		; remove dummy address from shadow register refresh
 14755  002CCA  CFFA F014          	movff	pclath,??_service
 14756  002CCE  CFFB F015          	movff	pclatu,??_service+1
 14757  002CD2  CFE9 F016          	movff	fsr0l,??_service+2
 14758  002CD6  CFEA F017          	movff	fsr0h,??_service+3
 14759  002CDA  CFE1 F018          	movff	fsr1l,??_service+4
 14760  002CDE  CFE2 F019          	movff	fsr1h,??_service+5
 14761  002CE2  CFD9 F01A          	movff	fsr2l,??_service+6
 14762  002CE6  CFDA F01B          	movff	fsr2h,??_service+7
 14763  002CEA  CFF3 F01C          	movff	prodl,??_service+8
 14764  002CEE  CFF4 F01D          	movff	prodh,??_service+9
 14765  002CF2  CFF6 F01E          	movff	tblptrl,??_service+10
 14766  002CF6  CFF7 F01F          	movff	tblptrh,??_service+11
 14767  002CFA  CFF8 F020          	movff	tblptru,??_service+12
 14768  002CFE  CFF5 F021          	movff	tablat,??_service+13
 14769                           
 14770                           ;main.c: 352: if( servoInterruptService() )return;
 14771  002D02  EC69  F015         	call	_servoInterruptService	;wreg free
 14772  002D06  0900               	iorlw	0
 14773  002D08  A4D8               	btfss	status,2,c
 14774  002D0A  D035               	goto	i2l205
 14775                           
 14776                           ;main.c: 357: if(TMR1IF){
 14777  002D0C  A09E               	btfss	3998,0,c	;volatile
 14778  002D0E  D017               	goto	i2l206
 14779                           
 14780                           ;main.c: 358: startTimer(1,0x8683);
 14781  002D10  0E00               	movlw	0
 14782  002D12  6E08               	movwf	i2startTimer@timer+1,c
 14783  002D14  0E01               	movlw	1
 14784  002D16  6E07               	movwf	i2startTimer@timer,c
 14785  002D18  0E83               	movlw	131
 14786  002D1A  6E09               	movwf	i2startTimer@val,c
 14787  002D1C  0E86               	movlw	134
 14788  002D1E  6E0A               	movwf	i2startTimer@val+1,c
 14789  002D20  0E00               	movlw	0
 14790  002D22  6E0B               	movwf	i2startTimer@val+2,c
 14791  002D24  0E00               	movlw	0
 14792  002D26  6E0C               	movwf	i2startTimer@val+3,c
 14793  002D28  ECBE  F01E         	call	i2_startTimer	;wreg free
 14794                           
 14795                           ;main.c: 359: time+=1;
 14796  002D2C  0E01               	movlw	1
 14797  002D2E  0101               	movlb	1	; () banked
 14798  002D30  277A               	addwf	_time& (0+255),f,b
 14799  002D32  0E00               	movlw	0
 14800  002D34  237B               	addwfc	(_time+1)& (0+255),f,b
 14801  002D36  237C               	addwfc	(_time+2)& (0+255),f,b
 14802  002D38  237D               	addwfc	(_time+3)& (0+255),f,b
 14803                           
 14804                           ; BSR set to: 1
 14805                           ;main.c: 360: TMR1IF = 0;
 14806  002D3A  909E               	bcf	3998,0,c	;volatile
 14807                           
 14808                           ; BSR set to: 1
 14809                           ;main.c: 361: return;
 14810  002D3C  D01C               	goto	i2l205
 14811  002D3E                     i2l206:
 14812                           
 14813                           ;main.c: 362: }
 14814                           ;main.c: 365: if(INT0IF){ INT0IF = 0;
 14815  002D3E  A2F2               	btfss	intcon,1,c	;volatile
 14816  002D40  D007               	goto	i2l207
 14817  002D42  92F2               	bcf	intcon,1,c	;volatile
 14818                           
 14819                           ;main.c: 366: batteryDetected = 1;
 14820  002D44  0E00               	movlw	0
 14821  002D46  0101               	movlb	1	; () banked
 14822  002D48  6F7F               	movwf	(_batteryDetected+1)& (0+255),b
 14823  002D4A  0E01               	movlw	1
 14824  002D4C  6F7E               	movwf	_batteryDetected& (0+255),b
 14825                           
 14826                           ; BSR set to: 1
 14827                           ;main.c: 367: return;
 14828  002D4E  D013               	goto	i2l205
 14829  002D50                     i2l207:
 14830                           
 14831                           ;main.c: 368: }
 14832                           ;main.c: 371: if(INT1IF && INT1IE){INT1IF = 0;
 14833  002D50  B0F0               	btfsc	intcon3,0,c	;volatile
 14834  002D52  A6F0               	btfss	intcon3,3,c	;volatile
 14835  002D54  D010               	goto	i2l205
 14836  002D56  90F0               	bcf	intcon3,0,c	;volatile
 14837                           
 14838                           ;main.c: 372: keyPressedInterruptService();
 14839  002D58  EC1C  F020         	call	_keyPressedInterruptService	;wreg free
 14840                           
 14841                           ;main.c: 373: char key = (PORTB & 0xF0) >> 4;
 14842  002D5C  3881               	swapf	3969,w,c	;volatile
 14843  002D5E  0B0F               	andlw	15
 14844  002D60  0B0F               	andlw	15
 14845  002D62  6E22               	movwf	service@key,c
 14846                           
 14847                           ;main.c: 374: if(key == 12)terminate = 1;
 14848  002D64  0E0C               	movlw	12
 14849  002D66  1822               	xorwf	service@key,w,c
 14850  002D68  A4D8               	btfss	status,2,c
 14851  002D6A  D005               	goto	i2l205
 14852  002D6C  0E00               	movlw	0
 14853  002D6E  0101               	movlb	1	; () banked
 14854  002D70  6F89               	movwf	(_terminate+1)& (0+255),b
 14855  002D72  0E01               	movlw	1
 14856  002D74  6F88               	movwf	_terminate& (0+255),b
 14857  002D76                     i2l205:
 14858  002D76  C021  FFF5         	movff	??_service+13,tablat
 14859  002D7A  C020  FFF8         	movff	??_service+12,tblptru
 14860  002D7E  C01F  FFF7         	movff	??_service+11,tblptrh
 14861  002D82  C01E  FFF6         	movff	??_service+10,tblptrl
 14862  002D86  C01D  FFF4         	movff	??_service+9,prodh
 14863  002D8A  C01C  FFF3         	movff	??_service+8,prodl
 14864  002D8E  C01B  FFDA         	movff	??_service+7,fsr2h
 14865  002D92  C01A  FFD9         	movff	??_service+6,fsr2l
 14866  002D96  C019  FFE2         	movff	??_service+5,fsr1h
 14867  002D9A  C018  FFE1         	movff	??_service+4,fsr1l
 14868  002D9E  C017  FFEA         	movff	??_service+3,fsr0h
 14869  002DA2  C016  FFE9         	movff	??_service+2,fsr0l
 14870  002DA6  C015  FFFB         	movff	??_service+1,pclatu
 14871  002DAA  C014  FFFA         	movff	??_service,pclath
 14872  002DAE  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14873  002DB0  0011               	retfie		f
 14874  002DB2                     __end_of_service:
 14875                           	opt stack 0
 14876                           pclatu	equ	0xFFB
 14877                           pclath	equ	0xFFA
 14878                           tblptru	equ	0xFF8
 14879                           tblptrh	equ	0xFF7
 14880                           tblptrl	equ	0xFF6
 14881                           tablat	equ	0xFF5
 14882                           prodh	equ	0xFF4
 14883                           prodl	equ	0xFF3
 14884                           intcon	equ	0xFF2
 14885                           intcon3	equ	0xFF0
 14886                           postinc0	equ	0xFEE
 14887                           fsr0h	equ	0xFEA
 14888                           fsr0l	equ	0xFE9
 14889                           wreg	equ	0xFE8
 14890                           postdec1	equ	0xFE5
 14891                           fsr1h	equ	0xFE2
 14892                           fsr1l	equ	0xFE1
 14893                           indf2	equ	0xFDF
 14894                           postinc2	equ	0xFDE
 14895                           postdec2	equ	0xFDD
 14896                           fsr2h	equ	0xFDA
 14897                           fsr2l	equ	0xFD9
 14898                           status	equ	0xFD8
 14899                           
 14900 ;; *************** function _servoInterruptService *****************
 14901 ;; Defined at:
 14902 ;;		line 55 in file "servo.c"
 14903 ;; Parameters:    Size  Location     Type
 14904 ;;		None
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;		None
 14907 ;; Return value:  Size  Location     Type
 14908 ;;                  1    wreg      unsigned char 
 14909 ;; Registers used:
 14910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14911 ;; Tracked objects:
 14912 ;;		On entry : 0/0
 14913 ;;		On exit  : 0/0
 14914 ;;		Unchanged: 0/0
 14915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14918 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14919 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14920 ;;Total ram usage:        4 bytes
 14921 ;; Hardware stack levels used:    1
 14922 ;; Hardware stack levels required when called:    1
 14923 ;; This function calls:
 14924 ;;		i2___awmod
 14925 ;;		i2_digitalWrite
 14926 ;;		i2_startTimer
 14927 ;; This function is called by:
 14928 ;;		_service
 14929 ;; This function uses a non-reentrant model
 14930 ;;
 14931                           
 14932                           	psect	text65
 14933  002AD2                     __ptext65:
 14934                           	opt stack 0
 14935  002AD2                     _servoInterruptService:
 14936                           	opt stack 21
 14937                           
 14938                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 14939                           
 14940                           ;incstack = 0
 14941  002AD2  A4F2               	btfss	intcon,2,c	;volatile
 14942  002AD4  D082               	goto	i2l5641
 14943  002AD6  94F2               	bcf	intcon,2,c	;volatile
 14944                           
 14945                           ;servo.c: 58: digitalWrite(servos[curr],0);
 14946  002AD8  90D8               	bcf	status,0,c
 14947  002ADA  3458               	rlcf	_curr,w,c
 14948  002ADC  6ED9               	movwf	fsr2l,c
 14949  002ADE  3459               	rlcf	_curr+1,w,c
 14950  002AE0  6EDA               	movwf	fsr2h,c
 14951  002AE2  0E72               	movlw	low _servos
 14952  002AE4  26D9               	addwf	fsr2l,f,c
 14953  002AE6  0E01               	movlw	high _servos
 14954  002AE8  22DA               	addwfc	fsr2h,f,c
 14955  002AEA  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14956  002AEE  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14957  002AF2  0E00               	movlw	0
 14958  002AF4  6E0A               	movwf	i2digitalWrite@val+1,c
 14959  002AF6  0E00               	movlw	0
 14960  002AF8  6E09               	movwf	i2digitalWrite@val,c
 14961  002AFA  EC56  F019         	call	i2_digitalWrite	;wreg free
 14962                           
 14963                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 14964  002AFE  0E01               	movlw	1
 14965  002B00  2458               	addwf	_curr,w,c
 14966  002B02  6E01               	movwf	i2___awmod@dividend,c
 14967  002B04  0E00               	movlw	0
 14968  002B06  2059               	addwfc	_curr+1,w,c
 14969  002B08  6E02               	movwf	i2___awmod@dividend+1,c
 14970  002B0A  0E01               	movlw	1
 14971  002B0C  0100               	movlb	0	; () banked
 14972  002B0E  25FB               	addwf	_n& (0+255),w,b
 14973  002B10  6E03               	movwf	i2___awmod@divisor,c
 14974  002B12  0E00               	movlw	0
 14975  002B14  0100               	movlb	0	; () banked
 14976  002B16  21FC               	addwfc	(_n+1)& (0+255),w,b
 14977  002B18  6E04               	movwf	i2___awmod@divisor+1,c
 14978  002B1A  ECC6  F01C         	call	i2___awmod	;wreg free
 14979  002B1E  90D8               	bcf	status,0,c
 14980  002B20  3601               	rlcf	?i2___awmod,f,c
 14981  002B22  3602               	rlcf	?i2___awmod+1,f,c
 14982  002B24  0E72               	movlw	low _servos
 14983  002B26  2401               	addwf	?i2___awmod,w,c
 14984  002B28  6ED9               	movwf	fsr2l,c
 14985  002B2A  0E01               	movlw	high _servos
 14986  002B2C  2002               	addwfc	?i2___awmod+1,w,c
 14987  002B2E  6EDA               	movwf	fsr2h,c
 14988  002B30  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14989  002B34  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14990  002B38  0E00               	movlw	0
 14991  002B3A  6E0A               	movwf	i2digitalWrite@val+1,c
 14992  002B3C  0E01               	movlw	1
 14993  002B3E  6E09               	movwf	i2digitalWrite@val,c
 14994  002B40  EC56  F019         	call	i2_digitalWrite	;wreg free
 14995                           
 14996                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 14997  002B44  0E00               	movlw	0
 14998  002B46  6E08               	movwf	i2startTimer@timer+1,c
 14999  002B48  0E00               	movlw	0
 15000  002B4A  6E07               	movwf	i2startTimer@timer,c
 15001  002B4C  0EFF               	movlw	255
 15002  002B4E  6E10               	movwf	??_servoInterruptService& (0+255),c
 15003  002B50  0EFF               	movlw	255
 15004  002B52  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 15005  002B54  0E01               	movlw	1
 15006  002B56  2458               	addwf	_curr,w,c
 15007  002B58  6E01               	movwf	i2___awmod@dividend,c
 15008  002B5A  0E00               	movlw	0
 15009  002B5C  2059               	addwfc	_curr+1,w,c
 15010  002B5E  6E02               	movwf	i2___awmod@dividend+1,c
 15011  002B60  0E01               	movlw	1
 15012  002B62  0100               	movlb	0	; () banked
 15013  002B64  25FB               	addwf	_n& (0+255),w,b
 15014  002B66  6E03               	movwf	i2___awmod@divisor,c
 15015  002B68  0E00               	movlw	0
 15016  002B6A  0100               	movlb	0	; () banked
 15017  002B6C  21FC               	addwfc	(_n+1)& (0+255),w,b
 15018  002B6E  6E04               	movwf	i2___awmod@divisor+1,c
 15019  002B70  ECC6  F01C         	call	i2___awmod	;wreg free
 15020  002B74  90D8               	bcf	status,0,c
 15021  002B76  3601               	rlcf	?i2___awmod,f,c
 15022  002B78  3602               	rlcf	?i2___awmod+1,f,c
 15023  002B7A  0E6A               	movlw	low _pulse
 15024  002B7C  2401               	addwf	?i2___awmod,w,c
 15025  002B7E  6ED9               	movwf	fsr2l,c
 15026  002B80  0E01               	movlw	high _pulse
 15027  002B82  2002               	addwfc	?i2___awmod+1,w,c
 15028  002B84  6EDA               	movwf	fsr2h,c
 15029  002B86  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 15030  002B8A  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 15031  002B8E  1E12               	comf	??_servoInterruptService+2,f,c
 15032  002B90  1E13               	comf	??_servoInterruptService+3,f,c
 15033  002B92  4A12               	infsnz	??_servoInterruptService+2,f,c
 15034  002B94  2A13               	incf	??_servoInterruptService+3,f,c
 15035  002B96  5010               	movf	??_servoInterruptService,w,c
 15036  002B98  2612               	addwf	??_servoInterruptService+2,f,c
 15037  002B9A  5011               	movf	??_servoInterruptService+1,w,c
 15038  002B9C  2213               	addwfc	??_servoInterruptService+3,f,c
 15039  002B9E  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 15040  002BA2  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 15041  002BA6  6A0B               	clrf	i2startTimer@val+2,c
 15042  002BA8  6A0C               	clrf	i2startTimer@val+3,c
 15043  002BAA  ECBE  F01E         	call	i2_startTimer	;wreg free
 15044                           
 15045                           ;servo.c: 62: curr = (curr+1)%(n+1);
 15046  002BAE  0E01               	movlw	1
 15047  002BB0  2458               	addwf	_curr,w,c
 15048  002BB2  6E01               	movwf	i2___awmod@dividend,c
 15049  002BB4  0E00               	movlw	0
 15050  002BB6  2059               	addwfc	_curr+1,w,c
 15051  002BB8  6E02               	movwf	i2___awmod@dividend+1,c
 15052  002BBA  0E01               	movlw	1
 15053  002BBC  0100               	movlb	0	; () banked
 15054  002BBE  25FB               	addwf	_n& (0+255),w,b
 15055  002BC0  6E03               	movwf	i2___awmod@divisor,c
 15056  002BC2  0E00               	movlw	0
 15057  002BC4  0100               	movlb	0	; () banked
 15058  002BC6  21FC               	addwfc	(_n+1)& (0+255),w,b
 15059  002BC8  6E04               	movwf	i2___awmod@divisor+1,c
 15060  002BCA  ECC6  F01C         	call	i2___awmod	;wreg free
 15061  002BCE  C001  F058         	movff	?i2___awmod,_curr
 15062  002BD2  C002  F059         	movff	?i2___awmod+1,_curr+1
 15063                           
 15064                           ;servo.c: 63: return 1;
 15065  002BD6  0E01               	movlw	1
 15066  002BD8  0012               	return	
 15067  002BDA                     i2l5641:
 15068                           
 15069                           ;servo.c: 64: }
 15070                           ;servo.c: 65: return 0;
 15071  002BDA  0E00               	movlw	0
 15072  002BDC  0012               	return	
 15073  002BDE                     __end_of_servoInterruptService:
 15074                           	opt stack 0
 15075                           pclatu	equ	0xFFB
 15076                           pclath	equ	0xFFA
 15077                           tblptru	equ	0xFF8
 15078                           tblptrh	equ	0xFF7
 15079                           tblptrl	equ	0xFF6
 15080                           tablat	equ	0xFF5
 15081                           prodh	equ	0xFF4
 15082                           prodl	equ	0xFF3
 15083                           intcon	equ	0xFF2
 15084                           intcon3	equ	0xFF0
 15085                           postinc0	equ	0xFEE
 15086                           fsr0h	equ	0xFEA
 15087                           fsr0l	equ	0xFE9
 15088                           wreg	equ	0xFE8
 15089                           postdec1	equ	0xFE5
 15090                           fsr1h	equ	0xFE2
 15091                           fsr1l	equ	0xFE1
 15092                           indf2	equ	0xFDF
 15093                           postinc2	equ	0xFDE
 15094                           postdec2	equ	0xFDD
 15095                           fsr2h	equ	0xFDA
 15096                           fsr2l	equ	0xFD9
 15097                           status	equ	0xFD8
 15098                           
 15099 ;; *************** function i2_startTimer *****************
 15100 ;; Defined at:
 15101 ;;		line 77 in file "timer.c"
 15102 ;; Parameters:    Size  Location     Type
 15103 ;;  timer           2    6[COMRAM] int 
 15104 ;;  val             4    8[COMRAM] long 
 15105 ;; Auto vars:     Size  Location     Type
 15106 ;;		None
 15107 ;; Return value:  Size  Location     Type
 15108 ;;                  1    wreg      void 
 15109 ;; Registers used:
 15110 ;;		wreg, status,2, status,0
 15111 ;; Tracked objects:
 15112 ;;		On entry : 0/0
 15113 ;;		On exit  : 0/0
 15114 ;;		Unchanged: 0/0
 15115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15116 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15118 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15119 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15120 ;;Total ram usage:        8 bytes
 15121 ;; Hardware stack levels used:    1
 15122 ;; This function calls:
 15123 ;;		Nothing
 15124 ;; This function is called by:
 15125 ;;		_service
 15126 ;;		_servoInterruptService
 15127 ;; This function uses a non-reentrant model
 15128 ;;
 15129                           
 15130                           	psect	text66
 15131  003D7C                     __ptext66:
 15132                           	opt stack 0
 15133  003D7C                     i2_startTimer:
 15134                           	opt stack 22
 15135                           
 15136                           ;timer.c: 78: switch(timer){
 15137                           
 15138                           ;incstack = 0
 15139  003D7C  D012               	goto	i2l5363
 15140  003D7E                     i2l462:
 15141                           
 15142                           ;timer.c: 80: TMR0H = val>>8;
 15143  003D7E  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 15144                           
 15145                           ;timer.c: 81: TMR0L = val;
 15146  003D82  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 15147                           
 15148                           ;timer.c: 82: T0CON |= 1<<7;
 15149  003D86  8ED5               	bsf	4053,7,c	;volatile
 15150                           
 15151                           ;timer.c: 83: break;
 15152  003D88  0012               	return	
 15153  003D8A                     i2l464:
 15154                           
 15155                           ;timer.c: 85: TMR1H = val>>8;
 15156  003D8A  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 15157                           
 15158                           ;timer.c: 86: TMR1L = val;
 15159  003D8E  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 15160                           
 15161                           ;timer.c: 87: T1CON |= 1<<0;
 15162  003D92  80CD               	bsf	4045,0,c	;volatile
 15163                           
 15164                           ;timer.c: 88: break;
 15165  003D94  0012               	return	
 15166  003D96                     i2l465:
 15167                           
 15168                           ;timer.c: 90: TMR3H = val>>8;
 15169  003D96  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 15170                           
 15171                           ;timer.c: 91: TMR3L = val;
 15172  003D9A  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 15173                           
 15174                           ;timer.c: 92: T3CON |= 1<<0;
 15175  003D9E  80B1               	bsf	4017,0,c	;volatile
 15176                           
 15177                           ;timer.c: 93: }
 15178  003DA0  0012               	return	
 15179  003DA2                     i2l5363:
 15180  003DA2  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 15181  003DA6  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 15182                           
 15183                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15184                           ; Switch size 1, requested type "space"
 15185                           ; Number of cases is 1, Range of values is 0 to 0
 15186                           ; switch strategies available:
 15187                           ; Name         Instructions Cycles
 15188                           ; simple_byte            4     3 (average)
 15189                           ;	Chosen strategy is simple_byte
 15190  003DAA  500E               	movf	??i2_startTimer+1,w,c
 15191  003DAC  0A00               	xorlw	0	; case 0
 15192  003DAE  A4D8               	btfss	status,2,c
 15193  003DB0  0012               	return	
 15194                           
 15195                           ; Switch size 1, requested type "space"
 15196                           ; Number of cases is 3, Range of values is 0 to 3
 15197                           ; switch strategies available:
 15198                           ; Name         Instructions Cycles
 15199                           ; simple_byte           10     6 (average)
 15200                           ;	Chosen strategy is simple_byte
 15201  003DB2  500D               	movf	??i2_startTimer,w,c
 15202  003DB4  0A00               	xorlw	0	; case 0
 15203  003DB6  B4D8               	btfsc	status,2,c
 15204  003DB8  D7E2               	goto	i2l462
 15205  003DBA  0A01               	xorlw	1	; case 1
 15206  003DBC  B4D8               	btfsc	status,2,c
 15207  003DBE  D7E5               	goto	i2l464
 15208  003DC0  0A02               	xorlw	2	; case 3
 15209  003DC2  A4D8               	btfss	status,2,c
 15210  003DC4  0012               	return	
 15211  003DC6  D7E7               	goto	i2l465
 15212  003DC8                     __end_ofi2_startTimer:
 15213                           	opt stack 0
 15214                           pclatu	equ	0xFFB
 15215                           pclath	equ	0xFFA
 15216                           tblptru	equ	0xFF8
 15217                           tblptrh	equ	0xFF7
 15218                           tblptrl	equ	0xFF6
 15219                           tablat	equ	0xFF5
 15220                           prodh	equ	0xFF4
 15221                           prodl	equ	0xFF3
 15222                           intcon	equ	0xFF2
 15223                           intcon3	equ	0xFF0
 15224                           postinc0	equ	0xFEE
 15225                           fsr0h	equ	0xFEA
 15226                           fsr0l	equ	0xFE9
 15227                           wreg	equ	0xFE8
 15228                           postdec1	equ	0xFE5
 15229                           fsr1h	equ	0xFE2
 15230                           fsr1l	equ	0xFE1
 15231                           indf2	equ	0xFDF
 15232                           postinc2	equ	0xFDE
 15233                           postdec2	equ	0xFDD
 15234                           fsr2h	equ	0xFDA
 15235                           fsr2l	equ	0xFD9
 15236                           status	equ	0xFD8
 15237                           
 15238 ;; *************** function i2_digitalWrite *****************
 15239 ;; Defined at:
 15240 ;;		line 53 in file "iopin.c"
 15241 ;; Parameters:    Size  Location     Type
 15242 ;;  pin             2    6[COMRAM] PTR int 
 15243 ;;		 -> AA_float(4), cylinderMotor2(4), redirectingServo(4), padServo(4), 
 15244 ;;		 -> conveyorServo(4), cylinderMotor1(4), 
 15245 ;;  val             2    8[COMRAM] int 
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;  digitalWrite    2   13[COMRAM] int 
 15248 ;; Return value:  Size  Location     Type
 15249 ;;                  1    wreg      void 
 15250 ;; Registers used:
 15251 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15252 ;; Tracked objects:
 15253 ;;		On entry : 0/0
 15254 ;;		On exit  : 0/0
 15255 ;;		Unchanged: 0/0
 15256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15257 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15258 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15259 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15260 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;Total ram usage:        9 bytes
 15262 ;; Hardware stack levels used:    1
 15263 ;; This function calls:
 15264 ;;		Nothing
 15265 ;; This function is called by:
 15266 ;;		_servoInterruptService
 15267 ;; This function uses a non-reentrant model
 15268 ;;
 15269                           
 15270                           	psect	text67
 15271  0032AC                     __ptext67:
 15272                           	opt stack 0
 15273  0032AC                     i2_digitalWrite:
 15274                           	opt stack 21
 15275                           
 15276                           ;iopin.c: 54: if(pin){
 15277                           
 15278                           ;incstack = 0
 15279  0032AC  5007               	movf	i2digitalWrite@pin,w,c
 15280  0032AE  1008               	iorwf	i2digitalWrite@pin+1,w,c
 15281  0032B0  B4D8               	btfsc	status,2,c
 15282  0032B2  0012               	return	
 15283                           
 15284                           ;iopin.c: 55: int p = 1 << pin[1];
 15285  0032B4  EE20 F002          	lfsr	2,2
 15286  0032B8  5007               	movf	i2digitalWrite@pin,w,c
 15287  0032BA  26D9               	addwf	fsr2l,f,c
 15288  0032BC  5008               	movf	i2digitalWrite@pin+1,w,c
 15289  0032BE  22DA               	addwfc	fsr2h,f,c
 15290  0032C0  50DF               	movf	indf2,w,c
 15291  0032C2  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 15292  0032C4  0E01               	movlw	1
 15293  0032C6  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 15294  0032C8  0E00               	movlw	0
 15295  0032CA  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 15296  0032CC  2A0B               	incf	??i2_digitalWrite,f,c
 15297  0032CE  D003               	goto	i2u509_44
 15298  0032D0                     i2u509_45:
 15299  0032D0  90D8               	bcf	status,0,c
 15300  0032D2  360C               	rlcf	??i2_digitalWrite+1,f,c
 15301  0032D4  360D               	rlcf	??i2_digitalWrite+2,f,c
 15302  0032D6                     i2u509_44:
 15303  0032D6  2E0B               	decfsz	??i2_digitalWrite,f,c
 15304  0032D8  D7FB               	goto	i2u509_45
 15305  0032DA  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 15306  0032DE  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 15307                           
 15308                           ;iopin.c: 56: if(val == 0){
 15309  0032E2  5009               	movf	i2digitalWrite@val,w,c
 15310  0032E4  100A               	iorwf	i2digitalWrite@val+1,w,c
 15311  0032E6  A4D8               	btfss	status,2,c
 15312  0032E8  D02B               	goto	i2l5349
 15313                           
 15314                           ;iopin.c: 57: p ^= 0xff;
 15315  0032EA  0EFF               	movlw	255
 15316  0032EC  1A0E               	xorwf	i2digitalWrite@p,f,c
 15317                           
 15318                           ;iopin.c: 58: }
 15319                           ;iopin.c: 60: switch(pin[0]){
 15320  0032EE  D028               	goto	i2l5349
 15321  0032F0                     i2l5325:
 15322  0032F0  0409               	decf	i2digitalWrite@val,w,c
 15323  0032F2  100A               	iorwf	i2digitalWrite@val+1,w,c
 15324  0032F4  A4D8               	btfss	status,2,c
 15325  0032F6  D003               	goto	i2l5329
 15326  0032F8  500E               	movf	i2digitalWrite@p,w,c
 15327  0032FA  1289               	iorwf	3977,f,c	;volatile
 15328  0032FC  0012               	return	
 15329  0032FE                     i2l5329:
 15330                           
 15331                           ;iopin.c: 62: else LATA &= p;
 15332  0032FE  500E               	movf	i2digitalWrite@p,w,c
 15333  003300  1689               	andwf	3977,f,c	;volatile
 15334                           
 15335                           ;iopin.c: 63: break;
 15336  003302  0012               	return	
 15337  003304                     i2l5331:
 15338  003304  0409               	decf	i2digitalWrite@val,w,c
 15339  003306  100A               	iorwf	i2digitalWrite@val+1,w,c
 15340  003308  A4D8               	btfss	status,2,c
 15341  00330A  D003               	goto	i2l5335
 15342  00330C  500E               	movf	i2digitalWrite@p,w,c
 15343  00330E  128A               	iorwf	3978,f,c	;volatile
 15344  003310  0012               	return	
 15345  003312                     i2l5335:
 15346                           
 15347                           ;iopin.c: 65: else LATB &= p;
 15348  003312  500E               	movf	i2digitalWrite@p,w,c
 15349  003314  168A               	andwf	3978,f,c	;volatile
 15350                           
 15351                           ;iopin.c: 66: break;
 15352  003316  0012               	return	
 15353  003318                     i2l5337:
 15354  003318  0409               	decf	i2digitalWrite@val,w,c
 15355  00331A  100A               	iorwf	i2digitalWrite@val+1,w,c
 15356  00331C  A4D8               	btfss	status,2,c
 15357  00331E  D003               	goto	i2l5341
 15358  003320  500E               	movf	i2digitalWrite@p,w,c
 15359  003322  128B               	iorwf	3979,f,c	;volatile
 15360  003324  0012               	return	
 15361  003326                     i2l5341:
 15362                           
 15363                           ;iopin.c: 68: else LATC &= p;
 15364  003326  500E               	movf	i2digitalWrite@p,w,c
 15365  003328  168B               	andwf	3979,f,c	;volatile
 15366                           
 15367                           ;iopin.c: 69: break;
 15368  00332A  0012               	return	
 15369  00332C                     i2l5343:
 15370  00332C  0409               	decf	i2digitalWrite@val,w,c
 15371  00332E  100A               	iorwf	i2digitalWrite@val+1,w,c
 15372  003330  A4D8               	btfss	status,2,c
 15373  003332  D003               	goto	i2l5347
 15374  003334  500E               	movf	i2digitalWrite@p,w,c
 15375  003336  128C               	iorwf	3980,f,c	;volatile
 15376  003338  0012               	return	
 15377  00333A                     i2l5347:
 15378                           
 15379                           ;iopin.c: 71: else LATD &= p;
 15380  00333A  500E               	movf	i2digitalWrite@p,w,c
 15381  00333C  168C               	andwf	3980,f,c	;volatile
 15382                           
 15383                           ;iopin.c: 72: }
 15384  00333E  0012               	return	
 15385  003340                     i2l5349:
 15386  003340  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 15387  003344  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 15388  003348  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 15389  00334C  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 15390                           
 15391                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15392                           ; Switch size 1, requested type "space"
 15393                           ; Number of cases is 1, Range of values is 0 to 0
 15394                           ; switch strategies available:
 15395                           ; Name         Instructions Cycles
 15396                           ; simple_byte            4     3 (average)
 15397                           ;	Chosen strategy is simple_byte
 15398  003350  500C               	movf	??i2_digitalWrite+1,w,c
 15399  003352  0A00               	xorlw	0	; case 0
 15400  003354  A4D8               	btfss	status,2,c
 15401  003356  0012               	return	
 15402                           
 15403                           ; Switch size 1, requested type "space"
 15404                           ; Number of cases is 4, Range of values is 0 to 3
 15405                           ; switch strategies available:
 15406                           ; Name         Instructions Cycles
 15407                           ; simple_byte           13     7 (average)
 15408                           ;	Chosen strategy is simple_byte
 15409  003358  500B               	movf	??i2_digitalWrite,w,c
 15410  00335A  0A00               	xorlw	0	; case 0
 15411  00335C  B4D8               	btfsc	status,2,c
 15412  00335E  D7C8               	goto	i2l5325
 15413  003360  0A01               	xorlw	1	; case 1
 15414  003362  B4D8               	btfsc	status,2,c
 15415  003364  D7CF               	goto	i2l5331
 15416  003366  0A03               	xorlw	3	; case 2
 15417  003368  B4D8               	btfsc	status,2,c
 15418  00336A  D7D6               	goto	i2l5337
 15419  00336C  0A01               	xorlw	1	; case 3
 15420  00336E  A4D8               	btfss	status,2,c
 15421  003370  0012               	return	
 15422  003372  D7DC               	goto	i2l5343
 15423  003374                     __end_ofi2_digitalWrite:
 15424                           	opt stack 0
 15425                           pclatu	equ	0xFFB
 15426                           pclath	equ	0xFFA
 15427                           tblptru	equ	0xFF8
 15428                           tblptrh	equ	0xFF7
 15429                           tblptrl	equ	0xFF6
 15430                           tablat	equ	0xFF5
 15431                           prodh	equ	0xFF4
 15432                           prodl	equ	0xFF3
 15433                           intcon	equ	0xFF2
 15434                           intcon3	equ	0xFF0
 15435                           postinc0	equ	0xFEE
 15436                           fsr0h	equ	0xFEA
 15437                           fsr0l	equ	0xFE9
 15438                           wreg	equ	0xFE8
 15439                           postdec1	equ	0xFE5
 15440                           fsr1h	equ	0xFE2
 15441                           fsr1l	equ	0xFE1
 15442                           indf2	equ	0xFDF
 15443                           postinc2	equ	0xFDE
 15444                           postdec2	equ	0xFDD
 15445                           fsr2h	equ	0xFDA
 15446                           fsr2l	equ	0xFD9
 15447                           status	equ	0xFD8
 15448                           
 15449 ;; *************** function i2___awmod *****************
 15450 ;; Defined at:
 15451 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 15452 ;; Parameters:    Size  Location     Type
 15453 ;;  dividend        2    0[COMRAM] int 
 15454 ;;  divisor         2    2[COMRAM] int 
 15455 ;; Auto vars:     Size  Location     Type
 15456 ;;  __awmod         1    5[COMRAM] unsigned char 
 15457 ;;  __awmod         1    4[COMRAM] unsigned char 
 15458 ;; Return value:  Size  Location     Type
 15459 ;;                  2    0[COMRAM] int 
 15460 ;; Registers used:
 15461 ;;		wreg, status,2, status,0
 15462 ;; Tracked objects:
 15463 ;;		On entry : 0/0
 15464 ;;		On exit  : 0/0
 15465 ;;		Unchanged: 0/0
 15466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15467 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15468 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15470 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15471 ;;Total ram usage:        6 bytes
 15472 ;; Hardware stack levels used:    1
 15473 ;; This function calls:
 15474 ;;		Nothing
 15475 ;; This function is called by:
 15476 ;;		_servoInterruptService
 15477 ;; This function uses a non-reentrant model
 15478 ;;
 15479                           
 15480                           	psect	text68
 15481  00398C                     __ptext68:
 15482                           	opt stack 0
 15483  00398C                     i2___awmod:
 15484                           	opt stack 21
 15485                           
 15486                           ;incstack = 0
 15487  00398C  0E00               	movlw	0
 15488  00398E  6E06               	movwf	i2___awmod@sign,c
 15489  003990  AE02               	btfss	i2___awmod@dividend+1,7,c
 15490  003992  D006               	goto	i2l5377
 15491  003994  6C01               	negf	i2___awmod@dividend,c
 15492  003996  1E02               	comf	i2___awmod@dividend+1,f,c
 15493  003998  B0D8               	btfsc	status,0,c
 15494  00399A  2A02               	incf	i2___awmod@dividend+1,f,c
 15495  00399C  0E01               	movlw	1
 15496  00399E  6E06               	movwf	i2___awmod@sign,c
 15497  0039A0                     i2l5377:
 15498  0039A0  AE04               	btfss	i2___awmod@divisor+1,7,c
 15499  0039A2  D004               	goto	i2l5381
 15500  0039A4  6C03               	negf	i2___awmod@divisor,c
 15501  0039A6  1E04               	comf	i2___awmod@divisor+1,f,c
 15502  0039A8  B0D8               	btfsc	status,0,c
 15503  0039AA  2A04               	incf	i2___awmod@divisor+1,f,c
 15504  0039AC                     i2l5381:
 15505  0039AC  5003               	movf	i2___awmod@divisor,w,c
 15506  0039AE  1004               	iorwf	i2___awmod@divisor+1,w,c
 15507  0039B0  B4D8               	btfsc	status,2,c
 15508  0039B2  D018               	goto	i2l5397
 15509  0039B4  0E01               	movlw	1
 15510  0039B6  6E05               	movwf	i2___awmod@counter,c
 15511  0039B8  D004               	goto	i2l5387
 15512  0039BA                     i2l5385:
 15513  0039BA  90D8               	bcf	status,0,c
 15514  0039BC  3603               	rlcf	i2___awmod@divisor,f,c
 15515  0039BE  3604               	rlcf	i2___awmod@divisor+1,f,c
 15516  0039C0  2A05               	incf	i2___awmod@counter,f,c
 15517  0039C2                     i2l5387:
 15518  0039C2  AE04               	btfss	i2___awmod@divisor+1,7,c
 15519  0039C4  D7FA               	goto	i2l5385
 15520  0039C6                     i2l5389:
 15521  0039C6  5003               	movf	i2___awmod@divisor,w,c
 15522  0039C8  5C01               	subwf	i2___awmod@dividend,w,c
 15523  0039CA  5004               	movf	i2___awmod@divisor+1,w,c
 15524  0039CC  5802               	subwfb	i2___awmod@dividend+1,w,c
 15525  0039CE  A0D8               	btfss	status,0,c
 15526  0039D0  D004               	goto	i2l5393
 15527  0039D2  5003               	movf	i2___awmod@divisor,w,c
 15528  0039D4  5E01               	subwf	i2___awmod@dividend,f,c
 15529  0039D6  5004               	movf	i2___awmod@divisor+1,w,c
 15530  0039D8  5A02               	subwfb	i2___awmod@dividend+1,f,c
 15531  0039DA                     i2l5393:
 15532  0039DA  90D8               	bcf	status,0,c
 15533  0039DC  3204               	rrcf	i2___awmod@divisor+1,f,c
 15534  0039DE  3203               	rrcf	i2___awmod@divisor,f,c
 15535  0039E0  2E05               	decfsz	i2___awmod@counter,f,c
 15536  0039E2  D7F1               	goto	i2l5389
 15537  0039E4                     i2l5397:
 15538  0039E4  5006               	movf	i2___awmod@sign,w,c
 15539  0039E6  B4D8               	btfsc	status,2,c
 15540  0039E8  D004               	goto	i2l5401
 15541  0039EA  6C01               	negf	i2___awmod@dividend,c
 15542  0039EC  1E02               	comf	i2___awmod@dividend+1,f,c
 15543  0039EE  B0D8               	btfsc	status,0,c
 15544  0039F0  2A02               	incf	i2___awmod@dividend+1,f,c
 15545  0039F2                     i2l5401:
 15546  0039F2  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 15547  0039F6  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 15548  0039FA  0012               	return	
 15549  0039FC                     __end_ofi2___awmod:
 15550                           	opt stack 0
 15551                           pclatu	equ	0xFFB
 15552                           pclath	equ	0xFFA
 15553                           tblptru	equ	0xFF8
 15554                           tblptrh	equ	0xFF7
 15555                           tblptrl	equ	0xFF6
 15556                           tablat	equ	0xFF5
 15557                           prodh	equ	0xFF4
 15558                           prodl	equ	0xFF3
 15559                           intcon	equ	0xFF2
 15560                           intcon3	equ	0xFF0
 15561                           postinc0	equ	0xFEE
 15562                           fsr0h	equ	0xFEA
 15563                           fsr0l	equ	0xFE9
 15564                           wreg	equ	0xFE8
 15565                           postdec1	equ	0xFE5
 15566                           fsr1h	equ	0xFE2
 15567                           fsr1l	equ	0xFE1
 15568                           indf2	equ	0xFDF
 15569                           postinc2	equ	0xFDE
 15570                           postdec2	equ	0xFDD
 15571                           fsr2h	equ	0xFDA
 15572                           fsr2l	equ	0xFD9
 15573                           status	equ	0xFD8
 15574                           
 15575 ;; *************** function _keyPressedInterruptService *****************
 15576 ;; Defined at:
 15577 ;;		line 49 in file "keypad.c"
 15578 ;; Parameters:    Size  Location     Type
 15579 ;;		None
 15580 ;; Auto vars:     Size  Location     Type
 15581 ;;  key             1    0[COMRAM] unsigned char 
 15582 ;; Return value:  Size  Location     Type
 15583 ;;                  1    wreg      void 
 15584 ;; Registers used:
 15585 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 15586 ;; Tracked objects:
 15587 ;;		On entry : 0/0
 15588 ;;		On exit  : 0/0
 15589 ;;		Unchanged: 0/0
 15590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15595 ;;Total ram usage:        1 bytes
 15596 ;; Hardware stack levels used:    1
 15597 ;; This function calls:
 15598 ;;		Nothing
 15599 ;; This function is called by:
 15600 ;;		_service
 15601 ;; This function uses a non-reentrant model
 15602 ;;
 15603                           
 15604                           	psect	text69
 15605  004038                     __ptext69:
 15606                           	opt stack 0
 15607  004038                     _keyPressedInterruptService:
 15608                           	opt stack 22
 15609                           
 15610                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 15611                           
 15612                           ;incstack = 0
 15613  004038  3881               	swapf	3969,w,c	;volatile
 15614  00403A  0B0F               	andlw	15
 15615  00403C  0B0F               	andlw	15
 15616  00403E  6E01               	movwf	keyPressedInterruptService@key,c
 15617                           
 15618                           ;keypad.c: 51: lastKey = keys[key];
 15619  004040  5001               	movf	keyPressedInterruptService@key,w,c
 15620  004042  0D01               	mullw	1
 15621  004044  0E75               	movlw	low _keys
 15622  004046  24F3               	addwf	prodl,w,c
 15623  004048  6EF6               	movwf	tblptrl,c
 15624  00404A  0EFE               	movlw	high _keys
 15625  00404C  20F4               	addwfc	prodh,w,c
 15626  00404E  6EF7               	movwf	tblptrh,c
 15627  004050                     	if	0	;There are less than 3 active tblptr bytes
 15628  004050                     	endif
 15629  004050  0008               	tblrd		*
 15630  004052  CFF5 F05C          	movff	tablat,_lastKey
 15631  004056  0012               	return		;funcret
 15632  004058                     __end_of_keyPressedInterruptService:
 15633                           	opt stack 0
 15634                           pclatu	equ	0xFFB
 15635                           pclath	equ	0xFFA
 15636                           tblptru	equ	0xFF8
 15637                           tblptrh	equ	0xFF7
 15638                           tblptrl	equ	0xFF6
 15639                           tablat	equ	0xFF5
 15640                           prodh	equ	0xFF4
 15641                           prodl	equ	0xFF3
 15642                           intcon	equ	0xFF2
 15643                           intcon3	equ	0xFF0
 15644                           postinc0	equ	0xFEE
 15645                           fsr0h	equ	0xFEA
 15646                           fsr0l	equ	0xFE9
 15647                           wreg	equ	0xFE8
 15648                           postdec1	equ	0xFE5
 15649                           fsr1h	equ	0xFE2
 15650                           fsr1l	equ	0xFE1
 15651                           indf2	equ	0xFDF
 15652                           postinc2	equ	0xFDE
 15653                           postdec2	equ	0xFDD
 15654                           fsr2h	equ	0xFDA
 15655                           fsr2l	equ	0xFD9
 15656                           status	equ	0xFD8
 15657                           pclatu	equ	0xFFB
 15658                           pclath	equ	0xFFA
 15659                           tblptru	equ	0xFF8
 15660                           tblptrh	equ	0xFF7
 15661                           tblptrl	equ	0xFF6
 15662                           tablat	equ	0xFF5
 15663                           prodh	equ	0xFF4
 15664                           prodl	equ	0xFF3
 15665                           intcon	equ	0xFF2
 15666                           intcon3	equ	0xFF0
 15667                           postinc0	equ	0xFEE
 15668                           fsr0h	equ	0xFEA
 15669                           fsr0l	equ	0xFE9
 15670                           wreg	equ	0xFE8
 15671                           postdec1	equ	0xFE5
 15672                           fsr1h	equ	0xFE2
 15673                           fsr1l	equ	0xFE1
 15674                           indf2	equ	0xFDF
 15675                           postinc2	equ	0xFDE
 15676                           postdec2	equ	0xFDD
 15677                           fsr2h	equ	0xFDA
 15678                           fsr2l	equ	0xFD9
 15679                           status	equ	0xFD8
 15680                           
 15681                           	psect	rparam
 15682  0000                     pclatu	equ	0xFFB
 15683                           pclath	equ	0xFFA
 15684                           tblptru	equ	0xFF8
 15685                           tblptrh	equ	0xFF7
 15686                           tblptrl	equ	0xFF6
 15687                           tablat	equ	0xFF5
 15688                           prodh	equ	0xFF4
 15689                           prodl	equ	0xFF3
 15690                           intcon	equ	0xFF2
 15691                           intcon3	equ	0xFF0
 15692                           postinc0	equ	0xFEE
 15693                           fsr0h	equ	0xFEA
 15694                           fsr0l	equ	0xFE9
 15695                           wreg	equ	0xFE8
 15696                           postdec1	equ	0xFE5
 15697                           fsr1h	equ	0xFE2
 15698                           fsr1l	equ	0xFE1
 15699                           indf2	equ	0xFDF
 15700                           postinc2	equ	0xFDE
 15701                           postdec2	equ	0xFDD
 15702                           fsr2h	equ	0xFDA
 15703                           fsr2l	equ	0xFD9
 15704                           status	equ	0xFD8
 15705                           
 15706                           	psect	temp
 15707  00005D                     btemp:
 15708                           	opt stack 0
 15709  00005D                     	ds	1
 15710  0000                     int$flags	set	btemp
 15711                           pclatu	equ	0xFFB
 15712                           pclath	equ	0xFFA
 15713                           tblptru	equ	0xFF8
 15714                           tblptrh	equ	0xFF7
 15715                           tblptrl	equ	0xFF6
 15716                           tablat	equ	0xFF5
 15717                           prodh	equ	0xFF4
 15718                           prodl	equ	0xFF3
 15719                           intcon	equ	0xFF2
 15720                           intcon3	equ	0xFF0
 15721                           postinc0	equ	0xFEE
 15722                           fsr0h	equ	0xFEA
 15723                           fsr0l	equ	0xFE9
 15724                           wreg	equ	0xFE8
 15725                           postdec1	equ	0xFE5
 15726                           fsr1h	equ	0xFE2
 15727                           fsr1l	equ	0xFE1
 15728                           indf2	equ	0xFDF
 15729                           postinc2	equ	0xFDE
 15730                           postdec2	equ	0xFDD
 15731                           fsr2h	equ	0xFDA
 15732                           fsr2l	equ	0xFD9
 15733                           status	equ	0xFD8


Data Sizes:
    Strings     369
    Constant    174
    Data        63
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      92
    BANK0           128    123     127
    BANK1           256     68     138
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_22(CODE[17]), STR_21(CODE[11]), STR_20(CODE[19]), STR_19(CODE[18]), 
		 -> STR_18(CODE[17]), STR_17(CODE[24]), STR_16(CODE[17]), STR_15(CODE[19]), 
		 -> STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[23]), STR_9(CODE[20]), STR_8(CODE[8]), STR_7(CODE[11]), 
		 -> STR_6(CODE[11]), STR_5(CODE[11]), STR_4(CODE[16]), STR_3(CODE[23]), 
		 -> STR_2(CODE[8]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    showRunStats@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showRunTime@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showDateTime@t	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    showInterface@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    saveNewRun@data	PTR int  size(2) Largest target is 14
		 -> main@run(BANK1[14]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), cylinderMotor2(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor1(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), cylinderMotor1(BANK1[4]), 


Critical Paths under _main in COMRAM

    _main->___aldiv
    _sortBattery->___ftdiv
    _showRunTime->___aldiv
    ___aldiv->___almod
    _printf->___aldiv
    _lcdNewline->_lcdInst
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdHome->_lcdInst
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _readPastRun->_eepromRead
    _saveNewRun->_eepromRead
    _eepromWrite->_eepromRead
    _eepromRead->___wmul
    ___wmul->___awdiv
    _angleToPulse->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _sortBattery->_printf
    _showInterface->_showRunStats
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _showErrorMessage->_printf
    _showDateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _saveNewRun->_eepromWrite
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _showInterface->_showDateTime

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0  842455
                                             31 BANK1     37    37      0
                            ___aldiv
                            ___almod
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _saveNewRun
                           _setAngle
                      _showInterface
                       _showRunStats
                        _showRunTime
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  114932
                                            111 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    2518
                                             34 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     386
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        7     7      0  469712
                                            121 BANK0      2     2      0
                                             14 BANK1      5     5      0
                            _initRTC
                        _readPastRun
                       _showDateTime
                   _showErrorMessage
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (1) _showRunTime                                         16    14      2   68144
                                            111 BANK0      4     2      2
                                              0 BANK1     12    12      0
                            ___aldiv
                            ___almod
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8    1357
                                             34 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    1061
                                             44 COMRAM    14     6      8
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (1) _showRunStats                                        10     8      2   65726
                                            111 BANK0     10     8      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   65501
                                            111 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   65470
                                            111 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   65439
                                            111 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showErrorMessage                                     0     0      0   65312
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _showDateTime                                        16    16      0   68107
                                            111 BANK0      2     2      0
                                              0 BANK1     14    14      0
                            _getTime
                            _initRTC
                         _keyPressed
                           _lcdClear
                            _lcdHome
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              51    37     14   65083
                                             61 BANK0     50    36     14
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14293
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             38 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             34 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14014
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             40 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             34 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             34 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             42 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             47 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             34 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                             46 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _keyPressed                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _initRTC                                              0     0      0    1196
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Init                                      8     4      4    1196
                                             47 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _getTime                                             19    17      2    1011
                                             37 COMRAM    19    17      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     724
                                             35 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             35 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4433
                                              0 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (1) _saveNewRun                                           6     4      2    4813
                                              9 BANK0      6     4      2
                             ___wmul
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          9     3      6     435
                                              0 BANK0      9     3      6
                             ___wmul (ARG)
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     370
                                             54 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             48 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24171
                                             94 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                             34 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22613
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21152
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                             52 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3025
                                             42 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             42 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             38 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             36 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1472
                                             19 COMRAM    15    15      0
         _keyPressedInterruptService
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
     ___almod (ARG)
   ___almod
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
       ___almod (ARG)
     ___almod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _saveNewRun
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _eepromRead
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _eepromWrite
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _setAngle
     _angleToPulse
       ___altoft
         ___ftpack
         _analogRead (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _showInterface
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _showDateTime
       _getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _initRTC
         _I2C_Master_Init
           ___lldiv
       _keyPressed
       _lcdClear
         _lcdInst
           _lcdNibble
       _lcdHome
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _showErrorMessage
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       ___aldiv
         ___almod (ARG)
       ___almod
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _showRunStats
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _showRunTime
     ___aldiv
       ___almod (ARG)
     ___almod
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     44      8A       7       53.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7B      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     165      34        0.0%
DATA                 0      0     165       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 09 14:59:53 2017

                       ___altoft@exp 0033                        showRunTime@t1 0104  
                      showRunTime@t2 0106                                    _n 00FB  
                  main@cylinderStart 0132                        ___altoft@sign 0034  
                        _sortBattery 0E0A                       showRunSelect@k 00EF  
                       ___awdiv@sign 002E                  ___wmul@multiplicand 0033  
                        __CFG_BORV$3 000000                       showRunTime@run 00EF  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                        __CFG_OSC$HS 000000                     _redirectingServo 0166  
                       ___ftadd@exp1 00AD                         ___ftadd@exp2 00AC  
                       ___ftadd@sign 00AB                                  l401 3C3E  
                                l233 4004                                  l170 1806  
                                l404 3C7C                                  l342 2CC2  
                                l191 1234                                  l272 3F6A  
                                l184 117C                                  l188 11D8  
                                l517 40BE                                  l269 3F5E  
                                l462 3D32                                  l455 3E0C  
                                l367 3EA4                                  l464 3D3E  
                                l465 3D4A                                  l398 2E92  
                                l830 0818                      ??_showInterface 00F9  
                                l790 0996                                  l839 0A04  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _n_C 0184                         ___awmod@sign 0028  
                                prod 000FF3                                  wreg 000FE8  
                    showRunTime@time 0108                         __CFG_LVP$OFF 000000  
                       ___ftdiv@cntr 0083                         ___ftdiv@sign 0088  
                       __CFG_WDT$OFF 000000                                 l1126 3402  
                               l1223 3FE6                                 l1153 1CC0  
                               l1155 1CE8                                 l1164 1DBE  
                               l1173 1DE8                                 l1149 1C86  
                               l1094 28A0                                 l1191 26EA  
                               l1184 2A9E                                 l1192 2712  
                               l1273 3810                                 l1283 3A50  
                               l1198 2778                                 l5041 3DD4  
                               l5035 3DCA                                 l5053 3DE8  
                               l6101 1D20                                 l5047 3DE0  
                               l6031 3392                                 l6111 1D6A  
                               l6041 33EE                                 l6033 339C  
                               l6121 1DB2                                 l6113 1D76  
                               l6043 33F8                                 l6035 33BA  
                               l6027 3384                                 l6107 1D4E  
                               l5067 3D56                                 l6211 375E  
                               l6203 3740                                 l6109 1D5C  
                               l6221 377E                                 l6213 3762  
                               l7013 0B0E                                 l6039 33D0  
                               l6127 1E12                                 l6119 1DA4  
                               l7023 0B78                                 l7015 0B20  
                               l6137 1E60                                 l6153 22D2  
                               l7113 3858                                 l6209 3756  
                               l6225 3788                                 l6241 3930  
                               l6401 406E                                 l7041 0C26  
                               l6091 1CDE                                 l6171 233E  
                               l6147 2298                                 l7123 3886  
                               l6411 2684                                 l6251 3952  
                               l7043 0C30                                 l7035 0BE4  
                               l7019 0B48                                 l7203 34A6  
                               l6085 1CCE                                 l6181 237C  
                               l7117 3860                                 l6229 3796  
                               l6253 3956                                 l6261 3974  
                               l6245 393C                                 l7061 0C9E  
                               l7037 0BEE                                 l7029 0BAC  
                               l7301 2252                                 l6079 1C94  
                               l6167 2320                                 l6327 3FA4  
                               l6511 2876                                 l6351 209E  
                               l6343 1FD6                                 l7055 0C78  
                               l7311 356A                                 l7151 316E  
                               l7207 34BC                                 l7231 3250  
                               l7223 3236                                 l6177 235E  
                               l6417 26B0                                 l6265 3982  
                               l6257 396A                                 l6249 394A  
                               l7065 0CC6                                 l7073 0DBA  
                               l7057 0C84                                 l7049 0C5C  
                               l7153 317A                                 l7145 314C  
                               l7241 3272                                 l7225 323C  
                               l6531 38D2                                 l6275 37C2  
                               l6611 3668                                 l6507 2866  
                               l6451 274E                                 l6371 19F4  
                               l7067 0D46                                 l7075 0DCC  
                               l7403 3CDE                                 l7171 31D2  
                               l7163 31AE                                 l7155 317E  
                               l7139 3134                                 l7251 2BE0  
                               l7235 325E                                 l7219 3228  
                               l7243 3278                                 l7325 3580  
                               l6277 37CE                                 l6517 288E  
                               l6197 3730                                 l6365 194A  
                               l7077 0DD4                                 l7413 3AEC  
                               l7237 3264                                 l7229 324A  
                               l6543 29F4                                 l6631 254E  
                               l7335 35FA                                 l6287 3802  
                               l6279 37D2                                 l6607 3638  
                               l6519 289A                                 l6447 273E  
                               l6383 1B4E                                 l6375 1A1A  
                               l7079 0DEA                                 l7167 31BC  
                               l7191 3464                                 l7183 343E  
                               l7503 3102                                 l7263 2C64  
                               l7255 2C0C                                 l6529 38C6  
                               l7281 2FE2                                 l7521 2ECE  
                               l7329 3596                                 l6617 3694  
                               l6473 27C6                                 l6457 2766  
                               l6713 0022                                 l7425 3B26  
                               l7193 3470                                 l7515 2EA0  
                               l6467 27A8                                 l6459 2772  
                               l6723 0058                                 l7435 3F2C  
                               l7451 3B82                                 l7443 3B5C  
                               l7195 3474                                 l7187 3452  
                               l7259 2C38                                 l7603 11E6  
                               l6549 2A26                                 l6661 2620  
                               l6653 25F4                                 l7277 2F8C  
                               l7285 300A                                 l6389 1BF8  
                               l6901 06F4                                 l6717 0038  
                               l7365 28BC                                 l7269 2C90  
                               l7613 1242                                 l7605 1204  
                               l7701 1458                                 l6663 262A  
                               l7519 2EC8                                 l6495 2838  
                               l6487 2808                                 l6911 073E  
                               l6743 0124                                 l6719 004E  
                               l7199 3498                                 l7471 304E  
                               l7551 0EDE                                 l6569 2A74  
                               l6649 25E0                                 l6905 0702  
                               l6841 0494                                 l6833 0428  
                               l6825 03C0                                 l6809 0312  
                               l6753 0186                                 l6729 0088  
                               l6737 00FC                                 l7473 3052  
                               l7633 12FA                                 l7617 1260  
                               l7721 168A                                 l6667 2646  
                               l6659 2610                                 l7651 2E12  
                               l6587 3D06                                 l6683 3A42  
                               l6675 3A0E                                 l6691 3B9A  
                               l6923 07E6                                 l6907 0716  
                               l6843 04AA                                 l6771 01F2  
                               l6755 018C                                 l6747 0160  
                               l7387 29B6                                 l7395 3CB8  
                               l7627 12CA                                 l7619 1288  
                               l7715 1652                                 l6677 3A1A  
                               l6925 07FA                                 l6917 07CA  
                               l6853 051A                                 l6837 044E  
                               l6781 023E                                 l6773 01F8  
                               l6765 01C0                                 l6757 0192  
                               l6749 0176                                 l7565 0FB4  
                               l7725 1724                                 l6599 3EE4  
                               l7655 2E28                                 l6679 3A1E  
                               l6951 0988                                 l6935 0840  
                               l6919 07D8                                 l6863 0578  
                               l6839 0464                                 l6775 0210  
                               l6759 0198                                 l6791 026E  
                               l7495 30DE                                 l7583 112C  
                               l7575 109C                                 l7719 1682  
                               l6689 3B8E                                 l6945 096C  
                               l6929 081C                                 l6881 062A  
                               l6849 04F4                                 l6785 0256  
                               l6769 01E6                                 l6793 02B2  
                               l7489 30BA                                 l7593 118A  
                               l7577 10CA                                 l7729 173C  
                               l6947 097A                                 l6939 0892  
                               l6867 05DE                                 l6779 0224  
                               l7499 30F6                                 l7595 11A8  
                               l7739 1760                                 l7675 1382  
                               l6973 0A26                                 l6885 067A  
                               l6869 05E4                                 l7693 1428  
                               l6983 0A76                                 l6959 09BE  
                               l6895 06D0                                 l6799 02CC  
                               l6985 0A7C                                 l6977 0A4E  
                               l6889 06A2                                 l6899 06DE  
                               l6997 0AC2                                 l6999 0AC8  
                               _EEIF 007D0C                                 STR_1 FFE5  
                               STR_2 FFF6                                 STR_3 FEBC  
                               STR_4 FFA9                                 STR_5 FFCF  
                               STR_6 FFDA                                 STR_7 FFC4  
                               STR_8 FFEE                                 STR_9 FED3  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                         printf@tmpval 00DB  
                               u6120 3FA2                                 u7000 0810  
                               u6115 3C12                                 _PEIE 007F96  
                               u6231 2668                                 u6411 29D6  
                               u6251 2694                                 _RCEN 007E2B  
                               u6431 2A08                                 u6521 252A  
                               u6540 2574                                 u5911 22AE  
                               u8207 29A8                                 u5681 1C34  
                               u6545 256A                                 u8217 4008  
                               u8137 1568                                 u8227 3E18  
                               u5691 1C52                                 u8147 0E5A  
                               u8237 3E4C                                 u8157 0F10  
                               u8247 401C                                 u8167 102E  
                               u8257 402E                                 u8177 12B2  
                               u7554 2BFC                                 u8267 3A7A  
                               u5891 2274                                 u7555 2BF8  
                               u8187 12EA                                 u6780 0358  
                               u7564 2C28                                 u8277 3A88  
                               u7565 2C24                                 u8197 1324  
                               u7670 3C4E                                 u7574 2C54  
                               u7494 320E                                 u8287 3AAE  
                               u7575 2C50                                 u7495 3208  
                               u7584 2C80                                 u8297 3ABC  
                               u6785 034C                                 u7585 2C7C  
                               u7678 3C52                                 u7695 3C90  
                               u7696 3C92                                 _RSEN 007E29  
                    showRunStats@n_C 00F5                                 _n_AA 0182  
                               _n_9V 0180                      showRunStats@run 00EF  
                               _main 137A                                 _curr 0058  
                       ___ftpack@arg 0023                                 _keys FE75  
                       ___ftpack@exp 0026                                 _time 017A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 005D  
                    ??_showRunSelect 003B                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
                      __CFG_IESO$OFF 000000                        __CFG_MCLRE$ON 000000  
                       ___ftmul@cntr 0096                         ___param_bank 000000  
                       ___ftmul@sign 0097                         ___fttol@exp1 00BC  
                       ___fttol@lval 00B8                 __end_ofi2_startTimer 3DC8  
                   ?_I2C_Master_Init 0030                     ?_I2C_Master_Read 0001  
                   ?_I2C_Master_Wait 0001                     ?_I2C_Master_Stop 0001  
                       ?_readPastRun 0080                 __end_of_angleToPulse 2514  
                    __end_of___aldiv 31E4                      __end_of___almod 34CE  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___awdiv 37A0  
                              _EEADR 000FA9                      __end_of___ftadd 1E86  
                              STR_10 FEA5                                STR_11 FF0D  
                              STR_12 FF76                                STR_20 FEFA  
                              STR_21 FFB9                                STR_13 FF1F  
                              STR_22 FF98                                STR_14 FF65  
                              STR_23 FF43                                STR_15 FEE7  
                              STR_16 FF87                                STR_17 FE8D  
                              STR_18 FF54                                STR_19 FF31  
                    __end_of___awmod 398C                      __end_of___ftdiv 2AD2  
            ??_servoInterruptService 0010                      __end_of___ftneg 3FF4  
                    __end_of___lldiv 3822                      __end_of___ftmul 23BC  
                              _T0CON 000FD5                      ___awdiv@divisor 002B  
                              _T1CON 000FCD                      __end_of___llmod 3A62  
                    __end_of___ftsub 3D30                      __end_of___fttol 2658  
                              _T3CON 000FB1                                i2l205 2D76  
                              i2l206 2D3E                                i2l207 2D50  
                              i2l462 3D7E                                i2l464 3D8A  
                              i2l465 3D96                      ___awdiv@counter 002D  
                              _TMR0H 000FD7                                _TMR1H 000FCF  
                              _TMR0L 000FD6                                _TMR3H 000FB3  
                              _TMR1L 000FCE                                _TMR3L 000FB2  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _PORTD 000F83  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                         main@duration 0142  
                      __CFG_PWRT$OFF 000000                      _cylinderForward 0146  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                    __end_of_lcdHome 40F6                         ___lltoft@exp 0033  
                      _conveyorServo 014E                      __end_of_lcdInst 4038  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                    __end_of_getTime 38A4                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   showRunStats@n_AA 00F1                     showRunStats@n_9V 00F3  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      __end_of_initLCD 3E58  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 002E  
                              _angle 0044                      __end_of_initRTC 40BE  
                    __end_of_dpowers FE07                                _count 0056  
                              _scale 1808                      __end_of_isdigit 4076  
                     eepromWrite@ien 0087                        ___ftpack@sign 0027  
                  ?_showErrorMessage 0001                                _pulse 016A  
                              _putch 3FF4                                pclath 000FFA  
                              tablat 000FF5                      __end_of_service 2DB2  
                 ??_showErrorMessage 003B                                status 000FD8  
                 __size_ofi2___awmod 0070                       __CFG_PBADEN$ON 000000  
               __end_of_digitalWrite 32AC                      __initialization 3698  
                       __end_of_main 1808                         __end_of_keys FE86  
                             ??_main 011F                        ___fttol@sign1 00B7  
                      __activetblptr 000002                 __size_of_digitalRead 00EA  
                   _cylinderBackward 0144                 __size_of__tdiv_to_l_ 0132  
                       _stoppingTime 014C                    ?_I2C_Master_Start 0001  
                    i2digitalWrite@p 000E                    ?_I2C_Master_Write 0024  
                 ??_I2C_Master_Start 0024                               _ADCON0 000FC2  
                             _ADCON1 000FC1                   ??_I2C_Master_Write 0026  
                             _ADCON2 000FC0                     __end_of___altoft 391C  
                   ___llmod@dividend 0030                               ?_scale 0098  
                             _ADRESH 000FC4                               _EEADRH 000FAA  
                             _ADRESL 000FC3                               _EEDATA 000FA8  
                             _EECON1 000FA6                               _EECON2 000FA7  
      keyPressedInterruptService@key 0001                     ___awdiv@dividend 0029  
                   __end_of___awtoft 3F08                               ?_putch 0001  
                   __end_of___ftpack 3422                     __end_of___lltoft 3BE4  
                             _INT0IE 007F94                               _INT0IF 007F91  
                             _INT1IE 007F83                               _INT1IF 007F80  
                       sortBattery@V 0116                         sortBattery@i 0119  
                             i2l5401 39F2                               i2l5331 3304  
                             i2l5341 3326                               i2l5325 32F0  
                             i2l5343 332C                               i2l5335 3312  
                             i2l5337 3318                               i2l5329 32FE  
                             i2l5347 333A                               i2l5363 3DA2  
                             i2l5381 39AC                               i2l5349 3340  
                             i2l5393 39DA                               i2l5385 39BA  
                             i2l5377 39A0                               i2l5641 2BDA  
                             i2l5387 39C2                               i2l5389 39C6  
                             i2l5397 39E4                               _TMR0IE 007F95  
                             _TMR0IF 007F92                               _TMR1IE 007CE8  
                             _TMR1IF 007CF0                               _TMR3IE 007D01  
                             _SSPADD 000FC8                               _TRISC3 007CA3  
                             _TRISC4 007CA4                               _SSPBUF 000FC9  
                   __end_of_lcdClear 40FE                    _angleToPulse$1418 00CD  
                     __CFG_XINST$OFF 000000                 __size_of_eepromWrite 0056  
                   __end_of__powers_ FE55                               ___ftge 3608  
                          ??___aldiv 0035                            ??___almod 002B  
                             ___wmul 3FAA                            ??___awdiv 002D  
                          ??___ftadd 00A8                       __CFG_STVREN$ON 000000  
                          ??___awmod 0027                            ??___ftdiv 0080  
                          ??___ftneg 0026                            ??___lldiv 002B  
                          ??___ftmul 008F                            ??___llmod 0038  
                          ??___ftsub 003B                            ??___fttol 00B2  
                             _fround 1E86                               clear_0 36F6  
                             clear_1 3708                      eepromWrite@data 0080  
                   ___awdiv@quotient 002F                      ___awmod@divisor 0025  
                          ??_lcdHome 0027                      ___awmod@counter 0027  
                             _servos 0172                            ??_lcdInst 0025  
                             _printf 0012                            ??_getTime 0028  
                   __end_of_pinSetup 3E98                     __end_of_setAngle 304A  
                  analogRead@channel 0023                ___ftmul@f3_as_product 0093  
                          ??_initLCD 0027                            ??_initRTC 0038  
                       __pdataCOMRAM 003B                            ??_isdigit 0023  
                    readPastRun@data 0082                    __end_ofi2___awmod 39FC  
                      setAngle@angle 00D6                         __mediumconst FDDE  
                       ?_showRunMenu 0001                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                       ?_showRunTime 00EF                        setAngle@motor 00D4  
                          ??_service 0014                       i2___awmod@sign 0006  
                         __accesstop 0080              __end_of__initialization 370E  
                         ___altoft@c 002B                           ___ftadd@f1 00A2  
                         ___ftadd@f2 00A5                           ___ftge@ff1 002F  
                         ___ftge@ff2 0032                        ___rparam_used 000001  
                         ___ftdiv@f1 0035                           ___ftdiv@f2 0038  
                         ___ftdiv@f3 0084                           ___ftneg@f1 0023  
                         ___awtoft@c 002B                __size_ofi2_startTimer 004C  
                         ___ftmul@f1 0089                           ___ftmul@f2 008C  
                         ___ftsub@f1 00AE                           ___ftsub@f2 00B1  
                         ___fttol@f1 00AE                 __end_of_happynewyear FE8D  
                     __pcstackCOMRAM 0001                __size_of_angleToPulse 0158  
                       __pidataBANK0 410E                         __pidataBANK1 3F38  
                         ___lltoft@c 002B                        __end_of_scale 1C1E  
                       ?_sortBattery 0001                        __end_of_putch 4016  
                 __size_of_lcdNibble 0066                           __div_to_l_ 278A  
                  eepromRead@address 0037                 __size_of_readPastRun 0092  
                    showDateTime@day 0106                      showDateTime@min 0102  
                    showDateTime@sec 0100                      showDateTime@mon 0108  
                    __div_to_l_@exp1 002E                      __div_to_l_@cntr 002D  
                            ??_scale 003B                      __div_to_l_@quot 0029  
                            ??_putch 0027                         i2_startTimer 3D7C  
                         __pbssBANK0 00FB                           __pbssBANK1 016A  
                       _angleToPulse 23BC                __size_of_digitalWrite 00C8  
                 __size_of_initTimer 004A                   __size_of_initServo 00E2  
                         _analogRead 3E98                        __div_to_l_@f1 0023  
                      __div_to_l_@f2 0026                              ?___ftge 002F  
                            ?___wmul 0031                     _sortBattery$1417 0100  
              sortBattery@resolution 010C                          saveNewRun@i 008D  
                          ?___altoft 002B                          saveNewRun@n 008B  
                            ?_fround 0098                           _lcdNewline 40E6  
                          ?___awtoft 002B                            ?___ftpack 0023  
                            ?_printf 00BD                            ?___lltoft 002B  
                         _eepromRead 4076       __size_of_servoInterruptService 010C  
      __end_of_servoInterruptService 2BDE                __end_of_showInterface 3118  
                  i2startTimer@timer 0007                            ?_lcdClear 0001  
                   angleToPulse@a000 00D0                     angleToPulse@a180 00C9  
                       _digitalWrite 31E4                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
            __size_ofi2_digitalWrite 00C8                              _V_LIM_C 0041  
                main@lastBatteryTime 0130                            ?_pinSetup 0001  
                          ?_setAngle 00D4                    __end_of_lcdNibble 3AC8  
                  __end_of__npowers_ FE2E                              __Hparam 0000  
                         _scale$1422 009B                __end_of_showRunSelect 3B2C  
                         _keyPressed 40D0                              __Lparam 0000  
                       readPastRun@i 0090                              ___aldiv 3118  
          __size_of_showErrorMessage 0030                              ___almod 3422  
                    __size_of___ftge 0090                              ___awdiv 371C  
                            ___ftadd 1C1E                              ___awmod 391C  
                         _readKeypad 3F5E                              ___ftdiv 29C2  
                            ___ftneg 3FD0                              ___lldiv 37A0  
                    __size_of___wmul 0026                              ___ftmul 225E  
                            ___llmod 39FC                              ___ftsub 3CE4  
                            ___fttol 2514                              _n_OTHER 0186  
                         ??___altoft 002F                              __pcinit 3698  
                         ??___awtoft 002E                           ??___ftpack 0028  
                    __size_of_fround 0260                              __ramtop 1000  
                            _lcdHome 40EE                              _lcdInst 4016  
                         ??___lltoft 002F                              __ptext0 137A  
                            __ptext1 0E0A                              __ptext2 31E4  
                            __ptext3 2BDE                              _getTime 3822  
                            __ptext4 3E98                              __ptext5 304A  
                            __ptext6 20E6                              __ptext7 3422  
                            __ptext8 3118                              __ptext9 34CE  
                      ?_showDateTime 0001                      __size_of_printf 0DF8  
                            _padPin1 015A                              _padPin2 015E  
                            _padPin3 0052                        startTimer@val 0025  
                            _initLCD 3E12                    __end_of_hexpowers FE75  
                        ?__div_to_l_ 0023                              _lastKey 005C  
                            _initRTC 40A8                    __end_of_initTimer 3E12  
                  __end_of_initServo 2F76                              _dpowers FDDF  
                            _isdigit 4058                     ___awmod@dividend 0023  
                   ___aldiv@dividend 002D             __size_of_I2C_Master_Init 005A  
           __size_of_I2C_Master_Read 0026                           ??_lcdClear 0027  
           __size_of_I2C_Master_Wait 0012             __size_of_I2C_Master_Stop 0008  
                      ?_showMainMenu 0001                              _service 0008  
                            main@run 0134                 __size_of_showRunMenu 005C  
                     __pintcode_body 2CC8                 __size_of_showRunTime 0178  
               end_of_initialization 370E                           _saveNewRun 2DB2  
                      __Lmediumconst FDDE                              int_func 2CC8  
                     digitalRead@pin 0023                          ?_analogRead 0023  
                         ??_pinSetup 0023                           ??_setAngle 00D8  
          __size_of_I2C_Master_Start 0008            __size_of_I2C_Master_Write 000A  
                    ___lldiv@divisor 0027                      ___lldiv@counter 002F  
                     setAngle@period 00DA                        ?_showRunStats 00EF  
                            printf@c 00EE                              printf@f 00BD  
                   ___aldiv@quotient 0037                     I2C_Master_Init@c 0030  
                   I2C_Master_Read@a 0024                              postdec1 000FE5  
                            postdec2 000FDD                      _batteryDetected 017E  
                            postinc0 000FEE                              postinc2 000FDE  
                     __tdiv_to_l_@f1 0023                       __tdiv_to_l_@f2 0026  
                      ??_digitalRead 0025                          ?_lcdNewline 0001  
                      ??__tdiv_to_l_ 0029                       ??_showDateTime 00EF  
                          _PORTBbits 000F81                 __size_of_sortBattery 0570  
                   showInterface@key 0112                     showInterface@run 0110  
                        ?_eepromRead 0037                       ??_showMainMenu 003B  
       ??_keyPressedInterruptService 0001                  _redirectAngle_OTHER 00FD  
                       _happynewyear FE86                   angleToPulse@offset 00C5  
                 sortBattery@V_float 0102                            i2___awmod 398C  
                         _startTimer 3D30                        ??_eepromWrite 0086  
                        ___ftdiv@exp 0087                          printf@width 00E8  
                __size_of__div_to_l_ 0128                       ??_showRunStats 003B  
                        ?_keyPressed 0001                          ___ftmul@exp 0092  
                        ?_readKeypad 0001                       __end_of___ftge 3698  
                     __end_of___wmul 3FD0                        __pidataCOMRAM 4090  
__size_of_keyPressedInterruptService 0020                       _cylinderMotor1 0152  
                     _cylinderMotor2 0156                       __end_of_fround 20E6  
                     __end_of_printf 0E0A                  __size_of_analogRead 0038  
                start_initialization 3698                  __end_of_digitalRead 2CC8  
                __end_of__tdiv_to_l_ 278A                       initServo@angle 00E0  
                     initTimer@timer 0023                       initServo@motor 00DE  
                         ?i2___awmod 0001                          ?_saveNewRun 0089  
                     i2_digitalWrite 32AC                    ??_I2C_Master_Init 0034  
                  ??_I2C_Master_Read 0024                    ??_I2C_Master_Wait 0023  
                  ??_I2C_Master_Stop 0024                  __size_of_lcdNewline 0008  
                    ___llmod@divisor 0034                      ___llmod@counter 0038  
                __size_of_eepromRead 001A                           initServo@i 00E6  
                   showDateTime@hour 0104                     showDateTime@year 010A  
                           ??___ftge 0035                     _showErrorMessage 3F08  
                __end_of_eepromWrite 3C94                             ??___wmul 0035  
                        __pdataBANK0 00FD                          __pdataBANK1 0144  
                   __CFG_LPT1OSC$OFF 000000                             ??_fround 003B  
                      ??_readPastRun 003B                       readPastRun@run 0080  
                           ??_printf 00CB                    __size_of___altoft 0078  
                         fround@prec 00A1                    __size_of___awtoft 0038  
                  __size_of___ftpack 00AE                    __size_of___lltoft 005C  
                        __pbssCOMRAM 0052                        __pcstackBANK0 0080  
                      __pcstackBANK1 0100                  __size_of_keyPressed 000C  
             __end_ofi2_digitalWrite 3374               sortBattery@targetAngle 0114  
                       _isdigit$1052 0024                        keyPressed@key 0023  
                        ?_startTimer 0023                    __size_of_lcdClear 0008  
                __size_of_readKeypad 0026                 __end_of_showDateTime 29C2  
                  i2digitalWrite@pin 0007                    i2digitalWrite@val 0009  
                   _I2C_Master_Start 4106                     _I2C_Master_Write 40DC  
                          _main$1416 012C                    __CFG_CCP2MX$PORTC 000000  
                  __size_of_pinSetup 0040                 __end_of_showMainMenu 3CE4  
                  __size_of_setAngle 00D4                            __pintcode 0008  
                      __pmediumconst FDDE                            _lcdNibble 3A62  
                           ?___aldiv 002D                             ?___almod 0023  
                           ?___awdiv 0029                             ?___ftadd 00A2  
                           ?___awmod 0023                             ?___ftdiv 0035  
                           ?___ftneg 0023                             ?___lldiv 0023  
                           ?___ftmul 0089                             ?___llmod 0030  
                           ?___ftsub 00AE                            __npowers_ FE07  
                           ?___fttol 00AE                          _digitalRead 2BDE  
                __size_of_saveNewRun 00E2                     ___almod@dividend 0023  
                           ?_lcdHome 0001                             ?_lcdInst 0001  
                        __tdiv_to_l_ 2658                             ?_getTime 0026  
                       ??__div_to_l_ 0029                             ?_initLCD 0001  
                           ?_initRTC 0001                      startTimer@timer 0023  
                           ?_isdigit 0001   __end_of_keyPressedInterruptService 4058  
         _keyPressedInterruptService 4038                  __end_of_readPastRun 3608  
               __end_of_showRunStats 3576                             ?_service 0001  
                          _hexpowers FE55                            _initTimer 3DC8  
                          _initServo 2E94                      ?i2_digitalWrite 0007  
              _servoInterruptService 2AD2                          ??i2___awmod 0005  
                     __size_of_scale 0416                       __size_of_putch 0022  
                           _AA_float 004E                   eepromWrite@address 0082  
                    ___aldiv@divisor 0031                      ___aldiv@counter 0035  
                     sortBattery@Vcc 0109                       ___wmul@product 0035  
                           _LATDbits 000F8C                         ??_analogRead 0027  
                        _eepromWrite 3C3E                   __end_of__div_to_l_ 28B2  
                           i2u509_44 32D6                             i2u509_45 32D0  
             __size_of_showInterface 00CE                     __CFG_WDTPS$32768 000000  
                         ?_lcdNibble 0001                       _padAngle_CLOSE 0046  
                          _terminate 0188                        digitalWrite@p 002A  
                         service@key 0022                         ??_lcdNewline 0027  
                __size_of_startTimer 004C                    angleToPulse@angle 00BD  
                  ___wmul@multiplier 0031                        lcdNibble@data 0024  
                       ??_eepromRead 003B                           printf@flag 00EA  
                      lcdNibble@temp 0023                           printf@fval 00E1  
                         printf@prec 00EC                        ??_showRunMenu 003B  
                      ??_showRunTime 00F1                   __end_of_analogRead 3ED0  
                           _V_LIM_AA 003E                             _V_LIM_9V 003B  
             __size_of_showRunSelect 0064                       saveNewRun@data 0089  
                         ?_initTimer 0023                           ?_initServo 00DE  
                  sortBattery@signal 0107             sortBattery@pos_v_counter 0105  
                I2C_Master_Read@temp 0025                            copy_data0 36AC  
                          copy_data1 36E4                   i2___awmod@dividend 0001  
                 __end_of_lcdNewline 40EE                        readKeypad@key 0023  
                           __Hrparam 0000                         ??_keyPressed 0023  
                           __Lrparam 0000                   __end_of_eepromRead 4090  
                 __CFG_BOREN$SBORDIS 000000                         ??_readKeypad 0023  
                showRunStats@n_OTHER 00F7                        ??_sortBattery 00EF  
                   __size_of___aldiv 00CC                     __size_of___almod 00AC  
                   __size_of___awdiv 0084                     __size_of___ftadd 0268  
                   __size_of___awmod 0070                     __size_of___ftdiv 0110  
                   __size_of___ftneg 0024                     __size_of___lldiv 0082  
                           ___altoft 38A4                     __size_of___ftmul 015E  
                   __size_of___llmod 0066                     __size_of___ftsub 004C  
                   __size_of___fttol 0144                             ___awtoft 3ED0  
                           ___ftpack 3374                          _readPastRun 3576  
                        _fround$1420 009E                          _fround$1421 009B  
                           ___lltoft 3B88                     __size_of_lcdHome 0008  
                   __size_of_lcdInst 0022                     __size_of_getTime 0082  
                      showDateTime@t 010C                            setAngle@i 00DC  
                    _I2C_Master_Init 3BE4                      _I2C_Master_Read 3F84  
                   __size_of_initLCD 0046                      _I2C_Master_Wait 40BE  
                   __size_of_initRTC 0016                      _I2C_Master_Stop 40FE  
                   __size_of_isdigit 001E               ?_servoInterruptService 0001  
                      _showInterface 304A                             _lcdClear 40F6  
                           __ptext10 3AC8                             __ptext11 3B2C  
                           __ptext20 4058                             __ptext12 3C94  
                           __ptext21 1E86                             __ptext13 3F08  
                           __ptext30 3608                             __ptext22 391C  
                           __ptext14 3F5E                             __ptext31 40EE  
                           __ptext23 371C                             __ptext15 28B2  
                           __ptext40 4106                             __ptext32 40F6  
                           __ptext24 2658                             __ptext16 0012  
                           __ptext41 3F84                             __ptext33 40D0  
                           __ptext25 278A                             __ptext17 1808  
                           __ptext50 3D30                             __ptext42 40BE  
                           __ptext34 40A8                             __ptext26 3B88  
                           __ptext18 3FF4                             __ptext51 2F76  
                           __ptext43 3576                             __ptext35 3BE4  
                           __ptext27 39FC                             __ptext19 40E6  
                           __ptext60 3DC8                             __ptext52 23BC  
                           __ptext44 2DB2                             __ptext36 37A0  
                           __ptext28 3CE4                             __ptext61 3E12  
                           __ptext53 2514                             __ptext45 3C3E  
                           __ptext37 3822                             __ptext29 3FD0  
                           __ptext62 4016                             __ptext54 225E  
                           __ptext46 4076                             __ptext38 40DC  
                           __ptext63 3A62                             __ptext55 29C2  
                           __ptext47 3FAA                             __ptext39 40FE  
                           __ptext56 1C1E                             __ptext48 3E58  
                           __ptext65 2AD2                             __ptext57 3ED0  
                           __ptext49 2E94                             __ptext66 3D7C  
                           __ptext58 38A4                             __ptext67 32AC  
                           __ptext59 3374                             __ptext68 398C  
                           __ptext69 4038             __end_of_showErrorMessage 3F38  
                 __end_of_keyPressed 40DC                __size_of_showDateTime 0110  
                           __powers_ FE2E                     __size_of_service 2DAA  
                    i2startTimer@val 0009                      ___almod@divisor 0027  
                       ??_saveNewRun 003B                        ?i2_startTimer 0007  
                           _padServo 0162                      ___almod@counter 002B  
                __end_of_showRunMenu 3B88                   __end_of_readKeypad 3F84  
                __end_of_showRunTime 225E                        ?_angleToPulse 00BD  
                      __size_of_main 048E                __size_of_showMainMenu 0050  
                           _pinSetup 3E58                             _setAngle 2F76  
                      _showRunSelect 3AC8                             _prevTime 005A  
                   sortBattery@V_244 011C                          ??_lcdNibble 0023  
                           getTime@i 0038                       showInterface@n 010E  
                      _padAngle_OPEN 0048                             int$flags 005D  
                   sortBattery@i_249 0112                     sortBattery@V_max 010F  
                          printf@idx 00D4                            printf@len 00D7  
                          printf@exp 00DF                            printf@val 00E4  
                      showMainMenu@k 00EF                   __end_of_saveNewRun 2E94  
              __size_of_showRunStats 00A8                         _showDateTime 28B2  
                  i2___awmod@divisor 0003                            putch@data 0027  
                  i2___awmod@counter 0005             __end_of_I2C_Master_Start 410E  
                __end_of_sortBattery 137A             __end_of_I2C_Master_Write 40E6  
                         _INTCONbits 000FF2                       ?_showInterface 0001  
                      ?_digitalWrite 0023                          ??_initTimer 0025  
                        ??_initServo 00E2                             isdigit@c 0025  
                       _showMainMenu 3C94                             scale@scl 009E  
                     ??i2_startTimer 000D                         ??_startTimer 0029  
                           intlevel2 0000                     __tdiv_to_l_@exp1 0031  
                   __tdiv_to_l_@cntr 0030                       ??_angleToPulse 00C1  
                   __tdiv_to_l_@quot 002C                     ___lldiv@dividend 0023  
                   _showRunTime$1419 0100                       ?_showRunSelect 0001  
                       _showRunStats 34CE                     _redirectAngle_AA 014A  
                   _redirectAngle_9V 004A                             printf@ap 00D9  
                           printf@cp 00D5              __end_of_I2C_Master_Init 3C3E  
            __end_of_I2C_Master_Read 3FAA              __end_of_I2C_Master_Wait 40D0  
            __end_of_I2C_Master_Stop 4106                          lcdInst@data 0026  
                       ?_digitalRead 0023                         ?__tdiv_to_l_ 0023  
                 __end_of_startTimer 3D7C                          _printf$1423 00D1  
                   ??i2_digitalWrite 000B                     ___lldiv@quotient 002B  
                  I2C_Master_Write@d 0024                       ??_digitalWrite 0027  
        ?_keyPressedInterruptService 0001                         ___aldiv@sign 0036  
                        _showRunMenu 3B2C                          _showRunTime 20E6  
                    _redirectAngle_C 004C                          getTime@time 002A  
                   _padAngle_NEUTRAL 0148                      digitalWrite@pin 0023  
                    digitalWrite@val 0025                         ___almod@sign 002C  
                       ?_eepromWrite 0080                         showRunMenu@k 00F0  
                     showRunMenu@key 00EF  
