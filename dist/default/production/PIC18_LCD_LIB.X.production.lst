

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 27 16:34:43 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 1.40
    80                           ; Generated 01/12/2016 GMT
    81                           ; 
    82                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4620 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  0037C0                     __pidataCOMRAM:
   116                           	opt stack 0
   117                           
   118                           ;initializer for _V_LIM_9V
   119  0037C0  77                 	db	119
   120  0037C1  EE                 	db	238
   121  0037C2  3F                 	db	63
   122                           
   123                           ;initializer for _V_LIM_AA
   124  0037C3  C1                 	db	193
   125  0037C4  4A                 	db	74
   126  0037C5  3E                 	db	62
   127                           
   128                           ;initializer for _V_LIM_C
   129  0037C6  A7                 	db	167
   130  0037C7  A9                 	db	169
   131  0037C8  3F                 	db	63
   132                           
   133                           ;initializer for _angle
   134  0037C9  005A               	dw	90
   135                           
   136                           ;initializer for _padAngle_OPEN
   137  0037CB  00B4               	dw	180
   138                           
   139                           ;initializer for _period
   140  0037CD  797C               	dw	31100
   141                           
   142                           ;initializer for _AA_float
   143  0037CF  0002               	dw	2
   144  0037D1  0005               	dw	5
   145                           
   146                           	psect	idataBANK0
   147  0037D3                     __pidataBANK0:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _padAngle_CLOSE
   151  0037D3  001E               	dw	30
   152                           
   153                           ;initializer for _redirectAngle_9V
   154  0037D5  0076               	dw	118
   155                           
   156                           ;initializer for _redirectAngle_C
   157  0037D7  00A6               	dw	166
   158                           
   159                           ;initializer for _redirectAngle_OTHER
   160  0037D9  0099               	dw	153
   161                           
   162                           	psect	idataBANK1
   163  00373C                     __pidataBANK1:
   164                           	opt stack 0
   165                           
   166                           ;initializer for _padAngle_NEUTRAL
   167  00373C  004C               	dw	76
   168                           
   169                           ;initializer for _redirectAngle_AA
   170  00373E  008A               	dw	138
   171                           
   172                           ;initializer for _stoppingTime
   173  003740  0064               	dw	100
   174                           
   175                           ;initializer for _conveyorServo
   176  003742  0002               	dw	2
   177  003744  0002               	dw	2
   178                           
   179                           ;initializer for _cylinderDir
   180  003746  0003               	dw	3
   181  003748  0001               	dw	1
   182                           
   183                           ;initializer for _cylinderMotor
   184  00374A  0002               	dw	2
   185  00374C  0000               	dw	0
   186                           
   187                           ;initializer for _padPin1
   188  00374E  0002               	dw	2
   189  003750  0006               	dw	6
   190                           
   191                           ;initializer for _padPin2
   192  003752  0002               	dw	2
   193  003754  0007               	dw	7
   194                           
   195                           ;initializer for _padServo
   196  003756  0002               	dw	2
   197  003758  0001               	dw	1
   198                           
   199                           ;initializer for _redirectingServo
   200  00375A  0003               	dw	3
   201  00375C  0000               	dw	0
   202                           
   203                           	psect	mediumconst
   204  00FE1C                     __pmediumconst:
   205                           	opt stack 0
   206  00FE1C  00                 	db	0
   207  00FE1D                     _dpowers:
   208                           	opt stack 0
   209  00FE1D  0001               	dw	1
   210  00FE1F  0000               	dw	0
   211  00FE21  000A               	dw	10
   212  00FE23  0000               	dw	0
   213  00FE25  0064               	dw	100
   214  00FE27  0000               	dw	0
   215  00FE29  03E8               	dw	1000
   216  00FE2B  0000               	dw	0
   217  00FE2D  2710               	dw	10000
   218  00FE2F  0000               	dw	0
   219  00FE31  86A0               	dw	34464
   220  00FE33  0001               	dw	1
   221  00FE35  4240               	dw	16960
   222  00FE37  000F               	dw	15
   223  00FE39  9680               	dw	38528
   224  00FE3B  0098               	dw	152
   225  00FE3D  E100               	dw	57600
   226  00FE3F  05F5               	dw	1525
   227  00FE41  CA00               	dw	51712
   228  00FE43  3B9A               	dw	15258
   229  00FE45                     __end_of_dpowers:
   230                           	opt stack 0
   231  00FE45                     __npowers_:
   232                           	opt stack 0
   233  00FE45  00                 	db	0
   234  00FE46  80                 	db	128
   235  00FE47  3F                 	db	63
   236  00FE48  CD                 	db	205
   237  00FE49  CC                 	db	204
   238  00FE4A  3D                 	db	61
   239  00FE4B  D7                 	db	215
   240  00FE4C  23                 	db	35
   241  00FE4D  3C                 	db	60
   242  00FE4E  12                 	db	18
   243  00FE4F  83                 	db	131
   244  00FE50  3A                 	db	58
   245  00FE51  B7                 	db	183
   246  00FE52  D1                 	db	209
   247  00FE53  38                 	db	56
   248  00FE54  C6                 	db	198
   249  00FE55  27                 	db	39
   250  00FE56  37                 	db	55
   251  00FE57  38                 	db	56
   252  00FE58  86                 	db	134
   253  00FE59  35                 	db	53
   254  00FE5A  C0                 	db	192
   255  00FE5B  D6                 	db	214
   256  00FE5C  33                 	db	51
   257  00FE5D  CC                 	db	204
   258  00FE5E  2B                 	db	43
   259  00FE5F  32                 	db	50
   260  00FE60  70                 	db	112
   261  00FE61  89                 	db	137
   262  00FE62  30                 	db	48
   263  00FE63  E7                 	db	231
   264  00FE64  DB                 	db	219
   265  00FE65  2E                 	db	46
   266  00FE66  E5                 	db	229
   267  00FE67  3C                 	db	60
   268  00FE68  1E                 	db	30
   269  00FE69  42                 	db	66
   270  00FE6A  A2                 	db	162
   271  00FE6B  0D                 	db	13
   272  00FE6C                     __end_of__npowers_:
   273                           	opt stack 0
   274  00FE6C                     __powers_:
   275                           	opt stack 0
   276  00FE6C  00                 	db	0
   277  00FE6D  80                 	db	128
   278  00FE6E  3F                 	db	63
   279  00FE6F  00                 	db	0
   280  00FE70  20                 	db	32
   281  00FE71  41                 	db	65
   282  00FE72  00                 	db	0
   283  00FE73  C8                 	db	200
   284  00FE74  42                 	db	66
   285  00FE75  00                 	db	0
   286  00FE76  7A                 	db	122
   287  00FE77  44                 	db	68
   288  00FE78  40                 	db	64
   289  00FE79  1C                 	db	28
   290  00FE7A  46                 	db	70
   291  00FE7B  50                 	db	80
   292  00FE7C  C3                 	db	195
   293  00FE7D  47                 	db	71
   294  00FE7E  24                 	db	36
   295  00FE7F  74                 	db	116
   296  00FE80  49                 	db	73
   297  00FE81  97                 	db	151
   298  00FE82  18                 	db	24
   299  00FE83  4B                 	db	75
   300  00FE84  BC                 	db	188
   301  00FE85  BE                 	db	190
   302  00FE86  4C                 	db	76
   303  00FE87  6B                 	db	107
   304  00FE88  6E                 	db	110
   305  00FE89  4E                 	db	78
   306  00FE8A  03                 	db	3
   307  00FE8B  15                 	db	21
   308  00FE8C  50                 	db	80
   309  00FE8D  79                 	db	121
   310  00FE8E  AD                 	db	173
   311  00FE8F  60                 	db	96
   312  00FE90  F3                 	db	243
   313  00FE91  49                 	db	73
   314  00FE92  71                 	db	113
   315  00FE93                     __end_of__powers_:
   316                           	opt stack 0
   317  00FE93                     _hexpowers:
   318                           	opt stack 0
   319  00FE93  0001               	dw	1
   320  00FE95  0000               	dw	0
   321  00FE97  0010               	dw	16
   322  00FE99  0000               	dw	0
   323  00FE9B  0100               	dw	256
   324  00FE9D  0000               	dw	0
   325  00FE9F  1000               	dw	4096
   326  00FEA1  0000               	dw	0
   327  00FEA3  0000               	dw	0
   328  00FEA5  0001               	dw	1
   329  00FEA7  0000               	dw	0
   330  00FEA9  0010               	dw	16
   331  00FEAB  0000               	dw	0
   332  00FEAD  0100               	dw	256
   333  00FEAF  0000               	dw	0
   334  00FEB1  1000               	dw	4096
   335  00FEB3                     __end_of_hexpowers:
   336                           	opt stack 0
   337  00FEB3                     _keys:
   338                           	opt stack 0
   339  00FEB3  31                 	db	49
   340  00FEB4  32                 	db	50
   341  00FEB5  33                 	db	51
   342  00FEB6  41                 	db	65
   343  00FEB7  34                 	db	52
   344  00FEB8  35                 	db	53
   345  00FEB9  36                 	db	54
   346  00FEBA  42                 	db	66
   347  00FEBB  37                 	db	55
   348  00FEBC  38                 	db	56
   349  00FEBD  39                 	db	57
   350  00FEBE  43                 	db	67
   351  00FEBF  2A                 	db	42
   352  00FEC0  30                 	db	48
   353  00FEC1  23                 	db	35
   354  00FEC2  44                 	db	68
   355  00FEC3  00                 	db	0
   356  00FEC4                     __end_of_keys:
   357                           	opt stack 0
   358  00FEC4                     _happynewyear:
   359                           	opt stack 0
   360  00FEC4  00                 	db	0
   361  00FEC5  59                 	db	89
   362  00FEC6  03                 	db	3
   363  00FEC7  01                 	db	1
   364  00FEC8  13                 	db	19
   365  00FEC9  04                 	db	4
   366  00FECA  17                 	db	23
   367  00FECB                     __end_of_happynewyear:
   368                           	opt stack 0
   369  0000                     _ADCON0	set	4034
   370  0000                     _ADCON1	set	4033
   371  0000                     _ADCON2	set	4032
   372  0000                     _ADRESH	set	4036
   373  0000                     _ADRESL	set	4035
   374  0000                     _EEADR	set	4009
   375  0000                     _EEADRH	set	4010
   376  0000                     _EECON1	set	4006
   377  0000                     _EECON2	set	4007
   378  0000                     _EEDATA	set	4008
   379  0000                     _INTCONbits	set	4082
   380  0000                     _LATA	set	3977
   381  0000                     _LATB	set	3978
   382  0000                     _LATC	set	3979
   383  0000                     _LATD	set	3980
   384  0000                     _LATDbits	set	3980
   385  0000                     _LATE	set	3981
   386  0000                     _PORTA	set	3968
   387  0000                     _PORTB	set	3969
   388  0000                     _PORTBbits	set	3969
   389  0000                     _PORTC	set	3970
   390  0000                     _PORTD	set	3971
   391  0000                     _SSPADD	set	4040
   392  0000                     _SSPBUF	set	4041
   393  0000                     _SSPCON1	set	4038
   394  0000                     _SSPCON2	set	4037
   395  0000                     _SSPSTAT	set	4039
   396  0000                     _T0CON	set	4053
   397  0000                     _T1CON	set	4045
   398  0000                     _T3CON	set	4017
   399  0000                     _TMR0H	set	4055
   400  0000                     _TMR0L	set	4054
   401  0000                     _TMR1H	set	4047
   402  0000                     _TMR1L	set	4046
   403  0000                     _TMR3H	set	4019
   404  0000                     _TMR3L	set	4018
   405  0000                     _TRISA	set	3986
   406  0000                     _TRISB	set	3987
   407  0000                     _TRISC	set	3988
   408  0000                     _TRISD	set	3989
   409  0000                     _TRISE	set	3990
   410  0000                     _ACKDT	set	32301
   411  0000                     _ACKEN	set	32300
   412  0000                     _EEIF	set	32012
   413  0000                     _INT0IE	set	32660
   414  0000                     _PEIE	set	32662
   415  0000                     _PEN	set	32298
   416  0000                     _RCEN	set	32299
   417  0000                     _RSEN	set	32297
   418  0000                     _SEN	set	32296
   419  0000                     _TMR0IE	set	32661
   420  0000                     _TMR0IF	set	32658
   421  0000                     _TMR1IE	set	31976
   422  0000                     _TMR3IE	set	32001
   423  0000                     _TRISC3	set	31907
   424  0000                     _TRISC4	set	31908
   425  00FECB                     STR_13:
   426  00FECB  25                 	db	37
   427  00FECC  63                 	db	99	;'c'
   428  00FECD  29                 	db	41
   429  00FECE  20                 	db	32
   430  00FECF  74                 	db	116	;'t'
   431  00FED0  69                 	db	105	;'i'
   432  00FED1  6D                 	db	109	;'m'
   433  00FED2  65                 	db	101	;'e'
   434  00FED3  20                 	db	32
   435  00FED4  20                 	db	32
   436  00FED5  3C                 	db	60	;'<'
   437  00FED6  41                 	db	65	;'A'
   438  00FED7  20                 	db	32
   439  00FED8  20                 	db	32
   440  00FED9  20                 	db	32
   441  00FEDA  20                 	db	32
   442  00FEDB  20                 	db	32
   443  00FEDC  0A                 	db	10
   444  00FEDD  00                 	db	0
   445  00FEDE                     STR_9:
   446  00FEDE  73                 	db	115	;'s'
   447  00FEDF  74                 	db	116	;'t'
   448  00FEE0  61                 	db	97	;'a'
   449  00FEE1  72                 	db	114	;'r'
   450  00FEE2  74                 	db	116	;'t'
   451  00FEE3  20                 	db	32
   452  00FEE4  20                 	db	32
   453  00FEE5  20                 	db	32
   454  00FEE6  3C                 	db	60	;'<'
   455  00FEE7  42                 	db	66	;'B'
   456  00FEE8  20                 	db	32
   457  00FEE9  20                 	db	32
   458  00FEEA  20                 	db	32
   459  00FEEB  20                 	db	32
   460  00FEEC  20                 	db	32
   461  00FEED  20                 	db	32
   462  00FEEE  0A                 	db	10
   463  00FEEF  00                 	db	0
   464  00FEF0                     STR_7:
   465  00FEF0  20                 	db	32
   466  00FEF1  20                 	db	32
   467  00FEF2  68                 	db	104	;'h'
   468  00FEF3  68                 	db	104	;'h'
   469  00FEF4  3A                 	db	58	;':'
   470  00FEF5  6D                 	db	109	;'m'
   471  00FEF6  6D                 	db	109	;'m'
   472  00FEF7  3A                 	db	58	;':'
   473  00FEF8  73                 	db	115	;'s'
   474  00FEF9  73                 	db	115	;'s'
   475  00FEFA  20                 	db	32
   476  00FEFB  20                 	db	32
   477  00FEFC  20                 	db	32
   478  00FEFD  20                 	db	32
   479  00FEFE  20                 	db	32
   480  00FEFF  20                 	db	32
   481  00FF00  0A                 	db	10
   482  00FF01  00                 	db	0
   483  00FF02                     STR_11:
   484  00FF02  73                 	db	115	;'s'
   485  00FF03  65                 	db	101	;'e'
   486  00FF04  6C                 	db	108	;'l'
   487  00FF05  65                 	db	101	;'e'
   488  00FF06  63                 	db	99	;'c'
   489  00FF07  74                 	db	116	;'t'
   490  00FF08  20                 	db	32
   491  00FF09  72                 	db	114	;'r'
   492  00FF0A  75                 	db	117	;'u'
   493  00FF0B  6E                 	db	110	;'n'
   494  00FF0C  3A                 	db	58	;':'
   495  00FF0D  20                 	db	32
   496  00FF0E  20                 	db	32
   497  00FF0F  20                 	db	32
   498  00FF10  20                 	db	32
   499  00FF11  20                 	db	32
   500  00FF12  0A                 	db	10
   501  00FF13  00                 	db	0
   502  00FF14                     STR_15:
   503  00FF14  74                 	db	116	;'t'
   504  00FF15  69                 	db	105	;'i'
   505  00FF16  6D                 	db	109	;'m'
   506  00FF17  65                 	db	101	;'e'
   507  00FF18  3A                 	db	58	;':'
   508  00FF19  20                 	db	32
   509  00FF1A  6E                 	db	110	;'n'
   510  00FF1B  6E                 	db	110	;'n'
   511  00FF1C  6E                 	db	110	;'n'
   512  00FF1D  20                 	db	32
   513  00FF1E  73                 	db	115	;'s'
   514  00FF1F  65                 	db	101	;'e'
   515  00FF20  63                 	db	99	;'c'
   516  00FF21  20                 	db	32
   517  00FF22  20                 	db	32
   518  00FF23  20                 	db	32
   519  00FF24  0A                 	db	10
   520  00FF25  00                 	db	0
   521  00FF26                     STR_17:
   522  00FF26  5B                 	db	91	;'['
   523  00FF27  41                 	db	65	;'A'
   524  00FF28  41                 	db	65	;'A'
   525  00FF29  2C                 	db	44
   526  00FF2A  39                 	db	57	;'9'
   527  00FF2B  56                 	db	86	;'V'
   528  00FF2C  2C                 	db	44
   529  00FF2D  43                 	db	67	;'C'
   530  00FF2E  2C                 	db	44
   531  00FF2F  6F                 	db	111	;'o'
   532  00FF30  74                 	db	116	;'t'
   533  00FF31  68                 	db	104	;'h'
   534  00FF32  65                 	db	101	;'e'
   535  00FF33  72                 	db	114	;'r'
   536  00FF34  5D                 	db	93	;']'
   537  00FF35  20                 	db	32
   538  00FF36  0A                 	db	10
   539  00FF37  00                 	db	0
   540  00FF38                     STR_19:
   541  00FF38  30                 	db	48	;'0'
   542  00FF39  31                 	db	49	;'1'
   543  00FF3A  32                 	db	50	;'2'
   544  00FF3B  33                 	db	51	;'3'
   545  00FF3C  34                 	db	52	;'4'
   546  00FF3D  35                 	db	53	;'5'
   547  00FF3E  36                 	db	54	;'6'
   548  00FF3F  37                 	db	55	;'7'
   549  00FF40  38                 	db	56	;'8'
   550  00FF41  39                 	db	57	;'9'
   551  00FF42  61                 	db	97	;'a'
   552  00FF43  62                 	db	98	;'b'
   553  00FF44  63                 	db	99	;'c'
   554  00FF45  64                 	db	100	;'d'
   555  00FF46  65                 	db	101	;'e'
   556  00FF47  66                 	db	102	;'f'
   557  00FF48  00                 	db	0
   558  00FF49                     STR_16:
   559  00FF49  20                 	db	32
   560  00FF4A  20                 	db	32
   561  00FF4B  20                 	db	32
   562  00FF4C  20                 	db	32
   563  00FF4D  20                 	db	32
   564  00FF4E  20                 	db	32
   565  00FF4F  20                 	db	32
   566  00FF50  20                 	db	32
   567  00FF51  20                 	db	32
   568  00FF52  20                 	db	32
   569  00FF53  20                 	db	32
   570  00FF54  20                 	db	32
   571  00FF55  20                 	db	32
   572  00FF56  20                 	db	32
   573  00FF57  2A                 	db	42
   574  00FF58  3E                 	db	62	;'>'
   575  00FF59  00                 	db	0
   576  00FF5A                     STR_12:
   577  00FF5A  5B                 	db	91	;'['
   578  00FF5B  31                 	db	49	;'1'
   579  00FF5C  2C                 	db	44
   580  00FF5D  32                 	db	50	;'2'
   581  00FF5E  2C                 	db	44
   582  00FF5F  33                 	db	51	;'3'
   583  00FF60  2C                 	db	44
   584  00FF61  34                 	db	52	;'4'
   585  00FF62  5D                 	db	93	;']'
   586  00FF63  20                 	db	32
   587  00FF64  20                 	db	32
   588  00FF65  20                 	db	32
   589  00FF66  20                 	db	32
   590  00FF67  20                 	db	32
   591  00FF68  2A                 	db	42
   592  00FF69  3E                 	db	62	;'>'
   593  00FF6A  00                 	db	0
   594  00FF6B                     STR_10:
   595  00FF6B  68                 	db	104	;'h'
   596  00FF6C  69                 	db	105	;'i'
   597  00FF6D  73                 	db	115	;'s'
   598  00FF6E  74                 	db	116	;'t'
   599  00FF6F  6F                 	db	111	;'o'
   600  00FF70  72                 	db	114	;'r'
   601  00FF71  79                 	db	121	;'y'
   602  00FF72  20                 	db	32
   603  00FF73  3C                 	db	60	;'<'
   604  00FF74  43                 	db	67	;'C'
   605  00FF75  20                 	db	32
   606  00FF76  20                 	db	32
   607  00FF77  20                 	db	32
   608  00FF78  20                 	db	32
   609  00FF79  2A                 	db	42
   610  00FF7A  3E                 	db	62	;'>'
   611  00FF7B  00                 	db	0
   612  00FF7C                     STR_14:
   613  00FF7C  20                 	db	32
   614  00FF7D  20                 	db	32
   615  00FF7E  20                 	db	32
   616  00FF7F  73                 	db	115	;'s'
   617  00FF80  74                 	db	116	;'t'
   618  00FF81  61                 	db	97	;'a'
   619  00FF82  74                 	db	116	;'t'
   620  00FF83  73                 	db	115	;'s'
   621  00FF84  20                 	db	32
   622  00FF85  3C                 	db	60	;'<'
   623  00FF86  42                 	db	66	;'B'
   624  00FF87  20                 	db	32
   625  00FF88  20                 	db	32
   626  00FF89  20                 	db	32
   627  00FF8A  2A                 	db	42
   628  00FF8B  3E                 	db	62	;'>'
   629  00FF8C  00                 	db	0
   630  00FF8D                     STR_18:
   631  00FF8D  5B                 	db	91	;'['
   632  00FF8E  6E                 	db	110	;'n'
   633  00FF8F  6E                 	db	110	;'n'
   634  00FF90  2C                 	db	44
   635  00FF91  6E                 	db	110	;'n'
   636  00FF92  2C                 	db	44
   637  00FF93  6E                 	db	110	;'n'
   638  00FF94  2C                 	db	44
   639  00FF95  6E                 	db	110	;'n'
   640  00FF96  6E                 	db	110	;'n'
   641  00FF97  5D                 	db	93	;']'
   642  00FF98  20                 	db	32
   643  00FF99  20                 	db	32
   644  00FF9A  20                 	db	32
   645  00FF9B  2A                 	db	42
   646  00FF9C  3E                 	db	62	;'>'
   647  00FF9D  00                 	db	0
   648  00FF9E                     STR_8:
   649  00FF9E  20                 	db	32
   650  00FF9F  20                 	db	32
   651  00FFA0  6D                 	db	109	;'m'
   652  00FFA1  6D                 	db	109	;'m'
   653  00FFA2  3A                 	db	58	;':'
   654  00FFA3  64                 	db	100	;'d'
   655  00FFA4  64                 	db	100	;'d'
   656  00FFA5  3A                 	db	58	;':'
   657  00FFA6  79                 	db	121	;'y'
   658  00FFA7  79                 	db	121	;'y'
   659  00FFA8  20                 	db	32
   660  00FFA9  20                 	db	32
   661  00FFAA  20                 	db	32
   662  00FFAB  20                 	db	32
   663  00FFAC  41                 	db	65	;'A'
   664  00FFAD  3E                 	db	62	;'>'
   665  00FFAE  00                 	db	0
   666  00FFAF                     STR_3:
   667  00FFAF  5B                 	db	91	;'['
   668  00FFB0  41                 	db	65	;'A'
   669  00FFB1  41                 	db	65	;'A'
   670  00FFB2  2C                 	db	44
   671  00FFB3  43                 	db	67	;'C'
   672  00FFB4  2C                 	db	44
   673  00FFB5  39                 	db	57	;'9'
   674  00FFB6  56                 	db	86	;'V'
   675  00FFB7  2C                 	db	44
   676  00FFB8  4F                 	db	79	;'O'
   677  00FFB9  54                 	db	84	;'T'
   678  00FFBA  48                 	db	72	;'H'
   679  00FFBB  45                 	db	69	;'E'
   680  00FFBC  52                 	db	82	;'R'
   681  00FFBD  5D                 	db	93	;']'
   682  00FFBE  0A                 	db	10
   683  00FFBF  00                 	db	0
   684  00FFC0                     STR_2:
   685  00FFC0  74                 	db	116	;'t'
   686  00FFC1  69                 	db	105	;'i'
   687  00FFC2  6D                 	db	109	;'m'
   688  00FFC3  65                 	db	101	;'e'
   689  00FFC4  20                 	db	32
   690  00FFC5  25                 	db	37
   691  00FFC6  30                 	db	48	;'0'
   692  00FFC7  32                 	db	50	;'2'
   693  00FFC8  6C                 	db	108	;'l'
   694  00FFC9  64                 	db	100	;'d'
   695  00FFCA  3A                 	db	58	;':'
   696  00FFCB  25                 	db	37
   697  00FFCC  30                 	db	48	;'0'
   698  00FFCD  32                 	db	50	;'2'
   699  00FFCE  6C                 	db	108	;'l'
   700  00FFCF  64                 	db	100	;'d'
   701  00FFD0  00                 	db	0
   702  00FFD1                     STR_5:
   703  00FFD1  4E                 	db	78	;'N'
   704  00FFD2  3A                 	db	58	;':'
   705  00FFD3  20                 	db	32
   706  00FFD4  25                 	db	37
   707  00FFD5  64                 	db	100	;'d'
   708  00FFD6  2C                 	db	44
   709  00FFD7  0A                 	db	10
   710  00FFD8  56                 	db	86	;'V'
   711  00FFD9  3A                 	db	58	;':'
   712  00FFDA  20                 	db	32
   713  00FFDB  25                 	db	37
   714  00FFDC  2E                 	db	46
   715  00FFDD  33                 	db	51	;'3'
   716  00FFDE  66                 	db	102	;'f'
   717  00FFDF  00                 	db	0
   718  00FFE0                     STR_4:
   719  00FFE0  5B                 	db	91	;'['
   720  00FFE1  25                 	db	37
   721  00FFE2  64                 	db	100	;'d'
   722  00FFE3  2C                 	db	44
   723  00FFE4  25                 	db	37
   724  00FFE5  64                 	db	100	;'d'
   725  00FFE6  2C                 	db	44
   726  00FFE7  25                 	db	37
   727  00FFE8  64                 	db	100	;'d'
   728  00FFE9  2C                 	db	44
   729  00FFEA  25                 	db	37
   730  00FFEB  64                 	db	100	;'d'
   731  00FFEC  5D                 	db	93	;']'
   732  00FFED  00                 	db	0
   733  00FFEE  74                 	db	116	;'t'
   734  00FFEF  31                 	db	49	;'1'
   735  00FFF0  3A                 	db	58	;':'
   736  00FFF1  20                 	db	32
   737  00FFF2  25                 	db	37
   738  00FFF3  78                 	db	120	;'x'
   739  00FFF4  20                 	db	32
   740  00FFF5  00                 	db	0
   741  00FFF6                     STR_1:
   742  00FFF6  72                 	db	114	;'r'
   743  00FFF7  75                 	db	117	;'u'
   744  00FFF8  6E                 	db	110	;'n'
   745  00FFF9  6E                 	db	110	;'n'
   746  00FFFA  69                 	db	105	;'i'
   747  00FFFB  6E                 	db	110	;'n'
   748  00FFFC  67                 	db	103	;'g'
   749  00FFFD  00                 	db	0
   750                           
   751                           ; #config settings
   752  00FFFE  00                 	db	0	; dummy byte at the end
   753  0000                     
   754                           	psect	cinit
   755  002EA6                     __pcinit:
   756                           	opt stack 0
   757  002EA6                     start_initialization:
   758                           	opt stack 0
   759  002EA6                     __initialization:
   760                           	opt stack 0
   761                           
   762                           ; Initialize objects allocated to BANK1 (34 bytes)
   763                           ; load TBLPTR registers with __pidataBANK1
   764  002EA6  0E3C               	movlw	low __pidataBANK1
   765  002EA8  6EF6               	movwf	tblptrl,c
   766  002EAA  0E37               	movlw	high __pidataBANK1
   767  002EAC  6EF7               	movwf	tblptrh,c
   768  002EAE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   769  002EB0  6EF8               	movwf	tblptru,c
   770  002EB2  EE01  F02A         	lfsr	0,__pdataBANK1
   771  002EB6  EE10 F022          	lfsr	1,34
   772  002EBA                     copy_data0:
   773  002EBA  0009               	tblrd		*+
   774  002EBC  CFF5 FFEE          	movff	tablat,postinc0
   775  002EC0  50E5               	movf	postdec1,w,c
   776  002EC2  50E1               	movf	fsr1l,w,c
   777  002EC4  E1FA               	bnz	copy_data0
   778                           
   779                           ; Initialize objects allocated to BANK0 (8 bytes)
   780                           ; load TBLPTR registers with __pidataBANK0
   781  002EC6  0ED3               	movlw	low __pidataBANK0
   782  002EC8  6EF6               	movwf	tblptrl,c
   783  002ECA  0E37               	movlw	high __pidataBANK0
   784  002ECC  6EF7               	movwf	tblptrh,c
   785  002ECE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   786  002ED0  6EF8               	movwf	tblptru,c
   787  002ED2  EE00  F0F4         	lfsr	0,__pdataBANK0
   788  002ED6  EE10 F008          	lfsr	1,8
   789  002EDA                     copy_data1:
   790  002EDA  0009               	tblrd		*+
   791  002EDC  CFF5 FFEE          	movff	tablat,postinc0
   792  002EE0  50E5               	movf	postdec1,w,c
   793  002EE2  50E1               	movf	fsr1l,w,c
   794  002EE4  E1FA               	bnz	copy_data1
   795                           
   796                           ; Initialize objects allocated to COMRAM (19 bytes)
   797                           ; load TBLPTR registers with __pidataCOMRAM
   798  002EE6  0EC0               	movlw	low __pidataCOMRAM
   799  002EE8  6EF6               	movwf	tblptrl,c
   800  002EEA  0E37               	movlw	high __pidataCOMRAM
   801  002EEC  6EF7               	movwf	tblptrh,c
   802  002EEE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   803  002EF0  6EF8               	movwf	tblptru,c
   804  002EF2  EE00  F040         	lfsr	0,__pdataCOMRAM
   805  002EF6  EE10 F013          	lfsr	1,19
   806  002EFA                     copy_data2:
   807  002EFA  0009               	tblrd		*+
   808  002EFC  CFF5 FFEE          	movff	tablat,postinc0
   809  002F00  50E5               	movf	postdec1,w,c
   810  002F02  50E1               	movf	fsr1l,w,c
   811  002F04  E1FA               	bnz	copy_data2
   812                           
   813                           ; Clear objects allocated to BANK1 (32 bytes)
   814  002F06  EE01  F04C         	lfsr	0,__pbssBANK1
   815  002F0A  0E20               	movlw	32
   816  002F0C                     clear_0:
   817  002F0C  6AEE               	clrf	postinc0,c
   818  002F0E  06E8               	decf	wreg,f,c
   819  002F10  E1FD               	bnz	clear_0
   820                           
   821                           ; Clear objects allocated to BANK0 (2 bytes)
   822  002F12  0100               	movlb	0
   823  002F14  6BFD               	clrf	(__pbssBANK0+1)& (0+255),b
   824  002F16  6BFC               	clrf	__pbssBANK0& (0+255),b
   825                           
   826                           ; Clear objects allocated to COMRAM (11 bytes)
   827  002F18  EE00  F053         	lfsr	0,__pbssCOMRAM
   828  002F1C  0E0B               	movlw	11
   829  002F1E                     clear_1:
   830  002F1E  6AEE               	clrf	postinc0,c
   831  002F20  06E8               	decf	wreg,f,c
   832  002F22  E1FD               	bnz	clear_1
   833  002F24                     end_of_initialization:
   834                           	opt stack 0
   835  002F24                     __end_of__initialization:
   836                           	opt stack 0
   837  002F24  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   838  002F26  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   839  002F28  0E00               	movlw	low (__Lmediumconst shr (0+16))
   840  002F2A  6EF8               	movwf	tblptru,c
   841  002F2C  0100               	movlb	0
   842  002F2E  EF85  F00B         	goto	_main	;jump to C main() function
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1l	equ	0xFE1
   851                           
   852                           	psect	bssCOMRAM
   853  000053                     __pbssCOMRAM:
   854                           	opt stack 0
   855  000053                     _padPin3:
   856                           	opt stack 0
   857  000053                     	ds	4
   858  000057                     _count:
   859                           	opt stack 0
   860  000057                     	ds	2
   861  000059                     _curr:
   862                           	opt stack 0
   863  000059                     	ds	2
   864  00005B                     _prevTime:
   865                           	opt stack 0
   866  00005B                     	ds	2
   867  00005D                     _lastKey:
   868                           	opt stack 0
   869  00005D                     	ds	1
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           postinc0	equ	0xFEE
   875                           wreg	equ	0xFE8
   876                           postdec1	equ	0xFE5
   877                           fsr1l	equ	0xFE1
   878                           
   879                           	psect	dataCOMRAM
   880  000040                     __pdataCOMRAM:
   881                           	opt stack 0
   882  000040                     _V_LIM_9V:
   883                           	opt stack 0
   884  000040                     	ds	3
   885  000043                     _V_LIM_AA:
   886                           	opt stack 0
   887  000043                     	ds	3
   888  000046                     _V_LIM_C:
   889                           	opt stack 0
   890  000046                     	ds	3
   891  000049                     _angle:
   892                           	opt stack 0
   893  000049                     	ds	2
   894  00004B                     _padAngle_OPEN:
   895                           	opt stack 0
   896  00004B                     	ds	2
   897  00004D                     _period:
   898                           	opt stack 0
   899  00004D                     	ds	2
   900  00004F                     _AA_float:
   901                           	opt stack 0
   902  00004F                     	ds	4
   903                           tblptru	equ	0xFF8
   904                           tblptrh	equ	0xFF7
   905                           tblptrl	equ	0xFF6
   906                           tablat	equ	0xFF5
   907                           postinc0	equ	0xFEE
   908                           wreg	equ	0xFE8
   909                           postdec1	equ	0xFE5
   910                           fsr1l	equ	0xFE1
   911                           
   912                           	psect	bssBANK0
   913  0000FC                     __pbssBANK0:
   914                           	opt stack 0
   915  0000FC                     _n:
   916                           	opt stack 0
   917  0000FC                     	ds	2
   918                           tblptru	equ	0xFF8
   919                           tblptrh	equ	0xFF7
   920                           tblptrl	equ	0xFF6
   921                           tablat	equ	0xFF5
   922                           postinc0	equ	0xFEE
   923                           wreg	equ	0xFE8
   924                           postdec1	equ	0xFE5
   925                           fsr1l	equ	0xFE1
   926                           
   927                           	psect	dataBANK0
   928  0000F4                     __pdataBANK0:
   929                           	opt stack 0
   930  0000F4                     _padAngle_CLOSE:
   931                           	opt stack 0
   932  0000F4                     	ds	2
   933  0000F6                     _redirectAngle_9V:
   934                           	opt stack 0
   935  0000F6                     	ds	2
   936  0000F8                     _redirectAngle_C:
   937                           	opt stack 0
   938  0000F8                     	ds	2
   939  0000FA                     _redirectAngle_OTHER:
   940                           	opt stack 0
   941  0000FA                     	ds	2
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           postinc0	equ	0xFEE
   947                           wreg	equ	0xFE8
   948                           postdec1	equ	0xFE5
   949                           fsr1l	equ	0xFE1
   950                           
   951                           	psect	bssBANK1
   952  00014C                     __pbssBANK1:
   953                           	opt stack 0
   954  00014C                     _pulse:
   955                           	opt stack 0
   956  00014C                     	ds	8
   957  000154                     _servos:
   958                           	opt stack 0
   959  000154                     	ds	8
   960  00015C                     _time:
   961                           	opt stack 0
   962  00015C                     	ds	4
   963  000160                     _batteryDetected:
   964                           	opt stack 0
   965  000160                     	ds	2
   966  000162                     _n_9V:
   967                           	opt stack 0
   968  000162                     	ds	2
   969  000164                     _n_AA:
   970                           	opt stack 0
   971  000164                     	ds	2
   972  000166                     _n_C:
   973                           	opt stack 0
   974  000166                     	ds	2
   975  000168                     _n_OTHER:
   976                           	opt stack 0
   977  000168                     	ds	2
   978  00016A                     _terminate:
   979                           	opt stack 0
   980  00016A                     	ds	2
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           postinc0	equ	0xFEE
   986                           wreg	equ	0xFE8
   987                           postdec1	equ	0xFE5
   988                           fsr1l	equ	0xFE1
   989                           
   990                           	psect	dataBANK1
   991  00012A                     __pdataBANK1:
   992                           	opt stack 0
   993  00012A                     _padAngle_NEUTRAL:
   994                           	opt stack 0
   995  00012A                     	ds	2
   996  00012C                     _redirectAngle_AA:
   997                           	opt stack 0
   998  00012C                     	ds	2
   999  00012E                     _stoppingTime:
  1000                           	opt stack 0
  1001  00012E                     	ds	2
  1002  000130                     _conveyorServo:
  1003                           	opt stack 0
  1004  000130                     	ds	4
  1005  000134                     _cylinderDir:
  1006                           	opt stack 0
  1007  000134                     	ds	4
  1008  000138                     _cylinderMotor:
  1009                           	opt stack 0
  1010  000138                     	ds	4
  1011  00013C                     _padPin1:
  1012                           	opt stack 0
  1013  00013C                     	ds	4
  1014  000140                     _padPin2:
  1015                           	opt stack 0
  1016  000140                     	ds	4
  1017  000144                     _padServo:
  1018                           	opt stack 0
  1019  000144                     	ds	4
  1020  000148                     _redirectingServo:
  1021                           	opt stack 0
  1022  000148                     	ds	4
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           	psect	cstackBANK1
  1033  000100                     __pcstackBANK1:
  1034                           	opt stack 0
  1035  000100                     sortBattery@pos_v_counter:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x0
  1039  000100                     	ds	2
  1040  000102                     _sortBattery$1336:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x2
  1044  000102                     	ds	2
  1045  000104                     sortBattery@V_float:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x4
  1049  000104                     	ds	3
  1050  000107                     sortBattery@signal:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x7
  1054  000107                     	ds	2
  1055  000109                     sortBattery@Vcc:
  1056                           	opt stack 0
  1057                           
  1058                           ; 3 bytes @ 0x9
  1059  000109                     	ds	3
  1060  00010C                     sortBattery@resolution:
  1061                           	opt stack 0
  1062                           
  1063                           ; 3 bytes @ 0xC
  1064  00010C                     	ds	3
  1065  00010F                     sortBattery@V:
  1066                           	opt stack 0
  1067                           
  1068                           ; 3 bytes @ 0xF
  1069  00010F                     	ds	3
  1070  000112                     sortBattery@V_max:
  1071                           	opt stack 0
  1072                           
  1073                           ; 3 bytes @ 0x12
  1074  000112                     	ds	3
  1075  000115                     sortBattery@i_205:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x15
  1079  000115                     	ds	2
  1080  000117                     sortBattery@targetAngle:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x17
  1084  000117                     	ds	2
  1085  000119                     sortBattery@i:
  1086                           	opt stack 0
  1087                           
  1088                           ; 3 bytes @ 0x19
  1089  000119                     	ds	3
  1090  00011C                     sortBattery@V_203:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x1C
  1094  00011C                     	ds	2
  1095  00011E                     main@cylinderForward:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x1E
  1099  00011E                     	ds	2
  1100  000120                     main@cylinderBackward:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x20
  1104  000120                     	ds	2
  1105  000122                     main@lastBatteryTime:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x22
  1109  000122                     	ds	2
  1110  000124                     main@cylinderStart:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x24
  1114  000124                     	ds	2
  1115  000126                     main@cylinderDur:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x26
  1119  000126                     	ds	2
  1120  000128                     main@prev:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x28
  1124  000128                     	ds	2
  1125                           tblptru	equ	0xFF8
  1126                           tblptrh	equ	0xFF7
  1127                           tblptrl	equ	0xFF6
  1128                           tablat	equ	0xFF5
  1129                           postinc0	equ	0xFEE
  1130                           wreg	equ	0xFE8
  1131                           postdec1	equ	0xFE5
  1132                           fsr1l	equ	0xFE1
  1133                           
  1134                           	psect	cstackBANK0
  1135  000080                     __pcstackBANK0:
  1136                           	opt stack 0
  1137  000080                     ___ftdiv@cntr:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x0
  1141  000080                     	ds	1
  1142  000081                     ___ftdiv@f3:
  1143                           	opt stack 0
  1144                           
  1145                           ; 3 bytes @ 0x1
  1146  000081                     	ds	3
  1147  000084                     ___ftdiv@exp:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x4
  1151  000084                     	ds	1
  1152  000085                     ___ftdiv@sign:
  1153                           	opt stack 0
  1154                           
  1155                           ; 1 bytes @ 0x5
  1156  000085                     	ds	1
  1157  000086                     ?___ftmul:
  1158                           	opt stack 0
  1159  000086                     ___ftmul@f1:
  1160                           	opt stack 0
  1161                           
  1162                           ; 3 bytes @ 0x6
  1163  000086                     	ds	3
  1164  000089                     ___ftmul@f2:
  1165                           	opt stack 0
  1166                           
  1167                           ; 3 bytes @ 0x9
  1168  000089                     	ds	3
  1169  00008C                     ___ftmul@exp:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0xC
  1173  00008C                     	ds	1
  1174  00008D                     ___ftmul@f3_as_product:
  1175                           	opt stack 0
  1176                           
  1177                           ; 3 bytes @ 0xD
  1178  00008D                     	ds	3
  1179  000090                     ___ftmul@cntr:
  1180                           	opt stack 0
  1181                           
  1182                           ; 1 bytes @ 0x10
  1183  000090                     	ds	1
  1184  000091                     ___ftmul@sign:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x11
  1188  000091                     	ds	1
  1189  000092                     ?_fround:
  1190                           	opt stack 0
  1191  000092                     ?_scale:
  1192                           	opt stack 0
  1193                           
  1194                           ; 3 bytes @ 0x12
  1195  000092                     	ds	3
  1196  000095                     _fround$1339:
  1197                           	opt stack 0
  1198  000095                     _scale$1340:
  1199                           	opt stack 0
  1200                           
  1201                           ; 3 bytes @ 0x15
  1202  000095                     	ds	3
  1203  000098                     scale@scl:
  1204                           	opt stack 0
  1205  000098                     _fround$1338:
  1206                           	opt stack 0
  1207                           
  1208                           ; 3 bytes @ 0x18
  1209  000098                     	ds	3
  1210  00009B                     fround@prec:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0x1B
  1214  00009B                     	ds	1
  1215  00009C                     ?___ftadd:
  1216                           	opt stack 0
  1217  00009C                     ___ftadd@f1:
  1218                           	opt stack 0
  1219                           
  1220                           ; 3 bytes @ 0x1C
  1221  00009C                     	ds	3
  1222  00009F                     ___ftadd@f2:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x1F
  1226  00009F                     	ds	3
  1227  0000A2                     ??___ftadd:
  1228                           
  1229                           ; 1 bytes @ 0x22
  1230  0000A2                     	ds	3
  1231  0000A5                     ___ftadd@sign:
  1232                           	opt stack 0
  1233                           
  1234                           ; 1 bytes @ 0x25
  1235  0000A5                     	ds	1
  1236  0000A6                     ___ftadd@exp2:
  1237                           	opt stack 0
  1238                           
  1239                           ; 1 bytes @ 0x26
  1240  0000A6                     	ds	1
  1241  0000A7                     ___ftadd@exp1:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x27
  1245  0000A7                     	ds	1
  1246  0000A8                     ?___ftsub:
  1247                           	opt stack 0
  1248  0000A8                     ?___fttol:
  1249                           	opt stack 0
  1250  0000A8                     ___ftsub@f1:
  1251                           	opt stack 0
  1252  0000A8                     ___fttol@f1:
  1253                           	opt stack 0
  1254                           
  1255                           ; 3 bytes @ 0x28
  1256  0000A8                     	ds	3
  1257  0000AB                     ___ftsub@f2:
  1258                           	opt stack 0
  1259                           
  1260                           ; 3 bytes @ 0x2B
  1261  0000AB                     	ds	1
  1262  0000AC                     ??___fttol:
  1263                           
  1264                           ; 1 bytes @ 0x2C
  1265  0000AC                     	ds	5
  1266  0000B1                     ___fttol@sign1:
  1267                           	opt stack 0
  1268                           
  1269                           ; 1 bytes @ 0x31
  1270  0000B1                     	ds	1
  1271  0000B2                     ___fttol@lval:
  1272                           	opt stack 0
  1273                           
  1274                           ; 4 bytes @ 0x32
  1275  0000B2                     	ds	4
  1276  0000B6                     ___fttol@exp1:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x36
  1280  0000B6                     	ds	1
  1281  0000B7                     ?_printf:
  1282                           	opt stack 0
  1283  0000B7                     ?_angleToPulse:
  1284                           	opt stack 0
  1285  0000B7                     angleToPulse@angle:
  1286                           	opt stack 0
  1287  0000B7                     printf@f:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x37
  1291  0000B7                     	ds	4
  1292  0000BB                     ??_angleToPulse:
  1293                           
  1294                           ; 1 bytes @ 0x3B
  1295  0000BB                     	ds	4
  1296  0000BF                     angleToPulse@offset:
  1297                           	opt stack 0
  1298                           
  1299                           ; 4 bytes @ 0x3F
  1300  0000BF                     	ds	2
  1301  0000C1                     ??_printf:
  1302                           
  1303                           ; 1 bytes @ 0x41
  1304  0000C1                     	ds	2
  1305  0000C3                     angleToPulse@a180:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0x43
  1309  0000C3                     	ds	4
  1310  0000C7                     _angleToPulse$1337:
  1311                           	opt stack 0
  1312  0000C7                     _printf$1341:
  1313                           	opt stack 0
  1314                           
  1315                           ; 3 bytes @ 0x47
  1316  0000C7                     	ds	3
  1317  0000CA                     printf@idx:
  1318                           	opt stack 0
  1319  0000CA                     angleToPulse@a000:
  1320                           	opt stack 0
  1321                           
  1322                           ; 4 bytes @ 0x4A
  1323  0000CA                     	ds	1
  1324  0000CB                     printf@cp:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x4B
  1328  0000CB                     	ds	2
  1329  0000CD                     printf@len:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x4D
  1333  0000CD                     	ds	1
  1334  0000CE                     setAngle@motor:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x4E
  1338  0000CE                     	ds	1
  1339  0000CF                     printf@ap:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x4F
  1343  0000CF                     	ds	1
  1344  0000D0                     setAngle@angle:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x50
  1348  0000D0                     	ds	1
  1349  0000D1                     printf@tmpval:
  1350                           	opt stack 0
  1351                           
  1352                           ; 4 bytes @ 0x51
  1353  0000D1                     	ds	1
  1354  0000D2                     ??_setAngle:
  1355                           
  1356                           ; 1 bytes @ 0x52
  1357  0000D2                     	ds	2
  1358  0000D4                     setAngle@period:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x54
  1362  0000D4                     	ds	1
  1363  0000D5                     printf@exp:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x55
  1367  0000D5                     	ds	1
  1368  0000D6                     setAngle@i:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x56
  1372  0000D6                     	ds	1
  1373  0000D7                     printf@fval:
  1374                           	opt stack 0
  1375                           
  1376                           ; 3 bytes @ 0x57
  1377  0000D7                     	ds	1
  1378  0000D8                     initServo@motor:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x58
  1382  0000D8                     	ds	2
  1383  0000DA                     initServo@angle:
  1384                           	opt stack 0
  1385  0000DA                     printf@val:
  1386                           	opt stack 0
  1387                           
  1388                           ; 4 bytes @ 0x5A
  1389  0000DA                     	ds	2
  1390  0000DC                     ??_initServo:
  1391                           
  1392                           ; 1 bytes @ 0x5C
  1393  0000DC                     	ds	2
  1394  0000DE                     printf@width:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x5E
  1398  0000DE                     	ds	2
  1399  0000E0                     printf@flag:
  1400                           	opt stack 0
  1401                           
  1402                           ; 2 bytes @ 0x60
  1403  0000E0                     	ds	2
  1404  0000E2                     printf@prec:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x62
  1408  0000E2                     	ds	2
  1409  0000E4                     printf@c:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x64
  1413  0000E4                     	ds	1
  1414  0000E5                     ??_sortBattery:
  1415  0000E5                     runMenu@key:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x65
  1419  0000E5                     	ds	1
  1420  0000E6                     showInterface@key:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x66
  1424  0000E6                     	ds	1
  1425  0000E7                     ??_main:
  1426                           
  1427                           ; 1 bytes @ 0x67
  1428  0000E7                     	ds	13
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           postdec1	equ	0xFE5
  1436                           fsr1l	equ	0xFE1
  1437                           
  1438                           	psect	cstackCOMRAM
  1439  000001                     __pcstackCOMRAM:
  1440                           	opt stack 0
  1441  000001                     ?i2___awmod:
  1442                           	opt stack 0
  1443  000001                     i2___awmod@dividend:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x0
  1447  000001                     	ds	2
  1448  000003                     i2___awmod@divisor:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x2
  1452  000003                     	ds	2
  1453  000005                     i2___awmod@counter:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x4
  1457  000005                     	ds	1
  1458  000006                     i2___awmod@sign:
  1459                           	opt stack 0
  1460                           
  1461                           ; 1 bytes @ 0x5
  1462  000006                     	ds	1
  1463  000007                     i2digitalWrite@pin:
  1464                           	opt stack 0
  1465  000007                     i2startTimer@timer:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x6
  1469  000007                     	ds	2
  1470  000009                     i2digitalWrite@val:
  1471                           	opt stack 0
  1472  000009                     i2startTimer@val:
  1473                           	opt stack 0
  1474                           
  1475                           ; 4 bytes @ 0x8
  1476  000009                     	ds	2
  1477  00000B                     ??i2_digitalWrite:
  1478                           
  1479                           ; 1 bytes @ 0xA
  1480  00000B                     	ds	2
  1481  00000D                     ??i2_startTimer:
  1482                           
  1483                           ; 1 bytes @ 0xC
  1484  00000D                     	ds	1
  1485  00000E                     i2digitalWrite@p:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0xD
  1489  00000E                     	ds	2
  1490  000010                     ??_servoInterruptService:
  1491                           
  1492                           ; 1 bytes @ 0xF
  1493  000010                     	ds	4
  1494  000014                     ??_service:
  1495                           
  1496                           ; 1 bytes @ 0x13
  1497  000014                     	ds	14
  1498  000022                     ??_isdigit:
  1499  000022                     ?_digitalRead:
  1500                           	opt stack 0
  1501  000022                     ?___awmod:
  1502                           	opt stack 0
  1503  000022                     ?___ftpack:
  1504                           	opt stack 0
  1505  000022                     ?___ftneg:
  1506                           	opt stack 0
  1507  000022                     ?_analogRead:
  1508                           	opt stack 0
  1509  000022                     ?__tdiv_to_l_:
  1510                           	opt stack 0
  1511  000022                     ?__div_to_l_:
  1512                           	opt stack 0
  1513  000022                     ?___aldiv:
  1514                           	opt stack 0
  1515  000022                     ?___lldiv:
  1516                           	opt stack 0
  1517  000022                     lcdNibble@temp:
  1518                           	opt stack 0
  1519  000022                     readKeypad@key:
  1520                           	opt stack 0
  1521  000022                     digitalRead@pin:
  1522                           	opt stack 0
  1523  000022                     digitalWrite@pin:
  1524                           	opt stack 0
  1525  000022                     analogRead@channel:
  1526                           	opt stack 0
  1527  000022                     initTimer@timer:
  1528                           	opt stack 0
  1529  000022                     startTimer@timer:
  1530                           	opt stack 0
  1531  000022                     ___awmod@dividend:
  1532                           	opt stack 0
  1533  000022                     __div_to_l_@f1:
  1534                           	opt stack 0
  1535  000022                     ___ftpack@arg:
  1536                           	opt stack 0
  1537  000022                     __tdiv_to_l_@f1:
  1538                           	opt stack 0
  1539  000022                     ___ftneg@f1:
  1540                           	opt stack 0
  1541  000022                     ___aldiv@dividend:
  1542                           	opt stack 0
  1543  000022                     ___lldiv@dividend:
  1544                           	opt stack 0
  1545                           
  1546                           ; 4 bytes @ 0x21
  1547  000022                     	ds	1
  1548  000023                     lcdNibble@data:
  1549                           	opt stack 0
  1550  000023                     _isdigit$962:
  1551                           	opt stack 0
  1552                           
  1553                           ; 1 bytes @ 0x22
  1554  000023                     	ds	1
  1555  000024                     ??_digitalRead:
  1556  000024                     ??_lcdInst:
  1557  000024                     ??_initTimer:
  1558  000024                     isdigit@c:
  1559                           	opt stack 0
  1560  000024                     digitalWrite@val:
  1561                           	opt stack 0
  1562  000024                     ___awmod@divisor:
  1563                           	opt stack 0
  1564  000024                     startTimer@val:
  1565                           	opt stack 0
  1566                           
  1567                           ; 4 bytes @ 0x23
  1568  000024                     	ds	1
  1569  000025                     lcdInst@data:
  1570                           	opt stack 0
  1571  000025                     ___ftpack@exp:
  1572                           	opt stack 0
  1573  000025                     __div_to_l_@f2:
  1574                           	opt stack 0
  1575  000025                     __tdiv_to_l_@f2:
  1576                           	opt stack 0
  1577                           
  1578                           ; 3 bytes @ 0x24
  1579  000025                     	ds	1
  1580  000026                     ??_initLCD:
  1581  000026                     ??_digitalWrite:
  1582  000026                     ??_analogRead:
  1583  000026                     putch@data:
  1584                           	opt stack 0
  1585  000026                     ___awmod@counter:
  1586                           	opt stack 0
  1587  000026                     ___ftpack@sign:
  1588                           	opt stack 0
  1589  000026                     ___aldiv@divisor:
  1590                           	opt stack 0
  1591  000026                     ___lldiv@divisor:
  1592                           	opt stack 0
  1593                           
  1594                           ; 4 bytes @ 0x25
  1595  000026                     	ds	1
  1596  000027                     ??___ftpack:
  1597  000027                     ___awmod@sign:
  1598                           	opt stack 0
  1599                           
  1600                           ; 1 bytes @ 0x26
  1601  000027                     	ds	1
  1602  000028                     ??__tdiv_to_l_:
  1603  000028                     ??_startTimer:
  1604  000028                     ?___awdiv:
  1605                           	opt stack 0
  1606  000028                     ___awdiv@dividend:
  1607                           	opt stack 0
  1608  000028                     __div_to_l_@quot:
  1609                           	opt stack 0
  1610                           
  1611                           ; 4 bytes @ 0x27
  1612  000028                     	ds	1
  1613  000029                     digitalWrite@p:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x28
  1617  000029                     	ds	1
  1618  00002A                     ?___altoft:
  1619                           	opt stack 0
  1620  00002A                     ?___awtoft:
  1621                           	opt stack 0
  1622  00002A                     ?___lltoft:
  1623                           	opt stack 0
  1624  00002A                     ___aldiv@counter:
  1625                           	opt stack 0
  1626  00002A                     ___awdiv@divisor:
  1627                           	opt stack 0
  1628  00002A                     ___awtoft@c:
  1629                           	opt stack 0
  1630  00002A                     ___altoft@c:
  1631                           	opt stack 0
  1632  00002A                     ___lldiv@quotient:
  1633                           	opt stack 0
  1634  00002A                     ___lltoft@c:
  1635                           	opt stack 0
  1636                           
  1637                           ; 4 bytes @ 0x29
  1638  00002A                     	ds	1
  1639  00002B                     ___aldiv@sign:
  1640                           	opt stack 0
  1641  00002B                     __tdiv_to_l_@quot:
  1642                           	opt stack 0
  1643                           
  1644                           ; 4 bytes @ 0x2A
  1645  00002B                     	ds	1
  1646  00002C                     ___awdiv@counter:
  1647                           	opt stack 0
  1648  00002C                     __div_to_l_@cntr:
  1649                           	opt stack 0
  1650  00002C                     ___aldiv@quotient:
  1651                           	opt stack 0
  1652                           
  1653                           ; 4 bytes @ 0x2B
  1654  00002C                     	ds	1
  1655  00002D                     ___awdiv@sign:
  1656                           	opt stack 0
  1657  00002D                     ___awtoft@sign:
  1658                           	opt stack 0
  1659  00002D                     __div_to_l_@exp1:
  1660                           	opt stack 0
  1661                           
  1662                           ; 1 bytes @ 0x2C
  1663  00002D                     	ds	1
  1664  00002E                     ??___altoft:
  1665  00002E                     ??___lltoft:
  1666  00002E                     ___lldiv@counter:
  1667                           	opt stack 0
  1668  00002E                     ___awdiv@quotient:
  1669                           	opt stack 0
  1670  00002E                     ___ftge@ff1:
  1671                           	opt stack 0
  1672                           
  1673                           ; 3 bytes @ 0x2D
  1674  00002E                     	ds	1
  1675  00002F                     ?___llmod:
  1676                           	opt stack 0
  1677  00002F                     __tdiv_to_l_@cntr:
  1678                           	opt stack 0
  1679  00002F                     ___llmod@dividend:
  1680                           	opt stack 0
  1681                           
  1682                           ; 4 bytes @ 0x2E
  1683  00002F                     	ds	1
  1684  000030                     ?___wmul:
  1685                           	opt stack 0
  1686  000030                     ?___almod:
  1687                           	opt stack 0
  1688  000030                     __tdiv_to_l_@exp1:
  1689                           	opt stack 0
  1690  000030                     ___wmul@multiplier:
  1691                           	opt stack 0
  1692  000030                     ___almod@dividend:
  1693                           	opt stack 0
  1694                           
  1695                           ; 4 bytes @ 0x2F
  1696  000030                     	ds	1
  1697  000031                     ___ftge@ff2:
  1698                           	opt stack 0
  1699                           
  1700                           ; 3 bytes @ 0x30
  1701  000031                     	ds	1
  1702  000032                     ___altoft@exp:
  1703                           	opt stack 0
  1704  000032                     ___lltoft@exp:
  1705                           	opt stack 0
  1706  000032                     ___wmul@multiplicand:
  1707                           	opt stack 0
  1708                           
  1709                           ; 2 bytes @ 0x31
  1710  000032                     	ds	1
  1711  000033                     ___altoft@sign:
  1712                           	opt stack 0
  1713  000033                     ___llmod@divisor:
  1714                           	opt stack 0
  1715                           
  1716                           ; 4 bytes @ 0x32
  1717  000033                     	ds	1
  1718  000034                     ??___ftge:
  1719  000034                     ?___ftdiv:
  1720                           	opt stack 0
  1721  000034                     ___wmul@product:
  1722                           	opt stack 0
  1723  000034                     ___ftdiv@f1:
  1724                           	opt stack 0
  1725  000034                     ___almod@divisor:
  1726                           	opt stack 0
  1727                           
  1728                           ; 4 bytes @ 0x33
  1729  000034                     	ds	3
  1730  000037                     ___llmod@counter:
  1731                           	opt stack 0
  1732  000037                     ___ftdiv@f2:
  1733                           	opt stack 0
  1734                           
  1735                           ; 3 bytes @ 0x36
  1736  000037                     	ds	1
  1737  000038                     ___almod@counter:
  1738                           	opt stack 0
  1739                           
  1740                           ; 1 bytes @ 0x37
  1741  000038                     	ds	1
  1742  000039                     ___almod@sign:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0x38
  1746  000039                     	ds	1
  1747  00003A                     ??___ftdiv:
  1748                           
  1749                           ; 1 bytes @ 0x39
  1750  00003A                     	ds	3
  1751  00003D                     ??___ftmul:
  1752                           
  1753                           ; 1 bytes @ 0x3C
  1754  00003D                     	ds	3
  1755  000040                     tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           postdec1	equ	0xFE5
  1762                           fsr1l	equ	0xFE1
  1763                           
  1764                           ; 1 bytes @ 0x3F
  1765 ;;
  1766 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  1767 ;;
  1768 ;; *************** function _main *****************
  1769 ;; Defined at:
  1770 ;;		line 101 in file "main.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;		None
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  prev            2   40[BANK1 ] int 
  1775 ;;  cylinderDur     2   38[BANK1 ] int 
  1776 ;;  cylinderStar    2   36[BANK1 ] int 
  1777 ;;  lastBatteryT    2   34[BANK1 ] int 
  1778 ;;  cylinderBack    2   32[BANK1 ] int 
  1779 ;;  cylinderForw    2   30[BANK1 ] int 
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      void 
  1782 ;; Registers used:
  1783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Temps:          0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Totals:         0      13      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;Total ram usage:       25 bytes
  1794 ;; Hardware stack levels required when called:   10
  1795 ;; This function calls:
  1796 ;;		___aldiv
  1797 ;;		___almod
  1798 ;;		_digitalRead
  1799 ;;		_digitalWrite
  1800 ;;		_initLCD
  1801 ;;		_initServo
  1802 ;;		_lcdClear
  1803 ;;		_lcdHome
  1804 ;;		_pinSetup
  1805 ;;		_printf
  1806 ;;		_readKeypad
  1807 ;;		_showInterface
  1808 ;;		_sortBattery
  1809 ;; This function is called by:
  1810 ;;		Startup code after reset
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text0
  1815  00170A                     __ptext0:
  1816                           	opt stack 0
  1817  00170A                     _main:
  1818                           	opt stack 21
  1819                           
  1820                           ;main.c: 102: pinSetup();
  1821                           
  1822                           ;incstack = 0
  1823  00170A  EC97  F01A         	call	_pinSetup	;wreg free
  1824                           
  1825                           ;main.c: 103: initLCD();
  1826  00170E  EC74  F01A         	call	_initLCD	;wreg free
  1827  001712                     l6786:
  1828                           
  1829                           ;main.c: 106: showInterface();
  1830  001712  EC4D  F013         	call	_showInterface	;wreg free
  1831                           
  1832                           ;main.c: 111: time = 0;
  1833  001716  0E00               	movlw	0
  1834  001718  0101               	movlb	1	; () banked
  1835  00171A  6F5C               	movwf	_time& (0+255),b
  1836  00171C  0E00               	movlw	0
  1837  00171E  6F5D               	movwf	(_time+1)& (0+255),b
  1838  001720  0E00               	movlw	0
  1839  001722  6F5E               	movwf	(_time+2)& (0+255),b
  1840  001724  0E00               	movlw	0
  1841  001726  6F5F               	movwf	(_time+3)& (0+255),b
  1842                           
  1843                           ; BSR set to: 1
  1844                           ;main.c: 116: digitalWrite(cylinderMotor, 1);
  1845  001728  0E38               	movlw	low _cylinderMotor
  1846  00172A  6E22               	movwf	digitalWrite@pin,c
  1847  00172C  0E01               	movlw	high _cylinderMotor
  1848  00172E  6E23               	movwf	digitalWrite@pin+1,c
  1849  001730  0E00               	movlw	0
  1850  001732  6E25               	movwf	digitalWrite@val+1,c
  1851  001734  0E01               	movlw	1
  1852  001736  6E24               	movwf	digitalWrite@val,c
  1853  001738  EC96  F015         	call	_digitalWrite	;wreg free
  1854                           
  1855                           ;main.c: 117: initServo(conveyorServo, 130);
  1856  00173C  0E30               	movlw	low _conveyorServo
  1857  00173E  0100               	movlb	0	; () banked
  1858  001740  6FD8               	movwf	initServo@motor& (0+255),b
  1859  001742  0E01               	movlw	high _conveyorServo
  1860  001744  0100               	movlb	0	; () banked
  1861  001746  6FD9               	movwf	(initServo@motor+1)& (0+255),b
  1862  001748  0E00               	movlw	0
  1863  00174A  0100               	movlb	0	; () banked
  1864  00174C  6FDB               	movwf	(initServo@angle+1)& (0+255),b
  1865  00174E  0E82               	movlw	130
  1866  001750  6FDA               	movwf	initServo@angle& (0+255),b
  1867  001752  EC99  F017         	call	_initServo	;wreg free
  1868                           
  1869                           ;main.c: 118: initServo(padServo, padAngle_NEUTRAL);
  1870  001756  0E44               	movlw	low _padServo
  1871  001758  0100               	movlb	0	; () banked
  1872  00175A  6FD8               	movwf	initServo@motor& (0+255),b
  1873  00175C  0E01               	movlw	high _padServo
  1874  00175E  0100               	movlb	0	; () banked
  1875  001760  6FD9               	movwf	(initServo@motor+1)& (0+255),b
  1876  001762  C12A  F0DA         	movff	_padAngle_NEUTRAL,initServo@angle
  1877  001766  C12B  F0DB         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1878  00176A  EC99  F017         	call	_initServo	;wreg free
  1879                           
  1880                           ;main.c: 119: initServo(redirectingServo, redirectAngle_AA);
  1881  00176E  0E48               	movlw	low _redirectingServo
  1882  001770  0100               	movlb	0	; () banked
  1883  001772  6FD8               	movwf	initServo@motor& (0+255),b
  1884  001774  0E01               	movlw	high _redirectingServo
  1885  001776  0100               	movlb	0	; () banked
  1886  001778  6FD9               	movwf	(initServo@motor+1)& (0+255),b
  1887  00177A  C12C  F0DA         	movff	_redirectAngle_AA,initServo@angle
  1888  00177E  C12D  F0DB         	movff	_redirectAngle_AA+1,initServo@angle+1
  1889  001782  EC99  F017         	call	_initServo	;wreg free
  1890  001786                     l6798:
  1891                           
  1892                           ;main.c: 123: lcdClear();
  1893  001786  ECF2  F01B         	call	_lcdClear	;wreg free
  1894                           
  1895                           ;main.c: 124: printf("running");
  1896  00178A  0EF6               	movlw	low STR_1
  1897  00178C  0100               	movlb	0	; () banked
  1898  00178E  6FB7               	movwf	printf@f& (0+255),b
  1899  001790  0EFF               	movlw	high STR_1
  1900  001792  0100               	movlb	0	; () banked
  1901  001794  6FB8               	movwf	(printf@f+1)& (0+255),b
  1902  001796  EC09  F000         	call	_printf	;wreg free
  1903                           
  1904                           ;main.c: 126: int lastBatteryTime = time;
  1905  00179A  C15C  F122         	movff	_time,main@lastBatteryTime
  1906  00179E  C15D  F123         	movff	_time+1,main@lastBatteryTime+1
  1907                           
  1908                           ;main.c: 128: int cylinderStart = time;
  1909  0017A2  C15C  F124         	movff	_time,main@cylinderStart
  1910  0017A6  C15D  F125         	movff	_time+1,main@cylinderStart+1
  1911                           
  1912                           ;main.c: 129: int cylinderDur = 0;
  1913  0017AA  0E00               	movlw	0
  1914  0017AC  0101               	movlb	1	; () banked
  1915  0017AE  6F27               	movwf	(main@cylinderDur+1)& (0+255),b
  1916  0017B0  0E00               	movlw	0
  1917  0017B2  6F26               	movwf	main@cylinderDur& (0+255),b
  1918                           
  1919                           ;main.c: 130: int cylinderForward = 10;
  1920  0017B4  0E00               	movlw	0
  1921  0017B6  0101               	movlb	1	; () banked
  1922  0017B8  6F1F               	movwf	(main@cylinderForward+1)& (0+255),b
  1923  0017BA  0E0A               	movlw	10
  1924  0017BC  6F1E               	movwf	main@cylinderForward& (0+255),b
  1925                           
  1926                           ;main.c: 131: int cylinderBackward = 10;
  1927  0017BE  0E00               	movlw	0
  1928  0017C0  0101               	movlb	1	; () banked
  1929  0017C2  6F21               	movwf	(main@cylinderBackward+1)& (0+255),b
  1930  0017C4  0E0A               	movlw	10
  1931  0017C6  6F20               	movwf	main@cylinderBackward& (0+255),b
  1932                           
  1933                           ;main.c: 133: while(!batteryDetected){
  1934  0017C8  D121               	goto	l6824
  1935  0017CA                     l6806:
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;main.c: 135: lcdHome();
  1939  0017CA  ECF6  F01B         	call	_lcdHome	;wreg free
  1940                           
  1941                           ;main.c: 136: printf("time %02ld:%02ld",time/600,(time/10)%60);
  1942  0017CE  0EC0               	movlw	low STR_2
  1943  0017D0  0100               	movlb	0	; () banked
  1944  0017D2  6FB7               	movwf	printf@f& (0+255),b
  1945  0017D4  0EFF               	movlw	high STR_2
  1946  0017D6  0100               	movlb	0	; () banked
  1947  0017D8  6FB8               	movwf	(printf@f+1)& (0+255),b
  1948  0017DA  C15C  F022         	movff	_time,___aldiv@dividend
  1949  0017DE  C15D  F023         	movff	_time+1,___aldiv@dividend+1
  1950  0017E2  C15E  F024         	movff	_time+2,___aldiv@dividend+2
  1951  0017E6  C15F  F025         	movff	_time+3,___aldiv@dividend+3
  1952  0017EA  0E58               	movlw	88
  1953  0017EC  6E26               	movwf	___aldiv@divisor,c
  1954  0017EE  0E02               	movlw	2
  1955  0017F0  6E27               	movwf	___aldiv@divisor+1,c
  1956  0017F2  0E00               	movlw	0
  1957  0017F4  6E28               	movwf	___aldiv@divisor+2,c
  1958  0017F6  0E00               	movlw	0
  1959  0017F8  6E29               	movwf	___aldiv@divisor+3,c
  1960  0017FA  EC30  F015         	call	___aldiv	;wreg free
  1961  0017FE  C022  F0B9         	movff	?___aldiv,?_printf+2
  1962  001802  C023  F0BA         	movff	?___aldiv+1,?_printf+3
  1963  001806  C024  F0BB         	movff	?___aldiv+2,?_printf+4
  1964  00180A  C025  F0BC         	movff	?___aldiv+3,?_printf+5
  1965  00180E  0E0A               	movlw	10
  1966  001810  6E26               	movwf	___aldiv@divisor,c
  1967  001812  0E00               	movlw	0
  1968  001814  6E27               	movwf	___aldiv@divisor+1,c
  1969  001816  0E00               	movlw	0
  1970  001818  6E28               	movwf	___aldiv@divisor+2,c
  1971  00181A  0E00               	movlw	0
  1972  00181C  6E29               	movwf	___aldiv@divisor+3,c
  1973  00181E  C15C  F022         	movff	_time,___aldiv@dividend
  1974  001822  C15D  F023         	movff	_time+1,___aldiv@dividend+1
  1975  001826  C15E  F024         	movff	_time+2,___aldiv@dividend+2
  1976  00182A  C15F  F025         	movff	_time+3,___aldiv@dividend+3
  1977  00182E  EC30  F015         	call	___aldiv	;wreg free
  1978  001832  C022  F030         	movff	?___aldiv,___almod@dividend
  1979  001836  C023  F031         	movff	?___aldiv+1,___almod@dividend+1
  1980  00183A  C024  F032         	movff	?___aldiv+2,___almod@dividend+2
  1981  00183E  C025  F033         	movff	?___aldiv+3,___almod@dividend+3
  1982  001842  0E3C               	movlw	60
  1983  001844  6E34               	movwf	___almod@divisor,c
  1984  001846  0E00               	movlw	0
  1985  001848  6E35               	movwf	___almod@divisor+1,c
  1986  00184A  0E00               	movlw	0
  1987  00184C  6E36               	movwf	___almod@divisor+2,c
  1988  00184E  0E00               	movlw	0
  1989  001850  6E37               	movwf	___almod@divisor+3,c
  1990  001852  ECB5  F016         	call	___almod	;wreg free
  1991  001856  C030  F0BD         	movff	?___almod,?_printf+6
  1992  00185A  C031  F0BE         	movff	?___almod+1,?_printf+7
  1993  00185E  C032  F0BF         	movff	?___almod+2,?_printf+8
  1994  001862  C033  F0C0         	movff	?___almod+3,?_printf+9
  1995  001866  EC09  F000         	call	_printf	;wreg free
  1996                           
  1997                           ;main.c: 137: _delay((unsigned long)((77)*(10000000/4000.0)));
  1998  00186A  0EFA               	movlw	250
  1999  00186C  0100               	movlb	0	; () banked
  2000  00186E  6FE7               	movwf	??_main& (0+255),b
  2001  001870  0EFF               	movlw	255
  2002  001872                     u7387:
  2003  001872  2EE8               	decfsz	wreg,f,c
  2004  001874  D7FE               	bra	u7387
  2005  001876  2FE7               	decfsz	??_main& (0+255),f,b
  2006  001878  D7FC               	bra	u7387
  2007                           
  2008                           ;main.c: 140: if(time - cylinderStart >= cylinderDur)
  2009  00187A  C126  F0E7         	movff	main@cylinderDur,??_main
  2010  00187E  C127  F0E8         	movff	main@cylinderDur+1,??_main+1
  2011  001882  0E00               	movlw	0
  2012  001884  0100               	movlb	0	; () banked
  2013  001886  BFE8               	btfsc	(??_main+1)& (0+255),7,b
  2014  001888  0EFF               	movlw	255
  2015  00188A  6FE9               	movwf	(??_main+2)& (0+255),b
  2016  00188C  6FEA               	movwf	(??_main+3)& (0+255),b
  2017  00188E  C124  F0EB         	movff	main@cylinderStart,??_main+4
  2018  001892  C125  F0EC         	movff	main@cylinderStart+1,??_main+5
  2019  001896  0E00               	movlw	0
  2020  001898  0100               	movlb	0	; () banked
  2021  00189A  BFEC               	btfsc	(??_main+5)& (0+255),7,b
  2022  00189C  0EFF               	movlw	255
  2023  00189E  6FED               	movwf	(??_main+6)& (0+255),b
  2024  0018A0  6FEE               	movwf	(??_main+7)& (0+255),b
  2025  0018A2  0100               	movlb	0	; () banked
  2026  0018A4  1FEB               	comf	(??_main+4)& (0+255),f,b
  2027  0018A6  1FEC               	comf	(??_main+5)& (0+255),f,b
  2028  0018A8  1FED               	comf	(??_main+6)& (0+255),f,b
  2029  0018AA  1FEE               	comf	(??_main+7)& (0+255),f,b
  2030  0018AC  2BEB               	incf	(??_main+4)& (0+255),f,b
  2031  0018AE  0E00               	movlw	0
  2032  0018B0  23EC               	addwfc	(??_main+5)& (0+255),f,b
  2033  0018B2  23ED               	addwfc	(??_main+6)& (0+255),f,b
  2034  0018B4  23EE               	addwfc	(??_main+7)& (0+255),f,b
  2035  0018B6  0101               	movlb	1	; () banked
  2036  0018B8  515C               	movf	_time& (0+255),w,b
  2037  0018BA  0100               	movlb	0	; () banked
  2038  0018BC  25EB               	addwf	(??_main+4)& (0+255),w,b
  2039  0018BE  0100               	movlb	0	; () banked
  2040  0018C0  6FEF               	movwf	(??_main+8)& (0+255),b
  2041  0018C2  0101               	movlb	1	; () banked
  2042  0018C4  515D               	movf	(_time+1)& (0+255),w,b
  2043  0018C6  0100               	movlb	0	; () banked
  2044  0018C8  21EC               	addwfc	(??_main+5)& (0+255),w,b
  2045  0018CA  0100               	movlb	0	; () banked
  2046  0018CC  6FF0               	movwf	(??_main+9)& (0+255),b
  2047  0018CE  0101               	movlb	1	; () banked
  2048  0018D0  515E               	movf	(_time+2)& (0+255),w,b
  2049  0018D2  0100               	movlb	0	; () banked
  2050  0018D4  21ED               	addwfc	(??_main+6)& (0+255),w,b
  2051  0018D6  0100               	movlb	0	; () banked
  2052  0018D8  6FF1               	movwf	(??_main+10)& (0+255),b
  2053  0018DA  0101               	movlb	1	; () banked
  2054  0018DC  515F               	movf	(_time+3)& (0+255),w,b
  2055  0018DE  0100               	movlb	0	; () banked
  2056  0018E0  21EE               	addwfc	(??_main+7)& (0+255),w,b
  2057  0018E2  0100               	movlb	0	; () banked
  2058  0018E4  6FF2               	movwf	(??_main+11)& (0+255),b
  2059  0018E6  0100               	movlb	0	; () banked
  2060  0018E8  51E7               	movf	??_main& (0+255),w,b
  2061  0018EA  0100               	movlb	0	; () banked
  2062  0018EC  5DEF               	subwf	(??_main+8)& (0+255),w,b
  2063  0018EE  0100               	movlb	0	; () banked
  2064  0018F0  51E8               	movf	(??_main+1)& (0+255),w,b
  2065  0018F2  0100               	movlb	0	; () banked
  2066  0018F4  59F0               	subwfb	(??_main+9)& (0+255),w,b
  2067  0018F6  0100               	movlb	0	; () banked
  2068  0018F8  51E9               	movf	(??_main+2)& (0+255),w,b
  2069  0018FA  0100               	movlb	0	; () banked
  2070  0018FC  59F1               	subwfb	(??_main+10)& (0+255),w,b
  2071  0018FE  0100               	movlb	0	; () banked
  2072  001900  51F2               	movf	(??_main+11)& (0+255),w,b
  2073  001902  0A80               	xorlw	128
  2074  001904  0100               	movlb	0	; () banked
  2075  001906  6FF3               	movwf	(??_main+12)& (0+255),b
  2076  001908  0100               	movlb	0	; () banked
  2077  00190A  51EA               	movf	(??_main+3)& (0+255),w,b
  2078  00190C  0A80               	xorlw	128
  2079  00190E  0100               	movlb	0	; () banked
  2080  001910  59F3               	subwfb	(??_main+12)& (0+255),w,b
  2081  001912  A0D8               	btfss	status,0,c
  2082  001914  D02E               	goto	l6820
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;main.c: 141: {
  2086                           ;main.c: 142: int prev = digitalRead(cylinderDir);
  2087  001916  0E34               	movlw	low _cylinderDir
  2088  001918  6E22               	movwf	digitalRead@pin,c
  2089  00191A  0E01               	movlw	high _cylinderDir
  2090  00191C  6E23               	movwf	digitalRead@pin+1,c
  2091  00191E  EC51  F014         	call	_digitalRead	;wreg free
  2092  001922  C022  F128         	movff	?_digitalRead,main@prev
  2093  001926  C023  F129         	movff	?_digitalRead+1,main@prev+1
  2094                           
  2095                           ;main.c: 143: digitalWrite(cylinderDir, !prev);
  2096  00192A  0E34               	movlw	low _cylinderDir
  2097  00192C  6E22               	movwf	digitalWrite@pin,c
  2098  00192E  0E01               	movlw	high _cylinderDir
  2099  001930  6E23               	movwf	digitalWrite@pin+1,c
  2100  001932  0101               	movlb	1	; () banked
  2101  001934  5128               	movf	main@prev& (0+255),w,b
  2102  001936  0101               	movlb	1	; () banked
  2103  001938  1129               	iorwf	(main@prev+1)& (0+255),w,b
  2104  00193A  A4D8               	btfss	status,2,c
  2105  00193C  D002               	goto	u7300
  2106  00193E  0E01               	movlw	1
  2107  001940  D001               	goto	u7310
  2108  001942                     u7300:
  2109  001942  0E00               	movlw	0
  2110  001944                     u7310:
  2111  001944  6E24               	movwf	digitalWrite@val,c
  2112  001946  6A25               	clrf	digitalWrite@val+1,c
  2113  001948  EC96  F015         	call	_digitalWrite	;wreg free
  2114                           
  2115                           ;main.c: 144: if(prev)cylinderDur = cylinderBackward;
  2116  00194C  0101               	movlb	1	; () banked
  2117  00194E  5128               	movf	main@prev& (0+255),w,b
  2118  001950  0101               	movlb	1	; () banked
  2119  001952  1129               	iorwf	(main@prev+1)& (0+255),w,b
  2120  001954  B4D8               	btfsc	status,2,c
  2121  001956  D005               	goto	l122
  2122                           
  2123                           ; BSR set to: 1
  2124  001958  C120  F126         	movff	main@cylinderBackward,main@cylinderDur
  2125  00195C  C121  F127         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2126  001960  D004               	goto	l123
  2127  001962                     l122:
  2128                           
  2129                           ; BSR set to: 1
  2130                           ;main.c: 145: else cylinderDur = cylinderForward;
  2131  001962  C11E  F126         	movff	main@cylinderForward,main@cylinderDur
  2132  001966  C11F  F127         	movff	main@cylinderForward+1,main@cylinderDur+1
  2133  00196A                     l123:
  2134                           
  2135                           ; BSR set to: 1
  2136                           ;main.c: 146: cylinderStart = time;
  2137  00196A  C15C  F124         	movff	_time,main@cylinderStart
  2138  00196E  C15D  F125         	movff	_time+1,main@cylinderStart+1
  2139  001972                     l6820:
  2140                           
  2141                           ;main.c: 147: }
  2142                           ;main.c: 149: if(time - lastBatteryTime > stoppingTime)
  2143  001972  C122  F0E7         	movff	main@lastBatteryTime,??_main
  2144  001976  C123  F0E8         	movff	main@lastBatteryTime+1,??_main+1
  2145  00197A  0E00               	movlw	0
  2146  00197C  0100               	movlb	0	; () banked
  2147  00197E  BFE8               	btfsc	(??_main+1)& (0+255),7,b
  2148  001980  0EFF               	movlw	255
  2149  001982  6FE9               	movwf	(??_main+2)& (0+255),b
  2150  001984  6FEA               	movwf	(??_main+3)& (0+255),b
  2151  001986  0100               	movlb	0	; () banked
  2152  001988  1FE7               	comf	??_main& (0+255),f,b
  2153  00198A  1FE8               	comf	(??_main+1)& (0+255),f,b
  2154  00198C  1FE9               	comf	(??_main+2)& (0+255),f,b
  2155  00198E  1FEA               	comf	(??_main+3)& (0+255),f,b
  2156  001990  2BE7               	incf	??_main& (0+255),f,b
  2157  001992  0E00               	movlw	0
  2158  001994  23E8               	addwfc	(??_main+1)& (0+255),f,b
  2159  001996  23E9               	addwfc	(??_main+2)& (0+255),f,b
  2160  001998  23EA               	addwfc	(??_main+3)& (0+255),f,b
  2161  00199A  0101               	movlb	1	; () banked
  2162  00199C  515C               	movf	_time& (0+255),w,b
  2163  00199E  0100               	movlb	0	; () banked
  2164  0019A0  25E7               	addwf	??_main& (0+255),w,b
  2165  0019A2  0100               	movlb	0	; () banked
  2166  0019A4  6FEB               	movwf	(??_main+4)& (0+255),b
  2167  0019A6  0101               	movlb	1	; () banked
  2168  0019A8  515D               	movf	(_time+1)& (0+255),w,b
  2169  0019AA  0100               	movlb	0	; () banked
  2170  0019AC  21E8               	addwfc	(??_main+1)& (0+255),w,b
  2171  0019AE  0100               	movlb	0	; () banked
  2172  0019B0  6FEC               	movwf	(??_main+5)& (0+255),b
  2173  0019B2  0101               	movlb	1	; () banked
  2174  0019B4  515E               	movf	(_time+2)& (0+255),w,b
  2175  0019B6  0100               	movlb	0	; () banked
  2176  0019B8  21E9               	addwfc	(??_main+2)& (0+255),w,b
  2177  0019BA  0100               	movlb	0	; () banked
  2178  0019BC  6FED               	movwf	(??_main+6)& (0+255),b
  2179  0019BE  0101               	movlb	1	; () banked
  2180  0019C0  515F               	movf	(_time+3)& (0+255),w,b
  2181  0019C2  0100               	movlb	0	; () banked
  2182  0019C4  21EA               	addwfc	(??_main+3)& (0+255),w,b
  2183  0019C6  0100               	movlb	0	; () banked
  2184  0019C8  6FEE               	movwf	(??_main+7)& (0+255),b
  2185  0019CA  0E00               	movlw	0
  2186  0019CC  0101               	movlb	1	; () banked
  2187  0019CE  BF2F               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2188  0019D0  0EFF               	movlw	255
  2189  0019D2  0100               	movlb	0	; () banked
  2190  0019D4  6FF0               	movwf	(??_main+9)& (0+255),b
  2191  0019D6  0A80               	xorlw	128
  2192  0019D8  6FEF               	movwf	(??_main+8)& (0+255),b
  2193  0019DA  0100               	movlb	0	; () banked
  2194  0019DC  51EB               	movf	(??_main+4)& (0+255),w,b
  2195  0019DE  0101               	movlb	1	; () banked
  2196  0019E0  5D2E               	subwf	_stoppingTime& (0+255),w,b
  2197  0019E2  0100               	movlb	0	; () banked
  2198  0019E4  51EC               	movf	(??_main+5)& (0+255),w,b
  2199  0019E6  0101               	movlb	1	; () banked
  2200  0019E8  592F               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2201  0019EA  0100               	movlb	0	; () banked
  2202  0019EC  51ED               	movf	(??_main+6)& (0+255),w,b
  2203  0019EE  0100               	movlb	0	; () banked
  2204  0019F0  59F0               	subwfb	(??_main+9)& (0+255),w,b
  2205  0019F2  0100               	movlb	0	; () banked
  2206  0019F4  51EE               	movf	(??_main+7)& (0+255),w,b
  2207  0019F6  0A80               	xorlw	128
  2208  0019F8  0100               	movlb	0	; () banked
  2209  0019FA  59EF               	subwfb	(??_main+8)& (0+255),w,b
  2210  0019FC  B0D8               	btfsc	status,0,c
  2211  0019FE  D006               	goto	l6824
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;main.c: 150: {
  2215                           ;main.c: 151: terminate = 1;
  2216  001A00  0E00               	movlw	0
  2217  001A02  0101               	movlb	1	; () banked
  2218  001A04  6F6B               	movwf	(_terminate+1)& (0+255),b
  2219  001A06  0E01               	movlw	1
  2220  001A08  6F6A               	movwf	_terminate& (0+255),b
  2221                           
  2222                           ;main.c: 152: break;
  2223  001A0A  D006               	goto	l6826
  2224  001A0C                     l6824:
  2225  001A0C  0101               	movlb	1	; () banked
  2226  001A0E  5160               	movf	_batteryDetected& (0+255),w,b
  2227  001A10  0101               	movlb	1	; () banked
  2228  001A12  1161               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2229  001A14  B4D8               	btfsc	status,2,c
  2230  001A16  D6D9               	goto	l6806
  2231  001A18                     l6826:
  2232                           
  2233                           ; BSR set to: 1
  2234                           ;main.c: 153: }
  2235                           ;main.c: 154: }
  2236                           ;main.c: 156: if(terminate)break;
  2237  001A18  0101               	movlb	1	; () banked
  2238  001A1A  516A               	movf	_terminate& (0+255),w,b
  2239  001A1C  0101               	movlb	1	; () banked
  2240  001A1E  116B               	iorwf	(_terminate+1)& (0+255),w,b
  2241  001A20  A4D8               	btfss	status,2,c
  2242  001A22  D00C               	goto	l6836
  2243                           
  2244                           ; BSR set to: 1
  2245                           ;main.c: 158: sortBattery();
  2246                           
  2247                           ; BSR set to: 1
  2248                           
  2249                           ; BSR set to: 1
  2250  001A24  EC05  F007         	call	_sortBattery	;wreg free
  2251                           
  2252                           ;main.c: 161: lastBatteryTime = time;
  2253  001A28  C15C  F122         	movff	_time,main@lastBatteryTime
  2254  001A2C  C15D  F123         	movff	_time+1,main@lastBatteryTime+1
  2255                           
  2256                           ;main.c: 162: batteryDetected = 0;
  2257  001A30  0E00               	movlw	0
  2258  001A32  0101               	movlb	1	; () banked
  2259  001A34  6F61               	movwf	(_batteryDetected+1)& (0+255),b
  2260  001A36  0E00               	movlw	0
  2261  001A38  6F60               	movwf	_batteryDetected& (0+255),b
  2262                           
  2263                           ; BSR set to: 1
  2264  001A3A  D6A5               	goto	l6798
  2265  001A3C                     l6836:
  2266                           
  2267                           ; BSR set to: 1
  2268                           ;main.c: 163: }
  2269                           ;main.c: 166: printf("[AA,C,9V,OTHER]\n");
  2270  001A3C  0EAF               	movlw	low STR_3
  2271  001A3E  0100               	movlb	0	; () banked
  2272  001A40  6FB7               	movwf	printf@f& (0+255),b
  2273  001A42  0EFF               	movlw	high STR_3
  2274  001A44  0100               	movlb	0	; () banked
  2275  001A46  6FB8               	movwf	(printf@f+1)& (0+255),b
  2276  001A48  EC09  F000         	call	_printf	;wreg free
  2277                           
  2278                           ;main.c: 167: printf("[%d,%d,%d,%d]",n_AA,n_C,n_9V,n_OTHER);
  2279  001A4C  0EE0               	movlw	low STR_4
  2280  001A4E  0100               	movlb	0	; () banked
  2281  001A50  6FB7               	movwf	printf@f& (0+255),b
  2282  001A52  0EFF               	movlw	high STR_4
  2283  001A54  0100               	movlb	0	; () banked
  2284  001A56  6FB8               	movwf	(printf@f+1)& (0+255),b
  2285  001A58  C164  F0B9         	movff	_n_AA,?_printf+2
  2286  001A5C  C165  F0BA         	movff	_n_AA+1,?_printf+3
  2287  001A60  C166  F0BB         	movff	_n_C,?_printf+4
  2288  001A64  C167  F0BC         	movff	_n_C+1,?_printf+5
  2289  001A68  C162  F0BD         	movff	_n_9V,?_printf+6
  2290  001A6C  C163  F0BE         	movff	_n_9V+1,?_printf+7
  2291  001A70  C168  F0BF         	movff	_n_OTHER,?_printf+8
  2292  001A74  C169  F0C0         	movff	_n_OTHER+1,?_printf+9
  2293  001A78  EC09  F000         	call	_printf	;wreg free
  2294                           
  2295                           ;main.c: 168: readKeypad();
  2296  001A7C  EC40  F01B         	call	_readKeypad	;wreg free
  2297  001A80  D648               	goto	l6786
  2298  001A82                     l131:
  2299  001A82  D7FF               	goto	l131
  2300  001A84                     __end_of_main:
  2301                           	opt stack 0
  2302                           tblptru	equ	0xFF8
  2303                           tblptrh	equ	0xFF7
  2304                           tblptrl	equ	0xFF6
  2305                           tablat	equ	0xFF5
  2306                           postinc0	equ	0xFEE
  2307                           wreg	equ	0xFE8
  2308                           postdec1	equ	0xFE5
  2309                           fsr1l	equ	0xFE1
  2310                           status	equ	0xFD8
  2311                           
  2312 ;; *************** function _sortBattery *****************
  2313 ;; Defined at:
  2314 ;;		line 176 in file "main.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;		None
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  V               3   15[BANK1 ] float 
  2319 ;;  i               2   21[BANK1 ] int 
  2320 ;;  i               3   25[BANK1 ] float 
  2321 ;;  V_max           3   18[BANK1 ] float 
  2322 ;;  resolution      3   12[BANK1 ] float 
  2323 ;;  Vcc             3    9[BANK1 ] float 
  2324 ;;  V_float         3    4[BANK1 ] float 
  2325 ;;  V               2   28[BANK1 ] int 
  2326 ;;  targetAngle     2   23[BANK1 ] int 
  2327 ;;  signal          2    7[BANK1 ] int 
  2328 ;;  pos_v_counte    2    0[BANK1 ] int 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;      Totals:         0       2      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;Total ram usage:       32 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; Hardware stack levels required when called:    8
  2345 ;; This function calls:
  2346 ;;		___altoft
  2347 ;;		___awtoft
  2348 ;;		___ftdiv
  2349 ;;		___ftge
  2350 ;;		___ftmul
  2351 ;;		___ftsub
  2352 ;;		___fttol
  2353 ;;		_analogRead
  2354 ;;		_digitalRead
  2355 ;;		_digitalWrite
  2356 ;;		_printf
  2357 ;;		_readKeypad
  2358 ;;		_setAngle
  2359 ;; This function is called by:
  2360 ;;		_main
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text1
  2365  000E0A                     __ptext1:
  2366                           	opt stack 0
  2367  000E0A                     _sortBattery:
  2368                           	opt stack 22
  2369                           
  2370                           ;main.c: 179: setAngle(conveyorServo, 90);
  2371                           
  2372                           ;incstack = 0
  2373  000E0A  0E30               	movlw	low _conveyorServo
  2374  000E0C  0100               	movlb	0	; () banked
  2375  000E0E  6FCE               	movwf	setAngle@motor& (0+255),b
  2376  000E10  0E01               	movlw	high _conveyorServo
  2377  000E12  0100               	movlb	0	; () banked
  2378  000E14  6FCF               	movwf	(setAngle@motor+1)& (0+255),b
  2379  000E16  0E00               	movlw	0
  2380  000E18  0100               	movlb	0	; () banked
  2381  000E1A  6FD1               	movwf	(setAngle@angle+1)& (0+255),b
  2382  000E1C  0E5A               	movlw	90
  2383  000E1E  6FD0               	movwf	setAngle@angle& (0+255),b
  2384  000E20  ECC6  F014         	call	_setAngle	;wreg free
  2385                           
  2386                           ;main.c: 180: digitalWrite(cylinderMotor, 0);
  2387  000E24  0E38               	movlw	low _cylinderMotor
  2388  000E26  6E22               	movwf	digitalWrite@pin,c
  2389  000E28  0E01               	movlw	high _cylinderMotor
  2390  000E2A  6E23               	movwf	digitalWrite@pin+1,c
  2391  000E2C  0E00               	movlw	0
  2392  000E2E  6E25               	movwf	digitalWrite@val+1,c
  2393  000E30  0E00               	movlw	0
  2394  000E32  6E24               	movwf	digitalWrite@val,c
  2395  000E34  EC96  F015         	call	_digitalWrite	;wreg free
  2396                           
  2397                           ;main.c: 183: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2398  000E38  0E0D               	movlw	13
  2399  000E3A  0100               	movlb	0	; () banked
  2400  000E3C  6FE6               	movwf	(??_sortBattery+1)& (0+255),b
  2401  000E3E  0EAF               	movlw	175
  2402  000E40  0100               	movlb	0	; () banked
  2403  000E42  6FE5               	movwf	??_sortBattery& (0+255),b
  2404  000E44  0EB6               	movlw	182
  2405  000E46                     u7397:
  2406  000E46  2EE8               	decfsz	wreg,f,c
  2407  000E48  D7FE               	bra	u7397
  2408  000E4A  2FE5               	decfsz	??_sortBattery& (0+255),f,b
  2409  000E4C  D7FC               	bra	u7397
  2410  000E4E  2FE6               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2411  000E50  D7FA               	bra	u7397
  2412  000E52  F000               	nop	
  2413                           
  2414                           ;main.c: 185: float Vcc = 5.00;
  2415  000E54  0E00               	movlw	0
  2416  000E56  0101               	movlb	1	; () banked
  2417  000E58  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2418  000E5A  0EA0               	movlw	160
  2419  000E5C  0101               	movlb	1	; () banked
  2420  000E5E  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2421  000E60  0E40               	movlw	64
  2422  000E62  0101               	movlb	1	; () banked
  2423  000E64  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2424                           
  2425                           ; BSR set to: 1
  2426                           ;main.c: 186: float resolution = (1<<10) - 1;
  2427  000E66  0EC0               	movlw	192
  2428  000E68  0101               	movlb	1	; () banked
  2429  000E6A  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2430  000E6C  0E7F               	movlw	127
  2431  000E6E  0101               	movlb	1	; () banked
  2432  000E70  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2433  000E72  0E44               	movlw	68
  2434  000E74  0101               	movlb	1	; () banked
  2435  000E76  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2436                           
  2437                           ; BSR set to: 1
  2438                           ;main.c: 187: float V_max = 0;
  2439  000E78  0E00               	movlw	0
  2440  000E7A  0101               	movlb	1	; () banked
  2441  000E7C  6F12               	movwf	sortBattery@V_max& (0+255),b
  2442  000E7E  0E00               	movlw	0
  2443  000E80  0101               	movlb	1	; () banked
  2444  000E82  6F13               	movwf	(sortBattery@V_max+1)& (0+255),b
  2445  000E84  0E00               	movlw	0
  2446  000E86  0101               	movlb	1	; () banked
  2447  000E88  6F14               	movwf	(sortBattery@V_max+2)& (0+255),b
  2448                           
  2449                           ; BSR set to: 1
  2450                           ;main.c: 188: float V_float = 0;
  2451  000E8A  0E00               	movlw	0
  2452  000E8C  0101               	movlb	1	; () banked
  2453  000E8E  6F04               	movwf	sortBattery@V_float& (0+255),b
  2454  000E90  0E00               	movlw	0
  2455  000E92  0101               	movlb	1	; () banked
  2456  000E94  6F05               	movwf	(sortBattery@V_float+1)& (0+255),b
  2457  000E96  0E00               	movlw	0
  2458  000E98  0101               	movlb	1	; () banked
  2459  000E9A  6F06               	movwf	(sortBattery@V_float+2)& (0+255),b
  2460                           
  2461                           ; BSR set to: 1
  2462                           ;main.c: 189: int pos_v_counter = 1;
  2463  000E9C  0E00               	movlw	0
  2464  000E9E  0101               	movlb	1	; () banked
  2465  000EA0  6F01               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2466  000EA2  0E01               	movlw	1
  2467  000EA4  6F00               	movwf	sortBattery@pos_v_counter& (0+255),b
  2468                           
  2469                           ; BSR set to: 1
  2470                           ;main.c: 190: int signal = 0;
  2471  000EA6  0E00               	movlw	0
  2472  000EA8  0101               	movlb	1	; () banked
  2473  000EAA  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2474  000EAC  0E00               	movlw	0
  2475  000EAE  6F07               	movwf	sortBattery@signal& (0+255),b
  2476                           
  2477                           ; BSR set to: 1
  2478                           ;main.c: 194: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2479  000EB0  C12A  F02A         	movff	_padAngle_NEUTRAL,___awtoft@c
  2480  000EB4  C12B  F02B         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2481  000EB8  ECD2  F01A         	call	___awtoft	;wreg free
  2482  000EBC  C02A  F119         	movff	?___awtoft,sortBattery@i
  2483  000EC0  C02B  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2484  000EC4  C02C  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2485  000EC8  D0E3               	goto	l6712
  2486  000ECA                     l6690:
  2487                           
  2488                           ;main.c: 195: setAngle(padServo, i);
  2489  000ECA  C119  F0A8         	movff	sortBattery@i,___fttol@f1
  2490  000ECE  C11A  F0A9         	movff	sortBattery@i+1,___fttol@f1+1
  2491  000ED2  C11B  F0AA         	movff	sortBattery@i+2,___fttol@f1+2
  2492  000ED6  ECFB  F010         	call	___fttol	;wreg free
  2493  000EDA  C0A8  F102         	movff	?___fttol,_sortBattery$1336
  2494  000EDE  C0A9  F103         	movff	?___fttol+1,_sortBattery$1336+1
  2495                           
  2496                           ;main.c: 195: setAngle(padServo, i);
  2497  000EE2  0E44               	movlw	low _padServo
  2498  000EE4  0100               	movlb	0	; () banked
  2499  000EE6  6FCE               	movwf	setAngle@motor& (0+255),b
  2500  000EE8  0E01               	movlw	high _padServo
  2501  000EEA  0100               	movlb	0	; () banked
  2502  000EEC  6FCF               	movwf	(setAngle@motor+1)& (0+255),b
  2503  000EEE  C102  F0D0         	movff	_sortBattery$1336,setAngle@angle
  2504  000EF2  C103  F0D1         	movff	_sortBattery$1336+1,setAngle@angle+1
  2505  000EF6  ECC6  F014         	call	_setAngle	;wreg free
  2506                           
  2507                           ;main.c: 196: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2508  000EFA  0E53               	movlw	83
  2509  000EFC                     u7407:
  2510  000EFC  2EE8               	decfsz	wreg,f,c
  2511  000EFE  D7FE               	bra	u7407
  2512  000F00  F000               	nop	
  2513                           
  2514                           ;main.c: 197: digitalWrite(AA_float, 1);
  2515  000F02  0E4F               	movlw	low _AA_float
  2516  000F04  6E22               	movwf	digitalWrite@pin,c
  2517  000F06  0E00               	movlw	high _AA_float
  2518  000F08  6E23               	movwf	digitalWrite@pin+1,c
  2519  000F0A  0E00               	movlw	0
  2520  000F0C  6E25               	movwf	digitalWrite@val+1,c
  2521  000F0E  0E01               	movlw	1
  2522  000F10  6E24               	movwf	digitalWrite@val,c
  2523  000F12  EC96  F015         	call	_digitalWrite	;wreg free
  2524                           
  2525                           ;main.c: 198: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2526  000F16  C10C  F037         	movff	sortBattery@resolution,___ftdiv@f2
  2527  000F1A  C10D  F038         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2528  000F1E  C10E  F039         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2529  000F22  C055  F022         	movff	_padPin3+2,analogRead@channel
  2530  000F26  C056  F023         	movff	_padPin3+3,analogRead@channel+1
  2531  000F2A  ECB6  F01A         	call	_analogRead	;wreg free
  2532  000F2E  C022  F02A         	movff	?_analogRead,___altoft@c
  2533  000F32  C023  F02B         	movff	?_analogRead+1,___altoft@c+1
  2534  000F36  C024  F02C         	movff	?_analogRead+2,___altoft@c+2
  2535  000F3A  C025  F02D         	movff	?_analogRead+3,___altoft@c+3
  2536  000F3E  EC9D  F018         	call	___altoft	;wreg free
  2537  000F42  C02A  F034         	movff	?___altoft,___ftdiv@f1
  2538  000F46  C02B  F035         	movff	?___altoft+1,___ftdiv@f1+1
  2539  000F4A  C02C  F036         	movff	?___altoft+2,___ftdiv@f1+2
  2540  000F4E  ECCF  F013         	call	___ftdiv	;wreg free
  2541  000F52  C034  F086         	movff	?___ftdiv,___ftmul@f1
  2542  000F56  C035  F087         	movff	?___ftdiv+1,___ftmul@f1+1
  2543  000F5A  C036  F088         	movff	?___ftdiv+2,___ftmul@f1+2
  2544  000F5E  C109  F089         	movff	sortBattery@Vcc,___ftmul@f2
  2545  000F62  C10A  F08A         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2546  000F66  C10B  F08B         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2547  000F6A  EC52  F010         	call	___ftmul	;wreg free
  2548  000F6E  C086  F10F         	movff	?___ftmul,sortBattery@V
  2549  000F72  C087  F110         	movff	?___ftmul+1,sortBattery@V+1
  2550  000F76  C088  F111         	movff	?___ftmul+2,sortBattery@V+2
  2551                           
  2552                           ;main.c: 200: if(V > V_max) {
  2553  000F7A  C112  F02E         	movff	sortBattery@V_max,___ftge@ff1
  2554  000F7E  C113  F02F         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2555  000F82  C114  F030         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2556  000F86  C10F  F031         	movff	sortBattery@V,___ftge@ff2
  2557  000F8A  C110  F032         	movff	sortBattery@V+1,___ftge@ff2+1
  2558  000F8E  C111  F033         	movff	sortBattery@V+2,___ftge@ff2+2
  2559  000F92  EC0B  F017         	call	___ftge	;wreg free
  2560  000F96  B0D8               	btfsc	status,0,c
  2561  000F98  D064               	goto	l6710
  2562                           
  2563                           ;main.c: 201: signal = digitalRead(padPin1)<<1;
  2564  000F9A  0E3C               	movlw	low _padPin1
  2565  000F9C  6E22               	movwf	digitalRead@pin,c
  2566  000F9E  0E01               	movlw	high _padPin1
  2567  000FA0  6E23               	movwf	digitalRead@pin+1,c
  2568  000FA2  EC51  F014         	call	_digitalRead	;wreg free
  2569  000FA6  90D8               	bcf	status,0,c
  2570  000FA8  3422               	rlcf	?_digitalRead,w,c
  2571  000FAA  0101               	movlb	1	; () banked
  2572  000FAC  6F07               	movwf	sortBattery@signal& (0+255),b
  2573  000FAE  3423               	rlcf	?_digitalRead+1,w,c
  2574  000FB0  0101               	movlb	1	; () banked
  2575  000FB2  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2576                           
  2577                           ;main.c: 202: signal |= digitalRead(padPin2)<<0;
  2578  000FB4  0E40               	movlw	low _padPin2
  2579  000FB6  6E22               	movwf	digitalRead@pin,c
  2580  000FB8  0E01               	movlw	high _padPin2
  2581  000FBA  6E23               	movwf	digitalRead@pin+1,c
  2582  000FBC  EC51  F014         	call	_digitalRead	;wreg free
  2583  000FC0  5022               	movf	?_digitalRead,w,c
  2584  000FC2  0101               	movlb	1	; () banked
  2585  000FC4  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2586  000FC6  5023               	movf	?_digitalRead+1,w,c
  2587  000FC8  0101               	movlb	1	; () banked
  2588  000FCA  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2589                           
  2590                           ; BSR set to: 1
  2591                           ;main.c: 204: V_max = V;
  2592  000FCC  C10F  F112         	movff	sortBattery@V,sortBattery@V_max
  2593  000FD0  C110  F113         	movff	sortBattery@V+1,sortBattery@V_max+1
  2594  000FD4  C111  F114         	movff	sortBattery@V+2,sortBattery@V_max+2
  2595                           
  2596                           ;main.c: 207: digitalWrite(AA_float, 0);
  2597  000FD8  0E4F               	movlw	low _AA_float
  2598  000FDA  6E22               	movwf	digitalWrite@pin,c
  2599  000FDC  0E00               	movlw	high _AA_float
  2600  000FDE  6E23               	movwf	digitalWrite@pin+1,c
  2601  000FE0  0E00               	movlw	0
  2602  000FE2  6E25               	movwf	digitalWrite@val+1,c
  2603  000FE4  0E00               	movlw	0
  2604  000FE6  6E24               	movwf	digitalWrite@val,c
  2605  000FE8  EC96  F015         	call	_digitalWrite	;wreg free
  2606                           
  2607                           ;main.c: 208: _delay((unsigned long)((1)*(10000000/4000.0)));
  2608  000FEC  0E04               	movlw	4
  2609  000FEE  0100               	movlb	0	; () banked
  2610  000FF0  6FE5               	movwf	??_sortBattery& (0+255),b
  2611  000FF2  0E3D               	movlw	61
  2612  000FF4                     u7417:
  2613  000FF4  2EE8               	decfsz	wreg,f,c
  2614  000FF6  D7FE               	bra	u7417
  2615  000FF8  2FE5               	decfsz	??_sortBattery& (0+255),f,b
  2616  000FFA  D7FC               	bra	u7417
  2617  000FFC  D000               	nop2	
  2618                           
  2619                           ;main.c: 209: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2620  000FFE  C10C  F037         	movff	sortBattery@resolution,___ftdiv@f2
  2621  001002  C10D  F038         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2622  001006  C10E  F039         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2623  00100A  C055  F022         	movff	_padPin3+2,analogRead@channel
  2624  00100E  C056  F023         	movff	_padPin3+3,analogRead@channel+1
  2625  001012  ECB6  F01A         	call	_analogRead	;wreg free
  2626  001016  C022  F02A         	movff	?_analogRead,___altoft@c
  2627  00101A  C023  F02B         	movff	?_analogRead+1,___altoft@c+1
  2628  00101E  C024  F02C         	movff	?_analogRead+2,___altoft@c+2
  2629  001022  C025  F02D         	movff	?_analogRead+3,___altoft@c+3
  2630  001026  EC9D  F018         	call	___altoft	;wreg free
  2631  00102A  C02A  F034         	movff	?___altoft,___ftdiv@f1
  2632  00102E  C02B  F035         	movff	?___altoft+1,___ftdiv@f1+1
  2633  001032  C02C  F036         	movff	?___altoft+2,___ftdiv@f1+2
  2634  001036  ECCF  F013         	call	___ftdiv	;wreg free
  2635  00103A  C034  F086         	movff	?___ftdiv,___ftmul@f1
  2636  00103E  C035  F087         	movff	?___ftdiv+1,___ftmul@f1+1
  2637  001042  C036  F088         	movff	?___ftdiv+2,___ftmul@f1+2
  2638  001046  C109  F089         	movff	sortBattery@Vcc,___ftmul@f2
  2639  00104A  C10A  F08A         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2640  00104E  C10B  F08B         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2641  001052  EC52  F010         	call	___ftmul	;wreg free
  2642  001056  C086  F104         	movff	?___ftmul,sortBattery@V_float
  2643  00105A  C087  F105         	movff	?___ftmul+1,sortBattery@V_float+1
  2644  00105E  C088  F106         	movff	?___ftmul+2,sortBattery@V_float+2
  2645  001062                     l6710:
  2646  001062  C119  F0A8         	movff	sortBattery@i,___ftsub@f1
  2647  001066  C11A  F0A9         	movff	sortBattery@i+1,___ftsub@f1+1
  2648  00106A  C11B  F0AA         	movff	sortBattery@i+2,___ftsub@f1+2
  2649  00106E  0ECD               	movlw	205
  2650  001070  0100               	movlb	0	; () banked
  2651  001072  6FAB               	movwf	___ftsub@f2& (0+255),b
  2652  001074  0ECC               	movlw	204
  2653  001076  0100               	movlb	0	; () banked
  2654  001078  6FAC               	movwf	(___ftsub@f2+1)& (0+255),b
  2655  00107A  0E3D               	movlw	61
  2656  00107C  0100               	movlb	0	; () banked
  2657  00107E  6FAD               	movwf	(___ftsub@f2+2)& (0+255),b
  2658  001080  ECDD  F019         	call	___ftsub	;wreg free
  2659  001084  C0A8  F119         	movff	?___ftsub,sortBattery@i
  2660  001088  C0A9  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2661  00108C  C0AA  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2662  001090                     l6712:
  2663  001090  C0F4  F02A         	movff	_padAngle_CLOSE,___awtoft@c
  2664  001094  C0F5  F02B         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2665  001098  ECD2  F01A         	call	___awtoft	;wreg free
  2666  00109C  C02A  F02E         	movff	?___awtoft,___ftge@ff1
  2667  0010A0  C02B  F02F         	movff	?___awtoft+1,___ftge@ff1+1
  2668  0010A4  C02C  F030         	movff	?___awtoft+2,___ftge@ff1+2
  2669  0010A8  C119  F031         	movff	sortBattery@i,___ftge@ff2
  2670  0010AC  C11A  F032         	movff	sortBattery@i+1,___ftge@ff2+1
  2671  0010B0  C11B  F033         	movff	sortBattery@i+2,___ftge@ff2+2
  2672  0010B4  EC0B  F017         	call	___ftge	;wreg free
  2673  0010B8  A0D8               	btfss	status,0,c
  2674  0010BA  D707               	goto	l6690
  2675                           
  2676                           ;main.c: 211: }
  2677                           ;main.c: 212: }
  2678                           ;main.c: 214: int targetAngle;
  2679                           ;main.c: 215: int V = V_max;
  2680  0010BC  C112  F0A8         	movff	sortBattery@V_max,___fttol@f1
  2681  0010C0  C113  F0A9         	movff	sortBattery@V_max+1,___fttol@f1+1
  2682  0010C4  C114  F0AA         	movff	sortBattery@V_max+2,___fttol@f1+2
  2683  0010C8  ECFB  F010         	call	___fttol	;wreg free
  2684  0010CC  C0A8  F11C         	movff	?___fttol,sortBattery@V_203
  2685  0010D0  C0A9  F11D         	movff	?___fttol+1,sortBattery@V_203+1
  2686                           
  2687                           ;main.c: 217: printf("N: %d,\nV: %.3f",pos_v_counter, V);
  2688  0010D4  0ED1               	movlw	low STR_5
  2689  0010D6  0100               	movlb	0	; () banked
  2690  0010D8  6FB7               	movwf	printf@f& (0+255),b
  2691  0010DA  0EFF               	movlw	high STR_5
  2692  0010DC  0100               	movlb	0	; () banked
  2693  0010DE  6FB8               	movwf	(printf@f+1)& (0+255),b
  2694  0010E0  C100  F0B9         	movff	sortBattery@pos_v_counter,?_printf+2
  2695  0010E4  C101  F0BA         	movff	sortBattery@pos_v_counter+1,?_printf+3
  2696  0010E8  C11C  F0BB         	movff	sortBattery@V_203,?_printf+4
  2697  0010EC  C11D  F0BC         	movff	sortBattery@V_203+1,?_printf+5
  2698  0010F0  EC09  F000         	call	_printf	;wreg free
  2699                           
  2700                           ;main.c: 219: readKeypad();
  2701  0010F4  EC40  F01B         	call	_readKeypad	;wreg free
  2702                           
  2703                           ;main.c: 223: switch(signal){
  2704  0010F8  D072               	goto	l6748
  2705  0010FA                     l6720:
  2706                           
  2707                           ;main.c: 225: if(V_float < 0.1){
  2708  0010FA  C104  F02E         	movff	sortBattery@V_float,___ftge@ff1
  2709  0010FE  C105  F02F         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2710  001102  C106  F030         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2711  001106  0ECD               	movlw	205
  2712  001108  6E31               	movwf	___ftge@ff2,c
  2713  00110A  0ECC               	movlw	204
  2714  00110C  6E32               	movwf	___ftge@ff2+1,c
  2715  00110E  0E3D               	movlw	61
  2716  001110  6E33               	movwf	___ftge@ff2+2,c
  2717  001112  EC0B  F017         	call	___ftge	;wreg free
  2718  001116  B0D8               	btfsc	status,0,c
  2719  001118  D01E               	goto	l6730
  2720                           
  2721                           ;main.c: 226: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2722  00111A  C043  F02E         	movff	_V_LIM_AA,___ftge@ff1
  2723  00111E  C044  F02F         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2724  001122  C045  F030         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2725  001126  C11C  F02A         	movff	sortBattery@V_203,___awtoft@c
  2726  00112A  C11D  F02B         	movff	sortBattery@V_203+1,___awtoft@c+1
  2727  00112E  ECD2  F01A         	call	___awtoft	;wreg free
  2728  001132  C02A  F031         	movff	?___awtoft,___ftge@ff2
  2729  001136  C02B  F032         	movff	?___awtoft+1,___ftge@ff2+1
  2730  00113A  C02C  F033         	movff	?___awtoft+2,___ftge@ff2+2
  2731  00113E  EC0B  F017         	call	___ftge	;wreg free
  2732  001142  B0D8               	btfsc	status,0,c
  2733  001144  D044               	goto	l151
  2734  001146  C12C  F117         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2735  00114A  C12D  F118         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2736  00114E  0101               	movlb	1	; () banked
  2737  001150  4B64               	infsnz	_n_AA& (0+255),f,b
  2738  001152  2B65               	incf	(_n_AA+1)& (0+255),f,b
  2739  001154  D058               	goto	l6750
  2740  001156                     l6730:
  2741                           
  2742                           ;main.c: 232: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  2743  001156  C040  F02E         	movff	_V_LIM_9V,___ftge@ff1
  2744  00115A  C041  F02F         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2745  00115E  C042  F030         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2746  001162  C11C  F02A         	movff	sortBattery@V_203,___awtoft@c
  2747  001166  C11D  F02B         	movff	sortBattery@V_203+1,___awtoft@c+1
  2748  00116A  ECD2  F01A         	call	___awtoft	;wreg free
  2749  00116E  C02A  F031         	movff	?___awtoft,___ftge@ff2
  2750  001172  C02B  F032         	movff	?___awtoft+1,___ftge@ff2+1
  2751  001176  C02C  F033         	movff	?___awtoft+2,___ftge@ff2+2
  2752  00117A  EC0B  F017         	call	___ftge	;wreg free
  2753  00117E  B0D8               	btfsc	status,0,c
  2754  001180  D026               	goto	l151
  2755  001182  C0F6  F117         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2756  001186  C0F7  F118         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2757  00118A  0101               	movlb	1	; () banked
  2758  00118C  4B62               	infsnz	_n_9V& (0+255),f,b
  2759  00118E  2B63               	incf	(_n_9V+1)& (0+255),f,b
  2760  001190  D03A               	goto	l6750
  2761  001192                     l6738:
  2762                           
  2763                           ;main.c: 236: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  2764  001192  C046  F02E         	movff	_V_LIM_C,___ftge@ff1
  2765  001196  C047  F02F         	movff	_V_LIM_C+1,___ftge@ff1+1
  2766  00119A  C048  F030         	movff	_V_LIM_C+2,___ftge@ff1+2
  2767  00119E  C11C  F02A         	movff	sortBattery@V_203,___awtoft@c
  2768  0011A2  C11D  F02B         	movff	sortBattery@V_203+1,___awtoft@c+1
  2769  0011A6  ECD2  F01A         	call	___awtoft	;wreg free
  2770  0011AA  C02A  F031         	movff	?___awtoft,___ftge@ff2
  2771  0011AE  C02B  F032         	movff	?___awtoft+1,___ftge@ff2+1
  2772  0011B2  C02C  F033         	movff	?___awtoft+2,___ftge@ff2+2
  2773  0011B6  EC0B  F017         	call	___ftge	;wreg free
  2774  0011BA  B0D8               	btfsc	status,0,c
  2775  0011BC  D008               	goto	l151
  2776  0011BE  C0F8  F117         	movff	_redirectAngle_C,sortBattery@targetAngle
  2777  0011C2  C0F9  F118         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2778  0011C6  0101               	movlb	1	; () banked
  2779  0011C8  4B66               	infsnz	_n_C& (0+255),f,b
  2780  0011CA  2B67               	incf	(_n_C+1)& (0+255),f,b
  2781  0011CC  D01C               	goto	l6750
  2782  0011CE                     l151:
  2783                           
  2784                           ;main.c: 237: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2785  0011CE  C0FA  F117         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2786  0011D2  C0FB  F118         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2787  0011D6  0101               	movlb	1	; () banked
  2788  0011D8  4B68               	infsnz	_n_OTHER& (0+255),f,b
  2789  0011DA  2B69               	incf	(_n_OTHER+1)& (0+255),f,b
  2790                           
  2791                           ; BSR set to: 1
  2792                           ;main.c: 239: }
  2793                           
  2794                           ; BSR set to: 1
  2795                           ;main.c: 238: break;
  2796  0011DC  D014               	goto	l6750
  2797  0011DE                     l6748:
  2798  0011DE  C107  F0E5         	movff	sortBattery@signal,??_sortBattery
  2799  0011E2  C108  F0E6         	movff	sortBattery@signal+1,??_sortBattery+1
  2800                           
  2801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2802                           ; Switch size 1, requested type "space"
  2803                           ; Number of cases is 1, Range of values is 0 to 0
  2804                           ; switch strategies available:
  2805                           ; Name         Instructions Cycles
  2806                           ; simple_byte            4     3 (average)
  2807                           ;	Chosen strategy is simple_byte
  2808  0011E6  0100               	movlb	0	; () banked
  2809  0011E8  51E6               	movf	(??_sortBattery+1)& (0+255),w,b
  2810  0011EA  0A00               	xorlw	0	; case 0
  2811  0011EC  A4D8               	btfss	status,2,c
  2812  0011EE  D00B               	goto	l6750
  2813                           
  2814                           ; BSR set to: 0
  2815                           ; Switch size 1, requested type "space"
  2816                           ; Number of cases is 3, Range of values is 0 to 2
  2817                           ; switch strategies available:
  2818                           ; Name         Instructions Cycles
  2819                           ; simple_byte           10     6 (average)
  2820                           ;	Chosen strategy is simple_byte
  2821  0011F0  0100               	movlb	0	; () banked
  2822  0011F2  51E5               	movf	??_sortBattery& (0+255),w,b
  2823  0011F4  0A00               	xorlw	0	; case 0
  2824  0011F6  B4D8               	btfsc	status,2,c
  2825  0011F8  D780               	goto	l6720
  2826  0011FA  0A01               	xorlw	1	; case 1
  2827  0011FC  B4D8               	btfsc	status,2,c
  2828  0011FE  D7C9               	goto	l6738
  2829  001200  0A03               	xorlw	3	; case 2
  2830  001202  B4D8               	btfsc	status,2,c
  2831  001204  D7A8               	goto	l6730
  2832  001206                     l6750:
  2833                           
  2834                           ;main.c: 241: setAngle(redirectingServo, targetAngle);
  2835  001206  0E48               	movlw	low _redirectingServo
  2836  001208  0100               	movlb	0	; () banked
  2837  00120A  6FCE               	movwf	setAngle@motor& (0+255),b
  2838  00120C  0E01               	movlw	high _redirectingServo
  2839  00120E  0100               	movlb	0	; () banked
  2840  001210  6FCF               	movwf	(setAngle@motor+1)& (0+255),b
  2841  001212  C117  F0D0         	movff	sortBattery@targetAngle,setAngle@angle
  2842  001216  C118  F0D1         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2843  00121A  ECC6  F014         	call	_setAngle	;wreg free
  2844                           
  2845                           ;main.c: 242: _delay((unsigned long)((500)*(10000000/4000.0)));
  2846  00121E  0E07               	movlw	7
  2847  001220  0100               	movlb	0	; () banked
  2848  001222  6FE6               	movwf	(??_sortBattery+1)& (0+255),b
  2849  001224  0E58               	movlw	88
  2850  001226  0100               	movlb	0	; () banked
  2851  001228  6FE5               	movwf	??_sortBattery& (0+255),b
  2852  00122A  0E59               	movlw	89
  2853  00122C                     u7427:
  2854  00122C  2EE8               	decfsz	wreg,f,c
  2855  00122E  D7FE               	bra	u7427
  2856  001230  2FE5               	decfsz	??_sortBattery& (0+255),f,b
  2857  001232  D7FC               	bra	u7427
  2858  001234  2FE6               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2859  001236  D7FA               	bra	u7427
  2860  001238  D000               	nop2	
  2861                           
  2862                           ;main.c: 246: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  2863  00123A  C0F4  F115         	movff	_padAngle_CLOSE,sortBattery@i_205
  2864  00123E  C0F5  F116         	movff	_padAngle_CLOSE+1,sortBattery@i_205+1
  2865  001242  D018               	goto	l6762
  2866  001244                     l6756:
  2867                           
  2868                           ;main.c: 247: setAngle(padServo, i);
  2869  001244  0E44               	movlw	low _padServo
  2870  001246  0100               	movlb	0	; () banked
  2871  001248  6FCE               	movwf	setAngle@motor& (0+255),b
  2872  00124A  0E01               	movlw	high _padServo
  2873  00124C  0100               	movlb	0	; () banked
  2874  00124E  6FCF               	movwf	(setAngle@motor+1)& (0+255),b
  2875  001250  C115  F0D0         	movff	sortBattery@i_205,setAngle@angle
  2876  001254  C116  F0D1         	movff	sortBattery@i_205+1,setAngle@angle+1
  2877  001258  ECC6  F014         	call	_setAngle	;wreg free
  2878                           
  2879                           ;main.c: 248: _delay((unsigned long)((3)*(10000000/4000.0)));
  2880  00125C  0E0A               	movlw	10
  2881  00125E  0100               	movlb	0	; () banked
  2882  001260  6FE5               	movwf	??_sortBattery& (0+255),b
  2883  001262  0EBC               	movlw	188
  2884  001264                     u7437:
  2885  001264  2EE8               	decfsz	wreg,f,c
  2886  001266  D7FE               	bra	u7437
  2887  001268  2FE5               	decfsz	??_sortBattery& (0+255),f,b
  2888  00126A  D7FC               	bra	u7437
  2889  00126C  F000               	nop	
  2890  00126E  0101               	movlb	1	; () banked
  2891  001270  4B15               	infsnz	sortBattery@i_205& (0+255),f,b
  2892  001272  2B16               	incf	(sortBattery@i_205+1)& (0+255),f,b
  2893  001274                     l6762:
  2894  001274  504B               	movf	_padAngle_OPEN,w,c
  2895  001276  0101               	movlb	1	; () banked
  2896  001278  5D15               	subwf	sortBattery@i_205& (0+255),w,b
  2897  00127A  0101               	movlb	1	; () banked
  2898  00127C  5116               	movf	(sortBattery@i_205+1)& (0+255),w,b
  2899  00127E  0A80               	xorlw	128
  2900  001280  0100               	movlb	0	; () banked
  2901  001282  6FE5               	movwf	??_sortBattery& (0+255),b
  2902  001284  504C               	movf	_padAngle_OPEN+1,w,c
  2903  001286  0A80               	xorlw	128
  2904  001288  0100               	movlb	0	; () banked
  2905  00128A  59E5               	subwfb	??_sortBattery& (0+255),w,b
  2906  00128C  A0D8               	btfss	status,0,c
  2907  00128E  D7DA               	goto	l6756
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;main.c: 249: }
  2911                           ;main.c: 251: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2912                           
  2913                           ; BSR set to: 0
  2914  001290  0E0D               	movlw	13
  2915  001292  0100               	movlb	0	; () banked
  2916  001294  6FE6               	movwf	(??_sortBattery+1)& (0+255),b
  2917  001296  0EAF               	movlw	175
  2918  001298  0100               	movlb	0	; () banked
  2919  00129A  6FE5               	movwf	??_sortBattery& (0+255),b
  2920  00129C  0EB6               	movlw	182
  2921  00129E                     u7447:
  2922  00129E  2EE8               	decfsz	wreg,f,c
  2923  0012A0  D7FE               	bra	u7447
  2924  0012A2  2FE5               	decfsz	??_sortBattery& (0+255),f,b
  2925  0012A4  D7FC               	bra	u7447
  2926  0012A6  2FE6               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2927  0012A8  D7FA               	bra	u7447
  2928  0012AA  F000               	nop	
  2929                           
  2930                           ;main.c: 255: setAngle(padServo, padAngle_NEUTRAL);
  2931  0012AC  0E44               	movlw	low _padServo
  2932  0012AE  0100               	movlb	0	; () banked
  2933  0012B0  6FCE               	movwf	setAngle@motor& (0+255),b
  2934  0012B2  0E01               	movlw	high _padServo
  2935  0012B4  0100               	movlb	0	; () banked
  2936  0012B6  6FCF               	movwf	(setAngle@motor+1)& (0+255),b
  2937  0012B8  C12A  F0D0         	movff	_padAngle_NEUTRAL,setAngle@angle
  2938  0012BC  C12B  F0D1         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2939  0012C0  ECC6  F014         	call	_setAngle	;wreg free
  2940                           
  2941                           ;main.c: 259: setAngle(conveyorServo, 130);
  2942  0012C4  0E30               	movlw	low _conveyorServo
  2943  0012C6  0100               	movlb	0	; () banked
  2944  0012C8  6FCE               	movwf	setAngle@motor& (0+255),b
  2945  0012CA  0E01               	movlw	high _conveyorServo
  2946  0012CC  0100               	movlb	0	; () banked
  2947  0012CE  6FCF               	movwf	(setAngle@motor+1)& (0+255),b
  2948  0012D0  0E00               	movlw	0
  2949  0012D2  0100               	movlb	0	; () banked
  2950  0012D4  6FD1               	movwf	(setAngle@angle+1)& (0+255),b
  2951  0012D6  0E82               	movlw	130
  2952  0012D8  6FD0               	movwf	setAngle@angle& (0+255),b
  2953  0012DA  ECC6  F014         	call	_setAngle	;wreg free
  2954                           
  2955                           ;main.c: 260: digitalWrite(cylinderMotor, 1);
  2956  0012DE  0E38               	movlw	low _cylinderMotor
  2957  0012E0  6E22               	movwf	digitalWrite@pin,c
  2958  0012E2  0E01               	movlw	high _cylinderMotor
  2959  0012E4  6E23               	movwf	digitalWrite@pin+1,c
  2960  0012E6  0E00               	movlw	0
  2961  0012E8  6E25               	movwf	digitalWrite@val+1,c
  2962  0012EA  0E01               	movlw	1
  2963  0012EC  6E24               	movwf	digitalWrite@val,c
  2964  0012EE  EC96  F015         	call	_digitalWrite	;wreg free
  2965  0012F2  0012               	return		;funcret
  2966  0012F4                     __end_of_sortBattery:
  2967                           	opt stack 0
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           postinc0	equ	0xFEE
  2973                           wreg	equ	0xFE8
  2974                           postdec1	equ	0xFE5
  2975                           fsr1l	equ	0xFE1
  2976                           status	equ	0xFD8
  2977                           
  2978 ;; *************** function _digitalWrite *****************
  2979 ;; Defined at:
  2980 ;;		line 53 in file "iopin.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;  pin             2   33[COMRAM] PTR int 
  2983 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
  2984 ;;		 -> conveyorServo(4), cylinderMotor(4), 
  2985 ;;  val             2   35[COMRAM] int 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  p               2   40[COMRAM] int 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2997 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;Total ram usage:        9 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    3
  3004 ;; This function calls:
  3005 ;;		Nothing
  3006 ;; This function is called by:
  3007 ;;		_main
  3008 ;;		_sortBattery
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text2
  3013  002B2C                     __ptext2:
  3014                           	opt stack 0
  3015  002B2C                     _digitalWrite:
  3016                           	opt stack 26
  3017                           
  3018                           ;iopin.c: 54: if(pin){
  3019                           
  3020                           ;incstack = 0
  3021  002B2C  5022               	movf	digitalWrite@pin,w,c
  3022  002B2E  1023               	iorwf	digitalWrite@pin+1,w,c
  3023  002B30  B4D8               	btfsc	status,2,c
  3024  002B32  0012               	return	
  3025                           
  3026                           ;iopin.c: 55: int p = 1 << pin[1];
  3027  002B34  EE20 F002          	lfsr	2,2
  3028  002B38  5022               	movf	digitalWrite@pin,w,c
  3029  002B3A  26D9               	addwf	fsr2l,f,c
  3030  002B3C  5023               	movf	digitalWrite@pin+1,w,c
  3031  002B3E  22DA               	addwfc	fsr2h,f,c
  3032  002B40  50DF               	movf	indf2,w,c
  3033  002B42  6E26               	movwf	??_digitalWrite& (0+255),c
  3034  002B44  0E01               	movlw	1
  3035  002B46  6E27               	movwf	(??_digitalWrite+1)& (0+255),c
  3036  002B48  0E00               	movlw	0
  3037  002B4A  6E28               	movwf	(??_digitalWrite+2)& (0+255),c
  3038  002B4C  2A26               	incf	??_digitalWrite,f,c
  3039  002B4E  D003               	goto	u6864
  3040  002B50                     u6865:
  3041  002B50  90D8               	bcf	status,0,c
  3042  002B52  3627               	rlcf	??_digitalWrite+1,f,c
  3043  002B54  3628               	rlcf	??_digitalWrite+2,f,c
  3044  002B56                     u6864:
  3045  002B56  2E26               	decfsz	??_digitalWrite,f,c
  3046  002B58  D7FB               	goto	u6865
  3047  002B5A  C027  F029         	movff	??_digitalWrite+1,digitalWrite@p
  3048  002B5E  C028  F02A         	movff	??_digitalWrite+2,digitalWrite@p+1
  3049                           
  3050                           ;iopin.c: 56: if(val == 0){
  3051  002B62  5024               	movf	digitalWrite@val,w,c
  3052  002B64  1025               	iorwf	digitalWrite@val+1,w,c
  3053  002B66  A4D8               	btfss	status,2,c
  3054  002B68  D02B               	goto	l6478
  3055                           
  3056                           ;iopin.c: 57: p ^= 0xff;
  3057  002B6A  0EFF               	movlw	255
  3058  002B6C  1A29               	xorwf	digitalWrite@p,f,c
  3059                           
  3060                           ;iopin.c: 58: }
  3061                           ;iopin.c: 60: switch(pin[0]){
  3062  002B6E  D028               	goto	l6478
  3063  002B70                     l6454:
  3064  002B70  0424               	decf	digitalWrite@val,w,c
  3065  002B72  1025               	iorwf	digitalWrite@val+1,w,c
  3066  002B74  A4D8               	btfss	status,2,c
  3067  002B76  D003               	goto	l6458
  3068  002B78  5029               	movf	digitalWrite@p,w,c
  3069  002B7A  1289               	iorwf	3977,f,c	;volatile
  3070  002B7C  0012               	return	
  3071  002B7E                     l6458:
  3072                           
  3073                           ;iopin.c: 62: else LATA &= p;
  3074  002B7E  5029               	movf	digitalWrite@p,w,c
  3075  002B80  1689               	andwf	3977,f,c	;volatile
  3076                           
  3077                           ;iopin.c: 63: break;
  3078  002B82  0012               	return	
  3079  002B84                     l6460:
  3080  002B84  0424               	decf	digitalWrite@val,w,c
  3081  002B86  1025               	iorwf	digitalWrite@val+1,w,c
  3082  002B88  A4D8               	btfss	status,2,c
  3083  002B8A  D003               	goto	l6464
  3084  002B8C  5029               	movf	digitalWrite@p,w,c
  3085  002B8E  128A               	iorwf	3978,f,c	;volatile
  3086  002B90  0012               	return	
  3087  002B92                     l6464:
  3088                           
  3089                           ;iopin.c: 65: else LATB &= p;
  3090  002B92  5029               	movf	digitalWrite@p,w,c
  3091  002B94  168A               	andwf	3978,f,c	;volatile
  3092                           
  3093                           ;iopin.c: 66: break;
  3094  002B96  0012               	return	
  3095  002B98                     l6466:
  3096  002B98  0424               	decf	digitalWrite@val,w,c
  3097  002B9A  1025               	iorwf	digitalWrite@val+1,w,c
  3098  002B9C  A4D8               	btfss	status,2,c
  3099  002B9E  D003               	goto	l6470
  3100  002BA0  5029               	movf	digitalWrite@p,w,c
  3101  002BA2  128B               	iorwf	3979,f,c	;volatile
  3102  002BA4  0012               	return	
  3103  002BA6                     l6470:
  3104                           
  3105                           ;iopin.c: 68: else LATC &= p;
  3106  002BA6  5029               	movf	digitalWrite@p,w,c
  3107  002BA8  168B               	andwf	3979,f,c	;volatile
  3108                           
  3109                           ;iopin.c: 69: break;
  3110  002BAA  0012               	return	
  3111  002BAC                     l6472:
  3112  002BAC  0424               	decf	digitalWrite@val,w,c
  3113  002BAE  1025               	iorwf	digitalWrite@val+1,w,c
  3114  002BB0  A4D8               	btfss	status,2,c
  3115  002BB2  D003               	goto	l6476
  3116  002BB4  5029               	movf	digitalWrite@p,w,c
  3117  002BB6  128C               	iorwf	3980,f,c	;volatile
  3118  002BB8  0012               	return	
  3119  002BBA                     l6476:
  3120                           
  3121                           ;iopin.c: 71: else LATD &= p;
  3122  002BBA  5029               	movf	digitalWrite@p,w,c
  3123  002BBC  168C               	andwf	3980,f,c	;volatile
  3124                           
  3125                           ;iopin.c: 72: }
  3126  002BBE  0012               	return	
  3127  002BC0                     l6478:
  3128  002BC0  C022  FFD9         	movff	digitalWrite@pin,fsr2l
  3129  002BC4  C023  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3130  002BC8  CFDE F026          	movff	postinc2,??_digitalWrite
  3131  002BCC  CFDD F027          	movff	postdec2,??_digitalWrite+1
  3132                           
  3133                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3134                           ; Switch size 1, requested type "space"
  3135                           ; Number of cases is 1, Range of values is 0 to 0
  3136                           ; switch strategies available:
  3137                           ; Name         Instructions Cycles
  3138                           ; simple_byte            4     3 (average)
  3139                           ;	Chosen strategy is simple_byte
  3140  002BD0  5027               	movf	??_digitalWrite+1,w,c
  3141  002BD2  0A00               	xorlw	0	; case 0
  3142  002BD4  A4D8               	btfss	status,2,c
  3143  002BD6  0012               	return	
  3144                           
  3145                           ; Switch size 1, requested type "space"
  3146                           ; Number of cases is 4, Range of values is 0 to 3
  3147                           ; switch strategies available:
  3148                           ; Name         Instructions Cycles
  3149                           ; simple_byte           13     7 (average)
  3150                           ;	Chosen strategy is simple_byte
  3151  002BD8  5026               	movf	??_digitalWrite,w,c
  3152  002BDA  0A00               	xorlw	0	; case 0
  3153  002BDC  B4D8               	btfsc	status,2,c
  3154  002BDE  D7C8               	goto	l6454
  3155  002BE0  0A01               	xorlw	1	; case 1
  3156  002BE2  B4D8               	btfsc	status,2,c
  3157  002BE4  D7CF               	goto	l6460
  3158  002BE6  0A03               	xorlw	3	; case 2
  3159  002BE8  B4D8               	btfsc	status,2,c
  3160  002BEA  D7D6               	goto	l6466
  3161  002BEC  0A01               	xorlw	1	; case 3
  3162  002BEE  A4D8               	btfss	status,2,c
  3163  002BF0  0012               	return	
  3164  002BF2  D7DC               	goto	l6472
  3165  002BF4                     __end_of_digitalWrite:
  3166                           	opt stack 0
  3167                           tblptru	equ	0xFF8
  3168                           tblptrh	equ	0xFF7
  3169                           tblptrl	equ	0xFF6
  3170                           tablat	equ	0xFF5
  3171                           postinc0	equ	0xFEE
  3172                           wreg	equ	0xFE8
  3173                           postdec1	equ	0xFE5
  3174                           fsr1l	equ	0xFE1
  3175                           indf2	equ	0xFDF
  3176                           postinc2	equ	0xFDE
  3177                           postdec2	equ	0xFDD
  3178                           fsr2h	equ	0xFDA
  3179                           fsr2l	equ	0xFD9
  3180                           status	equ	0xFD8
  3181                           
  3182 ;; *************** function _digitalRead *****************
  3183 ;; Defined at:
  3184 ;;		line 43 in file "iopin.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;  pin             2   33[COMRAM] PTR int 
  3187 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  2   33[COMRAM] int 
  3192 ;; Registers used:
  3193 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3199 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;Total ram usage:        4 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    3
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_main
  3210 ;;		_sortBattery
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text3
  3215  0028A2                     __ptext3:
  3216                           	opt stack 0
  3217  0028A2                     _digitalRead:
  3218                           	opt stack 26
  3219                           
  3220                           ;iopin.c: 44: switch(pin[0]){
  3221                           
  3222                           ;incstack = 0
  3223  0028A2  D058               	goto	l6504
  3224  0028A4                     l6486:
  3225  0028A4  EE20 F002          	lfsr	2,2
  3226  0028A8  5022               	movf	digitalRead@pin,w,c
  3227  0028AA  26D9               	addwf	fsr2l,f,c
  3228  0028AC  5023               	movf	digitalRead@pin+1,w,c
  3229  0028AE  22DA               	addwfc	fsr2h,f,c
  3230  0028B0  50DF               	movf	indf2,w,c
  3231  0028B2  6E24               	movwf	??_digitalRead& (0+255),c
  3232  0028B4  CF80 F025          	movff	3968,??_digitalRead+1	;volatile
  3233  0028B8  2A24               	incf	??_digitalRead,f,c
  3234  0028BA  D002               	goto	u6924
  3235  0028BC                     u6925:
  3236  0028BC  90D8               	bcf	status,0,c
  3237  0028BE  3225               	rrcf	??_digitalRead+1,f,c
  3238  0028C0                     u6924:
  3239  0028C0  2E24               	decfsz	??_digitalRead,f,c
  3240  0028C2  D7FC               	goto	u6925
  3241  0028C4  0E01               	movlw	1
  3242  0028C6  1625               	andwf	??_digitalRead+1,f,c
  3243  0028C8  5025               	movf	??_digitalRead+1,w,c
  3244  0028CA  6E22               	movwf	?_digitalRead,c
  3245  0028CC  6A23               	clrf	?_digitalRead+1,c
  3246  0028CE  0012               	return	
  3247  0028D0                     l6490:
  3248  0028D0  EE20 F002          	lfsr	2,2
  3249  0028D4  5022               	movf	digitalRead@pin,w,c
  3250  0028D6  26D9               	addwf	fsr2l,f,c
  3251  0028D8  5023               	movf	digitalRead@pin+1,w,c
  3252  0028DA  22DA               	addwfc	fsr2h,f,c
  3253  0028DC  50DF               	movf	indf2,w,c
  3254  0028DE  6E24               	movwf	??_digitalRead& (0+255),c
  3255  0028E0  CF81 F025          	movff	3969,??_digitalRead+1	;volatile
  3256  0028E4  2A24               	incf	??_digitalRead,f,c
  3257  0028E6  D002               	goto	u6934
  3258  0028E8                     u6935:
  3259  0028E8  90D8               	bcf	status,0,c
  3260  0028EA  3225               	rrcf	??_digitalRead+1,f,c
  3261  0028EC                     u6934:
  3262  0028EC  2E24               	decfsz	??_digitalRead,f,c
  3263  0028EE  D7FC               	goto	u6935
  3264  0028F0  0E01               	movlw	1
  3265  0028F2  1625               	andwf	??_digitalRead+1,f,c
  3266  0028F4  5025               	movf	??_digitalRead+1,w,c
  3267  0028F6  6E22               	movwf	?_digitalRead,c
  3268  0028F8  6A23               	clrf	?_digitalRead+1,c
  3269  0028FA  0012               	return	
  3270  0028FC                     l6494:
  3271  0028FC  EE20 F002          	lfsr	2,2
  3272  002900  5022               	movf	digitalRead@pin,w,c
  3273  002902  26D9               	addwf	fsr2l,f,c
  3274  002904  5023               	movf	digitalRead@pin+1,w,c
  3275  002906  22DA               	addwfc	fsr2h,f,c
  3276  002908  50DF               	movf	indf2,w,c
  3277  00290A  6E24               	movwf	??_digitalRead& (0+255),c
  3278  00290C  CF82 F025          	movff	3970,??_digitalRead+1	;volatile
  3279  002910  2A24               	incf	??_digitalRead,f,c
  3280  002912  D002               	goto	u6944
  3281  002914                     u6945:
  3282  002914  90D8               	bcf	status,0,c
  3283  002916  3225               	rrcf	??_digitalRead+1,f,c
  3284  002918                     u6944:
  3285  002918  2E24               	decfsz	??_digitalRead,f,c
  3286  00291A  D7FC               	goto	u6945
  3287  00291C  0E01               	movlw	1
  3288  00291E  1625               	andwf	??_digitalRead+1,f,c
  3289  002920  5025               	movf	??_digitalRead+1,w,c
  3290  002922  6E22               	movwf	?_digitalRead,c
  3291  002924  6A23               	clrf	?_digitalRead+1,c
  3292  002926  0012               	return	
  3293  002928                     l6498:
  3294  002928  EE20 F002          	lfsr	2,2
  3295  00292C  5022               	movf	digitalRead@pin,w,c
  3296  00292E  26D9               	addwf	fsr2l,f,c
  3297  002930  5023               	movf	digitalRead@pin+1,w,c
  3298  002932  22DA               	addwfc	fsr2h,f,c
  3299  002934  50DF               	movf	indf2,w,c
  3300  002936  6E24               	movwf	??_digitalRead& (0+255),c
  3301  002938  CF83 F025          	movff	3971,??_digitalRead+1	;volatile
  3302  00293C  2A24               	incf	??_digitalRead,f,c
  3303  00293E  D002               	goto	u6954
  3304  002940                     u6955:
  3305  002940  90D8               	bcf	status,0,c
  3306  002942  3225               	rrcf	??_digitalRead+1,f,c
  3307  002944                     u6954:
  3308  002944  2E24               	decfsz	??_digitalRead,f,c
  3309  002946  D7FC               	goto	u6955
  3310  002948  0E01               	movlw	1
  3311  00294A  1625               	andwf	??_digitalRead+1,f,c
  3312  00294C  5025               	movf	??_digitalRead+1,w,c
  3313  00294E  6E22               	movwf	?_digitalRead,c
  3314  002950  6A23               	clrf	?_digitalRead+1,c
  3315  002952  0012               	return	
  3316  002954                     l6504:
  3317  002954  C022  FFD9         	movff	digitalRead@pin,fsr2l
  3318  002958  C023  FFDA         	movff	digitalRead@pin+1,fsr2h
  3319  00295C  CFDE F024          	movff	postinc2,??_digitalRead
  3320  002960  CFDD F025          	movff	postdec2,??_digitalRead+1
  3321                           
  3322                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3323                           ; Switch size 1, requested type "space"
  3324                           ; Number of cases is 1, Range of values is 0 to 0
  3325                           ; switch strategies available:
  3326                           ; Name         Instructions Cycles
  3327                           ; simple_byte            4     3 (average)
  3328                           ;	Chosen strategy is simple_byte
  3329  002964  5025               	movf	??_digitalRead+1,w,c
  3330  002966  0A00               	xorlw	0	; case 0
  3331  002968  A4D8               	btfss	status,2,c
  3332  00296A  D00D               	goto	l299
  3333                           
  3334                           ; Switch size 1, requested type "space"
  3335                           ; Number of cases is 4, Range of values is 0 to 3
  3336                           ; switch strategies available:
  3337                           ; Name         Instructions Cycles
  3338                           ; simple_byte           13     7 (average)
  3339                           ;	Chosen strategy is simple_byte
  3340  00296C  5024               	movf	??_digitalRead,w,c
  3341  00296E  0A00               	xorlw	0	; case 0
  3342  002970  B4D8               	btfsc	status,2,c
  3343  002972  D798               	goto	l6486
  3344  002974  0A01               	xorlw	1	; case 1
  3345  002976  B4D8               	btfsc	status,2,c
  3346  002978  D7AB               	goto	l6490
  3347  00297A  0A03               	xorlw	3	; case 2
  3348  00297C  B4D8               	btfsc	status,2,c
  3349  00297E  D7BE               	goto	l6494
  3350  002980  0A01               	xorlw	1	; case 3
  3351  002982  B4D8               	btfsc	status,2,c
  3352  002984  D7D1               	goto	l6498
  3353  002986                     l299:
  3354                           
  3355                           ;iopin.c: 50: return -1;
  3356  002986  6822               	setf	?_digitalRead,c
  3357  002988  6823               	setf	?_digitalRead+1,c
  3358  00298A  0012               	return		;funcret
  3359  00298C                     __end_of_digitalRead:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           postinc0	equ	0xFEE
  3366                           wreg	equ	0xFE8
  3367                           postdec1	equ	0xFE5
  3368                           fsr1l	equ	0xFE1
  3369                           indf2	equ	0xFDF
  3370                           postinc2	equ	0xFDE
  3371                           postdec2	equ	0xFDD
  3372                           fsr2h	equ	0xFDA
  3373                           fsr2l	equ	0xFD9
  3374                           status	equ	0xFD8
  3375                           
  3376 ;; *************** function _analogRead *****************
  3377 ;; Defined at:
  3378 ;;		line 90 in file "iopin.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  channel         2   33[COMRAM] int 
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;		None
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  4   33[COMRAM] long 
  3385 ;; Registers used:
  3386 ;;		wreg, status,2, status,0
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;Total ram usage:        6 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    3
  3399 ;; This function calls:
  3400 ;;		Nothing
  3401 ;; This function is called by:
  3402 ;;		_sortBattery
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text4
  3407  00356C                     __ptext4:
  3408                           	opt stack 0
  3409  00356C                     _analogRead:
  3410                           	opt stack 26
  3411                           
  3412                           ;iopin.c: 91: ADCON0 = channel<<2;
  3413                           
  3414                           ;incstack = 0
  3415  00356C  4422               	rlncf	analogRead@channel,w,c
  3416  00356E  46E8               	rlncf	wreg,f,c
  3417  003570  0BFC               	andlw	252
  3418  003572  6EC2               	movwf	4034,c	;volatile
  3419                           
  3420                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3421  003574  80C2               	bsf	4034,0,c	;volatile
  3422                           
  3423                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3424  003576  82C2               	bsf	4034,1,c	;volatile
  3425  003578                     l324:
  3426  003578  B2C2               	btfsc	4034,1,c	;volatile
  3427  00357A  D7FE               	goto	l324
  3428                           
  3429                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3430  00357C  50C3               	movf	4035,w,c	;volatile
  3431  00357E  CFC4 F026          	movff	4036,??_analogRead	;volatile
  3432  003582  6A27               	clrf	(??_analogRead+1)& (0+255),c
  3433  003584  C026  F027         	movff	??_analogRead,??_analogRead+1
  3434  003588  6A26               	clrf	??_analogRead,c
  3435  00358A  2626               	addwf	??_analogRead,f,c
  3436  00358C  0E00               	movlw	0
  3437  00358E  2227               	addwfc	??_analogRead+1,f,c
  3438  003590  C026  F022         	movff	??_analogRead,?_analogRead
  3439  003594  C027  F023         	movff	??_analogRead+1,?_analogRead+1
  3440  003598  0E00               	movlw	0
  3441  00359A  BE23               	btfsc	?_analogRead+1,7,c
  3442  00359C  0EFF               	movlw	-1
  3443  00359E  6E24               	movwf	?_analogRead+2,c
  3444  0035A0  6E25               	movwf	?_analogRead+3,c
  3445  0035A2  0012               	return	
  3446  0035A4                     __end_of_analogRead:
  3447                           	opt stack 0
  3448                           tblptru	equ	0xFF8
  3449                           tblptrh	equ	0xFF7
  3450                           tblptrl	equ	0xFF6
  3451                           tablat	equ	0xFF5
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           postdec1	equ	0xFE5
  3455                           fsr1l	equ	0xFE1
  3456                           indf2	equ	0xFDF
  3457                           postinc2	equ	0xFDE
  3458                           postdec2	equ	0xFDD
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function _showInterface *****************
  3464 ;; Defined at:
  3465 ;;		line 16 in file "interface.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;		None
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;  key             1  102[BANK0 ] unsigned char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;Total ram usage:        1 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    9
  3486 ;; This function calls:
  3487 ;;		_dateTime
  3488 ;;		_mainMenu
  3489 ;;		_readKeypad
  3490 ;;		_runMenu
  3491 ;;		_runSelect
  3492 ;;		_runStats
  3493 ;;		_runTime
  3494 ;; This function is called by:
  3495 ;;		_main
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text5
  3500  00269A                     __ptext5:
  3501                           	opt stack 0
  3502  00269A                     _showInterface:
  3503                           	opt stack 21
  3504  00269A                     
  3505                           ;interface.c: 23: dateTime();
  3506  00269A  EC66  F01B         	call	_dateTime	;wreg free
  3507  00269E                     l6594:
  3508  00269E  EC40  F01B         	call	_readKeypad	;wreg free
  3509  0026A2  0A41               	xorlw	65
  3510  0026A4  A4D8               	btfss	status,2,c
  3511  0026A6  D7FB               	goto	l6594
  3512  0026A8                     l6596:
  3513                           
  3514                           ;interface.c: 28: mainMenu();
  3515  0026A8  EC53  F01B         	call	_mainMenu	;wreg free
  3516  0026AC                     l6598:
  3517  0026AC  EC40  F01B         	call	_readKeypad	;wreg free
  3518  0026B0  0100               	movlb	0	; () banked
  3519  0026B2  6FE6               	movwf	showInterface@key& (0+255),b
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;interface.c: 32: while(key != 'B' && key != 'C' && key != '*');
  3523  0026B4  0E42               	movlw	66
  3524  0026B6  0100               	movlb	0	; () banked
  3525  0026B8  19E6               	xorwf	showInterface@key& (0+255),w,b
  3526  0026BA  B4D8               	btfsc	status,2,c
  3527  0026BC  D00A               	goto	l6606
  3528                           
  3529                           ; BSR set to: 0
  3530  0026BE  0E43               	movlw	67
  3531  0026C0  0100               	movlb	0	; () banked
  3532  0026C2  19E6               	xorwf	showInterface@key& (0+255),w,b
  3533  0026C4  B4D8               	btfsc	status,2,c
  3534  0026C6  D005               	goto	l6606
  3535                           
  3536                           ; BSR set to: 0
  3537  0026C8  0E2A               	movlw	42
  3538  0026CA  0100               	movlb	0	; () banked
  3539  0026CC  19E6               	xorwf	showInterface@key& (0+255),w,b
  3540  0026CE  A4D8               	btfss	status,2,c
  3541  0026D0  D7ED               	goto	l6598
  3542  0026D2                     l6606:
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;interface.c: 34: if(key == 'C'){
  3546  0026D2  0E43               	movlw	67
  3547  0026D4  0100               	movlb	0	; () banked
  3548  0026D6  19E6               	xorwf	showInterface@key& (0+255),w,b
  3549  0026D8  A4D8               	btfss	status,2,c
  3550  0026DA  D056               	goto	l6650
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;interface.c: 36: runSelect();
  3554  0026DC  EC2D  F01B         	call	_runSelect	;wreg free
  3555  0026E0                     l6610:
  3556  0026E0  EC40  F01B         	call	_readKeypad	;wreg free
  3557  0026E4  0100               	movlb	0	; () banked
  3558  0026E6  6FE6               	movwf	showInterface@key& (0+255),b
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;interface.c: 42: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '
      +                          *');
  3562  0026E8  0E31               	movlw	49
  3563  0026EA  0100               	movlb	0	; () banked
  3564  0026EC  19E6               	xorwf	showInterface@key& (0+255),w,b
  3565  0026EE  B4D8               	btfsc	status,2,c
  3566  0026F0  D014               	goto	l6622
  3567                           
  3568                           ; BSR set to: 0
  3569  0026F2  0E32               	movlw	50
  3570  0026F4  0100               	movlb	0	; () banked
  3571  0026F6  19E6               	xorwf	showInterface@key& (0+255),w,b
  3572  0026F8  B4D8               	btfsc	status,2,c
  3573  0026FA  D00F               	goto	l6622
  3574                           
  3575                           ; BSR set to: 0
  3576  0026FC  0E33               	movlw	51
  3577  0026FE  0100               	movlb	0	; () banked
  3578  002700  19E6               	xorwf	showInterface@key& (0+255),w,b
  3579  002702  B4D8               	btfsc	status,2,c
  3580  002704  D00A               	goto	l6622
  3581                           
  3582                           ; BSR set to: 0
  3583  002706  0E34               	movlw	52
  3584  002708  0100               	movlb	0	; () banked
  3585  00270A  19E6               	xorwf	showInterface@key& (0+255),w,b
  3586  00270C  B4D8               	btfsc	status,2,c
  3587  00270E  D005               	goto	l6622
  3588                           
  3589                           ; BSR set to: 0
  3590  002710  0E2A               	movlw	42
  3591  002712  0100               	movlb	0	; () banked
  3592  002714  19E6               	xorwf	showInterface@key& (0+255),w,b
  3593  002716  A4D8               	btfss	status,2,c
  3594  002718  D7E3               	goto	l6610
  3595  00271A                     l6622:
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;interface.c: 44: if(key == '*')continue;
  3599  00271A  0E2A               	movlw	42
  3600  00271C  0100               	movlb	0	; () banked
  3601  00271E  19E6               	xorwf	showInterface@key& (0+255),w,b
  3602  002720  B4D8               	btfsc	status,2,c
  3603  002722  D7C2               	goto	l6596
  3604  002724                     l6626:
  3605                           
  3606                           ;interface.c: 50: runMenu(key);
  3607  002724  0100               	movlb	0	; () banked
  3608  002726  51E6               	movf	showInterface@key& (0+255),w,b
  3609  002728  ECEE  F01A         	call	_runMenu
  3610  00272C                     l6628:
  3611  00272C  EC40  F01B         	call	_readKeypad	;wreg free
  3612  002730  0100               	movlb	0	; () banked
  3613  002732  6FE6               	movwf	showInterface@key& (0+255),b
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;interface.c: 54: while(key != 'A' && key != 'B' && key != '*');
  3617  002734  0E41               	movlw	65
  3618  002736  0100               	movlb	0	; () banked
  3619  002738  19E6               	xorwf	showInterface@key& (0+255),w,b
  3620  00273A  B4D8               	btfsc	status,2,c
  3621  00273C  D00A               	goto	l6636
  3622                           
  3623                           ; BSR set to: 0
  3624  00273E  0E42               	movlw	66
  3625  002740  0100               	movlb	0	; () banked
  3626  002742  19E6               	xorwf	showInterface@key& (0+255),w,b
  3627  002744  B4D8               	btfsc	status,2,c
  3628  002746  D005               	goto	l6636
  3629                           
  3630                           ; BSR set to: 0
  3631  002748  0E2A               	movlw	42
  3632  00274A  0100               	movlb	0	; () banked
  3633  00274C  19E6               	xorwf	showInterface@key& (0+255),w,b
  3634  00274E  A4D8               	btfss	status,2,c
  3635  002750  D7ED               	goto	l6628
  3636  002752                     l6636:
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;interface.c: 56: if(key == 'A'){
  3640  002752  0E41               	movlw	65
  3641  002754  0100               	movlb	0	; () banked
  3642  002756  19E6               	xorwf	showInterface@key& (0+255),w,b
  3643  002758  A4D8               	btfss	status,2,c
  3644  00275A  D003               	goto	l6640
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;interface.c: 58: runTime();
  3648  00275C  EC07  F01B         	call	_runTime	;wreg free
  3649                           
  3650                           ;interface.c: 60: }
  3651  002760  D00D               	goto	l6648
  3652  002762                     l6640:
  3653                           
  3654                           ;interface.c: 61: else if(key == 'B'){
  3655  002762  0E42               	movlw	66
  3656  002764  0100               	movlb	0	; () banked
  3657  002766  19E6               	xorwf	showInterface@key& (0+255),w,b
  3658  002768  A4D8               	btfss	status,2,c
  3659  00276A  D003               	goto	l6644
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;interface.c: 63: runStats();
  3663  00276C  EC1A  F01B         	call	_runStats	;wreg free
  3664                           
  3665                           ;interface.c: 65: }
  3666  002770  D005               	goto	l6648
  3667  002772                     l6644:
  3668                           
  3669                           ;interface.c: 66: else if(key == '*')break;
  3670  002772  0E2A               	movlw	42
  3671  002774  0100               	movlb	0	; () banked
  3672  002776  19E6               	xorwf	showInterface@key& (0+255),w,b
  3673  002778  B4D8               	btfsc	status,2,c
  3674  00277A  D796               	goto	l6596
  3675  00277C                     l6648:
  3676  00277C  EC40  F01B         	call	_readKeypad	;wreg free
  3677  002780  0A2A               	xorlw	42
  3678  002782  B4D8               	btfsc	status,2,c
  3679  002784  D7CF               	goto	l6626
  3680  002786  D7FA               	goto	l6648
  3681  002788                     l6650:
  3682                           
  3683                           ;interface.c: 72: else if(key == 'B'){
  3684  002788  0E42               	movlw	66
  3685  00278A  0100               	movlb	0	; () banked
  3686  00278C  19E6               	xorwf	showInterface@key& (0+255),w,b
  3687  00278E  B4D8               	btfsc	status,2,c
  3688  002790  0012               	return	
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;interface.c: 75: else if(key == '*')
  3692                           
  3693                           ; BSR set to: 0
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;interface.c: 74: }
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;interface.c: 73: return;
  3700  002792  0E2A               	movlw	42
  3701  002794  0100               	movlb	0	; () banked
  3702  002796  19E6               	xorwf	showInterface@key& (0+255),w,b
  3703  002798  B4D8               	btfsc	status,2,c
  3704  00279A  D77F               	goto	l6592
  3705  00279C  D785               	goto	l6596
  3706  00279E                     __end_of_showInterface:
  3707                           	opt stack 0
  3708                           tblptru	equ	0xFF8
  3709                           tblptrh	equ	0xFF7
  3710                           tblptrl	equ	0xFF6
  3711                           tablat	equ	0xFF5
  3712                           postinc0	equ	0xFEE
  3713                           wreg	equ	0xFE8
  3714                           postdec1	equ	0xFE5
  3715                           fsr1l	equ	0xFE1
  3716                           indf2	equ	0xFDF
  3717                           postinc2	equ	0xFDE
  3718                           postdec2	equ	0xFDD
  3719                           fsr2h	equ	0xFDA
  3720                           fsr2l	equ	0xFD9
  3721                           status	equ	0xFD8
  3722                           
  3723 ;; *************** function _runTime *****************
  3724 ;; Defined at:
  3725 ;;		line 117 in file "interface.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;		None
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;		None
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  1    wreg      void 
  3732 ;; Registers used:
  3733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;Total ram usage:        0 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; Hardware stack levels required when called:    8
  3746 ;; This function calls:
  3747 ;;		_lcdClear
  3748 ;;		_printf
  3749 ;; This function is called by:
  3750 ;;		_showInterface
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text6
  3755  00360E                     __ptext6:
  3756                           	opt stack 0
  3757  00360E                     _runTime:
  3758                           	opt stack 21
  3759                           
  3760                           ;interface.c: 118: lcdClear();
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;incstack = 0
  3764  00360E  ECF2  F01B         	call	_lcdClear	;wreg free
  3765                           
  3766                           ;interface.c: 119: printf("time: nnn sec   \n");
  3767  003612  0E14               	movlw	low STR_15
  3768  003614  0100               	movlb	0	; () banked
  3769  003616  6FB7               	movwf	printf@f& (0+255),b
  3770  003618  0EFF               	movlw	high STR_15
  3771  00361A  0100               	movlb	0	; () banked
  3772  00361C  6FB8               	movwf	(printf@f+1)& (0+255),b
  3773  00361E  EC09  F000         	call	_printf	;wreg free
  3774                           
  3775                           ;interface.c: 120: printf("              *>");
  3776  003622  0E49               	movlw	low STR_16
  3777  003624  0100               	movlb	0	; () banked
  3778  003626  6FB7               	movwf	printf@f& (0+255),b
  3779  003628  0EFF               	movlw	high STR_16
  3780  00362A  0100               	movlb	0	; () banked
  3781  00362C  6FB8               	movwf	(printf@f+1)& (0+255),b
  3782  00362E  EC09  F000         	call	_printf	;wreg free
  3783  003632  0012               	return		;funcret
  3784  003634                     __end_of_runTime:
  3785                           	opt stack 0
  3786                           tblptru	equ	0xFF8
  3787                           tblptrh	equ	0xFF7
  3788                           tblptrl	equ	0xFF6
  3789                           tablat	equ	0xFF5
  3790                           postinc0	equ	0xFEE
  3791                           wreg	equ	0xFE8
  3792                           postdec1	equ	0xFE5
  3793                           fsr1l	equ	0xFE1
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _runStats *****************
  3802 ;; Defined at:
  3803 ;;		line 123 in file "interface.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  1    wreg      void 
  3810 ;; Registers used:
  3811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;Total ram usage:        0 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; Hardware stack levels required when called:    8
  3824 ;; This function calls:
  3825 ;;		_lcdClear
  3826 ;;		_printf
  3827 ;; This function is called by:
  3828 ;;		_showInterface
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           	psect	text7
  3833  003634                     __ptext7:
  3834                           	opt stack 0
  3835  003634                     _runStats:
  3836                           	opt stack 21
  3837                           
  3838                           ;interface.c: 124: lcdClear();
  3839                           
  3840                           ;incstack = 0
  3841  003634  ECF2  F01B         	call	_lcdClear	;wreg free
  3842                           
  3843                           ;interface.c: 125: printf("[AA,9V,C,other] \n");
  3844  003638  0E26               	movlw	low STR_17
  3845  00363A  0100               	movlb	0	; () banked
  3846  00363C  6FB7               	movwf	printf@f& (0+255),b
  3847  00363E  0EFF               	movlw	high STR_17
  3848  003640  0100               	movlb	0	; () banked
  3849  003642  6FB8               	movwf	(printf@f+1)& (0+255),b
  3850  003644  EC09  F000         	call	_printf	;wreg free
  3851                           
  3852                           ;interface.c: 126: printf("[nn,n,n,nn]   *>");
  3853  003648  0E8D               	movlw	low STR_18
  3854  00364A  0100               	movlb	0	; () banked
  3855  00364C  6FB7               	movwf	printf@f& (0+255),b
  3856  00364E  0EFF               	movlw	high STR_18
  3857  003650  0100               	movlb	0	; () banked
  3858  003652  6FB8               	movwf	(printf@f+1)& (0+255),b
  3859  003654  EC09  F000         	call	_printf	;wreg free
  3860  003658  0012               	return		;funcret
  3861  00365A                     __end_of_runStats:
  3862                           	opt stack 0
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           postinc0	equ	0xFEE
  3868                           wreg	equ	0xFE8
  3869                           postdec1	equ	0xFE5
  3870                           fsr1l	equ	0xFE1
  3871                           indf2	equ	0xFDF
  3872                           postinc2	equ	0xFDE
  3873                           postdec2	equ	0xFDD
  3874                           fsr2h	equ	0xFDA
  3875                           fsr2l	equ	0xFD9
  3876                           status	equ	0xFD8
  3877                           
  3878 ;; *************** function _runSelect *****************
  3879 ;; Defined at:
  3880 ;;		line 105 in file "interface.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;Total ram usage:        0 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    8
  3901 ;; This function calls:
  3902 ;;		_lcdClear
  3903 ;;		_printf
  3904 ;; This function is called by:
  3905 ;;		_showInterface
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text8
  3910  00365A                     __ptext8:
  3911                           	opt stack 0
  3912  00365A                     _runSelect:
  3913                           	opt stack 21
  3914                           
  3915                           ;interface.c: 106: lcdClear();
  3916                           
  3917                           ;incstack = 0
  3918  00365A  ECF2  F01B         	call	_lcdClear	;wreg free
  3919                           
  3920                           ;interface.c: 107: printf("select run:     \n");
  3921  00365E  0E02               	movlw	low STR_11
  3922  003660  0100               	movlb	0	; () banked
  3923  003662  6FB7               	movwf	printf@f& (0+255),b
  3924  003664  0EFF               	movlw	high STR_11
  3925  003666  0100               	movlb	0	; () banked
  3926  003668  6FB8               	movwf	(printf@f+1)& (0+255),b
  3927  00366A  EC09  F000         	call	_printf	;wreg free
  3928                           
  3929                           ;interface.c: 108: printf("[1,2,3,4]     *>");
  3930  00366E  0E5A               	movlw	low STR_12
  3931  003670  0100               	movlb	0	; () banked
  3932  003672  6FB7               	movwf	printf@f& (0+255),b
  3933  003674  0EFF               	movlw	high STR_12
  3934  003676  0100               	movlb	0	; () banked
  3935  003678  6FB8               	movwf	(printf@f+1)& (0+255),b
  3936  00367A  EC09  F000         	call	_printf	;wreg free
  3937  00367E  0012               	return		;funcret
  3938  003680                     __end_of_runSelect:
  3939                           	opt stack 0
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           postinc0	equ	0xFEE
  3945                           wreg	equ	0xFE8
  3946                           postdec1	equ	0xFE5
  3947                           fsr1l	equ	0xFE1
  3948                           indf2	equ	0xFDF
  3949                           postinc2	equ	0xFDE
  3950                           postdec2	equ	0xFDD
  3951                           fsr2h	equ	0xFDA
  3952                           fsr2l	equ	0xFD9
  3953                           status	equ	0xFD8
  3954                           
  3955 ;; *************** function _runMenu *****************
  3956 ;; Defined at:
  3957 ;;		line 111 in file "interface.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  key             1    wreg     unsigned char 
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;  key             1  101[BANK0 ] unsigned char 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;                  1    wreg      void 
  3964 ;; Registers used:
  3965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3974 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;Total ram usage:        1 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    8
  3978 ;; This function calls:
  3979 ;;		_lcdClear
  3980 ;;		_printf
  3981 ;; This function is called by:
  3982 ;;		_showInterface
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           	psect	text9
  3987  0035DC                     __ptext9:
  3988                           	opt stack 0
  3989  0035DC                     _runMenu:
  3990                           	opt stack 21
  3991                           
  3992                           ;incstack = 0
  3993                           ;runMenu@key stored from wreg
  3994  0035DC  0100               	movlb	0	; () banked
  3995  0035DE  6FE5               	movwf	runMenu@key& (0+255),b
  3996                           
  3997                           ;interface.c: 112: lcdClear();
  3998  0035E0  ECF2  F01B         	call	_lcdClear	;wreg free
  3999                           
  4000                           ;interface.c: 113: printf("%c) time  <A     \n",key);
  4001  0035E4  0ECB               	movlw	low STR_13
  4002  0035E6  0100               	movlb	0	; () banked
  4003  0035E8  6FB7               	movwf	printf@f& (0+255),b
  4004  0035EA  0EFE               	movlw	high STR_13
  4005  0035EC  0100               	movlb	0	; () banked
  4006  0035EE  6FB8               	movwf	(printf@f+1)& (0+255),b
  4007  0035F0  C0E5  F0B9         	movff	runMenu@key,?_printf+2
  4008  0035F4  0100               	movlb	0	; () banked
  4009  0035F6  6BBA               	clrf	(?_printf+3)& (0+255),b
  4010  0035F8  EC09  F000         	call	_printf	;wreg free
  4011                           
  4012                           ;interface.c: 114: printf( "   stats <B   *>");
  4013  0035FC  0E7C               	movlw	low STR_14
  4014  0035FE  0100               	movlb	0	; () banked
  4015  003600  6FB7               	movwf	printf@f& (0+255),b
  4016  003602  0EFF               	movlw	high STR_14
  4017  003604  0100               	movlb	0	; () banked
  4018  003606  6FB8               	movwf	(printf@f+1)& (0+255),b
  4019  003608  EC09  F000         	call	_printf	;wreg free
  4020  00360C  0012               	return		;funcret
  4021  00360E                     __end_of_runMenu:
  4022                           	opt stack 0
  4023                           tblptru	equ	0xFF8
  4024                           tblptrh	equ	0xFF7
  4025                           tblptrl	equ	0xFF6
  4026                           tablat	equ	0xFF5
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           postdec1	equ	0xFE5
  4030                           fsr1l	equ	0xFE1
  4031                           indf2	equ	0xFDF
  4032                           postinc2	equ	0xFDE
  4033                           postdec2	equ	0xFDD
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8
  4037                           
  4038 ;; *************** function _readKeypad *****************
  4039 ;; Defined at:
  4040 ;;		line 36 in file "keypad.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;		None
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  key             1   33[COMRAM] unsigned char 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      unsigned char 
  4047 ;; Registers used:
  4048 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;Total ram usage:        1 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    3
  4061 ;; This function calls:
  4062 ;;		Nothing
  4063 ;; This function is called by:
  4064 ;;		_main
  4065 ;;		_sortBattery
  4066 ;;		_showInterface
  4067 ;;		_pause
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           	psect	text10
  4072  003680                     __ptext10:
  4073                           	opt stack 0
  4074  003680                     _readKeypad:
  4075                           	opt stack 26
  4076  003680                     l226:
  4077  003680  A281               	btfss	3969,1,c	;volatile
  4078  003682  D7FE               	goto	l226
  4079                           
  4080                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4081  003684  3881               	swapf	3969,w,c	;volatile
  4082  003686  0B0F               	andlw	15
  4083  003688  0B0F               	andlw	15
  4084  00368A  6E22               	movwf	readKeypad@key,c
  4085  00368C                     l229:
  4086  00368C  B281               	btfsc	3969,1,c	;volatile
  4087  00368E  D7FE               	goto	l229
  4088                           
  4089                           ;keypad.c: 40: return keys[key];
  4090  003690  5022               	movf	readKeypad@key,w,c
  4091  003692  0D01               	mullw	1
  4092  003694  0EB3               	movlw	low _keys
  4093  003696  24F3               	addwf	prodl,w,c
  4094  003698  6EF6               	movwf	tblptrl,c
  4095  00369A  0EFE               	movlw	high _keys
  4096  00369C  20F4               	addwfc	prodh,w,c
  4097  00369E  6EF7               	movwf	tblptrh,c
  4098  0036A0                     	if	0	;There are less than 3 active tblptr bytes
  4099  0036A0                     	endif
  4100  0036A0  0008               	tblrd		*
  4101  0036A2  50F5               	movf	tablat,w,c
  4102  0036A4  0012               	return	
  4103  0036A6                     __end_of_readKeypad:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           postinc0	equ	0xFEE
  4112                           wreg	equ	0xFE8
  4113                           postdec1	equ	0xFE5
  4114                           fsr1l	equ	0xFE1
  4115                           indf2	equ	0xFDF
  4116                           postinc2	equ	0xFDE
  4117                           postdec2	equ	0xFDD
  4118                           fsr2h	equ	0xFDA
  4119                           fsr2l	equ	0xFD9
  4120                           status	equ	0xFD8
  4121                           
  4122 ;; *************** function _mainMenu *****************
  4123 ;; Defined at:
  4124 ;;		line 99 in file "interface.c"
  4125 ;; Parameters:    Size  Location     Type
  4126 ;;		None
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;		None
  4129 ;; Return value:  Size  Location     Type
  4130 ;;                  1    wreg      void 
  4131 ;; Registers used:
  4132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4133 ;; Tracked objects:
  4134 ;;		On entry : 0/0
  4135 ;;		On exit  : 0/0
  4136 ;;		Unchanged: 0/0
  4137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4142 ;;Total ram usage:        0 bytes
  4143 ;; Hardware stack levels used:    1
  4144 ;; Hardware stack levels required when called:    8
  4145 ;; This function calls:
  4146 ;;		_lcdClear
  4147 ;;		_printf
  4148 ;; This function is called by:
  4149 ;;		_showInterface
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text11
  4154  0036A6                     __ptext11:
  4155                           	opt stack 0
  4156  0036A6                     _mainMenu:
  4157                           	opt stack 21
  4158                           
  4159                           ;interface.c: 100: lcdClear();
  4160                           
  4161                           ;incstack = 0
  4162  0036A6  ECF2  F01B         	call	_lcdClear	;wreg free
  4163                           
  4164                           ;interface.c: 101: printf("start   <B      \n");
  4165  0036AA  0EDE               	movlw	low STR_9
  4166  0036AC  0100               	movlb	0	; () banked
  4167  0036AE  6FB7               	movwf	printf@f& (0+255),b
  4168  0036B0  0EFE               	movlw	high STR_9
  4169  0036B2  0100               	movlb	0	; () banked
  4170  0036B4  6FB8               	movwf	(printf@f+1)& (0+255),b
  4171  0036B6  EC09  F000         	call	_printf	;wreg free
  4172                           
  4173                           ;interface.c: 102: printf("history <C    *>");
  4174  0036BA  0E6B               	movlw	low STR_10
  4175  0036BC  0100               	movlb	0	; () banked
  4176  0036BE  6FB7               	movwf	printf@f& (0+255),b
  4177  0036C0  0EFF               	movlw	high STR_10
  4178  0036C2  0100               	movlb	0	; () banked
  4179  0036C4  6FB8               	movwf	(printf@f+1)& (0+255),b
  4180  0036C6  EC09  F000         	call	_printf	;wreg free
  4181  0036CA  0012               	return		;funcret
  4182  0036CC                     __end_of_mainMenu:
  4183                           	opt stack 0
  4184                           tblptru	equ	0xFF8
  4185                           tblptrh	equ	0xFF7
  4186                           tblptrl	equ	0xFF6
  4187                           tablat	equ	0xFF5
  4188                           prodh	equ	0xFF4
  4189                           prodl	equ	0xFF3
  4190                           postinc0	equ	0xFEE
  4191                           wreg	equ	0xFE8
  4192                           postdec1	equ	0xFE5
  4193                           fsr1l	equ	0xFE1
  4194                           indf2	equ	0xFDF
  4195                           postinc2	equ	0xFDE
  4196                           postdec2	equ	0xFDD
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _dateTime *****************
  4202 ;; Defined at:
  4203 ;;		line 84 in file "interface.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      void 
  4210 ;; Registers used:
  4211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    8
  4224 ;; This function calls:
  4225 ;;		_lcdClear
  4226 ;;		_printf
  4227 ;; This function is called by:
  4228 ;;		_showInterface
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text12
  4233  0036CC                     __ptext12:
  4234                           	opt stack 0
  4235  0036CC                     _dateTime:
  4236                           	opt stack 21
  4237                           
  4238                           ;interface.c: 94: lcdClear();
  4239                           
  4240                           ;incstack = 0
  4241  0036CC  ECF2  F01B         	call	_lcdClear	;wreg free
  4242                           
  4243                           ;interface.c: 95: printf("  hh:mm:ss      \n");
  4244  0036D0  0EF0               	movlw	low STR_7
  4245  0036D2  0100               	movlb	0	; () banked
  4246  0036D4  6FB7               	movwf	printf@f& (0+255),b
  4247  0036D6  0EFE               	movlw	high STR_7
  4248  0036D8  0100               	movlb	0	; () banked
  4249  0036DA  6FB8               	movwf	(printf@f+1)& (0+255),b
  4250  0036DC  EC09  F000         	call	_printf	;wreg free
  4251                           
  4252                           ;interface.c: 96: printf("  mm:dd:yy    A>");
  4253  0036E0  0E9E               	movlw	low STR_8
  4254  0036E2  0100               	movlb	0	; () banked
  4255  0036E4  6FB7               	movwf	printf@f& (0+255),b
  4256  0036E6  0EFF               	movlw	high STR_8
  4257  0036E8  0100               	movlb	0	; () banked
  4258  0036EA  6FB8               	movwf	(printf@f+1)& (0+255),b
  4259  0036EC  EC09  F000         	call	_printf	;wreg free
  4260  0036F0  0012               	return		;funcret
  4261  0036F2                     __end_of_dateTime:
  4262                           	opt stack 0
  4263                           tblptru	equ	0xFF8
  4264                           tblptrh	equ	0xFF7
  4265                           tblptrl	equ	0xFF6
  4266                           tablat	equ	0xFF5
  4267                           prodh	equ	0xFF4
  4268                           prodl	equ	0xFF3
  4269                           postinc0	equ	0xFEE
  4270                           wreg	equ	0xFE8
  4271                           postdec1	equ	0xFE5
  4272                           fsr1l	equ	0xFE1
  4273                           indf2	equ	0xFDF
  4274                           postinc2	equ	0xFDE
  4275                           postdec2	equ	0xFDD
  4276                           fsr2h	equ	0xFDA
  4277                           fsr2l	equ	0xFD9
  4278                           status	equ	0xFD8
  4279                           
  4280 ;; *************** function _printf *****************
  4281 ;; Defined at:
  4282 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;  f               2   55[BANK0 ] PTR const unsigned char 
  4285 ;;		 -> STR_18(17), STR_17(18), STR_16(17), STR_15(18), 
  4286 ;;		 -> STR_14(17), STR_13(19), STR_12(17), STR_11(18), 
  4287 ;;		 -> STR_10(17), STR_9(18), STR_8(17), STR_7(18), 
  4288 ;;		 -> STR_6(8), STR_5(15), STR_4(14), STR_3(17), 
  4289 ;;		 -> STR_2(17), STR_1(8), 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  idx             1   74[BANK0 ] unsigned char 
  4292 ;;  val             4   90[BANK0 ] unsigned long 
  4293 ;;  tmpval          4   81[BANK0 ] struct .
  4294 ;;  fval            3   87[BANK0 ] struct .
  4295 ;;  prec            2   98[BANK0 ] int 
  4296 ;;  flag            2   96[BANK0 ] unsigned short 
  4297 ;;  width           2   94[BANK0 ] int 
  4298 ;;  exp             2   85[BANK0 ] int 
  4299 ;;  ap              2   79[BANK0 ] PTR void [1]
  4300 ;;		 -> ?_printf(2), 
  4301 ;;  len             2   77[BANK0 ] unsigned int 
  4302 ;;  cp              2   75[BANK0 ] PTR const unsigned char 
  4303 ;;		 -> printf@c(1), 
  4304 ;;  c               1  100[BANK0 ] char 
  4305 ;;  d               1    0        unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  2   55[BANK0 ] int 
  4308 ;; Registers used:
  4309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4315 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;Total ram usage:       46 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    7
  4322 ;; This function calls:
  4323 ;;		___awdiv
  4324 ;;		___ftadd
  4325 ;;		___ftge
  4326 ;;		___ftmul
  4327 ;;		___ftneg
  4328 ;;		___ftsub
  4329 ;;		___fttol
  4330 ;;		___lldiv
  4331 ;;		___llmod
  4332 ;;		___lltoft
  4333 ;;		___wmul
  4334 ;;		__div_to_l_
  4335 ;;		__tdiv_to_l_
  4336 ;;		_fround
  4337 ;;		_isdigit
  4338 ;;		_putch
  4339 ;;		_scale
  4340 ;; This function is called by:
  4341 ;;		_main
  4342 ;;		_sortBattery
  4343 ;;		_dateTime
  4344 ;;		_mainMenu
  4345 ;;		_runSelect
  4346 ;;		_runMenu
  4347 ;;		_runTime
  4348 ;;		_runStats
  4349 ;;		_pause
  4350 ;;		_testFrequency
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text13
  4355  000012                     __ptext13:
  4356                           	opt stack 0
  4357  000012                     _printf:
  4358                           	opt stack 22
  4359                           
  4360                           ;doprnt.c: 466: va_list ap;
  4361                           ;doprnt.c: 499: signed char c;
  4362                           ;doprnt.c: 501: int width;
  4363                           ;doprnt.c: 504: int prec;
  4364                           ;doprnt.c: 508: unsigned short flag;
  4365                           ;doprnt.c: 515: char d;
  4366                           ;doprnt.c: 516: double fval;
  4367                           ;doprnt.c: 517: int exp;
  4368                           ;doprnt.c: 523: union {
  4369                           ;doprnt.c: 524: unsigned long vd;
  4370                           ;doprnt.c: 525: double integ;
  4371                           ;doprnt.c: 526: } tmpval;
  4372                           ;doprnt.c: 528: unsigned long val;
  4373                           ;doprnt.c: 529: unsigned len;
  4374                           ;doprnt.c: 530: const char * cp;
  4375                           ;doprnt.c: 533: *ap = __va_start();
  4376                           
  4377                           ;incstack = 0
  4378  000012  0EB9               	movlw	low (?_printf+2)
  4379  000014  0100               	movlb	0	; () banked
  4380  000016  6FCF               	movwf	printf@ap& (0+255),b
  4381  000018  0E00               	movlw	high (?_printf+2)
  4382  00001A  0100               	movlb	0	; () banked
  4383  00001C  6FD0               	movwf	(printf@ap+1)& (0+255),b
  4384                           
  4385                           ;doprnt.c: 536: while(c = *f++) {
  4386  00001E  EFF5  F006         	goto	l6436
  4387  000022                     l6070:
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;doprnt.c: 538: if(c != '%')
  4391  000022  0E25               	movlw	37
  4392  000024  0100               	movlb	0	; () banked
  4393  000026  19E4               	xorwf	printf@c& (0+255),w,b
  4394  000028  B4D8               	btfsc	status,2,c
  4395  00002A  D006               	goto	l6074
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;doprnt.c: 540: {
  4399                           ;doprnt.c: 541: (putch(c) );
  4400  00002C  0100               	movlb	0	; () banked
  4401  00002E  51E4               	movf	printf@c& (0+255),w,b
  4402  000030  ECAF  F01B         	call	_putch
  4403                           
  4404                           ;doprnt.c: 542: continue;
  4405  000034  EFF5  F006         	goto	l6436
  4406  000038                     l6074:
  4407                           
  4408                           ;doprnt.c: 543: }
  4409                           ;doprnt.c: 546: width = 0;
  4410  000038  0E00               	movlw	0
  4411  00003A  0100               	movlb	0	; () banked
  4412  00003C  6FDF               	movwf	(printf@width+1)& (0+255),b
  4413  00003E  0E00               	movlw	0
  4414  000040  6FDE               	movwf	printf@width& (0+255),b
  4415                           
  4416                           ;doprnt.c: 548: flag = 0;
  4417  000042  0E00               	movlw	0
  4418  000044  0100               	movlb	0	; () banked
  4419  000046  6FE1               	movwf	(printf@flag+1)& (0+255),b
  4420  000048  0E00               	movlw	0
  4421  00004A  6FE0               	movwf	printf@flag& (0+255),b
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;doprnt.c: 551: switch(*f) {
  4425                           
  4426                           ;doprnt.c: 550: for(;;) {
  4427  00004C  D005               	goto	l6080
  4428  00004E                     l6076:
  4429                           
  4430                           ;doprnt.c: 580: flag |= 0x04;
  4431  00004E  0100               	movlb	0	; () banked
  4432  000050  85E0               	bsf	printf@flag& (0+255),2,b
  4433                           
  4434                           ;doprnt.c: 581: f++;
  4435  000052  0100               	movlb	0	; () banked
  4436  000054  4BB7               	infsnz	printf@f& (0+255),f,b
  4437  000056  2BB8               	incf	(printf@f+1)& (0+255),f,b
  4438  000058                     l6080:
  4439  000058  C0B7  FFF6         	movff	printf@f,tblptrl
  4440  00005C  C0B8  FFF7         	movff	printf@f+1,tblptrh
  4441  000060                     	if	0	;tblptru may be non-zero
  4442  000060                     	endif
  4443  000060                     	if	0	;tblptru may be non-zero
  4444  000060                     	endif
  4445  000060  0008               	tblrd		*
  4446  000062  50F5               	movf	tablat,w,c
  4447                           
  4448                           ; Switch size 1, requested type "space"
  4449                           ; Number of cases is 1, Range of values is 48 to 48
  4450                           ; switch strategies available:
  4451                           ; Name         Instructions Cycles
  4452                           ; simple_byte            4     3 (average)
  4453                           ;	Chosen strategy is simple_byte
  4454  000064  0A30               	xorlw	48	; case 48
  4455  000066  B4D8               	btfsc	status,2,c
  4456  000068  D7F2               	goto	l6076
  4457                           
  4458                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4459                           
  4460                           ;doprnt.c: 586: }
  4461                           
  4462                           ;doprnt.c: 585: break;
  4463  00006A  C0B7  FFF6         	movff	printf@f,tblptrl
  4464  00006E  C0B8  FFF7         	movff	printf@f+1,tblptrh
  4465  000072                     	if	0	;tblptru may be non-zero
  4466  000072                     	endif
  4467  000072                     	if	0	;tblptru may be non-zero
  4468  000072                     	endif
  4469  000072  0008               	tblrd		*
  4470  000074  50F5               	movf	tablat,w,c
  4471  000076  ECD1  F01B         	call	_isdigit
  4472  00007A  A0D8               	btfss	status,0,c
  4473  00007C  D03F               	goto	l6094
  4474                           
  4475                           ;doprnt.c: 598: width = 0;
  4476  00007E  0E00               	movlw	0
  4477  000080  0100               	movlb	0	; () banked
  4478  000082  6FDF               	movwf	(printf@width+1)& (0+255),b
  4479  000084  0E00               	movlw	0
  4480  000086  6FDE               	movwf	printf@width& (0+255),b
  4481  000088                     l6086:
  4482                           
  4483                           ;doprnt.c: 600: width *= 10;
  4484  000088  C0DE  F030         	movff	printf@width,___wmul@multiplier
  4485  00008C  C0DF  F031         	movff	printf@width+1,___wmul@multiplier+1
  4486  000090  0E00               	movlw	0
  4487  000092  6E33               	movwf	___wmul@multiplicand+1,c
  4488  000094  0E0A               	movlw	10
  4489  000096  6E32               	movwf	___wmul@multiplicand,c
  4490  000098  EC79  F01B         	call	___wmul	;wreg free
  4491  00009C  C030  F0DE         	movff	?___wmul,printf@width
  4492  0000A0  C031  F0DF         	movff	?___wmul+1,printf@width+1
  4493                           
  4494                           ;doprnt.c: 601: width += *f++ - '0';
  4495  0000A4  0ED0               	movlw	208
  4496  0000A6  0100               	movlb	0	; () banked
  4497  0000A8  6FC1               	movwf	??_printf& (0+255),b
  4498  0000AA  0EFF               	movlw	255
  4499  0000AC  0100               	movlb	0	; () banked
  4500  0000AE  6FC2               	movwf	(??_printf+1)& (0+255),b
  4501  0000B0  C0B7  FFF6         	movff	printf@f,tblptrl
  4502  0000B4  C0B8  FFF7         	movff	printf@f+1,tblptrh
  4503  0000B8                     	if	0	;tblptru may be non-zero
  4504  0000B8                     	endif
  4505  0000B8                     	if	0	;tblptru may be non-zero
  4506  0000B8                     	endif
  4507  0000B8  0008               	tblrd		*
  4508  0000BA  50F5               	movf	tablat,w,c
  4509  0000BC  0100               	movlb	0	; () banked
  4510  0000BE  6FC3               	movwf	(??_printf+2)& (0+255),b
  4511  0000C0  6BC4               	clrf	(??_printf+3)& (0+255),b
  4512  0000C2  0100               	movlb	0	; () banked
  4513  0000C4  51C1               	movf	??_printf& (0+255),w,b
  4514  0000C6  0100               	movlb	0	; () banked
  4515  0000C8  27C3               	addwf	(??_printf+2)& (0+255),f,b
  4516  0000CA  0100               	movlb	0	; () banked
  4517  0000CC  51C2               	movf	(??_printf+1)& (0+255),w,b
  4518  0000CE  0100               	movlb	0	; () banked
  4519  0000D0  23C4               	addwfc	(??_printf+3)& (0+255),f,b
  4520  0000D2  0100               	movlb	0	; () banked
  4521  0000D4  51C3               	movf	(??_printf+2)& (0+255),w,b
  4522  0000D6  0100               	movlb	0	; () banked
  4523  0000D8  27DE               	addwf	printf@width& (0+255),f,b
  4524  0000DA  0100               	movlb	0	; () banked
  4525  0000DC  51C4               	movf	(??_printf+3)& (0+255),w,b
  4526  0000DE  0100               	movlb	0	; () banked
  4527  0000E0  23DF               	addwfc	(printf@width+1)& (0+255),f,b
  4528                           
  4529                           ; BSR set to: 0
  4530  0000E2  0100               	movlb	0	; () banked
  4531  0000E4  4BB7               	infsnz	printf@f& (0+255),f,b
  4532  0000E6  2BB8               	incf	(printf@f+1)& (0+255),f,b
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4536  0000E8  C0B7  FFF6         	movff	printf@f,tblptrl
  4537  0000EC  C0B8  FFF7         	movff	printf@f+1,tblptrh
  4538  0000F0                     	if	0	;tblptru may be non-zero
  4539  0000F0                     	endif
  4540  0000F0                     	if	0	;tblptru may be non-zero
  4541  0000F0                     	endif
  4542  0000F0  0008               	tblrd		*
  4543  0000F2  50F5               	movf	tablat,w,c
  4544  0000F4  ECD1  F01B         	call	_isdigit
  4545  0000F8  B0D8               	btfsc	status,0,c
  4546  0000FA  D7C6               	goto	l6086
  4547  0000FC                     l6094:
  4548                           
  4549                           ;doprnt.c: 608: }
  4550                           ;doprnt.c: 611: if(*f == '.') {
  4551  0000FC  C0B7  FFF6         	movff	printf@f,tblptrl
  4552  000100  C0B8  FFF7         	movff	printf@f+1,tblptrh
  4553  000104                     	if	0	;tblptru may be non-zero
  4554  000104                     	endif
  4555  000104                     	if	0	;tblptru may be non-zero
  4556  000104                     	endif
  4557  000104  0008               	tblrd		*
  4558  000106  50F5               	movf	tablat,w,c
  4559  000108  0A2E               	xorlw	46
  4560  00010A  A4D8               	btfss	status,2,c
  4561  00010C  D034               	goto	l6106
  4562                           
  4563                           ;doprnt.c: 612: flag |= 0x4000;
  4564  00010E  0100               	movlb	0	; () banked
  4565  000110  8DE1               	bsf	(printf@flag+1)& (0+255),6,b
  4566                           
  4567                           ;doprnt.c: 613: f++;
  4568  000112  0100               	movlb	0	; () banked
  4569  000114  4BB7               	infsnz	printf@f& (0+255),f,b
  4570  000116  2BB8               	incf	(printf@f+1)& (0+255),f,b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;doprnt.c: 620: {
  4574                           ;doprnt.c: 621: prec = 0;
  4575  000118  0E00               	movlw	0
  4576  00011A  0100               	movlb	0	; () banked
  4577  00011C  6FE3               	movwf	(printf@prec+1)& (0+255),b
  4578  00011E  0E00               	movlw	0
  4579  000120  6FE2               	movwf	printf@prec& (0+255),b
  4580                           
  4581                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4582  000122  D01E               	goto	l6104
  4583  000124                     l6100:
  4584                           
  4585                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4586  000124  C0E2  F030         	movff	printf@prec,___wmul@multiplier
  4587  000128  C0E3  F031         	movff	printf@prec+1,___wmul@multiplier+1
  4588  00012C  0E00               	movlw	0
  4589  00012E  6E33               	movwf	___wmul@multiplicand+1,c
  4590  000130  0E0A               	movlw	10
  4591  000132  6E32               	movwf	___wmul@multiplicand,c
  4592  000134  EC79  F01B         	call	___wmul	;wreg free
  4593  000138  C0B7  FFF6         	movff	printf@f,tblptrl
  4594  00013C  C0B8  FFF7         	movff	printf@f+1,tblptrh
  4595  000140                     	if	0	;tblptru may be non-zero
  4596  000140                     	endif
  4597  000140                     	if	0	;tblptru may be non-zero
  4598  000140                     	endif
  4599  000140  0008               	tblrd		*
  4600  000142  50F5               	movf	tablat,w,c
  4601  000144  2630               	addwf	?___wmul,f,c
  4602  000146  0E00               	movlw	0
  4603  000148  2231               	addwfc	?___wmul+1,f,c
  4604  00014A  0ED0               	movlw	208
  4605  00014C  2430               	addwf	?___wmul,w,c
  4606  00014E  0100               	movlb	0	; () banked
  4607  000150  6FE2               	movwf	printf@prec& (0+255),b
  4608  000152  0EFF               	movlw	255
  4609  000154  2031               	addwfc	?___wmul+1,w,c
  4610  000156  0100               	movlb	0	; () banked
  4611  000158  6FE3               	movwf	(printf@prec+1)& (0+255),b
  4612                           
  4613                           ; BSR set to: 0
  4614  00015A  0100               	movlb	0	; () banked
  4615  00015C  4BB7               	infsnz	printf@f& (0+255),f,b
  4616  00015E  2BB8               	incf	(printf@f+1)& (0+255),f,b
  4617  000160                     l6104:
  4618                           
  4619                           ; BSR set to: 0
  4620  000160  C0B7  FFF6         	movff	printf@f,tblptrl
  4621  000164  C0B8  FFF7         	movff	printf@f+1,tblptrh
  4622  000168                     	if	0	;tblptru may be non-zero
  4623  000168                     	endif
  4624  000168                     	if	0	;tblptru may be non-zero
  4625  000168                     	endif
  4626  000168  0008               	tblrd		*
  4627  00016A  50F5               	movf	tablat,w,c
  4628  00016C  ECD1  F01B         	call	_isdigit
  4629  000170  A0D8               	btfss	status,0,c
  4630  000172  D07D               	goto	l6148
  4631  000174  D7D7               	goto	l6100
  4632  000176                     l6106:
  4633                           
  4634                           ;doprnt.c: 626: prec = 0;
  4635  000176  0E00               	movlw	0
  4636  000178  0100               	movlb	0	; () banked
  4637  00017A  6FE3               	movwf	(printf@prec+1)& (0+255),b
  4638  00017C  0E00               	movlw	0
  4639  00017E  6FE2               	movwf	printf@prec& (0+255),b
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;doprnt.c: 628: flag |= 0x1000;
  4643  000180  0100               	movlb	0	; () banked
  4644  000182  89E1               	bsf	(printf@flag+1)& (0+255),4,b
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;doprnt.c: 635: switch(c = *f++) {
  4648                           
  4649                           ;doprnt.c: 630: }
  4650                           ;doprnt.c: 633: loop:
  4651                           
  4652                           ; BSR set to: 0
  4653  000184  D074               	goto	l6148
  4654  000186                     l6110:
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;doprnt.c: 643: flag |= 0x10;
  4658  000186  0100               	movlb	0	; () banked
  4659  000188  89E0               	bsf	printf@flag& (0+255),4,b
  4660                           
  4661                           ;doprnt.c: 644: goto loop;
  4662  00018A  D071               	goto	l6148
  4663  00018C                     l6112:
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;doprnt.c: 663: flag |= 0x400;
  4667  00018C  0100               	movlb	0	; () banked
  4668  00018E  85E1               	bsf	(printf@flag+1)& (0+255),2,b
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;doprnt.c: 698: case 'i':
  4672                           ;doprnt.c: 699: break;
  4673                           
  4674                           ; BSR set to: 0
  4675                           
  4676                           ;doprnt.c: 697: case 'd':
  4677                           
  4678                           ;doprnt.c: 664: break;
  4679  000190  D090               	goto	l6150
  4680  000192                     l6114:
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;doprnt.c: 721: flag |= 0x80;
  4684  000192  0100               	movlb	0	; () banked
  4685  000194  8FE0               	bsf	printf@flag& (0+255),7,b
  4686                           
  4687                           ;doprnt.c: 723: break;
  4688  000196  D08D               	goto	l6150
  4689  000198                     l6116:
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;doprnt.c: 753: if(prec && prec < len)
  4693  000198  0100               	movlb	0	; () banked
  4694  00019A  51E2               	movf	printf@prec& (0+255),w,b
  4695  00019C  0100               	movlb	0	; () banked
  4696  00019E  11E3               	iorwf	(printf@prec+1)& (0+255),w,b
  4697  0001A0  B4D8               	btfsc	status,2,c
  4698  0001A2  D00E               	goto	l6122
  4699                           
  4700                           ; BSR set to: 0
  4701  0001A4  0100               	movlb	0	; () banked
  4702  0001A6  51CD               	movf	printf@len& (0+255),w,b
  4703  0001A8  0100               	movlb	0	; () banked
  4704  0001AA  5DE2               	subwf	printf@prec& (0+255),w,b
  4705  0001AC  0100               	movlb	0	; () banked
  4706  0001AE  51CE               	movf	(printf@len+1)& (0+255),w,b
  4707  0001B0  0100               	movlb	0	; () banked
  4708  0001B2  59E3               	subwfb	(printf@prec+1)& (0+255),w,b
  4709  0001B4  B0D8               	btfsc	status,0,c
  4710  0001B6  D004               	goto	l6122
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;doprnt.c: 754: len = prec;
  4714  0001B8  C0E2  F0CD         	movff	printf@prec,printf@len
  4715  0001BC  C0E3  F0CE         	movff	printf@prec+1,printf@len+1
  4716  0001C0                     l6122:
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;doprnt.c: 757: if(width > len)
  4720  0001C0  0100               	movlb	0	; () banked
  4721  0001C2  51DE               	movf	printf@width& (0+255),w,b
  4722  0001C4  0100               	movlb	0	; () banked
  4723  0001C6  5DCD               	subwf	printf@len& (0+255),w,b
  4724  0001C8  0100               	movlb	0	; () banked
  4725  0001CA  51DF               	movf	(printf@width+1)& (0+255),w,b
  4726  0001CC  0100               	movlb	0	; () banked
  4727  0001CE  59CE               	subwfb	(printf@len+1)& (0+255),w,b
  4728  0001D0  B0D8               	btfsc	status,0,c
  4729  0001D2  D009               	goto	l6126
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;doprnt.c: 758: width -= len;
  4733  0001D4  0100               	movlb	0	; () banked
  4734  0001D6  51CD               	movf	printf@len& (0+255),w,b
  4735  0001D8  0100               	movlb	0	; () banked
  4736  0001DA  5FDE               	subwf	printf@width& (0+255),f,b
  4737  0001DC  0100               	movlb	0	; () banked
  4738  0001DE  51CE               	movf	(printf@len+1)& (0+255),w,b
  4739  0001E0  0100               	movlb	0	; () banked
  4740  0001E2  5BDF               	subwfb	(printf@width+1)& (0+255),f,b
  4741  0001E4  D009               	goto	l6130
  4742  0001E6                     l6126:
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;doprnt.c: 759: else
  4746                           ;doprnt.c: 760: width = 0;
  4747  0001E6  0E00               	movlw	0
  4748  0001E8  0100               	movlb	0	; () banked
  4749  0001EA  6FDF               	movwf	(printf@width+1)& (0+255),b
  4750  0001EC  0E00               	movlw	0
  4751  0001EE  6FDE               	movwf	printf@width& (0+255),b
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;doprnt.c: 764: while(width--)
  4755  0001F0  D003               	goto	l6130
  4756  0001F2                     l6128:
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;doprnt.c: 765: (putch(' ') );
  4760  0001F2  0E20               	movlw	32
  4761  0001F4  ECAF  F01B         	call	_putch
  4762  0001F8                     l6130:
  4763  0001F8  0100               	movlb	0	; () banked
  4764  0001FA  07DE               	decf	printf@width& (0+255),f,b
  4765  0001FC  A0D8               	btfss	status,0,c
  4766  0001FE  07DF               	decf	(printf@width+1)& (0+255),f,b
  4767  000200  0100               	movlb	0	; () banked
  4768  000202  29DE               	incf	printf@width& (0+255),w,b
  4769  000204  E1F6               	bnz	l6128
  4770  000206  0100               	movlb	0	; () banked
  4771  000208  29DF               	incf	(printf@width+1)& (0+255),w,b
  4772  00020A  B4D8               	btfsc	status,2,c
  4773  00020C  D00B               	goto	l6136
  4774  00020E  D7F1               	goto	l6128
  4775  000210                     l6132:
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;doprnt.c: 768: (putch(*cp++) );
  4779  000210  C0CB  FFD9         	movff	printf@cp,fsr2l
  4780  000214  C0CC  FFDA         	movff	printf@cp+1,fsr2h
  4781  000218  50DF               	movf	indf2,w,c
  4782  00021A  ECAF  F01B         	call	_putch
  4783  00021E  0100               	movlb	0	; () banked
  4784  000220  4BCB               	infsnz	printf@cp& (0+255),f,b
  4785  000222  2BCC               	incf	(printf@cp+1)& (0+255),f,b
  4786  000224                     l6136:
  4787                           
  4788                           ; BSR set to: 0
  4789  000224  0100               	movlb	0	; () banked
  4790  000226  07CD               	decf	printf@len& (0+255),f,b
  4791  000228  A0D8               	btfss	status,0,c
  4792  00022A  07CE               	decf	(printf@len+1)& (0+255),f,b
  4793  00022C  0100               	movlb	0	; () banked
  4794  00022E  29CD               	incf	printf@len& (0+255),w,b
  4795  000230  E1EF               	bnz	l6132
  4796  000232  0100               	movlb	0	; () banked
  4797  000234  29CE               	incf	(printf@len+1)& (0+255),w,b
  4798  000236  B4D8               	btfsc	status,2,c
  4799  000238  EFF5  F006         	goto	l6436
  4800  00023C  D7E9               	goto	l6132
  4801  00023E                     l6138:
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4805  00023E  C0CF  FFD9         	movff	printf@ap,fsr2l
  4806  000242  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  4807  000246  50DF               	movf	indf2,w,c
  4808  000248  0100               	movlb	0	; () banked
  4809  00024A  6FE4               	movwf	printf@c& (0+255),b
  4810                           
  4811                           ; BSR set to: 0
  4812  00024C  0E02               	movlw	2
  4813  00024E  0100               	movlb	0	; () banked
  4814  000250  27CF               	addwf	printf@ap& (0+255),f,b
  4815  000252  0E00               	movlw	0
  4816  000254  23D0               	addwfc	(printf@ap+1)& (0+255),f,b
  4817  000256                     l6142:
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;doprnt.c: 805: cp = (char *)&c;
  4821  000256  0EE4               	movlw	low printf@c
  4822  000258  0100               	movlb	0	; () banked
  4823  00025A  6FCB               	movwf	printf@cp& (0+255),b
  4824  00025C  0E00               	movlw	high printf@c
  4825  00025E  0100               	movlb	0	; () banked
  4826  000260  6FCC               	movwf	(printf@cp+1)& (0+255),b
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;doprnt.c: 806: len = 1;
  4830  000262  0E00               	movlw	0
  4831  000264  0100               	movlb	0	; () banked
  4832  000266  6FCE               	movwf	(printf@len+1)& (0+255),b
  4833  000268  0E01               	movlw	1
  4834  00026A  6FCD               	movwf	printf@len& (0+255),b
  4835                           
  4836                           ;doprnt.c: 807: goto dostring;
  4837  00026C  D795               	goto	l6116
  4838  00026E                     l6148:
  4839  00026E  C0B7  FFF6         	movff	printf@f,tblptrl
  4840  000272  C0B8  FFF7         	movff	printf@f+1,tblptrh
  4841  000276  0100               	movlb	0	; () banked
  4842  000278  4BB7               	infsnz	printf@f& (0+255),f,b
  4843  00027A  2BB8               	incf	(printf@f+1)& (0+255),f,b
  4844  00027C                     	if	0	;tblptru may be non-zero
  4845  00027C                     	endif
  4846  00027C                     	if	0	;tblptru may be non-zero
  4847  00027C                     	endif
  4848  00027C  0008               	tblrd		*
  4849  00027E  CFF5 F0E4          	movff	tablat,printf@c
  4850  000282  0100               	movlb	0	; () banked
  4851  000284  51E4               	movf	printf@c& (0+255),w,b
  4852                           
  4853                           ; Switch size 1, requested type "space"
  4854                           ; Number of cases is 7, Range of values is 0 to 120
  4855                           ; switch strategies available:
  4856                           ; Name         Instructions Cycles
  4857                           ; simple_byte           22    12 (average)
  4858                           ;	Chosen strategy is simple_byte
  4859  000286  0A00               	xorlw	0	; case 0
  4860  000288  B4D8               	btfsc	status,2,c
  4861  00028A  0012               	return	
  4862  00028C  0A63               	xorlw	99	; case 99
  4863  00028E  B4D8               	btfsc	status,2,c
  4864  000290  D7D6               	goto	l6138
  4865  000292  0A07               	xorlw	7	; case 100
  4866  000294  B4D8               	btfsc	status,2,c
  4867  000296  D00D               	goto	l6150
  4868  000298  0A02               	xorlw	2	; case 102
  4869  00029A  B4D8               	btfsc	status,2,c
  4870  00029C  D777               	goto	l6112
  4871  00029E  0A0F               	xorlw	15	; case 105
  4872  0002A0  B4D8               	btfsc	status,2,c
  4873  0002A2  D007               	goto	l6150
  4874  0002A4  0A05               	xorlw	5	; case 108
  4875  0002A6  B4D8               	btfsc	status,2,c
  4876  0002A8  D76E               	goto	l6110
  4877  0002AA  0A14               	xorlw	20	; case 120
  4878  0002AC  B4D8               	btfsc	status,2,c
  4879  0002AE  D771               	goto	l6114
  4880  0002B0  D7D2               	goto	l6142
  4881  0002B2                     l6150:
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;doprnt.c: 825: if(flag & (0x700)) {
  4885  0002B2  0E07               	movlw	7
  4886  0002B4  0100               	movlb	0	; () banked
  4887  0002B6  15E1               	andwf	(printf@flag+1)& (0+255),w,b
  4888  0002B8  B4D8               	btfsc	status,2,c
  4889  0002BA  D36D               	goto	l705
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;doprnt.c: 827: if(flag & 0x1000)
  4893  0002BC  0100               	movlb	0	; () banked
  4894  0002BE  A9E1               	btfss	(printf@flag+1)& (0+255),4,b
  4895  0002C0  D005               	goto	l6156
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;doprnt.c: 829: prec = 6;
  4899  0002C2  0E00               	movlw	0
  4900  0002C4  0100               	movlb	0	; () banked
  4901  0002C6  6FE3               	movwf	(printf@prec+1)& (0+255),b
  4902  0002C8  0E06               	movlw	6
  4903  0002CA  6FE2               	movwf	printf@prec& (0+255),b
  4904  0002CC                     l6156:
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4908  0002CC  C0CF  FFD9         	movff	printf@ap,fsr2l
  4909  0002D0  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  4910  0002D4  CFDE F0D7          	movff	postinc2,printf@fval
  4911  0002D8  CFDE F0D8          	movff	postinc2,printf@fval+1
  4912  0002DC  CFDD F0D9          	movff	postdec2,printf@fval+2
  4913                           
  4914                           ; BSR set to: 0
  4915  0002E0  0E03               	movlw	3
  4916  0002E2  0100               	movlb	0	; () banked
  4917  0002E4  27CF               	addwf	printf@ap& (0+255),f,b
  4918  0002E6  0E00               	movlw	0
  4919  0002E8  23D0               	addwfc	(printf@ap+1)& (0+255),f,b
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;doprnt.c: 831: if(fval < 0.0) {
  4923  0002EA  0100               	movlb	0	; () banked
  4924  0002EC  AFD9               	btfss	(printf@fval+2)& (0+255),7,b
  4925  0002EE  D011               	goto	l6166
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;doprnt.c: 832: fval = -fval;
  4929  0002F0  C0D7  F022         	movff	printf@fval,___ftneg@f1
  4930  0002F4  C0D8  F023         	movff	printf@fval+1,___ftneg@f1+1
  4931  0002F8  C0D9  F024         	movff	printf@fval+2,___ftneg@f1+2
  4932  0002FC  EC8C  F01B         	call	___ftneg	;wreg free
  4933  000300  C022  F0D7         	movff	?___ftneg,printf@fval
  4934  000304  C023  F0D8         	movff	?___ftneg+1,printf@fval+1
  4935  000308  C024  F0D9         	movff	?___ftneg+2,printf@fval+2
  4936                           
  4937                           ;doprnt.c: 833: flag |= 0x03;
  4938  00030C  0E03               	movlw	3
  4939  00030E  0100               	movlb	0	; () banked
  4940  000310  13E0               	iorwf	printf@flag& (0+255),f,b
  4941  000312                     l6166:
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;doprnt.c: 834: }
  4945                           ;doprnt.c: 835: exp = 0;
  4946  000312  0E00               	movlw	0
  4947  000314  0100               	movlb	0	; () banked
  4948  000316  6FD6               	movwf	(printf@exp+1)& (0+255),b
  4949  000318  0E00               	movlw	0
  4950  00031A  6FD5               	movwf	printf@exp& (0+255),b
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;doprnt.c: 836: if( fval!=0) {
  4954  00031C  0100               	movlb	0	; () banked
  4955  00031E  51D7               	movf	printf@fval& (0+255),w,b
  4956  000320  0100               	movlb	0	; () banked
  4957  000322  11D8               	iorwf	(printf@fval+1)& (0+255),w,b
  4958  000324  0100               	movlb	0	; () banked
  4959  000326  11D9               	iorwf	(printf@fval+2)& (0+255),w,b
  4960  000328  B4D8               	btfsc	status,2,c
  4961  00032A  D091               	goto	l6194
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4965  00032C  0E82               	movlw	130
  4966  00032E  0100               	movlb	0	; () banked
  4967  000330  6FC1               	movwf	??_printf& (0+255),b
  4968  000332  0EFF               	movlw	255
  4969  000334  0100               	movlb	0	; () banked
  4970  000336  6FC2               	movwf	(??_printf+1)& (0+255),b
  4971  000338  C0D7  F0C3         	movff	printf@fval,??_printf+2
  4972  00033C  C0D8  F0C4         	movff	printf@fval+1,??_printf+3
  4973  000340  C0D9  F0C5         	movff	printf@fval+2,??_printf+4
  4974  000344  C0DA  F0C6         	movff	printf@fval+3,??_printf+5
  4975  000348  0E10               	movlw	16
  4976  00034A  D006               	goto	u6310
  4977  00034C                     u6315:
  4978  00034C  0100               	movlb	0	; () banked
  4979  00034E  90D8               	bcf	status,0,c
  4980  000350  33C6               	rrcf	(??_printf+5)& (0+255),f,b
  4981  000352  33C5               	rrcf	(??_printf+4)& (0+255),f,b
  4982  000354  33C4               	rrcf	(??_printf+3)& (0+255),f,b
  4983  000356  33C3               	rrcf	(??_printf+2)& (0+255),f,b
  4984  000358                     u6310:
  4985  000358  2EE8               	decfsz	wreg,f,c
  4986  00035A  D7F8               	goto	u6315
  4987  00035C  0100               	movlb	0	; () banked
  4988  00035E  51C3               	movf	(??_printf+2)& (0+255),w,b
  4989  000360  0100               	movlb	0	; () banked
  4990  000362  25C1               	addwf	??_printf& (0+255),w,b
  4991  000364  0100               	movlb	0	; () banked
  4992  000366  6FD5               	movwf	printf@exp& (0+255),b
  4993  000368  0E00               	movlw	0
  4994  00036A  0100               	movlb	0	; () banked
  4995  00036C  21C2               	addwfc	(??_printf+1)& (0+255),w,b
  4996  00036E  0100               	movlb	0	; () banked
  4997  000370  6FD6               	movwf	(printf@exp+1)& (0+255),b
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;doprnt.c: 838: exp--;
  5001  000372  0100               	movlb	0	; () banked
  5002  000374  07D5               	decf	printf@exp& (0+255),f,b
  5003  000376  A0D8               	btfss	status,0,c
  5004  000378  07D6               	decf	(printf@exp+1)& (0+255),f,b
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;doprnt.c: 839: exp *= 3;
  5008  00037A  C0D5  F030         	movff	printf@exp,___wmul@multiplier
  5009  00037E  C0D6  F031         	movff	printf@exp+1,___wmul@multiplier+1
  5010  000382  0E00               	movlw	0
  5011  000384  6E33               	movwf	___wmul@multiplicand+1,c
  5012  000386  0E03               	movlw	3
  5013  000388  6E32               	movwf	___wmul@multiplicand,c
  5014  00038A  EC79  F01B         	call	___wmul	;wreg free
  5015  00038E  C030  F0D5         	movff	?___wmul,printf@exp
  5016  000392  C031  F0D6         	movff	?___wmul+1,printf@exp+1
  5017                           
  5018                           ;doprnt.c: 840: exp /= 10;
  5019  000396  C0D5  F028         	movff	printf@exp,___awdiv@dividend
  5020  00039A  C0D6  F029         	movff	printf@exp+1,___awdiv@dividend+1
  5021  00039E  0E00               	movlw	0
  5022  0003A0  6E2B               	movwf	___awdiv@divisor+1,c
  5023  0003A2  0E0A               	movlw	10
  5024  0003A4  6E2A               	movwf	___awdiv@divisor,c
  5025  0003A6  ECDD  F017         	call	___awdiv	;wreg free
  5026  0003AA  C028  F0D5         	movff	?___awdiv,printf@exp
  5027  0003AE  C029  F0D6         	movff	?___awdiv+1,printf@exp+1
  5028                           
  5029                           ;doprnt.c: 841: if(exp < 0)
  5030  0003B2  0100               	movlb	0	; () banked
  5031  0003B4  AFD6               	btfss	(printf@exp+1)& (0+255),7,b
  5032  0003B6  D004               	goto	l6182
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;doprnt.c: 842: exp--;
  5036  0003B8  0100               	movlb	0	; () banked
  5037  0003BA  07D5               	decf	printf@exp& (0+255),f,b
  5038  0003BC  A0D8               	btfss	status,0,c
  5039  0003BE  07D6               	decf	(printf@exp+1)& (0+255),f,b
  5040  0003C0                     l6182:
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5044  0003C0  0100               	movlb	0	; () banked
  5045  0003C2  51D5               	movf	printf@exp& (0+255),w,b
  5046  0003C4  0800               	sublw	0
  5047  0003C6  EC7A  F009         	call	_scale
  5048  0003CA  C092  F0D1         	movff	?_scale,printf@tmpval
  5049  0003CE  C093  F0D2         	movff	?_scale+1,printf@tmpval+1
  5050  0003D2  C094  F0D3         	movff	?_scale+2,printf@tmpval+2
  5051                           
  5052                           ;doprnt.c: 847: tmpval.integ *= fval;
  5053  0003D6  C0D1  F086         	movff	printf@tmpval,___ftmul@f1
  5054  0003DA  C0D2  F087         	movff	printf@tmpval+1,___ftmul@f1+1
  5055  0003DE  C0D3  F088         	movff	printf@tmpval+2,___ftmul@f1+2
  5056  0003E2  C0D7  F089         	movff	printf@fval,___ftmul@f2
  5057  0003E6  C0D8  F08A         	movff	printf@fval+1,___ftmul@f2+1
  5058  0003EA  C0D9  F08B         	movff	printf@fval+2,___ftmul@f2+2
  5059  0003EE  EC52  F010         	call	___ftmul	;wreg free
  5060  0003F2  C086  F0D1         	movff	?___ftmul,printf@tmpval
  5061  0003F6  C087  F0D2         	movff	?___ftmul+1,printf@tmpval+1
  5062  0003FA  C088  F0D3         	movff	?___ftmul+2,printf@tmpval+2
  5063                           
  5064                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5065  0003FE  C0D1  F02E         	movff	printf@tmpval,___ftge@ff1
  5066  000402  C0D2  F02F         	movff	printf@tmpval+1,___ftge@ff1+1
  5067  000406  C0D3  F030         	movff	printf@tmpval+2,___ftge@ff1+2
  5068  00040A  0E00               	movlw	0
  5069  00040C  6E31               	movwf	___ftge@ff2,c
  5070  00040E  0E80               	movlw	128
  5071  000410  6E32               	movwf	___ftge@ff2+1,c
  5072  000412  0E3F               	movlw	63
  5073  000414  6E33               	movwf	___ftge@ff2+2,c
  5074  000416  EC0B  F017         	call	___ftge	;wreg free
  5075  00041A  B0D8               	btfsc	status,0,c
  5076  00041C  D005               	goto	l6190
  5077                           
  5078                           ;doprnt.c: 849: exp--;
  5079  00041E  0100               	movlb	0	; () banked
  5080  000420  07D5               	decf	printf@exp& (0+255),f,b
  5081  000422  A0D8               	btfss	status,0,c
  5082  000424  07D6               	decf	(printf@exp+1)& (0+255),f,b
  5083  000426  D013               	goto	l6194
  5084  000428                     l6190:
  5085                           
  5086                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5087  000428  C0D1  F02E         	movff	printf@tmpval,___ftge@ff1
  5088  00042C  C0D2  F02F         	movff	printf@tmpval+1,___ftge@ff1+1
  5089  000430  C0D3  F030         	movff	printf@tmpval+2,___ftge@ff1+2
  5090  000434  0E00               	movlw	0
  5091  000436  6E31               	movwf	___ftge@ff2,c
  5092  000438  0E20               	movlw	32
  5093  00043A  6E32               	movwf	___ftge@ff2+1,c
  5094  00043C  0E41               	movlw	65
  5095  00043E  6E33               	movwf	___ftge@ff2+2,c
  5096  000440  EC0B  F017         	call	___ftge	;wreg free
  5097  000444  A0D8               	btfss	status,0,c
  5098  000446  D003               	goto	l6194
  5099                           
  5100                           ;doprnt.c: 851: exp++;
  5101  000448  0100               	movlb	0	; () banked
  5102  00044A  4BD5               	infsnz	printf@exp& (0+255),f,b
  5103  00044C  2BD6               	incf	(printf@exp+1)& (0+255),f,b
  5104  00044E                     l6194:
  5105                           
  5106                           ;doprnt.c: 852: }
  5107                           ;doprnt.c: 1112: if(prec <= 12)
  5108  00044E  0100               	movlb	0	; () banked
  5109  000450  BFE3               	btfsc	(printf@prec+1)& (0+255),7,b
  5110  000452  D008               	goto	l6196
  5111  000454  0100               	movlb	0	; () banked
  5112  000456  51E3               	movf	(printf@prec+1)& (0+255),w,b
  5113  000458  E11D               	bnz	l6198
  5114  00045A  0E0D               	movlw	13
  5115  00045C  0100               	movlb	0	; () banked
  5116  00045E  5DE2               	subwf	printf@prec& (0+255),w,b
  5117  000460  B0D8               	btfsc	status,0,c
  5118  000462  D018               	goto	l6198
  5119  000464                     l6196:
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;doprnt.c: 1113: fval += fround(prec);
  5123  000464  C0D7  F09C         	movff	printf@fval,___ftadd@f1
  5124  000468  C0D8  F09D         	movff	printf@fval+1,___ftadd@f1+1
  5125  00046C  C0D9  F09E         	movff	printf@fval+2,___ftadd@f1+2
  5126  000470  0100               	movlb	0	; () banked
  5127  000472  51E2               	movf	printf@prec& (0+255),w,b
  5128  000474  EC76  F00E         	call	_fround
  5129  000478  C092  F09F         	movff	?_fround,___ftadd@f2
  5130  00047C  C093  F0A0         	movff	?_fround+1,___ftadd@f2+1
  5131  000480  C094  F0A1         	movff	?_fround+2,___ftadd@f2+2
  5132  000484  EC42  F00D         	call	___ftadd	;wreg free
  5133  000488  C09C  F0D7         	movff	?___ftadd,printf@fval
  5134  00048C  C09D  F0D8         	movff	?___ftadd+1,printf@fval+1
  5135  000490  C09E  F0D9         	movff	?___ftadd+2,printf@fval+2
  5136  000494                     l6198:
  5137                           
  5138                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5139  000494  0100               	movlb	0	; () banked
  5140  000496  BFD6               	btfsc	(printf@exp+1)& (0+255),7,b
  5141  000498  D008               	goto	l6200
  5142  00049A  0100               	movlb	0	; () banked
  5143  00049C  51D6               	movf	(printf@exp+1)& (0+255),w,b
  5144  00049E  E12A               	bnz	l6206
  5145  0004A0  0E0A               	movlw	10
  5146  0004A2  0100               	movlb	0	; () banked
  5147  0004A4  5DD5               	subwf	printf@exp& (0+255),w,b
  5148  0004A6  B0D8               	btfsc	status,0,c
  5149  0004A8  D025               	goto	l6206
  5150  0004AA                     l6200:
  5151                           
  5152                           ; BSR set to: 0
  5153  0004AA  0100               	movlb	0	; () banked
  5154  0004AC  51D7               	movf	printf@fval& (0+255),w,b
  5155  0004AE  0100               	movlb	0	; () banked
  5156  0004B0  11D8               	iorwf	(printf@fval+1)& (0+255),w,b
  5157  0004B2  0100               	movlb	0	; () banked
  5158  0004B4  11D9               	iorwf	(printf@fval+2)& (0+255),w,b
  5159  0004B6  B4D8               	btfsc	status,2,c
  5160  0004B8  D05F               	goto	l6220
  5161                           
  5162                           ; BSR set to: 0
  5163  0004BA  C0D7  F0A8         	movff	printf@fval,___fttol@f1
  5164  0004BE  C0D8  F0A9         	movff	printf@fval+1,___fttol@f1+1
  5165  0004C2  C0D9  F0AA         	movff	printf@fval+2,___fttol@f1+2
  5166  0004C6  ECFB  F010         	call	___fttol	;wreg free
  5167  0004CA  0100               	movlb	0	; () banked
  5168  0004CC  51A8               	movf	?___fttol& (0+255),w,b
  5169  0004CE  0100               	movlb	0	; () banked
  5170  0004D0  11A9               	iorwf	(?___fttol+1)& (0+255),w,b
  5171  0004D2  0100               	movlb	0	; () banked
  5172  0004D4  11AA               	iorwf	(?___fttol+2)& (0+255),w,b
  5173  0004D6  0100               	movlb	0	; () banked
  5174  0004D8  11AB               	iorwf	(?___fttol+3)& (0+255),w,b
  5175  0004DA  A4D8               	btfss	status,2,c
  5176  0004DC  D04D               	goto	l6220
  5177                           
  5178                           ; BSR set to: 0
  5179  0004DE  0100               	movlb	0	; () banked
  5180  0004E0  BFD6               	btfsc	(printf@exp+1)& (0+255),7,b
  5181  0004E2  D04A               	goto	l6220
  5182  0004E4  0100               	movlb	0	; () banked
  5183  0004E6  51D6               	movf	(printf@exp+1)& (0+255),w,b
  5184  0004E8  E105               	bnz	l6206
  5185  0004EA  0E02               	movlw	2
  5186  0004EC  0100               	movlb	0	; () banked
  5187  0004EE  5DD5               	subwf	printf@exp& (0+255),w,b
  5188  0004F0  A0D8               	btfss	status,0,c
  5189  0004F2  D042               	goto	l6220
  5190  0004F4                     l6206:
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5194  0004F4  C0D1  F02E         	movff	printf@tmpval,___ftge@ff1
  5195  0004F8  C0D2  F02F         	movff	printf@tmpval+1,___ftge@ff1+1
  5196  0004FC  C0D3  F030         	movff	printf@tmpval+2,___ftge@ff1+2
  5197  000500  0E70               	movlw	112
  5198  000502  6E31               	movwf	___ftge@ff2,c
  5199  000504  0E89               	movlw	137
  5200  000506  6E32               	movwf	___ftge@ff2+1,c
  5201  000508  0E40               	movlw	64
  5202  00050A  6E33               	movwf	___ftge@ff2+2,c
  5203  00050C  EC0B  F017         	call	___ftge	;wreg free
  5204  000510  B0D8               	btfsc	status,0,c
  5205  000512  D003               	goto	l6210
  5206                           
  5207                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5208  000514  0100               	movlb	0	; () banked
  5209  000516  0EF7               	movlw	247
  5210  000518  D002               	goto	L1
  5211  00051A                     l6210:
  5212                           
  5213                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5214  00051A  0100               	movlb	0	; () banked
  5215  00051C  0EF8               	movlw	248
  5216  00051E                     L1:
  5217  00051E  27D5               	addwf	printf@exp& (0+255),f,b
  5218  000520  0EFF               	movlw	255
  5219  000522  23D6               	addwfc	(printf@exp+1)& (0+255),f,b
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;doprnt.c: 1124: }
  5223                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5224                           
  5225                           ; BSR set to: 0
  5226  000524  0100               	movlb	0	; () banked
  5227  000526  51D5               	movf	printf@exp& (0+255),w,b
  5228  000528  EC7A  F009         	call	_scale
  5229  00052C  C092  F0D1         	movff	?_scale,printf@tmpval
  5230  000530  C093  F0D2         	movff	?_scale+1,printf@tmpval+1
  5231  000534  C094  F0D3         	movff	?_scale+2,printf@tmpval+2
  5232                           
  5233                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5234  000538  C0D7  F022         	movff	printf@fval,__tdiv_to_l_@f1
  5235  00053C  C0D8  F023         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5236  000540  C0D9  F024         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5237  000544  C0D1  F025         	movff	printf@tmpval,__tdiv_to_l_@f2
  5238  000548  C0D2  F026         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5239  00054C  C0D3  F027         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5240  000550  EC9D  F011         	call	__tdiv_to_l_	;wreg free
  5241  000554  C022  F0DA         	movff	?__tdiv_to_l_,printf@val
  5242  000558  C023  F0DB         	movff	?__tdiv_to_l_+1,printf@val+1
  5243  00055C  C024  F0DC         	movff	?__tdiv_to_l_+2,printf@val+2
  5244  000560  C025  F0DD         	movff	?__tdiv_to_l_+3,printf@val+3
  5245                           
  5246                           ;doprnt.c: 1129: fval = 0.0;
  5247  000564  0E00               	movlw	0
  5248  000566  0100               	movlb	0	; () banked
  5249  000568  6FD7               	movwf	printf@fval& (0+255),b
  5250  00056A  0E00               	movlw	0
  5251  00056C  0100               	movlb	0	; () banked
  5252  00056E  6FD8               	movwf	(printf@fval+1)& (0+255),b
  5253  000570  0E00               	movlw	0
  5254  000572  0100               	movlb	0	; () banked
  5255  000574  6FD9               	movwf	(printf@fval+2)& (0+255),b
  5256                           
  5257                           ;doprnt.c: 1130: } else {
  5258  000576  D033               	goto	l6224
  5259  000578                     l6220:
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5263  000578  C0D7  F0A8         	movff	printf@fval,___fttol@f1
  5264  00057C  C0D8  F0A9         	movff	printf@fval+1,___fttol@f1+1
  5265  000580  C0D9  F0AA         	movff	printf@fval+2,___fttol@f1+2
  5266  000584  ECFB  F010         	call	___fttol	;wreg free
  5267  000588  C0A8  F0DA         	movff	?___fttol,printf@val
  5268  00058C  C0A9  F0DB         	movff	?___fttol+1,printf@val+1
  5269  000590  C0AA  F0DC         	movff	?___fttol+2,printf@val+2
  5270  000594  C0AB  F0DD         	movff	?___fttol+3,printf@val+3
  5271                           
  5272                           ;doprnt.c: 1132: fval -= (double)val;
  5273  000598  C0D7  F0A8         	movff	printf@fval,___ftsub@f1
  5274  00059C  C0D8  F0A9         	movff	printf@fval+1,___ftsub@f1+1
  5275  0005A0  C0D9  F0AA         	movff	printf@fval+2,___ftsub@f1+2
  5276  0005A4  C0DA  F02A         	movff	printf@val,___lltoft@c
  5277  0005A8  C0DB  F02B         	movff	printf@val+1,___lltoft@c+1
  5278  0005AC  C0DC  F02C         	movff	printf@val+2,___lltoft@c+2
  5279  0005B0  C0DD  F02D         	movff	printf@val+3,___lltoft@c+3
  5280  0005B4  ECAF  F019         	call	___lltoft	;wreg free
  5281  0005B8  C02A  F0AB         	movff	?___lltoft,___ftsub@f2
  5282  0005BC  C02B  F0AC         	movff	?___lltoft+1,___ftsub@f2+1
  5283  0005C0  C02C  F0AD         	movff	?___lltoft+2,___ftsub@f2+2
  5284  0005C4  ECDD  F019         	call	___ftsub	;wreg free
  5285  0005C8  C0A8  F0D7         	movff	?___ftsub,printf@fval
  5286  0005CC  C0A9  F0D8         	movff	?___ftsub+1,printf@fval+1
  5287  0005D0  C0AA  F0D9         	movff	?___ftsub+2,printf@fval+2
  5288                           
  5289                           ;doprnt.c: 1133: exp = 0;
  5290  0005D4  0E00               	movlw	0
  5291  0005D6  0100               	movlb	0	; () banked
  5292  0005D8  6FD6               	movwf	(printf@exp+1)& (0+255),b
  5293  0005DA  0E00               	movlw	0
  5294  0005DC  6FD5               	movwf	printf@exp& (0+255),b
  5295  0005DE                     l6224:
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;doprnt.c: 1134: }
  5299                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5300  0005DE  0E01               	movlw	1
  5301  0005E0  0100               	movlb	0	; () banked
  5302  0005E2  6FE4               	movwf	printf@c& (0+255),b
  5303  0005E4                     l6226:
  5304                           
  5305                           ; BSR set to: 0
  5306  0005E4  0E0A               	movlw	10
  5307  0005E6  0100               	movlb	0	; () banked
  5308  0005E8  19E4               	xorwf	printf@c& (0+255),w,b
  5309  0005EA  B4D8               	btfsc	status,2,c
  5310  0005EC  D01E               	goto	l6238
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;doprnt.c: 1137: if(val < dpowers[c])
  5314                           
  5315                           ; BSR set to: 0
  5316                           
  5317                           ; BSR set to: 0
  5318  0005EE  0100               	movlb	0	; () banked
  5319  0005F0  51E4               	movf	printf@c& (0+255),w,b
  5320  0005F2  0D04               	mullw	4
  5321  0005F4  0E1D               	movlw	low _dpowers
  5322  0005F6  24F3               	addwf	prodl,w,c
  5323  0005F8  6EF6               	movwf	tblptrl,c
  5324  0005FA  0EFE               	movlw	high _dpowers
  5325  0005FC  20F4               	addwfc	prodh,w,c
  5326  0005FE  6EF7               	movwf	tblptrh,c
  5327  000600                     	if	0	;There are less than 3 active tblptr bytes
  5328  000600                     	endif
  5329  000600  0009               	tblrd		*+
  5330  000602  50F5               	movf	tablat,w,c
  5331  000604  0100               	movlb	0	; () banked
  5332  000606  5DDA               	subwf	printf@val& (0+255),w,b
  5333  000608  0009               	tblrd		*+
  5334  00060A  50F5               	movf	tablat,w,c
  5335  00060C  0100               	movlb	0	; () banked
  5336  00060E  59DB               	subwfb	(printf@val+1)& (0+255),w,b
  5337  000610  0009               	tblrd		*+
  5338  000612  50F5               	movf	tablat,w,c
  5339  000614  0100               	movlb	0	; () banked
  5340  000616  59DC               	subwfb	(printf@val+2)& (0+255),w,b
  5341  000618  0009               	tblrd		*+
  5342  00061A  50F5               	movf	tablat,w,c
  5343  00061C  0100               	movlb	0	; () banked
  5344  00061E  59DD               	subwfb	(printf@val+3)& (0+255),w,b
  5345  000620  A0D8               	btfss	status,0,c
  5346  000622  D003               	goto	l6238
  5347                           
  5348                           ; BSR set to: 0
  5349                           
  5350                           ; BSR set to: 0
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;doprnt.c: 1138: break;
  5354  000624  0100               	movlb	0	; () banked
  5355  000626  2BE4               	incf	printf@c& (0+255),f,b
  5356  000628  D7DD               	goto	l6226
  5357  00062A                     l6238:
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;doprnt.c: 1142: width -= prec + c + exp;
  5361  00062A  C0E4  F0C1         	movff	printf@c,??_printf
  5362  00062E  0100               	movlb	0	; () banked
  5363  000630  6BC2               	clrf	(??_printf+1)& (0+255),b
  5364  000632  BFC1               	btfsc	??_printf& (0+255),7,b
  5365  000634  07C2               	decf	(??_printf+1)& (0+255),f,b
  5366  000636  0100               	movlb	0	; () banked
  5367  000638  51E2               	movf	printf@prec& (0+255),w,b
  5368  00063A  0100               	movlb	0	; () banked
  5369  00063C  27C1               	addwf	??_printf& (0+255),f,b
  5370  00063E  0100               	movlb	0	; () banked
  5371  000640  51E3               	movf	(printf@prec+1)& (0+255),w,b
  5372  000642  0100               	movlb	0	; () banked
  5373  000644  23C2               	addwfc	(??_printf+1)& (0+255),f,b
  5374  000646  0100               	movlb	0	; () banked
  5375  000648  51D5               	movf	printf@exp& (0+255),w,b
  5376  00064A  0100               	movlb	0	; () banked
  5377  00064C  27C1               	addwf	??_printf& (0+255),f,b
  5378  00064E  0100               	movlb	0	; () banked
  5379  000650  51D6               	movf	(printf@exp+1)& (0+255),w,b
  5380  000652  0100               	movlb	0	; () banked
  5381  000654  23C2               	addwfc	(??_printf+1)& (0+255),f,b
  5382  000656  0100               	movlb	0	; () banked
  5383  000658  51C1               	movf	??_printf& (0+255),w,b
  5384  00065A  0100               	movlb	0	; () banked
  5385  00065C  5FDE               	subwf	printf@width& (0+255),f,b
  5386  00065E  0100               	movlb	0	; () banked
  5387  000660  51C2               	movf	(??_printf+1)& (0+255),w,b
  5388  000662  0100               	movlb	0	; () banked
  5389  000664  5BDF               	subwfb	(printf@width+1)& (0+255),f,b
  5390                           
  5391                           ;doprnt.c: 1143: if(
  5392                           ;doprnt.c: 1147: prec)
  5393  000666  0100               	movlb	0	; () banked
  5394  000668  51E2               	movf	printf@prec& (0+255),w,b
  5395  00066A  0100               	movlb	0	; () banked
  5396  00066C  11E3               	iorwf	(printf@prec+1)& (0+255),w,b
  5397  00066E  B4D8               	btfsc	status,2,c
  5398  000670  D004               	goto	l6242
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;doprnt.c: 1148: width--;
  5402  000672  0100               	movlb	0	; () banked
  5403  000674  07DE               	decf	printf@width& (0+255),f,b
  5404  000676  A0D8               	btfss	status,0,c
  5405  000678  07DF               	decf	(printf@width+1)& (0+255),f,b
  5406  00067A                     l6242:
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;doprnt.c: 1149: if(flag & 0x03)
  5410  00067A  0E03               	movlw	3
  5411  00067C  0100               	movlb	0	; () banked
  5412  00067E  15E0               	andwf	printf@flag& (0+255),w,b
  5413  000680  0100               	movlb	0	; () banked
  5414  000682  6FC1               	movwf	??_printf& (0+255),b
  5415  000684  0E00               	movlw	0
  5416  000686  0100               	movlb	0	; () banked
  5417  000688  15E1               	andwf	(printf@flag+1)& (0+255),w,b
  5418  00068A  0100               	movlb	0	; () banked
  5419  00068C  6FC2               	movwf	(??_printf+1)& (0+255),b
  5420  00068E  0100               	movlb	0	; () banked
  5421  000690  51C1               	movf	??_printf& (0+255),w,b
  5422  000692  0100               	movlb	0	; () banked
  5423  000694  11C2               	iorwf	(??_printf+1)& (0+255),w,b
  5424  000696  B4D8               	btfsc	status,2,c
  5425  000698  D004               	goto	l6246
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;doprnt.c: 1150: width--;
  5429  00069A  0100               	movlb	0	; () banked
  5430  00069C  07DE               	decf	printf@width& (0+255),f,b
  5431  00069E  A0D8               	btfss	status,0,c
  5432  0006A0  07DF               	decf	(printf@width+1)& (0+255),f,b
  5433  0006A2                     l6246:
  5434                           
  5435                           ; BSR set to: 0
  5436                           ;doprnt.c: 1153: if(flag & 0x04) {
  5437  0006A2  0100               	movlb	0	; () banked
  5438  0006A4  A5E0               	btfss	printf@flag& (0+255),2,b
  5439  0006A6  D02D               	goto	l6262
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;doprnt.c: 1157: if(flag & 0x03)
  5443  0006A8  0E03               	movlw	3
  5444  0006AA  0100               	movlb	0	; () banked
  5445  0006AC  15E0               	andwf	printf@flag& (0+255),w,b
  5446  0006AE  0100               	movlb	0	; () banked
  5447  0006B0  6FC1               	movwf	??_printf& (0+255),b
  5448  0006B2  0E00               	movlw	0
  5449  0006B4  0100               	movlb	0	; () banked
  5450  0006B6  15E1               	andwf	(printf@flag+1)& (0+255),w,b
  5451  0006B8  0100               	movlb	0	; () banked
  5452  0006BA  6FC2               	movwf	(??_printf+1)& (0+255),b
  5453  0006BC  0100               	movlb	0	; () banked
  5454  0006BE  51C1               	movf	??_printf& (0+255),w,b
  5455  0006C0  0100               	movlb	0	; () banked
  5456  0006C2  11C2               	iorwf	(??_printf+1)& (0+255),w,b
  5457  0006C4  B4D8               	btfsc	status,2,c
  5458  0006C6  D00B               	goto	l6256
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;doprnt.c: 1159: (putch('-') );
  5462  0006C8  0E2D               	movlw	45
  5463  0006CA  ECAF  F01B         	call	_putch
  5464                           
  5465                           ;doprnt.c: 1168: while(width > 0) {
  5466  0006CE  D007               	goto	l6256
  5467  0006D0                     l6252:
  5468                           
  5469                           ;doprnt.c: 1169: (putch('0') );
  5470  0006D0  0E30               	movlw	48
  5471  0006D2  ECAF  F01B         	call	_putch
  5472                           
  5473                           ;doprnt.c: 1170: width--;
  5474  0006D6  0100               	movlb	0	; () banked
  5475  0006D8  07DE               	decf	printf@width& (0+255),f,b
  5476  0006DA  A0D8               	btfss	status,0,c
  5477  0006DC  07DF               	decf	(printf@width+1)& (0+255),f,b
  5478  0006DE                     l6256:
  5479  0006DE  0100               	movlb	0	; () banked
  5480  0006E0  BFDF               	btfsc	(printf@width+1)& (0+255),7,b
  5481  0006E2  D073               	goto	l6274
  5482  0006E4  0100               	movlb	0	; () banked
  5483  0006E6  51DF               	movf	(printf@width+1)& (0+255),w,b
  5484  0006E8  E1F3               	bnz	l6252
  5485  0006EA  0100               	movlb	0	; () banked
  5486  0006EC  05DE               	decf	printf@width& (0+255),w,b
  5487  0006EE  A0D8               	btfss	status,0,c
  5488  0006F0  D06C               	goto	l6274
  5489  0006F2  D7EE               	goto	l6252
  5490  0006F4                     l6258:
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;doprnt.c: 1181: (putch(' ') );
  5494  0006F4  0E20               	movlw	32
  5495  0006F6  ECAF  F01B         	call	_putch
  5496                           
  5497                           ;doprnt.c: 1182: width--;
  5498  0006FA  0100               	movlb	0	; () banked
  5499  0006FC  07DE               	decf	printf@width& (0+255),f,b
  5500  0006FE  A0D8               	btfss	status,0,c
  5501  000700  07DF               	decf	(printf@width+1)& (0+255),f,b
  5502  000702                     l6262:
  5503                           
  5504                           ; BSR set to: 0
  5505  000702  0100               	movlb	0	; () banked
  5506  000704  BFDF               	btfsc	(printf@width+1)& (0+255),7,b
  5507  000706  D007               	goto	l6264
  5508  000708  0100               	movlb	0	; () banked
  5509  00070A  51DF               	movf	(printf@width+1)& (0+255),w,b
  5510  00070C  E1F3               	bnz	l6258
  5511  00070E  0100               	movlb	0	; () banked
  5512  000710  05DE               	decf	printf@width& (0+255),w,b
  5513  000712  B0D8               	btfsc	status,0,c
  5514  000714  D7EF               	goto	l6258
  5515  000716                     l6264:
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;doprnt.c: 1183: }
  5519                           ;doprnt.c: 1188: if(flag & 0x03)
  5520  000716  0E03               	movlw	3
  5521  000718  0100               	movlb	0	; () banked
  5522  00071A  15E0               	andwf	printf@flag& (0+255),w,b
  5523  00071C  0100               	movlb	0	; () banked
  5524  00071E  6FC1               	movwf	??_printf& (0+255),b
  5525  000720  0E00               	movlw	0
  5526  000722  0100               	movlb	0	; () banked
  5527  000724  15E1               	andwf	(printf@flag+1)& (0+255),w,b
  5528  000726  0100               	movlb	0	; () banked
  5529  000728  6FC2               	movwf	(??_printf+1)& (0+255),b
  5530  00072A  0100               	movlb	0	; () banked
  5531  00072C  51C1               	movf	??_printf& (0+255),w,b
  5532  00072E  0100               	movlb	0	; () banked
  5533  000730  11C2               	iorwf	(??_printf+1)& (0+255),w,b
  5534  000732  B4D8               	btfsc	status,2,c
  5535  000734  D04A               	goto	l6274
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;doprnt.c: 1190: (putch('-') );
  5539  000736  0E2D               	movlw	45
  5540  000738  ECAF  F01B         	call	_putch
  5541                           
  5542                           ;doprnt.c: 1195: }
  5543                           ;doprnt.c: 1196: while(c--) {
  5544  00073C  D046               	goto	l6274
  5545  00073E                     l6268:
  5546                           
  5547                           ;doprnt.c: 1200: {
  5548                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5549  00073E  C0DA  F022         	movff	printf@val,___lldiv@dividend
  5550  000742  C0DB  F023         	movff	printf@val+1,___lldiv@dividend+1
  5551  000746  C0DC  F024         	movff	printf@val+2,___lldiv@dividend+2
  5552  00074A  C0DD  F025         	movff	printf@val+3,___lldiv@dividend+3
  5553  00074E  0100               	movlb	0	; () banked
  5554  000750  51E4               	movf	printf@c& (0+255),w,b
  5555  000752  0D04               	mullw	4
  5556  000754  0E1D               	movlw	low _dpowers
  5557  000756  24F3               	addwf	prodl,w,c
  5558  000758  6EF6               	movwf	tblptrl,c
  5559  00075A  0EFE               	movlw	high _dpowers
  5560  00075C  20F4               	addwfc	prodh,w,c
  5561  00075E  6EF7               	movwf	tblptrh,c
  5562  000760                     	if	0	;There are less than 3 active tblptr bytes
  5563  000760                     	endif
  5564  000760  0009               	tblrd		*+
  5565  000762  CFF5 F026          	movff	tablat,___lldiv@divisor
  5566  000766  0009               	tblrd		*+
  5567  000768  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  5568  00076C  0009               	tblrd		*+
  5569  00076E  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  5570  000772  000A               	tblrd		*-
  5571  000774  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  5572  000778  EC1F  F018         	call	___lldiv	;wreg free
  5573  00077C  C022  F0D1         	movff	?___lldiv,printf@tmpval
  5574  000780  C023  F0D2         	movff	?___lldiv+1,printf@tmpval+1
  5575  000784  C024  F0D3         	movff	?___lldiv+2,printf@tmpval+2
  5576  000788  C025  F0D4         	movff	?___lldiv+3,printf@tmpval+3
  5577                           
  5578                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5579  00078C  C0D1  F02F         	movff	printf@tmpval,___llmod@dividend
  5580  000790  C0D2  F030         	movff	printf@tmpval+1,___llmod@dividend+1
  5581  000794  C0D3  F031         	movff	printf@tmpval+2,___llmod@dividend+2
  5582  000798  C0D4  F032         	movff	printf@tmpval+3,___llmod@dividend+3
  5583  00079C  0E0A               	movlw	10
  5584  00079E  6E33               	movwf	___llmod@divisor,c
  5585  0007A0  0E00               	movlw	0
  5586  0007A2  6E34               	movwf	___llmod@divisor+1,c
  5587  0007A4  0E00               	movlw	0
  5588  0007A6  6E35               	movwf	___llmod@divisor+2,c
  5589  0007A8  0E00               	movlw	0
  5590  0007AA  6E36               	movwf	___llmod@divisor+3,c
  5591  0007AC  EC49  F019         	call	___llmod	;wreg free
  5592  0007B0  C02F  F0D1         	movff	?___llmod,printf@tmpval
  5593  0007B4  C030  F0D2         	movff	?___llmod+1,printf@tmpval+1
  5594  0007B8  C031  F0D3         	movff	?___llmod+2,printf@tmpval+2
  5595  0007BC  C032  F0D4         	movff	?___llmod+3,printf@tmpval+3
  5596                           
  5597                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5598  0007C0  0100               	movlb	0	; () banked
  5599  0007C2  51D1               	movf	printf@tmpval& (0+255),w,b
  5600  0007C4  0F30               	addlw	48
  5601  0007C6  ECAF  F01B         	call	_putch
  5602  0007CA                     l6274:
  5603  0007CA  0100               	movlb	0	; () banked
  5604  0007CC  07E4               	decf	printf@c& (0+255),f,b
  5605  0007CE  0100               	movlb	0	; () banked
  5606  0007D0  29E4               	incf	printf@c& (0+255),w,b
  5607  0007D2  B4D8               	btfsc	status,2,c
  5608  0007D4  D008               	goto	l6280
  5609  0007D6  D7B3               	goto	l6268
  5610  0007D8                     l6276:
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;doprnt.c: 1208: (putch('0') );
  5614  0007D8  0E30               	movlw	48
  5615  0007DA  ECAF  F01B         	call	_putch
  5616                           
  5617                           ;doprnt.c: 1209: exp--;
  5618  0007DE  0100               	movlb	0	; () banked
  5619  0007E0  07D5               	decf	printf@exp& (0+255),f,b
  5620  0007E2  A0D8               	btfss	status,0,c
  5621  0007E4  07D6               	decf	(printf@exp+1)& (0+255),f,b
  5622  0007E6                     l6280:
  5623                           
  5624                           ; BSR set to: 0
  5625  0007E6  0100               	movlb	0	; () banked
  5626  0007E8  BFD6               	btfsc	(printf@exp+1)& (0+255),7,b
  5627  0007EA  D007               	goto	l6282
  5628  0007EC  0100               	movlb	0	; () banked
  5629  0007EE  51D6               	movf	(printf@exp+1)& (0+255),w,b
  5630  0007F0  E1F3               	bnz	l6276
  5631  0007F2  0100               	movlb	0	; () banked
  5632  0007F4  05D5               	decf	printf@exp& (0+255),w,b
  5633  0007F6  B0D8               	btfsc	status,0,c
  5634  0007F8  D7EF               	goto	l6276
  5635  0007FA                     l6282:
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;doprnt.c: 1210: }
  5639                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5640  0007FA  0100               	movlb	0	; () banked
  5641  0007FC  BFE3               	btfsc	(printf@prec+1)& (0+255),7,b
  5642  0007FE  D00C               	goto	l745
  5643  000800  0100               	movlb	0	; () banked
  5644  000802  51E3               	movf	(printf@prec+1)& (0+255),w,b
  5645  000804  E105               	bnz	u6530
  5646  000806  0E09               	movlw	9
  5647  000808  0100               	movlb	0	; () banked
  5648  00080A  5DE2               	subwf	printf@prec& (0+255),w,b
  5649  00080C  A0D8               	btfss	status,0,c
  5650  00080E  D004               	goto	l745
  5651  000810                     u6530:
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5655  000810  0E08               	movlw	8
  5656  000812  0100               	movlb	0	; () banked
  5657  000814  6FE4               	movwf	printf@c& (0+255),b
  5658  000816  D002               	goto	l6286
  5659  000818                     l745:
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;doprnt.c: 1213: else
  5663                           ;doprnt.c: 1214: c = prec;
  5664  000818  C0E2  F0E4         	movff	printf@prec,printf@c
  5665  00081C                     l6286:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;doprnt.c: 1215: prec -= c;
  5669  00081C  0100               	movlb	0	; () banked
  5670  00081E  51E4               	movf	printf@c& (0+255),w,b
  5671  000820  0100               	movlb	0	; () banked
  5672  000822  5FE2               	subwf	printf@prec& (0+255),f,b
  5673  000824  0E00               	movlw	0
  5674  000826  0100               	movlb	0	; () banked
  5675  000828  BFE4               	btfsc	printf@c& (0+255),7,b
  5676  00082A  0EFF               	movlw	255
  5677  00082C  0100               	movlb	0	; () banked
  5678  00082E  5BE3               	subwfb	(printf@prec+1)& (0+255),f,b
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;doprnt.c: 1219: if(c)
  5682  000830  0100               	movlb	0	; () banked
  5683  000832  51E4               	movf	printf@c& (0+255),w,b
  5684  000834  0100               	movlb	0	; () banked
  5685  000836  B4D8               	btfsc	status,2,c
  5686  000838  D003               	goto	l6292
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;doprnt.c: 1221: (putch('.') );
  5690  00083A  0E2E               	movlw	46
  5691  00083C  ECAF  F01B         	call	_putch
  5692  000840                     l6292:
  5693                           
  5694                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5695  000840  0100               	movlb	0	; () banked
  5696  000842  51E4               	movf	printf@c& (0+255),w,b
  5697  000844  EC7A  F009         	call	_scale
  5698  000848  C092  F0C7         	movff	?_scale,_printf$1341
  5699  00084C  C093  F0C8         	movff	?_scale+1,_printf$1341+1
  5700  000850  C094  F0C9         	movff	?_scale+2,_printf$1341+2
  5701                           
  5702                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5703  000854  C0D7  F089         	movff	printf@fval,___ftmul@f2
  5704  000858  C0D8  F08A         	movff	printf@fval+1,___ftmul@f2+1
  5705  00085C  C0D9  F08B         	movff	printf@fval+2,___ftmul@f2+2
  5706  000860  C0C7  F086         	movff	_printf$1341,___ftmul@f1
  5707  000864  C0C8  F087         	movff	_printf$1341+1,___ftmul@f1+1
  5708  000868  C0C9  F088         	movff	_printf$1341+2,___ftmul@f1+2
  5709  00086C  EC52  F010         	call	___ftmul	;wreg free
  5710  000870  C086  F0A8         	movff	?___ftmul,___fttol@f1
  5711  000874  C087  F0A9         	movff	?___ftmul+1,___fttol@f1+1
  5712  000878  C088  F0AA         	movff	?___ftmul+2,___fttol@f1+2
  5713  00087C  ECFB  F010         	call	___fttol	;wreg free
  5714  000880  C0A8  F0DA         	movff	?___fttol,printf@val
  5715  000884  C0A9  F0DB         	movff	?___fttol+1,printf@val+1
  5716  000888  C0AA  F0DC         	movff	?___fttol+2,printf@val+2
  5717  00088C  C0AB  F0DD         	movff	?___fttol+3,printf@val+3
  5718                           
  5719                           ;doprnt.c: 1228: while(c--) {
  5720  000890  D06D               	goto	l6302
  5721  000892                     l6296:
  5722                           
  5723                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5724  000892  C0DA  F022         	movff	printf@val,___lldiv@dividend
  5725  000896  C0DB  F023         	movff	printf@val+1,___lldiv@dividend+1
  5726  00089A  C0DC  F024         	movff	printf@val+2,___lldiv@dividend+2
  5727  00089E  C0DD  F025         	movff	printf@val+3,___lldiv@dividend+3
  5728  0008A2  0100               	movlb	0	; () banked
  5729  0008A4  51E4               	movf	printf@c& (0+255),w,b
  5730  0008A6  0D04               	mullw	4
  5731  0008A8  0E1D               	movlw	low _dpowers
  5732  0008AA  24F3               	addwf	prodl,w,c
  5733  0008AC  6EF6               	movwf	tblptrl,c
  5734  0008AE  0EFE               	movlw	high _dpowers
  5735  0008B0  20F4               	addwfc	prodh,w,c
  5736  0008B2  6EF7               	movwf	tblptrh,c
  5737  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  5738  0008B4                     	endif
  5739  0008B4  0009               	tblrd		*+
  5740  0008B6  CFF5 F026          	movff	tablat,___lldiv@divisor
  5741  0008BA  0009               	tblrd		*+
  5742  0008BC  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  5743  0008C0  0009               	tblrd		*+
  5744  0008C2  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  5745  0008C6  000A               	tblrd		*-
  5746  0008C8  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  5747  0008CC  EC1F  F018         	call	___lldiv	;wreg free
  5748  0008D0  C022  F0D1         	movff	?___lldiv,printf@tmpval
  5749  0008D4  C023  F0D2         	movff	?___lldiv+1,printf@tmpval+1
  5750  0008D8  C024  F0D3         	movff	?___lldiv+2,printf@tmpval+2
  5751  0008DC  C025  F0D4         	movff	?___lldiv+3,printf@tmpval+3
  5752                           
  5753                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5754  0008E0  C0D1  F02F         	movff	printf@tmpval,___llmod@dividend
  5755  0008E4  C0D2  F030         	movff	printf@tmpval+1,___llmod@dividend+1
  5756  0008E8  C0D3  F031         	movff	printf@tmpval+2,___llmod@dividend+2
  5757  0008EC  C0D4  F032         	movff	printf@tmpval+3,___llmod@dividend+3
  5758  0008F0  0E0A               	movlw	10
  5759  0008F2  6E33               	movwf	___llmod@divisor,c
  5760  0008F4  0E00               	movlw	0
  5761  0008F6  6E34               	movwf	___llmod@divisor+1,c
  5762  0008F8  0E00               	movlw	0
  5763  0008FA  6E35               	movwf	___llmod@divisor+2,c
  5764  0008FC  0E00               	movlw	0
  5765  0008FE  6E36               	movwf	___llmod@divisor+3,c
  5766  000900  EC49  F019         	call	___llmod	;wreg free
  5767  000904  C02F  F0D1         	movff	?___llmod,printf@tmpval
  5768  000908  C030  F0D2         	movff	?___llmod+1,printf@tmpval+1
  5769  00090C  C031  F0D3         	movff	?___llmod+2,printf@tmpval+2
  5770  000910  C032  F0D4         	movff	?___llmod+3,printf@tmpval+3
  5771                           
  5772                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5773  000914  0100               	movlb	0	; () banked
  5774  000916  51D1               	movf	printf@tmpval& (0+255),w,b
  5775  000918  0F30               	addlw	48
  5776  00091A  ECAF  F01B         	call	_putch
  5777                           
  5778                           ;doprnt.c: 1232: val %= dpowers[c];
  5779  00091E  C0DA  F02F         	movff	printf@val,___llmod@dividend
  5780  000922  C0DB  F030         	movff	printf@val+1,___llmod@dividend+1
  5781  000926  C0DC  F031         	movff	printf@val+2,___llmod@dividend+2
  5782  00092A  C0DD  F032         	movff	printf@val+3,___llmod@dividend+3
  5783  00092E  0100               	movlb	0	; () banked
  5784  000930  51E4               	movf	printf@c& (0+255),w,b
  5785  000932  0D04               	mullw	4
  5786  000934  0E1D               	movlw	low _dpowers
  5787  000936  24F3               	addwf	prodl,w,c
  5788  000938  6EF6               	movwf	tblptrl,c
  5789  00093A  0EFE               	movlw	high _dpowers
  5790  00093C  20F4               	addwfc	prodh,w,c
  5791  00093E  6EF7               	movwf	tblptrh,c
  5792  000940                     	if	0	;There are less than 3 active tblptr bytes
  5793  000940                     	endif
  5794  000940  0009               	tblrd		*+
  5795  000942  CFF5 F033          	movff	tablat,___llmod@divisor
  5796  000946  0009               	tblrd		*+
  5797  000948  CFF5 F034          	movff	tablat,___llmod@divisor+1
  5798  00094C  0009               	tblrd		*+
  5799  00094E  CFF5 F035          	movff	tablat,___llmod@divisor+2
  5800  000952  000A               	tblrd		*-
  5801  000954  CFF5 F036          	movff	tablat,___llmod@divisor+3
  5802  000958  EC49  F019         	call	___llmod	;wreg free
  5803  00095C  C02F  F0DA         	movff	?___llmod,printf@val
  5804  000960  C030  F0DB         	movff	?___llmod+1,printf@val+1
  5805  000964  C031  F0DC         	movff	?___llmod+2,printf@val+2
  5806  000968  C032  F0DD         	movff	?___llmod+3,printf@val+3
  5807  00096C                     l6302:
  5808  00096C  0100               	movlb	0	; () banked
  5809  00096E  07E4               	decf	printf@c& (0+255),f,b
  5810  000970  0100               	movlb	0	; () banked
  5811  000972  29E4               	incf	printf@c& (0+255),w,b
  5812  000974  B4D8               	btfsc	status,2,c
  5813  000976  D008               	goto	l6308
  5814  000978  D78C               	goto	l6296
  5815  00097A                     l6304:
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;doprnt.c: 1236: (putch('0') );
  5819  00097A  0E30               	movlw	48
  5820  00097C  ECAF  F01B         	call	_putch
  5821                           
  5822                           ;doprnt.c: 1237: prec--;
  5823  000980  0100               	movlb	0	; () banked
  5824  000982  07E2               	decf	printf@prec& (0+255),f,b
  5825  000984  A0D8               	btfss	status,0,c
  5826  000986  07E3               	decf	(printf@prec+1)& (0+255),f,b
  5827  000988                     l6308:
  5828                           
  5829                           ; BSR set to: 0
  5830  000988  0100               	movlb	0	; () banked
  5831  00098A  51E2               	movf	printf@prec& (0+255),w,b
  5832  00098C  0100               	movlb	0	; () banked
  5833  00098E  11E3               	iorwf	(printf@prec+1)& (0+255),w,b
  5834  000990  B4D8               	btfsc	status,2,c
  5835  000992  D22B               	goto	l6436
  5836  000994  D7F2               	goto	l6304
  5837  000996                     l705:
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;doprnt.c: 1246: }
  5841                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5842  000996  0100               	movlb	0	; () banked
  5843  000998  BFE0               	btfsc	printf@flag& (0+255),7,b
  5844  00099A  D034               	goto	l754
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;doprnt.c: 1253: {
  5848                           ;doprnt.c: 1255: if(flag & 0x10)
  5849  00099C  0100               	movlb	0	; () banked
  5850  00099E  A9E0               	btfss	printf@flag& (0+255),4,b
  5851  0009A0  D00E               	goto	l6316
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5855  0009A2  C0CF  FFD9         	movff	printf@ap,fsr2l
  5856  0009A6  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  5857  0009AA  CFDE F0DA          	movff	postinc2,printf@val
  5858  0009AE  CFDE F0DB          	movff	postinc2,printf@val+1
  5859  0009B2  CFDE F0DC          	movff	postinc2,printf@val+2
  5860  0009B6  CFDE F0DD          	movff	postinc2,printf@val+3
  5861                           
  5862                           ; BSR set to: 0
  5863  0009BA  0E04               	movlw	4
  5864  0009BC  D00F               	goto	L2
  5865  0009BE                     l6316:
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;doprnt.c: 1257: else
  5869                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5870  0009BE  C0CF  FFD9         	movff	printf@ap,fsr2l
  5871  0009C2  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  5872  0009C6  CFDE F0DA          	movff	postinc2,printf@val
  5873  0009CA  CFDD F0DB          	movff	postdec2,printf@val+1
  5874  0009CE  0100               	movlb	0	; () banked
  5875  0009D0  0E00               	movlw	0
  5876  0009D2  BFDB               	btfsc	(printf@val+1)& (0+255),7,b
  5877  0009D4  0EFF               	movlw	-1
  5878  0009D6  6FDC               	movwf	(printf@val+2)& (0+255),b
  5879  0009D8  6FDD               	movwf	(printf@val+3)& (0+255),b
  5880                           
  5881                           ; BSR set to: 0
  5882  0009DA  0E02               	movlw	2
  5883  0009DC                     L2:
  5884  0009DC  0100               	movlb	0	; () banked
  5885  0009DE  27CF               	addwf	printf@ap& (0+255),f,b
  5886  0009E0  0E00               	movlw	0
  5887  0009E2  23D0               	addwfc	(printf@ap+1)& (0+255),f,b
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;doprnt.c: 1261: if((long)val < 0) {
  5891                           
  5892                           ; BSR set to: 0
  5893  0009E4  0100               	movlb	0	; () banked
  5894  0009E6  AFDD               	btfss	(printf@val+3)& (0+255),7,b
  5895  0009E8  D032               	goto	l6334
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;doprnt.c: 1262: flag |= 0x03;
  5899  0009EA  0E03               	movlw	3
  5900  0009EC  0100               	movlb	0	; () banked
  5901  0009EE  13E0               	iorwf	printf@flag& (0+255),f,b
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;doprnt.c: 1263: val = -val;
  5905  0009F0  0100               	movlb	0	; () banked
  5906  0009F2  1FDD               	comf	(printf@val+3)& (0+255),f,b
  5907  0009F4  1FDC               	comf	(printf@val+2)& (0+255),f,b
  5908  0009F6  1FDB               	comf	(printf@val+1)& (0+255),f,b
  5909  0009F8  6DDA               	negf	printf@val& (0+255),b
  5910  0009FA  0E00               	movlw	0
  5911  0009FC  23DB               	addwfc	(printf@val+1)& (0+255),f,b
  5912  0009FE  23DC               	addwfc	(printf@val+2)& (0+255),f,b
  5913  000A00  23DD               	addwfc	(printf@val+3)& (0+255),f,b
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;doprnt.c: 1264: }
  5917                           ;doprnt.c: 1266: }
  5918  000A02  D025               	goto	l6334
  5919  000A04                     l754:
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;doprnt.c: 1268: else
  5923                           ;doprnt.c: 1273: {
  5924                           ;doprnt.c: 1281: if(flag & 0x10)
  5925  000A04  0100               	movlb	0	; () banked
  5926  000A06  A9E0               	btfss	printf@flag& (0+255),4,b
  5927  000A08  D00E               	goto	l6330
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5931  000A0A  C0CF  FFD9         	movff	printf@ap,fsr2l
  5932  000A0E  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  5933  000A12  CFDE F0DA          	movff	postinc2,printf@val
  5934  000A16  CFDE F0DB          	movff	postinc2,printf@val+1
  5935  000A1A  CFDE F0DC          	movff	postinc2,printf@val+2
  5936  000A1E  CFDE F0DD          	movff	postinc2,printf@val+3
  5937                           
  5938                           ; BSR set to: 0
  5939  000A22  0E04               	movlw	4
  5940  000A24  D010               	goto	L3
  5941  000A26                     l6330:
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;doprnt.c: 1283: else
  5945                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5946  000A26  C0CF  FFD9         	movff	printf@ap,fsr2l
  5947  000A2A  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  5948  000A2E  CFDE F0C1          	movff	postinc2,??_printf
  5949  000A32  CFDD F0C2          	movff	postdec2,??_printf+1
  5950  000A36  C0C1  F0DA         	movff	??_printf,printf@val
  5951  000A3A  C0C2  F0DB         	movff	??_printf+1,printf@val+1
  5952  000A3E  0100               	movlb	0	; () banked
  5953  000A40  6BDC               	clrf	(printf@val+2)& (0+255),b
  5954  000A42  6BDD               	clrf	(printf@val+3)& (0+255),b
  5955                           
  5956                           ; BSR set to: 0
  5957  000A44  0E02               	movlw	2
  5958  000A46                     L3:
  5959  000A46  0100               	movlb	0	; () banked
  5960  000A48  27CF               	addwf	printf@ap& (0+255),f,b
  5961  000A4A  0E00               	movlw	0
  5962  000A4C  23D0               	addwfc	(printf@ap+1)& (0+255),f,b
  5963  000A4E                     l6334:
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;doprnt.c: 1287: }
  5967                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5968  000A4E  0100               	movlb	0	; () banked
  5969  000A50  51E2               	movf	printf@prec& (0+255),w,b
  5970  000A52  0100               	movlb	0	; () banked
  5971  000A54  11E3               	iorwf	(printf@prec+1)& (0+255),w,b
  5972  000A56  A4D8               	btfss	status,2,c
  5973  000A58  D05A               	goto	l6370
  5974                           
  5975                           ; BSR set to: 0
  5976  000A5A  0100               	movlb	0	; () banked
  5977  000A5C  51DA               	movf	printf@val& (0+255),w,b
  5978  000A5E  0100               	movlb	0	; () banked
  5979  000A60  11DB               	iorwf	(printf@val+1)& (0+255),w,b
  5980  000A62  0100               	movlb	0	; () banked
  5981  000A64  11DC               	iorwf	(printf@val+2)& (0+255),w,b
  5982  000A66  0100               	movlb	0	; () banked
  5983  000A68  11DD               	iorwf	(printf@val+3)& (0+255),w,b
  5984  000A6A  A4D8               	btfss	status,2,c
  5985  000A6C  D050               	goto	l6370
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;doprnt.c: 1291: prec++;
  5989  000A6E  0100               	movlb	0	; () banked
  5990  000A70  4BE2               	infsnz	printf@prec& (0+255),f,b
  5991  000A72  2BE3               	incf	(printf@prec+1)& (0+255),f,b
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5995  000A74  D04C               	goto	l6370
  5996  000A76                     l6340:
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6000  000A76  0E01               	movlw	1
  6001  000A78  0100               	movlb	0	; () banked
  6002  000A7A  6FE4               	movwf	printf@c& (0+255),b
  6003  000A7C                     l6342:
  6004                           
  6005                           ; BSR set to: 0
  6006  000A7C  0E0A               	movlw	10
  6007  000A7E  0100               	movlb	0	; () banked
  6008  000A80  19E4               	xorwf	printf@c& (0+255),w,b
  6009  000A82  B4D8               	btfsc	status,2,c
  6010  000A84  D04D               	goto	l6372
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;doprnt.c: 1306: if(val < dpowers[c])
  6014                           
  6015                           ; BSR set to: 0
  6016                           
  6017                           ; BSR set to: 0
  6018  000A86  0100               	movlb	0	; () banked
  6019  000A88  51E4               	movf	printf@c& (0+255),w,b
  6020  000A8A  0D04               	mullw	4
  6021  000A8C  0E1D               	movlw	low _dpowers
  6022  000A8E  24F3               	addwf	prodl,w,c
  6023  000A90  6EF6               	movwf	tblptrl,c
  6024  000A92  0EFE               	movlw	high _dpowers
  6025  000A94  20F4               	addwfc	prodh,w,c
  6026  000A96  6EF7               	movwf	tblptrh,c
  6027  000A98                     	if	0	;There are less than 3 active tblptr bytes
  6028  000A98                     	endif
  6029  000A98  0009               	tblrd		*+
  6030  000A9A  50F5               	movf	tablat,w,c
  6031  000A9C  0100               	movlb	0	; () banked
  6032  000A9E  5DDA               	subwf	printf@val& (0+255),w,b
  6033  000AA0  0009               	tblrd		*+
  6034  000AA2  50F5               	movf	tablat,w,c
  6035  000AA4  0100               	movlb	0	; () banked
  6036  000AA6  59DB               	subwfb	(printf@val+1)& (0+255),w,b
  6037  000AA8  0009               	tblrd		*+
  6038  000AAA  50F5               	movf	tablat,w,c
  6039  000AAC  0100               	movlb	0	; () banked
  6040  000AAE  59DC               	subwfb	(printf@val+2)& (0+255),w,b
  6041  000AB0  0009               	tblrd		*+
  6042  000AB2  50F5               	movf	tablat,w,c
  6043  000AB4  0100               	movlb	0	; () banked
  6044  000AB6  59DD               	subwfb	(printf@val+3)& (0+255),w,b
  6045  000AB8  A0D8               	btfss	status,0,c
  6046  000ABA  D032               	goto	l6372
  6047                           
  6048                           ; BSR set to: 0
  6049                           
  6050                           ; BSR set to: 0
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;doprnt.c: 1307: break;
  6054  000ABC  0100               	movlb	0	; () banked
  6055  000ABE  2BE4               	incf	printf@c& (0+255),f,b
  6056  000AC0  D7DD               	goto	l6342
  6057  000AC2                     l6354:
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6061  000AC2  0E01               	movlw	1
  6062  000AC4  0100               	movlb	0	; () banked
  6063  000AC6  6FE4               	movwf	printf@c& (0+255),b
  6064  000AC8                     l6356:
  6065                           
  6066                           ; BSR set to: 0
  6067  000AC8  0E08               	movlw	8
  6068  000ACA  0100               	movlb	0	; () banked
  6069  000ACC  19E4               	xorwf	printf@c& (0+255),w,b
  6070  000ACE  B4D8               	btfsc	status,2,c
  6071  000AD0  D027               	goto	l6372
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6075                           
  6076                           ; BSR set to: 0
  6077                           
  6078                           ; BSR set to: 0
  6079  000AD2  0100               	movlb	0	; () banked
  6080  000AD4  51E4               	movf	printf@c& (0+255),w,b
  6081  000AD6  0D04               	mullw	4
  6082  000AD8  0E93               	movlw	low _hexpowers
  6083  000ADA  24F3               	addwf	prodl,w,c
  6084  000ADC  6EF6               	movwf	tblptrl,c
  6085  000ADE  0EFE               	movlw	high _hexpowers
  6086  000AE0  20F4               	addwfc	prodh,w,c
  6087  000AE2  6EF7               	movwf	tblptrh,c
  6088  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  6089  000AE4                     	endif
  6090  000AE4  0009               	tblrd		*+
  6091  000AE6  50F5               	movf	tablat,w,c
  6092  000AE8  0100               	movlb	0	; () banked
  6093  000AEA  5DDA               	subwf	printf@val& (0+255),w,b
  6094  000AEC  0009               	tblrd		*+
  6095  000AEE  50F5               	movf	tablat,w,c
  6096  000AF0  0100               	movlb	0	; () banked
  6097  000AF2  59DB               	subwfb	(printf@val+1)& (0+255),w,b
  6098  000AF4  0009               	tblrd		*+
  6099  000AF6  50F5               	movf	tablat,w,c
  6100  000AF8  0100               	movlb	0	; () banked
  6101  000AFA  59DC               	subwfb	(printf@val+2)& (0+255),w,b
  6102  000AFC  0009               	tblrd		*+
  6103  000AFE  50F5               	movf	tablat,w,c
  6104  000B00  0100               	movlb	0	; () banked
  6105  000B02  59DD               	subwfb	(printf@val+3)& (0+255),w,b
  6106  000B04  A0D8               	btfss	status,0,c
  6107  000B06  D00C               	goto	l6372
  6108                           
  6109                           ; BSR set to: 0
  6110                           
  6111                           ; BSR set to: 0
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;doprnt.c: 1318: break;
  6115  000B08  0100               	movlb	0	; () banked
  6116  000B0A  2BE4               	incf	printf@c& (0+255),f,b
  6117  000B0C  D7DD               	goto	l6356
  6118  000B0E                     l6370:
  6119                           
  6120                           ; BSR set to: 0
  6121  000B0E  0100               	movlb	0	; () banked
  6122  000B10  51E0               	movf	printf@flag& (0+255),w,b
  6123  000B12  0B80               	andlw	128
  6124                           
  6125                           ; Switch size 1, requested type "space"
  6126                           ; Number of cases is 2, Range of values is 0 to 128
  6127                           ; switch strategies available:
  6128                           ; Name         Instructions Cycles
  6129                           ; simple_byte            7     4 (average)
  6130                           ;	Chosen strategy is simple_byte
  6131  000B14  0A00               	xorlw	0	; case 0
  6132  000B16  B4D8               	btfsc	status,2,c
  6133  000B18  D7AE               	goto	l6340
  6134  000B1A  0A80               	xorlw	128	; case 128
  6135  000B1C  B4D8               	btfsc	status,2,c
  6136  000B1E  D7D1               	goto	l6354
  6137  000B20                     l6372:
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;doprnt.c: 1339: if(c < prec)
  6141  000B20  0E80               	movlw	128
  6142  000B22  0100               	movlb	0	; () banked
  6143  000B24  BFE4               	btfsc	printf@c& (0+255),7,b
  6144  000B26  0E7F               	movlw	127
  6145  000B28  0100               	movlb	0	; () banked
  6146  000B2A  6FC1               	movwf	??_printf& (0+255),b
  6147  000B2C  0100               	movlb	0	; () banked
  6148  000B2E  51E2               	movf	printf@prec& (0+255),w,b
  6149  000B30  0100               	movlb	0	; () banked
  6150  000B32  5DE4               	subwf	printf@c& (0+255),w,b
  6151  000B34  0100               	movlb	0	; () banked
  6152  000B36  51E3               	movf	(printf@prec+1)& (0+255),w,b
  6153  000B38  0A80               	xorlw	128
  6154  000B3A  0100               	movlb	0	; () banked
  6155  000B3C  59C1               	subwfb	??_printf& (0+255),w,b
  6156  000B3E  B0D8               	btfsc	status,0,c
  6157  000B40  D003               	goto	l6376
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;doprnt.c: 1340: c = prec;
  6161  000B42  C0E2  F0E4         	movff	printf@prec,printf@c
  6162  000B46  D018               	goto	l6380
  6163  000B48                     l6376:
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;doprnt.c: 1341: else if(prec < c)
  6167  000B48  0100               	movlb	0	; () banked
  6168  000B4A  51E3               	movf	(printf@prec+1)& (0+255),w,b
  6169  000B4C  0A80               	xorlw	128
  6170  000B4E  0100               	movlb	0	; () banked
  6171  000B50  6FC1               	movwf	??_printf& (0+255),b
  6172  000B52  0100               	movlb	0	; () banked
  6173  000B54  51E4               	movf	printf@c& (0+255),w,b
  6174  000B56  0100               	movlb	0	; () banked
  6175  000B58  5DE2               	subwf	printf@prec& (0+255),w,b
  6176  000B5A  0E80               	movlw	128
  6177  000B5C  0100               	movlb	0	; () banked
  6178  000B5E  BFE4               	btfsc	printf@c& (0+255),7,b
  6179  000B60  0E7F               	movlw	127
  6180  000B62  0100               	movlb	0	; () banked
  6181  000B64  59C1               	subwfb	??_printf& (0+255),w,b
  6182  000B66  B0D8               	btfsc	status,0,c
  6183  000B68  D007               	goto	l6380
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;doprnt.c: 1342: prec = c;
  6187  000B6A  0100               	movlb	0	; () banked
  6188  000B6C  51E4               	movf	printf@c& (0+255),w,b
  6189  000B6E  0100               	movlb	0	; () banked
  6190  000B70  6FE2               	movwf	printf@prec& (0+255),b
  6191  000B72  6BE3               	clrf	(printf@prec+1)& (0+255),b
  6192  000B74  BFE2               	btfsc	printf@prec& (0+255),7,b
  6193  000B76  07E3               	decf	(printf@prec+1)& (0+255),f,b
  6194  000B78                     l6380:
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6198  000B78  0100               	movlb	0	; () banked
  6199  000B7A  51DE               	movf	printf@width& (0+255),w,b
  6200  000B7C  0100               	movlb	0	; () banked
  6201  000B7E  11DF               	iorwf	(printf@width+1)& (0+255),w,b
  6202  000B80  B4D8               	btfsc	status,2,c
  6203  000B82  D014               	goto	l6386
  6204                           
  6205                           ; BSR set to: 0
  6206  000B84  0E03               	movlw	3
  6207  000B86  0100               	movlb	0	; () banked
  6208  000B88  15E0               	andwf	printf@flag& (0+255),w,b
  6209  000B8A  0100               	movlb	0	; () banked
  6210  000B8C  6FC1               	movwf	??_printf& (0+255),b
  6211  000B8E  0E00               	movlw	0
  6212  000B90  0100               	movlb	0	; () banked
  6213  000B92  15E1               	andwf	(printf@flag+1)& (0+255),w,b
  6214  000B94  0100               	movlb	0	; () banked
  6215  000B96  6FC2               	movwf	(??_printf+1)& (0+255),b
  6216  000B98  0100               	movlb	0	; () banked
  6217  000B9A  51C1               	movf	??_printf& (0+255),w,b
  6218  000B9C  0100               	movlb	0	; () banked
  6219  000B9E  11C2               	iorwf	(??_printf+1)& (0+255),w,b
  6220  000BA0  B4D8               	btfsc	status,2,c
  6221  000BA2  D004               	goto	l6386
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;doprnt.c: 1346: width--;
  6225  000BA4  0100               	movlb	0	; () banked
  6226  000BA6  07DE               	decf	printf@width& (0+255),f,b
  6227  000BA8  A0D8               	btfss	status,0,c
  6228  000BAA  07DF               	decf	(printf@width+1)& (0+255),f,b
  6229  000BAC                     l6386:
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6233  000BAC  0100               	movlb	0	; () banked
  6234  000BAE  ADE1               	btfss	(printf@flag+1)& (0+255),6,b
  6235  000BB0  D01E               	goto	l6394
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;doprnt.c: 1349: if(width > prec)
  6239  000BB2  0100               	movlb	0	; () banked
  6240  000BB4  51DE               	movf	printf@width& (0+255),w,b
  6241  000BB6  0100               	movlb	0	; () banked
  6242  000BB8  5DE2               	subwf	printf@prec& (0+255),w,b
  6243  000BBA  0100               	movlb	0	; () banked
  6244  000BBC  51E3               	movf	(printf@prec+1)& (0+255),w,b
  6245  000BBE  0A80               	xorlw	128
  6246  000BC0  0100               	movlb	0	; () banked
  6247  000BC2  6FC1               	movwf	??_printf& (0+255),b
  6248  000BC4  0100               	movlb	0	; () banked
  6249  000BC6  51DF               	movf	(printf@width+1)& (0+255),w,b
  6250  000BC8  0A80               	xorlw	128
  6251  000BCA  0100               	movlb	0	; () banked
  6252  000BCC  59C1               	subwfb	??_printf& (0+255),w,b
  6253  000BCE  B0D8               	btfsc	status,0,c
  6254  000BD0  D009               	goto	l6392
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;doprnt.c: 1350: width -= prec;
  6258  000BD2  0100               	movlb	0	; () banked
  6259  000BD4  51E2               	movf	printf@prec& (0+255),w,b
  6260  000BD6  0100               	movlb	0	; () banked
  6261  000BD8  5FDE               	subwf	printf@width& (0+255),f,b
  6262  000BDA  0100               	movlb	0	; () banked
  6263  000BDC  51E3               	movf	(printf@prec+1)& (0+255),w,b
  6264  000BDE  0100               	movlb	0	; () banked
  6265  000BE0  5BDF               	subwfb	(printf@width+1)& (0+255),f,b
  6266  000BE2  D005               	goto	l6394
  6267  000BE4                     l6392:
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;doprnt.c: 1351: else
  6271                           ;doprnt.c: 1352: width = 0;
  6272  000BE4  0E00               	movlw	0
  6273  000BE6  0100               	movlb	0	; () banked
  6274  000BE8  6FDF               	movwf	(printf@width+1)& (0+255),b
  6275  000BEA  0E00               	movlw	0
  6276  000BEC  6FDE               	movwf	printf@width& (0+255),b
  6277  000BEE                     l6394:
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;doprnt.c: 1353: }
  6281                           ;doprnt.c: 1381: if(width > c)
  6282  000BEE  0E80               	movlw	128
  6283  000BF0  0100               	movlb	0	; () banked
  6284  000BF2  BFE4               	btfsc	printf@c& (0+255),7,b
  6285  000BF4  0E7F               	movlw	127
  6286  000BF6  0100               	movlb	0	; () banked
  6287  000BF8  6FC1               	movwf	??_printf& (0+255),b
  6288  000BFA  0100               	movlb	0	; () banked
  6289  000BFC  51DE               	movf	printf@width& (0+255),w,b
  6290  000BFE  0100               	movlb	0	; () banked
  6291  000C00  5DE4               	subwf	printf@c& (0+255),w,b
  6292  000C02  0100               	movlb	0	; () banked
  6293  000C04  51DF               	movf	(printf@width+1)& (0+255),w,b
  6294  000C06  0A80               	xorlw	128
  6295  000C08  0100               	movlb	0	; () banked
  6296  000C0A  59C1               	subwfb	??_printf& (0+255),w,b
  6297  000C0C  B0D8               	btfsc	status,0,c
  6298  000C0E  D00B               	goto	l6398
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;doprnt.c: 1382: width -= c;
  6302  000C10  0100               	movlb	0	; () banked
  6303  000C12  51E4               	movf	printf@c& (0+255),w,b
  6304  000C14  0100               	movlb	0	; () banked
  6305  000C16  5FDE               	subwf	printf@width& (0+255),f,b
  6306  000C18  0E00               	movlw	0
  6307  000C1A  0100               	movlb	0	; () banked
  6308  000C1C  BFE4               	btfsc	printf@c& (0+255),7,b
  6309  000C1E  0EFF               	movlw	255
  6310  000C20  0100               	movlb	0	; () banked
  6311  000C22  5BDF               	subwfb	(printf@width+1)& (0+255),f,b
  6312  000C24  D005               	goto	l6400
  6313  000C26                     l6398:
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;doprnt.c: 1383: else
  6317                           ;doprnt.c: 1384: width = 0;
  6318  000C26  0E00               	movlw	0
  6319  000C28  0100               	movlb	0	; () banked
  6320  000C2A  6FDF               	movwf	(printf@width+1)& (0+255),b
  6321  000C2C  0E00               	movlw	0
  6322  000C2E  6FDE               	movwf	printf@width& (0+255),b
  6323  000C30                     l6400:
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;doprnt.c: 1387: if(flag & 0x04) {
  6327  000C30  0100               	movlb	0	; () banked
  6328  000C32  A5E0               	btfss	printf@flag& (0+255),2,b
  6329  000C34  D021               	goto	l6412
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;doprnt.c: 1392: if(flag & 0x03)
  6333  000C36  0E03               	movlw	3
  6334  000C38  0100               	movlb	0	; () banked
  6335  000C3A  15E0               	andwf	printf@flag& (0+255),w,b
  6336  000C3C  0100               	movlb	0	; () banked
  6337  000C3E  6FC1               	movwf	??_printf& (0+255),b
  6338  000C40  0E00               	movlw	0
  6339  000C42  0100               	movlb	0	; () banked
  6340  000C44  15E1               	andwf	(printf@flag+1)& (0+255),w,b
  6341  000C46  0100               	movlb	0	; () banked
  6342  000C48  6FC2               	movwf	(??_printf+1)& (0+255),b
  6343  000C4A  0100               	movlb	0	; () banked
  6344  000C4C  51C1               	movf	??_printf& (0+255),w,b
  6345  000C4E  0100               	movlb	0	; () banked
  6346  000C50  11C2               	iorwf	(??_printf+1)& (0+255),w,b
  6347  000C52  B4D8               	btfsc	status,2,c
  6348  000C54  D003               	goto	l6406
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;doprnt.c: 1393: (putch('-') );
  6352  000C56  0E2D               	movlw	45
  6353  000C58  ECAF  F01B         	call	_putch
  6354  000C5C                     l6406:
  6355                           
  6356                           ;doprnt.c: 1415: if(width)
  6357  000C5C  0100               	movlb	0	; () banked
  6358  000C5E  51DE               	movf	printf@width& (0+255),w,b
  6359  000C60  0100               	movlb	0	; () banked
  6360  000C62  11DF               	iorwf	(printf@width+1)& (0+255),w,b
  6361  000C64  B4D8               	btfsc	status,2,c
  6362  000C66  D0B6               	goto	l6434
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;doprnt.c: 1417: (putch('0') );
  6366                           
  6367                           ; BSR set to: 0
  6368                           
  6369                           ;doprnt.c: 1416: do
  6370  000C68  0E30               	movlw	48
  6371  000C6A  ECAF  F01B         	call	_putch
  6372                           
  6373                           ;doprnt.c: 1418: while(--width);
  6374  000C6E  0100               	movlb	0	; () banked
  6375  000C70  07DE               	decf	printf@width& (0+255),f,b
  6376  000C72  A0D8               	btfss	status,0,c
  6377  000C74  07DF               	decf	(printf@width+1)& (0+255),f,b
  6378  000C76  D7F2               	goto	l6406
  6379  000C78                     l6412:
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;doprnt.c: 1422: {
  6383                           ;doprnt.c: 1424: if(width
  6384                           ;doprnt.c: 1428: )
  6385  000C78  0100               	movlb	0	; () banked
  6386  000C7A  51DE               	movf	printf@width& (0+255),w,b
  6387  000C7C  0100               	movlb	0	; () banked
  6388  000C7E  11DF               	iorwf	(printf@width+1)& (0+255),w,b
  6389  000C80  B4D8               	btfsc	status,2,c
  6390  000C82  D00D               	goto	l6418
  6391  000C84                     l6414:
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;doprnt.c: 1430: (putch(' ') );
  6395  000C84  0E20               	movlw	32
  6396  000C86  ECAF  F01B         	call	_putch
  6397                           
  6398                           ;doprnt.c: 1431: while(--width);
  6399  000C8A  0100               	movlb	0	; () banked
  6400  000C8C  07DE               	decf	printf@width& (0+255),f,b
  6401  000C8E  A0D8               	btfss	status,0,c
  6402  000C90  07DF               	decf	(printf@width+1)& (0+255),f,b
  6403  000C92  0100               	movlb	0	; () banked
  6404  000C94  51DE               	movf	printf@width& (0+255),w,b
  6405  000C96  0100               	movlb	0	; () banked
  6406  000C98  11DF               	iorwf	(printf@width+1)& (0+255),w,b
  6407  000C9A  A4D8               	btfss	status,2,c
  6408  000C9C  D7F3               	goto	l6414
  6409  000C9E                     l6418:
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;doprnt.c: 1438: if(flag & 0x03)
  6413  000C9E  0E03               	movlw	3
  6414  000CA0  0100               	movlb	0	; () banked
  6415  000CA2  15E0               	andwf	printf@flag& (0+255),w,b
  6416  000CA4  0100               	movlb	0	; () banked
  6417  000CA6  6FC1               	movwf	??_printf& (0+255),b
  6418  000CA8  0E00               	movlw	0
  6419  000CAA  0100               	movlb	0	; () banked
  6420  000CAC  15E1               	andwf	(printf@flag+1)& (0+255),w,b
  6421  000CAE  0100               	movlb	0	; () banked
  6422  000CB0  6FC2               	movwf	(??_printf+1)& (0+255),b
  6423  000CB2  0100               	movlb	0	; () banked
  6424  000CB4  51C1               	movf	??_printf& (0+255),w,b
  6425  000CB6  0100               	movlb	0	; () banked
  6426  000CB8  11C2               	iorwf	(??_printf+1)& (0+255),w,b
  6427  000CBA  B4D8               	btfsc	status,2,c
  6428  000CBC  D08B               	goto	l6434
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;doprnt.c: 1439: (putch('-') );
  6432  000CBE  0E2D               	movlw	45
  6433  000CC0  ECAF  F01B         	call	_putch
  6434                           
  6435                           ;doprnt.c: 1469: }
  6436                           ;doprnt.c: 1474: while(prec--) {
  6437  000CC4  D087               	goto	l6434
  6438  000CC6                     l6422:
  6439                           
  6440                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6441  000CC6  C0E2  F0C1         	movff	printf@prec,??_printf
  6442  000CCA  C0E3  F0C2         	movff	printf@prec+1,??_printf+1
  6443  000CCE  0100               	movlb	0	; () banked
  6444  000CD0  90D8               	bcf	status,0,c
  6445  000CD2  37C1               	rlcf	??_printf& (0+255),f,b
  6446  000CD4  37C2               	rlcf	(??_printf+1)& (0+255),f,b
  6447  000CD6  0100               	movlb	0	; () banked
  6448  000CD8  90D8               	bcf	status,0,c
  6449  000CDA  37C1               	rlcf	??_printf& (0+255),f,b
  6450  000CDC  37C2               	rlcf	(??_printf+1)& (0+255),f,b
  6451  000CDE  0E1D               	movlw	low _dpowers
  6452  000CE0  0100               	movlb	0	; () banked
  6453  000CE2  25C1               	addwf	??_printf& (0+255),w,b
  6454  000CE4  6EF6               	movwf	tblptrl,c
  6455  000CE6  0EFE               	movlw	high _dpowers
  6456  000CE8  21C2               	addwfc	(??_printf+1)& (0+255),w,b
  6457  000CEA  6EF7               	movwf	tblptrh,c
  6458  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  6459  000CEC                     	endif
  6460  000CEC  0009               	tblrd		*+
  6461  000CEE  CFF5 F026          	movff	tablat,___lldiv@divisor
  6462  000CF2  0009               	tblrd		*+
  6463  000CF4  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  6464  000CF8  0009               	tblrd		*+
  6465  000CFA  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  6466  000CFE  000A               	tblrd		*-
  6467  000D00  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  6468  000D04  C0DA  F022         	movff	printf@val,___lldiv@dividend
  6469  000D08  C0DB  F023         	movff	printf@val+1,___lldiv@dividend+1
  6470  000D0C  C0DC  F024         	movff	printf@val+2,___lldiv@dividend+2
  6471  000D10  C0DD  F025         	movff	printf@val+3,___lldiv@dividend+3
  6472  000D14  EC1F  F018         	call	___lldiv	;wreg free
  6473  000D18  C022  F02F         	movff	?___lldiv,___llmod@dividend
  6474  000D1C  C023  F030         	movff	?___lldiv+1,___llmod@dividend+1
  6475  000D20  C024  F031         	movff	?___lldiv+2,___llmod@dividend+2
  6476  000D24  C025  F032         	movff	?___lldiv+3,___llmod@dividend+3
  6477  000D28  0E0A               	movlw	10
  6478  000D2A  6E33               	movwf	___llmod@divisor,c
  6479  000D2C  0E00               	movlw	0
  6480  000D2E  6E34               	movwf	___llmod@divisor+1,c
  6481  000D30  0E00               	movlw	0
  6482  000D32  6E35               	movwf	___llmod@divisor+2,c
  6483  000D34  0E00               	movlw	0
  6484  000D36  6E36               	movwf	___llmod@divisor+3,c
  6485  000D38  EC49  F019         	call	___llmod	;wreg free
  6486  000D3C  502F               	movf	?___llmod,w,c
  6487  000D3E  0F30               	addlw	48
  6488  000D40  0100               	movlb	0	; () banked
  6489  000D42  6FE4               	movwf	printf@c& (0+255),b
  6490                           
  6491                           ;doprnt.c: 1491: break;
  6492  000D44  D043               	goto	l6432
  6493  000D46                     l6424:
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;doprnt.c: 1499: {
  6497                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6498  000D46  C0DA  F022         	movff	printf@val,___lldiv@dividend
  6499  000D4A  C0DB  F023         	movff	printf@val+1,___lldiv@dividend+1
  6500  000D4E  C0DC  F024         	movff	printf@val+2,___lldiv@dividend+2
  6501  000D52  C0DD  F025         	movff	printf@val+3,___lldiv@dividend+3
  6502  000D56  C0E2  F0C1         	movff	printf@prec,??_printf
  6503  000D5A  C0E3  F0C2         	movff	printf@prec+1,??_printf+1
  6504  000D5E  0100               	movlb	0	; () banked
  6505  000D60  90D8               	bcf	status,0,c
  6506  000D62  37C1               	rlcf	??_printf& (0+255),f,b
  6507  000D64  37C2               	rlcf	(??_printf+1)& (0+255),f,b
  6508  000D66  0100               	movlb	0	; () banked
  6509  000D68  90D8               	bcf	status,0,c
  6510  000D6A  37C1               	rlcf	??_printf& (0+255),f,b
  6511  000D6C  37C2               	rlcf	(??_printf+1)& (0+255),f,b
  6512  000D6E  0E93               	movlw	low _hexpowers
  6513  000D70  0100               	movlb	0	; () banked
  6514  000D72  25C1               	addwf	??_printf& (0+255),w,b
  6515  000D74  6EF6               	movwf	tblptrl,c
  6516  000D76  0EFE               	movlw	high _hexpowers
  6517  000D78  21C2               	addwfc	(??_printf+1)& (0+255),w,b
  6518  000D7A  6EF7               	movwf	tblptrh,c
  6519  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  6520  000D7C                     	endif
  6521  000D7C  0009               	tblrd		*+
  6522  000D7E  CFF5 F026          	movff	tablat,___lldiv@divisor
  6523  000D82  0009               	tblrd		*+
  6524  000D84  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  6525  000D88  0009               	tblrd		*+
  6526  000D8A  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  6527  000D8E  000A               	tblrd		*-
  6528  000D90  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  6529  000D94  EC1F  F018         	call	___lldiv	;wreg free
  6530  000D98  5022               	movf	?___lldiv,w,c
  6531  000D9A  0B0F               	andlw	15
  6532  000D9C  0100               	movlb	0	; () banked
  6533  000D9E  6FCA               	movwf	printf@idx& (0+255),b
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6537  000DA0  0100               	movlb	0	; () banked
  6538  000DA2  51CA               	movf	printf@idx& (0+255),w,b
  6539  000DA4  0D01               	mullw	1
  6540  000DA6  0E38               	movlw	low STR_19
  6541  000DA8  24F3               	addwf	prodl,w,c
  6542  000DAA  6EF6               	movwf	tblptrl,c
  6543  000DAC  0EFF               	movlw	high STR_19
  6544  000DAE  20F4               	addwfc	prodh,w,c
  6545  000DB0  6EF7               	movwf	tblptrh,c
  6546  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  6547  000DB2                     	endif
  6548  000DB2  0008               	tblrd		*
  6549  000DB4  CFF5 F0E4          	movff	tablat,printf@c
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;doprnt.c: 1523: }
  6553                           
  6554                           ;doprnt.c: 1508: }
  6555                           ;doprnt.c: 1510: break;
  6556  000DB8  D009               	goto	l6432
  6557  000DBA                     l6430:
  6558  000DBA  0100               	movlb	0	; () banked
  6559  000DBC  51E0               	movf	printf@flag& (0+255),w,b
  6560  000DBE  0B80               	andlw	128
  6561                           
  6562                           ; Switch size 1, requested type "space"
  6563                           ; Number of cases is 2, Range of values is 0 to 128
  6564                           ; switch strategies available:
  6565                           ; Name         Instructions Cycles
  6566                           ; simple_byte            7     4 (average)
  6567                           ;	Chosen strategy is simple_byte
  6568  000DC0  0A00               	xorlw	0	; case 0
  6569  000DC2  B4D8               	btfsc	status,2,c
  6570  000DC4  D780               	goto	l6422
  6571  000DC6  0A80               	xorlw	128	; case 128
  6572  000DC8  B4D8               	btfsc	status,2,c
  6573  000DCA  D7BD               	goto	l6424
  6574  000DCC                     l6432:
  6575                           
  6576                           ; BSR set to: 0
  6577                           ;doprnt.c: 1524: (putch(c) );
  6578  000DCC  0100               	movlb	0	; () banked
  6579  000DCE  51E4               	movf	printf@c& (0+255),w,b
  6580  000DD0  ECAF  F01B         	call	_putch
  6581  000DD4                     l6434:
  6582  000DD4  0100               	movlb	0	; () banked
  6583  000DD6  07E2               	decf	printf@prec& (0+255),f,b
  6584  000DD8  A0D8               	btfss	status,0,c
  6585  000DDA  07E3               	decf	(printf@prec+1)& (0+255),f,b
  6586  000DDC  0100               	movlb	0	; () banked
  6587  000DDE  29E2               	incf	printf@prec& (0+255),w,b
  6588  000DE0  E1EC               	bnz	l6430
  6589  000DE2  0100               	movlb	0	; () banked
  6590  000DE4  29E3               	incf	(printf@prec+1)& (0+255),w,b
  6591  000DE6  A4D8               	btfss	status,2,c
  6592  000DE8  D7E8               	goto	l6430
  6593  000DEA                     l6436:
  6594  000DEA  C0B7  FFF6         	movff	printf@f,tblptrl
  6595  000DEE  C0B8  FFF7         	movff	printf@f+1,tblptrh
  6596  000DF2  0100               	movlb	0	; () banked
  6597  000DF4  4BB7               	infsnz	printf@f& (0+255),f,b
  6598  000DF6  2BB8               	incf	(printf@f+1)& (0+255),f,b
  6599  000DF8                     	if	0	;tblptru may be non-zero
  6600  000DF8                     	endif
  6601  000DF8                     	if	0	;tblptru may be non-zero
  6602  000DF8                     	endif
  6603  000DF8  0008               	tblrd		*
  6604  000DFA  CFF5 F0E4          	movff	tablat,printf@c
  6605  000DFE  0100               	movlb	0	; () banked
  6606  000E00  51E4               	movf	printf@c& (0+255),w,b
  6607  000E02  B4D8               	btfsc	status,2,c
  6608  000E04  0012               	return	
  6609  000E06  EF11  F000         	goto	l6070
  6610  000E0A                     __end_of_printf:
  6611                           	opt stack 0
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           postinc0	equ	0xFEE
  6619                           wreg	equ	0xFE8
  6620                           postdec1	equ	0xFE5
  6621                           fsr1l	equ	0xFE1
  6622                           indf2	equ	0xFDF
  6623                           postinc2	equ	0xFDE
  6624                           postdec2	equ	0xFDD
  6625                           fsr2h	equ	0xFDA
  6626                           fsr2l	equ	0xFD9
  6627                           status	equ	0xFD8
  6628                           
  6629 ;; *************** function _scale *****************
  6630 ;; Defined at:
  6631 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  scl             1    wreg     char 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  scl             1   24[BANK0 ] char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  3   18[BANK0 ] char 
  6638 ;; Registers used:
  6639 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6645 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;Total ram usage:        7 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    5
  6652 ;; This function calls:
  6653 ;;		___awdiv
  6654 ;;		___awmod
  6655 ;;		___ftmul
  6656 ;;		___wmul
  6657 ;; This function is called by:
  6658 ;;		_printf
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text14
  6663  0012F4                     __ptext14:
  6664                           	opt stack 0
  6665  0012F4                     _scale:
  6666                           	opt stack 23
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;incstack = 0
  6670                           ;scale@scl stored from wreg
  6671  0012F4  0100               	movlb	0	; () banked
  6672  0012F6  6F98               	movwf	scale@scl& (0+255),b
  6673                           
  6674                           ;doprnt.c: 428: if(scl < 0) {
  6675  0012F8  0100               	movlb	0	; () banked
  6676  0012FA  AF98               	btfss	scale@scl& (0+255),7,b
  6677  0012FC  D104               	goto	l5722
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;doprnt.c: 429: scl = -scl;
  6681  0012FE  0100               	movlb	0	; () banked
  6682  001300  6D98               	negf	scale@scl& (0+255),b
  6683                           
  6684                           ;doprnt.c: 430: if(scl>=110)
  6685  001302  0100               	movlb	0	; () banked
  6686  001304  5198               	movf	scale@scl& (0+255),w,b
  6687  001306  0A80               	xorlw	128
  6688  001308  0F12               	addlw	-238
  6689  00130A  A0D8               	btfss	status,0,c
  6690  00130C  D094               	goto	l5712
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6694  00130E  0E00               	movlw	0
  6695  001310  6E33               	movwf	___wmul@multiplicand+1,c
  6696  001312  0E03               	movlw	3
  6697  001314  6E32               	movwf	___wmul@multiplicand,c
  6698  001316  0E00               	movlw	0
  6699  001318  6E2B               	movwf	___awdiv@divisor+1,c
  6700  00131A  0E0A               	movlw	10
  6701  00131C  6E2A               	movwf	___awdiv@divisor,c
  6702  00131E  0E00               	movlw	0
  6703  001320  6E25               	movwf	___awmod@divisor+1,c
  6704  001322  0E64               	movlw	100
  6705  001324  6E24               	movwf	___awmod@divisor,c
  6706  001326  0100               	movlb	0	; () banked
  6707  001328  5198               	movf	scale@scl& (0+255),w,b
  6708  00132A  6E22               	movwf	___awmod@dividend,c
  6709  00132C  6A23               	clrf	___awmod@dividend+1,c
  6710  00132E  BE22               	btfsc	___awmod@dividend,7,c
  6711  001330  0623               	decf	___awmod@dividend+1,f,c
  6712  001332  ECD9  F018         	call	___awmod	;wreg free
  6713  001336  C022  F028         	movff	?___awmod,___awdiv@dividend
  6714  00133A  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  6715  00133E  ECDD  F017         	call	___awdiv	;wreg free
  6716  001342  0E09               	movlw	9
  6717  001344  2428               	addwf	?___awdiv,w,c
  6718  001346  6E30               	movwf	___wmul@multiplier,c
  6719  001348  0E00               	movlw	0
  6720  00134A  2029               	addwfc	?___awdiv+1,w,c
  6721  00134C  6E31               	movwf	___wmul@multiplier+1,c
  6722  00134E  EC79  F01B         	call	___wmul	;wreg free
  6723  001352  0E45               	movlw	low __npowers_
  6724  001354  2430               	addwf	?___wmul,w,c
  6725  001356  6EF6               	movwf	tblptrl,c
  6726  001358  0EFE               	movlw	high __npowers_
  6727  00135A  2031               	addwfc	?___wmul+1,w,c
  6728  00135C  6EF7               	movwf	tblptrh,c
  6729  00135E                     	if	0	;There are less than 3 active tblptr bytes
  6730  00135E                     	endif
  6731  00135E  0009               	tblrd		*+
  6732  001360  CFF5 F089          	movff	tablat,___ftmul@f2
  6733  001364  0009               	tblrd		*+
  6734  001366  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  6735  00136A  000A               	tblrd		*-
  6736  00136C  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  6737  001370  0E00               	movlw	0
  6738  001372  6E2B               	movwf	___awdiv@divisor+1,c
  6739  001374  0E64               	movlw	100
  6740  001376  6E2A               	movwf	___awdiv@divisor,c
  6741  001378  0100               	movlb	0	; () banked
  6742  00137A  5198               	movf	scale@scl& (0+255),w,b
  6743  00137C  6E28               	movwf	___awdiv@dividend,c
  6744  00137E  6A29               	clrf	___awdiv@dividend+1,c
  6745  001380  BE28               	btfsc	___awdiv@dividend,7,c
  6746  001382  0629               	decf	___awdiv@dividend+1,f,c
  6747  001384  ECDD  F017         	call	___awdiv	;wreg free
  6748  001388  0E12               	movlw	18
  6749  00138A  2428               	addwf	?___awdiv,w,c
  6750  00138C  6E30               	movwf	___wmul@multiplier,c
  6751  00138E  0E00               	movlw	0
  6752  001390  2029               	addwfc	?___awdiv+1,w,c
  6753  001392  6E31               	movwf	___wmul@multiplier+1,c
  6754  001394  0E00               	movlw	0
  6755  001396  6E33               	movwf	___wmul@multiplicand+1,c
  6756  001398  0E03               	movlw	3
  6757  00139A  6E32               	movwf	___wmul@multiplicand,c
  6758  00139C  EC79  F01B         	call	___wmul	;wreg free
  6759  0013A0  0E45               	movlw	low __npowers_
  6760  0013A2  2430               	addwf	?___wmul,w,c
  6761  0013A4  6EF6               	movwf	tblptrl,c
  6762  0013A6  0EFE               	movlw	high __npowers_
  6763  0013A8  2031               	addwfc	?___wmul+1,w,c
  6764  0013AA  6EF7               	movwf	tblptrh,c
  6765  0013AC                     	if	0	;There are less than 3 active tblptr bytes
  6766  0013AC                     	endif
  6767  0013AC  0009               	tblrd		*+
  6768  0013AE  CFF5 F086          	movff	tablat,___ftmul@f1
  6769  0013B2  0009               	tblrd		*+
  6770  0013B4  CFF5 F087          	movff	tablat,___ftmul@f1+1
  6771  0013B8  000A               	tblrd		*-
  6772  0013BA  CFF5 F088          	movff	tablat,___ftmul@f1+2
  6773  0013BE  EC52  F010         	call	___ftmul	;wreg free
  6774  0013C2  C086  F095         	movff	?___ftmul,_scale$1340
  6775  0013C6  C087  F096         	movff	?___ftmul+1,_scale$1340+1
  6776  0013CA  C088  F097         	movff	?___ftmul+2,_scale$1340+2
  6777                           
  6778                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6779  0013CE  C095  F086         	movff	_scale$1340,___ftmul@f1
  6780  0013D2  C096  F087         	movff	_scale$1340+1,___ftmul@f1+1
  6781  0013D6  C097  F088         	movff	_scale$1340+2,___ftmul@f1+2
  6782  0013DA  0E00               	movlw	0
  6783  0013DC  6E33               	movwf	___wmul@multiplicand+1,c
  6784  0013DE  0E03               	movlw	3
  6785  0013E0  6E32               	movwf	___wmul@multiplicand,c
  6786  0013E2  0E00               	movlw	0
  6787  0013E4  6E25               	movwf	___awmod@divisor+1,c
  6788  0013E6  0E0A               	movlw	10
  6789  0013E8  6E24               	movwf	___awmod@divisor,c
  6790  0013EA  0100               	movlb	0	; () banked
  6791  0013EC  5198               	movf	scale@scl& (0+255),w,b
  6792  0013EE  6E22               	movwf	___awmod@dividend,c
  6793  0013F0  6A23               	clrf	___awmod@dividend+1,c
  6794  0013F2  BE22               	btfsc	___awmod@dividend,7,c
  6795  0013F4  0623               	decf	___awmod@dividend+1,f,c
  6796  0013F6  ECD9  F018         	call	___awmod	;wreg free
  6797  0013FA  C022  F030         	movff	?___awmod,___wmul@multiplier
  6798  0013FE  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  6799  001402  EC79  F01B         	call	___wmul	;wreg free
  6800  001406  0E45               	movlw	low __npowers_
  6801  001408  2430               	addwf	?___wmul,w,c
  6802  00140A  6EF6               	movwf	tblptrl,c
  6803  00140C  0EFE               	movlw	high __npowers_
  6804  00140E  2031               	addwfc	?___wmul+1,w,c
  6805  001410  6EF7               	movwf	tblptrh,c
  6806  001412                     	if	0	;There are less than 3 active tblptr bytes
  6807  001412                     	endif
  6808  001412  0009               	tblrd		*+
  6809  001414  CFF5 F089          	movff	tablat,___ftmul@f2
  6810  001418  0009               	tblrd		*+
  6811  00141A  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  6812  00141E  000A               	tblrd		*-
  6813  001420  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  6814  001424  EC52  F010         	call	___ftmul	;wreg free
  6815  001428  C086  F092         	movff	?___ftmul,?_scale
  6816  00142C  C087  F093         	movff	?___ftmul+1,?_scale+1
  6817  001430  C088  F094         	movff	?___ftmul+2,?_scale+2
  6818  001434  0012               	return	
  6819  001436                     l5712:
  6820                           
  6821                           ;doprnt.c: 432: else if(scl > 10)
  6822  001436  0100               	movlb	0	; () banked
  6823  001438  5198               	movf	scale@scl& (0+255),w,b
  6824  00143A  0A80               	xorlw	128
  6825  00143C  0F75               	addlw	-139
  6826  00143E  A0D8               	btfss	status,0,c
  6827  001440  D04F               	goto	l5718
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6831  001442  0E00               	movlw	0
  6832  001444  6E2B               	movwf	___awdiv@divisor+1,c
  6833  001446  0E0A               	movlw	10
  6834  001448  6E2A               	movwf	___awdiv@divisor,c
  6835  00144A  0100               	movlb	0	; () banked
  6836  00144C  5198               	movf	scale@scl& (0+255),w,b
  6837  00144E  6E28               	movwf	___awdiv@dividend,c
  6838  001450  6A29               	clrf	___awdiv@dividend+1,c
  6839  001452  BE28               	btfsc	___awdiv@dividend,7,c
  6840  001454  0629               	decf	___awdiv@dividend+1,f,c
  6841  001456  ECDD  F017         	call	___awdiv	;wreg free
  6842  00145A  0E09               	movlw	9
  6843  00145C  2428               	addwf	?___awdiv,w,c
  6844  00145E  6E30               	movwf	___wmul@multiplier,c
  6845  001460  0E00               	movlw	0
  6846  001462  2029               	addwfc	?___awdiv+1,w,c
  6847  001464  6E31               	movwf	___wmul@multiplier+1,c
  6848  001466  0E00               	movlw	0
  6849  001468  6E33               	movwf	___wmul@multiplicand+1,c
  6850  00146A  0E03               	movlw	3
  6851  00146C  6E32               	movwf	___wmul@multiplicand,c
  6852  00146E  EC79  F01B         	call	___wmul	;wreg free
  6853  001472  0E45               	movlw	low __npowers_
  6854  001474  2430               	addwf	?___wmul,w,c
  6855  001476  6EF6               	movwf	tblptrl,c
  6856  001478  0EFE               	movlw	high __npowers_
  6857  00147A  2031               	addwfc	?___wmul+1,w,c
  6858  00147C  6EF7               	movwf	tblptrh,c
  6859  00147E                     	if	0	;There are less than 3 active tblptr bytes
  6860  00147E                     	endif
  6861  00147E  0009               	tblrd		*+
  6862  001480  CFF5 F086          	movff	tablat,___ftmul@f1
  6863  001484  0009               	tblrd		*+
  6864  001486  CFF5 F087          	movff	tablat,___ftmul@f1+1
  6865  00148A  000A               	tblrd		*-
  6866  00148C  CFF5 F088          	movff	tablat,___ftmul@f1+2
  6867  001490  0E00               	movlw	0
  6868  001492  6E33               	movwf	___wmul@multiplicand+1,c
  6869  001494  0E03               	movlw	3
  6870  001496  6E32               	movwf	___wmul@multiplicand,c
  6871  001498  0E00               	movlw	0
  6872  00149A  6E25               	movwf	___awmod@divisor+1,c
  6873  00149C  0E0A               	movlw	10
  6874  00149E  6E24               	movwf	___awmod@divisor,c
  6875  0014A0  0100               	movlb	0	; () banked
  6876  0014A2  5198               	movf	scale@scl& (0+255),w,b
  6877  0014A4  6E22               	movwf	___awmod@dividend,c
  6878  0014A6  6A23               	clrf	___awmod@dividend+1,c
  6879  0014A8  BE22               	btfsc	___awmod@dividend,7,c
  6880  0014AA  0623               	decf	___awmod@dividend+1,f,c
  6881  0014AC  ECD9  F018         	call	___awmod	;wreg free
  6882  0014B0  C022  F030         	movff	?___awmod,___wmul@multiplier
  6883  0014B4  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  6884  0014B8  EC79  F01B         	call	___wmul	;wreg free
  6885  0014BC  0E45               	movlw	low __npowers_
  6886  0014BE  2430               	addwf	?___wmul,w,c
  6887  0014C0  6EF6               	movwf	tblptrl,c
  6888  0014C2  0EFE               	movlw	high __npowers_
  6889  0014C4  2031               	addwfc	?___wmul+1,w,c
  6890  0014C6  6EF7               	movwf	tblptrh,c
  6891  0014C8                     	if	0	;There are less than 3 active tblptr bytes
  6892  0014C8                     	endif
  6893  0014C8  0009               	tblrd		*+
  6894  0014CA  CFF5 F089          	movff	tablat,___ftmul@f2
  6895  0014CE  0009               	tblrd		*+
  6896  0014D0  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  6897  0014D4  000A               	tblrd		*-
  6898  0014D6  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  6899  0014DA  EC52  F010         	call	___ftmul	;wreg free
  6900  0014DE  D7A4               	goto	L4
  6901  0014E0                     l5718:
  6902                           
  6903                           ;doprnt.c: 434: return _npowers_[scl];
  6904  0014E0  0100               	movlb	0	; () banked
  6905  0014E2  5198               	movf	scale@scl& (0+255),w,b
  6906  0014E4  0D03               	mullw	3
  6907  0014E6  0E45               	movlw	low __npowers_
  6908  0014E8  24F3               	addwf	prodl,w,c
  6909  0014EA  6EF6               	movwf	tblptrl,c
  6910  0014EC  0EFE               	movlw	high __npowers_
  6911  0014EE  20F4               	addwfc	prodh,w,c
  6912  0014F0  6EF7               	movwf	tblptrh,c
  6913  0014F2                     	if	0	;There are less than 3 active tblptr bytes
  6914  0014F2                     	endif
  6915  0014F2  0009               	tblrd		*+
  6916  0014F4  CFF5 F092          	movff	tablat,?_scale
  6917  0014F8  0009               	tblrd		*+
  6918  0014FA  CFF5 F093          	movff	tablat,?_scale+1
  6919  0014FE  000A               	tblrd		*-
  6920  001500  CFF5 F094          	movff	tablat,?_scale+2
  6921                           
  6922                           ; BSR set to: 0
  6923  001504  0012               	return	
  6924  001506                     l5722:
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;doprnt.c: 435: }
  6928                           ;doprnt.c: 436: if(scl>=110)
  6929  001506  0100               	movlb	0	; () banked
  6930  001508  5198               	movf	scale@scl& (0+255),w,b
  6931  00150A  0A80               	xorlw	128
  6932  00150C  0F12               	addlw	-238
  6933  00150E  A0D8               	btfss	status,0,c
  6934  001510  D094               	goto	l5730
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6938  001512  0E00               	movlw	0
  6939  001514  6E33               	movwf	___wmul@multiplicand+1,c
  6940  001516  0E03               	movlw	3
  6941  001518  6E32               	movwf	___wmul@multiplicand,c
  6942  00151A  0E00               	movlw	0
  6943  00151C  6E2B               	movwf	___awdiv@divisor+1,c
  6944  00151E  0E0A               	movlw	10
  6945  001520  6E2A               	movwf	___awdiv@divisor,c
  6946  001522  0E00               	movlw	0
  6947  001524  6E25               	movwf	___awmod@divisor+1,c
  6948  001526  0E64               	movlw	100
  6949  001528  6E24               	movwf	___awmod@divisor,c
  6950  00152A  0100               	movlb	0	; () banked
  6951  00152C  5198               	movf	scale@scl& (0+255),w,b
  6952  00152E  6E22               	movwf	___awmod@dividend,c
  6953  001530  6A23               	clrf	___awmod@dividend+1,c
  6954  001532  BE22               	btfsc	___awmod@dividend,7,c
  6955  001534  0623               	decf	___awmod@dividend+1,f,c
  6956  001536  ECD9  F018         	call	___awmod	;wreg free
  6957  00153A  C022  F028         	movff	?___awmod,___awdiv@dividend
  6958  00153E  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  6959  001542  ECDD  F017         	call	___awdiv	;wreg free
  6960  001546  0E09               	movlw	9
  6961  001548  2428               	addwf	?___awdiv,w,c
  6962  00154A  6E30               	movwf	___wmul@multiplier,c
  6963  00154C  0E00               	movlw	0
  6964  00154E  2029               	addwfc	?___awdiv+1,w,c
  6965  001550  6E31               	movwf	___wmul@multiplier+1,c
  6966  001552  EC79  F01B         	call	___wmul	;wreg free
  6967  001556  0E6C               	movlw	low __powers_
  6968  001558  2430               	addwf	?___wmul,w,c
  6969  00155A  6EF6               	movwf	tblptrl,c
  6970  00155C  0EFE               	movlw	high __powers_
  6971  00155E  2031               	addwfc	?___wmul+1,w,c
  6972  001560  6EF7               	movwf	tblptrh,c
  6973  001562                     	if	0	;There are less than 3 active tblptr bytes
  6974  001562                     	endif
  6975  001562  0009               	tblrd		*+
  6976  001564  CFF5 F089          	movff	tablat,___ftmul@f2
  6977  001568  0009               	tblrd		*+
  6978  00156A  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  6979  00156E  000A               	tblrd		*-
  6980  001570  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  6981  001574  0E00               	movlw	0
  6982  001576  6E2B               	movwf	___awdiv@divisor+1,c
  6983  001578  0E64               	movlw	100
  6984  00157A  6E2A               	movwf	___awdiv@divisor,c
  6985  00157C  0100               	movlb	0	; () banked
  6986  00157E  5198               	movf	scale@scl& (0+255),w,b
  6987  001580  6E28               	movwf	___awdiv@dividend,c
  6988  001582  6A29               	clrf	___awdiv@dividend+1,c
  6989  001584  BE28               	btfsc	___awdiv@dividend,7,c
  6990  001586  0629               	decf	___awdiv@dividend+1,f,c
  6991  001588  ECDD  F017         	call	___awdiv	;wreg free
  6992  00158C  0E12               	movlw	18
  6993  00158E  2428               	addwf	?___awdiv,w,c
  6994  001590  6E30               	movwf	___wmul@multiplier,c
  6995  001592  0E00               	movlw	0
  6996  001594  2029               	addwfc	?___awdiv+1,w,c
  6997  001596  6E31               	movwf	___wmul@multiplier+1,c
  6998  001598  0E00               	movlw	0
  6999  00159A  6E33               	movwf	___wmul@multiplicand+1,c
  7000  00159C  0E03               	movlw	3
  7001  00159E  6E32               	movwf	___wmul@multiplicand,c
  7002  0015A0  EC79  F01B         	call	___wmul	;wreg free
  7003  0015A4  0E6C               	movlw	low __powers_
  7004  0015A6  2430               	addwf	?___wmul,w,c
  7005  0015A8  6EF6               	movwf	tblptrl,c
  7006  0015AA  0EFE               	movlw	high __powers_
  7007  0015AC  2031               	addwfc	?___wmul+1,w,c
  7008  0015AE  6EF7               	movwf	tblptrh,c
  7009  0015B0                     	if	0	;There are less than 3 active tblptr bytes
  7010  0015B0                     	endif
  7011  0015B0  0009               	tblrd		*+
  7012  0015B2  CFF5 F086          	movff	tablat,___ftmul@f1
  7013  0015B6  0009               	tblrd		*+
  7014  0015B8  CFF5 F087          	movff	tablat,___ftmul@f1+1
  7015  0015BC  000A               	tblrd		*-
  7016  0015BE  CFF5 F088          	movff	tablat,___ftmul@f1+2
  7017  0015C2  EC52  F010         	call	___ftmul	;wreg free
  7018  0015C6  C086  F095         	movff	?___ftmul,_scale$1340
  7019  0015CA  C087  F096         	movff	?___ftmul+1,_scale$1340+1
  7020  0015CE  C088  F097         	movff	?___ftmul+2,_scale$1340+2
  7021                           
  7022                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7023  0015D2  C095  F086         	movff	_scale$1340,___ftmul@f1
  7024  0015D6  C096  F087         	movff	_scale$1340+1,___ftmul@f1+1
  7025  0015DA  C097  F088         	movff	_scale$1340+2,___ftmul@f1+2
  7026  0015DE  0E00               	movlw	0
  7027  0015E0  6E33               	movwf	___wmul@multiplicand+1,c
  7028  0015E2  0E03               	movlw	3
  7029  0015E4  6E32               	movwf	___wmul@multiplicand,c
  7030  0015E6  0E00               	movlw	0
  7031  0015E8  6E25               	movwf	___awmod@divisor+1,c
  7032  0015EA  0E0A               	movlw	10
  7033  0015EC  6E24               	movwf	___awmod@divisor,c
  7034  0015EE  0100               	movlb	0	; () banked
  7035  0015F0  5198               	movf	scale@scl& (0+255),w,b
  7036  0015F2  6E22               	movwf	___awmod@dividend,c
  7037  0015F4  6A23               	clrf	___awmod@dividend+1,c
  7038  0015F6  BE22               	btfsc	___awmod@dividend,7,c
  7039  0015F8  0623               	decf	___awmod@dividend+1,f,c
  7040  0015FA  ECD9  F018         	call	___awmod	;wreg free
  7041  0015FE  C022  F030         	movff	?___awmod,___wmul@multiplier
  7042  001602  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  7043  001606  EC79  F01B         	call	___wmul	;wreg free
  7044  00160A  0E6C               	movlw	low __powers_
  7045  00160C  2430               	addwf	?___wmul,w,c
  7046  00160E  6EF6               	movwf	tblptrl,c
  7047  001610  0EFE               	movlw	high __powers_
  7048  001612  2031               	addwfc	?___wmul+1,w,c
  7049  001614  6EF7               	movwf	tblptrh,c
  7050  001616                     	if	0	;There are less than 3 active tblptr bytes
  7051  001616                     	endif
  7052  001616  0009               	tblrd		*+
  7053  001618  CFF5 F089          	movff	tablat,___ftmul@f2
  7054  00161C  0009               	tblrd		*+
  7055  00161E  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  7056  001622  000A               	tblrd		*-
  7057  001624  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  7058  001628  EC52  F010         	call	___ftmul	;wreg free
  7059  00162C  C086  F092         	movff	?___ftmul,?_scale
  7060  001630  C087  F093         	movff	?___ftmul+1,?_scale+1
  7061  001634  C088  F094         	movff	?___ftmul+2,?_scale+2
  7062  001638  0012               	return	
  7063  00163A                     l5730:
  7064                           
  7065                           ;doprnt.c: 438: else if(scl > 10)
  7066  00163A  0100               	movlb	0	; () banked
  7067  00163C  5198               	movf	scale@scl& (0+255),w,b
  7068  00163E  0A80               	xorlw	128
  7069  001640  0F75               	addlw	-139
  7070  001642  A0D8               	btfss	status,0,c
  7071  001644  D04F               	goto	l5736
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7075  001646  0E00               	movlw	0
  7076  001648  6E2B               	movwf	___awdiv@divisor+1,c
  7077  00164A  0E0A               	movlw	10
  7078  00164C  6E2A               	movwf	___awdiv@divisor,c
  7079  00164E  0100               	movlb	0	; () banked
  7080  001650  5198               	movf	scale@scl& (0+255),w,b
  7081  001652  6E28               	movwf	___awdiv@dividend,c
  7082  001654  6A29               	clrf	___awdiv@dividend+1,c
  7083  001656  BE28               	btfsc	___awdiv@dividend,7,c
  7084  001658  0629               	decf	___awdiv@dividend+1,f,c
  7085  00165A  ECDD  F017         	call	___awdiv	;wreg free
  7086  00165E  0E09               	movlw	9
  7087  001660  2428               	addwf	?___awdiv,w,c
  7088  001662  6E30               	movwf	___wmul@multiplier,c
  7089  001664  0E00               	movlw	0
  7090  001666  2029               	addwfc	?___awdiv+1,w,c
  7091  001668  6E31               	movwf	___wmul@multiplier+1,c
  7092  00166A  0E00               	movlw	0
  7093  00166C  6E33               	movwf	___wmul@multiplicand+1,c
  7094  00166E  0E03               	movlw	3
  7095  001670  6E32               	movwf	___wmul@multiplicand,c
  7096  001672  EC79  F01B         	call	___wmul	;wreg free
  7097  001676  0E6C               	movlw	low __powers_
  7098  001678  2430               	addwf	?___wmul,w,c
  7099  00167A  6EF6               	movwf	tblptrl,c
  7100  00167C  0EFE               	movlw	high __powers_
  7101  00167E  2031               	addwfc	?___wmul+1,w,c
  7102  001680  6EF7               	movwf	tblptrh,c
  7103  001682                     	if	0	;There are less than 3 active tblptr bytes
  7104  001682                     	endif
  7105  001682  0009               	tblrd		*+
  7106  001684  CFF5 F086          	movff	tablat,___ftmul@f1
  7107  001688  0009               	tblrd		*+
  7108  00168A  CFF5 F087          	movff	tablat,___ftmul@f1+1
  7109  00168E  000A               	tblrd		*-
  7110  001690  CFF5 F088          	movff	tablat,___ftmul@f1+2
  7111  001694  0E00               	movlw	0
  7112  001696  6E33               	movwf	___wmul@multiplicand+1,c
  7113  001698  0E03               	movlw	3
  7114  00169A  6E32               	movwf	___wmul@multiplicand,c
  7115  00169C  0E00               	movlw	0
  7116  00169E  6E25               	movwf	___awmod@divisor+1,c
  7117  0016A0  0E0A               	movlw	10
  7118  0016A2  6E24               	movwf	___awmod@divisor,c
  7119  0016A4  0100               	movlb	0	; () banked
  7120  0016A6  5198               	movf	scale@scl& (0+255),w,b
  7121  0016A8  6E22               	movwf	___awmod@dividend,c
  7122  0016AA  6A23               	clrf	___awmod@dividend+1,c
  7123  0016AC  BE22               	btfsc	___awmod@dividend,7,c
  7124  0016AE  0623               	decf	___awmod@dividend+1,f,c
  7125  0016B0  ECD9  F018         	call	___awmod	;wreg free
  7126  0016B4  C022  F030         	movff	?___awmod,___wmul@multiplier
  7127  0016B8  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  7128  0016BC  EC79  F01B         	call	___wmul	;wreg free
  7129  0016C0  0E6C               	movlw	low __powers_
  7130  0016C2  2430               	addwf	?___wmul,w,c
  7131  0016C4  6EF6               	movwf	tblptrl,c
  7132  0016C6  0EFE               	movlw	high __powers_
  7133  0016C8  2031               	addwfc	?___wmul+1,w,c
  7134  0016CA  6EF7               	movwf	tblptrh,c
  7135  0016CC                     	if	0	;There are less than 3 active tblptr bytes
  7136  0016CC                     	endif
  7137  0016CC  0009               	tblrd		*+
  7138  0016CE  CFF5 F089          	movff	tablat,___ftmul@f2
  7139  0016D2  0009               	tblrd		*+
  7140  0016D4  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  7141  0016D8  000A               	tblrd		*-
  7142  0016DA  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  7143  0016DE  EC52  F010         	call	___ftmul	;wreg free
  7144  0016E2  D7A4               	goto	L5
  7145  0016E4                     l5736:
  7146                           
  7147                           ;doprnt.c: 440: return _powers_[scl];
  7148  0016E4  0100               	movlb	0	; () banked
  7149  0016E6  5198               	movf	scale@scl& (0+255),w,b
  7150  0016E8  0D03               	mullw	3
  7151  0016EA  0E6C               	movlw	low __powers_
  7152  0016EC  24F3               	addwf	prodl,w,c
  7153  0016EE  6EF6               	movwf	tblptrl,c
  7154  0016F0  0EFE               	movlw	high __powers_
  7155  0016F2  20F4               	addwfc	prodh,w,c
  7156  0016F4  6EF7               	movwf	tblptrh,c
  7157  0016F6                     	if	0	;There are less than 3 active tblptr bytes
  7158  0016F6                     	endif
  7159  0016F6  0009               	tblrd		*+
  7160  0016F8  CFF5 F092          	movff	tablat,?_scale
  7161  0016FC  0009               	tblrd		*+
  7162  0016FE  CFF5 F093          	movff	tablat,?_scale+1
  7163  001702  000A               	tblrd		*-
  7164  001704  CFF5 F094          	movff	tablat,?_scale+2
  7165  001708  0012               	return	
  7166  00170A                     __end_of_scale:
  7167                           	opt stack 0
  7168                           tblptru	equ	0xFF8
  7169                           tblptrh	equ	0xFF7
  7170                           tblptrl	equ	0xFF6
  7171                           tablat	equ	0xFF5
  7172                           prodh	equ	0xFF4
  7173                           prodl	equ	0xFF3
  7174                           postinc0	equ	0xFEE
  7175                           wreg	equ	0xFE8
  7176                           postdec1	equ	0xFE5
  7177                           fsr1l	equ	0xFE1
  7178                           indf2	equ	0xFDF
  7179                           postinc2	equ	0xFDE
  7180                           postdec2	equ	0xFDD
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           
  7185 ;; *************** function _putch *****************
  7186 ;; Defined at:
  7187 ;;		line 35 in file "lcd.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  data            1    wreg     unsigned char 
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;  data            1   37[COMRAM] unsigned char 
  7192 ;; Return value:  Size  Location     Type
  7193 ;;                  1    wreg      void 
  7194 ;; Registers used:
  7195 ;;		wreg, status,2, status,0, cstack
  7196 ;; Tracked objects:
  7197 ;;		On entry : 0/0
  7198 ;;		On exit  : 0/0
  7199 ;;		Unchanged: 0/0
  7200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7202 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;Total ram usage:        1 bytes
  7206 ;; Hardware stack levels used:    1
  7207 ;; Hardware stack levels required when called:    6
  7208 ;; This function calls:
  7209 ;;		_lcdNewline
  7210 ;;		_lcdNibble
  7211 ;; This function is called by:
  7212 ;;		_printf
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text15
  7217  00375E                     __ptext15:
  7218                           	opt stack 0
  7219  00375E                     _putch:
  7220                           	opt stack 22
  7221                           
  7222                           ;incstack = 0
  7223                           ;putch@data stored from wreg
  7224  00375E  6E26               	movwf	putch@data,c
  7225                           
  7226                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7227  003760  0E0A               	movlw	10
  7228  003762  1826               	xorwf	putch@data,w,c
  7229  003764  A4D8               	btfss	status,2,c
  7230  003766  D003               	goto	l190
  7231  003768  ECEE  F01B         	call	_lcdNewline	;wreg free
  7232  00376C  0012               	return	
  7233  00376E                     l190:
  7234                           
  7235                           ;lcd.c: 37: else
  7236                           ;lcd.c: 38: {
  7237                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7238  00376E  848C               	bsf	3980,2,c	;volatile
  7239                           
  7240                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7241  003770  0E74               	movlw	116
  7242  003772                     u7457:
  7243  003772  2EE8               	decfsz	wreg,f,c
  7244  003774  D7FE               	bra	u7457
  7245  003776  D000               	nop2	
  7246                           
  7247                           ;lcd.c: 41: lcdNibble(data);
  7248  003778  5026               	movf	putch@data,w,c
  7249  00377A  EC7C  F019         	call	_lcdNibble
  7250  00377E  0012               	return	
  7251  003780                     __end_of_putch:
  7252                           	opt stack 0
  7253                           tblptru	equ	0xFF8
  7254                           tblptrh	equ	0xFF7
  7255                           tblptrl	equ	0xFF6
  7256                           tablat	equ	0xFF5
  7257                           prodh	equ	0xFF4
  7258                           prodl	equ	0xFF3
  7259                           postinc0	equ	0xFEE
  7260                           wreg	equ	0xFE8
  7261                           postdec1	equ	0xFE5
  7262                           fsr1l	equ	0xFE1
  7263                           indf2	equ	0xFDF
  7264                           postinc2	equ	0xFDE
  7265                           postdec2	equ	0xFDD
  7266                           fsr2h	equ	0xFDA
  7267                           fsr2l	equ	0xFD9
  7268                           status	equ	0xFD8
  7269                           
  7270 ;; *************** function _lcdNewline *****************
  7271 ;; Defined at:
  7272 ;;		line 78 in file "lcd.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;		None
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;		None
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg, status,2, status,0, cstack
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;Total ram usage:        0 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    5
  7293 ;; This function calls:
  7294 ;;		_lcdInst
  7295 ;; This function is called by:
  7296 ;;		_putch
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           	psect	text16
  7301  0037DC                     __ptext16:
  7302                           	opt stack 0
  7303  0037DC                     _lcdNewline:
  7304                           	opt stack 22
  7305                           
  7306                           ;lcd.c: 79: lcdInst(0b11000000);
  7307                           
  7308                           ;incstack = 0
  7309  0037DC  0EC0               	movlw	192
  7310  0037DE  ECC0  F01B         	call	_lcdInst
  7311  0037E2  0012               	return		;funcret
  7312  0037E4                     __end_of_lcdNewline:
  7313                           	opt stack 0
  7314                           tblptru	equ	0xFF8
  7315                           tblptrh	equ	0xFF7
  7316                           tblptrl	equ	0xFF6
  7317                           tablat	equ	0xFF5
  7318                           prodh	equ	0xFF4
  7319                           prodl	equ	0xFF3
  7320                           postinc0	equ	0xFEE
  7321                           wreg	equ	0xFE8
  7322                           postdec1	equ	0xFE5
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           postinc2	equ	0xFDE
  7326                           postdec2	equ	0xFDD
  7327                           fsr2h	equ	0xFDA
  7328                           fsr2l	equ	0xFD9
  7329                           status	equ	0xFD8
  7330                           
  7331 ;; *************** function _isdigit *****************
  7332 ;; Defined at:
  7333 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;  c               1    wreg     unsigned char 
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;  c               1   35[COMRAM] unsigned char 
  7338 ;; Return value:  Size  Location     Type
  7339 ;;		None               void
  7340 ;; Registers used:
  7341 ;;		wreg, status,2, status,0
  7342 ;; Tracked objects:
  7343 ;;		On entry : 0/0
  7344 ;;		On exit  : 0/0
  7345 ;;		Unchanged: 0/0
  7346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;Total ram usage:        3 bytes
  7352 ;; Hardware stack levels used:    1
  7353 ;; Hardware stack levels required when called:    3
  7354 ;; This function calls:
  7355 ;;		Nothing
  7356 ;; This function is called by:
  7357 ;;		_printf
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           	psect	text17
  7362  0037A2                     __ptext17:
  7363                           	opt stack 0
  7364  0037A2                     _isdigit:
  7365                           	opt stack 25
  7366                           
  7367                           ;incstack = 0
  7368                           ;isdigit@c stored from wreg
  7369  0037A2  6E24               	movwf	isdigit@c,c
  7370  0037A4  0E00               	movlw	0
  7371  0037A6  6E23               	movwf	_isdigit$962,c
  7372  0037A8  0E3A               	movlw	58
  7373  0037AA  6024               	cpfslt	isdigit@c,c
  7374  0037AC  D005               	goto	l5748
  7375  0037AE  0E2F               	movlw	47
  7376  0037B0  6424               	cpfsgt	isdigit@c,c
  7377  0037B2  D002               	goto	l5748
  7378  0037B4  0E01               	movlw	1
  7379  0037B6  6E23               	movwf	_isdigit$962,c
  7380  0037B8                     l5748:
  7381  0037B8  C023  F022         	movff	_isdigit$962,??_isdigit
  7382  0037BC  3022               	rrcf	??_isdigit,w,c
  7383  0037BE  0012               	return	
  7384  0037C0                     __end_of_isdigit:
  7385                           	opt stack 0
  7386                           tblptru	equ	0xFF8
  7387                           tblptrh	equ	0xFF7
  7388                           tblptrl	equ	0xFF6
  7389                           tablat	equ	0xFF5
  7390                           prodh	equ	0xFF4
  7391                           prodl	equ	0xFF3
  7392                           postinc0	equ	0xFEE
  7393                           wreg	equ	0xFE8
  7394                           postdec1	equ	0xFE5
  7395                           fsr1l	equ	0xFE1
  7396                           indf2	equ	0xFDF
  7397                           postinc2	equ	0xFDE
  7398                           postdec2	equ	0xFDD
  7399                           fsr2h	equ	0xFDA
  7400                           fsr2l	equ	0xFD9
  7401                           status	equ	0xFD8
  7402                           
  7403 ;; *************** function _fround *****************
  7404 ;; Defined at:
  7405 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;  prec            1    wreg     unsigned char 
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;  prec            1   27[BANK0 ] unsigned char 
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  3   18[BANK0 ] unsigned char 
  7412 ;; Registers used:
  7413 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7419 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7423 ;;Total ram usage:       10 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:    5
  7426 ;; This function calls:
  7427 ;;		___awdiv
  7428 ;;		___awmod
  7429 ;;		___ftmul
  7430 ;;		___wmul
  7431 ;; This function is called by:
  7432 ;;		_printf
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           	psect	text18
  7437  001CEC                     __ptext18:
  7438                           	opt stack 0
  7439  001CEC                     _fround:
  7440                           	opt stack 23
  7441                           
  7442                           ;incstack = 0
  7443                           ;fround@prec stored from wreg
  7444  001CEC  0100               	movlb	0	; () banked
  7445  001CEE  6F9B               	movwf	fround@prec& (0+255),b
  7446                           
  7447                           ;doprnt.c: 413: if(prec>=110)
  7448  001CF0  0E6D               	movlw	109
  7449  001CF2  0100               	movlb	0	; () banked
  7450  001CF4  659B               	cpfsgt	fround@prec& (0+255),b
  7451  001CF6  D0A2               	goto	l5690
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7455  001CF8  0E00               	movlw	0
  7456  001CFA  6E33               	movwf	___wmul@multiplicand+1,c
  7457  001CFC  0E03               	movlw	3
  7458  001CFE  6E32               	movwf	___wmul@multiplicand,c
  7459  001D00  0E00               	movlw	0
  7460  001D02  6E2B               	movwf	___awdiv@divisor+1,c
  7461  001D04  0E0A               	movlw	10
  7462  001D06  6E2A               	movwf	___awdiv@divisor,c
  7463  001D08  0E00               	movlw	0
  7464  001D0A  6E25               	movwf	___awmod@divisor+1,c
  7465  001D0C  0E64               	movlw	100
  7466  001D0E  6E24               	movwf	___awmod@divisor,c
  7467  001D10  C09B  F022         	movff	fround@prec,___awmod@dividend
  7468  001D14  6A23               	clrf	___awmod@dividend+1,c
  7469  001D16  ECD9  F018         	call	___awmod	;wreg free
  7470  001D1A  C022  F028         	movff	?___awmod,___awdiv@dividend
  7471  001D1E  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  7472  001D22  ECDD  F017         	call	___awdiv	;wreg free
  7473  001D26  0E09               	movlw	9
  7474  001D28  2428               	addwf	?___awdiv,w,c
  7475  001D2A  6E30               	movwf	___wmul@multiplier,c
  7476  001D2C  0E00               	movlw	0
  7477  001D2E  2029               	addwfc	?___awdiv+1,w,c
  7478  001D30  6E31               	movwf	___wmul@multiplier+1,c
  7479  001D32  EC79  F01B         	call	___wmul	;wreg free
  7480  001D36  0E45               	movlw	low __npowers_
  7481  001D38  2430               	addwf	?___wmul,w,c
  7482  001D3A  6EF6               	movwf	tblptrl,c
  7483  001D3C  0EFE               	movlw	high __npowers_
  7484  001D3E  2031               	addwfc	?___wmul+1,w,c
  7485  001D40  6EF7               	movwf	tblptrh,c
  7486  001D42                     	if	0	;There are less than 3 active tblptr bytes
  7487  001D42                     	endif
  7488  001D42  0009               	tblrd		*+
  7489  001D44  CFF5 F089          	movff	tablat,___ftmul@f2
  7490  001D48  0009               	tblrd		*+
  7491  001D4A  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  7492  001D4E  000A               	tblrd		*-
  7493  001D50  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  7494  001D54  0E00               	movlw	0
  7495  001D56  6E2B               	movwf	___awdiv@divisor+1,c
  7496  001D58  0E64               	movlw	100
  7497  001D5A  6E2A               	movwf	___awdiv@divisor,c
  7498  001D5C  C09B  F028         	movff	fround@prec,___awdiv@dividend
  7499  001D60  6A29               	clrf	___awdiv@dividend+1,c
  7500  001D62  ECDD  F017         	call	___awdiv	;wreg free
  7501  001D66  0E12               	movlw	18
  7502  001D68  2428               	addwf	?___awdiv,w,c
  7503  001D6A  6E30               	movwf	___wmul@multiplier,c
  7504  001D6C  0E00               	movlw	0
  7505  001D6E  2029               	addwfc	?___awdiv+1,w,c
  7506  001D70  6E31               	movwf	___wmul@multiplier+1,c
  7507  001D72  0E00               	movlw	0
  7508  001D74  6E33               	movwf	___wmul@multiplicand+1,c
  7509  001D76  0E03               	movlw	3
  7510  001D78  6E32               	movwf	___wmul@multiplicand,c
  7511  001D7A  EC79  F01B         	call	___wmul	;wreg free
  7512  001D7E  0E45               	movlw	low __npowers_
  7513  001D80  2430               	addwf	?___wmul,w,c
  7514  001D82  6EF6               	movwf	tblptrl,c
  7515  001D84  0EFE               	movlw	high __npowers_
  7516  001D86  2031               	addwfc	?___wmul+1,w,c
  7517  001D88  6EF7               	movwf	tblptrh,c
  7518  001D8A                     	if	0	;There are less than 3 active tblptr bytes
  7519  001D8A                     	endif
  7520  001D8A  0009               	tblrd		*+
  7521  001D8C  CFF5 F086          	movff	tablat,___ftmul@f1
  7522  001D90  0009               	tblrd		*+
  7523  001D92  CFF5 F087          	movff	tablat,___ftmul@f1+1
  7524  001D96  000A               	tblrd		*-
  7525  001D98  CFF5 F088          	movff	tablat,___ftmul@f1+2
  7526  001D9C  EC52  F010         	call	___ftmul	;wreg free
  7527  001DA0  C086  F098         	movff	?___ftmul,_fround$1338
  7528  001DA4  C087  F099         	movff	?___ftmul+1,_fround$1338+1
  7529  001DA8  C088  F09A         	movff	?___ftmul+2,_fround$1338+2
  7530                           
  7531                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7532  001DAC  0E00               	movlw	0
  7533  001DAE  6E33               	movwf	___wmul@multiplicand+1,c
  7534  001DB0  0E03               	movlw	3
  7535  001DB2  6E32               	movwf	___wmul@multiplicand,c
  7536  001DB4  0E00               	movlw	0
  7537  001DB6  6E25               	movwf	___awmod@divisor+1,c
  7538  001DB8  0E0A               	movlw	10
  7539  001DBA  6E24               	movwf	___awmod@divisor,c
  7540  001DBC  C09B  F022         	movff	fround@prec,___awmod@dividend
  7541  001DC0  6A23               	clrf	___awmod@dividend+1,c
  7542  001DC2  ECD9  F018         	call	___awmod	;wreg free
  7543  001DC6  C022  F030         	movff	?___awmod,___wmul@multiplier
  7544  001DCA  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  7545  001DCE  EC79  F01B         	call	___wmul	;wreg free
  7546  001DD2  0E45               	movlw	low __npowers_
  7547  001DD4  2430               	addwf	?___wmul,w,c
  7548  001DD6  6EF6               	movwf	tblptrl,c
  7549  001DD8  0EFE               	movlw	high __npowers_
  7550  001DDA  2031               	addwfc	?___wmul+1,w,c
  7551  001DDC  6EF7               	movwf	tblptrh,c
  7552  001DDE                     	if	0	;There are less than 3 active tblptr bytes
  7553  001DDE                     	endif
  7554  001DDE  0009               	tblrd		*+
  7555  001DE0  CFF5 F089          	movff	tablat,___ftmul@f2
  7556  001DE4  0009               	tblrd		*+
  7557  001DE6  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  7558  001DEA  000A               	tblrd		*-
  7559  001DEC  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  7560  001DF0  C098  F086         	movff	_fround$1338,___ftmul@f1
  7561  001DF4  C099  F087         	movff	_fround$1338+1,___ftmul@f1+1
  7562  001DF8  C09A  F088         	movff	_fround$1338+2,___ftmul@f1+2
  7563  001DFC  EC52  F010         	call	___ftmul	;wreg free
  7564  001E00  C086  F095         	movff	?___ftmul,_fround$1339
  7565  001E04  C087  F096         	movff	?___ftmul+1,_fround$1339+1
  7566  001E08  C088  F097         	movff	?___ftmul+2,_fround$1339+2
  7567                           
  7568                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7569  001E0C  C095  F086         	movff	_fround$1339,___ftmul@f1
  7570  001E10  C096  F087         	movff	_fround$1339+1,___ftmul@f1+1
  7571  001E14  C097  F088         	movff	_fround$1339+2,___ftmul@f1+2
  7572  001E18  0E00               	movlw	0
  7573  001E1A  0100               	movlb	0	; () banked
  7574  001E1C  6F89               	movwf	___ftmul@f2& (0+255),b
  7575  001E1E  0E00               	movlw	0
  7576  001E20  0100               	movlb	0	; () banked
  7577  001E22  6F8A               	movwf	(___ftmul@f2+1)& (0+255),b
  7578  001E24  0E3F               	movlw	63
  7579  001E26  0100               	movlb	0	; () banked
  7580  001E28  6F8B               	movwf	(___ftmul@f2+2)& (0+255),b
  7581  001E2A  EC52  F010         	call	___ftmul	;wreg free
  7582  001E2E  C086  F092         	movff	?___ftmul,?_fround
  7583  001E32  C087  F093         	movff	?___ftmul+1,?_fround+1
  7584  001E36  C088  F094         	movff	?___ftmul+2,?_fround+2
  7585  001E3A  0012               	return	
  7586  001E3C                     l5690:
  7587                           
  7588                           ;doprnt.c: 415: else if(prec > 10)
  7589  001E3C  0E0A               	movlw	10
  7590  001E3E  0100               	movlb	0	; () banked
  7591  001E40  659B               	cpfsgt	fround@prec& (0+255),b
  7592  001E42  D060               	goto	l5698
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7596  001E44  0E00               	movlw	0
  7597  001E46  6E33               	movwf	___wmul@multiplicand+1,c
  7598  001E48  0E03               	movlw	3
  7599  001E4A  6E32               	movwf	___wmul@multiplicand,c
  7600  001E4C  0E00               	movlw	0
  7601  001E4E  6E25               	movwf	___awmod@divisor+1,c
  7602  001E50  0E0A               	movlw	10
  7603  001E52  6E24               	movwf	___awmod@divisor,c
  7604  001E54  C09B  F022         	movff	fround@prec,___awmod@dividend
  7605  001E58  6A23               	clrf	___awmod@dividend+1,c
  7606  001E5A  ECD9  F018         	call	___awmod	;wreg free
  7607  001E5E  C022  F030         	movff	?___awmod,___wmul@multiplier
  7608  001E62  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  7609  001E66  EC79  F01B         	call	___wmul	;wreg free
  7610  001E6A  0E45               	movlw	low __npowers_
  7611  001E6C  2430               	addwf	?___wmul,w,c
  7612  001E6E  6EF6               	movwf	tblptrl,c
  7613  001E70  0EFE               	movlw	high __npowers_
  7614  001E72  2031               	addwfc	?___wmul+1,w,c
  7615  001E74  6EF7               	movwf	tblptrh,c
  7616  001E76                     	if	0	;There are less than 3 active tblptr bytes
  7617  001E76                     	endif
  7618  001E76  0009               	tblrd		*+
  7619  001E78  CFF5 F089          	movff	tablat,___ftmul@f2
  7620  001E7C  0009               	tblrd		*+
  7621  001E7E  CFF5 F08A          	movff	tablat,___ftmul@f2+1
  7622  001E82  000A               	tblrd		*-
  7623  001E84  CFF5 F08B          	movff	tablat,___ftmul@f2+2
  7624  001E88  0E00               	movlw	0
  7625  001E8A  6E2B               	movwf	___awdiv@divisor+1,c
  7626  001E8C  0E0A               	movlw	10
  7627  001E8E  6E2A               	movwf	___awdiv@divisor,c
  7628  001E90  C09B  F028         	movff	fround@prec,___awdiv@dividend
  7629  001E94  6A29               	clrf	___awdiv@dividend+1,c
  7630  001E96  ECDD  F017         	call	___awdiv	;wreg free
  7631  001E9A  0E09               	movlw	9
  7632  001E9C  2428               	addwf	?___awdiv,w,c
  7633  001E9E  6E30               	movwf	___wmul@multiplier,c
  7634  001EA0  0E00               	movlw	0
  7635  001EA2  2029               	addwfc	?___awdiv+1,w,c
  7636  001EA4  6E31               	movwf	___wmul@multiplier+1,c
  7637  001EA6  0E00               	movlw	0
  7638  001EA8  6E33               	movwf	___wmul@multiplicand+1,c
  7639  001EAA  0E03               	movlw	3
  7640  001EAC  6E32               	movwf	___wmul@multiplicand,c
  7641  001EAE  EC79  F01B         	call	___wmul	;wreg free
  7642  001EB2  0E45               	movlw	low __npowers_
  7643  001EB4  2430               	addwf	?___wmul,w,c
  7644  001EB6  6EF6               	movwf	tblptrl,c
  7645  001EB8  0EFE               	movlw	high __npowers_
  7646  001EBA  2031               	addwfc	?___wmul+1,w,c
  7647  001EBC  6EF7               	movwf	tblptrh,c
  7648  001EBE                     	if	0	;There are less than 3 active tblptr bytes
  7649  001EBE                     	endif
  7650  001EBE  0009               	tblrd		*+
  7651  001EC0  CFF5 F086          	movff	tablat,___ftmul@f1
  7652  001EC4  0009               	tblrd		*+
  7653  001EC6  CFF5 F087          	movff	tablat,___ftmul@f1+1
  7654  001ECA  000A               	tblrd		*-
  7655  001ECC  CFF5 F088          	movff	tablat,___ftmul@f1+2
  7656  001ED0  EC52  F010         	call	___ftmul	;wreg free
  7657  001ED4  C086  F098         	movff	?___ftmul,_fround$1338
  7658  001ED8  C087  F099         	movff	?___ftmul+1,_fround$1338+1
  7659  001EDC  C088  F09A         	movff	?___ftmul+2,_fround$1338+2
  7660                           
  7661                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7662  001EE0  C098  F086         	movff	_fround$1338,___ftmul@f1
  7663  001EE4  C099  F087         	movff	_fround$1338+1,___ftmul@f1+1
  7664  001EE8  C09A  F088         	movff	_fround$1338+2,___ftmul@f1+2
  7665  001EEC  0E00               	movlw	0
  7666  001EEE  0100               	movlb	0	; () banked
  7667  001EF0  6F89               	movwf	___ftmul@f2& (0+255),b
  7668  001EF2  0E00               	movlw	0
  7669  001EF4  0100               	movlb	0	; () banked
  7670  001EF6  6F8A               	movwf	(___ftmul@f2+1)& (0+255),b
  7671  001EF8  0E3F               	movlw	63
  7672  001EFA  0100               	movlb	0	; () banked
  7673  001EFC  6F8B               	movwf	(___ftmul@f2+2)& (0+255),b
  7674  001EFE  EC52  F010         	call	___ftmul	;wreg free
  7675  001F02  D795               	goto	L6
  7676  001F04                     l5698:
  7677                           
  7678                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7679  001F04  0100               	movlb	0	; () banked
  7680  001F06  519B               	movf	fround@prec& (0+255),w,b
  7681  001F08  0D03               	mullw	3
  7682  001F0A  0E45               	movlw	low __npowers_
  7683  001F0C  24F3               	addwf	prodl,w,c
  7684  001F0E  6EF6               	movwf	tblptrl,c
  7685  001F10  0EFE               	movlw	high __npowers_
  7686  001F12  20F4               	addwfc	prodh,w,c
  7687  001F14  6EF7               	movwf	tblptrh,c
  7688  001F16                     	if	0	;There are less than 3 active tblptr bytes
  7689  001F16                     	endif
  7690  001F16  0009               	tblrd		*+
  7691  001F18  CFF5 F086          	movff	tablat,___ftmul@f1
  7692  001F1C  0009               	tblrd		*+
  7693  001F1E  CFF5 F087          	movff	tablat,___ftmul@f1+1
  7694  001F22  000A               	tblrd		*-
  7695  001F24  CFF5 F088          	movff	tablat,___ftmul@f1+2
  7696  001F28  0E00               	movlw	0
  7697  001F2A  0100               	movlb	0	; () banked
  7698  001F2C  6F89               	movwf	___ftmul@f2& (0+255),b
  7699  001F2E  0E00               	movlw	0
  7700  001F30  0100               	movlb	0	; () banked
  7701  001F32  6F8A               	movwf	(___ftmul@f2+1)& (0+255),b
  7702  001F34  0E3F               	movlw	63
  7703  001F36  0100               	movlb	0	; () banked
  7704  001F38  6F8B               	movwf	(___ftmul@f2+2)& (0+255),b
  7705  001F3A  EC52  F010         	call	___ftmul	;wreg free
  7706  001F3E  C086  F092         	movff	?___ftmul,?_fround
  7707  001F42  C087  F093         	movff	?___ftmul+1,?_fround+1
  7708  001F46  C088  F094         	movff	?___ftmul+2,?_fround+2
  7709  001F4A  0012               	return	
  7710  001F4C                     __end_of_fround:
  7711                           	opt stack 0
  7712                           tblptru	equ	0xFF8
  7713                           tblptrh	equ	0xFF7
  7714                           tblptrl	equ	0xFF6
  7715                           tablat	equ	0xFF5
  7716                           prodh	equ	0xFF4
  7717                           prodl	equ	0xFF3
  7718                           postinc0	equ	0xFEE
  7719                           wreg	equ	0xFE8
  7720                           postdec1	equ	0xFE5
  7721                           fsr1l	equ	0xFE1
  7722                           indf2	equ	0xFDF
  7723                           postinc2	equ	0xFDE
  7724                           postdec2	equ	0xFDD
  7725                           fsr2h	equ	0xFDA
  7726                           fsr2l	equ	0xFD9
  7727                           status	equ	0xFD8
  7728                           
  7729 ;; *************** function ___wmul *****************
  7730 ;; Defined at:
  7731 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;  multiplier      2   47[COMRAM] unsigned int 
  7734 ;;  multiplicand    2   49[COMRAM] unsigned int 
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;  product         2   51[COMRAM] unsigned int 
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  2   47[COMRAM] unsigned int 
  7739 ;; Registers used:
  7740 ;;		wreg, status,2, status,0, prodl, prodh
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7746 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;Total ram usage:        6 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; Hardware stack levels required when called:    3
  7753 ;; This function calls:
  7754 ;;		Nothing
  7755 ;; This function is called by:
  7756 ;;		_fround
  7757 ;;		_scale
  7758 ;;		_printf
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           	psect	text19
  7763  0036F2                     __ptext19:
  7764                           	opt stack 0
  7765  0036F2                     ___wmul:
  7766                           	opt stack 24
  7767                           
  7768                           ;incstack = 0
  7769  0036F2  5030               	movf	___wmul@multiplier,w,c
  7770  0036F4  0232               	mulwf	___wmul@multiplicand,c
  7771  0036F6  CFF3 F034          	movff	prodl,___wmul@product
  7772  0036FA  CFF4 F035          	movff	prodh,___wmul@product+1
  7773  0036FE  5030               	movf	___wmul@multiplier,w,c
  7774  003700  0233               	mulwf	___wmul@multiplicand+1,c
  7775  003702  50F3               	movf	prodl,w,c
  7776  003704  2635               	addwf	___wmul@product+1,f,c
  7777  003706  5031               	movf	___wmul@multiplier+1,w,c
  7778  003708  0232               	mulwf	___wmul@multiplicand,c
  7779  00370A  50F3               	movf	prodl,w,c
  7780  00370C  2635               	addwf	___wmul@product+1,f,c
  7781  00370E  C034  F030         	movff	___wmul@product,?___wmul
  7782  003712  C035  F031         	movff	___wmul@product+1,?___wmul+1
  7783  003716  0012               	return	
  7784  003718                     __end_of___wmul:
  7785                           	opt stack 0
  7786                           tblptru	equ	0xFF8
  7787                           tblptrh	equ	0xFF7
  7788                           tblptrl	equ	0xFF6
  7789                           tablat	equ	0xFF5
  7790                           prodh	equ	0xFF4
  7791                           prodl	equ	0xFF3
  7792                           postinc0	equ	0xFEE
  7793                           wreg	equ	0xFE8
  7794                           postdec1	equ	0xFE5
  7795                           fsr1l	equ	0xFE1
  7796                           indf2	equ	0xFDF
  7797                           postinc2	equ	0xFDE
  7798                           postdec2	equ	0xFDD
  7799                           fsr2h	equ	0xFDA
  7800                           fsr2l	equ	0xFD9
  7801                           status	equ	0xFD8
  7802                           
  7803 ;; *************** function ___awmod *****************
  7804 ;; Defined at:
  7805 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;  dividend        2   33[COMRAM] int 
  7808 ;;  divisor         2   35[COMRAM] int 
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;  sign            1   38[COMRAM] unsigned char 
  7811 ;;  counter         1   37[COMRAM] unsigned char 
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  2   33[COMRAM] int 
  7814 ;; Registers used:
  7815 ;;		wreg, status,2, status,0
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7821 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;Total ram usage:        6 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:    3
  7828 ;; This function calls:
  7829 ;;		Nothing
  7830 ;; This function is called by:
  7831 ;;		_fround
  7832 ;;		_scale
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           	psect	text20
  7837  0031B2                     __ptext20:
  7838                           	opt stack 0
  7839  0031B2                     ___awmod:
  7840                           	opt stack 24
  7841                           
  7842                           ;incstack = 0
  7843  0031B2  0E00               	movlw	0
  7844  0031B4  6E27               	movwf	___awmod@sign,c
  7845  0031B6  AE23               	btfss	___awmod@dividend+1,7,c
  7846  0031B8  D006               	goto	l5644
  7847  0031BA  6C22               	negf	___awmod@dividend,c
  7848  0031BC  1E23               	comf	___awmod@dividend+1,f,c
  7849  0031BE  B0D8               	btfsc	status,0,c
  7850  0031C0  2A23               	incf	___awmod@dividend+1,f,c
  7851  0031C2  0E01               	movlw	1
  7852  0031C4  6E27               	movwf	___awmod@sign,c
  7853  0031C6                     l5644:
  7854  0031C6  AE25               	btfss	___awmod@divisor+1,7,c
  7855  0031C8  D004               	goto	l5648
  7856  0031CA  6C24               	negf	___awmod@divisor,c
  7857  0031CC  1E25               	comf	___awmod@divisor+1,f,c
  7858  0031CE  B0D8               	btfsc	status,0,c
  7859  0031D0  2A25               	incf	___awmod@divisor+1,f,c
  7860  0031D2                     l5648:
  7861  0031D2  5024               	movf	___awmod@divisor,w,c
  7862  0031D4  1025               	iorwf	___awmod@divisor+1,w,c
  7863  0031D6  B4D8               	btfsc	status,2,c
  7864  0031D8  D018               	goto	l5664
  7865  0031DA  0E01               	movlw	1
  7866  0031DC  6E26               	movwf	___awmod@counter,c
  7867  0031DE  D004               	goto	l5654
  7868  0031E0                     l5652:
  7869  0031E0  90D8               	bcf	status,0,c
  7870  0031E2  3624               	rlcf	___awmod@divisor,f,c
  7871  0031E4  3625               	rlcf	___awmod@divisor+1,f,c
  7872  0031E6  2A26               	incf	___awmod@counter,f,c
  7873  0031E8                     l5654:
  7874  0031E8  AE25               	btfss	___awmod@divisor+1,7,c
  7875  0031EA  D7FA               	goto	l5652
  7876  0031EC                     l5656:
  7877  0031EC  5024               	movf	___awmod@divisor,w,c
  7878  0031EE  5C22               	subwf	___awmod@dividend,w,c
  7879  0031F0  5025               	movf	___awmod@divisor+1,w,c
  7880  0031F2  5823               	subwfb	___awmod@dividend+1,w,c
  7881  0031F4  A0D8               	btfss	status,0,c
  7882  0031F6  D004               	goto	l5660
  7883  0031F8  5024               	movf	___awmod@divisor,w,c
  7884  0031FA  5E22               	subwf	___awmod@dividend,f,c
  7885  0031FC  5025               	movf	___awmod@divisor+1,w,c
  7886  0031FE  5A23               	subwfb	___awmod@dividend+1,f,c
  7887  003200                     l5660:
  7888  003200  90D8               	bcf	status,0,c
  7889  003202  3225               	rrcf	___awmod@divisor+1,f,c
  7890  003204  3224               	rrcf	___awmod@divisor,f,c
  7891  003206  2E26               	decfsz	___awmod@counter,f,c
  7892  003208  D7F1               	goto	l5656
  7893  00320A                     l5664:
  7894  00320A  5027               	movf	___awmod@sign,w,c
  7895  00320C  B4D8               	btfsc	status,2,c
  7896  00320E  D004               	goto	l5668
  7897  003210  6C22               	negf	___awmod@dividend,c
  7898  003212  1E23               	comf	___awmod@dividend+1,f,c
  7899  003214  B0D8               	btfsc	status,0,c
  7900  003216  2A23               	incf	___awmod@dividend+1,f,c
  7901  003218                     l5668:
  7902  003218  C022  F022         	movff	___awmod@dividend,?___awmod
  7903  00321C  C023  F023         	movff	___awmod@dividend+1,?___awmod+1
  7904  003220  0012               	return	
  7905  003222                     __end_of___awmod:
  7906                           	opt stack 0
  7907                           tblptru	equ	0xFF8
  7908                           tblptrh	equ	0xFF7
  7909                           tblptrl	equ	0xFF6
  7910                           tablat	equ	0xFF5
  7911                           prodh	equ	0xFF4
  7912                           prodl	equ	0xFF3
  7913                           postinc0	equ	0xFEE
  7914                           wreg	equ	0xFE8
  7915                           postdec1	equ	0xFE5
  7916                           fsr1l	equ	0xFE1
  7917                           indf2	equ	0xFDF
  7918                           postinc2	equ	0xFDE
  7919                           postdec2	equ	0xFDD
  7920                           fsr2h	equ	0xFDA
  7921                           fsr2l	equ	0xFD9
  7922                           status	equ	0xFD8
  7923                           
  7924 ;; *************** function ___awdiv *****************
  7925 ;; Defined at:
  7926 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;  dividend        2   39[COMRAM] int 
  7929 ;;  divisor         2   41[COMRAM] int 
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;  quotient        2   45[COMRAM] int 
  7932 ;;  sign            1   44[COMRAM] unsigned char 
  7933 ;;  counter         1   43[COMRAM] unsigned char 
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  2   39[COMRAM] int 
  7936 ;; Registers used:
  7937 ;;		wreg, status,2, status,0
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7946 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7947 ;;Total ram usage:        8 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    3
  7950 ;; This function calls:
  7951 ;;		Nothing
  7952 ;; This function is called by:
  7953 ;;		_fround
  7954 ;;		_scale
  7955 ;;		_printf
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           	psect	text21
  7960  002FBA                     __ptext21:
  7961                           	opt stack 0
  7962  002FBA                     ___awdiv:
  7963                           	opt stack 24
  7964                           
  7965                           ;incstack = 0
  7966  002FBA  0E00               	movlw	0
  7967  002FBC  6E2D               	movwf	___awdiv@sign,c
  7968  002FBE  AE2B               	btfss	___awdiv@divisor+1,7,c
  7969  002FC0  D006               	goto	l5600
  7970  002FC2  6C2A               	negf	___awdiv@divisor,c
  7971  002FC4  1E2B               	comf	___awdiv@divisor+1,f,c
  7972  002FC6  B0D8               	btfsc	status,0,c
  7973  002FC8  2A2B               	incf	___awdiv@divisor+1,f,c
  7974  002FCA  0E01               	movlw	1
  7975  002FCC  6E2D               	movwf	___awdiv@sign,c
  7976  002FCE                     l5600:
  7977  002FCE  AE29               	btfss	___awdiv@dividend+1,7,c
  7978  002FD0  D006               	goto	l5606
  7979  002FD2  6C28               	negf	___awdiv@dividend,c
  7980  002FD4  1E29               	comf	___awdiv@dividend+1,f,c
  7981  002FD6  B0D8               	btfsc	status,0,c
  7982  002FD8  2A29               	incf	___awdiv@dividend+1,f,c
  7983  002FDA  0E01               	movlw	1
  7984  002FDC  1A2D               	xorwf	___awdiv@sign,f,c
  7985  002FDE                     l5606:
  7986  002FDE  0E00               	movlw	0
  7987  002FE0  6E2F               	movwf	___awdiv@quotient+1,c
  7988  002FE2  0E00               	movlw	0
  7989  002FE4  6E2E               	movwf	___awdiv@quotient,c
  7990  002FE6  502A               	movf	___awdiv@divisor,w,c
  7991  002FE8  102B               	iorwf	___awdiv@divisor+1,w,c
  7992  002FEA  B4D8               	btfsc	status,2,c
  7993  002FEC  D01C               	goto	l5628
  7994  002FEE  0E01               	movlw	1
  7995  002FF0  6E2C               	movwf	___awdiv@counter,c
  7996  002FF2  D004               	goto	l5614
  7997  002FF4                     l5612:
  7998  002FF4  90D8               	bcf	status,0,c
  7999  002FF6  362A               	rlcf	___awdiv@divisor,f,c
  8000  002FF8  362B               	rlcf	___awdiv@divisor+1,f,c
  8001  002FFA  2A2C               	incf	___awdiv@counter,f,c
  8002  002FFC                     l5614:
  8003  002FFC  AE2B               	btfss	___awdiv@divisor+1,7,c
  8004  002FFE  D7FA               	goto	l5612
  8005  003000                     l5616:
  8006  003000  90D8               	bcf	status,0,c
  8007  003002  362E               	rlcf	___awdiv@quotient,f,c
  8008  003004  362F               	rlcf	___awdiv@quotient+1,f,c
  8009  003006  502A               	movf	___awdiv@divisor,w,c
  8010  003008  5C28               	subwf	___awdiv@dividend,w,c
  8011  00300A  502B               	movf	___awdiv@divisor+1,w,c
  8012  00300C  5829               	subwfb	___awdiv@dividend+1,w,c
  8013  00300E  A0D8               	btfss	status,0,c
  8014  003010  D005               	goto	l5624
  8015  003012  502A               	movf	___awdiv@divisor,w,c
  8016  003014  5E28               	subwf	___awdiv@dividend,f,c
  8017  003016  502B               	movf	___awdiv@divisor+1,w,c
  8018  003018  5A29               	subwfb	___awdiv@dividend+1,f,c
  8019  00301A  802E               	bsf	___awdiv@quotient,0,c
  8020  00301C                     l5624:
  8021  00301C  90D8               	bcf	status,0,c
  8022  00301E  322B               	rrcf	___awdiv@divisor+1,f,c
  8023  003020  322A               	rrcf	___awdiv@divisor,f,c
  8024  003022  2E2C               	decfsz	___awdiv@counter,f,c
  8025  003024  D7ED               	goto	l5616
  8026  003026                     l5628:
  8027  003026  502D               	movf	___awdiv@sign,w,c
  8028  003028  B4D8               	btfsc	status,2,c
  8029  00302A  D004               	goto	l5632
  8030  00302C  6C2E               	negf	___awdiv@quotient,c
  8031  00302E  1E2F               	comf	___awdiv@quotient+1,f,c
  8032  003030  B0D8               	btfsc	status,0,c
  8033  003032  2A2F               	incf	___awdiv@quotient+1,f,c
  8034  003034                     l5632:
  8035  003034  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  8036  003038  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  8037  00303C  0012               	return	
  8038  00303E                     __end_of___awdiv:
  8039                           	opt stack 0
  8040                           tblptru	equ	0xFF8
  8041                           tblptrh	equ	0xFF7
  8042                           tblptrl	equ	0xFF6
  8043                           tablat	equ	0xFF5
  8044                           prodh	equ	0xFF4
  8045                           prodl	equ	0xFF3
  8046                           postinc0	equ	0xFEE
  8047                           wreg	equ	0xFE8
  8048                           postdec1	equ	0xFE5
  8049                           fsr1l	equ	0xFE1
  8050                           indf2	equ	0xFDF
  8051                           postinc2	equ	0xFDE
  8052                           postdec2	equ	0xFDD
  8053                           fsr2h	equ	0xFDA
  8054                           fsr2l	equ	0xFD9
  8055                           status	equ	0xFD8
  8056                           
  8057 ;; *************** function __tdiv_to_l_ *****************
  8058 ;; Defined at:
  8059 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;  f1              3   33[COMRAM] float 
  8062 ;;  f2              3   36[COMRAM] float 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  quot            4   42[COMRAM] unsigned long 
  8065 ;;  exp1            1   47[COMRAM] unsigned char 
  8066 ;;  cntr            1   46[COMRAM] unsigned char 
  8067 ;; Return value:  Size  Location     Type
  8068 ;;                  4   33[COMRAM] unsigned long 
  8069 ;; Registers used:
  8070 ;;		wreg, status,2, status,0
  8071 ;; Tracked objects:
  8072 ;;		On entry : 0/0
  8073 ;;		On exit  : 0/0
  8074 ;;		Unchanged: 0/0
  8075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8076 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8079 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8080 ;;Total ram usage:       15 bytes
  8081 ;; Hardware stack levels used:    1
  8082 ;; Hardware stack levels required when called:    3
  8083 ;; This function calls:
  8084 ;;		Nothing
  8085 ;; This function is called by:
  8086 ;;		_printf
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           	psect	text22
  8091  00233A                     __ptext22:
  8092                           	opt stack 0
  8093  00233A                     __tdiv_to_l_:
  8094                           	opt stack 25
  8095                           
  8096                           ;incstack = 0
  8097  00233A  C024  F028         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8098  00233E  6A29               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8099  002340  6A2A               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8100  002342  3423               	rlcf	__tdiv_to_l_@f1+1,w,c
  8101  002344  3628               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8102  002346  E301               	bnc	u5731
  8103  002348  8029               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8104  00234A                     u5731:
  8105  00234A  5028               	movf	??__tdiv_to_l_,w,c
  8106  00234C  6E30               	movwf	__tdiv_to_l_@exp1,c
  8107  00234E  5030               	movf	__tdiv_to_l_@exp1,w,c
  8108  002350  A4D8               	btfss	status,2,c
  8109  002352  D009               	goto	l5758
  8110  002354  0E00               	movlw	0
  8111  002356  6E22               	movwf	?__tdiv_to_l_,c
  8112  002358  0E00               	movlw	0
  8113  00235A  6E23               	movwf	?__tdiv_to_l_+1,c
  8114  00235C  0E00               	movlw	0
  8115  00235E  6E24               	movwf	?__tdiv_to_l_+2,c
  8116  002360  0E00               	movlw	0
  8117  002362  6E25               	movwf	?__tdiv_to_l_+3,c
  8118  002364  0012               	return	
  8119  002366                     l5758:
  8120  002366  C027  F028         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8121  00236A  6A29               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8122  00236C  6A2A               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8123  00236E  3426               	rlcf	__tdiv_to_l_@f2+1,w,c
  8124  002370  3628               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8125  002372  E301               	bnc	u5751
  8126  002374  8029               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8127  002376                     u5751:
  8128  002376  5028               	movf	??__tdiv_to_l_,w,c
  8129  002378  6E2F               	movwf	__tdiv_to_l_@cntr,c
  8130  00237A  502F               	movf	__tdiv_to_l_@cntr,w,c
  8131  00237C  A4D8               	btfss	status,2,c
  8132  00237E  D009               	goto	l5764
  8133  002380  0E00               	movlw	0
  8134  002382  6E22               	movwf	?__tdiv_to_l_,c
  8135  002384  0E00               	movlw	0
  8136  002386  6E23               	movwf	?__tdiv_to_l_+1,c
  8137  002388  0E00               	movlw	0
  8138  00238A  6E24               	movwf	?__tdiv_to_l_+2,c
  8139  00238C  0E00               	movlw	0
  8140  00238E  6E25               	movwf	?__tdiv_to_l_+3,c
  8141  002390  0012               	return	
  8142  002392                     l5764:
  8143  002392  8E23               	bsf	__tdiv_to_l_@f1+1,7,c
  8144  002394  0EFF               	movlw	255
  8145  002396  1622               	andwf	__tdiv_to_l_@f1,f,c
  8146  002398  0EFF               	movlw	255
  8147  00239A  1623               	andwf	__tdiv_to_l_@f1+1,f,c
  8148  00239C  0E00               	movlw	0
  8149  00239E  1624               	andwf	__tdiv_to_l_@f1+2,f,c
  8150  0023A0  8E26               	bsf	__tdiv_to_l_@f2+1,7,c
  8151  0023A2  0EFF               	movlw	255
  8152  0023A4  1625               	andwf	__tdiv_to_l_@f2,f,c
  8153  0023A6  0EFF               	movlw	255
  8154  0023A8  1626               	andwf	__tdiv_to_l_@f2+1,f,c
  8155  0023AA  0E00               	movlw	0
  8156  0023AC  1627               	andwf	__tdiv_to_l_@f2+2,f,c
  8157  0023AE  0E00               	movlw	0
  8158  0023B0  6E2B               	movwf	__tdiv_to_l_@quot,c
  8159  0023B2  0E00               	movlw	0
  8160  0023B4  6E2C               	movwf	__tdiv_to_l_@quot+1,c
  8161  0023B6  0E00               	movlw	0
  8162  0023B8  6E2D               	movwf	__tdiv_to_l_@quot+2,c
  8163  0023BA  0E00               	movlw	0
  8164  0023BC  6E2E               	movwf	__tdiv_to_l_@quot+3,c
  8165  0023BE  0E7F               	movlw	127
  8166  0023C0  5E30               	subwf	__tdiv_to_l_@exp1,f,c
  8167  0023C2  502F               	movf	__tdiv_to_l_@cntr,w,c
  8168  0023C4  0F98               	addlw	152
  8169  0023C6  5E30               	subwf	__tdiv_to_l_@exp1,f,c
  8170  0023C8  0E18               	movlw	24
  8171  0023CA  6E2F               	movwf	__tdiv_to_l_@cntr,c
  8172  0023CC                     l1106:
  8173  0023CC  90D8               	bcf	status,0,c
  8174  0023CE  362B               	rlcf	__tdiv_to_l_@quot,f,c
  8175  0023D0  362C               	rlcf	__tdiv_to_l_@quot+1,f,c
  8176  0023D2  362D               	rlcf	__tdiv_to_l_@quot+2,f,c
  8177  0023D4  362E               	rlcf	__tdiv_to_l_@quot+3,f,c
  8178  0023D6  5025               	movf	__tdiv_to_l_@f2,w,c
  8179  0023D8  5C22               	subwf	__tdiv_to_l_@f1,w,c
  8180  0023DA  5026               	movf	__tdiv_to_l_@f2+1,w,c
  8181  0023DC  5823               	subwfb	__tdiv_to_l_@f1+1,w,c
  8182  0023DE  5027               	movf	__tdiv_to_l_@f2+2,w,c
  8183  0023E0  5824               	subwfb	__tdiv_to_l_@f1+2,w,c
  8184  0023E2  A0D8               	btfss	status,0,c
  8185  0023E4  D007               	goto	l1107
  8186  0023E6  5025               	movf	__tdiv_to_l_@f2,w,c
  8187  0023E8  5E22               	subwf	__tdiv_to_l_@f1,f,c
  8188  0023EA  5026               	movf	__tdiv_to_l_@f2+1,w,c
  8189  0023EC  5A23               	subwfb	__tdiv_to_l_@f1+1,f,c
  8190  0023EE  5027               	movf	__tdiv_to_l_@f2+2,w,c
  8191  0023F0  5A24               	subwfb	__tdiv_to_l_@f1+2,f,c
  8192  0023F2  802B               	bsf	__tdiv_to_l_@quot,0,c
  8193  0023F4                     l1107:
  8194  0023F4  90D8               	bcf	status,0,c
  8195  0023F6  3622               	rlcf	__tdiv_to_l_@f1,f,c
  8196  0023F8  3623               	rlcf	__tdiv_to_l_@f1+1,f,c
  8197  0023FA  3624               	rlcf	__tdiv_to_l_@f1+2,f,c
  8198  0023FC  2E2F               	decfsz	__tdiv_to_l_@cntr,f,c
  8199  0023FE  D7E6               	goto	l1106
  8200  002400  AE30               	btfss	__tdiv_to_l_@exp1,7,c
  8201  002402  D016               	goto	l5798
  8202  002404  5030               	movf	__tdiv_to_l_@exp1,w,c
  8203  002406  0A80               	xorlw	128
  8204  002408  0F97               	addlw	151
  8205  00240A  B0D8               	btfsc	status,0,c
  8206  00240C  D009               	goto	l5794
  8207  00240E  0E00               	movlw	0
  8208  002410  6E22               	movwf	?__tdiv_to_l_,c
  8209  002412  0E00               	movlw	0
  8210  002414  6E23               	movwf	?__tdiv_to_l_+1,c
  8211  002416  0E00               	movlw	0
  8212  002418  6E24               	movwf	?__tdiv_to_l_+2,c
  8213  00241A  0E00               	movlw	0
  8214  00241C  6E25               	movwf	?__tdiv_to_l_+3,c
  8215  00241E  0012               	return	
  8216  002420                     l5794:
  8217  002420  90D8               	bcf	status,0,c
  8218  002422  322E               	rrcf	__tdiv_to_l_@quot+3,f,c
  8219  002424  322D               	rrcf	__tdiv_to_l_@quot+2,f,c
  8220  002426  322C               	rrcf	__tdiv_to_l_@quot+1,f,c
  8221  002428  322B               	rrcf	__tdiv_to_l_@quot,f,c
  8222  00242A  3E30               	incfsz	__tdiv_to_l_@exp1,f,c
  8223  00242C  D7F9               	goto	l5794
  8224  00242E  D015               	goto	l1113
  8225  002430                     l5798:
  8226  002430  0E17               	movlw	23
  8227  002432  6430               	cpfsgt	__tdiv_to_l_@exp1,c
  8228  002434  D00F               	goto	l5806
  8229  002436  0E00               	movlw	0
  8230  002438  6E22               	movwf	?__tdiv_to_l_,c
  8231  00243A  0E00               	movlw	0
  8232  00243C  6E23               	movwf	?__tdiv_to_l_+1,c
  8233  00243E  0E00               	movlw	0
  8234  002440  6E24               	movwf	?__tdiv_to_l_+2,c
  8235  002442  0E00               	movlw	0
  8236  002444  6E25               	movwf	?__tdiv_to_l_+3,c
  8237  002446  0012               	return	
  8238  002448                     l5804:
  8239  002448  90D8               	bcf	status,0,c
  8240  00244A  362B               	rlcf	__tdiv_to_l_@quot,f,c
  8241  00244C  362C               	rlcf	__tdiv_to_l_@quot+1,f,c
  8242  00244E  362D               	rlcf	__tdiv_to_l_@quot+2,f,c
  8243  002450  362E               	rlcf	__tdiv_to_l_@quot+3,f,c
  8244  002452  0630               	decf	__tdiv_to_l_@exp1,f,c
  8245  002454                     l5806:
  8246  002454  5030               	movf	__tdiv_to_l_@exp1,w,c
  8247  002456  A4D8               	btfss	status,2,c
  8248  002458  D7F7               	goto	l5804
  8249  00245A                     l1113:
  8250  00245A  C02B  F022         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8251  00245E  C02C  F023         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8252  002462  C02D  F024         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8253  002466  C02E  F025         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8254  00246A  0012               	return		;funcret
  8255  00246C                     __end_of__tdiv_to_l_:
  8256                           	opt stack 0
  8257                           tblptru	equ	0xFF8
  8258                           tblptrh	equ	0xFF7
  8259                           tblptrl	equ	0xFF6
  8260                           tablat	equ	0xFF5
  8261                           prodh	equ	0xFF4
  8262                           prodl	equ	0xFF3
  8263                           postinc0	equ	0xFEE
  8264                           wreg	equ	0xFE8
  8265                           postdec1	equ	0xFE5
  8266                           fsr1l	equ	0xFE1
  8267                           indf2	equ	0xFDF
  8268                           postinc2	equ	0xFDE
  8269                           postdec2	equ	0xFDD
  8270                           fsr2h	equ	0xFDA
  8271                           fsr2l	equ	0xFD9
  8272                           status	equ	0xFD8
  8273                           
  8274 ;; *************** function __div_to_l_ *****************
  8275 ;; Defined at:
  8276 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;  f1              3   33[COMRAM] unsigned long 
  8279 ;;  f2              3   36[COMRAM] unsigned long 
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;  quot            4   39[COMRAM] unsigned long 
  8282 ;;  exp1            1   44[COMRAM] unsigned char 
  8283 ;;  cntr            1   43[COMRAM] unsigned char 
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  4   33[COMRAM] unsigned long 
  8286 ;; Registers used:
  8287 ;;		wreg, status,2, status,0
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8293 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8297 ;;Total ram usage:       12 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    3
  8300 ;; This function calls:
  8301 ;;		Nothing
  8302 ;; This function is called by:
  8303 ;;		_printf
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           	psect	text23
  8308  00246C                     __ptext23:
  8309                           	opt stack 0
  8310  00246C                     __div_to_l_:
  8311                           	opt stack 25
  8312                           
  8313                           ;incstack = 0
  8314  00246C  3424               	rlcf	__div_to_l_@f1+2,w,c
  8315  00246E  3425               	rlcf	__div_to_l_@f1+3,w,c
  8316  002470  6E2D               	movwf	__div_to_l_@exp1,c
  8317  002472  502D               	movf	__div_to_l_@exp1,w,c
  8318  002474  A4D8               	btfss	status,2,c
  8319  002476  D009               	goto	l5814
  8320  002478  0E00               	movlw	0
  8321  00247A  6E22               	movwf	?__div_to_l_,c
  8322  00247C  0E00               	movlw	0
  8323  00247E  6E23               	movwf	?__div_to_l_+1,c
  8324  002480  0E00               	movlw	0
  8325  002482  6E24               	movwf	?__div_to_l_+2,c
  8326  002484  0E00               	movlw	0
  8327  002486  6E25               	movwf	?__div_to_l_+3,c
  8328  002488  0012               	return	
  8329  00248A                     l5814:
  8330  00248A  3427               	rlcf	__div_to_l_@f2+2,w,c
  8331  00248C  3428               	rlcf	__div_to_l_@f2+3,w,c
  8332  00248E  6E2C               	movwf	__div_to_l_@cntr,c
  8333  002490  502C               	movf	__div_to_l_@cntr,w,c
  8334  002492  A4D8               	btfss	status,2,c
  8335  002494  D009               	goto	l5820
  8336  002496  0E00               	movlw	0
  8337  002498  6E22               	movwf	?__div_to_l_,c
  8338  00249A  0E00               	movlw	0
  8339  00249C  6E23               	movwf	?__div_to_l_+1,c
  8340  00249E  0E00               	movlw	0
  8341  0024A0  6E24               	movwf	?__div_to_l_+2,c
  8342  0024A2  0E00               	movlw	0
  8343  0024A4  6E25               	movwf	?__div_to_l_+3,c
  8344  0024A6  0012               	return	
  8345  0024A8                     l5820:
  8346  0024A8  8E24               	bsf	__div_to_l_@f1+2,7,c
  8347  0024AA  0EFF               	movlw	255
  8348  0024AC  1622               	andwf	__div_to_l_@f1,f,c
  8349  0024AE  0EFF               	movlw	255
  8350  0024B0  1623               	andwf	__div_to_l_@f1+1,f,c
  8351  0024B2  0EFF               	movlw	255
  8352  0024B4  1624               	andwf	__div_to_l_@f1+2,f,c
  8353  0024B6  0E00               	movlw	0
  8354  0024B8  1625               	andwf	__div_to_l_@f1+3,f,c
  8355  0024BA  8E27               	bsf	__div_to_l_@f2+2,7,c
  8356  0024BC  0EFF               	movlw	255
  8357  0024BE  1625               	andwf	__div_to_l_@f2,f,c
  8358  0024C0  0EFF               	movlw	255
  8359  0024C2  1626               	andwf	__div_to_l_@f2+1,f,c
  8360  0024C4  0EFF               	movlw	255
  8361  0024C6  1627               	andwf	__div_to_l_@f2+2,f,c
  8362  0024C8  0E00               	movlw	0
  8363  0024CA  1628               	andwf	__div_to_l_@f2+3,f,c
  8364  0024CC  0E00               	movlw	0
  8365  0024CE  6E28               	movwf	__div_to_l_@quot,c
  8366  0024D0  0E00               	movlw	0
  8367  0024D2  6E29               	movwf	__div_to_l_@quot+1,c
  8368  0024D4  0E00               	movlw	0
  8369  0024D6  6E2A               	movwf	__div_to_l_@quot+2,c
  8370  0024D8  0E00               	movlw	0
  8371  0024DA  6E2B               	movwf	__div_to_l_@quot+3,c
  8372  0024DC  0E7F               	movlw	127
  8373  0024DE  5E2D               	subwf	__div_to_l_@exp1,f,c
  8374  0024E0  502C               	movf	__div_to_l_@cntr,w,c
  8375  0024E2  0FA0               	addlw	160
  8376  0024E4  5E2D               	subwf	__div_to_l_@exp1,f,c
  8377  0024E6  0E20               	movlw	32
  8378  0024E8  6E2C               	movwf	__div_to_l_@cntr,c
  8379  0024EA                     l5834:
  8380  0024EA  90D8               	bcf	status,0,c
  8381  0024EC  3628               	rlcf	__div_to_l_@quot,f,c
  8382  0024EE  3629               	rlcf	__div_to_l_@quot+1,f,c
  8383  0024F0  362A               	rlcf	__div_to_l_@quot+2,f,c
  8384  0024F2  362B               	rlcf	__div_to_l_@quot+3,f,c
  8385  0024F4  5025               	movf	__div_to_l_@f2,w,c
  8386  0024F6  5C22               	subwf	__div_to_l_@f1,w,c
  8387  0024F8  5026               	movf	__div_to_l_@f2+1,w,c
  8388  0024FA  5823               	subwfb	__div_to_l_@f1+1,w,c
  8389  0024FC  5027               	movf	__div_to_l_@f2+2,w,c
  8390  0024FE  5824               	subwfb	__div_to_l_@f1+2,w,c
  8391  002500  5028               	movf	__div_to_l_@f2+3,w,c
  8392  002502  5825               	subwfb	__div_to_l_@f1+3,w,c
  8393  002504  A0D8               	btfss	status,0,c
  8394  002506  D009               	goto	l5842
  8395  002508  5025               	movf	__div_to_l_@f2,w,c
  8396  00250A  5E22               	subwf	__div_to_l_@f1,f,c
  8397  00250C  5026               	movf	__div_to_l_@f2+1,w,c
  8398  00250E  5A23               	subwfb	__div_to_l_@f1+1,f,c
  8399  002510  5027               	movf	__div_to_l_@f2+2,w,c
  8400  002512  5A24               	subwfb	__div_to_l_@f1+2,f,c
  8401  002514  5028               	movf	__div_to_l_@f2+3,w,c
  8402  002516  5A25               	subwfb	__div_to_l_@f1+3,f,c
  8403  002518  8028               	bsf	__div_to_l_@quot,0,c
  8404  00251A                     l5842:
  8405  00251A  90D8               	bcf	status,0,c
  8406  00251C  3622               	rlcf	__div_to_l_@f1,f,c
  8407  00251E  3623               	rlcf	__div_to_l_@f1+1,f,c
  8408  002520  3624               	rlcf	__div_to_l_@f1+2,f,c
  8409  002522  3625               	rlcf	__div_to_l_@f1+3,f,c
  8410  002524  2E2C               	decfsz	__div_to_l_@cntr,f,c
  8411  002526  D7E1               	goto	l5834
  8412  002528  AE2D               	btfss	__div_to_l_@exp1,7,c
  8413  00252A  D016               	goto	l5858
  8414  00252C  502D               	movf	__div_to_l_@exp1,w,c
  8415  00252E  0A80               	xorlw	128
  8416  002530  0F9F               	addlw	159
  8417  002532  B0D8               	btfsc	status,0,c
  8418  002534  D009               	goto	l5854
  8419  002536  0E00               	movlw	0
  8420  002538  6E22               	movwf	?__div_to_l_,c
  8421  00253A  0E00               	movlw	0
  8422  00253C  6E23               	movwf	?__div_to_l_+1,c
  8423  00253E  0E00               	movlw	0
  8424  002540  6E24               	movwf	?__div_to_l_+2,c
  8425  002542  0E00               	movlw	0
  8426  002544  6E25               	movwf	?__div_to_l_+3,c
  8427  002546  0012               	return	
  8428  002548                     l5854:
  8429  002548  90D8               	bcf	status,0,c
  8430  00254A  322B               	rrcf	__div_to_l_@quot+3,f,c
  8431  00254C  322A               	rrcf	__div_to_l_@quot+2,f,c
  8432  00254E  3229               	rrcf	__div_to_l_@quot+1,f,c
  8433  002550  3228               	rrcf	__div_to_l_@quot,f,c
  8434  002552  3E2D               	incfsz	__div_to_l_@exp1,f,c
  8435  002554  D7F9               	goto	l5854
  8436  002556  D015               	goto	l1009
  8437  002558                     l5858:
  8438  002558  0E1F               	movlw	31
  8439  00255A  642D               	cpfsgt	__div_to_l_@exp1,c
  8440  00255C  D00F               	goto	l5866
  8441  00255E  0E00               	movlw	0
  8442  002560  6E22               	movwf	?__div_to_l_,c
  8443  002562  0E00               	movlw	0
  8444  002564  6E23               	movwf	?__div_to_l_+1,c
  8445  002566  0E00               	movlw	0
  8446  002568  6E24               	movwf	?__div_to_l_+2,c
  8447  00256A  0E00               	movlw	0
  8448  00256C  6E25               	movwf	?__div_to_l_+3,c
  8449  00256E  0012               	return	
  8450  002570                     l5864:
  8451  002570  90D8               	bcf	status,0,c
  8452  002572  3628               	rlcf	__div_to_l_@quot,f,c
  8453  002574  3629               	rlcf	__div_to_l_@quot+1,f,c
  8454  002576  362A               	rlcf	__div_to_l_@quot+2,f,c
  8455  002578  362B               	rlcf	__div_to_l_@quot+3,f,c
  8456  00257A  062D               	decf	__div_to_l_@exp1,f,c
  8457  00257C                     l5866:
  8458  00257C  502D               	movf	__div_to_l_@exp1,w,c
  8459  00257E  A4D8               	btfss	status,2,c
  8460  002580  D7F7               	goto	l5864
  8461  002582                     l1009:
  8462  002582  C028  F022         	movff	__div_to_l_@quot,?__div_to_l_
  8463  002586  C029  F023         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8464  00258A  C02A  F024         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8465  00258E  C02B  F025         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8466  002592  0012               	return		;funcret
  8467  002594                     __end_of__div_to_l_:
  8468                           	opt stack 0
  8469                           tblptru	equ	0xFF8
  8470                           tblptrh	equ	0xFF7
  8471                           tblptrl	equ	0xFF6
  8472                           tablat	equ	0xFF5
  8473                           prodh	equ	0xFF4
  8474                           prodl	equ	0xFF3
  8475                           postinc0	equ	0xFEE
  8476                           wreg	equ	0xFE8
  8477                           postdec1	equ	0xFE5
  8478                           fsr1l	equ	0xFE1
  8479                           indf2	equ	0xFDF
  8480                           postinc2	equ	0xFDE
  8481                           postdec2	equ	0xFDD
  8482                           fsr2h	equ	0xFDA
  8483                           fsr2l	equ	0xFD9
  8484                           status	equ	0xFD8
  8485                           
  8486 ;; *************** function ___lltoft *****************
  8487 ;; Defined at:
  8488 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8489 ;; Parameters:    Size  Location     Type
  8490 ;;  c               4   41[COMRAM] unsigned long 
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;  exp             1   49[COMRAM] unsigned char 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  3   41[COMRAM] float 
  8495 ;; Registers used:
  8496 ;;		wreg, status,2, status,0, cstack
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8505 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8506 ;;Total ram usage:        9 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    4
  8509 ;; This function calls:
  8510 ;;		___ftpack
  8511 ;; This function is called by:
  8512 ;;		_printf
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           	psect	text24
  8517  00335E                     __ptext24:
  8518                           	opt stack 0
  8519  00335E                     ___lltoft:
  8520                           	opt stack 24
  8521                           
  8522                           ;incstack = 0
  8523  00335E  0E8E               	movlw	142
  8524  003360  6E32               	movwf	___lltoft@exp,c
  8525  003362  D006               	goto	l6060
  8526  003364                     l6058:
  8527  003364  90D8               	bcf	status,0,c
  8528  003366  322D               	rrcf	___lltoft@c+3,f,c
  8529  003368  322C               	rrcf	___lltoft@c+2,f,c
  8530  00336A  322B               	rrcf	___lltoft@c+1,f,c
  8531  00336C  322A               	rrcf	___lltoft@c,f,c
  8532  00336E  2A32               	incf	___lltoft@exp,f,c
  8533  003370                     l6060:
  8534  003370  0E00               	movlw	0
  8535  003372  142A               	andwf	___lltoft@c,w,c
  8536  003374  6E2E               	movwf	??___lltoft& (0+255),c
  8537  003376  0E00               	movlw	0
  8538  003378  142B               	andwf	___lltoft@c+1,w,c
  8539  00337A  6E2F               	movwf	(??___lltoft+1)& (0+255),c
  8540  00337C  0E00               	movlw	0
  8541  00337E  142C               	andwf	___lltoft@c+2,w,c
  8542  003380  6E30               	movwf	(??___lltoft+2)& (0+255),c
  8543  003382  0EFF               	movlw	255
  8544  003384  142D               	andwf	___lltoft@c+3,w,c
  8545  003386  6E31               	movwf	(??___lltoft+3)& (0+255),c
  8546  003388  502E               	movf	??___lltoft,w,c
  8547  00338A  102F               	iorwf	??___lltoft+1,w,c
  8548  00338C  1030               	iorwf	??___lltoft+2,w,c
  8549  00338E  1031               	iorwf	??___lltoft+3,w,c
  8550  003390  A4D8               	btfss	status,2,c
  8551  003392  D7E8               	goto	l6058
  8552  003394  C02A  F022         	movff	___lltoft@c,___ftpack@arg
  8553  003398  C02B  F023         	movff	___lltoft@c+1,___ftpack@arg+1
  8554  00339C  C02C  F024         	movff	___lltoft@c+2,___ftpack@arg+2
  8555  0033A0  C032  F025         	movff	___lltoft@exp,___ftpack@exp
  8556  0033A4  0E00               	movlw	0
  8557  0033A6  6E26               	movwf	___ftpack@sign,c
  8558  0033A8  EC5E  F016         	call	___ftpack	;wreg free
  8559  0033AC  C022  F02A         	movff	?___ftpack,?___lltoft
  8560  0033B0  C023  F02B         	movff	?___ftpack+1,?___lltoft+1
  8561  0033B4  C024  F02C         	movff	?___ftpack+2,?___lltoft+2
  8562  0033B8  0012               	return	
  8563  0033BA                     __end_of___lltoft:
  8564                           	opt stack 0
  8565                           tblptru	equ	0xFF8
  8566                           tblptrh	equ	0xFF7
  8567                           tblptrl	equ	0xFF6
  8568                           tablat	equ	0xFF5
  8569                           prodh	equ	0xFF4
  8570                           prodl	equ	0xFF3
  8571                           postinc0	equ	0xFEE
  8572                           wreg	equ	0xFE8
  8573                           postdec1	equ	0xFE5
  8574                           fsr1l	equ	0xFE1
  8575                           indf2	equ	0xFDF
  8576                           postinc2	equ	0xFDE
  8577                           postdec2	equ	0xFDD
  8578                           fsr2h	equ	0xFDA
  8579                           fsr2l	equ	0xFD9
  8580                           status	equ	0xFD8
  8581                           
  8582 ;; *************** function ___llmod *****************
  8583 ;; Defined at:
  8584 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  dividend        4   46[COMRAM] unsigned long 
  8587 ;;  divisor         4   50[COMRAM] unsigned long 
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;  counter         1   54[COMRAM] unsigned char 
  8590 ;; Return value:  Size  Location     Type
  8591 ;;                  4   46[COMRAM] unsigned long 
  8592 ;; Registers used:
  8593 ;;		wreg, status,2, status,0
  8594 ;; Tracked objects:
  8595 ;;		On entry : 0/0
  8596 ;;		On exit  : 0/0
  8597 ;;		Unchanged: 0/0
  8598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8599 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8603 ;;Total ram usage:        9 bytes
  8604 ;; Hardware stack levels used:    1
  8605 ;; Hardware stack levels required when called:    3
  8606 ;; This function calls:
  8607 ;;		Nothing
  8608 ;; This function is called by:
  8609 ;;		_printf
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           	psect	text25
  8614  003292                     __ptext25:
  8615                           	opt stack 0
  8616  003292                     ___llmod:
  8617                           	opt stack 25
  8618                           
  8619                           ;incstack = 0
  8620  003292  5033               	movf	___llmod@divisor,w,c
  8621  003294  1034               	iorwf	___llmod@divisor+1,w,c
  8622  003296  1035               	iorwf	___llmod@divisor+2,w,c
  8623  003298  1036               	iorwf	___llmod@divisor+3,w,c
  8624  00329A  B4D8               	btfsc	status,2,c
  8625  00329C  D024               	goto	l1198
  8626  00329E  0E01               	movlw	1
  8627  0032A0  6E37               	movwf	___llmod@counter,c
  8628  0032A2  D006               	goto	l6046
  8629  0032A4                     l6044:
  8630  0032A4  90D8               	bcf	status,0,c
  8631  0032A6  3633               	rlcf	___llmod@divisor,f,c
  8632  0032A8  3634               	rlcf	___llmod@divisor+1,f,c
  8633  0032AA  3635               	rlcf	___llmod@divisor+2,f,c
  8634  0032AC  3636               	rlcf	___llmod@divisor+3,f,c
  8635  0032AE  2A37               	incf	___llmod@counter,f,c
  8636  0032B0                     l6046:
  8637  0032B0  AE36               	btfss	___llmod@divisor+3,7,c
  8638  0032B2  D7F8               	goto	l6044
  8639  0032B4                     l6048:
  8640  0032B4  5033               	movf	___llmod@divisor,w,c
  8641  0032B6  5C2F               	subwf	___llmod@dividend,w,c
  8642  0032B8  5034               	movf	___llmod@divisor+1,w,c
  8643  0032BA  5830               	subwfb	___llmod@dividend+1,w,c
  8644  0032BC  5035               	movf	___llmod@divisor+2,w,c
  8645  0032BE  5831               	subwfb	___llmod@dividend+2,w,c
  8646  0032C0  5036               	movf	___llmod@divisor+3,w,c
  8647  0032C2  5832               	subwfb	___llmod@dividend+3,w,c
  8648  0032C4  A0D8               	btfss	status,0,c
  8649  0032C6  D008               	goto	l6052
  8650  0032C8  5033               	movf	___llmod@divisor,w,c
  8651  0032CA  5E2F               	subwf	___llmod@dividend,f,c
  8652  0032CC  5034               	movf	___llmod@divisor+1,w,c
  8653  0032CE  5A30               	subwfb	___llmod@dividend+1,f,c
  8654  0032D0  5035               	movf	___llmod@divisor+2,w,c
  8655  0032D2  5A31               	subwfb	___llmod@dividend+2,f,c
  8656  0032D4  5036               	movf	___llmod@divisor+3,w,c
  8657  0032D6  5A32               	subwfb	___llmod@dividend+3,f,c
  8658  0032D8                     l6052:
  8659  0032D8  90D8               	bcf	status,0,c
  8660  0032DA  3236               	rrcf	___llmod@divisor+3,f,c
  8661  0032DC  3235               	rrcf	___llmod@divisor+2,f,c
  8662  0032DE  3234               	rrcf	___llmod@divisor+1,f,c
  8663  0032E0  3233               	rrcf	___llmod@divisor,f,c
  8664  0032E2  2E37               	decfsz	___llmod@counter,f,c
  8665  0032E4  D7E7               	goto	l6048
  8666  0032E6                     l1198:
  8667  0032E6  C02F  F02F         	movff	___llmod@dividend,?___llmod
  8668  0032EA  C030  F030         	movff	___llmod@dividend+1,?___llmod+1
  8669  0032EE  C031  F031         	movff	___llmod@dividend+2,?___llmod+2
  8670  0032F2  C032  F032         	movff	___llmod@dividend+3,?___llmod+3
  8671  0032F6  0012               	return		;funcret
  8672  0032F8                     __end_of___llmod:
  8673                           	opt stack 0
  8674                           tblptru	equ	0xFF8
  8675                           tblptrh	equ	0xFF7
  8676                           tblptrl	equ	0xFF6
  8677                           tablat	equ	0xFF5
  8678                           prodh	equ	0xFF4
  8679                           prodl	equ	0xFF3
  8680                           postinc0	equ	0xFEE
  8681                           wreg	equ	0xFE8
  8682                           postdec1	equ	0xFE5
  8683                           fsr1l	equ	0xFE1
  8684                           indf2	equ	0xFDF
  8685                           postinc2	equ	0xFDE
  8686                           postdec2	equ	0xFDD
  8687                           fsr2h	equ	0xFDA
  8688                           fsr2l	equ	0xFD9
  8689                           status	equ	0xFD8
  8690                           
  8691 ;; *************** function ___lldiv *****************
  8692 ;; Defined at:
  8693 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;  dividend        4   33[COMRAM] unsigned long 
  8696 ;;  divisor         4   37[COMRAM] unsigned long 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  quotient        4   41[COMRAM] unsigned long 
  8699 ;;  counter         1   45[COMRAM] unsigned char 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  4   33[COMRAM] unsigned long 
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8709 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8712 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8713 ;;Total ram usage:       13 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    3
  8716 ;; This function calls:
  8717 ;;		Nothing
  8718 ;; This function is called by:
  8719 ;;		_printf
  8720 ;;		_I2C_Master_Init
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           	psect	text26
  8725  00303E                     __ptext26:
  8726                           	opt stack 0
  8727  00303E                     ___lldiv:
  8728                           	opt stack 25
  8729                           
  8730                           ;incstack = 0
  8731  00303E  0E00               	movlw	0
  8732  003040  6E2A               	movwf	___lldiv@quotient,c
  8733  003042  0E00               	movlw	0
  8734  003044  6E2B               	movwf	___lldiv@quotient+1,c
  8735  003046  0E00               	movlw	0
  8736  003048  6E2C               	movwf	___lldiv@quotient+2,c
  8737  00304A  0E00               	movlw	0
  8738  00304C  6E2D               	movwf	___lldiv@quotient+3,c
  8739  00304E  5026               	movf	___lldiv@divisor,w,c
  8740  003050  1027               	iorwf	___lldiv@divisor+1,w,c
  8741  003052  1028               	iorwf	___lldiv@divisor+2,w,c
  8742  003054  1029               	iorwf	___lldiv@divisor+3,w,c
  8743  003056  B4D8               	btfsc	status,2,c
  8744  003058  D02A               	goto	l1188
  8745  00305A  0E01               	movlw	1
  8746  00305C  6E2E               	movwf	___lldiv@counter,c
  8747  00305E  D006               	goto	l6026
  8748  003060                     l6024:
  8749  003060  90D8               	bcf	status,0,c
  8750  003062  3626               	rlcf	___lldiv@divisor,f,c
  8751  003064  3627               	rlcf	___lldiv@divisor+1,f,c
  8752  003066  3628               	rlcf	___lldiv@divisor+2,f,c
  8753  003068  3629               	rlcf	___lldiv@divisor+3,f,c
  8754  00306A  2A2E               	incf	___lldiv@counter,f,c
  8755  00306C                     l6026:
  8756  00306C  AE29               	btfss	___lldiv@divisor+3,7,c
  8757  00306E  D7F8               	goto	l6024
  8758  003070                     l6028:
  8759  003070  90D8               	bcf	status,0,c
  8760  003072  362A               	rlcf	___lldiv@quotient,f,c
  8761  003074  362B               	rlcf	___lldiv@quotient+1,f,c
  8762  003076  362C               	rlcf	___lldiv@quotient+2,f,c
  8763  003078  362D               	rlcf	___lldiv@quotient+3,f,c
  8764  00307A  5026               	movf	___lldiv@divisor,w,c
  8765  00307C  5C22               	subwf	___lldiv@dividend,w,c
  8766  00307E  5027               	movf	___lldiv@divisor+1,w,c
  8767  003080  5823               	subwfb	___lldiv@dividend+1,w,c
  8768  003082  5028               	movf	___lldiv@divisor+2,w,c
  8769  003084  5824               	subwfb	___lldiv@dividend+2,w,c
  8770  003086  5029               	movf	___lldiv@divisor+3,w,c
  8771  003088  5825               	subwfb	___lldiv@dividend+3,w,c
  8772  00308A  A0D8               	btfss	status,0,c
  8773  00308C  D009               	goto	l6036
  8774  00308E  5026               	movf	___lldiv@divisor,w,c
  8775  003090  5E22               	subwf	___lldiv@dividend,f,c
  8776  003092  5027               	movf	___lldiv@divisor+1,w,c
  8777  003094  5A23               	subwfb	___lldiv@dividend+1,f,c
  8778  003096  5028               	movf	___lldiv@divisor+2,w,c
  8779  003098  5A24               	subwfb	___lldiv@dividend+2,f,c
  8780  00309A  5029               	movf	___lldiv@divisor+3,w,c
  8781  00309C  5A25               	subwfb	___lldiv@dividend+3,f,c
  8782  00309E  802A               	bsf	___lldiv@quotient,0,c
  8783  0030A0                     l6036:
  8784  0030A0  90D8               	bcf	status,0,c
  8785  0030A2  3229               	rrcf	___lldiv@divisor+3,f,c
  8786  0030A4  3228               	rrcf	___lldiv@divisor+2,f,c
  8787  0030A6  3227               	rrcf	___lldiv@divisor+1,f,c
  8788  0030A8  3226               	rrcf	___lldiv@divisor,f,c
  8789  0030AA  2E2E               	decfsz	___lldiv@counter,f,c
  8790  0030AC  D7E1               	goto	l6028
  8791  0030AE                     l1188:
  8792  0030AE  C02A  F022         	movff	___lldiv@quotient,?___lldiv
  8793  0030B2  C02B  F023         	movff	___lldiv@quotient+1,?___lldiv+1
  8794  0030B6  C02C  F024         	movff	___lldiv@quotient+2,?___lldiv+2
  8795  0030BA  C02D  F025         	movff	___lldiv@quotient+3,?___lldiv+3
  8796  0030BE  0012               	return		;funcret
  8797  0030C0                     __end_of___lldiv:
  8798                           	opt stack 0
  8799                           tblptru	equ	0xFF8
  8800                           tblptrh	equ	0xFF7
  8801                           tblptrl	equ	0xFF6
  8802                           tablat	equ	0xFF5
  8803                           prodh	equ	0xFF4
  8804                           prodl	equ	0xFF3
  8805                           postinc0	equ	0xFEE
  8806                           wreg	equ	0xFE8
  8807                           postdec1	equ	0xFE5
  8808                           fsr1l	equ	0xFE1
  8809                           indf2	equ	0xFDF
  8810                           postinc2	equ	0xFDE
  8811                           postdec2	equ	0xFDD
  8812                           fsr2h	equ	0xFDA
  8813                           fsr2l	equ	0xFD9
  8814                           status	equ	0xFD8
  8815                           
  8816 ;; *************** function ___ftsub *****************
  8817 ;; Defined at:
  8818 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  8819 ;; Parameters:    Size  Location     Type
  8820 ;;  f1              3   40[BANK0 ] float 
  8821 ;;  f2              3   43[BANK0 ] float 
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;		None
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  3   40[BANK0 ] float 
  8826 ;; Registers used:
  8827 ;;		wreg, status,2, status,0, cstack
  8828 ;; Tracked objects:
  8829 ;;		On entry : 0/0
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8833 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8836 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8837 ;;Total ram usage:        6 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; Hardware stack levels required when called:    5
  8840 ;; This function calls:
  8841 ;;		___ftadd
  8842 ;; This function is called by:
  8843 ;;		_sortBattery
  8844 ;;		_printf
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           	psect	text27
  8849  0033BA                     __ptext27:
  8850                           	opt stack 0
  8851  0033BA                     ___ftsub:
  8852                           	opt stack 23
  8853                           
  8854                           ;incstack = 0
  8855  0033BA  0100               	movlb	0	; () banked
  8856  0033BC  51AB               	movf	___ftsub@f2& (0+255),w,b
  8857  0033BE  0100               	movlb	0	; () banked
  8858  0033C0  11AC               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8859  0033C2  0100               	movlb	0	; () banked
  8860  0033C4  11AD               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8861  0033C6  B4D8               	btfsc	status,2,c
  8862  0033C8  D009               	goto	l5934
  8863                           
  8864                           ; BSR set to: 0
  8865  0033CA  0E00               	movlw	0
  8866  0033CC  0100               	movlb	0	; () banked
  8867  0033CE  1BAB               	xorwf	___ftsub@f2& (0+255),f,b
  8868  0033D0  0E00               	movlw	0
  8869  0033D2  0100               	movlb	0	; () banked
  8870  0033D4  1BAC               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8871  0033D6  0E80               	movlw	128
  8872  0033D8  0100               	movlb	0	; () banked
  8873  0033DA  1BAD               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8874  0033DC                     l5934:
  8875                           
  8876                           ; BSR set to: 0
  8877  0033DC  C0A8  F09C         	movff	___ftsub@f1,___ftadd@f1
  8878  0033E0  C0A9  F09D         	movff	___ftsub@f1+1,___ftadd@f1+1
  8879  0033E4  C0AA  F09E         	movff	___ftsub@f1+2,___ftadd@f1+2
  8880  0033E8  C0AB  F09F         	movff	___ftsub@f2,___ftadd@f2
  8881  0033EC  C0AC  F0A0         	movff	___ftsub@f2+1,___ftadd@f2+1
  8882  0033F0  C0AD  F0A1         	movff	___ftsub@f2+2,___ftadd@f2+2
  8883  0033F4  EC42  F00D         	call	___ftadd	;wreg free
  8884  0033F8  C09C  F0A8         	movff	?___ftadd,?___ftsub
  8885  0033FC  C09D  F0A9         	movff	?___ftadd+1,?___ftsub+1
  8886  003400  C09E  F0AA         	movff	?___ftadd+2,?___ftsub+2
  8887  003404  0012               	return	
  8888  003406                     __end_of___ftsub:
  8889                           	opt stack 0
  8890                           tblptru	equ	0xFF8
  8891                           tblptrh	equ	0xFF7
  8892                           tblptrl	equ	0xFF6
  8893                           tablat	equ	0xFF5
  8894                           prodh	equ	0xFF4
  8895                           prodl	equ	0xFF3
  8896                           postinc0	equ	0xFEE
  8897                           wreg	equ	0xFE8
  8898                           postdec1	equ	0xFE5
  8899                           fsr1l	equ	0xFE1
  8900                           indf2	equ	0xFDF
  8901                           postinc2	equ	0xFDE
  8902                           postdec2	equ	0xFDD
  8903                           fsr2h	equ	0xFDA
  8904                           fsr2l	equ	0xFD9
  8905                           status	equ	0xFD8
  8906                           
  8907 ;; *************** function ___ftneg *****************
  8908 ;; Defined at:
  8909 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;  f1              3   33[COMRAM] float 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;		None
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  3   33[COMRAM] float 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2, status,0
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8923 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;Total ram usage:        3 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    3
  8930 ;; This function calls:
  8931 ;;		Nothing
  8932 ;; This function is called by:
  8933 ;;		_printf
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	text28
  8938  003718                     __ptext28:
  8939                           	opt stack 0
  8940  003718                     ___ftneg:
  8941                           	opt stack 25
  8942                           
  8943                           ;incstack = 0
  8944  003718  5022               	movf	___ftneg@f1,w,c
  8945  00371A  1023               	iorwf	___ftneg@f1+1,w,c
  8946  00371C  1024               	iorwf	___ftneg@f1+2,w,c
  8947  00371E  B4D8               	btfsc	status,2,c
  8948  003720  D006               	goto	l1138
  8949  003722  0E00               	movlw	0
  8950  003724  1A22               	xorwf	___ftneg@f1,f,c
  8951  003726  0E00               	movlw	0
  8952  003728  1A23               	xorwf	___ftneg@f1+1,f,c
  8953  00372A  0E80               	movlw	128
  8954  00372C  1A24               	xorwf	___ftneg@f1+2,f,c
  8955  00372E                     l1138:
  8956  00372E  C022  F022         	movff	___ftneg@f1,?___ftneg
  8957  003732  C023  F023         	movff	___ftneg@f1+1,?___ftneg+1
  8958  003736  C024  F024         	movff	___ftneg@f1+2,?___ftneg+2
  8959  00373A  0012               	return		;funcret
  8960  00373C                     __end_of___ftneg:
  8961                           	opt stack 0
  8962                           tblptru	equ	0xFF8
  8963                           tblptrh	equ	0xFF7
  8964                           tblptrl	equ	0xFF6
  8965                           tablat	equ	0xFF5
  8966                           prodh	equ	0xFF4
  8967                           prodl	equ	0xFF3
  8968                           postinc0	equ	0xFEE
  8969                           wreg	equ	0xFE8
  8970                           postdec1	equ	0xFE5
  8971                           fsr1l	equ	0xFE1
  8972                           indf2	equ	0xFDF
  8973                           postinc2	equ	0xFDE
  8974                           postdec2	equ	0xFDD
  8975                           fsr2h	equ	0xFDA
  8976                           fsr2l	equ	0xFD9
  8977                           status	equ	0xFD8
  8978                           
  8979 ;; *************** function ___ftge *****************
  8980 ;; Defined at:
  8981 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;  ff1             3   45[COMRAM] float 
  8984 ;;  ff2             3   48[COMRAM] float 
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;		None
  8987 ;; Return value:  Size  Location     Type
  8988 ;;		None               void
  8989 ;; Registers used:
  8990 ;;		wreg, status,2, status,0
  8991 ;; Tracked objects:
  8992 ;;		On entry : 0/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8996 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;Total ram usage:        9 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:    3
  9003 ;; This function calls:
  9004 ;;		Nothing
  9005 ;; This function is called by:
  9006 ;;		_sortBattery
  9007 ;;		_printf
  9008 ;; This function uses a non-reentrant model
  9009 ;;
  9010                           
  9011                           	psect	text29
  9012  002E16                     __ptext29:
  9013                           	opt stack 0
  9014  002E16                     ___ftge:
  9015                           	opt stack 25
  9016                           
  9017                           ;incstack = 0
  9018  002E16  AE30               	btfss	___ftge@ff1+2,7,c
  9019  002E18  D016               	goto	l5954
  9020  002E1A  C02E  F034         	movff	___ftge@ff1,??___ftge
  9021  002E1E  C02F  F035         	movff	___ftge@ff1+1,??___ftge+1
  9022  002E22  C030  F036         	movff	___ftge@ff1+2,??___ftge+2
  9023  002E26  1E34               	comf	??___ftge,f,c
  9024  002E28  1E35               	comf	??___ftge+1,f,c
  9025  002E2A  1E36               	comf	??___ftge+2,f,c
  9026  002E2C  2A34               	incf	??___ftge,f,c
  9027  002E2E  0E00               	movlw	0
  9028  002E30  2235               	addwfc	??___ftge+1,f,c
  9029  002E32  2236               	addwfc	??___ftge+2,f,c
  9030  002E34  0E00               	movlw	0
  9031  002E36  2434               	addwf	??___ftge,w,c
  9032  002E38  6E2E               	movwf	___ftge@ff1,c
  9033  002E3A  0E00               	movlw	0
  9034  002E3C  2035               	addwfc	??___ftge+1,w,c
  9035  002E3E  6E2F               	movwf	___ftge@ff1+1,c
  9036  002E40  0E80               	movlw	128
  9037  002E42  2036               	addwfc	??___ftge+2,w,c
  9038  002E44  6E30               	movwf	___ftge@ff1+2,c
  9039  002E46                     l5954:
  9040  002E46  AE33               	btfss	___ftge@ff2+2,7,c
  9041  002E48  D016               	goto	l5958
  9042  002E4A  C031  F034         	movff	___ftge@ff2,??___ftge
  9043  002E4E  C032  F035         	movff	___ftge@ff2+1,??___ftge+1
  9044  002E52  C033  F036         	movff	___ftge@ff2+2,??___ftge+2
  9045  002E56  1E34               	comf	??___ftge,f,c
  9046  002E58  1E35               	comf	??___ftge+1,f,c
  9047  002E5A  1E36               	comf	??___ftge+2,f,c
  9048  002E5C  2A34               	incf	??___ftge,f,c
  9049  002E5E  0E00               	movlw	0
  9050  002E60  2235               	addwfc	??___ftge+1,f,c
  9051  002E62  2236               	addwfc	??___ftge+2,f,c
  9052  002E64  0E00               	movlw	0
  9053  002E66  2434               	addwf	??___ftge,w,c
  9054  002E68  6E31               	movwf	___ftge@ff2,c
  9055  002E6A  0E00               	movlw	0
  9056  002E6C  2035               	addwfc	??___ftge+1,w,c
  9057  002E6E  6E32               	movwf	___ftge@ff2+1,c
  9058  002E70  0E80               	movlw	128
  9059  002E72  2036               	addwfc	??___ftge+2,w,c
  9060  002E74  6E33               	movwf	___ftge@ff2+2,c
  9061  002E76                     l5958:
  9062  002E76  0E00               	movlw	0
  9063  002E78  1A2E               	xorwf	___ftge@ff1,f,c
  9064  002E7A  0E00               	movlw	0
  9065  002E7C  1A2F               	xorwf	___ftge@ff1+1,f,c
  9066  002E7E  0E80               	movlw	128
  9067  002E80  1A30               	xorwf	___ftge@ff1+2,f,c
  9068  002E82  0E00               	movlw	0
  9069  002E84  1A31               	xorwf	___ftge@ff2,f,c
  9070  002E86  0E00               	movlw	0
  9071  002E88  1A32               	xorwf	___ftge@ff2+1,f,c
  9072  002E8A  0E80               	movlw	128
  9073  002E8C  1A33               	xorwf	___ftge@ff2+2,f,c
  9074  002E8E  5031               	movf	___ftge@ff2,w,c
  9075  002E90  5C2E               	subwf	___ftge@ff1,w,c
  9076  002E92  5032               	movf	___ftge@ff2+1,w,c
  9077  002E94  582F               	subwfb	___ftge@ff1+1,w,c
  9078  002E96  5033               	movf	___ftge@ff2+2,w,c
  9079  002E98  5830               	subwfb	___ftge@ff1+2,w,c
  9080  002E9A  B0D8               	btfsc	status,0,c
  9081  002E9C  D002               	goto	l5964
  9082  002E9E  90D8               	bcf	status,0,c
  9083  002EA0  0012               	return	
  9084  002EA2                     l5964:
  9085  002EA2  80D8               	bsf	status,0,c
  9086  002EA4  0012               	return	
  9087  002EA6                     __end_of___ftge:
  9088                           	opt stack 0
  9089                           tblptru	equ	0xFF8
  9090                           tblptrh	equ	0xFF7
  9091                           tblptrl	equ	0xFF6
  9092                           tablat	equ	0xFF5
  9093                           prodh	equ	0xFF4
  9094                           prodl	equ	0xFF3
  9095                           postinc0	equ	0xFEE
  9096                           wreg	equ	0xFE8
  9097                           postdec1	equ	0xFE5
  9098                           fsr1l	equ	0xFE1
  9099                           indf2	equ	0xFDF
  9100                           postinc2	equ	0xFDE
  9101                           postdec2	equ	0xFDD
  9102                           fsr2h	equ	0xFDA
  9103                           fsr2l	equ	0xFD9
  9104                           status	equ	0xFD8
  9105                           
  9106 ;; *************** function _lcdClear *****************
  9107 ;; Defined at:
  9108 ;;		line 74 in file "lcd.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;		None
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;		None
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      void 
  9115 ;; Registers used:
  9116 ;;		wreg, status,2, status,0, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;Total ram usage:        0 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    5
  9129 ;; This function calls:
  9130 ;;		_lcdInst
  9131 ;; This function is called by:
  9132 ;;		_main
  9133 ;;		_dateTime
  9134 ;;		_mainMenu
  9135 ;;		_runSelect
  9136 ;;		_runMenu
  9137 ;;		_runTime
  9138 ;;		_runStats
  9139 ;;		_pause
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           	psect	text30
  9144  0037E4                     __ptext30:
  9145                           	opt stack 0
  9146  0037E4                     _lcdClear:
  9147                           	opt stack 23
  9148                           
  9149                           ;lcd.c: 75: lcdInst(0b00000001);
  9150                           
  9151                           ;incstack = 0
  9152  0037E4  0E01               	movlw	1
  9153  0037E6  ECC0  F01B         	call	_lcdInst
  9154  0037EA  0012               	return		;funcret
  9155  0037EC                     __end_of_lcdClear:
  9156                           	opt stack 0
  9157                           tblptru	equ	0xFF8
  9158                           tblptrh	equ	0xFF7
  9159                           tblptrl	equ	0xFF6
  9160                           tablat	equ	0xFF5
  9161                           prodh	equ	0xFF4
  9162                           prodl	equ	0xFF3
  9163                           postinc0	equ	0xFEE
  9164                           wreg	equ	0xFE8
  9165                           postdec1	equ	0xFE5
  9166                           fsr1l	equ	0xFE1
  9167                           indf2	equ	0xFDF
  9168                           postinc2	equ	0xFDE
  9169                           postdec2	equ	0xFDD
  9170                           fsr2h	equ	0xFDA
  9171                           fsr2l	equ	0xFD9
  9172                           status	equ	0xFD8
  9173                           
  9174 ;; *************** function _pinSetup *****************
  9175 ;; Defined at:
  9176 ;;		line 263 in file "main.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;		None
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;		None
  9181 ;; Return value:  Size  Location     Type
  9182 ;;                  1    wreg      void 
  9183 ;; Registers used:
  9184 ;;		wreg, status,2, status,0
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;Total ram usage:        0 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:    3
  9197 ;; This function calls:
  9198 ;;		Nothing
  9199 ;; This function is called by:
  9200 ;;		_main
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           	psect	text31
  9205  00352E                     __ptext31:
  9206                           	opt stack 0
  9207  00352E                     _pinSetup:
  9208                           	opt stack 27
  9209                           
  9210                           ;main.c: 269: TRISA = 0xFF;
  9211                           
  9212                           ;incstack = 0
  9213  00352E  6892               	setf	3986,c	;volatile
  9214                           
  9215                           ;main.c: 270: TRISB = 0xFF;
  9216  003530  6893               	setf	3987,c	;volatile
  9217                           
  9218                           ;main.c: 271: TRISC = 0b11000000;
  9219  003532  0EC0               	movlw	192
  9220  003534  6E94               	movwf	3988,c	;volatile
  9221                           
  9222                           ;main.c: 272: TRISD = 0x00;
  9223  003536  0E00               	movlw	0
  9224  003538  6E95               	movwf	3989,c	;volatile
  9225                           
  9226                           ;main.c: 273: TRISE = 0x00;
  9227  00353A  0E00               	movlw	0
  9228  00353C  6E96               	movwf	3990,c	;volatile
  9229                           
  9230                           ;main.c: 275: LATA = 0x00;
  9231  00353E  0E00               	movlw	0
  9232  003540  6E89               	movwf	3977,c	;volatile
  9233                           
  9234                           ;main.c: 276: LATB = 0x00;
  9235  003542  0E00               	movlw	0
  9236  003544  6E8A               	movwf	3978,c	;volatile
  9237                           
  9238                           ;main.c: 277: LATC = 0x00;
  9239  003546  0E00               	movlw	0
  9240  003548  6E8B               	movwf	3979,c	;volatile
  9241                           
  9242                           ;main.c: 278: LATD = 0x00;
  9243  00354A  0E00               	movlw	0
  9244  00354C  6E8C               	movwf	3980,c	;volatile
  9245                           
  9246                           ;main.c: 279: LATE = 0x00;
  9247  00354E  0E00               	movlw	0
  9248  003550  6E8D               	movwf	3981,c	;volatile
  9249                           
  9250                           ;main.c: 281: ADCON0 = 0x00;
  9251  003552  0E00               	movlw	0
  9252  003554  6EC2               	movwf	4034,c	;volatile
  9253                           
  9254                           ;main.c: 283: ADCON1 |= 0x0B;
  9255  003556  0E0B               	movlw	11
  9256  003558  12C1               	iorwf	4033,f,c	;volatile
  9257                           
  9258                           ;main.c: 288: ADCON2 = 0;
  9259  00355A  0E00               	movlw	0
  9260  00355C  6EC0               	movwf	4032,c	;volatile
  9261                           
  9262                           ;main.c: 289: ADCON2 |= 0b010;
  9263  00355E  82C0               	bsf	4032,1,c	;volatile
  9264                           
  9265                           ;main.c: 290: ADCON2 |= 0b110<<3;
  9266  003560  0E30               	movlw	48
  9267  003562  12C0               	iorwf	4032,f,c	;volatile
  9268                           
  9269                           ;main.c: 291: ADCON2 |= 1<<7;
  9270  003564  8EC0               	bsf	4032,7,c	;volatile
  9271                           
  9272                           ;main.c: 295: INT0IE = 1;
  9273  003566  88F2               	bsf	intcon,4,c	;volatile
  9274                           
  9275                           ;main.c: 296: (INTCONbits.GIE = 1);
  9276  003568  8EF2               	bsf	intcon,7,c	;volatile
  9277  00356A  0012               	return		;funcret
  9278  00356C                     __end_of_pinSetup:
  9279                           	opt stack 0
  9280                           tblptru	equ	0xFF8
  9281                           tblptrh	equ	0xFF7
  9282                           tblptrl	equ	0xFF6
  9283                           tablat	equ	0xFF5
  9284                           prodh	equ	0xFF4
  9285                           prodl	equ	0xFF3
  9286                           intcon	equ	0xFF2
  9287                           postinc0	equ	0xFEE
  9288                           wreg	equ	0xFE8
  9289                           postdec1	equ	0xFE5
  9290                           fsr1l	equ	0xFE1
  9291                           indf2	equ	0xFDF
  9292                           postinc2	equ	0xFDE
  9293                           postdec2	equ	0xFDD
  9294                           fsr2h	equ	0xFDA
  9295                           fsr2l	equ	0xFD9
  9296                           status	equ	0xFD8
  9297                           
  9298 ;; *************** function _lcdHome *****************
  9299 ;; Defined at:
  9300 ;;		line 70 in file "lcd.c"
  9301 ;; Parameters:    Size  Location     Type
  9302 ;;		None
  9303 ;; Auto vars:     Size  Location     Type
  9304 ;;		None
  9305 ;; Return value:  Size  Location     Type
  9306 ;;                  2   16[None  ] int 
  9307 ;; Registers used:
  9308 ;;		wreg, status,2, status,0, cstack
  9309 ;; Tracked objects:
  9310 ;;		On entry : 0/0
  9311 ;;		On exit  : 0/0
  9312 ;;		Unchanged: 0/0
  9313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9318 ;;Total ram usage:        0 bytes
  9319 ;; Hardware stack levels used:    1
  9320 ;; Hardware stack levels required when called:    5
  9321 ;; This function calls:
  9322 ;;		_lcdInst
  9323 ;; This function is called by:
  9324 ;;		_main
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328                           	psect	text32
  9329  0037EC                     __ptext32:
  9330                           	opt stack 0
  9331  0037EC                     _lcdHome:
  9332                           	opt stack 25
  9333                           
  9334                           ;lcd.c: 71: lcdInst(0b11000000);
  9335                           
  9336                           ;incstack = 0
  9337  0037EC  0EC0               	movlw	192
  9338  0037EE  ECC0  F01B         	call	_lcdInst
  9339  0037F2  0012               	return		;funcret
  9340  0037F4                     __end_of_lcdHome:
  9341                           	opt stack 0
  9342                           tblptru	equ	0xFF8
  9343                           tblptrh	equ	0xFF7
  9344                           tblptrl	equ	0xFF6
  9345                           tablat	equ	0xFF5
  9346                           prodh	equ	0xFF4
  9347                           prodl	equ	0xFF3
  9348                           intcon	equ	0xFF2
  9349                           postinc0	equ	0xFEE
  9350                           wreg	equ	0xFE8
  9351                           postdec1	equ	0xFE5
  9352                           fsr1l	equ	0xFE1
  9353                           indf2	equ	0xFDF
  9354                           postinc2	equ	0xFDE
  9355                           postdec2	equ	0xFDD
  9356                           fsr2h	equ	0xFDA
  9357                           fsr2l	equ	0xFD9
  9358                           status	equ	0xFD8
  9359                           
  9360 ;; *************** function _initServo *****************
  9361 ;; Defined at:
  9362 ;;		line 21 in file "servo.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;  motor           2   88[BANK0 ] PTR int 
  9365 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9366 ;;  angle           2   90[BANK0 ] int 
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;		None
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  1    wreg      void 
  9371 ;; Registers used:
  9372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9378 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;Total ram usage:        8 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    7
  9385 ;; This function calls:
  9386 ;;		_initTimer
  9387 ;;		_setAngle
  9388 ;;		_startTimer
  9389 ;; This function is called by:
  9390 ;;		_main
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           	psect	text33
  9395  002F32                     __ptext33:
  9396                           	opt stack 0
  9397  002F32                     _initServo:
  9398                           	opt stack 23
  9399                           
  9400                           ;servo.c: 22: n++;
  9401                           
  9402                           ;incstack = 0
  9403  002F32  0100               	movlb	0	; () banked
  9404  002F34  4BFC               	infsnz	_n& (0+255),f,b
  9405  002F36  2BFD               	incf	(_n+1)& (0+255),f,b
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;servo.c: 23: servos[n-1] = motor;
  9409  002F38  0EFE               	movlw	254
  9410  002F3A  0100               	movlb	0	; () banked
  9411  002F3C  6FDC               	movwf	??_initServo& (0+255),b
  9412  002F3E  0EFF               	movlw	255
  9413  002F40  0100               	movlb	0	; () banked
  9414  002F42  6FDD               	movwf	(??_initServo+1)& (0+255),b
  9415  002F44  C0FC  F0DE         	movff	_n,??_initServo+2
  9416  002F48  C0FD  F0DF         	movff	_n+1,??_initServo+3
  9417  002F4C  90D8               	bcf	status,0,c
  9418  002F4E  0100               	movlb	0	; () banked
  9419  002F50  37DE               	rlcf	(??_initServo+2)& (0+255),f,b
  9420  002F52  37DF               	rlcf	(??_initServo+3)& (0+255),f,b
  9421  002F54  0100               	movlb	0	; () banked
  9422  002F56  51DC               	movf	??_initServo& (0+255),w,b
  9423  002F58  0100               	movlb	0	; () banked
  9424  002F5A  27DE               	addwf	(??_initServo+2)& (0+255),f,b
  9425  002F5C  0100               	movlb	0	; () banked
  9426  002F5E  51DD               	movf	(??_initServo+1)& (0+255),w,b
  9427  002F60  0100               	movlb	0	; () banked
  9428  002F62  23DF               	addwfc	(??_initServo+3)& (0+255),f,b
  9429  002F64  0E54               	movlw	low _servos
  9430  002F66  0100               	movlb	0	; () banked
  9431  002F68  25DE               	addwf	(??_initServo+2)& (0+255),w,b
  9432  002F6A  6ED9               	movwf	fsr2l,c
  9433  002F6C  0E01               	movlw	high _servos
  9434  002F6E  0100               	movlb	0	; () banked
  9435  002F70  21DF               	addwfc	(??_initServo+3)& (0+255),w,b
  9436  002F72  6EDA               	movwf	fsr2h,c
  9437  002F74  C0D8  FFDE         	movff	initServo@motor,postinc2
  9438  002F78  C0D9  FFDD         	movff	initServo@motor+1,postdec2
  9439                           
  9440                           ; BSR set to: 0
  9441                           ;servo.c: 24: setAngle(motor, angle);
  9442  002F7C  C0D8  F0CE         	movff	initServo@motor,setAngle@motor
  9443  002F80  C0D9  F0CF         	movff	initServo@motor+1,setAngle@motor+1
  9444  002F84  C0DA  F0D0         	movff	initServo@angle,setAngle@angle
  9445  002F88  C0DB  F0D1         	movff	initServo@angle+1,setAngle@angle+1
  9446  002F8C  ECC6  F014         	call	_setAngle	;wreg free
  9447                           
  9448                           ;servo.c: 26: initTimer(0);
  9449  002F90  0E00               	movlw	0
  9450  002F92  6E23               	movwf	initTimer@timer+1,c
  9451  002F94  0E00               	movlw	0
  9452  002F96  6E22               	movwf	initTimer@timer,c
  9453  002F98  EC4F  F01A         	call	_initTimer	;wreg free
  9454                           
  9455                           ;servo.c: 27: startTimer(0,0);
  9456  002F9C  0E00               	movlw	0
  9457  002F9E  6E23               	movwf	startTimer@timer+1,c
  9458  002FA0  0E00               	movlw	0
  9459  002FA2  6E22               	movwf	startTimer@timer,c
  9460  002FA4  0E00               	movlw	0
  9461  002FA6  6E24               	movwf	startTimer@val,c
  9462  002FA8  0E00               	movlw	0
  9463  002FAA  6E25               	movwf	startTimer@val+1,c
  9464  002FAC  0E00               	movlw	0
  9465  002FAE  6E26               	movwf	startTimer@val+2,c
  9466  002FB0  0E00               	movlw	0
  9467  002FB2  6E27               	movwf	startTimer@val+3,c
  9468  002FB4  EC03  F01A         	call	_startTimer	;wreg free
  9469  002FB8  0012               	return		;funcret
  9470  002FBA                     __end_of_initServo:
  9471                           	opt stack 0
  9472                           tblptru	equ	0xFF8
  9473                           tblptrh	equ	0xFF7
  9474                           tblptrl	equ	0xFF6
  9475                           tablat	equ	0xFF5
  9476                           prodh	equ	0xFF4
  9477                           prodl	equ	0xFF3
  9478                           intcon	equ	0xFF2
  9479                           postinc0	equ	0xFEE
  9480                           wreg	equ	0xFE8
  9481                           postdec1	equ	0xFE5
  9482                           fsr1l	equ	0xFE1
  9483                           indf2	equ	0xFDF
  9484                           postinc2	equ	0xFDE
  9485                           postdec2	equ	0xFDD
  9486                           fsr2h	equ	0xFDA
  9487                           fsr2l	equ	0xFD9
  9488                           status	equ	0xFD8
  9489                           
  9490 ;; *************** function _startTimer *****************
  9491 ;; Defined at:
  9492 ;;		line 76 in file "timer.c"
  9493 ;; Parameters:    Size  Location     Type
  9494 ;;  timer           2   33[COMRAM] int 
  9495 ;;  val             4   35[COMRAM] long 
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;		None
  9498 ;; Return value:  Size  Location     Type
  9499 ;;                  1    wreg      void 
  9500 ;; Registers used:
  9501 ;;		wreg, status,2, status,0
  9502 ;; Tracked objects:
  9503 ;;		On entry : 0/0
  9504 ;;		On exit  : 0/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9507 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9509 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9510 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9511 ;;Total ram usage:        8 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    3
  9514 ;; This function calls:
  9515 ;;		Nothing
  9516 ;; This function is called by:
  9517 ;;		_initServo
  9518 ;;		_testFrequency
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           	psect	text34
  9523  003406                     __ptext34:
  9524                           	opt stack 0
  9525  003406                     _startTimer:
  9526                           	opt stack 26
  9527                           
  9528                           ;timer.c: 77: switch(timer){
  9529                           
  9530                           ;incstack = 0
  9531  003406  D012               	goto	l4710
  9532  003408                     l405:
  9533                           
  9534                           ;timer.c: 79: TMR0H = val>>8;
  9535  003408  C025  FFD7         	movff	startTimer@val+1,4055	;volatile
  9536                           
  9537                           ;timer.c: 80: TMR0L = val;
  9538  00340C  C024  FFD6         	movff	startTimer@val,4054	;volatile
  9539                           
  9540                           ;timer.c: 81: T0CON |= 1<<7;
  9541  003410  8ED5               	bsf	4053,7,c	;volatile
  9542                           
  9543                           ;timer.c: 82: break;
  9544  003412  0012               	return	
  9545  003414                     l407:
  9546                           
  9547                           ;timer.c: 84: TMR1H = val>>8;
  9548  003414  C025  FFCF         	movff	startTimer@val+1,4047	;volatile
  9549                           
  9550                           ;timer.c: 85: TMR1L = val;
  9551  003418  C024  FFCE         	movff	startTimer@val,4046	;volatile
  9552                           
  9553                           ;timer.c: 86: T1CON |= 1<<0;
  9554  00341C  80CD               	bsf	4045,0,c	;volatile
  9555                           
  9556                           ;timer.c: 87: break;
  9557  00341E  0012               	return	
  9558  003420                     l408:
  9559                           
  9560                           ;timer.c: 89: TMR3H = val>>8;
  9561  003420  C025  FFB3         	movff	startTimer@val+1,4019	;volatile
  9562                           
  9563                           ;timer.c: 90: TMR3L = val;
  9564  003424  C024  FFB2         	movff	startTimer@val,4018	;volatile
  9565                           
  9566                           ;timer.c: 91: T3CON |= 1<<0;
  9567  003428  80B1               	bsf	4017,0,c	;volatile
  9568                           
  9569                           ;timer.c: 92: }
  9570  00342A  0012               	return	
  9571  00342C                     l4710:
  9572  00342C  C022  F028         	movff	startTimer@timer,??_startTimer
  9573  003430  C023  F029         	movff	startTimer@timer+1,??_startTimer+1
  9574                           
  9575                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9576                           ; Switch size 1, requested type "space"
  9577                           ; Number of cases is 1, Range of values is 0 to 0
  9578                           ; switch strategies available:
  9579                           ; Name         Instructions Cycles
  9580                           ; simple_byte            4     3 (average)
  9581                           ;	Chosen strategy is simple_byte
  9582  003434  5029               	movf	??_startTimer+1,w,c
  9583  003436  0A00               	xorlw	0	; case 0
  9584  003438  A4D8               	btfss	status,2,c
  9585  00343A  0012               	return	
  9586                           
  9587                           ; Switch size 1, requested type "space"
  9588                           ; Number of cases is 3, Range of values is 0 to 3
  9589                           ; switch strategies available:
  9590                           ; Name         Instructions Cycles
  9591                           ; simple_byte           10     6 (average)
  9592                           ;	Chosen strategy is simple_byte
  9593  00343C  5028               	movf	??_startTimer,w,c
  9594  00343E  0A00               	xorlw	0	; case 0
  9595  003440  B4D8               	btfsc	status,2,c
  9596  003442  D7E2               	goto	l405
  9597  003444  0A01               	xorlw	1	; case 1
  9598  003446  B4D8               	btfsc	status,2,c
  9599  003448  D7E5               	goto	l407
  9600  00344A  0A02               	xorlw	2	; case 3
  9601  00344C  A4D8               	btfss	status,2,c
  9602  00344E  0012               	return	
  9603  003450  D7E7               	goto	l408
  9604  003452                     __end_of_startTimer:
  9605                           	opt stack 0
  9606                           tblptru	equ	0xFF8
  9607                           tblptrh	equ	0xFF7
  9608                           tblptrl	equ	0xFF6
  9609                           tablat	equ	0xFF5
  9610                           prodh	equ	0xFF4
  9611                           prodl	equ	0xFF3
  9612                           intcon	equ	0xFF2
  9613                           postinc0	equ	0xFEE
  9614                           wreg	equ	0xFE8
  9615                           postdec1	equ	0xFE5
  9616                           fsr1l	equ	0xFE1
  9617                           indf2	equ	0xFDF
  9618                           postinc2	equ	0xFDE
  9619                           postdec2	equ	0xFDD
  9620                           fsr2h	equ	0xFDA
  9621                           fsr2l	equ	0xFD9
  9622                           status	equ	0xFD8
  9623                           
  9624 ;; *************** function _setAngle *****************
  9625 ;; Defined at:
  9626 ;;		line 41 in file "servo.c"
  9627 ;; Parameters:    Size  Location     Type
  9628 ;;  motor           2   78[BANK0 ] PTR int 
  9629 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9630 ;;  angle           2   80[BANK0 ] int 
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;  i               2   86[BANK0 ] int 
  9633 ;;  period          2   84[BANK0 ] unsigned int 
  9634 ;; Return value:  Size  Location     Type
  9635 ;;                  1    wreg      void 
  9636 ;; Registers used:
  9637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9643 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9644 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9645 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9646 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9647 ;;Total ram usage:       10 bytes
  9648 ;; Hardware stack levels used:    1
  9649 ;; Hardware stack levels required when called:    6
  9650 ;; This function calls:
  9651 ;;		_angleToPulse
  9652 ;; This function is called by:
  9653 ;;		_sortBattery
  9654 ;;		_initServo
  9655 ;; This function uses a non-reentrant model
  9656 ;;
  9657                           
  9658                           	psect	text35
  9659  00298C                     __ptext35:
  9660                           	opt stack 0
  9661  00298C                     _setAngle:
  9662                           	opt stack 23
  9663                           
  9664                           ;servo.c: 42: unsigned int period = 50000;
  9665                           
  9666                           ;incstack = 0
  9667  00298C  0EC3               	movlw	195
  9668  00298E  0100               	movlb	0	; () banked
  9669  002990  6FD5               	movwf	(setAngle@period+1)& (0+255),b
  9670  002992  0E50               	movlw	80
  9671  002994  6FD4               	movwf	setAngle@period& (0+255),b
  9672                           
  9673                           ;servo.c: 43: for(int i = 0; i < n; i++){
  9674  002996  0E00               	movlw	0
  9675  002998  0100               	movlb	0	; () banked
  9676  00299A  6FD7               	movwf	(setAngle@i+1)& (0+255),b
  9677  00299C  0E00               	movlw	0
  9678  00299E  6FD6               	movwf	setAngle@i& (0+255),b
  9679  0029A0  D03F               	goto	l6528
  9680  0029A2                     l6520:
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;servo.c: 44: if(servos[i] == motor){
  9684  0029A2  90D8               	bcf	status,0,c
  9685  0029A4  0100               	movlb	0	; () banked
  9686  0029A6  35D6               	rlcf	setAngle@i& (0+255),w,b
  9687  0029A8  6ED9               	movwf	fsr2l,c
  9688  0029AA  0100               	movlb	0	; () banked
  9689  0029AC  35D7               	rlcf	(setAngle@i+1)& (0+255),w,b
  9690  0029AE  6EDA               	movwf	fsr2h,c
  9691  0029B0  0E54               	movlw	low _servos
  9692  0029B2  26D9               	addwf	fsr2l,f,c
  9693  0029B4  0E01               	movlw	high _servos
  9694  0029B6  22DA               	addwfc	fsr2h,f,c
  9695  0029B8  0100               	movlb	0	; () banked
  9696  0029BA  51CE               	movf	setAngle@motor& (0+255),w,b
  9697  0029BC  18DE               	xorwf	postinc2,w,c
  9698  0029BE  E11C               	bnz	l6524
  9699  0029C0  0100               	movlb	0	; () banked
  9700  0029C2  51CF               	movf	(setAngle@motor+1)& (0+255),w,b
  9701  0029C4  18DE               	xorwf	postinc2,w,c
  9702  0029C6  A4D8               	btfss	status,2,c
  9703  0029C8  D017               	goto	l6524
  9704                           
  9705                           ; BSR set to: 0
  9706                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
  9707  0029CA  C0D0  F0B7         	movff	setAngle@angle,angleToPulse@angle
  9708  0029CE  C0D1  F0B8         	movff	setAngle@angle+1,angleToPulse@angle+1
  9709  0029D2  ECA6  F00F         	call	_angleToPulse	;wreg free
  9710  0029D6  90D8               	bcf	status,0,c
  9711  0029D8  0100               	movlb	0	; () banked
  9712  0029DA  35D6               	rlcf	setAngle@i& (0+255),w,b
  9713  0029DC  6ED9               	movwf	fsr2l,c
  9714  0029DE  0100               	movlb	0	; () banked
  9715  0029E0  35D7               	rlcf	(setAngle@i+1)& (0+255),w,b
  9716  0029E2  6EDA               	movwf	fsr2h,c
  9717  0029E4  0E4C               	movlw	low _pulse
  9718  0029E6  26D9               	addwf	fsr2l,f,c
  9719  0029E8  0E01               	movlw	high _pulse
  9720  0029EA  22DA               	addwfc	fsr2h,f,c
  9721  0029EC  0100               	movlb	0	; () banked
  9722  0029EE  C0B7  FFDE         	movff	?_angleToPulse,postinc2
  9723  0029F2  0100               	movlb	0	; () banked
  9724  0029F4  C0B8  FFDD         	movff	?_angleToPulse+1,postdec2
  9725  0029F8                     l6524:
  9726                           
  9727                           ; BSR set to: 0
  9728                           ;servo.c: 46: }
  9729                           ;servo.c: 47: period-=pulse[i];
  9730  0029F8  90D8               	bcf	status,0,c
  9731  0029FA  0100               	movlb	0	; () banked
  9732  0029FC  35D6               	rlcf	setAngle@i& (0+255),w,b
  9733  0029FE  6ED9               	movwf	fsr2l,c
  9734  002A00  0100               	movlb	0	; () banked
  9735  002A02  35D7               	rlcf	(setAngle@i+1)& (0+255),w,b
  9736  002A04  6EDA               	movwf	fsr2h,c
  9737  002A06  0E4C               	movlw	low _pulse
  9738  002A08  26D9               	addwf	fsr2l,f,c
  9739  002A0A  0E01               	movlw	high _pulse
  9740  002A0C  22DA               	addwfc	fsr2h,f,c
  9741  002A0E  50DE               	movf	postinc2,w,c
  9742  002A10  0100               	movlb	0	; () banked
  9743  002A12  5FD4               	subwf	setAngle@period& (0+255),f,b
  9744  002A14  50DD               	movf	postdec2,w,c
  9745  002A16  0100               	movlb	0	; () banked
  9746  002A18  5BD5               	subwfb	(setAngle@period+1)& (0+255),f,b
  9747                           
  9748                           ; BSR set to: 0
  9749  002A1A  0100               	movlb	0	; () banked
  9750  002A1C  4BD6               	infsnz	setAngle@i& (0+255),f,b
  9751  002A1E  2BD7               	incf	(setAngle@i+1)& (0+255),f,b
  9752  002A20                     l6528:
  9753                           
  9754                           ; BSR set to: 0
  9755  002A20  0100               	movlb	0	; () banked
  9756  002A22  51FC               	movf	_n& (0+255),w,b
  9757  002A24  0100               	movlb	0	; () banked
  9758  002A26  5DD6               	subwf	setAngle@i& (0+255),w,b
  9759  002A28  0100               	movlb	0	; () banked
  9760  002A2A  51D7               	movf	(setAngle@i+1)& (0+255),w,b
  9761  002A2C  0A80               	xorlw	128
  9762  002A2E  0100               	movlb	0	; () banked
  9763  002A30  6FD2               	movwf	??_setAngle& (0+255),b
  9764  002A32  0100               	movlb	0	; () banked
  9765  002A34  51FD               	movf	(_n+1)& (0+255),w,b
  9766  002A36  0A80               	xorlw	128
  9767  002A38  0100               	movlb	0	; () banked
  9768  002A3A  59D2               	subwfb	??_setAngle& (0+255),w,b
  9769  002A3C  A0D8               	btfss	status,0,c
  9770  002A3E  D7B1               	goto	l6520
  9771                           
  9772                           ; BSR set to: 0
  9773                           ;servo.c: 48: }
  9774                           ;servo.c: 49: pulse[n] = period;
  9775                           
  9776                           ; BSR set to: 0
  9777  002A40  90D8               	bcf	status,0,c
  9778  002A42  0100               	movlb	0	; () banked
  9779  002A44  35FC               	rlcf	_n& (0+255),w,b
  9780  002A46  6ED9               	movwf	fsr2l,c
  9781  002A48  0100               	movlb	0	; () banked
  9782  002A4A  35FD               	rlcf	(_n+1)& (0+255),w,b
  9783  002A4C  6EDA               	movwf	fsr2h,c
  9784  002A4E  0E4C               	movlw	low _pulse
  9785  002A50  26D9               	addwf	fsr2l,f,c
  9786  002A52  0E01               	movlw	high _pulse
  9787  002A54  22DA               	addwfc	fsr2h,f,c
  9788  002A56  C0D4  FFDE         	movff	setAngle@period,postinc2
  9789  002A5A  C0D5  FFDD         	movff	setAngle@period+1,postdec2
  9790                           
  9791                           ; BSR set to: 0
  9792  002A5E  0012               	return		;funcret
  9793  002A60                     __end_of_setAngle:
  9794                           	opt stack 0
  9795                           tblptru	equ	0xFF8
  9796                           tblptrh	equ	0xFF7
  9797                           tblptrl	equ	0xFF6
  9798                           tablat	equ	0xFF5
  9799                           prodh	equ	0xFF4
  9800                           prodl	equ	0xFF3
  9801                           intcon	equ	0xFF2
  9802                           postinc0	equ	0xFEE
  9803                           wreg	equ	0xFE8
  9804                           postdec1	equ	0xFE5
  9805                           fsr1l	equ	0xFE1
  9806                           indf2	equ	0xFDF
  9807                           postinc2	equ	0xFDE
  9808                           postdec2	equ	0xFDD
  9809                           fsr2h	equ	0xFDA
  9810                           fsr2l	equ	0xFD9
  9811                           status	equ	0xFD8
  9812                           
  9813 ;; *************** function _angleToPulse *****************
  9814 ;; Defined at:
  9815 ;;		line 33 in file "servo.c"
  9816 ;; Parameters:    Size  Location     Type
  9817 ;;  angle           2   55[BANK0 ] int 
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;  a000            4   74[BANK0 ] long 
  9820 ;;  a180            4   67[BANK0 ] long 
  9821 ;;  offset          4   63[BANK0 ] long 
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  4   55[BANK0 ] long 
  9824 ;; Registers used:
  9825 ;;		wreg, status,2, status,0, cstack
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9831 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;Total ram usage:       23 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:    5
  9838 ;; This function calls:
  9839 ;;		___altoft
  9840 ;;		___awtoft
  9841 ;;		___ftadd
  9842 ;;		___ftdiv
  9843 ;;		___ftmul
  9844 ;;		___fttol
  9845 ;; This function is called by:
  9846 ;;		_setAngle
  9847 ;; This function uses a non-reentrant model
  9848 ;;
  9849                           
  9850                           	psect	text36
  9851  001F4C                     __ptext36:
  9852                           	opt stack 0
  9853  001F4C                     _angleToPulse:
  9854                           	opt stack 23
  9855                           
  9856                           ;servo.c: 34: long offset = -600;
  9857                           
  9858                           ; BSR set to: 0
  9859                           ;incstack = 0
  9860  001F4C  0EA8               	movlw	168
  9861  001F4E  0100               	movlb	0	; () banked
  9862  001F50  6FBF               	movwf	angleToPulse@offset& (0+255),b
  9863  001F52  0EFD               	movlw	253
  9864  001F54  6FC0               	movwf	(angleToPulse@offset+1)& (0+255),b
  9865  001F56  0EFF               	movlw	255
  9866  001F58  6FC1               	movwf	(angleToPulse@offset+2)& (0+255),b
  9867  001F5A  0EFF               	movlw	255
  9868  001F5C  6FC2               	movwf	(angleToPulse@offset+3)& (0+255),b
  9869                           
  9870                           ;servo.c: 35: long a000 = 1250;
  9871  001F5E  0EE2               	movlw	226
  9872  001F60  0100               	movlb	0	; () banked
  9873  001F62  6FCA               	movwf	angleToPulse@a000& (0+255),b
  9874  001F64  0E04               	movlw	4
  9875  001F66  6FCB               	movwf	(angleToPulse@a000+1)& (0+255),b
  9876  001F68  0E00               	movlw	0
  9877  001F6A  6FCC               	movwf	(angleToPulse@a000+2)& (0+255),b
  9878  001F6C  0E00               	movlw	0
  9879  001F6E  6FCD               	movwf	(angleToPulse@a000+3)& (0+255),b
  9880                           
  9881                           ;servo.c: 36: long a180 = 6250;
  9882  001F70  0E6A               	movlw	106
  9883  001F72  0100               	movlb	0	; () banked
  9884  001F74  6FC3               	movwf	angleToPulse@a180& (0+255),b
  9885  001F76  0E18               	movlw	24
  9886  001F78  6FC4               	movwf	(angleToPulse@a180+1)& (0+255),b
  9887  001F7A  0E00               	movlw	0
  9888  001F7C  6FC5               	movwf	(angleToPulse@a180+2)& (0+255),b
  9889  001F7E  0E00               	movlw	0
  9890  001F80  6FC6               	movwf	(angleToPulse@a180+3)& (0+255),b
  9891                           
  9892                           ; BSR set to: 0
  9893                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  9894  001F82  C0CA  F0BB         	movff	angleToPulse@a000,??_angleToPulse
  9895  001F86  C0CB  F0BC         	movff	angleToPulse@a000+1,??_angleToPulse+1
  9896  001F8A  C0CC  F0BD         	movff	angleToPulse@a000+2,??_angleToPulse+2
  9897  001F8E  C0CD  F0BE         	movff	angleToPulse@a000+3,??_angleToPulse+3
  9898  001F92  0100               	movlb	0	; () banked
  9899  001F94  1FBB               	comf	??_angleToPulse& (0+255),f,b
  9900  001F96  1FBC               	comf	(??_angleToPulse+1)& (0+255),f,b
  9901  001F98  1FBD               	comf	(??_angleToPulse+2)& (0+255),f,b
  9902  001F9A  1FBE               	comf	(??_angleToPulse+3)& (0+255),f,b
  9903  001F9C  2BBB               	incf	??_angleToPulse& (0+255),f,b
  9904  001F9E  0E00               	movlw	0
  9905  001FA0  23BC               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  9906  001FA2  23BD               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  9907  001FA4  23BE               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  9908  001FA6  0100               	movlb	0	; () banked
  9909  001FA8  51C3               	movf	angleToPulse@a180& (0+255),w,b
  9910  001FAA  0100               	movlb	0	; () banked
  9911  001FAC  25BB               	addwf	??_angleToPulse& (0+255),w,b
  9912  001FAE  6E2A               	movwf	___altoft@c,c
  9913  001FB0  0100               	movlb	0	; () banked
  9914  001FB2  51C4               	movf	(angleToPulse@a180+1)& (0+255),w,b
  9915  001FB4  0100               	movlb	0	; () banked
  9916  001FB6  21BC               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  9917  001FB8  6E2B               	movwf	___altoft@c+1,c
  9918  001FBA  0100               	movlb	0	; () banked
  9919  001FBC  51C5               	movf	(angleToPulse@a180+2)& (0+255),w,b
  9920  001FBE  0100               	movlb	0	; () banked
  9921  001FC0  21BD               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  9922  001FC2  6E2C               	movwf	___altoft@c+2,c
  9923  001FC4  0100               	movlb	0	; () banked
  9924  001FC6  51C6               	movf	(angleToPulse@a180+3)& (0+255),w,b
  9925  001FC8  0100               	movlb	0	; () banked
  9926  001FCA  21BE               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  9927  001FCC  6E2D               	movwf	___altoft@c+3,c
  9928  001FCE  EC9D  F018         	call	___altoft	;wreg free
  9929  001FD2  C02A  F089         	movff	?___altoft,___ftmul@f2
  9930  001FD6  C02B  F08A         	movff	?___altoft+1,___ftmul@f2+1
  9931  001FDA  C02C  F08B         	movff	?___altoft+2,___ftmul@f2+2
  9932  001FDE  0E00               	movlw	0
  9933  001FE0  6E37               	movwf	___ftdiv@f2,c
  9934  001FE2  0E34               	movlw	52
  9935  001FE4  6E38               	movwf	___ftdiv@f2+1,c
  9936  001FE6  0E43               	movlw	67
  9937  001FE8  6E39               	movwf	___ftdiv@f2+2,c
  9938  001FEA  C0B7  F02A         	movff	angleToPulse@angle,___awtoft@c
  9939  001FEE  C0B8  F02B         	movff	angleToPulse@angle+1,___awtoft@c+1
  9940  001FF2  ECD2  F01A         	call	___awtoft	;wreg free
  9941  001FF6  C02A  F034         	movff	?___awtoft,___ftdiv@f1
  9942  001FFA  C02B  F035         	movff	?___awtoft+1,___ftdiv@f1+1
  9943  001FFE  C02C  F036         	movff	?___awtoft+2,___ftdiv@f1+2
  9944  002002  ECCF  F013         	call	___ftdiv	;wreg free
  9945  002006  C034  F086         	movff	?___ftdiv,___ftmul@f1
  9946  00200A  C035  F087         	movff	?___ftdiv+1,___ftmul@f1+1
  9947  00200E  C036  F088         	movff	?___ftdiv+2,___ftmul@f1+2
  9948  002012  EC52  F010         	call	___ftmul	;wreg free
  9949  002016  C086  F09F         	movff	?___ftmul,___ftadd@f2
  9950  00201A  C087  F0A0         	movff	?___ftmul+1,___ftadd@f2+1
  9951  00201E  C088  F0A1         	movff	?___ftmul+2,___ftadd@f2+2
  9952  002022  C0CA  F02A         	movff	angleToPulse@a000,___altoft@c
  9953  002026  C0CB  F02B         	movff	angleToPulse@a000+1,___altoft@c+1
  9954  00202A  C0CC  F02C         	movff	angleToPulse@a000+2,___altoft@c+2
  9955  00202E  C0CD  F02D         	movff	angleToPulse@a000+3,___altoft@c+3
  9956  002032  EC9D  F018         	call	___altoft	;wreg free
  9957  002036  C02A  F09C         	movff	?___altoft,___ftadd@f1
  9958  00203A  C02B  F09D         	movff	?___altoft+1,___ftadd@f1+1
  9959  00203E  C02C  F09E         	movff	?___altoft+2,___ftadd@f1+2
  9960  002042  EC42  F00D         	call	___ftadd	;wreg free
  9961  002046  C09C  F0C7         	movff	?___ftadd,_angleToPulse$1337
  9962  00204A  C09D  F0C8         	movff	?___ftadd+1,_angleToPulse$1337+1
  9963  00204E  C09E  F0C9         	movff	?___ftadd+2,_angleToPulse$1337+2
  9964                           
  9965                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  9966  002052  C0BF  F02A         	movff	angleToPulse@offset,___altoft@c
  9967  002056  C0C0  F02B         	movff	angleToPulse@offset+1,___altoft@c+1
  9968  00205A  C0C1  F02C         	movff	angleToPulse@offset+2,___altoft@c+2
  9969  00205E  C0C2  F02D         	movff	angleToPulse@offset+3,___altoft@c+3
  9970  002062  EC9D  F018         	call	___altoft	;wreg free
  9971  002066  C02A  F09F         	movff	?___altoft,___ftadd@f2
  9972  00206A  C02B  F0A0         	movff	?___altoft+1,___ftadd@f2+1
  9973  00206E  C02C  F0A1         	movff	?___altoft+2,___ftadd@f2+2
  9974  002072  C0C7  F09C         	movff	_angleToPulse$1337,___ftadd@f1
  9975  002076  C0C8  F09D         	movff	_angleToPulse$1337+1,___ftadd@f1+1
  9976  00207A  C0C9  F09E         	movff	_angleToPulse$1337+2,___ftadd@f1+2
  9977  00207E  EC42  F00D         	call	___ftadd	;wreg free
  9978  002082  C09C  F0A8         	movff	?___ftadd,___fttol@f1
  9979  002086  C09D  F0A9         	movff	?___ftadd+1,___fttol@f1+1
  9980  00208A  C09E  F0AA         	movff	?___ftadd+2,___fttol@f1+2
  9981  00208E  ECFB  F010         	call	___fttol	;wreg free
  9982  002092  C0A8  F0B7         	movff	?___fttol,?_angleToPulse
  9983  002096  C0A9  F0B8         	movff	?___fttol+1,?_angleToPulse+1
  9984  00209A  C0AA  F0B9         	movff	?___fttol+2,?_angleToPulse+2
  9985  00209E  C0AB  F0BA         	movff	?___fttol+3,?_angleToPulse+3
  9986  0020A2  0012               	return	
  9987  0020A4                     __end_of_angleToPulse:
  9988                           	opt stack 0
  9989                           tblptru	equ	0xFF8
  9990                           tblptrh	equ	0xFF7
  9991                           tblptrl	equ	0xFF6
  9992                           tablat	equ	0xFF5
  9993                           prodh	equ	0xFF4
  9994                           prodl	equ	0xFF3
  9995                           intcon	equ	0xFF2
  9996                           postinc0	equ	0xFEE
  9997                           wreg	equ	0xFE8
  9998                           postdec1	equ	0xFE5
  9999                           fsr1l	equ	0xFE1
 10000                           indf2	equ	0xFDF
 10001                           postinc2	equ	0xFDE
 10002                           postdec2	equ	0xFDD
 10003                           fsr2h	equ	0xFDA
 10004                           fsr2l	equ	0xFD9
 10005                           status	equ	0xFD8
 10006                           
 10007 ;; *************** function ___fttol *****************
 10008 ;; Defined at:
 10009 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;  f1              3   40[BANK0 ] float 
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;  lval            4   50[BANK0 ] unsigned long 
 10014 ;;  exp1            1   54[BANK0 ] unsigned char 
 10015 ;;  sign1           1   49[BANK0 ] unsigned char 
 10016 ;; Return value:  Size  Location     Type
 10017 ;;                  4   40[BANK0 ] long 
 10018 ;; Registers used:
 10019 ;;		wreg, status,2, status,0
 10020 ;; Tracked objects:
 10021 ;;		On entry : 0/0
 10022 ;;		On exit  : 0/0
 10023 ;;		Unchanged: 0/0
 10024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10025 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10028 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10029 ;;Total ram usage:       15 bytes
 10030 ;; Hardware stack levels used:    1
 10031 ;; Hardware stack levels required when called:    3
 10032 ;; This function calls:
 10033 ;;		Nothing
 10034 ;; This function is called by:
 10035 ;;		_sortBattery
 10036 ;;		_angleToPulse
 10037 ;;		_printf
 10038 ;; This function uses a non-reentrant model
 10039 ;;
 10040                           
 10041                           	psect	text37
 10042  0021F6                     __ptext37:
 10043                           	opt stack 0
 10044  0021F6                     ___fttol:
 10045                           	opt stack 24
 10046                           
 10047                           ;incstack = 0
 10048  0021F6  C0AA  F0AC         	movff	___fttol@f1+2,??___fttol
 10049  0021FA  0100               	movlb	0	; () banked
 10050  0021FC  6BAD               	clrf	(??___fttol+1)& (0+255),b
 10051  0021FE  6BAE               	clrf	(??___fttol+2)& (0+255),b
 10052  002200  0100               	movlb	0	; () banked
 10053  002202  35A9               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10054  002204  0100               	movlb	0	; () banked
 10055  002206  37AC               	rlcf	??___fttol& (0+255),f,b
 10056  002208  E301               	bnc	u6021
 10057  00220A  81AD               	bsf	(??___fttol+1)& (0+255),0,b
 10058  00220C                     u6021:
 10059  00220C  0100               	movlb	0	; () banked
 10060  00220E  51AC               	movf	??___fttol& (0+255),w,b
 10061  002210  0100               	movlb	0	; () banked
 10062  002212  6FB6               	movwf	___fttol@exp1& (0+255),b
 10063  002214  0100               	movlb	0	; () banked
 10064  002216  51B6               	movf	___fttol@exp1& (0+255),w,b
 10065  002218  A4D8               	btfss	status,2,c
 10066  00221A  D00A               	goto	l5978
 10067                           
 10068                           ; BSR set to: 0
 10069  00221C  0E00               	movlw	0
 10070  00221E  0100               	movlb	0	; () banked
 10071  002220  6FA8               	movwf	?___fttol& (0+255),b
 10072  002222  0E00               	movlw	0
 10073  002224  6FA9               	movwf	(?___fttol+1)& (0+255),b
 10074  002226  0E00               	movlw	0
 10075  002228  6FAA               	movwf	(?___fttol+2)& (0+255),b
 10076  00222A  0E00               	movlw	0
 10077  00222C  6FAB               	movwf	(?___fttol+3)& (0+255),b
 10078                           
 10079                           ; BSR set to: 0
 10080  00222E  0012               	return	
 10081  002230                     l5978:
 10082                           
 10083                           ; BSR set to: 0
 10084  002230  0E17               	movlw	23
 10085  002232  0100               	movlb	0	; () banked
 10086  002234  6FAC               	movwf	??___fttol& (0+255),b
 10087  002236  C0A8  F0AD         	movff	___fttol@f1,??___fttol+1
 10088  00223A  C0A9  F0AE         	movff	___fttol@f1+1,??___fttol+2
 10089  00223E  C0AA  F0AF         	movff	___fttol@f1+2,??___fttol+3
 10090  002242  0100               	movlb	0	; () banked
 10091  002244  29AC               	incf	??___fttol& (0+255),w,b
 10092  002246  0100               	movlb	0	; () banked
 10093  002248  6FB0               	movwf	(??___fttol+4)& (0+255),b
 10094  00224A  D005               	goto	u6040
 10095  00224C                     u6045:
 10096  00224C  0100               	movlb	0	; () banked
 10097  00224E  90D8               	bcf	status,0,c
 10098  002250  33AF               	rrcf	(??___fttol+3)& (0+255),f,b
 10099  002252  33AE               	rrcf	(??___fttol+2)& (0+255),f,b
 10100  002254  33AD               	rrcf	(??___fttol+1)& (0+255),f,b
 10101  002256                     u6040:
 10102  002256  0100               	movlb	0	; () banked
 10103  002258  2FB0               	decfsz	(??___fttol+4)& (0+255),f,b
 10104  00225A  D7F8               	goto	u6045
 10105  00225C  0100               	movlb	0	; () banked
 10106  00225E  51AD               	movf	(??___fttol+1)& (0+255),w,b
 10107  002260  0100               	movlb	0	; () banked
 10108  002262  6FB1               	movwf	___fttol@sign1& (0+255),b
 10109                           
 10110                           ; BSR set to: 0
 10111  002264  0100               	movlb	0	; () banked
 10112  002266  8FA9               	bsf	(___fttol@f1+1)& (0+255),7,b
 10113                           
 10114                           ; BSR set to: 0
 10115  002268  0EFF               	movlw	255
 10116  00226A  0100               	movlb	0	; () banked
 10117  00226C  17A8               	andwf	___fttol@f1& (0+255),f,b
 10118  00226E  0EFF               	movlw	255
 10119  002270  0100               	movlb	0	; () banked
 10120  002272  17A9               	andwf	(___fttol@f1+1)& (0+255),f,b
 10121  002274  0E00               	movlw	0
 10122  002276  0100               	movlb	0	; () banked
 10123  002278  17AA               	andwf	(___fttol@f1+2)& (0+255),f,b
 10124                           
 10125                           ; BSR set to: 0
 10126  00227A  0100               	movlb	0	; () banked
 10127  00227C  51A8               	movf	___fttol@f1& (0+255),w,b
 10128  00227E  0100               	movlb	0	; () banked
 10129  002280  6FB2               	movwf	___fttol@lval& (0+255),b
 10130  002282  0100               	movlb	0	; () banked
 10131  002284  51A9               	movf	(___fttol@f1+1)& (0+255),w,b
 10132  002286  0100               	movlb	0	; () banked
 10133  002288  6FB3               	movwf	(___fttol@lval+1)& (0+255),b
 10134  00228A  0100               	movlb	0	; () banked
 10135  00228C  51AA               	movf	(___fttol@f1+2)& (0+255),w,b
 10136  00228E  0100               	movlb	0	; () banked
 10137  002290  6FB4               	movwf	(___fttol@lval+2)& (0+255),b
 10138  002292  0100               	movlb	0	; () banked
 10139  002294  6BB5               	clrf	(___fttol@lval+3)& (0+255),b
 10140                           
 10141                           ; BSR set to: 0
 10142  002296  0E8E               	movlw	142
 10143  002298  0100               	movlb	0	; () banked
 10144  00229A  5FB6               	subwf	___fttol@exp1& (0+255),f,b
 10145                           
 10146                           ; BSR set to: 0
 10147  00229C  0100               	movlb	0	; () banked
 10148  00229E  AFB6               	btfss	___fttol@exp1& (0+255),7,b
 10149  0022A0  D01A               	goto	l6000
 10150                           
 10151                           ; BSR set to: 0
 10152  0022A2  0100               	movlb	0	; () banked
 10153  0022A4  51B6               	movf	___fttol@exp1& (0+255),w,b
 10154  0022A6  0A80               	xorlw	128
 10155  0022A8  0F8F               	addlw	143
 10156  0022AA  B0D8               	btfsc	status,0,c
 10157  0022AC  D00A               	goto	l5996
 10158                           
 10159                           ; BSR set to: 0
 10160  0022AE  0E00               	movlw	0
 10161  0022B0  0100               	movlb	0	; () banked
 10162  0022B2  6FA8               	movwf	?___fttol& (0+255),b
 10163  0022B4  0E00               	movlw	0
 10164  0022B6  6FA9               	movwf	(?___fttol+1)& (0+255),b
 10165  0022B8  0E00               	movlw	0
 10166  0022BA  6FAA               	movwf	(?___fttol+2)& (0+255),b
 10167  0022BC  0E00               	movlw	0
 10168  0022BE  6FAB               	movwf	(?___fttol+3)& (0+255),b
 10169                           
 10170                           ; BSR set to: 0
 10171  0022C0  0012               	return	
 10172  0022C2                     l5996:
 10173                           
 10174                           ; BSR set to: 0
 10175  0022C2  0100               	movlb	0	; () banked
 10176  0022C4  90D8               	bcf	status,0,c
 10177  0022C6  33B5               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10178  0022C8  33B4               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10179  0022CA  33B3               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10180  0022CC  33B2               	rrcf	___fttol@lval& (0+255),f,b
 10181                           
 10182                           ; BSR set to: 0
 10183  0022CE  0100               	movlb	0	; () banked
 10184  0022D0  3FB6               	incfsz	___fttol@exp1& (0+255),f,b
 10185  0022D2  D7F7               	goto	l5996
 10186                           
 10187                           ; BSR set to: 0
 10188  0022D4  D01B               	goto	l6010
 10189  0022D6                     l6000:
 10190                           
 10191                           ; BSR set to: 0
 10192  0022D6  0E17               	movlw	23
 10193  0022D8  0100               	movlb	0	; () banked
 10194  0022DA  65B6               	cpfsgt	___fttol@exp1& (0+255),b
 10195  0022DC  D012               	goto	l6008
 10196                           
 10197                           ; BSR set to: 0
 10198  0022DE  0E00               	movlw	0
 10199  0022E0  0100               	movlb	0	; () banked
 10200  0022E2  6FA8               	movwf	?___fttol& (0+255),b
 10201  0022E4  0E00               	movlw	0
 10202  0022E6  6FA9               	movwf	(?___fttol+1)& (0+255),b
 10203  0022E8  0E00               	movlw	0
 10204  0022EA  6FAA               	movwf	(?___fttol+2)& (0+255),b
 10205  0022EC  0E00               	movlw	0
 10206  0022EE  6FAB               	movwf	(?___fttol+3)& (0+255),b
 10207                           
 10208                           ; BSR set to: 0
 10209  0022F0  0012               	return	
 10210  0022F2                     l6006:
 10211                           
 10212                           ; BSR set to: 0
 10213  0022F2  0100               	movlb	0	; () banked
 10214  0022F4  90D8               	bcf	status,0,c
 10215  0022F6  37B2               	rlcf	___fttol@lval& (0+255),f,b
 10216  0022F8  37B3               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10217  0022FA  37B4               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10218  0022FC  37B5               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10219  0022FE  0100               	movlb	0	; () banked
 10220  002300  07B6               	decf	___fttol@exp1& (0+255),f,b
 10221  002302                     l6008:
 10222                           
 10223                           ; BSR set to: 0
 10224  002302  0100               	movlb	0	; () banked
 10225  002304  51B6               	movf	___fttol@exp1& (0+255),w,b
 10226  002306  0100               	movlb	0	; () banked
 10227  002308  A4D8               	btfss	status,2,c
 10228  00230A  D7F3               	goto	l6006
 10229  00230C                     l6010:
 10230                           
 10231                           ; BSR set to: 0
 10232  00230C  0100               	movlb	0	; () banked
 10233  00230E  51B1               	movf	___fttol@sign1& (0+255),w,b
 10234  002310  0100               	movlb	0	; () banked
 10235  002312  B4D8               	btfsc	status,2,c
 10236  002314  D009               	goto	l6014
 10237                           
 10238                           ; BSR set to: 0
 10239  002316  0100               	movlb	0	; () banked
 10240  002318  1FB5               	comf	(___fttol@lval+3)& (0+255),f,b
 10241  00231A  1FB4               	comf	(___fttol@lval+2)& (0+255),f,b
 10242  00231C  1FB3               	comf	(___fttol@lval+1)& (0+255),f,b
 10243  00231E  6DB2               	negf	___fttol@lval& (0+255),b
 10244  002320  0E00               	movlw	0
 10245  002322  23B3               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10246  002324  23B4               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10247  002326  23B5               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10248  002328                     l6014:
 10249                           
 10250                           ; BSR set to: 0
 10251  002328  C0B2  F0A8         	movff	___fttol@lval,?___fttol
 10252  00232C  C0B3  F0A9         	movff	___fttol@lval+1,?___fttol+1
 10253  002330  C0B4  F0AA         	movff	___fttol@lval+2,?___fttol+2
 10254  002334  C0B5  F0AB         	movff	___fttol@lval+3,?___fttol+3
 10255  002338  0012               	return	
 10256  00233A                     __end_of___fttol:
 10257                           	opt stack 0
 10258                           tblptru	equ	0xFF8
 10259                           tblptrh	equ	0xFF7
 10260                           tblptrl	equ	0xFF6
 10261                           tablat	equ	0xFF5
 10262                           prodh	equ	0xFF4
 10263                           prodl	equ	0xFF3
 10264                           intcon	equ	0xFF2
 10265                           postinc0	equ	0xFEE
 10266                           wreg	equ	0xFE8
 10267                           postdec1	equ	0xFE5
 10268                           fsr1l	equ	0xFE1
 10269                           indf2	equ	0xFDF
 10270                           postinc2	equ	0xFDE
 10271                           postdec2	equ	0xFDD
 10272                           fsr2h	equ	0xFDA
 10273                           fsr2l	equ	0xFD9
 10274                           status	equ	0xFD8
 10275                           
 10276 ;; *************** function ___ftmul *****************
 10277 ;; Defined at:
 10278 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;  f1              3    6[BANK0 ] float 
 10281 ;;  f2              3    9[BANK0 ] float 
 10282 ;; Auto vars:     Size  Location     Type
 10283 ;;  f3_as_produc    3   13[BANK0 ] unsigned um
 10284 ;;  sign            1   17[BANK0 ] unsigned char 
 10285 ;;  cntr            1   16[BANK0 ] unsigned char 
 10286 ;;  exp             1   12[BANK0 ] unsigned char 
 10287 ;; Return value:  Size  Location     Type
 10288 ;;                  3    6[BANK0 ] float 
 10289 ;; Registers used:
 10290 ;;		wreg, status,2, status,0, cstack
 10291 ;; Tracked objects:
 10292 ;;		On entry : 0/0
 10293 ;;		On exit  : 0/0
 10294 ;;		Unchanged: 0/0
 10295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10296 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10297 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10298 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10299 ;;      Totals:         3      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;Total ram usage:       15 bytes
 10301 ;; Hardware stack levels used:    1
 10302 ;; Hardware stack levels required when called:    4
 10303 ;; This function calls:
 10304 ;;		___ftpack
 10305 ;; This function is called by:
 10306 ;;		_sortBattery
 10307 ;;		_angleToPulse
 10308 ;;		_fround
 10309 ;;		_scale
 10310 ;;		_printf
 10311 ;; This function uses a non-reentrant model
 10312 ;;
 10313                           
 10314                           	psect	text38
 10315  0020A4                     __ptext38:
 10316                           	opt stack 0
 10317  0020A4                     ___ftmul:
 10318                           	opt stack 23
 10319                           
 10320                           ; BSR set to: 0
 10321                           ;incstack = 0
 10322  0020A4  C088  F03D         	movff	___ftmul@f1+2,??___ftmul
 10323  0020A8  6A3E               	clrf	(??___ftmul+1)& (0+255),c
 10324  0020AA  6A3F               	clrf	(??___ftmul+2)& (0+255),c
 10325  0020AC  0100               	movlb	0	; () banked
 10326  0020AE  3587               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10327  0020B0  363D               	rlcf	??___ftmul& (0+255),f,c
 10328  0020B2  E301               	bnc	u5451
 10329  0020B4  803E               	bsf	(??___ftmul+1)& (0+255),0,c
 10330  0020B6                     u5451:
 10331  0020B6  503D               	movf	??___ftmul,w,c
 10332  0020B8  0100               	movlb	0	; () banked
 10333  0020BA  6F8C               	movwf	___ftmul@exp& (0+255),b
 10334  0020BC  0100               	movlb	0	; () banked
 10335  0020BE  518C               	movf	___ftmul@exp& (0+255),w,b
 10336  0020C0  A4D8               	btfss	status,2,c
 10337  0020C2  D00A               	goto	l5550
 10338                           
 10339                           ; BSR set to: 0
 10340  0020C4  0E00               	movlw	0
 10341  0020C6  0100               	movlb	0	; () banked
 10342  0020C8  6F86               	movwf	?___ftmul& (0+255),b
 10343  0020CA  0E00               	movlw	0
 10344  0020CC  0100               	movlb	0	; () banked
 10345  0020CE  6F87               	movwf	(?___ftmul+1)& (0+255),b
 10346  0020D0  0E00               	movlw	0
 10347  0020D2  0100               	movlb	0	; () banked
 10348  0020D4  6F88               	movwf	(?___ftmul+2)& (0+255),b
 10349                           
 10350                           ; BSR set to: 0
 10351  0020D6  0012               	return	
 10352  0020D8                     l5550:
 10353                           
 10354                           ; BSR set to: 0
 10355  0020D8  C08B  F03D         	movff	___ftmul@f2+2,??___ftmul
 10356  0020DC  6A3E               	clrf	(??___ftmul+1)& (0+255),c
 10357  0020DE  6A3F               	clrf	(??___ftmul+2)& (0+255),c
 10358  0020E0  0100               	movlb	0	; () banked
 10359  0020E2  358A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10360  0020E4  363D               	rlcf	??___ftmul& (0+255),f,c
 10361  0020E6  E301               	bnc	u5471
 10362  0020E8  803E               	bsf	(??___ftmul+1)& (0+255),0,c
 10363  0020EA                     u5471:
 10364  0020EA  503D               	movf	??___ftmul,w,c
 10365  0020EC  0100               	movlb	0	; () banked
 10366  0020EE  6F91               	movwf	___ftmul@sign& (0+255),b
 10367  0020F0  0100               	movlb	0	; () banked
 10368  0020F2  5191               	movf	___ftmul@sign& (0+255),w,b
 10369  0020F4  A4D8               	btfss	status,2,c
 10370  0020F6  D00A               	goto	l5556
 10371                           
 10372                           ; BSR set to: 0
 10373  0020F8  0E00               	movlw	0
 10374  0020FA  0100               	movlb	0	; () banked
 10375  0020FC  6F86               	movwf	?___ftmul& (0+255),b
 10376  0020FE  0E00               	movlw	0
 10377  002100  0100               	movlb	0	; () banked
 10378  002102  6F87               	movwf	(?___ftmul+1)& (0+255),b
 10379  002104  0E00               	movlw	0
 10380  002106  0100               	movlb	0	; () banked
 10381  002108  6F88               	movwf	(?___ftmul+2)& (0+255),b
 10382                           
 10383                           ; BSR set to: 0
 10384  00210A  0012               	return	
 10385  00210C                     l5556:
 10386                           
 10387                           ; BSR set to: 0
 10388  00210C  0100               	movlb	0	; () banked
 10389  00210E  5191               	movf	___ftmul@sign& (0+255),w,b
 10390  002110  0F7B               	addlw	123
 10391  002112  0100               	movlb	0	; () banked
 10392  002114  278C               	addwf	___ftmul@exp& (0+255),f,b
 10393                           
 10394                           ; BSR set to: 0
 10395  002116  C088  F091         	movff	___ftmul@f1+2,___ftmul@sign
 10396  00211A  0100               	movlb	0	; () banked
 10397  00211C  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
 10398  00211E  0100               	movlb	0	; () banked
 10399  002120  1B91               	xorwf	___ftmul@sign& (0+255),f,b
 10400  002122  0E80               	movlw	128
 10401  002124  0100               	movlb	0	; () banked
 10402  002126  1791               	andwf	___ftmul@sign& (0+255),f,b
 10403                           
 10404                           ; BSR set to: 0
 10405  002128  0100               	movlb	0	; () banked
 10406  00212A  8F87               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10407                           
 10408                           ; BSR set to: 0
 10409  00212C  0100               	movlb	0	; () banked
 10410  00212E  8F8A               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10411                           
 10412                           ; BSR set to: 0
 10413  002130  0EFF               	movlw	255
 10414  002132  0100               	movlb	0	; () banked
 10415  002134  1789               	andwf	___ftmul@f2& (0+255),f,b
 10416  002136  0EFF               	movlw	255
 10417  002138  0100               	movlb	0	; () banked
 10418  00213A  178A               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10419  00213C  0E00               	movlw	0
 10420  00213E  0100               	movlb	0	; () banked
 10421  002140  178B               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10422                           
 10423                           ; BSR set to: 0
 10424  002142  0E00               	movlw	0
 10425  002144  0100               	movlb	0	; () banked
 10426  002146  6F8D               	movwf	___ftmul@f3_as_product& (0+255),b
 10427  002148  0E00               	movlw	0
 10428  00214A  0100               	movlb	0	; () banked
 10429  00214C  6F8E               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10430  00214E  0E00               	movlw	0
 10431  002150  0100               	movlb	0	; () banked
 10432  002152  6F8F               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10433                           
 10434                           ; BSR set to: 0
 10435  002154  0E07               	movlw	7
 10436  002156  0100               	movlb	0	; () banked
 10437  002158  6F90               	movwf	___ftmul@cntr& (0+255),b
 10438  00215A                     l5570:
 10439                           
 10440                           ; BSR set to: 0
 10441  00215A  0100               	movlb	0	; () banked
 10442  00215C  A186               	btfss	___ftmul@f1& (0+255),0,b
 10443  00215E  D00C               	goto	l5574
 10444                           
 10445                           ; BSR set to: 0
 10446  002160  0100               	movlb	0	; () banked
 10447  002162  5189               	movf	___ftmul@f2& (0+255),w,b
 10448  002164  0100               	movlb	0	; () banked
 10449  002166  278D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10450  002168  0100               	movlb	0	; () banked
 10451  00216A  518A               	movf	(___ftmul@f2+1)& (0+255),w,b
 10452  00216C  0100               	movlb	0	; () banked
 10453  00216E  238E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10454  002170  0100               	movlb	0	; () banked
 10455  002172  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
 10456  002174  0100               	movlb	0	; () banked
 10457  002176  238F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10458  002178                     l5574:
 10459                           
 10460                           ; BSR set to: 0
 10461  002178  0100               	movlb	0	; () banked
 10462  00217A  90D8               	bcf	status,0,c
 10463  00217C  3388               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10464  00217E  3387               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10465  002180  3386               	rrcf	___ftmul@f1& (0+255),f,b
 10466  002182  0100               	movlb	0	; () banked
 10467  002184  90D8               	bcf	status,0,c
 10468  002186  3789               	rlcf	___ftmul@f2& (0+255),f,b
 10469  002188  378A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10470  00218A  378B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10471                           
 10472                           ; BSR set to: 0
 10473  00218C  0100               	movlb	0	; () banked
 10474  00218E  2F90               	decfsz	___ftmul@cntr& (0+255),f,b
 10475  002190  D7E4               	goto	l5570
 10476                           
 10477                           ; BSR set to: 0
 10478                           
 10479                           ; BSR set to: 0
 10480  002192  0E09               	movlw	9
 10481  002194  0100               	movlb	0	; () banked
 10482  002196  6F90               	movwf	___ftmul@cntr& (0+255),b
 10483  002198                     l5580:
 10484                           
 10485                           ; BSR set to: 0
 10486  002198  0100               	movlb	0	; () banked
 10487  00219A  A186               	btfss	___ftmul@f1& (0+255),0,b
 10488  00219C  D00C               	goto	l5584
 10489                           
 10490                           ; BSR set to: 0
 10491  00219E  0100               	movlb	0	; () banked
 10492  0021A0  5189               	movf	___ftmul@f2& (0+255),w,b
 10493  0021A2  0100               	movlb	0	; () banked
 10494  0021A4  278D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10495  0021A6  0100               	movlb	0	; () banked
 10496  0021A8  518A               	movf	(___ftmul@f2+1)& (0+255),w,b
 10497  0021AA  0100               	movlb	0	; () banked
 10498  0021AC  238E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10499  0021AE  0100               	movlb	0	; () banked
 10500  0021B0  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
 10501  0021B2  0100               	movlb	0	; () banked
 10502  0021B4  238F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10503  0021B6                     l5584:
 10504                           
 10505                           ; BSR set to: 0
 10506  0021B6  0100               	movlb	0	; () banked
 10507  0021B8  90D8               	bcf	status,0,c
 10508  0021BA  3388               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10509  0021BC  3387               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10510  0021BE  3386               	rrcf	___ftmul@f1& (0+255),f,b
 10511  0021C0  0100               	movlb	0	; () banked
 10512  0021C2  90D8               	bcf	status,0,c
 10513  0021C4  338F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10514  0021C6  338E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10515  0021C8  338D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10516                           
 10517                           ; BSR set to: 0
 10518  0021CA  0100               	movlb	0	; () banked
 10519  0021CC  2F90               	decfsz	___ftmul@cntr& (0+255),f,b
 10520  0021CE  D7E4               	goto	l5580
 10521                           
 10522                           ; BSR set to: 0
 10523                           
 10524                           ; BSR set to: 0
 10525  0021D0  C08D  F022         	movff	___ftmul@f3_as_product,___ftpack@arg
 10526  0021D4  C08E  F023         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10527  0021D8  C08F  F024         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10528  0021DC  C08C  F025         	movff	___ftmul@exp,___ftpack@exp
 10529  0021E0  C091  F026         	movff	___ftmul@sign,___ftpack@sign
 10530  0021E4  EC5E  F016         	call	___ftpack	;wreg free
 10531  0021E8  C022  F086         	movff	?___ftpack,?___ftmul
 10532  0021EC  C023  F087         	movff	?___ftpack+1,?___ftmul+1
 10533  0021F0  C024  F088         	movff	?___ftpack+2,?___ftmul+2
 10534  0021F4  0012               	return	
 10535  0021F6                     __end_of___ftmul:
 10536                           	opt stack 0
 10537                           tblptru	equ	0xFF8
 10538                           tblptrh	equ	0xFF7
 10539                           tblptrl	equ	0xFF6
 10540                           tablat	equ	0xFF5
 10541                           prodh	equ	0xFF4
 10542                           prodl	equ	0xFF3
 10543                           intcon	equ	0xFF2
 10544                           postinc0	equ	0xFEE
 10545                           wreg	equ	0xFE8
 10546                           postdec1	equ	0xFE5
 10547                           fsr1l	equ	0xFE1
 10548                           indf2	equ	0xFDF
 10549                           postinc2	equ	0xFDE
 10550                           postdec2	equ	0xFDD
 10551                           fsr2h	equ	0xFDA
 10552                           fsr2l	equ	0xFD9
 10553                           status	equ	0xFD8
 10554                           
 10555 ;; *************** function ___ftdiv *****************
 10556 ;; Defined at:
 10557 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;  f1              3   51[COMRAM] float 
 10560 ;;  f2              3   54[COMRAM] float 
 10561 ;; Auto vars:     Size  Location     Type
 10562 ;;  f3              3    1[BANK0 ] float 
 10563 ;;  sign            1    5[BANK0 ] unsigned char 
 10564 ;;  exp             1    4[BANK0 ] unsigned char 
 10565 ;;  cntr            1    0[BANK0 ] unsigned char 
 10566 ;; Return value:  Size  Location     Type
 10567 ;;                  3   51[COMRAM] float 
 10568 ;; Registers used:
 10569 ;;		wreg, status,2, status,0, cstack
 10570 ;; Tracked objects:
 10571 ;;		On entry : 0/0
 10572 ;;		On exit  : 0/0
 10573 ;;		Unchanged: 0/0
 10574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10575 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10579 ;;Total ram usage:       15 bytes
 10580 ;; Hardware stack levels used:    1
 10581 ;; Hardware stack levels required when called:    4
 10582 ;; This function calls:
 10583 ;;		___ftpack
 10584 ;; This function is called by:
 10585 ;;		_sortBattery
 10586 ;;		_angleToPulse
 10587 ;; This function uses a non-reentrant model
 10588 ;;
 10589                           
 10590                           	psect	text39
 10591  00279E                     __ptext39:
 10592                           	opt stack 0
 10593  00279E                     ___ftdiv:
 10594                           	opt stack 23
 10595                           
 10596                           ;incstack = 0
 10597  00279E  C036  F03A         	movff	___ftdiv@f1+2,??___ftdiv
 10598  0027A2  6A3B               	clrf	(??___ftdiv+1)& (0+255),c
 10599  0027A4  6A3C               	clrf	(??___ftdiv+2)& (0+255),c
 10600  0027A6  3435               	rlcf	___ftdiv@f1+1,w,c
 10601  0027A8  363A               	rlcf	??___ftdiv& (0+255),f,c
 10602  0027AA  E301               	bnc	u5911
 10603  0027AC  803B               	bsf	(??___ftdiv+1)& (0+255),0,c
 10604  0027AE                     u5911:
 10605  0027AE  503A               	movf	??___ftdiv,w,c
 10606  0027B0  0100               	movlb	0	; () banked
 10607  0027B2  6F84               	movwf	___ftdiv@exp& (0+255),b
 10608  0027B4  0100               	movlb	0	; () banked
 10609  0027B6  5184               	movf	___ftdiv@exp& (0+255),w,b
 10610  0027B8  A4D8               	btfss	status,2,c
 10611  0027BA  D007               	goto	l5890
 10612                           
 10613                           ; BSR set to: 0
 10614  0027BC  0E00               	movlw	0
 10615  0027BE  6E34               	movwf	?___ftdiv,c
 10616  0027C0  0E00               	movlw	0
 10617  0027C2  6E35               	movwf	?___ftdiv+1,c
 10618  0027C4  0E00               	movlw	0
 10619  0027C6  6E36               	movwf	?___ftdiv+2,c
 10620                           
 10621                           ; BSR set to: 0
 10622  0027C8  0012               	return	
 10623  0027CA                     l5890:
 10624                           
 10625                           ; BSR set to: 0
 10626  0027CA  C039  F03A         	movff	___ftdiv@f2+2,??___ftdiv
 10627  0027CE  6A3B               	clrf	(??___ftdiv+1)& (0+255),c
 10628  0027D0  6A3C               	clrf	(??___ftdiv+2)& (0+255),c
 10629  0027D2  3438               	rlcf	___ftdiv@f2+1,w,c
 10630  0027D4  363A               	rlcf	??___ftdiv& (0+255),f,c
 10631  0027D6  E301               	bnc	u5931
 10632  0027D8  803B               	bsf	(??___ftdiv+1)& (0+255),0,c
 10633  0027DA                     u5931:
 10634  0027DA  503A               	movf	??___ftdiv,w,c
 10635  0027DC  0100               	movlb	0	; () banked
 10636  0027DE  6F85               	movwf	___ftdiv@sign& (0+255),b
 10637  0027E0  0100               	movlb	0	; () banked
 10638  0027E2  5185               	movf	___ftdiv@sign& (0+255),w,b
 10639  0027E4  A4D8               	btfss	status,2,c
 10640  0027E6  D007               	goto	l5896
 10641                           
 10642                           ; BSR set to: 0
 10643  0027E8  0E00               	movlw	0
 10644  0027EA  6E34               	movwf	?___ftdiv,c
 10645  0027EC  0E00               	movlw	0
 10646  0027EE  6E35               	movwf	?___ftdiv+1,c
 10647  0027F0  0E00               	movlw	0
 10648  0027F2  6E36               	movwf	?___ftdiv+2,c
 10649                           
 10650                           ; BSR set to: 0
 10651  0027F4  0012               	return	
 10652  0027F6                     l5896:
 10653                           
 10654                           ; BSR set to: 0
 10655  0027F6  0E00               	movlw	0
 10656  0027F8  0100               	movlb	0	; () banked
 10657  0027FA  6F81               	movwf	___ftdiv@f3& (0+255),b
 10658  0027FC  0E00               	movlw	0
 10659  0027FE  0100               	movlb	0	; () banked
 10660  002800  6F82               	movwf	(___ftdiv@f3+1)& (0+255),b
 10661  002802  0E00               	movlw	0
 10662  002804  0100               	movlb	0	; () banked
 10663  002806  6F83               	movwf	(___ftdiv@f3+2)& (0+255),b
 10664                           
 10665                           ; BSR set to: 0
 10666  002808  0100               	movlb	0	; () banked
 10667  00280A  5185               	movf	___ftdiv@sign& (0+255),w,b
 10668  00280C  0F89               	addlw	137
 10669  00280E  0100               	movlb	0	; () banked
 10670  002810  5F84               	subwf	___ftdiv@exp& (0+255),f,b
 10671                           
 10672                           ; BSR set to: 0
 10673  002812  C036  F085         	movff	___ftdiv@f1+2,___ftdiv@sign
 10674                           
 10675                           ; BSR set to: 0
 10676  002816  5039               	movf	___ftdiv@f2+2,w,c
 10677  002818  0100               	movlb	0	; () banked
 10678  00281A  1B85               	xorwf	___ftdiv@sign& (0+255),f,b
 10679                           
 10680                           ; BSR set to: 0
 10681  00281C  0E80               	movlw	128
 10682  00281E  0100               	movlb	0	; () banked
 10683  002820  1785               	andwf	___ftdiv@sign& (0+255),f,b
 10684                           
 10685                           ; BSR set to: 0
 10686  002822  8E35               	bsf	___ftdiv@f1+1,7,c
 10687                           
 10688                           ; BSR set to: 0
 10689  002824  0EFF               	movlw	255
 10690  002826  1634               	andwf	___ftdiv@f1,f,c
 10691  002828  0EFF               	movlw	255
 10692  00282A  1635               	andwf	___ftdiv@f1+1,f,c
 10693  00282C  0E00               	movlw	0
 10694  00282E  1636               	andwf	___ftdiv@f1+2,f,c
 10695                           
 10696                           ; BSR set to: 0
 10697  002830  8E38               	bsf	___ftdiv@f2+1,7,c
 10698                           
 10699                           ; BSR set to: 0
 10700  002832  0EFF               	movlw	255
 10701  002834  1637               	andwf	___ftdiv@f2,f,c
 10702  002836  0EFF               	movlw	255
 10703  002838  1638               	andwf	___ftdiv@f2+1,f,c
 10704  00283A  0E00               	movlw	0
 10705  00283C  1639               	andwf	___ftdiv@f2+2,f,c
 10706                           
 10707                           ; BSR set to: 0
 10708  00283E  0E18               	movlw	24
 10709  002840  0100               	movlb	0	; () banked
 10710  002842  6F80               	movwf	___ftdiv@cntr& (0+255),b
 10711  002844                     l5916:
 10712                           
 10713                           ; BSR set to: 0
 10714  002844  0100               	movlb	0	; () banked
 10715  002846  90D8               	bcf	status,0,c
 10716  002848  3781               	rlcf	___ftdiv@f3& (0+255),f,b
 10717  00284A  3782               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10718  00284C  3783               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10719                           
 10720                           ; BSR set to: 0
 10721  00284E  5037               	movf	___ftdiv@f2,w,c
 10722  002850  5C34               	subwf	___ftdiv@f1,w,c
 10723  002852  5038               	movf	___ftdiv@f2+1,w,c
 10724  002854  5835               	subwfb	___ftdiv@f1+1,w,c
 10725  002856  5039               	movf	___ftdiv@f2+2,w,c
 10726  002858  5836               	subwfb	___ftdiv@f1+2,w,c
 10727  00285A  A0D8               	btfss	status,0,c
 10728  00285C  D008               	goto	l1099
 10729                           
 10730                           ; BSR set to: 0
 10731  00285E  5037               	movf	___ftdiv@f2,w,c
 10732  002860  5E34               	subwf	___ftdiv@f1,f,c
 10733  002862  5038               	movf	___ftdiv@f2+1,w,c
 10734  002864  5A35               	subwfb	___ftdiv@f1+1,f,c
 10735  002866  5039               	movf	___ftdiv@f2+2,w,c
 10736  002868  5A36               	subwfb	___ftdiv@f1+2,f,c
 10737                           
 10738                           ; BSR set to: 0
 10739  00286A  0100               	movlb	0	; () banked
 10740  00286C  8181               	bsf	___ftdiv@f3& (0+255),0,b
 10741  00286E                     l1099:
 10742                           
 10743                           ; BSR set to: 0
 10744  00286E  90D8               	bcf	status,0,c
 10745  002870  3634               	rlcf	___ftdiv@f1,f,c
 10746  002872  3635               	rlcf	___ftdiv@f1+1,f,c
 10747  002874  3636               	rlcf	___ftdiv@f1+2,f,c
 10748                           
 10749                           ; BSR set to: 0
 10750  002876  0100               	movlb	0	; () banked
 10751  002878  2F80               	decfsz	___ftdiv@cntr& (0+255),f,b
 10752  00287A  D7E4               	goto	l5916
 10753                           
 10754                           ; BSR set to: 0
 10755                           
 10756                           ; BSR set to: 0
 10757  00287C  C081  F022         	movff	___ftdiv@f3,___ftpack@arg
 10758  002880  C082  F023         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10759  002884  C083  F024         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10760  002888  C084  F025         	movff	___ftdiv@exp,___ftpack@exp
 10761  00288C  C085  F026         	movff	___ftdiv@sign,___ftpack@sign
 10762  002890  EC5E  F016         	call	___ftpack	;wreg free
 10763  002894  C022  F034         	movff	?___ftpack,?___ftdiv
 10764  002898  C023  F035         	movff	?___ftpack+1,?___ftdiv+1
 10765  00289C  C024  F036         	movff	?___ftpack+2,?___ftdiv+2
 10766  0028A0  0012               	return	
 10767  0028A2                     __end_of___ftdiv:
 10768                           	opt stack 0
 10769                           tblptru	equ	0xFF8
 10770                           tblptrh	equ	0xFF7
 10771                           tblptrl	equ	0xFF6
 10772                           tablat	equ	0xFF5
 10773                           prodh	equ	0xFF4
 10774                           prodl	equ	0xFF3
 10775                           intcon	equ	0xFF2
 10776                           postinc0	equ	0xFEE
 10777                           wreg	equ	0xFE8
 10778                           postdec1	equ	0xFE5
 10779                           fsr1l	equ	0xFE1
 10780                           indf2	equ	0xFDF
 10781                           postinc2	equ	0xFDE
 10782                           postdec2	equ	0xFDD
 10783                           fsr2h	equ	0xFDA
 10784                           fsr2l	equ	0xFD9
 10785                           status	equ	0xFD8
 10786                           
 10787 ;; *************** function ___ftadd *****************
 10788 ;; Defined at:
 10789 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;  f1              3   28[BANK0 ] float 
 10792 ;;  f2              3   31[BANK0 ] float 
 10793 ;; Auto vars:     Size  Location     Type
 10794 ;;  exp1            1   39[BANK0 ] unsigned char 
 10795 ;;  exp2            1   38[BANK0 ] unsigned char 
 10796 ;;  sign            1   37[BANK0 ] unsigned char 
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  3   28[BANK0 ] float 
 10799 ;; Registers used:
 10800 ;;		wreg, status,2, status,0, cstack
 10801 ;; Tracked objects:
 10802 ;;		On entry : 0/0
 10803 ;;		On exit  : 0/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10806 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10807 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10808 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10809 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10810 ;;Total ram usage:       12 bytes
 10811 ;; Hardware stack levels used:    1
 10812 ;; Hardware stack levels required when called:    4
 10813 ;; This function calls:
 10814 ;;		___ftpack
 10815 ;; This function is called by:
 10816 ;;		_angleToPulse
 10817 ;;		_printf
 10818 ;;		___ftsub
 10819 ;; This function uses a non-reentrant model
 10820 ;;
 10821                           
 10822                           	psect	text40
 10823  001A84                     __ptext40:
 10824                           	opt stack 0
 10825  001A84                     ___ftadd:
 10826                           	opt stack 23
 10827                           
 10828                           ;incstack = 0
 10829  001A84  C09E  F0A2         	movff	___ftadd@f1+2,??___ftadd
 10830  001A88  0100               	movlb	0	; () banked
 10831  001A8A  6BA3               	clrf	(??___ftadd+1)& (0+255),b
 10832  001A8C  6BA4               	clrf	(??___ftadd+2)& (0+255),b
 10833  001A8E  0100               	movlb	0	; () banked
 10834  001A90  359D               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10835  001A92  0100               	movlb	0	; () banked
 10836  001A94  37A2               	rlcf	??___ftadd& (0+255),f,b
 10837  001A96  E301               	bnc	u5241
 10838  001A98  81A3               	bsf	(??___ftadd+1)& (0+255),0,b
 10839  001A9A                     u5241:
 10840  001A9A  0100               	movlb	0	; () banked
 10841  001A9C  51A2               	movf	??___ftadd& (0+255),w,b
 10842  001A9E  0100               	movlb	0	; () banked
 10843  001AA0  6FA7               	movwf	___ftadd@exp1& (0+255),b
 10844  001AA2  C0A1  F0A2         	movff	___ftadd@f2+2,??___ftadd
 10845  001AA6  0100               	movlb	0	; () banked
 10846  001AA8  6BA3               	clrf	(??___ftadd+1)& (0+255),b
 10847  001AAA  6BA4               	clrf	(??___ftadd+2)& (0+255),b
 10848  001AAC  0100               	movlb	0	; () banked
 10849  001AAE  35A0               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10850  001AB0  0100               	movlb	0	; () banked
 10851  001AB2  37A2               	rlcf	??___ftadd& (0+255),f,b
 10852  001AB4  E301               	bnc	u5251
 10853  001AB6  81A3               	bsf	(??___ftadd+1)& (0+255),0,b
 10854  001AB8                     u5251:
 10855  001AB8  0100               	movlb	0	; () banked
 10856  001ABA  51A2               	movf	??___ftadd& (0+255),w,b
 10857  001ABC  0100               	movlb	0	; () banked
 10858  001ABE  6FA6               	movwf	___ftadd@exp2& (0+255),b
 10859                           
 10860                           ; BSR set to: 0
 10861  001AC0  0100               	movlb	0	; () banked
 10862  001AC2  51A7               	movf	___ftadd@exp1& (0+255),w,b
 10863  001AC4  0100               	movlb	0	; () banked
 10864  001AC6  B4D8               	btfsc	status,2,c
 10865  001AC8  D011               	goto	l1064
 10866                           
 10867                           ; BSR set to: 0
 10868  001ACA  0100               	movlb	0	; () banked
 10869  001ACC  51A6               	movf	___ftadd@exp2& (0+255),w,b
 10870  001ACE  0100               	movlb	0	; () banked
 10871  001AD0  5DA7               	subwf	___ftadd@exp1& (0+255),w,b
 10872  001AD2  B0D8               	btfsc	status,0,c
 10873  001AD4  D012               	goto	l5482
 10874                           
 10875                           ; BSR set to: 0
 10876  001AD6  0100               	movlb	0	; () banked
 10877  001AD8  51A7               	movf	___ftadd@exp1& (0+255),w,b
 10878  001ADA  0800               	sublw	0
 10879  001ADC  0100               	movlb	0	; () banked
 10880  001ADE  25A6               	addwf	___ftadd@exp2& (0+255),w,b
 10881  001AE0  0100               	movlb	0	; () banked
 10882  001AE2  6FA2               	movwf	??___ftadd& (0+255),b
 10883  001AE4  0E18               	movlw	24
 10884  001AE6  0100               	movlb	0	; () banked
 10885  001AE8  65A2               	cpfsgt	??___ftadd& (0+255),b
 10886  001AEA  D007               	goto	l5482
 10887  001AEC                     l1064:
 10888                           
 10889                           ; BSR set to: 0
 10890  001AEC  C09F  F09C         	movff	___ftadd@f2,?___ftadd
 10891  001AF0  C0A0  F09D         	movff	___ftadd@f2+1,?___ftadd+1
 10892  001AF4  C0A1  F09E         	movff	___ftadd@f2+2,?___ftadd+2
 10893  001AF8  0012               	return	
 10894  001AFA                     l5482:
 10895                           
 10896                           ; BSR set to: 0
 10897  001AFA  0100               	movlb	0	; () banked
 10898  001AFC  51A6               	movf	___ftadd@exp2& (0+255),w,b
 10899  001AFE  0100               	movlb	0	; () banked
 10900  001B00  B4D8               	btfsc	status,2,c
 10901  001B02  D011               	goto	l1068
 10902                           
 10903                           ; BSR set to: 0
 10904  001B04  0100               	movlb	0	; () banked
 10905  001B06  51A7               	movf	___ftadd@exp1& (0+255),w,b
 10906  001B08  0100               	movlb	0	; () banked
 10907  001B0A  5DA6               	subwf	___ftadd@exp2& (0+255),w,b
 10908  001B0C  B0D8               	btfsc	status,0,c
 10909  001B0E  D012               	goto	l5488
 10910                           
 10911                           ; BSR set to: 0
 10912  001B10  0100               	movlb	0	; () banked
 10913  001B12  51A6               	movf	___ftadd@exp2& (0+255),w,b
 10914  001B14  0800               	sublw	0
 10915  001B16  0100               	movlb	0	; () banked
 10916  001B18  25A7               	addwf	___ftadd@exp1& (0+255),w,b
 10917  001B1A  0100               	movlb	0	; () banked
 10918  001B1C  6FA2               	movwf	??___ftadd& (0+255),b
 10919  001B1E  0E18               	movlw	24
 10920  001B20  0100               	movlb	0	; () banked
 10921  001B22  65A2               	cpfsgt	??___ftadd& (0+255),b
 10922  001B24  D007               	goto	l5488
 10923  001B26                     l1068:
 10924                           
 10925                           ; BSR set to: 0
 10926  001B26  C09C  F09C         	movff	___ftadd@f1,?___ftadd
 10927  001B2A  C09D  F09D         	movff	___ftadd@f1+1,?___ftadd+1
 10928  001B2E  C09E  F09E         	movff	___ftadd@f1+2,?___ftadd+2
 10929  001B32  0012               	return	
 10930  001B34                     l5488:
 10931                           
 10932                           ; BSR set to: 0
 10933  001B34  0E06               	movlw	6
 10934  001B36  0100               	movlb	0	; () banked
 10935  001B38  6FA5               	movwf	___ftadd@sign& (0+255),b
 10936                           
 10937                           ; BSR set to: 0
 10938  001B3A  0100               	movlb	0	; () banked
 10939  001B3C  AF9E               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10940  001B3E  D002               	goto	l5494
 10941                           
 10942                           ; BSR set to: 0
 10943  001B40  0100               	movlb	0	; () banked
 10944  001B42  8FA5               	bsf	___ftadd@sign& (0+255),7,b
 10945  001B44                     l5494:
 10946                           
 10947                           ; BSR set to: 0
 10948  001B44  0100               	movlb	0	; () banked
 10949  001B46  AFA1               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10950  001B48  D002               	goto	l1070
 10951                           
 10952                           ; BSR set to: 0
 10953  001B4A  0100               	movlb	0	; () banked
 10954  001B4C  8DA5               	bsf	___ftadd@sign& (0+255),6,b
 10955  001B4E                     l1070:
 10956                           
 10957                           ; BSR set to: 0
 10958  001B4E  0100               	movlb	0	; () banked
 10959  001B50  8F9D               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10960                           
 10961                           ; BSR set to: 0
 10962  001B52  0EFF               	movlw	255
 10963  001B54  0100               	movlb	0	; () banked
 10964  001B56  179C               	andwf	___ftadd@f1& (0+255),f,b
 10965  001B58  0EFF               	movlw	255
 10966  001B5A  0100               	movlb	0	; () banked
 10967  001B5C  179D               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10968  001B5E  0E00               	movlw	0
 10969  001B60  0100               	movlb	0	; () banked
 10970  001B62  179E               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10971  001B64  0100               	movlb	0	; () banked
 10972  001B66  8FA0               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10973                           
 10974                           ; BSR set to: 0
 10975  001B68  0EFF               	movlw	255
 10976  001B6A  0100               	movlb	0	; () banked
 10977  001B6C  179F               	andwf	___ftadd@f2& (0+255),f,b
 10978  001B6E  0EFF               	movlw	255
 10979  001B70  0100               	movlb	0	; () banked
 10980  001B72  17A0               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10981  001B74  0E00               	movlw	0
 10982  001B76  0100               	movlb	0	; () banked
 10983  001B78  17A1               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10984                           
 10985                           ; BSR set to: 0
 10986  001B7A  0100               	movlb	0	; () banked
 10987  001B7C  51A6               	movf	___ftadd@exp2& (0+255),w,b
 10988  001B7E  0100               	movlb	0	; () banked
 10989  001B80  5DA7               	subwf	___ftadd@exp1& (0+255),w,b
 10990  001B82  B0D8               	btfsc	status,0,c
 10991  001B84  D025               	goto	l5514
 10992  001B86                     l5504:
 10993                           
 10994                           ; BSR set to: 0
 10995  001B86  0100               	movlb	0	; () banked
 10996  001B88  90D8               	bcf	status,0,c
 10997  001B8A  379F               	rlcf	___ftadd@f2& (0+255),f,b
 10998  001B8C  37A0               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10999  001B8E  37A1               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11000  001B90  0100               	movlb	0	; () banked
 11001  001B92  07A6               	decf	___ftadd@exp2& (0+255),f,b
 11002                           
 11003                           ; BSR set to: 0
 11004  001B94  0100               	movlb	0	; () banked
 11005  001B96  51A7               	movf	___ftadd@exp1& (0+255),w,b
 11006  001B98  0100               	movlb	0	; () banked
 11007  001B9A  19A6               	xorwf	___ftadd@exp2& (0+255),w,b
 11008  001B9C  B4D8               	btfsc	status,2,c
 11009  001B9E  D011               	goto	l5512
 11010                           
 11011                           ; BSR set to: 0
 11012  001BA0  0100               	movlb	0	; () banked
 11013  001BA2  07A5               	decf	___ftadd@sign& (0+255),f,b
 11014  001BA4  C0A5  F0A2         	movff	___ftadd@sign,??___ftadd
 11015  001BA8  0E07               	movlw	7
 11016  001BAA  0100               	movlb	0	; () banked
 11017  001BAC  17A2               	andwf	??___ftadd& (0+255),f,b
 11018  001BAE  B4D8               	btfsc	status,2,c
 11019  001BB0  D008               	goto	l5512
 11020  001BB2  D7E9               	goto	l5504
 11021  001BB4                     l5510:
 11022                           
 11023                           ; BSR set to: 0
 11024  001BB4  0100               	movlb	0	; () banked
 11025  001BB6  90D8               	bcf	status,0,c
 11026  001BB8  339E               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11027  001BBA  339D               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11028  001BBC  339C               	rrcf	___ftadd@f1& (0+255),f,b
 11029  001BBE  0100               	movlb	0	; () banked
 11030  001BC0  2BA7               	incf	___ftadd@exp1& (0+255),f,b
 11031  001BC2                     l5512:
 11032                           
 11033                           ; BSR set to: 0
 11034  001BC2  0100               	movlb	0	; () banked
 11035  001BC4  51A6               	movf	___ftadd@exp2& (0+255),w,b
 11036  001BC6  0100               	movlb	0	; () banked
 11037  001BC8  19A7               	xorwf	___ftadd@exp1& (0+255),w,b
 11038  001BCA  B4D8               	btfsc	status,2,c
 11039  001BCC  D02B               	goto	l1079
 11040  001BCE  D7F2               	goto	l5510
 11041  001BD0                     l5514:
 11042                           
 11043                           ; BSR set to: 0
 11044  001BD0  0100               	movlb	0	; () banked
 11045  001BD2  51A7               	movf	___ftadd@exp1& (0+255),w,b
 11046  001BD4  0100               	movlb	0	; () banked
 11047  001BD6  5DA6               	subwf	___ftadd@exp2& (0+255),w,b
 11048  001BD8  B0D8               	btfsc	status,0,c
 11049  001BDA  D024               	goto	l1079
 11050  001BDC                     l5516:
 11051                           
 11052                           ; BSR set to: 0
 11053  001BDC  0100               	movlb	0	; () banked
 11054  001BDE  90D8               	bcf	status,0,c
 11055  001BE0  379C               	rlcf	___ftadd@f1& (0+255),f,b
 11056  001BE2  379D               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11057  001BE4  379E               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11058  001BE6  0100               	movlb	0	; () banked
 11059  001BE8  07A7               	decf	___ftadd@exp1& (0+255),f,b
 11060                           
 11061                           ; BSR set to: 0
 11062  001BEA  0100               	movlb	0	; () banked
 11063  001BEC  51A7               	movf	___ftadd@exp1& (0+255),w,b
 11064  001BEE  0100               	movlb	0	; () banked
 11065  001BF0  19A6               	xorwf	___ftadd@exp2& (0+255),w,b
 11066  001BF2  B4D8               	btfsc	status,2,c
 11067  001BF4  D011               	goto	l5524
 11068                           
 11069                           ; BSR set to: 0
 11070  001BF6  0100               	movlb	0	; () banked
 11071  001BF8  07A5               	decf	___ftadd@sign& (0+255),f,b
 11072  001BFA  C0A5  F0A2         	movff	___ftadd@sign,??___ftadd
 11073  001BFE  0E07               	movlw	7
 11074  001C00  0100               	movlb	0	; () banked
 11075  001C02  17A2               	andwf	??___ftadd& (0+255),f,b
 11076  001C04  B4D8               	btfsc	status,2,c
 11077  001C06  D008               	goto	l5524
 11078  001C08  D7E9               	goto	l5516
 11079  001C0A                     l5522:
 11080                           
 11081                           ; BSR set to: 0
 11082  001C0A  0100               	movlb	0	; () banked
 11083  001C0C  90D8               	bcf	status,0,c
 11084  001C0E  33A1               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11085  001C10  33A0               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11086  001C12  339F               	rrcf	___ftadd@f2& (0+255),f,b
 11087  001C14  0100               	movlb	0	; () banked
 11088  001C16  2BA6               	incf	___ftadd@exp2& (0+255),f,b
 11089  001C18                     l5524:
 11090                           
 11091                           ; BSR set to: 0
 11092  001C18  0100               	movlb	0	; () banked
 11093  001C1A  51A6               	movf	___ftadd@exp2& (0+255),w,b
 11094  001C1C  0100               	movlb	0	; () banked
 11095  001C1E  19A7               	xorwf	___ftadd@exp1& (0+255),w,b
 11096  001C20  A4D8               	btfss	status,2,c
 11097  001C22  D7F3               	goto	l5522
 11098  001C24                     l1079:
 11099                           
 11100                           ; BSR set to: 0
 11101  001C24  0100               	movlb	0	; () banked
 11102  001C26  AFA5               	btfss	___ftadd@sign& (0+255),7,b
 11103  001C28  D012               	goto	l1088
 11104                           
 11105                           ; BSR set to: 0
 11106  001C2A  0EFF               	movlw	255
 11107  001C2C  0100               	movlb	0	; () banked
 11108  001C2E  1B9C               	xorwf	___ftadd@f1& (0+255),f,b
 11109  001C30  0EFF               	movlw	255
 11110  001C32  0100               	movlb	0	; () banked
 11111  001C34  1B9D               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11112  001C36  0EFF               	movlw	255
 11113  001C38  0100               	movlb	0	; () banked
 11114  001C3A  1B9E               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11115  001C3C  0E01               	movlw	1
 11116  001C3E  0100               	movlb	0	; () banked
 11117  001C40  279C               	addwf	___ftadd@f1& (0+255),f,b
 11118  001C42  0E00               	movlw	0
 11119  001C44  0100               	movlb	0	; () banked
 11120  001C46  239D               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11121  001C48  0E00               	movlw	0
 11122  001C4A  0100               	movlb	0	; () banked
 11123  001C4C  239E               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11124  001C4E                     l1088:
 11125                           
 11126                           ; BSR set to: 0
 11127  001C4E  0100               	movlb	0	; () banked
 11128  001C50  ADA5               	btfss	___ftadd@sign& (0+255),6,b
 11129  001C52  D012               	goto	l5530
 11130                           
 11131                           ; BSR set to: 0
 11132  001C54  0EFF               	movlw	255
 11133  001C56  0100               	movlb	0	; () banked
 11134  001C58  1B9F               	xorwf	___ftadd@f2& (0+255),f,b
 11135  001C5A  0EFF               	movlw	255
 11136  001C5C  0100               	movlb	0	; () banked
 11137  001C5E  1BA0               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11138  001C60  0EFF               	movlw	255
 11139  001C62  0100               	movlb	0	; () banked
 11140  001C64  1BA1               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11141  001C66  0E01               	movlw	1
 11142  001C68  0100               	movlb	0	; () banked
 11143  001C6A  279F               	addwf	___ftadd@f2& (0+255),f,b
 11144  001C6C  0E00               	movlw	0
 11145  001C6E  0100               	movlb	0	; () banked
 11146  001C70  23A0               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11147  001C72  0E00               	movlw	0
 11148  001C74  0100               	movlb	0	; () banked
 11149  001C76  23A1               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11150  001C78                     l5530:
 11151                           
 11152                           ; BSR set to: 0
 11153  001C78  0E00               	movlw	0
 11154  001C7A  0100               	movlb	0	; () banked
 11155  001C7C  6FA5               	movwf	___ftadd@sign& (0+255),b
 11156                           
 11157                           ; BSR set to: 0
 11158  001C7E  0100               	movlb	0	; () banked
 11159  001C80  519C               	movf	___ftadd@f1& (0+255),w,b
 11160  001C82  0100               	movlb	0	; () banked
 11161  001C84  279F               	addwf	___ftadd@f2& (0+255),f,b
 11162  001C86  0100               	movlb	0	; () banked
 11163  001C88  519D               	movf	(___ftadd@f1+1)& (0+255),w,b
 11164  001C8A  0100               	movlb	0	; () banked
 11165  001C8C  23A0               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11166  001C8E  0100               	movlb	0	; () banked
 11167  001C90  519E               	movf	(___ftadd@f1+2)& (0+255),w,b
 11168  001C92  0100               	movlb	0	; () banked
 11169  001C94  23A1               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11170                           
 11171                           ; BSR set to: 0
 11172  001C96  0100               	movlb	0	; () banked
 11173  001C98  AFA1               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11174  001C9A  D015               	goto	l5540
 11175                           
 11176                           ; BSR set to: 0
 11177  001C9C  0EFF               	movlw	255
 11178  001C9E  0100               	movlb	0	; () banked
 11179  001CA0  1B9F               	xorwf	___ftadd@f2& (0+255),f,b
 11180  001CA2  0EFF               	movlw	255
 11181  001CA4  0100               	movlb	0	; () banked
 11182  001CA6  1BA0               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11183  001CA8  0EFF               	movlw	255
 11184  001CAA  0100               	movlb	0	; () banked
 11185  001CAC  1BA1               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11186  001CAE  0E01               	movlw	1
 11187  001CB0  0100               	movlb	0	; () banked
 11188  001CB2  279F               	addwf	___ftadd@f2& (0+255),f,b
 11189  001CB4  0E00               	movlw	0
 11190  001CB6  0100               	movlb	0	; () banked
 11191  001CB8  23A0               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11192  001CBA  0E00               	movlw	0
 11193  001CBC  0100               	movlb	0	; () banked
 11194  001CBE  23A1               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11195                           
 11196                           ; BSR set to: 0
 11197  001CC0  0E01               	movlw	1
 11198  001CC2  0100               	movlb	0	; () banked
 11199  001CC4  6FA5               	movwf	___ftadd@sign& (0+255),b
 11200  001CC6                     l5540:
 11201                           
 11202                           ; BSR set to: 0
 11203  001CC6  C09F  F022         	movff	___ftadd@f2,___ftpack@arg
 11204  001CCA  C0A0  F023         	movff	___ftadd@f2+1,___ftpack@arg+1
 11205  001CCE  C0A1  F024         	movff	___ftadd@f2+2,___ftpack@arg+2
 11206  001CD2  C0A7  F025         	movff	___ftadd@exp1,___ftpack@exp
 11207  001CD6  C0A5  F026         	movff	___ftadd@sign,___ftpack@sign
 11208  001CDA  EC5E  F016         	call	___ftpack	;wreg free
 11209  001CDE  C022  F09C         	movff	?___ftpack,?___ftadd
 11210  001CE2  C023  F09D         	movff	?___ftpack+1,?___ftadd+1
 11211  001CE6  C024  F09E         	movff	?___ftpack+2,?___ftadd+2
 11212  001CEA  0012               	return	
 11213  001CEC                     __end_of___ftadd:
 11214                           	opt stack 0
 11215                           tblptru	equ	0xFF8
 11216                           tblptrh	equ	0xFF7
 11217                           tblptrl	equ	0xFF6
 11218                           tablat	equ	0xFF5
 11219                           prodh	equ	0xFF4
 11220                           prodl	equ	0xFF3
 11221                           intcon	equ	0xFF2
 11222                           postinc0	equ	0xFEE
 11223                           wreg	equ	0xFE8
 11224                           postdec1	equ	0xFE5
 11225                           fsr1l	equ	0xFE1
 11226                           indf2	equ	0xFDF
 11227                           postinc2	equ	0xFDE
 11228                           postdec2	equ	0xFDD
 11229                           fsr2h	equ	0xFDA
 11230                           fsr2l	equ	0xFD9
 11231                           status	equ	0xFD8
 11232                           
 11233 ;; *************** function ___awtoft *****************
 11234 ;; Defined at:
 11235 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11236 ;; Parameters:    Size  Location     Type
 11237 ;;  c               2   41[COMRAM] int 
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;  sign            1   44[COMRAM] unsigned char 
 11240 ;; Return value:  Size  Location     Type
 11241 ;;                  3   41[COMRAM] float 
 11242 ;; Registers used:
 11243 ;;		wreg, status,2, status,0, cstack
 11244 ;; Tracked objects:
 11245 ;;		On entry : 0/0
 11246 ;;		On exit  : 0/0
 11247 ;;		Unchanged: 0/0
 11248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11249 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11252 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11253 ;;Total ram usage:        4 bytes
 11254 ;; Hardware stack levels used:    1
 11255 ;; Hardware stack levels required when called:    4
 11256 ;; This function calls:
 11257 ;;		___ftpack
 11258 ;; This function is called by:
 11259 ;;		_sortBattery
 11260 ;;		_angleToPulse
 11261 ;;		_testFrequency
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           	psect	text41
 11266  0035A4                     __ptext41:
 11267                           	opt stack 0
 11268  0035A4                     ___awtoft:
 11269                           	opt stack 23
 11270                           
 11271                           ;incstack = 0
 11272  0035A4  0E00               	movlw	0
 11273  0035A6  6E2D               	movwf	___awtoft@sign,c
 11274  0035A8  AE2B               	btfss	___awtoft@c+1,7,c
 11275  0035AA  D006               	goto	l5946
 11276  0035AC  6C2A               	negf	___awtoft@c,c
 11277  0035AE  1E2B               	comf	___awtoft@c+1,f,c
 11278  0035B0  B0D8               	btfsc	status,0,c
 11279  0035B2  2A2B               	incf	___awtoft@c+1,f,c
 11280  0035B4  0E01               	movlw	1
 11281  0035B6  6E2D               	movwf	___awtoft@sign,c
 11282  0035B8                     l5946:
 11283  0035B8  C02A  F022         	movff	___awtoft@c,___ftpack@arg
 11284  0035BC  C02B  F023         	movff	___awtoft@c+1,___ftpack@arg+1
 11285  0035C0  6A24               	clrf	___ftpack@arg+2,c
 11286  0035C2  0E8E               	movlw	142
 11287  0035C4  6E25               	movwf	___ftpack@exp,c
 11288  0035C6  C02D  F026         	movff	___awtoft@sign,___ftpack@sign
 11289  0035CA  EC5E  F016         	call	___ftpack	;wreg free
 11290  0035CE  C022  F02A         	movff	?___ftpack,?___awtoft
 11291  0035D2  C023  F02B         	movff	?___ftpack+1,?___awtoft+1
 11292  0035D6  C024  F02C         	movff	?___ftpack+2,?___awtoft+2
 11293  0035DA  0012               	return	
 11294  0035DC                     __end_of___awtoft:
 11295                           	opt stack 0
 11296                           tblptru	equ	0xFF8
 11297                           tblptrh	equ	0xFF7
 11298                           tblptrl	equ	0xFF6
 11299                           tablat	equ	0xFF5
 11300                           prodh	equ	0xFF4
 11301                           prodl	equ	0xFF3
 11302                           intcon	equ	0xFF2
 11303                           postinc0	equ	0xFEE
 11304                           wreg	equ	0xFE8
 11305                           postdec1	equ	0xFE5
 11306                           fsr1l	equ	0xFE1
 11307                           indf2	equ	0xFDF
 11308                           postinc2	equ	0xFDE
 11309                           postdec2	equ	0xFDD
 11310                           fsr2h	equ	0xFDA
 11311                           fsr2l	equ	0xFD9
 11312                           status	equ	0xFD8
 11313                           
 11314 ;; *************** function ___altoft *****************
 11315 ;; Defined at:
 11316 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11317 ;; Parameters:    Size  Location     Type
 11318 ;;  c               4   41[COMRAM] long 
 11319 ;; Auto vars:     Size  Location     Type
 11320 ;;  sign            1   50[COMRAM] unsigned char 
 11321 ;;  exp             1   49[COMRAM] unsigned char 
 11322 ;; Return value:  Size  Location     Type
 11323 ;;                  3   41[COMRAM] float 
 11324 ;; Registers used:
 11325 ;;		wreg, status,2, status,0, cstack
 11326 ;; Tracked objects:
 11327 ;;		On entry : 0/0
 11328 ;;		On exit  : 0/0
 11329 ;;		Unchanged: 0/0
 11330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11331 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11332 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11333 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11334 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11335 ;;Total ram usage:       10 bytes
 11336 ;; Hardware stack levels used:    1
 11337 ;; Hardware stack levels required when called:    4
 11338 ;; This function calls:
 11339 ;;		___ftpack
 11340 ;; This function is called by:
 11341 ;;		_sortBattery
 11342 ;;		_angleToPulse
 11343 ;; This function uses a non-reentrant model
 11344 ;;
 11345                           
 11346                           	psect	text42
 11347  00313A                     __ptext42:
 11348                           	opt stack 0
 11349  00313A                     ___altoft:
 11350                           	opt stack 23
 11351                           
 11352                           ;incstack = 0
 11353  00313A  0E00               	movlw	0
 11354  00313C  6E33               	movwf	___altoft@sign,c
 11355  00313E  0E8E               	movlw	142
 11356  003140  6E32               	movwf	___altoft@exp,c
 11357  003142  AE2D               	btfss	___altoft@c+3,7,c
 11358  003144  D011               	goto	l5878
 11359  003146  1E2D               	comf	___altoft@c+3,f,c
 11360  003148  1E2C               	comf	___altoft@c+2,f,c
 11361  00314A  1E2B               	comf	___altoft@c+1,f,c
 11362  00314C  6C2A               	negf	___altoft@c,c
 11363  00314E  0E00               	movlw	0
 11364  003150  222B               	addwfc	___altoft@c+1,f,c
 11365  003152  222C               	addwfc	___altoft@c+2,f,c
 11366  003154  222D               	addwfc	___altoft@c+3,f,c
 11367  003156  0E01               	movlw	1
 11368  003158  6E33               	movwf	___altoft@sign,c
 11369  00315A  D006               	goto	l5878
 11370  00315C                     l5876:
 11371  00315C  90D8               	bcf	status,0,c
 11372  00315E  322D               	rrcf	___altoft@c+3,f,c
 11373  003160  322C               	rrcf	___altoft@c+2,f,c
 11374  003162  322B               	rrcf	___altoft@c+1,f,c
 11375  003164  322A               	rrcf	___altoft@c,f,c
 11376  003166  2A32               	incf	___altoft@exp,f,c
 11377  003168                     l5878:
 11378  003168  0E00               	movlw	0
 11379  00316A  142A               	andwf	___altoft@c,w,c
 11380  00316C  6E2E               	movwf	??___altoft& (0+255),c
 11381  00316E  0E00               	movlw	0
 11382  003170  142B               	andwf	___altoft@c+1,w,c
 11383  003172  6E2F               	movwf	(??___altoft+1)& (0+255),c
 11384  003174  0E00               	movlw	0
 11385  003176  142C               	andwf	___altoft@c+2,w,c
 11386  003178  6E30               	movwf	(??___altoft+2)& (0+255),c
 11387  00317A  0EFF               	movlw	255
 11388  00317C  142D               	andwf	___altoft@c+3,w,c
 11389  00317E  6E31               	movwf	(??___altoft+3)& (0+255),c
 11390  003180  502E               	movf	??___altoft,w,c
 11391  003182  102F               	iorwf	??___altoft+1,w,c
 11392  003184  1030               	iorwf	??___altoft+2,w,c
 11393  003186  1031               	iorwf	??___altoft+3,w,c
 11394  003188  A4D8               	btfss	status,2,c
 11395  00318A  D7E8               	goto	l5876
 11396  00318C  C02A  F022         	movff	___altoft@c,___ftpack@arg
 11397  003190  C02B  F023         	movff	___altoft@c+1,___ftpack@arg+1
 11398  003194  C02C  F024         	movff	___altoft@c+2,___ftpack@arg+2
 11399  003198  C032  F025         	movff	___altoft@exp,___ftpack@exp
 11400  00319C  C033  F026         	movff	___altoft@sign,___ftpack@sign
 11401  0031A0  EC5E  F016         	call	___ftpack	;wreg free
 11402  0031A4  C022  F02A         	movff	?___ftpack,?___altoft
 11403  0031A8  C023  F02B         	movff	?___ftpack+1,?___altoft+1
 11404  0031AC  C024  F02C         	movff	?___ftpack+2,?___altoft+2
 11405  0031B0  0012               	return	
 11406  0031B2                     __end_of___altoft:
 11407                           	opt stack 0
 11408                           tblptru	equ	0xFF8
 11409                           tblptrh	equ	0xFF7
 11410                           tblptrl	equ	0xFF6
 11411                           tablat	equ	0xFF5
 11412                           prodh	equ	0xFF4
 11413                           prodl	equ	0xFF3
 11414                           intcon	equ	0xFF2
 11415                           postinc0	equ	0xFEE
 11416                           wreg	equ	0xFE8
 11417                           postdec1	equ	0xFE5
 11418                           fsr1l	equ	0xFE1
 11419                           indf2	equ	0xFDF
 11420                           postinc2	equ	0xFDE
 11421                           postdec2	equ	0xFDD
 11422                           fsr2h	equ	0xFDA
 11423                           fsr2l	equ	0xFD9
 11424                           status	equ	0xFD8
 11425                           
 11426 ;; *************** function ___ftpack *****************
 11427 ;; Defined at:
 11428 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;  arg             3   33[COMRAM] unsigned um
 11431 ;;  exp             1   36[COMRAM] unsigned char 
 11432 ;;  sign            1   37[COMRAM] unsigned char 
 11433 ;; Auto vars:     Size  Location     Type
 11434 ;;		None
 11435 ;; Return value:  Size  Location     Type
 11436 ;;                  3   33[COMRAM] float 
 11437 ;; Registers used:
 11438 ;;		wreg, status,2, status,0
 11439 ;; Tracked objects:
 11440 ;;		On entry : 0/0
 11441 ;;		On exit  : 0/0
 11442 ;;		Unchanged: 0/0
 11443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11444 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11448 ;;Total ram usage:        8 bytes
 11449 ;; Hardware stack levels used:    1
 11450 ;; Hardware stack levels required when called:    3
 11451 ;; This function calls:
 11452 ;;		Nothing
 11453 ;; This function is called by:
 11454 ;;		___altoft
 11455 ;;		___awtoft
 11456 ;;		___ftadd
 11457 ;;		___ftdiv
 11458 ;;		___ftmul
 11459 ;;		___lltoft
 11460 ;; This function uses a non-reentrant model
 11461 ;;
 11462                           
 11463                           	psect	text43
 11464  002CBC                     __ptext43:
 11465                           	opt stack 0
 11466  002CBC                     ___ftpack:
 11467                           	opt stack 23
 11468                           
 11469                           ;incstack = 0
 11470  002CBC  5025               	movf	___ftpack@exp,w,c
 11471  002CBE  B4D8               	btfsc	status,2,c
 11472  002CC0  D005               	goto	l5434
 11473  002CC2  5022               	movf	___ftpack@arg,w,c
 11474  002CC4  1023               	iorwf	___ftpack@arg+1,w,c
 11475  002CC6  1024               	iorwf	___ftpack@arg+2,w,c
 11476  002CC8  A4D8               	btfss	status,2,c
 11477  002CCA  D00C               	goto	l5440
 11478  002CCC                     l5434:
 11479  002CCC  0E00               	movlw	0
 11480  002CCE  6E22               	movwf	?___ftpack,c
 11481  002CD0  0E00               	movlw	0
 11482  002CD2  6E23               	movwf	?___ftpack+1,c
 11483  002CD4  0E00               	movlw	0
 11484  002CD6  6E24               	movwf	?___ftpack+2,c
 11485  002CD8  0012               	return	
 11486  002CDA                     l5438:
 11487  002CDA  2A25               	incf	___ftpack@exp,f,c
 11488  002CDC  90D8               	bcf	status,0,c
 11489  002CDE  3224               	rrcf	___ftpack@arg+2,f,c
 11490  002CE0  3223               	rrcf	___ftpack@arg+1,f,c
 11491  002CE2  3222               	rrcf	___ftpack@arg,f,c
 11492  002CE4                     l5440:
 11493  002CE4  0E00               	movlw	0
 11494  002CE6  1422               	andwf	___ftpack@arg,w,c
 11495  002CE8  6E27               	movwf	??___ftpack& (0+255),c
 11496  002CEA  0E00               	movlw	0
 11497  002CEC  1423               	andwf	___ftpack@arg+1,w,c
 11498  002CEE  6E28               	movwf	(??___ftpack+1)& (0+255),c
 11499  002CF0  0EFE               	movlw	254
 11500  002CF2  1424               	andwf	___ftpack@arg+2,w,c
 11501  002CF4  6E29               	movwf	(??___ftpack+2)& (0+255),c
 11502  002CF6  5027               	movf	??___ftpack,w,c
 11503  002CF8  1028               	iorwf	??___ftpack+1,w,c
 11504  002CFA  1029               	iorwf	??___ftpack+2,w,c
 11505  002CFC  B4D8               	btfsc	status,2,c
 11506  002CFE  D00C               	goto	l5446
 11507  002D00  D7EC               	goto	l5438
 11508  002D02                     l5442:
 11509  002D02  2A25               	incf	___ftpack@exp,f,c
 11510  002D04  0E01               	movlw	1
 11511  002D06  2622               	addwf	___ftpack@arg,f,c
 11512  002D08  0E00               	movlw	0
 11513  002D0A  2223               	addwfc	___ftpack@arg+1,f,c
 11514  002D0C  0E00               	movlw	0
 11515  002D0E  2224               	addwfc	___ftpack@arg+2,f,c
 11516  002D10  90D8               	bcf	status,0,c
 11517  002D12  3224               	rrcf	___ftpack@arg+2,f,c
 11518  002D14  3223               	rrcf	___ftpack@arg+1,f,c
 11519  002D16  3222               	rrcf	___ftpack@arg,f,c
 11520  002D18                     l5446:
 11521  002D18  0E00               	movlw	0
 11522  002D1A  1422               	andwf	___ftpack@arg,w,c
 11523  002D1C  6E27               	movwf	??___ftpack& (0+255),c
 11524  002D1E  0E00               	movlw	0
 11525  002D20  1423               	andwf	___ftpack@arg+1,w,c
 11526  002D22  6E28               	movwf	(??___ftpack+1)& (0+255),c
 11527  002D24  0EFF               	movlw	255
 11528  002D26  1424               	andwf	___ftpack@arg+2,w,c
 11529  002D28  6E29               	movwf	(??___ftpack+2)& (0+255),c
 11530  002D2A  5027               	movf	??___ftpack,w,c
 11531  002D2C  1028               	iorwf	??___ftpack+1,w,c
 11532  002D2E  1029               	iorwf	??___ftpack+2,w,c
 11533  002D30  B4D8               	btfsc	status,2,c
 11534  002D32  D006               	goto	l5450
 11535  002D34  D7E6               	goto	l5442
 11536  002D36                     l5448:
 11537  002D36  0625               	decf	___ftpack@exp,f,c
 11538  002D38  90D8               	bcf	status,0,c
 11539  002D3A  3622               	rlcf	___ftpack@arg,f,c
 11540  002D3C  3623               	rlcf	___ftpack@arg+1,f,c
 11541  002D3E  3624               	rlcf	___ftpack@arg+2,f,c
 11542  002D40                     l5450:
 11543  002D40  BE23               	btfsc	___ftpack@arg+1,7,c
 11544  002D42  D003               	goto	l1041
 11545  002D44  0E02               	movlw	2
 11546  002D46  6025               	cpfslt	___ftpack@exp,c
 11547  002D48  D7F6               	goto	l5448
 11548  002D4A                     l1041:
 11549  002D4A  A025               	btfss	___ftpack@exp,0,c
 11550  002D4C  9E23               	bcf	___ftpack@arg+1,7,c
 11551  002D4E  90D8               	bcf	status,0,c
 11552  002D50  3225               	rrcf	___ftpack@exp,f,c
 11553  002D52  5025               	movf	___ftpack@exp,w,c
 11554  002D54  1224               	iorwf	___ftpack@arg+2,f,c
 11555  002D56  5026               	movf	___ftpack@sign,w,c
 11556  002D58  A4D8               	btfss	status,2,c
 11557  002D5A  8E24               	bsf	___ftpack@arg+2,7,c
 11558  002D5C  C022  F022         	movff	___ftpack@arg,?___ftpack
 11559  002D60  C023  F023         	movff	___ftpack@arg+1,?___ftpack+1
 11560  002D64  C024  F024         	movff	___ftpack@arg+2,?___ftpack+2
 11561  002D68  0012               	return	
 11562  002D6A                     __end_of___ftpack:
 11563                           	opt stack 0
 11564                           tblptru	equ	0xFF8
 11565                           tblptrh	equ	0xFF7
 11566                           tblptrl	equ	0xFF6
 11567                           tablat	equ	0xFF5
 11568                           prodh	equ	0xFF4
 11569                           prodl	equ	0xFF3
 11570                           intcon	equ	0xFF2
 11571                           postinc0	equ	0xFEE
 11572                           wreg	equ	0xFE8
 11573                           postdec1	equ	0xFE5
 11574                           fsr1l	equ	0xFE1
 11575                           indf2	equ	0xFDF
 11576                           postinc2	equ	0xFDE
 11577                           postdec2	equ	0xFDD
 11578                           fsr2h	equ	0xFDA
 11579                           fsr2l	equ	0xFD9
 11580                           status	equ	0xFD8
 11581                           
 11582 ;; *************** function _initTimer *****************
 11583 ;; Defined at:
 11584 ;;		line 52 in file "timer.c"
 11585 ;; Parameters:    Size  Location     Type
 11586 ;;  timer           2   33[COMRAM] int 
 11587 ;; Auto vars:     Size  Location     Type
 11588 ;;		None
 11589 ;; Return value:  Size  Location     Type
 11590 ;;                  1    wreg      void 
 11591 ;; Registers used:
 11592 ;;		wreg, status,2, status,0
 11593 ;; Tracked objects:
 11594 ;;		On entry : 0/0
 11595 ;;		On exit  : 0/0
 11596 ;;		Unchanged: 0/0
 11597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11598 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11601 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11602 ;;Total ram usage:        4 bytes
 11603 ;; Hardware stack levels used:    1
 11604 ;; Hardware stack levels required when called:    3
 11605 ;; This function calls:
 11606 ;;		Nothing
 11607 ;; This function is called by:
 11608 ;;		_initServo
 11609 ;;		_testFrequency
 11610 ;; This function uses a non-reentrant model
 11611 ;;
 11612                           
 11613                           	psect	text44
 11614  00349E                     __ptext44:
 11615                           	opt stack 0
 11616  00349E                     _initTimer:
 11617                           	opt stack 26
 11618                           
 11619                           ;timer.c: 53: switch(timer){
 11620                           
 11621                           ;incstack = 0
 11622  00349E  D00F               	goto	l4696
 11623  0034A0                     l4678:
 11624                           
 11625                           ;timer.c: 55: T0CON = 0;
 11626  0034A0  0E00               	movlw	0
 11627  0034A2  6ED5               	movwf	4053,c	;volatile
 11628                           
 11629                           ;timer.c: 56: T0CON |= 1<<3;
 11630  0034A4  86D5               	bsf	4053,3,c	;volatile
 11631                           
 11632                           ;timer.c: 58: TMR0IE = 1;
 11633  0034A6  8AF2               	bsf	intcon,5,c	;volatile
 11634                           
 11635                           ;timer.c: 59: break;
 11636  0034A8  D01C               	goto	l398
 11637  0034AA                     l4684:
 11638                           
 11639                           ;timer.c: 61: T1CON = 0;
 11640  0034AA  0E00               	movlw	0
 11641  0034AC  6ECD               	movwf	4045,c	;volatile
 11642                           
 11643                           ;timer.c: 63: T1CON |= 0b11<<4;
 11644  0034AE  0E30               	movlw	48
 11645  0034B0  12CD               	iorwf	4045,f,c	;volatile
 11646                           
 11647                           ;timer.c: 64: TMR1IE = 1;
 11648  0034B2  809D               	bsf	3997,0,c	;volatile
 11649                           
 11650                           ;timer.c: 65: break;
 11651  0034B4  D016               	goto	l398
 11652  0034B6                     l4690:
 11653                           
 11654                           ;timer.c: 67: T3CON = 0;
 11655  0034B6  0E00               	movlw	0
 11656  0034B8  6EB1               	movwf	4017,c	;volatile
 11657                           
 11658                           ;timer.c: 68: TMR3IE = 1;
 11659  0034BA  82A0               	bsf	4000,1,c	;volatile
 11660                           
 11661                           ;timer.c: 70: }
 11662                           
 11663                           ;timer.c: 69: break;
 11664  0034BC  D012               	goto	l398
 11665  0034BE                     l4696:
 11666  0034BE  C022  F024         	movff	initTimer@timer,??_initTimer
 11667  0034C2  C023  F025         	movff	initTimer@timer+1,??_initTimer+1
 11668                           
 11669                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11670                           ; Switch size 1, requested type "space"
 11671                           ; Number of cases is 1, Range of values is 0 to 0
 11672                           ; switch strategies available:
 11673                           ; Name         Instructions Cycles
 11674                           ; simple_byte            4     3 (average)
 11675                           ;	Chosen strategy is simple_byte
 11676  0034C6  5025               	movf	??_initTimer+1,w,c
 11677  0034C8  0A00               	xorlw	0	; case 0
 11678  0034CA  A4D8               	btfss	status,2,c
 11679  0034CC  D00A               	goto	l398
 11680                           
 11681                           ; Switch size 1, requested type "space"
 11682                           ; Number of cases is 3, Range of values is 0 to 3
 11683                           ; switch strategies available:
 11684                           ; Name         Instructions Cycles
 11685                           ; simple_byte           10     6 (average)
 11686                           ;	Chosen strategy is simple_byte
 11687  0034CE  5024               	movf	??_initTimer,w,c
 11688  0034D0  0A00               	xorlw	0	; case 0
 11689  0034D2  B4D8               	btfsc	status,2,c
 11690  0034D4  D7E5               	goto	l4678
 11691  0034D6  0A01               	xorlw	1	; case 1
 11692  0034D8  B4D8               	btfsc	status,2,c
 11693  0034DA  D7E7               	goto	l4684
 11694  0034DC  0A02               	xorlw	2	; case 3
 11695  0034DE  B4D8               	btfsc	status,2,c
 11696  0034E0  D7EA               	goto	l4690
 11697  0034E2                     l398:
 11698                           
 11699                           ;timer.c: 71: PEIE = 1;
 11700  0034E2  8CF2               	bsf	intcon,6,c	;volatile
 11701                           
 11702                           ;timer.c: 72: (INTCONbits.GIE = 1);
 11703  0034E4  8EF2               	bsf	intcon,7,c	;volatile
 11704  0034E6  0012               	return		;funcret
 11705  0034E8                     __end_of_initTimer:
 11706                           	opt stack 0
 11707                           tblptru	equ	0xFF8
 11708                           tblptrh	equ	0xFF7
 11709                           tblptrl	equ	0xFF6
 11710                           tablat	equ	0xFF5
 11711                           prodh	equ	0xFF4
 11712                           prodl	equ	0xFF3
 11713                           intcon	equ	0xFF2
 11714                           postinc0	equ	0xFEE
 11715                           wreg	equ	0xFE8
 11716                           postdec1	equ	0xFE5
 11717                           fsr1l	equ	0xFE1
 11718                           indf2	equ	0xFDF
 11719                           postinc2	equ	0xFDE
 11720                           postdec2	equ	0xFDD
 11721                           fsr2h	equ	0xFDA
 11722                           fsr2l	equ	0xFD9
 11723                           status	equ	0xFD8
 11724                           
 11725 ;; *************** function _initLCD *****************
 11726 ;; Defined at:
 11727 ;;		line 15 in file "lcd.c"
 11728 ;; Parameters:    Size  Location     Type
 11729 ;;		None
 11730 ;; Auto vars:     Size  Location     Type
 11731 ;;		None
 11732 ;; Return value:  Size  Location     Type
 11733 ;;                  1    wreg      void 
 11734 ;; Registers used:
 11735 ;;		wreg, status,2, status,0, cstack
 11736 ;; Tracked objects:
 11737 ;;		On entry : 0/0
 11738 ;;		On exit  : 0/0
 11739 ;;		Unchanged: 0/0
 11740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11743 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11744 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11745 ;;Total ram usage:        1 bytes
 11746 ;; Hardware stack levels used:    1
 11747 ;; Hardware stack levels required when called:    5
 11748 ;; This function calls:
 11749 ;;		_lcdInst
 11750 ;; This function is called by:
 11751 ;;		_main
 11752 ;; This function uses a non-reentrant model
 11753 ;;
 11754                           
 11755                           	psect	text45
 11756  0034E8                     __ptext45:
 11757                           	opt stack 0
 11758  0034E8                     _initLCD:
 11759                           	opt stack 25
 11760                           
 11761                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 11762                           
 11763                           ;incstack = 0
 11764  0034E8  0E31               	movlw	49
 11765  0034EA  6E26               	movwf	??_initLCD& (0+255),c
 11766  0034EC  0EB2               	movlw	178
 11767  0034EE                     u7467:
 11768  0034EE  2EE8               	decfsz	wreg,f,c
 11769  0034F0  D7FE               	bra	u7467
 11770  0034F2  2E26               	decfsz	??_initLCD& (0+255),f,c
 11771  0034F4  D7FC               	bra	u7467
 11772  0034F6  D000               	nop2	
 11773                           
 11774                           ;lcd.c: 18: lcdInst(0b00110011);
 11775  0034F8  0E33               	movlw	51
 11776  0034FA  ECC0  F01B         	call	_lcdInst
 11777                           
 11778                           ;lcd.c: 19: lcdInst(0b00110010);
 11779  0034FE  0E32               	movlw	50
 11780  003500  ECC0  F01B         	call	_lcdInst
 11781                           
 11782                           ;lcd.c: 20: lcdInst(0b00101000);
 11783  003504  0E28               	movlw	40
 11784  003506  ECC0  F01B         	call	_lcdInst
 11785                           
 11786                           ;lcd.c: 21: lcdInst(0b00001111);
 11787  00350A  0E0F               	movlw	15
 11788  00350C  ECC0  F01B         	call	_lcdInst
 11789                           
 11790                           ;lcd.c: 22: lcdInst(0b00000110);
 11791  003510  0E06               	movlw	6
 11792  003512  ECC0  F01B         	call	_lcdInst
 11793                           
 11794                           ;lcd.c: 23: lcdInst(0b00000001);
 11795  003516  0E01               	movlw	1
 11796  003518  ECC0  F01B         	call	_lcdInst
 11797                           
 11798                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 11799  00351C  0E31               	movlw	49
 11800  00351E  6E26               	movwf	??_initLCD& (0+255),c
 11801  003520  0EB2               	movlw	178
 11802  003522                     u7477:
 11803  003522  2EE8               	decfsz	wreg,f,c
 11804  003524  D7FE               	bra	u7477
 11805  003526  2E26               	decfsz	??_initLCD& (0+255),f,c
 11806  003528  D7FC               	bra	u7477
 11807  00352A  D000               	nop2	
 11808  00352C  0012               	return		;funcret
 11809  00352E                     __end_of_initLCD:
 11810                           	opt stack 0
 11811                           tblptru	equ	0xFF8
 11812                           tblptrh	equ	0xFF7
 11813                           tblptrl	equ	0xFF6
 11814                           tablat	equ	0xFF5
 11815                           prodh	equ	0xFF4
 11816                           prodl	equ	0xFF3
 11817                           intcon	equ	0xFF2
 11818                           postinc0	equ	0xFEE
 11819                           wreg	equ	0xFE8
 11820                           postdec1	equ	0xFE5
 11821                           fsr1l	equ	0xFE1
 11822                           indf2	equ	0xFDF
 11823                           postinc2	equ	0xFDE
 11824                           postdec2	equ	0xFDD
 11825                           fsr2h	equ	0xFDA
 11826                           fsr2l	equ	0xFD9
 11827                           status	equ	0xFD8
 11828                           
 11829 ;; *************** function _lcdInst *****************
 11830 ;; Defined at:
 11831 ;;		line 27 in file "lcd.c"
 11832 ;; Parameters:    Size  Location     Type
 11833 ;;  data            1    wreg     unsigned char 
 11834 ;; Auto vars:     Size  Location     Type
 11835 ;;  data            1   36[COMRAM] unsigned char 
 11836 ;; Return value:  Size  Location     Type
 11837 ;;                  1    wreg      void 
 11838 ;; Registers used:
 11839 ;;		wreg, status,2, status,0, cstack
 11840 ;; Tracked objects:
 11841 ;;		On entry : 0/0
 11842 ;;		On exit  : 0/0
 11843 ;;		Unchanged: 0/0
 11844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11849 ;;Total ram usage:        2 bytes
 11850 ;; Hardware stack levels used:    1
 11851 ;; Hardware stack levels required when called:    4
 11852 ;; This function calls:
 11853 ;;		_lcdNibble
 11854 ;; This function is called by:
 11855 ;;		_initLCD
 11856 ;;		_lcdHome
 11857 ;;		_lcdClear
 11858 ;;		_lcdNewline
 11859 ;; This function uses a non-reentrant model
 11860 ;;
 11861                           
 11862                           	psect	text46
 11863  003780                     __ptext46:
 11864                           	opt stack 0
 11865  003780                     _lcdInst:
 11866                           	opt stack 22
 11867                           
 11868                           ;incstack = 0
 11869                           ;lcdInst@data stored from wreg
 11870  003780  6E25               	movwf	lcdInst@data,c
 11871                           
 11872                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 11873  003782  948C               	bcf	3980,2,c	;volatile
 11874                           
 11875                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 11876  003784  0E74               	movlw	116
 11877  003786                     u7487:
 11878  003786  2EE8               	decfsz	wreg,f,c
 11879  003788  D7FE               	bra	u7487
 11880  00378A  D000               	nop2	
 11881                           
 11882                           ;lcd.c: 30: lcdNibble(data);
 11883  00378C  5025               	movf	lcdInst@data,w,c
 11884  00378E  EC7C  F019         	call	_lcdNibble
 11885                           
 11886                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 11887  003792  0E04               	movlw	4
 11888  003794  6E24               	movwf	??_lcdInst& (0+255),c
 11889  003796  0E3E               	movlw	62
 11890  003798                     u7497:
 11891  003798  2EE8               	decfsz	wreg,f,c
 11892  00379A  D7FE               	bra	u7497
 11893  00379C  2E24               	decfsz	??_lcdInst& (0+255),f,c
 11894  00379E  D7FC               	bra	u7497
 11895  0037A0  0012               	return		;funcret
 11896  0037A2                     __end_of_lcdInst:
 11897                           	opt stack 0
 11898                           tblptru	equ	0xFF8
 11899                           tblptrh	equ	0xFF7
 11900                           tblptrl	equ	0xFF6
 11901                           tablat	equ	0xFF5
 11902                           prodh	equ	0xFF4
 11903                           prodl	equ	0xFF3
 11904                           intcon	equ	0xFF2
 11905                           postinc0	equ	0xFEE
 11906                           wreg	equ	0xFE8
 11907                           postdec1	equ	0xFE5
 11908                           fsr1l	equ	0xFE1
 11909                           indf2	equ	0xFDF
 11910                           postinc2	equ	0xFDE
 11911                           postdec2	equ	0xFDD
 11912                           fsr2h	equ	0xFDA
 11913                           fsr2l	equ	0xFD9
 11914                           status	equ	0xFD8
 11915                           
 11916 ;; *************** function _lcdNibble *****************
 11917 ;; Defined at:
 11918 ;;		line 46 in file "lcd.c"
 11919 ;; Parameters:    Size  Location     Type
 11920 ;;  data            1    wreg     unsigned char 
 11921 ;; Auto vars:     Size  Location     Type
 11922 ;;  data            1   34[COMRAM] unsigned char 
 11923 ;;  temp            1   33[COMRAM] unsigned char 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;                  1    wreg      void 
 11926 ;; Registers used:
 11927 ;;		wreg, status,2, status,0
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11936 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11937 ;;Total ram usage:        2 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    3
 11940 ;; This function calls:
 11941 ;;		Nothing
 11942 ;; This function is called by:
 11943 ;;		_lcdInst
 11944 ;;		_putch
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           	psect	text47
 11949  0032F8                     __ptext47:
 11950                           	opt stack 0
 11951  0032F8                     _lcdNibble:
 11952                           	opt stack 24
 11953                           
 11954                           ;incstack = 0
 11955                           ;lcdNibble@data stored from wreg
 11956  0032F8  6E23               	movwf	lcdNibble@data,c
 11957                           
 11958                           ;lcd.c: 48: char temp = data & 0xF0;
 11959  0032FA  5023               	movf	lcdNibble@data,w,c
 11960  0032FC  0BF0               	andlw	240
 11961  0032FE  6E22               	movwf	lcdNibble@temp,c
 11962                           
 11963                           ;lcd.c: 49: LATD = LATD & 0x0F;
 11964  003300  508C               	movf	3980,w,c	;volatile
 11965  003302  0B0F               	andlw	15
 11966  003304  6E8C               	movwf	3980,c	;volatile
 11967                           
 11968                           ;lcd.c: 50: LATD = temp | LATD;
 11969  003306  5022               	movf	lcdNibble@temp,w,c
 11970  003308  108C               	iorwf	3980,w,c	;volatile
 11971  00330A  6E8C               	movwf	3980,c	;volatile
 11972                           
 11973                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 11974  00330C  968C               	bcf	3980,3,c	;volatile
 11975                           
 11976                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11977  00330E  0ED6               	movlw	214
 11978  003310                     u7507:
 11979  003310  D000               	nop2	
 11980  003312  D000               	nop2	
 11981  003314  2EE8               	decfsz	wreg,f,c
 11982  003316  D7FC               	bra	u7507
 11983  003318  D000               	nop2	
 11984                           
 11985                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 11986  00331A  868C               	bsf	3980,3,c	;volatile
 11987                           
 11988                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11989  00331C  0ED6               	movlw	214
 11990  00331E                     u7517:
 11991  00331E  D000               	nop2	
 11992  003320  D000               	nop2	
 11993  003322  2EE8               	decfsz	wreg,f,c
 11994  003324  D7FC               	bra	u7517
 11995  003326  D000               	nop2	
 11996                           
 11997                           ;lcd.c: 58: data = data << 4;
 11998  003328  3823               	swapf	lcdNibble@data,w,c
 11999  00332A  0BF0               	andlw	240
 12000  00332C  6E23               	movwf	lcdNibble@data,c
 12001                           
 12002                           ;lcd.c: 60: temp = data & 0xF0;
 12003  00332E  5023               	movf	lcdNibble@data,w,c
 12004  003330  0BF0               	andlw	240
 12005  003332  6E22               	movwf	lcdNibble@temp,c
 12006                           
 12007                           ;lcd.c: 61: LATD = LATD & 0x0F;
 12008  003334  508C               	movf	3980,w,c	;volatile
 12009  003336  0B0F               	andlw	15
 12010  003338  6E8C               	movwf	3980,c	;volatile
 12011                           
 12012                           ;lcd.c: 62: LATD = temp | LATD;
 12013  00333A  5022               	movf	lcdNibble@temp,w,c
 12014  00333C  108C               	iorwf	3980,w,c	;volatile
 12015  00333E  6E8C               	movwf	3980,c	;volatile
 12016                           
 12017                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 12018  003340  968C               	bcf	3980,3,c	;volatile
 12019                           
 12020                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12021  003342  0ED6               	movlw	214
 12022  003344                     u7527:
 12023  003344  D000               	nop2	
 12024  003346  D000               	nop2	
 12025  003348  2EE8               	decfsz	wreg,f,c
 12026  00334A  D7FC               	bra	u7527
 12027  00334C  D000               	nop2	
 12028                           
 12029                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 12030  00334E  868C               	bsf	3980,3,c	;volatile
 12031                           
 12032                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12033  003350  0ED6               	movlw	214
 12034  003352                     u7537:
 12035  003352  D000               	nop2	
 12036  003354  D000               	nop2	
 12037  003356  2EE8               	decfsz	wreg,f,c
 12038  003358  D7FC               	bra	u7537
 12039  00335A  D000               	nop2	
 12040  00335C  0012               	return		;funcret
 12041  00335E                     __end_of_lcdNibble:
 12042                           	opt stack 0
 12043                           tblptru	equ	0xFF8
 12044                           tblptrh	equ	0xFF7
 12045                           tblptrl	equ	0xFF6
 12046                           tablat	equ	0xFF5
 12047                           prodh	equ	0xFF4
 12048                           prodl	equ	0xFF3
 12049                           intcon	equ	0xFF2
 12050                           postinc0	equ	0xFEE
 12051                           wreg	equ	0xFE8
 12052                           postdec1	equ	0xFE5
 12053                           fsr1l	equ	0xFE1
 12054                           indf2	equ	0xFDF
 12055                           postinc2	equ	0xFDE
 12056                           postdec2	equ	0xFDD
 12057                           fsr2h	equ	0xFDA
 12058                           fsr2l	equ	0xFD9
 12059                           status	equ	0xFD8
 12060                           
 12061 ;; *************** function ___almod *****************
 12062 ;; Defined at:
 12063 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 12064 ;; Parameters:    Size  Location     Type
 12065 ;;  dividend        4   47[COMRAM] long 
 12066 ;;  divisor         4   51[COMRAM] long 
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;  sign            1   56[COMRAM] unsigned char 
 12069 ;;  counter         1   55[COMRAM] unsigned char 
 12070 ;; Return value:  Size  Location     Type
 12071 ;;                  4   47[COMRAM] long 
 12072 ;; Registers used:
 12073 ;;		wreg, status,2, status,0
 12074 ;; Tracked objects:
 12075 ;;		On entry : 0/0
 12076 ;;		On exit  : 0/0
 12077 ;;		Unchanged: 0/0
 12078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12079 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12080 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12082 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12083 ;;Total ram usage:       10 bytes
 12084 ;; Hardware stack levels used:    1
 12085 ;; Hardware stack levels required when called:    3
 12086 ;; This function calls:
 12087 ;;		Nothing
 12088 ;; This function is called by:
 12089 ;;		_main
 12090 ;; This function uses a non-reentrant model
 12091 ;;
 12092                           
 12093                           	psect	text48
 12094  002D6A                     __ptext48:
 12095                           	opt stack 0
 12096  002D6A                     ___almod:
 12097                           	opt stack 27
 12098                           
 12099                           ;incstack = 0
 12100  002D6A  0E00               	movlw	0
 12101  002D6C  6E39               	movwf	___almod@sign,c
 12102  002D6E  AE33               	btfss	___almod@dividend+3,7,c
 12103  002D70  D00A               	goto	l5122
 12104  002D72  1E33               	comf	___almod@dividend+3,f,c
 12105  002D74  1E32               	comf	___almod@dividend+2,f,c
 12106  002D76  1E31               	comf	___almod@dividend+1,f,c
 12107  002D78  6C30               	negf	___almod@dividend,c
 12108  002D7A  0E00               	movlw	0
 12109  002D7C  2231               	addwfc	___almod@dividend+1,f,c
 12110  002D7E  2232               	addwfc	___almod@dividend+2,f,c
 12111  002D80  2233               	addwfc	___almod@dividend+3,f,c
 12112  002D82  0E01               	movlw	1
 12113  002D84  6E39               	movwf	___almod@sign,c
 12114  002D86                     l5122:
 12115  002D86  AE37               	btfss	___almod@divisor+3,7,c
 12116  002D88  D008               	goto	l5126
 12117  002D8A  1E37               	comf	___almod@divisor+3,f,c
 12118  002D8C  1E36               	comf	___almod@divisor+2,f,c
 12119  002D8E  1E35               	comf	___almod@divisor+1,f,c
 12120  002D90  6C34               	negf	___almod@divisor,c
 12121  002D92  0E00               	movlw	0
 12122  002D94  2235               	addwfc	___almod@divisor+1,f,c
 12123  002D96  2236               	addwfc	___almod@divisor+2,f,c
 12124  002D98  2237               	addwfc	___almod@divisor+3,f,c
 12125  002D9A                     l5126:
 12126  002D9A  5034               	movf	___almod@divisor,w,c
 12127  002D9C  1035               	iorwf	___almod@divisor+1,w,c
 12128  002D9E  1036               	iorwf	___almod@divisor+2,w,c
 12129  002DA0  1037               	iorwf	___almod@divisor+3,w,c
 12130  002DA2  B4D8               	btfsc	status,2,c
 12131  002DA4  D024               	goto	l5142
 12132  002DA6  0E01               	movlw	1
 12133  002DA8  6E38               	movwf	___almod@counter,c
 12134  002DAA  D006               	goto	l5132
 12135  002DAC                     l5130:
 12136  002DAC  90D8               	bcf	status,0,c
 12137  002DAE  3634               	rlcf	___almod@divisor,f,c
 12138  002DB0  3635               	rlcf	___almod@divisor+1,f,c
 12139  002DB2  3636               	rlcf	___almod@divisor+2,f,c
 12140  002DB4  3637               	rlcf	___almod@divisor+3,f,c
 12141  002DB6  2A38               	incf	___almod@counter,f,c
 12142  002DB8                     l5132:
 12143  002DB8  AE37               	btfss	___almod@divisor+3,7,c
 12144  002DBA  D7F8               	goto	l5130
 12145  002DBC                     l5134:
 12146  002DBC  5034               	movf	___almod@divisor,w,c
 12147  002DBE  5C30               	subwf	___almod@dividend,w,c
 12148  002DC0  5035               	movf	___almod@divisor+1,w,c
 12149  002DC2  5831               	subwfb	___almod@dividend+1,w,c
 12150  002DC4  5036               	movf	___almod@divisor+2,w,c
 12151  002DC6  5832               	subwfb	___almod@dividend+2,w,c
 12152  002DC8  5037               	movf	___almod@divisor+3,w,c
 12153  002DCA  5833               	subwfb	___almod@dividend+3,w,c
 12154  002DCC  A0D8               	btfss	status,0,c
 12155  002DCE  D008               	goto	l5138
 12156  002DD0  5034               	movf	___almod@divisor,w,c
 12157  002DD2  5E30               	subwf	___almod@dividend,f,c
 12158  002DD4  5035               	movf	___almod@divisor+1,w,c
 12159  002DD6  5A31               	subwfb	___almod@dividend+1,f,c
 12160  002DD8  5036               	movf	___almod@divisor+2,w,c
 12161  002DDA  5A32               	subwfb	___almod@dividend+2,f,c
 12162  002DDC  5037               	movf	___almod@divisor+3,w,c
 12163  002DDE  5A33               	subwfb	___almod@dividend+3,f,c
 12164  002DE0                     l5138:
 12165  002DE0  90D8               	bcf	status,0,c
 12166  002DE2  3237               	rrcf	___almod@divisor+3,f,c
 12167  002DE4  3236               	rrcf	___almod@divisor+2,f,c
 12168  002DE6  3235               	rrcf	___almod@divisor+1,f,c
 12169  002DE8  3234               	rrcf	___almod@divisor,f,c
 12170  002DEA  2E38               	decfsz	___almod@counter,f,c
 12171  002DEC  D7E7               	goto	l5134
 12172  002DEE                     l5142:
 12173  002DEE  5039               	movf	___almod@sign,w,c
 12174  002DF0  B4D8               	btfsc	status,2,c
 12175  002DF2  D008               	goto	l5146
 12176  002DF4  1E33               	comf	___almod@dividend+3,f,c
 12177  002DF6  1E32               	comf	___almod@dividend+2,f,c
 12178  002DF8  1E31               	comf	___almod@dividend+1,f,c
 12179  002DFA  6C30               	negf	___almod@dividend,c
 12180  002DFC  0E00               	movlw	0
 12181  002DFE  2231               	addwfc	___almod@dividend+1,f,c
 12182  002E00  2232               	addwfc	___almod@dividend+2,f,c
 12183  002E02  2233               	addwfc	___almod@dividend+3,f,c
 12184  002E04                     l5146:
 12185  002E04  C030  F030         	movff	___almod@dividend,?___almod
 12186  002E08  C031  F031         	movff	___almod@dividend+1,?___almod+1
 12187  002E0C  C032  F032         	movff	___almod@dividend+2,?___almod+2
 12188  002E10  C033  F033         	movff	___almod@dividend+3,?___almod+3
 12189  002E14  0012               	return	
 12190  002E16                     __end_of___almod:
 12191                           	opt stack 0
 12192                           tblptru	equ	0xFF8
 12193                           tblptrh	equ	0xFF7
 12194                           tblptrl	equ	0xFF6
 12195                           tablat	equ	0xFF5
 12196                           prodh	equ	0xFF4
 12197                           prodl	equ	0xFF3
 12198                           intcon	equ	0xFF2
 12199                           postinc0	equ	0xFEE
 12200                           wreg	equ	0xFE8
 12201                           postdec1	equ	0xFE5
 12202                           fsr1l	equ	0xFE1
 12203                           indf2	equ	0xFDF
 12204                           postinc2	equ	0xFDE
 12205                           postdec2	equ	0xFDD
 12206                           fsr2h	equ	0xFDA
 12207                           fsr2l	equ	0xFD9
 12208                           status	equ	0xFD8
 12209                           
 12210 ;; *************** function ___aldiv *****************
 12211 ;; Defined at:
 12212 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 12213 ;; Parameters:    Size  Location     Type
 12214 ;;  dividend        4   33[COMRAM] long 
 12215 ;;  divisor         4   37[COMRAM] long 
 12216 ;; Auto vars:     Size  Location     Type
 12217 ;;  quotient        4   43[COMRAM] long 
 12218 ;;  sign            1   42[COMRAM] unsigned char 
 12219 ;;  counter         1   41[COMRAM] unsigned char 
 12220 ;; Return value:  Size  Location     Type
 12221 ;;                  4   33[COMRAM] long 
 12222 ;; Registers used:
 12223 ;;		wreg, status,2, status,0
 12224 ;; Tracked objects:
 12225 ;;		On entry : 0/0
 12226 ;;		On exit  : 0/0
 12227 ;;		Unchanged: 0/0
 12228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12229 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12233 ;;Total ram usage:       14 bytes
 12234 ;; Hardware stack levels used:    1
 12235 ;; Hardware stack levels required when called:    3
 12236 ;; This function calls:
 12237 ;;		Nothing
 12238 ;; This function is called by:
 12239 ;;		_main
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           	psect	text49
 12244  002A60                     __ptext49:
 12245                           	opt stack 0
 12246  002A60                     ___aldiv:
 12247                           	opt stack 27
 12248                           
 12249                           ;incstack = 0
 12250  002A60  0E00               	movlw	0
 12251  002A62  6E2B               	movwf	___aldiv@sign,c
 12252  002A64  AE29               	btfss	___aldiv@divisor+3,7,c
 12253  002A66  D00A               	goto	l5078
 12254  002A68  1E29               	comf	___aldiv@divisor+3,f,c
 12255  002A6A  1E28               	comf	___aldiv@divisor+2,f,c
 12256  002A6C  1E27               	comf	___aldiv@divisor+1,f,c
 12257  002A6E  6C26               	negf	___aldiv@divisor,c
 12258  002A70  0E00               	movlw	0
 12259  002A72  2227               	addwfc	___aldiv@divisor+1,f,c
 12260  002A74  2228               	addwfc	___aldiv@divisor+2,f,c
 12261  002A76  2229               	addwfc	___aldiv@divisor+3,f,c
 12262  002A78  0E01               	movlw	1
 12263  002A7A  6E2B               	movwf	___aldiv@sign,c
 12264  002A7C                     l5078:
 12265  002A7C  AE25               	btfss	___aldiv@dividend+3,7,c
 12266  002A7E  D00A               	goto	l5084
 12267  002A80  1E25               	comf	___aldiv@dividend+3,f,c
 12268  002A82  1E24               	comf	___aldiv@dividend+2,f,c
 12269  002A84  1E23               	comf	___aldiv@dividend+1,f,c
 12270  002A86  6C22               	negf	___aldiv@dividend,c
 12271  002A88  0E00               	movlw	0
 12272  002A8A  2223               	addwfc	___aldiv@dividend+1,f,c
 12273  002A8C  2224               	addwfc	___aldiv@dividend+2,f,c
 12274  002A8E  2225               	addwfc	___aldiv@dividend+3,f,c
 12275  002A90  0E01               	movlw	1
 12276  002A92  1A2B               	xorwf	___aldiv@sign,f,c
 12277  002A94                     l5084:
 12278  002A94  0E00               	movlw	0
 12279  002A96  6E2C               	movwf	___aldiv@quotient,c
 12280  002A98  0E00               	movlw	0
 12281  002A9A  6E2D               	movwf	___aldiv@quotient+1,c
 12282  002A9C  0E00               	movlw	0
 12283  002A9E  6E2E               	movwf	___aldiv@quotient+2,c
 12284  002AA0  0E00               	movlw	0
 12285  002AA2  6E2F               	movwf	___aldiv@quotient+3,c
 12286  002AA4  5026               	movf	___aldiv@divisor,w,c
 12287  002AA6  1027               	iorwf	___aldiv@divisor+1,w,c
 12288  002AA8  1028               	iorwf	___aldiv@divisor+2,w,c
 12289  002AAA  1029               	iorwf	___aldiv@divisor+3,w,c
 12290  002AAC  B4D8               	btfsc	status,2,c
 12291  002AAE  D02A               	goto	l5106
 12292  002AB0  0E01               	movlw	1
 12293  002AB2  6E2A               	movwf	___aldiv@counter,c
 12294  002AB4  D006               	goto	l5092
 12295  002AB6                     l5090:
 12296  002AB6  90D8               	bcf	status,0,c
 12297  002AB8  3626               	rlcf	___aldiv@divisor,f,c
 12298  002ABA  3627               	rlcf	___aldiv@divisor+1,f,c
 12299  002ABC  3628               	rlcf	___aldiv@divisor+2,f,c
 12300  002ABE  3629               	rlcf	___aldiv@divisor+3,f,c
 12301  002AC0  2A2A               	incf	___aldiv@counter,f,c
 12302  002AC2                     l5092:
 12303  002AC2  AE29               	btfss	___aldiv@divisor+3,7,c
 12304  002AC4  D7F8               	goto	l5090
 12305  002AC6                     l5094:
 12306  002AC6  90D8               	bcf	status,0,c
 12307  002AC8  362C               	rlcf	___aldiv@quotient,f,c
 12308  002ACA  362D               	rlcf	___aldiv@quotient+1,f,c
 12309  002ACC  362E               	rlcf	___aldiv@quotient+2,f,c
 12310  002ACE  362F               	rlcf	___aldiv@quotient+3,f,c
 12311  002AD0  5026               	movf	___aldiv@divisor,w,c
 12312  002AD2  5C22               	subwf	___aldiv@dividend,w,c
 12313  002AD4  5027               	movf	___aldiv@divisor+1,w,c
 12314  002AD6  5823               	subwfb	___aldiv@dividend+1,w,c
 12315  002AD8  5028               	movf	___aldiv@divisor+2,w,c
 12316  002ADA  5824               	subwfb	___aldiv@dividend+2,w,c
 12317  002ADC  5029               	movf	___aldiv@divisor+3,w,c
 12318  002ADE  5825               	subwfb	___aldiv@dividend+3,w,c
 12319  002AE0  A0D8               	btfss	status,0,c
 12320  002AE2  D009               	goto	l5102
 12321  002AE4  5026               	movf	___aldiv@divisor,w,c
 12322  002AE6  5E22               	subwf	___aldiv@dividend,f,c
 12323  002AE8  5027               	movf	___aldiv@divisor+1,w,c
 12324  002AEA  5A23               	subwfb	___aldiv@dividend+1,f,c
 12325  002AEC  5028               	movf	___aldiv@divisor+2,w,c
 12326  002AEE  5A24               	subwfb	___aldiv@dividend+2,f,c
 12327  002AF0  5029               	movf	___aldiv@divisor+3,w,c
 12328  002AF2  5A25               	subwfb	___aldiv@dividend+3,f,c
 12329  002AF4  802C               	bsf	___aldiv@quotient,0,c
 12330  002AF6                     l5102:
 12331  002AF6  90D8               	bcf	status,0,c
 12332  002AF8  3229               	rrcf	___aldiv@divisor+3,f,c
 12333  002AFA  3228               	rrcf	___aldiv@divisor+2,f,c
 12334  002AFC  3227               	rrcf	___aldiv@divisor+1,f,c
 12335  002AFE  3226               	rrcf	___aldiv@divisor,f,c
 12336  002B00  2E2A               	decfsz	___aldiv@counter,f,c
 12337  002B02  D7E1               	goto	l5094
 12338  002B04                     l5106:
 12339  002B04  502B               	movf	___aldiv@sign,w,c
 12340  002B06  B4D8               	btfsc	status,2,c
 12341  002B08  D008               	goto	l5110
 12342  002B0A  1E2F               	comf	___aldiv@quotient+3,f,c
 12343  002B0C  1E2E               	comf	___aldiv@quotient+2,f,c
 12344  002B0E  1E2D               	comf	___aldiv@quotient+1,f,c
 12345  002B10  6C2C               	negf	___aldiv@quotient,c
 12346  002B12  0E00               	movlw	0
 12347  002B14  222D               	addwfc	___aldiv@quotient+1,f,c
 12348  002B16  222E               	addwfc	___aldiv@quotient+2,f,c
 12349  002B18  222F               	addwfc	___aldiv@quotient+3,f,c
 12350  002B1A                     l5110:
 12351  002B1A  C02C  F022         	movff	___aldiv@quotient,?___aldiv
 12352  002B1E  C02D  F023         	movff	___aldiv@quotient+1,?___aldiv+1
 12353  002B22  C02E  F024         	movff	___aldiv@quotient+2,?___aldiv+2
 12354  002B26  C02F  F025         	movff	___aldiv@quotient+3,?___aldiv+3
 12355  002B2A  0012               	return	
 12356  002B2C                     __end_of___aldiv:
 12357                           	opt stack 0
 12358                           tblptru	equ	0xFF8
 12359                           tblptrh	equ	0xFF7
 12360                           tblptrl	equ	0xFF6
 12361                           tablat	equ	0xFF5
 12362                           prodh	equ	0xFF4
 12363                           prodl	equ	0xFF3
 12364                           intcon	equ	0xFF2
 12365                           postinc0	equ	0xFEE
 12366                           wreg	equ	0xFE8
 12367                           postdec1	equ	0xFE5
 12368                           fsr1l	equ	0xFE1
 12369                           indf2	equ	0xFDF
 12370                           postinc2	equ	0xFDE
 12371                           postdec2	equ	0xFDD
 12372                           fsr2h	equ	0xFDA
 12373                           fsr2l	equ	0xFD9
 12374                           status	equ	0xFD8
 12375                           
 12376 ;; *************** function _service *****************
 12377 ;; Defined at:
 12378 ;;		line 303 in file "main.c"
 12379 ;; Parameters:    Size  Location     Type
 12380 ;;		None
 12381 ;; Auto vars:     Size  Location     Type
 12382 ;;		None
 12383 ;; Return value:  Size  Location     Type
 12384 ;;                  1    wreg      void 
 12385 ;; Registers used:
 12386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12387 ;; Tracked objects:
 12388 ;;		On entry : 0/0
 12389 ;;		On exit  : 0/0
 12390 ;;		Unchanged: 0/0
 12391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12394 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12395 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12396 ;;Total ram usage:       14 bytes
 12397 ;; Hardware stack levels used:    1
 12398 ;; Hardware stack levels required when called:    2
 12399 ;; This function calls:
 12400 ;;		_servoInterruptService
 12401 ;; This function is called by:
 12402 ;;		Interrupt level 2
 12403 ;; This function uses a non-reentrant model
 12404 ;;
 12405                           
 12406                           	psect	intcode
 12407  000008                     __pintcode:
 12408                           	opt stack 0
 12409  000008                     _service:
 12410                           	opt stack 21
 12411                           
 12412                           ;incstack = 0
 12413  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12414  00000A  ED60  F018         	call	int_func,f	;refresh shadow registers
 12415                           tblptru	equ	0xFF8
 12416                           tblptrh	equ	0xFF7
 12417                           tblptrl	equ	0xFF6
 12418                           tablat	equ	0xFF5
 12419                           prodh	equ	0xFF4
 12420                           prodl	equ	0xFF3
 12421                           intcon	equ	0xFF2
 12422                           postinc0	equ	0xFEE
 12423                           wreg	equ	0xFE8
 12424                           postdec1	equ	0xFE5
 12425                           fsr1l	equ	0xFE1
 12426                           indf2	equ	0xFDF
 12427                           postinc2	equ	0xFDE
 12428                           postdec2	equ	0xFDD
 12429                           fsr2h	equ	0xFDA
 12430                           fsr2l	equ	0xFD9
 12431                           status	equ	0xFD8
 12432                           
 12433                           	psect	intcode_body
 12434  0030C0                     __pintcode_body:
 12435                           	opt stack 21
 12436  0030C0                     int_func:
 12437                           	opt stack 21
 12438  0030C0  0006               	pop		; remove dummy address from shadow register refresh
 12439  0030C2  CFFA F014          	movff	pclath,??_service
 12440  0030C6  CFFB F015          	movff	pclatu,??_service+1
 12441  0030CA  CFE9 F016          	movff	fsr0l,??_service+2
 12442  0030CE  CFEA F017          	movff	fsr0h,??_service+3
 12443  0030D2  CFE1 F018          	movff	fsr1l,??_service+4
 12444  0030D6  CFE2 F019          	movff	fsr1h,??_service+5
 12445  0030DA  CFD9 F01A          	movff	fsr2l,??_service+6
 12446  0030DE  CFDA F01B          	movff	fsr2h,??_service+7
 12447  0030E2  CFF3 F01C          	movff	prodl,??_service+8
 12448  0030E6  CFF4 F01D          	movff	prodh,??_service+9
 12449  0030EA  CFF6 F01E          	movff	tblptrl,??_service+10
 12450  0030EE  CFF7 F01F          	movff	tblptrh,??_service+11
 12451  0030F2  CFF8 F020          	movff	tblptru,??_service+12
 12452  0030F6  CFF5 F021          	movff	tablat,??_service+13
 12453                           
 12454                           ;main.c: 305: servoInterruptService();
 12455  0030FA  ECCA  F012         	call	_servoInterruptService	;wreg free
 12456  0030FE  C021  FFF5         	movff	??_service+13,tablat
 12457  003102  C020  FFF8         	movff	??_service+12,tblptru
 12458  003106  C01F  FFF7         	movff	??_service+11,tblptrh
 12459  00310A  C01E  FFF6         	movff	??_service+10,tblptrl
 12460  00310E  C01D  FFF4         	movff	??_service+9,prodh
 12461  003112  C01C  FFF3         	movff	??_service+8,prodl
 12462  003116  C01B  FFDA         	movff	??_service+7,fsr2h
 12463  00311A  C01A  FFD9         	movff	??_service+6,fsr2l
 12464  00311E  C019  FFE2         	movff	??_service+5,fsr1h
 12465  003122  C018  FFE1         	movff	??_service+4,fsr1l
 12466  003126  C017  FFEA         	movff	??_service+3,fsr0h
 12467  00312A  C016  FFE9         	movff	??_service+2,fsr0l
 12468  00312E  C015  FFFB         	movff	??_service+1,pclatu
 12469  003132  C014  FFFA         	movff	??_service,pclath
 12470  003136  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12471  003138  0011               	retfie		f
 12472  00313A                     __end_of_service:
 12473                           	opt stack 0
 12474                           pclatu	equ	0xFFB
 12475                           pclath	equ	0xFFA
 12476                           tblptru	equ	0xFF8
 12477                           tblptrh	equ	0xFF7
 12478                           tblptrl	equ	0xFF6
 12479                           tablat	equ	0xFF5
 12480                           prodh	equ	0xFF4
 12481                           prodl	equ	0xFF3
 12482                           intcon	equ	0xFF2
 12483                           postinc0	equ	0xFEE
 12484                           fsr0h	equ	0xFEA
 12485                           fsr0l	equ	0xFE9
 12486                           wreg	equ	0xFE8
 12487                           postdec1	equ	0xFE5
 12488                           fsr1h	equ	0xFE2
 12489                           fsr1l	equ	0xFE1
 12490                           indf2	equ	0xFDF
 12491                           postinc2	equ	0xFDE
 12492                           postdec2	equ	0xFDD
 12493                           fsr2h	equ	0xFDA
 12494                           fsr2l	equ	0xFD9
 12495                           status	equ	0xFD8
 12496                           
 12497 ;; *************** function _servoInterruptService *****************
 12498 ;; Defined at:
 12499 ;;		line 52 in file "servo.c"
 12500 ;; Parameters:    Size  Location     Type
 12501 ;;		None
 12502 ;; Auto vars:     Size  Location     Type
 12503 ;;		None
 12504 ;; Return value:  Size  Location     Type
 12505 ;;                  1    wreg      void 
 12506 ;; Registers used:
 12507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12508 ;; Tracked objects:
 12509 ;;		On entry : 0/0
 12510 ;;		On exit  : 0/0
 12511 ;;		Unchanged: 0/0
 12512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12515 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12516 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12517 ;;Total ram usage:        4 bytes
 12518 ;; Hardware stack levels used:    1
 12519 ;; Hardware stack levels required when called:    1
 12520 ;; This function calls:
 12521 ;;		i2___awmod
 12522 ;;		i2_digitalWrite
 12523 ;;		i2_startTimer
 12524 ;; This function is called by:
 12525 ;;		_service
 12526 ;; This function uses a non-reentrant model
 12527 ;;
 12528                           
 12529                           	psect	text51
 12530  002594                     __ptext51:
 12531                           	opt stack 0
 12532  002594                     _servoInterruptService:
 12533                           	opt stack 21
 12534                           
 12535                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 12536                           
 12537                           ;incstack = 0
 12538  002594  A4F2               	btfss	intcon,2,c	;volatile
 12539  002596  0012               	return	
 12540  002598  94F2               	bcf	intcon,2,c	;volatile
 12541                           
 12542                           ;servo.c: 55: digitalWrite(servos[curr],0);
 12543  00259A  90D8               	bcf	status,0,c
 12544  00259C  3459               	rlcf	_curr,w,c
 12545  00259E  6ED9               	movwf	fsr2l,c
 12546  0025A0  345A               	rlcf	_curr+1,w,c
 12547  0025A2  6EDA               	movwf	fsr2h,c
 12548  0025A4  0E54               	movlw	low _servos
 12549  0025A6  26D9               	addwf	fsr2l,f,c
 12550  0025A8  0E01               	movlw	high _servos
 12551  0025AA  22DA               	addwfc	fsr2h,f,c
 12552  0025AC  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 12553  0025B0  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 12554  0025B4  0E00               	movlw	0
 12555  0025B6  6E0A               	movwf	i2digitalWrite@val+1,c
 12556  0025B8  0E00               	movlw	0
 12557  0025BA  6E09               	movwf	i2digitalWrite@val,c
 12558  0025BC  ECFA  F015         	call	i2_digitalWrite	;wreg free
 12559                           
 12560                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 12561  0025C0  0E01               	movlw	1
 12562  0025C2  2459               	addwf	_curr,w,c
 12563  0025C4  6E01               	movwf	i2___awmod@dividend,c
 12564  0025C6  0E00               	movlw	0
 12565  0025C8  205A               	addwfc	_curr+1,w,c
 12566  0025CA  6E02               	movwf	i2___awmod@dividend+1,c
 12567  0025CC  0E01               	movlw	1
 12568  0025CE  0100               	movlb	0	; () banked
 12569  0025D0  25FC               	addwf	_n& (0+255),w,b
 12570  0025D2  6E03               	movwf	i2___awmod@divisor,c
 12571  0025D4  0E00               	movlw	0
 12572  0025D6  0100               	movlb	0	; () banked
 12573  0025D8  21FD               	addwfc	(_n+1)& (0+255),w,b
 12574  0025DA  6E04               	movwf	i2___awmod@divisor+1,c
 12575  0025DC  EC11  F019         	call	i2___awmod	;wreg free
 12576  0025E0  90D8               	bcf	status,0,c
 12577  0025E2  3601               	rlcf	?i2___awmod,f,c
 12578  0025E4  3602               	rlcf	?i2___awmod+1,f,c
 12579  0025E6  0E54               	movlw	low _servos
 12580  0025E8  2401               	addwf	?i2___awmod,w,c
 12581  0025EA  6ED9               	movwf	fsr2l,c
 12582  0025EC  0E01               	movlw	high _servos
 12583  0025EE  2002               	addwfc	?i2___awmod+1,w,c
 12584  0025F0  6EDA               	movwf	fsr2h,c
 12585  0025F2  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 12586  0025F6  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 12587  0025FA  0E00               	movlw	0
 12588  0025FC  6E0A               	movwf	i2digitalWrite@val+1,c
 12589  0025FE  0E01               	movlw	1
 12590  002600  6E09               	movwf	i2digitalWrite@val,c
 12591  002602  ECFA  F015         	call	i2_digitalWrite	;wreg free
 12592                           
 12593                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 12594  002606  0E00               	movlw	0
 12595  002608  6E08               	movwf	i2startTimer@timer+1,c
 12596  00260A  0E00               	movlw	0
 12597  00260C  6E07               	movwf	i2startTimer@timer,c
 12598  00260E  0EFF               	movlw	255
 12599  002610  6E10               	movwf	??_servoInterruptService& (0+255),c
 12600  002612  0EFF               	movlw	255
 12601  002614  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 12602  002616  0E01               	movlw	1
 12603  002618  2459               	addwf	_curr,w,c
 12604  00261A  6E01               	movwf	i2___awmod@dividend,c
 12605  00261C  0E00               	movlw	0
 12606  00261E  205A               	addwfc	_curr+1,w,c
 12607  002620  6E02               	movwf	i2___awmod@dividend+1,c
 12608  002622  0E01               	movlw	1
 12609  002624  0100               	movlb	0	; () banked
 12610  002626  25FC               	addwf	_n& (0+255),w,b
 12611  002628  6E03               	movwf	i2___awmod@divisor,c
 12612  00262A  0E00               	movlw	0
 12613  00262C  0100               	movlb	0	; () banked
 12614  00262E  21FD               	addwfc	(_n+1)& (0+255),w,b
 12615  002630  6E04               	movwf	i2___awmod@divisor+1,c
 12616  002632  EC11  F019         	call	i2___awmod	;wreg free
 12617  002636  90D8               	bcf	status,0,c
 12618  002638  3601               	rlcf	?i2___awmod,f,c
 12619  00263A  3602               	rlcf	?i2___awmod+1,f,c
 12620  00263C  0E4C               	movlw	low _pulse
 12621  00263E  2401               	addwf	?i2___awmod,w,c
 12622  002640  6ED9               	movwf	fsr2l,c
 12623  002642  0E01               	movlw	high _pulse
 12624  002644  2002               	addwfc	?i2___awmod+1,w,c
 12625  002646  6EDA               	movwf	fsr2h,c
 12626  002648  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 12627  00264C  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 12628  002650  1E12               	comf	??_servoInterruptService+2,f,c
 12629  002652  1E13               	comf	??_servoInterruptService+3,f,c
 12630  002654  4A12               	infsnz	??_servoInterruptService+2,f,c
 12631  002656  2A13               	incf	??_servoInterruptService+3,f,c
 12632  002658  5010               	movf	??_servoInterruptService,w,c
 12633  00265A  2612               	addwf	??_servoInterruptService+2,f,c
 12634  00265C  5011               	movf	??_servoInterruptService+1,w,c
 12635  00265E  2213               	addwfc	??_servoInterruptService+3,f,c
 12636  002660  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 12637  002664  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 12638  002668  6A0B               	clrf	i2startTimer@val+2,c
 12639  00266A  6A0C               	clrf	i2startTimer@val+3,c
 12640  00266C  EC29  F01A         	call	i2_startTimer	;wreg free
 12641                           
 12642                           ;servo.c: 59: curr = (curr+1)%(n+1);
 12643  002670  0E01               	movlw	1
 12644  002672  2459               	addwf	_curr,w,c
 12645  002674  6E01               	movwf	i2___awmod@dividend,c
 12646  002676  0E00               	movlw	0
 12647  002678  205A               	addwfc	_curr+1,w,c
 12648  00267A  6E02               	movwf	i2___awmod@dividend+1,c
 12649  00267C  0E01               	movlw	1
 12650  00267E  0100               	movlb	0	; () banked
 12651  002680  25FC               	addwf	_n& (0+255),w,b
 12652  002682  6E03               	movwf	i2___awmod@divisor,c
 12653  002684  0E00               	movlw	0
 12654  002686  0100               	movlb	0	; () banked
 12655  002688  21FD               	addwfc	(_n+1)& (0+255),w,b
 12656  00268A  6E04               	movwf	i2___awmod@divisor+1,c
 12657  00268C  EC11  F019         	call	i2___awmod	;wreg free
 12658  002690  C001  F059         	movff	?i2___awmod,_curr
 12659  002694  C002  F05A         	movff	?i2___awmod+1,_curr+1
 12660  002698  0012               	return	
 12661  00269A                     __end_of_servoInterruptService:
 12662                           	opt stack 0
 12663                           pclatu	equ	0xFFB
 12664                           pclath	equ	0xFFA
 12665                           tblptru	equ	0xFF8
 12666                           tblptrh	equ	0xFF7
 12667                           tblptrl	equ	0xFF6
 12668                           tablat	equ	0xFF5
 12669                           prodh	equ	0xFF4
 12670                           prodl	equ	0xFF3
 12671                           intcon	equ	0xFF2
 12672                           postinc0	equ	0xFEE
 12673                           fsr0h	equ	0xFEA
 12674                           fsr0l	equ	0xFE9
 12675                           wreg	equ	0xFE8
 12676                           postdec1	equ	0xFE5
 12677                           fsr1h	equ	0xFE2
 12678                           fsr1l	equ	0xFE1
 12679                           indf2	equ	0xFDF
 12680                           postinc2	equ	0xFDE
 12681                           postdec2	equ	0xFDD
 12682                           fsr2h	equ	0xFDA
 12683                           fsr2l	equ	0xFD9
 12684                           status	equ	0xFD8
 12685                           
 12686 ;; *************** function i2_startTimer *****************
 12687 ;; Defined at:
 12688 ;;		line 76 in file "timer.c"
 12689 ;; Parameters:    Size  Location     Type
 12690 ;;  timer           2    6[COMRAM] int 
 12691 ;;  val             4    8[COMRAM] long 
 12692 ;; Auto vars:     Size  Location     Type
 12693 ;;		None
 12694 ;; Return value:  Size  Location     Type
 12695 ;;                  1    wreg      void 
 12696 ;; Registers used:
 12697 ;;		wreg, status,2, status,0
 12698 ;; Tracked objects:
 12699 ;;		On entry : 0/0
 12700 ;;		On exit  : 0/0
 12701 ;;		Unchanged: 0/0
 12702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12703 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12705 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12706 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12707 ;;Total ram usage:        8 bytes
 12708 ;; Hardware stack levels used:    1
 12709 ;; This function calls:
 12710 ;;		Nothing
 12711 ;; This function is called by:
 12712 ;;		_servoInterruptService
 12713 ;; This function uses a non-reentrant model
 12714 ;;
 12715                           
 12716                           	psect	text52
 12717  003452                     __ptext52:
 12718                           	opt stack 0
 12719  003452                     i2_startTimer:
 12720                           	opt stack 21
 12721                           
 12722                           ;timer.c: 77: switch(timer){
 12723                           
 12724                           ;incstack = 0
 12725  003452  D012               	goto	i2l4798
 12726  003454                     i2l405:
 12727                           
 12728                           ;timer.c: 79: TMR0H = val>>8;
 12729  003454  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 12730                           
 12731                           ;timer.c: 80: TMR0L = val;
 12732  003458  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 12733                           
 12734                           ;timer.c: 81: T0CON |= 1<<7;
 12735  00345C  8ED5               	bsf	4053,7,c	;volatile
 12736                           
 12737                           ;timer.c: 82: break;
 12738  00345E  0012               	return	
 12739  003460                     i2l407:
 12740                           
 12741                           ;timer.c: 84: TMR1H = val>>8;
 12742  003460  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 12743                           
 12744                           ;timer.c: 85: TMR1L = val;
 12745  003464  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 12746                           
 12747                           ;timer.c: 86: T1CON |= 1<<0;
 12748  003468  80CD               	bsf	4045,0,c	;volatile
 12749                           
 12750                           ;timer.c: 87: break;
 12751  00346A  0012               	return	
 12752  00346C                     i2l408:
 12753                           
 12754                           ;timer.c: 89: TMR3H = val>>8;
 12755  00346C  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 12756                           
 12757                           ;timer.c: 90: TMR3L = val;
 12758  003470  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 12759                           
 12760                           ;timer.c: 91: T3CON |= 1<<0;
 12761  003474  80B1               	bsf	4017,0,c	;volatile
 12762                           
 12763                           ;timer.c: 92: }
 12764  003476  0012               	return	
 12765  003478                     i2l4798:
 12766  003478  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 12767  00347C  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 12768                           
 12769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12770                           ; Switch size 1, requested type "space"
 12771                           ; Number of cases is 1, Range of values is 0 to 0
 12772                           ; switch strategies available:
 12773                           ; Name         Instructions Cycles
 12774                           ; simple_byte            4     3 (average)
 12775                           ;	Chosen strategy is simple_byte
 12776  003480  500E               	movf	??i2_startTimer+1,w,c
 12777  003482  0A00               	xorlw	0	; case 0
 12778  003484  A4D8               	btfss	status,2,c
 12779  003486  0012               	return	
 12780                           
 12781                           ; Switch size 1, requested type "space"
 12782                           ; Number of cases is 3, Range of values is 0 to 3
 12783                           ; switch strategies available:
 12784                           ; Name         Instructions Cycles
 12785                           ; simple_byte           10     6 (average)
 12786                           ;	Chosen strategy is simple_byte
 12787  003488  500D               	movf	??i2_startTimer,w,c
 12788  00348A  0A00               	xorlw	0	; case 0
 12789  00348C  B4D8               	btfsc	status,2,c
 12790  00348E  D7E2               	goto	i2l405
 12791  003490  0A01               	xorlw	1	; case 1
 12792  003492  B4D8               	btfsc	status,2,c
 12793  003494  D7E5               	goto	i2l407
 12794  003496  0A02               	xorlw	2	; case 3
 12795  003498  A4D8               	btfss	status,2,c
 12796  00349A  0012               	return	
 12797  00349C  D7E7               	goto	i2l408
 12798  00349E                     __end_ofi2_startTimer:
 12799                           	opt stack 0
 12800                           pclatu	equ	0xFFB
 12801                           pclath	equ	0xFFA
 12802                           tblptru	equ	0xFF8
 12803                           tblptrh	equ	0xFF7
 12804                           tblptrl	equ	0xFF6
 12805                           tablat	equ	0xFF5
 12806                           prodh	equ	0xFF4
 12807                           prodl	equ	0xFF3
 12808                           intcon	equ	0xFF2
 12809                           postinc0	equ	0xFEE
 12810                           fsr0h	equ	0xFEA
 12811                           fsr0l	equ	0xFE9
 12812                           wreg	equ	0xFE8
 12813                           postdec1	equ	0xFE5
 12814                           fsr1h	equ	0xFE2
 12815                           fsr1l	equ	0xFE1
 12816                           indf2	equ	0xFDF
 12817                           postinc2	equ	0xFDE
 12818                           postdec2	equ	0xFDD
 12819                           fsr2h	equ	0xFDA
 12820                           fsr2l	equ	0xFD9
 12821                           status	equ	0xFD8
 12822                           
 12823 ;; *************** function i2_digitalWrite *****************
 12824 ;; Defined at:
 12825 ;;		line 53 in file "iopin.c"
 12826 ;; Parameters:    Size  Location     Type
 12827 ;;  pin             2    6[COMRAM] PTR int 
 12828 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
 12829 ;;		 -> conveyorServo(4), cylinderMotor(4), 
 12830 ;;  val             2    8[COMRAM] int 
 12831 ;; Auto vars:     Size  Location     Type
 12832 ;;  digitalWrite    2   13[COMRAM] int 
 12833 ;; Return value:  Size  Location     Type
 12834 ;;                  1    wreg      void 
 12835 ;; Registers used:
 12836 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12837 ;; Tracked objects:
 12838 ;;		On entry : 0/0
 12839 ;;		On exit  : 0/0
 12840 ;;		Unchanged: 0/0
 12841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12842 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12843 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12844 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12845 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12846 ;;Total ram usage:        9 bytes
 12847 ;; Hardware stack levels used:    1
 12848 ;; This function calls:
 12849 ;;		Nothing
 12850 ;; This function is called by:
 12851 ;;		_servoInterruptService
 12852 ;; This function uses a non-reentrant model
 12853 ;;
 12854                           
 12855                           	psect	text53
 12856  002BF4                     __ptext53:
 12857                           	opt stack 0
 12858  002BF4                     i2_digitalWrite:
 12859                           	opt stack 21
 12860                           
 12861                           ;iopin.c: 54: if(pin){
 12862                           
 12863                           ;incstack = 0
 12864  002BF4  5007               	movf	i2digitalWrite@pin,w,c
 12865  002BF6  1008               	iorwf	i2digitalWrite@pin+1,w,c
 12866  002BF8  B4D8               	btfsc	status,2,c
 12867  002BFA  0012               	return	
 12868                           
 12869                           ;iopin.c: 55: int p = 1 << pin[1];
 12870  002BFC  EE20 F002          	lfsr	2,2
 12871  002C00  5007               	movf	i2digitalWrite@pin,w,c
 12872  002C02  26D9               	addwf	fsr2l,f,c
 12873  002C04  5008               	movf	i2digitalWrite@pin+1,w,c
 12874  002C06  22DA               	addwfc	fsr2h,f,c
 12875  002C08  50DF               	movf	indf2,w,c
 12876  002C0A  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 12877  002C0C  0E01               	movlw	1
 12878  002C0E  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 12879  002C10  0E00               	movlw	0
 12880  002C12  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 12881  002C14  2A0B               	incf	??i2_digitalWrite,f,c
 12882  002C16  D003               	goto	i2u454_44
 12883  002C18                     i2u454_45:
 12884  002C18  90D8               	bcf	status,0,c
 12885  002C1A  360C               	rlcf	??i2_digitalWrite+1,f,c
 12886  002C1C  360D               	rlcf	??i2_digitalWrite+2,f,c
 12887  002C1E                     i2u454_44:
 12888  002C1E  2E0B               	decfsz	??i2_digitalWrite,f,c
 12889  002C20  D7FB               	goto	i2u454_45
 12890  002C22  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 12891  002C26  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 12892                           
 12893                           ;iopin.c: 56: if(val == 0){
 12894  002C2A  5009               	movf	i2digitalWrite@val,w,c
 12895  002C2C  100A               	iorwf	i2digitalWrite@val+1,w,c
 12896  002C2E  A4D8               	btfss	status,2,c
 12897  002C30  D02B               	goto	i2l4784
 12898                           
 12899                           ;iopin.c: 57: p ^= 0xff;
 12900  002C32  0EFF               	movlw	255
 12901  002C34  1A0E               	xorwf	i2digitalWrite@p,f,c
 12902                           
 12903                           ;iopin.c: 58: }
 12904                           ;iopin.c: 60: switch(pin[0]){
 12905  002C36  D028               	goto	i2l4784
 12906  002C38                     i2l4760:
 12907  002C38  0409               	decf	i2digitalWrite@val,w,c
 12908  002C3A  100A               	iorwf	i2digitalWrite@val+1,w,c
 12909  002C3C  A4D8               	btfss	status,2,c
 12910  002C3E  D003               	goto	i2l4764
 12911  002C40  500E               	movf	i2digitalWrite@p,w,c
 12912  002C42  1289               	iorwf	3977,f,c	;volatile
 12913  002C44  0012               	return	
 12914  002C46                     i2l4764:
 12915                           
 12916                           ;iopin.c: 62: else LATA &= p;
 12917  002C46  500E               	movf	i2digitalWrite@p,w,c
 12918  002C48  1689               	andwf	3977,f,c	;volatile
 12919                           
 12920                           ;iopin.c: 63: break;
 12921  002C4A  0012               	return	
 12922  002C4C                     i2l4766:
 12923  002C4C  0409               	decf	i2digitalWrite@val,w,c
 12924  002C4E  100A               	iorwf	i2digitalWrite@val+1,w,c
 12925  002C50  A4D8               	btfss	status,2,c
 12926  002C52  D003               	goto	i2l4770
 12927  002C54  500E               	movf	i2digitalWrite@p,w,c
 12928  002C56  128A               	iorwf	3978,f,c	;volatile
 12929  002C58  0012               	return	
 12930  002C5A                     i2l4770:
 12931                           
 12932                           ;iopin.c: 65: else LATB &= p;
 12933  002C5A  500E               	movf	i2digitalWrite@p,w,c
 12934  002C5C  168A               	andwf	3978,f,c	;volatile
 12935                           
 12936                           ;iopin.c: 66: break;
 12937  002C5E  0012               	return	
 12938  002C60                     i2l4772:
 12939  002C60  0409               	decf	i2digitalWrite@val,w,c
 12940  002C62  100A               	iorwf	i2digitalWrite@val+1,w,c
 12941  002C64  A4D8               	btfss	status,2,c
 12942  002C66  D003               	goto	i2l4776
 12943  002C68  500E               	movf	i2digitalWrite@p,w,c
 12944  002C6A  128B               	iorwf	3979,f,c	;volatile
 12945  002C6C  0012               	return	
 12946  002C6E                     i2l4776:
 12947                           
 12948                           ;iopin.c: 68: else LATC &= p;
 12949  002C6E  500E               	movf	i2digitalWrite@p,w,c
 12950  002C70  168B               	andwf	3979,f,c	;volatile
 12951                           
 12952                           ;iopin.c: 69: break;
 12953  002C72  0012               	return	
 12954  002C74                     i2l4778:
 12955  002C74  0409               	decf	i2digitalWrite@val,w,c
 12956  002C76  100A               	iorwf	i2digitalWrite@val+1,w,c
 12957  002C78  A4D8               	btfss	status,2,c
 12958  002C7A  D003               	goto	i2l4782
 12959  002C7C  500E               	movf	i2digitalWrite@p,w,c
 12960  002C7E  128C               	iorwf	3980,f,c	;volatile
 12961  002C80  0012               	return	
 12962  002C82                     i2l4782:
 12963                           
 12964                           ;iopin.c: 71: else LATD &= p;
 12965  002C82  500E               	movf	i2digitalWrite@p,w,c
 12966  002C84  168C               	andwf	3980,f,c	;volatile
 12967                           
 12968                           ;iopin.c: 72: }
 12969  002C86  0012               	return	
 12970  002C88                     i2l4784:
 12971  002C88  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 12972  002C8C  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 12973  002C90  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 12974  002C94  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 12975                           
 12976                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12977                           ; Switch size 1, requested type "space"
 12978                           ; Number of cases is 1, Range of values is 0 to 0
 12979                           ; switch strategies available:
 12980                           ; Name         Instructions Cycles
 12981                           ; simple_byte            4     3 (average)
 12982                           ;	Chosen strategy is simple_byte
 12983  002C98  500C               	movf	??i2_digitalWrite+1,w,c
 12984  002C9A  0A00               	xorlw	0	; case 0
 12985  002C9C  A4D8               	btfss	status,2,c
 12986  002C9E  0012               	return	
 12987                           
 12988                           ; Switch size 1, requested type "space"
 12989                           ; Number of cases is 4, Range of values is 0 to 3
 12990                           ; switch strategies available:
 12991                           ; Name         Instructions Cycles
 12992                           ; simple_byte           13     7 (average)
 12993                           ;	Chosen strategy is simple_byte
 12994  002CA0  500B               	movf	??i2_digitalWrite,w,c
 12995  002CA2  0A00               	xorlw	0	; case 0
 12996  002CA4  B4D8               	btfsc	status,2,c
 12997  002CA6  D7C8               	goto	i2l4760
 12998  002CA8  0A01               	xorlw	1	; case 1
 12999  002CAA  B4D8               	btfsc	status,2,c
 13000  002CAC  D7CF               	goto	i2l4766
 13001  002CAE  0A03               	xorlw	3	; case 2
 13002  002CB0  B4D8               	btfsc	status,2,c
 13003  002CB2  D7D6               	goto	i2l4772
 13004  002CB4  0A01               	xorlw	1	; case 3
 13005  002CB6  A4D8               	btfss	status,2,c
 13006  002CB8  0012               	return	
 13007  002CBA  D7DC               	goto	i2l4778
 13008  002CBC                     __end_ofi2_digitalWrite:
 13009                           	opt stack 0
 13010                           pclatu	equ	0xFFB
 13011                           pclath	equ	0xFFA
 13012                           tblptru	equ	0xFF8
 13013                           tblptrh	equ	0xFF7
 13014                           tblptrl	equ	0xFF6
 13015                           tablat	equ	0xFF5
 13016                           prodh	equ	0xFF4
 13017                           prodl	equ	0xFF3
 13018                           intcon	equ	0xFF2
 13019                           postinc0	equ	0xFEE
 13020                           fsr0h	equ	0xFEA
 13021                           fsr0l	equ	0xFE9
 13022                           wreg	equ	0xFE8
 13023                           postdec1	equ	0xFE5
 13024                           fsr1h	equ	0xFE2
 13025                           fsr1l	equ	0xFE1
 13026                           indf2	equ	0xFDF
 13027                           postinc2	equ	0xFDE
 13028                           postdec2	equ	0xFDD
 13029                           fsr2h	equ	0xFDA
 13030                           fsr2l	equ	0xFD9
 13031                           status	equ	0xFD8
 13032                           
 13033 ;; *************** function i2___awmod *****************
 13034 ;; Defined at:
 13035 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 13036 ;; Parameters:    Size  Location     Type
 13037 ;;  dividend        2    0[COMRAM] int 
 13038 ;;  divisor         2    2[COMRAM] int 
 13039 ;; Auto vars:     Size  Location     Type
 13040 ;;  __awmod         1    5[COMRAM] unsigned char 
 13041 ;;  __awmod         1    4[COMRAM] unsigned char 
 13042 ;; Return value:  Size  Location     Type
 13043 ;;                  2    0[COMRAM] int 
 13044 ;; Registers used:
 13045 ;;		wreg, status,2, status,0
 13046 ;; Tracked objects:
 13047 ;;		On entry : 0/0
 13048 ;;		On exit  : 0/0
 13049 ;;		Unchanged: 0/0
 13050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13051 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13052 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;Total ram usage:        6 bytes
 13056 ;; Hardware stack levels used:    1
 13057 ;; This function calls:
 13058 ;;		Nothing
 13059 ;; This function is called by:
 13060 ;;		_servoInterruptService
 13061 ;; This function uses a non-reentrant model
 13062 ;;
 13063                           
 13064                           	psect	text54
 13065  003222                     __ptext54:
 13066                           	opt stack 0
 13067  003222                     i2___awmod:
 13068                           	opt stack 21
 13069                           
 13070                           ;incstack = 0
 13071  003222  0E00               	movlw	0
 13072  003224  6E06               	movwf	i2___awmod@sign,c
 13073  003226  AE02               	btfss	i2___awmod@dividend+1,7,c
 13074  003228  D006               	goto	i2l4812
 13075  00322A  6C01               	negf	i2___awmod@dividend,c
 13076  00322C  1E02               	comf	i2___awmod@dividend+1,f,c
 13077  00322E  B0D8               	btfsc	status,0,c
 13078  003230  2A02               	incf	i2___awmod@dividend+1,f,c
 13079  003232  0E01               	movlw	1
 13080  003234  6E06               	movwf	i2___awmod@sign,c
 13081  003236                     i2l4812:
 13082  003236  AE04               	btfss	i2___awmod@divisor+1,7,c
 13083  003238  D004               	goto	i2l4816
 13084  00323A  6C03               	negf	i2___awmod@divisor,c
 13085  00323C  1E04               	comf	i2___awmod@divisor+1,f,c
 13086  00323E  B0D8               	btfsc	status,0,c
 13087  003240  2A04               	incf	i2___awmod@divisor+1,f,c
 13088  003242                     i2l4816:
 13089  003242  5003               	movf	i2___awmod@divisor,w,c
 13090  003244  1004               	iorwf	i2___awmod@divisor+1,w,c
 13091  003246  B4D8               	btfsc	status,2,c
 13092  003248  D018               	goto	i2l4832
 13093  00324A  0E01               	movlw	1
 13094  00324C  6E05               	movwf	i2___awmod@counter,c
 13095  00324E  D004               	goto	i2l4822
 13096  003250                     i2l4820:
 13097  003250  90D8               	bcf	status,0,c
 13098  003252  3603               	rlcf	i2___awmod@divisor,f,c
 13099  003254  3604               	rlcf	i2___awmod@divisor+1,f,c
 13100  003256  2A05               	incf	i2___awmod@counter,f,c
 13101  003258                     i2l4822:
 13102  003258  AE04               	btfss	i2___awmod@divisor+1,7,c
 13103  00325A  D7FA               	goto	i2l4820
 13104  00325C                     i2l4824:
 13105  00325C  5003               	movf	i2___awmod@divisor,w,c
 13106  00325E  5C01               	subwf	i2___awmod@dividend,w,c
 13107  003260  5004               	movf	i2___awmod@divisor+1,w,c
 13108  003262  5802               	subwfb	i2___awmod@dividend+1,w,c
 13109  003264  A0D8               	btfss	status,0,c
 13110  003266  D004               	goto	i2l4828
 13111  003268  5003               	movf	i2___awmod@divisor,w,c
 13112  00326A  5E01               	subwf	i2___awmod@dividend,f,c
 13113  00326C  5004               	movf	i2___awmod@divisor+1,w,c
 13114  00326E  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13115  003270                     i2l4828:
 13116  003270  90D8               	bcf	status,0,c
 13117  003272  3204               	rrcf	i2___awmod@divisor+1,f,c
 13118  003274  3203               	rrcf	i2___awmod@divisor,f,c
 13119  003276  2E05               	decfsz	i2___awmod@counter,f,c
 13120  003278  D7F1               	goto	i2l4824
 13121  00327A                     i2l4832:
 13122  00327A  5006               	movf	i2___awmod@sign,w,c
 13123  00327C  B4D8               	btfsc	status,2,c
 13124  00327E  D004               	goto	i2l4836
 13125  003280  6C01               	negf	i2___awmod@dividend,c
 13126  003282  1E02               	comf	i2___awmod@dividend+1,f,c
 13127  003284  B0D8               	btfsc	status,0,c
 13128  003286  2A02               	incf	i2___awmod@dividend+1,f,c
 13129  003288                     i2l4836:
 13130  003288  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13131  00328C  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13132  003290  0012               	return	
 13133  003292                     __end_ofi2___awmod:
 13134                           	opt stack 0
 13135                           pclatu	equ	0xFFB
 13136                           pclath	equ	0xFFA
 13137                           tblptru	equ	0xFF8
 13138                           tblptrh	equ	0xFF7
 13139                           tblptrl	equ	0xFF6
 13140                           tablat	equ	0xFF5
 13141                           prodh	equ	0xFF4
 13142                           prodl	equ	0xFF3
 13143                           intcon	equ	0xFF2
 13144                           postinc0	equ	0xFEE
 13145                           fsr0h	equ	0xFEA
 13146                           fsr0l	equ	0xFE9
 13147                           wreg	equ	0xFE8
 13148                           postdec1	equ	0xFE5
 13149                           fsr1h	equ	0xFE2
 13150                           fsr1l	equ	0xFE1
 13151                           indf2	equ	0xFDF
 13152                           postinc2	equ	0xFDE
 13153                           postdec2	equ	0xFDD
 13154                           fsr2h	equ	0xFDA
 13155                           fsr2l	equ	0xFD9
 13156                           status	equ	0xFD8
 13157                           pclatu	equ	0xFFB
 13158                           pclath	equ	0xFFA
 13159                           tblptru	equ	0xFF8
 13160                           tblptrh	equ	0xFF7
 13161                           tblptrl	equ	0xFF6
 13162                           tablat	equ	0xFF5
 13163                           prodh	equ	0xFF4
 13164                           prodl	equ	0xFF3
 13165                           intcon	equ	0xFF2
 13166                           postinc0	equ	0xFEE
 13167                           fsr0h	equ	0xFEA
 13168                           fsr0l	equ	0xFE9
 13169                           wreg	equ	0xFE8
 13170                           postdec1	equ	0xFE5
 13171                           fsr1h	equ	0xFE2
 13172                           fsr1l	equ	0xFE1
 13173                           indf2	equ	0xFDF
 13174                           postinc2	equ	0xFDE
 13175                           postdec2	equ	0xFDD
 13176                           fsr2h	equ	0xFDA
 13177                           fsr2l	equ	0xFD9
 13178                           status	equ	0xFD8
 13179                           
 13180                           	psect	rparam
 13181  0000                     pclatu	equ	0xFFB
 13182                           pclath	equ	0xFFA
 13183                           tblptru	equ	0xFF8
 13184                           tblptrh	equ	0xFF7
 13185                           tblptrl	equ	0xFF6
 13186                           tablat	equ	0xFF5
 13187                           prodh	equ	0xFF4
 13188                           prodl	equ	0xFF3
 13189                           intcon	equ	0xFF2
 13190                           postinc0	equ	0xFEE
 13191                           fsr0h	equ	0xFEA
 13192                           fsr0l	equ	0xFE9
 13193                           wreg	equ	0xFE8
 13194                           postdec1	equ	0xFE5
 13195                           fsr1h	equ	0xFE2
 13196                           fsr1l	equ	0xFE1
 13197                           indf2	equ	0xFDF
 13198                           postinc2	equ	0xFDE
 13199                           postdec2	equ	0xFDD
 13200                           fsr2h	equ	0xFDA
 13201                           fsr2l	equ	0xFD9
 13202                           status	equ	0xFD8
 13203                           
 13204                           	psect	temp
 13205  00005E                     btemp:
 13206                           	opt stack 0
 13207  00005E                     	ds	1
 13208  0000                     int$flags	set	btemp
 13209                           pclatu	equ	0xFFB
 13210                           pclath	equ	0xFFA
 13211                           tblptru	equ	0xFF8
 13212                           tblptrh	equ	0xFF7
 13213                           tblptrl	equ	0xFF6
 13214                           tablat	equ	0xFF5
 13215                           prodh	equ	0xFF4
 13216                           prodl	equ	0xFF3
 13217                           intcon	equ	0xFF2
 13218                           postinc0	equ	0xFEE
 13219                           fsr0h	equ	0xFEA
 13220                           fsr0l	equ	0xFE9
 13221                           wreg	equ	0xFE8
 13222                           postdec1	equ	0xFE5
 13223                           fsr1h	equ	0xFE2
 13224                           fsr1l	equ	0xFE1
 13225                           indf2	equ	0xFDF
 13226                           postinc2	equ	0xFDE
 13227                           postdec2	equ	0xFDD
 13228                           fsr2h	equ	0xFDA
 13229                           fsr2l	equ	0xFD9
 13230                           status	equ	0xFD8


Data Sizes:
    Strings     307
    Constant    174
    Data        61
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     63      93
    BANK0           128    116     126
    BANK1           256     42     108
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_18(CODE[17]), STR_17(CODE[18]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[17]), STR_9(CODE[18]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[8]), STR_5(CODE[15]), STR_4(CODE[14]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), cylinderDir(BANK1[4]), 


Critical Paths under _main in COMRAM

    _sortBattery->___ftmul
    _printf->___ftmul
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _angleToPulse->___ftmul
    ___fttol->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _main->_sortBattery
    _sortBattery->_printf
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  586797
                                            103 BANK0     13    13      0
                                             30 BANK1     12    12      0
                            ___aldiv
                            ___almod
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _readKeypad
                      _showInterface
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         32    32      0  112526
                                            101 BANK0      2     2      0
                                              0 BANK1     30    30      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1594
                                             33 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     386
                                             33 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  382965
                                            102 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   63717
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   63717
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   63717
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   63748
                                            101 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   63717
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   63717
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   63522
                                             55 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   13901
                                             18 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             37 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   13622
                                             18 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3344
                                             47 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             39 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             33 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             33 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             41 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             46 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             33 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             40 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             33 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1584
                                             45 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   23958
                                             88 BANK0      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           8     2      6     486
                                             33 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22767
                                             78 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21460
                                             55 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     833
                                             40 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                             60 COMRAM     3     3      0
                                              6 BANK0     12     6      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                             51 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             28 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3256
                                             41 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             41 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             33 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _initTimer                                            4     2      2     150
                                             33 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             37 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             35 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             33 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             47 COMRAM    10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                             33 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             14    14      0    1116
                                             19 COMRAM    14    14      0
              _servoInterruptService
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1116
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     206
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readKeypad
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2A      6C       7       42.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     74      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3F      5D       1       73.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     147      34        0.0%
DATA                 0      0     147       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 27 16:34:43 2017

                  ___altoft@exp 0032                               _n 00FC               main@cylinderStart 0124  
          main@cylinderBackward 0120                   ___altoft@sign 0033                     _sortBattery 0E0A  
                  ___awdiv@sign 002D             ___wmul@multiplicand 0032                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000                _redirectingServo 0148  
                  ___ftadd@exp1 00A7                    ___ftadd@exp2 00A6             main@cylinderForward 011E  
                  ___ftadd@sign 00A5                             l122 1962                             l131 1A82  
                           l123 196A                             l151 11CE                             l226 3680  
                           l324 3578                             l405 3408                             l229 368C  
                           l190 376E                             l407 3414                             l408 3420  
                           l705 0996                             l299 2986                             l398 34E2  
                           l745 0818                             l754 0A04                 ??_showInterface 0040  
                  __CFG_CPB$OFF 000000                             _PEN 007E2A                    __CFG_CPD$OFF 000000  
                           _SEN 007E28                             _n_C 0166                    ___awmod@sign 0027  
                           wreg 000FE8                    __CFG_LVP$OFF 000000                    ___ftdiv@cntr 0080  
                  ___ftdiv@sign 0085                    __CFG_WDT$OFF 000000                            l1041 2D4A  
                          l1009 2582                            l1113 245A                            l1106 23CC  
                          l1107 23F4                            l1070 1B4E                            l1064 1AEC  
                          l1138 372E                            l1068 1B26                            l1079 1C24  
                          l1088 1C4E                            l1099 286E                            l1188 30AE  
                          l1198 32E6                            l5110 2B1A                            l5102 2AF6  
                          l6000 22D6                            l5106 2B04                            l5130 2DAC  
                          l5122 2D86                            l6010 230C                            l5132 2DB8  
                          l6100 0124                            l5134 2DBC                            l5142 2DEE  
                          l5126 2D9A                            l6014 2328                            l6006 22F2  
                          l6110 0186                            l6008 2302                            l6024 3060  
                          l6200 04AA                            l6112 018C                            l6104 0160  
                          l5090 2AB6                            l5146 2E04                            l5138 2DE0  
                          l6026 306C                            l6210 051A                            l6130 01F8  
                          l6122 01C0                            l6114 0192                            l6106 0176  
                          l5092 2AC2                            l5084 2A94                            l6036 30A0  
                          l6028 3070                            l6052 32D8                            l6044 32A4  
                          l6060 3370                            l6220 0578                            l6132 0210  
                          l6116 0198                            l5094 2AC6                            l5078 2A7C  
                          l5510 1BB4                            l4710 342C                            l6046 32B0  
                          l6302 096C                            l6206 04F4                            l6142 0256  
                          l6126 01E6                            l6150 02B2                            l6070 0022  
                          l5440 2CE4                            l5512 1BC2                            l5504 1B86  
                          l6048 32B4                            l5600 2FCE                            l6400 0C30  
                          l6304 097A                            l6224 05DE                            l6136 0224  
                          l6128 01F2                            l6080 0058                            l5450 2D40  
                          l5442 2D02                            l5434 2CCC                            l5530 1C78  
                          l5522 1C0A                            l5514 1BD0                            l6058 3364  
                          l6330 0A26                            l6242 067A                            l6226 05E4  
                          l6138 023E                            l6074 0038                            l5540 1CC6  
                          l5524 1C18                            l5516 1BDC                            l5612 2FF4  
                          l6412 0C78                            l6340 0A76                            l6316 09BE  
                          l6308 0988                            l6252 06D0                            l6156 02CC  
                          l6148 026E                            l6076 004E                            l5446 2D18  
                          l5438 2CDA                            l5550 20D8                            l5614 2FFC  
                          l5606 2FDE                            l6422 0CC6                            l6430 0DBA  
                          l6414 0C84                            l6406 0C5C                            l6342 0A7C  
                          l6334 0A4E                            l6262 0702                            l6246 06A2  
                          l6238 062A                            l6190 0428                            l6182 03C0  
                          l6166 0312                            l6086 0088                            l6094 00FC  
                          l5448 2D36                            l6520 29A2                            l5632 3034  
                          l5624 301C                            l5616 3000                            l5712 1436  
                          l6424 0D46                            l6432 0DCC                            l6280 07E6  
                          l6264 0716                            l6256 06DE                            l6504 2954  
                          l4690 34B6                            l5482 1AFA                            l5570 215A  
                          l5730 163A                            l5722 1506                            l6418 0C9E  
                          l6434 0DD4                            l6354 0AC2                            l6370 0B0E  
                          l6282 07FA                            l6258 06F4                            l6274 07CA  
                          l6194 044E                            l6610 26E0                            l4684 34AA  
                          l5580 2198                            l5556 210C                            l6524 29F8  
                          l5820 24A8                            l5804 2448                            l5628 3026  
                          l5660 3200                            l5652 31E0                            l5644 31C6  
                          l6380 0B78                            l6356 0AC8                            l6372 0B20  
                          l6292 0840                            l6276 07D8                            l6268 073E  
                          l6196 0464                            l6436 0DEA                            l6460 2B84  
                          l4678 34A0                            l5494 1B44                            l5574 2178  
                          l5814 248A                            l5806 2454                            l5654 31E8  
                          l5718 14E0                            l6286 081C                            l6198 0494  
                          l6622 271A                            l6606 26D2                            l6470 2BA6  
                          l6454 2B70                            l6710 1062                            l4696 34BE  
                          l5488 1B34                            l5584 21B6                            l6528 2A20  
                          l5656 31EC                            l5664 320A                            l5648 31D2  
                          l5736 16E4                            l6392 0BE4                            l6376 0B48  
                          l6296 0892                            l6640 2762                            l6472 2BAC  
                          l6464 2B92                            l6720 10FA                            l6712 1090  
                          l5842 251A                            l5834 24EA                            l5690 1E3C  
                          l6394 0BEE                            l6386 0BAC                            l6626 2724  
                          l6650 2788                            l6490 28D0                            l6466 2B98  
                          l6458 2B7E                            l6730 1156                            l5916 2844  
                          l5764 2392                            l5668 3218                            l5748 37B8  
                          l6644 2772                            l6636 2752                            l6628 272C  
                          l6476 2BBA                            l6820 1972                            l5934 33DC  
                          l5854 2548                            l5758 2366                            l6398 0C26  
                          l6494 28FC                            l6486 28A4                            l6478 2BC0  
                          l6750 1206                            l6806 17CA                            l5864 2570  
                          l6648 277C                            l6592 269A                            l6824 1A0C  
                          l5946 35B8                            l5890 27CA                            l5954 2E46  
                          l5866 257C                            l5858 2558                            l5794 2420  
                          l5698 1F04                            l6594 269E                            l6498 2928  
                          l6762 1274                            l6738 1192                            l6690 0ECA  
                          l6826 1A18                            l5876 315C                            l5964 2EA2  
                          l6596 26A8                            l6756 1244                            l6748 11DE  
                          l6836 1A3C                            l5878 3168                            l5958 2E76  
                          l5798 2430                            l6598 26AC                            l5896 27F6  
                          l5978 2230                            l6786 1712                            l5996 22C2  
                          l6798 1786                            _EEIF 007D0C                            STR_1 FFF6  
                          STR_2 FFC0                            STR_3 FFAF                            STR_4 FFE0  
                          STR_5 FFD1                            STR_6 FFEE                            STR_7 FEF0  
                          STR_8 FF9E                            STR_9 FEDE                            _LATA 000F89  
                          _LATB 000F8A                            _LATC 000F8B                            _LATD 000F8C  
                          _LATE 000F8D                    printf@tmpval 00D1                            u6021 220C  
                          u6040 2256                            u5241 1A9A                            u5251 1AB8  
                          _PEIE 007F96                            u6045 224C                            u6310 0358  
                          u5451 20B6                            u6315 034C                            u7300 1942  
                          _RCEN 007E2B                            u7310 1944                            u5471 20EA  
                          u6530 0810                            u5731 234A                            u5911 27AE  
                          u5751 2376                            u7407 0EFC                            u7417 0FF4  
                          u7507 3310                            u5931 27DA                            u7427 122C  
                          u7517 331E                            u7437 1264                            u7527 3344  
                          u7447 129E                            u7537 3352                            u7457 3772  
                          u7467 34EE                            u7387 1872                            u6924 28C0  
                          u7477 3522                            u6925 28BC                            u7397 0E46  
                          u6934 28EC                            u7487 3786                            u6935 28E8  
                          u6944 2918                            u6864 2B56                            u7497 3798  
                          u6945 2914                            u6865 2B50                            u6954 2944  
                          u6955 2940                            _RSEN 007E29                            _n_AA 0164  
                          _n_9V 0162                            _main 170A                            _curr 0059  
                  ___ftpack@arg 0022                            _keys FEB3                    ___ftpack@exp 0025  
                          _time 015C                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            btemp 005E  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                 __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000                    ___ftmul@cntr 0090  
                  ___param_bank 000000                    ___ftmul@sign 0091                    ___fttol@exp1 00B6  
                  ___fttol@lval 00B2            __end_ofi2_startTimer 349E            __end_of_angleToPulse 20A4  
               __end_of___aldiv 2B2C                 __end_of___almod 2E16                           ?_main 0001  
                         _ACKEN 007E2C                           _ACKDT 007E2D                 __end_of___awdiv 303E  
                         _EEADR 000FA9                 __end_of___ftadd 1CEC                           STR_10 FF6B  
                         STR_11 FF02                           STR_12 FF5A                           STR_13 FECB  
                         STR_14 FF7C                           STR_15 FF14                           STR_16 FF49  
                         STR_17 FF26                           STR_18 FF8D                           STR_19 FF38  
               __end_of___awmod 3222                 __end_of___ftdiv 28A2         ??_servoInterruptService 0010  
               __end_of___ftneg 373C                 __end_of___lldiv 30C0                 __end_of___ftmul 21F6  
                         _T0CON 000FD5                 ___awdiv@divisor 002A                           _T1CON 000FCD  
               __end_of___llmod 32F8                 __end_of___ftsub 3406                 __end_of___fttol 233A  
                         _T3CON 000FB1                           i2l405 3454                           i2l407 3460  
                         i2l408 346C                 ___awdiv@counter 002C                           _TMR0H 000FD7  
                         _TMR1H 000FCF                           _TMR0L 000FD6                           _TMR3H 000FB3  
                         _TMR1L 000FCE                           _TMR3L 000FB2                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _PORTD 000F83  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                 __end_of_lcdHome 37F4                    ___lltoft@exp 0032  
                 _conveyorServo 0130                 __end_of_lcdInst 37A2                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                 __end_of_initLCD 352E                  __CFG_EBTRB$OFF 000000  
                 ___awtoft@sign 002D                           _angle 0049                 __end_of_dpowers FE45  
                         _count 0057                           _scale 12F4                 __end_of_isdigit 37C0  
                 ___ftpack@sign 0026                           _pulse 014C                           _putch 375E  
                         pclath 000FFA                           tablat 000FF5                 __end_of_service 313A  
               __end_of_runMenu 360E                 __end_of_runTime 3634                           status 000FD8  
            __size_ofi2___awmod 0070                  __CFG_PBADEN$ON 000000            __end_of_digitalWrite 2BF4  
               __initialization 2EA6                    __end_of_main 1A84                    __end_of_keys FEC4  
                        ??_main 00E7                   ___fttol@sign1 00B1                   __activetblptr 000002  
          __size_of_digitalRead 00EA            __size_of__tdiv_to_l_ 0132                    _stoppingTime 012E  
               i2digitalWrite@p 000E                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                __end_of___altoft 31B2                ___llmod@dividend 002F  
                        ?_scale 0092                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                          _EEDATA 000FA8                          _EECON1 000FA6  
                        _EECON2 000FA7                ___awdiv@dividend 0028                __end_of___awtoft 35DC  
                        ?_putch 0001                __end_of___ftpack 2D6A                __end_of___lltoft 33BA  
                        _INT0IE 007F94                    sortBattery@V 010F                    sortBattery@i 0119  
                        i2l4820 3250                          i2l4812 3236                          i2l4822 3258  
                        i2l4824 325C                          i2l4832 327A                          i2l4816 3242  
                        i2l4760 2C38                          i2l4770 2C5A                          i2l4836 3288  
                        i2l4828 3270                          i2l4772 2C60                          i2l4764 2C46  
                        i2l4782 2C82                          i2l4766 2C4C                          i2l4776 2C6E  
                        i2l4784 2C88                          i2l4778 2C74                          i2l4798 3478  
                        _TMR0IE 007F95                          _TMR0IF 007F92                          _TMR1IE 007CE8  
                        _TMR3IE 007D01                          _SSPADD 000FC8                          _TRISC3 007CA3  
                        _TRISC4 007CA4                          _SSPBUF 000FC9                __end_of_dateTime 36F2  
              __end_of_lcdClear 37EC               _angleToPulse$1337 00C7                  __CFG_XINST$OFF 000000  
              __end_of__powers_ FE93                          ___ftge 2E16                __end_of_mainMenu 36CC  
                     ??___aldiv 002A                       ??___almod 0038                          ___wmul 36F2  
                     ??___awdiv 002C                       ??___ftadd 00A2                  __CFG_STVREN$ON 000000  
                     ??___awmod 0026                       ??___ftdiv 003A                       ??___ftneg 0025  
                     ??___lldiv 002A                       ??___ftmul 003D                       ??___llmod 0037  
                     ??___ftsub 0040                       ??___fttol 00AC                          _fround 1CEC  
                        clear_0 2F0C                          clear_1 2F1E                ___awdiv@quotient 002E  
                        _period 004D                 ___awmod@divisor 0024                       ??_lcdHome 0026  
               ___awmod@counter 0026                          _servos 0154                       ??_lcdInst 0024  
                        _printf 0012                __end_of_pinSetup 356C                __end_of_setAngle 2A60  
             analogRead@channel 0022           ___ftmul@f3_as_product 008D                       ??_initLCD 0026  
                  __pdataCOMRAM 0040                       ??_isdigit 0022               __end_ofi2___awmod 3292  
                 setAngle@angle 00D0                    __mediumconst FE1C                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                   setAngle@motor 00CE  
                     ??_service 0014                       ??_runMenu 0040                __end_of_runStats 365A  
                     ??_runTime 0040                  i2___awmod@sign 0006                      __accesstop 0080  
       __end_of__initialization 2F24                      ___altoft@c 002A                      ___ftadd@f1 009C  
                    ___ftadd@f2 009F                      ___ftge@ff1 002E                      ___ftge@ff2 0031  
                 ___rparam_used 000001                      ___ftdiv@f1 0034                      ___ftdiv@f2 0037  
                    ___ftdiv@f3 0081                      ___ftneg@f1 0022                      ___awtoft@c 002A  
         __size_ofi2_startTimer 004C                      ___ftmul@f1 0086                      ___ftmul@f2 0089  
                    ___ftsub@f1 00A8                      ___ftsub@f2 00AB                      ___fttol@f1 00A8  
          __end_of_happynewyear FECB                  __pcstackCOMRAM 0001           __size_of_angleToPulse 0158  
                  __pidataBANK0 37D3                    __pidataBANK1 373C                      ___lltoft@c 002A  
                 _cylinderMotor 0138                   __end_of_scale 170A                    ?_sortBattery 0001  
                 __end_of_putch 3780              __size_of_lcdNibble 0066                      __div_to_l_ 246C  
               __div_to_l_@exp1 002D                 __div_to_l_@cntr 002C                         ??_scale 0040  
               __div_to_l_@quot 0028                         ??_putch 0026                    i2_startTimer 3452  
                    __pbssBANK0 00FC                      __pbssBANK1 014C                    _angleToPulse 1F4C  
         __size_of_digitalWrite 00C8              __size_of_initTimer 004A              __size_of_initServo 0088  
                    _analogRead 356C                   __div_to_l_@f1 0022                   __div_to_l_@f2 0025  
                       ?___ftge 002E                         ?___wmul 0030                _sortBattery$1336 0102  
         sortBattery@resolution 010C                       ?___altoft 002A                         ?_fround 0092  
                    _lcdNewline 37DC                       ?___awtoft 002A                       ?___ftpack 0022  
                       ?_printf 00B7                       ?___lltoft 002A  __size_of_servoInterruptService 0106  
 __end_of_servoInterruptService 269A           __end_of_showInterface 279E                       ?_dateTime 0001  
             i2startTimer@timer 0007                       ?_lcdClear 0001              __size_of_runSelect 0026  
              angleToPulse@a000 00CA                angleToPulse@a180 00C3                    _digitalWrite 2B2C  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
                     ?_mainMenu 0001         __size_ofi2_digitalWrite 00C8                         _V_LIM_C 0046  
           main@lastBatteryTime 0122                       ?_pinSetup 0001                       ?_setAngle 00CE  
             __end_of_lcdNibble 335E               __end_of__npowers_ FE6C                         __Hparam 0000  
                    _scale$1340 0095                         __Lparam 0000                         ___aldiv 2A60  
                       ___almod 2D6A                 __size_of___ftge 0090                         ___awdiv 2FBA  
                       ___ftadd 1A84                         ___awmod 31B2                      _readKeypad 3680  
                       ___ftdiv 279E                         ___ftneg 3718                         ___lldiv 303E  
               __size_of___wmul 0026                         ___ftmul 20A4                         ___llmod 3292  
                       ___ftsub 33BA                         ___fttol 21F6                       ?_runStats 0001  
                       _n_OTHER 0168                      ??___altoft 002E                         __pcinit 2EA6  
                    ??___awtoft 002D                      ??___ftpack 0027                 __size_of_fround 0260  
                       __ramtop 1000                         _lcdHome 37EC                         _lcdInst 3780  
                    ??___lltoft 002E                         __ptext0 170A                         __ptext1 0E0A  
                       __ptext2 2B2C                         __ptext3 28A2                         __ptext4 356C  
                       __ptext5 269A                         __ptext6 360E                         __ptext7 3634  
                       __ptext8 365A                         __ptext9 35DC                 __size_of_printf 0DF8  
                       _padPin1 013C                         _padPin2 0140                         _padPin3 0053  
                 startTimer@val 0024                         _initLCD 34E8               __end_of_hexpowers FEB3  
                   ?__div_to_l_ 0022                         _lastKey 005D               __end_of_initTimer 34E8  
             __end_of_initServo 2FBA                         _dpowers FE1D                         _isdigit 37A2  
              ___awmod@dividend 0022                      ??_dateTime 0040                ___aldiv@dividend 0022  
                    ??_lcdClear 0026                         _service 0008                         _runMenu 35DC  
                       _runTime 360E                  __pintcode_body 30C0            end_of_initialization 2F24  
                    ??_mainMenu 0040                   __Lmediumconst FE1C                         int_func 30C0  
                digitalRead@pin 0022                     ?_analogRead 0022                      ??_pinSetup 0022  
                    ??_setAngle 00D2                 ___lldiv@divisor 0026                 ___lldiv@counter 002E  
                setAngle@period 00D4               __end_of_runSelect 3680                         printf@c 00E4  
                       printf@f 00B7                ___aldiv@quotient 002C                         postdec1 000FE5  
                       postdec2 000FDD                 _batteryDetected 0160                         postinc0 000FEE  
                       postinc2 000FDE                      ??_runStats 0040                  __tdiv_to_l_@f1 0022  
                __tdiv_to_l_@f2 0025                   ??_digitalRead 0024                     ?_lcdNewline 0001  
                 ??__tdiv_to_l_ 0028                       _PORTBbits 000F81            __size_of_sortBattery 04EA  
              showInterface@key 00E6             _redirectAngle_OTHER 00FA                    _happynewyear FEC4  
            angleToPulse@offset 00BF              sortBattery@V_float 0104                       i2___awmod 3222  
                    _startTimer 3406                     ___ftdiv@exp 0084                     printf@width 00DE  
           __size_of__div_to_l_ 0128                     ___ftmul@exp 008C                     ?_readKeypad 0001  
                __end_of___ftge 2EA6                  __end_of___wmul 3718                   __pidataCOMRAM 37C0  
                __end_of_fround 1F4C                  __end_of_printf 0E0A             __size_of_analogRead 0038  
           start_initialization 2EA6             __end_of_digitalRead 298C             __end_of__tdiv_to_l_ 246C  
                initServo@angle 00DA                  initTimer@timer 0022                  initServo@motor 00D8  
                    ?i2___awmod 0001                  i2_digitalWrite 2BF4             __size_of_lcdNewline 0008  
               ___llmod@divisor 0033                 ___llmod@counter 0037                        ??___ftge 0034  
                      ??___wmul 0034                     __pdataBANK0 00F4                     __pdataBANK1 012A  
              __CFG_LPT1OSC$OFF 000000                        ??_fround 0040                        ??_printf 00C1  
             __size_of___altoft 0078                      fround@prec 009B               __size_of___awtoft 0038  
             __size_of___ftpack 00AE               __size_of___lltoft 005C                     __pbssCOMRAM 0053  
                 __pcstackBANK0 0080                   __pcstackBANK1 0100          __end_ofi2_digitalWrite 2CBC  
        sortBattery@targetAngle 0117               __size_of_dateTime 0026                     ?_startTimer 0022  
             __size_of_lcdClear 0008             __size_of_readKeypad 0026               __size_of_mainMenu 0026  
             i2digitalWrite@pin 0007               i2digitalWrite@val 0009               __CFG_CCP2MX$PORTC 000000  
             __size_of_pinSetup 003E               __size_of_setAngle 00D4                       __pintcode 0008  
                 __pmediumconst FE1C                       _lcdNibble 32F8                        ?___aldiv 0022  
                      ?___almod 0030                        ?___awdiv 0028                        ?___ftadd 009C  
                      ?___awmod 0022                        ?___ftdiv 0034                        ?___ftneg 0022  
                      ?___lldiv 0022                        ?___ftmul 0086                        ?___llmod 002F  
                      ?___ftsub 00A8                       __npowers_ FE45                        ?___fttol 00A8  
                   _digitalRead 28A2                ___almod@dividend 0030                        ?_lcdHome 0001  
                      ?_lcdInst 0001                     __tdiv_to_l_ 233A               __size_of_runStats 0026  
                  ??__div_to_l_ 0028                        ?_initLCD 0001                 startTimer@timer 0022  
                      ?_isdigit 0001                        ?_service 0001                       _hexpowers FE93  
                      ?_runMenu 0001                       _initTimer 349E                       _initServo 2F32  
                      ?_runTime 0001                 ?i2_digitalWrite 0007           _servoInterruptService 2594  
                   ??i2___awmod 0005                  __size_of_scale 0416                  __size_of_putch 0022  
                      _AA_float 004F                 ___aldiv@divisor 0026                 ___aldiv@counter 002A  
                sortBattery@Vcc 0109                  ___wmul@product 0034                        _LATDbits 000F8C  
                  ??_analogRead 0026              __end_of__div_to_l_ 2594                        i2u454_44 2C1E  
                      i2u454_45 2C18          __size_of_showInterface 0104                __CFG_WDTPS$32768 000000  
                    ?_lcdNibble 0001                  _padAngle_CLOSE 00F4                       _terminate 016A  
                 digitalWrite@p 0029                    ??_lcdNewline 0026             __size_of_startTimer 004C  
                     _runSelect 365A               angleToPulse@angle 00B7                 main@cylinderDur 0126  
             ___wmul@multiplier 0030                   lcdNibble@data 0023                      printf@flag 00E0  
                 lcdNibble@temp 0022                      printf@fval 00D7                      printf@prec 00E2  
            __end_of_analogRead 35A4                        _V_LIM_AA 0043                        _V_LIM_9V 0040  
                    runMenu@key 00E5                      ?_initTimer 0022                      ?_initServo 00D8  
             sortBattery@signal 0107        sortBattery@pos_v_counter 0100                       copy_data0 2EBA  
                     copy_data1 2EDA                       copy_data2 2EFA              i2___awmod@dividend 0001  
            __end_of_lcdNewline 37E4                   readKeypad@key 0022                        __Hrparam 0000  
                      __Lrparam 0000              __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0022  
                 ??_sortBattery 00E5                __size_of___aldiv 00CC                __size_of___almod 00AC  
              __size_of___awdiv 0084                __size_of___ftadd 0268                __size_of___awmod 0070  
              __size_of___ftdiv 0104                __size_of___ftneg 0024                __size_of___lldiv 0082  
                      ___altoft 313A                __size_of___ftmul 0152                __size_of___llmod 0066  
              __size_of___ftsub 004C                __size_of___fttol 0144                      ?_runSelect 0001  
                      ___awtoft 35A4                        ___ftpack 2CBC                     _fround$1338 0098  
                   _fround$1339 0095                     _cylinderDir 0134                        ___lltoft 335E  
                   _isdigit$962 0023                __size_of_lcdHome 0008                __size_of_lcdInst 0022  
                     setAngle@i 00D6                __size_of_initLCD 0046                        _dateTime 36CC  
              __size_of_isdigit 001E          ?_servoInterruptService 0001                   _showInterface 269A  
                      _lcdClear 37E4                        __ptext10 3680                        __ptext11 36A6  
                      __ptext20 31B2                        __ptext12 36CC                        __ptext21 2FBA  
                      __ptext13 0012                        __ptext30 37E4                        __ptext22 233A  
                      __ptext14 12F4                        __ptext31 352E                        __ptext23 246C  
                      __ptext15 375E                        __ptext40 1A84                        __ptext32 37EC  
                      __ptext24 335E                        __ptext16 37DC                        __ptext41 35A4  
                      __ptext33 2F32                        __ptext25 3292                        __ptext17 37A2  
                      __ptext42 313A                        __ptext34 3406                        __ptext26 303E  
                      __ptext18 1CEC                        __ptext51 2594                        __ptext43 2CBC  
                      __ptext35 298C                        __ptext27 33BA                        __ptext19 36F2  
                      __ptext52 3452                        __ptext44 349E                        __ptext36 1F4C  
                      __ptext28 3718                        __ptext53 2BF4                        __ptext45 34E8  
                      __ptext37 21F6                        __ptext29 2E16                        __ptext54 3222  
                      __ptext46 3780                        __ptext38 20A4                        __ptext47 32F8  
                      __ptext39 279E                        __ptext48 2D6A                        __ptext49 2A60  
                      __powers_ FE6C                __size_of_service 3132                __size_of_runMenu 0032  
               i2startTimer@val 0009                __size_of_runTime 0026                 ___almod@divisor 0034  
                 ?i2_startTimer 0007                        _mainMenu 36A6                        _padServo 0144  
               ___almod@counter 0038              __end_of_readKeypad 36A6                   ?_angleToPulse 00B7  
                 __size_of_main 037A                        _pinSetup 352E                        _setAngle 298C  
                      _prevTime 005B                sortBattery@V_203 011C                     ??_lcdNibble 0022  
                 _padAngle_OPEN 004B                        int$flags 005E                sortBattery@i_205 0115  
                      _runStats 3634                sortBattery@V_max 0112                       printf@idx 00CA  
                     printf@len 00CD                       printf@exp 00D5                       printf@val 00DA  
                      main@prev 0128               i2___awmod@divisor 0003                       putch@data 0026  
             i2___awmod@counter 0005             __end_of_sortBattery 12F4                      _INTCONbits 000FF2  
                ?_showInterface 0001                   ?_digitalWrite 0022                     ??_initTimer 0024  
                   ??_initServo 00DC                        isdigit@c 0024                        scale@scl 0098  
                ??i2_startTimer 000D                    ??_startTimer 0028                        intlevel2 0000  
              __tdiv_to_l_@exp1 0030                __tdiv_to_l_@cntr 002F                  ??_angleToPulse 00BB  
              __tdiv_to_l_@quot 002B                ___lldiv@dividend 0022                _redirectAngle_AA 012C  
              _redirectAngle_9V 00F6                        printf@ap 00CF                        printf@cp 00CB  
                   lcdInst@data 0025                    ?_digitalRead 0022                     ??_runSelect 0040  
                  ?__tdiv_to_l_ 0022              __end_of_startTimer 3452                     _printf$1341 00C7  
              ??i2_digitalWrite 000B                ___lldiv@quotient 002A                  ??_digitalWrite 0026  
                  ___aldiv@sign 002B                 _redirectAngle_C 00F8                _padAngle_NEUTRAL 012A  
               digitalWrite@pin 0022                 digitalWrite@val 0024                    ___almod@sign 0039  
