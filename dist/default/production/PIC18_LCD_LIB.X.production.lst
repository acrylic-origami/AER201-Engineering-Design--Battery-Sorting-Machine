

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 24 00:22:51 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	text23,global,reloc=2,class=CODE,delta=1
    32                           	psect	text24,global,reloc=2,class=CODE,delta=1
    33                           	psect	text25,global,reloc=2,class=CODE,delta=1
    34                           	psect	text26,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.40
    39                           ; Generated 01/12/2016 GMT
    40                           ; 
    41                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _dpowers:
    78                           	opt stack 0
    79  001001  0001               	dw	1
    80  001003  0000               	dw	0
    81  001005  000A               	dw	10
    82  001007  0000               	dw	0
    83  001009  0064               	dw	100
    84  00100B  0000               	dw	0
    85  00100D  03E8               	dw	1000
    86  00100F  0000               	dw	0
    87  001011  2710               	dw	10000
    88  001013  0000               	dw	0
    89  001015  86A0               	dw	34464
    90  001017  0001               	dw	1
    91  001019  4240               	dw	16960
    92  00101B  000F               	dw	15
    93  00101D  9680               	dw	38528
    94  00101F  0098               	dw	152
    95  001021  E100               	dw	57600
    96  001023  05F5               	dw	1525
    97  001025  CA00               	dw	51712
    98  001027  3B9A               	dw	15258
    99  001029                     __end_of_dpowers:
   100                           	opt stack 0
   101  001029                     __npowers_:
   102                           	opt stack 0
   103  001029  00                 	db	0
   104  00102A  80                 	db	128
   105  00102B  3F                 	db	63
   106  00102C  CD                 	db	205
   107  00102D  CC                 	db	204
   108  00102E  3D                 	db	61
   109  00102F  D7                 	db	215
   110  001030  23                 	db	35
   111  001031  3C                 	db	60
   112  001032  12                 	db	18
   113  001033  83                 	db	131
   114  001034  3A                 	db	58
   115  001035  B7                 	db	183
   116  001036  D1                 	db	209
   117  001037  38                 	db	56
   118  001038  C6                 	db	198
   119  001039  27                 	db	39
   120  00103A  37                 	db	55
   121  00103B  38                 	db	56
   122  00103C  86                 	db	134
   123  00103D  35                 	db	53
   124  00103E  C0                 	db	192
   125  00103F  D6                 	db	214
   126  001040  33                 	db	51
   127  001041  CC                 	db	204
   128  001042  2B                 	db	43
   129  001043  32                 	db	50
   130  001044  70                 	db	112
   131  001045  89                 	db	137
   132  001046  30                 	db	48
   133  001047  E7                 	db	231
   134  001048  DB                 	db	219
   135  001049  2E                 	db	46
   136  00104A  E5                 	db	229
   137  00104B  3C                 	db	60
   138  00104C  1E                 	db	30
   139  00104D  42                 	db	66
   140  00104E  A2                 	db	162
   141  00104F  0D                 	db	13
   142  001050                     __end_of__npowers_:
   143                           	opt stack 0
   144  001050                     __powers_:
   145                           	opt stack 0
   146  001050  00                 	db	0
   147  001051  80                 	db	128
   148  001052  3F                 	db	63
   149  001053  00                 	db	0
   150  001054  20                 	db	32
   151  001055  41                 	db	65
   152  001056  00                 	db	0
   153  001057  C8                 	db	200
   154  001058  42                 	db	66
   155  001059  00                 	db	0
   156  00105A  7A                 	db	122
   157  00105B  44                 	db	68
   158  00105C  40                 	db	64
   159  00105D  1C                 	db	28
   160  00105E  46                 	db	70
   161  00105F  50                 	db	80
   162  001060  C3                 	db	195
   163  001061  47                 	db	71
   164  001062  24                 	db	36
   165  001063  74                 	db	116
   166  001064  49                 	db	73
   167  001065  97                 	db	151
   168  001066  18                 	db	24
   169  001067  4B                 	db	75
   170  001068  BC                 	db	188
   171  001069  BE                 	db	190
   172  00106A  4C                 	db	76
   173  00106B  6B                 	db	107
   174  00106C  6E                 	db	110
   175  00106D  4E                 	db	78
   176  00106E  03                 	db	3
   177  00106F  15                 	db	21
   178  001070  50                 	db	80
   179  001071  79                 	db	121
   180  001072  AD                 	db	173
   181  001073  60                 	db	96
   182  001074  F3                 	db	243
   183  001075  49                 	db	73
   184  001076  71                 	db	113
   185  001077                     __end_of__powers_:
   186                           	opt stack 0
   187  001077  31                 	db	49
   188  001078  32                 	db	50
   189  001079  33                 	db	51
   190  00107A  41                 	db	65
   191  00107B  34                 	db	52
   192  00107C  35                 	db	53
   193  00107D  36                 	db	54
   194  00107E  42                 	db	66
   195  00107F  37                 	db	55
   196  001080  38                 	db	56
   197  001081  39                 	db	57
   198  001082  43                 	db	67
   199  001083  2A                 	db	42
   200  001084  30                 	db	48
   201  001085  23                 	db	35
   202  001086  44                 	db	68
   203  001087  00                 	db	0
   204  001088                     __end_of_keys:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _LATA	set	3977
   212  0000                     _LATB	set	3978
   213  0000                     _LATC	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _PORTA	set	3968
   218  0000                     _PORTB	set	3969
   219  0000                     _PORTBbits	set	3969
   220  0000                     _PORTC	set	3970
   221  0000                     _PORTD	set	3971
   222  0000                     _TRISA	set	3986
   223  0000                     _TRISB	set	3987
   224  0000                     _TRISC	set	3988
   225  0000                     _TRISD	set	3989
   226  0000                     _TRISE	set	3990
   227  001088                     STR_3:
   228  001088  25                 	db	37
   229  001089  66                 	db	102	;'f'
   230  00108A  0A                 	db	10
   231  00108B  00                 	db	0
   232  00108C  30                 	db	48	;'0'
   233  00108D  00                 	db	0
   234  00108E  31                 	db	49	;'1'
   235  00108F  00                 	db	0
   236                           
   237                           ; #config settings
   238  001090  00                 	db	0	; dummy byte at the end
   239  0000                     
   240                           	psect	cinit
   241  0028D0                     __pcinit:
   242                           	opt stack 0
   243  0028D0                     start_initialization:
   244                           	opt stack 0
   245  0028D0                     __initialization:
   246                           	opt stack 0
   247  0028D0                     end_of_initialization:
   248                           	opt stack 0
   249  0028D0                     __end_of__initialization:
   250                           	opt stack 0
   251  0028D0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   252  0028D2  6EF8               	movwf	tblptru,c
   253  0028D4  0100               	movlb	0
   254  0028D6  EF3A  F011         	goto	_main	;jump to C main() function
   255                           tblptru	equ	0xFF8
   256                           
   257                           	psect	cstackCOMRAM
   258  000001                     __pcstackCOMRAM:
   259                           	opt stack 0
   260  000001                     ?___awmod:
   261                           	opt stack 0
   262  000001                     ?___ftpack:
   263                           	opt stack 0
   264  000001                     ?___ftneg:
   265                           	opt stack 0
   266  000001                     ?_analogRead:
   267                           	opt stack 0
   268  000001                     ?__tdiv_to_l_:
   269                           	opt stack 0
   270  000001                     ?__div_to_l_:
   271                           	opt stack 0
   272  000001                     ?___lldiv:
   273                           	opt stack 0
   274  000001                     ?___llmod:
   275                           	opt stack 0
   276  000001                     lcdNibble@temp:
   277                           	opt stack 0
   278  000001                     analogRead@channel:
   279                           	opt stack 0
   280  000001                     ___awmod@dividend:
   281                           	opt stack 0
   282  000001                     __div_to_l_@f1:
   283                           	opt stack 0
   284  000001                     ___ftpack@arg:
   285                           	opt stack 0
   286  000001                     __tdiv_to_l_@f1:
   287                           	opt stack 0
   288  000001                     ___ftge@ff1:
   289                           	opt stack 0
   290  000001                     ___ftneg@f1:
   291                           	opt stack 0
   292  000001                     ___lldiv@dividend:
   293                           	opt stack 0
   294  000001                     ___llmod@dividend:
   295                           	opt stack 0
   296                           
   297                           ; 4 bytes @ 0x0
   298  000001                     	ds	1
   299  000002                     lcdNibble@data:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x1
   303  000002                     	ds	1
   304  000003                     ??_lcdInst:
   305  000003                     ___awmod@divisor:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x2
   309  000003                     	ds	1
   310  000004                     lcdInst@data:
   311                           	opt stack 0
   312  000004                     ___ftpack@exp:
   313                           	opt stack 0
   314  000004                     __div_to_l_@f2:
   315                           	opt stack 0
   316  000004                     __tdiv_to_l_@f2:
   317                           	opt stack 0
   318  000004                     ___ftge@ff2:
   319                           	opt stack 0
   320                           
   321                           ; 3 bytes @ 0x3
   322  000004                     	ds	1
   323  000005                     ??_initLCD:
   324  000005                     ??_analogRead:
   325  000005                     putch@data:
   326                           	opt stack 0
   327  000005                     ___awmod@counter:
   328                           	opt stack 0
   329  000005                     ___ftpack@sign:
   330                           	opt stack 0
   331  000005                     ___lldiv@divisor:
   332                           	opt stack 0
   333  000005                     ___llmod@divisor:
   334                           	opt stack 0
   335                           
   336                           ; 4 bytes @ 0x4
   337  000005                     	ds	1
   338  000006                     ??___ftpack:
   339  000006                     ___awmod@sign:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x5
   343  000006                     	ds	1
   344  000007                     ??__tdiv_to_l_:
   345  000007                     ??___ftge:
   346  000007                     ?___awdiv:
   347                           	opt stack 0
   348  000007                     ___awdiv@dividend:
   349                           	opt stack 0
   350  000007                     __div_to_l_@quot:
   351                           	opt stack 0
   352                           
   353                           ; 4 bytes @ 0x6
   354  000007                     	ds	2
   355  000009                     ?___altoft:
   356                           	opt stack 0
   357  000009                     ?___lltoft:
   358                           	opt stack 0
   359  000009                     ___llmod@counter:
   360                           	opt stack 0
   361  000009                     ___awdiv@divisor:
   362                           	opt stack 0
   363  000009                     ___altoft@c:
   364                           	opt stack 0
   365  000009                     ___lldiv@quotient:
   366                           	opt stack 0
   367  000009                     ___lltoft@c:
   368                           	opt stack 0
   369                           
   370                           ; 4 bytes @ 0x8
   371  000009                     	ds	1
   372  00000A                     __tdiv_to_l_@quot:
   373                           	opt stack 0
   374                           
   375                           ; 4 bytes @ 0x9
   376  00000A                     	ds	1
   377  00000B                     ___awdiv@counter:
   378                           	opt stack 0
   379  00000B                     __div_to_l_@cntr:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0xA
   383  00000B                     	ds	1
   384  00000C                     ___awdiv@sign:
   385                           	opt stack 0
   386  00000C                     __div_to_l_@exp1:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0xB
   390  00000C                     	ds	1
   391  00000D                     ??___altoft:
   392  00000D                     ??___lltoft:
   393  00000D                     ___lldiv@counter:
   394                           	opt stack 0
   395  00000D                     ___awdiv@quotient:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0xC
   399  00000D                     	ds	1
   400  00000E                     __tdiv_to_l_@cntr:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0xD
   404  00000E                     	ds	1
   405  00000F                     ?___wmul:
   406                           	opt stack 0
   407  00000F                     __tdiv_to_l_@exp1:
   408                           	opt stack 0
   409  00000F                     ___wmul@multiplier:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0xE
   413  00000F                     	ds	2
   414  000011                     ___altoft@exp:
   415                           	opt stack 0
   416  000011                     ___lltoft@exp:
   417                           	opt stack 0
   418  000011                     ___wmul@multiplicand:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x10
   422  000011                     	ds	1
   423  000012                     ___altoft@sign:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x11
   427  000012                     	ds	1
   428  000013                     ___wmul@product:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x12
   432  000013                     	ds	2
   433  000015                     ?___ftmul:
   434                           	opt stack 0
   435  000015                     ___ftmul@f1:
   436                           	opt stack 0
   437                           
   438                           ; 3 bytes @ 0x14
   439  000015                     	ds	3
   440  000018                     ___ftmul@f2:
   441                           	opt stack 0
   442                           
   443                           ; 3 bytes @ 0x17
   444  000018                     	ds	3
   445  00001B                     ??___ftmul:
   446                           
   447                           ; 1 bytes @ 0x1A
   448  00001B                     	ds	3
   449  00001E                     ___ftmul@exp:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x1D
   453  00001E                     	ds	1
   454  00001F                     ___ftmul@f3_as_product:
   455                           	opt stack 0
   456                           
   457                           ; 3 bytes @ 0x1E
   458  00001F                     	ds	3
   459  000022                     ___ftmul@cntr:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x21
   463  000022                     	ds	1
   464  000023                     ___ftmul@sign:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x22
   468  000023                     	ds	1
   469  000024                     ?_fround:
   470                           	opt stack 0
   471  000024                     ?_scale:
   472                           	opt stack 0
   473                           
   474                           ; 3 bytes @ 0x23
   475  000024                     	ds	3
   476  000027                     _fround$870:
   477                           	opt stack 0
   478  000027                     _scale$871:
   479                           	opt stack 0
   480                           
   481                           ; 3 bytes @ 0x26
   482  000027                     	ds	3
   483  00002A                     scale@scl:
   484                           	opt stack 0
   485  00002A                     _fround$869:
   486                           	opt stack 0
   487                           
   488                           ; 3 bytes @ 0x29
   489  00002A                     	ds	1
   490  00002B                     ?___fttol:
   491                           	opt stack 0
   492  00002B                     ___fttol@f1:
   493                           	opt stack 0
   494                           
   495                           ; 3 bytes @ 0x2A
   496  00002B                     	ds	2
   497  00002D                     fround@prec:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x2C
   501  00002D                     	ds	1
   502  00002E                     ?___ftadd:
   503                           	opt stack 0
   504  00002E                     ___ftadd@f1:
   505                           	opt stack 0
   506                           
   507                           ; 3 bytes @ 0x2D
   508  00002E                     	ds	1
   509  00002F                     ??___fttol:
   510                           
   511                           ; 1 bytes @ 0x2E
   512  00002F                     	ds	2
   513  000031                     ___ftadd@f2:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x30
   517  000031                     	ds	3
   518  000034                     ??___ftadd:
   519  000034                     ___fttol@sign1:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x33
   523  000034                     	ds	1
   524  000035                     ___fttol@lval:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x34
   528  000035                     	ds	2
   529  000037                     ___ftadd@sign:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x36
   533  000037                     	ds	1
   534  000038                     ___ftadd@exp2:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x37
   538  000038                     	ds	1
   539  000039                     ___ftadd@exp1:
   540                           	opt stack 0
   541  000039                     ___fttol@exp1:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x38
   545  000039                     	ds	1
   546  00003A                     ?___ftsub:
   547                           	opt stack 0
   548  00003A                     ___ftsub@f1:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x39
   552  00003A                     	ds	3
   553  00003D                     ___ftsub@f2:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x3C
   557  00003D                     	ds	3
   558  000040                     ?_printf:
   559                           	opt stack 0
   560  000040                     printf@f:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x3F
   564  000040                     	ds	5
   565  000045                     ??_printf:
   566                           
   567                           ; 1 bytes @ 0x44
   568  000045                     	ds	6
   569  00004B                     _printf$872:
   570                           	opt stack 0
   571                           
   572                           ; 3 bytes @ 0x4A
   573  00004B                     	ds	3
   574  00004E                     printf@ap:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x4D
   578  00004E                     	ds	2
   579  000050                     printf@flag:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x4F
   583  000050                     	ds	2
   584  000052                     printf@prec:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x51
   588  000052                     	ds	2
   589  000054                     printf@val:
   590                           	opt stack 0
   591                           
   592                           ; 4 bytes @ 0x53
   593  000054                     	ds	4
   594  000058                     printf@exp:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x57
   598  000058                     	ds	2
   599  00005A                     printf@tmpval:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x59
   603  00005A                     	ds	4
   604  00005E                     printf@fval:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x5D
   608  00005E                     	ds	3
   609  000061                     printf@c:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x60
   613  000061                     	ds	1
   614  000062                     ??_main:
   615                           
   616                           ; 1 bytes @ 0x61
   617  000062                     	ds	2
   618  000064                     main@voltage:
   619                           	opt stack 0
   620                           
   621                           ; 4 bytes @ 0x63
   622  000064                     	ds	4
   623  000068                     _main$868:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x67
   627  000068                     	ds	3
   628                           tblptru	equ	0xFF8
   629                           
   630 ;;
   631 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   632 ;;
   633 ;; *************** function _main *****************
   634 ;; Defined at:
   635 ;;		line 28 in file "main.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  voltage         4   99[COMRAM] long 
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   650 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   651 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   652 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   653 ;;Total ram usage:        9 bytes
   654 ;; Hardware stack levels required when called:    5
   655 ;; This function calls:
   656 ;;		___altoft
   657 ;;		___ftmul
   658 ;;		_analogRead
   659 ;;		_initLCD
   660 ;;		_lcdClear
   661 ;;		_printf
   662 ;; This function is called by:
   663 ;;		Startup code after reset
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           	psect	text0
   668  002274                     __ptext0:
   669                           	opt stack 0
   670  002274                     _main:
   671                           	opt stack 26
   672                           
   673                           ;main.c: 31: TRISA = 0xFF;
   674                           
   675                           ;incstack = 0
   676  002274  6892               	setf	3986,c	;volatile
   677                           
   678                           ;main.c: 32: TRISB = 0xFF;
   679  002276  6893               	setf	3987,c	;volatile
   680                           
   681                           ;main.c: 33: TRISC = 0x00;
   682  002278  0E00               	movlw	0
   683  00227A  6E94               	movwf	3988,c	;volatile
   684                           
   685                           ;main.c: 34: TRISD = 0x00;
   686  00227C  0E00               	movlw	0
   687  00227E  6E95               	movwf	3989,c	;volatile
   688                           
   689                           ;main.c: 35: TRISE = 0x00;
   690  002280  0E00               	movlw	0
   691  002282  6E96               	movwf	3990,c	;volatile
   692                           
   693                           ;main.c: 37: LATA = 0x00;
   694  002284  0E00               	movlw	0
   695  002286  6E89               	movwf	3977,c	;volatile
   696                           
   697                           ;main.c: 38: LATB = 0x00;
   698  002288  0E00               	movlw	0
   699  00228A  6E8A               	movwf	3978,c	;volatile
   700                           
   701                           ;main.c: 39: LATC = 0x00;
   702  00228C  0E00               	movlw	0
   703  00228E  6E8B               	movwf	3979,c	;volatile
   704                           
   705                           ;main.c: 40: LATD = 0x00;
   706  002290  0E00               	movlw	0
   707  002292  6E8C               	movwf	3980,c	;volatile
   708                           
   709                           ;main.c: 41: LATE = 0x00;
   710  002294  0E00               	movlw	0
   711  002296  6E8D               	movwf	3981,c	;volatile
   712                           
   713                           ;main.c: 43: ADCON0 = 0x00;
   714  002298  0E00               	movlw	0
   715  00229A  6EC2               	movwf	4034,c	;volatile
   716                           
   717                           ;main.c: 44: ADCON1 |= 0x0A;
   718  00229C  0E0A               	movlw	10
   719  00229E  12C1               	iorwf	4033,f,c	;volatile
   720                           
   721                           ;main.c: 45: ADCON1 |= 0b11<<4;
   722  0022A0  0E30               	movlw	48
   723  0022A2  12C1               	iorwf	4033,f,c	;volatile
   724                           
   725                           ;main.c: 48: ADCON2 = 0;
   726  0022A4  0E00               	movlw	0
   727  0022A6  6EC0               	movwf	4032,c	;volatile
   728                           
   729                           ;main.c: 49: ADCON2 |= 0b001;
   730  0022A8  80C0               	bsf	4032,0,c	;volatile
   731                           
   732                           ;main.c: 50: ADCON2 |= 0b110<<3;
   733  0022AA  0E30               	movlw	48
   734  0022AC  12C0               	iorwf	4032,f,c	;volatile
   735                           
   736                           ;main.c: 51: ADCON2 |= 1<<7;
   737  0022AE  8EC0               	bsf	4032,7,c	;volatile
   738                           
   739                           ;main.c: 53: initLCD();
   740  0022B0  ECC2  F013         	call	_initLCD	;wreg free
   741  0022B4                     l2678:
   742                           
   743                           ;main.c: 56: lcdClear();
   744  0022B4  EC71  F014         	call	_lcdClear	;wreg free
   745                           
   746                           ;main.c: 57: long voltage = analogRead(0);
   747  0022B8  0E00               	movlw	0
   748  0022BA  6E02               	movwf	analogRead@channel+1,c
   749  0022BC  0E00               	movlw	0
   750  0022BE  6E01               	movwf	analogRead@channel,c
   751  0022C0  EC05  F014         	call	_analogRead	;wreg free
   752  0022C4  C001  F064         	movff	?_analogRead,main@voltage
   753  0022C8  C002  F065         	movff	?_analogRead+1,main@voltage+1
   754  0022CC  C003  F066         	movff	?_analogRead+2,main@voltage+2
   755  0022D0  C004  F067         	movff	?_analogRead+3,main@voltage+3
   756                           
   757                           ;main.c: 58: printf("%f\n",(float)voltage*(5.0/0x3ff));
   758  0022D4  C064  F009         	movff	main@voltage,___altoft@c
   759  0022D8  C065  F00A         	movff	main@voltage+1,___altoft@c+1
   760  0022DC  C066  F00B         	movff	main@voltage+2,___altoft@c+2
   761  0022E0  C067  F00C         	movff	main@voltage+3,___altoft@c+3
   762  0022E4  ECC2  F012         	call	___altoft	;wreg free
   763  0022E8  C009  F015         	movff	?___altoft,___ftmul@f1
   764  0022EC  C00A  F016         	movff	?___altoft+1,___ftmul@f1+1
   765  0022F0  C00B  F017         	movff	?___altoft+2,___ftmul@f1+2
   766  0022F4  0E28               	movlw	40
   767  0022F6  6E18               	movwf	___ftmul@f2,c
   768  0022F8  0EA0               	movlw	160
   769  0022FA  6E19               	movwf	___ftmul@f2+1,c
   770  0022FC  0E3B               	movlw	59
   771  0022FE  6E1A               	movwf	___ftmul@f2+2,c
   772  002300  EC46  F010         	call	___ftmul	;wreg free
   773  002304  C015  F068         	movff	?___ftmul,_main$868
   774  002308  C016  F069         	movff	?___ftmul+1,_main$868+1
   775  00230C  C017  F06A         	movff	?___ftmul+2,_main$868+2
   776                           
   777                           ;main.c: 58: printf("%f\n",(float)voltage*(5.0/0x3ff));
   778  002310  0E88               	movlw	low STR_3
   779  002312  6E40               	movwf	printf@f,c
   780  002314  0E10               	movlw	high STR_3
   781  002316  6E41               	movwf	printf@f+1,c
   782  002318  C068  F042         	movff	_main$868,?_printf+2
   783  00231C  C069  F043         	movff	_main$868+1,?_printf+3
   784  002320  C06A  F044         	movff	_main$868+2,?_printf+4
   785  002324  EC49  F008         	call	_printf	;wreg free
   786                           
   787                           ;main.c: 59: _delay((unsigned long)((1000)*(8000000/4000.0)));
   788  002328  0E0B               	movlw	11
   789  00232A  6E63               	movwf	(??_main+1)& (0+255),c
   790  00232C  0E26               	movlw	38
   791  00232E  6E62               	movwf	??_main& (0+255),c
   792  002330  0E5E               	movlw	94
   793  002332                     u2617:
   794  002332  2EE8               	decfsz	wreg,f,c
   795  002334  D7FE               	bra	u2617
   796  002336  2E62               	decfsz	??_main& (0+255),f,c
   797  002338  D7FC               	bra	u2617
   798  00233A  2E63               	decfsz	(??_main+1)& (0+255),f,c
   799  00233C  D7FA               	bra	u2617
   800  00233E  D7BA               	goto	l2678
   801  002340                     __end_of_main:
   802                           	opt stack 0
   803                           tblptru	equ	0xFF8
   804                           wreg	equ	0xFE8
   805                           
   806 ;; *************** function _printf *****************
   807 ;; Defined at:
   808 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;  f               2   63[COMRAM] PTR const unsigned char 
   811 ;;		 -> STR_3(4), STR_2(2), STR_1(2), 
   812 ;; Auto vars:     Size  Location     Type
   813 ;;  tmpval          4   89[COMRAM] struct .
   814 ;;  val             4   83[COMRAM] unsigned long 
   815 ;;  fval            3   93[COMRAM] unsigned long 
   816 ;;  cp              3    0        PTR const unsigned char 
   817 ;;  exp             2   87[COMRAM] int 
   818 ;;  prec            2   81[COMRAM] int 
   819 ;;  flag            2   79[COMRAM] unsigned short 
   820 ;;  ap              2   77[COMRAM] PTR void [1]
   821 ;;		 -> ?_printf(2), 
   822 ;;  len             2    0        unsigned int 
   823 ;;  width           2    0        int 
   824 ;;  c               1   96[COMRAM] char 
   825 ;;  d               1    0        unsigned char 
   826 ;; Return value:  Size  Location     Type
   827 ;;                  2   63[COMRAM] int 
   828 ;; Registers used:
   829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   835 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   836 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;Total ram usage:       34 bytes
   840 ;; Hardware stack levels used:    1
   841 ;; Hardware stack levels required when called:    4
   842 ;; This function calls:
   843 ;;		___awdiv
   844 ;;		___ftadd
   845 ;;		___ftge
   846 ;;		___ftmul
   847 ;;		___ftneg
   848 ;;		___ftsub
   849 ;;		___fttol
   850 ;;		___lldiv
   851 ;;		___llmod
   852 ;;		___lltoft
   853 ;;		___wmul
   854 ;;		__div_to_l_
   855 ;;		__tdiv_to_l_
   856 ;;		_fround
   857 ;;		_putch
   858 ;;		_scale
   859 ;; This function is called by:
   860 ;;		_main
   861 ;;		_printb
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text1
   866  001092                     __ptext1:
   867                           	opt stack 0
   868  001092                     _printf:
   869                           	opt stack 26
   870                           
   871                           ;doprnt.c: 466: va_list ap;
   872                           ;doprnt.c: 499: signed char c;
   873                           ;doprnt.c: 501: int width;
   874                           ;doprnt.c: 504: int prec;
   875                           ;doprnt.c: 508: unsigned short flag;
   876                           ;doprnt.c: 515: char d;
   877                           ;doprnt.c: 516: double fval;
   878                           ;doprnt.c: 517: int exp;
   879                           ;doprnt.c: 523: union {
   880                           ;doprnt.c: 524: unsigned long vd;
   881                           ;doprnt.c: 525: double integ;
   882                           ;doprnt.c: 526: } tmpval;
   883                           ;doprnt.c: 528: unsigned long val;
   884                           ;doprnt.c: 529: unsigned len;
   885                           ;doprnt.c: 530: const char * cp;
   886                           ;doprnt.c: 533: *ap = __va_start();
   887                           
   888                           ;incstack = 0
   889  001092  0E42               	movlw	low (?_printf+2)
   890  001094  6E4E               	movwf	printf@ap,c
   891  001096  0E00               	movlw	high (?_printf+2)
   892  001098  6E4F               	movwf	printf@ap+1,c
   893                           
   894                           ;doprnt.c: 536: while(c = *f++) {
   895  00109A  D2CD               	goto	l2602
   896  00109C                     l2454:
   897                           
   898                           ;doprnt.c: 538: if(c != '%')
   899  00109C  0E25               	movlw	37
   900  00109E  1861               	xorwf	printf@c,w,c
   901  0010A0  B4D8               	btfsc	status,2,c
   902  0010A2  D004               	goto	l2458
   903                           
   904                           ;doprnt.c: 540: {
   905                           ;doprnt.c: 541: (putch(c) );
   906  0010A4  5061               	movf	printf@c,w,c
   907  0010A6  EC46  F014         	call	_putch
   908                           
   909                           ;doprnt.c: 542: continue;
   910  0010AA  D2C5               	goto	l2602
   911  0010AC                     l2458:
   912                           
   913                           ;doprnt.c: 543: }
   914                           ;doprnt.c: 548: flag = 0;
   915  0010AC  0E00               	movlw	0
   916  0010AE  6E51               	movwf	printf@flag+1,c
   917  0010B0  0E00               	movlw	0
   918  0010B2  6E50               	movwf	printf@flag,c
   919                           
   920                           ;doprnt.c: 635: switch(c = *f++) {
   921  0010B4  D002               	goto	l2464
   922  0010B6                     l2460:
   923                           
   924                           ;doprnt.c: 663: flag |= 0x400;
   925  0010B6  8451               	bsf	printf@flag+1,2,c
   926                           
   927                           ;doprnt.c: 664: break;
   928  0010B8  D011               	goto	l2466
   929  0010BA                     l2464:
   930  0010BA  C040  FFF6         	movff	printf@f,tblptrl
   931  0010BE  C041  FFF7         	movff	printf@f+1,tblptrh
   932  0010C2  4A40               	infsnz	printf@f,f,c
   933  0010C4  2A41               	incf	printf@f+1,f,c
   934  0010C6                     	if	0	;tblptru may be non-zero
   935  0010C6                     	endif
   936  0010C6                     	if	0	;tblptru may be non-zero
   937  0010C6                     	endif
   938  0010C6  0008               	tblrd		*
   939  0010C8  CFF5 F061          	movff	tablat,printf@c
   940  0010CC  5061               	movf	printf@c,w,c
   941                           
   942                           ; Switch size 1, requested type "space"
   943                           ; Number of cases is 2, Range of values is 0 to 102
   944                           ; switch strategies available:
   945                           ; Name         Instructions Cycles
   946                           ; simple_byte            7     4 (average)
   947                           ;	Chosen strategy is simple_byte
   948  0010CE  0A00               	xorlw	0	; case 0
   949  0010D0  B4D8               	btfsc	status,2,c
   950  0010D2  0012               	return	
   951  0010D4  0A66               	xorlw	102	; case 102
   952  0010D6  B4D8               	btfsc	status,2,c
   953  0010D8  D7EE               	goto	l2460
   954  0010DA  D2AD               	goto	l2602
   955  0010DC                     l2466:
   956                           
   957                           ;doprnt.c: 825: if(flag & (0x700)) {
   958  0010DC  0E07               	movlw	7
   959  0010DE  1451               	andwf	printf@flag+1,w,c
   960  0010E0  B4D8               	btfsc	status,2,c
   961  0010E2  D29C               	goto	l2598
   962                           
   963                           ;doprnt.c: 829: prec = 6;
   964  0010E4  0E00               	movlw	0
   965  0010E6  6E53               	movwf	printf@prec+1,c
   966  0010E8  0E06               	movlw	6
   967  0010EA  6E52               	movwf	printf@prec,c
   968                           
   969                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
   970  0010EC  C04E  FFD9         	movff	printf@ap,fsr2l
   971  0010F0  C04F  FFDA         	movff	printf@ap+1,fsr2h
   972  0010F4  CFDE F05E          	movff	postinc2,printf@fval
   973  0010F8  CFDE F05F          	movff	postinc2,printf@fval+1
   974  0010FC  CFDD F060          	movff	postdec2,printf@fval+2
   975  001100  0E03               	movlw	3
   976  001102  264E               	addwf	printf@ap,f,c
   977  001104  0E00               	movlw	0
   978  001106  224F               	addwfc	printf@ap+1,f,c
   979                           
   980                           ;doprnt.c: 831: if(fval < 0.0) {
   981  001108  AE60               	btfss	printf@fval+2,7,c
   982  00110A  D010               	goto	l2480
   983                           
   984                           ;doprnt.c: 832: fval = -fval;
   985  00110C  C05E  F001         	movff	printf@fval,___ftneg@f1
   986  001110  C05F  F002         	movff	printf@fval+1,___ftneg@f1+1
   987  001114  C060  F003         	movff	printf@fval+2,___ftneg@f1+2
   988  001118  EC34  F014         	call	___ftneg	;wreg free
   989  00111C  C001  F05E         	movff	?___ftneg,printf@fval
   990  001120  C002  F05F         	movff	?___ftneg+1,printf@fval+1
   991  001124  C003  F060         	movff	?___ftneg+2,printf@fval+2
   992                           
   993                           ;doprnt.c: 833: flag |= 0x03;
   994  001128  0E03               	movlw	3
   995  00112A  1250               	iorwf	printf@flag,f,c
   996  00112C                     l2480:
   997                           
   998                           ;doprnt.c: 834: }
   999                           ;doprnt.c: 835: exp = 0;
  1000  00112C  0E00               	movlw	0
  1001  00112E  6E59               	movwf	printf@exp+1,c
  1002  001130  0E00               	movlw	0
  1003  001132  6E58               	movwf	printf@exp,c
  1004                           
  1005                           ;doprnt.c: 836: if( fval!=0) {
  1006  001134  505E               	movf	printf@fval,w,c
  1007  001136  105F               	iorwf	printf@fval+1,w,c
  1008  001138  1060               	iorwf	printf@fval+2,w,c
  1009  00113A  B4D8               	btfsc	status,2,c
  1010  00113C  D083               	goto	l2508
  1011                           
  1012                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1013  00113E  0E82               	movlw	130
  1014  001140  6E45               	movwf	??_printf& (0+255),c
  1015  001142  0EFF               	movlw	255
  1016  001144  6E46               	movwf	(??_printf+1)& (0+255),c
  1017  001146  C05E  F047         	movff	printf@fval,??_printf+2
  1018  00114A  C05F  F048         	movff	printf@fval+1,??_printf+3
  1019  00114E  C060  F049         	movff	printf@fval+2,??_printf+4
  1020  001152  C061  F04A         	movff	printf@fval+3,??_printf+5
  1021  001156  0E10               	movlw	16
  1022  001158  D005               	goto	u2330
  1023  00115A                     u2335:
  1024  00115A  90D8               	bcf	status,0,c
  1025  00115C  324A               	rrcf	??_printf+5,f,c
  1026  00115E  3249               	rrcf	??_printf+4,f,c
  1027  001160  3248               	rrcf	??_printf+3,f,c
  1028  001162  3247               	rrcf	??_printf+2,f,c
  1029  001164                     u2330:
  1030  001164  2EE8               	decfsz	wreg,f,c
  1031  001166  D7F9               	goto	u2335
  1032  001168  5047               	movf	??_printf+2,w,c
  1033  00116A  2445               	addwf	??_printf,w,c
  1034  00116C  6E58               	movwf	printf@exp,c
  1035  00116E  0E00               	movlw	0
  1036  001170  2046               	addwfc	??_printf+1,w,c
  1037  001172  6E59               	movwf	printf@exp+1,c
  1038                           
  1039                           ;doprnt.c: 838: exp--;
  1040  001174  0658               	decf	printf@exp,f,c
  1041  001176  A0D8               	btfss	status,0,c
  1042  001178  0659               	decf	printf@exp+1,f,c
  1043                           
  1044                           ;doprnt.c: 839: exp *= 3;
  1045  00117A  C058  F00F         	movff	printf@exp,___wmul@multiplier
  1046  00117E  C059  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1047  001182  0E00               	movlw	0
  1048  001184  6E12               	movwf	___wmul@multiplicand+1,c
  1049  001186  0E03               	movlw	3
  1050  001188  6E11               	movwf	___wmul@multiplicand,c
  1051  00118A  EC21  F014         	call	___wmul	;wreg free
  1052  00118E  C00F  F058         	movff	?___wmul,printf@exp
  1053  001192  C010  F059         	movff	?___wmul+1,printf@exp+1
  1054                           
  1055                           ;doprnt.c: 840: exp /= 10;
  1056  001196  C058  F007         	movff	printf@exp,___awdiv@dividend
  1057  00119A  C059  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1058  00119E  0E00               	movlw	0
  1059  0011A0  6E0A               	movwf	___awdiv@divisor+1,c
  1060  0011A2  0E0A               	movlw	10
  1061  0011A4  6E09               	movwf	___awdiv@divisor,c
  1062  0011A6  EC3F  F012         	call	___awdiv	;wreg free
  1063  0011AA  C007  F058         	movff	?___awdiv,printf@exp
  1064  0011AE  C008  F059         	movff	?___awdiv+1,printf@exp+1
  1065                           
  1066                           ;doprnt.c: 841: if(exp < 0)
  1067  0011B2  AE59               	btfss	printf@exp+1,7,c
  1068  0011B4  D003               	goto	l2496
  1069                           
  1070                           ;doprnt.c: 842: exp--;
  1071  0011B6  0658               	decf	printf@exp,f,c
  1072  0011B8  A0D8               	btfss	status,0,c
  1073  0011BA  0659               	decf	printf@exp+1,f,c
  1074  0011BC                     l2496:
  1075                           
  1076                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1077  0011BC  5058               	movf	printf@exp,w,c
  1078  0011BE  0800               	sublw	0
  1079  0011C0  EC28  F00B         	call	_scale
  1080  0011C4  C024  F05A         	movff	?_scale,printf@tmpval
  1081  0011C8  C025  F05B         	movff	?_scale+1,printf@tmpval+1
  1082  0011CC  C026  F05C         	movff	?_scale+2,printf@tmpval+2
  1083                           
  1084                           ;doprnt.c: 847: tmpval.integ *= fval;
  1085  0011D0  C05A  F015         	movff	printf@tmpval,___ftmul@f1
  1086  0011D4  C05B  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1087  0011D8  C05C  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1088  0011DC  C05E  F018         	movff	printf@fval,___ftmul@f2
  1089  0011E0  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1090  0011E4  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1091  0011E8  EC46  F010         	call	___ftmul	;wreg free
  1092  0011EC  C015  F05A         	movff	?___ftmul,printf@tmpval
  1093  0011F0  C016  F05B         	movff	?___ftmul+1,printf@tmpval+1
  1094  0011F4  C017  F05C         	movff	?___ftmul+2,printf@tmpval+2
  1095                           
  1096                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1097  0011F8  C05A  F001         	movff	printf@tmpval,___ftge@ff1
  1098  0011FC  C05B  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1099  001200  C05C  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1100  001204  0E00               	movlw	0
  1101  001206  6E04               	movwf	___ftge@ff2,c
  1102  001208  0E80               	movlw	128
  1103  00120A  6E05               	movwf	___ftge@ff2+1,c
  1104  00120C  0E3F               	movlw	63
  1105  00120E  6E06               	movwf	___ftge@ff2+2,c
  1106  001210  ECF7  F011         	call	___ftge	;wreg free
  1107  001214  B0D8               	btfsc	status,0,c
  1108  001216  D004               	goto	l2504
  1109                           
  1110                           ;doprnt.c: 849: exp--;
  1111  001218  0658               	decf	printf@exp,f,c
  1112  00121A  A0D8               	btfss	status,0,c
  1113  00121C  0659               	decf	printf@exp+1,f,c
  1114  00121E  D012               	goto	l2508
  1115  001220                     l2504:
  1116                           
  1117                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1118  001220  C05A  F001         	movff	printf@tmpval,___ftge@ff1
  1119  001224  C05B  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1120  001228  C05C  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1121  00122C  0E00               	movlw	0
  1122  00122E  6E04               	movwf	___ftge@ff2,c
  1123  001230  0E20               	movlw	32
  1124  001232  6E05               	movwf	___ftge@ff2+1,c
  1125  001234  0E41               	movlw	65
  1126  001236  6E06               	movwf	___ftge@ff2+2,c
  1127  001238  ECF7  F011         	call	___ftge	;wreg free
  1128  00123C  A0D8               	btfss	status,0,c
  1129  00123E  D002               	goto	l2508
  1130                           
  1131                           ;doprnt.c: 851: exp++;
  1132  001240  4A58               	infsnz	printf@exp,f,c
  1133  001242  2A59               	incf	printf@exp+1,f,c
  1134  001244                     l2508:
  1135                           
  1136                           ;doprnt.c: 852: }
  1137                           ;doprnt.c: 1112: if(prec <= 12)
  1138  001244  BE53               	btfsc	printf@prec+1,7,c
  1139  001246  D006               	goto	l2510
  1140  001248  5053               	movf	printf@prec+1,w,c
  1141  00124A  E11B               	bnz	l2512
  1142  00124C  0E0D               	movlw	13
  1143  00124E  5C52               	subwf	printf@prec,w,c
  1144  001250  B0D8               	btfsc	status,0,c
  1145  001252  D017               	goto	l2512
  1146  001254                     l2510:
  1147                           
  1148                           ;doprnt.c: 1113: fval += fround(prec);
  1149  001254  C05E  F02E         	movff	printf@fval,___ftadd@f1
  1150  001258  C05F  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1151  00125C  C060  F030         	movff	printf@fval+2,___ftadd@f1+2
  1152  001260  5052               	movf	printf@prec,w,c
  1153  001262  EC20  F00D         	call	_fround
  1154  001266  C024  F031         	movff	?_fround,___ftadd@f2
  1155  00126A  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1156  00126E  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1157  001272  EC43  F00E         	call	___ftadd	;wreg free
  1158  001276  C02E  F05E         	movff	?___ftadd,printf@fval
  1159  00127A  C02F  F05F         	movff	?___ftadd+1,printf@fval+1
  1160  00127E  C030  F060         	movff	?___ftadd+2,printf@fval+2
  1161  001282                     l2512:
  1162                           
  1163                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1164  001282  BE59               	btfsc	printf@exp+1,7,c
  1165  001284  D006               	goto	l2514
  1166  001286  5059               	movf	printf@exp+1,w,c
  1167  001288  E11E               	bnz	l2520
  1168  00128A  0E0A               	movlw	10
  1169  00128C  5C58               	subwf	printf@exp,w,c
  1170  00128E  B0D8               	btfsc	status,0,c
  1171  001290  D01A               	goto	l2520
  1172  001292                     l2514:
  1173  001292  505E               	movf	printf@fval,w,c
  1174  001294  105F               	iorwf	printf@fval+1,w,c
  1175  001296  1060               	iorwf	printf@fval+2,w,c
  1176  001298  B4D8               	btfsc	status,2,c
  1177  00129A  D051               	goto	l2534
  1178  00129C  C05E  F02B         	movff	printf@fval,___fttol@f1
  1179  0012A0  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1180  0012A4  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1181  0012A8  ECC0  F010         	call	___fttol	;wreg free
  1182  0012AC  502B               	movf	?___fttol,w,c
  1183  0012AE  102C               	iorwf	?___fttol+1,w,c
  1184  0012B0  102D               	iorwf	?___fttol+2,w,c
  1185  0012B2  102E               	iorwf	?___fttol+3,w,c
  1186  0012B4  B4D8               	btfsc	status,2,c
  1187  0012B6  BE59               	btfsc	printf@exp+1,7,c
  1188  0012B8  D042               	goto	l2534
  1189  0012BA  5059               	movf	printf@exp+1,w,c
  1190  0012BC  E104               	bnz	l2520
  1191  0012BE  0E02               	movlw	2
  1192  0012C0  5C58               	subwf	printf@exp,w,c
  1193  0012C2  A0D8               	btfss	status,0,c
  1194  0012C4  D03C               	goto	l2534
  1195  0012C6                     l2520:
  1196                           
  1197                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1198  0012C6  C05A  F001         	movff	printf@tmpval,___ftge@ff1
  1199  0012CA  C05B  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1200  0012CE  C05C  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1201  0012D2  0E70               	movlw	112
  1202  0012D4  6E04               	movwf	___ftge@ff2,c
  1203  0012D6  0E89               	movlw	137
  1204  0012D8  6E05               	movwf	___ftge@ff2+1,c
  1205  0012DA  0E40               	movlw	64
  1206  0012DC  6E06               	movwf	___ftge@ff2+2,c
  1207  0012DE  ECF7  F011         	call	___ftge	;wreg free
  1208  0012E2  B0D8               	btfsc	status,0,c
  1209  0012E4  D002               	goto	l2524
  1210                           
  1211                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1212  0012E6  0EF7               	movlw	247
  1213  0012E8  D001               	goto	L1
  1214  0012EA                     l2524:
  1215                           
  1216                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1217  0012EA  0EF8               	movlw	248
  1218  0012EC                     L1:
  1219  0012EC  2658               	addwf	printf@exp,f,c
  1220  0012EE  0EFF               	movlw	255
  1221  0012F0  2259               	addwfc	printf@exp+1,f,c
  1222                           
  1223                           ;doprnt.c: 1124: }
  1224                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1225  0012F2  5058               	movf	printf@exp,w,c
  1226  0012F4  EC28  F00B         	call	_scale
  1227  0012F8  C024  F05A         	movff	?_scale,printf@tmpval
  1228  0012FC  C025  F05B         	movff	?_scale+1,printf@tmpval+1
  1229  001300  C026  F05C         	movff	?_scale+2,printf@tmpval+2
  1230                           
  1231                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1232  001304  C05E  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1233  001308  C05F  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1234  00130C  C060  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1235  001310  C05A  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1236  001314  C05B  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1237  001318  C05C  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1238  00131C  EC19  F00F         	call	__tdiv_to_l_	;wreg free
  1239  001320  C001  F054         	movff	?__tdiv_to_l_,printf@val
  1240  001324  C002  F055         	movff	?__tdiv_to_l_+1,printf@val+1
  1241  001328  C003  F056         	movff	?__tdiv_to_l_+2,printf@val+2
  1242  00132C  C004  F057         	movff	?__tdiv_to_l_+3,printf@val+3
  1243                           
  1244                           ;doprnt.c: 1129: fval = 0.0;
  1245  001330  0E00               	movlw	0
  1246  001332  6E5E               	movwf	printf@fval,c
  1247  001334  0E00               	movlw	0
  1248  001336  6E5F               	movwf	printf@fval+1,c
  1249  001338  0E00               	movlw	0
  1250  00133A  6E60               	movwf	printf@fval+2,c
  1251                           
  1252                           ;doprnt.c: 1130: } else {
  1253  00133C  D032               	goto	l2538
  1254  00133E                     l2534:
  1255                           
  1256                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1257  00133E  C05E  F02B         	movff	printf@fval,___fttol@f1
  1258  001342  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1259  001346  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1260  00134A  ECC0  F010         	call	___fttol	;wreg free
  1261  00134E  C02B  F054         	movff	?___fttol,printf@val
  1262  001352  C02C  F055         	movff	?___fttol+1,printf@val+1
  1263  001356  C02D  F056         	movff	?___fttol+2,printf@val+2
  1264  00135A  C02E  F057         	movff	?___fttol+3,printf@val+3
  1265                           
  1266                           ;doprnt.c: 1132: fval -= (double)val;
  1267  00135E  C05E  F03A         	movff	printf@fval,___ftsub@f1
  1268  001362  C05F  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1269  001366  C060  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1270  00136A  C054  F009         	movff	printf@val,___lltoft@c
  1271  00136E  C055  F00A         	movff	printf@val+1,___lltoft@c+1
  1272  001372  C056  F00B         	movff	printf@val+2,___lltoft@c+2
  1273  001376  C057  F00C         	movff	printf@val+3,___lltoft@c+3
  1274  00137A  EC69  F013         	call	___lltoft	;wreg free
  1275  00137E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1276  001382  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1277  001386  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1278  00138A  ECE5  F013         	call	___ftsub	;wreg free
  1279  00138E  C03A  F05E         	movff	?___ftsub,printf@fval
  1280  001392  C03B  F05F         	movff	?___ftsub+1,printf@fval+1
  1281  001396  C03C  F060         	movff	?___ftsub+2,printf@fval+2
  1282                           
  1283                           ;doprnt.c: 1133: exp = 0;
  1284  00139A  0E00               	movlw	0
  1285  00139C  6E59               	movwf	printf@exp+1,c
  1286  00139E  0E00               	movlw	0
  1287  0013A0  6E58               	movwf	printf@exp,c
  1288  0013A2                     l2538:
  1289                           
  1290                           ;doprnt.c: 1134: }
  1291                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1292  0013A2  0E01               	movlw	1
  1293  0013A4  6E61               	movwf	printf@c,c
  1294  0013A6                     l2540:
  1295  0013A6  0E0A               	movlw	10
  1296  0013A8  1861               	xorwf	printf@c,w,c
  1297  0013AA  B4D8               	btfsc	status,2,c
  1298  0013AC  D018               	goto	l2552
  1299                           
  1300                           ;doprnt.c: 1137: if(val < dpowers[c])
  1301  0013AE  5061               	movf	printf@c,w,c
  1302  0013B0  0D04               	mullw	4
  1303  0013B2  0E01               	movlw	low _dpowers
  1304  0013B4  24F3               	addwf	prodl,w,c
  1305  0013B6  6EF6               	movwf	tblptrl,c
  1306  0013B8  0E10               	movlw	high _dpowers
  1307  0013BA  20F4               	addwfc	prodh,w,c
  1308  0013BC  6EF7               	movwf	tblptrh,c
  1309  0013BE                     	if	0	;There are less than 3 active tblptr bytes
  1310  0013BE                     	endif
  1311  0013BE  0009               	tblrd		*+
  1312  0013C0  50F5               	movf	tablat,w,c
  1313  0013C2  5C54               	subwf	printf@val,w,c
  1314  0013C4  0009               	tblrd		*+
  1315  0013C6  50F5               	movf	tablat,w,c
  1316  0013C8  5855               	subwfb	printf@val+1,w,c
  1317  0013CA  0009               	tblrd		*+
  1318  0013CC  50F5               	movf	tablat,w,c
  1319  0013CE  5856               	subwfb	printf@val+2,w,c
  1320  0013D0  0009               	tblrd		*+
  1321  0013D2  50F5               	movf	tablat,w,c
  1322  0013D4  5857               	subwfb	printf@val+3,w,c
  1323  0013D6  A0D8               	btfss	status,0,c
  1324  0013D8  D002               	goto	l2552
  1325                           
  1326                           ;doprnt.c: 1138: break;
  1327  0013DA  2A61               	incf	printf@c,f,c
  1328  0013DC  D7E4               	goto	l2540
  1329  0013DE                     l2552:
  1330                           
  1331                           ;doprnt.c: 1175: {
  1332                           ;doprnt.c: 1188: if(flag & 0x03)
  1333  0013DE  0E03               	movlw	3
  1334  0013E0  1450               	andwf	printf@flag,w,c
  1335  0013E2  6E45               	movwf	??_printf& (0+255),c
  1336  0013E4  0E00               	movlw	0
  1337  0013E6  1451               	andwf	printf@flag+1,w,c
  1338  0013E8  6E46               	movwf	(??_printf+1)& (0+255),c
  1339  0013EA  5045               	movf	??_printf,w,c
  1340  0013EC  1046               	iorwf	??_printf+1,w,c
  1341  0013EE  B4D8               	btfsc	status,2,c
  1342  0013F0  D048               	goto	l2562
  1343                           
  1344                           ;doprnt.c: 1190: (putch('-') );
  1345  0013F2  0E2D               	movlw	45
  1346  0013F4  EC46  F014         	call	_putch
  1347                           
  1348                           ;doprnt.c: 1195: }
  1349                           ;doprnt.c: 1196: while(c--) {
  1350  0013F8  D044               	goto	l2562
  1351  0013FA                     l2556:
  1352                           
  1353                           ;doprnt.c: 1200: {
  1354                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1355  0013FA  C054  F001         	movff	printf@val,___lldiv@dividend
  1356  0013FE  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  1357  001402  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  1358  001406  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  1359  00140A  5061               	movf	printf@c,w,c
  1360  00140C  0D04               	mullw	4
  1361  00140E  0E01               	movlw	low _dpowers
  1362  001410  24F3               	addwf	prodl,w,c
  1363  001412  6EF6               	movwf	tblptrl,c
  1364  001414  0E10               	movlw	high _dpowers
  1365  001416  20F4               	addwfc	prodh,w,c
  1366  001418  6EF7               	movwf	tblptrh,c
  1367  00141A                     	if	0	;There are less than 3 active tblptr bytes
  1368  00141A                     	endif
  1369  00141A  0009               	tblrd		*+
  1370  00141C  CFF5 F005          	movff	tablat,___lldiv@divisor
  1371  001420  0009               	tblrd		*+
  1372  001422  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1373  001426  0009               	tblrd		*+
  1374  001428  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1375  00142C  000A               	tblrd		*-
  1376  00142E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1377  001432  EC81  F012         	call	___lldiv	;wreg free
  1378  001436  C001  F05A         	movff	?___lldiv,printf@tmpval
  1379  00143A  C002  F05B         	movff	?___lldiv+1,printf@tmpval+1
  1380  00143E  C003  F05C         	movff	?___lldiv+2,printf@tmpval+2
  1381  001442  C004  F05D         	movff	?___lldiv+3,printf@tmpval+3
  1382                           
  1383                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1384  001446  C05A  F001         	movff	printf@tmpval,___llmod@dividend
  1385  00144A  C05B  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1386  00144E  C05C  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1387  001452  C05D  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1388  001456  0E0A               	movlw	10
  1389  001458  6E05               	movwf	___llmod@divisor,c
  1390  00145A  0E00               	movlw	0
  1391  00145C  6E06               	movwf	___llmod@divisor+1,c
  1392  00145E  0E00               	movlw	0
  1393  001460  6E07               	movwf	___llmod@divisor+2,c
  1394  001462  0E00               	movlw	0
  1395  001464  6E08               	movwf	___llmod@divisor+3,c
  1396  001466  EC36  F013         	call	___llmod	;wreg free
  1397  00146A  C001  F05A         	movff	?___llmod,printf@tmpval
  1398  00146E  C002  F05B         	movff	?___llmod+1,printf@tmpval+1
  1399  001472  C003  F05C         	movff	?___llmod+2,printf@tmpval+2
  1400  001476  C004  F05D         	movff	?___llmod+3,printf@tmpval+3
  1401                           
  1402                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1403  00147A  505A               	movf	printf@tmpval,w,c
  1404  00147C  0F30               	addlw	48
  1405  00147E  EC46  F014         	call	_putch
  1406  001482                     l2562:
  1407  001482  0661               	decf	printf@c,f,c
  1408  001484  2861               	incf	printf@c,w,c
  1409  001486  B4D8               	btfsc	status,2,c
  1410  001488  D007               	goto	l2568
  1411  00148A  D7B7               	goto	l2556
  1412  00148C                     l2564:
  1413                           
  1414                           ;doprnt.c: 1208: (putch('0') );
  1415  00148C  0E30               	movlw	48
  1416  00148E  EC46  F014         	call	_putch
  1417                           
  1418                           ;doprnt.c: 1209: exp--;
  1419  001492  0658               	decf	printf@exp,f,c
  1420  001494  A0D8               	btfss	status,0,c
  1421  001496  0659               	decf	printf@exp+1,f,c
  1422  001498                     l2568:
  1423  001498  BE59               	btfsc	printf@exp+1,7,c
  1424  00149A  D005               	goto	l2570
  1425  00149C  5059               	movf	printf@exp+1,w,c
  1426  00149E  E1F6               	bnz	l2564
  1427  0014A0  0458               	decf	printf@exp,w,c
  1428  0014A2  B0D8               	btfsc	status,0,c
  1429  0014A4  D7F3               	goto	l2564
  1430  0014A6                     l2570:
  1431                           
  1432                           ;doprnt.c: 1210: }
  1433                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1434  0014A6  BE53               	btfsc	printf@prec+1,7,c
  1435  0014A8  D009               	goto	l267
  1436  0014AA  5053               	movf	printf@prec+1,w,c
  1437  0014AC  E104               	bnz	u2490
  1438  0014AE  0E09               	movlw	9
  1439  0014B0  5C52               	subwf	printf@prec,w,c
  1440  0014B2  A0D8               	btfss	status,0,c
  1441  0014B4  D003               	goto	l267
  1442  0014B6                     u2490:
  1443                           
  1444                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1445  0014B6  0E08               	movlw	8
  1446  0014B8  6E61               	movwf	printf@c,c
  1447  0014BA  D002               	goto	l2574
  1448  0014BC                     l267:
  1449                           
  1450                           ;doprnt.c: 1213: else
  1451                           ;doprnt.c: 1214: c = prec;
  1452  0014BC  C052  F061         	movff	printf@prec,printf@c
  1453  0014C0                     l2574:
  1454                           
  1455                           ;doprnt.c: 1215: prec -= c;
  1456  0014C0  5061               	movf	printf@c,w,c
  1457  0014C2  5E52               	subwf	printf@prec,f,c
  1458  0014C4  0E00               	movlw	0
  1459  0014C6  BE61               	btfsc	printf@c,7,c
  1460  0014C8  0EFF               	movlw	255
  1461  0014CA  5A53               	subwfb	printf@prec+1,f,c
  1462                           
  1463                           ;doprnt.c: 1219: if(c)
  1464  0014CC  5061               	movf	printf@c,w,c
  1465  0014CE  B4D8               	btfsc	status,2,c
  1466  0014D0  D003               	goto	l2580
  1467                           
  1468                           ;doprnt.c: 1221: (putch('.') );
  1469  0014D2  0E2E               	movlw	46
  1470  0014D4  EC46  F014         	call	_putch
  1471  0014D8                     l2580:
  1472                           
  1473                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1474  0014D8  5061               	movf	printf@c,w,c
  1475  0014DA  EC28  F00B         	call	_scale
  1476  0014DE  C024  F04B         	movff	?_scale,_printf$872
  1477  0014E2  C025  F04C         	movff	?_scale+1,_printf$872+1
  1478  0014E6  C026  F04D         	movff	?_scale+2,_printf$872+2
  1479                           
  1480                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1481  0014EA  C05E  F018         	movff	printf@fval,___ftmul@f2
  1482  0014EE  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1483  0014F2  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1484  0014F6  C04B  F015         	movff	_printf$872,___ftmul@f1
  1485  0014FA  C04C  F016         	movff	_printf$872+1,___ftmul@f1+1
  1486  0014FE  C04D  F017         	movff	_printf$872+2,___ftmul@f1+2
  1487  001502  EC46  F010         	call	___ftmul	;wreg free
  1488  001506  C015  F02B         	movff	?___ftmul,___fttol@f1
  1489  00150A  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1490  00150E  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1491  001512  ECC0  F010         	call	___fttol	;wreg free
  1492  001516  C02B  F054         	movff	?___fttol,printf@val
  1493  00151A  C02C  F055         	movff	?___fttol+1,printf@val+1
  1494  00151E  C02D  F056         	movff	?___fttol+2,printf@val+2
  1495  001522  C02E  F057         	movff	?___fttol+3,printf@val+3
  1496                           
  1497                           ;doprnt.c: 1228: while(c--) {
  1498  001526  D06A               	goto	l2590
  1499  001528                     l2584:
  1500                           
  1501                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1502  001528  C054  F001         	movff	printf@val,___lldiv@dividend
  1503  00152C  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  1504  001530  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  1505  001534  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  1506  001538  5061               	movf	printf@c,w,c
  1507  00153A  0D04               	mullw	4
  1508  00153C  0E01               	movlw	low _dpowers
  1509  00153E  24F3               	addwf	prodl,w,c
  1510  001540  6EF6               	movwf	tblptrl,c
  1511  001542  0E10               	movlw	high _dpowers
  1512  001544  20F4               	addwfc	prodh,w,c
  1513  001546  6EF7               	movwf	tblptrh,c
  1514  001548                     	if	0	;There are less than 3 active tblptr bytes
  1515  001548                     	endif
  1516  001548  0009               	tblrd		*+
  1517  00154A  CFF5 F005          	movff	tablat,___lldiv@divisor
  1518  00154E  0009               	tblrd		*+
  1519  001550  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1520  001554  0009               	tblrd		*+
  1521  001556  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1522  00155A  000A               	tblrd		*-
  1523  00155C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1524  001560  EC81  F012         	call	___lldiv	;wreg free
  1525  001564  C001  F05A         	movff	?___lldiv,printf@tmpval
  1526  001568  C002  F05B         	movff	?___lldiv+1,printf@tmpval+1
  1527  00156C  C003  F05C         	movff	?___lldiv+2,printf@tmpval+2
  1528  001570  C004  F05D         	movff	?___lldiv+3,printf@tmpval+3
  1529                           
  1530                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1531  001574  C05A  F001         	movff	printf@tmpval,___llmod@dividend
  1532  001578  C05B  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1533  00157C  C05C  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1534  001580  C05D  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1535  001584  0E0A               	movlw	10
  1536  001586  6E05               	movwf	___llmod@divisor,c
  1537  001588  0E00               	movlw	0
  1538  00158A  6E06               	movwf	___llmod@divisor+1,c
  1539  00158C  0E00               	movlw	0
  1540  00158E  6E07               	movwf	___llmod@divisor+2,c
  1541  001590  0E00               	movlw	0
  1542  001592  6E08               	movwf	___llmod@divisor+3,c
  1543  001594  EC36  F013         	call	___llmod	;wreg free
  1544  001598  C001  F05A         	movff	?___llmod,printf@tmpval
  1545  00159C  C002  F05B         	movff	?___llmod+1,printf@tmpval+1
  1546  0015A0  C003  F05C         	movff	?___llmod+2,printf@tmpval+2
  1547  0015A4  C004  F05D         	movff	?___llmod+3,printf@tmpval+3
  1548                           
  1549                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1550  0015A8  505A               	movf	printf@tmpval,w,c
  1551  0015AA  0F30               	addlw	48
  1552  0015AC  EC46  F014         	call	_putch
  1553                           
  1554                           ;doprnt.c: 1232: val %= dpowers[c];
  1555  0015B0  C054  F001         	movff	printf@val,___llmod@dividend
  1556  0015B4  C055  F002         	movff	printf@val+1,___llmod@dividend+1
  1557  0015B8  C056  F003         	movff	printf@val+2,___llmod@dividend+2
  1558  0015BC  C057  F004         	movff	printf@val+3,___llmod@dividend+3
  1559  0015C0  5061               	movf	printf@c,w,c
  1560  0015C2  0D04               	mullw	4
  1561  0015C4  0E01               	movlw	low _dpowers
  1562  0015C6  24F3               	addwf	prodl,w,c
  1563  0015C8  6EF6               	movwf	tblptrl,c
  1564  0015CA  0E10               	movlw	high _dpowers
  1565  0015CC  20F4               	addwfc	prodh,w,c
  1566  0015CE  6EF7               	movwf	tblptrh,c
  1567  0015D0                     	if	0	;There are less than 3 active tblptr bytes
  1568  0015D0                     	endif
  1569  0015D0  0009               	tblrd		*+
  1570  0015D2  CFF5 F005          	movff	tablat,___llmod@divisor
  1571  0015D6  0009               	tblrd		*+
  1572  0015D8  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1573  0015DC  0009               	tblrd		*+
  1574  0015DE  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1575  0015E2  000A               	tblrd		*-
  1576  0015E4  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1577  0015E8  EC36  F013         	call	___llmod	;wreg free
  1578  0015EC  C001  F054         	movff	?___llmod,printf@val
  1579  0015F0  C002  F055         	movff	?___llmod+1,printf@val+1
  1580  0015F4  C003  F056         	movff	?___llmod+2,printf@val+2
  1581  0015F8  C004  F057         	movff	?___llmod+3,printf@val+3
  1582  0015FC                     l2590:
  1583  0015FC  0661               	decf	printf@c,f,c
  1584  0015FE  2861               	incf	printf@c,w,c
  1585  001600  B4D8               	btfsc	status,2,c
  1586  001602  D007               	goto	l2596
  1587  001604  D791               	goto	l2584
  1588  001606                     l2592:
  1589                           
  1590                           ;doprnt.c: 1236: (putch('0') );
  1591  001606  0E30               	movlw	48
  1592  001608  EC46  F014         	call	_putch
  1593                           
  1594                           ;doprnt.c: 1237: prec--;
  1595  00160C  0652               	decf	printf@prec,f,c
  1596  00160E  A0D8               	btfss	status,0,c
  1597  001610  0653               	decf	printf@prec+1,f,c
  1598  001612                     l2596:
  1599  001612  5052               	movf	printf@prec,w,c
  1600  001614  1053               	iorwf	printf@prec+1,w,c
  1601  001616  B4D8               	btfsc	status,2,c
  1602  001618  D00E               	goto	l2602
  1603  00161A  D7F5               	goto	l2592
  1604  00161C                     l2598:
  1605                           
  1606                           ;doprnt.c: 1246: }
  1607                           ;doprnt.c: 1422: {
  1608                           ;doprnt.c: 1438: if(flag & 0x03)
  1609  00161C  0E03               	movlw	3
  1610  00161E  1450               	andwf	printf@flag,w,c
  1611  001620  6E45               	movwf	??_printf& (0+255),c
  1612  001622  0E00               	movlw	0
  1613  001624  1451               	andwf	printf@flag+1,w,c
  1614  001626  6E46               	movwf	(??_printf+1)& (0+255),c
  1615  001628  5045               	movf	??_printf,w,c
  1616  00162A  1046               	iorwf	??_printf+1,w,c
  1617  00162C  B4D8               	btfsc	status,2,c
  1618  00162E  D003               	goto	l2602
  1619                           
  1620                           ;doprnt.c: 1439: (putch('-') );
  1621  001630  0E2D               	movlw	45
  1622  001632  EC46  F014         	call	_putch
  1623  001636                     l2602:
  1624  001636  C040  FFF6         	movff	printf@f,tblptrl
  1625  00163A  C041  FFF7         	movff	printf@f+1,tblptrh
  1626  00163E  4A40               	infsnz	printf@f,f,c
  1627  001640  2A41               	incf	printf@f+1,f,c
  1628  001642                     	if	0	;tblptru may be non-zero
  1629  001642                     	endif
  1630  001642                     	if	0	;tblptru may be non-zero
  1631  001642                     	endif
  1632  001642  0008               	tblrd		*
  1633  001644  CFF5 F061          	movff	tablat,printf@c
  1634  001648  5061               	movf	printf@c,w,c
  1635  00164A  B4D8               	btfsc	status,2,c
  1636  00164C  0012               	return	
  1637  00164E  D526               	goto	l2454
  1638  001650                     __end_of_printf:
  1639                           	opt stack 0
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           prodh	equ	0xFF4
  1645                           prodl	equ	0xFF3
  1646                           wreg	equ	0xFE8
  1647                           postinc2	equ	0xFDE
  1648                           postdec2	equ	0xFDD
  1649                           fsr2h	equ	0xFDA
  1650                           fsr2l	equ	0xFD9
  1651                           status	equ	0xFD8
  1652                           
  1653 ;; *************** function _scale *****************
  1654 ;; Defined at:
  1655 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  scl             1    wreg     char 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  scl             1   41[COMRAM] char 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  3   35[COMRAM] char 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1669 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;Total ram usage:        7 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    2
  1676 ;; This function calls:
  1677 ;;		___awdiv
  1678 ;;		___awmod
  1679 ;;		___ftmul
  1680 ;;		___wmul
  1681 ;; This function is called by:
  1682 ;;		_printf
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           	psect	text2
  1687  001650                     __ptext2:
  1688                           	opt stack 0
  1689  001650                     _scale:
  1690                           	opt stack 27
  1691                           
  1692                           ;incstack = 0
  1693                           ;scale@scl stored from wreg
  1694  001650  6E2A               	movwf	scale@scl,c
  1695                           
  1696                           ;doprnt.c: 428: if(scl < 0) {
  1697  001652  AE2A               	btfss	scale@scl,7,c
  1698  001654  D0FB               	goto	l2194
  1699                           
  1700                           ;doprnt.c: 429: scl = -scl;
  1701  001656  6C2A               	negf	scale@scl,c
  1702                           
  1703                           ;doprnt.c: 430: if(scl>=110)
  1704  001658  502A               	movf	scale@scl,w,c
  1705  00165A  0A80               	xorlw	128
  1706  00165C  0F12               	addlw	-238
  1707  00165E  A0D8               	btfss	status,0,c
  1708  001660  D091               	goto	l2184
  1709                           
  1710                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1711  001662  0E00               	movlw	0
  1712  001664  6E12               	movwf	___wmul@multiplicand+1,c
  1713  001666  0E03               	movlw	3
  1714  001668  6E11               	movwf	___wmul@multiplicand,c
  1715  00166A  0E00               	movlw	0
  1716  00166C  6E0A               	movwf	___awdiv@divisor+1,c
  1717  00166E  0E0A               	movlw	10
  1718  001670  6E09               	movwf	___awdiv@divisor,c
  1719  001672  0E00               	movlw	0
  1720  001674  6E04               	movwf	___awmod@divisor+1,c
  1721  001676  0E64               	movlw	100
  1722  001678  6E03               	movwf	___awmod@divisor,c
  1723  00167A  502A               	movf	scale@scl,w,c
  1724  00167C  6E01               	movwf	___awmod@dividend,c
  1725  00167E  6A02               	clrf	___awmod@dividend+1,c
  1726  001680  BE01               	btfsc	___awmod@dividend,7,c
  1727  001682  0602               	decf	___awmod@dividend+1,f,c
  1728  001684  ECFE  F012         	call	___awmod	;wreg free
  1729  001688  C001  F007         	movff	?___awmod,___awdiv@dividend
  1730  00168C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  1731  001690  EC3F  F012         	call	___awdiv	;wreg free
  1732  001694  0E09               	movlw	9
  1733  001696  2407               	addwf	?___awdiv,w,c
  1734  001698  6E0F               	movwf	___wmul@multiplier,c
  1735  00169A  0E00               	movlw	0
  1736  00169C  2008               	addwfc	?___awdiv+1,w,c
  1737  00169E  6E10               	movwf	___wmul@multiplier+1,c
  1738  0016A0  EC21  F014         	call	___wmul	;wreg free
  1739  0016A4  0E29               	movlw	low __npowers_
  1740  0016A6  240F               	addwf	?___wmul,w,c
  1741  0016A8  6EF6               	movwf	tblptrl,c
  1742  0016AA  0E10               	movlw	high __npowers_
  1743  0016AC  2010               	addwfc	?___wmul+1,w,c
  1744  0016AE  6EF7               	movwf	tblptrh,c
  1745  0016B0                     	if	0	;There are less than 3 active tblptr bytes
  1746  0016B0                     	endif
  1747  0016B0  0009               	tblrd		*+
  1748  0016B2  CFF5 F018          	movff	tablat,___ftmul@f2
  1749  0016B6  0009               	tblrd		*+
  1750  0016B8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1751  0016BC  000A               	tblrd		*-
  1752  0016BE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1753  0016C2  0E00               	movlw	0
  1754  0016C4  6E0A               	movwf	___awdiv@divisor+1,c
  1755  0016C6  0E64               	movlw	100
  1756  0016C8  6E09               	movwf	___awdiv@divisor,c
  1757  0016CA  502A               	movf	scale@scl,w,c
  1758  0016CC  6E07               	movwf	___awdiv@dividend,c
  1759  0016CE  6A08               	clrf	___awdiv@dividend+1,c
  1760  0016D0  BE07               	btfsc	___awdiv@dividend,7,c
  1761  0016D2  0608               	decf	___awdiv@dividend+1,f,c
  1762  0016D4  EC3F  F012         	call	___awdiv	;wreg free
  1763  0016D8  0E12               	movlw	18
  1764  0016DA  2407               	addwf	?___awdiv,w,c
  1765  0016DC  6E0F               	movwf	___wmul@multiplier,c
  1766  0016DE  0E00               	movlw	0
  1767  0016E0  2008               	addwfc	?___awdiv+1,w,c
  1768  0016E2  6E10               	movwf	___wmul@multiplier+1,c
  1769  0016E4  0E00               	movlw	0
  1770  0016E6  6E12               	movwf	___wmul@multiplicand+1,c
  1771  0016E8  0E03               	movlw	3
  1772  0016EA  6E11               	movwf	___wmul@multiplicand,c
  1773  0016EC  EC21  F014         	call	___wmul	;wreg free
  1774  0016F0  0E29               	movlw	low __npowers_
  1775  0016F2  240F               	addwf	?___wmul,w,c
  1776  0016F4  6EF6               	movwf	tblptrl,c
  1777  0016F6  0E10               	movlw	high __npowers_
  1778  0016F8  2010               	addwfc	?___wmul+1,w,c
  1779  0016FA  6EF7               	movwf	tblptrh,c
  1780  0016FC                     	if	0	;There are less than 3 active tblptr bytes
  1781  0016FC                     	endif
  1782  0016FC  0009               	tblrd		*+
  1783  0016FE  CFF5 F015          	movff	tablat,___ftmul@f1
  1784  001702  0009               	tblrd		*+
  1785  001704  CFF5 F016          	movff	tablat,___ftmul@f1+1
  1786  001708  000A               	tblrd		*-
  1787  00170A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  1788  00170E  EC46  F010         	call	___ftmul	;wreg free
  1789  001712  C015  F027         	movff	?___ftmul,_scale$871
  1790  001716  C016  F028         	movff	?___ftmul+1,_scale$871+1
  1791  00171A  C017  F029         	movff	?___ftmul+2,_scale$871+2
  1792                           
  1793                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1794  00171E  C027  F015         	movff	_scale$871,___ftmul@f1
  1795  001722  C028  F016         	movff	_scale$871+1,___ftmul@f1+1
  1796  001726  C029  F017         	movff	_scale$871+2,___ftmul@f1+2
  1797  00172A  0E00               	movlw	0
  1798  00172C  6E12               	movwf	___wmul@multiplicand+1,c
  1799  00172E  0E03               	movlw	3
  1800  001730  6E11               	movwf	___wmul@multiplicand,c
  1801  001732  0E00               	movlw	0
  1802  001734  6E04               	movwf	___awmod@divisor+1,c
  1803  001736  0E0A               	movlw	10
  1804  001738  6E03               	movwf	___awmod@divisor,c
  1805  00173A  502A               	movf	scale@scl,w,c
  1806  00173C  6E01               	movwf	___awmod@dividend,c
  1807  00173E  6A02               	clrf	___awmod@dividend+1,c
  1808  001740  BE01               	btfsc	___awmod@dividend,7,c
  1809  001742  0602               	decf	___awmod@dividend+1,f,c
  1810  001744  ECFE  F012         	call	___awmod	;wreg free
  1811  001748  C001  F00F         	movff	?___awmod,___wmul@multiplier
  1812  00174C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  1813  001750  EC21  F014         	call	___wmul	;wreg free
  1814  001754  0E29               	movlw	low __npowers_
  1815  001756  240F               	addwf	?___wmul,w,c
  1816  001758  6EF6               	movwf	tblptrl,c
  1817  00175A  0E10               	movlw	high __npowers_
  1818  00175C  2010               	addwfc	?___wmul+1,w,c
  1819  00175E  6EF7               	movwf	tblptrh,c
  1820  001760                     	if	0	;There are less than 3 active tblptr bytes
  1821  001760                     	endif
  1822  001760  0009               	tblrd		*+
  1823  001762  CFF5 F018          	movff	tablat,___ftmul@f2
  1824  001766  0009               	tblrd		*+
  1825  001768  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1826  00176C  000A               	tblrd		*-
  1827  00176E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1828  001772  EC46  F010         	call	___ftmul	;wreg free
  1829  001776  C015  F024         	movff	?___ftmul,?_scale
  1830  00177A  C016  F025         	movff	?___ftmul+1,?_scale+1
  1831  00177E  C017  F026         	movff	?___ftmul+2,?_scale+2
  1832  001782  0012               	return	
  1833  001784                     l2184:
  1834                           
  1835                           ;doprnt.c: 432: else if(scl > 10)
  1836  001784  502A               	movf	scale@scl,w,c
  1837  001786  0A80               	xorlw	128
  1838  001788  0F75               	addlw	-139
  1839  00178A  A0D8               	btfss	status,0,c
  1840  00178C  D04D               	goto	l2190
  1841                           
  1842                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  1843  00178E  0E00               	movlw	0
  1844  001790  6E0A               	movwf	___awdiv@divisor+1,c
  1845  001792  0E0A               	movlw	10
  1846  001794  6E09               	movwf	___awdiv@divisor,c
  1847  001796  502A               	movf	scale@scl,w,c
  1848  001798  6E07               	movwf	___awdiv@dividend,c
  1849  00179A  6A08               	clrf	___awdiv@dividend+1,c
  1850  00179C  BE07               	btfsc	___awdiv@dividend,7,c
  1851  00179E  0608               	decf	___awdiv@dividend+1,f,c
  1852  0017A0  EC3F  F012         	call	___awdiv	;wreg free
  1853  0017A4  0E09               	movlw	9
  1854  0017A6  2407               	addwf	?___awdiv,w,c
  1855  0017A8  6E0F               	movwf	___wmul@multiplier,c
  1856  0017AA  0E00               	movlw	0
  1857  0017AC  2008               	addwfc	?___awdiv+1,w,c
  1858  0017AE  6E10               	movwf	___wmul@multiplier+1,c
  1859  0017B0  0E00               	movlw	0
  1860  0017B2  6E12               	movwf	___wmul@multiplicand+1,c
  1861  0017B4  0E03               	movlw	3
  1862  0017B6  6E11               	movwf	___wmul@multiplicand,c
  1863  0017B8  EC21  F014         	call	___wmul	;wreg free
  1864  0017BC  0E29               	movlw	low __npowers_
  1865  0017BE  240F               	addwf	?___wmul,w,c
  1866  0017C0  6EF6               	movwf	tblptrl,c
  1867  0017C2  0E10               	movlw	high __npowers_
  1868  0017C4  2010               	addwfc	?___wmul+1,w,c
  1869  0017C6  6EF7               	movwf	tblptrh,c
  1870  0017C8                     	if	0	;There are less than 3 active tblptr bytes
  1871  0017C8                     	endif
  1872  0017C8  0009               	tblrd		*+
  1873  0017CA  CFF5 F015          	movff	tablat,___ftmul@f1
  1874  0017CE  0009               	tblrd		*+
  1875  0017D0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  1876  0017D4  000A               	tblrd		*-
  1877  0017D6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  1878  0017DA  0E00               	movlw	0
  1879  0017DC  6E12               	movwf	___wmul@multiplicand+1,c
  1880  0017DE  0E03               	movlw	3
  1881  0017E0  6E11               	movwf	___wmul@multiplicand,c
  1882  0017E2  0E00               	movlw	0
  1883  0017E4  6E04               	movwf	___awmod@divisor+1,c
  1884  0017E6  0E0A               	movlw	10
  1885  0017E8  6E03               	movwf	___awmod@divisor,c
  1886  0017EA  502A               	movf	scale@scl,w,c
  1887  0017EC  6E01               	movwf	___awmod@dividend,c
  1888  0017EE  6A02               	clrf	___awmod@dividend+1,c
  1889  0017F0  BE01               	btfsc	___awmod@dividend,7,c
  1890  0017F2  0602               	decf	___awmod@dividend+1,f,c
  1891  0017F4  ECFE  F012         	call	___awmod	;wreg free
  1892  0017F8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  1893  0017FC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  1894  001800  EC21  F014         	call	___wmul	;wreg free
  1895  001804  0E29               	movlw	low __npowers_
  1896  001806  240F               	addwf	?___wmul,w,c
  1897  001808  6EF6               	movwf	tblptrl,c
  1898  00180A  0E10               	movlw	high __npowers_
  1899  00180C  2010               	addwfc	?___wmul+1,w,c
  1900  00180E  6EF7               	movwf	tblptrh,c
  1901  001810                     	if	0	;There are less than 3 active tblptr bytes
  1902  001810                     	endif
  1903  001810  0009               	tblrd		*+
  1904  001812  CFF5 F018          	movff	tablat,___ftmul@f2
  1905  001816  0009               	tblrd		*+
  1906  001818  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1907  00181C  000A               	tblrd		*-
  1908  00181E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1909  001822  EC46  F010         	call	___ftmul	;wreg free
  1910  001826  D7A7               	goto	L2
  1911  001828                     l2190:
  1912                           
  1913                           ;doprnt.c: 434: return _npowers_[scl];
  1914  001828  502A               	movf	scale@scl,w,c
  1915  00182A  0D03               	mullw	3
  1916  00182C  0E29               	movlw	low __npowers_
  1917  00182E  24F3               	addwf	prodl,w,c
  1918  001830  6EF6               	movwf	tblptrl,c
  1919  001832  0E10               	movlw	high __npowers_
  1920  001834  20F4               	addwfc	prodh,w,c
  1921  001836  6EF7               	movwf	tblptrh,c
  1922  001838                     	if	0	;There are less than 3 active tblptr bytes
  1923  001838                     	endif
  1924  001838  0009               	tblrd		*+
  1925  00183A  CFF5 F024          	movff	tablat,?_scale
  1926  00183E  0009               	tblrd		*+
  1927  001840  CFF5 F025          	movff	tablat,?_scale+1
  1928  001844  000A               	tblrd		*-
  1929  001846  CFF5 F026          	movff	tablat,?_scale+2
  1930  00184A  0012               	return	
  1931  00184C                     l2194:
  1932                           
  1933                           ;doprnt.c: 435: }
  1934                           ;doprnt.c: 436: if(scl>=110)
  1935  00184C  502A               	movf	scale@scl,w,c
  1936  00184E  0A80               	xorlw	128
  1937  001850  0F12               	addlw	-238
  1938  001852  A0D8               	btfss	status,0,c
  1939  001854  D091               	goto	l2202
  1940                           
  1941                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  1942  001856  0E00               	movlw	0
  1943  001858  6E12               	movwf	___wmul@multiplicand+1,c
  1944  00185A  0E03               	movlw	3
  1945  00185C  6E11               	movwf	___wmul@multiplicand,c
  1946  00185E  0E00               	movlw	0
  1947  001860  6E0A               	movwf	___awdiv@divisor+1,c
  1948  001862  0E0A               	movlw	10
  1949  001864  6E09               	movwf	___awdiv@divisor,c
  1950  001866  0E00               	movlw	0
  1951  001868  6E04               	movwf	___awmod@divisor+1,c
  1952  00186A  0E64               	movlw	100
  1953  00186C  6E03               	movwf	___awmod@divisor,c
  1954  00186E  502A               	movf	scale@scl,w,c
  1955  001870  6E01               	movwf	___awmod@dividend,c
  1956  001872  6A02               	clrf	___awmod@dividend+1,c
  1957  001874  BE01               	btfsc	___awmod@dividend,7,c
  1958  001876  0602               	decf	___awmod@dividend+1,f,c
  1959  001878  ECFE  F012         	call	___awmod	;wreg free
  1960  00187C  C001  F007         	movff	?___awmod,___awdiv@dividend
  1961  001880  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  1962  001884  EC3F  F012         	call	___awdiv	;wreg free
  1963  001888  0E09               	movlw	9
  1964  00188A  2407               	addwf	?___awdiv,w,c
  1965  00188C  6E0F               	movwf	___wmul@multiplier,c
  1966  00188E  0E00               	movlw	0
  1967  001890  2008               	addwfc	?___awdiv+1,w,c
  1968  001892  6E10               	movwf	___wmul@multiplier+1,c
  1969  001894  EC21  F014         	call	___wmul	;wreg free
  1970  001898  0E50               	movlw	low __powers_
  1971  00189A  240F               	addwf	?___wmul,w,c
  1972  00189C  6EF6               	movwf	tblptrl,c
  1973  00189E  0E10               	movlw	high __powers_
  1974  0018A0  2010               	addwfc	?___wmul+1,w,c
  1975  0018A2  6EF7               	movwf	tblptrh,c
  1976  0018A4                     	if	0	;There are less than 3 active tblptr bytes
  1977  0018A4                     	endif
  1978  0018A4  0009               	tblrd		*+
  1979  0018A6  CFF5 F018          	movff	tablat,___ftmul@f2
  1980  0018AA  0009               	tblrd		*+
  1981  0018AC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  1982  0018B0  000A               	tblrd		*-
  1983  0018B2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  1984  0018B6  0E00               	movlw	0
  1985  0018B8  6E0A               	movwf	___awdiv@divisor+1,c
  1986  0018BA  0E64               	movlw	100
  1987  0018BC  6E09               	movwf	___awdiv@divisor,c
  1988  0018BE  502A               	movf	scale@scl,w,c
  1989  0018C0  6E07               	movwf	___awdiv@dividend,c
  1990  0018C2  6A08               	clrf	___awdiv@dividend+1,c
  1991  0018C4  BE07               	btfsc	___awdiv@dividend,7,c
  1992  0018C6  0608               	decf	___awdiv@dividend+1,f,c
  1993  0018C8  EC3F  F012         	call	___awdiv	;wreg free
  1994  0018CC  0E12               	movlw	18
  1995  0018CE  2407               	addwf	?___awdiv,w,c
  1996  0018D0  6E0F               	movwf	___wmul@multiplier,c
  1997  0018D2  0E00               	movlw	0
  1998  0018D4  2008               	addwfc	?___awdiv+1,w,c
  1999  0018D6  6E10               	movwf	___wmul@multiplier+1,c
  2000  0018D8  0E00               	movlw	0
  2001  0018DA  6E12               	movwf	___wmul@multiplicand+1,c
  2002  0018DC  0E03               	movlw	3
  2003  0018DE  6E11               	movwf	___wmul@multiplicand,c
  2004  0018E0  EC21  F014         	call	___wmul	;wreg free
  2005  0018E4  0E50               	movlw	low __powers_
  2006  0018E6  240F               	addwf	?___wmul,w,c
  2007  0018E8  6EF6               	movwf	tblptrl,c
  2008  0018EA  0E10               	movlw	high __powers_
  2009  0018EC  2010               	addwfc	?___wmul+1,w,c
  2010  0018EE  6EF7               	movwf	tblptrh,c
  2011  0018F0                     	if	0	;There are less than 3 active tblptr bytes
  2012  0018F0                     	endif
  2013  0018F0  0009               	tblrd		*+
  2014  0018F2  CFF5 F015          	movff	tablat,___ftmul@f1
  2015  0018F6  0009               	tblrd		*+
  2016  0018F8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2017  0018FC  000A               	tblrd		*-
  2018  0018FE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2019  001902  EC46  F010         	call	___ftmul	;wreg free
  2020  001906  C015  F027         	movff	?___ftmul,_scale$871
  2021  00190A  C016  F028         	movff	?___ftmul+1,_scale$871+1
  2022  00190E  C017  F029         	movff	?___ftmul+2,_scale$871+2
  2023                           
  2024                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2025  001912  C027  F015         	movff	_scale$871,___ftmul@f1
  2026  001916  C028  F016         	movff	_scale$871+1,___ftmul@f1+1
  2027  00191A  C029  F017         	movff	_scale$871+2,___ftmul@f1+2
  2028  00191E  0E00               	movlw	0
  2029  001920  6E12               	movwf	___wmul@multiplicand+1,c
  2030  001922  0E03               	movlw	3
  2031  001924  6E11               	movwf	___wmul@multiplicand,c
  2032  001926  0E00               	movlw	0
  2033  001928  6E04               	movwf	___awmod@divisor+1,c
  2034  00192A  0E0A               	movlw	10
  2035  00192C  6E03               	movwf	___awmod@divisor,c
  2036  00192E  502A               	movf	scale@scl,w,c
  2037  001930  6E01               	movwf	___awmod@dividend,c
  2038  001932  6A02               	clrf	___awmod@dividend+1,c
  2039  001934  BE01               	btfsc	___awmod@dividend,7,c
  2040  001936  0602               	decf	___awmod@dividend+1,f,c
  2041  001938  ECFE  F012         	call	___awmod	;wreg free
  2042  00193C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2043  001940  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2044  001944  EC21  F014         	call	___wmul	;wreg free
  2045  001948  0E50               	movlw	low __powers_
  2046  00194A  240F               	addwf	?___wmul,w,c
  2047  00194C  6EF6               	movwf	tblptrl,c
  2048  00194E  0E10               	movlw	high __powers_
  2049  001950  2010               	addwfc	?___wmul+1,w,c
  2050  001952  6EF7               	movwf	tblptrh,c
  2051  001954                     	if	0	;There are less than 3 active tblptr bytes
  2052  001954                     	endif
  2053  001954  0009               	tblrd		*+
  2054  001956  CFF5 F018          	movff	tablat,___ftmul@f2
  2055  00195A  0009               	tblrd		*+
  2056  00195C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2057  001960  000A               	tblrd		*-
  2058  001962  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2059  001966  EC46  F010         	call	___ftmul	;wreg free
  2060  00196A  C015  F024         	movff	?___ftmul,?_scale
  2061  00196E  C016  F025         	movff	?___ftmul+1,?_scale+1
  2062  001972  C017  F026         	movff	?___ftmul+2,?_scale+2
  2063  001976  0012               	return	
  2064  001978                     l2202:
  2065                           
  2066                           ;doprnt.c: 438: else if(scl > 10)
  2067  001978  502A               	movf	scale@scl,w,c
  2068  00197A  0A80               	xorlw	128
  2069  00197C  0F75               	addlw	-139
  2070  00197E  A0D8               	btfss	status,0,c
  2071  001980  D04D               	goto	l2208
  2072                           
  2073                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2074  001982  0E00               	movlw	0
  2075  001984  6E0A               	movwf	___awdiv@divisor+1,c
  2076  001986  0E0A               	movlw	10
  2077  001988  6E09               	movwf	___awdiv@divisor,c
  2078  00198A  502A               	movf	scale@scl,w,c
  2079  00198C  6E07               	movwf	___awdiv@dividend,c
  2080  00198E  6A08               	clrf	___awdiv@dividend+1,c
  2081  001990  BE07               	btfsc	___awdiv@dividend,7,c
  2082  001992  0608               	decf	___awdiv@dividend+1,f,c
  2083  001994  EC3F  F012         	call	___awdiv	;wreg free
  2084  001998  0E09               	movlw	9
  2085  00199A  2407               	addwf	?___awdiv,w,c
  2086  00199C  6E0F               	movwf	___wmul@multiplier,c
  2087  00199E  0E00               	movlw	0
  2088  0019A0  2008               	addwfc	?___awdiv+1,w,c
  2089  0019A2  6E10               	movwf	___wmul@multiplier+1,c
  2090  0019A4  0E00               	movlw	0
  2091  0019A6  6E12               	movwf	___wmul@multiplicand+1,c
  2092  0019A8  0E03               	movlw	3
  2093  0019AA  6E11               	movwf	___wmul@multiplicand,c
  2094  0019AC  EC21  F014         	call	___wmul	;wreg free
  2095  0019B0  0E50               	movlw	low __powers_
  2096  0019B2  240F               	addwf	?___wmul,w,c
  2097  0019B4  6EF6               	movwf	tblptrl,c
  2098  0019B6  0E10               	movlw	high __powers_
  2099  0019B8  2010               	addwfc	?___wmul+1,w,c
  2100  0019BA  6EF7               	movwf	tblptrh,c
  2101  0019BC                     	if	0	;There are less than 3 active tblptr bytes
  2102  0019BC                     	endif
  2103  0019BC  0009               	tblrd		*+
  2104  0019BE  CFF5 F015          	movff	tablat,___ftmul@f1
  2105  0019C2  0009               	tblrd		*+
  2106  0019C4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2107  0019C8  000A               	tblrd		*-
  2108  0019CA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2109  0019CE  0E00               	movlw	0
  2110  0019D0  6E12               	movwf	___wmul@multiplicand+1,c
  2111  0019D2  0E03               	movlw	3
  2112  0019D4  6E11               	movwf	___wmul@multiplicand,c
  2113  0019D6  0E00               	movlw	0
  2114  0019D8  6E04               	movwf	___awmod@divisor+1,c
  2115  0019DA  0E0A               	movlw	10
  2116  0019DC  6E03               	movwf	___awmod@divisor,c
  2117  0019DE  502A               	movf	scale@scl,w,c
  2118  0019E0  6E01               	movwf	___awmod@dividend,c
  2119  0019E2  6A02               	clrf	___awmod@dividend+1,c
  2120  0019E4  BE01               	btfsc	___awmod@dividend,7,c
  2121  0019E6  0602               	decf	___awmod@dividend+1,f,c
  2122  0019E8  ECFE  F012         	call	___awmod	;wreg free
  2123  0019EC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2124  0019F0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2125  0019F4  EC21  F014         	call	___wmul	;wreg free
  2126  0019F8  0E50               	movlw	low __powers_
  2127  0019FA  240F               	addwf	?___wmul,w,c
  2128  0019FC  6EF6               	movwf	tblptrl,c
  2129  0019FE  0E10               	movlw	high __powers_
  2130  001A00  2010               	addwfc	?___wmul+1,w,c
  2131  001A02  6EF7               	movwf	tblptrh,c
  2132  001A04                     	if	0	;There are less than 3 active tblptr bytes
  2133  001A04                     	endif
  2134  001A04  0009               	tblrd		*+
  2135  001A06  CFF5 F018          	movff	tablat,___ftmul@f2
  2136  001A0A  0009               	tblrd		*+
  2137  001A0C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2138  001A10  000A               	tblrd		*-
  2139  001A12  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2140  001A16  EC46  F010         	call	___ftmul	;wreg free
  2141  001A1A  D7A7               	goto	L3
  2142  001A1C                     l2208:
  2143                           
  2144                           ;doprnt.c: 440: return _powers_[scl];
  2145  001A1C  502A               	movf	scale@scl,w,c
  2146  001A1E  0D03               	mullw	3
  2147  001A20  0E50               	movlw	low __powers_
  2148  001A22  24F3               	addwf	prodl,w,c
  2149  001A24  6EF6               	movwf	tblptrl,c
  2150  001A26  0E10               	movlw	high __powers_
  2151  001A28  20F4               	addwfc	prodh,w,c
  2152  001A2A  6EF7               	movwf	tblptrh,c
  2153  001A2C                     	if	0	;There are less than 3 active tblptr bytes
  2154  001A2C                     	endif
  2155  001A2C  0009               	tblrd		*+
  2156  001A2E  CFF5 F024          	movff	tablat,?_scale
  2157  001A32  0009               	tblrd		*+
  2158  001A34  CFF5 F025          	movff	tablat,?_scale+1
  2159  001A38  000A               	tblrd		*-
  2160  001A3A  CFF5 F026          	movff	tablat,?_scale+2
  2161  001A3E  0012               	return	
  2162  001A40                     __end_of_scale:
  2163                           	opt stack 0
  2164                           tblptru	equ	0xFF8
  2165                           tblptrh	equ	0xFF7
  2166                           tblptrl	equ	0xFF6
  2167                           tablat	equ	0xFF5
  2168                           prodh	equ	0xFF4
  2169                           prodl	equ	0xFF3
  2170                           wreg	equ	0xFE8
  2171                           postinc2	equ	0xFDE
  2172                           postdec2	equ	0xFDD
  2173                           fsr2h	equ	0xFDA
  2174                           fsr2l	equ	0xFD9
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function _putch *****************
  2178 ;; Defined at:
  2179 ;;		line 35 in file "lcd.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;  data            1    wreg     unsigned char 
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  data            1    4[COMRAM] unsigned char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      void 
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;Total ram usage:        1 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    3
  2200 ;; This function calls:
  2201 ;;		_lcdNewline
  2202 ;;		_lcdNibble
  2203 ;; This function is called by:
  2204 ;;		_printf
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text3
  2209  00288C                     __ptext3:
  2210                           	opt stack 0
  2211  00288C                     _putch:
  2212                           	opt stack 26
  2213                           
  2214                           ;incstack = 0
  2215                           ;putch@data stored from wreg
  2216  00288C  6E05               	movwf	putch@data,c
  2217                           
  2218                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  2219  00288E  0E0A               	movlw	10
  2220  002890  1805               	xorwf	putch@data,w,c
  2221  002892  A4D8               	btfss	status,2,c
  2222  002894  D003               	goto	l70
  2223  002896  EC6D  F014         	call	_lcdNewline	;wreg free
  2224  00289A  0012               	return	
  2225  00289C                     l70:
  2226                           
  2227                           ;lcd.c: 37: else
  2228                           ;lcd.c: 38: {
  2229                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  2230  00289C  848C               	bsf	3980,2,c	;volatile
  2231                           
  2232                           ;lcd.c: 40: _delay((unsigned long)((140)*(8000000/4000000.0)));
  2233  00289E  0E5D               	movlw	93
  2234  0028A0                     u2627:
  2235  0028A0  2EE8               	decfsz	wreg,f,c
  2236  0028A2  D7FE               	bra	u2627
  2237  0028A4  F000               	nop	
  2238                           
  2239                           ;lcd.c: 41: lcdNibble(data);
  2240  0028A6  5005               	movf	putch@data,w,c
  2241  0028A8  EC97  F013         	call	_lcdNibble
  2242  0028AC  0012               	return	
  2243  0028AE                     __end_of_putch:
  2244                           	opt stack 0
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           prodh	equ	0xFF4
  2250                           prodl	equ	0xFF3
  2251                           wreg	equ	0xFE8
  2252                           postinc2	equ	0xFDE
  2253                           postdec2	equ	0xFDD
  2254                           fsr2h	equ	0xFDA
  2255                           fsr2l	equ	0xFD9
  2256                           status	equ	0xFD8
  2257                           
  2258 ;; *************** function _lcdNewline *****************
  2259 ;; Defined at:
  2260 ;;		line 74 in file "lcd.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;		None
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, status,2, status,0, cstack
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2278 ;;Total ram usage:        0 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:    2
  2281 ;; This function calls:
  2282 ;;		_lcdInst
  2283 ;; This function is called by:
  2284 ;;		_putch
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text4
  2289  0028DA                     __ptext4:
  2290                           	opt stack 0
  2291  0028DA                     _lcdNewline:
  2292                           	opt stack 26
  2293                           
  2294                           ;lcd.c: 75: lcdInst(0b11000000);
  2295                           
  2296                           ;incstack = 0
  2297  0028DA  0EC0               	movlw	192
  2298  0028DC  EC57  F014         	call	_lcdInst
  2299  0028E0  0012               	return		;funcret
  2300  0028E2                     __end_of_lcdNewline:
  2301                           	opt stack 0
  2302                           tblptru	equ	0xFF8
  2303                           tblptrh	equ	0xFF7
  2304                           tblptrl	equ	0xFF6
  2305                           tablat	equ	0xFF5
  2306                           prodh	equ	0xFF4
  2307                           prodl	equ	0xFF3
  2308                           wreg	equ	0xFE8
  2309                           postinc2	equ	0xFDE
  2310                           postdec2	equ	0xFDD
  2311                           fsr2h	equ	0xFDA
  2312                           fsr2l	equ	0xFD9
  2313                           status	equ	0xFD8
  2314                           
  2315 ;; *************** function _fround *****************
  2316 ;; Defined at:
  2317 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  prec            1    wreg     unsigned char 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  prec            1   44[COMRAM] unsigned char 
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  3   35[COMRAM] unsigned char 
  2324 ;; Registers used:
  2325 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2331 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;Total ram usage:       10 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    2
  2338 ;; This function calls:
  2339 ;;		___awdiv
  2340 ;;		___awmod
  2341 ;;		___ftmul
  2342 ;;		___wmul
  2343 ;; This function is called by:
  2344 ;;		_printf
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text5
  2349  001A40                     __ptext5:
  2350                           	opt stack 0
  2351  001A40                     _fround:
  2352                           	opt stack 27
  2353                           
  2354                           ;incstack = 0
  2355                           ;fround@prec stored from wreg
  2356  001A40  6E2D               	movwf	fround@prec,c
  2357                           
  2358                           ;doprnt.c: 413: if(prec>=110)
  2359  001A42  0E6D               	movlw	109
  2360  001A44  642D               	cpfsgt	fround@prec,c
  2361  001A46  D09F               	goto	l2162
  2362                           
  2363                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2364  001A48  0E00               	movlw	0
  2365  001A4A  6E12               	movwf	___wmul@multiplicand+1,c
  2366  001A4C  0E03               	movlw	3
  2367  001A4E  6E11               	movwf	___wmul@multiplicand,c
  2368  001A50  0E00               	movlw	0
  2369  001A52  6E0A               	movwf	___awdiv@divisor+1,c
  2370  001A54  0E0A               	movlw	10
  2371  001A56  6E09               	movwf	___awdiv@divisor,c
  2372  001A58  0E00               	movlw	0
  2373  001A5A  6E04               	movwf	___awmod@divisor+1,c
  2374  001A5C  0E64               	movlw	100
  2375  001A5E  6E03               	movwf	___awmod@divisor,c
  2376  001A60  C02D  F001         	movff	fround@prec,___awmod@dividend
  2377  001A64  6A02               	clrf	___awmod@dividend+1,c
  2378  001A66  ECFE  F012         	call	___awmod	;wreg free
  2379  001A6A  C001  F007         	movff	?___awmod,___awdiv@dividend
  2380  001A6E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2381  001A72  EC3F  F012         	call	___awdiv	;wreg free
  2382  001A76  0E09               	movlw	9
  2383  001A78  2407               	addwf	?___awdiv,w,c
  2384  001A7A  6E0F               	movwf	___wmul@multiplier,c
  2385  001A7C  0E00               	movlw	0
  2386  001A7E  2008               	addwfc	?___awdiv+1,w,c
  2387  001A80  6E10               	movwf	___wmul@multiplier+1,c
  2388  001A82  EC21  F014         	call	___wmul	;wreg free
  2389  001A86  0E29               	movlw	low __npowers_
  2390  001A88  240F               	addwf	?___wmul,w,c
  2391  001A8A  6EF6               	movwf	tblptrl,c
  2392  001A8C  0E10               	movlw	high __npowers_
  2393  001A8E  2010               	addwfc	?___wmul+1,w,c
  2394  001A90  6EF7               	movwf	tblptrh,c
  2395  001A92                     	if	0	;There are less than 3 active tblptr bytes
  2396  001A92                     	endif
  2397  001A92  0009               	tblrd		*+
  2398  001A94  CFF5 F018          	movff	tablat,___ftmul@f2
  2399  001A98  0009               	tblrd		*+
  2400  001A9A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2401  001A9E  000A               	tblrd		*-
  2402  001AA0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2403  001AA4  0E00               	movlw	0
  2404  001AA6  6E0A               	movwf	___awdiv@divisor+1,c
  2405  001AA8  0E64               	movlw	100
  2406  001AAA  6E09               	movwf	___awdiv@divisor,c
  2407  001AAC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2408  001AB0  6A08               	clrf	___awdiv@dividend+1,c
  2409  001AB2  EC3F  F012         	call	___awdiv	;wreg free
  2410  001AB6  0E12               	movlw	18
  2411  001AB8  2407               	addwf	?___awdiv,w,c
  2412  001ABA  6E0F               	movwf	___wmul@multiplier,c
  2413  001ABC  0E00               	movlw	0
  2414  001ABE  2008               	addwfc	?___awdiv+1,w,c
  2415  001AC0  6E10               	movwf	___wmul@multiplier+1,c
  2416  001AC2  0E00               	movlw	0
  2417  001AC4  6E12               	movwf	___wmul@multiplicand+1,c
  2418  001AC6  0E03               	movlw	3
  2419  001AC8  6E11               	movwf	___wmul@multiplicand,c
  2420  001ACA  EC21  F014         	call	___wmul	;wreg free
  2421  001ACE  0E29               	movlw	low __npowers_
  2422  001AD0  240F               	addwf	?___wmul,w,c
  2423  001AD2  6EF6               	movwf	tblptrl,c
  2424  001AD4  0E10               	movlw	high __npowers_
  2425  001AD6  2010               	addwfc	?___wmul+1,w,c
  2426  001AD8  6EF7               	movwf	tblptrh,c
  2427  001ADA                     	if	0	;There are less than 3 active tblptr bytes
  2428  001ADA                     	endif
  2429  001ADA  0009               	tblrd		*+
  2430  001ADC  CFF5 F015          	movff	tablat,___ftmul@f1
  2431  001AE0  0009               	tblrd		*+
  2432  001AE2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2433  001AE6  000A               	tblrd		*-
  2434  001AE8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2435  001AEC  EC46  F010         	call	___ftmul	;wreg free
  2436  001AF0  C015  F02A         	movff	?___ftmul,_fround$869
  2437  001AF4  C016  F02B         	movff	?___ftmul+1,_fround$869+1
  2438  001AF8  C017  F02C         	movff	?___ftmul+2,_fround$869+2
  2439                           
  2440                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2441  001AFC  0E00               	movlw	0
  2442  001AFE  6E12               	movwf	___wmul@multiplicand+1,c
  2443  001B00  0E03               	movlw	3
  2444  001B02  6E11               	movwf	___wmul@multiplicand,c
  2445  001B04  0E00               	movlw	0
  2446  001B06  6E04               	movwf	___awmod@divisor+1,c
  2447  001B08  0E0A               	movlw	10
  2448  001B0A  6E03               	movwf	___awmod@divisor,c
  2449  001B0C  C02D  F001         	movff	fround@prec,___awmod@dividend
  2450  001B10  6A02               	clrf	___awmod@dividend+1,c
  2451  001B12  ECFE  F012         	call	___awmod	;wreg free
  2452  001B16  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2453  001B1A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2454  001B1E  EC21  F014         	call	___wmul	;wreg free
  2455  001B22  0E29               	movlw	low __npowers_
  2456  001B24  240F               	addwf	?___wmul,w,c
  2457  001B26  6EF6               	movwf	tblptrl,c
  2458  001B28  0E10               	movlw	high __npowers_
  2459  001B2A  2010               	addwfc	?___wmul+1,w,c
  2460  001B2C  6EF7               	movwf	tblptrh,c
  2461  001B2E                     	if	0	;There are less than 3 active tblptr bytes
  2462  001B2E                     	endif
  2463  001B2E  0009               	tblrd		*+
  2464  001B30  CFF5 F018          	movff	tablat,___ftmul@f2
  2465  001B34  0009               	tblrd		*+
  2466  001B36  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2467  001B3A  000A               	tblrd		*-
  2468  001B3C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2469  001B40  C02A  F015         	movff	_fround$869,___ftmul@f1
  2470  001B44  C02B  F016         	movff	_fround$869+1,___ftmul@f1+1
  2471  001B48  C02C  F017         	movff	_fround$869+2,___ftmul@f1+2
  2472  001B4C  EC46  F010         	call	___ftmul	;wreg free
  2473  001B50  C015  F027         	movff	?___ftmul,_fround$870
  2474  001B54  C016  F028         	movff	?___ftmul+1,_fround$870+1
  2475  001B58  C017  F029         	movff	?___ftmul+2,_fround$870+2
  2476                           
  2477                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2478  001B5C  C027  F015         	movff	_fround$870,___ftmul@f1
  2479  001B60  C028  F016         	movff	_fround$870+1,___ftmul@f1+1
  2480  001B64  C029  F017         	movff	_fround$870+2,___ftmul@f1+2
  2481  001B68  0E00               	movlw	0
  2482  001B6A  6E18               	movwf	___ftmul@f2,c
  2483  001B6C  0E00               	movlw	0
  2484  001B6E  6E19               	movwf	___ftmul@f2+1,c
  2485  001B70  0E3F               	movlw	63
  2486  001B72  6E1A               	movwf	___ftmul@f2+2,c
  2487  001B74  EC46  F010         	call	___ftmul	;wreg free
  2488  001B78  C015  F024         	movff	?___ftmul,?_fround
  2489  001B7C  C016  F025         	movff	?___ftmul+1,?_fround+1
  2490  001B80  C017  F026         	movff	?___ftmul+2,?_fround+2
  2491  001B84  0012               	return	
  2492  001B86                     l2162:
  2493                           
  2494                           ;doprnt.c: 415: else if(prec > 10)
  2495  001B86  0E0A               	movlw	10
  2496  001B88  642D               	cpfsgt	fround@prec,c
  2497  001B8A  D05D               	goto	l2170
  2498                           
  2499                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2500  001B8C  0E00               	movlw	0
  2501  001B8E  6E12               	movwf	___wmul@multiplicand+1,c
  2502  001B90  0E03               	movlw	3
  2503  001B92  6E11               	movwf	___wmul@multiplicand,c
  2504  001B94  0E00               	movlw	0
  2505  001B96  6E04               	movwf	___awmod@divisor+1,c
  2506  001B98  0E0A               	movlw	10
  2507  001B9A  6E03               	movwf	___awmod@divisor,c
  2508  001B9C  C02D  F001         	movff	fround@prec,___awmod@dividend
  2509  001BA0  6A02               	clrf	___awmod@dividend+1,c
  2510  001BA2  ECFE  F012         	call	___awmod	;wreg free
  2511  001BA6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2512  001BAA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2513  001BAE  EC21  F014         	call	___wmul	;wreg free
  2514  001BB2  0E29               	movlw	low __npowers_
  2515  001BB4  240F               	addwf	?___wmul,w,c
  2516  001BB6  6EF6               	movwf	tblptrl,c
  2517  001BB8  0E10               	movlw	high __npowers_
  2518  001BBA  2010               	addwfc	?___wmul+1,w,c
  2519  001BBC  6EF7               	movwf	tblptrh,c
  2520  001BBE                     	if	0	;There are less than 3 active tblptr bytes
  2521  001BBE                     	endif
  2522  001BBE  0009               	tblrd		*+
  2523  001BC0  CFF5 F018          	movff	tablat,___ftmul@f2
  2524  001BC4  0009               	tblrd		*+
  2525  001BC6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2526  001BCA  000A               	tblrd		*-
  2527  001BCC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2528  001BD0  0E00               	movlw	0
  2529  001BD2  6E0A               	movwf	___awdiv@divisor+1,c
  2530  001BD4  0E0A               	movlw	10
  2531  001BD6  6E09               	movwf	___awdiv@divisor,c
  2532  001BD8  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2533  001BDC  6A08               	clrf	___awdiv@dividend+1,c
  2534  001BDE  EC3F  F012         	call	___awdiv	;wreg free
  2535  001BE2  0E09               	movlw	9
  2536  001BE4  2407               	addwf	?___awdiv,w,c
  2537  001BE6  6E0F               	movwf	___wmul@multiplier,c
  2538  001BE8  0E00               	movlw	0
  2539  001BEA  2008               	addwfc	?___awdiv+1,w,c
  2540  001BEC  6E10               	movwf	___wmul@multiplier+1,c
  2541  001BEE  0E00               	movlw	0
  2542  001BF0  6E12               	movwf	___wmul@multiplicand+1,c
  2543  001BF2  0E03               	movlw	3
  2544  001BF4  6E11               	movwf	___wmul@multiplicand,c
  2545  001BF6  EC21  F014         	call	___wmul	;wreg free
  2546  001BFA  0E29               	movlw	low __npowers_
  2547  001BFC  240F               	addwf	?___wmul,w,c
  2548  001BFE  6EF6               	movwf	tblptrl,c
  2549  001C00  0E10               	movlw	high __npowers_
  2550  001C02  2010               	addwfc	?___wmul+1,w,c
  2551  001C04  6EF7               	movwf	tblptrh,c
  2552  001C06                     	if	0	;There are less than 3 active tblptr bytes
  2553  001C06                     	endif
  2554  001C06  0009               	tblrd		*+
  2555  001C08  CFF5 F015          	movff	tablat,___ftmul@f1
  2556  001C0C  0009               	tblrd		*+
  2557  001C0E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2558  001C12  000A               	tblrd		*-
  2559  001C14  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2560  001C18  EC46  F010         	call	___ftmul	;wreg free
  2561  001C1C  C015  F02A         	movff	?___ftmul,_fround$869
  2562  001C20  C016  F02B         	movff	?___ftmul+1,_fround$869+1
  2563  001C24  C017  F02C         	movff	?___ftmul+2,_fround$869+2
  2564                           
  2565                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2566  001C28  C02A  F015         	movff	_fround$869,___ftmul@f1
  2567  001C2C  C02B  F016         	movff	_fround$869+1,___ftmul@f1+1
  2568  001C30  C02C  F017         	movff	_fround$869+2,___ftmul@f1+2
  2569  001C34  0E00               	movlw	0
  2570  001C36  6E18               	movwf	___ftmul@f2,c
  2571  001C38  0E00               	movlw	0
  2572  001C3A  6E19               	movwf	___ftmul@f2+1,c
  2573  001C3C  0E3F               	movlw	63
  2574  001C3E  6E1A               	movwf	___ftmul@f2+2,c
  2575  001C40  EC46  F010         	call	___ftmul	;wreg free
  2576  001C44  D799               	goto	L4
  2577  001C46                     l2170:
  2578                           
  2579                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2580  001C46  502D               	movf	fround@prec,w,c
  2581  001C48  0D03               	mullw	3
  2582  001C4A  0E29               	movlw	low __npowers_
  2583  001C4C  24F3               	addwf	prodl,w,c
  2584  001C4E  6EF6               	movwf	tblptrl,c
  2585  001C50  0E10               	movlw	high __npowers_
  2586  001C52  20F4               	addwfc	prodh,w,c
  2587  001C54  6EF7               	movwf	tblptrh,c
  2588  001C56                     	if	0	;There are less than 3 active tblptr bytes
  2589  001C56                     	endif
  2590  001C56  0009               	tblrd		*+
  2591  001C58  CFF5 F015          	movff	tablat,___ftmul@f1
  2592  001C5C  0009               	tblrd		*+
  2593  001C5E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2594  001C62  000A               	tblrd		*-
  2595  001C64  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2596  001C68  0E00               	movlw	0
  2597  001C6A  6E18               	movwf	___ftmul@f2,c
  2598  001C6C  0E00               	movlw	0
  2599  001C6E  6E19               	movwf	___ftmul@f2+1,c
  2600  001C70  0E3F               	movlw	63
  2601  001C72  6E1A               	movwf	___ftmul@f2+2,c
  2602  001C74  EC46  F010         	call	___ftmul	;wreg free
  2603  001C78  C015  F024         	movff	?___ftmul,?_fround
  2604  001C7C  C016  F025         	movff	?___ftmul+1,?_fround+1
  2605  001C80  C017  F026         	movff	?___ftmul+2,?_fround+2
  2606  001C84  0012               	return	
  2607  001C86                     __end_of_fround:
  2608                           	opt stack 0
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           prodh	equ	0xFF4
  2614                           prodl	equ	0xFF3
  2615                           wreg	equ	0xFE8
  2616                           postinc2	equ	0xFDE
  2617                           postdec2	equ	0xFDD
  2618                           fsr2h	equ	0xFDA
  2619                           fsr2l	equ	0xFD9
  2620                           status	equ	0xFD8
  2621                           
  2622 ;; *************** function ___wmul *****************
  2623 ;; Defined at:
  2624 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;  multiplier      2   14[COMRAM] unsigned int 
  2627 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;  product         2   18[COMRAM] unsigned int 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  2   14[COMRAM] unsigned int 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2, status,0, prodl, prodh
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2639 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2642 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;Total ram usage:        6 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; This function calls:
  2646 ;;		Nothing
  2647 ;; This function is called by:
  2648 ;;		_fround
  2649 ;;		_scale
  2650 ;;		_printf
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text6
  2655  002842                     __ptext6:
  2656                           	opt stack 0
  2657  002842                     ___wmul:
  2658                           	opt stack 28
  2659                           
  2660                           ;incstack = 0
  2661  002842  500F               	movf	___wmul@multiplier,w,c
  2662  002844  0211               	mulwf	___wmul@multiplicand,c
  2663  002846  CFF3 F013          	movff	prodl,___wmul@product
  2664  00284A  CFF4 F014          	movff	prodh,___wmul@product+1
  2665  00284E  500F               	movf	___wmul@multiplier,w,c
  2666  002850  0212               	mulwf	___wmul@multiplicand+1,c
  2667  002852  50F3               	movf	prodl,w,c
  2668  002854  2614               	addwf	___wmul@product+1,f,c
  2669  002856  5010               	movf	___wmul@multiplier+1,w,c
  2670  002858  0211               	mulwf	___wmul@multiplicand,c
  2671  00285A  50F3               	movf	prodl,w,c
  2672  00285C  2614               	addwf	___wmul@product+1,f,c
  2673  00285E  C013  F00F         	movff	___wmul@product,?___wmul
  2674  002862  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2675  002866  0012               	return	
  2676  002868                     __end_of___wmul:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           prodh	equ	0xFF4
  2683                           prodl	equ	0xFF3
  2684                           wreg	equ	0xFE8
  2685                           postinc2	equ	0xFDE
  2686                           postdec2	equ	0xFDD
  2687                           fsr2h	equ	0xFDA
  2688                           fsr2l	equ	0xFD9
  2689                           status	equ	0xFD8
  2690                           
  2691 ;; *************** function ___ftmul *****************
  2692 ;; Defined at:
  2693 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;  f1              3   20[COMRAM] float 
  2696 ;;  f2              3   23[COMRAM] float 
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  2699 ;;  sign            1   34[COMRAM] unsigned char 
  2700 ;;  cntr            1   33[COMRAM] unsigned char 
  2701 ;;  exp             1   29[COMRAM] unsigned char 
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  3   20[COMRAM] float 
  2704 ;; Registers used:
  2705 ;;		wreg, status,2, status,0, cstack
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2711 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;Total ram usage:       15 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; Hardware stack levels required when called:    1
  2718 ;; This function calls:
  2719 ;;		___ftpack
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;;		_fround
  2723 ;;		_scale
  2724 ;;		_printf
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text7
  2729  00208C                     __ptext7:
  2730                           	opt stack 0
  2731  00208C                     ___ftmul:
  2732                           	opt stack 27
  2733                           
  2734                           ;incstack = 0
  2735  00208C  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  2736  002090  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  2737  002092  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  2738  002094  3416               	rlcf	___ftmul@f1+1,w,c
  2739  002096  361B               	rlcf	??___ftmul& (0+255),f,c
  2740  002098  E301               	bnc	u1671
  2741  00209A  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  2742  00209C                     u1671:
  2743  00209C  501B               	movf	??___ftmul,w,c
  2744  00209E  6E1E               	movwf	___ftmul@exp,c
  2745  0020A0  501E               	movf	___ftmul@exp,w,c
  2746  0020A2  A4D8               	btfss	status,2,c
  2747  0020A4  D007               	goto	l2022
  2748  0020A6  0E00               	movlw	0
  2749  0020A8  6E15               	movwf	?___ftmul,c
  2750  0020AA  0E00               	movlw	0
  2751  0020AC  6E16               	movwf	?___ftmul+1,c
  2752  0020AE  0E00               	movlw	0
  2753  0020B0  6E17               	movwf	?___ftmul+2,c
  2754  0020B2  0012               	return	
  2755  0020B4                     l2022:
  2756  0020B4  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  2757  0020B8  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  2758  0020BA  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  2759  0020BC  3419               	rlcf	___ftmul@f2+1,w,c
  2760  0020BE  361B               	rlcf	??___ftmul& (0+255),f,c
  2761  0020C0  E301               	bnc	u1691
  2762  0020C2  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  2763  0020C4                     u1691:
  2764  0020C4  501B               	movf	??___ftmul,w,c
  2765  0020C6  6E23               	movwf	___ftmul@sign,c
  2766  0020C8  5023               	movf	___ftmul@sign,w,c
  2767  0020CA  A4D8               	btfss	status,2,c
  2768  0020CC  D007               	goto	l2028
  2769  0020CE  0E00               	movlw	0
  2770  0020D0  6E15               	movwf	?___ftmul,c
  2771  0020D2  0E00               	movlw	0
  2772  0020D4  6E16               	movwf	?___ftmul+1,c
  2773  0020D6  0E00               	movlw	0
  2774  0020D8  6E17               	movwf	?___ftmul+2,c
  2775  0020DA  0012               	return	
  2776  0020DC                     l2028:
  2777  0020DC  5023               	movf	___ftmul@sign,w,c
  2778  0020DE  0F7B               	addlw	123
  2779  0020E0  261E               	addwf	___ftmul@exp,f,c
  2780  0020E2  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  2781  0020E6  501A               	movf	___ftmul@f2+2,w,c
  2782  0020E8  1A23               	xorwf	___ftmul@sign,f,c
  2783  0020EA  0E80               	movlw	128
  2784  0020EC  1623               	andwf	___ftmul@sign,f,c
  2785  0020EE  8E16               	bsf	___ftmul@f1+1,7,c
  2786  0020F0  8E19               	bsf	___ftmul@f2+1,7,c
  2787  0020F2  0EFF               	movlw	255
  2788  0020F4  1618               	andwf	___ftmul@f2,f,c
  2789  0020F6  0EFF               	movlw	255
  2790  0020F8  1619               	andwf	___ftmul@f2+1,f,c
  2791  0020FA  0E00               	movlw	0
  2792  0020FC  161A               	andwf	___ftmul@f2+2,f,c
  2793  0020FE  0E00               	movlw	0
  2794  002100  6E1F               	movwf	___ftmul@f3_as_product,c
  2795  002102  0E00               	movlw	0
  2796  002104  6E20               	movwf	___ftmul@f3_as_product+1,c
  2797  002106  0E00               	movlw	0
  2798  002108  6E21               	movwf	___ftmul@f3_as_product+2,c
  2799  00210A  0E07               	movlw	7
  2800  00210C  6E22               	movwf	___ftmul@cntr,c
  2801  00210E                     l2042:
  2802  00210E  A015               	btfss	___ftmul@f1,0,c
  2803  002110  D006               	goto	l2046
  2804  002112  5018               	movf	___ftmul@f2,w,c
  2805  002114  261F               	addwf	___ftmul@f3_as_product,f,c
  2806  002116  5019               	movf	___ftmul@f2+1,w,c
  2807  002118  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  2808  00211A  501A               	movf	___ftmul@f2+2,w,c
  2809  00211C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  2810  00211E                     l2046:
  2811  00211E  90D8               	bcf	status,0,c
  2812  002120  3217               	rrcf	___ftmul@f1+2,f,c
  2813  002122  3216               	rrcf	___ftmul@f1+1,f,c
  2814  002124  3215               	rrcf	___ftmul@f1,f,c
  2815  002126  90D8               	bcf	status,0,c
  2816  002128  3618               	rlcf	___ftmul@f2,f,c
  2817  00212A  3619               	rlcf	___ftmul@f2+1,f,c
  2818  00212C  361A               	rlcf	___ftmul@f2+2,f,c
  2819  00212E  2E22               	decfsz	___ftmul@cntr,f,c
  2820  002130  D7EE               	goto	l2042
  2821  002132  0E09               	movlw	9
  2822  002134  6E22               	movwf	___ftmul@cntr,c
  2823  002136                     l2052:
  2824  002136  A015               	btfss	___ftmul@f1,0,c
  2825  002138  D006               	goto	l2056
  2826  00213A  5018               	movf	___ftmul@f2,w,c
  2827  00213C  261F               	addwf	___ftmul@f3_as_product,f,c
  2828  00213E  5019               	movf	___ftmul@f2+1,w,c
  2829  002140  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  2830  002142  501A               	movf	___ftmul@f2+2,w,c
  2831  002144  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  2832  002146                     l2056:
  2833  002146  90D8               	bcf	status,0,c
  2834  002148  3217               	rrcf	___ftmul@f1+2,f,c
  2835  00214A  3216               	rrcf	___ftmul@f1+1,f,c
  2836  00214C  3215               	rrcf	___ftmul@f1,f,c
  2837  00214E  90D8               	bcf	status,0,c
  2838  002150  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  2839  002152  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  2840  002154  321F               	rrcf	___ftmul@f3_as_product,f,c
  2841  002156  2E22               	decfsz	___ftmul@cntr,f,c
  2842  002158  D7EE               	goto	l2052
  2843  00215A  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2844  00215E  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2845  002162  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2846  002166  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  2847  00216A  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  2848  00216E  ECA0  F011         	call	___ftpack	;wreg free
  2849  002172  C001  F015         	movff	?___ftpack,?___ftmul
  2850  002176  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  2851  00217A  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  2852  00217E  0012               	return	
  2853  002180                     __end_of___ftmul:
  2854                           	opt stack 0
  2855                           tblptru	equ	0xFF8
  2856                           tblptrh	equ	0xFF7
  2857                           tblptrl	equ	0xFF6
  2858                           tablat	equ	0xFF5
  2859                           prodh	equ	0xFF4
  2860                           prodl	equ	0xFF3
  2861                           wreg	equ	0xFE8
  2862                           postinc2	equ	0xFDE
  2863                           postdec2	equ	0xFDD
  2864                           fsr2h	equ	0xFDA
  2865                           fsr2l	equ	0xFD9
  2866                           status	equ	0xFD8
  2867                           
  2868 ;; *************** function ___awmod *****************
  2869 ;; Defined at:
  2870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  2871 ;; Parameters:    Size  Location     Type
  2872 ;;  dividend        2    0[COMRAM] int 
  2873 ;;  divisor         2    2[COMRAM] int 
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;  sign            1    5[COMRAM] unsigned char 
  2876 ;;  counter         1    4[COMRAM] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  2    0[COMRAM] int 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2, status,0
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2886 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;Total ram usage:        6 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; This function calls:
  2893 ;;		Nothing
  2894 ;; This function is called by:
  2895 ;;		_fround
  2896 ;;		_scale
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text8
  2901  0025FC                     __ptext8:
  2902                           	opt stack 0
  2903  0025FC                     ___awmod:
  2904                           	opt stack 28
  2905                           
  2906                           ;incstack = 0
  2907  0025FC  0E00               	movlw	0
  2908  0025FE  6E06               	movwf	___awmod@sign,c
  2909  002600  AE02               	btfss	___awmod@dividend+1,7,c
  2910  002602  D006               	goto	l2116
  2911  002604  6C01               	negf	___awmod@dividend,c
  2912  002606  1E02               	comf	___awmod@dividend+1,f,c
  2913  002608  B0D8               	btfsc	status,0,c
  2914  00260A  2A02               	incf	___awmod@dividend+1,f,c
  2915  00260C  0E01               	movlw	1
  2916  00260E  6E06               	movwf	___awmod@sign,c
  2917  002610                     l2116:
  2918  002610  AE04               	btfss	___awmod@divisor+1,7,c
  2919  002612  D004               	goto	l2120
  2920  002614  6C03               	negf	___awmod@divisor,c
  2921  002616  1E04               	comf	___awmod@divisor+1,f,c
  2922  002618  B0D8               	btfsc	status,0,c
  2923  00261A  2A04               	incf	___awmod@divisor+1,f,c
  2924  00261C                     l2120:
  2925  00261C  5003               	movf	___awmod@divisor,w,c
  2926  00261E  1004               	iorwf	___awmod@divisor+1,w,c
  2927  002620  B4D8               	btfsc	status,2,c
  2928  002622  D018               	goto	l2136
  2929  002624  0E01               	movlw	1
  2930  002626  6E05               	movwf	___awmod@counter,c
  2931  002628  D004               	goto	l2126
  2932  00262A                     l2124:
  2933  00262A  90D8               	bcf	status,0,c
  2934  00262C  3603               	rlcf	___awmod@divisor,f,c
  2935  00262E  3604               	rlcf	___awmod@divisor+1,f,c
  2936  002630  2A05               	incf	___awmod@counter,f,c
  2937  002632                     l2126:
  2938  002632  AE04               	btfss	___awmod@divisor+1,7,c
  2939  002634  D7FA               	goto	l2124
  2940  002636                     l2128:
  2941  002636  5003               	movf	___awmod@divisor,w,c
  2942  002638  5C01               	subwf	___awmod@dividend,w,c
  2943  00263A  5004               	movf	___awmod@divisor+1,w,c
  2944  00263C  5802               	subwfb	___awmod@dividend+1,w,c
  2945  00263E  A0D8               	btfss	status,0,c
  2946  002640  D004               	goto	l2132
  2947  002642  5003               	movf	___awmod@divisor,w,c
  2948  002644  5E01               	subwf	___awmod@dividend,f,c
  2949  002646  5004               	movf	___awmod@divisor+1,w,c
  2950  002648  5A02               	subwfb	___awmod@dividend+1,f,c
  2951  00264A                     l2132:
  2952  00264A  90D8               	bcf	status,0,c
  2953  00264C  3204               	rrcf	___awmod@divisor+1,f,c
  2954  00264E  3203               	rrcf	___awmod@divisor,f,c
  2955  002650  2E05               	decfsz	___awmod@counter,f,c
  2956  002652  D7F1               	goto	l2128
  2957  002654                     l2136:
  2958  002654  5006               	movf	___awmod@sign,w,c
  2959  002656  B4D8               	btfsc	status,2,c
  2960  002658  D004               	goto	l2140
  2961  00265A  6C01               	negf	___awmod@dividend,c
  2962  00265C  1E02               	comf	___awmod@dividend+1,f,c
  2963  00265E  B0D8               	btfsc	status,0,c
  2964  002660  2A02               	incf	___awmod@dividend+1,f,c
  2965  002662                     l2140:
  2966  002662  C001  F001         	movff	___awmod@dividend,?___awmod
  2967  002666  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2968  00266A  0012               	return	
  2969  00266C                     __end_of___awmod:
  2970                           	opt stack 0
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           tblptrl	equ	0xFF6
  2974                           tablat	equ	0xFF5
  2975                           prodh	equ	0xFF4
  2976                           prodl	equ	0xFF3
  2977                           wreg	equ	0xFE8
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function ___awdiv *****************
  2985 ;; Defined at:
  2986 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  dividend        2    6[COMRAM] int 
  2989 ;;  divisor         2    8[COMRAM] int 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  quotient        2   12[COMRAM] int 
  2992 ;;  sign            1   11[COMRAM] unsigned char 
  2993 ;;  counter         1   10[COMRAM] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  2    6[COMRAM] int 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3003 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;Total ram usage:        8 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; This function calls:
  3010 ;;		Nothing
  3011 ;; This function is called by:
  3012 ;;		_fround
  3013 ;;		_scale
  3014 ;;		_printf
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text9
  3019  00247E                     __ptext9:
  3020                           	opt stack 0
  3021  00247E                     ___awdiv:
  3022                           	opt stack 28
  3023                           
  3024                           ;incstack = 0
  3025  00247E  0E00               	movlw	0
  3026  002480  6E0C               	movwf	___awdiv@sign,c
  3027  002482  AE0A               	btfss	___awdiv@divisor+1,7,c
  3028  002484  D006               	goto	l2072
  3029  002486  6C09               	negf	___awdiv@divisor,c
  3030  002488  1E0A               	comf	___awdiv@divisor+1,f,c
  3031  00248A  B0D8               	btfsc	status,0,c
  3032  00248C  2A0A               	incf	___awdiv@divisor+1,f,c
  3033  00248E  0E01               	movlw	1
  3034  002490  6E0C               	movwf	___awdiv@sign,c
  3035  002492                     l2072:
  3036  002492  AE08               	btfss	___awdiv@dividend+1,7,c
  3037  002494  D006               	goto	l2078
  3038  002496  6C07               	negf	___awdiv@dividend,c
  3039  002498  1E08               	comf	___awdiv@dividend+1,f,c
  3040  00249A  B0D8               	btfsc	status,0,c
  3041  00249C  2A08               	incf	___awdiv@dividend+1,f,c
  3042  00249E  0E01               	movlw	1
  3043  0024A0  1A0C               	xorwf	___awdiv@sign,f,c
  3044  0024A2                     l2078:
  3045  0024A2  0E00               	movlw	0
  3046  0024A4  6E0E               	movwf	___awdiv@quotient+1,c
  3047  0024A6  0E00               	movlw	0
  3048  0024A8  6E0D               	movwf	___awdiv@quotient,c
  3049  0024AA  5009               	movf	___awdiv@divisor,w,c
  3050  0024AC  100A               	iorwf	___awdiv@divisor+1,w,c
  3051  0024AE  B4D8               	btfsc	status,2,c
  3052  0024B0  D01C               	goto	l2100
  3053  0024B2  0E01               	movlw	1
  3054  0024B4  6E0B               	movwf	___awdiv@counter,c
  3055  0024B6  D004               	goto	l2086
  3056  0024B8                     l2084:
  3057  0024B8  90D8               	bcf	status,0,c
  3058  0024BA  3609               	rlcf	___awdiv@divisor,f,c
  3059  0024BC  360A               	rlcf	___awdiv@divisor+1,f,c
  3060  0024BE  2A0B               	incf	___awdiv@counter,f,c
  3061  0024C0                     l2086:
  3062  0024C0  AE0A               	btfss	___awdiv@divisor+1,7,c
  3063  0024C2  D7FA               	goto	l2084
  3064  0024C4                     l2088:
  3065  0024C4  90D8               	bcf	status,0,c
  3066  0024C6  360D               	rlcf	___awdiv@quotient,f,c
  3067  0024C8  360E               	rlcf	___awdiv@quotient+1,f,c
  3068  0024CA  5009               	movf	___awdiv@divisor,w,c
  3069  0024CC  5C07               	subwf	___awdiv@dividend,w,c
  3070  0024CE  500A               	movf	___awdiv@divisor+1,w,c
  3071  0024D0  5808               	subwfb	___awdiv@dividend+1,w,c
  3072  0024D2  A0D8               	btfss	status,0,c
  3073  0024D4  D005               	goto	l2096
  3074  0024D6  5009               	movf	___awdiv@divisor,w,c
  3075  0024D8  5E07               	subwf	___awdiv@dividend,f,c
  3076  0024DA  500A               	movf	___awdiv@divisor+1,w,c
  3077  0024DC  5A08               	subwfb	___awdiv@dividend+1,f,c
  3078  0024DE  800D               	bsf	___awdiv@quotient,0,c
  3079  0024E0                     l2096:
  3080  0024E0  90D8               	bcf	status,0,c
  3081  0024E2  320A               	rrcf	___awdiv@divisor+1,f,c
  3082  0024E4  3209               	rrcf	___awdiv@divisor,f,c
  3083  0024E6  2E0B               	decfsz	___awdiv@counter,f,c
  3084  0024E8  D7ED               	goto	l2088
  3085  0024EA                     l2100:
  3086  0024EA  500C               	movf	___awdiv@sign,w,c
  3087  0024EC  B4D8               	btfsc	status,2,c
  3088  0024EE  D004               	goto	l2104
  3089  0024F0  6C0D               	negf	___awdiv@quotient,c
  3090  0024F2  1E0E               	comf	___awdiv@quotient+1,f,c
  3091  0024F4  B0D8               	btfsc	status,0,c
  3092  0024F6  2A0E               	incf	___awdiv@quotient+1,f,c
  3093  0024F8                     l2104:
  3094  0024F8  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3095  0024FC  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3096  002500  0012               	return	
  3097  002502                     __end_of___awdiv:
  3098                           	opt stack 0
  3099                           tblptru	equ	0xFF8
  3100                           tblptrh	equ	0xFF7
  3101                           tblptrl	equ	0xFF6
  3102                           tablat	equ	0xFF5
  3103                           prodh	equ	0xFF4
  3104                           prodl	equ	0xFF3
  3105                           wreg	equ	0xFE8
  3106                           postinc2	equ	0xFDE
  3107                           postdec2	equ	0xFDD
  3108                           fsr2h	equ	0xFDA
  3109                           fsr2l	equ	0xFD9
  3110                           status	equ	0xFD8
  3111                           
  3112 ;; *************** function __tdiv_to_l_ *****************
  3113 ;; Defined at:
  3114 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;  f1              3    0[COMRAM] float 
  3117 ;;  f2              3    3[COMRAM] float 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  quot            4    9[COMRAM] unsigned long 
  3120 ;;  exp1            1   14[COMRAM] unsigned char 
  3121 ;;  cntr            1   13[COMRAM] unsigned char 
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  4    0[COMRAM] unsigned long 
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, status,0
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3131 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;Total ram usage:       15 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; This function calls:
  3138 ;;		Nothing
  3139 ;; This function is called by:
  3140 ;;		_printf
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text10
  3145  001E32                     __ptext10:
  3146                           	opt stack 0
  3147  001E32                     __tdiv_to_l_:
  3148                           	opt stack 29
  3149                           
  3150                           ;incstack = 0
  3151  001E32  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3152  001E36  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3153  001E38  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3154  001E3A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3155  001E3C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3156  001E3E  E301               	bnc	u1931
  3157  001E40  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3158  001E42                     u1931:
  3159  001E42  5007               	movf	??__tdiv_to_l_,w,c
  3160  001E44  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3161  001E46  500F               	movf	__tdiv_to_l_@exp1,w,c
  3162  001E48  A4D8               	btfss	status,2,c
  3163  001E4A  D009               	goto	l2218
  3164  001E4C  0E00               	movlw	0
  3165  001E4E  6E01               	movwf	?__tdiv_to_l_,c
  3166  001E50  0E00               	movlw	0
  3167  001E52  6E02               	movwf	?__tdiv_to_l_+1,c
  3168  001E54  0E00               	movlw	0
  3169  001E56  6E03               	movwf	?__tdiv_to_l_+2,c
  3170  001E58  0E00               	movlw	0
  3171  001E5A  6E04               	movwf	?__tdiv_to_l_+3,c
  3172  001E5C  0012               	return	
  3173  001E5E                     l2218:
  3174  001E5E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3175  001E62  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3176  001E64  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3177  001E66  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3178  001E68  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3179  001E6A  E301               	bnc	u1951
  3180  001E6C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3181  001E6E                     u1951:
  3182  001E6E  5007               	movf	??__tdiv_to_l_,w,c
  3183  001E70  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3184  001E72  500E               	movf	__tdiv_to_l_@cntr,w,c
  3185  001E74  A4D8               	btfss	status,2,c
  3186  001E76  D009               	goto	l2224
  3187  001E78  0E00               	movlw	0
  3188  001E7A  6E01               	movwf	?__tdiv_to_l_,c
  3189  001E7C  0E00               	movlw	0
  3190  001E7E  6E02               	movwf	?__tdiv_to_l_+1,c
  3191  001E80  0E00               	movlw	0
  3192  001E82  6E03               	movwf	?__tdiv_to_l_+2,c
  3193  001E84  0E00               	movlw	0
  3194  001E86  6E04               	movwf	?__tdiv_to_l_+3,c
  3195  001E88  0012               	return	
  3196  001E8A                     l2224:
  3197  001E8A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3198  001E8C  0EFF               	movlw	255
  3199  001E8E  1601               	andwf	__tdiv_to_l_@f1,f,c
  3200  001E90  0EFF               	movlw	255
  3201  001E92  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3202  001E94  0E00               	movlw	0
  3203  001E96  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3204  001E98  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3205  001E9A  0EFF               	movlw	255
  3206  001E9C  1604               	andwf	__tdiv_to_l_@f2,f,c
  3207  001E9E  0EFF               	movlw	255
  3208  001EA0  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3209  001EA2  0E00               	movlw	0
  3210  001EA4  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3211  001EA6  0E00               	movlw	0
  3212  001EA8  6E0A               	movwf	__tdiv_to_l_@quot,c
  3213  001EAA  0E00               	movlw	0
  3214  001EAC  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3215  001EAE  0E00               	movlw	0
  3216  001EB0  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3217  001EB2  0E00               	movlw	0
  3218  001EB4  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3219  001EB6  0E7F               	movlw	127
  3220  001EB8  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3221  001EBA  500E               	movf	__tdiv_to_l_@cntr,w,c
  3222  001EBC  0F98               	addlw	152
  3223  001EBE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3224  001EC0  0E18               	movlw	24
  3225  001EC2  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3226  001EC4                     l585:
  3227  001EC4  90D8               	bcf	status,0,c
  3228  001EC6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3229  001EC8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3230  001ECA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3231  001ECC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3232  001ECE  5004               	movf	__tdiv_to_l_@f2,w,c
  3233  001ED0  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3234  001ED2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3235  001ED4  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3236  001ED6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3237  001ED8  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3238  001EDA  A0D8               	btfss	status,0,c
  3239  001EDC  D007               	goto	l586
  3240  001EDE  5004               	movf	__tdiv_to_l_@f2,w,c
  3241  001EE0  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3242  001EE2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3243  001EE4  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3244  001EE6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3245  001EE8  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3246  001EEA  800A               	bsf	__tdiv_to_l_@quot,0,c
  3247  001EEC                     l586:
  3248  001EEC  90D8               	bcf	status,0,c
  3249  001EEE  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3250  001EF0  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3251  001EF2  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3252  001EF4  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3253  001EF6  D7E6               	goto	l585
  3254  001EF8  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3255  001EFA  D016               	goto	l2258
  3256  001EFC  500F               	movf	__tdiv_to_l_@exp1,w,c
  3257  001EFE  0A80               	xorlw	128
  3258  001F00  0F97               	addlw	151
  3259  001F02  B0D8               	btfsc	status,0,c
  3260  001F04  D009               	goto	l2254
  3261  001F06  0E00               	movlw	0
  3262  001F08  6E01               	movwf	?__tdiv_to_l_,c
  3263  001F0A  0E00               	movlw	0
  3264  001F0C  6E02               	movwf	?__tdiv_to_l_+1,c
  3265  001F0E  0E00               	movlw	0
  3266  001F10  6E03               	movwf	?__tdiv_to_l_+2,c
  3267  001F12  0E00               	movlw	0
  3268  001F14  6E04               	movwf	?__tdiv_to_l_+3,c
  3269  001F16  0012               	return	
  3270  001F18                     l2254:
  3271  001F18  90D8               	bcf	status,0,c
  3272  001F1A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3273  001F1C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3274  001F1E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3275  001F20  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3276  001F22  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3277  001F24  D7F9               	goto	l2254
  3278  001F26  D015               	goto	l592
  3279  001F28                     l2258:
  3280  001F28  0E17               	movlw	23
  3281  001F2A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3282  001F2C  D00F               	goto	l2266
  3283  001F2E  0E00               	movlw	0
  3284  001F30  6E01               	movwf	?__tdiv_to_l_,c
  3285  001F32  0E00               	movlw	0
  3286  001F34  6E02               	movwf	?__tdiv_to_l_+1,c
  3287  001F36  0E00               	movlw	0
  3288  001F38  6E03               	movwf	?__tdiv_to_l_+2,c
  3289  001F3A  0E00               	movlw	0
  3290  001F3C  6E04               	movwf	?__tdiv_to_l_+3,c
  3291  001F3E  0012               	return	
  3292  001F40                     l2264:
  3293  001F40  90D8               	bcf	status,0,c
  3294  001F42  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3295  001F44  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3296  001F46  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3297  001F48  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3298  001F4A  060F               	decf	__tdiv_to_l_@exp1,f,c
  3299  001F4C                     l2266:
  3300  001F4C  500F               	movf	__tdiv_to_l_@exp1,w,c
  3301  001F4E  A4D8               	btfss	status,2,c
  3302  001F50  D7F7               	goto	l2264
  3303  001F52                     l592:
  3304  001F52  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3305  001F56  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3306  001F5A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3307  001F5E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3308  001F62  0012               	return		;funcret
  3309  001F64                     __end_of__tdiv_to_l_:
  3310                           	opt stack 0
  3311                           tblptru	equ	0xFF8
  3312                           tblptrh	equ	0xFF7
  3313                           tblptrl	equ	0xFF6
  3314                           tablat	equ	0xFF5
  3315                           prodh	equ	0xFF4
  3316                           prodl	equ	0xFF3
  3317                           wreg	equ	0xFE8
  3318                           postinc2	equ	0xFDE
  3319                           postdec2	equ	0xFDD
  3320                           fsr2h	equ	0xFDA
  3321                           fsr2l	equ	0xFD9
  3322                           status	equ	0xFD8
  3323                           
  3324 ;; *************** function __div_to_l_ *****************
  3325 ;; Defined at:
  3326 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  f1              3    0[COMRAM] unsigned long 
  3329 ;;  f2              3    3[COMRAM] unsigned long 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;  quot            4    6[COMRAM] unsigned long 
  3332 ;;  exp1            1   11[COMRAM] unsigned char 
  3333 ;;  cntr            1   10[COMRAM] unsigned char 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  4    0[COMRAM] unsigned long 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3343 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;Total ram usage:       12 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; This function calls:
  3350 ;;		Nothing
  3351 ;; This function is called by:
  3352 ;;		_printf
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           	psect	text11
  3357  001F64                     __ptext11:
  3358                           	opt stack 0
  3359  001F64                     __div_to_l_:
  3360                           	opt stack 29
  3361                           
  3362                           ;incstack = 0
  3363  001F64  3403               	rlcf	__div_to_l_@f1+2,w,c
  3364  001F66  3404               	rlcf	__div_to_l_@f1+3,w,c
  3365  001F68  6E0C               	movwf	__div_to_l_@exp1,c
  3366  001F6A  500C               	movf	__div_to_l_@exp1,w,c
  3367  001F6C  A4D8               	btfss	status,2,c
  3368  001F6E  D009               	goto	l2274
  3369  001F70  0E00               	movlw	0
  3370  001F72  6E01               	movwf	?__div_to_l_,c
  3371  001F74  0E00               	movlw	0
  3372  001F76  6E02               	movwf	?__div_to_l_+1,c
  3373  001F78  0E00               	movlw	0
  3374  001F7A  6E03               	movwf	?__div_to_l_+2,c
  3375  001F7C  0E00               	movlw	0
  3376  001F7E  6E04               	movwf	?__div_to_l_+3,c
  3377  001F80  0012               	return	
  3378  001F82                     l2274:
  3379  001F82  3406               	rlcf	__div_to_l_@f2+2,w,c
  3380  001F84  3407               	rlcf	__div_to_l_@f2+3,w,c
  3381  001F86  6E0B               	movwf	__div_to_l_@cntr,c
  3382  001F88  500B               	movf	__div_to_l_@cntr,w,c
  3383  001F8A  A4D8               	btfss	status,2,c
  3384  001F8C  D009               	goto	l2280
  3385  001F8E  0E00               	movlw	0
  3386  001F90  6E01               	movwf	?__div_to_l_,c
  3387  001F92  0E00               	movlw	0
  3388  001F94  6E02               	movwf	?__div_to_l_+1,c
  3389  001F96  0E00               	movlw	0
  3390  001F98  6E03               	movwf	?__div_to_l_+2,c
  3391  001F9A  0E00               	movlw	0
  3392  001F9C  6E04               	movwf	?__div_to_l_+3,c
  3393  001F9E  0012               	return	
  3394  001FA0                     l2280:
  3395  001FA0  8E03               	bsf	__div_to_l_@f1+2,7,c
  3396  001FA2  0EFF               	movlw	255
  3397  001FA4  1601               	andwf	__div_to_l_@f1,f,c
  3398  001FA6  0EFF               	movlw	255
  3399  001FA8  1602               	andwf	__div_to_l_@f1+1,f,c
  3400  001FAA  0EFF               	movlw	255
  3401  001FAC  1603               	andwf	__div_to_l_@f1+2,f,c
  3402  001FAE  0E00               	movlw	0
  3403  001FB0  1604               	andwf	__div_to_l_@f1+3,f,c
  3404  001FB2  8E06               	bsf	__div_to_l_@f2+2,7,c
  3405  001FB4  0EFF               	movlw	255
  3406  001FB6  1604               	andwf	__div_to_l_@f2,f,c
  3407  001FB8  0EFF               	movlw	255
  3408  001FBA  1605               	andwf	__div_to_l_@f2+1,f,c
  3409  001FBC  0EFF               	movlw	255
  3410  001FBE  1606               	andwf	__div_to_l_@f2+2,f,c
  3411  001FC0  0E00               	movlw	0
  3412  001FC2  1607               	andwf	__div_to_l_@f2+3,f,c
  3413  001FC4  0E00               	movlw	0
  3414  001FC6  6E07               	movwf	__div_to_l_@quot,c
  3415  001FC8  0E00               	movlw	0
  3416  001FCA  6E08               	movwf	__div_to_l_@quot+1,c
  3417  001FCC  0E00               	movlw	0
  3418  001FCE  6E09               	movwf	__div_to_l_@quot+2,c
  3419  001FD0  0E00               	movlw	0
  3420  001FD2  6E0A               	movwf	__div_to_l_@quot+3,c
  3421  001FD4  0E7F               	movlw	127
  3422  001FD6  5E0C               	subwf	__div_to_l_@exp1,f,c
  3423  001FD8  500B               	movf	__div_to_l_@cntr,w,c
  3424  001FDA  0FA0               	addlw	160
  3425  001FDC  5E0C               	subwf	__div_to_l_@exp1,f,c
  3426  001FDE  0E20               	movlw	32
  3427  001FE0  6E0B               	movwf	__div_to_l_@cntr,c
  3428  001FE2                     l2294:
  3429  001FE2  90D8               	bcf	status,0,c
  3430  001FE4  3607               	rlcf	__div_to_l_@quot,f,c
  3431  001FE6  3608               	rlcf	__div_to_l_@quot+1,f,c
  3432  001FE8  3609               	rlcf	__div_to_l_@quot+2,f,c
  3433  001FEA  360A               	rlcf	__div_to_l_@quot+3,f,c
  3434  001FEC  5004               	movf	__div_to_l_@f2,w,c
  3435  001FEE  5C01               	subwf	__div_to_l_@f1,w,c
  3436  001FF0  5005               	movf	__div_to_l_@f2+1,w,c
  3437  001FF2  5802               	subwfb	__div_to_l_@f1+1,w,c
  3438  001FF4  5006               	movf	__div_to_l_@f2+2,w,c
  3439  001FF6  5803               	subwfb	__div_to_l_@f1+2,w,c
  3440  001FF8  5007               	movf	__div_to_l_@f2+3,w,c
  3441  001FFA  5804               	subwfb	__div_to_l_@f1+3,w,c
  3442  001FFC  A0D8               	btfss	status,0,c
  3443  001FFE  D009               	goto	l2302
  3444  002000  5004               	movf	__div_to_l_@f2,w,c
  3445  002002  5E01               	subwf	__div_to_l_@f1,f,c
  3446  002004  5005               	movf	__div_to_l_@f2+1,w,c
  3447  002006  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3448  002008  5006               	movf	__div_to_l_@f2+2,w,c
  3449  00200A  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3450  00200C  5007               	movf	__div_to_l_@f2+3,w,c
  3451  00200E  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3452  002010  8007               	bsf	__div_to_l_@quot,0,c
  3453  002012                     l2302:
  3454  002012  90D8               	bcf	status,0,c
  3455  002014  3601               	rlcf	__div_to_l_@f1,f,c
  3456  002016  3602               	rlcf	__div_to_l_@f1+1,f,c
  3457  002018  3603               	rlcf	__div_to_l_@f1+2,f,c
  3458  00201A  3604               	rlcf	__div_to_l_@f1+3,f,c
  3459  00201C  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3460  00201E  D7E1               	goto	l2294
  3461  002020  AE0C               	btfss	__div_to_l_@exp1,7,c
  3462  002022  D016               	goto	l2318
  3463  002024  500C               	movf	__div_to_l_@exp1,w,c
  3464  002026  0A80               	xorlw	128
  3465  002028  0F9F               	addlw	159
  3466  00202A  B0D8               	btfsc	status,0,c
  3467  00202C  D009               	goto	l2314
  3468  00202E  0E00               	movlw	0
  3469  002030  6E01               	movwf	?__div_to_l_,c
  3470  002032  0E00               	movlw	0
  3471  002034  6E02               	movwf	?__div_to_l_+1,c
  3472  002036  0E00               	movlw	0
  3473  002038  6E03               	movwf	?__div_to_l_+2,c
  3474  00203A  0E00               	movlw	0
  3475  00203C  6E04               	movwf	?__div_to_l_+3,c
  3476  00203E  0012               	return	
  3477  002040                     l2314:
  3478  002040  90D8               	bcf	status,0,c
  3479  002042  320A               	rrcf	__div_to_l_@quot+3,f,c
  3480  002044  3209               	rrcf	__div_to_l_@quot+2,f,c
  3481  002046  3208               	rrcf	__div_to_l_@quot+1,f,c
  3482  002048  3207               	rrcf	__div_to_l_@quot,f,c
  3483  00204A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3484  00204C  D7F9               	goto	l2314
  3485  00204E  D015               	goto	l488
  3486  002050                     l2318:
  3487  002050  0E1F               	movlw	31
  3488  002052  640C               	cpfsgt	__div_to_l_@exp1,c
  3489  002054  D00F               	goto	l2326
  3490  002056  0E00               	movlw	0
  3491  002058  6E01               	movwf	?__div_to_l_,c
  3492  00205A  0E00               	movlw	0
  3493  00205C  6E02               	movwf	?__div_to_l_+1,c
  3494  00205E  0E00               	movlw	0
  3495  002060  6E03               	movwf	?__div_to_l_+2,c
  3496  002062  0E00               	movlw	0
  3497  002064  6E04               	movwf	?__div_to_l_+3,c
  3498  002066  0012               	return	
  3499  002068                     l2324:
  3500  002068  90D8               	bcf	status,0,c
  3501  00206A  3607               	rlcf	__div_to_l_@quot,f,c
  3502  00206C  3608               	rlcf	__div_to_l_@quot+1,f,c
  3503  00206E  3609               	rlcf	__div_to_l_@quot+2,f,c
  3504  002070  360A               	rlcf	__div_to_l_@quot+3,f,c
  3505  002072  060C               	decf	__div_to_l_@exp1,f,c
  3506  002074                     l2326:
  3507  002074  500C               	movf	__div_to_l_@exp1,w,c
  3508  002076  A4D8               	btfss	status,2,c
  3509  002078  D7F7               	goto	l2324
  3510  00207A                     l488:
  3511  00207A  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3512  00207E  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3513  002082  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3514  002086  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3515  00208A  0012               	return		;funcret
  3516  00208C                     __end_of__div_to_l_:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           wreg	equ	0xFE8
  3525                           postinc2	equ	0xFDE
  3526                           postdec2	equ	0xFDD
  3527                           fsr2h	equ	0xFDA
  3528                           fsr2l	equ	0xFD9
  3529                           status	equ	0xFD8
  3530                           
  3531 ;; *************** function ___lltoft *****************
  3532 ;; Defined at:
  3533 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  c               4    8[COMRAM] unsigned long 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  exp             1   16[COMRAM] unsigned char 
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  3    8[COMRAM] float 
  3540 ;; Registers used:
  3541 ;;		wreg, status,2, status,0, cstack
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3547 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3549 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;Total ram usage:        9 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; Hardware stack levels required when called:    1
  3554 ;; This function calls:
  3555 ;;		___ftpack
  3556 ;; This function is called by:
  3557 ;;		_printf
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           	psect	text12
  3562  0026D2                     __ptext12:
  3563                           	opt stack 0
  3564  0026D2                     ___lltoft:
  3565                           	opt stack 28
  3566                           
  3567                           ;incstack = 0
  3568  0026D2  0E8E               	movlw	142
  3569  0026D4  6E11               	movwf	___lltoft@exp,c
  3570  0026D6  D006               	goto	l2446
  3571  0026D8                     l2444:
  3572  0026D8  90D8               	bcf	status,0,c
  3573  0026DA  320C               	rrcf	___lltoft@c+3,f,c
  3574  0026DC  320B               	rrcf	___lltoft@c+2,f,c
  3575  0026DE  320A               	rrcf	___lltoft@c+1,f,c
  3576  0026E0  3209               	rrcf	___lltoft@c,f,c
  3577  0026E2  2A11               	incf	___lltoft@exp,f,c
  3578  0026E4                     l2446:
  3579  0026E4  0E00               	movlw	0
  3580  0026E6  1409               	andwf	___lltoft@c,w,c
  3581  0026E8  6E0D               	movwf	??___lltoft& (0+255),c
  3582  0026EA  0E00               	movlw	0
  3583  0026EC  140A               	andwf	___lltoft@c+1,w,c
  3584  0026EE  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3585  0026F0  0E00               	movlw	0
  3586  0026F2  140B               	andwf	___lltoft@c+2,w,c
  3587  0026F4  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3588  0026F6  0EFF               	movlw	255
  3589  0026F8  140C               	andwf	___lltoft@c+3,w,c
  3590  0026FA  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3591  0026FC  500D               	movf	??___lltoft,w,c
  3592  0026FE  100E               	iorwf	??___lltoft+1,w,c
  3593  002700  100F               	iorwf	??___lltoft+2,w,c
  3594  002702  1010               	iorwf	??___lltoft+3,w,c
  3595  002704  A4D8               	btfss	status,2,c
  3596  002706  D7E8               	goto	l2444
  3597  002708  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3598  00270C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3599  002710  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3600  002714  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3601  002718  0E00               	movlw	0
  3602  00271A  6E05               	movwf	___ftpack@sign,c
  3603  00271C  ECA0  F011         	call	___ftpack	;wreg free
  3604  002720  C001  F009         	movff	?___ftpack,?___lltoft
  3605  002724  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3606  002728  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3607  00272C  0012               	return	
  3608  00272E                     __end_of___lltoft:
  3609                           	opt stack 0
  3610                           tblptru	equ	0xFF8
  3611                           tblptrh	equ	0xFF7
  3612                           tblptrl	equ	0xFF6
  3613                           tablat	equ	0xFF5
  3614                           prodh	equ	0xFF4
  3615                           prodl	equ	0xFF3
  3616                           wreg	equ	0xFE8
  3617                           postinc2	equ	0xFDE
  3618                           postdec2	equ	0xFDD
  3619                           fsr2h	equ	0xFDA
  3620                           fsr2l	equ	0xFD9
  3621                           status	equ	0xFD8
  3622                           
  3623 ;; *************** function ___llmod *****************
  3624 ;; Defined at:
  3625 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  dividend        4    0[COMRAM] unsigned long 
  3628 ;;  divisor         4    4[COMRAM] unsigned long 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  counter         1    8[COMRAM] unsigned char 
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  4    0[COMRAM] unsigned long 
  3633 ;; Registers used:
  3634 ;;		wreg, status,2, status,0
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3640 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;Total ram usage:        9 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; This function calls:
  3647 ;;		Nothing
  3648 ;; This function is called by:
  3649 ;;		_printf
  3650 ;; This function uses a non-reentrant model
  3651 ;;
  3652                           
  3653                           	psect	text13
  3654  00266C                     __ptext13:
  3655                           	opt stack 0
  3656  00266C                     ___llmod:
  3657                           	opt stack 29
  3658                           
  3659                           ;incstack = 0
  3660  00266C  5005               	movf	___llmod@divisor,w,c
  3661  00266E  1006               	iorwf	___llmod@divisor+1,w,c
  3662  002670  1007               	iorwf	___llmod@divisor+2,w,c
  3663  002672  1008               	iorwf	___llmod@divisor+3,w,c
  3664  002674  B4D8               	btfsc	status,2,c
  3665  002676  D024               	goto	l672
  3666  002678  0E01               	movlw	1
  3667  00267A  6E09               	movwf	___llmod@counter,c
  3668  00267C  D006               	goto	l2432
  3669  00267E                     l2430:
  3670  00267E  90D8               	bcf	status,0,c
  3671  002680  3605               	rlcf	___llmod@divisor,f,c
  3672  002682  3606               	rlcf	___llmod@divisor+1,f,c
  3673  002684  3607               	rlcf	___llmod@divisor+2,f,c
  3674  002686  3608               	rlcf	___llmod@divisor+3,f,c
  3675  002688  2A09               	incf	___llmod@counter,f,c
  3676  00268A                     l2432:
  3677  00268A  AE08               	btfss	___llmod@divisor+3,7,c
  3678  00268C  D7F8               	goto	l2430
  3679  00268E                     l2434:
  3680  00268E  5005               	movf	___llmod@divisor,w,c
  3681  002690  5C01               	subwf	___llmod@dividend,w,c
  3682  002692  5006               	movf	___llmod@divisor+1,w,c
  3683  002694  5802               	subwfb	___llmod@dividend+1,w,c
  3684  002696  5007               	movf	___llmod@divisor+2,w,c
  3685  002698  5803               	subwfb	___llmod@dividend+2,w,c
  3686  00269A  5008               	movf	___llmod@divisor+3,w,c
  3687  00269C  5804               	subwfb	___llmod@dividend+3,w,c
  3688  00269E  A0D8               	btfss	status,0,c
  3689  0026A0  D008               	goto	l2438
  3690  0026A2  5005               	movf	___llmod@divisor,w,c
  3691  0026A4  5E01               	subwf	___llmod@dividend,f,c
  3692  0026A6  5006               	movf	___llmod@divisor+1,w,c
  3693  0026A8  5A02               	subwfb	___llmod@dividend+1,f,c
  3694  0026AA  5007               	movf	___llmod@divisor+2,w,c
  3695  0026AC  5A03               	subwfb	___llmod@dividend+2,f,c
  3696  0026AE  5008               	movf	___llmod@divisor+3,w,c
  3697  0026B0  5A04               	subwfb	___llmod@dividend+3,f,c
  3698  0026B2                     l2438:
  3699  0026B2  90D8               	bcf	status,0,c
  3700  0026B4  3208               	rrcf	___llmod@divisor+3,f,c
  3701  0026B6  3207               	rrcf	___llmod@divisor+2,f,c
  3702  0026B8  3206               	rrcf	___llmod@divisor+1,f,c
  3703  0026BA  3205               	rrcf	___llmod@divisor,f,c
  3704  0026BC  2E09               	decfsz	___llmod@counter,f,c
  3705  0026BE  D7E7               	goto	l2434
  3706  0026C0                     l672:
  3707  0026C0  C001  F001         	movff	___llmod@dividend,?___llmod
  3708  0026C4  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3709  0026C8  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3710  0026CC  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3711  0026D0  0012               	return		;funcret
  3712  0026D2                     __end_of___llmod:
  3713                           	opt stack 0
  3714                           tblptru	equ	0xFF8
  3715                           tblptrh	equ	0xFF7
  3716                           tblptrl	equ	0xFF6
  3717                           tablat	equ	0xFF5
  3718                           prodh	equ	0xFF4
  3719                           prodl	equ	0xFF3
  3720                           wreg	equ	0xFE8
  3721                           postinc2	equ	0xFDE
  3722                           postdec2	equ	0xFDD
  3723                           fsr2h	equ	0xFDA
  3724                           fsr2l	equ	0xFD9
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function ___lldiv *****************
  3728 ;; Defined at:
  3729 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;  dividend        4    0[COMRAM] unsigned long 
  3732 ;;  divisor         4    4[COMRAM] unsigned long 
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  quotient        4    8[COMRAM] unsigned long 
  3735 ;;  counter         1   12[COMRAM] unsigned char 
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  4    0[COMRAM] unsigned long 
  3738 ;; Registers used:
  3739 ;;		wreg, status,2, status,0
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3745 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;Total ram usage:       13 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_printf
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text14
  3759  002502                     __ptext14:
  3760                           	opt stack 0
  3761  002502                     ___lldiv:
  3762                           	opt stack 29
  3763                           
  3764                           ;incstack = 0
  3765  002502  0E00               	movlw	0
  3766  002504  6E09               	movwf	___lldiv@quotient,c
  3767  002506  0E00               	movlw	0
  3768  002508  6E0A               	movwf	___lldiv@quotient+1,c
  3769  00250A  0E00               	movlw	0
  3770  00250C  6E0B               	movwf	___lldiv@quotient+2,c
  3771  00250E  0E00               	movlw	0
  3772  002510  6E0C               	movwf	___lldiv@quotient+3,c
  3773  002512  5005               	movf	___lldiv@divisor,w,c
  3774  002514  1006               	iorwf	___lldiv@divisor+1,w,c
  3775  002516  1007               	iorwf	___lldiv@divisor+2,w,c
  3776  002518  1008               	iorwf	___lldiv@divisor+3,w,c
  3777  00251A  B4D8               	btfsc	status,2,c
  3778  00251C  D02A               	goto	l662
  3779  00251E  0E01               	movlw	1
  3780  002520  6E0D               	movwf	___lldiv@counter,c
  3781  002522  D006               	goto	l2412
  3782  002524                     l2410:
  3783  002524  90D8               	bcf	status,0,c
  3784  002526  3605               	rlcf	___lldiv@divisor,f,c
  3785  002528  3606               	rlcf	___lldiv@divisor+1,f,c
  3786  00252A  3607               	rlcf	___lldiv@divisor+2,f,c
  3787  00252C  3608               	rlcf	___lldiv@divisor+3,f,c
  3788  00252E  2A0D               	incf	___lldiv@counter,f,c
  3789  002530                     l2412:
  3790  002530  AE08               	btfss	___lldiv@divisor+3,7,c
  3791  002532  D7F8               	goto	l2410
  3792  002534                     l2414:
  3793  002534  90D8               	bcf	status,0,c
  3794  002536  3609               	rlcf	___lldiv@quotient,f,c
  3795  002538  360A               	rlcf	___lldiv@quotient+1,f,c
  3796  00253A  360B               	rlcf	___lldiv@quotient+2,f,c
  3797  00253C  360C               	rlcf	___lldiv@quotient+3,f,c
  3798  00253E  5005               	movf	___lldiv@divisor,w,c
  3799  002540  5C01               	subwf	___lldiv@dividend,w,c
  3800  002542  5006               	movf	___lldiv@divisor+1,w,c
  3801  002544  5802               	subwfb	___lldiv@dividend+1,w,c
  3802  002546  5007               	movf	___lldiv@divisor+2,w,c
  3803  002548  5803               	subwfb	___lldiv@dividend+2,w,c
  3804  00254A  5008               	movf	___lldiv@divisor+3,w,c
  3805  00254C  5804               	subwfb	___lldiv@dividend+3,w,c
  3806  00254E  A0D8               	btfss	status,0,c
  3807  002550  D009               	goto	l2422
  3808  002552  5005               	movf	___lldiv@divisor,w,c
  3809  002554  5E01               	subwf	___lldiv@dividend,f,c
  3810  002556  5006               	movf	___lldiv@divisor+1,w,c
  3811  002558  5A02               	subwfb	___lldiv@dividend+1,f,c
  3812  00255A  5007               	movf	___lldiv@divisor+2,w,c
  3813  00255C  5A03               	subwfb	___lldiv@dividend+2,f,c
  3814  00255E  5008               	movf	___lldiv@divisor+3,w,c
  3815  002560  5A04               	subwfb	___lldiv@dividend+3,f,c
  3816  002562  8009               	bsf	___lldiv@quotient,0,c
  3817  002564                     l2422:
  3818  002564  90D8               	bcf	status,0,c
  3819  002566  3208               	rrcf	___lldiv@divisor+3,f,c
  3820  002568  3207               	rrcf	___lldiv@divisor+2,f,c
  3821  00256A  3206               	rrcf	___lldiv@divisor+1,f,c
  3822  00256C  3205               	rrcf	___lldiv@divisor,f,c
  3823  00256E  2E0D               	decfsz	___lldiv@counter,f,c
  3824  002570  D7E1               	goto	l2414
  3825  002572                     l662:
  3826  002572  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3827  002576  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3828  00257A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3829  00257E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3830  002582  0012               	return		;funcret
  3831  002584                     __end_of___lldiv:
  3832                           	opt stack 0
  3833                           tblptru	equ	0xFF8
  3834                           tblptrh	equ	0xFF7
  3835                           tblptrl	equ	0xFF6
  3836                           tablat	equ	0xFF5
  3837                           prodh	equ	0xFF4
  3838                           prodl	equ	0xFF3
  3839                           wreg	equ	0xFE8
  3840                           postinc2	equ	0xFDE
  3841                           postdec2	equ	0xFDD
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function ___fttol *****************
  3847 ;; Defined at:
  3848 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  f1              3   42[COMRAM] float 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  lval            4   52[COMRAM] unsigned long 
  3853 ;;  exp1            1   56[COMRAM] unsigned char 
  3854 ;;  sign1           1   51[COMRAM] unsigned char 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  4   42[COMRAM] long 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3864 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;Total ram usage:       15 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_printf
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text15
  3878  002180                     __ptext15:
  3879                           	opt stack 0
  3880  002180                     ___fttol:
  3881                           	opt stack 29
  3882                           
  3883                           ;incstack = 0
  3884  002180  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  3885  002184  6A30               	clrf	(??___fttol+1)& (0+255),c
  3886  002186  6A31               	clrf	(??___fttol+2)& (0+255),c
  3887  002188  342C               	rlcf	___fttol@f1+1,w,c
  3888  00218A  362F               	rlcf	??___fttol& (0+255),f,c
  3889  00218C  E301               	bnc	u2141
  3890  00218E  8030               	bsf	(??___fttol+1)& (0+255),0,c
  3891  002190                     u2141:
  3892  002190  502F               	movf	??___fttol,w,c
  3893  002192  6E39               	movwf	___fttol@exp1,c
  3894  002194  5039               	movf	___fttol@exp1,w,c
  3895  002196  A4D8               	btfss	status,2,c
  3896  002198  D009               	goto	l2364
  3897  00219A  0E00               	movlw	0
  3898  00219C  6E2B               	movwf	?___fttol,c
  3899  00219E  0E00               	movlw	0
  3900  0021A0  6E2C               	movwf	?___fttol+1,c
  3901  0021A2  0E00               	movlw	0
  3902  0021A4  6E2D               	movwf	?___fttol+2,c
  3903  0021A6  0E00               	movlw	0
  3904  0021A8  6E2E               	movwf	?___fttol+3,c
  3905  0021AA  0012               	return	
  3906  0021AC                     l2364:
  3907  0021AC  0E17               	movlw	23
  3908  0021AE  6E2F               	movwf	??___fttol& (0+255),c
  3909  0021B0  C02B  F030         	movff	___fttol@f1,??___fttol+1
  3910  0021B4  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  3911  0021B8  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  3912  0021BC  282F               	incf	??___fttol,w,c
  3913  0021BE  6E33               	movwf	(??___fttol+4)& (0+255),c
  3914  0021C0  D004               	goto	u2160
  3915  0021C2                     u2165:
  3916  0021C2  90D8               	bcf	status,0,c
  3917  0021C4  3232               	rrcf	??___fttol+3,f,c
  3918  0021C6  3231               	rrcf	??___fttol+2,f,c
  3919  0021C8  3230               	rrcf	??___fttol+1,f,c
  3920  0021CA                     u2160:
  3921  0021CA  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  3922  0021CC  D7FA               	goto	u2165
  3923  0021CE  5030               	movf	??___fttol+1,w,c
  3924  0021D0  6E34               	movwf	___fttol@sign1,c
  3925  0021D2  8E2C               	bsf	___fttol@f1+1,7,c
  3926  0021D4  0EFF               	movlw	255
  3927  0021D6  162B               	andwf	___fttol@f1,f,c
  3928  0021D8  0EFF               	movlw	255
  3929  0021DA  162C               	andwf	___fttol@f1+1,f,c
  3930  0021DC  0E00               	movlw	0
  3931  0021DE  162D               	andwf	___fttol@f1+2,f,c
  3932  0021E0  502B               	movf	___fttol@f1,w,c
  3933  0021E2  6E35               	movwf	___fttol@lval,c
  3934  0021E4  502C               	movf	___fttol@f1+1,w,c
  3935  0021E6  6E36               	movwf	___fttol@lval+1,c
  3936  0021E8  502D               	movf	___fttol@f1+2,w,c
  3937  0021EA  6E37               	movwf	___fttol@lval+2,c
  3938  0021EC  6A38               	clrf	___fttol@lval+3,c
  3939  0021EE  0E8E               	movlw	142
  3940  0021F0  5E39               	subwf	___fttol@exp1,f,c
  3941  0021F2  AE39               	btfss	___fttol@exp1,7,c
  3942  0021F4  D016               	goto	l2386
  3943  0021F6  5039               	movf	___fttol@exp1,w,c
  3944  0021F8  0A80               	xorlw	128
  3945  0021FA  0F8F               	addlw	143
  3946  0021FC  B0D8               	btfsc	status,0,c
  3947  0021FE  D009               	goto	l2382
  3948  002200  0E00               	movlw	0
  3949  002202  6E2B               	movwf	?___fttol,c
  3950  002204  0E00               	movlw	0
  3951  002206  6E2C               	movwf	?___fttol+1,c
  3952  002208  0E00               	movlw	0
  3953  00220A  6E2D               	movwf	?___fttol+2,c
  3954  00220C  0E00               	movlw	0
  3955  00220E  6E2E               	movwf	?___fttol+3,c
  3956  002210  0012               	return	
  3957  002212                     l2382:
  3958  002212  90D8               	bcf	status,0,c
  3959  002214  3238               	rrcf	___fttol@lval+3,f,c
  3960  002216  3237               	rrcf	___fttol@lval+2,f,c
  3961  002218  3236               	rrcf	___fttol@lval+1,f,c
  3962  00221A  3235               	rrcf	___fttol@lval,f,c
  3963  00221C  3E39               	incfsz	___fttol@exp1,f,c
  3964  00221E  D7F9               	goto	l2382
  3965  002220  D015               	goto	l2396
  3966  002222                     l2386:
  3967  002222  0E17               	movlw	23
  3968  002224  6439               	cpfsgt	___fttol@exp1,c
  3969  002226  D00F               	goto	l2394
  3970  002228  0E00               	movlw	0
  3971  00222A  6E2B               	movwf	?___fttol,c
  3972  00222C  0E00               	movlw	0
  3973  00222E  6E2C               	movwf	?___fttol+1,c
  3974  002230  0E00               	movlw	0
  3975  002232  6E2D               	movwf	?___fttol+2,c
  3976  002234  0E00               	movlw	0
  3977  002236  6E2E               	movwf	?___fttol+3,c
  3978  002238  0012               	return	
  3979  00223A                     l2392:
  3980  00223A  90D8               	bcf	status,0,c
  3981  00223C  3635               	rlcf	___fttol@lval,f,c
  3982  00223E  3636               	rlcf	___fttol@lval+1,f,c
  3983  002240  3637               	rlcf	___fttol@lval+2,f,c
  3984  002242  3638               	rlcf	___fttol@lval+3,f,c
  3985  002244  0639               	decf	___fttol@exp1,f,c
  3986  002246                     l2394:
  3987  002246  5039               	movf	___fttol@exp1,w,c
  3988  002248  A4D8               	btfss	status,2,c
  3989  00224A  D7F7               	goto	l2392
  3990  00224C                     l2396:
  3991  00224C  5034               	movf	___fttol@sign1,w,c
  3992  00224E  B4D8               	btfsc	status,2,c
  3993  002250  D008               	goto	l2400
  3994  002252  1E38               	comf	___fttol@lval+3,f,c
  3995  002254  1E37               	comf	___fttol@lval+2,f,c
  3996  002256  1E36               	comf	___fttol@lval+1,f,c
  3997  002258  6C35               	negf	___fttol@lval,c
  3998  00225A  0E00               	movlw	0
  3999  00225C  2236               	addwfc	___fttol@lval+1,f,c
  4000  00225E  2237               	addwfc	___fttol@lval+2,f,c
  4001  002260  2238               	addwfc	___fttol@lval+3,f,c
  4002  002262                     l2400:
  4003  002262  C035  F02B         	movff	___fttol@lval,?___fttol
  4004  002266  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4005  00226A  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4006  00226E  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4007  002272  0012               	return	
  4008  002274                     __end_of___fttol:
  4009                           	opt stack 0
  4010                           tblptru	equ	0xFF8
  4011                           tblptrh	equ	0xFF7
  4012                           tblptrl	equ	0xFF6
  4013                           tablat	equ	0xFF5
  4014                           prodh	equ	0xFF4
  4015                           prodl	equ	0xFF3
  4016                           wreg	equ	0xFE8
  4017                           postinc2	equ	0xFDE
  4018                           postdec2	equ	0xFDD
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           status	equ	0xFD8
  4022                           
  4023 ;; *************** function ___ftsub *****************
  4024 ;; Defined at:
  4025 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  f1              3   57[COMRAM] float 
  4028 ;;  f2              3   60[COMRAM] float 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  3   57[COMRAM] float 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2, status,0, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4040 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;Total ram usage:        6 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    2
  4047 ;; This function calls:
  4048 ;;		___ftadd
  4049 ;; This function is called by:
  4050 ;;		_printf
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           	psect	text16
  4055  0027CA                     __ptext16:
  4056                           	opt stack 0
  4057  0027CA                     ___ftsub:
  4058                           	opt stack 27
  4059                           
  4060                           ;incstack = 0
  4061  0027CA  503D               	movf	___ftsub@f2,w,c
  4062  0027CC  103E               	iorwf	___ftsub@f2+1,w,c
  4063  0027CE  103F               	iorwf	___ftsub@f2+2,w,c
  4064  0027D0  B4D8               	btfsc	status,2,c
  4065  0027D2  D006               	goto	l2332
  4066  0027D4  0E00               	movlw	0
  4067  0027D6  1A3D               	xorwf	___ftsub@f2,f,c
  4068  0027D8  0E00               	movlw	0
  4069  0027DA  1A3E               	xorwf	___ftsub@f2+1,f,c
  4070  0027DC  0E80               	movlw	128
  4071  0027DE  1A3F               	xorwf	___ftsub@f2+2,f,c
  4072  0027E0                     l2332:
  4073  0027E0  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4074  0027E4  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4075  0027E8  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4076  0027EC  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4077  0027F0  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4078  0027F4  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4079  0027F8  EC43  F00E         	call	___ftadd	;wreg free
  4080  0027FC  C02E  F03A         	movff	?___ftadd,?___ftsub
  4081  002800  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4082  002804  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4083  002808  0012               	return	
  4084  00280A                     __end_of___ftsub:
  4085                           	opt stack 0
  4086                           tblptru	equ	0xFF8
  4087                           tblptrh	equ	0xFF7
  4088                           tblptrl	equ	0xFF6
  4089                           tablat	equ	0xFF5
  4090                           prodh	equ	0xFF4
  4091                           prodl	equ	0xFF3
  4092                           wreg	equ	0xFE8
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function ___ftadd *****************
  4100 ;; Defined at:
  4101 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  f1              3   45[COMRAM] float 
  4104 ;;  f2              3   48[COMRAM] float 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  exp1            1   56[COMRAM] unsigned char 
  4107 ;;  exp2            1   55[COMRAM] unsigned char 
  4108 ;;  sign            1   54[COMRAM] unsigned char 
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  3   45[COMRAM] float 
  4111 ;; Registers used:
  4112 ;;		wreg, status,2, status,0, cstack
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4118 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4122 ;;Total ram usage:       12 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    1
  4125 ;; This function calls:
  4126 ;;		___ftpack
  4127 ;; This function is called by:
  4128 ;;		_printf
  4129 ;;		___ftsub
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text17
  4134  001C86                     __ptext17:
  4135                           	opt stack 0
  4136  001C86                     ___ftadd:
  4137                           	opt stack 27
  4138                           
  4139                           ;incstack = 0
  4140  001C86  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4141  001C8A  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4142  001C8C  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4143  001C8E  342F               	rlcf	___ftadd@f1+1,w,c
  4144  001C90  3634               	rlcf	??___ftadd& (0+255),f,c
  4145  001C92  E301               	bnc	u1461
  4146  001C94  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4147  001C96                     u1461:
  4148  001C96  5034               	movf	??___ftadd,w,c
  4149  001C98  6E39               	movwf	___ftadd@exp1,c
  4150  001C9A  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4151  001C9E  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4152  001CA0  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4153  001CA2  3432               	rlcf	___ftadd@f2+1,w,c
  4154  001CA4  3634               	rlcf	??___ftadd& (0+255),f,c
  4155  001CA6  E301               	bnc	u1471
  4156  001CA8  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4157  001CAA                     u1471:
  4158  001CAA  5034               	movf	??___ftadd,w,c
  4159  001CAC  6E38               	movwf	___ftadd@exp2,c
  4160  001CAE  5039               	movf	___ftadd@exp1,w,c
  4161  001CB0  B4D8               	btfsc	status,2,c
  4162  001CB2  D00B               	goto	l543
  4163  001CB4  5038               	movf	___ftadd@exp2,w,c
  4164  001CB6  5C39               	subwf	___ftadd@exp1,w,c
  4165  001CB8  B0D8               	btfsc	status,0,c
  4166  001CBA  D00E               	goto	l1954
  4167  001CBC  5039               	movf	___ftadd@exp1,w,c
  4168  001CBE  0800               	sublw	0
  4169  001CC0  2438               	addwf	___ftadd@exp2,w,c
  4170  001CC2  6E34               	movwf	??___ftadd& (0+255),c
  4171  001CC4  0E18               	movlw	24
  4172  001CC6  6434               	cpfsgt	??___ftadd,c
  4173  001CC8  D007               	goto	l1954
  4174  001CCA                     l543:
  4175  001CCA  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4176  001CCE  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4177  001CD2  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4178  001CD6  0012               	return	
  4179  001CD8                     l1954:
  4180  001CD8  5038               	movf	___ftadd@exp2,w,c
  4181  001CDA  B4D8               	btfsc	status,2,c
  4182  001CDC  D00B               	goto	l547
  4183  001CDE  5039               	movf	___ftadd@exp1,w,c
  4184  001CE0  5C38               	subwf	___ftadd@exp2,w,c
  4185  001CE2  B0D8               	btfsc	status,0,c
  4186  001CE4  D00E               	goto	l1960
  4187  001CE6  5038               	movf	___ftadd@exp2,w,c
  4188  001CE8  0800               	sublw	0
  4189  001CEA  2439               	addwf	___ftadd@exp1,w,c
  4190  001CEC  6E34               	movwf	??___ftadd& (0+255),c
  4191  001CEE  0E18               	movlw	24
  4192  001CF0  6434               	cpfsgt	??___ftadd,c
  4193  001CF2  D007               	goto	l1960
  4194  001CF4                     l547:
  4195  001CF4  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4196  001CF8  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4197  001CFC  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4198  001D00  0012               	return	
  4199  001D02                     l1960:
  4200  001D02  0E06               	movlw	6
  4201  001D04  6E37               	movwf	___ftadd@sign,c
  4202  001D06  BE30               	btfsc	___ftadd@f1+2,7,c
  4203  001D08  8E37               	bsf	___ftadd@sign,7,c
  4204  001D0A  BE33               	btfsc	___ftadd@f2+2,7,c
  4205  001D0C  8C37               	bsf	___ftadd@sign,6,c
  4206  001D0E  8E2F               	bsf	___ftadd@f1+1,7,c
  4207  001D10  0EFF               	movlw	255
  4208  001D12  162E               	andwf	___ftadd@f1,f,c
  4209  001D14  0EFF               	movlw	255
  4210  001D16  162F               	andwf	___ftadd@f1+1,f,c
  4211  001D18  0E00               	movlw	0
  4212  001D1A  1630               	andwf	___ftadd@f1+2,f,c
  4213  001D1C  8E32               	bsf	___ftadd@f2+1,7,c
  4214  001D1E  0EFF               	movlw	255
  4215  001D20  1631               	andwf	___ftadd@f2,f,c
  4216  001D22  0EFF               	movlw	255
  4217  001D24  1632               	andwf	___ftadd@f2+1,f,c
  4218  001D26  0E00               	movlw	0
  4219  001D28  1633               	andwf	___ftadd@f2+2,f,c
  4220  001D2A  5038               	movf	___ftadd@exp2,w,c
  4221  001D2C  5C39               	subwf	___ftadd@exp1,w,c
  4222  001D2E  B0D8               	btfsc	status,0,c
  4223  001D30  D01B               	goto	l1986
  4224  001D32                     l1976:
  4225  001D32  90D8               	bcf	status,0,c
  4226  001D34  3631               	rlcf	___ftadd@f2,f,c
  4227  001D36  3632               	rlcf	___ftadd@f2+1,f,c
  4228  001D38  3633               	rlcf	___ftadd@f2+2,f,c
  4229  001D3A  0638               	decf	___ftadd@exp2,f,c
  4230  001D3C  5039               	movf	___ftadd@exp1,w,c
  4231  001D3E  1838               	xorwf	___ftadd@exp2,w,c
  4232  001D40  B4D8               	btfsc	status,2,c
  4233  001D42  D00D               	goto	l1984
  4234  001D44  0637               	decf	___ftadd@sign,f,c
  4235  001D46  C037  F034         	movff	___ftadd@sign,??___ftadd
  4236  001D4A  0E07               	movlw	7
  4237  001D4C  1634               	andwf	??___ftadd,f,c
  4238  001D4E  B4D8               	btfsc	status,2,c
  4239  001D50  D006               	goto	l1984
  4240  001D52  D7EF               	goto	l1976
  4241  001D54                     l1982:
  4242  001D54  90D8               	bcf	status,0,c
  4243  001D56  3230               	rrcf	___ftadd@f1+2,f,c
  4244  001D58  322F               	rrcf	___ftadd@f1+1,f,c
  4245  001D5A  322E               	rrcf	___ftadd@f1,f,c
  4246  001D5C  2A39               	incf	___ftadd@exp1,f,c
  4247  001D5E                     l1984:
  4248  001D5E  5038               	movf	___ftadd@exp2,w,c
  4249  001D60  1839               	xorwf	___ftadd@exp1,w,c
  4250  001D62  B4D8               	btfsc	status,2,c
  4251  001D64  D01F               	goto	l558
  4252  001D66  D7F6               	goto	l1982
  4253  001D68                     l1986:
  4254  001D68  5039               	movf	___ftadd@exp1,w,c
  4255  001D6A  5C38               	subwf	___ftadd@exp2,w,c
  4256  001D6C  B0D8               	btfsc	status,0,c
  4257  001D6E  D01A               	goto	l558
  4258  001D70                     l1988:
  4259  001D70  90D8               	bcf	status,0,c
  4260  001D72  362E               	rlcf	___ftadd@f1,f,c
  4261  001D74  362F               	rlcf	___ftadd@f1+1,f,c
  4262  001D76  3630               	rlcf	___ftadd@f1+2,f,c
  4263  001D78  0639               	decf	___ftadd@exp1,f,c
  4264  001D7A  5039               	movf	___ftadd@exp1,w,c
  4265  001D7C  1838               	xorwf	___ftadd@exp2,w,c
  4266  001D7E  B4D8               	btfsc	status,2,c
  4267  001D80  D00D               	goto	l1996
  4268  001D82  0637               	decf	___ftadd@sign,f,c
  4269  001D84  C037  F034         	movff	___ftadd@sign,??___ftadd
  4270  001D88  0E07               	movlw	7
  4271  001D8A  1634               	andwf	??___ftadd,f,c
  4272  001D8C  B4D8               	btfsc	status,2,c
  4273  001D8E  D006               	goto	l1996
  4274  001D90  D7EF               	goto	l1988
  4275  001D92                     l1994:
  4276  001D92  90D8               	bcf	status,0,c
  4277  001D94  3233               	rrcf	___ftadd@f2+2,f,c
  4278  001D96  3232               	rrcf	___ftadd@f2+1,f,c
  4279  001D98  3231               	rrcf	___ftadd@f2,f,c
  4280  001D9A  2A38               	incf	___ftadd@exp2,f,c
  4281  001D9C                     l1996:
  4282  001D9C  5038               	movf	___ftadd@exp2,w,c
  4283  001D9E  1839               	xorwf	___ftadd@exp1,w,c
  4284  001DA0  A4D8               	btfss	status,2,c
  4285  001DA2  D7F7               	goto	l1994
  4286  001DA4                     l558:
  4287  001DA4  AE37               	btfss	___ftadd@sign,7,c
  4288  001DA6  D00C               	goto	l567
  4289  001DA8  0EFF               	movlw	255
  4290  001DAA  1A2E               	xorwf	___ftadd@f1,f,c
  4291  001DAC  0EFF               	movlw	255
  4292  001DAE  1A2F               	xorwf	___ftadd@f1+1,f,c
  4293  001DB0  0EFF               	movlw	255
  4294  001DB2  1A30               	xorwf	___ftadd@f1+2,f,c
  4295  001DB4  0E01               	movlw	1
  4296  001DB6  262E               	addwf	___ftadd@f1,f,c
  4297  001DB8  0E00               	movlw	0
  4298  001DBA  222F               	addwfc	___ftadd@f1+1,f,c
  4299  001DBC  0E00               	movlw	0
  4300  001DBE  2230               	addwfc	___ftadd@f1+2,f,c
  4301  001DC0                     l567:
  4302  001DC0  AC37               	btfss	___ftadd@sign,6,c
  4303  001DC2  D00C               	goto	l2002
  4304  001DC4  0EFF               	movlw	255
  4305  001DC6  1A31               	xorwf	___ftadd@f2,f,c
  4306  001DC8  0EFF               	movlw	255
  4307  001DCA  1A32               	xorwf	___ftadd@f2+1,f,c
  4308  001DCC  0EFF               	movlw	255
  4309  001DCE  1A33               	xorwf	___ftadd@f2+2,f,c
  4310  001DD0  0E01               	movlw	1
  4311  001DD2  2631               	addwf	___ftadd@f2,f,c
  4312  001DD4  0E00               	movlw	0
  4313  001DD6  2232               	addwfc	___ftadd@f2+1,f,c
  4314  001DD8  0E00               	movlw	0
  4315  001DDA  2233               	addwfc	___ftadd@f2+2,f,c
  4316  001DDC                     l2002:
  4317  001DDC  0E00               	movlw	0
  4318  001DDE  6E37               	movwf	___ftadd@sign,c
  4319  001DE0  502E               	movf	___ftadd@f1,w,c
  4320  001DE2  2631               	addwf	___ftadd@f2,f,c
  4321  001DE4  502F               	movf	___ftadd@f1+1,w,c
  4322  001DE6  2232               	addwfc	___ftadd@f2+1,f,c
  4323  001DE8  5030               	movf	___ftadd@f1+2,w,c
  4324  001DEA  2233               	addwfc	___ftadd@f2+2,f,c
  4325  001DEC  AE33               	btfss	___ftadd@f2+2,7,c
  4326  001DEE  D00E               	goto	l2012
  4327  001DF0  0EFF               	movlw	255
  4328  001DF2  1A31               	xorwf	___ftadd@f2,f,c
  4329  001DF4  0EFF               	movlw	255
  4330  001DF6  1A32               	xorwf	___ftadd@f2+1,f,c
  4331  001DF8  0EFF               	movlw	255
  4332  001DFA  1A33               	xorwf	___ftadd@f2+2,f,c
  4333  001DFC  0E01               	movlw	1
  4334  001DFE  2631               	addwf	___ftadd@f2,f,c
  4335  001E00  0E00               	movlw	0
  4336  001E02  2232               	addwfc	___ftadd@f2+1,f,c
  4337  001E04  0E00               	movlw	0
  4338  001E06  2233               	addwfc	___ftadd@f2+2,f,c
  4339  001E08  0E01               	movlw	1
  4340  001E0A  6E37               	movwf	___ftadd@sign,c
  4341  001E0C                     l2012:
  4342  001E0C  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4343  001E10  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4344  001E14  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4345  001E18  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4346  001E1C  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4347  001E20  ECA0  F011         	call	___ftpack	;wreg free
  4348  001E24  C001  F02E         	movff	?___ftpack,?___ftadd
  4349  001E28  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4350  001E2C  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4351  001E30  0012               	return	
  4352  001E32                     __end_of___ftadd:
  4353                           	opt stack 0
  4354                           tblptru	equ	0xFF8
  4355                           tblptrh	equ	0xFF7
  4356                           tblptrl	equ	0xFF6
  4357                           tablat	equ	0xFF5
  4358                           prodh	equ	0xFF4
  4359                           prodl	equ	0xFF3
  4360                           wreg	equ	0xFE8
  4361                           postinc2	equ	0xFDE
  4362                           postdec2	equ	0xFDD
  4363                           fsr2h	equ	0xFDA
  4364                           fsr2l	equ	0xFD9
  4365                           status	equ	0xFD8
  4366                           
  4367 ;; *************** function ___ftneg *****************
  4368 ;; Defined at:
  4369 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  f1              3    0[COMRAM] float 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;		None
  4374 ;; Return value:  Size  Location     Type
  4375 ;;                  3    0[COMRAM] float 
  4376 ;; Registers used:
  4377 ;;		wreg, status,2, status,0
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4383 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;Total ram usage:        3 bytes
  4388 ;; Hardware stack levels used:    1
  4389 ;; This function calls:
  4390 ;;		Nothing
  4391 ;; This function is called by:
  4392 ;;		_printf
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text18
  4397  002868                     __ptext18:
  4398                           	opt stack 0
  4399  002868                     ___ftneg:
  4400                           	opt stack 29
  4401                           
  4402                           ;incstack = 0
  4403  002868  5001               	movf	___ftneg@f1,w,c
  4404  00286A  1002               	iorwf	___ftneg@f1+1,w,c
  4405  00286C  1003               	iorwf	___ftneg@f1+2,w,c
  4406  00286E  B4D8               	btfsc	status,2,c
  4407  002870  D006               	goto	l617
  4408  002872  0E00               	movlw	0
  4409  002874  1A01               	xorwf	___ftneg@f1,f,c
  4410  002876  0E00               	movlw	0
  4411  002878  1A02               	xorwf	___ftneg@f1+1,f,c
  4412  00287A  0E80               	movlw	128
  4413  00287C  1A03               	xorwf	___ftneg@f1+2,f,c
  4414  00287E                     l617:
  4415  00287E  C001  F001         	movff	___ftneg@f1,?___ftneg
  4416  002882  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4417  002886  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4418  00288A  0012               	return		;funcret
  4419  00288C                     __end_of___ftneg:
  4420                           	opt stack 0
  4421                           tblptru	equ	0xFF8
  4422                           tblptrh	equ	0xFF7
  4423                           tblptrl	equ	0xFF6
  4424                           tablat	equ	0xFF5
  4425                           prodh	equ	0xFF4
  4426                           prodl	equ	0xFF3
  4427                           wreg	equ	0xFE8
  4428                           postinc2	equ	0xFDE
  4429                           postdec2	equ	0xFDD
  4430                           fsr2h	equ	0xFDA
  4431                           fsr2l	equ	0xFD9
  4432                           status	equ	0xFD8
  4433                           
  4434 ;; *************** function ___ftge *****************
  4435 ;; Defined at:
  4436 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;  ff1             3    0[COMRAM] float 
  4439 ;;  ff2             3    3[COMRAM] float 
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;		None
  4442 ;; Return value:  Size  Location     Type
  4443 ;;		None               void
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4451 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;Total ram usage:        9 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; This function calls:
  4458 ;;		Nothing
  4459 ;; This function is called by:
  4460 ;;		_printf
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text19
  4465  0023EE                     __ptext19:
  4466                           	opt stack 0
  4467  0023EE                     ___ftge:
  4468                           	opt stack 29
  4469                           
  4470                           ;incstack = 0
  4471  0023EE  AE03               	btfss	___ftge@ff1+2,7,c
  4472  0023F0  D016               	goto	l2340
  4473  0023F2  C001  F007         	movff	___ftge@ff1,??___ftge
  4474  0023F6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4475  0023FA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4476  0023FE  1E07               	comf	??___ftge,f,c
  4477  002400  1E08               	comf	??___ftge+1,f,c
  4478  002402  1E09               	comf	??___ftge+2,f,c
  4479  002404  2A07               	incf	??___ftge,f,c
  4480  002406  0E00               	movlw	0
  4481  002408  2208               	addwfc	??___ftge+1,f,c
  4482  00240A  2209               	addwfc	??___ftge+2,f,c
  4483  00240C  0E00               	movlw	0
  4484  00240E  2407               	addwf	??___ftge,w,c
  4485  002410  6E01               	movwf	___ftge@ff1,c
  4486  002412  0E00               	movlw	0
  4487  002414  2008               	addwfc	??___ftge+1,w,c
  4488  002416  6E02               	movwf	___ftge@ff1+1,c
  4489  002418  0E80               	movlw	128
  4490  00241A  2009               	addwfc	??___ftge+2,w,c
  4491  00241C  6E03               	movwf	___ftge@ff1+2,c
  4492  00241E                     l2340:
  4493  00241E  AE06               	btfss	___ftge@ff2+2,7,c
  4494  002420  D016               	goto	l2344
  4495  002422  C004  F007         	movff	___ftge@ff2,??___ftge
  4496  002426  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4497  00242A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4498  00242E  1E07               	comf	??___ftge,f,c
  4499  002430  1E08               	comf	??___ftge+1,f,c
  4500  002432  1E09               	comf	??___ftge+2,f,c
  4501  002434  2A07               	incf	??___ftge,f,c
  4502  002436  0E00               	movlw	0
  4503  002438  2208               	addwfc	??___ftge+1,f,c
  4504  00243A  2209               	addwfc	??___ftge+2,f,c
  4505  00243C  0E00               	movlw	0
  4506  00243E  2407               	addwf	??___ftge,w,c
  4507  002440  6E04               	movwf	___ftge@ff2,c
  4508  002442  0E00               	movlw	0
  4509  002444  2008               	addwfc	??___ftge+1,w,c
  4510  002446  6E05               	movwf	___ftge@ff2+1,c
  4511  002448  0E80               	movlw	128
  4512  00244A  2009               	addwfc	??___ftge+2,w,c
  4513  00244C  6E06               	movwf	___ftge@ff2+2,c
  4514  00244E                     l2344:
  4515  00244E  0E00               	movlw	0
  4516  002450  1A01               	xorwf	___ftge@ff1,f,c
  4517  002452  0E00               	movlw	0
  4518  002454  1A02               	xorwf	___ftge@ff1+1,f,c
  4519  002456  0E80               	movlw	128
  4520  002458  1A03               	xorwf	___ftge@ff1+2,f,c
  4521  00245A  0E00               	movlw	0
  4522  00245C  1A04               	xorwf	___ftge@ff2,f,c
  4523  00245E  0E00               	movlw	0
  4524  002460  1A05               	xorwf	___ftge@ff2+1,f,c
  4525  002462  0E80               	movlw	128
  4526  002464  1A06               	xorwf	___ftge@ff2+2,f,c
  4527  002466  5004               	movf	___ftge@ff2,w,c
  4528  002468  5C01               	subwf	___ftge@ff1,w,c
  4529  00246A  5005               	movf	___ftge@ff2+1,w,c
  4530  00246C  5802               	subwfb	___ftge@ff1+1,w,c
  4531  00246E  5006               	movf	___ftge@ff2+2,w,c
  4532  002470  5803               	subwfb	___ftge@ff1+2,w,c
  4533  002472  B0D8               	btfsc	status,0,c
  4534  002474  D002               	goto	l2350
  4535  002476  90D8               	bcf	status,0,c
  4536  002478  0012               	return	
  4537  00247A                     l2350:
  4538  00247A  80D8               	bsf	status,0,c
  4539  00247C  0012               	return	
  4540  00247E                     __end_of___ftge:
  4541                           	opt stack 0
  4542                           tblptru	equ	0xFF8
  4543                           tblptrh	equ	0xFF7
  4544                           tblptrl	equ	0xFF6
  4545                           tablat	equ	0xFF5
  4546                           prodh	equ	0xFF4
  4547                           prodl	equ	0xFF3
  4548                           wreg	equ	0xFE8
  4549                           postinc2	equ	0xFDE
  4550                           postdec2	equ	0xFDD
  4551                           fsr2h	equ	0xFDA
  4552                           fsr2l	equ	0xFD9
  4553                           status	equ	0xFD8
  4554                           
  4555 ;; *************** function _lcdClear *****************
  4556 ;; Defined at:
  4557 ;;		line 70 in file "lcd.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;		None
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;		None
  4562 ;; Return value:  Size  Location     Type
  4563 ;;                  1    wreg      void 
  4564 ;; Registers used:
  4565 ;;		wreg, status,2, status,0, cstack
  4566 ;; Tracked objects:
  4567 ;;		On entry : 0/0
  4568 ;;		On exit  : 0/0
  4569 ;;		Unchanged: 0/0
  4570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;Total ram usage:        0 bytes
  4576 ;; Hardware stack levels used:    1
  4577 ;; Hardware stack levels required when called:    2
  4578 ;; This function calls:
  4579 ;;		_lcdInst
  4580 ;; This function is called by:
  4581 ;;		_main
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text20
  4586  0028E2                     __ptext20:
  4587                           	opt stack 0
  4588  0028E2                     _lcdClear:
  4589                           	opt stack 28
  4590                           
  4591                           ;lcd.c: 71: lcdInst(0b00000001);
  4592                           
  4593                           ;incstack = 0
  4594  0028E2  0E01               	movlw	1
  4595  0028E4  EC57  F014         	call	_lcdInst
  4596  0028E8  0012               	return		;funcret
  4597  0028EA                     __end_of_lcdClear:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           wreg	equ	0xFE8
  4606                           postinc2	equ	0xFDE
  4607                           postdec2	equ	0xFDD
  4608                           fsr2h	equ	0xFDA
  4609                           fsr2l	equ	0xFD9
  4610                           status	equ	0xFD8
  4611                           
  4612 ;; *************** function _initLCD *****************
  4613 ;; Defined at:
  4614 ;;		line 15 in file "lcd.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;		None
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;		None
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  1    wreg      void 
  4621 ;; Registers used:
  4622 ;;		wreg, status,2, status,0, cstack
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;Total ram usage:        1 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    2
  4635 ;; This function calls:
  4636 ;;		_lcdInst
  4637 ;; This function is called by:
  4638 ;;		_main
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text21
  4643  002784                     __ptext21:
  4644                           	opt stack 0
  4645  002784                     _initLCD:
  4646                           	opt stack 28
  4647                           
  4648                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  4649                           
  4650                           ;incstack = 0
  4651  002784  0E27               	movlw	39
  4652  002786  6E05               	movwf	??_initLCD& (0+255),c
  4653  002788  0EF5               	movlw	245
  4654  00278A                     u2637:
  4655  00278A  2EE8               	decfsz	wreg,f,c
  4656  00278C  D7FE               	bra	u2637
  4657  00278E  2E05               	decfsz	??_initLCD& (0+255),f,c
  4658  002790  D7FC               	bra	u2637
  4659  002792  F000               	nop	
  4660                           
  4661                           ;lcd.c: 18: lcdInst(0b00110011);
  4662  002794  0E33               	movlw	51
  4663  002796  EC57  F014         	call	_lcdInst
  4664                           
  4665                           ;lcd.c: 19: lcdInst(0b00110010);
  4666  00279A  0E32               	movlw	50
  4667  00279C  EC57  F014         	call	_lcdInst
  4668                           
  4669                           ;lcd.c: 20: lcdInst(0b00101000);
  4670  0027A0  0E28               	movlw	40
  4671  0027A2  EC57  F014         	call	_lcdInst
  4672                           
  4673                           ;lcd.c: 21: lcdInst(0b00001111);
  4674  0027A6  0E0F               	movlw	15
  4675  0027A8  EC57  F014         	call	_lcdInst
  4676                           
  4677                           ;lcd.c: 22: lcdInst(0b00000110);
  4678  0027AC  0E06               	movlw	6
  4679  0027AE  EC57  F014         	call	_lcdInst
  4680                           
  4681                           ;lcd.c: 23: lcdInst(0b00000001);
  4682  0027B2  0E01               	movlw	1
  4683  0027B4  EC57  F014         	call	_lcdInst
  4684                           
  4685                           ;lcd.c: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
  4686  0027B8  0E27               	movlw	39
  4687  0027BA  6E05               	movwf	??_initLCD& (0+255),c
  4688  0027BC  0EF5               	movlw	245
  4689  0027BE                     u2647:
  4690  0027BE  2EE8               	decfsz	wreg,f,c
  4691  0027C0  D7FE               	bra	u2647
  4692  0027C2  2E05               	decfsz	??_initLCD& (0+255),f,c
  4693  0027C4  D7FC               	bra	u2647
  4694  0027C6  F000               	nop	
  4695  0027C8  0012               	return		;funcret
  4696  0027CA                     __end_of_initLCD:
  4697                           	opt stack 0
  4698                           tblptru	equ	0xFF8
  4699                           tblptrh	equ	0xFF7
  4700                           tblptrl	equ	0xFF6
  4701                           tablat	equ	0xFF5
  4702                           prodh	equ	0xFF4
  4703                           prodl	equ	0xFF3
  4704                           wreg	equ	0xFE8
  4705                           postinc2	equ	0xFDE
  4706                           postdec2	equ	0xFDD
  4707                           fsr2h	equ	0xFDA
  4708                           fsr2l	equ	0xFD9
  4709                           status	equ	0xFD8
  4710                           
  4711 ;; *************** function _lcdInst *****************
  4712 ;; Defined at:
  4713 ;;		line 27 in file "lcd.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;  data            1    wreg     unsigned char 
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;  data            1    3[COMRAM] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1    wreg      void 
  4720 ;; Registers used:
  4721 ;;		wreg, status,2, status,0, cstack
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;Total ram usage:        2 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    1
  4734 ;; This function calls:
  4735 ;;		_lcdNibble
  4736 ;; This function is called by:
  4737 ;;		_initLCD
  4738 ;;		_lcdClear
  4739 ;;		_lcdNewline
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743                           	psect	text22
  4744  0028AE                     __ptext22:
  4745                           	opt stack 0
  4746  0028AE                     _lcdInst:
  4747                           	opt stack 26
  4748                           
  4749                           ;incstack = 0
  4750                           ;lcdInst@data stored from wreg
  4751  0028AE  6E04               	movwf	lcdInst@data,c
  4752                           
  4753                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  4754  0028B0  948C               	bcf	3980,2,c	;volatile
  4755                           
  4756                           ;lcd.c: 29: _delay((unsigned long)((140)*(8000000/4000000.0)));
  4757  0028B2  0E5D               	movlw	93
  4758  0028B4                     u2657:
  4759  0028B4  2EE8               	decfsz	wreg,f,c
  4760  0028B6  D7FE               	bra	u2657
  4761  0028B8  F000               	nop	
  4762                           
  4763                           ;lcd.c: 30: lcdNibble(data);
  4764  0028BA  5004               	movf	lcdInst@data,w,c
  4765  0028BC  EC97  F013         	call	_lcdNibble
  4766                           
  4767                           ;lcd.c: 31: _delay((unsigned long)((1000)*(8000000/4000000.0)));
  4768  0028C0  0E03               	movlw	3
  4769  0028C2  6E03               	movwf	??_lcdInst& (0+255),c
  4770  0028C4  0E98               	movlw	152
  4771  0028C6                     u2667:
  4772  0028C6  2EE8               	decfsz	wreg,f,c
  4773  0028C8  D7FE               	bra	u2667
  4774  0028CA  2E03               	decfsz	??_lcdInst& (0+255),f,c
  4775  0028CC  D7FC               	bra	u2667
  4776  0028CE  0012               	return		;funcret
  4777  0028D0                     __end_of_lcdInst:
  4778                           	opt stack 0
  4779                           tblptru	equ	0xFF8
  4780                           tblptrh	equ	0xFF7
  4781                           tblptrl	equ	0xFF6
  4782                           tablat	equ	0xFF5
  4783                           prodh	equ	0xFF4
  4784                           prodl	equ	0xFF3
  4785                           wreg	equ	0xFE8
  4786                           postinc2	equ	0xFDE
  4787                           postdec2	equ	0xFDD
  4788                           fsr2h	equ	0xFDA
  4789                           fsr2l	equ	0xFD9
  4790                           status	equ	0xFD8
  4791                           
  4792 ;; *************** function _lcdNibble *****************
  4793 ;; Defined at:
  4794 ;;		line 46 in file "lcd.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;  data            1    wreg     unsigned char 
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;  data            1    1[COMRAM] unsigned char 
  4799 ;;  temp            1    0[COMRAM] unsigned char 
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      void 
  4802 ;; Registers used:
  4803 ;;		wreg, status,2, status,0
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4812 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4813 ;;Total ram usage:        2 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; This function calls:
  4816 ;;		Nothing
  4817 ;; This function is called by:
  4818 ;;		_lcdInst
  4819 ;;		_putch
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           	psect	text23
  4824  00272E                     __ptext23:
  4825                           	opt stack 0
  4826  00272E                     _lcdNibble:
  4827                           	opt stack 28
  4828                           
  4829                           ;incstack = 0
  4830                           ;lcdNibble@data stored from wreg
  4831  00272E  6E02               	movwf	lcdNibble@data,c
  4832                           
  4833                           ;lcd.c: 48: char temp = data & 0xF0;
  4834  002730  5002               	movf	lcdNibble@data,w,c
  4835  002732  0BF0               	andlw	240
  4836  002734  6E01               	movwf	lcdNibble@temp,c
  4837                           
  4838                           ;lcd.c: 49: LATD = LATD & 0x0F;
  4839  002736  508C               	movf	3980,w,c	;volatile
  4840  002738  0B0F               	andlw	15
  4841  00273A  6E8C               	movwf	3980,c	;volatile
  4842                           
  4843                           ;lcd.c: 50: LATD = temp | LATD;
  4844  00273C  5001               	movf	lcdNibble@temp,w,c
  4845  00273E  108C               	iorwf	3980,w,c	;volatile
  4846  002740  6E8C               	movwf	3980,c	;volatile
  4847                           
  4848                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  4849  002742  968C               	bcf	3980,3,c	;volatile
  4850                           
  4851                           ;lcd.c: 53: _delay((unsigned long)((600)*(8000000/4000000.0)));
  4852  002744  0EF0               	movlw	240
  4853  002746                     u2677:
  4854  002746  D000               	nop2	
  4855  002748  2EE8               	decfsz	wreg,f,c
  4856  00274A  D7FD               	bra	u2677
  4857                           
  4858                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  4859  00274C  868C               	bsf	3980,3,c	;volatile
  4860                           
  4861                           ;lcd.c: 55: _delay((unsigned long)((600)*(8000000/4000000.0)));
  4862  00274E  0EF0               	movlw	240
  4863  002750                     u2687:
  4864  002750  D000               	nop2	
  4865  002752  2EE8               	decfsz	wreg,f,c
  4866  002754  D7FD               	bra	u2687
  4867                           
  4868                           ;lcd.c: 58: data = data << 4;
  4869  002756  3802               	swapf	lcdNibble@data,w,c
  4870  002758  0BF0               	andlw	240
  4871  00275A  6E02               	movwf	lcdNibble@data,c
  4872                           
  4873                           ;lcd.c: 60: temp = data & 0xF0;
  4874  00275C  5002               	movf	lcdNibble@data,w,c
  4875  00275E  0BF0               	andlw	240
  4876  002760  6E01               	movwf	lcdNibble@temp,c
  4877                           
  4878                           ;lcd.c: 61: LATD = LATD & 0x0F;
  4879  002762  508C               	movf	3980,w,c	;volatile
  4880  002764  0B0F               	andlw	15
  4881  002766  6E8C               	movwf	3980,c	;volatile
  4882                           
  4883                           ;lcd.c: 62: LATD = temp | LATD;
  4884  002768  5001               	movf	lcdNibble@temp,w,c
  4885  00276A  108C               	iorwf	3980,w,c	;volatile
  4886  00276C  6E8C               	movwf	3980,c	;volatile
  4887                           
  4888                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  4889  00276E  968C               	bcf	3980,3,c	;volatile
  4890                           
  4891                           ;lcd.c: 65: _delay((unsigned long)((600)*(8000000/4000000.0)));
  4892  002770  0EF0               	movlw	240
  4893  002772                     u2697:
  4894  002772  D000               	nop2	
  4895  002774  2EE8               	decfsz	wreg,f,c
  4896  002776  D7FD               	bra	u2697
  4897                           
  4898                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  4899  002778  868C               	bsf	3980,3,c	;volatile
  4900                           
  4901                           ;lcd.c: 67: _delay((unsigned long)((600)*(8000000/4000000.0)));
  4902  00277A  0EF0               	movlw	240
  4903  00277C                     u2707:
  4904  00277C  D000               	nop2	
  4905  00277E  2EE8               	decfsz	wreg,f,c
  4906  002780  D7FD               	bra	u2707
  4907  002782  0012               	return		;funcret
  4908  002784                     __end_of_lcdNibble:
  4909                           	opt stack 0
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodh	equ	0xFF4
  4915                           prodl	equ	0xFF3
  4916                           wreg	equ	0xFE8
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           fsr2h	equ	0xFDA
  4920                           fsr2l	equ	0xFD9
  4921                           status	equ	0xFD8
  4922                           
  4923 ;; *************** function _analogRead *****************
  4924 ;; Defined at:
  4925 ;;		line 88 in file "iopin.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  channel         2    0[COMRAM] int 
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;		None
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  4    0[COMRAM] long 
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4939 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;Total ram usage:        6 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; This function calls:
  4946 ;;		Nothing
  4947 ;; This function is called by:
  4948 ;;		_main
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           	psect	text24
  4953  00280A                     __ptext24:
  4954                           	opt stack 0
  4955  00280A                     _analogRead:
  4956                           	opt stack 30
  4957                           
  4958                           ;iopin.c: 89: ADCON0 = channel<<2;
  4959                           
  4960                           ;incstack = 0
  4961  00280A  4401               	rlncf	analogRead@channel,w,c
  4962  00280C  46E8               	rlncf	wreg,f,c
  4963  00280E  0BFC               	andlw	252
  4964  002810  6EC2               	movwf	4034,c	;volatile
  4965                           
  4966                           ;iopin.c: 90: ADCON0 |= 0b01;
  4967  002812  80C2               	bsf	4034,0,c	;volatile
  4968                           
  4969                           ;iopin.c: 91: ADCON0 |= 0b10;
  4970  002814  82C2               	bsf	4034,1,c	;volatile
  4971  002816                     l192:
  4972  002816  B2C2               	btfsc	4034,1,c	;volatile
  4973  002818  D7FE               	goto	l192
  4974                           
  4975                           ;iopin.c: 95: return (ADRESH<<8) + ADRESL;
  4976  00281A  50C3               	movf	4035,w,c	;volatile
  4977  00281C  CFC4 F005          	movff	4036,??_analogRead	;volatile
  4978  002820  6A06               	clrf	(??_analogRead+1)& (0+255),c
  4979  002822  C005  F006         	movff	??_analogRead,??_analogRead+1
  4980  002826  6A05               	clrf	??_analogRead,c
  4981  002828  2605               	addwf	??_analogRead,f,c
  4982  00282A  0E00               	movlw	0
  4983  00282C  2206               	addwfc	??_analogRead+1,f,c
  4984  00282E  C005  F001         	movff	??_analogRead,?_analogRead
  4985  002832  C006  F002         	movff	??_analogRead+1,?_analogRead+1
  4986  002836  0E00               	movlw	0
  4987  002838  BE02               	btfsc	?_analogRead+1,7,c
  4988  00283A  0EFF               	movlw	-1
  4989  00283C  6E03               	movwf	?_analogRead+2,c
  4990  00283E  6E04               	movwf	?_analogRead+3,c
  4991  002840  0012               	return	
  4992  002842                     __end_of_analogRead:
  4993                           	opt stack 0
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           wreg	equ	0xFE8
  5001                           postinc2	equ	0xFDE
  5002                           postdec2	equ	0xFDD
  5003                           fsr2h	equ	0xFDA
  5004                           fsr2l	equ	0xFD9
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function ___altoft *****************
  5008 ;; Defined at:
  5009 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  c               4    8[COMRAM] long 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  sign            1   17[COMRAM] unsigned char 
  5014 ;;  exp             1   16[COMRAM] unsigned char 
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  3    8[COMRAM] float 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0, cstack
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;Total ram usage:       10 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    1
  5031 ;; This function calls:
  5032 ;;		___ftpack
  5033 ;; This function is called by:
  5034 ;;		_main
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text25
  5039  002584                     __ptext25:
  5040                           	opt stack 0
  5041  002584                     ___altoft:
  5042                           	opt stack 29
  5043                           
  5044                           ;incstack = 0
  5045  002584  0E00               	movlw	0
  5046  002586  6E12               	movwf	___altoft@sign,c
  5047  002588  0E8E               	movlw	142
  5048  00258A  6E11               	movwf	___altoft@exp,c
  5049  00258C  AE0C               	btfss	___altoft@c+3,7,c
  5050  00258E  D011               	goto	l2640
  5051  002590  1E0C               	comf	___altoft@c+3,f,c
  5052  002592  1E0B               	comf	___altoft@c+2,f,c
  5053  002594  1E0A               	comf	___altoft@c+1,f,c
  5054  002596  6C09               	negf	___altoft@c,c
  5055  002598  0E00               	movlw	0
  5056  00259A  220A               	addwfc	___altoft@c+1,f,c
  5057  00259C  220B               	addwfc	___altoft@c+2,f,c
  5058  00259E  220C               	addwfc	___altoft@c+3,f,c
  5059  0025A0  0E01               	movlw	1
  5060  0025A2  6E12               	movwf	___altoft@sign,c
  5061  0025A4  D006               	goto	l2640
  5062  0025A6                     l2638:
  5063  0025A6  90D8               	bcf	status,0,c
  5064  0025A8  320C               	rrcf	___altoft@c+3,f,c
  5065  0025AA  320B               	rrcf	___altoft@c+2,f,c
  5066  0025AC  320A               	rrcf	___altoft@c+1,f,c
  5067  0025AE  3209               	rrcf	___altoft@c,f,c
  5068  0025B0  2A11               	incf	___altoft@exp,f,c
  5069  0025B2                     l2640:
  5070  0025B2  0E00               	movlw	0
  5071  0025B4  1409               	andwf	___altoft@c,w,c
  5072  0025B6  6E0D               	movwf	??___altoft& (0+255),c
  5073  0025B8  0E00               	movlw	0
  5074  0025BA  140A               	andwf	___altoft@c+1,w,c
  5075  0025BC  6E0E               	movwf	(??___altoft+1)& (0+255),c
  5076  0025BE  0E00               	movlw	0
  5077  0025C0  140B               	andwf	___altoft@c+2,w,c
  5078  0025C2  6E0F               	movwf	(??___altoft+2)& (0+255),c
  5079  0025C4  0EFF               	movlw	255
  5080  0025C6  140C               	andwf	___altoft@c+3,w,c
  5081  0025C8  6E10               	movwf	(??___altoft+3)& (0+255),c
  5082  0025CA  500D               	movf	??___altoft,w,c
  5083  0025CC  100E               	iorwf	??___altoft+1,w,c
  5084  0025CE  100F               	iorwf	??___altoft+2,w,c
  5085  0025D0  1010               	iorwf	??___altoft+3,w,c
  5086  0025D2  A4D8               	btfss	status,2,c
  5087  0025D4  D7E8               	goto	l2638
  5088  0025D6  C009  F001         	movff	___altoft@c,___ftpack@arg
  5089  0025DA  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5090  0025DE  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5091  0025E2  C011  F004         	movff	___altoft@exp,___ftpack@exp
  5092  0025E6  C012  F005         	movff	___altoft@sign,___ftpack@sign
  5093  0025EA  ECA0  F011         	call	___ftpack	;wreg free
  5094  0025EE  C001  F009         	movff	?___ftpack,?___altoft
  5095  0025F2  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  5096  0025F6  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  5097  0025FA  0012               	return	
  5098  0025FC                     __end_of___altoft:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           prodh	equ	0xFF4
  5105                           prodl	equ	0xFF3
  5106                           wreg	equ	0xFE8
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function ___ftpack *****************
  5114 ;; Defined at:
  5115 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  arg             3    0[COMRAM] unsigned um
  5118 ;;  exp             1    3[COMRAM] unsigned char 
  5119 ;;  sign            1    4[COMRAM] unsigned char 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;		None
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  3    0[COMRAM] float 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5131 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;Total ram usage:        8 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		___altoft
  5141 ;;		___ftadd
  5142 ;;		___ftmul
  5143 ;;		___lltoft
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text26
  5148  002340                     __ptext26:
  5149                           	opt stack 0
  5150  002340                     ___ftpack:
  5151                           	opt stack 27
  5152                           
  5153                           ;incstack = 0
  5154  002340  5004               	movf	___ftpack@exp,w,c
  5155  002342  B4D8               	btfsc	status,2,c
  5156  002344  D005               	goto	l1906
  5157  002346  5001               	movf	___ftpack@arg,w,c
  5158  002348  1002               	iorwf	___ftpack@arg+1,w,c
  5159  00234A  1003               	iorwf	___ftpack@arg+2,w,c
  5160  00234C  A4D8               	btfss	status,2,c
  5161  00234E  D00C               	goto	l1912
  5162  002350                     l1906:
  5163  002350  0E00               	movlw	0
  5164  002352  6E01               	movwf	?___ftpack,c
  5165  002354  0E00               	movlw	0
  5166  002356  6E02               	movwf	?___ftpack+1,c
  5167  002358  0E00               	movlw	0
  5168  00235A  6E03               	movwf	?___ftpack+2,c
  5169  00235C  0012               	return	
  5170  00235E                     l1910:
  5171  00235E  2A04               	incf	___ftpack@exp,f,c
  5172  002360  90D8               	bcf	status,0,c
  5173  002362  3203               	rrcf	___ftpack@arg+2,f,c
  5174  002364  3202               	rrcf	___ftpack@arg+1,f,c
  5175  002366  3201               	rrcf	___ftpack@arg,f,c
  5176  002368                     l1912:
  5177  002368  0E00               	movlw	0
  5178  00236A  1401               	andwf	___ftpack@arg,w,c
  5179  00236C  6E06               	movwf	??___ftpack& (0+255),c
  5180  00236E  0E00               	movlw	0
  5181  002370  1402               	andwf	___ftpack@arg+1,w,c
  5182  002372  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5183  002374  0EFE               	movlw	254
  5184  002376  1403               	andwf	___ftpack@arg+2,w,c
  5185  002378  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5186  00237A  5006               	movf	??___ftpack,w,c
  5187  00237C  1007               	iorwf	??___ftpack+1,w,c
  5188  00237E  1008               	iorwf	??___ftpack+2,w,c
  5189  002380  B4D8               	btfsc	status,2,c
  5190  002382  D00C               	goto	l1918
  5191  002384  D7EC               	goto	l1910
  5192  002386                     l1914:
  5193  002386  2A04               	incf	___ftpack@exp,f,c
  5194  002388  0E01               	movlw	1
  5195  00238A  2601               	addwf	___ftpack@arg,f,c
  5196  00238C  0E00               	movlw	0
  5197  00238E  2202               	addwfc	___ftpack@arg+1,f,c
  5198  002390  0E00               	movlw	0
  5199  002392  2203               	addwfc	___ftpack@arg+2,f,c
  5200  002394  90D8               	bcf	status,0,c
  5201  002396  3203               	rrcf	___ftpack@arg+2,f,c
  5202  002398  3202               	rrcf	___ftpack@arg+1,f,c
  5203  00239A  3201               	rrcf	___ftpack@arg,f,c
  5204  00239C                     l1918:
  5205  00239C  0E00               	movlw	0
  5206  00239E  1401               	andwf	___ftpack@arg,w,c
  5207  0023A0  6E06               	movwf	??___ftpack& (0+255),c
  5208  0023A2  0E00               	movlw	0
  5209  0023A4  1402               	andwf	___ftpack@arg+1,w,c
  5210  0023A6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5211  0023A8  0EFF               	movlw	255
  5212  0023AA  1403               	andwf	___ftpack@arg+2,w,c
  5213  0023AC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5214  0023AE  5006               	movf	??___ftpack,w,c
  5215  0023B0  1007               	iorwf	??___ftpack+1,w,c
  5216  0023B2  1008               	iorwf	??___ftpack+2,w,c
  5217  0023B4  B4D8               	btfsc	status,2,c
  5218  0023B6  D006               	goto	l1922
  5219  0023B8  D7E6               	goto	l1914
  5220  0023BA                     l1920:
  5221  0023BA  0604               	decf	___ftpack@exp,f,c
  5222  0023BC  90D8               	bcf	status,0,c
  5223  0023BE  3601               	rlcf	___ftpack@arg,f,c
  5224  0023C0  3602               	rlcf	___ftpack@arg+1,f,c
  5225  0023C2  3603               	rlcf	___ftpack@arg+2,f,c
  5226  0023C4                     l1922:
  5227  0023C4  BE02               	btfsc	___ftpack@arg+1,7,c
  5228  0023C6  D003               	goto	l520
  5229  0023C8  0E02               	movlw	2
  5230  0023CA  6004               	cpfslt	___ftpack@exp,c
  5231  0023CC  D7F6               	goto	l1920
  5232  0023CE                     l520:
  5233  0023CE  A004               	btfss	___ftpack@exp,0,c
  5234  0023D0  9E02               	bcf	___ftpack@arg+1,7,c
  5235  0023D2  90D8               	bcf	status,0,c
  5236  0023D4  3204               	rrcf	___ftpack@exp,f,c
  5237  0023D6  5004               	movf	___ftpack@exp,w,c
  5238  0023D8  1203               	iorwf	___ftpack@arg+2,f,c
  5239  0023DA  5005               	movf	___ftpack@sign,w,c
  5240  0023DC  A4D8               	btfss	status,2,c
  5241  0023DE  8E03               	bsf	___ftpack@arg+2,7,c
  5242  0023E0  C001  F001         	movff	___ftpack@arg,?___ftpack
  5243  0023E4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5244  0023E8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5245  0023EC  0012               	return	
  5246  0023EE                     __end_of___ftpack:
  5247                           	opt stack 0
  5248                           tblptru	equ	0xFF8
  5249                           tblptrh	equ	0xFF7
  5250                           tblptrl	equ	0xFF6
  5251                           tablat	equ	0xFF5
  5252                           prodh	equ	0xFF4
  5253                           prodl	equ	0xFF3
  5254                           wreg	equ	0xFE8
  5255                           postinc2	equ	0xFDE
  5256                           postdec2	equ	0xFDD
  5257                           fsr2h	equ	0xFDA
  5258                           fsr2l	equ	0xFD9
  5259                           status	equ	0xFD8
  5260                           tblptru	equ	0xFF8
  5261                           tblptrh	equ	0xFF7
  5262                           tblptrl	equ	0xFF6
  5263                           tablat	equ	0xFF5
  5264                           prodh	equ	0xFF4
  5265                           prodl	equ	0xFF3
  5266                           wreg	equ	0xFE8
  5267                           postinc2	equ	0xFDE
  5268                           postdec2	equ	0xFDD
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273                           	psect	rparam
  5274  0000                     tblptru	equ	0xFF8
  5275                           tblptrh	equ	0xFF7
  5276                           tblptrl	equ	0xFF6
  5277                           tablat	equ	0xFF5
  5278                           prodh	equ	0xFF4
  5279                           prodl	equ	0xFF3
  5280                           wreg	equ	0xFE8
  5281                           postinc2	equ	0xFDE
  5282                           postdec2	equ	0xFDD
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    135
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    106     106
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcdClear->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___altoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   49329
                                             97 COMRAM     9     9      0
                           ___altoft
                            ___ftmul
                         _analogRead
                            _initLCD
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   42237
                                             63 COMRAM    34    29      5
                           ___altoft (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10142
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     292
                                              4 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3    9944
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2207
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4418
                                             20 COMRAM    15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2203
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3565
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3268
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              2     2      0     135
                                              2 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _analogRead                                           6     2      4      86
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___altoft                                            10     6      4    2272
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2070
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___altoft
     ___ftpack
   ___ftmul
     ___altoft (ARG)
       ___ftpack
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _analogRead
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdClear
     _lcdInst
       _lcdNibble
   _printf
     ___altoft (ARG)
       ___ftpack
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     6A      6A       1       83.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 24 00:22:51 2017

           ___altoft@exp 0011            ___altoft@sign 0012                       l70 289C  
           ___awdiv@sign 000C      ___wmul@multiplicand 0011              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000             ___ftadd@exp1 0039  
           ___ftadd@exp2 0038             ___ftadd@sign 0037                      l520 23CE  
                    l192 2816                      l267 14BC                      l543 1CCA  
                    l617 287E                      l547 1CF4                      l558 1DA4  
                    l662 2572                      l567 1DC0                      l672 26C0  
                    l488 207A                      l592 1F52                      l585 1EC4  
                    l586 1EEC             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
           ___awmod@sign 0006                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l2002 1DDC                     l2012 1E0C  
                   l2100 24EA                     l2022 20B4                     l2104 24F8  
                   l2120 261C                     l2042 210E                     l2202 1978  
                   l2140 2662                     l2132 264A                     l2124 262A  
                   l2116 2610                     l2052 2136                     l2028 20DC  
                   l2302 2012                     l2126 2632                     l2046 211E  
                   l2400 2262                     l2224 1E8A                     l2072 2492  
                   l2128 2636                     l2136 2654                     l2056 2146  
                   l2208 1A1C                     l2410 2524                     l2314 2040  
                   l2218 1E5E                     l2170 1C46                     l2162 1B86  
                   l2340 241E                     l2332 27E0                     l2412 2530  
                   l2324 2068                     l2084 24B8                     l2350 247A  
                   l2422 2564                     l2414 2534                     l2430 267E  
                   l2326 2074                     l2318 2050                     l2254 1F18  
                   l2086 24C0                     l2078 24A2                     l2190 1828  
                   l2510 1254                     l2344 244E                     l2432 268A  
                   l2280 1FA0                     l2264 1F40                     l2096 24E0  
                   l2088 24C4                     l2184 1784                     l2520 12C6  
                   l2512 1282                     l2504 1220                     l2434 268E  
                   l2274 1F82                     l2266 1F4C                     l2258 1F28  
                   l2194 184C                     l2514 1292                     l2602 1636  
                   l2364 21AC                     l2444 26D8                     l2540 13A6  
                   l2524 12EA                     l2508 1244                     l2460 10B6  
                   l1910 235E                     l2382 2212                     l2438 26B2  
                   l2446 26E4                     l2294 1FE2                     l2534 133E  
                   l2454 109C                     l1920 23BA                     l1912 2368  
                   l2640 25B2                     l2392 223A                     l2552 13DE  
                   l2480 112C                     l2464 10BA                     l1922 23C4  
                   l1914 2386                     l1906 2350                     l2394 2246  
                   l2386 2222                     l2570 14A6                     l2562 1482  
                   l2538 13A2                     l2466 10DC                     l2458 10AC  
                   l2396 224C                     l2580 14D8                     l2564 148C  
                   l2556 13FA                     l1918 239C                     l2638 25A6  
                   l2590 15FC                     l2574 14C0                     l1960 1D02  
                   l2592 1606                     l2584 1528                     l2568 1498  
                   l2496 11BC                     l1954 1CD8                     l2596 1612  
                   l1982 1D54                     l2598 161C                     l2678 22B4  
                   l1984 1D5E                     l1976 1D32                     l1994 1D92  
                   l1986 1D68                     l1996 1D9C                     l1988 1D70  
                   STR_1 108E                     STR_2 108C                     STR_3 1088  
                   u2141 2190                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     u2160 21CA                     _LATD 000F8C  
                   _LATE 000F8D                     u2330 1164                     u1461 1C96  
                   u2165 21C2                     u1471 1CAA                     u2335 115A  
                   u1671 209C                     u2617 2332                     u2490 14B6  
                   u2707 277C                     u1931 1E42                     u1691 20C4  
                   u2627 28A0             printf@tmpval 005A                     u2637 278A  
                   u2647 27BE                     u1951 1E6E                     u2657 28B4  
                   u2667 28C6                     u2677 2746                     u2687 2750  
                   u2697 2772                     _main 2274             ___ftpack@arg 0001  
                   _keys 1077             ___ftpack@exp 0004                     fsr2h 000FDA  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000              main@voltage 0064  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 0022             ___param_bank 000000  
           ___ftmul@sign 0023             ___fttol@exp1 0039             ___fttol@lval 0035  
                  ?_main 0001          __end_of___awdiv 2502          __end_of___ftadd 1E32  
        __end_of___awmod 266C          __end_of___ftneg 288C          __end_of___lldiv 2584  
        __end_of___ftmul 2180          ___awdiv@divisor 0009          __end_of___llmod 26D2  
        __end_of___ftsub 280A          __end_of___fttol 2274          ___awdiv@counter 000B  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTD 000F83                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000             ___lltoft@exp 0011  
        __end_of_lcdInst 28D0           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initLCD 27CA           __CFG_EBTRB$OFF 000000          __end_of_dpowers 1029  
                  _scale 1650            ___ftpack@sign 0005                    _putch 288C  
                  tablat 000FF5                    status 000FD8           __CFG_PBADEN$ON 000000  
        __initialization 28D0             __end_of_main 2340             __end_of_keys 1088  
                 ??_main 0062            ___fttol@sign1 0034            __activetblptr 000002  
   __size_of__tdiv_to_l_ 0132                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0         __end_of___altoft 25FC         ___llmod@dividend 0001  
                 ?_scale 0024                   _ADRESH 000FC4                   _ADRESL 000FC3  
       ___awdiv@dividend 0007                   ?_putch 0001         __end_of___ftpack 23EE  
       __end_of___lltoft 272E         __end_of_lcdClear 28EA           __CFG_XINST$OFF 000000  
       __end_of__powers_ 1077                   ___ftge 23EE                   ___wmul 2842  
              ??___awdiv 000B                ??___ftadd 0034           __CFG_STVREN$ON 000000  
              ??___awmod 0005                ??___ftneg 0004                ??___lldiv 0009  
              ??___ftmul 001B                ??___llmod 0009                ??___ftsub 0040  
              ??___fttol 002F                   _fround 1A40         ___awdiv@quotient 000D  
        ___awmod@divisor 0003          ___awmod@counter 0005                ??_lcdInst 0003  
                 _printf 1092        analogRead@channel 0001    ___ftmul@f3_as_product 001F  
              ??_initLCD 0005             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization 28D0               ___altoft@c 0009               ___ftadd@f1 002E  
             ___ftadd@f2 0031               ___ftge@ff1 0001               ___ftge@ff2 0004  
          ___rparam_used 000001               ___ftneg@f1 0001               ___ftmul@f1 0015  
             ___ftmul@f2 0018               ___ftsub@f1 003A               ___ftsub@f2 003D  
             ___fttol@f1 002B           __pcstackCOMRAM 0001               ___lltoft@c 0009  
          __end_of_scale 1A40            __end_of_putch 28AE       __size_of_lcdNibble 0056  
             __div_to_l_ 1F64          __div_to_l_@exp1 000C          __div_to_l_@cntr 000B  
                ??_scale 0027          __div_to_l_@quot 0007                  ??_putch 0005  
             _analogRead 280A            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
                ?___ftge 0001                  ?___wmul 000F                ?___altoft 0009  
                ?_fround 0024               _lcdNewline 28DA                ?___ftpack 0001  
                ?_printf 0040                ?___lltoft 0009                ?_lcdClear 0001  
      __end_of_lcdNibble 2784        __end_of__npowers_ 1050                  __Hparam 0000  
                __Lparam 0000          __size_of___ftge 0090                  ___awdiv 247E  
                ___ftadd 1C86                  ___awmod 25FC                  ___ftneg 2868  
                ___lldiv 2502          __size_of___wmul 0026                  ___ftmul 208C  
                ___llmod 266C                  ___ftsub 27CA                  ___fttol 2180  
             _fround$870 0027               _fround$869 002A             __psmallconst 1000  
             ??___altoft 000D                  __pcinit 28D0               ??___ftpack 0006  
        __size_of_fround 0246                  __ramtop 1000                  _lcdInst 28AE  
             ??___lltoft 000D                  __ptext0 2274                  __ptext1 1092  
                __ptext2 1650                  __ptext3 288C                  __ptext4 28DA  
                __ptext5 1A40                  __ptext6 2842                  __ptext7 208C  
                __ptext8 25FC                  __ptext9 247E          __size_of_printf 05BE  
                _initLCD 2784              ?__div_to_l_ 0001                  _dpowers 1001  
       ___awmod@dividend 0001               ??_lcdClear 0005     end_of_initialization 28D0  
          __Lmediumconst 0000              ?_analogRead 0001          ___lldiv@divisor 0005  
        ___lldiv@counter 000D                  printf@c 0061                  printf@f 0040  
                postdec2 000FDD                  postinc2 000FDE           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004               _printf$872 004B              ?_lcdNewline 0001  
          ??__tdiv_to_l_ 0007                _PORTBbits 000F81      __size_of__div_to_l_ 0128  
            ___ftmul@exp 001E           __end_of___ftge 247E           __end_of___wmul 2868  
         __end_of_fround 1C86           __end_of_printf 1650      __size_of_analogRead 0038  
    start_initialization 28D0      __end_of__tdiv_to_l_ 1F64      __size_of_lcdNewline 0008  
        ___llmod@divisor 0005          ___llmod@counter 0009                 ??___ftge 0007  
               ??___wmul 0013         __CFG_LPT1OSC$OFF 000000                 ??_fround 0027  
               ??_printf 0045        __size_of___altoft 0078               fround@prec 002D  
      __size_of___ftpack 00AE        __size_of___lltoft 005C        __size_of_lcdClear 0008  
      __CFG_CCP2MX$PORTC 000000                _lcdNibble 272E                 ?___awdiv 0007  
               ?___ftadd 002E                 ?___awmod 0001                 ?___ftneg 0001  
               ?___lldiv 0001                 ?___ftmul 0015                 ?___llmod 0001  
               ?___ftsub 003A                __npowers_ 1029                 ?___fttol 002B  
               ?_lcdInst 0001              __tdiv_to_l_ 1E32             ??__div_to_l_ 0007  
               ?_initLCD 0001              __smallconst 1000                _scale$871 0027  
         __size_of_scale 03F0           __size_of_putch 0022           ___wmul@product 0013  
               _LATDbits 000F8C             ??_analogRead 0005       __end_of__div_to_l_ 208C  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0001             ??_lcdNewline 0005  
      ___wmul@multiplier 000F            lcdNibble@data 0002               printf@flag 0050  
          lcdNibble@temp 0001               printf@fval 005E               printf@prec 0052  
     __end_of_analogRead 2842       __end_of_lcdNewline 28E2                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___awmod 0070         __size_of___ftneg 0024  
       __size_of___lldiv 0082                 ___altoft 2584         __size_of___ftmul 00F4  
       __size_of___llmod 0066         __size_of___ftsub 0040         __size_of___fttol 00F4  
               ___ftpack 2340                 ___lltoft 26D2         __size_of_lcdInst 0022  
       __size_of_initLCD 0046                 _main$868 0068                 _lcdClear 28E2  
               __ptext10 1E32                 __ptext11 1F64                 __ptext20 28E2  
               __ptext12 26D2                 __ptext21 2784                 __ptext13 266C  
               __ptext22 28AE                 __ptext14 2502                 __ptext23 272E  
               __ptext15 2180                 __ptext24 280A                 __ptext16 27CA  
               __ptext25 2584                 __ptext17 1C86                 __ptext26 2340  
               __ptext18 2868                 __ptext19 23EE                 __powers_ 1050  
          __size_of_main 00CC              ??_lcdNibble 0001                printf@exp 0058  
              printf@val 0054                putch@data 0005                 scale@scl 002A  
       __tdiv_to_l_@exp1 000F         __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A  
       ___lldiv@dividend 0001                 printf@ap 004E              lcdInst@data 0004  
           ?__tdiv_to_l_ 0001         ___lldiv@quotient 0009  
