

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Apr 08 11:12:51 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    80                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    88                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           ; Version 1.40
    91                           ; Generated 01/12/2016 GMT
    92                           ; 
    93                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC18F4620 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     
   125                           	psect	idataCOMRAM
   126  003C84                     __pidataCOMRAM:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _V_LIM_9V
   130  003C84  77                 	db	119
   131  003C85  EE                 	db	238
   132  003C86  3F                 	db	63
   133                           
   134                           ;initializer for _V_LIM_AA
   135  003C87  C1                 	db	193
   136  003C88  4A                 	db	74
   137  003C89  3E                 	db	62
   138                           
   139                           ;initializer for _V_LIM_C
   140  003C8A  A7                 	db	167
   141  003C8B  A9                 	db	169
   142  003C8C  3F                 	db	63
   143                           
   144                           ;initializer for _padAngle_CLOSE
   145  003C8D  0046               	dw	70
   146                           
   147                           ;initializer for _padAngle_NEUTRAL
   148  003C8F  0082               	dw	130
   149                           
   150                           ;initializer for _redirectAngle_AA
   151  003C91  008A               	dw	138
   152                           
   153                           ;initializer for _redirectAngle_OTHER
   154  003C93  0099               	dw	153
   155                           
   156                           ;initializer for _stoppingTime
   157  003C95  2710               	dw	10000
   158                           
   159                           	psect	idataBANK1
   160  003B14                     __pidataBANK1:
   161                           	opt stack 0
   162                           
   163                           ;initializer for _cylinderDir
   164  003B14  0003               	dw	3
   165  003B16  0001               	dw	1
   166                           
   167                           ;initializer for _angle
   168  003B18  005A               	dw	90
   169                           
   170                           ;initializer for _padAngle_OPEN
   171  003B1A  00B4               	dw	180
   172                           
   173                           ;initializer for _redirectAngle_9V
   174  003B1C  0076               	dw	118
   175                           
   176                           ;initializer for _redirectAngle_C
   177  003B1E  00A6               	dw	166
   178                           
   179                           ;initializer for _AA_float
   180  003B20  0002               	dw	2
   181  003B22  0005               	dw	5
   182                           
   183                           ;initializer for _conveyorServo
   184  003B24  0002               	dw	2
   185  003B26  0002               	dw	2
   186                           
   187                           ;initializer for _cylinderMotor
   188  003B28  0002               	dw	2
   189  003B2A  0000               	dw	0
   190                           
   191                           ;initializer for _padPin1
   192  003B2C  0002               	dw	2
   193  003B2E  0006               	dw	6
   194                           
   195                           ;initializer for _padPin2
   196  003B30  0002               	dw	2
   197  003B32  0007               	dw	7
   198                           
   199                           ;initializer for _padServo
   200  003B34  0002               	dw	2
   201  003B36  0001               	dw	1
   202                           
   203                           ;initializer for _redirectingServo
   204  003B38  0003               	dw	3
   205  003B3A  0000               	dw	0
   206                           
   207                           	psect	mediumconst
   208  00FDF0                     __pmediumconst:
   209                           	opt stack 0
   210  00FDF0  00                 	db	0
   211  00FDF1                     _dpowers:
   212                           	opt stack 0
   213  00FDF1  0001               	dw	1
   214  00FDF3  0000               	dw	0
   215  00FDF5  000A               	dw	10
   216  00FDF7  0000               	dw	0
   217  00FDF9  0064               	dw	100
   218  00FDFB  0000               	dw	0
   219  00FDFD  03E8               	dw	1000
   220  00FDFF  0000               	dw	0
   221  00FE01  2710               	dw	10000
   222  00FE03  0000               	dw	0
   223  00FE05  86A0               	dw	34464
   224  00FE07  0001               	dw	1
   225  00FE09  4240               	dw	16960
   226  00FE0B  000F               	dw	15
   227  00FE0D  9680               	dw	38528
   228  00FE0F  0098               	dw	152
   229  00FE11  E100               	dw	57600
   230  00FE13  05F5               	dw	1525
   231  00FE15  CA00               	dw	51712
   232  00FE17  3B9A               	dw	15258
   233  00FE19                     __end_of_dpowers:
   234                           	opt stack 0
   235  00FE19                     __npowers_:
   236                           	opt stack 0
   237  00FE19  00                 	db	0
   238  00FE1A  80                 	db	128
   239  00FE1B  3F                 	db	63
   240  00FE1C  CD                 	db	205
   241  00FE1D  CC                 	db	204
   242  00FE1E  3D                 	db	61
   243  00FE1F  D7                 	db	215
   244  00FE20  23                 	db	35
   245  00FE21  3C                 	db	60
   246  00FE22  12                 	db	18
   247  00FE23  83                 	db	131
   248  00FE24  3A                 	db	58
   249  00FE25  B7                 	db	183
   250  00FE26  D1                 	db	209
   251  00FE27  38                 	db	56
   252  00FE28  C6                 	db	198
   253  00FE29  27                 	db	39
   254  00FE2A  37                 	db	55
   255  00FE2B  38                 	db	56
   256  00FE2C  86                 	db	134
   257  00FE2D  35                 	db	53
   258  00FE2E  C0                 	db	192
   259  00FE2F  D6                 	db	214
   260  00FE30  33                 	db	51
   261  00FE31  CC                 	db	204
   262  00FE32  2B                 	db	43
   263  00FE33  32                 	db	50
   264  00FE34  70                 	db	112
   265  00FE35  89                 	db	137
   266  00FE36  30                 	db	48
   267  00FE37  E7                 	db	231
   268  00FE38  DB                 	db	219
   269  00FE39  2E                 	db	46
   270  00FE3A  E5                 	db	229
   271  00FE3B  3C                 	db	60
   272  00FE3C  1E                 	db	30
   273  00FE3D  42                 	db	66
   274  00FE3E  A2                 	db	162
   275  00FE3F  0D                 	db	13
   276  00FE40                     __end_of__npowers_:
   277                           	opt stack 0
   278  00FE40                     __powers_:
   279                           	opt stack 0
   280  00FE40  00                 	db	0
   281  00FE41  80                 	db	128
   282  00FE42  3F                 	db	63
   283  00FE43  00                 	db	0
   284  00FE44  20                 	db	32
   285  00FE45  41                 	db	65
   286  00FE46  00                 	db	0
   287  00FE47  C8                 	db	200
   288  00FE48  42                 	db	66
   289  00FE49  00                 	db	0
   290  00FE4A  7A                 	db	122
   291  00FE4B  44                 	db	68
   292  00FE4C  40                 	db	64
   293  00FE4D  1C                 	db	28
   294  00FE4E  46                 	db	70
   295  00FE4F  50                 	db	80
   296  00FE50  C3                 	db	195
   297  00FE51  47                 	db	71
   298  00FE52  24                 	db	36
   299  00FE53  74                 	db	116
   300  00FE54  49                 	db	73
   301  00FE55  97                 	db	151
   302  00FE56  18                 	db	24
   303  00FE57  4B                 	db	75
   304  00FE58  BC                 	db	188
   305  00FE59  BE                 	db	190
   306  00FE5A  4C                 	db	76
   307  00FE5B  6B                 	db	107
   308  00FE5C  6E                 	db	110
   309  00FE5D  4E                 	db	78
   310  00FE5E  03                 	db	3
   311  00FE5F  15                 	db	21
   312  00FE60  50                 	db	80
   313  00FE61  79                 	db	121
   314  00FE62  AD                 	db	173
   315  00FE63  60                 	db	96
   316  00FE64  F3                 	db	243
   317  00FE65  49                 	db	73
   318  00FE66  71                 	db	113
   319  00FE67                     __end_of__powers_:
   320                           	opt stack 0
   321  00FE67                     _hexpowers:
   322                           	opt stack 0
   323  00FE67  0001               	dw	1
   324  00FE69  0000               	dw	0
   325  00FE6B  0010               	dw	16
   326  00FE6D  0000               	dw	0
   327  00FE6F  0100               	dw	256
   328  00FE71  0000               	dw	0
   329  00FE73  1000               	dw	4096
   330  00FE75  0000               	dw	0
   331  00FE77  0000               	dw	0
   332  00FE79  0001               	dw	1
   333  00FE7B  0000               	dw	0
   334  00FE7D  0010               	dw	16
   335  00FE7F  0000               	dw	0
   336  00FE81  0100               	dw	256
   337  00FE83  0000               	dw	0
   338  00FE85  1000               	dw	4096
   339  00FE87                     __end_of_hexpowers:
   340                           	opt stack 0
   341  00FE87                     _keys:
   342                           	opt stack 0
   343  00FE87  31                 	db	49
   344  00FE88  32                 	db	50
   345  00FE89  33                 	db	51
   346  00FE8A  41                 	db	65
   347  00FE8B  34                 	db	52
   348  00FE8C  35                 	db	53
   349  00FE8D  36                 	db	54
   350  00FE8E  42                 	db	66
   351  00FE8F  37                 	db	55
   352  00FE90  38                 	db	56
   353  00FE91  39                 	db	57
   354  00FE92  43                 	db	67
   355  00FE93  2A                 	db	42
   356  00FE94  30                 	db	48
   357  00FE95  23                 	db	35
   358  00FE96  44                 	db	68
   359  00FE97  00                 	db	0
   360  00FE98                     __end_of_keys:
   361                           	opt stack 0
   362  00FE98                     _happynewyear:
   363                           	opt stack 0
   364  00FE98  00                 	db	0
   365  00FE99  00                 	db	0
   366  00FE9A  00                 	db	0
   367  00FE9B  01                 	db	1
   368  00FE9C  08                 	db	8
   369  00FE9D  04                 	db	4
   370  00FE9E  17                 	db	23
   371  00FE9F                     __end_of_happynewyear:
   372                           	opt stack 0
   373  0000                     _ADCON0	set	4034
   374  0000                     _ADCON1	set	4033
   375  0000                     _ADCON2	set	4032
   376  0000                     _ADRESH	set	4036
   377  0000                     _ADRESL	set	4035
   378  0000                     _EEADR	set	4009
   379  0000                     _EEADRH	set	4010
   380  0000                     _EECON1	set	4006
   381  0000                     _EECON2	set	4007
   382  0000                     _EEDATA	set	4008
   383  0000                     _INTCONbits	set	4082
   384  0000                     _LATA	set	3977
   385  0000                     _LATB	set	3978
   386  0000                     _LATC	set	3979
   387  0000                     _LATD	set	3980
   388  0000                     _LATDbits	set	3980
   389  0000                     _LATE	set	3981
   390  0000                     _PORTA	set	3968
   391  0000                     _PORTB	set	3969
   392  0000                     _PORTBbits	set	3969
   393  0000                     _PORTC	set	3970
   394  0000                     _PORTD	set	3971
   395  0000                     _SSPADD	set	4040
   396  0000                     _SSPBUF	set	4041
   397  0000                     _SSPCON1	set	4038
   398  0000                     _SSPCON2	set	4037
   399  0000                     _SSPSTAT	set	4039
   400  0000                     _T0CON	set	4053
   401  0000                     _T1CON	set	4045
   402  0000                     _T3CON	set	4017
   403  0000                     _TMR0H	set	4055
   404  0000                     _TMR0L	set	4054
   405  0000                     _TMR1H	set	4047
   406  0000                     _TMR1L	set	4046
   407  0000                     _TMR3H	set	4019
   408  0000                     _TMR3L	set	4018
   409  0000                     _TRISA	set	3986
   410  0000                     _TRISB	set	3987
   411  0000                     _TRISC	set	3988
   412  0000                     _TRISD	set	3989
   413  0000                     _TRISE	set	3990
   414  0000                     _ACKDT	set	32301
   415  0000                     _ACKEN	set	32300
   416  0000                     _EEIF	set	32012
   417  0000                     _INT0IE	set	32660
   418  0000                     _INT0IF	set	32657
   419  0000                     _INT1IE	set	32643
   420  0000                     _INT1IF	set	32640
   421  0000                     _PEIE	set	32662
   422  0000                     _PEN	set	32298
   423  0000                     _RCEN	set	32299
   424  0000                     _RSEN	set	32297
   425  0000                     _SEN	set	32296
   426  0000                     _TMR0IE	set	32661
   427  0000                     _TMR0IF	set	32658
   428  0000                     _TMR1IE	set	31976
   429  0000                     _TMR1IF	set	31984
   430  0000                     _TMR3IE	set	32001
   431  0000                     _TRISC3	set	31907
   432  0000                     _TRISC4	set	31908
   433  00FE9F                     STR_11:
   434  00FE9F  20                 	db	32
   435  00FEA0  20                 	db	32
   436  00FEA1  20                 	db	32
   437  00FEA2  25                 	db	37
   438  00FEA3  30                 	db	48	;'0'
   439  00FEA4  32                 	db	50	;'2'
   440  00FEA5  78                 	db	120	;'x'
   441  00FEA6  3A                 	db	58	;':'
   442  00FEA7  25                 	db	37
   443  00FEA8  30                 	db	48	;'0'
   444  00FEA9  32                 	db	50	;'2'
   445  00FEAA  78                 	db	120	;'x'
   446  00FEAB  3A                 	db	58	;':'
   447  00FEAC  25                 	db	37
   448  00FEAD  30                 	db	48	;'0'
   449  00FEAE  32                 	db	50	;'2'
   450  00FEAF  78                 	db	120	;'x'
   451  00FEB0  20                 	db	32
   452  00FEB1  20                 	db	32
   453  00FEB2  20                 	db	32
   454  00FEB3  41                 	db	65	;'A'
   455  00FEB4  3E                 	db	62	;'>'
   456  00FEB5  00                 	db	0
   457  00FEB6                     STR_10:
   458  00FEB6  20                 	db	32
   459  00FEB7  20                 	db	32
   460  00FEB8  32                 	db	50	;'2'
   461  00FEB9  30                 	db	48	;'0'
   462  00FEBA  25                 	db	37
   463  00FEBB  30                 	db	48	;'0'
   464  00FEBC  32                 	db	50	;'2'
   465  00FEBD  78                 	db	120	;'x'
   466  00FEBE  2F                 	db	47
   467  00FEBF  25                 	db	37
   468  00FEC0  30                 	db	48	;'0'
   469  00FEC1  32                 	db	50	;'2'
   470  00FEC2  78                 	db	120	;'x'
   471  00FEC3  2F                 	db	47
   472  00FEC4  25                 	db	37
   473  00FEC5  30                 	db	48	;'0'
   474  00FEC6  32                 	db	50	;'2'
   475  00FEC7  78                 	db	120	;'x'
   476  00FEC8  0A                 	db	10
   477  00FEC9  00                 	db	0
   478  00FECA                     STR_16:
   479  00FECA  25                 	db	37
   480  00FECB  63                 	db	99	;'c'
   481  00FECC  29                 	db	41
   482  00FECD  20                 	db	32
   483  00FECE  74                 	db	116	;'t'
   484  00FECF  69                 	db	105	;'i'
   485  00FED0  6D                 	db	109	;'m'
   486  00FED1  65                 	db	101	;'e'
   487  00FED2  20                 	db	32
   488  00FED3  20                 	db	32
   489  00FED4  3C                 	db	60	;'<'
   490  00FED5  41                 	db	65	;'A'
   491  00FED6  20                 	db	32
   492  00FED7  20                 	db	32
   493  00FED8  20                 	db	32
   494  00FED9  20                 	db	32
   495  00FEDA  20                 	db	32
   496  00FEDB  0A                 	db	10
   497  00FEDC  00                 	db	0
   498  00FEDD                     STR_18:
   499  00FEDD  74                 	db	116	;'t'
   500  00FEDE  69                 	db	105	;'i'
   501  00FEDF  6D                 	db	109	;'m'
   502  00FEE0  65                 	db	101	;'e'
   503  00FEE1  3A                 	db	58	;':'
   504  00FEE2  20                 	db	32
   505  00FEE3  25                 	db	37
   506  00FEE4  2E                 	db	46
   507  00FEE5  31                 	db	49	;'1'
   508  00FEE6  66                 	db	102	;'f'
   509  00FEE7  20                 	db	32
   510  00FEE8  73                 	db	115	;'s'
   511  00FEE9  65                 	db	101	;'e'
   512  00FEEA  63                 	db	99	;'c'
   513  00FEEB  20                 	db	32
   514  00FEEC  20                 	db	32
   515  00FEED  20                 	db	32
   516  00FEEE  0A                 	db	10
   517  00FEEF  00                 	db	0
   518  00FEF0                     STR_21:
   519  00FEF0  5B                 	db	91	;'['
   520  00FEF1  25                 	db	37
   521  00FEF2  64                 	db	100	;'d'
   522  00FEF3  2C                 	db	44
   523  00FEF4  25                 	db	37
   524  00FEF5  64                 	db	100	;'d'
   525  00FEF6  2C                 	db	44
   526  00FEF7  25                 	db	37
   527  00FEF8  64                 	db	100	;'d'
   528  00FEF9  2C                 	db	44
   529  00FEFA  25                 	db	37
   530  00FEFB  64                 	db	100	;'d'
   531  00FEFC  5D                 	db	93	;']'
   532  00FEFD  20                 	db	32
   533  00FEFE  20                 	db	32
   534  00FEFF  20                 	db	32
   535  00FF00  2A                 	db	42
   536  00FF01  3E                 	db	62	;'>'
   537  00FF02  00                 	db	0
   538  00FF03                     STR_12:
   539  00FF03  73                 	db	115	;'s'
   540  00FF04  74                 	db	116	;'t'
   541  00FF05  61                 	db	97	;'a'
   542  00FF06  72                 	db	114	;'r'
   543  00FF07  74                 	db	116	;'t'
   544  00FF08  20                 	db	32
   545  00FF09  20                 	db	32
   546  00FF0A  20                 	db	32
   547  00FF0B  3C                 	db	60	;'<'
   548  00FF0C  42                 	db	66	;'B'
   549  00FF0D  20                 	db	32
   550  00FF0E  20                 	db	32
   551  00FF0F  20                 	db	32
   552  00FF10  20                 	db	32
   553  00FF11  20                 	db	32
   554  00FF12  20                 	db	32
   555  00FF13  0A                 	db	10
   556  00FF14  00                 	db	0
   557  00FF15                     STR_14:
   558  00FF15  73                 	db	115	;'s'
   559  00FF16  65                 	db	101	;'e'
   560  00FF17  6C                 	db	108	;'l'
   561  00FF18  65                 	db	101	;'e'
   562  00FF19  63                 	db	99	;'c'
   563  00FF1A  74                 	db	116	;'t'
   564  00FF1B  20                 	db	32
   565  00FF1C  72                 	db	114	;'r'
   566  00FF1D  75                 	db	117	;'u'
   567  00FF1E  6E                 	db	110	;'n'
   568  00FF1F  3A                 	db	58	;':'
   569  00FF20  20                 	db	32
   570  00FF21  20                 	db	32
   571  00FF22  20                 	db	32
   572  00FF23  20                 	db	32
   573  00FF24  20                 	db	32
   574  00FF25  0A                 	db	10
   575  00FF26  00                 	db	0
   576  00FF27                     STR_20:
   577  00FF27  5B                 	db	91	;'['
   578  00FF28  41                 	db	65	;'A'
   579  00FF29  41                 	db	65	;'A'
   580  00FF2A  2C                 	db	44
   581  00FF2B  39                 	db	57	;'9'
   582  00FF2C  56                 	db	86	;'V'
   583  00FF2D  2C                 	db	44
   584  00FF2E  43                 	db	67	;'C'
   585  00FF2F  2C                 	db	44
   586  00FF30  6F                 	db	111	;'o'
   587  00FF31  74                 	db	116	;'t'
   588  00FF32  68                 	db	104	;'h'
   589  00FF33  65                 	db	101	;'e'
   590  00FF34  72                 	db	114	;'r'
   591  00FF35  5D                 	db	93	;']'
   592  00FF36  20                 	db	32
   593  00FF37  0A                 	db	10
   594  00FF38  00                 	db	0
   595  00FF39                     STR_22:
   596  00FF39  30                 	db	48	;'0'
   597  00FF3A  31                 	db	49	;'1'
   598  00FF3B  32                 	db	50	;'2'
   599  00FF3C  33                 	db	51	;'3'
   600  00FF3D  34                 	db	52	;'4'
   601  00FF3E  35                 	db	53	;'5'
   602  00FF3F  36                 	db	54	;'6'
   603  00FF40  37                 	db	55	;'7'
   604  00FF41  38                 	db	56	;'8'
   605  00FF42  39                 	db	57	;'9'
   606  00FF43  61                 	db	97	;'a'
   607  00FF44  62                 	db	98	;'b'
   608  00FF45  63                 	db	99	;'c'
   609  00FF46  64                 	db	100	;'d'
   610  00FF47  65                 	db	101	;'e'
   611  00FF48  66                 	db	102	;'f'
   612  00FF49  00                 	db	0
   613  00FF4A                     STR_19:
   614  00FF4A  20                 	db	32
   615  00FF4B  20                 	db	32
   616  00FF4C  20                 	db	32
   617  00FF4D  20                 	db	32
   618  00FF4E  20                 	db	32
   619  00FF4F  20                 	db	32
   620  00FF50  20                 	db	32
   621  00FF51  20                 	db	32
   622  00FF52  20                 	db	32
   623  00FF53  20                 	db	32
   624  00FF54  20                 	db	32
   625  00FF55  20                 	db	32
   626  00FF56  20                 	db	32
   627  00FF57  20                 	db	32
   628  00FF58  2A                 	db	42
   629  00FF59  3E                 	db	62	;'>'
   630  00FF5A  00                 	db	0
   631  00FF5B                     STR_15:
   632  00FF5B  5B                 	db	91	;'['
   633  00FF5C  31                 	db	49	;'1'
   634  00FF5D  2C                 	db	44
   635  00FF5E  32                 	db	50	;'2'
   636  00FF5F  2C                 	db	44
   637  00FF60  33                 	db	51	;'3'
   638  00FF61  2C                 	db	44
   639  00FF62  34                 	db	52	;'4'
   640  00FF63  5D                 	db	93	;']'
   641  00FF64  20                 	db	32
   642  00FF65  20                 	db	32
   643  00FF66  20                 	db	32
   644  00FF67  20                 	db	32
   645  00FF68  20                 	db	32
   646  00FF69  2A                 	db	42
   647  00FF6A  3E                 	db	62	;'>'
   648  00FF6B  00                 	db	0
   649  00FF6C                     STR_13:
   650  00FF6C  68                 	db	104	;'h'
   651  00FF6D  69                 	db	105	;'i'
   652  00FF6E  73                 	db	115	;'s'
   653  00FF6F  74                 	db	116	;'t'
   654  00FF70  6F                 	db	111	;'o'
   655  00FF71  72                 	db	114	;'r'
   656  00FF72  79                 	db	121	;'y'
   657  00FF73  20                 	db	32
   658  00FF74  3C                 	db	60	;'<'
   659  00FF75  43                 	db	67	;'C'
   660  00FF76  20                 	db	32
   661  00FF77  20                 	db	32
   662  00FF78  20                 	db	32
   663  00FF79  20                 	db	32
   664  00FF7A  2A                 	db	42
   665  00FF7B  3E                 	db	62	;'>'
   666  00FF7C  00                 	db	0
   667  00FF7D                     STR_17:
   668  00FF7D  20                 	db	32
   669  00FF7E  20                 	db	32
   670  00FF7F  20                 	db	32
   671  00FF80  73                 	db	115	;'s'
   672  00FF81  74                 	db	116	;'t'
   673  00FF82  61                 	db	97	;'a'
   674  00FF83  74                 	db	116	;'t'
   675  00FF84  73                 	db	115	;'s'
   676  00FF85  20                 	db	32
   677  00FF86  3C                 	db	60	;'<'
   678  00FF87  42                 	db	66	;'B'
   679  00FF88  20                 	db	32
   680  00FF89  20                 	db	32
   681  00FF8A  20                 	db	32
   682  00FF8B  2A                 	db	42
   683  00FF8C  3E                 	db	62	;'>'
   684  00FF8D  00                 	db	0
   685  00FF8E                     STR_3:
   686  00FF8E  5B                 	db	91	;'['
   687  00FF8F  41                 	db	65	;'A'
   688  00FF90  41                 	db	65	;'A'
   689  00FF91  2C                 	db	44
   690  00FF92  43                 	db	67	;'C'
   691  00FF93  2C                 	db	44
   692  00FF94  39                 	db	57	;'9'
   693  00FF95  56                 	db	86	;'V'
   694  00FF96  2C                 	db	44
   695  00FF97  4F                 	db	79	;'O'
   696  00FF98  54                 	db	84	;'T'
   697  00FF99  48                 	db	72	;'H'
   698  00FF9A  45                 	db	69	;'E'
   699  00FF9B  52                 	db	82	;'R'
   700  00FF9C  5D                 	db	93	;']'
   701  00FF9D  0A                 	db	10
   702  00FF9E  00                 	db	0
   703  00FF9F                     STR_2:
   704  00FF9F  74                 	db	116	;'t'
   705  00FFA0  69                 	db	105	;'i'
   706  00FFA1  6D                 	db	109	;'m'
   707  00FFA2  65                 	db	101	;'e'
   708  00FFA3  20                 	db	32
   709  00FFA4  25                 	db	37
   710  00FFA5  30                 	db	48	;'0'
   711  00FFA6  32                 	db	50	;'2'
   712  00FFA7  6C                 	db	108	;'l'
   713  00FFA8  64                 	db	100	;'d'
   714  00FFA9  3A                 	db	58	;':'
   715  00FFAA  25                 	db	37
   716  00FFAB  30                 	db	48	;'0'
   717  00FFAC  32                 	db	50	;'2'
   718  00FFAD  6C                 	db	108	;'l'
   719  00FFAE  64                 	db	100	;'d'
   720  00FFAF  00                 	db	0
   721  00FFB0                     STR_5:
   722  00FFB0  56                 	db	86	;'V'
   723  00FFB1  3A                 	db	58	;':'
   724  00FFB2  20                 	db	32
   725  00FFB3  25                 	db	37
   726  00FFB4  2E                 	db	46
   727  00FFB5  33                 	db	51	;'3'
   728  00FFB6  66                 	db	102	;'f'
   729  00FFB7  2C                 	db	44
   730  00FFB8  20                 	db	32
   731  00FFB9  4E                 	db	78	;'N'
   732  00FFBA  3A                 	db	58	;':'
   733  00FFBB  20                 	db	32
   734  00FFBC  25                 	db	37
   735  00FFBD  64                 	db	100	;'d'
   736  00FFBE  0A                 	db	10
   737  00FFBF  00                 	db	0
   738  00FFC0                     STR_4:
   739  00FFC0  5B                 	db	91	;'['
   740  00FFC1  25                 	db	37
   741  00FFC2  64                 	db	100	;'d'
   742  00FFC3  2C                 	db	44
   743  00FFC4  25                 	db	37
   744  00FFC5  64                 	db	100	;'d'
   745  00FFC6  2C                 	db	44
   746  00FFC7  25                 	db	37
   747  00FFC8  64                 	db	100	;'d'
   748  00FFC9  2C                 	db	44
   749  00FFCA  25                 	db	37
   750  00FFCB  64                 	db	100	;'d'
   751  00FFCC  5D                 	db	93	;']'
   752  00FFCD  00                 	db	0
   753  00FFCE                     STR_8:
   754  00FFCE  43                 	db	67	;'C'
   755  00FFCF  20                 	db	32
   756  00FFD0  20                 	db	32
   757  00FFD1  6C                 	db	108	;'l'
   758  00FFD2  69                 	db	105	;'i'
   759  00FFD3  6D                 	db	109	;'m'
   760  00FFD4  3A                 	db	58	;':'
   761  00FFD5  20                 	db	32
   762  00FFD6  25                 	db	37
   763  00FFD7  66                 	db	102	;'f'
   764  00FFD8  00                 	db	0
   765  00FFD9                     STR_6:
   766  00FFD9  41                 	db	65	;'A'
   767  00FFDA  41                 	db	65	;'A'
   768  00FFDB  20                 	db	32
   769  00FFDC  6C                 	db	108	;'l'
   770  00FFDD  69                 	db	105	;'i'
   771  00FFDE  6D                 	db	109	;'m'
   772  00FFDF  3A                 	db	58	;':'
   773  00FFE0  20                 	db	32
   774  00FFE1  25                 	db	37
   775  00FFE2  66                 	db	102	;'f'
   776  00FFE3  00                 	db	0
   777  00FFE4                     STR_7:
   778  00FFE4  39                 	db	57	;'9'
   779  00FFE5  56                 	db	86	;'V'
   780  00FFE6  20                 	db	32
   781  00FFE7  6C                 	db	108	;'l'
   782  00FFE8  69                 	db	105	;'i'
   783  00FFE9  6D                 	db	109	;'m'
   784  00FFEA  3A                 	db	58	;':'
   785  00FFEB  20                 	db	32
   786  00FFEC  25                 	db	37
   787  00FFED  66                 	db	102	;'f'
   788  00FFEE  00                 	db	0
   789  00FFEF  74                 	db	116	;'t'
   790  00FFF0  31                 	db	49	;'1'
   791  00FFF1  3A                 	db	58	;':'
   792  00FFF2  20                 	db	32
   793  00FFF3  25                 	db	37
   794  00FFF4  78                 	db	120	;'x'
   795  00FFF5  20                 	db	32
   796  00FFF6  00                 	db	0
   797  00FFF7                     STR_1:
   798  00FFF7  72                 	db	114	;'r'
   799  00FFF8  75                 	db	117	;'u'
   800  00FFF9  6E                 	db	110	;'n'
   801  00FFFA  6E                 	db	110	;'n'
   802  00FFFB  69                 	db	105	;'i'
   803  00FFFC  6E                 	db	110	;'n'
   804  00FFFD  67                 	db	103	;'g'
   805  00FFFE  00                 	db	0
   806                           
   807                           ; #config settings
   808  00FFFF  00                 	db	0	; dummy byte at the end
   809  0000                     
   810                           	psect	cinit
   811  0035A0                     __pcinit:
   812                           	opt stack 0
   813  0035A0                     start_initialization:
   814                           	opt stack 0
   815  0035A0                     __initialization:
   816                           	opt stack 0
   817                           
   818                           ; Initialize objects allocated to BANK1 (40 bytes)
   819                           ; load TBLPTR registers with __pidataBANK1
   820  0035A0  0E14               	movlw	low __pidataBANK1
   821  0035A2  6EF6               	movwf	tblptrl,c
   822  0035A4  0E3B               	movlw	high __pidataBANK1
   823  0035A6  6EF7               	movwf	tblptrh,c
   824  0035A8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   825  0035AA  6EF8               	movwf	tblptru,c
   826  0035AC  EE01  F033         	lfsr	0,__pdataBANK1
   827  0035B0  EE10 F028          	lfsr	1,40
   828  0035B4                     copy_data0:
   829  0035B4  0009               	tblrd		*+
   830  0035B6  CFF5 FFEE          	movff	tablat,postinc0
   831  0035BA  50E5               	movf	postdec1,w,c
   832  0035BC  50E1               	movf	fsr1l,w,c
   833  0035BE  E1FA               	bnz	copy_data0
   834                           
   835                           ; Initialize objects allocated to COMRAM (19 bytes)
   836                           ; load TBLPTR registers with __pidataCOMRAM
   837  0035C0  0E84               	movlw	low __pidataCOMRAM
   838  0035C2  6EF6               	movwf	tblptrl,c
   839  0035C4  0E3C               	movlw	high __pidataCOMRAM
   840  0035C6  6EF7               	movwf	tblptrh,c
   841  0035C8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   842  0035CA  6EF8               	movwf	tblptru,c
   843  0035CC  EE00  F03B         	lfsr	0,__pdataCOMRAM
   844  0035D0  EE10 F013          	lfsr	1,19
   845  0035D4                     copy_data1:
   846  0035D4  0009               	tblrd		*+
   847  0035D6  CFF5 FFEE          	movff	tablat,postinc0
   848  0035DA  50E5               	movf	postdec1,w,c
   849  0035DC  50E1               	movf	fsr1l,w,c
   850  0035DE  E1FA               	bnz	copy_data1
   851                           
   852                           ; Clear objects allocated to BANK1 (28 bytes)
   853  0035E0  EE01  F05B         	lfsr	0,__pbssBANK1
   854  0035E4  0E1C               	movlw	28
   855  0035E6                     clear_0:
   856  0035E6  6AEE               	clrf	postinc0,c
   857  0035E8  06E8               	decf	wreg,f,c
   858  0035EA  E1FD               	bnz	clear_0
   859                           
   860                           ; Clear objects allocated to BANK0 (2 bytes)
   861  0035EC  0100               	movlb	0
   862  0035EE  6BFD               	clrf	(__pbssBANK0+1)& (0+255),b
   863  0035F0  6BFC               	clrf	__pbssBANK0& (0+255),b
   864                           
   865                           ; Clear objects allocated to COMRAM (15 bytes)
   866  0035F2  EE00  F04E         	lfsr	0,__pbssCOMRAM
   867  0035F6  0E0F               	movlw	15
   868  0035F8                     clear_1:
   869  0035F8  6AEE               	clrf	postinc0,c
   870  0035FA  06E8               	decf	wreg,f,c
   871  0035FC  E1FD               	bnz	clear_1
   872  0035FE                     end_of_initialization:
   873                           	opt stack 0
   874  0035FE                     __end_of__initialization:
   875                           	opt stack 0
   876  0035FE  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   877  003600  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   878  003602  0E00               	movlw	low (__Lmediumconst shr (0+16))
   879  003604  6EF8               	movwf	tblptru,c
   880  003606  0100               	movlb	0
   881  003608  EFBE  F00B         	goto	_main	;jump to C main() function
   882                           tblptru	equ	0xFF8
   883                           tblptrh	equ	0xFF7
   884                           tblptrl	equ	0xFF6
   885                           tablat	equ	0xFF5
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           postdec1	equ	0xFE5
   889                           fsr1l	equ	0xFE1
   890                           
   891                           	psect	bssCOMRAM
   892  00004E                     __pbssCOMRAM:
   893                           	opt stack 0
   894  00004E                     _time:
   895                           	opt stack 0
   896  00004E                     	ds	4
   897  000052                     _batteryDetected:
   898                           	opt stack 0
   899  000052                     	ds	2
   900  000054                     _curr:
   901                           	opt stack 0
   902  000054                     	ds	2
   903  000056                     _n_AA:
   904                           	opt stack 0
   905  000056                     	ds	2
   906  000058                     _n_C:
   907                           	opt stack 0
   908  000058                     	ds	2
   909  00005A                     _terminate:
   910                           	opt stack 0
   911  00005A                     	ds	2
   912  00005C                     _lastKey:
   913                           	opt stack 0
   914  00005C                     	ds	1
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           postdec1	equ	0xFE5
   922                           fsr1l	equ	0xFE1
   923                           
   924                           	psect	dataCOMRAM
   925  00003B                     __pdataCOMRAM:
   926                           	opt stack 0
   927  00003B                     _V_LIM_9V:
   928                           	opt stack 0
   929  00003B                     	ds	3
   930  00003E                     _V_LIM_AA:
   931                           	opt stack 0
   932  00003E                     	ds	3
   933  000041                     _V_LIM_C:
   934                           	opt stack 0
   935  000041                     	ds	3
   936  000044                     _padAngle_CLOSE:
   937                           	opt stack 0
   938  000044                     	ds	2
   939  000046                     _padAngle_NEUTRAL:
   940                           	opt stack 0
   941  000046                     	ds	2
   942  000048                     _redirectAngle_AA:
   943                           	opt stack 0
   944  000048                     	ds	2
   945  00004A                     _redirectAngle_OTHER:
   946                           	opt stack 0
   947  00004A                     	ds	2
   948  00004C                     _stoppingTime:
   949                           	opt stack 0
   950  00004C                     	ds	2
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           fsr1l	equ	0xFE1
   959                           
   960                           	psect	bssBANK0
   961  0000FC                     __pbssBANK0:
   962                           	opt stack 0
   963  0000FC                     _n:
   964                           	opt stack 0
   965  0000FC                     	ds	2
   966                           tblptru	equ	0xFF8
   967                           tblptrh	equ	0xFF7
   968                           tblptrl	equ	0xFF6
   969                           tablat	equ	0xFF5
   970                           postinc0	equ	0xFEE
   971                           wreg	equ	0xFE8
   972                           postdec1	equ	0xFE5
   973                           fsr1l	equ	0xFE1
   974                           
   975                           	psect	bssBANK1
   976  00015B                     __pbssBANK1:
   977                           	opt stack 0
   978  00015B                     _pulse:
   979                           	opt stack 0
   980  00015B                     	ds	8
   981  000163                     _servos:
   982                           	opt stack 0
   983  000163                     	ds	8
   984  00016B                     _padPin3:
   985                           	opt stack 0
   986  00016B                     	ds	4
   987  00016F                     _count:
   988                           	opt stack 0
   989  00016F                     	ds	2
   990  000171                     _n_9V:
   991                           	opt stack 0
   992  000171                     	ds	2
   993  000173                     _n_OTHER:
   994                           	opt stack 0
   995  000173                     	ds	2
   996  000175                     _prevTime:
   997                           	opt stack 0
   998  000175                     	ds	2
   999                           tblptru	equ	0xFF8
  1000                           tblptrh	equ	0xFF7
  1001                           tblptrl	equ	0xFF6
  1002                           tablat	equ	0xFF5
  1003                           postinc0	equ	0xFEE
  1004                           wreg	equ	0xFE8
  1005                           postdec1	equ	0xFE5
  1006                           fsr1l	equ	0xFE1
  1007                           
  1008                           	psect	dataBANK1
  1009  000133                     __pdataBANK1:
  1010                           	opt stack 0
  1011  000133                     _cylinderDir:
  1012                           	opt stack 0
  1013  000133                     	ds	4
  1014  000137                     _angle:
  1015                           	opt stack 0
  1016  000137                     	ds	2
  1017  000139                     _padAngle_OPEN:
  1018                           	opt stack 0
  1019  000139                     	ds	2
  1020  00013B                     _redirectAngle_9V:
  1021                           	opt stack 0
  1022  00013B                     	ds	2
  1023  00013D                     _redirectAngle_C:
  1024                           	opt stack 0
  1025  00013D                     	ds	2
  1026  00013F                     _AA_float:
  1027                           	opt stack 0
  1028  00013F                     	ds	4
  1029  000143                     _conveyorServo:
  1030                           	opt stack 0
  1031  000143                     	ds	4
  1032  000147                     _cylinderMotor:
  1033                           	opt stack 0
  1034  000147                     	ds	4
  1035  00014B                     _padPin1:
  1036                           	opt stack 0
  1037  00014B                     	ds	4
  1038  00014F                     _padPin2:
  1039                           	opt stack 0
  1040  00014F                     	ds	4
  1041  000153                     _padServo:
  1042                           	opt stack 0
  1043  000153                     	ds	4
  1044  000157                     _redirectingServo:
  1045                           	opt stack 0
  1046  000157                     	ds	4
  1047                           tblptru	equ	0xFF8
  1048                           tblptrh	equ	0xFF7
  1049                           tblptrl	equ	0xFF6
  1050                           tablat	equ	0xFF5
  1051                           postinc0	equ	0xFEE
  1052                           wreg	equ	0xFE8
  1053                           postdec1	equ	0xFE5
  1054                           fsr1l	equ	0xFE1
  1055                           
  1056                           	psect	cstackBANK1
  1057  000100                     __pcstackBANK1:
  1058                           	opt stack 0
  1059  000100                     showInterface@n:
  1060                           	opt stack 0
  1061  000100                     _sortBattery$1397:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x0
  1065  000100                     	ds	2
  1066  000102                     showInterface@run:
  1067                           	opt stack 0
  1068  000102                     sortBattery@V_float:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0x2
  1072  000102                     	ds	2
  1073  000104                     showInterface@key:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x4
  1077  000104                     	ds	1
  1078  000105                     sortBattery@pos_v_counter:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x5
  1082  000105                     	ds	2
  1083  000107                     sortBattery@signal:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x7
  1087  000107                     	ds	2
  1088  000109                     sortBattery@Vcc:
  1089                           	opt stack 0
  1090                           
  1091                           ; 3 bytes @ 0x9
  1092  000109                     	ds	3
  1093  00010C                     sortBattery@resolution:
  1094                           	opt stack 0
  1095                           
  1096                           ; 3 bytes @ 0xC
  1097  00010C                     	ds	3
  1098  00010F                     sortBattery@V_max:
  1099                           	opt stack 0
  1100                           
  1101                           ; 3 bytes @ 0xF
  1102  00010F                     	ds	3
  1103  000112                     sortBattery@i_228:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x12
  1107  000112                     	ds	2
  1108  000114                     sortBattery@targetAngle:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x14
  1112  000114                     	ds	2
  1113  000116                     sortBattery@V:
  1114                           	opt stack 0
  1115                           
  1116                           ; 3 bytes @ 0x16
  1117  000116                     	ds	3
  1118  000119                     sortBattery@i:
  1119                           	opt stack 0
  1120                           
  1121                           ; 3 bytes @ 0x19
  1122  000119                     	ds	3
  1123  00011C                     sortBattery@V_223:
  1124                           	opt stack 0
  1125                           
  1126                           ; 3 bytes @ 0x1C
  1127  00011C                     	ds	3
  1128  00011F                     ??_main:
  1129                           
  1130                           ; 1 bytes @ 0x1F
  1131  00011F                     	ds	10
  1132  000129                     main@cylinderStart:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x29
  1136  000129                     	ds	2
  1137  00012B                     main@cylinderDur:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x2B
  1141  00012B                     	ds	2
  1142  00012D                     main@cylinderForward:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x2D
  1146  00012D                     	ds	2
  1147  00012F                     main@cylinderBackward:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x2F
  1151  00012F                     	ds	2
  1152  000131                     main@lastBatteryTime:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x31
  1156  000131                     	ds	2
  1157                           tblptru	equ	0xFF8
  1158                           tblptrh	equ	0xFF7
  1159                           tblptrl	equ	0xFF6
  1160                           tablat	equ	0xFF5
  1161                           postinc0	equ	0xFEE
  1162                           wreg	equ	0xFE8
  1163                           postdec1	equ	0xFE5
  1164                           fsr1l	equ	0xFE1
  1165                           
  1166                           	psect	cstackBANK0
  1167  000080                     __pcstackBANK0:
  1168                           	opt stack 0
  1169  000080                     ??___ftdiv:
  1170  000080                     ?_readPastRun:
  1171                           	opt stack 0
  1172  000080                     readPastRun@run:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x0
  1176  000080                     	ds	2
  1177  000082                     readPastRun@data:
  1178                           	opt stack 0
  1179                           
  1180                           ; 14 bytes @ 0x2
  1181  000082                     	ds	1
  1182  000083                     ___ftdiv@cntr:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x3
  1186  000083                     	ds	1
  1187  000084                     ___ftdiv@f3:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0x4
  1191  000084                     	ds	3
  1192  000087                     ___ftdiv@exp:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x7
  1196  000087                     	ds	1
  1197  000088                     ___ftdiv@sign:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x8
  1201  000088                     	ds	1
  1202  000089                     ?___ftmul:
  1203                           	opt stack 0
  1204  000089                     ___ftmul@f1:
  1205                           	opt stack 0
  1206                           
  1207                           ; 3 bytes @ 0x9
  1208  000089                     	ds	3
  1209  00008C                     ___ftmul@f2:
  1210                           	opt stack 0
  1211                           
  1212                           ; 3 bytes @ 0xC
  1213  00008C                     	ds	3
  1214  00008F                     ??___ftmul:
  1215                           
  1216                           ; 1 bytes @ 0xF
  1217  00008F                     	ds	1
  1218  000090                     readPastRun@i:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x10
  1222  000090                     	ds	2
  1223  000092                     ___ftmul@exp:
  1224                           	opt stack 0
  1225                           
  1226                           ; 1 bytes @ 0x12
  1227  000092                     	ds	1
  1228  000093                     ___ftmul@f3_as_product:
  1229                           	opt stack 0
  1230                           
  1231                           ; 3 bytes @ 0x13
  1232  000093                     	ds	3
  1233  000096                     ___ftmul@cntr:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x16
  1237  000096                     	ds	1
  1238  000097                     ___ftmul@sign:
  1239                           	opt stack 0
  1240                           
  1241                           ; 1 bytes @ 0x17
  1242  000097                     	ds	1
  1243  000098                     ?_fround:
  1244                           	opt stack 0
  1245  000098                     ?_scale:
  1246                           	opt stack 0
  1247                           
  1248                           ; 3 bytes @ 0x18
  1249  000098                     	ds	3
  1250  00009B                     _fround$1400:
  1251                           	opt stack 0
  1252  00009B                     _scale$1401:
  1253                           	opt stack 0
  1254                           
  1255                           ; 3 bytes @ 0x1B
  1256  00009B                     	ds	3
  1257  00009E                     scale@scl:
  1258                           	opt stack 0
  1259  00009E                     _fround$1399:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x1E
  1263  00009E                     	ds	3
  1264  0000A1                     fround@prec:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x21
  1268  0000A1                     	ds	1
  1269  0000A2                     ?___ftadd:
  1270                           	opt stack 0
  1271  0000A2                     ___ftadd@f1:
  1272                           	opt stack 0
  1273                           
  1274                           ; 3 bytes @ 0x22
  1275  0000A2                     	ds	3
  1276  0000A5                     ___ftadd@f2:
  1277                           	opt stack 0
  1278                           
  1279                           ; 3 bytes @ 0x25
  1280  0000A5                     	ds	3
  1281  0000A8                     ??___ftadd:
  1282                           
  1283                           ; 1 bytes @ 0x28
  1284  0000A8                     	ds	3
  1285  0000AB                     ___ftadd@sign:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x2B
  1289  0000AB                     	ds	1
  1290  0000AC                     ___ftadd@exp2:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x2C
  1294  0000AC                     	ds	1
  1295  0000AD                     ___ftadd@exp1:
  1296                           	opt stack 0
  1297                           
  1298                           ; 1 bytes @ 0x2D
  1299  0000AD                     	ds	1
  1300  0000AE                     ?___ftsub:
  1301                           	opt stack 0
  1302  0000AE                     ?___fttol:
  1303                           	opt stack 0
  1304  0000AE                     ___ftsub@f1:
  1305                           	opt stack 0
  1306  0000AE                     ___fttol@f1:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x2E
  1310  0000AE                     	ds	3
  1311  0000B1                     ___ftsub@f2:
  1312                           	opt stack 0
  1313                           
  1314                           ; 3 bytes @ 0x31
  1315  0000B1                     	ds	1
  1316  0000B2                     ??___fttol:
  1317                           
  1318                           ; 1 bytes @ 0x32
  1319  0000B2                     	ds	5
  1320  0000B7                     ___fttol@sign1:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0x37
  1324  0000B7                     	ds	1
  1325  0000B8                     ___fttol@lval:
  1326                           	opt stack 0
  1327                           
  1328                           ; 4 bytes @ 0x38
  1329  0000B8                     	ds	4
  1330  0000BC                     ___fttol@exp1:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0x3C
  1334  0000BC                     	ds	1
  1335  0000BD                     ?_printf:
  1336                           	opt stack 0
  1337  0000BD                     ?_angleToPulse:
  1338                           	opt stack 0
  1339  0000BD                     angleToPulse@angle:
  1340                           	opt stack 0
  1341  0000BD                     printf@f:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x3D
  1345  0000BD                     	ds	4
  1346  0000C1                     ??_angleToPulse:
  1347                           
  1348                           ; 1 bytes @ 0x41
  1349  0000C1                     	ds	4
  1350  0000C5                     angleToPulse@offset:
  1351                           	opt stack 0
  1352                           
  1353                           ; 4 bytes @ 0x45
  1354  0000C5                     	ds	2
  1355  0000C7                     ??_printf:
  1356                           
  1357                           ; 1 bytes @ 0x47
  1358  0000C7                     	ds	2
  1359  0000C9                     angleToPulse@a180:
  1360                           	opt stack 0
  1361                           
  1362                           ; 4 bytes @ 0x49
  1363  0000C9                     	ds	4
  1364  0000CD                     _angleToPulse$1398:
  1365                           	opt stack 0
  1366  0000CD                     _printf$1402:
  1367                           	opt stack 0
  1368                           
  1369                           ; 3 bytes @ 0x4D
  1370  0000CD                     	ds	3
  1371  0000D0                     printf@idx:
  1372                           	opt stack 0
  1373  0000D0                     angleToPulse@a000:
  1374                           	opt stack 0
  1375                           
  1376                           ; 4 bytes @ 0x50
  1377  0000D0                     	ds	1
  1378  0000D1                     printf@cp:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x51
  1382  0000D1                     	ds	2
  1383  0000D3                     printf@len:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x53
  1387  0000D3                     	ds	1
  1388  0000D4                     setAngle@motor:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x54
  1392  0000D4                     	ds	1
  1393  0000D5                     printf@ap:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x55
  1397  0000D5                     	ds	1
  1398  0000D6                     setAngle@angle:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x56
  1402  0000D6                     	ds	1
  1403  0000D7                     printf@tmpval:
  1404                           	opt stack 0
  1405                           
  1406                           ; 4 bytes @ 0x57
  1407  0000D7                     	ds	1
  1408  0000D8                     ??_setAngle:
  1409                           
  1410                           ; 1 bytes @ 0x58
  1411  0000D8                     	ds	2
  1412  0000DA                     setAngle@period:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x5A
  1416  0000DA                     	ds	1
  1417  0000DB                     printf@exp:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x5B
  1421  0000DB                     	ds	1
  1422  0000DC                     setAngle@i:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x5C
  1426  0000DC                     	ds	1
  1427  0000DD                     printf@fval:
  1428                           	opt stack 0
  1429                           
  1430                           ; 3 bytes @ 0x5D
  1431  0000DD                     	ds	1
  1432  0000DE                     initServo@motor:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x5E
  1436  0000DE                     	ds	2
  1437  0000E0                     initServo@angle:
  1438                           	opt stack 0
  1439  0000E0                     printf@val:
  1440                           	opt stack 0
  1441                           
  1442                           ; 4 bytes @ 0x60
  1443  0000E0                     	ds	2
  1444  0000E2                     ??_initServo:
  1445                           
  1446                           ; 1 bytes @ 0x62
  1447  0000E2                     	ds	2
  1448  0000E4                     printf@width:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x64
  1452  0000E4                     	ds	2
  1453  0000E6                     initServo@i:
  1454                           	opt stack 0
  1455  0000E6                     printf@flag:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x66
  1459  0000E6                     	ds	2
  1460  0000E8                     printf@prec:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x68
  1464  0000E8                     	ds	2
  1465  0000EA                     printf@c:
  1466                           	opt stack 0
  1467                           
  1468                           ; 1 bytes @ 0x6A
  1469  0000EA                     	ds	1
  1470  0000EB                     ??_sortBattery:
  1471  0000EB                     ??_showDateTime:
  1472  0000EB                     showMainMenu@k:
  1473                           	opt stack 0
  1474  0000EB                     showRunSelect@k:
  1475                           	opt stack 0
  1476  0000EB                     showRunMenu@key:
  1477                           	opt stack 0
  1478  0000EB                     showRunTime@run:
  1479                           	opt stack 0
  1480  0000EB                     showRunStats@run:
  1481                           	opt stack 0
  1482                           
  1483                           ; 2 bytes @ 0x6B
  1484  0000EB                     	ds	1
  1485  0000EC                     showRunMenu@k:
  1486                           	opt stack 0
  1487                           
  1488                           ; 1 bytes @ 0x6C
  1489  0000EC                     	ds	1
  1490  0000ED                     ??_showRunTime:
  1491  0000ED                     showDateTime@sec:
  1492                           	opt stack 0
  1493                           
  1494                           ; 2 bytes @ 0x6D
  1495  0000ED                     	ds	2
  1496  0000EF                     showDateTime@min:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x6F
  1500  0000EF                     	ds	1
  1501  0000F0                     showRunTime@time:
  1502                           	opt stack 0
  1503                           
  1504                           ; 3 bytes @ 0x70
  1505  0000F0                     	ds	1
  1506  0000F1                     showDateTime@hour:
  1507                           	opt stack 0
  1508                           
  1509                           ; 2 bytes @ 0x71
  1510  0000F1                     	ds	2
  1511  0000F3                     showDateTime@day:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x73
  1515  0000F3                     	ds	2
  1516  0000F5                     showDateTime@mon:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0x75
  1520  0000F5                     	ds	2
  1521  0000F7                     showDateTime@year:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x77
  1525  0000F7                     	ds	2
  1526  0000F9                     showDateTime@t:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x79
  1530  0000F9                     	ds	2
  1531  0000FB                     ??_showInterface:
  1532                           
  1533                           ; 1 bytes @ 0x7B
  1534  0000FB                     	ds	1
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           postdec1	equ	0xFE5
  1542                           fsr1l	equ	0xFE1
  1543                           
  1544                           	psect	cstackCOMRAM
  1545  000001                     __pcstackCOMRAM:
  1546                           	opt stack 0
  1547  000001                     ?i2___awmod:
  1548                           	opt stack 0
  1549  000001                     keyPressedInterruptService@key:
  1550                           	opt stack 0
  1551  000001                     i2___awmod@dividend:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x0
  1555  000001                     	ds	2
  1556  000003                     i2___awmod@divisor:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x2
  1560  000003                     	ds	2
  1561  000005                     i2___awmod@counter:
  1562                           	opt stack 0
  1563                           
  1564                           ; 1 bytes @ 0x4
  1565  000005                     	ds	1
  1566  000006                     i2___awmod@sign:
  1567                           	opt stack 0
  1568                           
  1569                           ; 1 bytes @ 0x5
  1570  000006                     	ds	1
  1571  000007                     i2digitalWrite@pin:
  1572                           	opt stack 0
  1573  000007                     i2startTimer@timer:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x6
  1577  000007                     	ds	2
  1578  000009                     i2digitalWrite@val:
  1579                           	opt stack 0
  1580  000009                     i2startTimer@val:
  1581                           	opt stack 0
  1582                           
  1583                           ; 4 bytes @ 0x8
  1584  000009                     	ds	2
  1585  00000B                     ??i2_digitalWrite:
  1586                           
  1587                           ; 1 bytes @ 0xA
  1588  00000B                     	ds	2
  1589  00000D                     ??i2_startTimer:
  1590                           
  1591                           ; 1 bytes @ 0xC
  1592  00000D                     	ds	1
  1593  00000E                     i2digitalWrite@p:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0xD
  1597  00000E                     	ds	2
  1598  000010                     ??_servoInterruptService:
  1599                           
  1600                           ; 1 bytes @ 0xF
  1601  000010                     	ds	4
  1602  000014                     ??_service:
  1603                           
  1604                           ; 1 bytes @ 0x13
  1605  000014                     	ds	14
  1606  000022                     service@key:
  1607                           	opt stack 0
  1608                           
  1609                           ; 1 bytes @ 0x21
  1610  000022                     	ds	1
  1611  000023                     ??_isdigit:
  1612  000023                     ??_I2C_Master_Wait:
  1613  000023                     ?_digitalRead:
  1614                           	opt stack 0
  1615  000023                     ?___awmod:
  1616                           	opt stack 0
  1617  000023                     ?___ftpack:
  1618                           	opt stack 0
  1619  000023                     ?___ftneg:
  1620                           	opt stack 0
  1621  000023                     ?_analogRead:
  1622                           	opt stack 0
  1623  000023                     ?__tdiv_to_l_:
  1624                           	opt stack 0
  1625  000023                     ?__div_to_l_:
  1626                           	opt stack 0
  1627  000023                     ?___aldiv:
  1628                           	opt stack 0
  1629  000023                     ?___lldiv:
  1630                           	opt stack 0
  1631  000023                     lcdNibble@temp:
  1632                           	opt stack 0
  1633  000023                     readKeypad@key:
  1634                           	opt stack 0
  1635  000023                     keyPressed@key:
  1636                           	opt stack 0
  1637  000023                     digitalRead@pin:
  1638                           	opt stack 0
  1639  000023                     digitalWrite@pin:
  1640                           	opt stack 0
  1641  000023                     analogRead@channel:
  1642                           	opt stack 0
  1643  000023                     initTimer@timer:
  1644                           	opt stack 0
  1645  000023                     startTimer@timer:
  1646                           	opt stack 0
  1647  000023                     ___awmod@dividend:
  1648                           	opt stack 0
  1649  000023                     __div_to_l_@f1:
  1650                           	opt stack 0
  1651  000023                     ___ftpack@arg:
  1652                           	opt stack 0
  1653  000023                     __tdiv_to_l_@f1:
  1654                           	opt stack 0
  1655  000023                     ___ftneg@f1:
  1656                           	opt stack 0
  1657  000023                     ___aldiv@dividend:
  1658                           	opt stack 0
  1659  000023                     ___lldiv@dividend:
  1660                           	opt stack 0
  1661                           
  1662                           ; 4 bytes @ 0x22
  1663  000023                     	ds	1
  1664  000024                     lcdNibble@data:
  1665                           	opt stack 0
  1666  000024                     I2C_Master_Read@a:
  1667                           	opt stack 0
  1668  000024                     _isdigit$1031:
  1669                           	opt stack 0
  1670  000024                     I2C_Master_Write@d:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x23
  1674  000024                     	ds	1
  1675  000025                     ??_initTimer:
  1676  000025                     ??_digitalRead:
  1677  000025                     ??_lcdInst:
  1678  000025                     I2C_Master_Read@temp:
  1679                           	opt stack 0
  1680  000025                     isdigit@c:
  1681                           	opt stack 0
  1682  000025                     digitalWrite@val:
  1683                           	opt stack 0
  1684  000025                     ___awmod@divisor:
  1685                           	opt stack 0
  1686  000025                     startTimer@val:
  1687                           	opt stack 0
  1688                           
  1689                           ; 4 bytes @ 0x24
  1690  000025                     	ds	1
  1691  000026                     ?_getTime:
  1692                           	opt stack 0
  1693  000026                     lcdInst@data:
  1694                           	opt stack 0
  1695  000026                     setTime@i:
  1696                           	opt stack 0
  1697  000026                     ___ftpack@exp:
  1698                           	opt stack 0
  1699  000026                     __div_to_l_@f2:
  1700                           	opt stack 0
  1701  000026                     __tdiv_to_l_@f2:
  1702                           	opt stack 0
  1703                           
  1704                           ; 3 bytes @ 0x25
  1705  000026                     	ds	1
  1706  000027                     ??_initLCD:
  1707  000027                     ??_digitalWrite:
  1708  000027                     ??_analogRead:
  1709  000027                     putch@data:
  1710                           	opt stack 0
  1711  000027                     ___awmod@counter:
  1712                           	opt stack 0
  1713  000027                     ___ftpack@sign:
  1714                           	opt stack 0
  1715  000027                     ___aldiv@divisor:
  1716                           	opt stack 0
  1717  000027                     ___lldiv@divisor:
  1718                           	opt stack 0
  1719                           
  1720                           ; 4 bytes @ 0x26
  1721  000027                     	ds	1
  1722  000028                     ??___ftpack:
  1723  000028                     ??_getTime:
  1724  000028                     ___awmod@sign:
  1725                           	opt stack 0
  1726                           
  1727                           ; 1 bytes @ 0x27
  1728  000028                     	ds	1
  1729  000029                     ??_startTimer:
  1730  000029                     ??__tdiv_to_l_:
  1731  000029                     ?___awdiv:
  1732                           	opt stack 0
  1733  000029                     ___awdiv@dividend:
  1734                           	opt stack 0
  1735  000029                     __div_to_l_@quot:
  1736                           	opt stack 0
  1737                           
  1738                           ; 4 bytes @ 0x28
  1739  000029                     	ds	1
  1740  00002A                     digitalWrite@p:
  1741                           	opt stack 0
  1742  00002A                     getTime@time:
  1743                           	opt stack 0
  1744                           
  1745                           ; 14 bytes @ 0x29
  1746  00002A                     	ds	1
  1747  00002B                     ?___altoft:
  1748                           	opt stack 0
  1749  00002B                     ?___awtoft:
  1750                           	opt stack 0
  1751  00002B                     ?___lltoft:
  1752                           	opt stack 0
  1753  00002B                     ___aldiv@counter:
  1754                           	opt stack 0
  1755  00002B                     ___awdiv@divisor:
  1756                           	opt stack 0
  1757  00002B                     ___awtoft@c:
  1758                           	opt stack 0
  1759  00002B                     ___altoft@c:
  1760                           	opt stack 0
  1761  00002B                     ___lldiv@quotient:
  1762                           	opt stack 0
  1763  00002B                     ___lltoft@c:
  1764                           	opt stack 0
  1765                           
  1766                           ; 4 bytes @ 0x2A
  1767  00002B                     	ds	1
  1768  00002C                     ___aldiv@sign:
  1769                           	opt stack 0
  1770  00002C                     __tdiv_to_l_@quot:
  1771                           	opt stack 0
  1772                           
  1773                           ; 4 bytes @ 0x2B
  1774  00002C                     	ds	1
  1775  00002D                     ___awdiv@counter:
  1776                           	opt stack 0
  1777  00002D                     __div_to_l_@cntr:
  1778                           	opt stack 0
  1779  00002D                     ___aldiv@quotient:
  1780                           	opt stack 0
  1781                           
  1782                           ; 4 bytes @ 0x2C
  1783  00002D                     	ds	1
  1784  00002E                     ___awdiv@sign:
  1785                           	opt stack 0
  1786  00002E                     ___awtoft@sign:
  1787                           	opt stack 0
  1788  00002E                     __div_to_l_@exp1:
  1789                           	opt stack 0
  1790                           
  1791                           ; 1 bytes @ 0x2D
  1792  00002E                     	ds	1
  1793  00002F                     ??___altoft:
  1794  00002F                     ??___lltoft:
  1795  00002F                     ___lldiv@counter:
  1796                           	opt stack 0
  1797  00002F                     ___awdiv@quotient:
  1798                           	opt stack 0
  1799  00002F                     ___ftge@ff1:
  1800                           	opt stack 0
  1801                           
  1802                           ; 3 bytes @ 0x2E
  1803  00002F                     	ds	1
  1804  000030                     ?___llmod:
  1805                           	opt stack 0
  1806  000030                     __tdiv_to_l_@cntr:
  1807                           	opt stack 0
  1808  000030                     I2C_Master_Init@c:
  1809                           	opt stack 0
  1810  000030                     ___llmod@dividend:
  1811                           	opt stack 0
  1812                           
  1813                           ; 4 bytes @ 0x2F
  1814  000030                     	ds	1
  1815  000031                     ?___wmul:
  1816                           	opt stack 0
  1817  000031                     ?___almod:
  1818                           	opt stack 0
  1819  000031                     __tdiv_to_l_@exp1:
  1820                           	opt stack 0
  1821  000031                     ___wmul@multiplier:
  1822                           	opt stack 0
  1823  000031                     ___almod@dividend:
  1824                           	opt stack 0
  1825                           
  1826                           ; 4 bytes @ 0x30
  1827  000031                     	ds	1
  1828  000032                     ___ftge@ff2:
  1829                           	opt stack 0
  1830                           
  1831                           ; 3 bytes @ 0x31
  1832  000032                     	ds	1
  1833  000033                     ___altoft@exp:
  1834                           	opt stack 0
  1835  000033                     ___lltoft@exp:
  1836                           	opt stack 0
  1837  000033                     ___wmul@multiplicand:
  1838                           	opt stack 0
  1839                           
  1840                           ; 2 bytes @ 0x32
  1841  000033                     	ds	1
  1842  000034                     ??_I2C_Master_Init:
  1843  000034                     ___altoft@sign:
  1844                           	opt stack 0
  1845  000034                     ___llmod@divisor:
  1846                           	opt stack 0
  1847                           
  1848                           ; 4 bytes @ 0x33
  1849  000034                     	ds	1
  1850  000035                     ??___ftge:
  1851  000035                     ?___ftdiv:
  1852                           	opt stack 0
  1853  000035                     ___wmul@product:
  1854                           	opt stack 0
  1855  000035                     ___ftdiv@f1:
  1856                           	opt stack 0
  1857  000035                     ___almod@divisor:
  1858                           	opt stack 0
  1859                           
  1860                           ; 4 bytes @ 0x34
  1861  000035                     	ds	2
  1862  000037                     ?_eepromRead:
  1863                           	opt stack 0
  1864  000037                     eepromRead@address:
  1865                           	opt stack 0
  1866                           
  1867                           ; 4 bytes @ 0x36
  1868  000037                     	ds	1
  1869  000038                     getTime@i:
  1870                           	opt stack 0
  1871  000038                     ___llmod@counter:
  1872                           	opt stack 0
  1873  000038                     ___ftdiv@f2:
  1874                           	opt stack 0
  1875                           
  1876                           ; 3 bytes @ 0x37
  1877  000038                     	ds	1
  1878  000039                     ___almod@counter:
  1879                           	opt stack 0
  1880                           
  1881                           ; 1 bytes @ 0x38
  1882  000039                     	ds	1
  1883  00003A                     ___almod@sign:
  1884                           	opt stack 0
  1885                           
  1886                           ; 1 bytes @ 0x39
  1887  00003A                     	ds	1
  1888  00003B                     tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           
  1897                           ; 1 bytes @ 0x3A
  1898 ;;
  1899 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  1900 ;;
  1901 ;; *************** function _main *****************
  1902 ;; Defined at:
  1903 ;;		line 114 in file "main.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;		None
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  lastBatteryT    2   49[BANK1 ] int 
  1908 ;;  cylinderBack    2   47[BANK1 ] int 
  1909 ;;  cylinderForw    2   45[BANK1 ] int 
  1910 ;;  cylinderDur     2   43[BANK1 ] int 
  1911 ;;  cylinderStar    2   41[BANK1 ] int 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      void 
  1914 ;; Registers used:
  1915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;      Temps:          0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;Total ram usage:       20 bytes
  1926 ;; Hardware stack levels required when called:   10
  1927 ;; This function calls:
  1928 ;;		___aldiv
  1929 ;;		___almod
  1930 ;;		_digitalWrite
  1931 ;;		_initLCD
  1932 ;;		_initServo
  1933 ;;		_initTimer
  1934 ;;		_lcdClear
  1935 ;;		_lcdHome
  1936 ;;		_pinSetup
  1937 ;;		_printf
  1938 ;;		_readKeypad
  1939 ;;		_showInterface
  1940 ;;		_sortBattery
  1941 ;;		_startTimer
  1942 ;; This function is called by:
  1943 ;;		Startup code after reset
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text0
  1948  00177C                     __ptext0:
  1949                           	opt stack 0
  1950  00177C                     _main:
  1951                           	opt stack 21
  1952                           
  1953                           ;main.c: 118: pinSetup();
  1954                           
  1955                           ;incstack = 0
  1956  00177C  EC32  F01D         	call	_pinSetup	;wreg free
  1957                           
  1958                           ;main.c: 119: initLCD();
  1959  001780  EC0F  F01D         	call	_initLCD	;wreg free
  1960  001784                     l7544:
  1961                           
  1962                           ;main.c: 122: showInterface();
  1963  001784  EC2D  F017         	call	_showInterface	;wreg free
  1964                           
  1965                           ;main.c: 126: terminate = 0;
  1966  001788  0E00               	movlw	0
  1967  00178A  6E5B               	movwf	_terminate+1,c
  1968  00178C  0E00               	movlw	0
  1969  00178E  6E5A               	movwf	_terminate,c
  1970                           
  1971                           ;main.c: 127: time = 0;
  1972  001790  0E00               	movlw	0
  1973  001792  6E4E               	movwf	_time,c
  1974  001794  0E00               	movlw	0
  1975  001796  6E4F               	movwf	_time+1,c
  1976  001798  0E00               	movlw	0
  1977  00179A  6E50               	movwf	_time+2,c
  1978  00179C  0E00               	movlw	0
  1979  00179E  6E51               	movwf	_time+3,c
  1980                           
  1981                           ;main.c: 128: initTimer(1);
  1982  0017A0  0E00               	movlw	0
  1983  0017A2  6E24               	movwf	initTimer@timer+1,c
  1984  0017A4  0E01               	movlw	1
  1985  0017A6  6E23               	movwf	initTimer@timer,c
  1986  0017A8  ECEA  F01C         	call	_initTimer	;wreg free
  1987                           
  1988                           ;main.c: 129: startTimer(1,0);
  1989  0017AC  0E00               	movlw	0
  1990  0017AE  6E24               	movwf	startTimer@timer+1,c
  1991  0017B0  0E01               	movlw	1
  1992  0017B2  6E23               	movwf	startTimer@timer,c
  1993  0017B4  0E00               	movlw	0
  1994  0017B6  6E25               	movwf	startTimer@val,c
  1995  0017B8  0E00               	movlw	0
  1996  0017BA  6E26               	movwf	startTimer@val+1,c
  1997  0017BC  0E00               	movlw	0
  1998  0017BE  6E27               	movwf	startTimer@val+2,c
  1999  0017C0  0E00               	movlw	0
  2000  0017C2  6E28               	movwf	startTimer@val+3,c
  2001  0017C4  EC9E  F01C         	call	_startTimer	;wreg free
  2002                           
  2003                           ;main.c: 132: digitalWrite(cylinderMotor, 1);
  2004  0017C8  0E47               	movlw	low _cylinderMotor
  2005  0017CA  6E23               	movwf	digitalWrite@pin,c
  2006  0017CC  0E01               	movlw	high _cylinderMotor
  2007  0017CE  6E24               	movwf	digitalWrite@pin+1,c
  2008  0017D0  0E00               	movlw	0
  2009  0017D2  6E26               	movwf	digitalWrite@val+1,c
  2010  0017D4  0E01               	movlw	1
  2011  0017D6  6E25               	movwf	digitalWrite@val,c
  2012  0017D8  EC65  F016         	call	_digitalWrite	;wreg free
  2013                           
  2014                           ;main.c: 133: initServo(conveyorServo, 130);
  2015  0017DC  0E43               	movlw	low _conveyorServo
  2016  0017DE  0100               	movlb	0	; () banked
  2017  0017E0  6FDE               	movwf	initServo@motor& (0+255),b
  2018  0017E2  0E01               	movlw	high _conveyorServo
  2019  0017E4  0100               	movlb	0	; () banked
  2020  0017E6  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2021  0017E8  0E00               	movlw	0
  2022  0017EA  0100               	movlb	0	; () banked
  2023  0017EC  6FE1               	movwf	(initServo@angle+1)& (0+255),b
  2024  0017EE  0E82               	movlw	130
  2025  0017F0  6FE0               	movwf	initServo@angle& (0+255),b
  2026  0017F2  EC24  F015         	call	_initServo	;wreg free
  2027                           
  2028                           ;main.c: 134: initServo(padServo, padAngle_NEUTRAL);
  2029  0017F6  0E53               	movlw	low _padServo
  2030  0017F8  0100               	movlb	0	; () banked
  2031  0017FA  6FDE               	movwf	initServo@motor& (0+255),b
  2032  0017FC  0E01               	movlw	high _padServo
  2033  0017FE  0100               	movlb	0	; () banked
  2034  001800  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2035  001802  C046  F0E0         	movff	_padAngle_NEUTRAL,initServo@angle
  2036  001806  C047  F0E1         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2037  00180A  EC24  F015         	call	_initServo	;wreg free
  2038                           
  2039                           ;main.c: 135: initServo(redirectingServo, redirectAngle_AA);
  2040  00180E  0E57               	movlw	low _redirectingServo
  2041  001810  0100               	movlb	0	; () banked
  2042  001812  6FDE               	movwf	initServo@motor& (0+255),b
  2043  001814  0E01               	movlw	high _redirectingServo
  2044  001816  0100               	movlb	0	; () banked
  2045  001818  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2046  00181A  C048  F0E0         	movff	_redirectAngle_AA,initServo@angle
  2047  00181E  C049  F0E1         	movff	_redirectAngle_AA+1,initServo@angle+1
  2048  001822  EC24  F015         	call	_initServo	;wreg free
  2049  001826                     l7562:
  2050                           
  2051                           ;main.c: 139: lcdClear();
  2052  001826  EC64  F01E         	call	_lcdClear	;wreg free
  2053                           
  2054                           ;main.c: 140: printf("running");
  2055  00182A  0EF7               	movlw	low STR_1
  2056  00182C  0100               	movlb	0	; () banked
  2057  00182E  6FBD               	movwf	printf@f& (0+255),b
  2058  001830  0EFF               	movlw	high STR_1
  2059  001832  0100               	movlb	0	; () banked
  2060  001834  6FBE               	movwf	(printf@f+1)& (0+255),b
  2061  001836  EC09  F000         	call	_printf	;wreg free
  2062                           
  2063                           ;main.c: 142: int lastBatteryTime = time;
  2064  00183A  C04E  F131         	movff	_time,main@lastBatteryTime
  2065  00183E  C04F  F132         	movff	_time+1,main@lastBatteryTime+1
  2066                           
  2067                           ;main.c: 144: int cylinderStart = time;
  2068  001842  C04E  F129         	movff	_time,main@cylinderStart
  2069  001846  C04F  F12A         	movff	_time+1,main@cylinderStart+1
  2070                           
  2071                           ;main.c: 145: int cylinderDur = 0;
  2072  00184A  0E00               	movlw	0
  2073  00184C  0101               	movlb	1	; () banked
  2074  00184E  6F2C               	movwf	(main@cylinderDur+1)& (0+255),b
  2075  001850  0E00               	movlw	0
  2076  001852  6F2B               	movwf	main@cylinderDur& (0+255),b
  2077                           
  2078                           ; BSR set to: 1
  2079                           ;main.c: 146: int cylinderForward = 70;
  2080  001854  0E00               	movlw	0
  2081  001856  0101               	movlb	1	; () banked
  2082  001858  6F2E               	movwf	(main@cylinderForward+1)& (0+255),b
  2083  00185A  0E46               	movlw	70
  2084  00185C  6F2D               	movwf	main@cylinderForward& (0+255),b
  2085                           
  2086                           ; BSR set to: 1
  2087                           ;main.c: 147: int cylinderBackward = 30;
  2088  00185E  0E00               	movlw	0
  2089  001860  0101               	movlb	1	; () banked
  2090  001862  6F30               	movwf	(main@cylinderBackward+1)& (0+255),b
  2091  001864  0E1E               	movlw	30
  2092  001866  6F2F               	movwf	main@cylinderBackward& (0+255),b
  2093                           
  2094                           ;main.c: 149: while(!batteryDetected && !terminate){
  2095  001868  D09D               	goto	l7584
  2096  00186A                     l7574:
  2097                           
  2098                           ; BSR set to: 1
  2099                           ;main.c: 151: lcdHome();
  2100  00186A  EC70  F01E         	call	_lcdHome	;wreg free
  2101                           
  2102                           ;main.c: 152: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2103  00186E  0E9F               	movlw	low STR_2
  2104  001870  0100               	movlb	0	; () banked
  2105  001872  6FBD               	movwf	printf@f& (0+255),b
  2106  001874  0EFF               	movlw	high STR_2
  2107  001876  0100               	movlb	0	; () banked
  2108  001878  6FBE               	movwf	(printf@f+1)& (0+255),b
  2109  00187A  C04E  F023         	movff	_time,___aldiv@dividend
  2110  00187E  C04F  F024         	movff	_time+1,___aldiv@dividend+1
  2111  001882  C050  F025         	movff	_time+2,___aldiv@dividend+2
  2112  001886  C051  F026         	movff	_time+3,___aldiv@dividend+3
  2113  00188A  0E58               	movlw	88
  2114  00188C  6E27               	movwf	___aldiv@divisor,c
  2115  00188E  0E02               	movlw	2
  2116  001890  6E28               	movwf	___aldiv@divisor+1,c
  2117  001892  0E00               	movlw	0
  2118  001894  6E29               	movwf	___aldiv@divisor+2,c
  2119  001896  0E00               	movlw	0
  2120  001898  6E2A               	movwf	___aldiv@divisor+3,c
  2121  00189A  ECFF  F015         	call	___aldiv	;wreg free
  2122  00189E  C023  F0BF         	movff	?___aldiv,?_printf+2
  2123  0018A2  C024  F0C0         	movff	?___aldiv+1,?_printf+3
  2124  0018A6  C025  F0C1         	movff	?___aldiv+2,?_printf+4
  2125  0018AA  C026  F0C2         	movff	?___aldiv+3,?_printf+5
  2126  0018AE  0E0A               	movlw	10
  2127  0018B0  6E27               	movwf	___aldiv@divisor,c
  2128  0018B2  0E00               	movlw	0
  2129  0018B4  6E28               	movwf	___aldiv@divisor+1,c
  2130  0018B6  0E00               	movlw	0
  2131  0018B8  6E29               	movwf	___aldiv@divisor+2,c
  2132  0018BA  0E00               	movlw	0
  2133  0018BC  6E2A               	movwf	___aldiv@divisor+3,c
  2134  0018BE  C04E  F023         	movff	_time,___aldiv@dividend
  2135  0018C2  C04F  F024         	movff	_time+1,___aldiv@dividend+1
  2136  0018C6  C050  F025         	movff	_time+2,___aldiv@dividend+2
  2137  0018CA  C051  F026         	movff	_time+3,___aldiv@dividend+3
  2138  0018CE  ECFF  F015         	call	___aldiv	;wreg free
  2139  0018D2  C023  F031         	movff	?___aldiv,___almod@dividend
  2140  0018D6  C024  F032         	movff	?___aldiv+1,___almod@dividend+1
  2141  0018DA  C025  F033         	movff	?___aldiv+2,___almod@dividend+2
  2142  0018DE  C026  F034         	movff	?___aldiv+3,___almod@dividend+3
  2143  0018E2  0E3C               	movlw	60
  2144  0018E4  6E35               	movwf	___almod@divisor,c
  2145  0018E6  0E00               	movlw	0
  2146  0018E8  6E36               	movwf	___almod@divisor+1,c
  2147  0018EA  0E00               	movlw	0
  2148  0018EC  6E37               	movwf	___almod@divisor+2,c
  2149  0018EE  0E00               	movlw	0
  2150  0018F0  6E38               	movwf	___almod@divisor+3,c
  2151  0018F2  EC35  F018         	call	___almod	;wreg free
  2152  0018F6  C031  F0C3         	movff	?___almod,?_printf+6
  2153  0018FA  C032  F0C4         	movff	?___almod+1,?_printf+7
  2154  0018FE  C033  F0C5         	movff	?___almod+2,?_printf+8
  2155  001902  C034  F0C6         	movff	?___almod+3,?_printf+9
  2156  001906  EC09  F000         	call	_printf	;wreg free
  2157                           
  2158                           ;main.c: 153: _delay((unsigned long)((77)*(10000000/4000.0)));
  2159  00190A  0EFA               	movlw	250
  2160  00190C  0101               	movlb	1	; () banked
  2161  00190E  6F1F               	movwf	??_main& (0+255),b
  2162  001910  0EFF               	movlw	255
  2163  001912                     u7967:
  2164  001912  2EE8               	decfsz	wreg,f,c
  2165  001914  D7FE               	bra	u7967
  2166  001916  2F1F               	decfsz	??_main& (0+255),f,b
  2167  001918  D7FC               	bra	u7967
  2168                           
  2169                           ;main.c: 165: if(time - lastBatteryTime > stoppingTime)
  2170  00191A  C131  F11F         	movff	main@lastBatteryTime,??_main
  2171  00191E  C132  F120         	movff	main@lastBatteryTime+1,??_main+1
  2172  001922  0E00               	movlw	0
  2173  001924  0101               	movlb	1	; () banked
  2174  001926  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2175  001928  0EFF               	movlw	255
  2176  00192A  6F21               	movwf	(??_main+2)& (0+255),b
  2177  00192C  6F22               	movwf	(??_main+3)& (0+255),b
  2178  00192E  0101               	movlb	1	; () banked
  2179  001930  1F1F               	comf	??_main& (0+255),f,b
  2180  001932  1F20               	comf	(??_main+1)& (0+255),f,b
  2181  001934  1F21               	comf	(??_main+2)& (0+255),f,b
  2182  001936  1F22               	comf	(??_main+3)& (0+255),f,b
  2183  001938  2B1F               	incf	??_main& (0+255),f,b
  2184  00193A  0E00               	movlw	0
  2185  00193C  2320               	addwfc	(??_main+1)& (0+255),f,b
  2186  00193E  2321               	addwfc	(??_main+2)& (0+255),f,b
  2187  001940  2322               	addwfc	(??_main+3)& (0+255),f,b
  2188  001942  504E               	movf	_time,w,c
  2189  001944  0101               	movlb	1	; () banked
  2190  001946  251F               	addwf	??_main& (0+255),w,b
  2191  001948  0101               	movlb	1	; () banked
  2192  00194A  6F23               	movwf	(??_main+4)& (0+255),b
  2193  00194C  504F               	movf	_time+1,w,c
  2194  00194E  0101               	movlb	1	; () banked
  2195  001950  2120               	addwfc	(??_main+1)& (0+255),w,b
  2196  001952  0101               	movlb	1	; () banked
  2197  001954  6F24               	movwf	(??_main+5)& (0+255),b
  2198  001956  5050               	movf	_time+2,w,c
  2199  001958  0101               	movlb	1	; () banked
  2200  00195A  2121               	addwfc	(??_main+2)& (0+255),w,b
  2201  00195C  0101               	movlb	1	; () banked
  2202  00195E  6F25               	movwf	(??_main+6)& (0+255),b
  2203  001960  5051               	movf	_time+3,w,c
  2204  001962  0101               	movlb	1	; () banked
  2205  001964  2122               	addwfc	(??_main+3)& (0+255),w,b
  2206  001966  0101               	movlb	1	; () banked
  2207  001968  6F26               	movwf	(??_main+7)& (0+255),b
  2208  00196A  0E00               	movlw	0
  2209  00196C  BE4D               	btfsc	_stoppingTime+1,7,c
  2210  00196E  0EFF               	movlw	255
  2211  001970  0101               	movlb	1	; () banked
  2212  001972  6F28               	movwf	(??_main+9)& (0+255),b
  2213  001974  0A80               	xorlw	128
  2214  001976  6F27               	movwf	(??_main+8)& (0+255),b
  2215  001978  0101               	movlb	1	; () banked
  2216  00197A  5123               	movf	(??_main+4)& (0+255),w,b
  2217  00197C  5C4C               	subwf	_stoppingTime,w,c
  2218  00197E  0101               	movlb	1	; () banked
  2219  001980  5124               	movf	(??_main+5)& (0+255),w,b
  2220  001982  584D               	subwfb	_stoppingTime+1,w,c
  2221  001984  0101               	movlb	1	; () banked
  2222  001986  5125               	movf	(??_main+6)& (0+255),w,b
  2223  001988  0101               	movlb	1	; () banked
  2224  00198A  5928               	subwfb	(??_main+9)& (0+255),w,b
  2225  00198C  0101               	movlb	1	; () banked
  2226  00198E  5126               	movf	(??_main+7)& (0+255),w,b
  2227  001990  0A80               	xorlw	128
  2228  001992  0101               	movlb	1	; () banked
  2229  001994  5927               	subwfb	(??_main+8)& (0+255),w,b
  2230  001996  B0D8               	btfsc	status,0,c
  2231  001998  D005               	goto	l7584
  2232                           
  2233                           ; BSR set to: 1
  2234                           ;main.c: 166: {
  2235                           ;main.c: 167: terminate = 1;
  2236  00199A  0E00               	movlw	0
  2237  00199C  6E5B               	movwf	_terminate+1,c
  2238  00199E  0E01               	movlw	1
  2239  0019A0  6E5A               	movwf	_terminate,c
  2240                           
  2241                           ;main.c: 168: break;
  2242  0019A2  D008               	goto	l7588
  2243  0019A4                     l7584:
  2244                           
  2245                           ; BSR set to: 1
  2246  0019A4  5052               	movf	_batteryDetected,w,c
  2247  0019A6  1053               	iorwf	_batteryDetected+1,w,c
  2248  0019A8  A4D8               	btfss	status,2,c
  2249  0019AA  D004               	goto	l7588
  2250                           
  2251                           ; BSR set to: 1
  2252  0019AC  505A               	movf	_terminate,w,c
  2253  0019AE  105B               	iorwf	_terminate+1,w,c
  2254  0019B0  B4D8               	btfsc	status,2,c
  2255  0019B2  D75B               	goto	l7574
  2256  0019B4                     l7588:
  2257                           
  2258                           ; BSR set to: 1
  2259                           ;main.c: 169: }
  2260                           ;main.c: 170: }
  2261                           ;main.c: 172: if(terminate)break;
  2262  0019B4  505A               	movf	_terminate,w,c
  2263  0019B6  105B               	iorwf	_terminate+1,w,c
  2264  0019B8  A4D8               	btfss	status,2,c
  2265  0019BA  D00B               	goto	l7598
  2266                           
  2267                           ; BSR set to: 1
  2268                           ;main.c: 174: sortBattery();
  2269                           
  2270                           ; BSR set to: 1
  2271                           
  2272                           ; BSR set to: 1
  2273  0019BC  EC05  F007         	call	_sortBattery	;wreg free
  2274                           
  2275                           ;main.c: 177: lastBatteryTime = time;
  2276  0019C0  C04E  F131         	movff	_time,main@lastBatteryTime
  2277  0019C4  C04F  F132         	movff	_time+1,main@lastBatteryTime+1
  2278                           
  2279                           ;main.c: 178: batteryDetected = 0;
  2280  0019C8  0E00               	movlw	0
  2281  0019CA  6E53               	movwf	_batteryDetected+1,c
  2282  0019CC  0E00               	movlw	0
  2283  0019CE  6E52               	movwf	_batteryDetected,c
  2284  0019D0  D72A               	goto	l7562
  2285  0019D2                     l7598:
  2286                           
  2287                           ;main.c: 179: }
  2288                           ;main.c: 182: digitalWrite(cylinderMotor, 0);
  2289  0019D2  0E47               	movlw	low _cylinderMotor
  2290  0019D4  6E23               	movwf	digitalWrite@pin,c
  2291  0019D6  0E01               	movlw	high _cylinderMotor
  2292  0019D8  6E24               	movwf	digitalWrite@pin+1,c
  2293  0019DA  0E00               	movlw	0
  2294  0019DC  6E26               	movwf	digitalWrite@val+1,c
  2295  0019DE  0E00               	movlw	0
  2296  0019E0  6E25               	movwf	digitalWrite@val,c
  2297  0019E2  EC65  F016         	call	_digitalWrite	;wreg free
  2298                           
  2299                           ;main.c: 185: lcdClear();
  2300  0019E6  EC64  F01E         	call	_lcdClear	;wreg free
  2301                           
  2302                           ;main.c: 186: printf("[AA,C,9V,OTHER]\n");
  2303  0019EA  0E8E               	movlw	low STR_3
  2304  0019EC  0100               	movlb	0	; () banked
  2305  0019EE  6FBD               	movwf	printf@f& (0+255),b
  2306  0019F0  0EFF               	movlw	high STR_3
  2307  0019F2  0100               	movlb	0	; () banked
  2308  0019F4  6FBE               	movwf	(printf@f+1)& (0+255),b
  2309  0019F6  EC09  F000         	call	_printf	;wreg free
  2310                           
  2311                           ;main.c: 187: printf("[%d,%d,%d,%d]",n_AA,n_C,n_9V,n_OTHER);
  2312  0019FA  0EC0               	movlw	low STR_4
  2313  0019FC  0100               	movlb	0	; () banked
  2314  0019FE  6FBD               	movwf	printf@f& (0+255),b
  2315  001A00  0EFF               	movlw	high STR_4
  2316  001A02  0100               	movlb	0	; () banked
  2317  001A04  6FBE               	movwf	(printf@f+1)& (0+255),b
  2318  001A06  C056  F0BF         	movff	_n_AA,?_printf+2
  2319  001A0A  C057  F0C0         	movff	_n_AA+1,?_printf+3
  2320  001A0E  C058  F0C1         	movff	_n_C,?_printf+4
  2321  001A12  C059  F0C2         	movff	_n_C+1,?_printf+5
  2322  001A16  C171  F0C3         	movff	_n_9V,?_printf+6
  2323  001A1A  C172  F0C4         	movff	_n_9V+1,?_printf+7
  2324  001A1E  C173  F0C5         	movff	_n_OTHER,?_printf+8
  2325  001A22  C174  F0C6         	movff	_n_OTHER+1,?_printf+9
  2326  001A26  EC09  F000         	call	_printf	;wreg free
  2327                           
  2328                           ;main.c: 188: readKeypad();
  2329  001A2A  EC9E  F01D         	call	_readKeypad	;wreg free
  2330  001A2E  D6AA               	goto	l7544
  2331  001A30                     l152:
  2332  001A30  D7FF               	goto	l152
  2333  001A32                     __end_of_main:
  2334                           	opt stack 0
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           postinc0	equ	0xFEE
  2340                           wreg	equ	0xFE8
  2341                           postdec1	equ	0xFE5
  2342                           fsr1l	equ	0xFE1
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function _sortBattery *****************
  2346 ;; Defined at:
  2347 ;;		line 196 in file "main.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  V               3   22[BANK1 ] float 
  2352 ;;  i               2   18[BANK1 ] int 
  2353 ;;  i               3   25[BANK1 ] float 
  2354 ;;  V               3   28[BANK1 ] float 
  2355 ;;  V_max           3   15[BANK1 ] float 
  2356 ;;  resolution      3   12[BANK1 ] float 
  2357 ;;  Vcc             3    9[BANK1 ] float 
  2358 ;;  V_float         3    2[BANK1 ] float 
  2359 ;;  targetAngle     2   20[BANK1 ] int 
  2360 ;;  signal          2    7[BANK1 ] int 
  2361 ;;  pos_v_counte    2    5[BANK1 ] int 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  1    wreg      void 
  2364 ;; Registers used:
  2365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2374 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2375 ;;Total ram usage:       33 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    8
  2378 ;; This function calls:
  2379 ;;		___altoft
  2380 ;;		___awtoft
  2381 ;;		___ftdiv
  2382 ;;		___ftge
  2383 ;;		___ftmul
  2384 ;;		___ftsub
  2385 ;;		___fttol
  2386 ;;		_analogRead
  2387 ;;		_digitalRead
  2388 ;;		_digitalWrite
  2389 ;;		_lcdClear
  2390 ;;		_printf
  2391 ;;		_readKeypad
  2392 ;;		_setAngle
  2393 ;; This function is called by:
  2394 ;;		_main
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text1
  2399  000E0A                     __ptext1:
  2400                           	opt stack 0
  2401  000E0A                     _sortBattery:
  2402                           	opt stack 22
  2403                           
  2404                           ;main.c: 199: setAngle(conveyorServo, 90);
  2405                           
  2406                           ;incstack = 0
  2407  000E0A  0E43               	movlw	low _conveyorServo
  2408  000E0C  0100               	movlb	0	; () banked
  2409  000E0E  6FD4               	movwf	setAngle@motor& (0+255),b
  2410  000E10  0E01               	movlw	high _conveyorServo
  2411  000E12  0100               	movlb	0	; () banked
  2412  000E14  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2413  000E16  0E00               	movlw	0
  2414  000E18  0100               	movlb	0	; () banked
  2415  000E1A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2416  000E1C  0E5A               	movlw	90
  2417  000E1E  6FD6               	movwf	setAngle@angle& (0+255),b
  2418  000E20  EC95  F015         	call	_setAngle	;wreg free
  2419                           
  2420                           ;main.c: 200: digitalWrite(cylinderMotor, 0);
  2421  000E24  0E47               	movlw	low _cylinderMotor
  2422  000E26  6E23               	movwf	digitalWrite@pin,c
  2423  000E28  0E01               	movlw	high _cylinderMotor
  2424  000E2A  6E24               	movwf	digitalWrite@pin+1,c
  2425  000E2C  0E00               	movlw	0
  2426  000E2E  6E26               	movwf	digitalWrite@val+1,c
  2427  000E30  0E00               	movlw	0
  2428  000E32  6E25               	movwf	digitalWrite@val,c
  2429  000E34  EC65  F016         	call	_digitalWrite	;wreg free
  2430                           
  2431                           ;main.c: 203: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2432  000E38  0E0D               	movlw	13
  2433  000E3A  0100               	movlb	0	; () banked
  2434  000E3C  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2435  000E3E  0EAF               	movlw	175
  2436  000E40  0100               	movlb	0	; () banked
  2437  000E42  6FEB               	movwf	??_sortBattery& (0+255),b
  2438  000E44  0EB6               	movlw	182
  2439  000E46                     u7977:
  2440  000E46  2EE8               	decfsz	wreg,f,c
  2441  000E48  D7FE               	bra	u7977
  2442  000E4A  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2443  000E4C  D7FC               	bra	u7977
  2444  000E4E  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2445  000E50  D7FA               	bra	u7977
  2446  000E52  F000               	nop	
  2447                           
  2448                           ;main.c: 205: float Vcc = 5.00;
  2449  000E54  0E00               	movlw	0
  2450  000E56  0101               	movlb	1	; () banked
  2451  000E58  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2452  000E5A  0EA0               	movlw	160
  2453  000E5C  0101               	movlb	1	; () banked
  2454  000E5E  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2455  000E60  0E40               	movlw	64
  2456  000E62  0101               	movlb	1	; () banked
  2457  000E64  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2458                           
  2459                           ; BSR set to: 1
  2460                           ;main.c: 206: float resolution = (1<<10) - 1;
  2461  000E66  0EC0               	movlw	192
  2462  000E68  0101               	movlb	1	; () banked
  2463  000E6A  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2464  000E6C  0E7F               	movlw	127
  2465  000E6E  0101               	movlb	1	; () banked
  2466  000E70  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2467  000E72  0E44               	movlw	68
  2468  000E74  0101               	movlb	1	; () banked
  2469  000E76  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2470                           
  2471                           ; BSR set to: 1
  2472                           ;main.c: 207: float V_max = 0;
  2473  000E78  0E00               	movlw	0
  2474  000E7A  0101               	movlb	1	; () banked
  2475  000E7C  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2476  000E7E  0E00               	movlw	0
  2477  000E80  0101               	movlb	1	; () banked
  2478  000E82  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2479  000E84  0E00               	movlw	0
  2480  000E86  0101               	movlb	1	; () banked
  2481  000E88  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2482                           
  2483                           ; BSR set to: 1
  2484                           ;main.c: 208: float V_float = 0;
  2485  000E8A  0E00               	movlw	0
  2486  000E8C  0101               	movlb	1	; () banked
  2487  000E8E  6F02               	movwf	sortBattery@V_float& (0+255),b
  2488  000E90  0E00               	movlw	0
  2489  000E92  0101               	movlb	1	; () banked
  2490  000E94  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2491  000E96  0E00               	movlw	0
  2492  000E98  0101               	movlb	1	; () banked
  2493  000E9A  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2494                           
  2495                           ; BSR set to: 1
  2496                           ;main.c: 209: int pos_v_counter = 1;
  2497  000E9C  0E00               	movlw	0
  2498  000E9E  0101               	movlb	1	; () banked
  2499  000EA0  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2500  000EA2  0E01               	movlw	1
  2501  000EA4  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2502                           
  2503                           ; BSR set to: 1
  2504                           ;main.c: 210: int signal = 0;
  2505  000EA6  0E00               	movlw	0
  2506  000EA8  0101               	movlb	1	; () banked
  2507  000EAA  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2508  000EAC  0E00               	movlw	0
  2509  000EAE  6F07               	movwf	sortBattery@signal& (0+255),b
  2510                           
  2511                           ; BSR set to: 1
  2512                           ;main.c: 214: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2513  000EB0  C046  F02B         	movff	_padAngle_NEUTRAL,___awtoft@c
  2514  000EB4  C047  F02C         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2515  000EB8  EC6E  F01D         	call	___awtoft	;wreg free
  2516  000EBC  C02B  F119         	movff	?___awtoft,sortBattery@i
  2517  000EC0  C02C  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2518  000EC4  C02D  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2519  000EC8  D0F6               	goto	l7390
  2520  000ECA                     l7364:
  2521                           
  2522                           ;main.c: 215: setAngle(padServo, i);
  2523  000ECA  C119  F0AE         	movff	sortBattery@i,___fttol@f1
  2524  000ECE  C11A  F0AF         	movff	sortBattery@i+1,___fttol@f1+1
  2525  000ED2  C11B  F0B0         	movff	sortBattery@i+2,___fttol@f1+2
  2526  000ED6  ECD8  F010         	call	___fttol	;wreg free
  2527  000EDA  C0AE  F100         	movff	?___fttol,_sortBattery$1397
  2528  000EDE  C0AF  F101         	movff	?___fttol+1,_sortBattery$1397+1
  2529                           
  2530                           ;main.c: 215: setAngle(padServo, i);
  2531  000EE2  0E53               	movlw	low _padServo
  2532  000EE4  0100               	movlb	0	; () banked
  2533  000EE6  6FD4               	movwf	setAngle@motor& (0+255),b
  2534  000EE8  0E01               	movlw	high _padServo
  2535  000EEA  0100               	movlb	0	; () banked
  2536  000EEC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2537  000EEE  C100  F0D6         	movff	_sortBattery$1397,setAngle@angle
  2538  000EF2  C101  F0D7         	movff	_sortBattery$1397+1,setAngle@angle+1
  2539  000EF6  EC95  F015         	call	_setAngle	;wreg free
  2540                           
  2541                           ;main.c: 216: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2542  000EFA  0E53               	movlw	83
  2543  000EFC                     u7987:
  2544  000EFC  2EE8               	decfsz	wreg,f,c
  2545  000EFE  D7FE               	bra	u7987
  2546  000F00  F000               	nop	
  2547                           
  2548                           ;main.c: 217: digitalWrite(AA_float, 1);
  2549  000F02  0E3F               	movlw	low _AA_float
  2550  000F04  6E23               	movwf	digitalWrite@pin,c
  2551  000F06  0E01               	movlw	high _AA_float
  2552  000F08  6E24               	movwf	digitalWrite@pin+1,c
  2553  000F0A  0E00               	movlw	0
  2554  000F0C  6E26               	movwf	digitalWrite@val+1,c
  2555  000F0E  0E01               	movlw	1
  2556  000F10  6E25               	movwf	digitalWrite@val,c
  2557  000F12  EC65  F016         	call	_digitalWrite	;wreg free
  2558                           
  2559                           ;main.c: 218: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2560  000F16  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2561  000F1A  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2562  000F1E  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2563  000F22  C16D  F023         	movff	_padPin3+2,analogRead@channel
  2564  000F26  C16E  F024         	movff	_padPin3+3,analogRead@channel+1
  2565  000F2A  EC52  F01D         	call	_analogRead	;wreg free
  2566  000F2E  C023  F02B         	movff	?_analogRead,___altoft@c
  2567  000F32  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2568  000F36  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2569  000F3A  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2570  000F3E  EC24  F01A         	call	___altoft	;wreg free
  2571  000F42  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2572  000F46  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2573  000F4A  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2574  000F4E  EC2F  F013         	call	___ftdiv	;wreg free
  2575  000F52  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2576  000F56  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2577  000F5A  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2578  000F5E  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2579  000F62  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2580  000F66  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2581  000F6A  EC7D  F00F         	call	___ftmul	;wreg free
  2582  000F6E  C089  F116         	movff	?___ftmul,sortBattery@V
  2583  000F72  C08A  F117         	movff	?___ftmul+1,sortBattery@V+1
  2584  000F76  C08B  F118         	movff	?___ftmul+2,sortBattery@V+2
  2585                           
  2586                           ;main.c: 220: if(V > 0.1)pos_v_counter++;
  2587  000F7A  0ECD               	movlw	205
  2588  000F7C  6E2F               	movwf	___ftge@ff1,c
  2589  000F7E  0ECC               	movlw	204
  2590  000F80  6E30               	movwf	___ftge@ff1+1,c
  2591  000F82  0E3D               	movlw	61
  2592  000F84  6E31               	movwf	___ftge@ff1+2,c
  2593  000F86  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2594  000F8A  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2595  000F8E  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2596  000F92  ECD4  F018         	call	___ftge	;wreg free
  2597  000F96  B0D8               	btfsc	status,0,c
  2598  000F98  D003               	goto	l7378
  2599  000F9A  0101               	movlb	1	; () banked
  2600  000F9C  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2601  000F9E  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2602  000FA0                     l7378:
  2603                           
  2604                           ;main.c: 222: if(V > V_max) {
  2605  000FA0  C10F  F02F         	movff	sortBattery@V_max,___ftge@ff1
  2606  000FA4  C110  F030         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2607  000FA8  C111  F031         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2608  000FAC  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2609  000FB0  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2610  000FB4  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2611  000FB8  ECD4  F018         	call	___ftge	;wreg free
  2612  000FBC  B0D8               	btfsc	status,0,c
  2613  000FBE  D064               	goto	l7388
  2614                           
  2615                           ;main.c: 223: signal = digitalRead(padPin1)<<1;
  2616  000FC0  0E4B               	movlw	low _padPin1
  2617  000FC2  6E23               	movwf	digitalRead@pin,c
  2618  000FC4  0E01               	movlw	high _padPin1
  2619  000FC6  6E24               	movwf	digitalRead@pin+1,c
  2620  000FC8  EC3D  F014         	call	_digitalRead	;wreg free
  2621  000FCC  90D8               	bcf	status,0,c
  2622  000FCE  3423               	rlcf	?_digitalRead,w,c
  2623  000FD0  0101               	movlb	1	; () banked
  2624  000FD2  6F07               	movwf	sortBattery@signal& (0+255),b
  2625  000FD4  3424               	rlcf	?_digitalRead+1,w,c
  2626  000FD6  0101               	movlb	1	; () banked
  2627  000FD8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2628                           
  2629                           ;main.c: 224: signal |= digitalRead(padPin2)<<0;
  2630  000FDA  0E4F               	movlw	low _padPin2
  2631  000FDC  6E23               	movwf	digitalRead@pin,c
  2632  000FDE  0E01               	movlw	high _padPin2
  2633  000FE0  6E24               	movwf	digitalRead@pin+1,c
  2634  000FE2  EC3D  F014         	call	_digitalRead	;wreg free
  2635  000FE6  5023               	movf	?_digitalRead,w,c
  2636  000FE8  0101               	movlb	1	; () banked
  2637  000FEA  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2638  000FEC  5024               	movf	?_digitalRead+1,w,c
  2639  000FEE  0101               	movlb	1	; () banked
  2640  000FF0  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2641                           
  2642                           ; BSR set to: 1
  2643                           ;main.c: 226: V_max = V;
  2644  000FF2  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2645  000FF6  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2646  000FFA  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2647                           
  2648                           ;main.c: 229: digitalWrite(AA_float, 0);
  2649  000FFE  0E3F               	movlw	low _AA_float
  2650  001000  6E23               	movwf	digitalWrite@pin,c
  2651  001002  0E01               	movlw	high _AA_float
  2652  001004  6E24               	movwf	digitalWrite@pin+1,c
  2653  001006  0E00               	movlw	0
  2654  001008  6E26               	movwf	digitalWrite@val+1,c
  2655  00100A  0E00               	movlw	0
  2656  00100C  6E25               	movwf	digitalWrite@val,c
  2657  00100E  EC65  F016         	call	_digitalWrite	;wreg free
  2658                           
  2659                           ;main.c: 230: _delay((unsigned long)((1)*(10000000/4000.0)));
  2660  001012  0E04               	movlw	4
  2661  001014  0100               	movlb	0	; () banked
  2662  001016  6FEB               	movwf	??_sortBattery& (0+255),b
  2663  001018  0E3D               	movlw	61
  2664  00101A                     u7997:
  2665  00101A  2EE8               	decfsz	wreg,f,c
  2666  00101C  D7FE               	bra	u7997
  2667  00101E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2668  001020  D7FC               	bra	u7997
  2669  001022  D000               	nop2	
  2670                           
  2671                           ;main.c: 231: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2672  001024  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2673  001028  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2674  00102C  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2675  001030  C16D  F023         	movff	_padPin3+2,analogRead@channel
  2676  001034  C16E  F024         	movff	_padPin3+3,analogRead@channel+1
  2677  001038  EC52  F01D         	call	_analogRead	;wreg free
  2678  00103C  C023  F02B         	movff	?_analogRead,___altoft@c
  2679  001040  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2680  001044  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2681  001048  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2682  00104C  EC24  F01A         	call	___altoft	;wreg free
  2683  001050  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2684  001054  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2685  001058  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2686  00105C  EC2F  F013         	call	___ftdiv	;wreg free
  2687  001060  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2688  001064  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2689  001068  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2690  00106C  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2691  001070  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2692  001074  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2693  001078  EC7D  F00F         	call	___ftmul	;wreg free
  2694  00107C  C089  F102         	movff	?___ftmul,sortBattery@V_float
  2695  001080  C08A  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2696  001084  C08B  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2697  001088                     l7388:
  2698  001088  C119  F0AE         	movff	sortBattery@i,___ftsub@f1
  2699  00108C  C11A  F0AF         	movff	sortBattery@i+1,___ftsub@f1+1
  2700  001090  C11B  F0B0         	movff	sortBattery@i+2,___ftsub@f1+2
  2701  001094  0ECD               	movlw	205
  2702  001096  0100               	movlb	0	; () banked
  2703  001098  6FB1               	movwf	___ftsub@f2& (0+255),b
  2704  00109A  0ECC               	movlw	204
  2705  00109C  0100               	movlb	0	; () banked
  2706  00109E  6FB2               	movwf	(___ftsub@f2+1)& (0+255),b
  2707  0010A0  0E3D               	movlw	61
  2708  0010A2  0100               	movlb	0	; () banked
  2709  0010A4  6FB3               	movwf	(___ftsub@f2+2)& (0+255),b
  2710  0010A6  EC78  F01C         	call	___ftsub	;wreg free
  2711  0010AA  C0AE  F119         	movff	?___ftsub,sortBattery@i
  2712  0010AE  C0AF  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2713  0010B2  C0B0  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2714  0010B6                     l7390:
  2715  0010B6  C044  F02B         	movff	_padAngle_CLOSE,___awtoft@c
  2716  0010BA  C045  F02C         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2717  0010BE  EC6E  F01D         	call	___awtoft	;wreg free
  2718  0010C2  C02B  F02F         	movff	?___awtoft,___ftge@ff1
  2719  0010C6  C02C  F030         	movff	?___awtoft+1,___ftge@ff1+1
  2720  0010CA  C02D  F031         	movff	?___awtoft+2,___ftge@ff1+2
  2721  0010CE  C119  F032         	movff	sortBattery@i,___ftge@ff2
  2722  0010D2  C11A  F033         	movff	sortBattery@i+1,___ftge@ff2+1
  2723  0010D6  C11B  F034         	movff	sortBattery@i+2,___ftge@ff2+2
  2724  0010DA  ECD4  F018         	call	___ftge	;wreg free
  2725  0010DE  A0D8               	btfss	status,0,c
  2726  0010E0  D6F4               	goto	l7364
  2727                           
  2728                           ;main.c: 233: }
  2729                           ;main.c: 234: }
  2730                           ;main.c: 236: int targetAngle;
  2731                           ;main.c: 237: float V = V_max;
  2732  0010E2  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_223
  2733  0010E6  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_223+1
  2734  0010EA  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_223+2
  2735                           
  2736                           ;main.c: 239: lcdClear();
  2737  0010EE  EC64  F01E         	call	_lcdClear	;wreg free
  2738                           
  2739                           ;main.c: 240: printf("V: %.3f, N: %d\n",V,pos_v_counter);
  2740  0010F2  0EB0               	movlw	low STR_5
  2741  0010F4  0100               	movlb	0	; () banked
  2742  0010F6  6FBD               	movwf	printf@f& (0+255),b
  2743  0010F8  0EFF               	movlw	high STR_5
  2744  0010FA  0100               	movlb	0	; () banked
  2745  0010FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  2746  0010FE  C11C  F0BF         	movff	sortBattery@V_223,?_printf+2
  2747  001102  C11D  F0C0         	movff	sortBattery@V_223+1,?_printf+3
  2748  001106  C11E  F0C1         	movff	sortBattery@V_223+2,?_printf+4
  2749  00110A  C105  F0C2         	movff	sortBattery@pos_v_counter,?_printf+5
  2750  00110E  C106  F0C3         	movff	sortBattery@pos_v_counter+1,?_printf+6
  2751  001112  EC09  F000         	call	_printf	;wreg free
  2752                           
  2753                           ;main.c: 245: switch(signal){
  2754  001116  D098               	goto	l7430
  2755  001118                     l7396:
  2756                           
  2757                           ;main.c: 247: if(V_float < 0.1){
  2758  001118  C102  F02F         	movff	sortBattery@V_float,___ftge@ff1
  2759  00111C  C103  F030         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2760  001120  C104  F031         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2761  001124  0ECD               	movlw	205
  2762  001126  6E32               	movwf	___ftge@ff2,c
  2763  001128  0ECC               	movlw	204
  2764  00112A  6E33               	movwf	___ftge@ff2+1,c
  2765  00112C  0E3D               	movlw	61
  2766  00112E  6E34               	movwf	___ftge@ff2+2,c
  2767  001130  ECD4  F018         	call	___ftge	;wreg free
  2768  001134  B0D8               	btfsc	status,0,c
  2769  001136  D02D               	goto	l7408
  2770                           
  2771                           ;main.c: 248: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2772  001138  C03E  F02F         	movff	_V_LIM_AA,___ftge@ff1
  2773  00113C  C03F  F030         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2774  001140  C040  F031         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2775  001144  C11C  F032         	movff	sortBattery@V_223,___ftge@ff2
  2776  001148  C11D  F033         	movff	sortBattery@V_223+1,___ftge@ff2+1
  2777  00114C  C11E  F034         	movff	sortBattery@V_223+2,___ftge@ff2+2
  2778  001150  ECD4  F018         	call	___ftge	;wreg free
  2779  001154  B0D8               	btfsc	status,0,c
  2780  001156  D007               	goto	l166
  2781  001158  C048  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2782  00115C  C049  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2783  001160  4A56               	infsnz	_n_AA,f,c
  2784  001162  2A57               	incf	_n_AA+1,f,c
  2785  001164  D007               	goto	l7406
  2786  001166                     l166:
  2787                           
  2788                           ;main.c: 249: else { targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2789  001166  C04A  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2790  00116A  C04B  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2791  00116E  0101               	movlb	1	; () banked
  2792  001170  4B73               	infsnz	_n_OTHER& (0+255),f,b
  2793  001172  2B74               	incf	(_n_OTHER+1)& (0+255),f,b
  2794  001174                     l7406:
  2795                           
  2796                           ;main.c: 250: printf("AA lim: %f",V_LIM_AA);
  2797  001174  0ED9               	movlw	low STR_6
  2798  001176  0100               	movlb	0	; () banked
  2799  001178  6FBD               	movwf	printf@f& (0+255),b
  2800  00117A  0EFF               	movlw	high STR_6
  2801  00117C  0100               	movlb	0	; () banked
  2802  00117E  6FBE               	movwf	(printf@f+1)& (0+255),b
  2803  001180  C03E  F0BF         	movff	_V_LIM_AA,?_printf+2
  2804  001184  C03F  F0C0         	movff	_V_LIM_AA+1,?_printf+3
  2805  001188  C040  F0C1         	movff	_V_LIM_AA+2,?_printf+4
  2806  00118C  EC09  F000         	call	_printf	;wreg free
  2807                           
  2808                           ;main.c: 251: break;
  2809  001190  D06F               	goto	l7432
  2810  001192                     l7408:
  2811                           
  2812                           ;main.c: 255: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  2813  001192  C03B  F02F         	movff	_V_LIM_9V,___ftge@ff1
  2814  001196  C03C  F030         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2815  00119A  C03D  F031         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2816  00119E  C11C  F032         	movff	sortBattery@V_223,___ftge@ff2
  2817  0011A2  C11D  F033         	movff	sortBattery@V_223+1,___ftge@ff2+1
  2818  0011A6  C11E  F034         	movff	sortBattery@V_223+2,___ftge@ff2+2
  2819  0011AA  ECD4  F018         	call	___ftge	;wreg free
  2820  0011AE  B0D8               	btfsc	status,0,c
  2821  0011B0  D008               	goto	l170
  2822  0011B2  C13B  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2823  0011B6  C13C  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2824  0011BA  0101               	movlb	1	; () banked
  2825  0011BC  4B71               	infsnz	_n_9V& (0+255),f,b
  2826  0011BE  2B72               	incf	(_n_9V+1)& (0+255),f,b
  2827  0011C0  D007               	goto	l7416
  2828  0011C2                     l170:
  2829                           
  2830                           ;main.c: 256: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2831  0011C2  C04A  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2832  0011C6  C04B  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2833  0011CA  0101               	movlb	1	; () banked
  2834  0011CC  4B73               	infsnz	_n_OTHER& (0+255),f,b
  2835  0011CE  2B74               	incf	(_n_OTHER+1)& (0+255),f,b
  2836  0011D0                     l7416:
  2837                           
  2838                           ; BSR set to: 1
  2839                           ;main.c: 257: printf("9V lim: %f",V_LIM_9V);
  2840  0011D0  0EE4               	movlw	low STR_7
  2841  0011D2  0100               	movlb	0	; () banked
  2842  0011D4  6FBD               	movwf	printf@f& (0+255),b
  2843  0011D6  0EFF               	movlw	high STR_7
  2844  0011D8  0100               	movlb	0	; () banked
  2845  0011DA  6FBE               	movwf	(printf@f+1)& (0+255),b
  2846  0011DC  C03B  F0BF         	movff	_V_LIM_9V,?_printf+2
  2847  0011E0  C03C  F0C0         	movff	_V_LIM_9V+1,?_printf+3
  2848  0011E4  C03D  F0C1         	movff	_V_LIM_9V+2,?_printf+4
  2849  0011E8  EC09  F000         	call	_printf	;wreg free
  2850                           
  2851                           ;main.c: 258: break;
  2852  0011EC  D041               	goto	l7432
  2853  0011EE                     l7418:
  2854                           
  2855                           ;main.c: 260: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  2856  0011EE  C041  F02F         	movff	_V_LIM_C,___ftge@ff1
  2857  0011F2  C042  F030         	movff	_V_LIM_C+1,___ftge@ff1+1
  2858  0011F6  C043  F031         	movff	_V_LIM_C+2,___ftge@ff1+2
  2859  0011FA  C11C  F032         	movff	sortBattery@V_223,___ftge@ff2
  2860  0011FE  C11D  F033         	movff	sortBattery@V_223+1,___ftge@ff2+1
  2861  001202  C11E  F034         	movff	sortBattery@V_223+2,___ftge@ff2+2
  2862  001206  ECD4  F018         	call	___ftge	;wreg free
  2863  00120A  B0D8               	btfsc	status,0,c
  2864  00120C  D007               	goto	l173
  2865  00120E  C13D  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  2866  001212  C13E  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2867  001216  4A58               	infsnz	_n_C,f,c
  2868  001218  2A59               	incf	_n_C+1,f,c
  2869  00121A  D007               	goto	l7426
  2870  00121C                     l173:
  2871                           
  2872                           ;main.c: 261: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2873  00121C  C04A  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2874  001220  C04B  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2875  001224  0101               	movlb	1	; () banked
  2876  001226  4B73               	infsnz	_n_OTHER& (0+255),f,b
  2877  001228  2B74               	incf	(_n_OTHER+1)& (0+255),f,b
  2878  00122A                     l7426:
  2879                           
  2880                           ;main.c: 262: printf("C  lim: %f",V_LIM_C);
  2881  00122A  0ECE               	movlw	low STR_8
  2882  00122C  0100               	movlb	0	; () banked
  2883  00122E  6FBD               	movwf	printf@f& (0+255),b
  2884  001230  0EFF               	movlw	high STR_8
  2885  001232  0100               	movlb	0	; () banked
  2886  001234  6FBE               	movwf	(printf@f+1)& (0+255),b
  2887  001236  C041  F0BF         	movff	_V_LIM_C,?_printf+2
  2888  00123A  C042  F0C0         	movff	_V_LIM_C+1,?_printf+3
  2889  00123E  C043  F0C1         	movff	_V_LIM_C+2,?_printf+4
  2890  001242  EC09  F000         	call	_printf	;wreg free
  2891                           
  2892                           ;main.c: 264: }
  2893                           
  2894                           ;main.c: 263: break;
  2895  001246  D014               	goto	l7432
  2896  001248                     l7430:
  2897  001248  C107  F0EB         	movff	sortBattery@signal,??_sortBattery
  2898  00124C  C108  F0EC         	movff	sortBattery@signal+1,??_sortBattery+1
  2899                           
  2900                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2901                           ; Switch size 1, requested type "space"
  2902                           ; Number of cases is 1, Range of values is 0 to 0
  2903                           ; switch strategies available:
  2904                           ; Name         Instructions Cycles
  2905                           ; simple_byte            4     3 (average)
  2906                           ;	Chosen strategy is simple_byte
  2907  001250  0100               	movlb	0	; () banked
  2908  001252  51EC               	movf	(??_sortBattery+1)& (0+255),w,b
  2909  001254  0A00               	xorlw	0	; case 0
  2910  001256  A4D8               	btfss	status,2,c
  2911  001258  D00B               	goto	l7432
  2912                           
  2913                           ; BSR set to: 0
  2914                           ; Switch size 1, requested type "space"
  2915                           ; Number of cases is 3, Range of values is 0 to 2
  2916                           ; switch strategies available:
  2917                           ; Name         Instructions Cycles
  2918                           ; simple_byte           10     6 (average)
  2919                           ;	Chosen strategy is simple_byte
  2920  00125A  0100               	movlb	0	; () banked
  2921  00125C  51EB               	movf	??_sortBattery& (0+255),w,b
  2922  00125E  0A00               	xorlw	0	; case 0
  2923  001260  B4D8               	btfsc	status,2,c
  2924  001262  D75A               	goto	l7396
  2925  001264  0A01               	xorlw	1	; case 1
  2926  001266  B4D8               	btfsc	status,2,c
  2927  001268  D7C2               	goto	l7418
  2928  00126A  0A03               	xorlw	3	; case 2
  2929  00126C  B4D8               	btfsc	status,2,c
  2930  00126E  D791               	goto	l7408
  2931  001270                     l7432:
  2932                           
  2933                           ;main.c: 267: readKeypad();
  2934  001270  EC9E  F01D         	call	_readKeypad	;wreg free
  2935                           
  2936                           ;main.c: 268: setAngle(redirectingServo, targetAngle);
  2937  001274  0E57               	movlw	low _redirectingServo
  2938  001276  0100               	movlb	0	; () banked
  2939  001278  6FD4               	movwf	setAngle@motor& (0+255),b
  2940  00127A  0E01               	movlw	high _redirectingServo
  2941  00127C  0100               	movlb	0	; () banked
  2942  00127E  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2943  001280  C114  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  2944  001284  C115  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2945  001288  EC95  F015         	call	_setAngle	;wreg free
  2946                           
  2947                           ;main.c: 269: _delay((unsigned long)((500)*(10000000/4000.0)));
  2948  00128C  0E07               	movlw	7
  2949  00128E  0100               	movlb	0	; () banked
  2950  001290  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2951  001292  0E58               	movlw	88
  2952  001294  0100               	movlb	0	; () banked
  2953  001296  6FEB               	movwf	??_sortBattery& (0+255),b
  2954  001298  0E59               	movlw	89
  2955  00129A                     u8007:
  2956  00129A  2EE8               	decfsz	wreg,f,c
  2957  00129C  D7FE               	bra	u8007
  2958  00129E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2959  0012A0  D7FC               	bra	u8007
  2960  0012A2  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2961  0012A4  D7FA               	bra	u8007
  2962  0012A6  D000               	nop2	
  2963                           
  2964                           ;main.c: 273: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  2965  0012A8  C044  F112         	movff	_padAngle_CLOSE,sortBattery@i_228
  2966  0012AC  C045  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_228+1
  2967  0012B0  D018               	goto	l7446
  2968  0012B2                     l7440:
  2969                           
  2970                           ;main.c: 274: setAngle(padServo, i);
  2971  0012B2  0E53               	movlw	low _padServo
  2972  0012B4  0100               	movlb	0	; () banked
  2973  0012B6  6FD4               	movwf	setAngle@motor& (0+255),b
  2974  0012B8  0E01               	movlw	high _padServo
  2975  0012BA  0100               	movlb	0	; () banked
  2976  0012BC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2977  0012BE  C112  F0D6         	movff	sortBattery@i_228,setAngle@angle
  2978  0012C2  C113  F0D7         	movff	sortBattery@i_228+1,setAngle@angle+1
  2979  0012C6  EC95  F015         	call	_setAngle	;wreg free
  2980                           
  2981                           ;main.c: 275: _delay((unsigned long)((3)*(10000000/4000.0)));
  2982  0012CA  0E0A               	movlw	10
  2983  0012CC  0100               	movlb	0	; () banked
  2984  0012CE  6FEB               	movwf	??_sortBattery& (0+255),b
  2985  0012D0  0EBC               	movlw	188
  2986  0012D2                     u8017:
  2987  0012D2  2EE8               	decfsz	wreg,f,c
  2988  0012D4  D7FE               	bra	u8017
  2989  0012D6  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2990  0012D8  D7FC               	bra	u8017
  2991  0012DA  F000               	nop	
  2992  0012DC  0101               	movlb	1	; () banked
  2993  0012DE  4B12               	infsnz	sortBattery@i_228& (0+255),f,b
  2994  0012E0  2B13               	incf	(sortBattery@i_228+1)& (0+255),f,b
  2995  0012E2                     l7446:
  2996  0012E2  0101               	movlb	1	; () banked
  2997  0012E4  5139               	movf	_padAngle_OPEN& (0+255),w,b
  2998  0012E6  0101               	movlb	1	; () banked
  2999  0012E8  5D12               	subwf	sortBattery@i_228& (0+255),w,b
  3000  0012EA  0101               	movlb	1	; () banked
  3001  0012EC  5113               	movf	(sortBattery@i_228+1)& (0+255),w,b
  3002  0012EE  0A80               	xorlw	128
  3003  0012F0  0100               	movlb	0	; () banked
  3004  0012F2  6FEB               	movwf	??_sortBattery& (0+255),b
  3005  0012F4  0101               	movlb	1	; () banked
  3006  0012F6  513A               	movf	(_padAngle_OPEN+1)& (0+255),w,b
  3007  0012F8  0A80               	xorlw	128
  3008  0012FA  0100               	movlb	0	; () banked
  3009  0012FC  59EB               	subwfb	??_sortBattery& (0+255),w,b
  3010  0012FE  A0D8               	btfss	status,0,c
  3011  001300  D7D8               	goto	l7440
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;main.c: 276: }
  3015                           ;main.c: 278: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3016                           
  3017                           ; BSR set to: 0
  3018  001302  0E0D               	movlw	13
  3019  001304  0100               	movlb	0	; () banked
  3020  001306  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3021  001308  0EAF               	movlw	175
  3022  00130A  0100               	movlb	0	; () banked
  3023  00130C  6FEB               	movwf	??_sortBattery& (0+255),b
  3024  00130E  0EB6               	movlw	182
  3025  001310                     u8027:
  3026  001310  2EE8               	decfsz	wreg,f,c
  3027  001312  D7FE               	bra	u8027
  3028  001314  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3029  001316  D7FC               	bra	u8027
  3030  001318  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3031  00131A  D7FA               	bra	u8027
  3032  00131C  F000               	nop	
  3033                           
  3034                           ;main.c: 282: setAngle(padServo, padAngle_NEUTRAL);
  3035  00131E  0E53               	movlw	low _padServo
  3036  001320  0100               	movlb	0	; () banked
  3037  001322  6FD4               	movwf	setAngle@motor& (0+255),b
  3038  001324  0E01               	movlw	high _padServo
  3039  001326  0100               	movlb	0	; () banked
  3040  001328  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3041  00132A  C046  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  3042  00132E  C047  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3043  001332  EC95  F015         	call	_setAngle	;wreg free
  3044                           
  3045                           ;main.c: 286: setAngle(conveyorServo, 130);
  3046  001336  0E43               	movlw	low _conveyorServo
  3047  001338  0100               	movlb	0	; () banked
  3048  00133A  6FD4               	movwf	setAngle@motor& (0+255),b
  3049  00133C  0E01               	movlw	high _conveyorServo
  3050  00133E  0100               	movlb	0	; () banked
  3051  001340  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3052  001342  0E00               	movlw	0
  3053  001344  0100               	movlb	0	; () banked
  3054  001346  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  3055  001348  0E82               	movlw	130
  3056  00134A  6FD6               	movwf	setAngle@angle& (0+255),b
  3057  00134C  EC95  F015         	call	_setAngle	;wreg free
  3058                           
  3059                           ;main.c: 287: digitalWrite(cylinderMotor, 1);
  3060  001350  0E47               	movlw	low _cylinderMotor
  3061  001352  6E23               	movwf	digitalWrite@pin,c
  3062  001354  0E01               	movlw	high _cylinderMotor
  3063  001356  6E24               	movwf	digitalWrite@pin+1,c
  3064  001358  0E00               	movlw	0
  3065  00135A  6E26               	movwf	digitalWrite@val+1,c
  3066  00135C  0E01               	movlw	1
  3067  00135E  6E25               	movwf	digitalWrite@val,c
  3068  001360  EC65  F016         	call	_digitalWrite	;wreg free
  3069  001364  0012               	return		;funcret
  3070  001366                     __end_of_sortBattery:
  3071                           	opt stack 0
  3072                           tblptru	equ	0xFF8
  3073                           tblptrh	equ	0xFF7
  3074                           tblptrl	equ	0xFF6
  3075                           tablat	equ	0xFF5
  3076                           postinc0	equ	0xFEE
  3077                           wreg	equ	0xFE8
  3078                           postdec1	equ	0xFE5
  3079                           fsr1l	equ	0xFE1
  3080                           status	equ	0xFD8
  3081                           
  3082 ;; *************** function _digitalWrite *****************
  3083 ;; Defined at:
  3084 ;;		line 53 in file "iopin.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  pin             2   34[COMRAM] PTR int 
  3087 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
  3088 ;;		 -> cylinderMotor(4), 
  3089 ;;  val             2   36[COMRAM] int 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  p               2   41[COMRAM] int 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;Total ram usage:        9 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    3
  3108 ;; This function calls:
  3109 ;;		Nothing
  3110 ;; This function is called by:
  3111 ;;		_main
  3112 ;;		_sortBattery
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text2
  3117  002CCA                     __ptext2:
  3118                           	opt stack 0
  3119  002CCA                     _digitalWrite:
  3120                           	opt stack 26
  3121                           
  3122                           ;iopin.c: 54: if(pin){
  3123                           
  3124                           ;incstack = 0
  3125  002CCA  5023               	movf	digitalWrite@pin,w,c
  3126  002CCC  1024               	iorwf	digitalWrite@pin+1,w,c
  3127  002CCE  B4D8               	btfsc	status,2,c
  3128  002CD0  0012               	return	
  3129                           
  3130                           ;iopin.c: 55: int p = 1 << pin[1];
  3131  002CD2  EE20 F002          	lfsr	2,2
  3132  002CD6  5023               	movf	digitalWrite@pin,w,c
  3133  002CD8  26D9               	addwf	fsr2l,f,c
  3134  002CDA  5024               	movf	digitalWrite@pin+1,w,c
  3135  002CDC  22DA               	addwfc	fsr2h,f,c
  3136  002CDE  50DF               	movf	indf2,w,c
  3137  002CE0  6E27               	movwf	??_digitalWrite& (0+255),c
  3138  002CE2  0E01               	movlw	1
  3139  002CE4  6E28               	movwf	(??_digitalWrite+1)& (0+255),c
  3140  002CE6  0E00               	movlw	0
  3141  002CE8  6E29               	movwf	(??_digitalWrite+2)& (0+255),c
  3142  002CEA  2A27               	incf	??_digitalWrite,f,c
  3143  002CEC  D003               	goto	u7294
  3144  002CEE                     u7295:
  3145  002CEE  90D8               	bcf	status,0,c
  3146  002CF0  3628               	rlcf	??_digitalWrite+1,f,c
  3147  002CF2  3629               	rlcf	??_digitalWrite+2,f,c
  3148  002CF4                     u7294:
  3149  002CF4  2E27               	decfsz	??_digitalWrite,f,c
  3150  002CF6  D7FB               	goto	u7295
  3151  002CF8  C028  F02A         	movff	??_digitalWrite+1,digitalWrite@p
  3152  002CFC  C029  F02B         	movff	??_digitalWrite+2,digitalWrite@p+1
  3153                           
  3154                           ;iopin.c: 56: if(val == 0){
  3155  002D00  5025               	movf	digitalWrite@val,w,c
  3156  002D02  1026               	iorwf	digitalWrite@val+1,w,c
  3157  002D04  A4D8               	btfss	status,2,c
  3158  002D06  D02B               	goto	l7076
  3159                           
  3160                           ;iopin.c: 57: p ^= 0xff;
  3161  002D08  0EFF               	movlw	255
  3162  002D0A  1A2A               	xorwf	digitalWrite@p,f,c
  3163                           
  3164                           ;iopin.c: 58: }
  3165                           ;iopin.c: 60: switch(pin[0]){
  3166  002D0C  D028               	goto	l7076
  3167  002D0E                     l7052:
  3168  002D0E  0425               	decf	digitalWrite@val,w,c
  3169  002D10  1026               	iorwf	digitalWrite@val+1,w,c
  3170  002D12  A4D8               	btfss	status,2,c
  3171  002D14  D003               	goto	l7056
  3172  002D16  502A               	movf	digitalWrite@p,w,c
  3173  002D18  1289               	iorwf	3977,f,c	;volatile
  3174  002D1A  0012               	return	
  3175  002D1C                     l7056:
  3176                           
  3177                           ;iopin.c: 62: else LATA &= p;
  3178  002D1C  502A               	movf	digitalWrite@p,w,c
  3179  002D1E  1689               	andwf	3977,f,c	;volatile
  3180                           
  3181                           ;iopin.c: 63: break;
  3182  002D20  0012               	return	
  3183  002D22                     l7058:
  3184  002D22  0425               	decf	digitalWrite@val,w,c
  3185  002D24  1026               	iorwf	digitalWrite@val+1,w,c
  3186  002D26  A4D8               	btfss	status,2,c
  3187  002D28  D003               	goto	l7062
  3188  002D2A  502A               	movf	digitalWrite@p,w,c
  3189  002D2C  128A               	iorwf	3978,f,c	;volatile
  3190  002D2E  0012               	return	
  3191  002D30                     l7062:
  3192                           
  3193                           ;iopin.c: 65: else LATB &= p;
  3194  002D30  502A               	movf	digitalWrite@p,w,c
  3195  002D32  168A               	andwf	3978,f,c	;volatile
  3196                           
  3197                           ;iopin.c: 66: break;
  3198  002D34  0012               	return	
  3199  002D36                     l7064:
  3200  002D36  0425               	decf	digitalWrite@val,w,c
  3201  002D38  1026               	iorwf	digitalWrite@val+1,w,c
  3202  002D3A  A4D8               	btfss	status,2,c
  3203  002D3C  D003               	goto	l7068
  3204  002D3E  502A               	movf	digitalWrite@p,w,c
  3205  002D40  128B               	iorwf	3979,f,c	;volatile
  3206  002D42  0012               	return	
  3207  002D44                     l7068:
  3208                           
  3209                           ;iopin.c: 68: else LATC &= p;
  3210  002D44  502A               	movf	digitalWrite@p,w,c
  3211  002D46  168B               	andwf	3979,f,c	;volatile
  3212                           
  3213                           ;iopin.c: 69: break;
  3214  002D48  0012               	return	
  3215  002D4A                     l7070:
  3216  002D4A  0425               	decf	digitalWrite@val,w,c
  3217  002D4C  1026               	iorwf	digitalWrite@val+1,w,c
  3218  002D4E  A4D8               	btfss	status,2,c
  3219  002D50  D003               	goto	l7074
  3220  002D52  502A               	movf	digitalWrite@p,w,c
  3221  002D54  128C               	iorwf	3980,f,c	;volatile
  3222  002D56  0012               	return	
  3223  002D58                     l7074:
  3224                           
  3225                           ;iopin.c: 71: else LATD &= p;
  3226  002D58  502A               	movf	digitalWrite@p,w,c
  3227  002D5A  168C               	andwf	3980,f,c	;volatile
  3228                           
  3229                           ;iopin.c: 72: }
  3230  002D5C  0012               	return	
  3231  002D5E                     l7076:
  3232  002D5E  C023  FFD9         	movff	digitalWrite@pin,fsr2l
  3233  002D62  C024  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3234  002D66  CFDE F027          	movff	postinc2,??_digitalWrite
  3235  002D6A  CFDD F028          	movff	postdec2,??_digitalWrite+1
  3236                           
  3237                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3238                           ; Switch size 1, requested type "space"
  3239                           ; Number of cases is 1, Range of values is 0 to 0
  3240                           ; switch strategies available:
  3241                           ; Name         Instructions Cycles
  3242                           ; simple_byte            4     3 (average)
  3243                           ;	Chosen strategy is simple_byte
  3244  002D6E  5028               	movf	??_digitalWrite+1,w,c
  3245  002D70  0A00               	xorlw	0	; case 0
  3246  002D72  A4D8               	btfss	status,2,c
  3247  002D74  0012               	return	
  3248                           
  3249                           ; Switch size 1, requested type "space"
  3250                           ; Number of cases is 4, Range of values is 0 to 3
  3251                           ; switch strategies available:
  3252                           ; Name         Instructions Cycles
  3253                           ; simple_byte           13     7 (average)
  3254                           ;	Chosen strategy is simple_byte
  3255  002D76  5027               	movf	??_digitalWrite,w,c
  3256  002D78  0A00               	xorlw	0	; case 0
  3257  002D7A  B4D8               	btfsc	status,2,c
  3258  002D7C  D7C8               	goto	l7052
  3259  002D7E  0A01               	xorlw	1	; case 1
  3260  002D80  B4D8               	btfsc	status,2,c
  3261  002D82  D7CF               	goto	l7058
  3262  002D84  0A03               	xorlw	3	; case 2
  3263  002D86  B4D8               	btfsc	status,2,c
  3264  002D88  D7D6               	goto	l7064
  3265  002D8A  0A01               	xorlw	1	; case 3
  3266  002D8C  A4D8               	btfss	status,2,c
  3267  002D8E  0012               	return	
  3268  002D90  D7DC               	goto	l7070
  3269  002D92                     __end_of_digitalWrite:
  3270                           	opt stack 0
  3271                           tblptru	equ	0xFF8
  3272                           tblptrh	equ	0xFF7
  3273                           tblptrl	equ	0xFF6
  3274                           tablat	equ	0xFF5
  3275                           postinc0	equ	0xFEE
  3276                           wreg	equ	0xFE8
  3277                           postdec1	equ	0xFE5
  3278                           fsr1l	equ	0xFE1
  3279                           indf2	equ	0xFDF
  3280                           postinc2	equ	0xFDE
  3281                           postdec2	equ	0xFDD
  3282                           fsr2h	equ	0xFDA
  3283                           fsr2l	equ	0xFD9
  3284                           status	equ	0xFD8
  3285                           
  3286 ;; *************** function _digitalRead *****************
  3287 ;; Defined at:
  3288 ;;		line 43 in file "iopin.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  pin             2   34[COMRAM] PTR int 
  3291 ;;		 -> padPin2(4), padPin1(4), 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;		None
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  2   34[COMRAM] int 
  3296 ;; Registers used:
  3297 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;Total ram usage:        4 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    3
  3310 ;; This function calls:
  3311 ;;		Nothing
  3312 ;; This function is called by:
  3313 ;;		_sortBattery
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text3
  3318  00287A                     __ptext3:
  3319                           	opt stack 0
  3320  00287A                     _digitalRead:
  3321                           	opt stack 26
  3322                           
  3323                           ;iopin.c: 44: switch(pin[0]){
  3324                           
  3325                           ;incstack = 0
  3326  00287A  D058               	goto	l7126
  3327  00287C                     l7108:
  3328  00287C  EE20 F002          	lfsr	2,2
  3329  002880  5023               	movf	digitalRead@pin,w,c
  3330  002882  26D9               	addwf	fsr2l,f,c
  3331  002884  5024               	movf	digitalRead@pin+1,w,c
  3332  002886  22DA               	addwfc	fsr2h,f,c
  3333  002888  50DF               	movf	indf2,w,c
  3334  00288A  6E25               	movwf	??_digitalRead& (0+255),c
  3335  00288C  CF80 F026          	movff	3968,??_digitalRead+1	;volatile
  3336  002890  2A25               	incf	??_digitalRead,f,c
  3337  002892  D002               	goto	u7384
  3338  002894                     u7385:
  3339  002894  90D8               	bcf	status,0,c
  3340  002896  3226               	rrcf	??_digitalRead+1,f,c
  3341  002898                     u7384:
  3342  002898  2E25               	decfsz	??_digitalRead,f,c
  3343  00289A  D7FC               	goto	u7385
  3344  00289C  0E01               	movlw	1
  3345  00289E  1626               	andwf	??_digitalRead+1,f,c
  3346  0028A0  5026               	movf	??_digitalRead+1,w,c
  3347  0028A2  6E23               	movwf	?_digitalRead,c
  3348  0028A4  6A24               	clrf	?_digitalRead+1,c
  3349  0028A6  0012               	return	
  3350  0028A8                     l7112:
  3351  0028A8  EE20 F002          	lfsr	2,2
  3352  0028AC  5023               	movf	digitalRead@pin,w,c
  3353  0028AE  26D9               	addwf	fsr2l,f,c
  3354  0028B0  5024               	movf	digitalRead@pin+1,w,c
  3355  0028B2  22DA               	addwfc	fsr2h,f,c
  3356  0028B4  50DF               	movf	indf2,w,c
  3357  0028B6  6E25               	movwf	??_digitalRead& (0+255),c
  3358  0028B8  CF81 F026          	movff	3969,??_digitalRead+1	;volatile
  3359  0028BC  2A25               	incf	??_digitalRead,f,c
  3360  0028BE  D002               	goto	u7394
  3361  0028C0                     u7395:
  3362  0028C0  90D8               	bcf	status,0,c
  3363  0028C2  3226               	rrcf	??_digitalRead+1,f,c
  3364  0028C4                     u7394:
  3365  0028C4  2E25               	decfsz	??_digitalRead,f,c
  3366  0028C6  D7FC               	goto	u7395
  3367  0028C8  0E01               	movlw	1
  3368  0028CA  1626               	andwf	??_digitalRead+1,f,c
  3369  0028CC  5026               	movf	??_digitalRead+1,w,c
  3370  0028CE  6E23               	movwf	?_digitalRead,c
  3371  0028D0  6A24               	clrf	?_digitalRead+1,c
  3372  0028D2  0012               	return	
  3373  0028D4                     l7116:
  3374  0028D4  EE20 F002          	lfsr	2,2
  3375  0028D8  5023               	movf	digitalRead@pin,w,c
  3376  0028DA  26D9               	addwf	fsr2l,f,c
  3377  0028DC  5024               	movf	digitalRead@pin+1,w,c
  3378  0028DE  22DA               	addwfc	fsr2h,f,c
  3379  0028E0  50DF               	movf	indf2,w,c
  3380  0028E2  6E25               	movwf	??_digitalRead& (0+255),c
  3381  0028E4  CF82 F026          	movff	3970,??_digitalRead+1	;volatile
  3382  0028E8  2A25               	incf	??_digitalRead,f,c
  3383  0028EA  D002               	goto	u7404
  3384  0028EC                     u7405:
  3385  0028EC  90D8               	bcf	status,0,c
  3386  0028EE  3226               	rrcf	??_digitalRead+1,f,c
  3387  0028F0                     u7404:
  3388  0028F0  2E25               	decfsz	??_digitalRead,f,c
  3389  0028F2  D7FC               	goto	u7405
  3390  0028F4  0E01               	movlw	1
  3391  0028F6  1626               	andwf	??_digitalRead+1,f,c
  3392  0028F8  5026               	movf	??_digitalRead+1,w,c
  3393  0028FA  6E23               	movwf	?_digitalRead,c
  3394  0028FC  6A24               	clrf	?_digitalRead+1,c
  3395  0028FE  0012               	return	
  3396  002900                     l7120:
  3397  002900  EE20 F002          	lfsr	2,2
  3398  002904  5023               	movf	digitalRead@pin,w,c
  3399  002906  26D9               	addwf	fsr2l,f,c
  3400  002908  5024               	movf	digitalRead@pin+1,w,c
  3401  00290A  22DA               	addwfc	fsr2h,f,c
  3402  00290C  50DF               	movf	indf2,w,c
  3403  00290E  6E25               	movwf	??_digitalRead& (0+255),c
  3404  002910  CF83 F026          	movff	3971,??_digitalRead+1	;volatile
  3405  002914  2A25               	incf	??_digitalRead,f,c
  3406  002916  D002               	goto	u7414
  3407  002918                     u7415:
  3408  002918  90D8               	bcf	status,0,c
  3409  00291A  3226               	rrcf	??_digitalRead+1,f,c
  3410  00291C                     u7414:
  3411  00291C  2E25               	decfsz	??_digitalRead,f,c
  3412  00291E  D7FC               	goto	u7415
  3413  002920  0E01               	movlw	1
  3414  002922  1626               	andwf	??_digitalRead+1,f,c
  3415  002924  5026               	movf	??_digitalRead+1,w,c
  3416  002926  6E23               	movwf	?_digitalRead,c
  3417  002928  6A24               	clrf	?_digitalRead+1,c
  3418  00292A  0012               	return	
  3419  00292C                     l7126:
  3420  00292C  C023  FFD9         	movff	digitalRead@pin,fsr2l
  3421  002930  C024  FFDA         	movff	digitalRead@pin+1,fsr2h
  3422  002934  CFDE F025          	movff	postinc2,??_digitalRead
  3423  002938  CFDD F026          	movff	postdec2,??_digitalRead+1
  3424                           
  3425                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3426                           ; Switch size 1, requested type "space"
  3427                           ; Number of cases is 1, Range of values is 0 to 0
  3428                           ; switch strategies available:
  3429                           ; Name         Instructions Cycles
  3430                           ; simple_byte            4     3 (average)
  3431                           ;	Chosen strategy is simple_byte
  3432  00293C  5026               	movf	??_digitalRead+1,w,c
  3433  00293E  0A00               	xorlw	0	; case 0
  3434  002940  A4D8               	btfss	status,2,c
  3435  002942  D00D               	goto	l324
  3436                           
  3437                           ; Switch size 1, requested type "space"
  3438                           ; Number of cases is 4, Range of values is 0 to 3
  3439                           ; switch strategies available:
  3440                           ; Name         Instructions Cycles
  3441                           ; simple_byte           13     7 (average)
  3442                           ;	Chosen strategy is simple_byte
  3443  002944  5025               	movf	??_digitalRead,w,c
  3444  002946  0A00               	xorlw	0	; case 0
  3445  002948  B4D8               	btfsc	status,2,c
  3446  00294A  D798               	goto	l7108
  3447  00294C  0A01               	xorlw	1	; case 1
  3448  00294E  B4D8               	btfsc	status,2,c
  3449  002950  D7AB               	goto	l7112
  3450  002952  0A03               	xorlw	3	; case 2
  3451  002954  B4D8               	btfsc	status,2,c
  3452  002956  D7BE               	goto	l7116
  3453  002958  0A01               	xorlw	1	; case 3
  3454  00295A  B4D8               	btfsc	status,2,c
  3455  00295C  D7D1               	goto	l7120
  3456  00295E                     l324:
  3457                           
  3458                           ;iopin.c: 50: return -1;
  3459  00295E  6823               	setf	?_digitalRead,c
  3460  002960  6824               	setf	?_digitalRead+1,c
  3461  002962  0012               	return		;funcret
  3462  002964                     __end_of_digitalRead:
  3463                           	opt stack 0
  3464                           tblptru	equ	0xFF8
  3465                           tblptrh	equ	0xFF7
  3466                           tblptrl	equ	0xFF6
  3467                           tablat	equ	0xFF5
  3468                           postinc0	equ	0xFEE
  3469                           wreg	equ	0xFE8
  3470                           postdec1	equ	0xFE5
  3471                           fsr1l	equ	0xFE1
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           fsr2h	equ	0xFDA
  3476                           fsr2l	equ	0xFD9
  3477                           status	equ	0xFD8
  3478                           
  3479 ;; *************** function _analogRead *****************
  3480 ;; Defined at:
  3481 ;;		line 90 in file "iopin.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  channel         2   34[COMRAM] int 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;		None
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  4   34[COMRAM] long 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, status,0
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;Total ram usage:        6 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    3
  3502 ;; This function calls:
  3503 ;;		Nothing
  3504 ;; This function is called by:
  3505 ;;		_sortBattery
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text4
  3510  003AA4                     __ptext4:
  3511                           	opt stack 0
  3512  003AA4                     _analogRead:
  3513                           	opt stack 26
  3514                           
  3515                           ;iopin.c: 91: ADCON0 = channel<<2;
  3516                           
  3517                           ;incstack = 0
  3518  003AA4  4423               	rlncf	analogRead@channel,w,c
  3519  003AA6  46E8               	rlncf	wreg,f,c
  3520  003AA8  0BFC               	andlw	252
  3521  003AAA  6EC2               	movwf	4034,c	;volatile
  3522                           
  3523                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3524  003AAC  80C2               	bsf	4034,0,c	;volatile
  3525                           
  3526                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3527  003AAE  82C2               	bsf	4034,1,c	;volatile
  3528  003AB0                     l349:
  3529  003AB0  B2C2               	btfsc	4034,1,c	;volatile
  3530  003AB2  D7FE               	goto	l349
  3531                           
  3532                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3533  003AB4  50C3               	movf	4035,w,c	;volatile
  3534  003AB6  CFC4 F027          	movff	4036,??_analogRead	;volatile
  3535  003ABA  6A28               	clrf	(??_analogRead+1)& (0+255),c
  3536  003ABC  C027  F028         	movff	??_analogRead,??_analogRead+1
  3537  003AC0  6A27               	clrf	??_analogRead,c
  3538  003AC2  2627               	addwf	??_analogRead,f,c
  3539  003AC4  0E00               	movlw	0
  3540  003AC6  2228               	addwfc	??_analogRead+1,f,c
  3541  003AC8  C027  F023         	movff	??_analogRead,?_analogRead
  3542  003ACC  C028  F024         	movff	??_analogRead+1,?_analogRead+1
  3543  003AD0  0E00               	movlw	0
  3544  003AD2  BE24               	btfsc	?_analogRead+1,7,c
  3545  003AD4  0EFF               	movlw	-1
  3546  003AD6  6E25               	movwf	?_analogRead+2,c
  3547  003AD8  6E26               	movwf	?_analogRead+3,c
  3548  003ADA  0012               	return	
  3549  003ADC                     __end_of_analogRead:
  3550                           	opt stack 0
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           postinc0	equ	0xFEE
  3556                           wreg	equ	0xFE8
  3557                           postdec1	equ	0xFE5
  3558                           fsr1l	equ	0xFE1
  3559                           indf2	equ	0xFDF
  3560                           postinc2	equ	0xFDE
  3561                           postdec2	equ	0xFDD
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function _showInterface *****************
  3567 ;; Defined at:
  3568 ;;		line 18 in file "interface.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;		None
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  run             2    2[BANK1 ] PTR int 
  3573 ;;		 -> readPastRun@data(14), 
  3574 ;;  n               2    0[BANK1 ] int 
  3575 ;;  key             1    4[BANK1 ] unsigned char 
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3589 ;;Total ram usage:        6 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    9
  3592 ;; This function calls:
  3593 ;;		_initRTC
  3594 ;;		_readPastRun
  3595 ;;		_showDateTime
  3596 ;;		_showMainMenu
  3597 ;;		_showRunMenu
  3598 ;;		_showRunSelect
  3599 ;;		_showRunStats
  3600 ;;		_showRunTime
  3601 ;; This function is called by:
  3602 ;;		_main
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           	psect	text5
  3607  002E5A                     __ptext5:
  3608                           	opt stack 0
  3609  002E5A                     _showInterface:
  3610                           	opt stack 21
  3611                           
  3612                           ;interface.c: 20: initRTC();
  3613                           
  3614                           ;incstack = 0
  3615  002E5A  EC37  F01E         	call	_initRTC	;wreg free
  3616  002E5E                     l7286:
  3617                           
  3618                           ;interface.c: 23: showDateTime();
  3619  002E5E  ECA7  F012         	call	_showDateTime	;wreg free
  3620  002E62                     l7288:
  3621                           
  3622                           ;interface.c: 26: key = showMainMenu();
  3623  002E62  EC50  F01C         	call	_showMainMenu	;wreg free
  3624  002E66  0101               	movlb	1	; () banked
  3625  002E68  6F04               	movwf	showInterface@key& (0+255),b
  3626                           
  3627                           ; BSR set to: 1
  3628                           ;interface.c: 28: if(key == 'C'){
  3629  002E6A  0E43               	movlw	67
  3630  002E6C  0101               	movlb	1	; () banked
  3631  002E6E  1904               	xorwf	showInterface@key& (0+255),w,b
  3632  002E70  A4D8               	btfss	status,2,c
  3633  002E72  D042               	goto	l7314
  3634                           
  3635                           ; BSR set to: 1
  3636                           ;interface.c: 30: int n = showRunSelect();
  3637  002E74  EC6C  F01B         	call	_showRunSelect	;wreg free
  3638  002E78  0100               	movlb	0	; () banked
  3639  002E7A  6FFB               	movwf	??_showInterface& (0+255),b
  3640  002E7C  0100               	movlb	0	; () banked
  3641  002E7E  51FB               	movf	??_showInterface& (0+255),w,b
  3642  002E80  0101               	movlb	1	; () banked
  3643  002E82  6F00               	movwf	showInterface@n& (0+255),b
  3644  002E84  6B01               	clrf	(showInterface@n+1)& (0+255),b
  3645                           
  3646                           ; BSR set to: 1
  3647                           ;interface.c: 32: if(key == '*')continue;
  3648  002E86  0E2A               	movlw	42
  3649  002E88  0101               	movlb	1	; () banked
  3650  002E8A  1904               	xorwf	showInterface@key& (0+255),w,b
  3651  002E8C  B4D8               	btfsc	status,2,c
  3652  002E8E  D7E9               	goto	l7288
  3653                           
  3654                           ; BSR set to: 1
  3655                           ;interface.c: 34: int* run = readPastRun( n - '1');
  3656                           
  3657                           ; BSR set to: 1
  3658                           
  3659                           ; BSR set to: 1
  3660  002E90  0ECF               	movlw	207
  3661  002E92  0101               	movlb	1	; () banked
  3662  002E94  2500               	addwf	showInterface@n& (0+255),w,b
  3663  002E96  0100               	movlb	0	; () banked
  3664  002E98  6F80               	movwf	readPastRun@run& (0+255),b
  3665  002E9A  0EFF               	movlw	255
  3666  002E9C  0101               	movlb	1	; () banked
  3667  002E9E  2101               	addwfc	(showInterface@n+1)& (0+255),w,b
  3668  002EA0  0100               	movlb	0	; () banked
  3669  002EA2  6F81               	movwf	(readPastRun@run+1)& (0+255),b
  3670  002EA4  EC8B  F018         	call	_readPastRun	;wreg free
  3671  002EA8  C080  F102         	movff	?_readPastRun,showInterface@run
  3672  002EAC  C081  F103         	movff	?_readPastRun+1,showInterface@run+1
  3673  002EB0                     l7300:
  3674                           
  3675                           ;interface.c: 38: key = showRunMenu(n);
  3676  002EB0  0101               	movlb	1	; () banked
  3677  002EB2  5100               	movf	showInterface@n& (0+255),w,b
  3678  002EB4  EC9E  F01B         	call	_showRunMenu
  3679  002EB8  0101               	movlb	1	; () banked
  3680  002EBA  6F04               	movwf	showInterface@key& (0+255),b
  3681                           
  3682                           ; BSR set to: 1
  3683                           ;interface.c: 40: if(key == 'A') showRunTime(run);
  3684  002EBC  0E41               	movlw	65
  3685  002EBE  0101               	movlb	1	; () banked
  3686  002EC0  1904               	xorwf	showInterface@key& (0+255),w,b
  3687  002EC2  A4D8               	btfss	status,2,c
  3688  002EC4  D007               	goto	l7306
  3689                           
  3690                           ; BSR set to: 1
  3691  002EC6  C102  F0EB         	movff	showInterface@run,showRunTime@run
  3692  002ECA  C103  F0EC         	movff	showInterface@run+1,showRunTime@run+1
  3693  002ECE  EC87  F017         	call	_showRunTime	;wreg free
  3694  002ED2  D7EE               	goto	l7300
  3695  002ED4                     l7306:
  3696                           
  3697                           ;interface.c: 41: else if(key == 'B') showRunStats(run);
  3698  002ED4  0E42               	movlw	66
  3699  002ED6  0101               	movlb	1	; () banked
  3700  002ED8  1904               	xorwf	showInterface@key& (0+255),w,b
  3701  002EDA  A4D8               	btfss	status,2,c
  3702  002EDC  D007               	goto	l7310
  3703                           
  3704                           ; BSR set to: 1
  3705  002EDE  C102  F0EB         	movff	showInterface@run,showRunStats@run
  3706  002EE2  C103  F0EC         	movff	showInterface@run+1,showRunStats@run+1
  3707  002EE6  EC1C  F019         	call	_showRunStats	;wreg free
  3708  002EEA  D7E2               	goto	l7300
  3709  002EEC                     l7310:
  3710                           
  3711                           ;interface.c: 42: else if(key == '*') break;
  3712  002EEC  0E2A               	movlw	42
  3713  002EEE  0101               	movlb	1	; () banked
  3714  002EF0  1904               	xorwf	showInterface@key& (0+255),w,b
  3715  002EF2  B4D8               	btfsc	status,2,c
  3716  002EF4  D7B6               	goto	l7288
  3717  002EF6  D7DC               	goto	l7300
  3718  002EF8                     l7314:
  3719                           
  3720                           ; BSR set to: 1
  3721                           ;interface.c: 46: else if(key == 'B') return;
  3722  002EF8  0E42               	movlw	66
  3723  002EFA  0101               	movlb	1	; () banked
  3724  002EFC  1904               	xorwf	showInterface@key& (0+255),w,b
  3725  002EFE  B4D8               	btfsc	status,2,c
  3726  002F00  0012               	return	
  3727                           
  3728                           ; BSR set to: 1
  3729                           ;interface.c: 47: else if(key == '*') break;
  3730                           
  3731                           ; BSR set to: 1
  3732                           
  3733                           ; BSR set to: 1
  3734                           
  3735                           ; BSR set to: 1
  3736  002F02  0E2A               	movlw	42
  3737  002F04  0101               	movlb	1	; () banked
  3738  002F06  1904               	xorwf	showInterface@key& (0+255),w,b
  3739  002F08  B4D8               	btfsc	status,2,c
  3740  002F0A  D7A9               	goto	l7286
  3741  002F0C  D7AA               	goto	l7288
  3742  002F0E                     __end_of_showInterface:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           postinc0	equ	0xFEE
  3749                           wreg	equ	0xFE8
  3750                           postdec1	equ	0xFE5
  3751                           fsr1l	equ	0xFE1
  3752                           indf2	equ	0xFDF
  3753                           postinc2	equ	0xFDE
  3754                           postdec2	equ	0xFDD
  3755                           fsr2h	equ	0xFDA
  3756                           fsr2l	equ	0xFD9
  3757                           status	equ	0xFD8
  3758                           
  3759 ;; *************** function _showRunTime *****************
  3760 ;; Defined at:
  3761 ;;		line 105 in file "interface.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;  run             2  107[BANK0 ] PTR int 
  3764 ;;		 -> readPastRun@data(14), 
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  time            3  112[BANK0 ] float 
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      unsigned char 
  3769 ;; Registers used:
  3770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3776 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3780 ;;Total ram usage:        8 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    8
  3783 ;; This function calls:
  3784 ;;		___awtoft
  3785 ;;		___ftdiv
  3786 ;;		_lcdClear
  3787 ;;		_printf
  3788 ;;		_readKeypad
  3789 ;; This function is called by:
  3790 ;;		_showInterface
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           	psect	text6
  3795  002F0E                     __ptext6:
  3796                           	opt stack 0
  3797  002F0E                     _showRunTime:
  3798                           	opt stack 21
  3799                           
  3800                           ;interface.c: 106: float time = (float)(run[0]<<8 + run[1])/10.0;
  3801                           
  3802                           ; BSR set to: 1
  3803                           ;incstack = 0
  3804  002F0E  0100               	movlb	0	; () banked
  3805  002F10  EE20 F002          	lfsr	2,2
  3806  002F14  51EB               	movf	showRunTime@run& (0+255),w,b
  3807  002F16  26D9               	addwf	fsr2l,f,c
  3808  002F18  51EC               	movf	(showRunTime@run+1)& (0+255),w,b
  3809  002F1A  22DA               	addwfc	fsr2h,f,c
  3810  002F1C  50DF               	movf	indf2,w,c
  3811  002F1E  0100               	movlb	0	; () banked
  3812  002F20  6FED               	movwf	??_showRunTime& (0+255),b
  3813  002F22  0E08               	movlw	8
  3814  002F24  0100               	movlb	0	; () banked
  3815  002F26  27ED               	addwf	??_showRunTime& (0+255),f,b
  3816  002F28  C0EB  FFD9         	movff	showRunTime@run,fsr2l
  3817  002F2C  C0EC  FFDA         	movff	showRunTime@run+1,fsr2h
  3818  002F30  CFDE F0EE          	movff	postinc2,??_showRunTime+1
  3819  002F34  CFDD F0EF          	movff	postdec2,??_showRunTime+2
  3820  002F38  0100               	movlb	0	; () banked
  3821  002F3A  2BED               	incf	??_showRunTime& (0+255),f,b
  3822  002F3C  D004               	goto	u7564
  3823  002F3E                     u7565:
  3824  002F3E  90D8               	bcf	status,0,c
  3825  002F40  0100               	movlb	0	; () banked
  3826  002F42  37EE               	rlcf	(??_showRunTime+1)& (0+255),f,b
  3827  002F44  37EF               	rlcf	(??_showRunTime+2)& (0+255),f,b
  3828  002F46                     u7564:
  3829  002F46  0100               	movlb	0	; () banked
  3830  002F48  2FED               	decfsz	??_showRunTime& (0+255),f,b
  3831  002F4A  D7F9               	goto	u7565
  3832  002F4C  C0EE  F02B         	movff	??_showRunTime+1,___awtoft@c
  3833  002F50  C0EF  F02C         	movff	??_showRunTime+2,___awtoft@c+1
  3834  002F54  EC6E  F01D         	call	___awtoft	;wreg free
  3835  002F58  C02B  F035         	movff	?___awtoft,___ftdiv@f1
  3836  002F5C  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
  3837  002F60  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
  3838  002F64  0E00               	movlw	0
  3839  002F66  6E38               	movwf	___ftdiv@f2,c
  3840  002F68  0E20               	movlw	32
  3841  002F6A  6E39               	movwf	___ftdiv@f2+1,c
  3842  002F6C  0E41               	movlw	65
  3843  002F6E  6E3A               	movwf	___ftdiv@f2+2,c
  3844  002F70  EC2F  F013         	call	___ftdiv	;wreg free
  3845  002F74  C035  F0F0         	movff	?___ftdiv,showRunTime@time
  3846  002F78  C036  F0F1         	movff	?___ftdiv+1,showRunTime@time+1
  3847  002F7C  C037  F0F2         	movff	?___ftdiv+2,showRunTime@time+2
  3848                           
  3849                           ;interface.c: 108: lcdClear();
  3850  002F80  EC64  F01E         	call	_lcdClear	;wreg free
  3851                           
  3852                           ;interface.c: 109: printf("time: %.1f sec   \n",time);
  3853  002F84  0EDD               	movlw	low STR_18
  3854  002F86  0100               	movlb	0	; () banked
  3855  002F88  6FBD               	movwf	printf@f& (0+255),b
  3856  002F8A  0EFE               	movlw	high STR_18
  3857  002F8C  0100               	movlb	0	; () banked
  3858  002F8E  6FBE               	movwf	(printf@f+1)& (0+255),b
  3859  002F90  C0F0  F0BF         	movff	showRunTime@time,?_printf+2
  3860  002F94  C0F1  F0C0         	movff	showRunTime@time+1,?_printf+3
  3861  002F98  C0F2  F0C1         	movff	showRunTime@time+2,?_printf+4
  3862  002F9C  EC09  F000         	call	_printf	;wreg free
  3863                           
  3864                           ;interface.c: 110: printf("              *>");
  3865  002FA0  0E4A               	movlw	low STR_19
  3866  002FA2  0100               	movlb	0	; () banked
  3867  002FA4  6FBD               	movwf	printf@f& (0+255),b
  3868  002FA6  0EFF               	movlw	high STR_19
  3869  002FA8  0100               	movlb	0	; () banked
  3870  002FAA  6FBE               	movwf	(printf@f+1)& (0+255),b
  3871  002FAC  EC09  F000         	call	_printf	;wreg free
  3872  002FB0                     l7242:
  3873  002FB0  EC9E  F01D         	call	_readKeypad	;wreg free
  3874  002FB4  0A2A               	xorlw	42
  3875  002FB6  B4D8               	btfsc	status,2,c
  3876  002FB8  0012               	return	
  3877  002FBA  D7FA               	goto	l7242
  3878  002FBC                     __end_of_showRunTime:
  3879                           	opt stack 0
  3880                           tblptru	equ	0xFF8
  3881                           tblptrh	equ	0xFF7
  3882                           tblptrl	equ	0xFF6
  3883                           tablat	equ	0xFF5
  3884                           postinc0	equ	0xFEE
  3885                           wreg	equ	0xFE8
  3886                           postdec1	equ	0xFE5
  3887                           fsr1l	equ	0xFE1
  3888                           indf2	equ	0xFDF
  3889                           postinc2	equ	0xFDE
  3890                           postdec2	equ	0xFDD
  3891                           fsr2h	equ	0xFDA
  3892                           fsr2l	equ	0xFD9
  3893                           status	equ	0xFD8
  3894                           
  3895 ;; *************** function _showRunStats *****************
  3896 ;; Defined at:
  3897 ;;		line 115 in file "interface.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  run             2  107[BANK0 ] PTR int 
  3900 ;;		 -> readPastRun@data(14), 
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      unsigned char 
  3905 ;; Registers used:
  3906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3912 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;Total ram usage:        2 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    8
  3919 ;; This function calls:
  3920 ;;		_lcdClear
  3921 ;;		_printf
  3922 ;;		_readKeypad
  3923 ;; This function is called by:
  3924 ;;		_showInterface
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           	psect	text7
  3929  003238                     __ptext7:
  3930                           	opt stack 0
  3931  003238                     _showRunStats:
  3932                           	opt stack 21
  3933                           
  3934                           ;interface.c: 116: lcdClear();
  3935                           
  3936                           ;incstack = 0
  3937  003238  EC64  F01E         	call	_lcdClear	;wreg free
  3938                           
  3939                           ;interface.c: 117: printf("[AA,9V,C,other] \n");
  3940  00323C  0E27               	movlw	low STR_20
  3941  00323E  0100               	movlb	0	; () banked
  3942  003240  6FBD               	movwf	printf@f& (0+255),b
  3943  003242  0EFF               	movlw	high STR_20
  3944  003244  0100               	movlb	0	; () banked
  3945  003246  6FBE               	movwf	(printf@f+1)& (0+255),b
  3946  003248  EC09  F000         	call	_printf	;wreg free
  3947                           
  3948                           ;interface.c: 118: printf("[%d,%d,%d,%d]   *>",run[2],run[3],run[4],run[5]);
  3949  00324C  0EF0               	movlw	low STR_21
  3950  00324E  0100               	movlb	0	; () banked
  3951  003250  6FBD               	movwf	printf@f& (0+255),b
  3952  003252  0EFE               	movlw	high STR_21
  3953  003254  0100               	movlb	0	; () banked
  3954  003256  6FBE               	movwf	(printf@f+1)& (0+255),b
  3955  003258  0100               	movlb	0	; () banked
  3956  00325A  EE20 F004          	lfsr	2,4
  3957  00325E  51EB               	movf	showRunStats@run& (0+255),w,b
  3958  003260  26D9               	addwf	fsr2l,f,c
  3959  003262  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  3960  003264  22DA               	addwfc	fsr2h,f,c
  3961  003266  CFDE F0BF          	movff	postinc2,?_printf+2
  3962  00326A  CFDD F0C0          	movff	postdec2,?_printf+3
  3963  00326E  0100               	movlb	0	; () banked
  3964  003270  EE20 F006          	lfsr	2,6
  3965  003274  51EB               	movf	showRunStats@run& (0+255),w,b
  3966  003276  26D9               	addwf	fsr2l,f,c
  3967  003278  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  3968  00327A  22DA               	addwfc	fsr2h,f,c
  3969  00327C  CFDE F0C1          	movff	postinc2,?_printf+4
  3970  003280  CFDD F0C2          	movff	postdec2,?_printf+5
  3971  003284  0100               	movlb	0	; () banked
  3972  003286  EE20 F008          	lfsr	2,8
  3973  00328A  51EB               	movf	showRunStats@run& (0+255),w,b
  3974  00328C  26D9               	addwf	fsr2l,f,c
  3975  00328E  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  3976  003290  22DA               	addwfc	fsr2h,f,c
  3977  003292  CFDE F0C3          	movff	postinc2,?_printf+6
  3978  003296  CFDD F0C4          	movff	postdec2,?_printf+7
  3979  00329A  0100               	movlb	0	; () banked
  3980  00329C  EE20 F00A          	lfsr	2,10
  3981  0032A0  51EB               	movf	showRunStats@run& (0+255),w,b
  3982  0032A2  26D9               	addwf	fsr2l,f,c
  3983  0032A4  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  3984  0032A6  22DA               	addwfc	fsr2h,f,c
  3985  0032A8  CFDE F0C5          	movff	postinc2,?_printf+8
  3986  0032AC  CFDD F0C6          	movff	postdec2,?_printf+9
  3987  0032B0  EC09  F000         	call	_printf	;wreg free
  3988  0032B4                     l7250:
  3989  0032B4  EC9E  F01D         	call	_readKeypad	;wreg free
  3990  0032B8  0A2A               	xorlw	42
  3991  0032BA  B4D8               	btfsc	status,2,c
  3992  0032BC  0012               	return	
  3993  0032BE  D7FA               	goto	l7250
  3994  0032C0                     __end_of_showRunStats:
  3995                           	opt stack 0
  3996                           tblptru	equ	0xFF8
  3997                           tblptrh	equ	0xFF7
  3998                           tblptrl	equ	0xFF6
  3999                           tablat	equ	0xFF5
  4000                           postinc0	equ	0xFEE
  4001                           wreg	equ	0xFE8
  4002                           postdec1	equ	0xFE5
  4003                           fsr1l	equ	0xFE1
  4004                           indf2	equ	0xFDF
  4005                           postinc2	equ	0xFDE
  4006                           postdec2	equ	0xFDD
  4007                           fsr2h	equ	0xFDA
  4008                           fsr2l	equ	0xFD9
  4009                           status	equ	0xFD8
  4010                           
  4011 ;; *************** function _showRunSelect *****************
  4012 ;; Defined at:
  4013 ;;		line 83 in file "interface.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;		None
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  k               1  107[BANK0 ] unsigned char 
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      unsigned char 
  4020 ;; Registers used:
  4021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4030 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;Total ram usage:        1 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; Hardware stack levels required when called:    8
  4034 ;; This function calls:
  4035 ;;		_lcdClear
  4036 ;;		_printf
  4037 ;;		_readKeypad
  4038 ;; This function is called by:
  4039 ;;		_showInterface
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text8
  4044  0036D8                     __ptext8:
  4045                           	opt stack 0
  4046  0036D8                     _showRunSelect:
  4047                           	opt stack 21
  4048                           
  4049                           ;interface.c: 84: lcdClear();
  4050                           
  4051                           ;incstack = 0
  4052  0036D8  EC64  F01E         	call	_lcdClear	;wreg free
  4053                           
  4054                           ;interface.c: 85: printf("select run:     \n");
  4055  0036DC  0E15               	movlw	low STR_14
  4056  0036DE  0100               	movlb	0	; () banked
  4057  0036E0  6FBD               	movwf	printf@f& (0+255),b
  4058  0036E2  0EFF               	movlw	high STR_14
  4059  0036E4  0100               	movlb	0	; () banked
  4060  0036E6  6FBE               	movwf	(printf@f+1)& (0+255),b
  4061  0036E8  EC09  F000         	call	_printf	;wreg free
  4062                           
  4063                           ;interface.c: 86: printf("[1,2,3,4]     *>");
  4064  0036EC  0E5B               	movlw	low STR_15
  4065  0036EE  0100               	movlb	0	; () banked
  4066  0036F0  6FBD               	movwf	printf@f& (0+255),b
  4067  0036F2  0EFF               	movlw	high STR_15
  4068  0036F4  0100               	movlb	0	; () banked
  4069  0036F6  6FBE               	movwf	(printf@f+1)& (0+255),b
  4070  0036F8  EC09  F000         	call	_printf	;wreg free
  4071  0036FC                     l7200:
  4072  0036FC  EC9E  F01D         	call	_readKeypad	;wreg free
  4073  003700  0100               	movlb	0	; () banked
  4074  003702  6FEB               	movwf	showRunSelect@k& (0+255),b
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;interface.c: 90: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  4078  003704  0E31               	movlw	49
  4079  003706  0100               	movlb	0	; () banked
  4080  003708  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4081  00370A  B4D8               	btfsc	status,2,c
  4082  00370C  D014               	goto	l7212
  4083                           
  4084                           ; BSR set to: 0
  4085  00370E  0E32               	movlw	50
  4086  003710  0100               	movlb	0	; () banked
  4087  003712  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4088  003714  B4D8               	btfsc	status,2,c
  4089  003716  D00F               	goto	l7212
  4090                           
  4091                           ; BSR set to: 0
  4092  003718  0E33               	movlw	51
  4093  00371A  0100               	movlb	0	; () banked
  4094  00371C  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4095  00371E  B4D8               	btfsc	status,2,c
  4096  003720  D00A               	goto	l7212
  4097                           
  4098                           ; BSR set to: 0
  4099  003722  0E34               	movlw	52
  4100  003724  0100               	movlb	0	; () banked
  4101  003726  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4102  003728  B4D8               	btfsc	status,2,c
  4103  00372A  D005               	goto	l7212
  4104                           
  4105                           ; BSR set to: 0
  4106  00372C  0E2A               	movlw	42
  4107  00372E  0100               	movlb	0	; () banked
  4108  003730  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4109  003732  A4D8               	btfss	status,2,c
  4110  003734  D7E3               	goto	l7200
  4111  003736                     l7212:
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;interface.c: 91: return k;
  4115  003736  0100               	movlb	0	; () banked
  4116  003738  51EB               	movf	showRunSelect@k& (0+255),w,b
  4117  00373A  0012               	return	
  4118  00373C                     __end_of_showRunSelect:
  4119                           	opt stack 0
  4120                           tblptru	equ	0xFF8
  4121                           tblptrh	equ	0xFF7
  4122                           tblptrl	equ	0xFF6
  4123                           tablat	equ	0xFF5
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           postdec1	equ	0xFE5
  4127                           fsr1l	equ	0xFE1
  4128                           indf2	equ	0xFDF
  4129                           postinc2	equ	0xFDE
  4130                           postdec2	equ	0xFDD
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function _showRunMenu *****************
  4136 ;; Defined at:
  4137 ;;		line 94 in file "interface.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  key             1    wreg     unsigned char 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  key             1  107[BANK0 ] unsigned char 
  4142 ;;  k               1  108[BANK0 ] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      unsigned char 
  4145 ;; Registers used:
  4146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;Total ram usage:        2 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    8
  4159 ;; This function calls:
  4160 ;;		_lcdClear
  4161 ;;		_printf
  4162 ;;		_readKeypad
  4163 ;; This function is called by:
  4164 ;;		_showInterface
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text9
  4169  00373C                     __ptext9:
  4170                           	opt stack 0
  4171  00373C                     _showRunMenu:
  4172                           	opt stack 21
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;incstack = 0
  4176                           ;showRunMenu@key stored from wreg
  4177  00373C  0100               	movlb	0	; () banked
  4178  00373E  6FEB               	movwf	showRunMenu@key& (0+255),b
  4179                           
  4180                           ;interface.c: 95: lcdClear();
  4181  003740  EC64  F01E         	call	_lcdClear	;wreg free
  4182                           
  4183                           ;interface.c: 96: printf("%c) time  <A     \n",key);
  4184  003744  0ECA               	movlw	low STR_16
  4185  003746  0100               	movlb	0	; () banked
  4186  003748  6FBD               	movwf	printf@f& (0+255),b
  4187  00374A  0EFE               	movlw	high STR_16
  4188  00374C  0100               	movlb	0	; () banked
  4189  00374E  6FBE               	movwf	(printf@f+1)& (0+255),b
  4190  003750  C0EB  F0BF         	movff	showRunMenu@key,?_printf+2
  4191  003754  0100               	movlb	0	; () banked
  4192  003756  6BC0               	clrf	(?_printf+3)& (0+255),b
  4193  003758  EC09  F000         	call	_printf	;wreg free
  4194                           
  4195                           ;interface.c: 97: printf( "   stats <B   *>");
  4196  00375C  0E7D               	movlw	low STR_17
  4197  00375E  0100               	movlb	0	; () banked
  4198  003760  6FBD               	movwf	printf@f& (0+255),b
  4199  003762  0EFF               	movlw	high STR_17
  4200  003764  0100               	movlb	0	; () banked
  4201  003766  6FBE               	movwf	(printf@f+1)& (0+255),b
  4202  003768  EC09  F000         	call	_printf	;wreg free
  4203  00376C                     l7222:
  4204  00376C  EC9E  F01D         	call	_readKeypad	;wreg free
  4205  003770  0100               	movlb	0	; () banked
  4206  003772  6FEC               	movwf	showRunMenu@k& (0+255),b
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;interface.c: 101: while(k != 'A' && k != 'B' && k != '*');
  4210  003774  0E41               	movlw	65
  4211  003776  0100               	movlb	0	; () banked
  4212  003778  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4213  00377A  B4D8               	btfsc	status,2,c
  4214  00377C  D00A               	goto	l7230
  4215                           
  4216                           ; BSR set to: 0
  4217  00377E  0E42               	movlw	66
  4218  003780  0100               	movlb	0	; () banked
  4219  003782  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4220  003784  B4D8               	btfsc	status,2,c
  4221  003786  D005               	goto	l7230
  4222                           
  4223                           ; BSR set to: 0
  4224  003788  0E2A               	movlw	42
  4225  00378A  0100               	movlb	0	; () banked
  4226  00378C  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4227  00378E  A4D8               	btfss	status,2,c
  4228  003790  D7ED               	goto	l7222
  4229  003792                     l7230:
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;interface.c: 102: return k;
  4233  003792  0100               	movlb	0	; () banked
  4234  003794  51EC               	movf	showRunMenu@k& (0+255),w,b
  4235  003796  0012               	return	
  4236  003798                     __end_of_showRunMenu:
  4237                           	opt stack 0
  4238                           tblptru	equ	0xFF8
  4239                           tblptrh	equ	0xFF7
  4240                           tblptrl	equ	0xFF6
  4241                           tablat	equ	0xFF5
  4242                           postinc0	equ	0xFEE
  4243                           wreg	equ	0xFE8
  4244                           postdec1	equ	0xFE5
  4245                           fsr1l	equ	0xFE1
  4246                           indf2	equ	0xFDF
  4247                           postinc2	equ	0xFDE
  4248                           postdec2	equ	0xFDD
  4249                           fsr2h	equ	0xFDA
  4250                           fsr2l	equ	0xFD9
  4251                           status	equ	0xFD8
  4252                           
  4253 ;; *************** function _showMainMenu *****************
  4254 ;; Defined at:
  4255 ;;		line 72 in file "interface.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;  k               1  107[BANK0 ] unsigned char 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      unsigned char 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;Total ram usage:        1 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    8
  4276 ;; This function calls:
  4277 ;;		_lcdClear
  4278 ;;		_printf
  4279 ;;		_readKeypad
  4280 ;; This function is called by:
  4281 ;;		_showInterface
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text10
  4286  0038A0                     __ptext10:
  4287                           	opt stack 0
  4288  0038A0                     _showMainMenu:
  4289                           	opt stack 21
  4290                           
  4291                           ;interface.c: 73: lcdClear();
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;incstack = 0
  4295  0038A0  EC64  F01E         	call	_lcdClear	;wreg free
  4296                           
  4297                           ;interface.c: 74: printf("start   <B      \n");
  4298  0038A4  0E03               	movlw	low STR_12
  4299  0038A6  0100               	movlb	0	; () banked
  4300  0038A8  6FBD               	movwf	printf@f& (0+255),b
  4301  0038AA  0EFF               	movlw	high STR_12
  4302  0038AC  0100               	movlb	0	; () banked
  4303  0038AE  6FBE               	movwf	(printf@f+1)& (0+255),b
  4304  0038B0  EC09  F000         	call	_printf	;wreg free
  4305                           
  4306                           ;interface.c: 75: printf("history <C    *>");
  4307  0038B4  0E6C               	movlw	low STR_13
  4308  0038B6  0100               	movlb	0	; () banked
  4309  0038B8  6FBD               	movwf	printf@f& (0+255),b
  4310  0038BA  0EFF               	movlw	high STR_13
  4311  0038BC  0100               	movlb	0	; () banked
  4312  0038BE  6FBE               	movwf	(printf@f+1)& (0+255),b
  4313  0038C0  EC09  F000         	call	_printf	;wreg free
  4314  0038C4                     l7182:
  4315  0038C4  EC9E  F01D         	call	_readKeypad	;wreg free
  4316  0038C8  0100               	movlb	0	; () banked
  4317  0038CA  6FEB               	movwf	showMainMenu@k& (0+255),b
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;interface.c: 79: while(k != 'B' && k != 'C' && k != '*');
  4321  0038CC  0E42               	movlw	66
  4322  0038CE  0100               	movlb	0	; () banked
  4323  0038D0  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4324  0038D2  B4D8               	btfsc	status,2,c
  4325  0038D4  D00A               	goto	l7190
  4326                           
  4327                           ; BSR set to: 0
  4328  0038D6  0E43               	movlw	67
  4329  0038D8  0100               	movlb	0	; () banked
  4330  0038DA  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4331  0038DC  B4D8               	btfsc	status,2,c
  4332  0038DE  D005               	goto	l7190
  4333                           
  4334                           ; BSR set to: 0
  4335  0038E0  0E2A               	movlw	42
  4336  0038E2  0100               	movlb	0	; () banked
  4337  0038E4  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4338  0038E6  A4D8               	btfss	status,2,c
  4339  0038E8  D7ED               	goto	l7182
  4340  0038EA                     l7190:
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;interface.c: 80: return k;
  4344  0038EA  0100               	movlb	0	; () banked
  4345  0038EC  51EB               	movf	showMainMenu@k& (0+255),w,b
  4346  0038EE  0012               	return	
  4347  0038F0                     __end_of_showMainMenu:
  4348                           	opt stack 0
  4349                           tblptru	equ	0xFF8
  4350                           tblptrh	equ	0xFF7
  4351                           tblptrl	equ	0xFF6
  4352                           tablat	equ	0xFF5
  4353                           postinc0	equ	0xFEE
  4354                           wreg	equ	0xFE8
  4355                           postdec1	equ	0xFE5
  4356                           fsr1l	equ	0xFE1
  4357                           indf2	equ	0xFDF
  4358                           postinc2	equ	0xFDE
  4359                           postdec2	equ	0xFDD
  4360                           fsr2h	equ	0xFDA
  4361                           fsr2l	equ	0xFD9
  4362                           status	equ	0xFD8
  4363                           
  4364 ;; *************** function _readKeypad *****************
  4365 ;; Defined at:
  4366 ;;		line 36 in file "keypad.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;		None
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  key             1   34[COMRAM] unsigned char 
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  1    wreg      unsigned char 
  4373 ;; Registers used:
  4374 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4383 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;Total ram usage:        1 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    3
  4387 ;; This function calls:
  4388 ;;		Nothing
  4389 ;; This function is called by:
  4390 ;;		_main
  4391 ;;		_sortBattery
  4392 ;;		_showMainMenu
  4393 ;;		_showRunSelect
  4394 ;;		_showRunMenu
  4395 ;;		_showRunTime
  4396 ;;		_showRunStats
  4397 ;;		_pause
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           	psect	text11
  4402  003B3C                     __ptext11:
  4403                           	opt stack 0
  4404  003B3C                     _readKeypad:
  4405                           	opt stack 26
  4406  003B3C                     l251:
  4407  003B3C  A281               	btfss	3969,1,c	;volatile
  4408  003B3E  D7FE               	goto	l251
  4409                           
  4410                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  4411  003B40  3881               	swapf	3969,w,c	;volatile
  4412  003B42  0B0F               	andlw	15
  4413  003B44  0B0F               	andlw	15
  4414  003B46  6E23               	movwf	readKeypad@key,c
  4415  003B48                     l254:
  4416  003B48  B281               	btfsc	3969,1,c	;volatile
  4417  003B4A  D7FE               	goto	l254
  4418                           
  4419                           ;keypad.c: 40: return keys[key];
  4420  003B4C  5023               	movf	readKeypad@key,w,c
  4421  003B4E  0D01               	mullw	1
  4422  003B50  0E87               	movlw	low _keys
  4423  003B52  24F3               	addwf	prodl,w,c
  4424  003B54  6EF6               	movwf	tblptrl,c
  4425  003B56  0EFE               	movlw	high _keys
  4426  003B58  20F4               	addwfc	prodh,w,c
  4427  003B5A  6EF7               	movwf	tblptrh,c
  4428  003B5C                     	if	0	;There are less than 3 active tblptr bytes
  4429  003B5C                     	endif
  4430  003B5C  0008               	tblrd		*
  4431  003B5E  50F5               	movf	tablat,w,c
  4432  003B60  0012               	return	
  4433  003B62                     __end_of_readKeypad:
  4434                           	opt stack 0
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           prodh	equ	0xFF4
  4440                           prodl	equ	0xFF3
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           postdec1	equ	0xFE5
  4444                           fsr1l	equ	0xFE1
  4445                           indf2	equ	0xFDF
  4446                           postinc2	equ	0xFDE
  4447                           postdec2	equ	0xFDD
  4448                           fsr2h	equ	0xFDA
  4449                           fsr2l	equ	0xFD9
  4450                           status	equ	0xFD8
  4451                           
  4452 ;; *************** function _showDateTime *****************
  4453 ;; Defined at:
  4454 ;;		line 56 in file "interface.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;  t               2  121[BANK0 ] PTR int 
  4459 ;;		 -> getTime@time(14), 
  4460 ;;  year            2  119[BANK0 ] int 
  4461 ;;  mon             2  117[BANK0 ] int 
  4462 ;;  day             2  115[BANK0 ] int 
  4463 ;;  hour            2  113[BANK0 ] int 
  4464 ;;  min             2  111[BANK0 ] int 
  4465 ;;  sec             2  109[BANK0 ] int 
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  1    wreg      void 
  4468 ;; Registers used:
  4469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;Total ram usage:       16 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    8
  4482 ;; This function calls:
  4483 ;;		_getTime
  4484 ;;		_initRTC
  4485 ;;		_keyPressed
  4486 ;;		_lcdClear
  4487 ;;		_printf
  4488 ;;		_setTime
  4489 ;; This function is called by:
  4490 ;;		_showInterface
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           	psect	text12
  4495  00254E                     __ptext12:
  4496                           	opt stack 0
  4497  00254E                     _showDateTime:
  4498                           	opt stack 21
  4499                           
  4500                           ;interface.c: 58: initRTC();
  4501                           
  4502                           ;incstack = 0
  4503  00254E  EC37  F01E         	call	_initRTC	;wreg free
  4504                           
  4505                           ;interface.c: 59: setTime();
  4506  002552  EC27  F01C         	call	_setTime	;wreg free
  4507                           
  4508                           ;interface.c: 60: while(keyPressed() != 'A'){
  4509  002556  D07D               	goto	l7174
  4510  002558                     l7152:
  4511                           
  4512                           ;interface.c: 61: int* t = getTime();
  4513  002558  ECE3  F019         	call	_getTime	;wreg free
  4514  00255C  C026  F0F9         	movff	?_getTime,showDateTime@t
  4515  002560  C027  F0FA         	movff	?_getTime+1,showDateTime@t+1
  4516                           
  4517                           ;interface.c: 62: lcdClear();
  4518  002564  EC64  F01E         	call	_lcdClear	;wreg free
  4519                           
  4520                           ;interface.c: 63: int sec = t[0], min = t[1], hour = t[2];
  4521  002568  C0F9  FFD9         	movff	showDateTime@t,fsr2l
  4522  00256C  C0FA  FFDA         	movff	showDateTime@t+1,fsr2h
  4523  002570  CFDE F0ED          	movff	postinc2,showDateTime@sec
  4524  002574  CFDD F0EE          	movff	postdec2,showDateTime@sec+1
  4525  002578  0100               	movlb	0	; () banked
  4526  00257A  EE20 F002          	lfsr	2,2
  4527  00257E  51F9               	movf	showDateTime@t& (0+255),w,b
  4528  002580  26D9               	addwf	fsr2l,f,c
  4529  002582  51FA               	movf	(showDateTime@t+1)& (0+255),w,b
  4530  002584  22DA               	addwfc	fsr2h,f,c
  4531  002586  CFDE F0EF          	movff	postinc2,showDateTime@min
  4532  00258A  CFDD F0F0          	movff	postdec2,showDateTime@min+1
  4533                           
  4534                           ; BSR set to: 0
  4535  00258E  0100               	movlb	0	; () banked
  4536  002590  EE20 F004          	lfsr	2,4
  4537  002594  51F9               	movf	showDateTime@t& (0+255),w,b
  4538  002596  26D9               	addwf	fsr2l,f,c
  4539  002598  51FA               	movf	(showDateTime@t+1)& (0+255),w,b
  4540  00259A  22DA               	addwfc	fsr2h,f,c
  4541  00259C  CFDE F0F1          	movff	postinc2,showDateTime@hour
  4542  0025A0  CFDD F0F2          	movff	postdec2,showDateTime@hour+1
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;interface.c: 64: int day = t[4], mon = t[5], year = t[6];
  4546  0025A4  0100               	movlb	0	; () banked
  4547  0025A6  EE20 F008          	lfsr	2,8
  4548  0025AA  51F9               	movf	showDateTime@t& (0+255),w,b
  4549  0025AC  26D9               	addwf	fsr2l,f,c
  4550  0025AE  51FA               	movf	(showDateTime@t+1)& (0+255),w,b
  4551  0025B0  22DA               	addwfc	fsr2h,f,c
  4552  0025B2  CFDE F0F3          	movff	postinc2,showDateTime@day
  4553  0025B6  CFDD F0F4          	movff	postdec2,showDateTime@day+1
  4554                           
  4555                           ; BSR set to: 0
  4556  0025BA  0100               	movlb	0	; () banked
  4557  0025BC  EE20 F00A          	lfsr	2,10
  4558  0025C0  51F9               	movf	showDateTime@t& (0+255),w,b
  4559  0025C2  26D9               	addwf	fsr2l,f,c
  4560  0025C4  51FA               	movf	(showDateTime@t+1)& (0+255),w,b
  4561  0025C6  22DA               	addwfc	fsr2h,f,c
  4562  0025C8  CFDE F0F5          	movff	postinc2,showDateTime@mon
  4563  0025CC  CFDD F0F6          	movff	postdec2,showDateTime@mon+1
  4564                           
  4565                           ; BSR set to: 0
  4566  0025D0  0100               	movlb	0	; () banked
  4567  0025D2  EE20 F00C          	lfsr	2,12
  4568  0025D6  51F9               	movf	showDateTime@t& (0+255),w,b
  4569  0025D8  26D9               	addwf	fsr2l,f,c
  4570  0025DA  51FA               	movf	(showDateTime@t+1)& (0+255),w,b
  4571  0025DC  22DA               	addwfc	fsr2h,f,c
  4572  0025DE  CFDE F0F7          	movff	postinc2,showDateTime@year
  4573  0025E2  CFDD F0F8          	movff	postdec2,showDateTime@year+1
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;interface.c: 66: printf("  20%02x/%02x/%02x\n",year,mon,day);
  4577  0025E6  0EB6               	movlw	low STR_10
  4578  0025E8  0100               	movlb	0	; () banked
  4579  0025EA  6FBD               	movwf	printf@f& (0+255),b
  4580  0025EC  0EFE               	movlw	high STR_10
  4581  0025EE  0100               	movlb	0	; () banked
  4582  0025F0  6FBE               	movwf	(printf@f+1)& (0+255),b
  4583  0025F2  C0F7  F0BF         	movff	showDateTime@year,?_printf+2
  4584  0025F6  C0F8  F0C0         	movff	showDateTime@year+1,?_printf+3
  4585  0025FA  C0F5  F0C1         	movff	showDateTime@mon,?_printf+4
  4586  0025FE  C0F6  F0C2         	movff	showDateTime@mon+1,?_printf+5
  4587  002602  C0F3  F0C3         	movff	showDateTime@day,?_printf+6
  4588  002606  C0F4  F0C4         	movff	showDateTime@day+1,?_printf+7
  4589  00260A  EC09  F000         	call	_printf	;wreg free
  4590                           
  4591                           ;interface.c: 67: printf("   %02x:%02x:%02x   A>",hour,min,sec);
  4592  00260E  0E9F               	movlw	low STR_11
  4593  002610  0100               	movlb	0	; () banked
  4594  002612  6FBD               	movwf	printf@f& (0+255),b
  4595  002614  0EFE               	movlw	high STR_11
  4596  002616  0100               	movlb	0	; () banked
  4597  002618  6FBE               	movwf	(printf@f+1)& (0+255),b
  4598  00261A  C0F1  F0BF         	movff	showDateTime@hour,?_printf+2
  4599  00261E  C0F2  F0C0         	movff	showDateTime@hour+1,?_printf+3
  4600  002622  C0EF  F0C1         	movff	showDateTime@min,?_printf+4
  4601  002626  C0F0  F0C2         	movff	showDateTime@min+1,?_printf+5
  4602  00262A  C0ED  F0C3         	movff	showDateTime@sec,?_printf+6
  4603  00262E  C0EE  F0C4         	movff	showDateTime@sec+1,?_printf+7
  4604  002632  EC09  F000         	call	_printf	;wreg free
  4605                           
  4606                           ;interface.c: 68: _delay((unsigned long)((111)*(10000000/4000.0)));
  4607  002636  0E02               	movlw	2
  4608  002638  0100               	movlb	0	; () banked
  4609  00263A  6FEC               	movwf	(??_showDateTime+1)& (0+255),b
  4610  00263C  0E69               	movlw	105
  4611  00263E  0100               	movlb	0	; () banked
  4612  002640  6FEB               	movwf	??_showDateTime& (0+255),b
  4613  002642  0E60               	movlw	96
  4614  002644                     u8037:
  4615  002644  2EE8               	decfsz	wreg,f,c
  4616  002646  D7FE               	bra	u8037
  4617  002648  2FEB               	decfsz	??_showDateTime& (0+255),f,b
  4618  00264A  D7FC               	bra	u8037
  4619  00264C  2FEC               	decfsz	(??_showDateTime+1)& (0+255),f,b
  4620  00264E  D7FA               	bra	u8037
  4621  002650  F000               	nop	
  4622  002652                     l7174:
  4623  002652  EC55  F01E         	call	_keyPressed	;wreg free
  4624  002656  0A41               	xorlw	65
  4625  002658  B4D8               	btfsc	status,2,c
  4626  00265A  0012               	return	
  4627  00265C  D77D               	goto	l7152
  4628  00265E                     __end_of_showDateTime:
  4629                           	opt stack 0
  4630                           tblptru	equ	0xFF8
  4631                           tblptrh	equ	0xFF7
  4632                           tblptrl	equ	0xFF6
  4633                           tablat	equ	0xFF5
  4634                           prodh	equ	0xFF4
  4635                           prodl	equ	0xFF3
  4636                           postinc0	equ	0xFEE
  4637                           wreg	equ	0xFE8
  4638                           postdec1	equ	0xFE5
  4639                           fsr1l	equ	0xFE1
  4640                           indf2	equ	0xFDF
  4641                           postinc2	equ	0xFDE
  4642                           postdec2	equ	0xFDD
  4643                           fsr2h	equ	0xFDA
  4644                           fsr2l	equ	0xFD9
  4645                           status	equ	0xFD8
  4646                           
  4647 ;; *************** function _setTime *****************
  4648 ;; Defined at:
  4649 ;;		line 48 in file "RTC.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;		None
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;  i               1   37[COMRAM] unsigned char 
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      void 
  4656 ;; Registers used:
  4657 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;Total ram usage:        1 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    5
  4670 ;; This function calls:
  4671 ;;		_I2C_Master_Start
  4672 ;;		_I2C_Master_Stop
  4673 ;;		_I2C_Master_Write
  4674 ;; This function is called by:
  4675 ;;		_showDateTime
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text13
  4680  00384E                     __ptext13:
  4681                           	opt stack 0
  4682  00384E                     _setTime:
  4683                           	opt stack 23
  4684                           
  4685                           ;RTC.c: 49: (INTCONbits.GIE = 0);
  4686                           
  4687                           ;incstack = 0
  4688  00384E  9EF2               	bcf	intcon,7,c	;volatile
  4689                           
  4690                           ;RTC.c: 50: I2C_Master_Start();
  4691  003850  EC6C  F01E         	call	_I2C_Master_Start	;wreg free
  4692                           
  4693                           ;RTC.c: 51: I2C_Master_Write(0b11010000);
  4694  003854  0E00               	movlw	0
  4695  003856  6E25               	movwf	I2C_Master_Write@d+1,c
  4696  003858  0ED0               	movlw	208
  4697  00385A  6E24               	movwf	I2C_Master_Write@d,c
  4698  00385C  EC5B  F01E         	call	_I2C_Master_Write	;wreg free
  4699                           
  4700                           ;RTC.c: 52: I2C_Master_Write(0x00);
  4701  003860  0E00               	movlw	0
  4702  003862  6E25               	movwf	I2C_Master_Write@d+1,c
  4703  003864  0E00               	movlw	0
  4704  003866  6E24               	movwf	I2C_Master_Write@d,c
  4705  003868  EC5B  F01E         	call	_I2C_Master_Write	;wreg free
  4706                           
  4707                           ;RTC.c: 53: for(char i=0; i<7; i++){
  4708  00386C  0E00               	movlw	0
  4709  00386E  6E26               	movwf	setTime@i,c
  4710  003870                     l6990:
  4711  003870  0E06               	movlw	6
  4712  003872  6426               	cpfsgt	setTime@i,c
  4713  003874  D001               	goto	l6994
  4714  003876  D010               	goto	l7000
  4715  003878                     l6994:
  4716                           
  4717                           ;RTC.c: 54: I2C_Master_Write(happynewyear[i]);
  4718  003878  5026               	movf	setTime@i,w,c
  4719  00387A  0D01               	mullw	1
  4720  00387C  0E98               	movlw	low _happynewyear
  4721  00387E  24F3               	addwf	prodl,w,c
  4722  003880  6EF6               	movwf	tblptrl,c
  4723  003882  0EFE               	movlw	high _happynewyear
  4724  003884  20F4               	addwfc	prodh,w,c
  4725  003886  6EF7               	movwf	tblptrh,c
  4726  003888                     	if	0	;There are less than 3 active tblptr bytes
  4727  003888                     	endif
  4728  003888  0008               	tblrd		*
  4729  00388A  50F5               	movf	tablat,w,c
  4730  00388C  6E24               	movwf	I2C_Master_Write@d,c
  4731  00388E  6A25               	clrf	I2C_Master_Write@d+1,c
  4732  003890  EC5B  F01E         	call	_I2C_Master_Write	;wreg free
  4733  003894  2A26               	incf	setTime@i,f,c
  4734  003896  D7EC               	goto	l6990
  4735  003898                     l7000:
  4736                           
  4737                           ;RTC.c: 55: }
  4738                           ;RTC.c: 56: I2C_Master_Stop();
  4739  003898  EC68  F01E         	call	_I2C_Master_Stop	;wreg free
  4740                           
  4741                           ;RTC.c: 57: (INTCONbits.GIE = 1);
  4742  00389C  8EF2               	bsf	intcon,7,c	;volatile
  4743  00389E  0012               	return		;funcret
  4744  0038A0                     __end_of_setTime:
  4745                           	opt stack 0
  4746                           tblptru	equ	0xFF8
  4747                           tblptrh	equ	0xFF7
  4748                           tblptrl	equ	0xFF6
  4749                           tablat	equ	0xFF5
  4750                           prodh	equ	0xFF4
  4751                           prodl	equ	0xFF3
  4752                           intcon	equ	0xFF2
  4753                           postinc0	equ	0xFEE
  4754                           wreg	equ	0xFE8
  4755                           postdec1	equ	0xFE5
  4756                           fsr1l	equ	0xFE1
  4757                           indf2	equ	0xFDF
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _printf *****************
  4765 ;; Defined at:
  4766 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  4769 ;;		 -> STR_21(19), STR_20(18), STR_19(17), STR_18(19), 
  4770 ;;		 -> STR_17(17), STR_16(19), STR_15(17), STR_14(18), 
  4771 ;;		 -> STR_13(17), STR_12(18), STR_11(23), STR_10(20), 
  4772 ;;		 -> STR_9(8), STR_8(11), STR_7(11), STR_6(11), 
  4773 ;;		 -> STR_5(16), STR_4(14), STR_3(17), STR_2(17), 
  4774 ;;		 -> STR_1(8), 
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;  idx             1   80[BANK0 ] unsigned char 
  4777 ;;  val             4   96[BANK0 ] unsigned long 
  4778 ;;  tmpval          4   87[BANK0 ] struct .
  4779 ;;  fval            3   93[BANK0 ] struct .
  4780 ;;  prec            2  104[BANK0 ] int 
  4781 ;;  flag            2  102[BANK0 ] unsigned short 
  4782 ;;  width           2  100[BANK0 ] int 
  4783 ;;  exp             2   91[BANK0 ] int 
  4784 ;;  ap              2   85[BANK0 ] PTR void [1]
  4785 ;;		 -> ?_printf(2), 
  4786 ;;  len             2   83[BANK0 ] unsigned int 
  4787 ;;  cp              2   81[BANK0 ] PTR const unsigned char 
  4788 ;;		 -> printf@c(1), 
  4789 ;;  c               1  106[BANK0 ] char 
  4790 ;;  d               1    0        unsigned char 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  2   61[BANK0 ] int 
  4793 ;; Registers used:
  4794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4800 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4804 ;;Total ram usage:       46 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    7
  4807 ;; This function calls:
  4808 ;;		___awdiv
  4809 ;;		___ftadd
  4810 ;;		___ftge
  4811 ;;		___ftmul
  4812 ;;		___ftneg
  4813 ;;		___ftsub
  4814 ;;		___fttol
  4815 ;;		___lldiv
  4816 ;;		___llmod
  4817 ;;		___lltoft
  4818 ;;		___wmul
  4819 ;;		__div_to_l_
  4820 ;;		__tdiv_to_l_
  4821 ;;		_fround
  4822 ;;		_isdigit
  4823 ;;		_putch
  4824 ;;		_scale
  4825 ;; This function is called by:
  4826 ;;		_main
  4827 ;;		_sortBattery
  4828 ;;		_showDateTime
  4829 ;;		_showMainMenu
  4830 ;;		_showRunSelect
  4831 ;;		_showRunMenu
  4832 ;;		_showRunTime
  4833 ;;		_showRunStats
  4834 ;;		_pause
  4835 ;;		_testFrequency
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text14
  4840  000012                     __ptext14:
  4841                           	opt stack 0
  4842  000012                     _printf:
  4843                           	opt stack 22
  4844                           
  4845                           ;doprnt.c: 466: va_list ap;
  4846                           ;doprnt.c: 499: signed char c;
  4847                           ;doprnt.c: 501: int width;
  4848                           ;doprnt.c: 504: int prec;
  4849                           ;doprnt.c: 508: unsigned short flag;
  4850                           ;doprnt.c: 515: char d;
  4851                           ;doprnt.c: 516: double fval;
  4852                           ;doprnt.c: 517: int exp;
  4853                           ;doprnt.c: 523: union {
  4854                           ;doprnt.c: 524: unsigned long vd;
  4855                           ;doprnt.c: 525: double integ;
  4856                           ;doprnt.c: 526: } tmpval;
  4857                           ;doprnt.c: 528: unsigned long val;
  4858                           ;doprnt.c: 529: unsigned len;
  4859                           ;doprnt.c: 530: const char * cp;
  4860                           ;doprnt.c: 533: *ap = __va_start();
  4861                           
  4862                           ;incstack = 0
  4863  000012  0EBF               	movlw	low (?_printf+2)
  4864  000014  0100               	movlb	0	; () banked
  4865  000016  6FD5               	movwf	printf@ap& (0+255),b
  4866  000018  0E00               	movlw	high (?_printf+2)
  4867  00001A  0100               	movlb	0	; () banked
  4868  00001C  6FD6               	movwf	(printf@ap+1)& (0+255),b
  4869                           
  4870                           ;doprnt.c: 536: while(c = *f++) {
  4871  00001E  EFF5  F006         	goto	l6922
  4872  000022                     l6556:
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;doprnt.c: 538: if(c != '%')
  4876  000022  0E25               	movlw	37
  4877  000024  0100               	movlb	0	; () banked
  4878  000026  19EA               	xorwf	printf@c& (0+255),w,b
  4879  000028  B4D8               	btfsc	status,2,c
  4880  00002A  D006               	goto	l6560
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;doprnt.c: 540: {
  4884                           ;doprnt.c: 541: (putch(c) );
  4885  00002C  0100               	movlb	0	; () banked
  4886  00002E  51EA               	movf	printf@c& (0+255),w,b
  4887  000030  ECE9  F01D         	call	_putch
  4888                           
  4889                           ;doprnt.c: 542: continue;
  4890  000034  EFF5  F006         	goto	l6922
  4891  000038                     l6560:
  4892                           
  4893                           ;doprnt.c: 543: }
  4894                           ;doprnt.c: 546: width = 0;
  4895  000038  0E00               	movlw	0
  4896  00003A  0100               	movlb	0	; () banked
  4897  00003C  6FE5               	movwf	(printf@width+1)& (0+255),b
  4898  00003E  0E00               	movlw	0
  4899  000040  6FE4               	movwf	printf@width& (0+255),b
  4900                           
  4901                           ;doprnt.c: 548: flag = 0;
  4902  000042  0E00               	movlw	0
  4903  000044  0100               	movlb	0	; () banked
  4904  000046  6FE7               	movwf	(printf@flag+1)& (0+255),b
  4905  000048  0E00               	movlw	0
  4906  00004A  6FE6               	movwf	printf@flag& (0+255),b
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;doprnt.c: 551: switch(*f) {
  4910                           
  4911                           ;doprnt.c: 550: for(;;) {
  4912  00004C  D005               	goto	l6566
  4913  00004E                     l6562:
  4914                           
  4915                           ;doprnt.c: 580: flag |= 0x04;
  4916  00004E  0100               	movlb	0	; () banked
  4917  000050  85E6               	bsf	printf@flag& (0+255),2,b
  4918                           
  4919                           ;doprnt.c: 581: f++;
  4920  000052  0100               	movlb	0	; () banked
  4921  000054  4BBD               	infsnz	printf@f& (0+255),f,b
  4922  000056  2BBE               	incf	(printf@f+1)& (0+255),f,b
  4923  000058                     l6566:
  4924  000058  C0BD  FFF6         	movff	printf@f,tblptrl
  4925  00005C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4926  000060                     	if	0	;tblptru may be non-zero
  4927  000060                     	endif
  4928  000060                     	if	0	;tblptru may be non-zero
  4929  000060                     	endif
  4930  000060  0008               	tblrd		*
  4931  000062  50F5               	movf	tablat,w,c
  4932                           
  4933                           ; Switch size 1, requested type "space"
  4934                           ; Number of cases is 1, Range of values is 48 to 48
  4935                           ; switch strategies available:
  4936                           ; Name         Instructions Cycles
  4937                           ; simple_byte            4     3 (average)
  4938                           ;	Chosen strategy is simple_byte
  4939  000064  0A30               	xorlw	48	; case 48
  4940  000066  B4D8               	btfsc	status,2,c
  4941  000068  D7F2               	goto	l6562
  4942                           
  4943                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4944                           
  4945                           ;doprnt.c: 586: }
  4946                           
  4947                           ;doprnt.c: 585: break;
  4948  00006A  C0BD  FFF6         	movff	printf@f,tblptrl
  4949  00006E  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4950  000072                     	if	0	;tblptru may be non-zero
  4951  000072                     	endif
  4952  000072                     	if	0	;tblptru may be non-zero
  4953  000072                     	endif
  4954  000072  0008               	tblrd		*
  4955  000074  50F5               	movf	tablat,w,c
  4956  000076  EC1B  F01E         	call	_isdigit
  4957  00007A  A0D8               	btfss	status,0,c
  4958  00007C  D03F               	goto	l6580
  4959                           
  4960                           ;doprnt.c: 598: width = 0;
  4961  00007E  0E00               	movlw	0
  4962  000080  0100               	movlb	0	; () banked
  4963  000082  6FE5               	movwf	(printf@width+1)& (0+255),b
  4964  000084  0E00               	movlw	0
  4965  000086  6FE4               	movwf	printf@width& (0+255),b
  4966  000088                     l6572:
  4967                           
  4968                           ;doprnt.c: 600: width *= 10;
  4969  000088  C0E4  F031         	movff	printf@width,___wmul@multiplier
  4970  00008C  C0E5  F032         	movff	printf@width+1,___wmul@multiplier+1
  4971  000090  0E00               	movlw	0
  4972  000092  6E34               	movwf	___wmul@multiplicand+1,c
  4973  000094  0E0A               	movlw	10
  4974  000096  6E33               	movwf	___wmul@multiplicand,c
  4975  000098  ECC4  F01D         	call	___wmul	;wreg free
  4976  00009C  C031  F0E4         	movff	?___wmul,printf@width
  4977  0000A0  C032  F0E5         	movff	?___wmul+1,printf@width+1
  4978                           
  4979                           ;doprnt.c: 601: width += *f++ - '0';
  4980  0000A4  0ED0               	movlw	208
  4981  0000A6  0100               	movlb	0	; () banked
  4982  0000A8  6FC7               	movwf	??_printf& (0+255),b
  4983  0000AA  0EFF               	movlw	255
  4984  0000AC  0100               	movlb	0	; () banked
  4985  0000AE  6FC8               	movwf	(??_printf+1)& (0+255),b
  4986  0000B0  C0BD  FFF6         	movff	printf@f,tblptrl
  4987  0000B4  C0BE  FFF7         	movff	printf@f+1,tblptrh
  4988  0000B8                     	if	0	;tblptru may be non-zero
  4989  0000B8                     	endif
  4990  0000B8                     	if	0	;tblptru may be non-zero
  4991  0000B8                     	endif
  4992  0000B8  0008               	tblrd		*
  4993  0000BA  50F5               	movf	tablat,w,c
  4994  0000BC  0100               	movlb	0	; () banked
  4995  0000BE  6FC9               	movwf	(??_printf+2)& (0+255),b
  4996  0000C0  6BCA               	clrf	(??_printf+3)& (0+255),b
  4997  0000C2  0100               	movlb	0	; () banked
  4998  0000C4  51C7               	movf	??_printf& (0+255),w,b
  4999  0000C6  0100               	movlb	0	; () banked
  5000  0000C8  27C9               	addwf	(??_printf+2)& (0+255),f,b
  5001  0000CA  0100               	movlb	0	; () banked
  5002  0000CC  51C8               	movf	(??_printf+1)& (0+255),w,b
  5003  0000CE  0100               	movlb	0	; () banked
  5004  0000D0  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  5005  0000D2  0100               	movlb	0	; () banked
  5006  0000D4  51C9               	movf	(??_printf+2)& (0+255),w,b
  5007  0000D6  0100               	movlb	0	; () banked
  5008  0000D8  27E4               	addwf	printf@width& (0+255),f,b
  5009  0000DA  0100               	movlb	0	; () banked
  5010  0000DC  51CA               	movf	(??_printf+3)& (0+255),w,b
  5011  0000DE  0100               	movlb	0	; () banked
  5012  0000E0  23E5               	addwfc	(printf@width+1)& (0+255),f,b
  5013                           
  5014                           ; BSR set to: 0
  5015  0000E2  0100               	movlb	0	; () banked
  5016  0000E4  4BBD               	infsnz	printf@f& (0+255),f,b
  5017  0000E6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5021  0000E8  C0BD  FFF6         	movff	printf@f,tblptrl
  5022  0000EC  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5023  0000F0                     	if	0	;tblptru may be non-zero
  5024  0000F0                     	endif
  5025  0000F0                     	if	0	;tblptru may be non-zero
  5026  0000F0                     	endif
  5027  0000F0  0008               	tblrd		*
  5028  0000F2  50F5               	movf	tablat,w,c
  5029  0000F4  EC1B  F01E         	call	_isdigit
  5030  0000F8  B0D8               	btfsc	status,0,c
  5031  0000FA  D7C6               	goto	l6572
  5032  0000FC                     l6580:
  5033                           
  5034                           ;doprnt.c: 608: }
  5035                           ;doprnt.c: 611: if(*f == '.') {
  5036  0000FC  C0BD  FFF6         	movff	printf@f,tblptrl
  5037  000100  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5038  000104                     	if	0	;tblptru may be non-zero
  5039  000104                     	endif
  5040  000104                     	if	0	;tblptru may be non-zero
  5041  000104                     	endif
  5042  000104  0008               	tblrd		*
  5043  000106  50F5               	movf	tablat,w,c
  5044  000108  0A2E               	xorlw	46
  5045  00010A  A4D8               	btfss	status,2,c
  5046  00010C  D034               	goto	l6592
  5047                           
  5048                           ;doprnt.c: 612: flag |= 0x4000;
  5049  00010E  0100               	movlb	0	; () banked
  5050  000110  8DE7               	bsf	(printf@flag+1)& (0+255),6,b
  5051                           
  5052                           ;doprnt.c: 613: f++;
  5053  000112  0100               	movlb	0	; () banked
  5054  000114  4BBD               	infsnz	printf@f& (0+255),f,b
  5055  000116  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;doprnt.c: 620: {
  5059                           ;doprnt.c: 621: prec = 0;
  5060  000118  0E00               	movlw	0
  5061  00011A  0100               	movlb	0	; () banked
  5062  00011C  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5063  00011E  0E00               	movlw	0
  5064  000120  6FE8               	movwf	printf@prec& (0+255),b
  5065                           
  5066                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5067  000122  D01E               	goto	l6590
  5068  000124                     l6586:
  5069                           
  5070                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5071  000124  C0E8  F031         	movff	printf@prec,___wmul@multiplier
  5072  000128  C0E9  F032         	movff	printf@prec+1,___wmul@multiplier+1
  5073  00012C  0E00               	movlw	0
  5074  00012E  6E34               	movwf	___wmul@multiplicand+1,c
  5075  000130  0E0A               	movlw	10
  5076  000132  6E33               	movwf	___wmul@multiplicand,c
  5077  000134  ECC4  F01D         	call	___wmul	;wreg free
  5078  000138  C0BD  FFF6         	movff	printf@f,tblptrl
  5079  00013C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5080  000140                     	if	0	;tblptru may be non-zero
  5081  000140                     	endif
  5082  000140                     	if	0	;tblptru may be non-zero
  5083  000140                     	endif
  5084  000140  0008               	tblrd		*
  5085  000142  50F5               	movf	tablat,w,c
  5086  000144  2631               	addwf	?___wmul,f,c
  5087  000146  0E00               	movlw	0
  5088  000148  2232               	addwfc	?___wmul+1,f,c
  5089  00014A  0ED0               	movlw	208
  5090  00014C  2431               	addwf	?___wmul,w,c
  5091  00014E  0100               	movlb	0	; () banked
  5092  000150  6FE8               	movwf	printf@prec& (0+255),b
  5093  000152  0EFF               	movlw	255
  5094  000154  2032               	addwfc	?___wmul+1,w,c
  5095  000156  0100               	movlb	0	; () banked
  5096  000158  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5097                           
  5098                           ; BSR set to: 0
  5099  00015A  0100               	movlb	0	; () banked
  5100  00015C  4BBD               	infsnz	printf@f& (0+255),f,b
  5101  00015E  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5102  000160                     l6590:
  5103                           
  5104                           ; BSR set to: 0
  5105  000160  C0BD  FFF6         	movff	printf@f,tblptrl
  5106  000164  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5107  000168                     	if	0	;tblptru may be non-zero
  5108  000168                     	endif
  5109  000168                     	if	0	;tblptru may be non-zero
  5110  000168                     	endif
  5111  000168  0008               	tblrd		*
  5112  00016A  50F5               	movf	tablat,w,c
  5113  00016C  EC1B  F01E         	call	_isdigit
  5114  000170  A0D8               	btfss	status,0,c
  5115  000172  D07D               	goto	l6634
  5116  000174  D7D7               	goto	l6586
  5117  000176                     l6592:
  5118                           
  5119                           ;doprnt.c: 626: prec = 0;
  5120  000176  0E00               	movlw	0
  5121  000178  0100               	movlb	0	; () banked
  5122  00017A  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5123  00017C  0E00               	movlw	0
  5124  00017E  6FE8               	movwf	printf@prec& (0+255),b
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;doprnt.c: 628: flag |= 0x1000;
  5128  000180  0100               	movlb	0	; () banked
  5129  000182  89E7               	bsf	(printf@flag+1)& (0+255),4,b
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;doprnt.c: 635: switch(c = *f++) {
  5133                           
  5134                           ;doprnt.c: 630: }
  5135                           ;doprnt.c: 633: loop:
  5136                           
  5137                           ; BSR set to: 0
  5138  000184  D074               	goto	l6634
  5139  000186                     l6596:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;doprnt.c: 643: flag |= 0x10;
  5143  000186  0100               	movlb	0	; () banked
  5144  000188  89E6               	bsf	printf@flag& (0+255),4,b
  5145                           
  5146                           ;doprnt.c: 644: goto loop;
  5147  00018A  D071               	goto	l6634
  5148  00018C                     l6598:
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;doprnt.c: 663: flag |= 0x400;
  5152  00018C  0100               	movlb	0	; () banked
  5153  00018E  85E7               	bsf	(printf@flag+1)& (0+255),2,b
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;doprnt.c: 698: case 'i':
  5157                           ;doprnt.c: 699: break;
  5158                           
  5159                           ; BSR set to: 0
  5160                           
  5161                           ;doprnt.c: 697: case 'd':
  5162                           
  5163                           ;doprnt.c: 664: break;
  5164  000190  D090               	goto	l6636
  5165  000192                     l6600:
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;doprnt.c: 721: flag |= 0x80;
  5169  000192  0100               	movlb	0	; () banked
  5170  000194  8FE6               	bsf	printf@flag& (0+255),7,b
  5171                           
  5172                           ;doprnt.c: 723: break;
  5173  000196  D08D               	goto	l6636
  5174  000198                     l6602:
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;doprnt.c: 753: if(prec && prec < len)
  5178  000198  0100               	movlb	0	; () banked
  5179  00019A  51E8               	movf	printf@prec& (0+255),w,b
  5180  00019C  0100               	movlb	0	; () banked
  5181  00019E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  5182  0001A0  B4D8               	btfsc	status,2,c
  5183  0001A2  D00E               	goto	l6608
  5184                           
  5185                           ; BSR set to: 0
  5186  0001A4  0100               	movlb	0	; () banked
  5187  0001A6  51D3               	movf	printf@len& (0+255),w,b
  5188  0001A8  0100               	movlb	0	; () banked
  5189  0001AA  5DE8               	subwf	printf@prec& (0+255),w,b
  5190  0001AC  0100               	movlb	0	; () banked
  5191  0001AE  51D4               	movf	(printf@len+1)& (0+255),w,b
  5192  0001B0  0100               	movlb	0	; () banked
  5193  0001B2  59E9               	subwfb	(printf@prec+1)& (0+255),w,b
  5194  0001B4  B0D8               	btfsc	status,0,c
  5195  0001B6  D004               	goto	l6608
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;doprnt.c: 754: len = prec;
  5199  0001B8  C0E8  F0D3         	movff	printf@prec,printf@len
  5200  0001BC  C0E9  F0D4         	movff	printf@prec+1,printf@len+1
  5201  0001C0                     l6608:
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;doprnt.c: 757: if(width > len)
  5205  0001C0  0100               	movlb	0	; () banked
  5206  0001C2  51E4               	movf	printf@width& (0+255),w,b
  5207  0001C4  0100               	movlb	0	; () banked
  5208  0001C6  5DD3               	subwf	printf@len& (0+255),w,b
  5209  0001C8  0100               	movlb	0	; () banked
  5210  0001CA  51E5               	movf	(printf@width+1)& (0+255),w,b
  5211  0001CC  0100               	movlb	0	; () banked
  5212  0001CE  59D4               	subwfb	(printf@len+1)& (0+255),w,b
  5213  0001D0  B0D8               	btfsc	status,0,c
  5214  0001D2  D009               	goto	l6612
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;doprnt.c: 758: width -= len;
  5218  0001D4  0100               	movlb	0	; () banked
  5219  0001D6  51D3               	movf	printf@len& (0+255),w,b
  5220  0001D8  0100               	movlb	0	; () banked
  5221  0001DA  5FE4               	subwf	printf@width& (0+255),f,b
  5222  0001DC  0100               	movlb	0	; () banked
  5223  0001DE  51D4               	movf	(printf@len+1)& (0+255),w,b
  5224  0001E0  0100               	movlb	0	; () banked
  5225  0001E2  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  5226  0001E4  D009               	goto	l6616
  5227  0001E6                     l6612:
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;doprnt.c: 759: else
  5231                           ;doprnt.c: 760: width = 0;
  5232  0001E6  0E00               	movlw	0
  5233  0001E8  0100               	movlb	0	; () banked
  5234  0001EA  6FE5               	movwf	(printf@width+1)& (0+255),b
  5235  0001EC  0E00               	movlw	0
  5236  0001EE  6FE4               	movwf	printf@width& (0+255),b
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;doprnt.c: 764: while(width--)
  5240  0001F0  D003               	goto	l6616
  5241  0001F2                     l6614:
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;doprnt.c: 765: (putch(' ') );
  5245  0001F2  0E20               	movlw	32
  5246  0001F4  ECE9  F01D         	call	_putch
  5247  0001F8                     l6616:
  5248  0001F8  0100               	movlb	0	; () banked
  5249  0001FA  07E4               	decf	printf@width& (0+255),f,b
  5250  0001FC  A0D8               	btfss	status,0,c
  5251  0001FE  07E5               	decf	(printf@width+1)& (0+255),f,b
  5252  000200  0100               	movlb	0	; () banked
  5253  000202  29E4               	incf	printf@width& (0+255),w,b
  5254  000204  E1F6               	bnz	l6614
  5255  000206  0100               	movlb	0	; () banked
  5256  000208  29E5               	incf	(printf@width+1)& (0+255),w,b
  5257  00020A  B4D8               	btfsc	status,2,c
  5258  00020C  D00B               	goto	l6622
  5259  00020E  D7F1               	goto	l6614
  5260  000210                     l6618:
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;doprnt.c: 768: (putch(*cp++) );
  5264  000210  C0D1  FFD9         	movff	printf@cp,fsr2l
  5265  000214  C0D2  FFDA         	movff	printf@cp+1,fsr2h
  5266  000218  50DF               	movf	indf2,w,c
  5267  00021A  ECE9  F01D         	call	_putch
  5268  00021E  0100               	movlb	0	; () banked
  5269  000220  4BD1               	infsnz	printf@cp& (0+255),f,b
  5270  000222  2BD2               	incf	(printf@cp+1)& (0+255),f,b
  5271  000224                     l6622:
  5272                           
  5273                           ; BSR set to: 0
  5274  000224  0100               	movlb	0	; () banked
  5275  000226  07D3               	decf	printf@len& (0+255),f,b
  5276  000228  A0D8               	btfss	status,0,c
  5277  00022A  07D4               	decf	(printf@len+1)& (0+255),f,b
  5278  00022C  0100               	movlb	0	; () banked
  5279  00022E  29D3               	incf	printf@len& (0+255),w,b
  5280  000230  E1EF               	bnz	l6618
  5281  000232  0100               	movlb	0	; () banked
  5282  000234  29D4               	incf	(printf@len+1)& (0+255),w,b
  5283  000236  B4D8               	btfsc	status,2,c
  5284  000238  EFF5  F006         	goto	l6922
  5285  00023C  D7E9               	goto	l6618
  5286  00023E                     l6624:
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5290  00023E  C0D5  FFD9         	movff	printf@ap,fsr2l
  5291  000242  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5292  000246  50DF               	movf	indf2,w,c
  5293  000248  0100               	movlb	0	; () banked
  5294  00024A  6FEA               	movwf	printf@c& (0+255),b
  5295                           
  5296                           ; BSR set to: 0
  5297  00024C  0E02               	movlw	2
  5298  00024E  0100               	movlb	0	; () banked
  5299  000250  27D5               	addwf	printf@ap& (0+255),f,b
  5300  000252  0E00               	movlw	0
  5301  000254  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  5302  000256                     l6628:
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;doprnt.c: 805: cp = (char *)&c;
  5306  000256  0EEA               	movlw	low printf@c
  5307  000258  0100               	movlb	0	; () banked
  5308  00025A  6FD1               	movwf	printf@cp& (0+255),b
  5309  00025C  0E00               	movlw	high printf@c
  5310  00025E  0100               	movlb	0	; () banked
  5311  000260  6FD2               	movwf	(printf@cp+1)& (0+255),b
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;doprnt.c: 806: len = 1;
  5315  000262  0E00               	movlw	0
  5316  000264  0100               	movlb	0	; () banked
  5317  000266  6FD4               	movwf	(printf@len+1)& (0+255),b
  5318  000268  0E01               	movlw	1
  5319  00026A  6FD3               	movwf	printf@len& (0+255),b
  5320                           
  5321                           ;doprnt.c: 807: goto dostring;
  5322  00026C  D795               	goto	l6602
  5323  00026E                     l6634:
  5324  00026E  C0BD  FFF6         	movff	printf@f,tblptrl
  5325  000272  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5326  000276  0100               	movlb	0	; () banked
  5327  000278  4BBD               	infsnz	printf@f& (0+255),f,b
  5328  00027A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5329  00027C                     	if	0	;tblptru may be non-zero
  5330  00027C                     	endif
  5331  00027C                     	if	0	;tblptru may be non-zero
  5332  00027C                     	endif
  5333  00027C  0008               	tblrd		*
  5334  00027E  CFF5 F0EA          	movff	tablat,printf@c
  5335  000282  0100               	movlb	0	; () banked
  5336  000284  51EA               	movf	printf@c& (0+255),w,b
  5337                           
  5338                           ; Switch size 1, requested type "space"
  5339                           ; Number of cases is 7, Range of values is 0 to 120
  5340                           ; switch strategies available:
  5341                           ; Name         Instructions Cycles
  5342                           ; simple_byte           22    12 (average)
  5343                           ;	Chosen strategy is simple_byte
  5344  000286  0A00               	xorlw	0	; case 0
  5345  000288  B4D8               	btfsc	status,2,c
  5346  00028A  0012               	return	
  5347  00028C  0A63               	xorlw	99	; case 99
  5348  00028E  B4D8               	btfsc	status,2,c
  5349  000290  D7D6               	goto	l6624
  5350  000292  0A07               	xorlw	7	; case 100
  5351  000294  B4D8               	btfsc	status,2,c
  5352  000296  D00D               	goto	l6636
  5353  000298  0A02               	xorlw	2	; case 102
  5354  00029A  B4D8               	btfsc	status,2,c
  5355  00029C  D777               	goto	l6598
  5356  00029E  0A0F               	xorlw	15	; case 105
  5357  0002A0  B4D8               	btfsc	status,2,c
  5358  0002A2  D007               	goto	l6636
  5359  0002A4  0A05               	xorlw	5	; case 108
  5360  0002A6  B4D8               	btfsc	status,2,c
  5361  0002A8  D76E               	goto	l6596
  5362  0002AA  0A14               	xorlw	20	; case 120
  5363  0002AC  B4D8               	btfsc	status,2,c
  5364  0002AE  D771               	goto	l6600
  5365  0002B0  D7D2               	goto	l6628
  5366  0002B2                     l6636:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;doprnt.c: 825: if(flag & (0x700)) {
  5370  0002B2  0E07               	movlw	7
  5371  0002B4  0100               	movlb	0	; () banked
  5372  0002B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5373  0002B8  B4D8               	btfsc	status,2,c
  5374  0002BA  D36D               	goto	l763
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;doprnt.c: 827: if(flag & 0x1000)
  5378  0002BC  0100               	movlb	0	; () banked
  5379  0002BE  A9E7               	btfss	(printf@flag+1)& (0+255),4,b
  5380  0002C0  D005               	goto	l6642
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;doprnt.c: 829: prec = 6;
  5384  0002C2  0E00               	movlw	0
  5385  0002C4  0100               	movlb	0	; () banked
  5386  0002C6  6FE9               	movwf	(printf@prec+1)& (0+255),b
  5387  0002C8  0E06               	movlw	6
  5388  0002CA  6FE8               	movwf	printf@prec& (0+255),b
  5389  0002CC                     l6642:
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5393  0002CC  C0D5  FFD9         	movff	printf@ap,fsr2l
  5394  0002D0  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  5395  0002D4  CFDE F0DD          	movff	postinc2,printf@fval
  5396  0002D8  CFDE F0DE          	movff	postinc2,printf@fval+1
  5397  0002DC  CFDD F0DF          	movff	postdec2,printf@fval+2
  5398                           
  5399                           ; BSR set to: 0
  5400  0002E0  0E03               	movlw	3
  5401  0002E2  0100               	movlb	0	; () banked
  5402  0002E4  27D5               	addwf	printf@ap& (0+255),f,b
  5403  0002E6  0E00               	movlw	0
  5404  0002E8  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;doprnt.c: 831: if(fval < 0.0) {
  5408  0002EA  0100               	movlb	0	; () banked
  5409  0002EC  AFDF               	btfss	(printf@fval+2)& (0+255),7,b
  5410  0002EE  D011               	goto	l6652
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;doprnt.c: 832: fval = -fval;
  5414  0002F0  C0DD  F023         	movff	printf@fval,___ftneg@f1
  5415  0002F4  C0DE  F024         	movff	printf@fval+1,___ftneg@f1+1
  5416  0002F8  C0DF  F025         	movff	printf@fval+2,___ftneg@f1+2
  5417  0002FC  ECD7  F01D         	call	___ftneg	;wreg free
  5418  000300  C023  F0DD         	movff	?___ftneg,printf@fval
  5419  000304  C024  F0DE         	movff	?___ftneg+1,printf@fval+1
  5420  000308  C025  F0DF         	movff	?___ftneg+2,printf@fval+2
  5421                           
  5422                           ;doprnt.c: 833: flag |= 0x03;
  5423  00030C  0E03               	movlw	3
  5424  00030E  0100               	movlb	0	; () banked
  5425  000310  13E6               	iorwf	printf@flag& (0+255),f,b
  5426  000312                     l6652:
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 834: }
  5430                           ;doprnt.c: 835: exp = 0;
  5431  000312  0E00               	movlw	0
  5432  000314  0100               	movlb	0	; () banked
  5433  000316  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5434  000318  0E00               	movlw	0
  5435  00031A  6FDB               	movwf	printf@exp& (0+255),b
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;doprnt.c: 836: if( fval!=0) {
  5439  00031C  0100               	movlb	0	; () banked
  5440  00031E  51DD               	movf	printf@fval& (0+255),w,b
  5441  000320  0100               	movlb	0	; () banked
  5442  000322  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  5443  000324  0100               	movlb	0	; () banked
  5444  000326  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  5445  000328  B4D8               	btfsc	status,2,c
  5446  00032A  D091               	goto	l6680
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5450  00032C  0E82               	movlw	130
  5451  00032E  0100               	movlb	0	; () banked
  5452  000330  6FC7               	movwf	??_printf& (0+255),b
  5453  000332  0EFF               	movlw	255
  5454  000334  0100               	movlb	0	; () banked
  5455  000336  6FC8               	movwf	(??_printf+1)& (0+255),b
  5456  000338  C0DD  F0C9         	movff	printf@fval,??_printf+2
  5457  00033C  C0DE  F0CA         	movff	printf@fval+1,??_printf+3
  5458  000340  C0DF  F0CB         	movff	printf@fval+2,??_printf+4
  5459  000344  C0E0  F0CC         	movff	printf@fval+3,??_printf+5
  5460  000348  0E10               	movlw	16
  5461  00034A  D006               	goto	u6680
  5462  00034C                     u6685:
  5463  00034C  0100               	movlb	0	; () banked
  5464  00034E  90D8               	bcf	status,0,c
  5465  000350  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  5466  000352  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  5467  000354  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  5468  000356  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  5469  000358                     u6680:
  5470  000358  2EE8               	decfsz	wreg,f,c
  5471  00035A  D7F8               	goto	u6685
  5472  00035C  0100               	movlb	0	; () banked
  5473  00035E  51C9               	movf	(??_printf+2)& (0+255),w,b
  5474  000360  0100               	movlb	0	; () banked
  5475  000362  25C7               	addwf	??_printf& (0+255),w,b
  5476  000364  0100               	movlb	0	; () banked
  5477  000366  6FDB               	movwf	printf@exp& (0+255),b
  5478  000368  0E00               	movlw	0
  5479  00036A  0100               	movlb	0	; () banked
  5480  00036C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  5481  00036E  0100               	movlb	0	; () banked
  5482  000370  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;doprnt.c: 838: exp--;
  5486  000372  0100               	movlb	0	; () banked
  5487  000374  07DB               	decf	printf@exp& (0+255),f,b
  5488  000376  A0D8               	btfss	status,0,c
  5489  000378  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;doprnt.c: 839: exp *= 3;
  5493  00037A  C0DB  F031         	movff	printf@exp,___wmul@multiplier
  5494  00037E  C0DC  F032         	movff	printf@exp+1,___wmul@multiplier+1
  5495  000382  0E00               	movlw	0
  5496  000384  6E34               	movwf	___wmul@multiplicand+1,c
  5497  000386  0E03               	movlw	3
  5498  000388  6E33               	movwf	___wmul@multiplicand,c
  5499  00038A  ECC4  F01D         	call	___wmul	;wreg free
  5500  00038E  C031  F0DB         	movff	?___wmul,printf@exp
  5501  000392  C032  F0DC         	movff	?___wmul+1,printf@exp+1
  5502                           
  5503                           ;doprnt.c: 840: exp /= 10;
  5504  000396  C0DB  F029         	movff	printf@exp,___awdiv@dividend
  5505  00039A  C0DC  F02A         	movff	printf@exp+1,___awdiv@dividend+1
  5506  00039E  0E00               	movlw	0
  5507  0003A0  6E2C               	movwf	___awdiv@divisor+1,c
  5508  0003A2  0E0A               	movlw	10
  5509  0003A4  6E2B               	movwf	___awdiv@divisor,c
  5510  0003A6  EC60  F019         	call	___awdiv	;wreg free
  5511  0003AA  C029  F0DB         	movff	?___awdiv,printf@exp
  5512  0003AE  C02A  F0DC         	movff	?___awdiv+1,printf@exp+1
  5513                           
  5514                           ;doprnt.c: 841: if(exp < 0)
  5515  0003B2  0100               	movlb	0	; () banked
  5516  0003B4  AFDC               	btfss	(printf@exp+1)& (0+255),7,b
  5517  0003B6  D004               	goto	l6668
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;doprnt.c: 842: exp--;
  5521  0003B8  0100               	movlb	0	; () banked
  5522  0003BA  07DB               	decf	printf@exp& (0+255),f,b
  5523  0003BC  A0D8               	btfss	status,0,c
  5524  0003BE  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5525  0003C0                     l6668:
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5529  0003C0  0100               	movlb	0	; () banked
  5530  0003C2  51DB               	movf	printf@exp& (0+255),w,b
  5531  0003C4  0800               	sublw	0
  5532  0003C6  ECB3  F009         	call	_scale
  5533  0003CA  C098  F0D7         	movff	?_scale,printf@tmpval
  5534  0003CE  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  5535  0003D2  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  5536                           
  5537                           ;doprnt.c: 847: tmpval.integ *= fval;
  5538  0003D6  C0D7  F089         	movff	printf@tmpval,___ftmul@f1
  5539  0003DA  C0D8  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  5540  0003DE  C0D9  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  5541  0003E2  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  5542  0003E6  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  5543  0003EA  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  5544  0003EE  EC7D  F00F         	call	___ftmul	;wreg free
  5545  0003F2  C089  F0D7         	movff	?___ftmul,printf@tmpval
  5546  0003F6  C08A  F0D8         	movff	?___ftmul+1,printf@tmpval+1
  5547  0003FA  C08B  F0D9         	movff	?___ftmul+2,printf@tmpval+2
  5548                           
  5549                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5550  0003FE  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5551  000402  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5552  000406  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5553  00040A  0E00               	movlw	0
  5554  00040C  6E32               	movwf	___ftge@ff2,c
  5555  00040E  0E80               	movlw	128
  5556  000410  6E33               	movwf	___ftge@ff2+1,c
  5557  000412  0E3F               	movlw	63
  5558  000414  6E34               	movwf	___ftge@ff2+2,c
  5559  000416  ECD4  F018         	call	___ftge	;wreg free
  5560  00041A  B0D8               	btfsc	status,0,c
  5561  00041C  D005               	goto	l6676
  5562                           
  5563                           ;doprnt.c: 849: exp--;
  5564  00041E  0100               	movlb	0	; () banked
  5565  000420  07DB               	decf	printf@exp& (0+255),f,b
  5566  000422  A0D8               	btfss	status,0,c
  5567  000424  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5568  000426  D013               	goto	l6680
  5569  000428                     l6676:
  5570                           
  5571                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5572  000428  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5573  00042C  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5574  000430  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5575  000434  0E00               	movlw	0
  5576  000436  6E32               	movwf	___ftge@ff2,c
  5577  000438  0E20               	movlw	32
  5578  00043A  6E33               	movwf	___ftge@ff2+1,c
  5579  00043C  0E41               	movlw	65
  5580  00043E  6E34               	movwf	___ftge@ff2+2,c
  5581  000440  ECD4  F018         	call	___ftge	;wreg free
  5582  000444  A0D8               	btfss	status,0,c
  5583  000446  D003               	goto	l6680
  5584                           
  5585                           ;doprnt.c: 851: exp++;
  5586  000448  0100               	movlb	0	; () banked
  5587  00044A  4BDB               	infsnz	printf@exp& (0+255),f,b
  5588  00044C  2BDC               	incf	(printf@exp+1)& (0+255),f,b
  5589  00044E                     l6680:
  5590                           
  5591                           ;doprnt.c: 852: }
  5592                           ;doprnt.c: 1112: if(prec <= 12)
  5593  00044E  0100               	movlb	0	; () banked
  5594  000450  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  5595  000452  D008               	goto	l6682
  5596  000454  0100               	movlb	0	; () banked
  5597  000456  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5598  000458  E11D               	bnz	l6684
  5599  00045A  0E0D               	movlw	13
  5600  00045C  0100               	movlb	0	; () banked
  5601  00045E  5DE8               	subwf	printf@prec& (0+255),w,b
  5602  000460  B0D8               	btfsc	status,0,c
  5603  000462  D018               	goto	l6684
  5604  000464                     l6682:
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;doprnt.c: 1113: fval += fround(prec);
  5608  000464  C0DD  F0A2         	movff	printf@fval,___ftadd@f1
  5609  000468  C0DE  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  5610  00046C  C0DF  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  5611  000470  0100               	movlb	0	; () banked
  5612  000472  51E8               	movf	printf@prec& (0+255),w,b
  5613  000474  EC4D  F00E         	call	_fround
  5614  000478  C098  F0A5         	movff	?_fround,___ftadd@f2
  5615  00047C  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  5616  000480  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  5617  000484  EC19  F00D         	call	___ftadd	;wreg free
  5618  000488  C0A2  F0DD         	movff	?___ftadd,printf@fval
  5619  00048C  C0A3  F0DE         	movff	?___ftadd+1,printf@fval+1
  5620  000490  C0A4  F0DF         	movff	?___ftadd+2,printf@fval+2
  5621  000494                     l6684:
  5622                           
  5623                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5624  000494  0100               	movlb	0	; () banked
  5625  000496  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5626  000498  D008               	goto	l6686
  5627  00049A  0100               	movlb	0	; () banked
  5628  00049C  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5629  00049E  E12A               	bnz	l6692
  5630  0004A0  0E0A               	movlw	10
  5631  0004A2  0100               	movlb	0	; () banked
  5632  0004A4  5DDB               	subwf	printf@exp& (0+255),w,b
  5633  0004A6  B0D8               	btfsc	status,0,c
  5634  0004A8  D025               	goto	l6692
  5635  0004AA                     l6686:
  5636                           
  5637                           ; BSR set to: 0
  5638  0004AA  0100               	movlb	0	; () banked
  5639  0004AC  51DD               	movf	printf@fval& (0+255),w,b
  5640  0004AE  0100               	movlb	0	; () banked
  5641  0004B0  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  5642  0004B2  0100               	movlb	0	; () banked
  5643  0004B4  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  5644  0004B6  B4D8               	btfsc	status,2,c
  5645  0004B8  D05F               	goto	l6706
  5646                           
  5647                           ; BSR set to: 0
  5648  0004BA  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  5649  0004BE  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5650  0004C2  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5651  0004C6  ECD8  F010         	call	___fttol	;wreg free
  5652  0004CA  0100               	movlb	0	; () banked
  5653  0004CC  51AE               	movf	?___fttol& (0+255),w,b
  5654  0004CE  0100               	movlb	0	; () banked
  5655  0004D0  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  5656  0004D2  0100               	movlb	0	; () banked
  5657  0004D4  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  5658  0004D6  0100               	movlb	0	; () banked
  5659  0004D8  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  5660  0004DA  A4D8               	btfss	status,2,c
  5661  0004DC  D04D               	goto	l6706
  5662                           
  5663                           ; BSR set to: 0
  5664  0004DE  0100               	movlb	0	; () banked
  5665  0004E0  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5666  0004E2  D04A               	goto	l6706
  5667  0004E4  0100               	movlb	0	; () banked
  5668  0004E6  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5669  0004E8  E105               	bnz	l6692
  5670  0004EA  0E02               	movlw	2
  5671  0004EC  0100               	movlb	0	; () banked
  5672  0004EE  5DDB               	subwf	printf@exp& (0+255),w,b
  5673  0004F0  A0D8               	btfss	status,0,c
  5674  0004F2  D042               	goto	l6706
  5675  0004F4                     l6692:
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5679  0004F4  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  5680  0004F8  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  5681  0004FC  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  5682  000500  0E70               	movlw	112
  5683  000502  6E32               	movwf	___ftge@ff2,c
  5684  000504  0E89               	movlw	137
  5685  000506  6E33               	movwf	___ftge@ff2+1,c
  5686  000508  0E40               	movlw	64
  5687  00050A  6E34               	movwf	___ftge@ff2+2,c
  5688  00050C  ECD4  F018         	call	___ftge	;wreg free
  5689  000510  B0D8               	btfsc	status,0,c
  5690  000512  D003               	goto	l6696
  5691                           
  5692                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5693  000514  0100               	movlb	0	; () banked
  5694  000516  0EF7               	movlw	247
  5695  000518  D002               	goto	L1
  5696  00051A                     l6696:
  5697                           
  5698                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5699  00051A  0100               	movlb	0	; () banked
  5700  00051C  0EF8               	movlw	248
  5701  00051E                     L1:
  5702  00051E  27DB               	addwf	printf@exp& (0+255),f,b
  5703  000520  0EFF               	movlw	255
  5704  000522  23DC               	addwfc	(printf@exp+1)& (0+255),f,b
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;doprnt.c: 1124: }
  5708                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5709                           
  5710                           ; BSR set to: 0
  5711  000524  0100               	movlb	0	; () banked
  5712  000526  51DB               	movf	printf@exp& (0+255),w,b
  5713  000528  ECB3  F009         	call	_scale
  5714  00052C  C098  F0D7         	movff	?_scale,printf@tmpval
  5715  000530  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  5716  000534  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  5717                           
  5718                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5719  000538  C0DD  F023         	movff	printf@fval,__tdiv_to_l_@f1
  5720  00053C  C0DE  F024         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5721  000540  C0DF  F025         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5722  000544  C0D7  F026         	movff	printf@tmpval,__tdiv_to_l_@f2
  5723  000548  C0D8  F027         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5724  00054C  C0D9  F028         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5725  000550  EC7A  F011         	call	__tdiv_to_l_	;wreg free
  5726  000554  C023  F0E0         	movff	?__tdiv_to_l_,printf@val
  5727  000558  C024  F0E1         	movff	?__tdiv_to_l_+1,printf@val+1
  5728  00055C  C025  F0E2         	movff	?__tdiv_to_l_+2,printf@val+2
  5729  000560  C026  F0E3         	movff	?__tdiv_to_l_+3,printf@val+3
  5730                           
  5731                           ;doprnt.c: 1129: fval = 0.0;
  5732  000564  0E00               	movlw	0
  5733  000566  0100               	movlb	0	; () banked
  5734  000568  6FDD               	movwf	printf@fval& (0+255),b
  5735  00056A  0E00               	movlw	0
  5736  00056C  0100               	movlb	0	; () banked
  5737  00056E  6FDE               	movwf	(printf@fval+1)& (0+255),b
  5738  000570  0E00               	movlw	0
  5739  000572  0100               	movlb	0	; () banked
  5740  000574  6FDF               	movwf	(printf@fval+2)& (0+255),b
  5741                           
  5742                           ;doprnt.c: 1130: } else {
  5743  000576  D033               	goto	l6710
  5744  000578                     l6706:
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5748  000578  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  5749  00057C  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  5750  000580  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  5751  000584  ECD8  F010         	call	___fttol	;wreg free
  5752  000588  C0AE  F0E0         	movff	?___fttol,printf@val
  5753  00058C  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  5754  000590  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  5755  000594  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  5756                           
  5757                           ;doprnt.c: 1132: fval -= (double)val;
  5758  000598  C0DD  F0AE         	movff	printf@fval,___ftsub@f1
  5759  00059C  C0DE  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  5760  0005A0  C0DF  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  5761  0005A4  C0E0  F02B         	movff	printf@val,___lltoft@c
  5762  0005A8  C0E1  F02C         	movff	printf@val+1,___lltoft@c+1
  5763  0005AC  C0E2  F02D         	movff	printf@val+2,___lltoft@c+2
  5764  0005B0  C0E3  F02E         	movff	printf@val+3,___lltoft@c+3
  5765  0005B4  ECCC  F01B         	call	___lltoft	;wreg free
  5766  0005B8  C02B  F0B1         	movff	?___lltoft,___ftsub@f2
  5767  0005BC  C02C  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  5768  0005C0  C02D  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  5769  0005C4  EC78  F01C         	call	___ftsub	;wreg free
  5770  0005C8  C0AE  F0DD         	movff	?___ftsub,printf@fval
  5771  0005CC  C0AF  F0DE         	movff	?___ftsub+1,printf@fval+1
  5772  0005D0  C0B0  F0DF         	movff	?___ftsub+2,printf@fval+2
  5773                           
  5774                           ;doprnt.c: 1133: exp = 0;
  5775  0005D4  0E00               	movlw	0
  5776  0005D6  0100               	movlb	0	; () banked
  5777  0005D8  6FDC               	movwf	(printf@exp+1)& (0+255),b
  5778  0005DA  0E00               	movlw	0
  5779  0005DC  6FDB               	movwf	printf@exp& (0+255),b
  5780  0005DE                     l6710:
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;doprnt.c: 1134: }
  5784                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5785  0005DE  0E01               	movlw	1
  5786  0005E0  0100               	movlb	0	; () banked
  5787  0005E2  6FEA               	movwf	printf@c& (0+255),b
  5788  0005E4                     l6712:
  5789                           
  5790                           ; BSR set to: 0
  5791  0005E4  0E0A               	movlw	10
  5792  0005E6  0100               	movlb	0	; () banked
  5793  0005E8  19EA               	xorwf	printf@c& (0+255),w,b
  5794  0005EA  B4D8               	btfsc	status,2,c
  5795  0005EC  D01E               	goto	l6724
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;doprnt.c: 1137: if(val < dpowers[c])
  5799                           
  5800                           ; BSR set to: 0
  5801                           
  5802                           ; BSR set to: 0
  5803  0005EE  0100               	movlb	0	; () banked
  5804  0005F0  51EA               	movf	printf@c& (0+255),w,b
  5805  0005F2  0D04               	mullw	4
  5806  0005F4  0EF1               	movlw	low _dpowers
  5807  0005F6  24F3               	addwf	prodl,w,c
  5808  0005F8  6EF6               	movwf	tblptrl,c
  5809  0005FA  0EFD               	movlw	high _dpowers
  5810  0005FC  20F4               	addwfc	prodh,w,c
  5811  0005FE  6EF7               	movwf	tblptrh,c
  5812  000600                     	if	0	;There are less than 3 active tblptr bytes
  5813  000600                     	endif
  5814  000600  0009               	tblrd		*+
  5815  000602  50F5               	movf	tablat,w,c
  5816  000604  0100               	movlb	0	; () banked
  5817  000606  5DE0               	subwf	printf@val& (0+255),w,b
  5818  000608  0009               	tblrd		*+
  5819  00060A  50F5               	movf	tablat,w,c
  5820  00060C  0100               	movlb	0	; () banked
  5821  00060E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  5822  000610  0009               	tblrd		*+
  5823  000612  50F5               	movf	tablat,w,c
  5824  000614  0100               	movlb	0	; () banked
  5825  000616  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  5826  000618  0009               	tblrd		*+
  5827  00061A  50F5               	movf	tablat,w,c
  5828  00061C  0100               	movlb	0	; () banked
  5829  00061E  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  5830  000620  A0D8               	btfss	status,0,c
  5831  000622  D003               	goto	l6724
  5832                           
  5833                           ; BSR set to: 0
  5834                           
  5835                           ; BSR set to: 0
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;doprnt.c: 1138: break;
  5839  000624  0100               	movlb	0	; () banked
  5840  000626  2BEA               	incf	printf@c& (0+255),f,b
  5841  000628  D7DD               	goto	l6712
  5842  00062A                     l6724:
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;doprnt.c: 1142: width -= prec + c + exp;
  5846  00062A  C0EA  F0C7         	movff	printf@c,??_printf
  5847  00062E  0100               	movlb	0	; () banked
  5848  000630  6BC8               	clrf	(??_printf+1)& (0+255),b
  5849  000632  BFC7               	btfsc	??_printf& (0+255),7,b
  5850  000634  07C8               	decf	(??_printf+1)& (0+255),f,b
  5851  000636  0100               	movlb	0	; () banked
  5852  000638  51E8               	movf	printf@prec& (0+255),w,b
  5853  00063A  0100               	movlb	0	; () banked
  5854  00063C  27C7               	addwf	??_printf& (0+255),f,b
  5855  00063E  0100               	movlb	0	; () banked
  5856  000640  51E9               	movf	(printf@prec+1)& (0+255),w,b
  5857  000642  0100               	movlb	0	; () banked
  5858  000644  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  5859  000646  0100               	movlb	0	; () banked
  5860  000648  51DB               	movf	printf@exp& (0+255),w,b
  5861  00064A  0100               	movlb	0	; () banked
  5862  00064C  27C7               	addwf	??_printf& (0+255),f,b
  5863  00064E  0100               	movlb	0	; () banked
  5864  000650  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5865  000652  0100               	movlb	0	; () banked
  5866  000654  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  5867  000656  0100               	movlb	0	; () banked
  5868  000658  51C7               	movf	??_printf& (0+255),w,b
  5869  00065A  0100               	movlb	0	; () banked
  5870  00065C  5FE4               	subwf	printf@width& (0+255),f,b
  5871  00065E  0100               	movlb	0	; () banked
  5872  000660  51C8               	movf	(??_printf+1)& (0+255),w,b
  5873  000662  0100               	movlb	0	; () banked
  5874  000664  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  5875                           
  5876                           ;doprnt.c: 1143: if(
  5877                           ;doprnt.c: 1147: prec)
  5878  000666  0100               	movlb	0	; () banked
  5879  000668  51E8               	movf	printf@prec& (0+255),w,b
  5880  00066A  0100               	movlb	0	; () banked
  5881  00066C  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  5882  00066E  B4D8               	btfsc	status,2,c
  5883  000670  D004               	goto	l6728
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;doprnt.c: 1148: width--;
  5887  000672  0100               	movlb	0	; () banked
  5888  000674  07E4               	decf	printf@width& (0+255),f,b
  5889  000676  A0D8               	btfss	status,0,c
  5890  000678  07E5               	decf	(printf@width+1)& (0+255),f,b
  5891  00067A                     l6728:
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;doprnt.c: 1149: if(flag & 0x03)
  5895  00067A  0E03               	movlw	3
  5896  00067C  0100               	movlb	0	; () banked
  5897  00067E  15E6               	andwf	printf@flag& (0+255),w,b
  5898  000680  0100               	movlb	0	; () banked
  5899  000682  6FC7               	movwf	??_printf& (0+255),b
  5900  000684  0E00               	movlw	0
  5901  000686  0100               	movlb	0	; () banked
  5902  000688  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5903  00068A  0100               	movlb	0	; () banked
  5904  00068C  6FC8               	movwf	(??_printf+1)& (0+255),b
  5905  00068E  0100               	movlb	0	; () banked
  5906  000690  51C7               	movf	??_printf& (0+255),w,b
  5907  000692  0100               	movlb	0	; () banked
  5908  000694  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5909  000696  B4D8               	btfsc	status,2,c
  5910  000698  D004               	goto	l6732
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;doprnt.c: 1150: width--;
  5914  00069A  0100               	movlb	0	; () banked
  5915  00069C  07E4               	decf	printf@width& (0+255),f,b
  5916  00069E  A0D8               	btfss	status,0,c
  5917  0006A0  07E5               	decf	(printf@width+1)& (0+255),f,b
  5918  0006A2                     l6732:
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;doprnt.c: 1153: if(flag & 0x04) {
  5922  0006A2  0100               	movlb	0	; () banked
  5923  0006A4  A5E6               	btfss	printf@flag& (0+255),2,b
  5924  0006A6  D02D               	goto	l6748
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;doprnt.c: 1157: if(flag & 0x03)
  5928  0006A8  0E03               	movlw	3
  5929  0006AA  0100               	movlb	0	; () banked
  5930  0006AC  15E6               	andwf	printf@flag& (0+255),w,b
  5931  0006AE  0100               	movlb	0	; () banked
  5932  0006B0  6FC7               	movwf	??_printf& (0+255),b
  5933  0006B2  0E00               	movlw	0
  5934  0006B4  0100               	movlb	0	; () banked
  5935  0006B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  5936  0006B8  0100               	movlb	0	; () banked
  5937  0006BA  6FC8               	movwf	(??_printf+1)& (0+255),b
  5938  0006BC  0100               	movlb	0	; () banked
  5939  0006BE  51C7               	movf	??_printf& (0+255),w,b
  5940  0006C0  0100               	movlb	0	; () banked
  5941  0006C2  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  5942  0006C4  B4D8               	btfsc	status,2,c
  5943  0006C6  D00B               	goto	l6742
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;doprnt.c: 1159: (putch('-') );
  5947  0006C8  0E2D               	movlw	45
  5948  0006CA  ECE9  F01D         	call	_putch
  5949                           
  5950                           ;doprnt.c: 1168: while(width > 0) {
  5951  0006CE  D007               	goto	l6742
  5952  0006D0                     l6738:
  5953                           
  5954                           ;doprnt.c: 1169: (putch('0') );
  5955  0006D0  0E30               	movlw	48
  5956  0006D2  ECE9  F01D         	call	_putch
  5957                           
  5958                           ;doprnt.c: 1170: width--;
  5959  0006D6  0100               	movlb	0	; () banked
  5960  0006D8  07E4               	decf	printf@width& (0+255),f,b
  5961  0006DA  A0D8               	btfss	status,0,c
  5962  0006DC  07E5               	decf	(printf@width+1)& (0+255),f,b
  5963  0006DE                     l6742:
  5964  0006DE  0100               	movlb	0	; () banked
  5965  0006E0  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  5966  0006E2  D073               	goto	l6760
  5967  0006E4  0100               	movlb	0	; () banked
  5968  0006E6  51E5               	movf	(printf@width+1)& (0+255),w,b
  5969  0006E8  E1F3               	bnz	l6738
  5970  0006EA  0100               	movlb	0	; () banked
  5971  0006EC  05E4               	decf	printf@width& (0+255),w,b
  5972  0006EE  A0D8               	btfss	status,0,c
  5973  0006F0  D06C               	goto	l6760
  5974  0006F2  D7EE               	goto	l6738
  5975  0006F4                     l6744:
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;doprnt.c: 1181: (putch(' ') );
  5979  0006F4  0E20               	movlw	32
  5980  0006F6  ECE9  F01D         	call	_putch
  5981                           
  5982                           ;doprnt.c: 1182: width--;
  5983  0006FA  0100               	movlb	0	; () banked
  5984  0006FC  07E4               	decf	printf@width& (0+255),f,b
  5985  0006FE  A0D8               	btfss	status,0,c
  5986  000700  07E5               	decf	(printf@width+1)& (0+255),f,b
  5987  000702                     l6748:
  5988                           
  5989                           ; BSR set to: 0
  5990  000702  0100               	movlb	0	; () banked
  5991  000704  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  5992  000706  D007               	goto	l6750
  5993  000708  0100               	movlb	0	; () banked
  5994  00070A  51E5               	movf	(printf@width+1)& (0+255),w,b
  5995  00070C  E1F3               	bnz	l6744
  5996  00070E  0100               	movlb	0	; () banked
  5997  000710  05E4               	decf	printf@width& (0+255),w,b
  5998  000712  B0D8               	btfsc	status,0,c
  5999  000714  D7EF               	goto	l6744
  6000  000716                     l6750:
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;doprnt.c: 1183: }
  6004                           ;doprnt.c: 1188: if(flag & 0x03)
  6005  000716  0E03               	movlw	3
  6006  000718  0100               	movlb	0	; () banked
  6007  00071A  15E6               	andwf	printf@flag& (0+255),w,b
  6008  00071C  0100               	movlb	0	; () banked
  6009  00071E  6FC7               	movwf	??_printf& (0+255),b
  6010  000720  0E00               	movlw	0
  6011  000722  0100               	movlb	0	; () banked
  6012  000724  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6013  000726  0100               	movlb	0	; () banked
  6014  000728  6FC8               	movwf	(??_printf+1)& (0+255),b
  6015  00072A  0100               	movlb	0	; () banked
  6016  00072C  51C7               	movf	??_printf& (0+255),w,b
  6017  00072E  0100               	movlb	0	; () banked
  6018  000730  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6019  000732  B4D8               	btfsc	status,2,c
  6020  000734  D04A               	goto	l6760
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;doprnt.c: 1190: (putch('-') );
  6024  000736  0E2D               	movlw	45
  6025  000738  ECE9  F01D         	call	_putch
  6026                           
  6027                           ;doprnt.c: 1195: }
  6028                           ;doprnt.c: 1196: while(c--) {
  6029  00073C  D046               	goto	l6760
  6030  00073E                     l6754:
  6031                           
  6032                           ;doprnt.c: 1200: {
  6033                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6034  00073E  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6035  000742  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6036  000746  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6037  00074A  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6038  00074E  0100               	movlb	0	; () banked
  6039  000750  51EA               	movf	printf@c& (0+255),w,b
  6040  000752  0D04               	mullw	4
  6041  000754  0EF1               	movlw	low _dpowers
  6042  000756  24F3               	addwf	prodl,w,c
  6043  000758  6EF6               	movwf	tblptrl,c
  6044  00075A  0EFD               	movlw	high _dpowers
  6045  00075C  20F4               	addwfc	prodh,w,c
  6046  00075E  6EF7               	movwf	tblptrh,c
  6047  000760                     	if	0	;There are less than 3 active tblptr bytes
  6048  000760                     	endif
  6049  000760  0009               	tblrd		*+
  6050  000762  CFF5 F027          	movff	tablat,___lldiv@divisor
  6051  000766  0009               	tblrd		*+
  6052  000768  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6053  00076C  0009               	tblrd		*+
  6054  00076E  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6055  000772  000A               	tblrd		*-
  6056  000774  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6057  000778  ECA2  F019         	call	___lldiv	;wreg free
  6058  00077C  C023  F0D7         	movff	?___lldiv,printf@tmpval
  6059  000780  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  6060  000784  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  6061  000788  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  6062                           
  6063                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6064  00078C  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  6065  000790  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6066  000794  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  6067  000798  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  6068  00079C  0E0A               	movlw	10
  6069  00079E  6E34               	movwf	___llmod@divisor,c
  6070  0007A0  0E00               	movlw	0
  6071  0007A2  6E35               	movwf	___llmod@divisor+1,c
  6072  0007A4  0E00               	movlw	0
  6073  0007A6  6E36               	movwf	___llmod@divisor+2,c
  6074  0007A8  0E00               	movlw	0
  6075  0007AA  6E37               	movwf	___llmod@divisor+3,c
  6076  0007AC  EC06  F01B         	call	___llmod	;wreg free
  6077  0007B0  C030  F0D7         	movff	?___llmod,printf@tmpval
  6078  0007B4  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  6079  0007B8  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  6080  0007BC  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  6081                           
  6082                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6083  0007C0  0100               	movlb	0	; () banked
  6084  0007C2  51D7               	movf	printf@tmpval& (0+255),w,b
  6085  0007C4  0F30               	addlw	48
  6086  0007C6  ECE9  F01D         	call	_putch
  6087  0007CA                     l6760:
  6088  0007CA  0100               	movlb	0	; () banked
  6089  0007CC  07EA               	decf	printf@c& (0+255),f,b
  6090  0007CE  0100               	movlb	0	; () banked
  6091  0007D0  29EA               	incf	printf@c& (0+255),w,b
  6092  0007D2  B4D8               	btfsc	status,2,c
  6093  0007D4  D008               	goto	l6766
  6094  0007D6  D7B3               	goto	l6754
  6095  0007D8                     l6762:
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;doprnt.c: 1208: (putch('0') );
  6099  0007D8  0E30               	movlw	48
  6100  0007DA  ECE9  F01D         	call	_putch
  6101                           
  6102                           ;doprnt.c: 1209: exp--;
  6103  0007DE  0100               	movlb	0	; () banked
  6104  0007E0  07DB               	decf	printf@exp& (0+255),f,b
  6105  0007E2  A0D8               	btfss	status,0,c
  6106  0007E4  07DC               	decf	(printf@exp+1)& (0+255),f,b
  6107  0007E6                     l6766:
  6108                           
  6109                           ; BSR set to: 0
  6110  0007E6  0100               	movlb	0	; () banked
  6111  0007E8  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  6112  0007EA  D007               	goto	l6768
  6113  0007EC  0100               	movlb	0	; () banked
  6114  0007EE  51DC               	movf	(printf@exp+1)& (0+255),w,b
  6115  0007F0  E1F3               	bnz	l6762
  6116  0007F2  0100               	movlb	0	; () banked
  6117  0007F4  05DB               	decf	printf@exp& (0+255),w,b
  6118  0007F6  B0D8               	btfsc	status,0,c
  6119  0007F8  D7EF               	goto	l6762
  6120  0007FA                     l6768:
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;doprnt.c: 1210: }
  6124                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6125  0007FA  0100               	movlb	0	; () banked
  6126  0007FC  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  6127  0007FE  D00C               	goto	l803
  6128  000800  0100               	movlb	0	; () banked
  6129  000802  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6130  000804  E105               	bnz	u6900
  6131  000806  0E09               	movlw	9
  6132  000808  0100               	movlb	0	; () banked
  6133  00080A  5DE8               	subwf	printf@prec& (0+255),w,b
  6134  00080C  A0D8               	btfss	status,0,c
  6135  00080E  D004               	goto	l803
  6136  000810                     u6900:
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6140  000810  0E08               	movlw	8
  6141  000812  0100               	movlb	0	; () banked
  6142  000814  6FEA               	movwf	printf@c& (0+255),b
  6143  000816  D002               	goto	l6772
  6144  000818                     l803:
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;doprnt.c: 1213: else
  6148                           ;doprnt.c: 1214: c = prec;
  6149  000818  C0E8  F0EA         	movff	printf@prec,printf@c
  6150  00081C                     l6772:
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;doprnt.c: 1215: prec -= c;
  6154  00081C  0100               	movlb	0	; () banked
  6155  00081E  51EA               	movf	printf@c& (0+255),w,b
  6156  000820  0100               	movlb	0	; () banked
  6157  000822  5FE8               	subwf	printf@prec& (0+255),f,b
  6158  000824  0E00               	movlw	0
  6159  000826  0100               	movlb	0	; () banked
  6160  000828  BFEA               	btfsc	printf@c& (0+255),7,b
  6161  00082A  0EFF               	movlw	255
  6162  00082C  0100               	movlb	0	; () banked
  6163  00082E  5BE9               	subwfb	(printf@prec+1)& (0+255),f,b
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;doprnt.c: 1219: if(c)
  6167  000830  0100               	movlb	0	; () banked
  6168  000832  51EA               	movf	printf@c& (0+255),w,b
  6169  000834  0100               	movlb	0	; () banked
  6170  000836  B4D8               	btfsc	status,2,c
  6171  000838  D003               	goto	l6778
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;doprnt.c: 1221: (putch('.') );
  6175  00083A  0E2E               	movlw	46
  6176  00083C  ECE9  F01D         	call	_putch
  6177  000840                     l6778:
  6178                           
  6179                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6180  000840  0100               	movlb	0	; () banked
  6181  000842  51EA               	movf	printf@c& (0+255),w,b
  6182  000844  ECB3  F009         	call	_scale
  6183  000848  C098  F0CD         	movff	?_scale,_printf$1402
  6184  00084C  C099  F0CE         	movff	?_scale+1,_printf$1402+1
  6185  000850  C09A  F0CF         	movff	?_scale+2,_printf$1402+2
  6186                           
  6187                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6188  000854  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  6189  000858  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  6190  00085C  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  6191  000860  C0CD  F089         	movff	_printf$1402,___ftmul@f1
  6192  000864  C0CE  F08A         	movff	_printf$1402+1,___ftmul@f1+1
  6193  000868  C0CF  F08B         	movff	_printf$1402+2,___ftmul@f1+2
  6194  00086C  EC7D  F00F         	call	___ftmul	;wreg free
  6195  000870  C089  F0AE         	movff	?___ftmul,___fttol@f1
  6196  000874  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  6197  000878  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  6198  00087C  ECD8  F010         	call	___fttol	;wreg free
  6199  000880  C0AE  F0E0         	movff	?___fttol,printf@val
  6200  000884  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  6201  000888  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  6202  00088C  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  6203                           
  6204                           ;doprnt.c: 1228: while(c--) {
  6205  000890  D06D               	goto	l6788
  6206  000892                     l6782:
  6207                           
  6208                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6209  000892  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6210  000896  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6211  00089A  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6212  00089E  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6213  0008A2  0100               	movlb	0	; () banked
  6214  0008A4  51EA               	movf	printf@c& (0+255),w,b
  6215  0008A6  0D04               	mullw	4
  6216  0008A8  0EF1               	movlw	low _dpowers
  6217  0008AA  24F3               	addwf	prodl,w,c
  6218  0008AC  6EF6               	movwf	tblptrl,c
  6219  0008AE  0EFD               	movlw	high _dpowers
  6220  0008B0  20F4               	addwfc	prodh,w,c
  6221  0008B2  6EF7               	movwf	tblptrh,c
  6222  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  6223  0008B4                     	endif
  6224  0008B4  0009               	tblrd		*+
  6225  0008B6  CFF5 F027          	movff	tablat,___lldiv@divisor
  6226  0008BA  0009               	tblrd		*+
  6227  0008BC  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6228  0008C0  0009               	tblrd		*+
  6229  0008C2  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6230  0008C6  000A               	tblrd		*-
  6231  0008C8  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6232  0008CC  ECA2  F019         	call	___lldiv	;wreg free
  6233  0008D0  C023  F0D7         	movff	?___lldiv,printf@tmpval
  6234  0008D4  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  6235  0008D8  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  6236  0008DC  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  6237                           
  6238                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6239  0008E0  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  6240  0008E4  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6241  0008E8  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  6242  0008EC  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  6243  0008F0  0E0A               	movlw	10
  6244  0008F2  6E34               	movwf	___llmod@divisor,c
  6245  0008F4  0E00               	movlw	0
  6246  0008F6  6E35               	movwf	___llmod@divisor+1,c
  6247  0008F8  0E00               	movlw	0
  6248  0008FA  6E36               	movwf	___llmod@divisor+2,c
  6249  0008FC  0E00               	movlw	0
  6250  0008FE  6E37               	movwf	___llmod@divisor+3,c
  6251  000900  EC06  F01B         	call	___llmod	;wreg free
  6252  000904  C030  F0D7         	movff	?___llmod,printf@tmpval
  6253  000908  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  6254  00090C  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  6255  000910  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  6256                           
  6257                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6258  000914  0100               	movlb	0	; () banked
  6259  000916  51D7               	movf	printf@tmpval& (0+255),w,b
  6260  000918  0F30               	addlw	48
  6261  00091A  ECE9  F01D         	call	_putch
  6262                           
  6263                           ;doprnt.c: 1232: val %= dpowers[c];
  6264  00091E  C0E0  F030         	movff	printf@val,___llmod@dividend
  6265  000922  C0E1  F031         	movff	printf@val+1,___llmod@dividend+1
  6266  000926  C0E2  F032         	movff	printf@val+2,___llmod@dividend+2
  6267  00092A  C0E3  F033         	movff	printf@val+3,___llmod@dividend+3
  6268  00092E  0100               	movlb	0	; () banked
  6269  000930  51EA               	movf	printf@c& (0+255),w,b
  6270  000932  0D04               	mullw	4
  6271  000934  0EF1               	movlw	low _dpowers
  6272  000936  24F3               	addwf	prodl,w,c
  6273  000938  6EF6               	movwf	tblptrl,c
  6274  00093A  0EFD               	movlw	high _dpowers
  6275  00093C  20F4               	addwfc	prodh,w,c
  6276  00093E  6EF7               	movwf	tblptrh,c
  6277  000940                     	if	0	;There are less than 3 active tblptr bytes
  6278  000940                     	endif
  6279  000940  0009               	tblrd		*+
  6280  000942  CFF5 F034          	movff	tablat,___llmod@divisor
  6281  000946  0009               	tblrd		*+
  6282  000948  CFF5 F035          	movff	tablat,___llmod@divisor+1
  6283  00094C  0009               	tblrd		*+
  6284  00094E  CFF5 F036          	movff	tablat,___llmod@divisor+2
  6285  000952  000A               	tblrd		*-
  6286  000954  CFF5 F037          	movff	tablat,___llmod@divisor+3
  6287  000958  EC06  F01B         	call	___llmod	;wreg free
  6288  00095C  C030  F0E0         	movff	?___llmod,printf@val
  6289  000960  C031  F0E1         	movff	?___llmod+1,printf@val+1
  6290  000964  C032  F0E2         	movff	?___llmod+2,printf@val+2
  6291  000968  C033  F0E3         	movff	?___llmod+3,printf@val+3
  6292  00096C                     l6788:
  6293  00096C  0100               	movlb	0	; () banked
  6294  00096E  07EA               	decf	printf@c& (0+255),f,b
  6295  000970  0100               	movlb	0	; () banked
  6296  000972  29EA               	incf	printf@c& (0+255),w,b
  6297  000974  B4D8               	btfsc	status,2,c
  6298  000976  D008               	goto	l6794
  6299  000978  D78C               	goto	l6782
  6300  00097A                     l6790:
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;doprnt.c: 1236: (putch('0') );
  6304  00097A  0E30               	movlw	48
  6305  00097C  ECE9  F01D         	call	_putch
  6306                           
  6307                           ;doprnt.c: 1237: prec--;
  6308  000980  0100               	movlb	0	; () banked
  6309  000982  07E8               	decf	printf@prec& (0+255),f,b
  6310  000984  A0D8               	btfss	status,0,c
  6311  000986  07E9               	decf	(printf@prec+1)& (0+255),f,b
  6312  000988                     l6794:
  6313                           
  6314                           ; BSR set to: 0
  6315  000988  0100               	movlb	0	; () banked
  6316  00098A  51E8               	movf	printf@prec& (0+255),w,b
  6317  00098C  0100               	movlb	0	; () banked
  6318  00098E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6319  000990  B4D8               	btfsc	status,2,c
  6320  000992  D22B               	goto	l6922
  6321  000994  D7F2               	goto	l6790
  6322  000996                     l763:
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;doprnt.c: 1246: }
  6326                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6327  000996  0100               	movlb	0	; () banked
  6328  000998  BFE6               	btfsc	printf@flag& (0+255),7,b
  6329  00099A  D034               	goto	l812
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;doprnt.c: 1253: {
  6333                           ;doprnt.c: 1255: if(flag & 0x10)
  6334  00099C  0100               	movlb	0	; () banked
  6335  00099E  A9E6               	btfss	printf@flag& (0+255),4,b
  6336  0009A0  D00E               	goto	l6802
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  6340  0009A2  C0D5  FFD9         	movff	printf@ap,fsr2l
  6341  0009A6  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6342  0009AA  CFDE F0E0          	movff	postinc2,printf@val
  6343  0009AE  CFDE F0E1          	movff	postinc2,printf@val+1
  6344  0009B2  CFDE F0E2          	movff	postinc2,printf@val+2
  6345  0009B6  CFDE F0E3          	movff	postinc2,printf@val+3
  6346                           
  6347                           ; BSR set to: 0
  6348  0009BA  0E04               	movlw	4
  6349  0009BC  D00F               	goto	L2
  6350  0009BE                     l6802:
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;doprnt.c: 1257: else
  6354                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6355  0009BE  C0D5  FFD9         	movff	printf@ap,fsr2l
  6356  0009C2  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6357  0009C6  CFDE F0E0          	movff	postinc2,printf@val
  6358  0009CA  CFDD F0E1          	movff	postdec2,printf@val+1
  6359  0009CE  0100               	movlb	0	; () banked
  6360  0009D0  0E00               	movlw	0
  6361  0009D2  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  6362  0009D4  0EFF               	movlw	-1
  6363  0009D6  6FE2               	movwf	(printf@val+2)& (0+255),b
  6364  0009D8  6FE3               	movwf	(printf@val+3)& (0+255),b
  6365                           
  6366                           ; BSR set to: 0
  6367  0009DA  0E02               	movlw	2
  6368  0009DC                     L2:
  6369  0009DC  0100               	movlb	0	; () banked
  6370  0009DE  27D5               	addwf	printf@ap& (0+255),f,b
  6371  0009E0  0E00               	movlw	0
  6372  0009E2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;doprnt.c: 1261: if((long)val < 0) {
  6376                           
  6377                           ; BSR set to: 0
  6378  0009E4  0100               	movlb	0	; () banked
  6379  0009E6  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  6380  0009E8  D032               	goto	l6820
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;doprnt.c: 1262: flag |= 0x03;
  6384  0009EA  0E03               	movlw	3
  6385  0009EC  0100               	movlb	0	; () banked
  6386  0009EE  13E6               	iorwf	printf@flag& (0+255),f,b
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;doprnt.c: 1263: val = -val;
  6390  0009F0  0100               	movlb	0	; () banked
  6391  0009F2  1FE3               	comf	(printf@val+3)& (0+255),f,b
  6392  0009F4  1FE2               	comf	(printf@val+2)& (0+255),f,b
  6393  0009F6  1FE1               	comf	(printf@val+1)& (0+255),f,b
  6394  0009F8  6DE0               	negf	printf@val& (0+255),b
  6395  0009FA  0E00               	movlw	0
  6396  0009FC  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  6397  0009FE  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  6398  000A00  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;doprnt.c: 1264: }
  6402                           ;doprnt.c: 1266: }
  6403  000A02  D025               	goto	l6820
  6404  000A04                     l812:
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;doprnt.c: 1268: else
  6408                           ;doprnt.c: 1273: {
  6409                           ;doprnt.c: 1281: if(flag & 0x10)
  6410  000A04  0100               	movlb	0	; () banked
  6411  000A06  A9E6               	btfss	printf@flag& (0+255),4,b
  6412  000A08  D00E               	goto	l6816
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6416  000A0A  C0D5  FFD9         	movff	printf@ap,fsr2l
  6417  000A0E  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6418  000A12  CFDE F0E0          	movff	postinc2,printf@val
  6419  000A16  CFDE F0E1          	movff	postinc2,printf@val+1
  6420  000A1A  CFDE F0E2          	movff	postinc2,printf@val+2
  6421  000A1E  CFDE F0E3          	movff	postinc2,printf@val+3
  6422                           
  6423                           ; BSR set to: 0
  6424  000A22  0E04               	movlw	4
  6425  000A24  D010               	goto	L3
  6426  000A26                     l6816:
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;doprnt.c: 1283: else
  6430                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6431  000A26  C0D5  FFD9         	movff	printf@ap,fsr2l
  6432  000A2A  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6433  000A2E  CFDE F0C7          	movff	postinc2,??_printf
  6434  000A32  CFDD F0C8          	movff	postdec2,??_printf+1
  6435  000A36  C0C7  F0E0         	movff	??_printf,printf@val
  6436  000A3A  C0C8  F0E1         	movff	??_printf+1,printf@val+1
  6437  000A3E  0100               	movlb	0	; () banked
  6438  000A40  6BE2               	clrf	(printf@val+2)& (0+255),b
  6439  000A42  6BE3               	clrf	(printf@val+3)& (0+255),b
  6440                           
  6441                           ; BSR set to: 0
  6442  000A44  0E02               	movlw	2
  6443  000A46                     L3:
  6444  000A46  0100               	movlb	0	; () banked
  6445  000A48  27D5               	addwf	printf@ap& (0+255),f,b
  6446  000A4A  0E00               	movlw	0
  6447  000A4C  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6448  000A4E                     l6820:
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;doprnt.c: 1287: }
  6452                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6453  000A4E  0100               	movlb	0	; () banked
  6454  000A50  51E8               	movf	printf@prec& (0+255),w,b
  6455  000A52  0100               	movlb	0	; () banked
  6456  000A54  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6457  000A56  A4D8               	btfss	status,2,c
  6458  000A58  D05A               	goto	l6856
  6459                           
  6460                           ; BSR set to: 0
  6461  000A5A  0100               	movlb	0	; () banked
  6462  000A5C  51E0               	movf	printf@val& (0+255),w,b
  6463  000A5E  0100               	movlb	0	; () banked
  6464  000A60  11E1               	iorwf	(printf@val+1)& (0+255),w,b
  6465  000A62  0100               	movlb	0	; () banked
  6466  000A64  11E2               	iorwf	(printf@val+2)& (0+255),w,b
  6467  000A66  0100               	movlb	0	; () banked
  6468  000A68  11E3               	iorwf	(printf@val+3)& (0+255),w,b
  6469  000A6A  A4D8               	btfss	status,2,c
  6470  000A6C  D050               	goto	l6856
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;doprnt.c: 1291: prec++;
  6474  000A6E  0100               	movlb	0	; () banked
  6475  000A70  4BE8               	infsnz	printf@prec& (0+255),f,b
  6476  000A72  2BE9               	incf	(printf@prec+1)& (0+255),f,b
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6480  000A74  D04C               	goto	l6856
  6481  000A76                     l6826:
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6485  000A76  0E01               	movlw	1
  6486  000A78  0100               	movlb	0	; () banked
  6487  000A7A  6FEA               	movwf	printf@c& (0+255),b
  6488  000A7C                     l6828:
  6489                           
  6490                           ; BSR set to: 0
  6491  000A7C  0E0A               	movlw	10
  6492  000A7E  0100               	movlb	0	; () banked
  6493  000A80  19EA               	xorwf	printf@c& (0+255),w,b
  6494  000A82  B4D8               	btfsc	status,2,c
  6495  000A84  D04D               	goto	l6858
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;doprnt.c: 1306: if(val < dpowers[c])
  6499                           
  6500                           ; BSR set to: 0
  6501                           
  6502                           ; BSR set to: 0
  6503  000A86  0100               	movlb	0	; () banked
  6504  000A88  51EA               	movf	printf@c& (0+255),w,b
  6505  000A8A  0D04               	mullw	4
  6506  000A8C  0EF1               	movlw	low _dpowers
  6507  000A8E  24F3               	addwf	prodl,w,c
  6508  000A90  6EF6               	movwf	tblptrl,c
  6509  000A92  0EFD               	movlw	high _dpowers
  6510  000A94  20F4               	addwfc	prodh,w,c
  6511  000A96  6EF7               	movwf	tblptrh,c
  6512  000A98                     	if	0	;There are less than 3 active tblptr bytes
  6513  000A98                     	endif
  6514  000A98  0009               	tblrd		*+
  6515  000A9A  50F5               	movf	tablat,w,c
  6516  000A9C  0100               	movlb	0	; () banked
  6517  000A9E  5DE0               	subwf	printf@val& (0+255),w,b
  6518  000AA0  0009               	tblrd		*+
  6519  000AA2  50F5               	movf	tablat,w,c
  6520  000AA4  0100               	movlb	0	; () banked
  6521  000AA6  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  6522  000AA8  0009               	tblrd		*+
  6523  000AAA  50F5               	movf	tablat,w,c
  6524  000AAC  0100               	movlb	0	; () banked
  6525  000AAE  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  6526  000AB0  0009               	tblrd		*+
  6527  000AB2  50F5               	movf	tablat,w,c
  6528  000AB4  0100               	movlb	0	; () banked
  6529  000AB6  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  6530  000AB8  A0D8               	btfss	status,0,c
  6531  000ABA  D032               	goto	l6858
  6532                           
  6533                           ; BSR set to: 0
  6534                           
  6535                           ; BSR set to: 0
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;doprnt.c: 1307: break;
  6539  000ABC  0100               	movlb	0	; () banked
  6540  000ABE  2BEA               	incf	printf@c& (0+255),f,b
  6541  000AC0  D7DD               	goto	l6828
  6542  000AC2                     l6840:
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6546  000AC2  0E01               	movlw	1
  6547  000AC4  0100               	movlb	0	; () banked
  6548  000AC6  6FEA               	movwf	printf@c& (0+255),b
  6549  000AC8                     l6842:
  6550                           
  6551                           ; BSR set to: 0
  6552  000AC8  0E08               	movlw	8
  6553  000ACA  0100               	movlb	0	; () banked
  6554  000ACC  19EA               	xorwf	printf@c& (0+255),w,b
  6555  000ACE  B4D8               	btfsc	status,2,c
  6556  000AD0  D027               	goto	l6858
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6560                           
  6561                           ; BSR set to: 0
  6562                           
  6563                           ; BSR set to: 0
  6564  000AD2  0100               	movlb	0	; () banked
  6565  000AD4  51EA               	movf	printf@c& (0+255),w,b
  6566  000AD6  0D04               	mullw	4
  6567  000AD8  0E67               	movlw	low _hexpowers
  6568  000ADA  24F3               	addwf	prodl,w,c
  6569  000ADC  6EF6               	movwf	tblptrl,c
  6570  000ADE  0EFE               	movlw	high _hexpowers
  6571  000AE0  20F4               	addwfc	prodh,w,c
  6572  000AE2  6EF7               	movwf	tblptrh,c
  6573  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  6574  000AE4                     	endif
  6575  000AE4  0009               	tblrd		*+
  6576  000AE6  50F5               	movf	tablat,w,c
  6577  000AE8  0100               	movlb	0	; () banked
  6578  000AEA  5DE0               	subwf	printf@val& (0+255),w,b
  6579  000AEC  0009               	tblrd		*+
  6580  000AEE  50F5               	movf	tablat,w,c
  6581  000AF0  0100               	movlb	0	; () banked
  6582  000AF2  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  6583  000AF4  0009               	tblrd		*+
  6584  000AF6  50F5               	movf	tablat,w,c
  6585  000AF8  0100               	movlb	0	; () banked
  6586  000AFA  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  6587  000AFC  0009               	tblrd		*+
  6588  000AFE  50F5               	movf	tablat,w,c
  6589  000B00  0100               	movlb	0	; () banked
  6590  000B02  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  6591  000B04  A0D8               	btfss	status,0,c
  6592  000B06  D00C               	goto	l6858
  6593                           
  6594                           ; BSR set to: 0
  6595                           
  6596                           ; BSR set to: 0
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;doprnt.c: 1318: break;
  6600  000B08  0100               	movlb	0	; () banked
  6601  000B0A  2BEA               	incf	printf@c& (0+255),f,b
  6602  000B0C  D7DD               	goto	l6842
  6603  000B0E                     l6856:
  6604                           
  6605                           ; BSR set to: 0
  6606  000B0E  0100               	movlb	0	; () banked
  6607  000B10  51E6               	movf	printf@flag& (0+255),w,b
  6608  000B12  0B80               	andlw	128
  6609                           
  6610                           ; Switch size 1, requested type "space"
  6611                           ; Number of cases is 2, Range of values is 0 to 128
  6612                           ; switch strategies available:
  6613                           ; Name         Instructions Cycles
  6614                           ; simple_byte            7     4 (average)
  6615                           ;	Chosen strategy is simple_byte
  6616  000B14  0A00               	xorlw	0	; case 0
  6617  000B16  B4D8               	btfsc	status,2,c
  6618  000B18  D7AE               	goto	l6826
  6619  000B1A  0A80               	xorlw	128	; case 128
  6620  000B1C  B4D8               	btfsc	status,2,c
  6621  000B1E  D7D1               	goto	l6840
  6622  000B20                     l6858:
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;doprnt.c: 1339: if(c < prec)
  6626  000B20  0E80               	movlw	128
  6627  000B22  0100               	movlb	0	; () banked
  6628  000B24  BFEA               	btfsc	printf@c& (0+255),7,b
  6629  000B26  0E7F               	movlw	127
  6630  000B28  0100               	movlb	0	; () banked
  6631  000B2A  6FC7               	movwf	??_printf& (0+255),b
  6632  000B2C  0100               	movlb	0	; () banked
  6633  000B2E  51E8               	movf	printf@prec& (0+255),w,b
  6634  000B30  0100               	movlb	0	; () banked
  6635  000B32  5DEA               	subwf	printf@c& (0+255),w,b
  6636  000B34  0100               	movlb	0	; () banked
  6637  000B36  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6638  000B38  0A80               	xorlw	128
  6639  000B3A  0100               	movlb	0	; () banked
  6640  000B3C  59C7               	subwfb	??_printf& (0+255),w,b
  6641  000B3E  B0D8               	btfsc	status,0,c
  6642  000B40  D003               	goto	l6862
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;doprnt.c: 1340: c = prec;
  6646  000B42  C0E8  F0EA         	movff	printf@prec,printf@c
  6647  000B46  D018               	goto	l6866
  6648  000B48                     l6862:
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;doprnt.c: 1341: else if(prec < c)
  6652  000B48  0100               	movlb	0	; () banked
  6653  000B4A  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6654  000B4C  0A80               	xorlw	128
  6655  000B4E  0100               	movlb	0	; () banked
  6656  000B50  6FC7               	movwf	??_printf& (0+255),b
  6657  000B52  0100               	movlb	0	; () banked
  6658  000B54  51EA               	movf	printf@c& (0+255),w,b
  6659  000B56  0100               	movlb	0	; () banked
  6660  000B58  5DE8               	subwf	printf@prec& (0+255),w,b
  6661  000B5A  0E80               	movlw	128
  6662  000B5C  0100               	movlb	0	; () banked
  6663  000B5E  BFEA               	btfsc	printf@c& (0+255),7,b
  6664  000B60  0E7F               	movlw	127
  6665  000B62  0100               	movlb	0	; () banked
  6666  000B64  59C7               	subwfb	??_printf& (0+255),w,b
  6667  000B66  B0D8               	btfsc	status,0,c
  6668  000B68  D007               	goto	l6866
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;doprnt.c: 1342: prec = c;
  6672  000B6A  0100               	movlb	0	; () banked
  6673  000B6C  51EA               	movf	printf@c& (0+255),w,b
  6674  000B6E  0100               	movlb	0	; () banked
  6675  000B70  6FE8               	movwf	printf@prec& (0+255),b
  6676  000B72  6BE9               	clrf	(printf@prec+1)& (0+255),b
  6677  000B74  BFE8               	btfsc	printf@prec& (0+255),7,b
  6678  000B76  07E9               	decf	(printf@prec+1)& (0+255),f,b
  6679  000B78                     l6866:
  6680                           
  6681                           ; BSR set to: 0
  6682                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6683  000B78  0100               	movlb	0	; () banked
  6684  000B7A  51E4               	movf	printf@width& (0+255),w,b
  6685  000B7C  0100               	movlb	0	; () banked
  6686  000B7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6687  000B80  B4D8               	btfsc	status,2,c
  6688  000B82  D014               	goto	l6872
  6689                           
  6690                           ; BSR set to: 0
  6691  000B84  0E03               	movlw	3
  6692  000B86  0100               	movlb	0	; () banked
  6693  000B88  15E6               	andwf	printf@flag& (0+255),w,b
  6694  000B8A  0100               	movlb	0	; () banked
  6695  000B8C  6FC7               	movwf	??_printf& (0+255),b
  6696  000B8E  0E00               	movlw	0
  6697  000B90  0100               	movlb	0	; () banked
  6698  000B92  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6699  000B94  0100               	movlb	0	; () banked
  6700  000B96  6FC8               	movwf	(??_printf+1)& (0+255),b
  6701  000B98  0100               	movlb	0	; () banked
  6702  000B9A  51C7               	movf	??_printf& (0+255),w,b
  6703  000B9C  0100               	movlb	0	; () banked
  6704  000B9E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6705  000BA0  B4D8               	btfsc	status,2,c
  6706  000BA2  D004               	goto	l6872
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;doprnt.c: 1346: width--;
  6710  000BA4  0100               	movlb	0	; () banked
  6711  000BA6  07E4               	decf	printf@width& (0+255),f,b
  6712  000BA8  A0D8               	btfss	status,0,c
  6713  000BAA  07E5               	decf	(printf@width+1)& (0+255),f,b
  6714  000BAC                     l6872:
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6718  000BAC  0100               	movlb	0	; () banked
  6719  000BAE  ADE7               	btfss	(printf@flag+1)& (0+255),6,b
  6720  000BB0  D01E               	goto	l6880
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;doprnt.c: 1349: if(width > prec)
  6724  000BB2  0100               	movlb	0	; () banked
  6725  000BB4  51E4               	movf	printf@width& (0+255),w,b
  6726  000BB6  0100               	movlb	0	; () banked
  6727  000BB8  5DE8               	subwf	printf@prec& (0+255),w,b
  6728  000BBA  0100               	movlb	0	; () banked
  6729  000BBC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6730  000BBE  0A80               	xorlw	128
  6731  000BC0  0100               	movlb	0	; () banked
  6732  000BC2  6FC7               	movwf	??_printf& (0+255),b
  6733  000BC4  0100               	movlb	0	; () banked
  6734  000BC6  51E5               	movf	(printf@width+1)& (0+255),w,b
  6735  000BC8  0A80               	xorlw	128
  6736  000BCA  0100               	movlb	0	; () banked
  6737  000BCC  59C7               	subwfb	??_printf& (0+255),w,b
  6738  000BCE  B0D8               	btfsc	status,0,c
  6739  000BD0  D009               	goto	l6878
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;doprnt.c: 1350: width -= prec;
  6743  000BD2  0100               	movlb	0	; () banked
  6744  000BD4  51E8               	movf	printf@prec& (0+255),w,b
  6745  000BD6  0100               	movlb	0	; () banked
  6746  000BD8  5FE4               	subwf	printf@width& (0+255),f,b
  6747  000BDA  0100               	movlb	0	; () banked
  6748  000BDC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6749  000BDE  0100               	movlb	0	; () banked
  6750  000BE0  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6751  000BE2  D005               	goto	l6880
  6752  000BE4                     l6878:
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;doprnt.c: 1351: else
  6756                           ;doprnt.c: 1352: width = 0;
  6757  000BE4  0E00               	movlw	0
  6758  000BE6  0100               	movlb	0	; () banked
  6759  000BE8  6FE5               	movwf	(printf@width+1)& (0+255),b
  6760  000BEA  0E00               	movlw	0
  6761  000BEC  6FE4               	movwf	printf@width& (0+255),b
  6762  000BEE                     l6880:
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;doprnt.c: 1353: }
  6766                           ;doprnt.c: 1381: if(width > c)
  6767  000BEE  0E80               	movlw	128
  6768  000BF0  0100               	movlb	0	; () banked
  6769  000BF2  BFEA               	btfsc	printf@c& (0+255),7,b
  6770  000BF4  0E7F               	movlw	127
  6771  000BF6  0100               	movlb	0	; () banked
  6772  000BF8  6FC7               	movwf	??_printf& (0+255),b
  6773  000BFA  0100               	movlb	0	; () banked
  6774  000BFC  51E4               	movf	printf@width& (0+255),w,b
  6775  000BFE  0100               	movlb	0	; () banked
  6776  000C00  5DEA               	subwf	printf@c& (0+255),w,b
  6777  000C02  0100               	movlb	0	; () banked
  6778  000C04  51E5               	movf	(printf@width+1)& (0+255),w,b
  6779  000C06  0A80               	xorlw	128
  6780  000C08  0100               	movlb	0	; () banked
  6781  000C0A  59C7               	subwfb	??_printf& (0+255),w,b
  6782  000C0C  B0D8               	btfsc	status,0,c
  6783  000C0E  D00B               	goto	l6884
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;doprnt.c: 1382: width -= c;
  6787  000C10  0100               	movlb	0	; () banked
  6788  000C12  51EA               	movf	printf@c& (0+255),w,b
  6789  000C14  0100               	movlb	0	; () banked
  6790  000C16  5FE4               	subwf	printf@width& (0+255),f,b
  6791  000C18  0E00               	movlw	0
  6792  000C1A  0100               	movlb	0	; () banked
  6793  000C1C  BFEA               	btfsc	printf@c& (0+255),7,b
  6794  000C1E  0EFF               	movlw	255
  6795  000C20  0100               	movlb	0	; () banked
  6796  000C22  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6797  000C24  D005               	goto	l6886
  6798  000C26                     l6884:
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;doprnt.c: 1383: else
  6802                           ;doprnt.c: 1384: width = 0;
  6803  000C26  0E00               	movlw	0
  6804  000C28  0100               	movlb	0	; () banked
  6805  000C2A  6FE5               	movwf	(printf@width+1)& (0+255),b
  6806  000C2C  0E00               	movlw	0
  6807  000C2E  6FE4               	movwf	printf@width& (0+255),b
  6808  000C30                     l6886:
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;doprnt.c: 1387: if(flag & 0x04) {
  6812  000C30  0100               	movlb	0	; () banked
  6813  000C32  A5E6               	btfss	printf@flag& (0+255),2,b
  6814  000C34  D021               	goto	l6898
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;doprnt.c: 1392: if(flag & 0x03)
  6818  000C36  0E03               	movlw	3
  6819  000C38  0100               	movlb	0	; () banked
  6820  000C3A  15E6               	andwf	printf@flag& (0+255),w,b
  6821  000C3C  0100               	movlb	0	; () banked
  6822  000C3E  6FC7               	movwf	??_printf& (0+255),b
  6823  000C40  0E00               	movlw	0
  6824  000C42  0100               	movlb	0	; () banked
  6825  000C44  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6826  000C46  0100               	movlb	0	; () banked
  6827  000C48  6FC8               	movwf	(??_printf+1)& (0+255),b
  6828  000C4A  0100               	movlb	0	; () banked
  6829  000C4C  51C7               	movf	??_printf& (0+255),w,b
  6830  000C4E  0100               	movlb	0	; () banked
  6831  000C50  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6832  000C52  B4D8               	btfsc	status,2,c
  6833  000C54  D003               	goto	l6892
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;doprnt.c: 1393: (putch('-') );
  6837  000C56  0E2D               	movlw	45
  6838  000C58  ECE9  F01D         	call	_putch
  6839  000C5C                     l6892:
  6840                           
  6841                           ;doprnt.c: 1415: if(width)
  6842  000C5C  0100               	movlb	0	; () banked
  6843  000C5E  51E4               	movf	printf@width& (0+255),w,b
  6844  000C60  0100               	movlb	0	; () banked
  6845  000C62  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6846  000C64  B4D8               	btfsc	status,2,c
  6847  000C66  D0B6               	goto	l6920
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;doprnt.c: 1417: (putch('0') );
  6851                           
  6852                           ; BSR set to: 0
  6853                           
  6854                           ;doprnt.c: 1416: do
  6855  000C68  0E30               	movlw	48
  6856  000C6A  ECE9  F01D         	call	_putch
  6857                           
  6858                           ;doprnt.c: 1418: while(--width);
  6859  000C6E  0100               	movlb	0	; () banked
  6860  000C70  07E4               	decf	printf@width& (0+255),f,b
  6861  000C72  A0D8               	btfss	status,0,c
  6862  000C74  07E5               	decf	(printf@width+1)& (0+255),f,b
  6863  000C76  D7F2               	goto	l6892
  6864  000C78                     l6898:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;doprnt.c: 1422: {
  6868                           ;doprnt.c: 1424: if(width
  6869                           ;doprnt.c: 1428: )
  6870  000C78  0100               	movlb	0	; () banked
  6871  000C7A  51E4               	movf	printf@width& (0+255),w,b
  6872  000C7C  0100               	movlb	0	; () banked
  6873  000C7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6874  000C80  B4D8               	btfsc	status,2,c
  6875  000C82  D00D               	goto	l6904
  6876  000C84                     l6900:
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;doprnt.c: 1430: (putch(' ') );
  6880  000C84  0E20               	movlw	32
  6881  000C86  ECE9  F01D         	call	_putch
  6882                           
  6883                           ;doprnt.c: 1431: while(--width);
  6884  000C8A  0100               	movlb	0	; () banked
  6885  000C8C  07E4               	decf	printf@width& (0+255),f,b
  6886  000C8E  A0D8               	btfss	status,0,c
  6887  000C90  07E5               	decf	(printf@width+1)& (0+255),f,b
  6888  000C92  0100               	movlb	0	; () banked
  6889  000C94  51E4               	movf	printf@width& (0+255),w,b
  6890  000C96  0100               	movlb	0	; () banked
  6891  000C98  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  6892  000C9A  A4D8               	btfss	status,2,c
  6893  000C9C  D7F3               	goto	l6900
  6894  000C9E                     l6904:
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;doprnt.c: 1438: if(flag & 0x03)
  6898  000C9E  0E03               	movlw	3
  6899  000CA0  0100               	movlb	0	; () banked
  6900  000CA2  15E6               	andwf	printf@flag& (0+255),w,b
  6901  000CA4  0100               	movlb	0	; () banked
  6902  000CA6  6FC7               	movwf	??_printf& (0+255),b
  6903  000CA8  0E00               	movlw	0
  6904  000CAA  0100               	movlb	0	; () banked
  6905  000CAC  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6906  000CAE  0100               	movlb	0	; () banked
  6907  000CB0  6FC8               	movwf	(??_printf+1)& (0+255),b
  6908  000CB2  0100               	movlb	0	; () banked
  6909  000CB4  51C7               	movf	??_printf& (0+255),w,b
  6910  000CB6  0100               	movlb	0	; () banked
  6911  000CB8  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6912  000CBA  B4D8               	btfsc	status,2,c
  6913  000CBC  D08B               	goto	l6920
  6914                           
  6915                           ; BSR set to: 0
  6916                           ;doprnt.c: 1439: (putch('-') );
  6917  000CBE  0E2D               	movlw	45
  6918  000CC0  ECE9  F01D         	call	_putch
  6919                           
  6920                           ;doprnt.c: 1469: }
  6921                           ;doprnt.c: 1474: while(prec--) {
  6922  000CC4  D087               	goto	l6920
  6923  000CC6                     l6908:
  6924                           
  6925                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6926  000CC6  C0E8  F0C7         	movff	printf@prec,??_printf
  6927  000CCA  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  6928  000CCE  0100               	movlb	0	; () banked
  6929  000CD0  90D8               	bcf	status,0,c
  6930  000CD2  37C7               	rlcf	??_printf& (0+255),f,b
  6931  000CD4  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6932  000CD6  0100               	movlb	0	; () banked
  6933  000CD8  90D8               	bcf	status,0,c
  6934  000CDA  37C7               	rlcf	??_printf& (0+255),f,b
  6935  000CDC  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6936  000CDE  0EF1               	movlw	low _dpowers
  6937  000CE0  0100               	movlb	0	; () banked
  6938  000CE2  25C7               	addwf	??_printf& (0+255),w,b
  6939  000CE4  6EF6               	movwf	tblptrl,c
  6940  000CE6  0EFD               	movlw	high _dpowers
  6941  000CE8  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6942  000CEA  6EF7               	movwf	tblptrh,c
  6943  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  6944  000CEC                     	endif
  6945  000CEC  0009               	tblrd		*+
  6946  000CEE  CFF5 F027          	movff	tablat,___lldiv@divisor
  6947  000CF2  0009               	tblrd		*+
  6948  000CF4  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6949  000CF8  0009               	tblrd		*+
  6950  000CFA  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6951  000CFE  000A               	tblrd		*-
  6952  000D00  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6953  000D04  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6954  000D08  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6955  000D0C  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6956  000D10  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6957  000D14  ECA2  F019         	call	___lldiv	;wreg free
  6958  000D18  C023  F030         	movff	?___lldiv,___llmod@dividend
  6959  000D1C  C024  F031         	movff	?___lldiv+1,___llmod@dividend+1
  6960  000D20  C025  F032         	movff	?___lldiv+2,___llmod@dividend+2
  6961  000D24  C026  F033         	movff	?___lldiv+3,___llmod@dividend+3
  6962  000D28  0E0A               	movlw	10
  6963  000D2A  6E34               	movwf	___llmod@divisor,c
  6964  000D2C  0E00               	movlw	0
  6965  000D2E  6E35               	movwf	___llmod@divisor+1,c
  6966  000D30  0E00               	movlw	0
  6967  000D32  6E36               	movwf	___llmod@divisor+2,c
  6968  000D34  0E00               	movlw	0
  6969  000D36  6E37               	movwf	___llmod@divisor+3,c
  6970  000D38  EC06  F01B         	call	___llmod	;wreg free
  6971  000D3C  5030               	movf	?___llmod,w,c
  6972  000D3E  0F30               	addlw	48
  6973  000D40  0100               	movlb	0	; () banked
  6974  000D42  6FEA               	movwf	printf@c& (0+255),b
  6975                           
  6976                           ;doprnt.c: 1491: break;
  6977  000D44  D043               	goto	l6918
  6978  000D46                     l6910:
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;doprnt.c: 1499: {
  6982                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6983  000D46  C0E0  F023         	movff	printf@val,___lldiv@dividend
  6984  000D4A  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  6985  000D4E  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  6986  000D52  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  6987  000D56  C0E8  F0C7         	movff	printf@prec,??_printf
  6988  000D5A  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  6989  000D5E  0100               	movlb	0	; () banked
  6990  000D60  90D8               	bcf	status,0,c
  6991  000D62  37C7               	rlcf	??_printf& (0+255),f,b
  6992  000D64  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6993  000D66  0100               	movlb	0	; () banked
  6994  000D68  90D8               	bcf	status,0,c
  6995  000D6A  37C7               	rlcf	??_printf& (0+255),f,b
  6996  000D6C  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6997  000D6E  0E67               	movlw	low _hexpowers
  6998  000D70  0100               	movlb	0	; () banked
  6999  000D72  25C7               	addwf	??_printf& (0+255),w,b
  7000  000D74  6EF6               	movwf	tblptrl,c
  7001  000D76  0EFE               	movlw	high _hexpowers
  7002  000D78  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  7003  000D7A  6EF7               	movwf	tblptrh,c
  7004  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  7005  000D7C                     	endif
  7006  000D7C  0009               	tblrd		*+
  7007  000D7E  CFF5 F027          	movff	tablat,___lldiv@divisor
  7008  000D82  0009               	tblrd		*+
  7009  000D84  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7010  000D88  0009               	tblrd		*+
  7011  000D8A  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7012  000D8E  000A               	tblrd		*-
  7013  000D90  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7014  000D94  ECA2  F019         	call	___lldiv	;wreg free
  7015  000D98  5023               	movf	?___lldiv,w,c
  7016  000D9A  0B0F               	andlw	15
  7017  000D9C  0100               	movlb	0	; () banked
  7018  000D9E  6FD0               	movwf	printf@idx& (0+255),b
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7022  000DA0  0100               	movlb	0	; () banked
  7023  000DA2  51D0               	movf	printf@idx& (0+255),w,b
  7024  000DA4  0D01               	mullw	1
  7025  000DA6  0E39               	movlw	low STR_22
  7026  000DA8  24F3               	addwf	prodl,w,c
  7027  000DAA  6EF6               	movwf	tblptrl,c
  7028  000DAC  0EFF               	movlw	high STR_22
  7029  000DAE  20F4               	addwfc	prodh,w,c
  7030  000DB0  6EF7               	movwf	tblptrh,c
  7031  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  7032  000DB2                     	endif
  7033  000DB2  0008               	tblrd		*
  7034  000DB4  CFF5 F0EA          	movff	tablat,printf@c
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;doprnt.c: 1523: }
  7038                           
  7039                           ;doprnt.c: 1508: }
  7040                           ;doprnt.c: 1510: break;
  7041  000DB8  D009               	goto	l6918
  7042  000DBA                     l6916:
  7043  000DBA  0100               	movlb	0	; () banked
  7044  000DBC  51E6               	movf	printf@flag& (0+255),w,b
  7045  000DBE  0B80               	andlw	128
  7046                           
  7047                           ; Switch size 1, requested type "space"
  7048                           ; Number of cases is 2, Range of values is 0 to 128
  7049                           ; switch strategies available:
  7050                           ; Name         Instructions Cycles
  7051                           ; simple_byte            7     4 (average)
  7052                           ;	Chosen strategy is simple_byte
  7053  000DC0  0A00               	xorlw	0	; case 0
  7054  000DC2  B4D8               	btfsc	status,2,c
  7055  000DC4  D780               	goto	l6908
  7056  000DC6  0A80               	xorlw	128	; case 128
  7057  000DC8  B4D8               	btfsc	status,2,c
  7058  000DCA  D7BD               	goto	l6910
  7059  000DCC                     l6918:
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;doprnt.c: 1524: (putch(c) );
  7063  000DCC  0100               	movlb	0	; () banked
  7064  000DCE  51EA               	movf	printf@c& (0+255),w,b
  7065  000DD0  ECE9  F01D         	call	_putch
  7066  000DD4                     l6920:
  7067  000DD4  0100               	movlb	0	; () banked
  7068  000DD6  07E8               	decf	printf@prec& (0+255),f,b
  7069  000DD8  A0D8               	btfss	status,0,c
  7070  000DDA  07E9               	decf	(printf@prec+1)& (0+255),f,b
  7071  000DDC  0100               	movlb	0	; () banked
  7072  000DDE  29E8               	incf	printf@prec& (0+255),w,b
  7073  000DE0  E1EC               	bnz	l6916
  7074  000DE2  0100               	movlb	0	; () banked
  7075  000DE4  29E9               	incf	(printf@prec+1)& (0+255),w,b
  7076  000DE6  A4D8               	btfss	status,2,c
  7077  000DE8  D7E8               	goto	l6916
  7078  000DEA                     l6922:
  7079  000DEA  C0BD  FFF6         	movff	printf@f,tblptrl
  7080  000DEE  C0BE  FFF7         	movff	printf@f+1,tblptrh
  7081  000DF2  0100               	movlb	0	; () banked
  7082  000DF4  4BBD               	infsnz	printf@f& (0+255),f,b
  7083  000DF6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  7084  000DF8                     	if	0	;tblptru may be non-zero
  7085  000DF8                     	endif
  7086  000DF8                     	if	0	;tblptru may be non-zero
  7087  000DF8                     	endif
  7088  000DF8  0008               	tblrd		*
  7089  000DFA  CFF5 F0EA          	movff	tablat,printf@c
  7090  000DFE  0100               	movlb	0	; () banked
  7091  000E00  51EA               	movf	printf@c& (0+255),w,b
  7092  000E02  B4D8               	btfsc	status,2,c
  7093  000E04  0012               	return	
  7094  000E06  EF11  F000         	goto	l6556
  7095  000E0A                     __end_of_printf:
  7096                           	opt stack 0
  7097                           tblptru	equ	0xFF8
  7098                           tblptrh	equ	0xFF7
  7099                           tblptrl	equ	0xFF6
  7100                           tablat	equ	0xFF5
  7101                           prodh	equ	0xFF4
  7102                           prodl	equ	0xFF3
  7103                           intcon	equ	0xFF2
  7104                           postinc0	equ	0xFEE
  7105                           wreg	equ	0xFE8
  7106                           postdec1	equ	0xFE5
  7107                           fsr1l	equ	0xFE1
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           postdec2	equ	0xFDD
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function _scale *****************
  7116 ;; Defined at:
  7117 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  scl             1    wreg     char 
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;  scl             1   30[BANK0 ] char 
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  3   24[BANK0 ] char 
  7124 ;; Registers used:
  7125 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7131 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;Total ram usage:        7 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    5
  7138 ;; This function calls:
  7139 ;;		___awdiv
  7140 ;;		___awmod
  7141 ;;		___ftmul
  7142 ;;		___wmul
  7143 ;; This function is called by:
  7144 ;;		_printf
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text15
  7149  001366                     __ptext15:
  7150                           	opt stack 0
  7151  001366                     _scale:
  7152                           	opt stack 23
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;incstack = 0
  7156                           ;scale@scl stored from wreg
  7157  001366  0100               	movlb	0	; () banked
  7158  001368  6F9E               	movwf	scale@scl& (0+255),b
  7159                           
  7160                           ;doprnt.c: 428: if(scl < 0) {
  7161  00136A  0100               	movlb	0	; () banked
  7162  00136C  AF9E               	btfss	scale@scl& (0+255),7,b
  7163  00136E  D104               	goto	l6230
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;doprnt.c: 429: scl = -scl;
  7167  001370  0100               	movlb	0	; () banked
  7168  001372  6D9E               	negf	scale@scl& (0+255),b
  7169                           
  7170                           ;doprnt.c: 430: if(scl>=110)
  7171  001374  0100               	movlb	0	; () banked
  7172  001376  519E               	movf	scale@scl& (0+255),w,b
  7173  001378  0A80               	xorlw	128
  7174  00137A  0F12               	addlw	-238
  7175  00137C  A0D8               	btfss	status,0,c
  7176  00137E  D094               	goto	l6220
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7180  001380  0E00               	movlw	0
  7181  001382  6E34               	movwf	___wmul@multiplicand+1,c
  7182  001384  0E03               	movlw	3
  7183  001386  6E33               	movwf	___wmul@multiplicand,c
  7184  001388  0E00               	movlw	0
  7185  00138A  6E2C               	movwf	___awdiv@divisor+1,c
  7186  00138C  0E0A               	movlw	10
  7187  00138E  6E2B               	movwf	___awdiv@divisor,c
  7188  001390  0E00               	movlw	0
  7189  001392  6E26               	movwf	___awmod@divisor+1,c
  7190  001394  0E64               	movlw	100
  7191  001396  6E25               	movwf	___awmod@divisor,c
  7192  001398  0100               	movlb	0	; () banked
  7193  00139A  519E               	movf	scale@scl& (0+255),w,b
  7194  00139C  6E23               	movwf	___awmod@dividend,c
  7195  00139E  6A24               	clrf	___awmod@dividend+1,c
  7196  0013A0  BE23               	btfsc	___awmod@dividend,7,c
  7197  0013A2  0624               	decf	___awmod@dividend+1,f,c
  7198  0013A4  EC60  F01A         	call	___awmod	;wreg free
  7199  0013A8  C023  F029         	movff	?___awmod,___awdiv@dividend
  7200  0013AC  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7201  0013B0  EC60  F019         	call	___awdiv	;wreg free
  7202  0013B4  0E09               	movlw	9
  7203  0013B6  2429               	addwf	?___awdiv,w,c
  7204  0013B8  6E31               	movwf	___wmul@multiplier,c
  7205  0013BA  0E00               	movlw	0
  7206  0013BC  202A               	addwfc	?___awdiv+1,w,c
  7207  0013BE  6E32               	movwf	___wmul@multiplier+1,c
  7208  0013C0  ECC4  F01D         	call	___wmul	;wreg free
  7209  0013C4  0E19               	movlw	low __npowers_
  7210  0013C6  2431               	addwf	?___wmul,w,c
  7211  0013C8  6EF6               	movwf	tblptrl,c
  7212  0013CA  0EFE               	movlw	high __npowers_
  7213  0013CC  2032               	addwfc	?___wmul+1,w,c
  7214  0013CE  6EF7               	movwf	tblptrh,c
  7215  0013D0                     	if	0	;There are less than 3 active tblptr bytes
  7216  0013D0                     	endif
  7217  0013D0  0009               	tblrd		*+
  7218  0013D2  CFF5 F08C          	movff	tablat,___ftmul@f2
  7219  0013D6  0009               	tblrd		*+
  7220  0013D8  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7221  0013DC  000A               	tblrd		*-
  7222  0013DE  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7223  0013E2  0E00               	movlw	0
  7224  0013E4  6E2C               	movwf	___awdiv@divisor+1,c
  7225  0013E6  0E64               	movlw	100
  7226  0013E8  6E2B               	movwf	___awdiv@divisor,c
  7227  0013EA  0100               	movlb	0	; () banked
  7228  0013EC  519E               	movf	scale@scl& (0+255),w,b
  7229  0013EE  6E29               	movwf	___awdiv@dividend,c
  7230  0013F0  6A2A               	clrf	___awdiv@dividend+1,c
  7231  0013F2  BE29               	btfsc	___awdiv@dividend,7,c
  7232  0013F4  062A               	decf	___awdiv@dividend+1,f,c
  7233  0013F6  EC60  F019         	call	___awdiv	;wreg free
  7234  0013FA  0E12               	movlw	18
  7235  0013FC  2429               	addwf	?___awdiv,w,c
  7236  0013FE  6E31               	movwf	___wmul@multiplier,c
  7237  001400  0E00               	movlw	0
  7238  001402  202A               	addwfc	?___awdiv+1,w,c
  7239  001404  6E32               	movwf	___wmul@multiplier+1,c
  7240  001406  0E00               	movlw	0
  7241  001408  6E34               	movwf	___wmul@multiplicand+1,c
  7242  00140A  0E03               	movlw	3
  7243  00140C  6E33               	movwf	___wmul@multiplicand,c
  7244  00140E  ECC4  F01D         	call	___wmul	;wreg free
  7245  001412  0E19               	movlw	low __npowers_
  7246  001414  2431               	addwf	?___wmul,w,c
  7247  001416  6EF6               	movwf	tblptrl,c
  7248  001418  0EFE               	movlw	high __npowers_
  7249  00141A  2032               	addwfc	?___wmul+1,w,c
  7250  00141C  6EF7               	movwf	tblptrh,c
  7251  00141E                     	if	0	;There are less than 3 active tblptr bytes
  7252  00141E                     	endif
  7253  00141E  0009               	tblrd		*+
  7254  001420  CFF5 F089          	movff	tablat,___ftmul@f1
  7255  001424  0009               	tblrd		*+
  7256  001426  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7257  00142A  000A               	tblrd		*-
  7258  00142C  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7259  001430  EC7D  F00F         	call	___ftmul	;wreg free
  7260  001434  C089  F09B         	movff	?___ftmul,_scale$1401
  7261  001438  C08A  F09C         	movff	?___ftmul+1,_scale$1401+1
  7262  00143C  C08B  F09D         	movff	?___ftmul+2,_scale$1401+2
  7263                           
  7264                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7265  001440  C09B  F089         	movff	_scale$1401,___ftmul@f1
  7266  001444  C09C  F08A         	movff	_scale$1401+1,___ftmul@f1+1
  7267  001448  C09D  F08B         	movff	_scale$1401+2,___ftmul@f1+2
  7268  00144C  0E00               	movlw	0
  7269  00144E  6E34               	movwf	___wmul@multiplicand+1,c
  7270  001450  0E03               	movlw	3
  7271  001452  6E33               	movwf	___wmul@multiplicand,c
  7272  001454  0E00               	movlw	0
  7273  001456  6E26               	movwf	___awmod@divisor+1,c
  7274  001458  0E0A               	movlw	10
  7275  00145A  6E25               	movwf	___awmod@divisor,c
  7276  00145C  0100               	movlb	0	; () banked
  7277  00145E  519E               	movf	scale@scl& (0+255),w,b
  7278  001460  6E23               	movwf	___awmod@dividend,c
  7279  001462  6A24               	clrf	___awmod@dividend+1,c
  7280  001464  BE23               	btfsc	___awmod@dividend,7,c
  7281  001466  0624               	decf	___awmod@dividend+1,f,c
  7282  001468  EC60  F01A         	call	___awmod	;wreg free
  7283  00146C  C023  F031         	movff	?___awmod,___wmul@multiplier
  7284  001470  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7285  001474  ECC4  F01D         	call	___wmul	;wreg free
  7286  001478  0E19               	movlw	low __npowers_
  7287  00147A  2431               	addwf	?___wmul,w,c
  7288  00147C  6EF6               	movwf	tblptrl,c
  7289  00147E  0EFE               	movlw	high __npowers_
  7290  001480  2032               	addwfc	?___wmul+1,w,c
  7291  001482  6EF7               	movwf	tblptrh,c
  7292  001484                     	if	0	;There are less than 3 active tblptr bytes
  7293  001484                     	endif
  7294  001484  0009               	tblrd		*+
  7295  001486  CFF5 F08C          	movff	tablat,___ftmul@f2
  7296  00148A  0009               	tblrd		*+
  7297  00148C  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7298  001490  000A               	tblrd		*-
  7299  001492  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7300  001496  EC7D  F00F         	call	___ftmul	;wreg free
  7301  00149A  C089  F098         	movff	?___ftmul,?_scale
  7302  00149E  C08A  F099         	movff	?___ftmul+1,?_scale+1
  7303  0014A2  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  7304  0014A6  0012               	return	
  7305  0014A8                     l6220:
  7306                           
  7307                           ;doprnt.c: 432: else if(scl > 10)
  7308  0014A8  0100               	movlb	0	; () banked
  7309  0014AA  519E               	movf	scale@scl& (0+255),w,b
  7310  0014AC  0A80               	xorlw	128
  7311  0014AE  0F75               	addlw	-139
  7312  0014B0  A0D8               	btfss	status,0,c
  7313  0014B2  D04F               	goto	l6226
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7317  0014B4  0E00               	movlw	0
  7318  0014B6  6E2C               	movwf	___awdiv@divisor+1,c
  7319  0014B8  0E0A               	movlw	10
  7320  0014BA  6E2B               	movwf	___awdiv@divisor,c
  7321  0014BC  0100               	movlb	0	; () banked
  7322  0014BE  519E               	movf	scale@scl& (0+255),w,b
  7323  0014C0  6E29               	movwf	___awdiv@dividend,c
  7324  0014C2  6A2A               	clrf	___awdiv@dividend+1,c
  7325  0014C4  BE29               	btfsc	___awdiv@dividend,7,c
  7326  0014C6  062A               	decf	___awdiv@dividend+1,f,c
  7327  0014C8  EC60  F019         	call	___awdiv	;wreg free
  7328  0014CC  0E09               	movlw	9
  7329  0014CE  2429               	addwf	?___awdiv,w,c
  7330  0014D0  6E31               	movwf	___wmul@multiplier,c
  7331  0014D2  0E00               	movlw	0
  7332  0014D4  202A               	addwfc	?___awdiv+1,w,c
  7333  0014D6  6E32               	movwf	___wmul@multiplier+1,c
  7334  0014D8  0E00               	movlw	0
  7335  0014DA  6E34               	movwf	___wmul@multiplicand+1,c
  7336  0014DC  0E03               	movlw	3
  7337  0014DE  6E33               	movwf	___wmul@multiplicand,c
  7338  0014E0  ECC4  F01D         	call	___wmul	;wreg free
  7339  0014E4  0E19               	movlw	low __npowers_
  7340  0014E6  2431               	addwf	?___wmul,w,c
  7341  0014E8  6EF6               	movwf	tblptrl,c
  7342  0014EA  0EFE               	movlw	high __npowers_
  7343  0014EC  2032               	addwfc	?___wmul+1,w,c
  7344  0014EE  6EF7               	movwf	tblptrh,c
  7345  0014F0                     	if	0	;There are less than 3 active tblptr bytes
  7346  0014F0                     	endif
  7347  0014F0  0009               	tblrd		*+
  7348  0014F2  CFF5 F089          	movff	tablat,___ftmul@f1
  7349  0014F6  0009               	tblrd		*+
  7350  0014F8  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7351  0014FC  000A               	tblrd		*-
  7352  0014FE  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7353  001502  0E00               	movlw	0
  7354  001504  6E34               	movwf	___wmul@multiplicand+1,c
  7355  001506  0E03               	movlw	3
  7356  001508  6E33               	movwf	___wmul@multiplicand,c
  7357  00150A  0E00               	movlw	0
  7358  00150C  6E26               	movwf	___awmod@divisor+1,c
  7359  00150E  0E0A               	movlw	10
  7360  001510  6E25               	movwf	___awmod@divisor,c
  7361  001512  0100               	movlb	0	; () banked
  7362  001514  519E               	movf	scale@scl& (0+255),w,b
  7363  001516  6E23               	movwf	___awmod@dividend,c
  7364  001518  6A24               	clrf	___awmod@dividend+1,c
  7365  00151A  BE23               	btfsc	___awmod@dividend,7,c
  7366  00151C  0624               	decf	___awmod@dividend+1,f,c
  7367  00151E  EC60  F01A         	call	___awmod	;wreg free
  7368  001522  C023  F031         	movff	?___awmod,___wmul@multiplier
  7369  001526  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7370  00152A  ECC4  F01D         	call	___wmul	;wreg free
  7371  00152E  0E19               	movlw	low __npowers_
  7372  001530  2431               	addwf	?___wmul,w,c
  7373  001532  6EF6               	movwf	tblptrl,c
  7374  001534  0EFE               	movlw	high __npowers_
  7375  001536  2032               	addwfc	?___wmul+1,w,c
  7376  001538  6EF7               	movwf	tblptrh,c
  7377  00153A                     	if	0	;There are less than 3 active tblptr bytes
  7378  00153A                     	endif
  7379  00153A  0009               	tblrd		*+
  7380  00153C  CFF5 F08C          	movff	tablat,___ftmul@f2
  7381  001540  0009               	tblrd		*+
  7382  001542  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7383  001546  000A               	tblrd		*-
  7384  001548  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7385  00154C  EC7D  F00F         	call	___ftmul	;wreg free
  7386  001550  D7A4               	goto	L4
  7387  001552                     l6226:
  7388                           
  7389                           ;doprnt.c: 434: return _npowers_[scl];
  7390  001552  0100               	movlb	0	; () banked
  7391  001554  519E               	movf	scale@scl& (0+255),w,b
  7392  001556  0D03               	mullw	3
  7393  001558  0E19               	movlw	low __npowers_
  7394  00155A  24F3               	addwf	prodl,w,c
  7395  00155C  6EF6               	movwf	tblptrl,c
  7396  00155E  0EFE               	movlw	high __npowers_
  7397  001560  20F4               	addwfc	prodh,w,c
  7398  001562  6EF7               	movwf	tblptrh,c
  7399  001564                     	if	0	;There are less than 3 active tblptr bytes
  7400  001564                     	endif
  7401  001564  0009               	tblrd		*+
  7402  001566  CFF5 F098          	movff	tablat,?_scale
  7403  00156A  0009               	tblrd		*+
  7404  00156C  CFF5 F099          	movff	tablat,?_scale+1
  7405  001570  000A               	tblrd		*-
  7406  001572  CFF5 F09A          	movff	tablat,?_scale+2
  7407                           
  7408                           ; BSR set to: 0
  7409  001576  0012               	return	
  7410  001578                     l6230:
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;doprnt.c: 435: }
  7414                           ;doprnt.c: 436: if(scl>=110)
  7415  001578  0100               	movlb	0	; () banked
  7416  00157A  519E               	movf	scale@scl& (0+255),w,b
  7417  00157C  0A80               	xorlw	128
  7418  00157E  0F12               	addlw	-238
  7419  001580  A0D8               	btfss	status,0,c
  7420  001582  D094               	goto	l6238
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7424  001584  0E00               	movlw	0
  7425  001586  6E34               	movwf	___wmul@multiplicand+1,c
  7426  001588  0E03               	movlw	3
  7427  00158A  6E33               	movwf	___wmul@multiplicand,c
  7428  00158C  0E00               	movlw	0
  7429  00158E  6E2C               	movwf	___awdiv@divisor+1,c
  7430  001590  0E0A               	movlw	10
  7431  001592  6E2B               	movwf	___awdiv@divisor,c
  7432  001594  0E00               	movlw	0
  7433  001596  6E26               	movwf	___awmod@divisor+1,c
  7434  001598  0E64               	movlw	100
  7435  00159A  6E25               	movwf	___awmod@divisor,c
  7436  00159C  0100               	movlb	0	; () banked
  7437  00159E  519E               	movf	scale@scl& (0+255),w,b
  7438  0015A0  6E23               	movwf	___awmod@dividend,c
  7439  0015A2  6A24               	clrf	___awmod@dividend+1,c
  7440  0015A4  BE23               	btfsc	___awmod@dividend,7,c
  7441  0015A6  0624               	decf	___awmod@dividend+1,f,c
  7442  0015A8  EC60  F01A         	call	___awmod	;wreg free
  7443  0015AC  C023  F029         	movff	?___awmod,___awdiv@dividend
  7444  0015B0  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7445  0015B4  EC60  F019         	call	___awdiv	;wreg free
  7446  0015B8  0E09               	movlw	9
  7447  0015BA  2429               	addwf	?___awdiv,w,c
  7448  0015BC  6E31               	movwf	___wmul@multiplier,c
  7449  0015BE  0E00               	movlw	0
  7450  0015C0  202A               	addwfc	?___awdiv+1,w,c
  7451  0015C2  6E32               	movwf	___wmul@multiplier+1,c
  7452  0015C4  ECC4  F01D         	call	___wmul	;wreg free
  7453  0015C8  0E40               	movlw	low __powers_
  7454  0015CA  2431               	addwf	?___wmul,w,c
  7455  0015CC  6EF6               	movwf	tblptrl,c
  7456  0015CE  0EFE               	movlw	high __powers_
  7457  0015D0  2032               	addwfc	?___wmul+1,w,c
  7458  0015D2  6EF7               	movwf	tblptrh,c
  7459  0015D4                     	if	0	;There are less than 3 active tblptr bytes
  7460  0015D4                     	endif
  7461  0015D4  0009               	tblrd		*+
  7462  0015D6  CFF5 F08C          	movff	tablat,___ftmul@f2
  7463  0015DA  0009               	tblrd		*+
  7464  0015DC  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7465  0015E0  000A               	tblrd		*-
  7466  0015E2  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7467  0015E6  0E00               	movlw	0
  7468  0015E8  6E2C               	movwf	___awdiv@divisor+1,c
  7469  0015EA  0E64               	movlw	100
  7470  0015EC  6E2B               	movwf	___awdiv@divisor,c
  7471  0015EE  0100               	movlb	0	; () banked
  7472  0015F0  519E               	movf	scale@scl& (0+255),w,b
  7473  0015F2  6E29               	movwf	___awdiv@dividend,c
  7474  0015F4  6A2A               	clrf	___awdiv@dividend+1,c
  7475  0015F6  BE29               	btfsc	___awdiv@dividend,7,c
  7476  0015F8  062A               	decf	___awdiv@dividend+1,f,c
  7477  0015FA  EC60  F019         	call	___awdiv	;wreg free
  7478  0015FE  0E12               	movlw	18
  7479  001600  2429               	addwf	?___awdiv,w,c
  7480  001602  6E31               	movwf	___wmul@multiplier,c
  7481  001604  0E00               	movlw	0
  7482  001606  202A               	addwfc	?___awdiv+1,w,c
  7483  001608  6E32               	movwf	___wmul@multiplier+1,c
  7484  00160A  0E00               	movlw	0
  7485  00160C  6E34               	movwf	___wmul@multiplicand+1,c
  7486  00160E  0E03               	movlw	3
  7487  001610  6E33               	movwf	___wmul@multiplicand,c
  7488  001612  ECC4  F01D         	call	___wmul	;wreg free
  7489  001616  0E40               	movlw	low __powers_
  7490  001618  2431               	addwf	?___wmul,w,c
  7491  00161A  6EF6               	movwf	tblptrl,c
  7492  00161C  0EFE               	movlw	high __powers_
  7493  00161E  2032               	addwfc	?___wmul+1,w,c
  7494  001620  6EF7               	movwf	tblptrh,c
  7495  001622                     	if	0	;There are less than 3 active tblptr bytes
  7496  001622                     	endif
  7497  001622  0009               	tblrd		*+
  7498  001624  CFF5 F089          	movff	tablat,___ftmul@f1
  7499  001628  0009               	tblrd		*+
  7500  00162A  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7501  00162E  000A               	tblrd		*-
  7502  001630  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7503  001634  EC7D  F00F         	call	___ftmul	;wreg free
  7504  001638  C089  F09B         	movff	?___ftmul,_scale$1401
  7505  00163C  C08A  F09C         	movff	?___ftmul+1,_scale$1401+1
  7506  001640  C08B  F09D         	movff	?___ftmul+2,_scale$1401+2
  7507                           
  7508                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7509  001644  C09B  F089         	movff	_scale$1401,___ftmul@f1
  7510  001648  C09C  F08A         	movff	_scale$1401+1,___ftmul@f1+1
  7511  00164C  C09D  F08B         	movff	_scale$1401+2,___ftmul@f1+2
  7512  001650  0E00               	movlw	0
  7513  001652  6E34               	movwf	___wmul@multiplicand+1,c
  7514  001654  0E03               	movlw	3
  7515  001656  6E33               	movwf	___wmul@multiplicand,c
  7516  001658  0E00               	movlw	0
  7517  00165A  6E26               	movwf	___awmod@divisor+1,c
  7518  00165C  0E0A               	movlw	10
  7519  00165E  6E25               	movwf	___awmod@divisor,c
  7520  001660  0100               	movlb	0	; () banked
  7521  001662  519E               	movf	scale@scl& (0+255),w,b
  7522  001664  6E23               	movwf	___awmod@dividend,c
  7523  001666  6A24               	clrf	___awmod@dividend+1,c
  7524  001668  BE23               	btfsc	___awmod@dividend,7,c
  7525  00166A  0624               	decf	___awmod@dividend+1,f,c
  7526  00166C  EC60  F01A         	call	___awmod	;wreg free
  7527  001670  C023  F031         	movff	?___awmod,___wmul@multiplier
  7528  001674  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7529  001678  ECC4  F01D         	call	___wmul	;wreg free
  7530  00167C  0E40               	movlw	low __powers_
  7531  00167E  2431               	addwf	?___wmul,w,c
  7532  001680  6EF6               	movwf	tblptrl,c
  7533  001682  0EFE               	movlw	high __powers_
  7534  001684  2032               	addwfc	?___wmul+1,w,c
  7535  001686  6EF7               	movwf	tblptrh,c
  7536  001688                     	if	0	;There are less than 3 active tblptr bytes
  7537  001688                     	endif
  7538  001688  0009               	tblrd		*+
  7539  00168A  CFF5 F08C          	movff	tablat,___ftmul@f2
  7540  00168E  0009               	tblrd		*+
  7541  001690  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7542  001694  000A               	tblrd		*-
  7543  001696  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7544  00169A  EC7D  F00F         	call	___ftmul	;wreg free
  7545  00169E  C089  F098         	movff	?___ftmul,?_scale
  7546  0016A2  C08A  F099         	movff	?___ftmul+1,?_scale+1
  7547  0016A6  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  7548  0016AA  0012               	return	
  7549  0016AC                     l6238:
  7550                           
  7551                           ;doprnt.c: 438: else if(scl > 10)
  7552  0016AC  0100               	movlb	0	; () banked
  7553  0016AE  519E               	movf	scale@scl& (0+255),w,b
  7554  0016B0  0A80               	xorlw	128
  7555  0016B2  0F75               	addlw	-139
  7556  0016B4  A0D8               	btfss	status,0,c
  7557  0016B6  D04F               	goto	l6244
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7561  0016B8  0E00               	movlw	0
  7562  0016BA  6E2C               	movwf	___awdiv@divisor+1,c
  7563  0016BC  0E0A               	movlw	10
  7564  0016BE  6E2B               	movwf	___awdiv@divisor,c
  7565  0016C0  0100               	movlb	0	; () banked
  7566  0016C2  519E               	movf	scale@scl& (0+255),w,b
  7567  0016C4  6E29               	movwf	___awdiv@dividend,c
  7568  0016C6  6A2A               	clrf	___awdiv@dividend+1,c
  7569  0016C8  BE29               	btfsc	___awdiv@dividend,7,c
  7570  0016CA  062A               	decf	___awdiv@dividend+1,f,c
  7571  0016CC  EC60  F019         	call	___awdiv	;wreg free
  7572  0016D0  0E09               	movlw	9
  7573  0016D2  2429               	addwf	?___awdiv,w,c
  7574  0016D4  6E31               	movwf	___wmul@multiplier,c
  7575  0016D6  0E00               	movlw	0
  7576  0016D8  202A               	addwfc	?___awdiv+1,w,c
  7577  0016DA  6E32               	movwf	___wmul@multiplier+1,c
  7578  0016DC  0E00               	movlw	0
  7579  0016DE  6E34               	movwf	___wmul@multiplicand+1,c
  7580  0016E0  0E03               	movlw	3
  7581  0016E2  6E33               	movwf	___wmul@multiplicand,c
  7582  0016E4  ECC4  F01D         	call	___wmul	;wreg free
  7583  0016E8  0E40               	movlw	low __powers_
  7584  0016EA  2431               	addwf	?___wmul,w,c
  7585  0016EC  6EF6               	movwf	tblptrl,c
  7586  0016EE  0EFE               	movlw	high __powers_
  7587  0016F0  2032               	addwfc	?___wmul+1,w,c
  7588  0016F2  6EF7               	movwf	tblptrh,c
  7589  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  7590  0016F4                     	endif
  7591  0016F4  0009               	tblrd		*+
  7592  0016F6  CFF5 F089          	movff	tablat,___ftmul@f1
  7593  0016FA  0009               	tblrd		*+
  7594  0016FC  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  7595  001700  000A               	tblrd		*-
  7596  001702  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  7597  001706  0E00               	movlw	0
  7598  001708  6E34               	movwf	___wmul@multiplicand+1,c
  7599  00170A  0E03               	movlw	3
  7600  00170C  6E33               	movwf	___wmul@multiplicand,c
  7601  00170E  0E00               	movlw	0
  7602  001710  6E26               	movwf	___awmod@divisor+1,c
  7603  001712  0E0A               	movlw	10
  7604  001714  6E25               	movwf	___awmod@divisor,c
  7605  001716  0100               	movlb	0	; () banked
  7606  001718  519E               	movf	scale@scl& (0+255),w,b
  7607  00171A  6E23               	movwf	___awmod@dividend,c
  7608  00171C  6A24               	clrf	___awmod@dividend+1,c
  7609  00171E  BE23               	btfsc	___awmod@dividend,7,c
  7610  001720  0624               	decf	___awmod@dividend+1,f,c
  7611  001722  EC60  F01A         	call	___awmod	;wreg free
  7612  001726  C023  F031         	movff	?___awmod,___wmul@multiplier
  7613  00172A  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  7614  00172E  ECC4  F01D         	call	___wmul	;wreg free
  7615  001732  0E40               	movlw	low __powers_
  7616  001734  2431               	addwf	?___wmul,w,c
  7617  001736  6EF6               	movwf	tblptrl,c
  7618  001738  0EFE               	movlw	high __powers_
  7619  00173A  2032               	addwfc	?___wmul+1,w,c
  7620  00173C  6EF7               	movwf	tblptrh,c
  7621  00173E                     	if	0	;There are less than 3 active tblptr bytes
  7622  00173E                     	endif
  7623  00173E  0009               	tblrd		*+
  7624  001740  CFF5 F08C          	movff	tablat,___ftmul@f2
  7625  001744  0009               	tblrd		*+
  7626  001746  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7627  00174A  000A               	tblrd		*-
  7628  00174C  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7629  001750  EC7D  F00F         	call	___ftmul	;wreg free
  7630  001754  D7A4               	goto	L5
  7631  001756                     l6244:
  7632                           
  7633                           ;doprnt.c: 440: return _powers_[scl];
  7634  001756  0100               	movlb	0	; () banked
  7635  001758  519E               	movf	scale@scl& (0+255),w,b
  7636  00175A  0D03               	mullw	3
  7637  00175C  0E40               	movlw	low __powers_
  7638  00175E  24F3               	addwf	prodl,w,c
  7639  001760  6EF6               	movwf	tblptrl,c
  7640  001762  0EFE               	movlw	high __powers_
  7641  001764  20F4               	addwfc	prodh,w,c
  7642  001766  6EF7               	movwf	tblptrh,c
  7643  001768                     	if	0	;There are less than 3 active tblptr bytes
  7644  001768                     	endif
  7645  001768  0009               	tblrd		*+
  7646  00176A  CFF5 F098          	movff	tablat,?_scale
  7647  00176E  0009               	tblrd		*+
  7648  001770  CFF5 F099          	movff	tablat,?_scale+1
  7649  001774  000A               	tblrd		*-
  7650  001776  CFF5 F09A          	movff	tablat,?_scale+2
  7651  00177A  0012               	return	
  7652  00177C                     __end_of_scale:
  7653                           	opt stack 0
  7654                           tblptru	equ	0xFF8
  7655                           tblptrh	equ	0xFF7
  7656                           tblptrl	equ	0xFF6
  7657                           tablat	equ	0xFF5
  7658                           prodh	equ	0xFF4
  7659                           prodl	equ	0xFF3
  7660                           intcon	equ	0xFF2
  7661                           postinc0	equ	0xFEE
  7662                           wreg	equ	0xFE8
  7663                           postdec1	equ	0xFE5
  7664                           fsr1l	equ	0xFE1
  7665                           indf2	equ	0xFDF
  7666                           postinc2	equ	0xFDE
  7667                           postdec2	equ	0xFDD
  7668                           fsr2h	equ	0xFDA
  7669                           fsr2l	equ	0xFD9
  7670                           status	equ	0xFD8
  7671                           
  7672 ;; *************** function _putch *****************
  7673 ;; Defined at:
  7674 ;;		line 35 in file "lcd.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;  data            1    wreg     unsigned char 
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;  data            1   38[COMRAM] unsigned char 
  7679 ;; Return value:  Size  Location     Type
  7680 ;;                  1    wreg      void 
  7681 ;; Registers used:
  7682 ;;		wreg, status,2, status,0, cstack
  7683 ;; Tracked objects:
  7684 ;;		On entry : 0/0
  7685 ;;		On exit  : 0/0
  7686 ;;		Unchanged: 0/0
  7687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7692 ;;Total ram usage:        1 bytes
  7693 ;; Hardware stack levels used:    1
  7694 ;; Hardware stack levels required when called:    6
  7695 ;; This function calls:
  7696 ;;		_lcdNewline
  7697 ;;		_lcdNibble
  7698 ;; This function is called by:
  7699 ;;		_printf
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           	psect	text16
  7704  003BD2                     __ptext16:
  7705                           	opt stack 0
  7706  003BD2                     _putch:
  7707                           	opt stack 22
  7708                           
  7709                           ;incstack = 0
  7710                           ;putch@data stored from wreg
  7711  003BD2  6E27               	movwf	putch@data,c
  7712                           
  7713                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7714  003BD4  0E0A               	movlw	10
  7715  003BD6  1827               	xorwf	putch@data,w,c
  7716  003BD8  A4D8               	btfss	status,2,c
  7717  003BDA  D003               	goto	l215
  7718  003BDC  EC60  F01E         	call	_lcdNewline	;wreg free
  7719  003BE0  0012               	return	
  7720  003BE2                     l215:
  7721                           
  7722                           ;lcd.c: 37: else
  7723                           ;lcd.c: 38: {
  7724                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7725  003BE2  848C               	bsf	3980,2,c	;volatile
  7726                           
  7727                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7728  003BE4  0E74               	movlw	116
  7729  003BE6                     u8047:
  7730  003BE6  2EE8               	decfsz	wreg,f,c
  7731  003BE8  D7FE               	bra	u8047
  7732  003BEA  D000               	nop2	
  7733                           
  7734                           ;lcd.c: 41: lcdNibble(data);
  7735  003BEC  5027               	movf	putch@data,w,c
  7736  003BEE  EC39  F01B         	call	_lcdNibble
  7737  003BF2  0012               	return	
  7738  003BF4                     __end_of_putch:
  7739                           	opt stack 0
  7740                           tblptru	equ	0xFF8
  7741                           tblptrh	equ	0xFF7
  7742                           tblptrl	equ	0xFF6
  7743                           tablat	equ	0xFF5
  7744                           prodh	equ	0xFF4
  7745                           prodl	equ	0xFF3
  7746                           intcon	equ	0xFF2
  7747                           postinc0	equ	0xFEE
  7748                           wreg	equ	0xFE8
  7749                           postdec1	equ	0xFE5
  7750                           fsr1l	equ	0xFE1
  7751                           indf2	equ	0xFDF
  7752                           postinc2	equ	0xFDE
  7753                           postdec2	equ	0xFDD
  7754                           fsr2h	equ	0xFDA
  7755                           fsr2l	equ	0xFD9
  7756                           status	equ	0xFD8
  7757                           
  7758 ;; *************** function _lcdNewline *****************
  7759 ;; Defined at:
  7760 ;;		line 78 in file "lcd.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;		None
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;		None
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      void 
  7767 ;; Registers used:
  7768 ;;		wreg, status,2, status,0, cstack
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7778 ;;Total ram usage:        0 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; Hardware stack levels required when called:    5
  7781 ;; This function calls:
  7782 ;;		_lcdInst
  7783 ;; This function is called by:
  7784 ;;		_putch
  7785 ;; This function uses a non-reentrant model
  7786 ;;
  7787                           
  7788                           	psect	text17
  7789  003CC0                     __ptext17:
  7790                           	opt stack 0
  7791  003CC0                     _lcdNewline:
  7792                           	opt stack 22
  7793                           
  7794                           ;lcd.c: 79: lcdInst(0b11000000);
  7795                           
  7796                           ;incstack = 0
  7797  003CC0  0EC0               	movlw	192
  7798  003CC2  ECFA  F01D         	call	_lcdInst
  7799  003CC6  0012               	return		;funcret
  7800  003CC8                     __end_of_lcdNewline:
  7801                           	opt stack 0
  7802                           tblptru	equ	0xFF8
  7803                           tblptrh	equ	0xFF7
  7804                           tblptrl	equ	0xFF6
  7805                           tablat	equ	0xFF5
  7806                           prodh	equ	0xFF4
  7807                           prodl	equ	0xFF3
  7808                           intcon	equ	0xFF2
  7809                           postinc0	equ	0xFEE
  7810                           wreg	equ	0xFE8
  7811                           postdec1	equ	0xFE5
  7812                           fsr1l	equ	0xFE1
  7813                           indf2	equ	0xFDF
  7814                           postinc2	equ	0xFDE
  7815                           postdec2	equ	0xFDD
  7816                           fsr2h	equ	0xFDA
  7817                           fsr2l	equ	0xFD9
  7818                           status	equ	0xFD8
  7819                           
  7820 ;; *************** function _isdigit *****************
  7821 ;; Defined at:
  7822 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7823 ;; Parameters:    Size  Location     Type
  7824 ;;  c               1    wreg     unsigned char 
  7825 ;; Auto vars:     Size  Location     Type
  7826 ;;  c               1   36[COMRAM] unsigned char 
  7827 ;; Return value:  Size  Location     Type
  7828 ;;		None               void
  7829 ;; Registers used:
  7830 ;;		wreg, status,2, status,0
  7831 ;; Tracked objects:
  7832 ;;		On entry : 0/0
  7833 ;;		On exit  : 0/0
  7834 ;;		Unchanged: 0/0
  7835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7838 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7839 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;Total ram usage:        3 bytes
  7841 ;; Hardware stack levels used:    1
  7842 ;; Hardware stack levels required when called:    3
  7843 ;; This function calls:
  7844 ;;		Nothing
  7845 ;; This function is called by:
  7846 ;;		_printf
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           	psect	text18
  7851  003C36                     __ptext18:
  7852                           	opt stack 0
  7853  003C36                     _isdigit:
  7854                           	opt stack 25
  7855                           
  7856                           ;incstack = 0
  7857                           ;isdigit@c stored from wreg
  7858  003C36  6E25               	movwf	isdigit@c,c
  7859  003C38  0E00               	movlw	0
  7860  003C3A  6E24               	movwf	_isdigit$1031,c
  7861  003C3C  0E3A               	movlw	58
  7862  003C3E  6025               	cpfslt	isdigit@c,c
  7863  003C40  D005               	goto	l6256
  7864  003C42  0E2F               	movlw	47
  7865  003C44  6425               	cpfsgt	isdigit@c,c
  7866  003C46  D002               	goto	l6256
  7867  003C48  0E01               	movlw	1
  7868  003C4A  6E24               	movwf	_isdigit$1031,c
  7869  003C4C                     l6256:
  7870  003C4C  C024  F023         	movff	_isdigit$1031,??_isdigit
  7871  003C50  3023               	rrcf	??_isdigit,w,c
  7872  003C52  0012               	return	
  7873  003C54                     __end_of_isdigit:
  7874                           	opt stack 0
  7875                           tblptru	equ	0xFF8
  7876                           tblptrh	equ	0xFF7
  7877                           tblptrl	equ	0xFF6
  7878                           tablat	equ	0xFF5
  7879                           prodh	equ	0xFF4
  7880                           prodl	equ	0xFF3
  7881                           intcon	equ	0xFF2
  7882                           postinc0	equ	0xFEE
  7883                           wreg	equ	0xFE8
  7884                           postdec1	equ	0xFE5
  7885                           fsr1l	equ	0xFE1
  7886                           indf2	equ	0xFDF
  7887                           postinc2	equ	0xFDE
  7888                           postdec2	equ	0xFDD
  7889                           fsr2h	equ	0xFDA
  7890                           fsr2l	equ	0xFD9
  7891                           status	equ	0xFD8
  7892                           
  7893 ;; *************** function _fround *****************
  7894 ;; Defined at:
  7895 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;  prec            1    wreg     unsigned char 
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  prec            1   33[BANK0 ] unsigned char 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;                  3   24[BANK0 ] unsigned char 
  7902 ;; Registers used:
  7903 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : 0/0
  7906 ;;		On exit  : 0/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7909 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;Total ram usage:       10 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    5
  7916 ;; This function calls:
  7917 ;;		___awdiv
  7918 ;;		___awmod
  7919 ;;		___ftmul
  7920 ;;		___wmul
  7921 ;; This function is called by:
  7922 ;;		_printf
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           	psect	text19
  7927  001C9A                     __ptext19:
  7928                           	opt stack 0
  7929  001C9A                     _fround:
  7930                           	opt stack 23
  7931                           
  7932                           ;incstack = 0
  7933                           ;fround@prec stored from wreg
  7934  001C9A  0100               	movlb	0	; () banked
  7935  001C9C  6FA1               	movwf	fround@prec& (0+255),b
  7936                           
  7937                           ;doprnt.c: 413: if(prec>=110)
  7938  001C9E  0E6D               	movlw	109
  7939  001CA0  0100               	movlb	0	; () banked
  7940  001CA2  65A1               	cpfsgt	fround@prec& (0+255),b
  7941  001CA4  D0A2               	goto	l6198
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7945  001CA6  0E00               	movlw	0
  7946  001CA8  6E34               	movwf	___wmul@multiplicand+1,c
  7947  001CAA  0E03               	movlw	3
  7948  001CAC  6E33               	movwf	___wmul@multiplicand,c
  7949  001CAE  0E00               	movlw	0
  7950  001CB0  6E2C               	movwf	___awdiv@divisor+1,c
  7951  001CB2  0E0A               	movlw	10
  7952  001CB4  6E2B               	movwf	___awdiv@divisor,c
  7953  001CB6  0E00               	movlw	0
  7954  001CB8  6E26               	movwf	___awmod@divisor+1,c
  7955  001CBA  0E64               	movlw	100
  7956  001CBC  6E25               	movwf	___awmod@divisor,c
  7957  001CBE  C0A1  F023         	movff	fround@prec,___awmod@dividend
  7958  001CC2  6A24               	clrf	___awmod@dividend+1,c
  7959  001CC4  EC60  F01A         	call	___awmod	;wreg free
  7960  001CC8  C023  F029         	movff	?___awmod,___awdiv@dividend
  7961  001CCC  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  7962  001CD0  EC60  F019         	call	___awdiv	;wreg free
  7963  001CD4  0E09               	movlw	9
  7964  001CD6  2429               	addwf	?___awdiv,w,c
  7965  001CD8  6E31               	movwf	___wmul@multiplier,c
  7966  001CDA  0E00               	movlw	0
  7967  001CDC  202A               	addwfc	?___awdiv+1,w,c
  7968  001CDE  6E32               	movwf	___wmul@multiplier+1,c
  7969  001CE0  ECC4  F01D         	call	___wmul	;wreg free
  7970  001CE4  0E19               	movlw	low __npowers_
  7971  001CE6  2431               	addwf	?___wmul,w,c
  7972  001CE8  6EF6               	movwf	tblptrl,c
  7973  001CEA  0EFE               	movlw	high __npowers_
  7974  001CEC  2032               	addwfc	?___wmul+1,w,c
  7975  001CEE  6EF7               	movwf	tblptrh,c
  7976  001CF0                     	if	0	;There are less than 3 active tblptr bytes
  7977  001CF0                     	endif
  7978  001CF0  0009               	tblrd		*+
  7979  001CF2  CFF5 F08C          	movff	tablat,___ftmul@f2
  7980  001CF6  0009               	tblrd		*+
  7981  001CF8  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  7982  001CFC  000A               	tblrd		*-
  7983  001CFE  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  7984  001D02  0E00               	movlw	0
  7985  001D04  6E2C               	movwf	___awdiv@divisor+1,c
  7986  001D06  0E64               	movlw	100
  7987  001D08  6E2B               	movwf	___awdiv@divisor,c
  7988  001D0A  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  7989  001D0E  6A2A               	clrf	___awdiv@dividend+1,c
  7990  001D10  EC60  F019         	call	___awdiv	;wreg free
  7991  001D14  0E12               	movlw	18
  7992  001D16  2429               	addwf	?___awdiv,w,c
  7993  001D18  6E31               	movwf	___wmul@multiplier,c
  7994  001D1A  0E00               	movlw	0
  7995  001D1C  202A               	addwfc	?___awdiv+1,w,c
  7996  001D1E  6E32               	movwf	___wmul@multiplier+1,c
  7997  001D20  0E00               	movlw	0
  7998  001D22  6E34               	movwf	___wmul@multiplicand+1,c
  7999  001D24  0E03               	movlw	3
  8000  001D26  6E33               	movwf	___wmul@multiplicand,c
  8001  001D28  ECC4  F01D         	call	___wmul	;wreg free
  8002  001D2C  0E19               	movlw	low __npowers_
  8003  001D2E  2431               	addwf	?___wmul,w,c
  8004  001D30  6EF6               	movwf	tblptrl,c
  8005  001D32  0EFE               	movlw	high __npowers_
  8006  001D34  2032               	addwfc	?___wmul+1,w,c
  8007  001D36  6EF7               	movwf	tblptrh,c
  8008  001D38                     	if	0	;There are less than 3 active tblptr bytes
  8009  001D38                     	endif
  8010  001D38  0009               	tblrd		*+
  8011  001D3A  CFF5 F089          	movff	tablat,___ftmul@f1
  8012  001D3E  0009               	tblrd		*+
  8013  001D40  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8014  001D44  000A               	tblrd		*-
  8015  001D46  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8016  001D4A  EC7D  F00F         	call	___ftmul	;wreg free
  8017  001D4E  C089  F09E         	movff	?___ftmul,_fround$1399
  8018  001D52  C08A  F09F         	movff	?___ftmul+1,_fround$1399+1
  8019  001D56  C08B  F0A0         	movff	?___ftmul+2,_fround$1399+2
  8020                           
  8021                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8022  001D5A  0E00               	movlw	0
  8023  001D5C  6E34               	movwf	___wmul@multiplicand+1,c
  8024  001D5E  0E03               	movlw	3
  8025  001D60  6E33               	movwf	___wmul@multiplicand,c
  8026  001D62  0E00               	movlw	0
  8027  001D64  6E26               	movwf	___awmod@divisor+1,c
  8028  001D66  0E0A               	movlw	10
  8029  001D68  6E25               	movwf	___awmod@divisor,c
  8030  001D6A  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8031  001D6E  6A24               	clrf	___awmod@dividend+1,c
  8032  001D70  EC60  F01A         	call	___awmod	;wreg free
  8033  001D74  C023  F031         	movff	?___awmod,___wmul@multiplier
  8034  001D78  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8035  001D7C  ECC4  F01D         	call	___wmul	;wreg free
  8036  001D80  0E19               	movlw	low __npowers_
  8037  001D82  2431               	addwf	?___wmul,w,c
  8038  001D84  6EF6               	movwf	tblptrl,c
  8039  001D86  0EFE               	movlw	high __npowers_
  8040  001D88  2032               	addwfc	?___wmul+1,w,c
  8041  001D8A  6EF7               	movwf	tblptrh,c
  8042  001D8C                     	if	0	;There are less than 3 active tblptr bytes
  8043  001D8C                     	endif
  8044  001D8C  0009               	tblrd		*+
  8045  001D8E  CFF5 F08C          	movff	tablat,___ftmul@f2
  8046  001D92  0009               	tblrd		*+
  8047  001D94  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8048  001D98  000A               	tblrd		*-
  8049  001D9A  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8050  001D9E  C09E  F089         	movff	_fround$1399,___ftmul@f1
  8051  001DA2  C09F  F08A         	movff	_fround$1399+1,___ftmul@f1+1
  8052  001DA6  C0A0  F08B         	movff	_fround$1399+2,___ftmul@f1+2
  8053  001DAA  EC7D  F00F         	call	___ftmul	;wreg free
  8054  001DAE  C089  F09B         	movff	?___ftmul,_fround$1400
  8055  001DB2  C08A  F09C         	movff	?___ftmul+1,_fround$1400+1
  8056  001DB6  C08B  F09D         	movff	?___ftmul+2,_fround$1400+2
  8057                           
  8058                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8059  001DBA  C09B  F089         	movff	_fround$1400,___ftmul@f1
  8060  001DBE  C09C  F08A         	movff	_fround$1400+1,___ftmul@f1+1
  8061  001DC2  C09D  F08B         	movff	_fround$1400+2,___ftmul@f1+2
  8062  001DC6  0E00               	movlw	0
  8063  001DC8  0100               	movlb	0	; () banked
  8064  001DCA  6F8C               	movwf	___ftmul@f2& (0+255),b
  8065  001DCC  0E00               	movlw	0
  8066  001DCE  0100               	movlb	0	; () banked
  8067  001DD0  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8068  001DD2  0E3F               	movlw	63
  8069  001DD4  0100               	movlb	0	; () banked
  8070  001DD6  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8071  001DD8  EC7D  F00F         	call	___ftmul	;wreg free
  8072  001DDC  C089  F098         	movff	?___ftmul,?_fround
  8073  001DE0  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8074  001DE4  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8075  001DE8  0012               	return	
  8076  001DEA                     l6198:
  8077                           
  8078                           ;doprnt.c: 415: else if(prec > 10)
  8079  001DEA  0E0A               	movlw	10
  8080  001DEC  0100               	movlb	0	; () banked
  8081  001DEE  65A1               	cpfsgt	fround@prec& (0+255),b
  8082  001DF0  D060               	goto	l6206
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8086  001DF2  0E00               	movlw	0
  8087  001DF4  6E34               	movwf	___wmul@multiplicand+1,c
  8088  001DF6  0E03               	movlw	3
  8089  001DF8  6E33               	movwf	___wmul@multiplicand,c
  8090  001DFA  0E00               	movlw	0
  8091  001DFC  6E26               	movwf	___awmod@divisor+1,c
  8092  001DFE  0E0A               	movlw	10
  8093  001E00  6E25               	movwf	___awmod@divisor,c
  8094  001E02  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8095  001E06  6A24               	clrf	___awmod@dividend+1,c
  8096  001E08  EC60  F01A         	call	___awmod	;wreg free
  8097  001E0C  C023  F031         	movff	?___awmod,___wmul@multiplier
  8098  001E10  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8099  001E14  ECC4  F01D         	call	___wmul	;wreg free
  8100  001E18  0E19               	movlw	low __npowers_
  8101  001E1A  2431               	addwf	?___wmul,w,c
  8102  001E1C  6EF6               	movwf	tblptrl,c
  8103  001E1E  0EFE               	movlw	high __npowers_
  8104  001E20  2032               	addwfc	?___wmul+1,w,c
  8105  001E22  6EF7               	movwf	tblptrh,c
  8106  001E24                     	if	0	;There are less than 3 active tblptr bytes
  8107  001E24                     	endif
  8108  001E24  0009               	tblrd		*+
  8109  001E26  CFF5 F08C          	movff	tablat,___ftmul@f2
  8110  001E2A  0009               	tblrd		*+
  8111  001E2C  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8112  001E30  000A               	tblrd		*-
  8113  001E32  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8114  001E36  0E00               	movlw	0
  8115  001E38  6E2C               	movwf	___awdiv@divisor+1,c
  8116  001E3A  0E0A               	movlw	10
  8117  001E3C  6E2B               	movwf	___awdiv@divisor,c
  8118  001E3E  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  8119  001E42  6A2A               	clrf	___awdiv@dividend+1,c
  8120  001E44  EC60  F019         	call	___awdiv	;wreg free
  8121  001E48  0E09               	movlw	9
  8122  001E4A  2429               	addwf	?___awdiv,w,c
  8123  001E4C  6E31               	movwf	___wmul@multiplier,c
  8124  001E4E  0E00               	movlw	0
  8125  001E50  202A               	addwfc	?___awdiv+1,w,c
  8126  001E52  6E32               	movwf	___wmul@multiplier+1,c
  8127  001E54  0E00               	movlw	0
  8128  001E56  6E34               	movwf	___wmul@multiplicand+1,c
  8129  001E58  0E03               	movlw	3
  8130  001E5A  6E33               	movwf	___wmul@multiplicand,c
  8131  001E5C  ECC4  F01D         	call	___wmul	;wreg free
  8132  001E60  0E19               	movlw	low __npowers_
  8133  001E62  2431               	addwf	?___wmul,w,c
  8134  001E64  6EF6               	movwf	tblptrl,c
  8135  001E66  0EFE               	movlw	high __npowers_
  8136  001E68  2032               	addwfc	?___wmul+1,w,c
  8137  001E6A  6EF7               	movwf	tblptrh,c
  8138  001E6C                     	if	0	;There are less than 3 active tblptr bytes
  8139  001E6C                     	endif
  8140  001E6C  0009               	tblrd		*+
  8141  001E6E  CFF5 F089          	movff	tablat,___ftmul@f1
  8142  001E72  0009               	tblrd		*+
  8143  001E74  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8144  001E78  000A               	tblrd		*-
  8145  001E7A  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8146  001E7E  EC7D  F00F         	call	___ftmul	;wreg free
  8147  001E82  C089  F09E         	movff	?___ftmul,_fround$1399
  8148  001E86  C08A  F09F         	movff	?___ftmul+1,_fround$1399+1
  8149  001E8A  C08B  F0A0         	movff	?___ftmul+2,_fround$1399+2
  8150                           
  8151                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8152  001E8E  C09E  F089         	movff	_fround$1399,___ftmul@f1
  8153  001E92  C09F  F08A         	movff	_fround$1399+1,___ftmul@f1+1
  8154  001E96  C0A0  F08B         	movff	_fround$1399+2,___ftmul@f1+2
  8155  001E9A  0E00               	movlw	0
  8156  001E9C  0100               	movlb	0	; () banked
  8157  001E9E  6F8C               	movwf	___ftmul@f2& (0+255),b
  8158  001EA0  0E00               	movlw	0
  8159  001EA2  0100               	movlb	0	; () banked
  8160  001EA4  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8161  001EA6  0E3F               	movlw	63
  8162  001EA8  0100               	movlb	0	; () banked
  8163  001EAA  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8164  001EAC  EC7D  F00F         	call	___ftmul	;wreg free
  8165  001EB0  D795               	goto	L6
  8166  001EB2                     l6206:
  8167                           
  8168                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8169  001EB2  0100               	movlb	0	; () banked
  8170  001EB4  51A1               	movf	fround@prec& (0+255),w,b
  8171  001EB6  0D03               	mullw	3
  8172  001EB8  0E19               	movlw	low __npowers_
  8173  001EBA  24F3               	addwf	prodl,w,c
  8174  001EBC  6EF6               	movwf	tblptrl,c
  8175  001EBE  0EFE               	movlw	high __npowers_
  8176  001EC0  20F4               	addwfc	prodh,w,c
  8177  001EC2  6EF7               	movwf	tblptrh,c
  8178  001EC4                     	if	0	;There are less than 3 active tblptr bytes
  8179  001EC4                     	endif
  8180  001EC4  0009               	tblrd		*+
  8181  001EC6  CFF5 F089          	movff	tablat,___ftmul@f1
  8182  001ECA  0009               	tblrd		*+
  8183  001ECC  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8184  001ED0  000A               	tblrd		*-
  8185  001ED2  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8186  001ED6  0E00               	movlw	0
  8187  001ED8  0100               	movlb	0	; () banked
  8188  001EDA  6F8C               	movwf	___ftmul@f2& (0+255),b
  8189  001EDC  0E00               	movlw	0
  8190  001EDE  0100               	movlb	0	; () banked
  8191  001EE0  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8192  001EE2  0E3F               	movlw	63
  8193  001EE4  0100               	movlb	0	; () banked
  8194  001EE6  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8195  001EE8  EC7D  F00F         	call	___ftmul	;wreg free
  8196  001EEC  C089  F098         	movff	?___ftmul,?_fround
  8197  001EF0  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8198  001EF4  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8199  001EF8  0012               	return	
  8200  001EFA                     __end_of_fround:
  8201                           	opt stack 0
  8202                           tblptru	equ	0xFF8
  8203                           tblptrh	equ	0xFF7
  8204                           tblptrl	equ	0xFF6
  8205                           tablat	equ	0xFF5
  8206                           prodh	equ	0xFF4
  8207                           prodl	equ	0xFF3
  8208                           intcon	equ	0xFF2
  8209                           postinc0	equ	0xFEE
  8210                           wreg	equ	0xFE8
  8211                           postdec1	equ	0xFE5
  8212                           fsr1l	equ	0xFE1
  8213                           indf2	equ	0xFDF
  8214                           postinc2	equ	0xFDE
  8215                           postdec2	equ	0xFDD
  8216                           fsr2h	equ	0xFDA
  8217                           fsr2l	equ	0xFD9
  8218                           status	equ	0xFD8
  8219                           
  8220 ;; *************** function ___awmod *****************
  8221 ;; Defined at:
  8222 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8223 ;; Parameters:    Size  Location     Type
  8224 ;;  dividend        2   34[COMRAM] int 
  8225 ;;  divisor         2   36[COMRAM] int 
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  sign            1   39[COMRAM] unsigned char 
  8228 ;;  counter         1   38[COMRAM] unsigned char 
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  2   34[COMRAM] int 
  8231 ;; Registers used:
  8232 ;;		wreg, status,2, status,0
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;Total ram usage:        6 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    3
  8245 ;; This function calls:
  8246 ;;		Nothing
  8247 ;; This function is called by:
  8248 ;;		_fround
  8249 ;;		_scale
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253                           	psect	text20
  8254  0034C0                     __ptext20:
  8255                           	opt stack 0
  8256  0034C0                     ___awmod:
  8257                           	opt stack 24
  8258                           
  8259                           ;incstack = 0
  8260  0034C0  0E00               	movlw	0
  8261  0034C2  6E28               	movwf	___awmod@sign,c
  8262  0034C4  AE24               	btfss	___awmod@dividend+1,7,c
  8263  0034C6  D006               	goto	l6096
  8264  0034C8  6C23               	negf	___awmod@dividend,c
  8265  0034CA  1E24               	comf	___awmod@dividend+1,f,c
  8266  0034CC  B0D8               	btfsc	status,0,c
  8267  0034CE  2A24               	incf	___awmod@dividend+1,f,c
  8268  0034D0  0E01               	movlw	1
  8269  0034D2  6E28               	movwf	___awmod@sign,c
  8270  0034D4                     l6096:
  8271  0034D4  AE26               	btfss	___awmod@divisor+1,7,c
  8272  0034D6  D004               	goto	l6100
  8273  0034D8  6C25               	negf	___awmod@divisor,c
  8274  0034DA  1E26               	comf	___awmod@divisor+1,f,c
  8275  0034DC  B0D8               	btfsc	status,0,c
  8276  0034DE  2A26               	incf	___awmod@divisor+1,f,c
  8277  0034E0                     l6100:
  8278  0034E0  5025               	movf	___awmod@divisor,w,c
  8279  0034E2  1026               	iorwf	___awmod@divisor+1,w,c
  8280  0034E4  B4D8               	btfsc	status,2,c
  8281  0034E6  D018               	goto	l6116
  8282  0034E8  0E01               	movlw	1
  8283  0034EA  6E27               	movwf	___awmod@counter,c
  8284  0034EC  D004               	goto	l6106
  8285  0034EE                     l6104:
  8286  0034EE  90D8               	bcf	status,0,c
  8287  0034F0  3625               	rlcf	___awmod@divisor,f,c
  8288  0034F2  3626               	rlcf	___awmod@divisor+1,f,c
  8289  0034F4  2A27               	incf	___awmod@counter,f,c
  8290  0034F6                     l6106:
  8291  0034F6  AE26               	btfss	___awmod@divisor+1,7,c
  8292  0034F8  D7FA               	goto	l6104
  8293  0034FA                     l6108:
  8294  0034FA  5025               	movf	___awmod@divisor,w,c
  8295  0034FC  5C23               	subwf	___awmod@dividend,w,c
  8296  0034FE  5026               	movf	___awmod@divisor+1,w,c
  8297  003500  5824               	subwfb	___awmod@dividend+1,w,c
  8298  003502  A0D8               	btfss	status,0,c
  8299  003504  D004               	goto	l6112
  8300  003506  5025               	movf	___awmod@divisor,w,c
  8301  003508  5E23               	subwf	___awmod@dividend,f,c
  8302  00350A  5026               	movf	___awmod@divisor+1,w,c
  8303  00350C  5A24               	subwfb	___awmod@dividend+1,f,c
  8304  00350E                     l6112:
  8305  00350E  90D8               	bcf	status,0,c
  8306  003510  3226               	rrcf	___awmod@divisor+1,f,c
  8307  003512  3225               	rrcf	___awmod@divisor,f,c
  8308  003514  2E27               	decfsz	___awmod@counter,f,c
  8309  003516  D7F1               	goto	l6108
  8310  003518                     l6116:
  8311  003518  5028               	movf	___awmod@sign,w,c
  8312  00351A  B4D8               	btfsc	status,2,c
  8313  00351C  D004               	goto	l6120
  8314  00351E  6C23               	negf	___awmod@dividend,c
  8315  003520  1E24               	comf	___awmod@dividend+1,f,c
  8316  003522  B0D8               	btfsc	status,0,c
  8317  003524  2A24               	incf	___awmod@dividend+1,f,c
  8318  003526                     l6120:
  8319  003526  C023  F023         	movff	___awmod@dividend,?___awmod
  8320  00352A  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
  8321  00352E  0012               	return	
  8322  003530                     __end_of___awmod:
  8323                           	opt stack 0
  8324                           tblptru	equ	0xFF8
  8325                           tblptrh	equ	0xFF7
  8326                           tblptrl	equ	0xFF6
  8327                           tablat	equ	0xFF5
  8328                           prodh	equ	0xFF4
  8329                           prodl	equ	0xFF3
  8330                           intcon	equ	0xFF2
  8331                           postinc0	equ	0xFEE
  8332                           wreg	equ	0xFE8
  8333                           postdec1	equ	0xFE5
  8334                           fsr1l	equ	0xFE1
  8335                           indf2	equ	0xFDF
  8336                           postinc2	equ	0xFDE
  8337                           postdec2	equ	0xFDD
  8338                           fsr2h	equ	0xFDA
  8339                           fsr2l	equ	0xFD9
  8340                           status	equ	0xFD8
  8341                           
  8342 ;; *************** function ___awdiv *****************
  8343 ;; Defined at:
  8344 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;  dividend        2   40[COMRAM] int 
  8347 ;;  divisor         2   42[COMRAM] int 
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;  quotient        2   46[COMRAM] int 
  8350 ;;  sign            1   45[COMRAM] unsigned char 
  8351 ;;  counter         1   44[COMRAM] unsigned char 
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  2   40[COMRAM] int 
  8354 ;; Registers used:
  8355 ;;		wreg, status,2, status,0
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8362 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;Total ram usage:        8 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    3
  8368 ;; This function calls:
  8369 ;;		Nothing
  8370 ;; This function is called by:
  8371 ;;		_fround
  8372 ;;		_scale
  8373 ;;		_printf
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           	psect	text21
  8378  0032C0                     __ptext21:
  8379                           	opt stack 0
  8380  0032C0                     ___awdiv:
  8381                           	opt stack 24
  8382                           
  8383                           ;incstack = 0
  8384  0032C0  0E00               	movlw	0
  8385  0032C2  6E2E               	movwf	___awdiv@sign,c
  8386  0032C4  AE2C               	btfss	___awdiv@divisor+1,7,c
  8387  0032C6  D006               	goto	l6052
  8388  0032C8  6C2B               	negf	___awdiv@divisor,c
  8389  0032CA  1E2C               	comf	___awdiv@divisor+1,f,c
  8390  0032CC  B0D8               	btfsc	status,0,c
  8391  0032CE  2A2C               	incf	___awdiv@divisor+1,f,c
  8392  0032D0  0E01               	movlw	1
  8393  0032D2  6E2E               	movwf	___awdiv@sign,c
  8394  0032D4                     l6052:
  8395  0032D4  AE2A               	btfss	___awdiv@dividend+1,7,c
  8396  0032D6  D006               	goto	l6058
  8397  0032D8  6C29               	negf	___awdiv@dividend,c
  8398  0032DA  1E2A               	comf	___awdiv@dividend+1,f,c
  8399  0032DC  B0D8               	btfsc	status,0,c
  8400  0032DE  2A2A               	incf	___awdiv@dividend+1,f,c
  8401  0032E0  0E01               	movlw	1
  8402  0032E2  1A2E               	xorwf	___awdiv@sign,f,c
  8403  0032E4                     l6058:
  8404  0032E4  0E00               	movlw	0
  8405  0032E6  6E30               	movwf	___awdiv@quotient+1,c
  8406  0032E8  0E00               	movlw	0
  8407  0032EA  6E2F               	movwf	___awdiv@quotient,c
  8408  0032EC  502B               	movf	___awdiv@divisor,w,c
  8409  0032EE  102C               	iorwf	___awdiv@divisor+1,w,c
  8410  0032F0  B4D8               	btfsc	status,2,c
  8411  0032F2  D01C               	goto	l6080
  8412  0032F4  0E01               	movlw	1
  8413  0032F6  6E2D               	movwf	___awdiv@counter,c
  8414  0032F8  D004               	goto	l6066
  8415  0032FA                     l6064:
  8416  0032FA  90D8               	bcf	status,0,c
  8417  0032FC  362B               	rlcf	___awdiv@divisor,f,c
  8418  0032FE  362C               	rlcf	___awdiv@divisor+1,f,c
  8419  003300  2A2D               	incf	___awdiv@counter,f,c
  8420  003302                     l6066:
  8421  003302  AE2C               	btfss	___awdiv@divisor+1,7,c
  8422  003304  D7FA               	goto	l6064
  8423  003306                     l6068:
  8424  003306  90D8               	bcf	status,0,c
  8425  003308  362F               	rlcf	___awdiv@quotient,f,c
  8426  00330A  3630               	rlcf	___awdiv@quotient+1,f,c
  8427  00330C  502B               	movf	___awdiv@divisor,w,c
  8428  00330E  5C29               	subwf	___awdiv@dividend,w,c
  8429  003310  502C               	movf	___awdiv@divisor+1,w,c
  8430  003312  582A               	subwfb	___awdiv@dividend+1,w,c
  8431  003314  A0D8               	btfss	status,0,c
  8432  003316  D005               	goto	l6076
  8433  003318  502B               	movf	___awdiv@divisor,w,c
  8434  00331A  5E29               	subwf	___awdiv@dividend,f,c
  8435  00331C  502C               	movf	___awdiv@divisor+1,w,c
  8436  00331E  5A2A               	subwfb	___awdiv@dividend+1,f,c
  8437  003320  802F               	bsf	___awdiv@quotient,0,c
  8438  003322                     l6076:
  8439  003322  90D8               	bcf	status,0,c
  8440  003324  322C               	rrcf	___awdiv@divisor+1,f,c
  8441  003326  322B               	rrcf	___awdiv@divisor,f,c
  8442  003328  2E2D               	decfsz	___awdiv@counter,f,c
  8443  00332A  D7ED               	goto	l6068
  8444  00332C                     l6080:
  8445  00332C  502E               	movf	___awdiv@sign,w,c
  8446  00332E  B4D8               	btfsc	status,2,c
  8447  003330  D004               	goto	l6084
  8448  003332  6C2F               	negf	___awdiv@quotient,c
  8449  003334  1E30               	comf	___awdiv@quotient+1,f,c
  8450  003336  B0D8               	btfsc	status,0,c
  8451  003338  2A30               	incf	___awdiv@quotient+1,f,c
  8452  00333A                     l6084:
  8453  00333A  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  8454  00333E  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  8455  003342  0012               	return	
  8456  003344                     __end_of___awdiv:
  8457                           	opt stack 0
  8458                           tblptru	equ	0xFF8
  8459                           tblptrh	equ	0xFF7
  8460                           tblptrl	equ	0xFF6
  8461                           tablat	equ	0xFF5
  8462                           prodh	equ	0xFF4
  8463                           prodl	equ	0xFF3
  8464                           intcon	equ	0xFF2
  8465                           postinc0	equ	0xFEE
  8466                           wreg	equ	0xFE8
  8467                           postdec1	equ	0xFE5
  8468                           fsr1l	equ	0xFE1
  8469                           indf2	equ	0xFDF
  8470                           postinc2	equ	0xFDE
  8471                           postdec2	equ	0xFDD
  8472                           fsr2h	equ	0xFDA
  8473                           fsr2l	equ	0xFD9
  8474                           status	equ	0xFD8
  8475                           
  8476 ;; *************** function __tdiv_to_l_ *****************
  8477 ;; Defined at:
  8478 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8479 ;; Parameters:    Size  Location     Type
  8480 ;;  f1              3   34[COMRAM] float 
  8481 ;;  f2              3   37[COMRAM] float 
  8482 ;; Auto vars:     Size  Location     Type
  8483 ;;  quot            4   43[COMRAM] unsigned long 
  8484 ;;  exp1            1   48[COMRAM] unsigned char 
  8485 ;;  cntr            1   47[COMRAM] unsigned char 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  4   34[COMRAM] unsigned long 
  8488 ;; Registers used:
  8489 ;;		wreg, status,2, status,0
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8495 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8497 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;Total ram usage:       15 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:    3
  8502 ;; This function calls:
  8503 ;;		Nothing
  8504 ;; This function is called by:
  8505 ;;		_printf
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           	psect	text22
  8510  0022F4                     __ptext22:
  8511                           	opt stack 0
  8512  0022F4                     __tdiv_to_l_:
  8513                           	opt stack 25
  8514                           
  8515                           ;incstack = 0
  8516  0022F4  C025  F029         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8517  0022F8  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8518  0022FA  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8519  0022FC  3424               	rlcf	__tdiv_to_l_@f1+1,w,c
  8520  0022FE  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8521  002300  E301               	bnc	u6131
  8522  002302  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8523  002304                     u6131:
  8524  002304  5029               	movf	??__tdiv_to_l_,w,c
  8525  002306  6E31               	movwf	__tdiv_to_l_@exp1,c
  8526  002308  5031               	movf	__tdiv_to_l_@exp1,w,c
  8527  00230A  A4D8               	btfss	status,2,c
  8528  00230C  D009               	goto	l6266
  8529  00230E  0E00               	movlw	0
  8530  002310  6E23               	movwf	?__tdiv_to_l_,c
  8531  002312  0E00               	movlw	0
  8532  002314  6E24               	movwf	?__tdiv_to_l_+1,c
  8533  002316  0E00               	movlw	0
  8534  002318  6E25               	movwf	?__tdiv_to_l_+2,c
  8535  00231A  0E00               	movlw	0
  8536  00231C  6E26               	movwf	?__tdiv_to_l_+3,c
  8537  00231E  0012               	return	
  8538  002320                     l6266:
  8539  002320  C028  F029         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8540  002324  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8541  002326  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8542  002328  3427               	rlcf	__tdiv_to_l_@f2+1,w,c
  8543  00232A  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8544  00232C  E301               	bnc	u6151
  8545  00232E  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8546  002330                     u6151:
  8547  002330  5029               	movf	??__tdiv_to_l_,w,c
  8548  002332  6E30               	movwf	__tdiv_to_l_@cntr,c
  8549  002334  5030               	movf	__tdiv_to_l_@cntr,w,c
  8550  002336  A4D8               	btfss	status,2,c
  8551  002338  D009               	goto	l6272
  8552  00233A  0E00               	movlw	0
  8553  00233C  6E23               	movwf	?__tdiv_to_l_,c
  8554  00233E  0E00               	movlw	0
  8555  002340  6E24               	movwf	?__tdiv_to_l_+1,c
  8556  002342  0E00               	movlw	0
  8557  002344  6E25               	movwf	?__tdiv_to_l_+2,c
  8558  002346  0E00               	movlw	0
  8559  002348  6E26               	movwf	?__tdiv_to_l_+3,c
  8560  00234A  0012               	return	
  8561  00234C                     l6272:
  8562  00234C  8E24               	bsf	__tdiv_to_l_@f1+1,7,c
  8563  00234E  0EFF               	movlw	255
  8564  002350  1623               	andwf	__tdiv_to_l_@f1,f,c
  8565  002352  0EFF               	movlw	255
  8566  002354  1624               	andwf	__tdiv_to_l_@f1+1,f,c
  8567  002356  0E00               	movlw	0
  8568  002358  1625               	andwf	__tdiv_to_l_@f1+2,f,c
  8569  00235A  8E27               	bsf	__tdiv_to_l_@f2+1,7,c
  8570  00235C  0EFF               	movlw	255
  8571  00235E  1626               	andwf	__tdiv_to_l_@f2,f,c
  8572  002360  0EFF               	movlw	255
  8573  002362  1627               	andwf	__tdiv_to_l_@f2+1,f,c
  8574  002364  0E00               	movlw	0
  8575  002366  1628               	andwf	__tdiv_to_l_@f2+2,f,c
  8576  002368  0E00               	movlw	0
  8577  00236A  6E2C               	movwf	__tdiv_to_l_@quot,c
  8578  00236C  0E00               	movlw	0
  8579  00236E  6E2D               	movwf	__tdiv_to_l_@quot+1,c
  8580  002370  0E00               	movlw	0
  8581  002372  6E2E               	movwf	__tdiv_to_l_@quot+2,c
  8582  002374  0E00               	movlw	0
  8583  002376  6E2F               	movwf	__tdiv_to_l_@quot+3,c
  8584  002378  0E7F               	movlw	127
  8585  00237A  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  8586  00237C  5030               	movf	__tdiv_to_l_@cntr,w,c
  8587  00237E  0F98               	addlw	152
  8588  002380  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  8589  002382  0E18               	movlw	24
  8590  002384  6E30               	movwf	__tdiv_to_l_@cntr,c
  8591  002386                     l1164:
  8592  002386  90D8               	bcf	status,0,c
  8593  002388  362C               	rlcf	__tdiv_to_l_@quot,f,c
  8594  00238A  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  8595  00238C  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  8596  00238E  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  8597  002390  5026               	movf	__tdiv_to_l_@f2,w,c
  8598  002392  5C23               	subwf	__tdiv_to_l_@f1,w,c
  8599  002394  5027               	movf	__tdiv_to_l_@f2+1,w,c
  8600  002396  5824               	subwfb	__tdiv_to_l_@f1+1,w,c
  8601  002398  5028               	movf	__tdiv_to_l_@f2+2,w,c
  8602  00239A  5825               	subwfb	__tdiv_to_l_@f1+2,w,c
  8603  00239C  A0D8               	btfss	status,0,c
  8604  00239E  D007               	goto	l1165
  8605  0023A0  5026               	movf	__tdiv_to_l_@f2,w,c
  8606  0023A2  5E23               	subwf	__tdiv_to_l_@f1,f,c
  8607  0023A4  5027               	movf	__tdiv_to_l_@f2+1,w,c
  8608  0023A6  5A24               	subwfb	__tdiv_to_l_@f1+1,f,c
  8609  0023A8  5028               	movf	__tdiv_to_l_@f2+2,w,c
  8610  0023AA  5A25               	subwfb	__tdiv_to_l_@f1+2,f,c
  8611  0023AC  802C               	bsf	__tdiv_to_l_@quot,0,c
  8612  0023AE                     l1165:
  8613  0023AE  90D8               	bcf	status,0,c
  8614  0023B0  3623               	rlcf	__tdiv_to_l_@f1,f,c
  8615  0023B2  3624               	rlcf	__tdiv_to_l_@f1+1,f,c
  8616  0023B4  3625               	rlcf	__tdiv_to_l_@f1+2,f,c
  8617  0023B6  2E30               	decfsz	__tdiv_to_l_@cntr,f,c
  8618  0023B8  D7E6               	goto	l1164
  8619  0023BA  AE31               	btfss	__tdiv_to_l_@exp1,7,c
  8620  0023BC  D016               	goto	l6306
  8621  0023BE  5031               	movf	__tdiv_to_l_@exp1,w,c
  8622  0023C0  0A80               	xorlw	128
  8623  0023C2  0F97               	addlw	151
  8624  0023C4  B0D8               	btfsc	status,0,c
  8625  0023C6  D009               	goto	l6302
  8626  0023C8  0E00               	movlw	0
  8627  0023CA  6E23               	movwf	?__tdiv_to_l_,c
  8628  0023CC  0E00               	movlw	0
  8629  0023CE  6E24               	movwf	?__tdiv_to_l_+1,c
  8630  0023D0  0E00               	movlw	0
  8631  0023D2  6E25               	movwf	?__tdiv_to_l_+2,c
  8632  0023D4  0E00               	movlw	0
  8633  0023D6  6E26               	movwf	?__tdiv_to_l_+3,c
  8634  0023D8  0012               	return	
  8635  0023DA                     l6302:
  8636  0023DA  90D8               	bcf	status,0,c
  8637  0023DC  322F               	rrcf	__tdiv_to_l_@quot+3,f,c
  8638  0023DE  322E               	rrcf	__tdiv_to_l_@quot+2,f,c
  8639  0023E0  322D               	rrcf	__tdiv_to_l_@quot+1,f,c
  8640  0023E2  322C               	rrcf	__tdiv_to_l_@quot,f,c
  8641  0023E4  3E31               	incfsz	__tdiv_to_l_@exp1,f,c
  8642  0023E6  D7F9               	goto	l6302
  8643  0023E8  D015               	goto	l1171
  8644  0023EA                     l6306:
  8645  0023EA  0E17               	movlw	23
  8646  0023EC  6431               	cpfsgt	__tdiv_to_l_@exp1,c
  8647  0023EE  D00F               	goto	l6314
  8648  0023F0  0E00               	movlw	0
  8649  0023F2  6E23               	movwf	?__tdiv_to_l_,c
  8650  0023F4  0E00               	movlw	0
  8651  0023F6  6E24               	movwf	?__tdiv_to_l_+1,c
  8652  0023F8  0E00               	movlw	0
  8653  0023FA  6E25               	movwf	?__tdiv_to_l_+2,c
  8654  0023FC  0E00               	movlw	0
  8655  0023FE  6E26               	movwf	?__tdiv_to_l_+3,c
  8656  002400  0012               	return	
  8657  002402                     l6312:
  8658  002402  90D8               	bcf	status,0,c
  8659  002404  362C               	rlcf	__tdiv_to_l_@quot,f,c
  8660  002406  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  8661  002408  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  8662  00240A  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  8663  00240C  0631               	decf	__tdiv_to_l_@exp1,f,c
  8664  00240E                     l6314:
  8665  00240E  5031               	movf	__tdiv_to_l_@exp1,w,c
  8666  002410  A4D8               	btfss	status,2,c
  8667  002412  D7F7               	goto	l6312
  8668  002414                     l1171:
  8669  002414  C02C  F023         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8670  002418  C02D  F024         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8671  00241C  C02E  F025         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8672  002420  C02F  F026         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8673  002424  0012               	return		;funcret
  8674  002426                     __end_of__tdiv_to_l_:
  8675                           	opt stack 0
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           postinc0	equ	0xFEE
  8684                           wreg	equ	0xFE8
  8685                           postdec1	equ	0xFE5
  8686                           fsr1l	equ	0xFE1
  8687                           indf2	equ	0xFDF
  8688                           postinc2	equ	0xFDE
  8689                           postdec2	equ	0xFDD
  8690                           fsr2h	equ	0xFDA
  8691                           fsr2l	equ	0xFD9
  8692                           status	equ	0xFD8
  8693                           
  8694 ;; *************** function __div_to_l_ *****************
  8695 ;; Defined at:
  8696 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8697 ;; Parameters:    Size  Location     Type
  8698 ;;  f1              3   34[COMRAM] unsigned long 
  8699 ;;  f2              3   37[COMRAM] unsigned long 
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;  quot            4   40[COMRAM] unsigned long 
  8702 ;;  exp1            1   45[COMRAM] unsigned char 
  8703 ;;  cntr            1   44[COMRAM] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  4   34[COMRAM] unsigned long 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8713 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;Total ram usage:       12 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    3
  8720 ;; This function calls:
  8721 ;;		Nothing
  8722 ;; This function is called by:
  8723 ;;		_printf
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text23
  8728  002426                     __ptext23:
  8729                           	opt stack 0
  8730  002426                     __div_to_l_:
  8731                           	opt stack 25
  8732                           
  8733                           ;incstack = 0
  8734  002426  3425               	rlcf	__div_to_l_@f1+2,w,c
  8735  002428  3426               	rlcf	__div_to_l_@f1+3,w,c
  8736  00242A  6E2E               	movwf	__div_to_l_@exp1,c
  8737  00242C  502E               	movf	__div_to_l_@exp1,w,c
  8738  00242E  A4D8               	btfss	status,2,c
  8739  002430  D009               	goto	l6322
  8740  002432  0E00               	movlw	0
  8741  002434  6E23               	movwf	?__div_to_l_,c
  8742  002436  0E00               	movlw	0
  8743  002438  6E24               	movwf	?__div_to_l_+1,c
  8744  00243A  0E00               	movlw	0
  8745  00243C  6E25               	movwf	?__div_to_l_+2,c
  8746  00243E  0E00               	movlw	0
  8747  002440  6E26               	movwf	?__div_to_l_+3,c
  8748  002442  0012               	return	
  8749  002444                     l6322:
  8750  002444  3428               	rlcf	__div_to_l_@f2+2,w,c
  8751  002446  3429               	rlcf	__div_to_l_@f2+3,w,c
  8752  002448  6E2D               	movwf	__div_to_l_@cntr,c
  8753  00244A  502D               	movf	__div_to_l_@cntr,w,c
  8754  00244C  A4D8               	btfss	status,2,c
  8755  00244E  D009               	goto	l6328
  8756  002450  0E00               	movlw	0
  8757  002452  6E23               	movwf	?__div_to_l_,c
  8758  002454  0E00               	movlw	0
  8759  002456  6E24               	movwf	?__div_to_l_+1,c
  8760  002458  0E00               	movlw	0
  8761  00245A  6E25               	movwf	?__div_to_l_+2,c
  8762  00245C  0E00               	movlw	0
  8763  00245E  6E26               	movwf	?__div_to_l_+3,c
  8764  002460  0012               	return	
  8765  002462                     l6328:
  8766  002462  8E25               	bsf	__div_to_l_@f1+2,7,c
  8767  002464  0EFF               	movlw	255
  8768  002466  1623               	andwf	__div_to_l_@f1,f,c
  8769  002468  0EFF               	movlw	255
  8770  00246A  1624               	andwf	__div_to_l_@f1+1,f,c
  8771  00246C  0EFF               	movlw	255
  8772  00246E  1625               	andwf	__div_to_l_@f1+2,f,c
  8773  002470  0E00               	movlw	0
  8774  002472  1626               	andwf	__div_to_l_@f1+3,f,c
  8775  002474  8E28               	bsf	__div_to_l_@f2+2,7,c
  8776  002476  0EFF               	movlw	255
  8777  002478  1626               	andwf	__div_to_l_@f2,f,c
  8778  00247A  0EFF               	movlw	255
  8779  00247C  1627               	andwf	__div_to_l_@f2+1,f,c
  8780  00247E  0EFF               	movlw	255
  8781  002480  1628               	andwf	__div_to_l_@f2+2,f,c
  8782  002482  0E00               	movlw	0
  8783  002484  1629               	andwf	__div_to_l_@f2+3,f,c
  8784  002486  0E00               	movlw	0
  8785  002488  6E29               	movwf	__div_to_l_@quot,c
  8786  00248A  0E00               	movlw	0
  8787  00248C  6E2A               	movwf	__div_to_l_@quot+1,c
  8788  00248E  0E00               	movlw	0
  8789  002490  6E2B               	movwf	__div_to_l_@quot+2,c
  8790  002492  0E00               	movlw	0
  8791  002494  6E2C               	movwf	__div_to_l_@quot+3,c
  8792  002496  0E7F               	movlw	127
  8793  002498  5E2E               	subwf	__div_to_l_@exp1,f,c
  8794  00249A  502D               	movf	__div_to_l_@cntr,w,c
  8795  00249C  0FA0               	addlw	160
  8796  00249E  5E2E               	subwf	__div_to_l_@exp1,f,c
  8797  0024A0  0E20               	movlw	32
  8798  0024A2  6E2D               	movwf	__div_to_l_@cntr,c
  8799  0024A4                     l6342:
  8800  0024A4  90D8               	bcf	status,0,c
  8801  0024A6  3629               	rlcf	__div_to_l_@quot,f,c
  8802  0024A8  362A               	rlcf	__div_to_l_@quot+1,f,c
  8803  0024AA  362B               	rlcf	__div_to_l_@quot+2,f,c
  8804  0024AC  362C               	rlcf	__div_to_l_@quot+3,f,c
  8805  0024AE  5026               	movf	__div_to_l_@f2,w,c
  8806  0024B0  5C23               	subwf	__div_to_l_@f1,w,c
  8807  0024B2  5027               	movf	__div_to_l_@f2+1,w,c
  8808  0024B4  5824               	subwfb	__div_to_l_@f1+1,w,c
  8809  0024B6  5028               	movf	__div_to_l_@f2+2,w,c
  8810  0024B8  5825               	subwfb	__div_to_l_@f1+2,w,c
  8811  0024BA  5029               	movf	__div_to_l_@f2+3,w,c
  8812  0024BC  5826               	subwfb	__div_to_l_@f1+3,w,c
  8813  0024BE  A0D8               	btfss	status,0,c
  8814  0024C0  D009               	goto	l6350
  8815  0024C2  5026               	movf	__div_to_l_@f2,w,c
  8816  0024C4  5E23               	subwf	__div_to_l_@f1,f,c
  8817  0024C6  5027               	movf	__div_to_l_@f2+1,w,c
  8818  0024C8  5A24               	subwfb	__div_to_l_@f1+1,f,c
  8819  0024CA  5028               	movf	__div_to_l_@f2+2,w,c
  8820  0024CC  5A25               	subwfb	__div_to_l_@f1+2,f,c
  8821  0024CE  5029               	movf	__div_to_l_@f2+3,w,c
  8822  0024D0  5A26               	subwfb	__div_to_l_@f1+3,f,c
  8823  0024D2  8029               	bsf	__div_to_l_@quot,0,c
  8824  0024D4                     l6350:
  8825  0024D4  90D8               	bcf	status,0,c
  8826  0024D6  3623               	rlcf	__div_to_l_@f1,f,c
  8827  0024D8  3624               	rlcf	__div_to_l_@f1+1,f,c
  8828  0024DA  3625               	rlcf	__div_to_l_@f1+2,f,c
  8829  0024DC  3626               	rlcf	__div_to_l_@f1+3,f,c
  8830  0024DE  2E2D               	decfsz	__div_to_l_@cntr,f,c
  8831  0024E0  D7E1               	goto	l6342
  8832  0024E2  AE2E               	btfss	__div_to_l_@exp1,7,c
  8833  0024E4  D016               	goto	l6366
  8834  0024E6  502E               	movf	__div_to_l_@exp1,w,c
  8835  0024E8  0A80               	xorlw	128
  8836  0024EA  0F9F               	addlw	159
  8837  0024EC  B0D8               	btfsc	status,0,c
  8838  0024EE  D009               	goto	l6362
  8839  0024F0  0E00               	movlw	0
  8840  0024F2  6E23               	movwf	?__div_to_l_,c
  8841  0024F4  0E00               	movlw	0
  8842  0024F6  6E24               	movwf	?__div_to_l_+1,c
  8843  0024F8  0E00               	movlw	0
  8844  0024FA  6E25               	movwf	?__div_to_l_+2,c
  8845  0024FC  0E00               	movlw	0
  8846  0024FE  6E26               	movwf	?__div_to_l_+3,c
  8847  002500  0012               	return	
  8848  002502                     l6362:
  8849  002502  90D8               	bcf	status,0,c
  8850  002504  322C               	rrcf	__div_to_l_@quot+3,f,c
  8851  002506  322B               	rrcf	__div_to_l_@quot+2,f,c
  8852  002508  322A               	rrcf	__div_to_l_@quot+1,f,c
  8853  00250A  3229               	rrcf	__div_to_l_@quot,f,c
  8854  00250C  3E2E               	incfsz	__div_to_l_@exp1,f,c
  8855  00250E  D7F9               	goto	l6362
  8856  002510  D015               	goto	l1067
  8857  002512                     l6366:
  8858  002512  0E1F               	movlw	31
  8859  002514  642E               	cpfsgt	__div_to_l_@exp1,c
  8860  002516  D00F               	goto	l6374
  8861  002518  0E00               	movlw	0
  8862  00251A  6E23               	movwf	?__div_to_l_,c
  8863  00251C  0E00               	movlw	0
  8864  00251E  6E24               	movwf	?__div_to_l_+1,c
  8865  002520  0E00               	movlw	0
  8866  002522  6E25               	movwf	?__div_to_l_+2,c
  8867  002524  0E00               	movlw	0
  8868  002526  6E26               	movwf	?__div_to_l_+3,c
  8869  002528  0012               	return	
  8870  00252A                     l6372:
  8871  00252A  90D8               	bcf	status,0,c
  8872  00252C  3629               	rlcf	__div_to_l_@quot,f,c
  8873  00252E  362A               	rlcf	__div_to_l_@quot+1,f,c
  8874  002530  362B               	rlcf	__div_to_l_@quot+2,f,c
  8875  002532  362C               	rlcf	__div_to_l_@quot+3,f,c
  8876  002534  062E               	decf	__div_to_l_@exp1,f,c
  8877  002536                     l6374:
  8878  002536  502E               	movf	__div_to_l_@exp1,w,c
  8879  002538  A4D8               	btfss	status,2,c
  8880  00253A  D7F7               	goto	l6372
  8881  00253C                     l1067:
  8882  00253C  C029  F023         	movff	__div_to_l_@quot,?__div_to_l_
  8883  002540  C02A  F024         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8884  002544  C02B  F025         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8885  002548  C02C  F026         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8886  00254C  0012               	return		;funcret
  8887  00254E                     __end_of__div_to_l_:
  8888                           	opt stack 0
  8889                           tblptru	equ	0xFF8
  8890                           tblptrh	equ	0xFF7
  8891                           tblptrl	equ	0xFF6
  8892                           tablat	equ	0xFF5
  8893                           prodh	equ	0xFF4
  8894                           prodl	equ	0xFF3
  8895                           intcon	equ	0xFF2
  8896                           postinc0	equ	0xFEE
  8897                           wreg	equ	0xFE8
  8898                           postdec1	equ	0xFE5
  8899                           fsr1l	equ	0xFE1
  8900                           indf2	equ	0xFDF
  8901                           postinc2	equ	0xFDE
  8902                           postdec2	equ	0xFDD
  8903                           fsr2h	equ	0xFDA
  8904                           fsr2l	equ	0xFD9
  8905                           status	equ	0xFD8
  8906                           
  8907 ;; *************** function ___lltoft *****************
  8908 ;; Defined at:
  8909 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;  c               4   42[COMRAM] unsigned long 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;  exp             1   50[COMRAM] unsigned char 
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  3   42[COMRAM] float 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2, status,0, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8923 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;Total ram usage:        9 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    4
  8930 ;; This function calls:
  8931 ;;		___ftpack
  8932 ;; This function is called by:
  8933 ;;		_printf
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	text24
  8938  003798                     __ptext24:
  8939                           	opt stack 0
  8940  003798                     ___lltoft:
  8941                           	opt stack 24
  8942                           
  8943                           ;incstack = 0
  8944  003798  0E8E               	movlw	142
  8945  00379A  6E33               	movwf	___lltoft@exp,c
  8946  00379C  D006               	goto	l6546
  8947  00379E                     l6544:
  8948  00379E  90D8               	bcf	status,0,c
  8949  0037A0  322E               	rrcf	___lltoft@c+3,f,c
  8950  0037A2  322D               	rrcf	___lltoft@c+2,f,c
  8951  0037A4  322C               	rrcf	___lltoft@c+1,f,c
  8952  0037A6  322B               	rrcf	___lltoft@c,f,c
  8953  0037A8  2A33               	incf	___lltoft@exp,f,c
  8954  0037AA                     l6546:
  8955  0037AA  0E00               	movlw	0
  8956  0037AC  142B               	andwf	___lltoft@c,w,c
  8957  0037AE  6E2F               	movwf	??___lltoft& (0+255),c
  8958  0037B0  0E00               	movlw	0
  8959  0037B2  142C               	andwf	___lltoft@c+1,w,c
  8960  0037B4  6E30               	movwf	(??___lltoft+1)& (0+255),c
  8961  0037B6  0E00               	movlw	0
  8962  0037B8  142D               	andwf	___lltoft@c+2,w,c
  8963  0037BA  6E31               	movwf	(??___lltoft+2)& (0+255),c
  8964  0037BC  0EFF               	movlw	255
  8965  0037BE  142E               	andwf	___lltoft@c+3,w,c
  8966  0037C0  6E32               	movwf	(??___lltoft+3)& (0+255),c
  8967  0037C2  502F               	movf	??___lltoft,w,c
  8968  0037C4  1030               	iorwf	??___lltoft+1,w,c
  8969  0037C6  1031               	iorwf	??___lltoft+2,w,c
  8970  0037C8  1032               	iorwf	??___lltoft+3,w,c
  8971  0037CA  A4D8               	btfss	status,2,c
  8972  0037CC  D7E8               	goto	l6544
  8973  0037CE  C02B  F023         	movff	___lltoft@c,___ftpack@arg
  8974  0037D2  C02C  F024         	movff	___lltoft@c+1,___ftpack@arg+1
  8975  0037D6  C02D  F025         	movff	___lltoft@c+2,___ftpack@arg+2
  8976  0037DA  C033  F026         	movff	___lltoft@exp,___ftpack@exp
  8977  0037DE  0E00               	movlw	0
  8978  0037E0  6E27               	movwf	___ftpack@sign,c
  8979  0037E2  ECDE  F017         	call	___ftpack	;wreg free
  8980  0037E6  C023  F02B         	movff	?___ftpack,?___lltoft
  8981  0037EA  C024  F02C         	movff	?___ftpack+1,?___lltoft+1
  8982  0037EE  C025  F02D         	movff	?___ftpack+2,?___lltoft+2
  8983  0037F2  0012               	return	
  8984  0037F4                     __end_of___lltoft:
  8985                           	opt stack 0
  8986                           tblptru	equ	0xFF8
  8987                           tblptrh	equ	0xFF7
  8988                           tblptrl	equ	0xFF6
  8989                           tablat	equ	0xFF5
  8990                           prodh	equ	0xFF4
  8991                           prodl	equ	0xFF3
  8992                           intcon	equ	0xFF2
  8993                           postinc0	equ	0xFEE
  8994                           wreg	equ	0xFE8
  8995                           postdec1	equ	0xFE5
  8996                           fsr1l	equ	0xFE1
  8997                           indf2	equ	0xFDF
  8998                           postinc2	equ	0xFDE
  8999                           postdec2	equ	0xFDD
  9000                           fsr2h	equ	0xFDA
  9001                           fsr2l	equ	0xFD9
  9002                           status	equ	0xFD8
  9003                           
  9004 ;; *************** function ___llmod *****************
  9005 ;; Defined at:
  9006 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;  dividend        4   47[COMRAM] unsigned long 
  9009 ;;  divisor         4   51[COMRAM] unsigned long 
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;  counter         1   55[COMRAM] unsigned char 
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  4   47[COMRAM] unsigned long 
  9014 ;; Registers used:
  9015 ;;		wreg, status,2, status,0
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9021 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;Total ram usage:        9 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    3
  9028 ;; This function calls:
  9029 ;;		Nothing
  9030 ;; This function is called by:
  9031 ;;		_printf
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           	psect	text25
  9036  00360C                     __ptext25:
  9037                           	opt stack 0
  9038  00360C                     ___llmod:
  9039                           	opt stack 25
  9040                           
  9041                           ;incstack = 0
  9042  00360C  5034               	movf	___llmod@divisor,w,c
  9043  00360E  1035               	iorwf	___llmod@divisor+1,w,c
  9044  003610  1036               	iorwf	___llmod@divisor+2,w,c
  9045  003612  1037               	iorwf	___llmod@divisor+3,w,c
  9046  003614  B4D8               	btfsc	status,2,c
  9047  003616  D024               	goto	l1256
  9048  003618  0E01               	movlw	1
  9049  00361A  6E38               	movwf	___llmod@counter,c
  9050  00361C  D006               	goto	l6532
  9051  00361E                     l6530:
  9052  00361E  90D8               	bcf	status,0,c
  9053  003620  3634               	rlcf	___llmod@divisor,f,c
  9054  003622  3635               	rlcf	___llmod@divisor+1,f,c
  9055  003624  3636               	rlcf	___llmod@divisor+2,f,c
  9056  003626  3637               	rlcf	___llmod@divisor+3,f,c
  9057  003628  2A38               	incf	___llmod@counter,f,c
  9058  00362A                     l6532:
  9059  00362A  AE37               	btfss	___llmod@divisor+3,7,c
  9060  00362C  D7F8               	goto	l6530
  9061  00362E                     l6534:
  9062  00362E  5034               	movf	___llmod@divisor,w,c
  9063  003630  5C30               	subwf	___llmod@dividend,w,c
  9064  003632  5035               	movf	___llmod@divisor+1,w,c
  9065  003634  5831               	subwfb	___llmod@dividend+1,w,c
  9066  003636  5036               	movf	___llmod@divisor+2,w,c
  9067  003638  5832               	subwfb	___llmod@dividend+2,w,c
  9068  00363A  5037               	movf	___llmod@divisor+3,w,c
  9069  00363C  5833               	subwfb	___llmod@dividend+3,w,c
  9070  00363E  A0D8               	btfss	status,0,c
  9071  003640  D008               	goto	l6538
  9072  003642  5034               	movf	___llmod@divisor,w,c
  9073  003644  5E30               	subwf	___llmod@dividend,f,c
  9074  003646  5035               	movf	___llmod@divisor+1,w,c
  9075  003648  5A31               	subwfb	___llmod@dividend+1,f,c
  9076  00364A  5036               	movf	___llmod@divisor+2,w,c
  9077  00364C  5A32               	subwfb	___llmod@dividend+2,f,c
  9078  00364E  5037               	movf	___llmod@divisor+3,w,c
  9079  003650  5A33               	subwfb	___llmod@dividend+3,f,c
  9080  003652                     l6538:
  9081  003652  90D8               	bcf	status,0,c
  9082  003654  3237               	rrcf	___llmod@divisor+3,f,c
  9083  003656  3236               	rrcf	___llmod@divisor+2,f,c
  9084  003658  3235               	rrcf	___llmod@divisor+1,f,c
  9085  00365A  3234               	rrcf	___llmod@divisor,f,c
  9086  00365C  2E38               	decfsz	___llmod@counter,f,c
  9087  00365E  D7E7               	goto	l6534
  9088  003660                     l1256:
  9089  003660  C030  F030         	movff	___llmod@dividend,?___llmod
  9090  003664  C031  F031         	movff	___llmod@dividend+1,?___llmod+1
  9091  003668  C032  F032         	movff	___llmod@dividend+2,?___llmod+2
  9092  00366C  C033  F033         	movff	___llmod@dividend+3,?___llmod+3
  9093  003670  0012               	return		;funcret
  9094  003672                     __end_of___llmod:
  9095                           	opt stack 0
  9096                           tblptru	equ	0xFF8
  9097                           tblptrh	equ	0xFF7
  9098                           tblptrl	equ	0xFF6
  9099                           tablat	equ	0xFF5
  9100                           prodh	equ	0xFF4
  9101                           prodl	equ	0xFF3
  9102                           intcon	equ	0xFF2
  9103                           postinc0	equ	0xFEE
  9104                           wreg	equ	0xFE8
  9105                           postdec1	equ	0xFE5
  9106                           fsr1l	equ	0xFE1
  9107                           indf2	equ	0xFDF
  9108                           postinc2	equ	0xFDE
  9109                           postdec2	equ	0xFDD
  9110                           fsr2h	equ	0xFDA
  9111                           fsr2l	equ	0xFD9
  9112                           status	equ	0xFD8
  9113                           
  9114 ;; *************** function ___ftsub *****************
  9115 ;; Defined at:
  9116 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;  f1              3   46[BANK0 ] float 
  9119 ;;  f2              3   49[BANK0 ] float 
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;		None
  9122 ;; Return value:  Size  Location     Type
  9123 ;;                  3   46[BANK0 ] float 
  9124 ;; Registers used:
  9125 ;;		wreg, status,2, status,0, cstack
  9126 ;; Tracked objects:
  9127 ;;		On entry : 0/0
  9128 ;;		On exit  : 0/0
  9129 ;;		Unchanged: 0/0
  9130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9131 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9135 ;;Total ram usage:        6 bytes
  9136 ;; Hardware stack levels used:    1
  9137 ;; Hardware stack levels required when called:    5
  9138 ;; This function calls:
  9139 ;;		___ftadd
  9140 ;; This function is called by:
  9141 ;;		_sortBattery
  9142 ;;		_printf
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           	psect	text26
  9147  0038F0                     __ptext26:
  9148                           	opt stack 0
  9149  0038F0                     ___ftsub:
  9150                           	opt stack 23
  9151                           
  9152                           ;incstack = 0
  9153  0038F0  0100               	movlb	0	; () banked
  9154  0038F2  51B1               	movf	___ftsub@f2& (0+255),w,b
  9155  0038F4  0100               	movlb	0	; () banked
  9156  0038F6  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9157  0038F8  0100               	movlb	0	; () banked
  9158  0038FA  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9159  0038FC  B4D8               	btfsc	status,2,c
  9160  0038FE  D009               	goto	l6442
  9161                           
  9162                           ; BSR set to: 0
  9163  003900  0E00               	movlw	0
  9164  003902  0100               	movlb	0	; () banked
  9165  003904  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
  9166  003906  0E00               	movlw	0
  9167  003908  0100               	movlb	0	; () banked
  9168  00390A  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9169  00390C  0E80               	movlw	128
  9170  00390E  0100               	movlb	0	; () banked
  9171  003910  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9172  003912                     l6442:
  9173                           
  9174                           ; BSR set to: 0
  9175  003912  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
  9176  003916  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
  9177  00391A  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
  9178  00391E  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
  9179  003922  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
  9180  003926  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
  9181  00392A  EC19  F00D         	call	___ftadd	;wreg free
  9182  00392E  C0A2  F0AE         	movff	?___ftadd,?___ftsub
  9183  003932  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
  9184  003936  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
  9185  00393A  0012               	return	
  9186  00393C                     __end_of___ftsub:
  9187                           	opt stack 0
  9188                           tblptru	equ	0xFF8
  9189                           tblptrh	equ	0xFF7
  9190                           tblptrl	equ	0xFF6
  9191                           tablat	equ	0xFF5
  9192                           prodh	equ	0xFF4
  9193                           prodl	equ	0xFF3
  9194                           intcon	equ	0xFF2
  9195                           postinc0	equ	0xFEE
  9196                           wreg	equ	0xFE8
  9197                           postdec1	equ	0xFE5
  9198                           fsr1l	equ	0xFE1
  9199                           indf2	equ	0xFDF
  9200                           postinc2	equ	0xFDE
  9201                           postdec2	equ	0xFDD
  9202                           fsr2h	equ	0xFDA
  9203                           fsr2l	equ	0xFD9
  9204                           status	equ	0xFD8
  9205                           
  9206 ;; *************** function ___ftneg *****************
  9207 ;; Defined at:
  9208 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9209 ;; Parameters:    Size  Location     Type
  9210 ;;  f1              3   34[COMRAM] float 
  9211 ;; Auto vars:     Size  Location     Type
  9212 ;;		None
  9213 ;; Return value:  Size  Location     Type
  9214 ;;                  3   34[COMRAM] float 
  9215 ;; Registers used:
  9216 ;;		wreg, status,2, status,0
  9217 ;; Tracked objects:
  9218 ;;		On entry : 0/0
  9219 ;;		On exit  : 0/0
  9220 ;;		Unchanged: 0/0
  9221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9222 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;Total ram usage:        3 bytes
  9227 ;; Hardware stack levels used:    1
  9228 ;; Hardware stack levels required when called:    3
  9229 ;; This function calls:
  9230 ;;		Nothing
  9231 ;; This function is called by:
  9232 ;;		_printf
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           	psect	text27
  9237  003BAE                     __ptext27:
  9238                           	opt stack 0
  9239  003BAE                     ___ftneg:
  9240                           	opt stack 25
  9241                           
  9242                           ;incstack = 0
  9243  003BAE  5023               	movf	___ftneg@f1,w,c
  9244  003BB0  1024               	iorwf	___ftneg@f1+1,w,c
  9245  003BB2  1025               	iorwf	___ftneg@f1+2,w,c
  9246  003BB4  B4D8               	btfsc	status,2,c
  9247  003BB6  D006               	goto	l1196
  9248  003BB8  0E00               	movlw	0
  9249  003BBA  1A23               	xorwf	___ftneg@f1,f,c
  9250  003BBC  0E00               	movlw	0
  9251  003BBE  1A24               	xorwf	___ftneg@f1+1,f,c
  9252  003BC0  0E80               	movlw	128
  9253  003BC2  1A25               	xorwf	___ftneg@f1+2,f,c
  9254  003BC4                     l1196:
  9255  003BC4  C023  F023         	movff	___ftneg@f1,?___ftneg
  9256  003BC8  C024  F024         	movff	___ftneg@f1+1,?___ftneg+1
  9257  003BCC  C025  F025         	movff	___ftneg@f1+2,?___ftneg+2
  9258  003BD0  0012               	return		;funcret
  9259  003BD2                     __end_of___ftneg:
  9260                           	opt stack 0
  9261                           tblptru	equ	0xFF8
  9262                           tblptrh	equ	0xFF7
  9263                           tblptrl	equ	0xFF6
  9264                           tablat	equ	0xFF5
  9265                           prodh	equ	0xFF4
  9266                           prodl	equ	0xFF3
  9267                           intcon	equ	0xFF2
  9268                           postinc0	equ	0xFEE
  9269                           wreg	equ	0xFE8
  9270                           postdec1	equ	0xFE5
  9271                           fsr1l	equ	0xFE1
  9272                           indf2	equ	0xFDF
  9273                           postinc2	equ	0xFDE
  9274                           postdec2	equ	0xFDD
  9275                           fsr2h	equ	0xFDA
  9276                           fsr2l	equ	0xFD9
  9277                           status	equ	0xFD8
  9278                           
  9279 ;; *************** function ___ftge *****************
  9280 ;; Defined at:
  9281 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9282 ;; Parameters:    Size  Location     Type
  9283 ;;  ff1             3   46[COMRAM] float 
  9284 ;;  ff2             3   49[COMRAM] float 
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;		None
  9287 ;; Return value:  Size  Location     Type
  9288 ;;		None               void
  9289 ;; Registers used:
  9290 ;;		wreg, status,2, status,0
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9296 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;Total ram usage:        9 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:    3
  9303 ;; This function calls:
  9304 ;;		Nothing
  9305 ;; This function is called by:
  9306 ;;		_sortBattery
  9307 ;;		_printf
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           	psect	text28
  9312  0031A8                     __ptext28:
  9313                           	opt stack 0
  9314  0031A8                     ___ftge:
  9315                           	opt stack 25
  9316                           
  9317                           ;incstack = 0
  9318  0031A8  AE31               	btfss	___ftge@ff1+2,7,c
  9319  0031AA  D016               	goto	l6462
  9320  0031AC  C02F  F035         	movff	___ftge@ff1,??___ftge
  9321  0031B0  C030  F036         	movff	___ftge@ff1+1,??___ftge+1
  9322  0031B4  C031  F037         	movff	___ftge@ff1+2,??___ftge+2
  9323  0031B8  1E35               	comf	??___ftge,f,c
  9324  0031BA  1E36               	comf	??___ftge+1,f,c
  9325  0031BC  1E37               	comf	??___ftge+2,f,c
  9326  0031BE  2A35               	incf	??___ftge,f,c
  9327  0031C0  0E00               	movlw	0
  9328  0031C2  2236               	addwfc	??___ftge+1,f,c
  9329  0031C4  2237               	addwfc	??___ftge+2,f,c
  9330  0031C6  0E00               	movlw	0
  9331  0031C8  2435               	addwf	??___ftge,w,c
  9332  0031CA  6E2F               	movwf	___ftge@ff1,c
  9333  0031CC  0E00               	movlw	0
  9334  0031CE  2036               	addwfc	??___ftge+1,w,c
  9335  0031D0  6E30               	movwf	___ftge@ff1+1,c
  9336  0031D2  0E80               	movlw	128
  9337  0031D4  2037               	addwfc	??___ftge+2,w,c
  9338  0031D6  6E31               	movwf	___ftge@ff1+2,c
  9339  0031D8                     l6462:
  9340  0031D8  AE34               	btfss	___ftge@ff2+2,7,c
  9341  0031DA  D016               	goto	l6466
  9342  0031DC  C032  F035         	movff	___ftge@ff2,??___ftge
  9343  0031E0  C033  F036         	movff	___ftge@ff2+1,??___ftge+1
  9344  0031E4  C034  F037         	movff	___ftge@ff2+2,??___ftge+2
  9345  0031E8  1E35               	comf	??___ftge,f,c
  9346  0031EA  1E36               	comf	??___ftge+1,f,c
  9347  0031EC  1E37               	comf	??___ftge+2,f,c
  9348  0031EE  2A35               	incf	??___ftge,f,c
  9349  0031F0  0E00               	movlw	0
  9350  0031F2  2236               	addwfc	??___ftge+1,f,c
  9351  0031F4  2237               	addwfc	??___ftge+2,f,c
  9352  0031F6  0E00               	movlw	0
  9353  0031F8  2435               	addwf	??___ftge,w,c
  9354  0031FA  6E32               	movwf	___ftge@ff2,c
  9355  0031FC  0E00               	movlw	0
  9356  0031FE  2036               	addwfc	??___ftge+1,w,c
  9357  003200  6E33               	movwf	___ftge@ff2+1,c
  9358  003202  0E80               	movlw	128
  9359  003204  2037               	addwfc	??___ftge+2,w,c
  9360  003206  6E34               	movwf	___ftge@ff2+2,c
  9361  003208                     l6466:
  9362  003208  0E00               	movlw	0
  9363  00320A  1A2F               	xorwf	___ftge@ff1,f,c
  9364  00320C  0E00               	movlw	0
  9365  00320E  1A30               	xorwf	___ftge@ff1+1,f,c
  9366  003210  0E80               	movlw	128
  9367  003212  1A31               	xorwf	___ftge@ff1+2,f,c
  9368  003214  0E00               	movlw	0
  9369  003216  1A32               	xorwf	___ftge@ff2,f,c
  9370  003218  0E00               	movlw	0
  9371  00321A  1A33               	xorwf	___ftge@ff2+1,f,c
  9372  00321C  0E80               	movlw	128
  9373  00321E  1A34               	xorwf	___ftge@ff2+2,f,c
  9374  003220  5032               	movf	___ftge@ff2,w,c
  9375  003222  5C2F               	subwf	___ftge@ff1,w,c
  9376  003224  5033               	movf	___ftge@ff2+1,w,c
  9377  003226  5830               	subwfb	___ftge@ff1+1,w,c
  9378  003228  5034               	movf	___ftge@ff2+2,w,c
  9379  00322A  5831               	subwfb	___ftge@ff1+2,w,c
  9380  00322C  B0D8               	btfsc	status,0,c
  9381  00322E  D002               	goto	l6472
  9382  003230  90D8               	bcf	status,0,c
  9383  003232  0012               	return	
  9384  003234                     l6472:
  9385  003234  80D8               	bsf	status,0,c
  9386  003236  0012               	return	
  9387  003238                     __end_of___ftge:
  9388                           	opt stack 0
  9389                           tblptru	equ	0xFF8
  9390                           tblptrh	equ	0xFF7
  9391                           tblptrl	equ	0xFF6
  9392                           tablat	equ	0xFF5
  9393                           prodh	equ	0xFF4
  9394                           prodl	equ	0xFF3
  9395                           intcon	equ	0xFF2
  9396                           postinc0	equ	0xFEE
  9397                           wreg	equ	0xFE8
  9398                           postdec1	equ	0xFE5
  9399                           fsr1l	equ	0xFE1
  9400                           indf2	equ	0xFDF
  9401                           postinc2	equ	0xFDE
  9402                           postdec2	equ	0xFDD
  9403                           fsr2h	equ	0xFDA
  9404                           fsr2l	equ	0xFD9
  9405                           status	equ	0xFD8
  9406                           
  9407 ;; *************** function _lcdClear *****************
  9408 ;; Defined at:
  9409 ;;		line 74 in file "lcd.c"
  9410 ;; Parameters:    Size  Location     Type
  9411 ;;		None
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;		None
  9414 ;; Return value:  Size  Location     Type
  9415 ;;                  1    wreg      void 
  9416 ;; Registers used:
  9417 ;;		wreg, status,2, status,0, cstack
  9418 ;; Tracked objects:
  9419 ;;		On entry : 0/0
  9420 ;;		On exit  : 0/0
  9421 ;;		Unchanged: 0/0
  9422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;Total ram usage:        0 bytes
  9428 ;; Hardware stack levels used:    1
  9429 ;; Hardware stack levels required when called:    5
  9430 ;; This function calls:
  9431 ;;		_lcdInst
  9432 ;; This function is called by:
  9433 ;;		_main
  9434 ;;		_sortBattery
  9435 ;;		_showDateTime
  9436 ;;		_showMainMenu
  9437 ;;		_showRunSelect
  9438 ;;		_showRunMenu
  9439 ;;		_showRunTime
  9440 ;;		_showRunStats
  9441 ;;		_pause
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           	psect	text29
  9446  003CC8                     __ptext29:
  9447                           	opt stack 0
  9448  003CC8                     _lcdClear:
  9449                           	opt stack 24
  9450                           
  9451                           ;lcd.c: 75: lcdInst(0b00000001);
  9452                           
  9453                           ;incstack = 0
  9454  003CC8  0E01               	movlw	1
  9455  003CCA  ECFA  F01D         	call	_lcdInst
  9456  003CCE  0012               	return		;funcret
  9457  003CD0                     __end_of_lcdClear:
  9458                           	opt stack 0
  9459                           tblptru	equ	0xFF8
  9460                           tblptrh	equ	0xFF7
  9461                           tblptrl	equ	0xFF6
  9462                           tablat	equ	0xFF5
  9463                           prodh	equ	0xFF4
  9464                           prodl	equ	0xFF3
  9465                           intcon	equ	0xFF2
  9466                           postinc0	equ	0xFEE
  9467                           wreg	equ	0xFE8
  9468                           postdec1	equ	0xFE5
  9469                           fsr1l	equ	0xFE1
  9470                           indf2	equ	0xFDF
  9471                           postinc2	equ	0xFDE
  9472                           postdec2	equ	0xFDD
  9473                           fsr2h	equ	0xFDA
  9474                           fsr2l	equ	0xFD9
  9475                           status	equ	0xFD8
  9476                           
  9477 ;; *************** function _keyPressed *****************
  9478 ;; Defined at:
  9479 ;;		line 43 in file "keypad.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;		None
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;  key             1   34[COMRAM] unsigned char 
  9484 ;; Return value:  Size  Location     Type
  9485 ;;                  1    wreg      unsigned char 
  9486 ;; Registers used:
  9487 ;;		wreg, status,2
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;Total ram usage:        1 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    3
  9500 ;; This function calls:
  9501 ;;		Nothing
  9502 ;; This function is called by:
  9503 ;;		_showDateTime
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           	psect	text30
  9508  003CAA                     __ptext30:
  9509                           	opt stack 0
  9510  003CAA                     _keyPressed:
  9511                           	opt stack 25
  9512                           
  9513                           ;keypad.c: 44: char key = lastKey;
  9514                           
  9515                           ;incstack = 0
  9516  003CAA  C05C  F023         	movff	_lastKey,keyPressed@key
  9517                           
  9518                           ;keypad.c: 45: lastKey = 0;
  9519  003CAE  0E00               	movlw	0
  9520  003CB0  6E5C               	movwf	_lastKey,c
  9521                           
  9522                           ;keypad.c: 46: return key;
  9523  003CB2  5023               	movf	keyPressed@key,w,c
  9524  003CB4  0012               	return	
  9525  003CB6                     __end_of_keyPressed:
  9526                           	opt stack 0
  9527                           tblptru	equ	0xFF8
  9528                           tblptrh	equ	0xFF7
  9529                           tblptrl	equ	0xFF6
  9530                           tablat	equ	0xFF5
  9531                           prodh	equ	0xFF4
  9532                           prodl	equ	0xFF3
  9533                           intcon	equ	0xFF2
  9534                           postinc0	equ	0xFEE
  9535                           wreg	equ	0xFE8
  9536                           postdec1	equ	0xFE5
  9537                           fsr1l	equ	0xFE1
  9538                           indf2	equ	0xFDF
  9539                           postinc2	equ	0xFDE
  9540                           postdec2	equ	0xFDD
  9541                           fsr2h	equ	0xFDA
  9542                           fsr2l	equ	0xFD9
  9543                           status	equ	0xFD8
  9544                           
  9545 ;; *************** function _initRTC *****************
  9546 ;; Defined at:
  9547 ;;		line 19 in file "RTC.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;		None
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;		None
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  1    wreg      void 
  9554 ;; Registers used:
  9555 ;;		wreg, status,2, status,0, cstack
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;Total ram usage:        0 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    5
  9568 ;; This function calls:
  9569 ;;		_I2C_Master_Init
  9570 ;; This function is called by:
  9571 ;;		_showInterface
  9572 ;;		_showDateTime
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           	psect	text31
  9577  003C6E                     __ptext31:
  9578                           	opt stack 0
  9579  003C6E                     _initRTC:
  9580                           	opt stack 23
  9581                           
  9582                           ;RTC.c: 20: I2C_Master_Init(10000);
  9583                           
  9584                           ;incstack = 0
  9585  003C6E  0E10               	movlw	16
  9586  003C70  6E30               	movwf	I2C_Master_Init@c,c
  9587  003C72  0E27               	movlw	39
  9588  003C74  6E31               	movwf	I2C_Master_Init@c+1,c
  9589  003C76  0E00               	movlw	0
  9590  003C78  6E32               	movwf	I2C_Master_Init@c+2,c
  9591  003C7A  0E00               	movlw	0
  9592  003C7C  6E33               	movwf	I2C_Master_Init@c+3,c
  9593  003C7E  ECFA  F01B         	call	_I2C_Master_Init	;wreg free
  9594  003C82  0012               	return		;funcret
  9595  003C84                     __end_of_initRTC:
  9596                           	opt stack 0
  9597                           tblptru	equ	0xFF8
  9598                           tblptrh	equ	0xFF7
  9599                           tblptrl	equ	0xFF6
  9600                           tablat	equ	0xFF5
  9601                           prodh	equ	0xFF4
  9602                           prodl	equ	0xFF3
  9603                           intcon	equ	0xFF2
  9604                           postinc0	equ	0xFEE
  9605                           wreg	equ	0xFE8
  9606                           postdec1	equ	0xFE5
  9607                           fsr1l	equ	0xFE1
  9608                           indf2	equ	0xFDF
  9609                           postinc2	equ	0xFDE
  9610                           postdec2	equ	0xFDD
  9611                           fsr2h	equ	0xFDA
  9612                           fsr2l	equ	0xFD9
  9613                           status	equ	0xFD8
  9614                           
  9615 ;; *************** function _I2C_Master_Init *****************
  9616 ;; Defined at:
  9617 ;;		line 13 in file "I2C.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  c               4   47[COMRAM] const unsigned long 
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;		None
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  1    wreg      void 
  9624 ;; Registers used:
  9625 ;;		wreg, status,2, status,0, cstack
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9631 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9635 ;;Total ram usage:        8 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    4
  9638 ;; This function calls:
  9639 ;;		___lldiv
  9640 ;; This function is called by:
  9641 ;;		_initRTC
  9642 ;;		_testFrequency
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           	psect	text32
  9647  0037F4                     __ptext32:
  9648                           	opt stack 0
  9649  0037F4                     _I2C_Master_Init:
  9650                           	opt stack 23
  9651                           
  9652                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  9653                           
  9654                           ;incstack = 0
  9655  0037F4  0E00               	movlw	0
  9656  0037F6  6EC7               	movwf	4039,c	;volatile
  9657                           
  9658                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  9659  0037F8  0E28               	movlw	40
  9660  0037FA  6EC6               	movwf	4038,c	;volatile
  9661                           
  9662                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  9663  0037FC  0E00               	movlw	0
  9664  0037FE  6EC5               	movwf	4037,c	;volatile
  9665                           
  9666                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  9667  003800  0E80               	movlw	128
  9668  003802  6E23               	movwf	___lldiv@dividend,c
  9669  003804  0E96               	movlw	150
  9670  003806  6E24               	movwf	___lldiv@dividend+1,c
  9671  003808  0E98               	movlw	152
  9672  00380A  6E25               	movwf	___lldiv@dividend+2,c
  9673  00380C  0E00               	movlw	0
  9674  00380E  6E26               	movwf	___lldiv@dividend+3,c
  9675  003810  C030  F034         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  9676  003814  C031  F035         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  9677  003818  C032  F036         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  9678  00381C  C033  F037         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  9679  003820  0E02               	movlw	2
  9680  003822                     u6015:
  9681  003822  90D8               	bcf	status,0,c
  9682  003824  3634               	rlcf	??_I2C_Master_Init,f,c
  9683  003826  3635               	rlcf	??_I2C_Master_Init+1,f,c
  9684  003828  3636               	rlcf	??_I2C_Master_Init+2,f,c
  9685  00382A  3637               	rlcf	??_I2C_Master_Init+3,f,c
  9686  00382C  2EE8               	decfsz	wreg,f,c
  9687  00382E  D7F9               	goto	u6015
  9688  003830  C034  F027         	movff	??_I2C_Master_Init,___lldiv@divisor
  9689  003834  C035  F028         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  9690  003838  C036  F029         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  9691  00383C  C037  F02A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  9692  003840  ECA2  F019         	call	___lldiv	;wreg free
  9693  003844  0423               	decf	?___lldiv,w,c
  9694  003846  6EC8               	movwf	4040,c	;volatile
  9695                           
  9696                           ;I2C.c: 20: TRISC3 = 1;
  9697  003848  8694               	bsf	3988,3,c	;volatile
  9698                           
  9699                           ;I2C.c: 21: TRISC4 = 1;
  9700  00384A  8894               	bsf	3988,4,c	;volatile
  9701  00384C  0012               	return		;funcret
  9702  00384E                     __end_of_I2C_Master_Init:
  9703                           	opt stack 0
  9704                           tblptru	equ	0xFF8
  9705                           tblptrh	equ	0xFF7
  9706                           tblptrl	equ	0xFF6
  9707                           tablat	equ	0xFF5
  9708                           prodh	equ	0xFF4
  9709                           prodl	equ	0xFF3
  9710                           intcon	equ	0xFF2
  9711                           postinc0	equ	0xFEE
  9712                           wreg	equ	0xFE8
  9713                           postdec1	equ	0xFE5
  9714                           fsr1l	equ	0xFE1
  9715                           indf2	equ	0xFDF
  9716                           postinc2	equ	0xFDE
  9717                           postdec2	equ	0xFDD
  9718                           fsr2h	equ	0xFDA
  9719                           fsr2l	equ	0xFD9
  9720                           status	equ	0xFD8
  9721                           
  9722 ;; *************** function ___lldiv *****************
  9723 ;; Defined at:
  9724 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;  dividend        4   34[COMRAM] unsigned long 
  9727 ;;  divisor         4   38[COMRAM] unsigned long 
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;  quotient        4   42[COMRAM] unsigned long 
  9730 ;;  counter         1   46[COMRAM] unsigned char 
  9731 ;; Return value:  Size  Location     Type
  9732 ;;                  4   34[COMRAM] unsigned long 
  9733 ;; Registers used:
  9734 ;;		wreg, status,2, status,0
  9735 ;; Tracked objects:
  9736 ;;		On entry : 0/0
  9737 ;;		On exit  : 0/0
  9738 ;;		Unchanged: 0/0
  9739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9740 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9743 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9744 ;;Total ram usage:       13 bytes
  9745 ;; Hardware stack levels used:    1
  9746 ;; Hardware stack levels required when called:    3
  9747 ;; This function calls:
  9748 ;;		Nothing
  9749 ;; This function is called by:
  9750 ;;		_I2C_Master_Init
  9751 ;;		_printf
  9752 ;; This function uses a non-reentrant model
  9753 ;;
  9754                           
  9755                           	psect	text33
  9756  003344                     __ptext33:
  9757                           	opt stack 0
  9758  003344                     ___lldiv:
  9759                           	opt stack 25
  9760                           
  9761                           ;incstack = 0
  9762  003344  0E00               	movlw	0
  9763  003346  6E2B               	movwf	___lldiv@quotient,c
  9764  003348  0E00               	movlw	0
  9765  00334A  6E2C               	movwf	___lldiv@quotient+1,c
  9766  00334C  0E00               	movlw	0
  9767  00334E  6E2D               	movwf	___lldiv@quotient+2,c
  9768  003350  0E00               	movlw	0
  9769  003352  6E2E               	movwf	___lldiv@quotient+3,c
  9770  003354  5027               	movf	___lldiv@divisor,w,c
  9771  003356  1028               	iorwf	___lldiv@divisor+1,w,c
  9772  003358  1029               	iorwf	___lldiv@divisor+2,w,c
  9773  00335A  102A               	iorwf	___lldiv@divisor+3,w,c
  9774  00335C  B4D8               	btfsc	status,2,c
  9775  00335E  D02A               	goto	l1246
  9776  003360  0E01               	movlw	1
  9777  003362  6E2F               	movwf	___lldiv@counter,c
  9778  003364  D006               	goto	l6132
  9779  003366                     l6130:
  9780  003366  90D8               	bcf	status,0,c
  9781  003368  3627               	rlcf	___lldiv@divisor,f,c
  9782  00336A  3628               	rlcf	___lldiv@divisor+1,f,c
  9783  00336C  3629               	rlcf	___lldiv@divisor+2,f,c
  9784  00336E  362A               	rlcf	___lldiv@divisor+3,f,c
  9785  003370  2A2F               	incf	___lldiv@counter,f,c
  9786  003372                     l6132:
  9787  003372  AE2A               	btfss	___lldiv@divisor+3,7,c
  9788  003374  D7F8               	goto	l6130
  9789  003376                     l6134:
  9790  003376  90D8               	bcf	status,0,c
  9791  003378  362B               	rlcf	___lldiv@quotient,f,c
  9792  00337A  362C               	rlcf	___lldiv@quotient+1,f,c
  9793  00337C  362D               	rlcf	___lldiv@quotient+2,f,c
  9794  00337E  362E               	rlcf	___lldiv@quotient+3,f,c
  9795  003380  5027               	movf	___lldiv@divisor,w,c
  9796  003382  5C23               	subwf	___lldiv@dividend,w,c
  9797  003384  5028               	movf	___lldiv@divisor+1,w,c
  9798  003386  5824               	subwfb	___lldiv@dividend+1,w,c
  9799  003388  5029               	movf	___lldiv@divisor+2,w,c
  9800  00338A  5825               	subwfb	___lldiv@dividend+2,w,c
  9801  00338C  502A               	movf	___lldiv@divisor+3,w,c
  9802  00338E  5826               	subwfb	___lldiv@dividend+3,w,c
  9803  003390  A0D8               	btfss	status,0,c
  9804  003392  D009               	goto	l6142
  9805  003394  5027               	movf	___lldiv@divisor,w,c
  9806  003396  5E23               	subwf	___lldiv@dividend,f,c
  9807  003398  5028               	movf	___lldiv@divisor+1,w,c
  9808  00339A  5A24               	subwfb	___lldiv@dividend+1,f,c
  9809  00339C  5029               	movf	___lldiv@divisor+2,w,c
  9810  00339E  5A25               	subwfb	___lldiv@dividend+2,f,c
  9811  0033A0  502A               	movf	___lldiv@divisor+3,w,c
  9812  0033A2  5A26               	subwfb	___lldiv@dividend+3,f,c
  9813  0033A4  802B               	bsf	___lldiv@quotient,0,c
  9814  0033A6                     l6142:
  9815  0033A6  90D8               	bcf	status,0,c
  9816  0033A8  322A               	rrcf	___lldiv@divisor+3,f,c
  9817  0033AA  3229               	rrcf	___lldiv@divisor+2,f,c
  9818  0033AC  3228               	rrcf	___lldiv@divisor+1,f,c
  9819  0033AE  3227               	rrcf	___lldiv@divisor,f,c
  9820  0033B0  2E2F               	decfsz	___lldiv@counter,f,c
  9821  0033B2  D7E1               	goto	l6134
  9822  0033B4                     l1246:
  9823  0033B4  C02B  F023         	movff	___lldiv@quotient,?___lldiv
  9824  0033B8  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
  9825  0033BC  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
  9826  0033C0  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
  9827  0033C4  0012               	return		;funcret
  9828  0033C6                     __end_of___lldiv:
  9829                           	opt stack 0
  9830                           tblptru	equ	0xFF8
  9831                           tblptrh	equ	0xFF7
  9832                           tblptrl	equ	0xFF6
  9833                           tablat	equ	0xFF5
  9834                           prodh	equ	0xFF4
  9835                           prodl	equ	0xFF3
  9836                           intcon	equ	0xFF2
  9837                           postinc0	equ	0xFEE
  9838                           wreg	equ	0xFE8
  9839                           postdec1	equ	0xFE5
  9840                           fsr1l	equ	0xFE1
  9841                           indf2	equ	0xFDF
  9842                           postinc2	equ	0xFDE
  9843                           postdec2	equ	0xFDD
  9844                           fsr2h	equ	0xFDA
  9845                           fsr2l	equ	0xFD9
  9846                           status	equ	0xFD8
  9847                           
  9848 ;; *************** function _getTime *****************
  9849 ;; Defined at:
  9850 ;;		line 23 in file "RTC.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;		None
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;  i               1   55[COMRAM] unsigned char 
  9855 ;;  time           14   41[COMRAM] int [7]
  9856 ;; Return value:  Size  Location     Type
  9857 ;;                  2   37[COMRAM] PTR int 
  9858 ;; Registers used:
  9859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9868 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;Total ram usage:       19 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; Hardware stack levels required when called:    5
  9872 ;; This function calls:
  9873 ;;		_I2C_Master_Read
  9874 ;;		_I2C_Master_Start
  9875 ;;		_I2C_Master_Stop
  9876 ;;		_I2C_Master_Write
  9877 ;; This function is called by:
  9878 ;;		_showDateTime
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text34
  9883  0033C6                     __ptext34:
  9884                           	opt stack 0
  9885  0033C6                     _getTime:
  9886                           	opt stack 23
  9887                           
  9888                           ;RTC.c: 24: int time[7];
  9889                           ;RTC.c: 26: (INTCONbits.GIE = 0);
  9890                           
  9891                           ;incstack = 0
  9892  0033C6  9EF2               	bcf	intcon,7,c	;volatile
  9893                           
  9894                           ;RTC.c: 29: I2C_Master_Start();
  9895  0033C8  EC6C  F01E         	call	_I2C_Master_Start	;wreg free
  9896                           
  9897                           ;RTC.c: 30: I2C_Master_Write(0b11010000);
  9898  0033CC  0E00               	movlw	0
  9899  0033CE  6E25               	movwf	I2C_Master_Write@d+1,c
  9900  0033D0  0ED0               	movlw	208
  9901  0033D2  6E24               	movwf	I2C_Master_Write@d,c
  9902  0033D4  EC5B  F01E         	call	_I2C_Master_Write	;wreg free
  9903                           
  9904                           ;RTC.c: 31: I2C_Master_Write(0x00);
  9905  0033D8  0E00               	movlw	0
  9906  0033DA  6E25               	movwf	I2C_Master_Write@d+1,c
  9907  0033DC  0E00               	movlw	0
  9908  0033DE  6E24               	movwf	I2C_Master_Write@d,c
  9909  0033E0  EC5B  F01E         	call	_I2C_Master_Write	;wreg free
  9910                           
  9911                           ;RTC.c: 32: I2C_Master_Stop();
  9912  0033E4  EC68  F01E         	call	_I2C_Master_Stop	;wreg free
  9913                           
  9914                           ;RTC.c: 35: I2C_Master_Start();
  9915  0033E8  EC6C  F01E         	call	_I2C_Master_Start	;wreg free
  9916                           
  9917                           ;RTC.c: 36: I2C_Master_Write(0b11010001);
  9918  0033EC  0E00               	movlw	0
  9919  0033EE  6E25               	movwf	I2C_Master_Write@d+1,c
  9920  0033F0  0ED1               	movlw	209
  9921  0033F2  6E24               	movwf	I2C_Master_Write@d,c
  9922  0033F4  EC5B  F01E         	call	_I2C_Master_Write	;wreg free
  9923                           
  9924                           ;RTC.c: 37: for(unsigned char i=0;i<6;i++){
  9925  0033F8  0E00               	movlw	0
  9926  0033FA  6E38               	movwf	getTime@i,c
  9927  0033FC                     l6966:
  9928  0033FC  0E05               	movlw	5
  9929  0033FE  6438               	cpfsgt	getTime@i,c
  9930  003400  D001               	goto	l6970
  9931  003402  D013               	goto	l6976
  9932  003404                     l6970:
  9933                           
  9934                           ;RTC.c: 38: time[i] = I2C_Master_Read(1);
  9935  003404  0E01               	movlw	1
  9936  003406  ECB1  F01D         	call	_I2C_Master_Read
  9937  00340A  6E28               	movwf	??_getTime& (0+255),c
  9938  00340C  6A29               	clrf	(??_getTime+1)& (0+255),c
  9939  00340E  5038               	movf	getTime@i,w,c
  9940  003410  0D02               	mullw	2
  9941  003412  0E2A               	movlw	low getTime@time
  9942  003414  24F3               	addwf	prodl,w,c
  9943  003416  6ED9               	movwf	fsr2l,c
  9944  003418  0E00               	movlw	high getTime@time
  9945  00341A  20F4               	addwfc	prodh,w,c
  9946  00341C  6EDA               	movwf	fsr2h,c
  9947  00341E  C028  FFDE         	movff	??_getTime,postinc2
  9948  003422  C029  FFDD         	movff	??_getTime+1,postdec2
  9949  003426  2A38               	incf	getTime@i,f,c
  9950  003428  D7E9               	goto	l6966
  9951  00342A                     l6976:
  9952                           
  9953                           ;RTC.c: 39: }
  9954                           ;RTC.c: 40: time[6] = I2C_Master_Read(0);
  9955  00342A  0E00               	movlw	0
  9956  00342C  ECB1  F01D         	call	_I2C_Master_Read
  9957  003430  6E28               	movwf	??_getTime& (0+255),c
  9958  003432  5028               	movf	??_getTime,w,c
  9959  003434  6E36               	movwf	getTime@time+12,c
  9960  003436  6A37               	clrf	getTime@time+13,c
  9961                           
  9962                           ;RTC.c: 41: I2C_Master_Stop();
  9963  003438  EC68  F01E         	call	_I2C_Master_Stop	;wreg free
  9964                           
  9965                           ;RTC.c: 43: (INTCONbits.GIE = 1);
  9966  00343C  8EF2               	bsf	intcon,7,c	;volatile
  9967                           
  9968                           ;RTC.c: 45: return time;
  9969  00343E  0E2A               	movlw	low getTime@time
  9970  003440  6E26               	movwf	?_getTime,c
  9971  003442  0E00               	movlw	high getTime@time
  9972  003444  6E27               	movwf	?_getTime+1,c
  9973  003446  0012               	return	
  9974  003448                     __end_of_getTime:
  9975                           	opt stack 0
  9976                           tblptru	equ	0xFF8
  9977                           tblptrh	equ	0xFF7
  9978                           tblptrl	equ	0xFF6
  9979                           tablat	equ	0xFF5
  9980                           prodh	equ	0xFF4
  9981                           prodl	equ	0xFF3
  9982                           intcon	equ	0xFF2
  9983                           postinc0	equ	0xFEE
  9984                           wreg	equ	0xFE8
  9985                           postdec1	equ	0xFE5
  9986                           fsr1l	equ	0xFE1
  9987                           indf2	equ	0xFDF
  9988                           postinc2	equ	0xFDE
  9989                           postdec2	equ	0xFDD
  9990                           fsr2h	equ	0xFDA
  9991                           fsr2l	equ	0xFD9
  9992                           status	equ	0xFD8
  9993                           
  9994 ;; *************** function _I2C_Master_Write *****************
  9995 ;; Defined at:
  9996 ;;		line 47 in file "I2C.c"
  9997 ;; Parameters:    Size  Location     Type
  9998 ;;  d               2   35[COMRAM] unsigned int 
  9999 ;; Auto vars:     Size  Location     Type
 10000 ;;		None
 10001 ;; Return value:  Size  Location     Type
 10002 ;;                  1    wreg      void 
 10003 ;; Registers used:
 10004 ;;		wreg, status,2, status,0, cstack
 10005 ;; Tracked objects:
 10006 ;;		On entry : 0/0
 10007 ;;		On exit  : 0/0
 10008 ;;		Unchanged: 0/0
 10009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10010 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10014 ;;Total ram usage:        2 bytes
 10015 ;; Hardware stack levels used:    1
 10016 ;; Hardware stack levels required when called:    4
 10017 ;; This function calls:
 10018 ;;		_I2C_Master_Wait
 10019 ;; This function is called by:
 10020 ;;		_getTime
 10021 ;;		_setTime
 10022 ;;		_testFrequency
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           	psect	text35
 10027  003CB6                     __ptext35:
 10028                           	opt stack 0
 10029  003CB6                     _I2C_Master_Write:
 10030                           	opt stack 23
 10031                           
 10032                           ;I2C.c: 49: I2C_Master_Wait();
 10033                           
 10034                           ;incstack = 0
 10035  003CB6  EC4C  F01E         	call	_I2C_Master_Wait	;wreg free
 10036                           
 10037                           ;I2C.c: 50: SSPBUF = d;
 10038  003CBA  C024  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10039  003CBE  0012               	return		;funcret
 10040  003CC0                     __end_of_I2C_Master_Write:
 10041                           	opt stack 0
 10042                           tblptru	equ	0xFF8
 10043                           tblptrh	equ	0xFF7
 10044                           tblptrl	equ	0xFF6
 10045                           tablat	equ	0xFF5
 10046                           prodh	equ	0xFF4
 10047                           prodl	equ	0xFF3
 10048                           intcon	equ	0xFF2
 10049                           postinc0	equ	0xFEE
 10050                           wreg	equ	0xFE8
 10051                           postdec1	equ	0xFE5
 10052                           fsr1l	equ	0xFE1
 10053                           indf2	equ	0xFDF
 10054                           postinc2	equ	0xFDE
 10055                           postdec2	equ	0xFDD
 10056                           fsr2h	equ	0xFDA
 10057                           fsr2l	equ	0xFD9
 10058                           status	equ	0xFD8
 10059                           
 10060 ;; *************** function _I2C_Master_Stop *****************
 10061 ;; Defined at:
 10062 ;;		line 41 in file "I2C.c"
 10063 ;; Parameters:    Size  Location     Type
 10064 ;;		None
 10065 ;; Auto vars:     Size  Location     Type
 10066 ;;		None
 10067 ;; Return value:  Size  Location     Type
 10068 ;;                  2  428[None  ] int 
 10069 ;; Registers used:
 10070 ;;		wreg, status,2, status,0, cstack
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10080 ;;Total ram usage:        0 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:    4
 10083 ;; This function calls:
 10084 ;;		_I2C_Master_Wait
 10085 ;; This function is called by:
 10086 ;;		_getTime
 10087 ;;		_setTime
 10088 ;;		_testFrequency
 10089 ;; This function uses a non-reentrant model
 10090 ;;
 10091                           
 10092                           	psect	text36
 10093  003CD0                     __ptext36:
 10094                           	opt stack 0
 10095  003CD0                     _I2C_Master_Stop:
 10096                           	opt stack 23
 10097                           
 10098                           ;I2C.c: 43: I2C_Master_Wait();
 10099                           
 10100                           ;incstack = 0
 10101  003CD0  EC4C  F01E         	call	_I2C_Master_Wait	;wreg free
 10102                           
 10103                           ;I2C.c: 44: PEN = 1;
 10104  003CD4  84C5               	bsf	4037,2,c	;volatile
 10105  003CD6  0012               	return		;funcret
 10106  003CD8                     __end_of_I2C_Master_Stop:
 10107                           	opt stack 0
 10108                           tblptru	equ	0xFF8
 10109                           tblptrh	equ	0xFF7
 10110                           tblptrl	equ	0xFF6
 10111                           tablat	equ	0xFF5
 10112                           prodh	equ	0xFF4
 10113                           prodl	equ	0xFF3
 10114                           intcon	equ	0xFF2
 10115                           postinc0	equ	0xFEE
 10116                           wreg	equ	0xFE8
 10117                           postdec1	equ	0xFE5
 10118                           fsr1l	equ	0xFE1
 10119                           indf2	equ	0xFDF
 10120                           postinc2	equ	0xFDE
 10121                           postdec2	equ	0xFDD
 10122                           fsr2h	equ	0xFDA
 10123                           fsr2l	equ	0xFD9
 10124                           status	equ	0xFD8
 10125                           
 10126 ;; *************** function _I2C_Master_Start *****************
 10127 ;; Defined at:
 10128 ;;		line 29 in file "I2C.c"
 10129 ;; Parameters:    Size  Location     Type
 10130 ;;		None
 10131 ;; Auto vars:     Size  Location     Type
 10132 ;;		None
 10133 ;; Return value:  Size  Location     Type
 10134 ;;                  2  424[None  ] int 
 10135 ;; Registers used:
 10136 ;;		wreg, status,2, status,0, cstack
 10137 ;; Tracked objects:
 10138 ;;		On entry : 0/0
 10139 ;;		On exit  : 0/0
 10140 ;;		Unchanged: 0/0
 10141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10146 ;;Total ram usage:        0 bytes
 10147 ;; Hardware stack levels used:    1
 10148 ;; Hardware stack levels required when called:    4
 10149 ;; This function calls:
 10150 ;;		_I2C_Master_Wait
 10151 ;; This function is called by:
 10152 ;;		_getTime
 10153 ;;		_setTime
 10154 ;;		_testFrequency
 10155 ;; This function uses a non-reentrant model
 10156 ;;
 10157                           
 10158                           	psect	text37
 10159  003CD8                     __ptext37:
 10160                           	opt stack 0
 10161  003CD8                     _I2C_Master_Start:
 10162                           	opt stack 23
 10163                           
 10164                           ;I2C.c: 31: I2C_Master_Wait();
 10165                           
 10166                           ;incstack = 0
 10167  003CD8  EC4C  F01E         	call	_I2C_Master_Wait	;wreg free
 10168                           
 10169                           ;I2C.c: 32: SEN = 1;
 10170  003CDC  80C5               	bsf	4037,0,c	;volatile
 10171  003CDE  0012               	return		;funcret
 10172  003CE0                     __end_of_I2C_Master_Start:
 10173                           	opt stack 0
 10174                           tblptru	equ	0xFF8
 10175                           tblptrh	equ	0xFF7
 10176                           tblptrl	equ	0xFF6
 10177                           tablat	equ	0xFF5
 10178                           prodh	equ	0xFF4
 10179                           prodl	equ	0xFF3
 10180                           intcon	equ	0xFF2
 10181                           postinc0	equ	0xFEE
 10182                           wreg	equ	0xFE8
 10183                           postdec1	equ	0xFE5
 10184                           fsr1l	equ	0xFE1
 10185                           indf2	equ	0xFDF
 10186                           postinc2	equ	0xFDE
 10187                           postdec2	equ	0xFDD
 10188                           fsr2h	equ	0xFDA
 10189                           fsr2l	equ	0xFD9
 10190                           status	equ	0xFD8
 10191                           
 10192 ;; *************** function _I2C_Master_Read *****************
 10193 ;; Defined at:
 10194 ;;		line 53 in file "I2C.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;  a               1    wreg     unsigned char 
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;  a               1   35[COMRAM] unsigned char 
 10199 ;;  temp            1   36[COMRAM] unsigned char 
 10200 ;; Return value:  Size  Location     Type
 10201 ;;                  1    wreg      unsigned char 
 10202 ;; Registers used:
 10203 ;;		wreg, status,2, status,0, cstack
 10204 ;; Tracked objects:
 10205 ;;		On entry : 0/0
 10206 ;;		On exit  : 0/0
 10207 ;;		Unchanged: 0/0
 10208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10212 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10213 ;;Total ram usage:        2 bytes
 10214 ;; Hardware stack levels used:    1
 10215 ;; Hardware stack levels required when called:    4
 10216 ;; This function calls:
 10217 ;;		_I2C_Master_Wait
 10218 ;; This function is called by:
 10219 ;;		_getTime
 10220 ;;		_testFrequency
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           	psect	text38
 10225  003B62                     __ptext38:
 10226                           	opt stack 0
 10227  003B62                     _I2C_Master_Read:
 10228                           	opt stack 23
 10229                           
 10230                           ;incstack = 0
 10231                           ;I2C_Master_Read@a stored from wreg
 10232  003B62  6E24               	movwf	I2C_Master_Read@a,c
 10233                           
 10234                           ;I2C.c: 55: unsigned char temp;
 10235                           ;I2C.c: 56: I2C_Master_Wait();
 10236  003B64  EC4C  F01E         	call	_I2C_Master_Wait	;wreg free
 10237                           
 10238                           ;I2C.c: 57: RCEN = 1;
 10239  003B68  86C5               	bsf	4037,3,c	;volatile
 10240                           
 10241                           ;I2C.c: 58: I2C_Master_Wait();
 10242  003B6A  EC4C  F01E         	call	_I2C_Master_Wait	;wreg free
 10243                           
 10244                           ;I2C.c: 59: temp = SSPBUF;
 10245  003B6E  CFC9 F025          	movff	4041,I2C_Master_Read@temp	;volatile
 10246                           
 10247                           ;I2C.c: 60: I2C_Master_Wait();
 10248  003B72  EC4C  F01E         	call	_I2C_Master_Wait	;wreg free
 10249                           
 10250                           ;I2C.c: 61: ACKDT = (a)?0:1;
 10251  003B76  5024               	movf	I2C_Master_Read@a,w,c
 10252  003B78  A4D8               	btfss	status,2,c
 10253  003B7A  D002               	goto	u6020
 10254  003B7C  8AC5               	bsf	4037,5,c	;volatile
 10255  003B7E  D001               	goto	l6182
 10256  003B80                     u6020:
 10257  003B80  9AC5               	bcf	4037,5,c	;volatile
 10258  003B82                     l6182:
 10259                           
 10260                           ;I2C.c: 62: ACKEN = 1;
 10261  003B82  88C5               	bsf	4037,4,c	;volatile
 10262                           
 10263                           ;I2C.c: 63: return temp;
 10264  003B84  5025               	movf	I2C_Master_Read@temp,w,c
 10265  003B86  0012               	return	
 10266  003B88                     __end_of_I2C_Master_Read:
 10267                           	opt stack 0
 10268                           tblptru	equ	0xFF8
 10269                           tblptrh	equ	0xFF7
 10270                           tblptrl	equ	0xFF6
 10271                           tablat	equ	0xFF5
 10272                           prodh	equ	0xFF4
 10273                           prodl	equ	0xFF3
 10274                           intcon	equ	0xFF2
 10275                           postinc0	equ	0xFEE
 10276                           wreg	equ	0xFE8
 10277                           postdec1	equ	0xFE5
 10278                           fsr1l	equ	0xFE1
 10279                           indf2	equ	0xFDF
 10280                           postinc2	equ	0xFDE
 10281                           postdec2	equ	0xFDD
 10282                           fsr2h	equ	0xFDA
 10283                           fsr2l	equ	0xFD9
 10284                           status	equ	0xFD8
 10285                           
 10286 ;; *************** function _I2C_Master_Wait *****************
 10287 ;; Defined at:
 10288 ;;		line 24 in file "I2C.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;		None
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;		None
 10293 ;; Return value:  Size  Location     Type
 10294 ;;                  1    wreg      void 
 10295 ;; Registers used:
 10296 ;;		wreg, status,2, status,0
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10304 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10305 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;Total ram usage:        1 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:    3
 10309 ;; This function calls:
 10310 ;;		Nothing
 10311 ;; This function is called by:
 10312 ;;		_I2C_Master_Start
 10313 ;;		_I2C_Master_Stop
 10314 ;;		_I2C_Master_Write
 10315 ;;		_I2C_Master_Read
 10316 ;;		_I2C_Master_RepeatedStart
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           	psect	text39
 10321  003C98                     __ptext39:
 10322                           	opt stack 0
 10323  003C98                     _I2C_Master_Wait:
 10324                           	opt stack 23
 10325  003C98                     l499:
 10326  003C98  B4C7               	btfsc	4039,2,c	;volatile
 10327  003C9A  D7FE               	goto	l499
 10328  003C9C  CFC5 F023          	movff	4037,??_I2C_Master_Wait	;volatile
 10329  003CA0  0E1F               	movlw	31
 10330  003CA2  1623               	andwf	??_I2C_Master_Wait,f,c
 10331  003CA4  B4D8               	btfsc	status,2,c
 10332  003CA6  0012               	return	
 10333  003CA8  D7F7               	goto	l499
 10334  003CAA                     __end_of_I2C_Master_Wait:
 10335                           	opt stack 0
 10336                           tblptru	equ	0xFF8
 10337                           tblptrh	equ	0xFF7
 10338                           tblptrl	equ	0xFF6
 10339                           tablat	equ	0xFF5
 10340                           prodh	equ	0xFF4
 10341                           prodl	equ	0xFF3
 10342                           intcon	equ	0xFF2
 10343                           postinc0	equ	0xFEE
 10344                           wreg	equ	0xFE8
 10345                           postdec1	equ	0xFE5
 10346                           fsr1l	equ	0xFE1
 10347                           indf2	equ	0xFDF
 10348                           postinc2	equ	0xFDE
 10349                           postdec2	equ	0xFDD
 10350                           fsr2h	equ	0xFDA
 10351                           fsr2l	equ	0xFD9
 10352                           status	equ	0xFD8
 10353                           
 10354 ;; *************** function _readPastRun *****************
 10355 ;; Defined at:
 10356 ;;		line 23 in file "eeprom.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;  run             2    0[BANK0 ] int 
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;  i               2   16[BANK0 ] int 
 10361 ;;  data           14    2[BANK0 ] int [7]
 10362 ;; Return value:  Size  Location     Type
 10363 ;;                  2    0[BANK0 ] PTR int 
 10364 ;; Registers used:
 10365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10366 ;; Tracked objects:
 10367 ;;		On entry : 0/0
 10368 ;;		On exit  : 0/0
 10369 ;;		Unchanged: 0/0
 10370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10371 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10372 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10374 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10375 ;;Total ram usage:       18 bytes
 10376 ;; Hardware stack levels used:    1
 10377 ;; Hardware stack levels required when called:    4
 10378 ;; This function calls:
 10379 ;;		___wmul
 10380 ;;		_eepromRead
 10381 ;; This function is called by:
 10382 ;;		_showInterface
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           	psect	text40
 10387  003116                     __ptext40:
 10388                           	opt stack 0
 10389  003116                     _readPastRun:
 10390                           	opt stack 25
 10391                           
 10392                           ;eeprom.c: 24: int data[7];
 10393                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
 10394                           
 10395                           ;incstack = 0
 10396  003116  0E00               	movlw	0
 10397  003118  0100               	movlb	0	; () banked
 10398  00311A  6F91               	movwf	(readPastRun@i+1)& (0+255),b
 10399  00311C  0E00               	movlw	0
 10400  00311E  6F90               	movwf	readPastRun@i& (0+255),b
 10401  003120                     l7134:
 10402                           
 10403                           ; BSR set to: 0
 10404  003120  0100               	movlb	0	; () banked
 10405  003122  BF91               	btfsc	(readPastRun@i+1)& (0+255),7,b
 10406  003124  D008               	goto	l7138
 10407  003126  0100               	movlb	0	; () banked
 10408  003128  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 10409  00312A  E137               	bnz	l7144
 10410  00312C  0E07               	movlw	7
 10411  00312E  0100               	movlb	0	; () banked
 10412  003130  5D90               	subwf	readPastRun@i& (0+255),w,b
 10413  003132  B0D8               	btfsc	status,0,c
 10414  003134  D032               	goto	l7144
 10415  003136                     l7138:
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
 10419  003136  C080  F031         	movff	readPastRun@run,___wmul@multiplier
 10420  00313A  C081  F032         	movff	readPastRun@run+1,___wmul@multiplier+1
 10421  00313E  0E00               	movlw	0
 10422  003140  6E34               	movwf	___wmul@multiplicand+1,c
 10423  003142  0E07               	movlw	7
 10424  003144  6E33               	movwf	___wmul@multiplicand,c
 10425  003146  ECC4  F01D         	call	___wmul	;wreg free
 10426  00314A  0100               	movlb	0	; () banked
 10427  00314C  5190               	movf	readPastRun@i& (0+255),w,b
 10428  00314E  2631               	addwf	?___wmul,f,c
 10429  003150  0100               	movlb	0	; () banked
 10430  003152  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 10431  003154  2232               	addwfc	?___wmul+1,f,c
 10432  003156  0E01               	movlw	1
 10433  003158  2631               	addwf	?___wmul,f,c
 10434  00315A  0E00               	movlw	0
 10435  00315C  2232               	addwfc	?___wmul+1,f,c
 10436  00315E  C031  F037         	movff	?___wmul,eepromRead@address
 10437  003162  C032  F038         	movff	?___wmul+1,eepromRead@address+1
 10438  003166  0E00               	movlw	0
 10439  003168  BE38               	btfsc	eepromRead@address+1,7,c
 10440  00316A  0EFF               	movlw	-1
 10441  00316C  6E39               	movwf	eepromRead@address+2,c
 10442  00316E  6E3A               	movwf	eepromRead@address+3,c
 10443  003170  EC2A  F01E         	call	_eepromRead	;wreg free
 10444  003174  90D8               	bcf	status,0,c
 10445  003176  0100               	movlb	0	; () banked
 10446  003178  3590               	rlcf	readPastRun@i& (0+255),w,b
 10447  00317A  6ED9               	movwf	fsr2l,c
 10448  00317C  0100               	movlb	0	; () banked
 10449  00317E  3591               	rlcf	(readPastRun@i+1)& (0+255),w,b
 10450  003180  6EDA               	movwf	fsr2h,c
 10451  003182  0E82               	movlw	low readPastRun@data
 10452  003184  26D9               	addwf	fsr2l,f,c
 10453  003186  0E00               	movlw	high readPastRun@data
 10454  003188  22DA               	addwfc	fsr2h,f,c
 10455  00318A  C037  FFDE         	movff	?_eepromRead,postinc2
 10456  00318E  C038  FFDD         	movff	?_eepromRead+1,postdec2
 10457                           
 10458                           ; BSR set to: 0
 10459  003192  0100               	movlb	0	; () banked
 10460  003194  4B90               	infsnz	readPastRun@i& (0+255),f,b
 10461  003196  2B91               	incf	(readPastRun@i+1)& (0+255),f,b
 10462  003198  D7C3               	goto	l7134
 10463  00319A                     l7144:
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;eeprom.c: 27: }
 10467                           ;eeprom.c: 28: return data;
 10468  00319A  0E82               	movlw	low readPastRun@data
 10469  00319C  0100               	movlb	0	; () banked
 10470  00319E  6F80               	movwf	?_readPastRun& (0+255),b
 10471  0031A0  0E00               	movlw	high readPastRun@data
 10472  0031A2  0100               	movlb	0	; () banked
 10473  0031A4  6F81               	movwf	(?_readPastRun+1)& (0+255),b
 10474  0031A6  0012               	return	
 10475  0031A8                     __end_of_readPastRun:
 10476                           	opt stack 0
 10477                           tblptru	equ	0xFF8
 10478                           tblptrh	equ	0xFF7
 10479                           tblptrl	equ	0xFF6
 10480                           tablat	equ	0xFF5
 10481                           prodh	equ	0xFF4
 10482                           prodl	equ	0xFF3
 10483                           intcon	equ	0xFF2
 10484                           postinc0	equ	0xFEE
 10485                           wreg	equ	0xFE8
 10486                           postdec1	equ	0xFE5
 10487                           fsr1l	equ	0xFE1
 10488                           indf2	equ	0xFDF
 10489                           postinc2	equ	0xFDE
 10490                           postdec2	equ	0xFDD
 10491                           fsr2h	equ	0xFDA
 10492                           fsr2l	equ	0xFD9
 10493                           status	equ	0xFD8
 10494                           
 10495 ;; *************** function _eepromRead *****************
 10496 ;; Defined at:
 10497 ;;		line 66 in file "eeprom.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;  address         4   54[COMRAM] long 
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;		None
 10502 ;; Return value:  Size  Location     Type
 10503 ;;                  2   54[COMRAM] int 
 10504 ;; Registers used:
 10505 ;;		wreg, status,2, status,0
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10511 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;Total ram usage:        4 bytes
 10516 ;; Hardware stack levels used:    1
 10517 ;; Hardware stack levels required when called:    3
 10518 ;; This function calls:
 10519 ;;		Nothing
 10520 ;; This function is called by:
 10521 ;;		_readPastRun
 10522 ;;		_saveNewRun
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text41
 10527  003C54                     __ptext41:
 10528                           	opt stack 0
 10529  003C54                     _eepromRead:
 10530                           	opt stack 25
 10531                           
 10532                           ;eeprom.c: 67: EEADR = address;
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;incstack = 0
 10536  003C54  C037  FFA9         	movff	eepromRead@address,4009	;volatile
 10537                           
 10538                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
 10539  003C58  5038               	movf	eepromRead@address+1,w,c
 10540  003C5A  0B03               	andlw	3
 10541  003C5C  6EAA               	movwf	4010,c	;volatile
 10542                           
 10543                           ;eeprom.c: 69: EECON1 = 0;
 10544  003C5E  0E00               	movlw	0
 10545  003C60  6EA6               	movwf	4006,c	;volatile
 10546                           
 10547                           ;eeprom.c: 70: EECON1 = 1;
 10548  003C62  0E01               	movlw	1
 10549  003C64  6EA6               	movwf	4006,c	;volatile
 10550                           
 10551                           ;eeprom.c: 71: return EEDATA;
 10552  003C66  CFA8 F037          	movff	4008,?_eepromRead	;volatile
 10553  003C6A  6A38               	clrf	?_eepromRead+1,c
 10554  003C6C  0012               	return	
 10555  003C6E                     __end_of_eepromRead:
 10556                           	opt stack 0
 10557                           tblptru	equ	0xFF8
 10558                           tblptrh	equ	0xFF7
 10559                           tblptrl	equ	0xFF6
 10560                           tablat	equ	0xFF5
 10561                           prodh	equ	0xFF4
 10562                           prodl	equ	0xFF3
 10563                           intcon	equ	0xFF2
 10564                           postinc0	equ	0xFEE
 10565                           wreg	equ	0xFE8
 10566                           postdec1	equ	0xFE5
 10567                           fsr1l	equ	0xFE1
 10568                           indf2	equ	0xFDF
 10569                           postinc2	equ	0xFDE
 10570                           postdec2	equ	0xFDD
 10571                           fsr2h	equ	0xFDA
 10572                           fsr2l	equ	0xFD9
 10573                           status	equ	0xFD8
 10574                           
 10575 ;; *************** function ___wmul *****************
 10576 ;; Defined at:
 10577 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;  multiplier      2   48[COMRAM] unsigned int 
 10580 ;;  multiplicand    2   50[COMRAM] unsigned int 
 10581 ;; Auto vars:     Size  Location     Type
 10582 ;;  product         2   52[COMRAM] unsigned int 
 10583 ;; Return value:  Size  Location     Type
 10584 ;;                  2   48[COMRAM] unsigned int 
 10585 ;; Registers used:
 10586 ;;		wreg, status,2, status,0, prodl, prodh
 10587 ;; Tracked objects:
 10588 ;;		On entry : 0/0
 10589 ;;		On exit  : 0/0
 10590 ;;		Unchanged: 0/0
 10591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10592 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10596 ;;Total ram usage:        6 bytes
 10597 ;; Hardware stack levels used:    1
 10598 ;; Hardware stack levels required when called:    3
 10599 ;; This function calls:
 10600 ;;		Nothing
 10601 ;; This function is called by:
 10602 ;;		_readPastRun
 10603 ;;		_fround
 10604 ;;		_scale
 10605 ;;		_printf
 10606 ;;		_saveNewRun
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           	psect	text42
 10611  003B88                     __ptext42:
 10612                           	opt stack 0
 10613  003B88                     ___wmul:
 10614                           	opt stack 24
 10615                           
 10616                           ;incstack = 0
 10617  003B88  5031               	movf	___wmul@multiplier,w,c
 10618  003B8A  0233               	mulwf	___wmul@multiplicand,c
 10619  003B8C  CFF3 F035          	movff	prodl,___wmul@product
 10620  003B90  CFF4 F036          	movff	prodh,___wmul@product+1
 10621  003B94  5031               	movf	___wmul@multiplier,w,c
 10622  003B96  0234               	mulwf	___wmul@multiplicand+1,c
 10623  003B98  50F3               	movf	prodl,w,c
 10624  003B9A  2636               	addwf	___wmul@product+1,f,c
 10625  003B9C  5032               	movf	___wmul@multiplier+1,w,c
 10626  003B9E  0233               	mulwf	___wmul@multiplicand,c
 10627  003BA0  50F3               	movf	prodl,w,c
 10628  003BA2  2636               	addwf	___wmul@product+1,f,c
 10629  003BA4  C035  F031         	movff	___wmul@product,?___wmul
 10630  003BA8  C036  F032         	movff	___wmul@product+1,?___wmul+1
 10631  003BAC  0012               	return	
 10632  003BAE                     __end_of___wmul:
 10633                           	opt stack 0
 10634                           tblptru	equ	0xFF8
 10635                           tblptrh	equ	0xFF7
 10636                           tblptrl	equ	0xFF6
 10637                           tablat	equ	0xFF5
 10638                           prodh	equ	0xFF4
 10639                           prodl	equ	0xFF3
 10640                           intcon	equ	0xFF2
 10641                           postinc0	equ	0xFEE
 10642                           wreg	equ	0xFE8
 10643                           postdec1	equ	0xFE5
 10644                           fsr1l	equ	0xFE1
 10645                           indf2	equ	0xFDF
 10646                           postinc2	equ	0xFDE
 10647                           postdec2	equ	0xFDD
 10648                           fsr2h	equ	0xFDA
 10649                           fsr2l	equ	0xFD9
 10650                           status	equ	0xFD8
 10651                           
 10652 ;; *************** function _pinSetup *****************
 10653 ;; Defined at:
 10654 ;;		line 290 in file "main.c"
 10655 ;; Parameters:    Size  Location     Type
 10656 ;;		None
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;		None
 10659 ;; Return value:  Size  Location     Type
 10660 ;;                  1    wreg      void 
 10661 ;; Registers used:
 10662 ;;		wreg, status,2, status,0
 10663 ;; Tracked objects:
 10664 ;;		On entry : 0/0
 10665 ;;		On exit  : 0/0
 10666 ;;		Unchanged: 0/0
 10667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10672 ;;Total ram usage:        0 bytes
 10673 ;; Hardware stack levels used:    1
 10674 ;; Hardware stack levels required when called:    3
 10675 ;; This function calls:
 10676 ;;		Nothing
 10677 ;; This function is called by:
 10678 ;;		_main
 10679 ;;		_debug
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           	psect	text43
 10684  003A64                     __ptext43:
 10685                           	opt stack 0
 10686  003A64                     _pinSetup:
 10687                           	opt stack 27
 10688                           
 10689                           ;main.c: 296: TRISA = 0xFF;
 10690                           
 10691                           ;incstack = 0
 10692  003A64  6892               	setf	3986,c	;volatile
 10693                           
 10694                           ;main.c: 297: TRISB = 0xFF;
 10695  003A66  6893               	setf	3987,c	;volatile
 10696                           
 10697                           ;main.c: 298: TRISC = 0b11000000;
 10698  003A68  0EC0               	movlw	192
 10699  003A6A  6E94               	movwf	3988,c	;volatile
 10700                           
 10701                           ;main.c: 299: TRISD = 0x00;
 10702  003A6C  0E00               	movlw	0
 10703  003A6E  6E95               	movwf	3989,c	;volatile
 10704                           
 10705                           ;main.c: 300: TRISE = 0x00;
 10706  003A70  0E00               	movlw	0
 10707  003A72  6E96               	movwf	3990,c	;volatile
 10708                           
 10709                           ;main.c: 302: LATA = 0x00;
 10710  003A74  0E00               	movlw	0
 10711  003A76  6E89               	movwf	3977,c	;volatile
 10712                           
 10713                           ;main.c: 303: LATB = 0x00;
 10714  003A78  0E00               	movlw	0
 10715  003A7A  6E8A               	movwf	3978,c	;volatile
 10716                           
 10717                           ;main.c: 304: LATC = 0x00;
 10718  003A7C  0E00               	movlw	0
 10719  003A7E  6E8B               	movwf	3979,c	;volatile
 10720                           
 10721                           ;main.c: 305: LATD = 0x00;
 10722  003A80  0E00               	movlw	0
 10723  003A82  6E8C               	movwf	3980,c	;volatile
 10724                           
 10725                           ;main.c: 306: LATE = 0x00;
 10726  003A84  0E00               	movlw	0
 10727  003A86  6E8D               	movwf	3981,c	;volatile
 10728                           
 10729                           ;main.c: 308: ADCON0 = 0x00;
 10730  003A88  0E00               	movlw	0
 10731  003A8A  6EC2               	movwf	4034,c	;volatile
 10732                           
 10733                           ;main.c: 310: ADCON1 |= 0x0B;
 10734  003A8C  0E0B               	movlw	11
 10735  003A8E  12C1               	iorwf	4033,f,c	;volatile
 10736                           
 10737                           ;main.c: 315: ADCON2 = 0;
 10738  003A90  0E00               	movlw	0
 10739  003A92  6EC0               	movwf	4032,c	;volatile
 10740                           
 10741                           ;main.c: 316: ADCON2 |= 0b010;
 10742  003A94  82C0               	bsf	4032,1,c	;volatile
 10743                           
 10744                           ;main.c: 317: ADCON2 |= 0b110<<3;
 10745  003A96  0E30               	movlw	48
 10746  003A98  12C0               	iorwf	4032,f,c	;volatile
 10747                           
 10748                           ;main.c: 318: ADCON2 |= 1<<7;
 10749  003A9A  8EC0               	bsf	4032,7,c	;volatile
 10750                           
 10751                           ;main.c: 321: INT1IE = 1;
 10752  003A9C  86F0               	bsf	intcon3,3,c	;volatile
 10753                           
 10754                           ;main.c: 322: INT0IE = 1;
 10755  003A9E  88F2               	bsf	intcon,4,c	;volatile
 10756                           
 10757                           ;main.c: 323: (INTCONbits.GIE = 1);
 10758  003AA0  8EF2               	bsf	intcon,7,c	;volatile
 10759  003AA2  0012               	return		;funcret
 10760  003AA4                     __end_of_pinSetup:
 10761                           	opt stack 0
 10762                           tblptru	equ	0xFF8
 10763                           tblptrh	equ	0xFF7
 10764                           tblptrl	equ	0xFF6
 10765                           tablat	equ	0xFF5
 10766                           prodh	equ	0xFF4
 10767                           prodl	equ	0xFF3
 10768                           intcon	equ	0xFF2
 10769                           intcon3	equ	0xFF0
 10770                           postinc0	equ	0xFEE
 10771                           wreg	equ	0xFE8
 10772                           postdec1	equ	0xFE5
 10773                           fsr1l	equ	0xFE1
 10774                           indf2	equ	0xFDF
 10775                           postinc2	equ	0xFDE
 10776                           postdec2	equ	0xFDD
 10777                           fsr2h	equ	0xFDA
 10778                           fsr2l	equ	0xFD9
 10779                           status	equ	0xFD8
 10780                           
 10781 ;; *************** function _lcdHome *****************
 10782 ;; Defined at:
 10783 ;;		line 70 in file "lcd.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;		None
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;		None
 10788 ;; Return value:  Size  Location     Type
 10789 ;;                  2   20[None  ] int 
 10790 ;; Registers used:
 10791 ;;		wreg, status,2, status,0, cstack
 10792 ;; Tracked objects:
 10793 ;;		On entry : 0/0
 10794 ;;		On exit  : 0/0
 10795 ;;		Unchanged: 0/0
 10796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;Total ram usage:        0 bytes
 10802 ;; Hardware stack levels used:    1
 10803 ;; Hardware stack levels required when called:    5
 10804 ;; This function calls:
 10805 ;;		_lcdInst
 10806 ;; This function is called by:
 10807 ;;		_main
 10808 ;; This function uses a non-reentrant model
 10809 ;;
 10810                           
 10811                           	psect	text44
 10812  003CE0                     __ptext44:
 10813                           	opt stack 0
 10814  003CE0                     _lcdHome:
 10815                           	opt stack 25
 10816                           
 10817                           ;lcd.c: 71: lcdInst(0b11000000);
 10818                           
 10819                           ;incstack = 0
 10820  003CE0  0EC0               	movlw	192
 10821  003CE2  ECFA  F01D         	call	_lcdInst
 10822  003CE6  0012               	return		;funcret
 10823  003CE8                     __end_of_lcdHome:
 10824                           	opt stack 0
 10825                           tblptru	equ	0xFF8
 10826                           tblptrh	equ	0xFF7
 10827                           tblptrl	equ	0xFF6
 10828                           tablat	equ	0xFF5
 10829                           prodh	equ	0xFF4
 10830                           prodl	equ	0xFF3
 10831                           intcon	equ	0xFF2
 10832                           intcon3	equ	0xFF0
 10833                           postinc0	equ	0xFEE
 10834                           wreg	equ	0xFE8
 10835                           postdec1	equ	0xFE5
 10836                           fsr1l	equ	0xFE1
 10837                           indf2	equ	0xFDF
 10838                           postinc2	equ	0xFDE
 10839                           postdec2	equ	0xFDD
 10840                           fsr2h	equ	0xFDA
 10841                           fsr2l	equ	0xFD9
 10842                           status	equ	0xFD8
 10843                           
 10844 ;; *************** function _initServo *****************
 10845 ;; Defined at:
 10846 ;;		line 21 in file "servo.c"
 10847 ;; Parameters:    Size  Location     Type
 10848 ;;  motor           2   94[BANK0 ] PTR int 
 10849 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 10850 ;;  angle           2   96[BANK0 ] int 
 10851 ;; Auto vars:     Size  Location     Type
 10852 ;;  i               2  102[BANK0 ] int 
 10853 ;; Return value:  Size  Location     Type
 10854 ;;                  1    wreg      void 
 10855 ;; Registers used:
 10856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10857 ;; Tracked objects:
 10858 ;;		On entry : 0/0
 10859 ;;		On exit  : 0/0
 10860 ;;		Unchanged: 0/0
 10861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10862 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10863 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10864 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10865 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;Total ram usage:       10 bytes
 10867 ;; Hardware stack levels used:    1
 10868 ;; Hardware stack levels required when called:    7
 10869 ;; This function calls:
 10870 ;;		_initTimer
 10871 ;;		_setAngle
 10872 ;;		_startTimer
 10873 ;; This function is called by:
 10874 ;;		_main
 10875 ;; This function uses a non-reentrant model
 10876 ;;
 10877                           
 10878                           	psect	text45
 10879  002A48                     __ptext45:
 10880                           	opt stack 0
 10881  002A48                     _initServo:
 10882                           	opt stack 23
 10883                           
 10884                           ;servo.c: 24: for(int i = 0; i < n; i++){
 10885                           
 10886                           ;incstack = 0
 10887  002A48  0E00               	movlw	0
 10888  002A4A  0100               	movlb	0	; () banked
 10889  002A4C  6FE7               	movwf	(initServo@i+1)& (0+255),b
 10890  002A4E  0E00               	movlw	0
 10891  002A50  6FE6               	movwf	initServo@i& (0+255),b
 10892  002A52  D017               	goto	l7332
 10893  002A54                     l7326:
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;servo.c: 25: if(servos[i] == motor)return;
 10897  002A54  90D8               	bcf	status,0,c
 10898  002A56  0100               	movlb	0	; () banked
 10899  002A58  35E6               	rlcf	initServo@i& (0+255),w,b
 10900  002A5A  6ED9               	movwf	fsr2l,c
 10901  002A5C  0100               	movlb	0	; () banked
 10902  002A5E  35E7               	rlcf	(initServo@i+1)& (0+255),w,b
 10903  002A60  6EDA               	movwf	fsr2h,c
 10904  002A62  0E63               	movlw	low _servos
 10905  002A64  26D9               	addwf	fsr2l,f,c
 10906  002A66  0E01               	movlw	high _servos
 10907  002A68  22DA               	addwfc	fsr2h,f,c
 10908  002A6A  0100               	movlb	0	; () banked
 10909  002A6C  51DE               	movf	initServo@motor& (0+255),w,b
 10910  002A6E  18DE               	xorwf	postinc2,w,c
 10911  002A70  E105               	bnz	l7330
 10912  002A72  0100               	movlb	0	; () banked
 10913  002A74  51DF               	movf	(initServo@motor+1)& (0+255),w,b
 10914  002A76  18DE               	xorwf	postinc2,w,c
 10915  002A78  B4D8               	btfsc	status,2,c
 10916  002A7A  0012               	return	
 10917  002A7C                     l7330:
 10918                           
 10919                           ; BSR set to: 0
 10920  002A7C  0100               	movlb	0	; () banked
 10921  002A7E  4BE6               	infsnz	initServo@i& (0+255),f,b
 10922  002A80  2BE7               	incf	(initServo@i+1)& (0+255),f,b
 10923  002A82                     l7332:
 10924                           
 10925                           ; BSR set to: 0
 10926  002A82  0100               	movlb	0	; () banked
 10927  002A84  51FC               	movf	_n& (0+255),w,b
 10928  002A86  0100               	movlb	0	; () banked
 10929  002A88  5DE6               	subwf	initServo@i& (0+255),w,b
 10930  002A8A  0100               	movlb	0	; () banked
 10931  002A8C  51E7               	movf	(initServo@i+1)& (0+255),w,b
 10932  002A8E  0A80               	xorlw	128
 10933  002A90  0100               	movlb	0	; () banked
 10934  002A92  6FE2               	movwf	??_initServo& (0+255),b
 10935  002A94  0100               	movlb	0	; () banked
 10936  002A96  51FD               	movf	(_n+1)& (0+255),w,b
 10937  002A98  0A80               	xorlw	128
 10938  002A9A  0100               	movlb	0	; () banked
 10939  002A9C  59E2               	subwfb	??_initServo& (0+255),w,b
 10940  002A9E  A0D8               	btfss	status,0,c
 10941  002AA0  D7D9               	goto	l7326
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;servo.c: 26: }
 10945                           ;servo.c: 28: n++;
 10946                           
 10947                           ; BSR set to: 0
 10948  002AA2  0100               	movlb	0	; () banked
 10949  002AA4  4BFC               	infsnz	_n& (0+255),f,b
 10950  002AA6  2BFD               	incf	(_n+1)& (0+255),f,b
 10951                           
 10952                           ; BSR set to: 0
 10953                           ;servo.c: 29: servos[n-1] = motor;
 10954  002AA8  0EFE               	movlw	254
 10955  002AAA  0100               	movlb	0	; () banked
 10956  002AAC  6FE2               	movwf	??_initServo& (0+255),b
 10957  002AAE  0EFF               	movlw	255
 10958  002AB0  0100               	movlb	0	; () banked
 10959  002AB2  6FE3               	movwf	(??_initServo+1)& (0+255),b
 10960  002AB4  C0FC  F0E4         	movff	_n,??_initServo+2
 10961  002AB8  C0FD  F0E5         	movff	_n+1,??_initServo+3
 10962  002ABC  90D8               	bcf	status,0,c
 10963  002ABE  0100               	movlb	0	; () banked
 10964  002AC0  37E4               	rlcf	(??_initServo+2)& (0+255),f,b
 10965  002AC2  37E5               	rlcf	(??_initServo+3)& (0+255),f,b
 10966  002AC4  0100               	movlb	0	; () banked
 10967  002AC6  51E2               	movf	??_initServo& (0+255),w,b
 10968  002AC8  0100               	movlb	0	; () banked
 10969  002ACA  27E4               	addwf	(??_initServo+2)& (0+255),f,b
 10970  002ACC  0100               	movlb	0	; () banked
 10971  002ACE  51E3               	movf	(??_initServo+1)& (0+255),w,b
 10972  002AD0  0100               	movlb	0	; () banked
 10973  002AD2  23E5               	addwfc	(??_initServo+3)& (0+255),f,b
 10974  002AD4  0E63               	movlw	low _servos
 10975  002AD6  0100               	movlb	0	; () banked
 10976  002AD8  25E4               	addwf	(??_initServo+2)& (0+255),w,b
 10977  002ADA  6ED9               	movwf	fsr2l,c
 10978  002ADC  0E01               	movlw	high _servos
 10979  002ADE  0100               	movlb	0	; () banked
 10980  002AE0  21E5               	addwfc	(??_initServo+3)& (0+255),w,b
 10981  002AE2  6EDA               	movwf	fsr2h,c
 10982  002AE4  C0DE  FFDE         	movff	initServo@motor,postinc2
 10983  002AE8  C0DF  FFDD         	movff	initServo@motor+1,postdec2
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;servo.c: 30: setAngle(motor, angle);
 10987  002AEC  C0DE  F0D4         	movff	initServo@motor,setAngle@motor
 10988  002AF0  C0DF  F0D5         	movff	initServo@motor+1,setAngle@motor+1
 10989  002AF4  C0E0  F0D6         	movff	initServo@angle,setAngle@angle
 10990  002AF8  C0E1  F0D7         	movff	initServo@angle+1,setAngle@angle+1
 10991  002AFC  EC95  F015         	call	_setAngle	;wreg free
 10992                           
 10993                           ;servo.c: 32: initTimer(0);
 10994  002B00  0E00               	movlw	0
 10995  002B02  6E24               	movwf	initTimer@timer+1,c
 10996  002B04  0E00               	movlw	0
 10997  002B06  6E23               	movwf	initTimer@timer,c
 10998  002B08  ECEA  F01C         	call	_initTimer	;wreg free
 10999                           
 11000                           ;servo.c: 33: startTimer(0,0);
 11001  002B0C  0E00               	movlw	0
 11002  002B0E  6E24               	movwf	startTimer@timer+1,c
 11003  002B10  0E00               	movlw	0
 11004  002B12  6E23               	movwf	startTimer@timer,c
 11005  002B14  0E00               	movlw	0
 11006  002B16  6E25               	movwf	startTimer@val,c
 11007  002B18  0E00               	movlw	0
 11008  002B1A  6E26               	movwf	startTimer@val+1,c
 11009  002B1C  0E00               	movlw	0
 11010  002B1E  6E27               	movwf	startTimer@val+2,c
 11011  002B20  0E00               	movlw	0
 11012  002B22  6E28               	movwf	startTimer@val+3,c
 11013  002B24  EC9E  F01C         	call	_startTimer	;wreg free
 11014  002B28  0012               	return		;funcret
 11015  002B2A                     __end_of_initServo:
 11016                           	opt stack 0
 11017                           tblptru	equ	0xFF8
 11018                           tblptrh	equ	0xFF7
 11019                           tblptrl	equ	0xFF6
 11020                           tablat	equ	0xFF5
 11021                           prodh	equ	0xFF4
 11022                           prodl	equ	0xFF3
 11023                           intcon	equ	0xFF2
 11024                           intcon3	equ	0xFF0
 11025                           postinc0	equ	0xFEE
 11026                           wreg	equ	0xFE8
 11027                           postdec1	equ	0xFE5
 11028                           fsr1l	equ	0xFE1
 11029                           indf2	equ	0xFDF
 11030                           postinc2	equ	0xFDE
 11031                           postdec2	equ	0xFDD
 11032                           fsr2h	equ	0xFDA
 11033                           fsr2l	equ	0xFD9
 11034                           status	equ	0xFD8
 11035                           
 11036 ;; *************** function _startTimer *****************
 11037 ;; Defined at:
 11038 ;;		line 76 in file "timer.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;  timer           2   34[COMRAM] int 
 11041 ;;  val             4   36[COMRAM] long 
 11042 ;; Auto vars:     Size  Location     Type
 11043 ;;		None
 11044 ;; Return value:  Size  Location     Type
 11045 ;;                  1    wreg      void 
 11046 ;; Registers used:
 11047 ;;		wreg, status,2, status,0
 11048 ;; Tracked objects:
 11049 ;;		On entry : 0/0
 11050 ;;		On exit  : 0/0
 11051 ;;		Unchanged: 0/0
 11052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11053 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11055 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11056 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11057 ;;Total ram usage:        8 bytes
 11058 ;; Hardware stack levels used:    1
 11059 ;; Hardware stack levels required when called:    3
 11060 ;; This function calls:
 11061 ;;		Nothing
 11062 ;; This function is called by:
 11063 ;;		_main
 11064 ;;		_initServo
 11065 ;;		_testFrequency
 11066 ;; This function uses a non-reentrant model
 11067 ;;
 11068                           
 11069                           	psect	text46
 11070  00393C                     __ptext46:
 11071                           	opt stack 0
 11072  00393C                     _startTimer:
 11073                           	opt stack 27
 11074                           
 11075                           ;timer.c: 77: switch(timer){
 11076                           
 11077                           ;incstack = 0
 11078  00393C  D012               	goto	l7038
 11079  00393E                     l444:
 11080                           
 11081                           ;timer.c: 79: TMR0H = val>>8;
 11082  00393E  C026  FFD7         	movff	startTimer@val+1,4055	;volatile
 11083                           
 11084                           ;timer.c: 80: TMR0L = val;
 11085  003942  C025  FFD6         	movff	startTimer@val,4054	;volatile
 11086                           
 11087                           ;timer.c: 81: T0CON |= 1<<7;
 11088  003946  8ED5               	bsf	4053,7,c	;volatile
 11089                           
 11090                           ;timer.c: 82: break;
 11091  003948  0012               	return	
 11092  00394A                     l446:
 11093                           
 11094                           ;timer.c: 84: TMR1H = val>>8;
 11095  00394A  C026  FFCF         	movff	startTimer@val+1,4047	;volatile
 11096                           
 11097                           ;timer.c: 85: TMR1L = val;
 11098  00394E  C025  FFCE         	movff	startTimer@val,4046	;volatile
 11099                           
 11100                           ;timer.c: 86: T1CON |= 1<<0;
 11101  003952  80CD               	bsf	4045,0,c	;volatile
 11102                           
 11103                           ;timer.c: 87: break;
 11104  003954  0012               	return	
 11105  003956                     l447:
 11106                           
 11107                           ;timer.c: 89: TMR3H = val>>8;
 11108  003956  C026  FFB3         	movff	startTimer@val+1,4019	;volatile
 11109                           
 11110                           ;timer.c: 90: TMR3L = val;
 11111  00395A  C025  FFB2         	movff	startTimer@val,4018	;volatile
 11112                           
 11113                           ;timer.c: 91: T3CON |= 1<<0;
 11114  00395E  80B1               	bsf	4017,0,c	;volatile
 11115                           
 11116                           ;timer.c: 92: }
 11117  003960  0012               	return	
 11118  003962                     l7038:
 11119  003962  C023  F029         	movff	startTimer@timer,??_startTimer
 11120  003966  C024  F02A         	movff	startTimer@timer+1,??_startTimer+1
 11121                           
 11122                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11123                           ; Switch size 1, requested type "space"
 11124                           ; Number of cases is 1, Range of values is 0 to 0
 11125                           ; switch strategies available:
 11126                           ; Name         Instructions Cycles
 11127                           ; simple_byte            4     3 (average)
 11128                           ;	Chosen strategy is simple_byte
 11129  00396A  502A               	movf	??_startTimer+1,w,c
 11130  00396C  0A00               	xorlw	0	; case 0
 11131  00396E  A4D8               	btfss	status,2,c
 11132  003970  0012               	return	
 11133                           
 11134                           ; Switch size 1, requested type "space"
 11135                           ; Number of cases is 3, Range of values is 0 to 3
 11136                           ; switch strategies available:
 11137                           ; Name         Instructions Cycles
 11138                           ; simple_byte           10     6 (average)
 11139                           ;	Chosen strategy is simple_byte
 11140  003972  5029               	movf	??_startTimer,w,c
 11141  003974  0A00               	xorlw	0	; case 0
 11142  003976  B4D8               	btfsc	status,2,c
 11143  003978  D7E2               	goto	l444
 11144  00397A  0A01               	xorlw	1	; case 1
 11145  00397C  B4D8               	btfsc	status,2,c
 11146  00397E  D7E5               	goto	l446
 11147  003980  0A02               	xorlw	2	; case 3
 11148  003982  A4D8               	btfss	status,2,c
 11149  003984  0012               	return	
 11150  003986  D7E7               	goto	l447
 11151  003988                     __end_of_startTimer:
 11152                           	opt stack 0
 11153                           tblptru	equ	0xFF8
 11154                           tblptrh	equ	0xFF7
 11155                           tblptrl	equ	0xFF6
 11156                           tablat	equ	0xFF5
 11157                           prodh	equ	0xFF4
 11158                           prodl	equ	0xFF3
 11159                           intcon	equ	0xFF2
 11160                           intcon3	equ	0xFF0
 11161                           postinc0	equ	0xFEE
 11162                           wreg	equ	0xFE8
 11163                           postdec1	equ	0xFE5
 11164                           fsr1l	equ	0xFE1
 11165                           indf2	equ	0xFDF
 11166                           postinc2	equ	0xFDE
 11167                           postdec2	equ	0xFDD
 11168                           fsr2h	equ	0xFDA
 11169                           fsr2l	equ	0xFD9
 11170                           status	equ	0xFD8
 11171                           
 11172 ;; *************** function _setAngle *****************
 11173 ;; Defined at:
 11174 ;;		line 44 in file "servo.c"
 11175 ;; Parameters:    Size  Location     Type
 11176 ;;  motor           2   84[BANK0 ] PTR int 
 11177 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 11178 ;;  angle           2   86[BANK0 ] int 
 11179 ;; Auto vars:     Size  Location     Type
 11180 ;;  i               2   92[BANK0 ] int 
 11181 ;;  period          2   90[BANK0 ] unsigned int 
 11182 ;; Return value:  Size  Location     Type
 11183 ;;                  1    wreg      void 
 11184 ;; Registers used:
 11185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11186 ;; Tracked objects:
 11187 ;;		On entry : 0/0
 11188 ;;		On exit  : 0/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11191 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11192 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11193 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11194 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11195 ;;Total ram usage:       10 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    6
 11198 ;; This function calls:
 11199 ;;		_angleToPulse
 11200 ;; This function is called by:
 11201 ;;		_sortBattery
 11202 ;;		_initServo
 11203 ;; This function uses a non-reentrant model
 11204 ;;
 11205                           
 11206                           	psect	text47
 11207  002B2A                     __ptext47:
 11208                           	opt stack 0
 11209  002B2A                     _setAngle:
 11210                           	opt stack 23
 11211                           
 11212                           ;servo.c: 45: unsigned int period = 50000;
 11213                           
 11214                           ;incstack = 0
 11215  002B2A  0EC3               	movlw	195
 11216  002B2C  0100               	movlb	0	; () banked
 11217  002B2E  6FDB               	movwf	(setAngle@period+1)& (0+255),b
 11218  002B30  0E50               	movlw	80
 11219  002B32  6FDA               	movwf	setAngle@period& (0+255),b
 11220                           
 11221                           ;servo.c: 46: for(int i = 0; i < n; i++){
 11222  002B34  0E00               	movlw	0
 11223  002B36  0100               	movlb	0	; () banked
 11224  002B38  6FDD               	movwf	(setAngle@i+1)& (0+255),b
 11225  002B3A  0E00               	movlw	0
 11226  002B3C  6FDC               	movwf	setAngle@i& (0+255),b
 11227  002B3E  D03F               	goto	l7092
 11228  002B40                     l7084:
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;servo.c: 47: if(servos[i] == motor){
 11232  002B40  90D8               	bcf	status,0,c
 11233  002B42  0100               	movlb	0	; () banked
 11234  002B44  35DC               	rlcf	setAngle@i& (0+255),w,b
 11235  002B46  6ED9               	movwf	fsr2l,c
 11236  002B48  0100               	movlb	0	; () banked
 11237  002B4A  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 11238  002B4C  6EDA               	movwf	fsr2h,c
 11239  002B4E  0E63               	movlw	low _servos
 11240  002B50  26D9               	addwf	fsr2l,f,c
 11241  002B52  0E01               	movlw	high _servos
 11242  002B54  22DA               	addwfc	fsr2h,f,c
 11243  002B56  0100               	movlb	0	; () banked
 11244  002B58  51D4               	movf	setAngle@motor& (0+255),w,b
 11245  002B5A  18DE               	xorwf	postinc2,w,c
 11246  002B5C  E11C               	bnz	l7088
 11247  002B5E  0100               	movlb	0	; () banked
 11248  002B60  51D5               	movf	(setAngle@motor+1)& (0+255),w,b
 11249  002B62  18DE               	xorwf	postinc2,w,c
 11250  002B64  A4D8               	btfss	status,2,c
 11251  002B66  D017               	goto	l7088
 11252                           
 11253                           ; BSR set to: 0
 11254                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
 11255  002B68  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
 11256  002B6C  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
 11257  002B70  EC2C  F010         	call	_angleToPulse	;wreg free
 11258  002B74  90D8               	bcf	status,0,c
 11259  002B76  0100               	movlb	0	; () banked
 11260  002B78  35DC               	rlcf	setAngle@i& (0+255),w,b
 11261  002B7A  6ED9               	movwf	fsr2l,c
 11262  002B7C  0100               	movlb	0	; () banked
 11263  002B7E  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 11264  002B80  6EDA               	movwf	fsr2h,c
 11265  002B82  0E5B               	movlw	low _pulse
 11266  002B84  26D9               	addwf	fsr2l,f,c
 11267  002B86  0E01               	movlw	high _pulse
 11268  002B88  22DA               	addwfc	fsr2h,f,c
 11269  002B8A  0100               	movlb	0	; () banked
 11270  002B8C  C0BD  FFDE         	movff	?_angleToPulse,postinc2
 11271  002B90  0100               	movlb	0	; () banked
 11272  002B92  C0BE  FFDD         	movff	?_angleToPulse+1,postdec2
 11273  002B96                     l7088:
 11274                           
 11275                           ; BSR set to: 0
 11276                           ;servo.c: 49: }
 11277                           ;servo.c: 50: period-=pulse[i];
 11278  002B96  90D8               	bcf	status,0,c
 11279  002B98  0100               	movlb	0	; () banked
 11280  002B9A  35DC               	rlcf	setAngle@i& (0+255),w,b
 11281  002B9C  6ED9               	movwf	fsr2l,c
 11282  002B9E  0100               	movlb	0	; () banked
 11283  002BA0  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 11284  002BA2  6EDA               	movwf	fsr2h,c
 11285  002BA4  0E5B               	movlw	low _pulse
 11286  002BA6  26D9               	addwf	fsr2l,f,c
 11287  002BA8  0E01               	movlw	high _pulse
 11288  002BAA  22DA               	addwfc	fsr2h,f,c
 11289  002BAC  50DE               	movf	postinc2,w,c
 11290  002BAE  0100               	movlb	0	; () banked
 11291  002BB0  5FDA               	subwf	setAngle@period& (0+255),f,b
 11292  002BB2  50DD               	movf	postdec2,w,c
 11293  002BB4  0100               	movlb	0	; () banked
 11294  002BB6  5BDB               	subwfb	(setAngle@period+1)& (0+255),f,b
 11295                           
 11296                           ; BSR set to: 0
 11297  002BB8  0100               	movlb	0	; () banked
 11298  002BBA  4BDC               	infsnz	setAngle@i& (0+255),f,b
 11299  002BBC  2BDD               	incf	(setAngle@i+1)& (0+255),f,b
 11300  002BBE                     l7092:
 11301                           
 11302                           ; BSR set to: 0
 11303  002BBE  0100               	movlb	0	; () banked
 11304  002BC0  51FC               	movf	_n& (0+255),w,b
 11305  002BC2  0100               	movlb	0	; () banked
 11306  002BC4  5DDC               	subwf	setAngle@i& (0+255),w,b
 11307  002BC6  0100               	movlb	0	; () banked
 11308  002BC8  51DD               	movf	(setAngle@i+1)& (0+255),w,b
 11309  002BCA  0A80               	xorlw	128
 11310  002BCC  0100               	movlb	0	; () banked
 11311  002BCE  6FD8               	movwf	??_setAngle& (0+255),b
 11312  002BD0  0100               	movlb	0	; () banked
 11313  002BD2  51FD               	movf	(_n+1)& (0+255),w,b
 11314  002BD4  0A80               	xorlw	128
 11315  002BD6  0100               	movlb	0	; () banked
 11316  002BD8  59D8               	subwfb	??_setAngle& (0+255),w,b
 11317  002BDA  A0D8               	btfss	status,0,c
 11318  002BDC  D7B1               	goto	l7084
 11319                           
 11320                           ; BSR set to: 0
 11321                           ;servo.c: 51: }
 11322                           ;servo.c: 52: pulse[n] = period;
 11323                           
 11324                           ; BSR set to: 0
 11325  002BDE  90D8               	bcf	status,0,c
 11326  002BE0  0100               	movlb	0	; () banked
 11327  002BE2  35FC               	rlcf	_n& (0+255),w,b
 11328  002BE4  6ED9               	movwf	fsr2l,c
 11329  002BE6  0100               	movlb	0	; () banked
 11330  002BE8  35FD               	rlcf	(_n+1)& (0+255),w,b
 11331  002BEA  6EDA               	movwf	fsr2h,c
 11332  002BEC  0E5B               	movlw	low _pulse
 11333  002BEE  26D9               	addwf	fsr2l,f,c
 11334  002BF0  0E01               	movlw	high _pulse
 11335  002BF2  22DA               	addwfc	fsr2h,f,c
 11336  002BF4  C0DA  FFDE         	movff	setAngle@period,postinc2
 11337  002BF8  C0DB  FFDD         	movff	setAngle@period+1,postdec2
 11338                           
 11339                           ; BSR set to: 0
 11340  002BFC  0012               	return		;funcret
 11341  002BFE                     __end_of_setAngle:
 11342                           	opt stack 0
 11343                           tblptru	equ	0xFF8
 11344                           tblptrh	equ	0xFF7
 11345                           tblptrl	equ	0xFF6
 11346                           tablat	equ	0xFF5
 11347                           prodh	equ	0xFF4
 11348                           prodl	equ	0xFF3
 11349                           intcon	equ	0xFF2
 11350                           intcon3	equ	0xFF0
 11351                           postinc0	equ	0xFEE
 11352                           wreg	equ	0xFE8
 11353                           postdec1	equ	0xFE5
 11354                           fsr1l	equ	0xFE1
 11355                           indf2	equ	0xFDF
 11356                           postinc2	equ	0xFDE
 11357                           postdec2	equ	0xFDD
 11358                           fsr2h	equ	0xFDA
 11359                           fsr2l	equ	0xFD9
 11360                           status	equ	0xFD8
 11361                           
 11362 ;; *************** function _angleToPulse *****************
 11363 ;; Defined at:
 11364 ;;		line 36 in file "servo.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;  angle           2   61[BANK0 ] int 
 11367 ;; Auto vars:     Size  Location     Type
 11368 ;;  a000            4   80[BANK0 ] long 
 11369 ;;  a180            4   73[BANK0 ] long 
 11370 ;;  offset          4   69[BANK0 ] long 
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  4   61[BANK0 ] long 
 11373 ;; Registers used:
 11374 ;;		wreg, status,2, status,0, cstack
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11383 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11384 ;;Total ram usage:       23 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    5
 11387 ;; This function calls:
 11388 ;;		___altoft
 11389 ;;		___awtoft
 11390 ;;		___ftadd
 11391 ;;		___ftdiv
 11392 ;;		___ftmul
 11393 ;;		___fttol
 11394 ;; This function is called by:
 11395 ;;		_setAngle
 11396 ;; This function uses a non-reentrant model
 11397 ;;
 11398                           
 11399                           	psect	text48
 11400  002058                     __ptext48:
 11401                           	opt stack 0
 11402  002058                     _angleToPulse:
 11403                           	opt stack 23
 11404                           
 11405                           ;servo.c: 37: long offset = -600;
 11406                           
 11407                           ; BSR set to: 0
 11408                           ;incstack = 0
 11409  002058  0EA8               	movlw	168
 11410  00205A  0100               	movlb	0	; () banked
 11411  00205C  6FC5               	movwf	angleToPulse@offset& (0+255),b
 11412  00205E  0EFD               	movlw	253
 11413  002060  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
 11414  002062  0EFF               	movlw	255
 11415  002064  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
 11416  002066  0EFF               	movlw	255
 11417  002068  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
 11418                           
 11419                           ;servo.c: 38: long a000 = 1250;
 11420  00206A  0EE2               	movlw	226
 11421  00206C  0100               	movlb	0	; () banked
 11422  00206E  6FD0               	movwf	angleToPulse@a000& (0+255),b
 11423  002070  0E04               	movlw	4
 11424  002072  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
 11425  002074  0E00               	movlw	0
 11426  002076  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
 11427  002078  0E00               	movlw	0
 11428  00207A  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
 11429                           
 11430                           ;servo.c: 39: long a180 = 6250;
 11431  00207C  0E6A               	movlw	106
 11432  00207E  0100               	movlb	0	; () banked
 11433  002080  6FC9               	movwf	angleToPulse@a180& (0+255),b
 11434  002082  0E18               	movlw	24
 11435  002084  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
 11436  002086  0E00               	movlw	0
 11437  002088  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
 11438  00208A  0E00               	movlw	0
 11439  00208C  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
 11440                           
 11441                           ; BSR set to: 0
 11442                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 11443  00208E  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
 11444  002092  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
 11445  002096  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
 11446  00209A  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
 11447  00209E  0100               	movlb	0	; () banked
 11448  0020A0  1FC1               	comf	??_angleToPulse& (0+255),f,b
 11449  0020A2  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
 11450  0020A4  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
 11451  0020A6  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
 11452  0020A8  2BC1               	incf	??_angleToPulse& (0+255),f,b
 11453  0020AA  0E00               	movlw	0
 11454  0020AC  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 11455  0020AE  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 11456  0020B0  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 11457  0020B2  0100               	movlb	0	; () banked
 11458  0020B4  51C9               	movf	angleToPulse@a180& (0+255),w,b
 11459  0020B6  0100               	movlb	0	; () banked
 11460  0020B8  25C1               	addwf	??_angleToPulse& (0+255),w,b
 11461  0020BA  6E2B               	movwf	___altoft@c,c
 11462  0020BC  0100               	movlb	0	; () banked
 11463  0020BE  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
 11464  0020C0  0100               	movlb	0	; () banked
 11465  0020C2  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 11466  0020C4  6E2C               	movwf	___altoft@c+1,c
 11467  0020C6  0100               	movlb	0	; () banked
 11468  0020C8  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
 11469  0020CA  0100               	movlb	0	; () banked
 11470  0020CC  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 11471  0020CE  6E2D               	movwf	___altoft@c+2,c
 11472  0020D0  0100               	movlb	0	; () banked
 11473  0020D2  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
 11474  0020D4  0100               	movlb	0	; () banked
 11475  0020D6  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 11476  0020D8  6E2E               	movwf	___altoft@c+3,c
 11477  0020DA  EC24  F01A         	call	___altoft	;wreg free
 11478  0020DE  C02B  F08C         	movff	?___altoft,___ftmul@f2
 11479  0020E2  C02C  F08D         	movff	?___altoft+1,___ftmul@f2+1
 11480  0020E6  C02D  F08E         	movff	?___altoft+2,___ftmul@f2+2
 11481  0020EA  0E00               	movlw	0
 11482  0020EC  6E38               	movwf	___ftdiv@f2,c
 11483  0020EE  0E34               	movlw	52
 11484  0020F0  6E39               	movwf	___ftdiv@f2+1,c
 11485  0020F2  0E43               	movlw	67
 11486  0020F4  6E3A               	movwf	___ftdiv@f2+2,c
 11487  0020F6  C0BD  F02B         	movff	angleToPulse@angle,___awtoft@c
 11488  0020FA  C0BE  F02C         	movff	angleToPulse@angle+1,___awtoft@c+1
 11489  0020FE  EC6E  F01D         	call	___awtoft	;wreg free
 11490  002102  C02B  F035         	movff	?___awtoft,___ftdiv@f1
 11491  002106  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
 11492  00210A  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
 11493  00210E  EC2F  F013         	call	___ftdiv	;wreg free
 11494  002112  C035  F089         	movff	?___ftdiv,___ftmul@f1
 11495  002116  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
 11496  00211A  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
 11497  00211E  EC7D  F00F         	call	___ftmul	;wreg free
 11498  002122  C089  F0A5         	movff	?___ftmul,___ftadd@f2
 11499  002126  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
 11500  00212A  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
 11501  00212E  C0D0  F02B         	movff	angleToPulse@a000,___altoft@c
 11502  002132  C0D1  F02C         	movff	angleToPulse@a000+1,___altoft@c+1
 11503  002136  C0D2  F02D         	movff	angleToPulse@a000+2,___altoft@c+2
 11504  00213A  C0D3  F02E         	movff	angleToPulse@a000+3,___altoft@c+3
 11505  00213E  EC24  F01A         	call	___altoft	;wreg free
 11506  002142  C02B  F0A2         	movff	?___altoft,___ftadd@f1
 11507  002146  C02C  F0A3         	movff	?___altoft+1,___ftadd@f1+1
 11508  00214A  C02D  F0A4         	movff	?___altoft+2,___ftadd@f1+2
 11509  00214E  EC19  F00D         	call	___ftadd	;wreg free
 11510  002152  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1398
 11511  002156  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1398+1
 11512  00215A  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1398+2
 11513                           
 11514                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 11515  00215E  C0C5  F02B         	movff	angleToPulse@offset,___altoft@c
 11516  002162  C0C6  F02C         	movff	angleToPulse@offset+1,___altoft@c+1
 11517  002166  C0C7  F02D         	movff	angleToPulse@offset+2,___altoft@c+2
 11518  00216A  C0C8  F02E         	movff	angleToPulse@offset+3,___altoft@c+3
 11519  00216E  EC24  F01A         	call	___altoft	;wreg free
 11520  002172  C02B  F0A5         	movff	?___altoft,___ftadd@f2
 11521  002176  C02C  F0A6         	movff	?___altoft+1,___ftadd@f2+1
 11522  00217A  C02D  F0A7         	movff	?___altoft+2,___ftadd@f2+2
 11523  00217E  C0CD  F0A2         	movff	_angleToPulse$1398,___ftadd@f1
 11524  002182  C0CE  F0A3         	movff	_angleToPulse$1398+1,___ftadd@f1+1
 11525  002186  C0CF  F0A4         	movff	_angleToPulse$1398+2,___ftadd@f1+2
 11526  00218A  EC19  F00D         	call	___ftadd	;wreg free
 11527  00218E  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
 11528  002192  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
 11529  002196  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
 11530  00219A  ECD8  F010         	call	___fttol	;wreg free
 11531  00219E  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
 11532  0021A2  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
 11533  0021A6  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
 11534  0021AA  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
 11535  0021AE  0012               	return	
 11536  0021B0                     __end_of_angleToPulse:
 11537                           	opt stack 0
 11538                           tblptru	equ	0xFF8
 11539                           tblptrh	equ	0xFF7
 11540                           tblptrl	equ	0xFF6
 11541                           tablat	equ	0xFF5
 11542                           prodh	equ	0xFF4
 11543                           prodl	equ	0xFF3
 11544                           intcon	equ	0xFF2
 11545                           intcon3	equ	0xFF0
 11546                           postinc0	equ	0xFEE
 11547                           wreg	equ	0xFE8
 11548                           postdec1	equ	0xFE5
 11549                           fsr1l	equ	0xFE1
 11550                           indf2	equ	0xFDF
 11551                           postinc2	equ	0xFDE
 11552                           postdec2	equ	0xFDD
 11553                           fsr2h	equ	0xFDA
 11554                           fsr2l	equ	0xFD9
 11555                           status	equ	0xFD8
 11556                           
 11557 ;; *************** function ___fttol *****************
 11558 ;; Defined at:
 11559 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;  f1              3   46[BANK0 ] float 
 11562 ;; Auto vars:     Size  Location     Type
 11563 ;;  lval            4   56[BANK0 ] unsigned long 
 11564 ;;  exp1            1   60[BANK0 ] unsigned char 
 11565 ;;  sign1           1   55[BANK0 ] unsigned char 
 11566 ;; Return value:  Size  Location     Type
 11567 ;;                  4   46[BANK0 ] long 
 11568 ;; Registers used:
 11569 ;;		wreg, status,2, status,0
 11570 ;; Tracked objects:
 11571 ;;		On entry : 0/0
 11572 ;;		On exit  : 0/0
 11573 ;;		Unchanged: 0/0
 11574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11575 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11576 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11577 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11578 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11579 ;;Total ram usage:       15 bytes
 11580 ;; Hardware stack levels used:    1
 11581 ;; Hardware stack levels required when called:    3
 11582 ;; This function calls:
 11583 ;;		Nothing
 11584 ;; This function is called by:
 11585 ;;		_sortBattery
 11586 ;;		_angleToPulse
 11587 ;;		_printf
 11588 ;; This function uses a non-reentrant model
 11589 ;;
 11590                           
 11591                           	psect	text49
 11592  0021B0                     __ptext49:
 11593                           	opt stack 0
 11594  0021B0                     ___fttol:
 11595                           	opt stack 24
 11596                           
 11597                           ;incstack = 0
 11598  0021B0  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
 11599  0021B4  0100               	movlb	0	; () banked
 11600  0021B6  6BB3               	clrf	(??___fttol+1)& (0+255),b
 11601  0021B8  6BB4               	clrf	(??___fttol+2)& (0+255),b
 11602  0021BA  0100               	movlb	0	; () banked
 11603  0021BC  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
 11604  0021BE  0100               	movlb	0	; () banked
 11605  0021C0  37B2               	rlcf	??___fttol& (0+255),f,b
 11606  0021C2  E301               	bnc	u6421
 11607  0021C4  81B3               	bsf	(??___fttol+1)& (0+255),0,b
 11608  0021C6                     u6421:
 11609  0021C6  0100               	movlb	0	; () banked
 11610  0021C8  51B2               	movf	??___fttol& (0+255),w,b
 11611  0021CA  0100               	movlb	0	; () banked
 11612  0021CC  6FBC               	movwf	___fttol@exp1& (0+255),b
 11613  0021CE  0100               	movlb	0	; () banked
 11614  0021D0  51BC               	movf	___fttol@exp1& (0+255),w,b
 11615  0021D2  A4D8               	btfss	status,2,c
 11616  0021D4  D00A               	goto	l6486
 11617                           
 11618                           ; BSR set to: 0
 11619  0021D6  0E00               	movlw	0
 11620  0021D8  0100               	movlb	0	; () banked
 11621  0021DA  6FAE               	movwf	?___fttol& (0+255),b
 11622  0021DC  0E00               	movlw	0
 11623  0021DE  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11624  0021E0  0E00               	movlw	0
 11625  0021E2  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11626  0021E4  0E00               	movlw	0
 11627  0021E6  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11628                           
 11629                           ; BSR set to: 0
 11630  0021E8  0012               	return	
 11631  0021EA                     l6486:
 11632                           
 11633                           ; BSR set to: 0
 11634  0021EA  0E17               	movlw	23
 11635  0021EC  0100               	movlb	0	; () banked
 11636  0021EE  6FB2               	movwf	??___fttol& (0+255),b
 11637  0021F0  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
 11638  0021F4  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
 11639  0021F8  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
 11640  0021FC  0100               	movlb	0	; () banked
 11641  0021FE  29B2               	incf	??___fttol& (0+255),w,b
 11642  002200  0100               	movlb	0	; () banked
 11643  002202  6FB6               	movwf	(??___fttol+4)& (0+255),b
 11644  002204  D005               	goto	u6440
 11645  002206                     u6445:
 11646  002206  0100               	movlb	0	; () banked
 11647  002208  90D8               	bcf	status,0,c
 11648  00220A  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
 11649  00220C  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
 11650  00220E  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
 11651  002210                     u6440:
 11652  002210  0100               	movlb	0	; () banked
 11653  002212  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
 11654  002214  D7F8               	goto	u6445
 11655  002216  0100               	movlb	0	; () banked
 11656  002218  51B3               	movf	(??___fttol+1)& (0+255),w,b
 11657  00221A  0100               	movlb	0	; () banked
 11658  00221C  6FB7               	movwf	___fttol@sign1& (0+255),b
 11659                           
 11660                           ; BSR set to: 0
 11661  00221E  0100               	movlb	0	; () banked
 11662  002220  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
 11663                           
 11664                           ; BSR set to: 0
 11665  002222  0EFF               	movlw	255
 11666  002224  0100               	movlb	0	; () banked
 11667  002226  17AE               	andwf	___fttol@f1& (0+255),f,b
 11668  002228  0EFF               	movlw	255
 11669  00222A  0100               	movlb	0	; () banked
 11670  00222C  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
 11671  00222E  0E00               	movlw	0
 11672  002230  0100               	movlb	0	; () banked
 11673  002232  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
 11674                           
 11675                           ; BSR set to: 0
 11676  002234  0100               	movlb	0	; () banked
 11677  002236  51AE               	movf	___fttol@f1& (0+255),w,b
 11678  002238  0100               	movlb	0	; () banked
 11679  00223A  6FB8               	movwf	___fttol@lval& (0+255),b
 11680  00223C  0100               	movlb	0	; () banked
 11681  00223E  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
 11682  002240  0100               	movlb	0	; () banked
 11683  002242  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
 11684  002244  0100               	movlb	0	; () banked
 11685  002246  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
 11686  002248  0100               	movlb	0	; () banked
 11687  00224A  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
 11688  00224C  0100               	movlb	0	; () banked
 11689  00224E  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
 11690                           
 11691                           ; BSR set to: 0
 11692  002250  0E8E               	movlw	142
 11693  002252  0100               	movlb	0	; () banked
 11694  002254  5FBC               	subwf	___fttol@exp1& (0+255),f,b
 11695                           
 11696                           ; BSR set to: 0
 11697  002256  0100               	movlb	0	; () banked
 11698  002258  AFBC               	btfss	___fttol@exp1& (0+255),7,b
 11699  00225A  D01A               	goto	l6508
 11700                           
 11701                           ; BSR set to: 0
 11702  00225C  0100               	movlb	0	; () banked
 11703  00225E  51BC               	movf	___fttol@exp1& (0+255),w,b
 11704  002260  0A80               	xorlw	128
 11705  002262  0F8F               	addlw	143
 11706  002264  B0D8               	btfsc	status,0,c
 11707  002266  D00A               	goto	l6504
 11708                           
 11709                           ; BSR set to: 0
 11710  002268  0E00               	movlw	0
 11711  00226A  0100               	movlb	0	; () banked
 11712  00226C  6FAE               	movwf	?___fttol& (0+255),b
 11713  00226E  0E00               	movlw	0
 11714  002270  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11715  002272  0E00               	movlw	0
 11716  002274  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11717  002276  0E00               	movlw	0
 11718  002278  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11719                           
 11720                           ; BSR set to: 0
 11721  00227A  0012               	return	
 11722  00227C                     l6504:
 11723                           
 11724                           ; BSR set to: 0
 11725  00227C  0100               	movlb	0	; () banked
 11726  00227E  90D8               	bcf	status,0,c
 11727  002280  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
 11728  002282  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
 11729  002284  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
 11730  002286  33B8               	rrcf	___fttol@lval& (0+255),f,b
 11731                           
 11732                           ; BSR set to: 0
 11733  002288  0100               	movlb	0	; () banked
 11734  00228A  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
 11735  00228C  D7F7               	goto	l6504
 11736                           
 11737                           ; BSR set to: 0
 11738  00228E  D01B               	goto	l6518
 11739  002290                     l6508:
 11740                           
 11741                           ; BSR set to: 0
 11742  002290  0E17               	movlw	23
 11743  002292  0100               	movlb	0	; () banked
 11744  002294  65BC               	cpfsgt	___fttol@exp1& (0+255),b
 11745  002296  D012               	goto	l6516
 11746                           
 11747                           ; BSR set to: 0
 11748  002298  0E00               	movlw	0
 11749  00229A  0100               	movlb	0	; () banked
 11750  00229C  6FAE               	movwf	?___fttol& (0+255),b
 11751  00229E  0E00               	movlw	0
 11752  0022A0  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11753  0022A2  0E00               	movlw	0
 11754  0022A4  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11755  0022A6  0E00               	movlw	0
 11756  0022A8  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11757                           
 11758                           ; BSR set to: 0
 11759  0022AA  0012               	return	
 11760  0022AC                     l6514:
 11761                           
 11762                           ; BSR set to: 0
 11763  0022AC  0100               	movlb	0	; () banked
 11764  0022AE  90D8               	bcf	status,0,c
 11765  0022B0  37B8               	rlcf	___fttol@lval& (0+255),f,b
 11766  0022B2  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
 11767  0022B4  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
 11768  0022B6  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
 11769  0022B8  0100               	movlb	0	; () banked
 11770  0022BA  07BC               	decf	___fttol@exp1& (0+255),f,b
 11771  0022BC                     l6516:
 11772                           
 11773                           ; BSR set to: 0
 11774  0022BC  0100               	movlb	0	; () banked
 11775  0022BE  51BC               	movf	___fttol@exp1& (0+255),w,b
 11776  0022C0  0100               	movlb	0	; () banked
 11777  0022C2  A4D8               	btfss	status,2,c
 11778  0022C4  D7F3               	goto	l6514
 11779  0022C6                     l6518:
 11780                           
 11781                           ; BSR set to: 0
 11782  0022C6  0100               	movlb	0	; () banked
 11783  0022C8  51B7               	movf	___fttol@sign1& (0+255),w,b
 11784  0022CA  0100               	movlb	0	; () banked
 11785  0022CC  B4D8               	btfsc	status,2,c
 11786  0022CE  D009               	goto	l6522
 11787                           
 11788                           ; BSR set to: 0
 11789  0022D0  0100               	movlb	0	; () banked
 11790  0022D2  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
 11791  0022D4  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
 11792  0022D6  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
 11793  0022D8  6DB8               	negf	___fttol@lval& (0+255),b
 11794  0022DA  0E00               	movlw	0
 11795  0022DC  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
 11796  0022DE  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
 11797  0022E0  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
 11798  0022E2                     l6522:
 11799                           
 11800                           ; BSR set to: 0
 11801  0022E2  C0B8  F0AE         	movff	___fttol@lval,?___fttol
 11802  0022E6  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
 11803  0022EA  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
 11804  0022EE  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
 11805  0022F2  0012               	return	
 11806  0022F4                     __end_of___fttol:
 11807                           	opt stack 0
 11808                           tblptru	equ	0xFF8
 11809                           tblptrh	equ	0xFF7
 11810                           tblptrl	equ	0xFF6
 11811                           tablat	equ	0xFF5
 11812                           prodh	equ	0xFF4
 11813                           prodl	equ	0xFF3
 11814                           intcon	equ	0xFF2
 11815                           intcon3	equ	0xFF0
 11816                           postinc0	equ	0xFEE
 11817                           wreg	equ	0xFE8
 11818                           postdec1	equ	0xFE5
 11819                           fsr1l	equ	0xFE1
 11820                           indf2	equ	0xFDF
 11821                           postinc2	equ	0xFDE
 11822                           postdec2	equ	0xFDD
 11823                           fsr2h	equ	0xFDA
 11824                           fsr2l	equ	0xFD9
 11825                           status	equ	0xFD8
 11826                           
 11827 ;; *************** function ___ftmul *****************
 11828 ;; Defined at:
 11829 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11830 ;; Parameters:    Size  Location     Type
 11831 ;;  f1              3    9[BANK0 ] float 
 11832 ;;  f2              3   12[BANK0 ] float 
 11833 ;; Auto vars:     Size  Location     Type
 11834 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 11835 ;;  sign            1   23[BANK0 ] unsigned char 
 11836 ;;  cntr            1   22[BANK0 ] unsigned char 
 11837 ;;  exp             1   18[BANK0 ] unsigned char 
 11838 ;; Return value:  Size  Location     Type
 11839 ;;                  3    9[BANK0 ] float 
 11840 ;; Registers used:
 11841 ;;		wreg, status,2, status,0, cstack
 11842 ;; Tracked objects:
 11843 ;;		On entry : 0/0
 11844 ;;		On exit  : 0/0
 11845 ;;		Unchanged: 0/0
 11846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11847 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11848 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11849 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11850 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11851 ;;Total ram usage:       15 bytes
 11852 ;; Hardware stack levels used:    1
 11853 ;; Hardware stack levels required when called:    4
 11854 ;; This function calls:
 11855 ;;		___ftpack
 11856 ;; This function is called by:
 11857 ;;		_sortBattery
 11858 ;;		_angleToPulse
 11859 ;;		_fround
 11860 ;;		_scale
 11861 ;;		_printf
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           	psect	text50
 11866  001EFA                     __ptext50:
 11867                           	opt stack 0
 11868  001EFA                     ___ftmul:
 11869                           	opt stack 23
 11870                           
 11871                           ; BSR set to: 0
 11872                           ;incstack = 0
 11873  001EFA  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
 11874  001EFE  0100               	movlb	0	; () banked
 11875  001F00  6B90               	clrf	(??___ftmul+1)& (0+255),b
 11876  001F02  6B91               	clrf	(??___ftmul+2)& (0+255),b
 11877  001F04  0100               	movlb	0	; () banked
 11878  001F06  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 11879  001F08  0100               	movlb	0	; () banked
 11880  001F0A  378F               	rlcf	??___ftmul& (0+255),f,b
 11881  001F0C  E301               	bnc	u5791
 11882  001F0E  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 11883  001F10                     u5791:
 11884  001F10  0100               	movlb	0	; () banked
 11885  001F12  518F               	movf	??___ftmul& (0+255),w,b
 11886  001F14  0100               	movlb	0	; () banked
 11887  001F16  6F92               	movwf	___ftmul@exp& (0+255),b
 11888  001F18  0100               	movlb	0	; () banked
 11889  001F1A  5192               	movf	___ftmul@exp& (0+255),w,b
 11890  001F1C  A4D8               	btfss	status,2,c
 11891  001F1E  D00A               	goto	l6002
 11892                           
 11893                           ; BSR set to: 0
 11894  001F20  0E00               	movlw	0
 11895  001F22  0100               	movlb	0	; () banked
 11896  001F24  6F89               	movwf	?___ftmul& (0+255),b
 11897  001F26  0E00               	movlw	0
 11898  001F28  0100               	movlb	0	; () banked
 11899  001F2A  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 11900  001F2C  0E00               	movlw	0
 11901  001F2E  0100               	movlb	0	; () banked
 11902  001F30  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 11903                           
 11904                           ; BSR set to: 0
 11905  001F32  0012               	return	
 11906  001F34                     l6002:
 11907                           
 11908                           ; BSR set to: 0
 11909  001F34  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
 11910  001F38  0100               	movlb	0	; () banked
 11911  001F3A  6B90               	clrf	(??___ftmul+1)& (0+255),b
 11912  001F3C  6B91               	clrf	(??___ftmul+2)& (0+255),b
 11913  001F3E  0100               	movlb	0	; () banked
 11914  001F40  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 11915  001F42  0100               	movlb	0	; () banked
 11916  001F44  378F               	rlcf	??___ftmul& (0+255),f,b
 11917  001F46  E301               	bnc	u5811
 11918  001F48  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 11919  001F4A                     u5811:
 11920  001F4A  0100               	movlb	0	; () banked
 11921  001F4C  518F               	movf	??___ftmul& (0+255),w,b
 11922  001F4E  0100               	movlb	0	; () banked
 11923  001F50  6F97               	movwf	___ftmul@sign& (0+255),b
 11924  001F52  0100               	movlb	0	; () banked
 11925  001F54  5197               	movf	___ftmul@sign& (0+255),w,b
 11926  001F56  A4D8               	btfss	status,2,c
 11927  001F58  D00A               	goto	l6008
 11928                           
 11929                           ; BSR set to: 0
 11930  001F5A  0E00               	movlw	0
 11931  001F5C  0100               	movlb	0	; () banked
 11932  001F5E  6F89               	movwf	?___ftmul& (0+255),b
 11933  001F60  0E00               	movlw	0
 11934  001F62  0100               	movlb	0	; () banked
 11935  001F64  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 11936  001F66  0E00               	movlw	0
 11937  001F68  0100               	movlb	0	; () banked
 11938  001F6A  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 11939                           
 11940                           ; BSR set to: 0
 11941  001F6C  0012               	return	
 11942  001F6E                     l6008:
 11943                           
 11944                           ; BSR set to: 0
 11945  001F6E  0100               	movlb	0	; () banked
 11946  001F70  5197               	movf	___ftmul@sign& (0+255),w,b
 11947  001F72  0F7B               	addlw	123
 11948  001F74  0100               	movlb	0	; () banked
 11949  001F76  2792               	addwf	___ftmul@exp& (0+255),f,b
 11950                           
 11951                           ; BSR set to: 0
 11952  001F78  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
 11953  001F7C  0100               	movlb	0	; () banked
 11954  001F7E  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11955  001F80  0100               	movlb	0	; () banked
 11956  001F82  1B97               	xorwf	___ftmul@sign& (0+255),f,b
 11957  001F84  0E80               	movlw	128
 11958  001F86  0100               	movlb	0	; () banked
 11959  001F88  1797               	andwf	___ftmul@sign& (0+255),f,b
 11960                           
 11961                           ; BSR set to: 0
 11962  001F8A  0100               	movlb	0	; () banked
 11963  001F8C  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 11964                           
 11965                           ; BSR set to: 0
 11966  001F8E  0100               	movlb	0	; () banked
 11967  001F90  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 11968                           
 11969                           ; BSR set to: 0
 11970  001F92  0EFF               	movlw	255
 11971  001F94  0100               	movlb	0	; () banked
 11972  001F96  178C               	andwf	___ftmul@f2& (0+255),f,b
 11973  001F98  0EFF               	movlw	255
 11974  001F9A  0100               	movlb	0	; () banked
 11975  001F9C  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 11976  001F9E  0E00               	movlw	0
 11977  001FA0  0100               	movlb	0	; () banked
 11978  001FA2  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 11979                           
 11980                           ; BSR set to: 0
 11981  001FA4  0E00               	movlw	0
 11982  001FA6  0100               	movlb	0	; () banked
 11983  001FA8  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
 11984  001FAA  0E00               	movlw	0
 11985  001FAC  0100               	movlb	0	; () banked
 11986  001FAE  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 11987  001FB0  0E00               	movlw	0
 11988  001FB2  0100               	movlb	0	; () banked
 11989  001FB4  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 11990                           
 11991                           ; BSR set to: 0
 11992  001FB6  0E07               	movlw	7
 11993  001FB8  0100               	movlb	0	; () banked
 11994  001FBA  6F96               	movwf	___ftmul@cntr& (0+255),b
 11995  001FBC                     l6022:
 11996                           
 11997                           ; BSR set to: 0
 11998  001FBC  0100               	movlb	0	; () banked
 11999  001FBE  A189               	btfss	___ftmul@f1& (0+255),0,b
 12000  001FC0  D00C               	goto	l6026
 12001                           
 12002                           ; BSR set to: 0
 12003  001FC2  0100               	movlb	0	; () banked
 12004  001FC4  518C               	movf	___ftmul@f2& (0+255),w,b
 12005  001FC6  0100               	movlb	0	; () banked
 12006  001FC8  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12007  001FCA  0100               	movlb	0	; () banked
 12008  001FCC  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 12009  001FCE  0100               	movlb	0	; () banked
 12010  001FD0  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12011  001FD2  0100               	movlb	0	; () banked
 12012  001FD4  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12013  001FD6  0100               	movlb	0	; () banked
 12014  001FD8  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12015  001FDA                     l6026:
 12016                           
 12017                           ; BSR set to: 0
 12018  001FDA  0100               	movlb	0	; () banked
 12019  001FDC  90D8               	bcf	status,0,c
 12020  001FDE  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12021  001FE0  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12022  001FE2  3389               	rrcf	___ftmul@f1& (0+255),f,b
 12023  001FE4  0100               	movlb	0	; () banked
 12024  001FE6  90D8               	bcf	status,0,c
 12025  001FE8  378C               	rlcf	___ftmul@f2& (0+255),f,b
 12026  001FEA  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 12027  001FEC  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 12028                           
 12029                           ; BSR set to: 0
 12030  001FEE  0100               	movlb	0	; () banked
 12031  001FF0  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 12032  001FF2  D7E4               	goto	l6022
 12033                           
 12034                           ; BSR set to: 0
 12035                           
 12036                           ; BSR set to: 0
 12037  001FF4  0E09               	movlw	9
 12038  001FF6  0100               	movlb	0	; () banked
 12039  001FF8  6F96               	movwf	___ftmul@cntr& (0+255),b
 12040  001FFA                     l6032:
 12041                           
 12042                           ; BSR set to: 0
 12043  001FFA  0100               	movlb	0	; () banked
 12044  001FFC  A189               	btfss	___ftmul@f1& (0+255),0,b
 12045  001FFE  D00C               	goto	l6036
 12046                           
 12047                           ; BSR set to: 0
 12048  002000  0100               	movlb	0	; () banked
 12049  002002  518C               	movf	___ftmul@f2& (0+255),w,b
 12050  002004  0100               	movlb	0	; () banked
 12051  002006  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12052  002008  0100               	movlb	0	; () banked
 12053  00200A  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 12054  00200C  0100               	movlb	0	; () banked
 12055  00200E  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12056  002010  0100               	movlb	0	; () banked
 12057  002012  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12058  002014  0100               	movlb	0	; () banked
 12059  002016  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12060  002018                     l6036:
 12061                           
 12062                           ; BSR set to: 0
 12063  002018  0100               	movlb	0	; () banked
 12064  00201A  90D8               	bcf	status,0,c
 12065  00201C  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12066  00201E  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12067  002020  3389               	rrcf	___ftmul@f1& (0+255),f,b
 12068  002022  0100               	movlb	0	; () banked
 12069  002024  90D8               	bcf	status,0,c
 12070  002026  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 12071  002028  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 12072  00202A  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 12073                           
 12074                           ; BSR set to: 0
 12075  00202C  0100               	movlb	0	; () banked
 12076  00202E  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 12077  002030  D7E4               	goto	l6032
 12078                           
 12079                           ; BSR set to: 0
 12080                           
 12081                           ; BSR set to: 0
 12082  002032  C093  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
 12083  002036  C094  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12084  00203A  C095  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12085  00203E  C092  F026         	movff	___ftmul@exp,___ftpack@exp
 12086  002042  C097  F027         	movff	___ftmul@sign,___ftpack@sign
 12087  002046  ECDE  F017         	call	___ftpack	;wreg free
 12088  00204A  C023  F089         	movff	?___ftpack,?___ftmul
 12089  00204E  C024  F08A         	movff	?___ftpack+1,?___ftmul+1
 12090  002052  C025  F08B         	movff	?___ftpack+2,?___ftmul+2
 12091  002056  0012               	return	
 12092  002058                     __end_of___ftmul:
 12093                           	opt stack 0
 12094                           tblptru	equ	0xFF8
 12095                           tblptrh	equ	0xFF7
 12096                           tblptrl	equ	0xFF6
 12097                           tablat	equ	0xFF5
 12098                           prodh	equ	0xFF4
 12099                           prodl	equ	0xFF3
 12100                           intcon	equ	0xFF2
 12101                           intcon3	equ	0xFF0
 12102                           postinc0	equ	0xFEE
 12103                           wreg	equ	0xFE8
 12104                           postdec1	equ	0xFE5
 12105                           fsr1l	equ	0xFE1
 12106                           indf2	equ	0xFDF
 12107                           postinc2	equ	0xFDE
 12108                           postdec2	equ	0xFDD
 12109                           fsr2h	equ	0xFDA
 12110                           fsr2l	equ	0xFD9
 12111                           status	equ	0xFD8
 12112                           
 12113 ;; *************** function ___ftdiv *****************
 12114 ;; Defined at:
 12115 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;  f1              3   52[COMRAM] float 
 12118 ;;  f2              3   55[COMRAM] float 
 12119 ;; Auto vars:     Size  Location     Type
 12120 ;;  f3              3    4[BANK0 ] float 
 12121 ;;  sign            1    8[BANK0 ] unsigned char 
 12122 ;;  exp             1    7[BANK0 ] unsigned char 
 12123 ;;  cntr            1    3[BANK0 ] unsigned char 
 12124 ;; Return value:  Size  Location     Type
 12125 ;;                  3   52[COMRAM] float 
 12126 ;; Registers used:
 12127 ;;		wreg, status,2, status,0, cstack
 12128 ;; Tracked objects:
 12129 ;;		On entry : 0/0
 12130 ;;		On exit  : 0/0
 12131 ;;		Unchanged: 0/0
 12132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12133 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12134 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12135 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12136 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12137 ;;Total ram usage:       15 bytes
 12138 ;; Hardware stack levels used:    1
 12139 ;; Hardware stack levels required when called:    4
 12140 ;; This function calls:
 12141 ;;		___ftpack
 12142 ;; This function is called by:
 12143 ;;		_sortBattery
 12144 ;;		_angleToPulse
 12145 ;;		_showRunTime
 12146 ;; This function uses a non-reentrant model
 12147 ;;
 12148                           
 12149                           	psect	text51
 12150  00265E                     __ptext51:
 12151                           	opt stack 0
 12152  00265E                     ___ftdiv:
 12153                           	opt stack 23
 12154                           
 12155                           ;incstack = 0
 12156  00265E  C037  F080         	movff	___ftdiv@f1+2,??___ftdiv
 12157  002662  0100               	movlb	0	; () banked
 12158  002664  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 12159  002666  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 12160  002668  3436               	rlcf	___ftdiv@f1+1,w,c
 12161  00266A  0100               	movlb	0	; () banked
 12162  00266C  3780               	rlcf	??___ftdiv& (0+255),f,b
 12163  00266E  E301               	bnc	u6311
 12164  002670  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 12165  002672                     u6311:
 12166  002672  0100               	movlb	0	; () banked
 12167  002674  5180               	movf	??___ftdiv& (0+255),w,b
 12168  002676  0100               	movlb	0	; () banked
 12169  002678  6F87               	movwf	___ftdiv@exp& (0+255),b
 12170  00267A  0100               	movlb	0	; () banked
 12171  00267C  5187               	movf	___ftdiv@exp& (0+255),w,b
 12172  00267E  A4D8               	btfss	status,2,c
 12173  002680  D007               	goto	l6398
 12174                           
 12175                           ; BSR set to: 0
 12176  002682  0E00               	movlw	0
 12177  002684  6E35               	movwf	?___ftdiv,c
 12178  002686  0E00               	movlw	0
 12179  002688  6E36               	movwf	?___ftdiv+1,c
 12180  00268A  0E00               	movlw	0
 12181  00268C  6E37               	movwf	?___ftdiv+2,c
 12182                           
 12183                           ; BSR set to: 0
 12184  00268E  0012               	return	
 12185  002690                     l6398:
 12186                           
 12187                           ; BSR set to: 0
 12188  002690  C03A  F080         	movff	___ftdiv@f2+2,??___ftdiv
 12189  002694  0100               	movlb	0	; () banked
 12190  002696  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 12191  002698  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 12192  00269A  3439               	rlcf	___ftdiv@f2+1,w,c
 12193  00269C  0100               	movlb	0	; () banked
 12194  00269E  3780               	rlcf	??___ftdiv& (0+255),f,b
 12195  0026A0  E301               	bnc	u6331
 12196  0026A2  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 12197  0026A4                     u6331:
 12198  0026A4  0100               	movlb	0	; () banked
 12199  0026A6  5180               	movf	??___ftdiv& (0+255),w,b
 12200  0026A8  0100               	movlb	0	; () banked
 12201  0026AA  6F88               	movwf	___ftdiv@sign& (0+255),b
 12202  0026AC  0100               	movlb	0	; () banked
 12203  0026AE  5188               	movf	___ftdiv@sign& (0+255),w,b
 12204  0026B0  A4D8               	btfss	status,2,c
 12205  0026B2  D007               	goto	l6404
 12206                           
 12207                           ; BSR set to: 0
 12208  0026B4  0E00               	movlw	0
 12209  0026B6  6E35               	movwf	?___ftdiv,c
 12210  0026B8  0E00               	movlw	0
 12211  0026BA  6E36               	movwf	?___ftdiv+1,c
 12212  0026BC  0E00               	movlw	0
 12213  0026BE  6E37               	movwf	?___ftdiv+2,c
 12214                           
 12215                           ; BSR set to: 0
 12216  0026C0  0012               	return	
 12217  0026C2                     l6404:
 12218                           
 12219                           ; BSR set to: 0
 12220  0026C2  0E00               	movlw	0
 12221  0026C4  0100               	movlb	0	; () banked
 12222  0026C6  6F84               	movwf	___ftdiv@f3& (0+255),b
 12223  0026C8  0E00               	movlw	0
 12224  0026CA  0100               	movlb	0	; () banked
 12225  0026CC  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
 12226  0026CE  0E00               	movlw	0
 12227  0026D0  0100               	movlb	0	; () banked
 12228  0026D2  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
 12229                           
 12230                           ; BSR set to: 0
 12231  0026D4  0100               	movlb	0	; () banked
 12232  0026D6  5188               	movf	___ftdiv@sign& (0+255),w,b
 12233  0026D8  0F89               	addlw	137
 12234  0026DA  0100               	movlb	0	; () banked
 12235  0026DC  5F87               	subwf	___ftdiv@exp& (0+255),f,b
 12236                           
 12237                           ; BSR set to: 0
 12238  0026DE  C037  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
 12239                           
 12240                           ; BSR set to: 0
 12241  0026E2  503A               	movf	___ftdiv@f2+2,w,c
 12242  0026E4  0100               	movlb	0	; () banked
 12243  0026E6  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
 12244                           
 12245                           ; BSR set to: 0
 12246  0026E8  0E80               	movlw	128
 12247  0026EA  0100               	movlb	0	; () banked
 12248  0026EC  1788               	andwf	___ftdiv@sign& (0+255),f,b
 12249                           
 12250                           ; BSR set to: 0
 12251  0026EE  8E36               	bsf	___ftdiv@f1+1,7,c
 12252                           
 12253                           ; BSR set to: 0
 12254  0026F0  0EFF               	movlw	255
 12255  0026F2  1635               	andwf	___ftdiv@f1,f,c
 12256  0026F4  0EFF               	movlw	255
 12257  0026F6  1636               	andwf	___ftdiv@f1+1,f,c
 12258  0026F8  0E00               	movlw	0
 12259  0026FA  1637               	andwf	___ftdiv@f1+2,f,c
 12260                           
 12261                           ; BSR set to: 0
 12262  0026FC  8E39               	bsf	___ftdiv@f2+1,7,c
 12263                           
 12264                           ; BSR set to: 0
 12265  0026FE  0EFF               	movlw	255
 12266  002700  1638               	andwf	___ftdiv@f2,f,c
 12267  002702  0EFF               	movlw	255
 12268  002704  1639               	andwf	___ftdiv@f2+1,f,c
 12269  002706  0E00               	movlw	0
 12270  002708  163A               	andwf	___ftdiv@f2+2,f,c
 12271                           
 12272                           ; BSR set to: 0
 12273  00270A  0E18               	movlw	24
 12274  00270C  0100               	movlb	0	; () banked
 12275  00270E  6F83               	movwf	___ftdiv@cntr& (0+255),b
 12276  002710                     l6424:
 12277                           
 12278                           ; BSR set to: 0
 12279  002710  0100               	movlb	0	; () banked
 12280  002712  90D8               	bcf	status,0,c
 12281  002714  3784               	rlcf	___ftdiv@f3& (0+255),f,b
 12282  002716  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 12283  002718  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 12284                           
 12285                           ; BSR set to: 0
 12286  00271A  5038               	movf	___ftdiv@f2,w,c
 12287  00271C  5C35               	subwf	___ftdiv@f1,w,c
 12288  00271E  5039               	movf	___ftdiv@f2+1,w,c
 12289  002720  5836               	subwfb	___ftdiv@f1+1,w,c
 12290  002722  503A               	movf	___ftdiv@f2+2,w,c
 12291  002724  5837               	subwfb	___ftdiv@f1+2,w,c
 12292  002726  A0D8               	btfss	status,0,c
 12293  002728  D008               	goto	l1157
 12294                           
 12295                           ; BSR set to: 0
 12296  00272A  5038               	movf	___ftdiv@f2,w,c
 12297  00272C  5E35               	subwf	___ftdiv@f1,f,c
 12298  00272E  5039               	movf	___ftdiv@f2+1,w,c
 12299  002730  5A36               	subwfb	___ftdiv@f1+1,f,c
 12300  002732  503A               	movf	___ftdiv@f2+2,w,c
 12301  002734  5A37               	subwfb	___ftdiv@f1+2,f,c
 12302                           
 12303                           ; BSR set to: 0
 12304  002736  0100               	movlb	0	; () banked
 12305  002738  8184               	bsf	___ftdiv@f3& (0+255),0,b
 12306  00273A                     l1157:
 12307                           
 12308                           ; BSR set to: 0
 12309  00273A  90D8               	bcf	status,0,c
 12310  00273C  3635               	rlcf	___ftdiv@f1,f,c
 12311  00273E  3636               	rlcf	___ftdiv@f1+1,f,c
 12312  002740  3637               	rlcf	___ftdiv@f1+2,f,c
 12313                           
 12314                           ; BSR set to: 0
 12315  002742  0100               	movlb	0	; () banked
 12316  002744  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
 12317  002746  D7E4               	goto	l6424
 12318                           
 12319                           ; BSR set to: 0
 12320                           
 12321                           ; BSR set to: 0
 12322  002748  C084  F023         	movff	___ftdiv@f3,___ftpack@arg
 12323  00274C  C085  F024         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12324  002750  C086  F025         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12325  002754  C087  F026         	movff	___ftdiv@exp,___ftpack@exp
 12326  002758  C088  F027         	movff	___ftdiv@sign,___ftpack@sign
 12327  00275C  ECDE  F017         	call	___ftpack	;wreg free
 12328  002760  C023  F035         	movff	?___ftpack,?___ftdiv
 12329  002764  C024  F036         	movff	?___ftpack+1,?___ftdiv+1
 12330  002768  C025  F037         	movff	?___ftpack+2,?___ftdiv+2
 12331  00276C  0012               	return	
 12332  00276E                     __end_of___ftdiv:
 12333                           	opt stack 0
 12334                           tblptru	equ	0xFF8
 12335                           tblptrh	equ	0xFF7
 12336                           tblptrl	equ	0xFF6
 12337                           tablat	equ	0xFF5
 12338                           prodh	equ	0xFF4
 12339                           prodl	equ	0xFF3
 12340                           intcon	equ	0xFF2
 12341                           intcon3	equ	0xFF0
 12342                           postinc0	equ	0xFEE
 12343                           wreg	equ	0xFE8
 12344                           postdec1	equ	0xFE5
 12345                           fsr1l	equ	0xFE1
 12346                           indf2	equ	0xFDF
 12347                           postinc2	equ	0xFDE
 12348                           postdec2	equ	0xFDD
 12349                           fsr2h	equ	0xFDA
 12350                           fsr2l	equ	0xFD9
 12351                           status	equ	0xFD8
 12352                           
 12353 ;; *************** function ___ftadd *****************
 12354 ;; Defined at:
 12355 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12356 ;; Parameters:    Size  Location     Type
 12357 ;;  f1              3   34[BANK0 ] float 
 12358 ;;  f2              3   37[BANK0 ] float 
 12359 ;; Auto vars:     Size  Location     Type
 12360 ;;  exp1            1   45[BANK0 ] unsigned char 
 12361 ;;  exp2            1   44[BANK0 ] unsigned char 
 12362 ;;  sign            1   43[BANK0 ] unsigned char 
 12363 ;; Return value:  Size  Location     Type
 12364 ;;                  3   34[BANK0 ] float 
 12365 ;; Registers used:
 12366 ;;		wreg, status,2, status,0, cstack
 12367 ;; Tracked objects:
 12368 ;;		On entry : 0/0
 12369 ;;		On exit  : 0/0
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12372 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12374 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12375 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12376 ;;Total ram usage:       12 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:    4
 12379 ;; This function calls:
 12380 ;;		___ftpack
 12381 ;; This function is called by:
 12382 ;;		_angleToPulse
 12383 ;;		_printf
 12384 ;;		___ftsub
 12385 ;; This function uses a non-reentrant model
 12386 ;;
 12387                           
 12388                           	psect	text52
 12389  001A32                     __ptext52:
 12390                           	opt stack 0
 12391  001A32                     ___ftadd:
 12392                           	opt stack 23
 12393                           
 12394                           ;incstack = 0
 12395  001A32  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
 12396  001A36  0100               	movlb	0	; () banked
 12397  001A38  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 12398  001A3A  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 12399  001A3C  0100               	movlb	0	; () banked
 12400  001A3E  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 12401  001A40  0100               	movlb	0	; () banked
 12402  001A42  37A8               	rlcf	??___ftadd& (0+255),f,b
 12403  001A44  E301               	bnc	u5581
 12404  001A46  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 12405  001A48                     u5581:
 12406  001A48  0100               	movlb	0	; () banked
 12407  001A4A  51A8               	movf	??___ftadd& (0+255),w,b
 12408  001A4C  0100               	movlb	0	; () banked
 12409  001A4E  6FAD               	movwf	___ftadd@exp1& (0+255),b
 12410  001A50  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
 12411  001A54  0100               	movlb	0	; () banked
 12412  001A56  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 12413  001A58  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 12414  001A5A  0100               	movlb	0	; () banked
 12415  001A5C  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 12416  001A5E  0100               	movlb	0	; () banked
 12417  001A60  37A8               	rlcf	??___ftadd& (0+255),f,b
 12418  001A62  E301               	bnc	u5591
 12419  001A64  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 12420  001A66                     u5591:
 12421  001A66  0100               	movlb	0	; () banked
 12422  001A68  51A8               	movf	??___ftadd& (0+255),w,b
 12423  001A6A  0100               	movlb	0	; () banked
 12424  001A6C  6FAC               	movwf	___ftadd@exp2& (0+255),b
 12425                           
 12426                           ; BSR set to: 0
 12427  001A6E  0100               	movlb	0	; () banked
 12428  001A70  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12429  001A72  0100               	movlb	0	; () banked
 12430  001A74  B4D8               	btfsc	status,2,c
 12431  001A76  D011               	goto	l1122
 12432                           
 12433                           ; BSR set to: 0
 12434  001A78  0100               	movlb	0	; () banked
 12435  001A7A  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12436  001A7C  0100               	movlb	0	; () banked
 12437  001A7E  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 12438  001A80  B0D8               	btfsc	status,0,c
 12439  001A82  D012               	goto	l5934
 12440                           
 12441                           ; BSR set to: 0
 12442  001A84  0100               	movlb	0	; () banked
 12443  001A86  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12444  001A88  0800               	sublw	0
 12445  001A8A  0100               	movlb	0	; () banked
 12446  001A8C  25AC               	addwf	___ftadd@exp2& (0+255),w,b
 12447  001A8E  0100               	movlb	0	; () banked
 12448  001A90  6FA8               	movwf	??___ftadd& (0+255),b
 12449  001A92  0E18               	movlw	24
 12450  001A94  0100               	movlb	0	; () banked
 12451  001A96  65A8               	cpfsgt	??___ftadd& (0+255),b
 12452  001A98  D007               	goto	l5934
 12453  001A9A                     l1122:
 12454                           
 12455                           ; BSR set to: 0
 12456  001A9A  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
 12457  001A9E  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
 12458  001AA2  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
 12459  001AA6  0012               	return	
 12460  001AA8                     l5934:
 12461                           
 12462                           ; BSR set to: 0
 12463  001AA8  0100               	movlb	0	; () banked
 12464  001AAA  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12465  001AAC  0100               	movlb	0	; () banked
 12466  001AAE  B4D8               	btfsc	status,2,c
 12467  001AB0  D011               	goto	l1126
 12468                           
 12469                           ; BSR set to: 0
 12470  001AB2  0100               	movlb	0	; () banked
 12471  001AB4  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12472  001AB6  0100               	movlb	0	; () banked
 12473  001AB8  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 12474  001ABA  B0D8               	btfsc	status,0,c
 12475  001ABC  D012               	goto	l5940
 12476                           
 12477                           ; BSR set to: 0
 12478  001ABE  0100               	movlb	0	; () banked
 12479  001AC0  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12480  001AC2  0800               	sublw	0
 12481  001AC4  0100               	movlb	0	; () banked
 12482  001AC6  25AD               	addwf	___ftadd@exp1& (0+255),w,b
 12483  001AC8  0100               	movlb	0	; () banked
 12484  001ACA  6FA8               	movwf	??___ftadd& (0+255),b
 12485  001ACC  0E18               	movlw	24
 12486  001ACE  0100               	movlb	0	; () banked
 12487  001AD0  65A8               	cpfsgt	??___ftadd& (0+255),b
 12488  001AD2  D007               	goto	l5940
 12489  001AD4                     l1126:
 12490                           
 12491                           ; BSR set to: 0
 12492  001AD4  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
 12493  001AD8  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
 12494  001ADC  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
 12495  001AE0  0012               	return	
 12496  001AE2                     l5940:
 12497                           
 12498                           ; BSR set to: 0
 12499  001AE2  0E06               	movlw	6
 12500  001AE4  0100               	movlb	0	; () banked
 12501  001AE6  6FAB               	movwf	___ftadd@sign& (0+255),b
 12502                           
 12503                           ; BSR set to: 0
 12504  001AE8  0100               	movlb	0	; () banked
 12505  001AEA  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
 12506  001AEC  D002               	goto	l5946
 12507                           
 12508                           ; BSR set to: 0
 12509  001AEE  0100               	movlb	0	; () banked
 12510  001AF0  8FAB               	bsf	___ftadd@sign& (0+255),7,b
 12511  001AF2                     l5946:
 12512                           
 12513                           ; BSR set to: 0
 12514  001AF2  0100               	movlb	0	; () banked
 12515  001AF4  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12516  001AF6  D002               	goto	l1128
 12517                           
 12518                           ; BSR set to: 0
 12519  001AF8  0100               	movlb	0	; () banked
 12520  001AFA  8DAB               	bsf	___ftadd@sign& (0+255),6,b
 12521  001AFC                     l1128:
 12522                           
 12523                           ; BSR set to: 0
 12524  001AFC  0100               	movlb	0	; () banked
 12525  001AFE  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
 12526                           
 12527                           ; BSR set to: 0
 12528  001B00  0EFF               	movlw	255
 12529  001B02  0100               	movlb	0	; () banked
 12530  001B04  17A2               	andwf	___ftadd@f1& (0+255),f,b
 12531  001B06  0EFF               	movlw	255
 12532  001B08  0100               	movlb	0	; () banked
 12533  001B0A  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
 12534  001B0C  0E00               	movlw	0
 12535  001B0E  0100               	movlb	0	; () banked
 12536  001B10  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
 12537  001B12  0100               	movlb	0	; () banked
 12538  001B14  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
 12539                           
 12540                           ; BSR set to: 0
 12541  001B16  0EFF               	movlw	255
 12542  001B18  0100               	movlb	0	; () banked
 12543  001B1A  17A5               	andwf	___ftadd@f2& (0+255),f,b
 12544  001B1C  0EFF               	movlw	255
 12545  001B1E  0100               	movlb	0	; () banked
 12546  001B20  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
 12547  001B22  0E00               	movlw	0
 12548  001B24  0100               	movlb	0	; () banked
 12549  001B26  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
 12550                           
 12551                           ; BSR set to: 0
 12552  001B28  0100               	movlb	0	; () banked
 12553  001B2A  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12554  001B2C  0100               	movlb	0	; () banked
 12555  001B2E  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 12556  001B30  B0D8               	btfsc	status,0,c
 12557  001B32  D025               	goto	l5966
 12558  001B34                     l5956:
 12559                           
 12560                           ; BSR set to: 0
 12561  001B34  0100               	movlb	0	; () banked
 12562  001B36  90D8               	bcf	status,0,c
 12563  001B38  37A5               	rlcf	___ftadd@f2& (0+255),f,b
 12564  001B3A  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 12565  001B3C  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 12566  001B3E  0100               	movlb	0	; () banked
 12567  001B40  07AC               	decf	___ftadd@exp2& (0+255),f,b
 12568                           
 12569                           ; BSR set to: 0
 12570  001B42  0100               	movlb	0	; () banked
 12571  001B44  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12572  001B46  0100               	movlb	0	; () banked
 12573  001B48  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 12574  001B4A  B4D8               	btfsc	status,2,c
 12575  001B4C  D011               	goto	l5964
 12576                           
 12577                           ; BSR set to: 0
 12578  001B4E  0100               	movlb	0	; () banked
 12579  001B50  07AB               	decf	___ftadd@sign& (0+255),f,b
 12580  001B52  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 12581  001B56  0E07               	movlw	7
 12582  001B58  0100               	movlb	0	; () banked
 12583  001B5A  17A8               	andwf	??___ftadd& (0+255),f,b
 12584  001B5C  B4D8               	btfsc	status,2,c
 12585  001B5E  D008               	goto	l5964
 12586  001B60  D7E9               	goto	l5956
 12587  001B62                     l5962:
 12588                           
 12589                           ; BSR set to: 0
 12590  001B62  0100               	movlb	0	; () banked
 12591  001B64  90D8               	bcf	status,0,c
 12592  001B66  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 12593  001B68  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 12594  001B6A  33A2               	rrcf	___ftadd@f1& (0+255),f,b
 12595  001B6C  0100               	movlb	0	; () banked
 12596  001B6E  2BAD               	incf	___ftadd@exp1& (0+255),f,b
 12597  001B70                     l5964:
 12598                           
 12599                           ; BSR set to: 0
 12600  001B70  0100               	movlb	0	; () banked
 12601  001B72  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12602  001B74  0100               	movlb	0	; () banked
 12603  001B76  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 12604  001B78  B4D8               	btfsc	status,2,c
 12605  001B7A  D02B               	goto	l1137
 12606  001B7C  D7F2               	goto	l5962
 12607  001B7E                     l5966:
 12608                           
 12609                           ; BSR set to: 0
 12610  001B7E  0100               	movlb	0	; () banked
 12611  001B80  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12612  001B82  0100               	movlb	0	; () banked
 12613  001B84  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 12614  001B86  B0D8               	btfsc	status,0,c
 12615  001B88  D024               	goto	l1137
 12616  001B8A                     l5968:
 12617                           
 12618                           ; BSR set to: 0
 12619  001B8A  0100               	movlb	0	; () banked
 12620  001B8C  90D8               	bcf	status,0,c
 12621  001B8E  37A2               	rlcf	___ftadd@f1& (0+255),f,b
 12622  001B90  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 12623  001B92  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 12624  001B94  0100               	movlb	0	; () banked
 12625  001B96  07AD               	decf	___ftadd@exp1& (0+255),f,b
 12626                           
 12627                           ; BSR set to: 0
 12628  001B98  0100               	movlb	0	; () banked
 12629  001B9A  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12630  001B9C  0100               	movlb	0	; () banked
 12631  001B9E  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 12632  001BA0  B4D8               	btfsc	status,2,c
 12633  001BA2  D011               	goto	l5976
 12634                           
 12635                           ; BSR set to: 0
 12636  001BA4  0100               	movlb	0	; () banked
 12637  001BA6  07AB               	decf	___ftadd@sign& (0+255),f,b
 12638  001BA8  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 12639  001BAC  0E07               	movlw	7
 12640  001BAE  0100               	movlb	0	; () banked
 12641  001BB0  17A8               	andwf	??___ftadd& (0+255),f,b
 12642  001BB2  B4D8               	btfsc	status,2,c
 12643  001BB4  D008               	goto	l5976
 12644  001BB6  D7E9               	goto	l5968
 12645  001BB8                     l5974:
 12646                           
 12647                           ; BSR set to: 0
 12648  001BB8  0100               	movlb	0	; () banked
 12649  001BBA  90D8               	bcf	status,0,c
 12650  001BBC  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 12651  001BBE  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 12652  001BC0  33A5               	rrcf	___ftadd@f2& (0+255),f,b
 12653  001BC2  0100               	movlb	0	; () banked
 12654  001BC4  2BAC               	incf	___ftadd@exp2& (0+255),f,b
 12655  001BC6                     l5976:
 12656                           
 12657                           ; BSR set to: 0
 12658  001BC6  0100               	movlb	0	; () banked
 12659  001BC8  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12660  001BCA  0100               	movlb	0	; () banked
 12661  001BCC  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 12662  001BCE  A4D8               	btfss	status,2,c
 12663  001BD0  D7F3               	goto	l5974
 12664  001BD2                     l1137:
 12665                           
 12666                           ; BSR set to: 0
 12667  001BD2  0100               	movlb	0	; () banked
 12668  001BD4  AFAB               	btfss	___ftadd@sign& (0+255),7,b
 12669  001BD6  D012               	goto	l1146
 12670                           
 12671                           ; BSR set to: 0
 12672  001BD8  0EFF               	movlw	255
 12673  001BDA  0100               	movlb	0	; () banked
 12674  001BDC  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
 12675  001BDE  0EFF               	movlw	255
 12676  001BE0  0100               	movlb	0	; () banked
 12677  001BE2  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 12678  001BE4  0EFF               	movlw	255
 12679  001BE6  0100               	movlb	0	; () banked
 12680  001BE8  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 12681  001BEA  0E01               	movlw	1
 12682  001BEC  0100               	movlb	0	; () banked
 12683  001BEE  27A2               	addwf	___ftadd@f1& (0+255),f,b
 12684  001BF0  0E00               	movlw	0
 12685  001BF2  0100               	movlb	0	; () banked
 12686  001BF4  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 12687  001BF6  0E00               	movlw	0
 12688  001BF8  0100               	movlb	0	; () banked
 12689  001BFA  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 12690  001BFC                     l1146:
 12691                           
 12692                           ; BSR set to: 0
 12693  001BFC  0100               	movlb	0	; () banked
 12694  001BFE  ADAB               	btfss	___ftadd@sign& (0+255),6,b
 12695  001C00  D012               	goto	l5982
 12696                           
 12697                           ; BSR set to: 0
 12698  001C02  0EFF               	movlw	255
 12699  001C04  0100               	movlb	0	; () banked
 12700  001C06  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 12701  001C08  0EFF               	movlw	255
 12702  001C0A  0100               	movlb	0	; () banked
 12703  001C0C  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12704  001C0E  0EFF               	movlw	255
 12705  001C10  0100               	movlb	0	; () banked
 12706  001C12  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12707  001C14  0E01               	movlw	1
 12708  001C16  0100               	movlb	0	; () banked
 12709  001C18  27A5               	addwf	___ftadd@f2& (0+255),f,b
 12710  001C1A  0E00               	movlw	0
 12711  001C1C  0100               	movlb	0	; () banked
 12712  001C1E  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12713  001C20  0E00               	movlw	0
 12714  001C22  0100               	movlb	0	; () banked
 12715  001C24  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12716  001C26                     l5982:
 12717                           
 12718                           ; BSR set to: 0
 12719  001C26  0E00               	movlw	0
 12720  001C28  0100               	movlb	0	; () banked
 12721  001C2A  6FAB               	movwf	___ftadd@sign& (0+255),b
 12722                           
 12723                           ; BSR set to: 0
 12724  001C2C  0100               	movlb	0	; () banked
 12725  001C2E  51A2               	movf	___ftadd@f1& (0+255),w,b
 12726  001C30  0100               	movlb	0	; () banked
 12727  001C32  27A5               	addwf	___ftadd@f2& (0+255),f,b
 12728  001C34  0100               	movlb	0	; () banked
 12729  001C36  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
 12730  001C38  0100               	movlb	0	; () banked
 12731  001C3A  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12732  001C3C  0100               	movlb	0	; () banked
 12733  001C3E  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
 12734  001C40  0100               	movlb	0	; () banked
 12735  001C42  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12736                           
 12737                           ; BSR set to: 0
 12738  001C44  0100               	movlb	0	; () banked
 12739  001C46  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12740  001C48  D015               	goto	l5992
 12741                           
 12742                           ; BSR set to: 0
 12743  001C4A  0EFF               	movlw	255
 12744  001C4C  0100               	movlb	0	; () banked
 12745  001C4E  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 12746  001C50  0EFF               	movlw	255
 12747  001C52  0100               	movlb	0	; () banked
 12748  001C54  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12749  001C56  0EFF               	movlw	255
 12750  001C58  0100               	movlb	0	; () banked
 12751  001C5A  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12752  001C5C  0E01               	movlw	1
 12753  001C5E  0100               	movlb	0	; () banked
 12754  001C60  27A5               	addwf	___ftadd@f2& (0+255),f,b
 12755  001C62  0E00               	movlw	0
 12756  001C64  0100               	movlb	0	; () banked
 12757  001C66  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12758  001C68  0E00               	movlw	0
 12759  001C6A  0100               	movlb	0	; () banked
 12760  001C6C  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12761                           
 12762                           ; BSR set to: 0
 12763  001C6E  0E01               	movlw	1
 12764  001C70  0100               	movlb	0	; () banked
 12765  001C72  6FAB               	movwf	___ftadd@sign& (0+255),b
 12766  001C74                     l5992:
 12767                           
 12768                           ; BSR set to: 0
 12769  001C74  C0A5  F023         	movff	___ftadd@f2,___ftpack@arg
 12770  001C78  C0A6  F024         	movff	___ftadd@f2+1,___ftpack@arg+1
 12771  001C7C  C0A7  F025         	movff	___ftadd@f2+2,___ftpack@arg+2
 12772  001C80  C0AD  F026         	movff	___ftadd@exp1,___ftpack@exp
 12773  001C84  C0AB  F027         	movff	___ftadd@sign,___ftpack@sign
 12774  001C88  ECDE  F017         	call	___ftpack	;wreg free
 12775  001C8C  C023  F0A2         	movff	?___ftpack,?___ftadd
 12776  001C90  C024  F0A3         	movff	?___ftpack+1,?___ftadd+1
 12777  001C94  C025  F0A4         	movff	?___ftpack+2,?___ftadd+2
 12778  001C98  0012               	return	
 12779  001C9A                     __end_of___ftadd:
 12780                           	opt stack 0
 12781                           tblptru	equ	0xFF8
 12782                           tblptrh	equ	0xFF7
 12783                           tblptrl	equ	0xFF6
 12784                           tablat	equ	0xFF5
 12785                           prodh	equ	0xFF4
 12786                           prodl	equ	0xFF3
 12787                           intcon	equ	0xFF2
 12788                           intcon3	equ	0xFF0
 12789                           postinc0	equ	0xFEE
 12790                           wreg	equ	0xFE8
 12791                           postdec1	equ	0xFE5
 12792                           fsr1l	equ	0xFE1
 12793                           indf2	equ	0xFDF
 12794                           postinc2	equ	0xFDE
 12795                           postdec2	equ	0xFDD
 12796                           fsr2h	equ	0xFDA
 12797                           fsr2l	equ	0xFD9
 12798                           status	equ	0xFD8
 12799                           
 12800 ;; *************** function ___awtoft *****************
 12801 ;; Defined at:
 12802 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12803 ;; Parameters:    Size  Location     Type
 12804 ;;  c               2   42[COMRAM] int 
 12805 ;; Auto vars:     Size  Location     Type
 12806 ;;  sign            1   45[COMRAM] unsigned char 
 12807 ;; Return value:  Size  Location     Type
 12808 ;;                  3   42[COMRAM] float 
 12809 ;; Registers used:
 12810 ;;		wreg, status,2, status,0, cstack
 12811 ;; Tracked objects:
 12812 ;;		On entry : 0/0
 12813 ;;		On exit  : 0/0
 12814 ;;		Unchanged: 0/0
 12815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12816 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12817 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12819 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12820 ;;Total ram usage:        4 bytes
 12821 ;; Hardware stack levels used:    1
 12822 ;; Hardware stack levels required when called:    4
 12823 ;; This function calls:
 12824 ;;		___ftpack
 12825 ;; This function is called by:
 12826 ;;		_sortBattery
 12827 ;;		_angleToPulse
 12828 ;;		_showRunTime
 12829 ;;		_testFrequency
 12830 ;; This function uses a non-reentrant model
 12831 ;;
 12832                           
 12833                           	psect	text53
 12834  003ADC                     __ptext53:
 12835                           	opt stack 0
 12836  003ADC                     ___awtoft:
 12837                           	opt stack 23
 12838                           
 12839                           ;incstack = 0
 12840  003ADC  0E00               	movlw	0
 12841  003ADE  6E2E               	movwf	___awtoft@sign,c
 12842  003AE0  AE2C               	btfss	___awtoft@c+1,7,c
 12843  003AE2  D006               	goto	l6454
 12844  003AE4  6C2B               	negf	___awtoft@c,c
 12845  003AE6  1E2C               	comf	___awtoft@c+1,f,c
 12846  003AE8  B0D8               	btfsc	status,0,c
 12847  003AEA  2A2C               	incf	___awtoft@c+1,f,c
 12848  003AEC  0E01               	movlw	1
 12849  003AEE  6E2E               	movwf	___awtoft@sign,c
 12850  003AF0                     l6454:
 12851  003AF0  C02B  F023         	movff	___awtoft@c,___ftpack@arg
 12852  003AF4  C02C  F024         	movff	___awtoft@c+1,___ftpack@arg+1
 12853  003AF8  6A25               	clrf	___ftpack@arg+2,c
 12854  003AFA  0E8E               	movlw	142
 12855  003AFC  6E26               	movwf	___ftpack@exp,c
 12856  003AFE  C02E  F027         	movff	___awtoft@sign,___ftpack@sign
 12857  003B02  ECDE  F017         	call	___ftpack	;wreg free
 12858  003B06  C023  F02B         	movff	?___ftpack,?___awtoft
 12859  003B0A  C024  F02C         	movff	?___ftpack+1,?___awtoft+1
 12860  003B0E  C025  F02D         	movff	?___ftpack+2,?___awtoft+2
 12861  003B12  0012               	return	
 12862  003B14                     __end_of___awtoft:
 12863                           	opt stack 0
 12864                           tblptru	equ	0xFF8
 12865                           tblptrh	equ	0xFF7
 12866                           tblptrl	equ	0xFF6
 12867                           tablat	equ	0xFF5
 12868                           prodh	equ	0xFF4
 12869                           prodl	equ	0xFF3
 12870                           intcon	equ	0xFF2
 12871                           intcon3	equ	0xFF0
 12872                           postinc0	equ	0xFEE
 12873                           wreg	equ	0xFE8
 12874                           postdec1	equ	0xFE5
 12875                           fsr1l	equ	0xFE1
 12876                           indf2	equ	0xFDF
 12877                           postinc2	equ	0xFDE
 12878                           postdec2	equ	0xFDD
 12879                           fsr2h	equ	0xFDA
 12880                           fsr2l	equ	0xFD9
 12881                           status	equ	0xFD8
 12882                           
 12883 ;; *************** function ___altoft *****************
 12884 ;; Defined at:
 12885 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 12886 ;; Parameters:    Size  Location     Type
 12887 ;;  c               4   42[COMRAM] long 
 12888 ;; Auto vars:     Size  Location     Type
 12889 ;;  sign            1   51[COMRAM] unsigned char 
 12890 ;;  exp             1   50[COMRAM] unsigned char 
 12891 ;; Return value:  Size  Location     Type
 12892 ;;                  3   42[COMRAM] float 
 12893 ;; Registers used:
 12894 ;;		wreg, status,2, status,0, cstack
 12895 ;; Tracked objects:
 12896 ;;		On entry : 0/0
 12897 ;;		On exit  : 0/0
 12898 ;;		Unchanged: 0/0
 12899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12901 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12902 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12903 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12904 ;;Total ram usage:       10 bytes
 12905 ;; Hardware stack levels used:    1
 12906 ;; Hardware stack levels required when called:    4
 12907 ;; This function calls:
 12908 ;;		___ftpack
 12909 ;; This function is called by:
 12910 ;;		_sortBattery
 12911 ;;		_angleToPulse
 12912 ;; This function uses a non-reentrant model
 12913 ;;
 12914                           
 12915                           	psect	text54
 12916  003448                     __ptext54:
 12917                           	opt stack 0
 12918  003448                     ___altoft:
 12919                           	opt stack 23
 12920                           
 12921                           ;incstack = 0
 12922  003448  0E00               	movlw	0
 12923  00344A  6E34               	movwf	___altoft@sign,c
 12924  00344C  0E8E               	movlw	142
 12925  00344E  6E33               	movwf	___altoft@exp,c
 12926  003450  AE2E               	btfss	___altoft@c+3,7,c
 12927  003452  D011               	goto	l6386
 12928  003454  1E2E               	comf	___altoft@c+3,f,c
 12929  003456  1E2D               	comf	___altoft@c+2,f,c
 12930  003458  1E2C               	comf	___altoft@c+1,f,c
 12931  00345A  6C2B               	negf	___altoft@c,c
 12932  00345C  0E00               	movlw	0
 12933  00345E  222C               	addwfc	___altoft@c+1,f,c
 12934  003460  222D               	addwfc	___altoft@c+2,f,c
 12935  003462  222E               	addwfc	___altoft@c+3,f,c
 12936  003464  0E01               	movlw	1
 12937  003466  6E34               	movwf	___altoft@sign,c
 12938  003468  D006               	goto	l6386
 12939  00346A                     l6384:
 12940  00346A  90D8               	bcf	status,0,c
 12941  00346C  322E               	rrcf	___altoft@c+3,f,c
 12942  00346E  322D               	rrcf	___altoft@c+2,f,c
 12943  003470  322C               	rrcf	___altoft@c+1,f,c
 12944  003472  322B               	rrcf	___altoft@c,f,c
 12945  003474  2A33               	incf	___altoft@exp,f,c
 12946  003476                     l6386:
 12947  003476  0E00               	movlw	0
 12948  003478  142B               	andwf	___altoft@c,w,c
 12949  00347A  6E2F               	movwf	??___altoft& (0+255),c
 12950  00347C  0E00               	movlw	0
 12951  00347E  142C               	andwf	___altoft@c+1,w,c
 12952  003480  6E30               	movwf	(??___altoft+1)& (0+255),c
 12953  003482  0E00               	movlw	0
 12954  003484  142D               	andwf	___altoft@c+2,w,c
 12955  003486  6E31               	movwf	(??___altoft+2)& (0+255),c
 12956  003488  0EFF               	movlw	255
 12957  00348A  142E               	andwf	___altoft@c+3,w,c
 12958  00348C  6E32               	movwf	(??___altoft+3)& (0+255),c
 12959  00348E  502F               	movf	??___altoft,w,c
 12960  003490  1030               	iorwf	??___altoft+1,w,c
 12961  003492  1031               	iorwf	??___altoft+2,w,c
 12962  003494  1032               	iorwf	??___altoft+3,w,c
 12963  003496  A4D8               	btfss	status,2,c
 12964  003498  D7E8               	goto	l6384
 12965  00349A  C02B  F023         	movff	___altoft@c,___ftpack@arg
 12966  00349E  C02C  F024         	movff	___altoft@c+1,___ftpack@arg+1
 12967  0034A2  C02D  F025         	movff	___altoft@c+2,___ftpack@arg+2
 12968  0034A6  C033  F026         	movff	___altoft@exp,___ftpack@exp
 12969  0034AA  C034  F027         	movff	___altoft@sign,___ftpack@sign
 12970  0034AE  ECDE  F017         	call	___ftpack	;wreg free
 12971  0034B2  C023  F02B         	movff	?___ftpack,?___altoft
 12972  0034B6  C024  F02C         	movff	?___ftpack+1,?___altoft+1
 12973  0034BA  C025  F02D         	movff	?___ftpack+2,?___altoft+2
 12974  0034BE  0012               	return	
 12975  0034C0                     __end_of___altoft:
 12976                           	opt stack 0
 12977                           tblptru	equ	0xFF8
 12978                           tblptrh	equ	0xFF7
 12979                           tblptrl	equ	0xFF6
 12980                           tablat	equ	0xFF5
 12981                           prodh	equ	0xFF4
 12982                           prodl	equ	0xFF3
 12983                           intcon	equ	0xFF2
 12984                           intcon3	equ	0xFF0
 12985                           postinc0	equ	0xFEE
 12986                           wreg	equ	0xFE8
 12987                           postdec1	equ	0xFE5
 12988                           fsr1l	equ	0xFE1
 12989                           indf2	equ	0xFDF
 12990                           postinc2	equ	0xFDE
 12991                           postdec2	equ	0xFDD
 12992                           fsr2h	equ	0xFDA
 12993                           fsr2l	equ	0xFD9
 12994                           status	equ	0xFD8
 12995                           
 12996 ;; *************** function ___ftpack *****************
 12997 ;; Defined at:
 12998 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  arg             3   34[COMRAM] unsigned um
 13001 ;;  exp             1   37[COMRAM] unsigned char 
 13002 ;;  sign            1   38[COMRAM] unsigned char 
 13003 ;; Auto vars:     Size  Location     Type
 13004 ;;		None
 13005 ;; Return value:  Size  Location     Type
 13006 ;;                  3   34[COMRAM] float 
 13007 ;; Registers used:
 13008 ;;		wreg, status,2, status,0
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13014 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13017 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13018 ;;Total ram usage:        8 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    3
 13021 ;; This function calls:
 13022 ;;		Nothing
 13023 ;; This function is called by:
 13024 ;;		___altoft
 13025 ;;		___awtoft
 13026 ;;		___ftadd
 13027 ;;		___ftdiv
 13028 ;;		___ftmul
 13029 ;;		___lltoft
 13030 ;; This function uses a non-reentrant model
 13031 ;;
 13032                           
 13033                           	psect	text55
 13034  002FBC                     __ptext55:
 13035                           	opt stack 0
 13036  002FBC                     ___ftpack:
 13037                           	opt stack 23
 13038                           
 13039                           ;incstack = 0
 13040  002FBC  5026               	movf	___ftpack@exp,w,c
 13041  002FBE  B4D8               	btfsc	status,2,c
 13042  002FC0  D005               	goto	l5882
 13043  002FC2  5023               	movf	___ftpack@arg,w,c
 13044  002FC4  1024               	iorwf	___ftpack@arg+1,w,c
 13045  002FC6  1025               	iorwf	___ftpack@arg+2,w,c
 13046  002FC8  A4D8               	btfss	status,2,c
 13047  002FCA  D00C               	goto	l5888
 13048  002FCC                     l5882:
 13049  002FCC  0E00               	movlw	0
 13050  002FCE  6E23               	movwf	?___ftpack,c
 13051  002FD0  0E00               	movlw	0
 13052  002FD2  6E24               	movwf	?___ftpack+1,c
 13053  002FD4  0E00               	movlw	0
 13054  002FD6  6E25               	movwf	?___ftpack+2,c
 13055  002FD8  0012               	return	
 13056  002FDA                     l5886:
 13057  002FDA  2A26               	incf	___ftpack@exp,f,c
 13058  002FDC  90D8               	bcf	status,0,c
 13059  002FDE  3225               	rrcf	___ftpack@arg+2,f,c
 13060  002FE0  3224               	rrcf	___ftpack@arg+1,f,c
 13061  002FE2  3223               	rrcf	___ftpack@arg,f,c
 13062  002FE4                     l5888:
 13063  002FE4  0E00               	movlw	0
 13064  002FE6  1423               	andwf	___ftpack@arg,w,c
 13065  002FE8  6E28               	movwf	??___ftpack& (0+255),c
 13066  002FEA  0E00               	movlw	0
 13067  002FEC  1424               	andwf	___ftpack@arg+1,w,c
 13068  002FEE  6E29               	movwf	(??___ftpack+1)& (0+255),c
 13069  002FF0  0EFE               	movlw	254
 13070  002FF2  1425               	andwf	___ftpack@arg+2,w,c
 13071  002FF4  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 13072  002FF6  5028               	movf	??___ftpack,w,c
 13073  002FF8  1029               	iorwf	??___ftpack+1,w,c
 13074  002FFA  102A               	iorwf	??___ftpack+2,w,c
 13075  002FFC  B4D8               	btfsc	status,2,c
 13076  002FFE  D00C               	goto	l5894
 13077  003000  D7EC               	goto	l5886
 13078  003002                     l5890:
 13079  003002  2A26               	incf	___ftpack@exp,f,c
 13080  003004  0E01               	movlw	1
 13081  003006  2623               	addwf	___ftpack@arg,f,c
 13082  003008  0E00               	movlw	0
 13083  00300A  2224               	addwfc	___ftpack@arg+1,f,c
 13084  00300C  0E00               	movlw	0
 13085  00300E  2225               	addwfc	___ftpack@arg+2,f,c
 13086  003010  90D8               	bcf	status,0,c
 13087  003012  3225               	rrcf	___ftpack@arg+2,f,c
 13088  003014  3224               	rrcf	___ftpack@arg+1,f,c
 13089  003016  3223               	rrcf	___ftpack@arg,f,c
 13090  003018                     l5894:
 13091  003018  0E00               	movlw	0
 13092  00301A  1423               	andwf	___ftpack@arg,w,c
 13093  00301C  6E28               	movwf	??___ftpack& (0+255),c
 13094  00301E  0E00               	movlw	0
 13095  003020  1424               	andwf	___ftpack@arg+1,w,c
 13096  003022  6E29               	movwf	(??___ftpack+1)& (0+255),c
 13097  003024  0EFF               	movlw	255
 13098  003026  1425               	andwf	___ftpack@arg+2,w,c
 13099  003028  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 13100  00302A  5028               	movf	??___ftpack,w,c
 13101  00302C  1029               	iorwf	??___ftpack+1,w,c
 13102  00302E  102A               	iorwf	??___ftpack+2,w,c
 13103  003030  B4D8               	btfsc	status,2,c
 13104  003032  D006               	goto	l5898
 13105  003034  D7E6               	goto	l5890
 13106  003036                     l5896:
 13107  003036  0626               	decf	___ftpack@exp,f,c
 13108  003038  90D8               	bcf	status,0,c
 13109  00303A  3623               	rlcf	___ftpack@arg,f,c
 13110  00303C  3624               	rlcf	___ftpack@arg+1,f,c
 13111  00303E  3625               	rlcf	___ftpack@arg+2,f,c
 13112  003040                     l5898:
 13113  003040  BE24               	btfsc	___ftpack@arg+1,7,c
 13114  003042  D003               	goto	l1099
 13115  003044  0E02               	movlw	2
 13116  003046  6026               	cpfslt	___ftpack@exp,c
 13117  003048  D7F6               	goto	l5896
 13118  00304A                     l1099:
 13119  00304A  A026               	btfss	___ftpack@exp,0,c
 13120  00304C  9E24               	bcf	___ftpack@arg+1,7,c
 13121  00304E  90D8               	bcf	status,0,c
 13122  003050  3226               	rrcf	___ftpack@exp,f,c
 13123  003052  5026               	movf	___ftpack@exp,w,c
 13124  003054  1225               	iorwf	___ftpack@arg+2,f,c
 13125  003056  5027               	movf	___ftpack@sign,w,c
 13126  003058  A4D8               	btfss	status,2,c
 13127  00305A  8E25               	bsf	___ftpack@arg+2,7,c
 13128  00305C  C023  F023         	movff	___ftpack@arg,?___ftpack
 13129  003060  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
 13130  003064  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
 13131  003068  0012               	return	
 13132  00306A                     __end_of___ftpack:
 13133                           	opt stack 0
 13134                           tblptru	equ	0xFF8
 13135                           tblptrh	equ	0xFF7
 13136                           tblptrl	equ	0xFF6
 13137                           tablat	equ	0xFF5
 13138                           prodh	equ	0xFF4
 13139                           prodl	equ	0xFF3
 13140                           intcon	equ	0xFF2
 13141                           intcon3	equ	0xFF0
 13142                           postinc0	equ	0xFEE
 13143                           wreg	equ	0xFE8
 13144                           postdec1	equ	0xFE5
 13145                           fsr1l	equ	0xFE1
 13146                           indf2	equ	0xFDF
 13147                           postinc2	equ	0xFDE
 13148                           postdec2	equ	0xFDD
 13149                           fsr2h	equ	0xFDA
 13150                           fsr2l	equ	0xFD9
 13151                           status	equ	0xFD8
 13152                           
 13153 ;; *************** function _initTimer *****************
 13154 ;; Defined at:
 13155 ;;		line 52 in file "timer.c"
 13156 ;; Parameters:    Size  Location     Type
 13157 ;;  timer           2   34[COMRAM] int 
 13158 ;; Auto vars:     Size  Location     Type
 13159 ;;		None
 13160 ;; Return value:  Size  Location     Type
 13161 ;;                  1    wreg      void 
 13162 ;; Registers used:
 13163 ;;		wreg, status,2, status,0
 13164 ;; Tracked objects:
 13165 ;;		On entry : 0/0
 13166 ;;		On exit  : 0/0
 13167 ;;		Unchanged: 0/0
 13168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13169 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13171 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13173 ;;Total ram usage:        4 bytes
 13174 ;; Hardware stack levels used:    1
 13175 ;; Hardware stack levels required when called:    3
 13176 ;; This function calls:
 13177 ;;		Nothing
 13178 ;; This function is called by:
 13179 ;;		_main
 13180 ;;		_initServo
 13181 ;;		_testFrequency
 13182 ;; This function uses a non-reentrant model
 13183 ;;
 13184                           
 13185                           	psect	text56
 13186  0039D4                     __ptext56:
 13187                           	opt stack 0
 13188  0039D4                     _initTimer:
 13189                           	opt stack 27
 13190                           
 13191                           ;timer.c: 53: switch(timer){
 13192                           
 13193                           ;incstack = 0
 13194  0039D4  D00F               	goto	l7024
 13195  0039D6                     l7006:
 13196                           
 13197                           ;timer.c: 55: T0CON = 0;
 13198  0039D6  0E00               	movlw	0
 13199  0039D8  6ED5               	movwf	4053,c	;volatile
 13200                           
 13201                           ;timer.c: 56: T0CON |= 1<<3;
 13202  0039DA  86D5               	bsf	4053,3,c	;volatile
 13203                           
 13204                           ;timer.c: 58: TMR0IE = 1;
 13205  0039DC  8AF2               	bsf	intcon,5,c	;volatile
 13206                           
 13207                           ;timer.c: 59: break;
 13208  0039DE  D01C               	goto	l437
 13209  0039E0                     l7012:
 13210                           
 13211                           ;timer.c: 61: T1CON = 0;
 13212  0039E0  0E00               	movlw	0
 13213  0039E2  6ECD               	movwf	4045,c	;volatile
 13214                           
 13215                           ;timer.c: 63: T1CON |= 0b11<<4;
 13216  0039E4  0E30               	movlw	48
 13217  0039E6  12CD               	iorwf	4045,f,c	;volatile
 13218                           
 13219                           ;timer.c: 64: TMR1IE = 1;
 13220  0039E8  809D               	bsf	3997,0,c	;volatile
 13221                           
 13222                           ;timer.c: 65: break;
 13223  0039EA  D016               	goto	l437
 13224  0039EC                     l7018:
 13225                           
 13226                           ;timer.c: 67: T3CON = 0;
 13227  0039EC  0E00               	movlw	0
 13228  0039EE  6EB1               	movwf	4017,c	;volatile
 13229                           
 13230                           ;timer.c: 68: TMR3IE = 1;
 13231  0039F0  82A0               	bsf	4000,1,c	;volatile
 13232                           
 13233                           ;timer.c: 70: }
 13234                           
 13235                           ;timer.c: 69: break;
 13236  0039F2  D012               	goto	l437
 13237  0039F4                     l7024:
 13238  0039F4  C023  F025         	movff	initTimer@timer,??_initTimer
 13239  0039F8  C024  F026         	movff	initTimer@timer+1,??_initTimer+1
 13240                           
 13241                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13242                           ; Switch size 1, requested type "space"
 13243                           ; Number of cases is 1, Range of values is 0 to 0
 13244                           ; switch strategies available:
 13245                           ; Name         Instructions Cycles
 13246                           ; simple_byte            4     3 (average)
 13247                           ;	Chosen strategy is simple_byte
 13248  0039FC  5026               	movf	??_initTimer+1,w,c
 13249  0039FE  0A00               	xorlw	0	; case 0
 13250  003A00  A4D8               	btfss	status,2,c
 13251  003A02  D00A               	goto	l437
 13252                           
 13253                           ; Switch size 1, requested type "space"
 13254                           ; Number of cases is 3, Range of values is 0 to 3
 13255                           ; switch strategies available:
 13256                           ; Name         Instructions Cycles
 13257                           ; simple_byte           10     6 (average)
 13258                           ;	Chosen strategy is simple_byte
 13259  003A04  5025               	movf	??_initTimer,w,c
 13260  003A06  0A00               	xorlw	0	; case 0
 13261  003A08  B4D8               	btfsc	status,2,c
 13262  003A0A  D7E5               	goto	l7006
 13263  003A0C  0A01               	xorlw	1	; case 1
 13264  003A0E  B4D8               	btfsc	status,2,c
 13265  003A10  D7E7               	goto	l7012
 13266  003A12  0A02               	xorlw	2	; case 3
 13267  003A14  B4D8               	btfsc	status,2,c
 13268  003A16  D7EA               	goto	l7018
 13269  003A18                     l437:
 13270                           
 13271                           ;timer.c: 71: PEIE = 1;
 13272  003A18  8CF2               	bsf	intcon,6,c	;volatile
 13273                           
 13274                           ;timer.c: 72: (INTCONbits.GIE = 1);
 13275  003A1A  8EF2               	bsf	intcon,7,c	;volatile
 13276  003A1C  0012               	return		;funcret
 13277  003A1E                     __end_of_initTimer:
 13278                           	opt stack 0
 13279                           tblptru	equ	0xFF8
 13280                           tblptrh	equ	0xFF7
 13281                           tblptrl	equ	0xFF6
 13282                           tablat	equ	0xFF5
 13283                           prodh	equ	0xFF4
 13284                           prodl	equ	0xFF3
 13285                           intcon	equ	0xFF2
 13286                           intcon3	equ	0xFF0
 13287                           postinc0	equ	0xFEE
 13288                           wreg	equ	0xFE8
 13289                           postdec1	equ	0xFE5
 13290                           fsr1l	equ	0xFE1
 13291                           indf2	equ	0xFDF
 13292                           postinc2	equ	0xFDE
 13293                           postdec2	equ	0xFDD
 13294                           fsr2h	equ	0xFDA
 13295                           fsr2l	equ	0xFD9
 13296                           status	equ	0xFD8
 13297                           
 13298 ;; *************** function _initLCD *****************
 13299 ;; Defined at:
 13300 ;;		line 15 in file "lcd.c"
 13301 ;; Parameters:    Size  Location     Type
 13302 ;;		None
 13303 ;; Auto vars:     Size  Location     Type
 13304 ;;		None
 13305 ;; Return value:  Size  Location     Type
 13306 ;;                  1    wreg      void 
 13307 ;; Registers used:
 13308 ;;		wreg, status,2, status,0, cstack
 13309 ;; Tracked objects:
 13310 ;;		On entry : 0/0
 13311 ;;		On exit  : 0/0
 13312 ;;		Unchanged: 0/0
 13313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13317 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13318 ;;Total ram usage:        1 bytes
 13319 ;; Hardware stack levels used:    1
 13320 ;; Hardware stack levels required when called:    5
 13321 ;; This function calls:
 13322 ;;		_lcdInst
 13323 ;; This function is called by:
 13324 ;;		_main
 13325 ;;		_debug
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           	psect	text57
 13330  003A1E                     __ptext57:
 13331                           	opt stack 0
 13332  003A1E                     _initLCD:
 13333                           	opt stack 25
 13334                           
 13335                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 13336                           
 13337                           ;incstack = 0
 13338  003A1E  0E31               	movlw	49
 13339  003A20  6E27               	movwf	??_initLCD& (0+255),c
 13340  003A22  0EB2               	movlw	178
 13341  003A24                     u8057:
 13342  003A24  2EE8               	decfsz	wreg,f,c
 13343  003A26  D7FE               	bra	u8057
 13344  003A28  2E27               	decfsz	??_initLCD& (0+255),f,c
 13345  003A2A  D7FC               	bra	u8057
 13346  003A2C  D000               	nop2	
 13347                           
 13348                           ;lcd.c: 18: lcdInst(0b00110011);
 13349  003A2E  0E33               	movlw	51
 13350  003A30  ECFA  F01D         	call	_lcdInst
 13351                           
 13352                           ;lcd.c: 19: lcdInst(0b00110010);
 13353  003A34  0E32               	movlw	50
 13354  003A36  ECFA  F01D         	call	_lcdInst
 13355                           
 13356                           ;lcd.c: 20: lcdInst(0b00101000);
 13357  003A3A  0E28               	movlw	40
 13358  003A3C  ECFA  F01D         	call	_lcdInst
 13359                           
 13360                           ;lcd.c: 21: lcdInst(0b00001111);
 13361  003A40  0E0F               	movlw	15
 13362  003A42  ECFA  F01D         	call	_lcdInst
 13363                           
 13364                           ;lcd.c: 22: lcdInst(0b00000110);
 13365  003A46  0E06               	movlw	6
 13366  003A48  ECFA  F01D         	call	_lcdInst
 13367                           
 13368                           ;lcd.c: 23: lcdInst(0b00000001);
 13369  003A4C  0E01               	movlw	1
 13370  003A4E  ECFA  F01D         	call	_lcdInst
 13371                           
 13372                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 13373  003A52  0E31               	movlw	49
 13374  003A54  6E27               	movwf	??_initLCD& (0+255),c
 13375  003A56  0EB2               	movlw	178
 13376  003A58                     u8067:
 13377  003A58  2EE8               	decfsz	wreg,f,c
 13378  003A5A  D7FE               	bra	u8067
 13379  003A5C  2E27               	decfsz	??_initLCD& (0+255),f,c
 13380  003A5E  D7FC               	bra	u8067
 13381  003A60  D000               	nop2	
 13382  003A62  0012               	return		;funcret
 13383  003A64                     __end_of_initLCD:
 13384                           	opt stack 0
 13385                           tblptru	equ	0xFF8
 13386                           tblptrh	equ	0xFF7
 13387                           tblptrl	equ	0xFF6
 13388                           tablat	equ	0xFF5
 13389                           prodh	equ	0xFF4
 13390                           prodl	equ	0xFF3
 13391                           intcon	equ	0xFF2
 13392                           intcon3	equ	0xFF0
 13393                           postinc0	equ	0xFEE
 13394                           wreg	equ	0xFE8
 13395                           postdec1	equ	0xFE5
 13396                           fsr1l	equ	0xFE1
 13397                           indf2	equ	0xFDF
 13398                           postinc2	equ	0xFDE
 13399                           postdec2	equ	0xFDD
 13400                           fsr2h	equ	0xFDA
 13401                           fsr2l	equ	0xFD9
 13402                           status	equ	0xFD8
 13403                           
 13404 ;; *************** function _lcdInst *****************
 13405 ;; Defined at:
 13406 ;;		line 27 in file "lcd.c"
 13407 ;; Parameters:    Size  Location     Type
 13408 ;;  data            1    wreg     unsigned char 
 13409 ;; Auto vars:     Size  Location     Type
 13410 ;;  data            1   37[COMRAM] unsigned char 
 13411 ;; Return value:  Size  Location     Type
 13412 ;;                  1    wreg      void 
 13413 ;; Registers used:
 13414 ;;		wreg, status,2, status,0, cstack
 13415 ;; Tracked objects:
 13416 ;;		On entry : 0/0
 13417 ;;		On exit  : 0/0
 13418 ;;		Unchanged: 0/0
 13419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13421 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13422 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13423 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13424 ;;Total ram usage:        2 bytes
 13425 ;; Hardware stack levels used:    1
 13426 ;; Hardware stack levels required when called:    4
 13427 ;; This function calls:
 13428 ;;		_lcdNibble
 13429 ;; This function is called by:
 13430 ;;		_initLCD
 13431 ;;		_lcdHome
 13432 ;;		_lcdClear
 13433 ;;		_lcdNewline
 13434 ;; This function uses a non-reentrant model
 13435 ;;
 13436                           
 13437                           	psect	text58
 13438  003BF4                     __ptext58:
 13439                           	opt stack 0
 13440  003BF4                     _lcdInst:
 13441                           	opt stack 22
 13442                           
 13443                           ;incstack = 0
 13444                           ;lcdInst@data stored from wreg
 13445  003BF4  6E26               	movwf	lcdInst@data,c
 13446                           
 13447                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 13448  003BF6  948C               	bcf	3980,2,c	;volatile
 13449                           
 13450                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 13451  003BF8  0E74               	movlw	116
 13452  003BFA                     u8077:
 13453  003BFA  2EE8               	decfsz	wreg,f,c
 13454  003BFC  D7FE               	bra	u8077
 13455  003BFE  D000               	nop2	
 13456                           
 13457                           ;lcd.c: 30: lcdNibble(data);
 13458  003C00  5026               	movf	lcdInst@data,w,c
 13459  003C02  EC39  F01B         	call	_lcdNibble
 13460                           
 13461                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 13462  003C06  0E04               	movlw	4
 13463  003C08  6E25               	movwf	??_lcdInst& (0+255),c
 13464  003C0A  0E3E               	movlw	62
 13465  003C0C                     u8087:
 13466  003C0C  2EE8               	decfsz	wreg,f,c
 13467  003C0E  D7FE               	bra	u8087
 13468  003C10  2E25               	decfsz	??_lcdInst& (0+255),f,c
 13469  003C12  D7FC               	bra	u8087
 13470  003C14  0012               	return		;funcret
 13471  003C16                     __end_of_lcdInst:
 13472                           	opt stack 0
 13473                           tblptru	equ	0xFF8
 13474                           tblptrh	equ	0xFF7
 13475                           tblptrl	equ	0xFF6
 13476                           tablat	equ	0xFF5
 13477                           prodh	equ	0xFF4
 13478                           prodl	equ	0xFF3
 13479                           intcon	equ	0xFF2
 13480                           intcon3	equ	0xFF0
 13481                           postinc0	equ	0xFEE
 13482                           wreg	equ	0xFE8
 13483                           postdec1	equ	0xFE5
 13484                           fsr1l	equ	0xFE1
 13485                           indf2	equ	0xFDF
 13486                           postinc2	equ	0xFDE
 13487                           postdec2	equ	0xFDD
 13488                           fsr2h	equ	0xFDA
 13489                           fsr2l	equ	0xFD9
 13490                           status	equ	0xFD8
 13491                           
 13492 ;; *************** function _lcdNibble *****************
 13493 ;; Defined at:
 13494 ;;		line 46 in file "lcd.c"
 13495 ;; Parameters:    Size  Location     Type
 13496 ;;  data            1    wreg     unsigned char 
 13497 ;; Auto vars:     Size  Location     Type
 13498 ;;  data            1   35[COMRAM] unsigned char 
 13499 ;;  temp            1   34[COMRAM] unsigned char 
 13500 ;; Return value:  Size  Location     Type
 13501 ;;                  1    wreg      void 
 13502 ;; Registers used:
 13503 ;;		wreg, status,2, status,0
 13504 ;; Tracked objects:
 13505 ;;		On entry : 0/0
 13506 ;;		On exit  : 0/0
 13507 ;;		Unchanged: 0/0
 13508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13512 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13513 ;;Total ram usage:        2 bytes
 13514 ;; Hardware stack levels used:    1
 13515 ;; Hardware stack levels required when called:    3
 13516 ;; This function calls:
 13517 ;;		Nothing
 13518 ;; This function is called by:
 13519 ;;		_lcdInst
 13520 ;;		_putch
 13521 ;; This function uses a non-reentrant model
 13522 ;;
 13523                           
 13524                           	psect	text59
 13525  003672                     __ptext59:
 13526                           	opt stack 0
 13527  003672                     _lcdNibble:
 13528                           	opt stack 24
 13529                           
 13530                           ;incstack = 0
 13531                           ;lcdNibble@data stored from wreg
 13532  003672  6E24               	movwf	lcdNibble@data,c
 13533                           
 13534                           ;lcd.c: 48: char temp = data & 0xF0;
 13535  003674  5024               	movf	lcdNibble@data,w,c
 13536  003676  0BF0               	andlw	240
 13537  003678  6E23               	movwf	lcdNibble@temp,c
 13538                           
 13539                           ;lcd.c: 49: LATD = LATD & 0x0F;
 13540  00367A  508C               	movf	3980,w,c	;volatile
 13541  00367C  0B0F               	andlw	15
 13542  00367E  6E8C               	movwf	3980,c	;volatile
 13543                           
 13544                           ;lcd.c: 50: LATD = temp | LATD;
 13545  003680  5023               	movf	lcdNibble@temp,w,c
 13546  003682  108C               	iorwf	3980,w,c	;volatile
 13547  003684  6E8C               	movwf	3980,c	;volatile
 13548                           
 13549                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 13550  003686  968C               	bcf	3980,3,c	;volatile
 13551                           
 13552                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13553  003688  0ED6               	movlw	214
 13554  00368A                     u8097:
 13555  00368A  D000               	nop2	
 13556  00368C  D000               	nop2	
 13557  00368E  2EE8               	decfsz	wreg,f,c
 13558  003690  D7FC               	bra	u8097
 13559  003692  D000               	nop2	
 13560                           
 13561                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 13562  003694  868C               	bsf	3980,3,c	;volatile
 13563                           
 13564                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13565  003696  0ED6               	movlw	214
 13566  003698                     u8107:
 13567  003698  D000               	nop2	
 13568  00369A  D000               	nop2	
 13569  00369C  2EE8               	decfsz	wreg,f,c
 13570  00369E  D7FC               	bra	u8107
 13571  0036A0  D000               	nop2	
 13572                           
 13573                           ;lcd.c: 58: data = data << 4;
 13574  0036A2  3824               	swapf	lcdNibble@data,w,c
 13575  0036A4  0BF0               	andlw	240
 13576  0036A6  6E24               	movwf	lcdNibble@data,c
 13577                           
 13578                           ;lcd.c: 60: temp = data & 0xF0;
 13579  0036A8  5024               	movf	lcdNibble@data,w,c
 13580  0036AA  0BF0               	andlw	240
 13581  0036AC  6E23               	movwf	lcdNibble@temp,c
 13582                           
 13583                           ;lcd.c: 61: LATD = LATD & 0x0F;
 13584  0036AE  508C               	movf	3980,w,c	;volatile
 13585  0036B0  0B0F               	andlw	15
 13586  0036B2  6E8C               	movwf	3980,c	;volatile
 13587                           
 13588                           ;lcd.c: 62: LATD = temp | LATD;
 13589  0036B4  5023               	movf	lcdNibble@temp,w,c
 13590  0036B6  108C               	iorwf	3980,w,c	;volatile
 13591  0036B8  6E8C               	movwf	3980,c	;volatile
 13592                           
 13593                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 13594  0036BA  968C               	bcf	3980,3,c	;volatile
 13595                           
 13596                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13597  0036BC  0ED6               	movlw	214
 13598  0036BE                     u8117:
 13599  0036BE  D000               	nop2	
 13600  0036C0  D000               	nop2	
 13601  0036C2  2EE8               	decfsz	wreg,f,c
 13602  0036C4  D7FC               	bra	u8117
 13603  0036C6  D000               	nop2	
 13604                           
 13605                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 13606  0036C8  868C               	bsf	3980,3,c	;volatile
 13607                           
 13608                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13609  0036CA  0ED6               	movlw	214
 13610  0036CC                     u8127:
 13611  0036CC  D000               	nop2	
 13612  0036CE  D000               	nop2	
 13613  0036D0  2EE8               	decfsz	wreg,f,c
 13614  0036D2  D7FC               	bra	u8127
 13615  0036D4  D000               	nop2	
 13616  0036D6  0012               	return		;funcret
 13617  0036D8                     __end_of_lcdNibble:
 13618                           	opt stack 0
 13619                           tblptru	equ	0xFF8
 13620                           tblptrh	equ	0xFF7
 13621                           tblptrl	equ	0xFF6
 13622                           tablat	equ	0xFF5
 13623                           prodh	equ	0xFF4
 13624                           prodl	equ	0xFF3
 13625                           intcon	equ	0xFF2
 13626                           intcon3	equ	0xFF0
 13627                           postinc0	equ	0xFEE
 13628                           wreg	equ	0xFE8
 13629                           postdec1	equ	0xFE5
 13630                           fsr1l	equ	0xFE1
 13631                           indf2	equ	0xFDF
 13632                           postinc2	equ	0xFDE
 13633                           postdec2	equ	0xFDD
 13634                           fsr2h	equ	0xFDA
 13635                           fsr2l	equ	0xFD9
 13636                           status	equ	0xFD8
 13637                           
 13638 ;; *************** function ___almod *****************
 13639 ;; Defined at:
 13640 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 13641 ;; Parameters:    Size  Location     Type
 13642 ;;  dividend        4   48[COMRAM] long 
 13643 ;;  divisor         4   52[COMRAM] long 
 13644 ;; Auto vars:     Size  Location     Type
 13645 ;;  sign            1   57[COMRAM] unsigned char 
 13646 ;;  counter         1   56[COMRAM] unsigned char 
 13647 ;; Return value:  Size  Location     Type
 13648 ;;                  4   48[COMRAM] long 
 13649 ;; Registers used:
 13650 ;;		wreg, status,2, status,0
 13651 ;; Tracked objects:
 13652 ;;		On entry : 0/0
 13653 ;;		On exit  : 0/0
 13654 ;;		Unchanged: 0/0
 13655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13656 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13660 ;;Total ram usage:       10 bytes
 13661 ;; Hardware stack levels used:    1
 13662 ;; Hardware stack levels required when called:    3
 13663 ;; This function calls:
 13664 ;;		Nothing
 13665 ;; This function is called by:
 13666 ;;		_main
 13667 ;; This function uses a non-reentrant model
 13668 ;;
 13669                           
 13670                           	psect	text60
 13671  00306A                     __ptext60:
 13672                           	opt stack 0
 13673  00306A                     ___almod:
 13674                           	opt stack 27
 13675                           
 13676                           ;incstack = 0
 13677  00306A  0E00               	movlw	0
 13678  00306C  6E3A               	movwf	___almod@sign,c
 13679  00306E  AE34               	btfss	___almod@dividend+3,7,c
 13680  003070  D00A               	goto	l7512
 13681  003072  1E34               	comf	___almod@dividend+3,f,c
 13682  003074  1E33               	comf	___almod@dividend+2,f,c
 13683  003076  1E32               	comf	___almod@dividend+1,f,c
 13684  003078  6C31               	negf	___almod@dividend,c
 13685  00307A  0E00               	movlw	0
 13686  00307C  2232               	addwfc	___almod@dividend+1,f,c
 13687  00307E  2233               	addwfc	___almod@dividend+2,f,c
 13688  003080  2234               	addwfc	___almod@dividend+3,f,c
 13689  003082  0E01               	movlw	1
 13690  003084  6E3A               	movwf	___almod@sign,c
 13691  003086                     l7512:
 13692  003086  AE38               	btfss	___almod@divisor+3,7,c
 13693  003088  D008               	goto	l7516
 13694  00308A  1E38               	comf	___almod@divisor+3,f,c
 13695  00308C  1E37               	comf	___almod@divisor+2,f,c
 13696  00308E  1E36               	comf	___almod@divisor+1,f,c
 13697  003090  6C35               	negf	___almod@divisor,c
 13698  003092  0E00               	movlw	0
 13699  003094  2236               	addwfc	___almod@divisor+1,f,c
 13700  003096  2237               	addwfc	___almod@divisor+2,f,c
 13701  003098  2238               	addwfc	___almod@divisor+3,f,c
 13702  00309A                     l7516:
 13703  00309A  5035               	movf	___almod@divisor,w,c
 13704  00309C  1036               	iorwf	___almod@divisor+1,w,c
 13705  00309E  1037               	iorwf	___almod@divisor+2,w,c
 13706  0030A0  1038               	iorwf	___almod@divisor+3,w,c
 13707  0030A2  B4D8               	btfsc	status,2,c
 13708  0030A4  D024               	goto	l7532
 13709  0030A6  0E01               	movlw	1
 13710  0030A8  6E39               	movwf	___almod@counter,c
 13711  0030AA  D006               	goto	l7522
 13712  0030AC                     l7520:
 13713  0030AC  90D8               	bcf	status,0,c
 13714  0030AE  3635               	rlcf	___almod@divisor,f,c
 13715  0030B0  3636               	rlcf	___almod@divisor+1,f,c
 13716  0030B2  3637               	rlcf	___almod@divisor+2,f,c
 13717  0030B4  3638               	rlcf	___almod@divisor+3,f,c
 13718  0030B6  2A39               	incf	___almod@counter,f,c
 13719  0030B8                     l7522:
 13720  0030B8  AE38               	btfss	___almod@divisor+3,7,c
 13721  0030BA  D7F8               	goto	l7520
 13722  0030BC                     l7524:
 13723  0030BC  5035               	movf	___almod@divisor,w,c
 13724  0030BE  5C31               	subwf	___almod@dividend,w,c
 13725  0030C0  5036               	movf	___almod@divisor+1,w,c
 13726  0030C2  5832               	subwfb	___almod@dividend+1,w,c
 13727  0030C4  5037               	movf	___almod@divisor+2,w,c
 13728  0030C6  5833               	subwfb	___almod@dividend+2,w,c
 13729  0030C8  5038               	movf	___almod@divisor+3,w,c
 13730  0030CA  5834               	subwfb	___almod@dividend+3,w,c
 13731  0030CC  A0D8               	btfss	status,0,c
 13732  0030CE  D008               	goto	l7528
 13733  0030D0  5035               	movf	___almod@divisor,w,c
 13734  0030D2  5E31               	subwf	___almod@dividend,f,c
 13735  0030D4  5036               	movf	___almod@divisor+1,w,c
 13736  0030D6  5A32               	subwfb	___almod@dividend+1,f,c
 13737  0030D8  5037               	movf	___almod@divisor+2,w,c
 13738  0030DA  5A33               	subwfb	___almod@dividend+2,f,c
 13739  0030DC  5038               	movf	___almod@divisor+3,w,c
 13740  0030DE  5A34               	subwfb	___almod@dividend+3,f,c
 13741  0030E0                     l7528:
 13742  0030E0  90D8               	bcf	status,0,c
 13743  0030E2  3238               	rrcf	___almod@divisor+3,f,c
 13744  0030E4  3237               	rrcf	___almod@divisor+2,f,c
 13745  0030E6  3236               	rrcf	___almod@divisor+1,f,c
 13746  0030E8  3235               	rrcf	___almod@divisor,f,c
 13747  0030EA  2E39               	decfsz	___almod@counter,f,c
 13748  0030EC  D7E7               	goto	l7524
 13749  0030EE                     l7532:
 13750  0030EE  503A               	movf	___almod@sign,w,c
 13751  0030F0  B4D8               	btfsc	status,2,c
 13752  0030F2  D008               	goto	l7536
 13753  0030F4  1E34               	comf	___almod@dividend+3,f,c
 13754  0030F6  1E33               	comf	___almod@dividend+2,f,c
 13755  0030F8  1E32               	comf	___almod@dividend+1,f,c
 13756  0030FA  6C31               	negf	___almod@dividend,c
 13757  0030FC  0E00               	movlw	0
 13758  0030FE  2232               	addwfc	___almod@dividend+1,f,c
 13759  003100  2233               	addwfc	___almod@dividend+2,f,c
 13760  003102  2234               	addwfc	___almod@dividend+3,f,c
 13761  003104                     l7536:
 13762  003104  C031  F031         	movff	___almod@dividend,?___almod
 13763  003108  C032  F032         	movff	___almod@dividend+1,?___almod+1
 13764  00310C  C033  F033         	movff	___almod@dividend+2,?___almod+2
 13765  003110  C034  F034         	movff	___almod@dividend+3,?___almod+3
 13766  003114  0012               	return	
 13767  003116                     __end_of___almod:
 13768                           	opt stack 0
 13769                           tblptru	equ	0xFF8
 13770                           tblptrh	equ	0xFF7
 13771                           tblptrl	equ	0xFF6
 13772                           tablat	equ	0xFF5
 13773                           prodh	equ	0xFF4
 13774                           prodl	equ	0xFF3
 13775                           intcon	equ	0xFF2
 13776                           intcon3	equ	0xFF0
 13777                           postinc0	equ	0xFEE
 13778                           wreg	equ	0xFE8
 13779                           postdec1	equ	0xFE5
 13780                           fsr1l	equ	0xFE1
 13781                           indf2	equ	0xFDF
 13782                           postinc2	equ	0xFDE
 13783                           postdec2	equ	0xFDD
 13784                           fsr2h	equ	0xFDA
 13785                           fsr2l	equ	0xFD9
 13786                           status	equ	0xFD8
 13787                           
 13788 ;; *************** function ___aldiv *****************
 13789 ;; Defined at:
 13790 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 13791 ;; Parameters:    Size  Location     Type
 13792 ;;  dividend        4   34[COMRAM] long 
 13793 ;;  divisor         4   38[COMRAM] long 
 13794 ;; Auto vars:     Size  Location     Type
 13795 ;;  quotient        4   44[COMRAM] long 
 13796 ;;  sign            1   43[COMRAM] unsigned char 
 13797 ;;  counter         1   42[COMRAM] unsigned char 
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  4   34[COMRAM] long 
 13800 ;; Registers used:
 13801 ;;		wreg, status,2, status,0
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13807 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13808 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13810 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;Total ram usage:       14 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    3
 13814 ;; This function calls:
 13815 ;;		Nothing
 13816 ;; This function is called by:
 13817 ;;		_main
 13818 ;; This function uses a non-reentrant model
 13819 ;;
 13820                           
 13821                           	psect	text61
 13822  002BFE                     __ptext61:
 13823                           	opt stack 0
 13824  002BFE                     ___aldiv:
 13825                           	opt stack 27
 13826                           
 13827                           ;incstack = 0
 13828  002BFE  0E00               	movlw	0
 13829  002C00  6E2C               	movwf	___aldiv@sign,c
 13830  002C02  AE2A               	btfss	___aldiv@divisor+3,7,c
 13831  002C04  D00A               	goto	l7468
 13832  002C06  1E2A               	comf	___aldiv@divisor+3,f,c
 13833  002C08  1E29               	comf	___aldiv@divisor+2,f,c
 13834  002C0A  1E28               	comf	___aldiv@divisor+1,f,c
 13835  002C0C  6C27               	negf	___aldiv@divisor,c
 13836  002C0E  0E00               	movlw	0
 13837  002C10  2228               	addwfc	___aldiv@divisor+1,f,c
 13838  002C12  2229               	addwfc	___aldiv@divisor+2,f,c
 13839  002C14  222A               	addwfc	___aldiv@divisor+3,f,c
 13840  002C16  0E01               	movlw	1
 13841  002C18  6E2C               	movwf	___aldiv@sign,c
 13842  002C1A                     l7468:
 13843  002C1A  AE26               	btfss	___aldiv@dividend+3,7,c
 13844  002C1C  D00A               	goto	l7474
 13845  002C1E  1E26               	comf	___aldiv@dividend+3,f,c
 13846  002C20  1E25               	comf	___aldiv@dividend+2,f,c
 13847  002C22  1E24               	comf	___aldiv@dividend+1,f,c
 13848  002C24  6C23               	negf	___aldiv@dividend,c
 13849  002C26  0E00               	movlw	0
 13850  002C28  2224               	addwfc	___aldiv@dividend+1,f,c
 13851  002C2A  2225               	addwfc	___aldiv@dividend+2,f,c
 13852  002C2C  2226               	addwfc	___aldiv@dividend+3,f,c
 13853  002C2E  0E01               	movlw	1
 13854  002C30  1A2C               	xorwf	___aldiv@sign,f,c
 13855  002C32                     l7474:
 13856  002C32  0E00               	movlw	0
 13857  002C34  6E2D               	movwf	___aldiv@quotient,c
 13858  002C36  0E00               	movlw	0
 13859  002C38  6E2E               	movwf	___aldiv@quotient+1,c
 13860  002C3A  0E00               	movlw	0
 13861  002C3C  6E2F               	movwf	___aldiv@quotient+2,c
 13862  002C3E  0E00               	movlw	0
 13863  002C40  6E30               	movwf	___aldiv@quotient+3,c
 13864  002C42  5027               	movf	___aldiv@divisor,w,c
 13865  002C44  1028               	iorwf	___aldiv@divisor+1,w,c
 13866  002C46  1029               	iorwf	___aldiv@divisor+2,w,c
 13867  002C48  102A               	iorwf	___aldiv@divisor+3,w,c
 13868  002C4A  B4D8               	btfsc	status,2,c
 13869  002C4C  D02A               	goto	l7496
 13870  002C4E  0E01               	movlw	1
 13871  002C50  6E2B               	movwf	___aldiv@counter,c
 13872  002C52  D006               	goto	l7482
 13873  002C54                     l7480:
 13874  002C54  90D8               	bcf	status,0,c
 13875  002C56  3627               	rlcf	___aldiv@divisor,f,c
 13876  002C58  3628               	rlcf	___aldiv@divisor+1,f,c
 13877  002C5A  3629               	rlcf	___aldiv@divisor+2,f,c
 13878  002C5C  362A               	rlcf	___aldiv@divisor+3,f,c
 13879  002C5E  2A2B               	incf	___aldiv@counter,f,c
 13880  002C60                     l7482:
 13881  002C60  AE2A               	btfss	___aldiv@divisor+3,7,c
 13882  002C62  D7F8               	goto	l7480
 13883  002C64                     l7484:
 13884  002C64  90D8               	bcf	status,0,c
 13885  002C66  362D               	rlcf	___aldiv@quotient,f,c
 13886  002C68  362E               	rlcf	___aldiv@quotient+1,f,c
 13887  002C6A  362F               	rlcf	___aldiv@quotient+2,f,c
 13888  002C6C  3630               	rlcf	___aldiv@quotient+3,f,c
 13889  002C6E  5027               	movf	___aldiv@divisor,w,c
 13890  002C70  5C23               	subwf	___aldiv@dividend,w,c
 13891  002C72  5028               	movf	___aldiv@divisor+1,w,c
 13892  002C74  5824               	subwfb	___aldiv@dividend+1,w,c
 13893  002C76  5029               	movf	___aldiv@divisor+2,w,c
 13894  002C78  5825               	subwfb	___aldiv@dividend+2,w,c
 13895  002C7A  502A               	movf	___aldiv@divisor+3,w,c
 13896  002C7C  5826               	subwfb	___aldiv@dividend+3,w,c
 13897  002C7E  A0D8               	btfss	status,0,c
 13898  002C80  D009               	goto	l7492
 13899  002C82  5027               	movf	___aldiv@divisor,w,c
 13900  002C84  5E23               	subwf	___aldiv@dividend,f,c
 13901  002C86  5028               	movf	___aldiv@divisor+1,w,c
 13902  002C88  5A24               	subwfb	___aldiv@dividend+1,f,c
 13903  002C8A  5029               	movf	___aldiv@divisor+2,w,c
 13904  002C8C  5A25               	subwfb	___aldiv@dividend+2,f,c
 13905  002C8E  502A               	movf	___aldiv@divisor+3,w,c
 13906  002C90  5A26               	subwfb	___aldiv@dividend+3,f,c
 13907  002C92  802D               	bsf	___aldiv@quotient,0,c
 13908  002C94                     l7492:
 13909  002C94  90D8               	bcf	status,0,c
 13910  002C96  322A               	rrcf	___aldiv@divisor+3,f,c
 13911  002C98  3229               	rrcf	___aldiv@divisor+2,f,c
 13912  002C9A  3228               	rrcf	___aldiv@divisor+1,f,c
 13913  002C9C  3227               	rrcf	___aldiv@divisor,f,c
 13914  002C9E  2E2B               	decfsz	___aldiv@counter,f,c
 13915  002CA0  D7E1               	goto	l7484
 13916  002CA2                     l7496:
 13917  002CA2  502C               	movf	___aldiv@sign,w,c
 13918  002CA4  B4D8               	btfsc	status,2,c
 13919  002CA6  D008               	goto	l7500
 13920  002CA8  1E30               	comf	___aldiv@quotient+3,f,c
 13921  002CAA  1E2F               	comf	___aldiv@quotient+2,f,c
 13922  002CAC  1E2E               	comf	___aldiv@quotient+1,f,c
 13923  002CAE  6C2D               	negf	___aldiv@quotient,c
 13924  002CB0  0E00               	movlw	0
 13925  002CB2  222E               	addwfc	___aldiv@quotient+1,f,c
 13926  002CB4  222F               	addwfc	___aldiv@quotient+2,f,c
 13927  002CB6  2230               	addwfc	___aldiv@quotient+3,f,c
 13928  002CB8                     l7500:
 13929  002CB8  C02D  F023         	movff	___aldiv@quotient,?___aldiv
 13930  002CBC  C02E  F024         	movff	___aldiv@quotient+1,?___aldiv+1
 13931  002CC0  C02F  F025         	movff	___aldiv@quotient+2,?___aldiv+2
 13932  002CC4  C030  F026         	movff	___aldiv@quotient+3,?___aldiv+3
 13933  002CC8  0012               	return	
 13934  002CCA                     __end_of___aldiv:
 13935                           	opt stack 0
 13936                           tblptru	equ	0xFF8
 13937                           tblptrh	equ	0xFF7
 13938                           tblptrl	equ	0xFF6
 13939                           tablat	equ	0xFF5
 13940                           prodh	equ	0xFF4
 13941                           prodl	equ	0xFF3
 13942                           intcon	equ	0xFF2
 13943                           intcon3	equ	0xFF0
 13944                           postinc0	equ	0xFEE
 13945                           wreg	equ	0xFE8
 13946                           postdec1	equ	0xFE5
 13947                           fsr1l	equ	0xFE1
 13948                           indf2	equ	0xFDF
 13949                           postinc2	equ	0xFDE
 13950                           postdec2	equ	0xFDD
 13951                           fsr2h	equ	0xFDA
 13952                           fsr2l	equ	0xFD9
 13953                           status	equ	0xFD8
 13954                           
 13955 ;; *************** function _service *****************
 13956 ;; Defined at:
 13957 ;;		line 330 in file "main.c"
 13958 ;; Parameters:    Size  Location     Type
 13959 ;;		None
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;  key             1   33[COMRAM] unsigned char 
 13962 ;; Return value:  Size  Location     Type
 13963 ;;                  1    wreg      void 
 13964 ;; Registers used:
 13965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13966 ;; Tracked objects:
 13967 ;;		On entry : 0/0
 13968 ;;		On exit  : 0/0
 13969 ;;		Unchanged: 0/0
 13970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13972 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13973 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13974 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13975 ;;Total ram usage:       15 bytes
 13976 ;; Hardware stack levels used:    1
 13977 ;; Hardware stack levels required when called:    2
 13978 ;; This function calls:
 13979 ;;		_keyPressedInterruptService
 13980 ;;		_servoInterruptService
 13981 ;;		i2_startTimer
 13982 ;; This function is called by:
 13983 ;;		Interrupt level 2
 13984 ;; This function uses a non-reentrant model
 13985 ;;
 13986                           
 13987                           	psect	intcode
 13988  000008                     __pintcode:
 13989                           	opt stack 0
 13990  000008                     _service:
 13991                           	opt stack 21
 13992                           
 13993                           ;incstack = 0
 13994  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13995  00000A  EDB2  F014         	call	int_func,f	;refresh shadow registers
 13996                           tblptru	equ	0xFF8
 13997                           tblptrh	equ	0xFF7
 13998                           tblptrl	equ	0xFF6
 13999                           tablat	equ	0xFF5
 14000                           prodh	equ	0xFF4
 14001                           prodl	equ	0xFF3
 14002                           intcon	equ	0xFF2
 14003                           intcon3	equ	0xFF0
 14004                           postinc0	equ	0xFEE
 14005                           wreg	equ	0xFE8
 14006                           postdec1	equ	0xFE5
 14007                           fsr1l	equ	0xFE1
 14008                           indf2	equ	0xFDF
 14009                           postinc2	equ	0xFDE
 14010                           postdec2	equ	0xFDD
 14011                           fsr2h	equ	0xFDA
 14012                           fsr2l	equ	0xFD9
 14013                           status	equ	0xFD8
 14014                           
 14015                           	psect	intcode_body
 14016  002964                     __pintcode_body:
 14017                           	opt stack 21
 14018  002964                     int_func:
 14019                           	opt stack 21
 14020  002964  0006               	pop		; remove dummy address from shadow register refresh
 14021  002966  CFFA F014          	movff	pclath,??_service
 14022  00296A  CFFB F015          	movff	pclatu,??_service+1
 14023  00296E  CFE9 F016          	movff	fsr0l,??_service+2
 14024  002972  CFEA F017          	movff	fsr0h,??_service+3
 14025  002976  CFE1 F018          	movff	fsr1l,??_service+4
 14026  00297A  CFE2 F019          	movff	fsr1h,??_service+5
 14027  00297E  CFD9 F01A          	movff	fsr2l,??_service+6
 14028  002982  CFDA F01B          	movff	fsr2h,??_service+7
 14029  002986  CFF3 F01C          	movff	prodl,??_service+8
 14030  00298A  CFF4 F01D          	movff	prodh,??_service+9
 14031  00298E  CFF6 F01E          	movff	tblptrl,??_service+10
 14032  002992  CFF7 F01F          	movff	tblptrh,??_service+11
 14033  002996  CFF8 F020          	movff	tblptru,??_service+12
 14034  00299A  CFF5 F021          	movff	tablat,??_service+13
 14035                           
 14036                           ;main.c: 332: if( servoInterruptService() )return;
 14037  00299E  ECB7  F013         	call	_servoInterruptService	;wreg free
 14038  0029A2  0900               	iorlw	0
 14039  0029A4  A4D8               	btfss	status,2,c
 14040  0029A6  D032               	goto	i2l187
 14041                           
 14042                           ;main.c: 337: if(TMR1IF){
 14043  0029A8  A09E               	btfss	3998,0,c	;volatile
 14044  0029AA  D016               	goto	i2l188
 14045                           
 14046                           ;main.c: 338: startTimer(1,0x8683);
 14047  0029AC  0E00               	movlw	0
 14048  0029AE  6E08               	movwf	i2startTimer@timer+1,c
 14049  0029B0  0E01               	movlw	1
 14050  0029B2  6E07               	movwf	i2startTimer@timer,c
 14051  0029B4  0E83               	movlw	131
 14052  0029B6  6E09               	movwf	i2startTimer@val,c
 14053  0029B8  0E86               	movlw	134
 14054  0029BA  6E0A               	movwf	i2startTimer@val+1,c
 14055  0029BC  0E00               	movlw	0
 14056  0029BE  6E0B               	movwf	i2startTimer@val+2,c
 14057  0029C0  0E00               	movlw	0
 14058  0029C2  6E0C               	movwf	i2startTimer@val+3,c
 14059  0029C4  ECC4  F01C         	call	i2_startTimer	;wreg free
 14060                           
 14061                           ;main.c: 339: time+=1;
 14062  0029C8  0E01               	movlw	1
 14063  0029CA  264E               	addwf	_time,f,c
 14064  0029CC  0E00               	movlw	0
 14065  0029CE  224F               	addwfc	_time+1,f,c
 14066  0029D0  2250               	addwfc	_time+2,f,c
 14067  0029D2  2251               	addwfc	_time+3,f,c
 14068                           
 14069                           ;main.c: 340: TMR1IF = 0;
 14070  0029D4  909E               	bcf	3998,0,c	;volatile
 14071                           
 14072                           ;main.c: 341: return;
 14073  0029D6  D01A               	goto	i2l187
 14074  0029D8                     i2l188:
 14075                           
 14076                           ;main.c: 342: }
 14077                           ;main.c: 345: if(INT0IF){ INT0IF = 0;
 14078  0029D8  A2F2               	btfss	intcon,1,c	;volatile
 14079  0029DA  D006               	goto	i2l189
 14080  0029DC  92F2               	bcf	intcon,1,c	;volatile
 14081                           
 14082                           ;main.c: 346: batteryDetected = 1;
 14083  0029DE  0E00               	movlw	0
 14084  0029E0  6E53               	movwf	_batteryDetected+1,c
 14085  0029E2  0E01               	movlw	1
 14086  0029E4  6E52               	movwf	_batteryDetected,c
 14087                           
 14088                           ;main.c: 347: return;
 14089  0029E6  D012               	goto	i2l187
 14090  0029E8                     i2l189:
 14091                           
 14092                           ;main.c: 348: }
 14093                           ;main.c: 351: if(INT1IF && INT1IE){INT1IF = 0;
 14094  0029E8  B0F0               	btfsc	intcon3,0,c	;volatile
 14095  0029EA  A6F0               	btfss	intcon3,3,c	;volatile
 14096  0029EC  D00F               	goto	i2l187
 14097  0029EE  90F0               	bcf	intcon3,0,c	;volatile
 14098                           
 14099                           ;main.c: 352: keyPressedInterruptService();
 14100  0029F0  EC0B  F01E         	call	_keyPressedInterruptService	;wreg free
 14101                           
 14102                           ;main.c: 353: char key = (PORTB & 0xF0) >> 4;
 14103  0029F4  3881               	swapf	3969,w,c	;volatile
 14104  0029F6  0B0F               	andlw	15
 14105  0029F8  0B0F               	andlw	15
 14106  0029FA  6E22               	movwf	service@key,c
 14107                           
 14108                           ;main.c: 354: if(key == 12)terminate = 1;
 14109  0029FC  0E0C               	movlw	12
 14110  0029FE  1822               	xorwf	service@key,w,c
 14111  002A00  A4D8               	btfss	status,2,c
 14112  002A02  D004               	goto	i2l187
 14113  002A04  0E00               	movlw	0
 14114  002A06  6E5B               	movwf	_terminate+1,c
 14115  002A08  0E01               	movlw	1
 14116  002A0A  6E5A               	movwf	_terminate,c
 14117  002A0C                     i2l187:
 14118  002A0C  C021  FFF5         	movff	??_service+13,tablat
 14119  002A10  C020  FFF8         	movff	??_service+12,tblptru
 14120  002A14  C01F  FFF7         	movff	??_service+11,tblptrh
 14121  002A18  C01E  FFF6         	movff	??_service+10,tblptrl
 14122  002A1C  C01D  FFF4         	movff	??_service+9,prodh
 14123  002A20  C01C  FFF3         	movff	??_service+8,prodl
 14124  002A24  C01B  FFDA         	movff	??_service+7,fsr2h
 14125  002A28  C01A  FFD9         	movff	??_service+6,fsr2l
 14126  002A2C  C019  FFE2         	movff	??_service+5,fsr1h
 14127  002A30  C018  FFE1         	movff	??_service+4,fsr1l
 14128  002A34  C017  FFEA         	movff	??_service+3,fsr0h
 14129  002A38  C016  FFE9         	movff	??_service+2,fsr0l
 14130  002A3C  C015  FFFB         	movff	??_service+1,pclatu
 14131  002A40  C014  FFFA         	movff	??_service,pclath
 14132  002A44  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14133  002A46  0011               	retfie		f
 14134  002A48                     __end_of_service:
 14135                           	opt stack 0
 14136                           pclatu	equ	0xFFB
 14137                           pclath	equ	0xFFA
 14138                           tblptru	equ	0xFF8
 14139                           tblptrh	equ	0xFF7
 14140                           tblptrl	equ	0xFF6
 14141                           tablat	equ	0xFF5
 14142                           prodh	equ	0xFF4
 14143                           prodl	equ	0xFF3
 14144                           intcon	equ	0xFF2
 14145                           intcon3	equ	0xFF0
 14146                           postinc0	equ	0xFEE
 14147                           fsr0h	equ	0xFEA
 14148                           fsr0l	equ	0xFE9
 14149                           wreg	equ	0xFE8
 14150                           postdec1	equ	0xFE5
 14151                           fsr1h	equ	0xFE2
 14152                           fsr1l	equ	0xFE1
 14153                           indf2	equ	0xFDF
 14154                           postinc2	equ	0xFDE
 14155                           postdec2	equ	0xFDD
 14156                           fsr2h	equ	0xFDA
 14157                           fsr2l	equ	0xFD9
 14158                           status	equ	0xFD8
 14159                           
 14160 ;; *************** function _servoInterruptService *****************
 14161 ;; Defined at:
 14162 ;;		line 55 in file "servo.c"
 14163 ;; Parameters:    Size  Location     Type
 14164 ;;		None
 14165 ;; Auto vars:     Size  Location     Type
 14166 ;;		None
 14167 ;; Return value:  Size  Location     Type
 14168 ;;                  1    wreg      unsigned char 
 14169 ;; Registers used:
 14170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14171 ;; Tracked objects:
 14172 ;;		On entry : 0/0
 14173 ;;		On exit  : 0/0
 14174 ;;		Unchanged: 0/0
 14175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14178 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14179 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14180 ;;Total ram usage:        4 bytes
 14181 ;; Hardware stack levels used:    1
 14182 ;; Hardware stack levels required when called:    1
 14183 ;; This function calls:
 14184 ;;		i2___awmod
 14185 ;;		i2_digitalWrite
 14186 ;;		i2_startTimer
 14187 ;; This function is called by:
 14188 ;;		_service
 14189 ;; This function uses a non-reentrant model
 14190 ;;
 14191                           
 14192                           	psect	text63
 14193  00276E                     __ptext63:
 14194                           	opt stack 0
 14195  00276E                     _servoInterruptService:
 14196                           	opt stack 21
 14197                           
 14198                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 14199                           
 14200                           ;incstack = 0
 14201  00276E  A4F2               	btfss	intcon,2,c	;volatile
 14202  002770  D082               	goto	i2l5456
 14203  002772  94F2               	bcf	intcon,2,c	;volatile
 14204                           
 14205                           ;servo.c: 58: digitalWrite(servos[curr],0);
 14206  002774  90D8               	bcf	status,0,c
 14207  002776  3454               	rlcf	_curr,w,c
 14208  002778  6ED9               	movwf	fsr2l,c
 14209  00277A  3455               	rlcf	_curr+1,w,c
 14210  00277C  6EDA               	movwf	fsr2h,c
 14211  00277E  0E63               	movlw	low _servos
 14212  002780  26D9               	addwf	fsr2l,f,c
 14213  002782  0E01               	movlw	high _servos
 14214  002784  22DA               	addwfc	fsr2h,f,c
 14215  002786  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14216  00278A  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14217  00278E  0E00               	movlw	0
 14218  002790  6E0A               	movwf	i2digitalWrite@val+1,c
 14219  002792  0E00               	movlw	0
 14220  002794  6E09               	movwf	i2digitalWrite@val,c
 14221  002796  ECC9  F016         	call	i2_digitalWrite	;wreg free
 14222                           
 14223                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 14224  00279A  0E01               	movlw	1
 14225  00279C  2454               	addwf	_curr,w,c
 14226  00279E  6E01               	movwf	i2___awmod@dividend,c
 14227  0027A0  0E00               	movlw	0
 14228  0027A2  2055               	addwfc	_curr+1,w,c
 14229  0027A4  6E02               	movwf	i2___awmod@dividend+1,c
 14230  0027A6  0E01               	movlw	1
 14231  0027A8  0100               	movlb	0	; () banked
 14232  0027AA  25FC               	addwf	_n& (0+255),w,b
 14233  0027AC  6E03               	movwf	i2___awmod@divisor,c
 14234  0027AE  0E00               	movlw	0
 14235  0027B0  0100               	movlb	0	; () banked
 14236  0027B2  21FD               	addwfc	(_n+1)& (0+255),w,b
 14237  0027B4  6E04               	movwf	i2___awmod@divisor+1,c
 14238  0027B6  EC98  F01A         	call	i2___awmod	;wreg free
 14239  0027BA  90D8               	bcf	status,0,c
 14240  0027BC  3601               	rlcf	?i2___awmod,f,c
 14241  0027BE  3602               	rlcf	?i2___awmod+1,f,c
 14242  0027C0  0E63               	movlw	low _servos
 14243  0027C2  2401               	addwf	?i2___awmod,w,c
 14244  0027C4  6ED9               	movwf	fsr2l,c
 14245  0027C6  0E01               	movlw	high _servos
 14246  0027C8  2002               	addwfc	?i2___awmod+1,w,c
 14247  0027CA  6EDA               	movwf	fsr2h,c
 14248  0027CC  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14249  0027D0  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14250  0027D4  0E00               	movlw	0
 14251  0027D6  6E0A               	movwf	i2digitalWrite@val+1,c
 14252  0027D8  0E01               	movlw	1
 14253  0027DA  6E09               	movwf	i2digitalWrite@val,c
 14254  0027DC  ECC9  F016         	call	i2_digitalWrite	;wreg free
 14255                           
 14256                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 14257  0027E0  0E00               	movlw	0
 14258  0027E2  6E08               	movwf	i2startTimer@timer+1,c
 14259  0027E4  0E00               	movlw	0
 14260  0027E6  6E07               	movwf	i2startTimer@timer,c
 14261  0027E8  0EFF               	movlw	255
 14262  0027EA  6E10               	movwf	??_servoInterruptService& (0+255),c
 14263  0027EC  0EFF               	movlw	255
 14264  0027EE  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 14265  0027F0  0E01               	movlw	1
 14266  0027F2  2454               	addwf	_curr,w,c
 14267  0027F4  6E01               	movwf	i2___awmod@dividend,c
 14268  0027F6  0E00               	movlw	0
 14269  0027F8  2055               	addwfc	_curr+1,w,c
 14270  0027FA  6E02               	movwf	i2___awmod@dividend+1,c
 14271  0027FC  0E01               	movlw	1
 14272  0027FE  0100               	movlb	0	; () banked
 14273  002800  25FC               	addwf	_n& (0+255),w,b
 14274  002802  6E03               	movwf	i2___awmod@divisor,c
 14275  002804  0E00               	movlw	0
 14276  002806  0100               	movlb	0	; () banked
 14277  002808  21FD               	addwfc	(_n+1)& (0+255),w,b
 14278  00280A  6E04               	movwf	i2___awmod@divisor+1,c
 14279  00280C  EC98  F01A         	call	i2___awmod	;wreg free
 14280  002810  90D8               	bcf	status,0,c
 14281  002812  3601               	rlcf	?i2___awmod,f,c
 14282  002814  3602               	rlcf	?i2___awmod+1,f,c
 14283  002816  0E5B               	movlw	low _pulse
 14284  002818  2401               	addwf	?i2___awmod,w,c
 14285  00281A  6ED9               	movwf	fsr2l,c
 14286  00281C  0E01               	movlw	high _pulse
 14287  00281E  2002               	addwfc	?i2___awmod+1,w,c
 14288  002820  6EDA               	movwf	fsr2h,c
 14289  002822  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 14290  002826  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 14291  00282A  1E12               	comf	??_servoInterruptService+2,f,c
 14292  00282C  1E13               	comf	??_servoInterruptService+3,f,c
 14293  00282E  4A12               	infsnz	??_servoInterruptService+2,f,c
 14294  002830  2A13               	incf	??_servoInterruptService+3,f,c
 14295  002832  5010               	movf	??_servoInterruptService,w,c
 14296  002834  2612               	addwf	??_servoInterruptService+2,f,c
 14297  002836  5011               	movf	??_servoInterruptService+1,w,c
 14298  002838  2213               	addwfc	??_servoInterruptService+3,f,c
 14299  00283A  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 14300  00283E  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 14301  002842  6A0B               	clrf	i2startTimer@val+2,c
 14302  002844  6A0C               	clrf	i2startTimer@val+3,c
 14303  002846  ECC4  F01C         	call	i2_startTimer	;wreg free
 14304                           
 14305                           ;servo.c: 62: curr = (curr+1)%(n+1);
 14306  00284A  0E01               	movlw	1
 14307  00284C  2454               	addwf	_curr,w,c
 14308  00284E  6E01               	movwf	i2___awmod@dividend,c
 14309  002850  0E00               	movlw	0
 14310  002852  2055               	addwfc	_curr+1,w,c
 14311  002854  6E02               	movwf	i2___awmod@dividend+1,c
 14312  002856  0E01               	movlw	1
 14313  002858  0100               	movlb	0	; () banked
 14314  00285A  25FC               	addwf	_n& (0+255),w,b
 14315  00285C  6E03               	movwf	i2___awmod@divisor,c
 14316  00285E  0E00               	movlw	0
 14317  002860  0100               	movlb	0	; () banked
 14318  002862  21FD               	addwfc	(_n+1)& (0+255),w,b
 14319  002864  6E04               	movwf	i2___awmod@divisor+1,c
 14320  002866  EC98  F01A         	call	i2___awmod	;wreg free
 14321  00286A  C001  F054         	movff	?i2___awmod,_curr
 14322  00286E  C002  F055         	movff	?i2___awmod+1,_curr+1
 14323                           
 14324                           ;servo.c: 63: return 1;
 14325  002872  0E01               	movlw	1
 14326  002874  0012               	return	
 14327  002876                     i2l5456:
 14328                           
 14329                           ;servo.c: 64: }
 14330                           ;servo.c: 65: return 0;
 14331  002876  0E00               	movlw	0
 14332  002878  0012               	return	
 14333  00287A                     __end_of_servoInterruptService:
 14334                           	opt stack 0
 14335                           pclatu	equ	0xFFB
 14336                           pclath	equ	0xFFA
 14337                           tblptru	equ	0xFF8
 14338                           tblptrh	equ	0xFF7
 14339                           tblptrl	equ	0xFF6
 14340                           tablat	equ	0xFF5
 14341                           prodh	equ	0xFF4
 14342                           prodl	equ	0xFF3
 14343                           intcon	equ	0xFF2
 14344                           intcon3	equ	0xFF0
 14345                           postinc0	equ	0xFEE
 14346                           fsr0h	equ	0xFEA
 14347                           fsr0l	equ	0xFE9
 14348                           wreg	equ	0xFE8
 14349                           postdec1	equ	0xFE5
 14350                           fsr1h	equ	0xFE2
 14351                           fsr1l	equ	0xFE1
 14352                           indf2	equ	0xFDF
 14353                           postinc2	equ	0xFDE
 14354                           postdec2	equ	0xFDD
 14355                           fsr2h	equ	0xFDA
 14356                           fsr2l	equ	0xFD9
 14357                           status	equ	0xFD8
 14358                           
 14359 ;; *************** function i2_startTimer *****************
 14360 ;; Defined at:
 14361 ;;		line 76 in file "timer.c"
 14362 ;; Parameters:    Size  Location     Type
 14363 ;;  timer           2    6[COMRAM] int 
 14364 ;;  val             4    8[COMRAM] long 
 14365 ;; Auto vars:     Size  Location     Type
 14366 ;;		None
 14367 ;; Return value:  Size  Location     Type
 14368 ;;                  1    wreg      void 
 14369 ;; Registers used:
 14370 ;;		wreg, status,2, status,0
 14371 ;; Tracked objects:
 14372 ;;		On entry : 0/0
 14373 ;;		On exit  : 0/0
 14374 ;;		Unchanged: 0/0
 14375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14376 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14378 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14379 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14380 ;;Total ram usage:        8 bytes
 14381 ;; Hardware stack levels used:    1
 14382 ;; This function calls:
 14383 ;;		Nothing
 14384 ;; This function is called by:
 14385 ;;		_service
 14386 ;;		_servoInterruptService
 14387 ;; This function uses a non-reentrant model
 14388 ;;
 14389                           
 14390                           	psect	text64
 14391  003988                     __ptext64:
 14392                           	opt stack 0
 14393  003988                     i2_startTimer:
 14394                           	opt stack 22
 14395                           
 14396                           ;timer.c: 77: switch(timer){
 14397                           
 14398                           ;incstack = 0
 14399  003988  D012               	goto	i2l5194
 14400  00398A                     i2l444:
 14401                           
 14402                           ;timer.c: 79: TMR0H = val>>8;
 14403  00398A  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 14404                           
 14405                           ;timer.c: 80: TMR0L = val;
 14406  00398E  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 14407                           
 14408                           ;timer.c: 81: T0CON |= 1<<7;
 14409  003992  8ED5               	bsf	4053,7,c	;volatile
 14410                           
 14411                           ;timer.c: 82: break;
 14412  003994  0012               	return	
 14413  003996                     i2l446:
 14414                           
 14415                           ;timer.c: 84: TMR1H = val>>8;
 14416  003996  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 14417                           
 14418                           ;timer.c: 85: TMR1L = val;
 14419  00399A  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 14420                           
 14421                           ;timer.c: 86: T1CON |= 1<<0;
 14422  00399E  80CD               	bsf	4045,0,c	;volatile
 14423                           
 14424                           ;timer.c: 87: break;
 14425  0039A0  0012               	return	
 14426  0039A2                     i2l447:
 14427                           
 14428                           ;timer.c: 89: TMR3H = val>>8;
 14429  0039A2  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 14430                           
 14431                           ;timer.c: 90: TMR3L = val;
 14432  0039A6  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 14433                           
 14434                           ;timer.c: 91: T3CON |= 1<<0;
 14435  0039AA  80B1               	bsf	4017,0,c	;volatile
 14436                           
 14437                           ;timer.c: 92: }
 14438  0039AC  0012               	return	
 14439  0039AE                     i2l5194:
 14440  0039AE  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 14441  0039B2  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 14442                           
 14443                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14444                           ; Switch size 1, requested type "space"
 14445                           ; Number of cases is 1, Range of values is 0 to 0
 14446                           ; switch strategies available:
 14447                           ; Name         Instructions Cycles
 14448                           ; simple_byte            4     3 (average)
 14449                           ;	Chosen strategy is simple_byte
 14450  0039B6  500E               	movf	??i2_startTimer+1,w,c
 14451  0039B8  0A00               	xorlw	0	; case 0
 14452  0039BA  A4D8               	btfss	status,2,c
 14453  0039BC  0012               	return	
 14454                           
 14455                           ; Switch size 1, requested type "space"
 14456                           ; Number of cases is 3, Range of values is 0 to 3
 14457                           ; switch strategies available:
 14458                           ; Name         Instructions Cycles
 14459                           ; simple_byte           10     6 (average)
 14460                           ;	Chosen strategy is simple_byte
 14461  0039BE  500D               	movf	??i2_startTimer,w,c
 14462  0039C0  0A00               	xorlw	0	; case 0
 14463  0039C2  B4D8               	btfsc	status,2,c
 14464  0039C4  D7E2               	goto	i2l444
 14465  0039C6  0A01               	xorlw	1	; case 1
 14466  0039C8  B4D8               	btfsc	status,2,c
 14467  0039CA  D7E5               	goto	i2l446
 14468  0039CC  0A02               	xorlw	2	; case 3
 14469  0039CE  A4D8               	btfss	status,2,c
 14470  0039D0  0012               	return	
 14471  0039D2  D7E7               	goto	i2l447
 14472  0039D4                     __end_ofi2_startTimer:
 14473                           	opt stack 0
 14474                           pclatu	equ	0xFFB
 14475                           pclath	equ	0xFFA
 14476                           tblptru	equ	0xFF8
 14477                           tblptrh	equ	0xFF7
 14478                           tblptrl	equ	0xFF6
 14479                           tablat	equ	0xFF5
 14480                           prodh	equ	0xFF4
 14481                           prodl	equ	0xFF3
 14482                           intcon	equ	0xFF2
 14483                           intcon3	equ	0xFF0
 14484                           postinc0	equ	0xFEE
 14485                           fsr0h	equ	0xFEA
 14486                           fsr0l	equ	0xFE9
 14487                           wreg	equ	0xFE8
 14488                           postdec1	equ	0xFE5
 14489                           fsr1h	equ	0xFE2
 14490                           fsr1l	equ	0xFE1
 14491                           indf2	equ	0xFDF
 14492                           postinc2	equ	0xFDE
 14493                           postdec2	equ	0xFDD
 14494                           fsr2h	equ	0xFDA
 14495                           fsr2l	equ	0xFD9
 14496                           status	equ	0xFD8
 14497                           
 14498 ;; *************** function i2_digitalWrite *****************
 14499 ;; Defined at:
 14500 ;;		line 53 in file "iopin.c"
 14501 ;; Parameters:    Size  Location     Type
 14502 ;;  pin             2    6[COMRAM] PTR int 
 14503 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
 14504 ;;		 -> cylinderMotor(4), 
 14505 ;;  val             2    8[COMRAM] int 
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;  digitalWrite    2   13[COMRAM] int 
 14508 ;; Return value:  Size  Location     Type
 14509 ;;                  1    wreg      void 
 14510 ;; Registers used:
 14511 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14512 ;; Tracked objects:
 14513 ;;		On entry : 0/0
 14514 ;;		On exit  : 0/0
 14515 ;;		Unchanged: 0/0
 14516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14517 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14518 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14519 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14520 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14521 ;;Total ram usage:        9 bytes
 14522 ;; Hardware stack levels used:    1
 14523 ;; This function calls:
 14524 ;;		Nothing
 14525 ;; This function is called by:
 14526 ;;		_servoInterruptService
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           	psect	text65
 14531  002D92                     __ptext65:
 14532                           	opt stack 0
 14533  002D92                     i2_digitalWrite:
 14534                           	opt stack 21
 14535                           
 14536                           ;iopin.c: 54: if(pin){
 14537                           
 14538                           ;incstack = 0
 14539  002D92  5007               	movf	i2digitalWrite@pin,w,c
 14540  002D94  1008               	iorwf	i2digitalWrite@pin+1,w,c
 14541  002D96  B4D8               	btfsc	status,2,c
 14542  002D98  0012               	return	
 14543                           
 14544                           ;iopin.c: 55: int p = 1 << pin[1];
 14545  002D9A  EE20 F002          	lfsr	2,2
 14546  002D9E  5007               	movf	i2digitalWrite@pin,w,c
 14547  002DA0  26D9               	addwf	fsr2l,f,c
 14548  002DA2  5008               	movf	i2digitalWrite@pin+1,w,c
 14549  002DA4  22DA               	addwfc	fsr2h,f,c
 14550  002DA6  50DF               	movf	indf2,w,c
 14551  002DA8  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 14552  002DAA  0E01               	movlw	1
 14553  002DAC  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 14554  002DAE  0E00               	movlw	0
 14555  002DB0  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 14556  002DB2  2A0B               	incf	??i2_digitalWrite,f,c
 14557  002DB4  D003               	goto	i2u492_44
 14558  002DB6                     i2u492_45:
 14559  002DB6  90D8               	bcf	status,0,c
 14560  002DB8  360C               	rlcf	??i2_digitalWrite+1,f,c
 14561  002DBA  360D               	rlcf	??i2_digitalWrite+2,f,c
 14562  002DBC                     i2u492_44:
 14563  002DBC  2E0B               	decfsz	??i2_digitalWrite,f,c
 14564  002DBE  D7FB               	goto	i2u492_45
 14565  002DC0  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 14566  002DC4  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 14567                           
 14568                           ;iopin.c: 56: if(val == 0){
 14569  002DC8  5009               	movf	i2digitalWrite@val,w,c
 14570  002DCA  100A               	iorwf	i2digitalWrite@val+1,w,c
 14571  002DCC  A4D8               	btfss	status,2,c
 14572  002DCE  D02B               	goto	i2l5180
 14573                           
 14574                           ;iopin.c: 57: p ^= 0xff;
 14575  002DD0  0EFF               	movlw	255
 14576  002DD2  1A0E               	xorwf	i2digitalWrite@p,f,c
 14577                           
 14578                           ;iopin.c: 58: }
 14579                           ;iopin.c: 60: switch(pin[0]){
 14580  002DD4  D028               	goto	i2l5180
 14581  002DD6                     i2l5156:
 14582  002DD6  0409               	decf	i2digitalWrite@val,w,c
 14583  002DD8  100A               	iorwf	i2digitalWrite@val+1,w,c
 14584  002DDA  A4D8               	btfss	status,2,c
 14585  002DDC  D003               	goto	i2l5160
 14586  002DDE  500E               	movf	i2digitalWrite@p,w,c
 14587  002DE0  1289               	iorwf	3977,f,c	;volatile
 14588  002DE2  0012               	return	
 14589  002DE4                     i2l5160:
 14590                           
 14591                           ;iopin.c: 62: else LATA &= p;
 14592  002DE4  500E               	movf	i2digitalWrite@p,w,c
 14593  002DE6  1689               	andwf	3977,f,c	;volatile
 14594                           
 14595                           ;iopin.c: 63: break;
 14596  002DE8  0012               	return	
 14597  002DEA                     i2l5162:
 14598  002DEA  0409               	decf	i2digitalWrite@val,w,c
 14599  002DEC  100A               	iorwf	i2digitalWrite@val+1,w,c
 14600  002DEE  A4D8               	btfss	status,2,c
 14601  002DF0  D003               	goto	i2l5166
 14602  002DF2  500E               	movf	i2digitalWrite@p,w,c
 14603  002DF4  128A               	iorwf	3978,f,c	;volatile
 14604  002DF6  0012               	return	
 14605  002DF8                     i2l5166:
 14606                           
 14607                           ;iopin.c: 65: else LATB &= p;
 14608  002DF8  500E               	movf	i2digitalWrite@p,w,c
 14609  002DFA  168A               	andwf	3978,f,c	;volatile
 14610                           
 14611                           ;iopin.c: 66: break;
 14612  002DFC  0012               	return	
 14613  002DFE                     i2l5168:
 14614  002DFE  0409               	decf	i2digitalWrite@val,w,c
 14615  002E00  100A               	iorwf	i2digitalWrite@val+1,w,c
 14616  002E02  A4D8               	btfss	status,2,c
 14617  002E04  D003               	goto	i2l5172
 14618  002E06  500E               	movf	i2digitalWrite@p,w,c
 14619  002E08  128B               	iorwf	3979,f,c	;volatile
 14620  002E0A  0012               	return	
 14621  002E0C                     i2l5172:
 14622                           
 14623                           ;iopin.c: 68: else LATC &= p;
 14624  002E0C  500E               	movf	i2digitalWrite@p,w,c
 14625  002E0E  168B               	andwf	3979,f,c	;volatile
 14626                           
 14627                           ;iopin.c: 69: break;
 14628  002E10  0012               	return	
 14629  002E12                     i2l5174:
 14630  002E12  0409               	decf	i2digitalWrite@val,w,c
 14631  002E14  100A               	iorwf	i2digitalWrite@val+1,w,c
 14632  002E16  A4D8               	btfss	status,2,c
 14633  002E18  D003               	goto	i2l5178
 14634  002E1A  500E               	movf	i2digitalWrite@p,w,c
 14635  002E1C  128C               	iorwf	3980,f,c	;volatile
 14636  002E1E  0012               	return	
 14637  002E20                     i2l5178:
 14638                           
 14639                           ;iopin.c: 71: else LATD &= p;
 14640  002E20  500E               	movf	i2digitalWrite@p,w,c
 14641  002E22  168C               	andwf	3980,f,c	;volatile
 14642                           
 14643                           ;iopin.c: 72: }
 14644  002E24  0012               	return	
 14645  002E26                     i2l5180:
 14646  002E26  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 14647  002E2A  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 14648  002E2E  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 14649  002E32  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 14650                           
 14651                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14652                           ; Switch size 1, requested type "space"
 14653                           ; Number of cases is 1, Range of values is 0 to 0
 14654                           ; switch strategies available:
 14655                           ; Name         Instructions Cycles
 14656                           ; simple_byte            4     3 (average)
 14657                           ;	Chosen strategy is simple_byte
 14658  002E36  500C               	movf	??i2_digitalWrite+1,w,c
 14659  002E38  0A00               	xorlw	0	; case 0
 14660  002E3A  A4D8               	btfss	status,2,c
 14661  002E3C  0012               	return	
 14662                           
 14663                           ; Switch size 1, requested type "space"
 14664                           ; Number of cases is 4, Range of values is 0 to 3
 14665                           ; switch strategies available:
 14666                           ; Name         Instructions Cycles
 14667                           ; simple_byte           13     7 (average)
 14668                           ;	Chosen strategy is simple_byte
 14669  002E3E  500B               	movf	??i2_digitalWrite,w,c
 14670  002E40  0A00               	xorlw	0	; case 0
 14671  002E42  B4D8               	btfsc	status,2,c
 14672  002E44  D7C8               	goto	i2l5156
 14673  002E46  0A01               	xorlw	1	; case 1
 14674  002E48  B4D8               	btfsc	status,2,c
 14675  002E4A  D7CF               	goto	i2l5162
 14676  002E4C  0A03               	xorlw	3	; case 2
 14677  002E4E  B4D8               	btfsc	status,2,c
 14678  002E50  D7D6               	goto	i2l5168
 14679  002E52  0A01               	xorlw	1	; case 3
 14680  002E54  A4D8               	btfss	status,2,c
 14681  002E56  0012               	return	
 14682  002E58  D7DC               	goto	i2l5174
 14683  002E5A                     __end_ofi2_digitalWrite:
 14684                           	opt stack 0
 14685                           pclatu	equ	0xFFB
 14686                           pclath	equ	0xFFA
 14687                           tblptru	equ	0xFF8
 14688                           tblptrh	equ	0xFF7
 14689                           tblptrl	equ	0xFF6
 14690                           tablat	equ	0xFF5
 14691                           prodh	equ	0xFF4
 14692                           prodl	equ	0xFF3
 14693                           intcon	equ	0xFF2
 14694                           intcon3	equ	0xFF0
 14695                           postinc0	equ	0xFEE
 14696                           fsr0h	equ	0xFEA
 14697                           fsr0l	equ	0xFE9
 14698                           wreg	equ	0xFE8
 14699                           postdec1	equ	0xFE5
 14700                           fsr1h	equ	0xFE2
 14701                           fsr1l	equ	0xFE1
 14702                           indf2	equ	0xFDF
 14703                           postinc2	equ	0xFDE
 14704                           postdec2	equ	0xFDD
 14705                           fsr2h	equ	0xFDA
 14706                           fsr2l	equ	0xFD9
 14707                           status	equ	0xFD8
 14708                           
 14709 ;; *************** function i2___awmod *****************
 14710 ;; Defined at:
 14711 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 14712 ;; Parameters:    Size  Location     Type
 14713 ;;  dividend        2    0[COMRAM] int 
 14714 ;;  divisor         2    2[COMRAM] int 
 14715 ;; Auto vars:     Size  Location     Type
 14716 ;;  __awmod         1    5[COMRAM] unsigned char 
 14717 ;;  __awmod         1    4[COMRAM] unsigned char 
 14718 ;; Return value:  Size  Location     Type
 14719 ;;                  2    0[COMRAM] int 
 14720 ;; Registers used:
 14721 ;;		wreg, status,2, status,0
 14722 ;; Tracked objects:
 14723 ;;		On entry : 0/0
 14724 ;;		On exit  : 0/0
 14725 ;;		Unchanged: 0/0
 14726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14727 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14728 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14730 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14731 ;;Total ram usage:        6 bytes
 14732 ;; Hardware stack levels used:    1
 14733 ;; This function calls:
 14734 ;;		Nothing
 14735 ;; This function is called by:
 14736 ;;		_servoInterruptService
 14737 ;; This function uses a non-reentrant model
 14738 ;;
 14739                           
 14740                           	psect	text66
 14741  003530                     __ptext66:
 14742                           	opt stack 0
 14743  003530                     i2___awmod:
 14744                           	opt stack 21
 14745                           
 14746                           ;incstack = 0
 14747  003530  0E00               	movlw	0
 14748  003532  6E06               	movwf	i2___awmod@sign,c
 14749  003534  AE02               	btfss	i2___awmod@dividend+1,7,c
 14750  003536  D006               	goto	i2l5208
 14751  003538  6C01               	negf	i2___awmod@dividend,c
 14752  00353A  1E02               	comf	i2___awmod@dividend+1,f,c
 14753  00353C  B0D8               	btfsc	status,0,c
 14754  00353E  2A02               	incf	i2___awmod@dividend+1,f,c
 14755  003540  0E01               	movlw	1
 14756  003542  6E06               	movwf	i2___awmod@sign,c
 14757  003544                     i2l5208:
 14758  003544  AE04               	btfss	i2___awmod@divisor+1,7,c
 14759  003546  D004               	goto	i2l5212
 14760  003548  6C03               	negf	i2___awmod@divisor,c
 14761  00354A  1E04               	comf	i2___awmod@divisor+1,f,c
 14762  00354C  B0D8               	btfsc	status,0,c
 14763  00354E  2A04               	incf	i2___awmod@divisor+1,f,c
 14764  003550                     i2l5212:
 14765  003550  5003               	movf	i2___awmod@divisor,w,c
 14766  003552  1004               	iorwf	i2___awmod@divisor+1,w,c
 14767  003554  B4D8               	btfsc	status,2,c
 14768  003556  D018               	goto	i2l5228
 14769  003558  0E01               	movlw	1
 14770  00355A  6E05               	movwf	i2___awmod@counter,c
 14771  00355C  D004               	goto	i2l5218
 14772  00355E                     i2l5216:
 14773  00355E  90D8               	bcf	status,0,c
 14774  003560  3603               	rlcf	i2___awmod@divisor,f,c
 14775  003562  3604               	rlcf	i2___awmod@divisor+1,f,c
 14776  003564  2A05               	incf	i2___awmod@counter,f,c
 14777  003566                     i2l5218:
 14778  003566  AE04               	btfss	i2___awmod@divisor+1,7,c
 14779  003568  D7FA               	goto	i2l5216
 14780  00356A                     i2l5220:
 14781  00356A  5003               	movf	i2___awmod@divisor,w,c
 14782  00356C  5C01               	subwf	i2___awmod@dividend,w,c
 14783  00356E  5004               	movf	i2___awmod@divisor+1,w,c
 14784  003570  5802               	subwfb	i2___awmod@dividend+1,w,c
 14785  003572  A0D8               	btfss	status,0,c
 14786  003574  D004               	goto	i2l5224
 14787  003576  5003               	movf	i2___awmod@divisor,w,c
 14788  003578  5E01               	subwf	i2___awmod@dividend,f,c
 14789  00357A  5004               	movf	i2___awmod@divisor+1,w,c
 14790  00357C  5A02               	subwfb	i2___awmod@dividend+1,f,c
 14791  00357E                     i2l5224:
 14792  00357E  90D8               	bcf	status,0,c
 14793  003580  3204               	rrcf	i2___awmod@divisor+1,f,c
 14794  003582  3203               	rrcf	i2___awmod@divisor,f,c
 14795  003584  2E05               	decfsz	i2___awmod@counter,f,c
 14796  003586  D7F1               	goto	i2l5220
 14797  003588                     i2l5228:
 14798  003588  5006               	movf	i2___awmod@sign,w,c
 14799  00358A  B4D8               	btfsc	status,2,c
 14800  00358C  D004               	goto	i2l5232
 14801  00358E  6C01               	negf	i2___awmod@dividend,c
 14802  003590  1E02               	comf	i2___awmod@dividend+1,f,c
 14803  003592  B0D8               	btfsc	status,0,c
 14804  003594  2A02               	incf	i2___awmod@dividend+1,f,c
 14805  003596                     i2l5232:
 14806  003596  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 14807  00359A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 14808  00359E  0012               	return	
 14809  0035A0                     __end_ofi2___awmod:
 14810                           	opt stack 0
 14811                           pclatu	equ	0xFFB
 14812                           pclath	equ	0xFFA
 14813                           tblptru	equ	0xFF8
 14814                           tblptrh	equ	0xFF7
 14815                           tblptrl	equ	0xFF6
 14816                           tablat	equ	0xFF5
 14817                           prodh	equ	0xFF4
 14818                           prodl	equ	0xFF3
 14819                           intcon	equ	0xFF2
 14820                           intcon3	equ	0xFF0
 14821                           postinc0	equ	0xFEE
 14822                           fsr0h	equ	0xFEA
 14823                           fsr0l	equ	0xFE9
 14824                           wreg	equ	0xFE8
 14825                           postdec1	equ	0xFE5
 14826                           fsr1h	equ	0xFE2
 14827                           fsr1l	equ	0xFE1
 14828                           indf2	equ	0xFDF
 14829                           postinc2	equ	0xFDE
 14830                           postdec2	equ	0xFDD
 14831                           fsr2h	equ	0xFDA
 14832                           fsr2l	equ	0xFD9
 14833                           status	equ	0xFD8
 14834                           
 14835 ;; *************** function _keyPressedInterruptService *****************
 14836 ;; Defined at:
 14837 ;;		line 49 in file "keypad.c"
 14838 ;; Parameters:    Size  Location     Type
 14839 ;;		None
 14840 ;; Auto vars:     Size  Location     Type
 14841 ;;  key             1    0[COMRAM] unsigned char 
 14842 ;; Return value:  Size  Location     Type
 14843 ;;                  1    wreg      void 
 14844 ;; Registers used:
 14845 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 14846 ;; Tracked objects:
 14847 ;;		On entry : 0/0
 14848 ;;		On exit  : 0/0
 14849 ;;		Unchanged: 0/0
 14850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14854 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14855 ;;Total ram usage:        1 bytes
 14856 ;; Hardware stack levels used:    1
 14857 ;; This function calls:
 14858 ;;		Nothing
 14859 ;; This function is called by:
 14860 ;;		_service
 14861 ;; This function uses a non-reentrant model
 14862 ;;
 14863                           
 14864                           	psect	text67
 14865  003C16                     __ptext67:
 14866                           	opt stack 0
 14867  003C16                     _keyPressedInterruptService:
 14868                           	opt stack 22
 14869                           
 14870                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 14871                           
 14872                           ;incstack = 0
 14873  003C16  3881               	swapf	3969,w,c	;volatile
 14874  003C18  0B0F               	andlw	15
 14875  003C1A  0B0F               	andlw	15
 14876  003C1C  6E01               	movwf	keyPressedInterruptService@key,c
 14877                           
 14878                           ;keypad.c: 51: lastKey = keys[key];
 14879  003C1E  5001               	movf	keyPressedInterruptService@key,w,c
 14880  003C20  0D01               	mullw	1
 14881  003C22  0E87               	movlw	low _keys
 14882  003C24  24F3               	addwf	prodl,w,c
 14883  003C26  6EF6               	movwf	tblptrl,c
 14884  003C28  0EFE               	movlw	high _keys
 14885  003C2A  20F4               	addwfc	prodh,w,c
 14886  003C2C  6EF7               	movwf	tblptrh,c
 14887  003C2E                     	if	0	;There are less than 3 active tblptr bytes
 14888  003C2E                     	endif
 14889  003C2E  0008               	tblrd		*
 14890  003C30  CFF5 F05C          	movff	tablat,_lastKey
 14891  003C34  0012               	return		;funcret
 14892  003C36                     __end_of_keyPressedInterruptService:
 14893                           	opt stack 0
 14894                           pclatu	equ	0xFFB
 14895                           pclath	equ	0xFFA
 14896                           tblptru	equ	0xFF8
 14897                           tblptrh	equ	0xFF7
 14898                           tblptrl	equ	0xFF6
 14899                           tablat	equ	0xFF5
 14900                           prodh	equ	0xFF4
 14901                           prodl	equ	0xFF3
 14902                           intcon	equ	0xFF2
 14903                           intcon3	equ	0xFF0
 14904                           postinc0	equ	0xFEE
 14905                           fsr0h	equ	0xFEA
 14906                           fsr0l	equ	0xFE9
 14907                           wreg	equ	0xFE8
 14908                           postdec1	equ	0xFE5
 14909                           fsr1h	equ	0xFE2
 14910                           fsr1l	equ	0xFE1
 14911                           indf2	equ	0xFDF
 14912                           postinc2	equ	0xFDE
 14913                           postdec2	equ	0xFDD
 14914                           fsr2h	equ	0xFDA
 14915                           fsr2l	equ	0xFD9
 14916                           status	equ	0xFD8
 14917                           pclatu	equ	0xFFB
 14918                           pclath	equ	0xFFA
 14919                           tblptru	equ	0xFF8
 14920                           tblptrh	equ	0xFF7
 14921                           tblptrl	equ	0xFF6
 14922                           tablat	equ	0xFF5
 14923                           prodh	equ	0xFF4
 14924                           prodl	equ	0xFF3
 14925                           intcon	equ	0xFF2
 14926                           intcon3	equ	0xFF0
 14927                           postinc0	equ	0xFEE
 14928                           fsr0h	equ	0xFEA
 14929                           fsr0l	equ	0xFE9
 14930                           wreg	equ	0xFE8
 14931                           postdec1	equ	0xFE5
 14932                           fsr1h	equ	0xFE2
 14933                           fsr1l	equ	0xFE1
 14934                           indf2	equ	0xFDF
 14935                           postinc2	equ	0xFDE
 14936                           postdec2	equ	0xFDD
 14937                           fsr2h	equ	0xFDA
 14938                           fsr2l	equ	0xFD9
 14939                           status	equ	0xFD8
 14940                           
 14941                           	psect	rparam
 14942  0000                     pclatu	equ	0xFFB
 14943                           pclath	equ	0xFFA
 14944                           tblptru	equ	0xFF8
 14945                           tblptrh	equ	0xFF7
 14946                           tblptrl	equ	0xFF6
 14947                           tablat	equ	0xFF5
 14948                           prodh	equ	0xFF4
 14949                           prodl	equ	0xFF3
 14950                           intcon	equ	0xFF2
 14951                           intcon3	equ	0xFF0
 14952                           postinc0	equ	0xFEE
 14953                           fsr0h	equ	0xFEA
 14954                           fsr0l	equ	0xFE9
 14955                           wreg	equ	0xFE8
 14956                           postdec1	equ	0xFE5
 14957                           fsr1h	equ	0xFE2
 14958                           fsr1l	equ	0xFE1
 14959                           indf2	equ	0xFDF
 14960                           postinc2	equ	0xFDE
 14961                           postdec2	equ	0xFDD
 14962                           fsr2h	equ	0xFDA
 14963                           fsr2l	equ	0xFD9
 14964                           status	equ	0xFD8
 14965                           
 14966                           	psect	temp
 14967  00005D                     btemp:
 14968                           	opt stack 0
 14969  00005D                     	ds	1
 14970  0000                     int$flags	set	btemp
 14971                           pclatu	equ	0xFFB
 14972                           pclath	equ	0xFFA
 14973                           tblptru	equ	0xFF8
 14974                           tblptrh	equ	0xFF7
 14975                           tblptrl	equ	0xFF6
 14976                           tablat	equ	0xFF5
 14977                           prodh	equ	0xFF4
 14978                           prodl	equ	0xFF3
 14979                           intcon	equ	0xFF2
 14980                           intcon3	equ	0xFF0
 14981                           postinc0	equ	0xFEE
 14982                           fsr0h	equ	0xFEA
 14983                           fsr0l	equ	0xFE9
 14984                           wreg	equ	0xFE8
 14985                           postdec1	equ	0xFE5
 14986                           fsr1h	equ	0xFE2
 14987                           fsr1l	equ	0xFE1
 14988                           indf2	equ	0xFDF
 14989                           postinc2	equ	0xFDE
 14990                           postdec2	equ	0xFDD
 14991                           fsr2h	equ	0xFDA
 14992                           fsr2l	equ	0xFD9
 14993                           status	equ	0xFD8


Data Sizes:
    Strings     352
    Constant    174
    Data        59
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      92
    BANK0           128    124     126
    BANK1           256     51     119
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_21(CODE[19]), STR_20(CODE[18]), STR_19(CODE[17]), STR_18(CODE[19]), 
		 -> STR_17(CODE[17]), STR_16(CODE[19]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[18]), STR_11(CODE[23]), STR_10(CODE[20]), 
		 -> STR_9(CODE[8]), STR_8(CODE[11]), STR_7(CODE[11]), STR_6(CODE[11]), 
		 -> STR_5(CODE[16]), STR_4(CODE[14]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    showRunStats@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    showRunTime@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    showDateTime@t	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    showInterface@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 
		 -> cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), 


Critical Paths under _main in COMRAM

    _main->___almod
    _sortBattery->___ftdiv
    _showRunTime->___ftdiv
    _setTime->_I2C_Master_Write
    _printf->___almod
    _lcdNewline->_lcdInst
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _readPastRun->_eepromRead
    _eepromRead->___wmul
    ___wmul->___awdiv
    _lcdHome->_lcdInst
    _angleToPulse->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _sortBattery->_printf
    _showInterface->_showDateTime
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _showDateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  616751
                                             31 BANK1     20    20      0
                            ___aldiv
                            ___almod
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _readKeypad
                      _showInterface
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  114162
                                            107 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1594
                                             34 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     309
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        6     6      0  408419
                                            123 BANK0      1     1      0
                                              0 BANK1      5     5      0
                            _initRTC
                        _readPastRun
                       _showDateTime
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (2) _showRunTime                                          8     6      2   72244
                                            107 BANK0      8     6      2
                           ___awtoft
                            ___ftdiv
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunStats                                         2     0      2   65436
                                            107 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   65424
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   65393
                                            107 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   65362
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _showDateTime                                        16    16      0   68658
                                            107 BANK0     16    16      0
                            _getTime
                            _initRTC
                         _keyPressed
                           _lcdClear
                             _printf
                            _setTime
 ---------------------------------------------------------------------------------
 (3) _setTime                                              1     1      0     823
                                             37 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   65006
                                             61 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14293
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             38 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             34 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14014
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             40 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             34 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             34 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             42 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             47 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             34 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                             46 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _keyPressed                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _initRTC                                              0     0      0    1196
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Init                                      8     4      4    1196
                                             47 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _getTime                                             19    17      2    1011
                                             37 COMRAM    19    17      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     724
                                             35 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             35 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4353
                                              0 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     293
                                             54 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             48 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24453
                                             94 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     847
                                             34 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22690
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21383
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3734
                                             52 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3102
                                             42 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             42 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     262
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             38 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             36 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     587
                                             48 COMRAM    10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     753
                                             34 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1464
                                             19 COMRAM    15    15      0
         _keyPressedInterruptService
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readKeypad
   _showInterface
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _showDateTime
       _getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _initRTC
         _I2C_Master_Init
           ___lldiv
       _keyPressed
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _setTime
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     33      77       7       46.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7C      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     151      34        0.0%
DATA                 0      0     151       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Apr 08 11:12:51 2017

                       ___altoft@exp 0033                                    _n 00FC  
                  main@cylinderStart 0129                 main@cylinderBackward 012F  
                      ___altoft@sign 0034                          _sortBattery 0E0A  
                     showRunSelect@k 00EB                         ___awdiv@sign 002E  
                ___wmul@multiplicand 0033                          __CFG_BORV$3 000000  
                     showRunTime@run 00EB                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                          __CFG_OSC$HS 000000  
                   _redirectingServo 0157                         ___ftadd@exp1 00AD  
                       ___ftadd@exp2 00AC                  main@cylinderForward 012D  
                       ___ftadd@sign 00AB                                  l215 3BE2  
                                l152 1A30                                  l170 11C2  
                                l251 3B3C                                  l324 295E  
                                l173 121C                                  l254 3B48  
                                l166 1166                                  l444 393E  
                                l437 3A18                                  l349 3AB0  
                                l446 394A                                  l447 3956  
                                l803 0818                                  l812 0A04  
                                l499 3C98                                  l763 0996  
                    ??_showInterface 00FB                         __CFG_CPB$OFF 000000  
                                _PEN 007E2A                         __CFG_CPD$OFF 000000  
                                _SEN 007E28                                  _n_C 0058  
                       ___awmod@sign 0028                                  prod 000FF3  
                                wreg 000FE8                      showRunTime@time 00F0  
                       __CFG_LVP$OFF 000000                         ___ftdiv@cntr 0083  
                       ___ftdiv@sign 0088                         __CFG_WDT$OFF 000000  
                               l1122 1A9A                                 l1126 1AD4  
                               l1128 1AFC                                 l1137 1BD2  
                               l1146 1BFC                                 l1067 253C  
                               l1171 2414                                 l1164 2386  
                               l1157 273A                                 l1165 23AE  
                               l1246 33B4                                 l1256 3660  
                               l1099 304A                                 l1196 3BC4  
                               l6002 1F34                                 l6100 34E0  
                               l6022 1FBC                                 l6032 1FFA  
                               l6008 1F6E                                 l6120 3526  
                               l6112 350E                                 l6104 34EE  
                               l7000 3898                                 l6026 1FDA  
                               l6130 3366                                 l6106 34F6  
                               l7012 39E0                                 l6036 2018  
                               l6132 3372                                 l6052 32D4  
                               l6108 34FA                                 l6116 3518  
                               l6220 14A8                                 l7006 39D6  
                               l6142 33A6                                 l6134 3376  
                               l6302 23DA                                 l6206 1EB2  
                               l6230 1578                                 l7024 39F4  
                               l6312 2402                                 l6064 32FA  
                               l6080 332C                                 l7200 36FC  
                               l7120 2900                                 l7112 28A8  
                               l7018 39EC                                 l6322 2444  
                               l6314 240E                                 l6306 23EA  
                               l6066 3302                                 l6058 32E4  
                               l6226 1552                                 l6404 26C2  
                               l6084 333A                                 l6076 3322  
                               l6068 3306                                 l6244 1756  
                               l7212 3736                                 l7300 2EB0  
                               l7116 28D4                                 l7108 287C  
                               l7052 2D0E                                 l7038 3962  
                               l7134 3120                                 l6182 3B82  
                               l6350 24D4                                 l6342 24A4  
                               l6238 16AC                                 l7230 3792  
                               l7222 376C                                 l7310 2EEC  
                               l7126 292C                                 l7070 2D4A  
                               l7062 2D30                                 l6424 2710  
                               l6504 227C                                 l7144 319A  
                               l6328 2462                                 l6272 234C  
                               l6096 34D4                                 l6256 3C4C  
                               l6600 0192                                 l7152 2558  
                               l7064 2D36                                 l7056 2D1C  
                               l6522 22E2                                 l6514 22AC  
                               l7330 2A7C                                 l7138 3136  
                               l6442 3912                                 l6530 361E  
                               l6362 2502                                 l6266 2320  
                               l6602 0198                                 l7250 32B4  
                               l7242 2FB0                                 l7306 2ED4  
                               l7314 2EF8                                 l7074 2D58  
                               l7058 2D22                                 l7500 2CB8  
                               l6516 22BC                                 l6508 2290  
                               l7084 2B40                                 l7092 2BBE  
                               l7332 2A82                                 l6532 362A  
                               l6372 252A                                 l6612 01E6  
                               l7068 2D44                                 l7076 2D5E  
                               l6454 3AF0                                 l6518 22C6  
                               l7326 2A54                                 l6462 31D8  
                               l6534 362E                                 l6374 2536  
                               l6366 2512                                 l6198 1DEA  
                               l6710 05DE                                 l6622 0224  
                               l6614 01F2                                 l7174 2652  
                               l7190 38EA                                 l7182 38C4  
                               l7406 1174                                 l7430 1248  
                               l7520 30AC                                 l7512 3086  
                               l6384 346A                                 l7088 2B96  
                               l6472 3234                                 l6544 379E  
                               l6712 05E4                                 l6624 023E  
                               l6616 01F8                                 l6608 01C0  
                               l6560 0038                                 l7440 12B2  
                               l7416 11D0                                 l7432 1270  
                               l7408 1192                                 l7522 30B8  
                               l6386 3476                                 l6466 3208  
                               l6538 3652                                 l6546 37AA  
                               l6802 09BE                                 l6706 0578  
                               l6642 02CC                                 l6618 0210  
                               l6634 026E                                 l6562 004E  
                               l7426 122A                                 l7418 11EE  
                               l7524 30BC                                 l7532 30EE  
                               l7516 309A                                 l5940 1AE2  
                               l6900 0C84                                 l6820 0A4E  
                               l6732 06A2                                 l6724 062A  
                               l6652 0312                                 l6628 0256  
                               l6636 02B2                                 l6572 0088  
                               l6580 00FC                                 l6556 0022  
                               l7364 0ECA                                 l5934 1AA8  
                               l6398 2690                                 l6486 21EA  
                               l6910 0D46                                 l6750 0716  
                               l6742 06DE                                 l6590 0160  
                               l6566 0058                                 l7286 2E5E  
                               l7446 12E2                                 l7390 10B6  
                               l7480 2C54                                 l7536 3104  
                               l7528 30E0                                 l6904 0C9E  
                               l6920 0DD4                                 l6840 0AC2  
                               l6816 0A26                                 l6744 06F4  
                               l6760 07CA                                 l6728 067A  
                               l6680 044E                                 l6592 0176  
                               l7288 2E62                                 l7544 1784  
                               l7482 2C60                                 l7474 2C32  
                               l5890 3002                                 l5882 2FCC  
                               l5962 1B62                                 l5946 1AF2  
                               l6842 0AC8                                 l6826 0A76  
                               l6762 07D8                                 l6754 073E  
                               l6738 06D0                                 l6682 0464  
                               l6586 0124                                 l6922 0DEA  
                               l7378 0FA0                                 l7562 1826  
                               l7492 2C94                                 l7484 2C64  
                               l7468 2C1A                                 l5964 1B70  
                               l5956 1B34                                 l6908 0CC6  
                               l6916 0DBA                                 l6828 0A7C  
                               l6772 081C                                 l6748 0702  
                               l6692 04F4                                 l6684 0494  
                               l6676 0428                                 l6668 03C0  
                               l6596 0186                                 l7396 1118  
                               l7388 1088                                 l5894 3018  
                               l5886 2FDA                                 l5982 1C26  
                               l5974 1BB8                                 l5966 1B7E  
                               l6918 0DCC                                 l6862 0B48  
                               l6790 097A                                 l6782 0892  
                               l6766 07E6                                 l6686 04AA  
                               l6598 018C                                 l7574 186A  
                               l7496 2CA2                                 l5896 3036  
                               l5888 2FE4                                 l5992 1C74  
                               l5976 1BC6                                 l5968 1B8A  
                               l6880 0BEE                                 l6872 0BAC  
                               l6856 0B0E                                 l6768 07FA  
                               l6696 051A                                 l7584 19A4  
                               l5898 3040                                 l6970 3404  
                               l6866 0B78                                 l6858 0B20  
                               l6794 0988                                 l6778 0840  
                               l6892 0C5C                                 l6884 0C26  
                               l6788 096C                                 l7588 19B4  
                               l6966 33FC                                 l6886 0C30  
                               l6878 0BE4                                 l6990 3870  
                               l7598 19D2                                 l6976 342A  
                               l6898 0C78                                 l6994 3878  
                               _EEIF 007D0C                                 STR_1 FFF7  
                               STR_2 FF9F                                 STR_3 FF8E  
                               STR_4 FFC0                                 STR_5 FFB0  
                               STR_6 FFD9                                 STR_7 FFE4  
                               STR_8 FFCE                                 STR_9 FFEF  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                         printf@tmpval 00D7  
                               u6020 3B80                                 u6015 3822  
                               u6131 2304                                 _PEIE 007F96  
                               u6311 2672                                 u6151 2330  
                               u6331 26A4                                 _RCEN 007E2B  
                               u6421 21C6                                 u8007 129A  
                               u6440 2210                                 u8017 12D2  
                               u8107 3698                                 u5811 1F4A  
                               u8027 1310                                 u7404 28F0  
                               u8117 36BE                                 u5581 1A48  
                               u6445 2206                                 u8037 2644  
                               u7405 28EC                                 u7414 291C  
                               u8127 36CC                                 u5591 1A66  
                               u8047 3BE6                                 u7415 2918  
                               u8057 3A24                                 u8067 3A58  
                               u6900 0810                                 u8077 3BFA  
                               u7294 2CF4                                 u8087 3C0C  
                               u5791 1F10                                 u7295 2CEE  
                               u6680 0358                                 u7384 2898  
                               u8097 368A                                 u7385 2894  
                               u7394 28C4                                 u7395 28C0  
                               u7564 2F46                                 u6685 034C  
                               u7565 2F3E                                 u7967 1912  
                               u7977 0E46                                 u7987 0EFC  
                               u7997 101A                                 _RSEN 007E29  
                               _n_AA 0056                                 _n_9V 0171  
                    showRunStats@run 00EB                                 _main 177C  
                               _curr 0054                         ___ftpack@arg 0023  
                               _keys FE87                         ___ftpack@exp 0026  
                               _time 004E                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005D                      ??_showRunSelect 003B  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                        __CFG_IESO$OFF 000000  
                      __CFG_MCLRE$ON 000000                         ___ftmul@cntr 0096  
                       ___param_bank 000000                         ___ftmul@sign 0097  
                       ___fttol@exp1 00BC                         ___fttol@lval 00B8  
               __end_ofi2_startTimer 39D4                     ?_I2C_Master_Init 0030  
                   ?_I2C_Master_Read 0001                     ?_I2C_Master_Wait 0001  
                   ?_I2C_Master_Stop 0001                         ?_readPastRun 0080  
               __end_of_angleToPulse 21B0                      __end_of___aldiv 2CCA  
                    __end_of___almod 3116                                ?_main 0001  
                              _ACKEN 007E2C                                _ACKDT 007E2D  
                    __end_of___awdiv 3344                                _EEADR 000FA9  
                    __end_of___ftadd 1C9A                                STR_10 FEB6  
                              STR_11 FE9F                                STR_20 FF27  
                              STR_12 FF03                                STR_13 FF6C  
                              STR_21 FEF0                                STR_22 FF39  
                              STR_14 FF15                                STR_15 FF5B  
                              STR_16 FECA                                STR_17 FF7D  
                              STR_18 FEDD                                STR_19 FF4A  
                    __end_of___awmod 3530                      __end_of___ftdiv 276E  
            ??_servoInterruptService 0010                      __end_of___ftneg 3BD2  
                    __end_of___lldiv 33C6                      __end_of___ftmul 2058  
                              _T0CON 000FD5                      ___awdiv@divisor 002B  
                              _T1CON 000FCD                      __end_of___llmod 3672  
                    __end_of___ftsub 393C                      __end_of___fttol 22F4  
                              _T3CON 000FB1                                i2l187 2A0C  
                              i2l444 398A                                i2l188 29D8  
                              i2l189 29E8                                i2l446 3996  
                              i2l447 39A2                      ___awdiv@counter 002D  
                              _TMR0H 000FD7                                _TMR1H 000FCF  
                              _TMR0L 000FD6                                _TMR3H 000FB3  
                              _TMR1L 000FCE                                _TMR3L 000FB2  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _PORTD 000F83  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_PWRT$OFF 000000  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                    __end_of_lcdHome 3CE8                         ___lltoft@exp 0033  
                      _conveyorServo 0143                      __end_of_lcdInst 3C16  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                    __end_of_getTime 3448                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      __end_of_initLCD 3A64  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 002E  
                              _angle 0137                      __end_of_initRTC 3C84  
                    __end_of_dpowers FE19                                _count 016F  
                              _scale 1366                      __end_of_isdigit 3C54  
                      ___ftpack@sign 0027                                _pulse 015B  
                              _putch 3BD2                      __end_of_setTime 38A0  
                              pclath 000FFA                                tablat 000FF5  
                    __end_of_service 2A48                                status 000FD8  
                 __size_ofi2___awmod 0070                       __CFG_PBADEN$ON 000000  
               __end_of_digitalWrite 2D92                      __initialization 35A0  
                       __end_of_main 1A32                         __end_of_keys FE98  
                             ??_main 011F                        ___fttol@sign1 00B7  
                      __activetblptr 000002                 __size_of_digitalRead 00EA  
               __size_of__tdiv_to_l_ 0132                         _stoppingTime 004C  
                  ?_I2C_Master_Start 0001                      i2digitalWrite@p 000E  
                  ?_I2C_Master_Write 0024                   ??_I2C_Master_Start 0024  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                 ??_I2C_Master_Write 0026                               _ADCON2 000FC0  
                   __end_of___altoft 34C0                     ___llmod@dividend 0030  
                             ?_scale 0098                               _ADRESH 000FC4  
                             _EEADRH 000FAA                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               _EECON1 000FA6  
                             _EECON2 000FA7        keyPressedInterruptService@key 0001  
                   ___awdiv@dividend 0029                     __end_of___awtoft 3B14  
                             ?_putch 0001                     __end_of___ftpack 306A  
                   __end_of___lltoft 37F4                               _INT0IE 007F94  
                             _INT0IF 007F91                               _INT1IE 007F83  
                             _INT1IF 007F80                         sortBattery@V 0116  
                       sortBattery@i 0119                               i2l5220 356A  
                             i2l5212 3550                               i2l5232 3596  
                             i2l5224 357E                               i2l5216 355E  
                             i2l5208 3544                               i2l5160 2DE4  
                             i2l5218 3566                               i2l5162 2DEA  
                             i2l5228 3588                               i2l5172 2E0C  
                             i2l5156 2DD6                               i2l5180 2E26  
                             i2l5174 2E12                               i2l5166 2DF8  
                             i2l5168 2DFE                               i2l5178 2E20  
                             i2l5194 39AE                               i2l5456 2876  
                             _TMR0IE 007F95                               _TMR0IF 007F92  
                             _TMR1IE 007CE8                               _TMR1IF 007CF0  
                             _TMR3IE 007D01                               _SSPADD 000FC8  
                             _TRISC3 007CA3                               _TRISC4 007CA4  
                             _SSPBUF 000FC9                     __end_of_lcdClear 3CD0  
                  _angleToPulse$1398 00CD                       __CFG_XINST$OFF 000000  
                   __end_of__powers_ FE67                               ___ftge 31A8  
                          ??___aldiv 002B                            ??___almod 0039  
                             ___wmul 3B88                            ??___awdiv 002D  
                          ??___ftadd 00A8                       __CFG_STVREN$ON 000000  
                          ??___awmod 0027                            ??___ftdiv 0080  
                          ??___ftneg 0026                            ??___lldiv 002B  
                          ??___ftmul 008F                            ??___llmod 0038  
                          ??___ftsub 003B                            ??___fttol 00B2  
                             _fround 1C9A                               clear_0 35E6  
                             clear_1 35F8                     ___awdiv@quotient 002F  
                    ___awmod@divisor 0025                            ??_lcdHome 0027  
                    ___awmod@counter 0027                               _servos 0163  
                          ??_lcdInst 0025                               _printf 0012  
                          ??_getTime 0028                     __end_of_pinSetup 3AA4  
                   __end_of_setAngle 2BFE                    analogRead@channel 0023  
              ___ftmul@f3_as_product 0093                            ??_initLCD 0027  
                          ??_initRTC 0038                         __pdataCOMRAM 003B  
                          ??_isdigit 0023                      readPastRun@data 0082  
                  __end_ofi2___awmod 35A0                        setAngle@angle 00D6  
                       __mediumconst FDF0                            ??_setTime 0026  
                       ?_showRunMenu 0001                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                       ?_showRunTime 00EB                        setAngle@motor 00D4  
                          ??_service 0014                       i2___awmod@sign 0006  
                         __accesstop 0080              __end_of__initialization 35FE  
                         ___altoft@c 002B                           ___ftadd@f1 00A2  
                         ___ftadd@f2 00A5                           ___ftge@ff1 002F  
                         ___ftge@ff2 0032                        ___rparam_used 000001  
                         ___ftdiv@f1 0035                           ___ftdiv@f2 0038  
                         ___ftdiv@f3 0084                           ___ftneg@f1 0023  
                         ___awtoft@c 002B                __size_ofi2_startTimer 004C  
                         ___ftmul@f1 0089                           ___ftmul@f2 008C  
                         ___ftsub@f1 00AE                           ___ftsub@f2 00B1  
                         ___fttol@f1 00AE                 __end_of_happynewyear FE9F  
                     __pcstackCOMRAM 0001                __size_of_angleToPulse 0158  
                       __pidataBANK1 3B14                           ___lltoft@c 002B  
                      _cylinderMotor 0147                        __end_of_scale 177C  
                       ?_sortBattery 0001                        __end_of_putch 3BF4  
                 __size_of_lcdNibble 0066                           __div_to_l_ 2426  
                  eepromRead@address 0037                 __size_of_readPastRun 0092  
                    showDateTime@day 00F3                      showDateTime@min 00EF  
                    showDateTime@sec 00ED                      showDateTime@mon 00F5  
                    __div_to_l_@exp1 002E                      __div_to_l_@cntr 002D  
                            ??_scale 003B                      __div_to_l_@quot 0029  
                            ??_putch 0027                         i2_startTimer 3988  
                         __pbssBANK0 00FC                           __pbssBANK1 015B  
                       _angleToPulse 2058                __size_of_digitalWrite 00C8  
                 __size_of_initTimer 004A                   __size_of_initServo 00E2  
                         _analogRead 3AA4                        __div_to_l_@f1 0023  
                      __div_to_l_@f2 0026                              ?___ftge 002F  
                            ?___wmul 0031                sortBattery@resolution 010C  
                   _sortBattery$1397 0100                            ?___altoft 002B  
                            ?_fround 0098                           _lcdNewline 3CC0  
                          ?___awtoft 002B                            ?___ftpack 0023  
                            ?_printf 00BD                            ?___lltoft 002B  
                         _eepromRead 3C54       __size_of_servoInterruptService 010C  
      __end_of_servoInterruptService 287A                __end_of_showInterface 2F0E  
                  i2startTimer@timer 0007                            ?_lcdClear 0001  
                   angleToPulse@a000 00D0                     angleToPulse@a180 00C9  
                       _digitalWrite 2CCA                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
            __size_ofi2_digitalWrite 00C8                              _V_LIM_C 0041  
                main@lastBatteryTime 0131                            ?_pinSetup 0001  
                          ?_setAngle 00D4                    __end_of_lcdNibble 36D8  
                  __end_of__npowers_ FE40                              __Hparam 0000  
                         _scale$1401 009B                __end_of_showRunSelect 373C  
                         _keyPressed 3CAA                              __Lparam 0000  
                       readPastRun@i 0090                              ___aldiv 2BFE  
                            ___almod 306A                      __size_of___ftge 0090  
                            ___awdiv 32C0                              ___ftadd 1A32  
                            ___awmod 34C0                           _readKeypad 3B3C  
                            ___ftdiv 265E                              ___ftneg 3BAE  
                            ___lldiv 3344                      __size_of___wmul 0026  
                            ___ftmul 1EFA                              ___llmod 360C  
                            ___ftsub 38F0                              ___fttol 21B0  
                            _n_OTHER 0173                           ??___altoft 002F  
                            __pcinit 35A0                           ??___awtoft 002E  
                         ??___ftpack 0028                      __size_of_fround 0260  
                            __ramtop 1000                              _lcdHome 3CE0  
                            _lcdInst 3BF4                           ??___lltoft 002F  
                            __ptext0 177C                              __ptext1 0E0A  
                            __ptext2 2CCA                              __ptext3 287A  
                            _getTime 33C6                              __ptext4 3AA4  
                            __ptext5 2E5A                              __ptext6 2F0E  
                            __ptext7 3238                              __ptext8 36D8  
                            __ptext9 373C                        ?_showDateTime 0001  
                    __size_of_printf 0DF8                              _padPin1 014B  
                            _padPin2 014F                              _padPin3 016B  
                      startTimer@val 0025                              _initLCD 3A1E  
                  __end_of_hexpowers FE87                          ?__div_to_l_ 0023  
                            _lastKey 005C                              _initRTC 3C6E  
                  __end_of_initTimer 3A1E                    __end_of_initServo 2B2A  
                            _dpowers FDF1                              _isdigit 3C36  
                   ___awmod@dividend 0023                     ___aldiv@dividend 0023  
                            _setTime 384E             __size_of_I2C_Master_Init 005A  
           __size_of_I2C_Master_Read 0026                           ??_lcdClear 0027  
           __size_of_I2C_Master_Wait 0012             __size_of_I2C_Master_Stop 0008  
                      ?_showMainMenu 0001                              _service 0008  
               __size_of_showRunMenu 005C                       __pintcode_body 2964  
               __size_of_showRunTime 00AE                 end_of_initialization 35FE  
                      __Lmediumconst FDF0                              int_func 2964  
                     digitalRead@pin 0023                          ?_analogRead 0023  
                         ??_pinSetup 0023                           ??_setAngle 00D8  
          __size_of_I2C_Master_Start 0008            __size_of_I2C_Master_Write 000A  
                    ___lldiv@divisor 0027                      ___lldiv@counter 002F  
                     setAngle@period 00DA                        ?_showRunStats 00EB  
                            printf@c 00EA                              printf@f 00BD  
                   ___aldiv@quotient 002D                     I2C_Master_Init@c 0030  
                   I2C_Master_Read@a 0024                              postdec1 000FE5  
                            postdec2 000FDD                      _batteryDetected 0052  
                            postinc0 000FEE                              postinc2 000FDE  
                     __tdiv_to_l_@f1 0023                       __tdiv_to_l_@f2 0026  
                      ??_digitalRead 0025                          ?_lcdNewline 0001  
                      ??__tdiv_to_l_ 0029                       ??_showDateTime 00EB  
                          _PORTBbits 000F81                 __size_of_sortBattery 055C  
                   showInterface@key 0104                     showInterface@run 0102  
                        ?_eepromRead 0037                       ??_showMainMenu 003B  
       ??_keyPressedInterruptService 0001                  _redirectAngle_OTHER 004A  
                       _happynewyear FE98                   angleToPulse@offset 00C5  
                 sortBattery@V_float 0102                            i2___awmod 3530  
                         _startTimer 393C                          ___ftdiv@exp 0087  
                        printf@width 00E4                  __size_of__div_to_l_ 0128  
                     ??_showRunStats 003B                          ?_keyPressed 0001  
                        ___ftmul@exp 0092                          ?_readKeypad 0001  
                     __end_of___ftge 3238                       __end_of___wmul 3BAE  
                      __pidataCOMRAM 3C84  __size_of_keyPressedInterruptService 0020  
                     __end_of_fround 1EFA                       __end_of_printf 0E0A  
                __size_of_analogRead 0038                  start_initialization 35A0  
                __end_of_digitalRead 2964                  __end_of__tdiv_to_l_ 2426  
                     initServo@angle 00E0                       initTimer@timer 0023  
                     initServo@motor 00DE                           ?i2___awmod 0001  
                     i2_digitalWrite 2D92                    ??_I2C_Master_Init 0034  
                  ??_I2C_Master_Read 0024                    ??_I2C_Master_Wait 0023  
                  ??_I2C_Master_Stop 0024                  __size_of_lcdNewline 0008  
                    ___llmod@divisor 0034                      ___llmod@counter 0038  
                __size_of_eepromRead 001A                           initServo@i 00E6  
                   showDateTime@hour 00F1                     showDateTime@year 00F7  
                           ??___ftge 0035                             ??___wmul 0035  
                        __pdataBANK1 0133                     __CFG_LPT1OSC$OFF 000000  
                           ??_fround 003B                        ??_readPastRun 003B  
                     readPastRun@run 0080                             ??_printf 00C7  
                  __size_of___altoft 0078                           fround@prec 00A1  
                  __size_of___awtoft 0038                    __size_of___ftpack 00AE  
                  __size_of___lltoft 005C                          __pbssCOMRAM 004E  
                      __pcstackBANK0 0080                        __pcstackBANK1 0100  
                __size_of_keyPressed 000C               __end_ofi2_digitalWrite 2E5A  
             sortBattery@targetAngle 0114                         _isdigit$1031 0024  
                      keyPressed@key 0023                          ?_startTimer 0023  
                  __size_of_lcdClear 0008                  __size_of_readKeypad 0026  
               __end_of_showDateTime 265E                    i2digitalWrite@pin 0007  
                  i2digitalWrite@val 0009                     _I2C_Master_Start 3CD8  
                   _I2C_Master_Write 3CB6                    __CFG_CCP2MX$PORTC 000000  
                  __size_of_pinSetup 0040                 __end_of_showMainMenu 38F0  
                  __size_of_setAngle 00D4                            __pintcode 0008  
                      __pmediumconst FDF0                            _lcdNibble 3672  
                           ?___aldiv 0023                             ?___almod 0031  
                           ?___awdiv 0029                             ?___ftadd 00A2  
                           ?___awmod 0023                             ?___ftdiv 0035  
                           ?___ftneg 0023                             ?___lldiv 0023  
                           ?___ftmul 0089                             ?___llmod 0030  
                           ?___ftsub 00AE                            __npowers_ FE19  
                           ?___fttol 00AE                          _digitalRead 287A  
                   ___almod@dividend 0031                             ?_lcdHome 0001  
                           ?_lcdInst 0001                          __tdiv_to_l_ 22F4  
                           ?_getTime 0026                         ??__div_to_l_ 0029  
                           ?_initLCD 0001                             ?_initRTC 0001  
                    startTimer@timer 0023                             ?_isdigit 0001  
 __end_of_keyPressedInterruptService 3C36           _keyPressedInterruptService 3C16  
                           ?_setTime 0001                  __end_of_readPastRun 31A8  
               __end_of_showRunStats 32C0                             ?_service 0001  
                          _hexpowers FE67                            _initTimer 39D4  
                          _initServo 2A48                      ?i2_digitalWrite 0007  
              _servoInterruptService 276E                          ??i2___awmod 0005  
                     __size_of_scale 0416                       __size_of_putch 0022  
                           _AA_float 013F                      ___aldiv@divisor 0027  
                    ___aldiv@counter 002B                       sortBattery@Vcc 0109  
                     ___wmul@product 0035                             _LATDbits 000F8C  
                       ??_analogRead 0027                   __end_of__div_to_l_ 254E  
                           i2u492_44 2DBC                             i2u492_45 2DB6  
             __size_of_showInterface 00B4                     __CFG_WDTPS$32768 000000  
                         ?_lcdNibble 0001                       _padAngle_CLOSE 0044  
                          _terminate 005A                        digitalWrite@p 002A  
                         service@key 0022                         ??_lcdNewline 0027  
                __size_of_startTimer 004C                    angleToPulse@angle 00BD  
                    main@cylinderDur 012B                    ___wmul@multiplier 0031  
                      lcdNibble@data 0024                         ??_eepromRead 003B  
                         printf@flag 00E6                        lcdNibble@temp 0023  
                         printf@fval 00DD                           printf@prec 00E8  
                      ??_showRunMenu 003B                        ??_showRunTime 00ED  
                 __end_of_analogRead 3ADC                             _V_LIM_AA 003E  
                           _V_LIM_9V 003B               __size_of_showRunSelect 0064  
                         ?_initTimer 0023                           ?_initServo 00DE  
                  sortBattery@signal 0107             sortBattery@pos_v_counter 0105  
                I2C_Master_Read@temp 0025                            copy_data0 35B4  
                          copy_data1 35D4                   i2___awmod@dividend 0001  
                 __end_of_lcdNewline 3CC8                        readKeypad@key 0023  
                           __Hrparam 0000                         ??_keyPressed 0023  
                           __Lrparam 0000                   __end_of_eepromRead 3C6E  
                 __CFG_BOREN$SBORDIS 000000                         ??_readKeypad 0023  
                      ??_sortBattery 00EB                     __size_of___aldiv 00CC  
                   __size_of___almod 00AC                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 0110                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 3448  
                   __size_of___ftmul 015E                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                           ___awtoft 3ADC                             ___ftpack 2FBC  
                        _readPastRun 3116                          _fround$1400 009B  
                        _cylinderDir 0133                          _fround$1399 009E  
                           ___lltoft 3798                     __size_of_lcdHome 0008  
                   __size_of_lcdInst 0022                     __size_of_getTime 0082  
                      showDateTime@t 00F9                            setAngle@i 00DC  
                    _I2C_Master_Init 37F4                      _I2C_Master_Read 3B62  
                   __size_of_initLCD 0046                      _I2C_Master_Wait 3C98  
                   __size_of_initRTC 0016                      _I2C_Master_Stop 3CD0  
                   __size_of_isdigit 001E               ?_servoInterruptService 0001  
                      _showInterface 2E5A                             _lcdClear 3CC8  
                   __size_of_setTime 0052                             __ptext10 38A0  
                           __ptext11 3B3C                             __ptext20 34C0  
                           __ptext12 254E                             __ptext21 32C0  
                           __ptext13 384E                             __ptext30 3CAA  
                           __ptext22 22F4                             __ptext14 0012  
                           __ptext31 3C6E                             __ptext23 2426  
                           __ptext15 1366                             __ptext40 3116  
                           __ptext32 37F4                             __ptext24 3798  
                           __ptext16 3BD2                             __ptext41 3C54  
                           __ptext33 3344                             __ptext25 360C  
                           __ptext17 3CC0                             __ptext50 1EFA  
                           __ptext42 3B88                             __ptext34 33C6  
                           __ptext26 38F0                             __ptext18 3C36  
                           __ptext51 265E                             __ptext43 3A64  
                           __ptext35 3CB6                             __ptext27 3BAE  
                           __ptext19 1C9A                             __ptext60 306A  
                           __ptext52 1A32                             __ptext44 3CE0  
                           __ptext36 3CD0                             __ptext28 31A8  
                           __ptext61 2BFE                             __ptext53 3ADC  
                           __ptext45 2A48                             __ptext37 3CD8  
                           __ptext29 3CC8                             __ptext54 3448  
                           __ptext46 393C                             __ptext38 3B62  
                           __ptext63 276E                             __ptext55 2FBC  
                           __ptext47 2B2A                             __ptext39 3C98  
                           __ptext64 3988                             __ptext56 39D4  
                           __ptext48 2058                             __ptext65 2D92  
                           __ptext57 3A1E                             __ptext49 21B0  
                           __ptext66 3530                             __ptext58 3BF4  
                           __ptext67 3C16                             __ptext59 3672  
                 __end_of_keyPressed 3CB6                __size_of_showDateTime 0110  
                           __powers_ FE40                     __size_of_service 2A40  
                    i2startTimer@val 0009                      ___almod@divisor 0035  
                      ?i2_startTimer 0007                             _padServo 0153  
                    ___almod@counter 0039                  __end_of_showRunMenu 3798  
                 __end_of_readKeypad 3B62                  __end_of_showRunTime 2FBC  
                      ?_angleToPulse 00BD                        __size_of_main 02B6  
              __size_of_showMainMenu 0050                             _pinSetup 3A64  
                           _setAngle 2B2A                        _showRunSelect 36D8  
                           _prevTime 0175                     sortBattery@V_223 011C  
                        ??_lcdNibble 0023                             getTime@i 0038  
                     showInterface@n 0100                        _padAngle_OPEN 0139  
                           int$flags 005D                     sortBattery@i_228 0112  
                   sortBattery@V_max 010F                            printf@idx 00D0  
                          printf@len 00D3                            printf@exp 00DB  
                          printf@val 00E0                        showMainMenu@k 00EB  
              __size_of_showRunStats 0088                         _showDateTime 254E  
                  i2___awmod@divisor 0003                            putch@data 0027  
                  i2___awmod@counter 0005             __end_of_I2C_Master_Start 3CE0  
                __end_of_sortBattery 1366             __end_of_I2C_Master_Write 3CC0  
                         _INTCONbits 000FF2                       ?_showInterface 0001  
                      ?_digitalWrite 0023                          ??_initTimer 0025  
                        ??_initServo 00E2                             isdigit@c 0025  
                       _showMainMenu 38A0                             scale@scl 009E  
                     ??i2_startTimer 000D                         ??_startTimer 0029  
                           intlevel2 0000                     __tdiv_to_l_@exp1 0031  
                   __tdiv_to_l_@cntr 0030                       ??_angleToPulse 00C1  
                   __tdiv_to_l_@quot 002C                     ___lldiv@dividend 0023  
                           setTime@i 0026                       ?_showRunSelect 0001  
                       _showRunStats 3238                     _redirectAngle_AA 0048  
                   _redirectAngle_9V 013B                             printf@ap 00D5  
                           printf@cp 00D1              __end_of_I2C_Master_Init 384E  
            __end_of_I2C_Master_Read 3B88              __end_of_I2C_Master_Wait 3CAA  
            __end_of_I2C_Master_Stop 3CD8                          lcdInst@data 0026  
                       ?_digitalRead 0023                         ?__tdiv_to_l_ 0023  
                 __end_of_startTimer 3988                          _printf$1402 00CD  
                   ??i2_digitalWrite 000B                     ___lldiv@quotient 002B  
                  I2C_Master_Write@d 0024                       ??_digitalWrite 0027  
        ?_keyPressedInterruptService 0001                         ___aldiv@sign 002C  
                        _showRunMenu 373C                          _showRunTime 2F0E  
                    _redirectAngle_C 013D                          getTime@time 002A  
                   _padAngle_NEUTRAL 0046                      digitalWrite@pin 0023  
                    digitalWrite@val 0025                         ___almod@sign 003A  
                       showRunMenu@k 00EC                       showRunMenu@key 00EB  
